commit 6dafe673d5376ae1b01b27c985fa32ea0f2fc071
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Wed Jan 20 12:18:51 2010 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Wed Jan 20 12:18:51 2010 -0800

C# Port:
* Merge CL6433

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6577]

diff --git a/Antlr3.Test/ST4/TestCompiler.cs b/Antlr3.Test/ST4/TestCompiler.cs
index 2c51526..e6ddb61 100644
--- a/Antlr3.Test/ST4/TestCompiler.cs
+++ b/Antlr3.Test/ST4/TestCompiler.cs
@@ -8,12 +8,6 @@
[TestClass]
public class TestCompiler : StringTemplateTestBase
{
-        [TestInitialize]
-        public void setUp()
-        {
-            TemplateCompiler.subtemplateCount = 0;
-        }
-
[TestMethod]
public void TestAttr()
{
@@ -21,9 +15,9 @@
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, " +
-                "write 0 2, " +
+                "write, " +
"load_attr 1, " +
-                "write 3 8";
+                "write";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name]";
@@ -37,7 +31,7 @@
string template = "hi <foo()>";
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
-                "load_str 0, write 0 2, new 1, write 3 9";
+                "load_str 0, write, new 1, write";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , /foo]";
@@ -51,7 +45,7 @@
string template = "hi <a.b>";
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
-                "load_str 0, write 0 2, load_attr 1, load_prop 2, write 3 7";
+                "load_str 0, write, load_attr 1, load_prop 2, write";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , a, b]";
@@ -65,8 +59,8 @@
string template = "<u.id>: <u.name>";
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
-                "load_attr 0, load_prop 1, write 0 5, load_str 2, write 6 7, " +
-                "load_attr 0, load_prop 3, write 8 15";
+                "load_attr 0, load_prop 1, write, load_str 2, write, " +
+                "load_attr 0, load_prop 3, write";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[u, id, : , name]";
@@ -80,7 +74,7 @@
string template = "hi <name:bold>";
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
-                "load_str 0, write 0 2, load_attr 1, load_str 2, map, write 3 13";
+                "load_str 0, write, load_attr 1, load_str 2, map, write";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, /bold]";
@@ -95,13 +89,13 @@
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, " +
-                "write 0 2, " +
+                "write, " +
"load_attr 1, " +
"load_str 2, " +
"map, " +
"load_str 3, " +
"map, " +
-                "write 3 21";
+                "write";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, /bold, /italics]";
@@ -115,7 +109,7 @@
string template = "hi <name:bold,italics>";
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
-                "load_str 0, write 0 2, load_attr 1, load_str 2, load_str 3, rot_map 2, write 3 21";
+                "load_str 0, write, load_attr 1, load_str 2, load_str 3, rot_map 2, write";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, /bold, /italics]";
@@ -129,7 +123,7 @@
string template = "hi <name:{n | <n>}>";
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
-                "load_str 0, write 0 2, load_attr 1, load_str 2, map, write 3 18";
+                "load_str 0, write, load_attr 1, load_str 2, map, write";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, /_sub1]";
@@ -143,7 +137,7 @@
string template = "go: <if(name)>hi, foo<endif>";
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
-                "load_str 0, write 0 3, load_attr 1, brf 22, load_str 2, write 14 20";
+                "load_str 0, write, load_attr 1, brf 14, load_str 2, write";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo]";
@@ -158,14 +152,14 @@
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, " +
-                "write 0 3, " +
+                "write, " +
"load_attr 1, " +
-                "brf 25, " +
+                "brf 17, " +
"load_str 2, " +
-                "write 14 20, " +
-                "br 33, " +
+                "write, " +
+                "br 21, " +
"load_str 3, " +
-                "write 27 29";
+                "write";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo, bye]";
@@ -180,16 +174,16 @@
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, " +
-                "write 0 3, " +
+                "write, " +
"load_attr 1, " +
-                "brf 25, " +
+                "brf 17, " +
"load_str 2, " +
-                "write 14 20, " +
-                "br 39, " +
+                "write, " +
+                "br 27, " +
"load_attr 3, " +
-                "brf 39, " +
+                "brf 27, " +
"load_str 4, " +
-                "write 35 40";
+                "write";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo, user, a user]";
@@ -204,19 +198,19 @@
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, " +
-                "write 0 3, " +
+                "write, " +
"load_attr 1, " +
-                "brf 25, " +
+                "brf 17, " +
"load_str 2, " +
-                "write 14 20, " +
-                "br 50, " +
+                "write, " +
+                "br 34, " +
"load_attr 3, " +
-                "brf 42, " +
+                "brf 30, " +
"load_str 4, " +
-                "write 35 40, " +
-                "br 50, " +
+                "write, " +
+                "br 34, " +
"load_str 5, " +
-                "write 47 49";
+                "write";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo, user, a user, bye]";
@@ -230,7 +224,7 @@
string template = "hi <name; separator=\"x\">";
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
-                "load_str 0, write 0 2, load_attr 1, options, load_str 2, store_option 3, write_opt 3 23";
+                "load_str 0, write, load_attr 1, options, load_str 2, store_option 3, write_opt";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, x]";
@@ -244,7 +238,7 @@
string template = "hi <name; separator={, }>";
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
-                "load_str 0, write 0 2, load_attr 1, options, new 2, store_option 3, write_opt 3 24";
+                "load_str 0, write, load_attr 1, options, new 2, store_option 3, write_opt";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, /_sub1]";
@@ -259,7 +253,7 @@
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, " +
-                "write 0 2, " +
+                "write, " +
"load_attr 1, " +
"options, " +
"load_str 2, " +
@@ -268,7 +262,7 @@
"store_option 4, " +
"load_str 4, " +
"store_option 3, " +
-                "write_opt 3 44";
+                "write_opt";
string stringsExpected = // the ", , ," is the ", " separator string
"[hi , name, true, /foo, , ]";
string stringsResult = code.strings.ToElementString();
@@ -282,7 +276,7 @@
{
string template = "<[]>";
CompiledTemplate code = new TemplateCompiler().Compile(template);
-            string asmExpected = "list, write 0 3";
+            string asmExpected = "list, write";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[]";
@@ -295,7 +289,7 @@
{
string template = "<[a,b]>";
CompiledTemplate code = new TemplateCompiler().Compile(template);
-            string asmExpected = "list, load_attr 0, add, load_attr 1, add, write 0 6";
+            string asmExpected = "list, load_attr 0, add, load_attr 1, add, write";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[a, b]";
@@ -310,7 +304,7 @@
// compile as if in root dir and in template 'a'
CompiledTemplate code = new TemplateCompiler(TemplateName.Root, new TemplateName("a")).Compile(template);
string asmExpected =
-                "new 0, write 0 12";
+                "new 0, write";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[/region__a__r]";
@@ -325,7 +319,7 @@
// compile as if in root dir and in template 'a'
CompiledTemplate code = new TemplateCompiler(TemplateName.Root, new TemplateName("a")).Compile(template);
string asmExpected =
-                "load_str 0, write 0 1, new 1, write 2 7";
+                "load_str 0, write, new 1, write";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[x:, /region__a__r]";
diff --git a/Antlr3.Test/ST4/TestCoreBasics.cs b/Antlr3.Test/ST4/TestCoreBasics.cs
index 3f56f44..76cf5b3 100644
--- a/Antlr3.Test/ST4/TestCoreBasics.cs
+++ b/Antlr3.Test/ST4/TestCoreBasics.cs
@@ -27,6 +27,7 @@
st.Add("name", "Ter");
string expected = "hi Ter!";
string result = st.Render();
+            st.code.Dump();
Assert.AreEqual(expected, result);
}

diff --git a/StringTemplate4/Compiler/Bytecode.cs b/StringTemplate4/Compiler/Bytecode.cs
index c840fc9..e2c994f 100644
--- a/StringTemplate4/Compiler/Bytecode.cs
+++ b/StringTemplate4/Compiler/Bytecode.cs
@@ -138,8 +138,8 @@ namespace StringTemplate.Compiler
new Instruction("new",STRING),
new Instruction("new_ind"),
new Instruction("super_new",STRING),
-                new Instruction("write", INT, INT), // write delimiter-start-in-template, stop
-                new Instruction("write_opt", INT, INT),
+                new Instruction("write"),
+                new Instruction("write_opt"),
new Instruction("map"),
new Instruction("rot_map", INT),
new Instruction("par_map", INT),
diff --git a/StringTemplate4/Compiler/CompiledTemplate.cs b/StringTemplate4/Compiler/CompiledTemplate.cs
index 58a36db..62796c1 100644
--- a/StringTemplate4/Compiler/CompiledTemplate.cs
+++ b/StringTemplate4/Compiler/CompiledTemplate.cs
@@ -76,6 +76,7 @@ namespace StringTemplate.Compiler
public string[] strings;
public byte[] instrs;        // byte-addressable code memory.
public int codeSize;
+        public Interval[] sourceMap; // maps IP to range in template pattern

[DebuggerHidden]
public string Disassembly
diff --git a/StringTemplate4/Compiler/ICodeGenerator.cs b/StringTemplate4/Compiler/ICodeGenerator.cs
index eabdd45..0bd4476 100644
--- a/StringTemplate4/Compiler/ICodeGenerator.cs
+++ b/StringTemplate4/Compiler/ICodeGenerator.cs
@@ -48,9 +48,12 @@ namespace StringTemplate.Compiler
}

void Emit(short opcode);
+        void Emit(short opcode, int sourceStart, int sourceStop);
void Emit(short opcode, int arg);
-        void Emit(short opcode, int arg1, int arg2);
+        void Emit(short opcode, int arg, int sourceStart, int sourceStop);
+        void Emit(short opcode, int arg1, int arg2, int sourceStart, int sourceStop);
void Emit(short opcode, string s);
+        void Emit(short opcode, string s, int sourceStart, int sourceStop);
void Write(int addr, short value);
/** Return address where next instruction will be written */
int Address();
diff --git a/StringTemplate4/Compiler/Interval.cs b/StringTemplate4/Compiler/Interval.cs
new file mode 100644
index 0000000..cd1c9a8
--- /dev/null
+++ b/StringTemplate4/Compiler/Interval.cs
@@ -0,0 +1,56 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2005-2008 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2008-2009 Sam Harwell
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace StringTemplate.Compiler
+{
+    public struct Interval
+    {
+        public Interval(int a, int b)
+            : this()
+        {
+            this.A = a;
+            this.B = b;
+        }
+
+        public int A
+        {
+            get;
+            private set;
+        }
+
+        public int B
+        {
+            get;
+            private set;
+        }
+    }
+}
diff --git a/StringTemplate4/Compiler/TemplateCompiler.cs b/StringTemplate4/Compiler/TemplateCompiler.cs
index 14b5d1a..2aa58d4 100644
--- a/StringTemplate4/Compiler/TemplateCompiler.cs
+++ b/StringTemplate4/Compiler/TemplateCompiler.cs
@@ -183,19 +183,29 @@ namespace StringTemplate.Compiler

public void Emit(short opcode)
{
+            Emit(opcode, -1, -1);
+        }
+
+        public void Emit(short opcode, int sourceStart, int sourceStop)
+        {
EnsureCapacity(1);
instrs[ip++] = (byte)opcode;
}

public void Emit(short opcode, int arg)
{
+            Emit(opcode, arg, -1, -1);
+        }
+
+        public void Emit(short opcode, int arg, int sourceStart, int sourceStop)
+        {
Emit(opcode);
EnsureCapacity(2);
WriteShort(instrs, ip, (short)arg);
ip += 2;
}

-        public void Emit(short opcode, int arg1, int arg2)
+        public void Emit(short opcode, int arg1, int arg2, int sourceStart, int sourceStop)
{
Emit(opcode, arg1);
EnsureCapacity(2);
@@ -205,6 +215,11 @@ namespace StringTemplate.Compiler

public void Emit(short opcode, string s)
{
+            Emit(opcode, s, -1, -1);
+        }
+
+        public void Emit(short opcode, string s, int sourceStart, int sourceStop)
+        {
int i = DefineString(s);
Emit(opcode, i);
}
diff --git a/StringTemplate4/Compiler/TemplateParser.g3 b/StringTemplate4/Compiler/TemplateParser.g3
index 3902cc5..fbe1885 100644
--- a/StringTemplate4/Compiler/TemplateParser.g3
+++ b/StringTemplate4/Compiler/TemplateParser.g3
@@ -67,7 +67,7 @@ options {backtrack=true; k=2;}
|	text
|   (i=INDENT {Indent($i.text);})? region
{
-						 gen.Emit(Bytecode.INSTR_NEW, $region.name.FullName);
+						 gen.Emit(Bytecode.INSTR_NEW, $region.name.FullName, $region.start.StartIndex, $region.start.StopIndex);
gen.Emit(Bytecode.INSTR_WRITE, $region.start.StartIndex, $region.stop.StartIndex);
}
|	i=INDENT         {Indent($i.text);}
@@ -80,7 +80,7 @@ text
:	TEXT
{
if ( $TEXT.text.Length>0 ) {
-			gen.Emit(Bytecode.INSTR_LOAD_STR, $TEXT.text);
+			gen.Emit(Bytecode.INSTR_LOAD_STR, $TEXT.text, $TEXT.StartIndex, $TEXT.StopIndex);
gen.Emit(Bytecode.INSTR_WRITE, $TEXT.StartIndex, $TEXT.StopIndex);
}
}
@@ -89,8 +89,8 @@ text
exprTag
:	LDELIM
expr
-		(	';' exprOptions {gen.Emit(Bytecode.INSTR_WRITE_OPT,$LDELIM.StartIndex,input.LT(1).StartIndex);}
-		|	                {gen.Emit(Bytecode.INSTR_WRITE,$LDELIM.StartIndex,input.LT(1).StartIndex);}
+		(	';' exprOptions {gen.Emit(Bytecode.INSTR_WRITE_OPT, $LDELIM.StartIndex, input.LT(1).StartIndex);}
+		|	                {gen.Emit(Bytecode.INSTR_WRITE, $LDELIM.StartIndex, input.LT(1).StartIndex);}
)
RDELIM
;
@@ -261,8 +261,8 @@ option
;

exprNoComma
-	:	memberExpr ( ':' templateRef {gen.Emit(Bytecode.INSTR_MAP);} )?
-	|	subtemplate {gen.Emit(Bytecode.INSTR_NEW, $subtemplate.name.FullName);}
+	:	memberExpr ( ':' templateRef {gen.Emit(Bytecode.INSTR_MAP, $templateRef.start.StartIndex, $templateRef.start.StopIndex);} )?
+	|	subtemplate {gen.Emit(Bytecode.INSTR_NEW, $subtemplate.name.FullName, $subtemplate.start.StartIndex, $subtemplate.start.StopIndex);}
;

expr
@@ -271,7 +271,7 @@ expr
subtemplate
{
var prefixed = PrefixedName($subtemplate.name);
-		gen.Emit(Bytecode.INSTR_NEW, prefixed != null ? prefixed.FullName : null);}
+		gen.Emit(Bytecode.INSTR_NEW, prefixed != null ? prefixed.FullName : null, $subtemplate.start.StartIndex, $subtemplate.stop.StopIndex);}
;

mapExpr
@@ -287,8 +287,8 @@ mapExpr

memberExpr
:	callExpr
-		(	'.' ID {gen.Emit(Bytecode.INSTR_LOAD_PROP, $ID.text);}
-		|	'.' '(' mapExpr ')' {gen.Emit(Bytecode.INSTR_LOAD_PROP_IND);}
+		(	'.' ID {gen.Emit(Bytecode.INSTR_LOAD_PROP, $ID.text, $ID.StartIndex, $ID.StopIndex);}
+		|	'.' lp='(' mapExpr rp=')' {gen.Emit(Bytecode.INSTR_LOAD_PROP_IND, $lp.StartIndex, $rp.StopIndex);}
)*
;

@@ -299,44 +299,44 @@ options {k=2;} // prevent full LL(*), which fails, falling back on k=1; need k=2
|	(s='super' '.')? ID
{
var prefixed = PrefixedName(new TemplateName($ID.text));
-		gen.Emit($s!=null?Bytecode.INSTR_SUPER_NEW:Bytecode.INSTR_NEW, prefixed != null ? prefixed.FullName : null);
+		gen.Emit($s!=null?Bytecode.INSTR_SUPER_NEW:Bytecode.INSTR_NEW, prefixed != null ? prefixed.FullName : null, $start.StartIndex, $ID.StopIndex);
}
'(' args? ')'
-	|	'@' (s='super' '.')? ID '(' ')'	// convert <@r()> to <region__enclosingTemplate__r()>
+	|	'@' (s='super' '.')? ID '(' rp=')'	// convert <@r()> to <region__enclosingTemplate__r()>
{
TemplateName mangled = TemplateGroup.GetMangledRegionName(_enclosingTemplateName, $ID.text);
gen.DefineBlankRegion(PrefixedName(mangled));
var prefixed = PrefixedName(mangled);
-		gen.Emit($s!=null?Bytecode.INSTR_SUPER_NEW:Bytecode.INSTR_NEW, prefixed != null ? prefixed.FullName : null);
+		gen.Emit($s!=null?Bytecode.INSTR_SUPER_NEW:Bytecode.INSTR_NEW, prefixed != null ? prefixed.FullName : null, $start.StartIndex, $rp.StartIndex);
}
|	primary
;

primary
:	o=ID	  {RefAttr($o);}
-	|	STRING    {gen.Emit(Bytecode.INSTR_LOAD_STR, Misc.Strip($STRING.text,1));}
+	|	STRING    {gen.Emit(Bytecode.INSTR_LOAD_STR, Misc.Strip($STRING.text,1), $STRING.StartIndex, $STRING.StopIndex);}
|	list
-	|	'(' expr ')' {gen.Emit(Bytecode.INSTR_TOSTR);}
-		( {gen.Emit(Bytecode.INSTR_NEW_IND);} '(' args? ')' )? // indirect call
+	|	lp='(' expr rp=')' {gen.Emit(Bytecode.INSTR_TOSTR);}
+		( {gen.Emit(Bytecode.INSTR_NEW_IND, $lp.StartIndex, $rp.StartIndex);} '(' args? ')' )? // indirect call
;

args:	arg (',' arg)* ;

-arg :	ID '=' exprNoComma {gen.Emit(Bytecode.INSTR_STORE_ATTR, $ID.text);}
-	|	exprNoComma        {gen.Emit(Bytecode.INSTR_STORE_SOLE_ARG);}
+arg :	ID '=' exprNoComma {gen.Emit(Bytecode.INSTR_STORE_ATTR, $ID.text, $ID.StartIndex, $exprNoComma.stop.StopIndex);}
+	|	exprNoComma        {gen.Emit(Bytecode.INSTR_STORE_SOLE_ARG, $exprNoComma.start.StartIndex, $exprNoComma.stop.StopIndex);}
|	elip='...'		   {gen.Emit(Bytecode.INSTR_SET_PASS_THRU);}
;

templateRef
:	ID			{
var prefixed = PrefixedName(new TemplateName($ID.text));
-					gen.Emit(Bytecode.INSTR_LOAD_STR, prefixed != null ? prefixed.FullName : null);
+					gen.Emit(Bytecode.INSTR_LOAD_STR, prefixed != null ? prefixed.FullName : null, $ID.StartIndex, $ID.StopIndex);
}
|	subtemplate {
var prefixed = PrefixedName($subtemplate.name);
-					gen.Emit(Bytecode.INSTR_LOAD_STR, prefixed != null ? prefixed.FullName : null);
+					gen.Emit(Bytecode.INSTR_LOAD_STR, prefixed != null ? prefixed.FullName : null, $subtemplate.start.StartIndex, $subtemplate.start.StopIndex);
}
-	|	'(' mapExpr ')' {gen.Emit(Bytecode.INSTR_TOSTR);}
+	|	lp='(' mapExpr rp=')' {gen.Emit(Bytecode.INSTR_TOSTR, $lp.StartIndex, $rp.StartIndex);}
;

list:	{gen.Emit(Bytecode.INSTR_LIST);} '[' listElement (',' listElement)* ']'
@@ -344,5 +344,5 @@ list:	{gen.Emit(Bytecode.INSTR_LIST);} '[' listElement (',' listElement)* ']'
;

listElement
-    :   exprNoComma {gen.Emit(Bytecode.INSTR_ADD);}
+    :   exprNoComma {gen.Emit(Bytecode.INSTR_ADD, $exprNoComma.start.StartIndex, $exprNoComma.stop.StopIndex);}
;
diff --git a/StringTemplate4/Compiler/TemplateParserHelper.cs b/StringTemplate4/Compiler/TemplateParserHelper.cs
index fdb27cd..cb8e21c 100644
--- a/StringTemplate4/Compiler/TemplateParserHelper.cs
+++ b/StringTemplate4/Compiler/TemplateParserHelper.cs
@@ -80,11 +80,11 @@ namespace StringTemplate.Compiler
string name = id.Text;
if (Interpreter.predefinedAttributes.Contains(name))
{
-                gen.Emit(Bytecode.INSTR_LOAD_LOCAL, name);
+                gen.Emit(Bytecode.INSTR_LOAD_LOCAL, name, id.StartIndex, id.StopIndex);
}
else
{
-                gen.Emit(Bytecode.INSTR_LOAD_ATTR, name);
+                gen.Emit(Bytecode.INSTR_LOAD_ATTR, name, id.StartIndex, id.StopIndex);
}
}

@@ -97,7 +97,7 @@ namespace StringTemplate.Compiler
return;
}

-            gen.Emit(Bytecode.INSTR_STORE_OPTION, i);
+            gen.Emit(Bytecode.INSTR_STORE_OPTION, i, id.StartIndex, id.StopIndex);
}

public void DefaultOption(IToken id)
@@ -109,7 +109,7 @@ namespace StringTemplate.Compiler
return;
}

-            gen.Emit(Bytecode.INSTR_LOAD_STR, v);
+            gen.Emit(Bytecode.INSTR_LOAD_STR, v, id.StartIndex, id.StopIndex);
}

public void Func(IToken id)
@@ -118,11 +118,11 @@ namespace StringTemplate.Compiler
if (!TemplateCompiler.funcs.TryGetValue(id.Text, out funcBytecode))
{
ErrorManager.CompileTimeError(ErrorType.NoSuchFunction, id);
-                gen.Emit(Bytecode.INSTR_NOOP);
+                gen.Emit(Bytecode.INSTR_NOOP, id.StartIndex, id.StopIndex);
return;
}

-            gen.Emit(funcBytecode);
+            gen.Emit(funcBytecode, id.StartIndex, id.StopIndex);
}

public void Indent(string indent)
@@ -147,11 +147,19 @@ namespace StringTemplate.Compiler
{
}

+            public void Emit(short opcode, int startIndex, int stopIndex)
+            {
+            }
+
public void Emit(short opcode, int arg)
{
}

-            public void Emit(short opcode, int arg1, int arg2)
+            public void Emit(short opcode, int arg, int startIndex, int stopIndex)
+            {
+            }
+
+            public void Emit(short opcode, int arg1, int arg2, int startIndex, int stopIndex)
{
}

@@ -159,6 +167,10 @@ namespace StringTemplate.Compiler
{
}

+            public void Emit(short opcode, string s, int startIndex, int stopIndex)
+            {
+            }
+
public void Write(int addr, short value)
{
}
diff --git a/StringTemplate4/Interpreter.cs b/StringTemplate4/Interpreter.cs
index 5313cf6..a6c14f7 100644
--- a/StringTemplate4/Interpreter.cs
+++ b/StringTemplate4/Interpreter.cs
@@ -246,22 +246,26 @@ namespace StringTemplate
options[optionIndex] = o; // store value into options on stack
break;
case Bytecode.INSTR_WRITE:
+#if false
int exprStart = GetShort(code, ip);
ip += 2;
int exprStop = GetShort(code, ip);
ip += 2;
+#endif
o = operands[sp--];
-                    nw = WriteObjectNoOptions(@out, self, o, exprStart, exprStop);
+                    nw = WriteObjectNoOptions(@out, self, o);
n += nw;
break;
case Bytecode.INSTR_WRITE_OPT:
+#if false
exprStart = GetShort(code, ip);
ip += 2;
exprStop = GetShort(code, ip);
ip += 2;
+#endif
options = (object[])operands[sp--]; // get options
o = operands[sp--];                 // get option to write
-                    nw = WriteObjectWithOptions(@out, self, o, options, exprStart, exprStop);
+                    nw = WriteObjectWithOptions(@out, self, o, options);
n += nw;
break;
case Bytecode.INSTR_MAP:
@@ -420,20 +424,22 @@ namespace StringTemplate
return n;
}

-        protected int WriteObjectNoOptions(ITemplateWriter @out, Template self, object o, int exprStart, int exprStop)
+        protected int WriteObjectNoOptions(ITemplateWriter @out, Template self, object o)
{
int start = @out.Index; // track char we're about to write
int n = WriteObject(@out, self, o, null);

if (group.Debug)
{
+                int exprStart = -1;
+                int exprStop = -1;
events.Add(new EvalExprEvent((DebugTemplate)self, start, @out.Index - 1, exprStart, exprStop));
}

return n;
}

-        protected int WriteObjectWithOptions(ITemplateWriter @out, Template self, object o, object[] options, int exprStart, int exprStop)
+        protected int WriteObjectWithOptions(ITemplateWriter @out, Template self, object o, object[] options)
{
int start = @out.Index; // track char we're about to write
// precompute all option values (render all the way to strings)
@@ -457,7 +463,9 @@ namespace StringTemplate

if (group.Debug)
{
-                events.Add(new EvalTemplateEvent((DebugTemplate)self, start, @out.Index - 1));
+                int exprStart = -1;
+                int exprStop = -1;
+                events.Add(new EvalExprEvent((DebugTemplate)self, start, @out.Index - 1, exprStart, exprStop));
}

return n;
@@ -944,7 +952,7 @@ namespace StringTemplate
StringWriter sw = new StringWriter();
//Interpreter interp = new Interpreter(group, new NoIndentWriter(sw), culture);
//interp.WriteObjectNoOptions(self, value, -1, -1);
-                WriteObjectNoOptions(new NoIndentWriter(sw), self, value, -1, -1);
+                WriteObjectNoOptions(new NoIndentWriter(sw), self, value);
return sw.ToString();
}
return null;
diff --git a/StringTemplate4/StringTemplate4.csproj b/StringTemplate4/StringTemplate4.csproj
index e34a292..b388825 100644
--- a/StringTemplate4/StringTemplate4.csproj
+++ b/StringTemplate4/StringTemplate4.csproj
@@ -52,6 +52,7 @@
<Compile Include="Compiler\CompiledTemplate.cs" />
<Compile Include="Compiler\FormalArgument.cs" />
<Compile Include="Compiler\ICodeGenerator.cs" />
+    <Compile Include="Compiler\Interval.cs" />
<Compile Include="Compiler\StringTable.cs" />
<Compile Include="Compiler\TemplateCompiler.cs" />
<Compile Include="Compiler\TemplateException.cs" />

