commit 2143e3e5030cda48e9015244bdb8a39508188283
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sun Apr 10 11:41:33 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sun Apr 10 11:41:33 2011 -0800

(C# 3) Merge 8109: Clean up SetDefaultArguments

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8134]

diff --git a/Antlr4.StringTemplate/Interpreter.cs b/Antlr4.StringTemplate/Interpreter.cs
index 3f98a08..4ba5f0d 100644
--- a/Antlr4.StringTemplate/Interpreter.cs
+++ b/Antlr4.StringTemplate/Interpreter.cs
@@ -148,6 +148,7 @@ namespace Antlr4.StringTemplate
int save_ip = current_ip;
try
{
+                SetDefaultArguments(frame);
return ExecuteImpl(@out, frame);
}
catch (Exception e)
@@ -754,7 +755,6 @@ namespace Antlr4.StringTemplate
if (template != null)
{
frame = new TemplateFrame(template, frame);
-                SetDefaultArguments(frame);
if (options != null && options[(int)RenderOption.Wrap] != null)
{
// if we have a wrap string, then inform writer it
@@ -1376,7 +1376,7 @@ namespace Antlr4.StringTemplate
*
*  The evaluation context is the template enclosing invokedST.
*/
-        public virtual void SetDefaultArguments(TemplateFrame frame)
+        protected virtual void SetDefaultArguments(TemplateFrame frame)
{
Template invokedST = frame.Template;
if (invokedST.impl.FormalArguments == null || invokedST.impl.NumberOfArgsWithDefaultValues == 0)
diff --git a/Antlr4.StringTemplate/Template.cs b/Antlr4.StringTemplate/Template.cs
index 09a4de3..64279ae 100644
--- a/Antlr4.StringTemplate/Template.cs
+++ b/Antlr4.StringTemplate/Template.cs
@@ -458,7 +458,6 @@ namespace Antlr4.StringTemplate
{
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, impl.NativeGroup.ErrorManager, false);
TemplateFrame frame = new TemplateFrame(this, null);
-            interp.SetDefaultArguments(frame);
return interp.Execute(@out, frame);
}

@@ -466,7 +465,6 @@ namespace Antlr4.StringTemplate
{
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, culture, impl.NativeGroup.ErrorManager, false);
TemplateFrame frame = new TemplateFrame(this, null);
-            interp.SetDefaultArguments(frame);
return interp.Execute(@out, frame);
}

@@ -474,7 +472,6 @@ namespace Antlr4.StringTemplate
{
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, new ErrorManager(listener), false);
TemplateFrame frame = new TemplateFrame(this, null);
-            interp.SetDefaultArguments(frame);
return interp.Execute(@out, frame);
}

@@ -482,7 +479,6 @@ namespace Antlr4.StringTemplate
{
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, culture, new ErrorManager(listener), false);
TemplateFrame frame = new TemplateFrame(this, null);
-            interp.SetDefaultArguments(frame);
return interp.Execute(@out, frame);
}

diff --git a/Antlr4.Test.StringTemplate/TestGroups.cs b/Antlr4.Test.StringTemplate/TestGroups.cs
index 28850dd..35b3412 100644
--- a/Antlr4.Test.StringTemplate/TestGroups.cs
+++ b/Antlr4.Test.StringTemplate/TestGroups.cs
@@ -368,6 +368,19 @@ namespace Antlr4.Test.StringTemplate
}

[TestMethod]
+        public void TestEarlyEvalOfDefaultArgs()
+        {
+            string templates =
+                "s(x,y={<(x)>}) ::= \"<x><y>\"\n"; // should see x in def arg
+            TemplateGroup group = new TemplateGroupString(templates);
+            Template b = group.GetInstanceOf("s");
+            b.Add("x", "a");
+            string expecting = "aa";
+            string result = b.Render();
+            Assert.AreEqual(expecting, result);
+        }
+
+        [TestMethod]
public void TestDefaultArgumentAsSimpleTemplate()
{
string templates =
diff --git a/Antlr4.Test.StringTemplate/TestRegions.cs b/Antlr4.Test.StringTemplate/TestRegions.cs
index 955f7c3..7cfa97d 100644
--- a/Antlr4.Test.StringTemplate/TestRegions.cs
+++ b/Antlr4.Test.StringTemplate/TestRegions.cs
@@ -424,5 +424,26 @@ namespace Antlr4.Test.StringTemplate
string result = st.Render();
Assert.AreEqual(expected, result);
}
+
+        [TestMethod]
+        public void TestEmbeddedSubtemplate()
+        {
+            // fix so we ignore inside {...}
+            string dir = tmpdir;
+            string groupFile =
+                "a() ::= <<\n" +
+                "[\n" +
+                "  <{\n" +
+                "  bar\n" +
+                "  }>\n" +
+                "]\n" +
+                ">>\n";
+            writeFile(dir, "group.stg", groupFile);
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
+            Template st = group.GetInstanceOf("a");
+            string expected = "[" + newline + "  bar" + newline + "]";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
}
}

