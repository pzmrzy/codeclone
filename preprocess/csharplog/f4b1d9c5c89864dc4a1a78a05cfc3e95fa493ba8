commit f4b1d9c5c89864dc4a1a78a05cfc3e95fa493ba8
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Jan 31 13:08:03 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Jan 31 13:08:03 2011 -0800

(C# 3) Code cleanup, C# properties

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7579]

diff --git a/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs b/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
index 2eb935d..9c247fa 100644
--- a/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
+++ b/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
@@ -60,7 +60,7 @@ namespace Antlr4.StringTemplate.Visualizer.Extensions
template.impl.nativeGroup.Listener = errors;
StringWriter @out = new StringWriter();
ITemplateWriter wr = new AutoIndentWriter(@out);
-            wr.SetLineWidth(lineWidth);
+            wr.LineWidth = lineWidth;
Interpreter interp = new Interpreter(template.groupThatCreatedThisInstance, culture);
interp.Execute(wr, template); // Render and track events
TemplateVisualizer visualizer = new TemplateVisualizer(errorManager, template, @out.ToString(), interp, interp.GetExecutionTrace(), errors.Errors);
diff --git a/Antlr4.StringTemplate/AutoIndentWriter.cs b/Antlr4.StringTemplate/AutoIndentWriter.cs
index 3243b5c..bcfbabc 100644
--- a/Antlr4.StringTemplate/AutoIndentWriter.cs
+++ b/Antlr4.StringTemplate/AutoIndentWriter.cs
@@ -33,7 +33,6 @@
namespace Antlr4.StringTemplate
{
using System.Collections.Generic;
-    using Array = System.Array;
using Environment = System.Environment;
using TextWriter = System.IO.TextWriter;

@@ -59,120 +58,157 @@ namespace Antlr4.StringTemplate
{
public const int NoWrap = -1;

-        /** stack of indents; use List as it's much faster than Stack. Grows
-         *  from 0..n-1.
-         */
-        protected readonly Stack<string> indents = new Stack<string>();
+        /// <summary>
+        /// Stack of indents
+        /// </summary>
+        private readonly Stack<string> _indents = new Stack<string>();

-        /** Stack of integer anchors (char positions in line); avoid Integer
-         *  creation overhead.
-         */
-        protected int[] anchors = new int[10];
-        protected int anchors_sp = -1;
+        /// <summary>
+        /// Stack of integer anchors (char positions in line)
+        /// </summary>
+        private readonly Stack<int> _anchors = new Stack<int>();

-        /** \n or \r\n? */
-        protected string newline;
+        /// <summary>
+        /// The newline character used for this writer
+        /// </summary>
+        private readonly string _newline;

-        protected TextWriter @out = null;
-        protected bool atStartOfLine = true;
+        /// <summary>
+        /// The underlying output stream
+        /// </summary>
+        private TextWriter _writer = null;

/** Track char position in the line (later we can think about tabs).
-         *  Indexed from 0.  We want to keep charPosition <= lineWidth.
+         *  Indexed from 0.  We want to keep charPosition &lt;= lineWidth.
*  This is the position we are *about* to Write not the position
*  last written to.
*/
-        protected int charPosition = 0;
+        private int _charPosition = 0;

-        /** The absolute char index into the output of the next char to be written. */
-        protected int charIndex = 0;
+        /// <summary>
+        /// The absolute char index into the output of the next char to be written.
+        /// </summary>
+        private int _charIndex = 0;

-        protected int lineWidth = NoWrap;
+        private int _lineWidth = NoWrap;

-        public AutoIndentWriter(TextWriter @out, string newline)
+        public AutoIndentWriter(TextWriter writer)
+            : this(writer, Environment.NewLine)
{
-            this.@out = @out;
-            indents.Push(null); // s oftart with no indent
-            this.newline = newline;
}

-        public AutoIndentWriter(TextWriter @out)
-            : this(@out, Environment.NewLine)
+        public AutoIndentWriter(TextWriter writer, string newline)
{
+            this._writer = writer;
+            _indents.Push(null); // s oftart with no indent
+            this._newline = newline;
}

-        public virtual void SetLineWidth(int lineWidth)
+        public int Index
{
-            this.lineWidth = lineWidth;
+            get
+            {
+                return _charIndex;
+            }
+
+            protected set
+            {
+                _charIndex = value;
+            }
}

-        public virtual void PushIndentation(string indent)
+        public int LineWidth
{
-            indents.Push(indent);
+            get
+            {
+                return _lineWidth;
+            }
+
+            set
+            {
+                _lineWidth = value;
+            }
}

-        public virtual string PopIndentation()
+        protected bool AtStartOfLine
{
-            return indents.Pop();
+            get
+            {
+                return _charPosition == 0;
+            }
}

-        public virtual void PushAnchorPoint()
+        protected TextWriter Writer
{
-            if ((anchors_sp + 1) >= anchors.Length)
+            get
{
-                Array.Resize(ref anchors, anchors.Length * 2);
+                return _writer;
+            }
+
+            set
+            {
+                _writer = value;
}
-            anchors_sp++;
-            anchors[anchors_sp] = charPosition;
}

-        public virtual void PopAnchorPoint()
+        public virtual void PushIndentation(string indent)
{
-            anchors_sp--;
+            _indents.Push(indent);
}

-        public virtual int Index()
+        public virtual string PopIndentation()
+        {
+            return _indents.Pop();
+        }
+
+        public virtual void PushAnchorPoint()
{
-            return charIndex;
+            _anchors.Push(_charPosition);
+        }
+
+        public virtual void PopAnchorPoint()
+        {
+            _anchors.Pop();
}

/** Write out a string literal or attribute expression or expression element.*/
-        public virtual int Write(string str)
+        public virtual int Write(string value)
{
int n = 0;
-            for (int i = 0; i < str.Length; i++)
+            for (int i = 0; i < value.Length; i++)
{
-                char c = str[i];
+                char c = value[i];
// found \n or \r\n newline?
if (c == '\r')
continue;
+
if (c == '\n')
{
-                    atStartOfLine = true;
-                    charPosition = -newline.Length; // set so the Write below sets to 0
-                    @out.Write(newline);
-                    n += newline.Length;
-                    charIndex += newline.Length;
-                    charPosition += n; // wrote n more char
+                    Writer.Write(_newline);
+                    _charPosition = 0;
+                    n += _newline.Length;
+                    Index += _newline.Length;
continue;
}
+
// normal character
// check to see if we are at the start of a line; need indent if so
-                if (atStartOfLine)
+                if (AtStartOfLine)
{
n += Indent();
-                    atStartOfLine = false;
}
+
n++;
-                @out.Write(c);
-                charPosition++;
-                charIndex++;
+                Writer.Write(c);
+                _charPosition++;
+                Index++;
}
return n;
}

-        public virtual int WriteSeparator(string str)
+        public virtual int WriteSeparator(string value)
{
-            return Write(str);
+            return Write(value);
}

/** Write out a string literal or attribute expression or expression element.
@@ -181,10 +217,10 @@ namespace Antlr4.StringTemplate
*  at or beyond desired line width then emit a \n and any indentation
*  before spitting out this str.
*/
-        public virtual int Write(string str, string wrap)
+        public virtual int Write(string value, string wrap)
{
int n = WriteWrap(wrap);
-            return n + Write(str);
+            return n + Write(value);
}

public virtual int WriteWrap(string wrap)
@@ -192,8 +228,7 @@ namespace Antlr4.StringTemplate
int n = 0;
// if want wrap and not already at start of line (last char was \n)
// and we have hit or exceeded the threshold
-            if (lineWidth != NoWrap && wrap != null && !atStartOfLine &&
-                 charPosition >= lineWidth)
+            if (LineWidth != NoWrap && wrap != null && !AtStartOfLine && _charPosition >= LineWidth)
{
// ok to wrap
// Walk wrap string and look for A\nB.  Spit out A\n
@@ -204,49 +239,50 @@ namespace Antlr4.StringTemplate
char c = wrap[i];
if (c == '\n')
{
-                        @out.Write(newline);
-                        n += newline.Length;
-                        charPosition = 0;
-                        charIndex += newline.Length;
+                        Writer.Write(_newline);
+                        n += _newline.Length;
+                        _charPosition = 0;
+                        Index += _newline.Length;
n += Indent();
// continue writing any chars out
}
else
-                    {  // Write A or B part
+                    {
+                        // Write A or B part
n++;
-                        @out.Write(c);
-                        charPosition++;
-                        charIndex++;
+                        Writer.Write(c);
+                        _charPosition++;
+                        Index++;
}
}
}
return n;
}

-        public virtual int Indent()
+        protected virtual int Indent()
{
int n = 0;
-            foreach (string ind in indents)
+            foreach (string ind in _indents)
{
if (ind != null)
{
n += ind.Length;
-                    @out.Write(ind);
+                    Writer.Write(ind);
}
}

// If current anchor is beyond current indent width, indent to anchor
// *after* doing indents (might tabs in there or whatever)
int indentWidth = n;
-            if (anchors_sp >= 0 && anchors[anchors_sp] > indentWidth)
+            if (_anchors.Count > 0 && _anchors.Peek() > indentWidth)
{
-                int remainder = anchors[anchors_sp] - indentWidth;
-                @out.Write(new string(' ', remainder));
+                int remainder = _anchors.Peek() - indentWidth;
+                Writer.Write(new string(' ', remainder));
n += remainder;
}

-            charPosition += n;
-            charIndex += n;
+            _charPosition += n;
+            Index += n;
return n;
}
}
diff --git a/Antlr4.StringTemplate/Debug/DebugTemplate.cs b/Antlr4.StringTemplate/Debug/DebugTemplate.cs
index 051b6a7..17fa6b7 100644
--- a/Antlr4.StringTemplate/Debug/DebugTemplate.cs
+++ b/Antlr4.StringTemplate/Debug/DebugTemplate.cs
@@ -93,7 +93,7 @@ namespace Antlr4.StringTemplate.Debug
{
StringWriter @out = new StringWriter();
ITemplateWriter wr = new AutoIndentWriter(@out);
-            wr.SetLineWidth(lineWidth);
+            wr.LineWidth = lineWidth;
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, locale);
interp.Execute(wr, this); // Render and track events
return interp.GetEvents();
diff --git a/Antlr4.StringTemplate/ITemplateWriter.cs b/Antlr4.StringTemplate/ITemplateWriter.cs
index e4bd836..fc8fad5 100644
--- a/Antlr4.StringTemplate/ITemplateWriter.cs
+++ b/Antlr4.StringTemplate/ITemplateWriter.cs
@@ -41,6 +41,20 @@ namespace Antlr4.StringTemplate
*/
public interface ITemplateWriter
{
+        /** Return the absolute char index into the output of the char
+         *  we're about to Write.  Returns 0 if no char written yet.
+         */
+        int Index
+        {
+            get;
+        }
+
+        int LineWidth
+        {
+            get;
+            set;
+        }
+
void PushIndentation(string indent);

string PopIndentation();
@@ -49,8 +63,6 @@ namespace Antlr4.StringTemplate

void PopAnchorPoint();

-        void SetLineWidth(int lineWidth);
-
/** Write the string and return how many actual chars were written.
*  With autoindentation and wrapping, more chars than length(str)
*  can be emitted.  No wrapping is done.
@@ -80,10 +92,5 @@ namespace Antlr4.StringTemplate
*  be inserted before emitting a separator.
*/
int WriteSeparator(string str);
-
-        /** Return the absolute char index into the output of the char
-         *  we're about to Write.  Returns 0 if no char written yet.
-         */
-        int Index();
}
}
diff --git a/Antlr4.StringTemplate/Interpreter.cs b/Antlr4.StringTemplate/Interpreter.cs
index 14ee1a1..1eacddd 100644
--- a/Antlr4.StringTemplate/Interpreter.cs
+++ b/Antlr4.StringTemplate/Interpreter.cs
@@ -156,7 +156,7 @@ namespace Antlr4.StringTemplate

protected virtual int ExecuteImpl(ITemplateWriter @out, Template self)
{
-            int start = @out.Index(); // track char we're about to Write
+            int start = @out.Index; // track char we're about to Write
Bytecode prevOpcode = Bytecode.Invalid;
int n = 0; // how many char we Write out
int nargs;
@@ -494,7 +494,7 @@ namespace Antlr4.StringTemplate
}
if (TemplateGroup.debug)
{
-                EvalTemplateEvent e = new EvalTemplateEvent((DebugST)self, Interval.FromBounds(start, @out.Index()));
+                EvalTemplateEvent e = new EvalTemplateEvent((DebugST)self, Interval.FromBounds(start, @out.Index));
//System.out.println("eval template "+self+": "+e);
events.Add(e);
if (self.enclosingInstance != null)
@@ -623,16 +623,16 @@ namespace Antlr4.StringTemplate
}

/** Write out an expression result that doesn't use expression options.
-         *  E.g., <name>
+         *  E.g., &lt;name&gt;
*/
protected virtual int WriteObjectNoOptions(ITemplateWriter @out, Template self, object o)
{
-            int start = @out.Index(); // track char we're about to Write
+            int start = @out.Index; // track char we're about to Write
int n = WriteObject(@out, self, o, null);
if (TemplateGroup.debug)
{
Interval templateLocation = self.impl.sourceMap[current_ip];
-                EvalExprEvent e = new EvalExprEvent((DebugST)self, Interval.FromBounds(start, @out.Index()), templateLocation);
+                EvalExprEvent e = new EvalExprEvent((DebugST)self, Interval.FromBounds(start, @out.Index), templateLocation);
Console.WriteLine(e);
events.Add(e);
}
@@ -640,12 +640,12 @@ namespace Antlr4.StringTemplate
}

/** Write out an expression result that uses expression options.
-         *  E.g., <names; separator=", ">
+         *  E.g., &lt;names; separator=", "&gt;
*/
protected virtual int WriteObjectWithOptions(ITemplateWriter @out, Template self, object o,
object[] options)
{
-            int start = @out.Index(); // track char we're about to Write
+            int start = @out.Index; // track char we're about to Write
// precompute all option values (Render all the way to strings)
string[] optionStrings = null;
if (options != null)
@@ -672,7 +672,7 @@ namespace Antlr4.StringTemplate
if (TemplateGroup.debug)
{
Interval templateLocation = self.impl.sourceMap[current_ip];
-                EvalExprEvent e = new EvalExprEvent((DebugST)self, Interval.FromBounds(start, @out.Index()), templateLocation);
+                EvalExprEvent e = new EvalExprEvent((DebugST)self, Interval.FromBounds(start, @out.Index), templateLocation);
Console.WriteLine(e);
events.Add(e);
}
diff --git a/Antlr4.StringTemplate/NoIndentWriter.cs b/Antlr4.StringTemplate/NoIndentWriter.cs
index 7480c7e..e9dd6ac 100644
--- a/Antlr4.StringTemplate/NoIndentWriter.cs
+++ b/Antlr4.StringTemplate/NoIndentWriter.cs
@@ -37,15 +37,15 @@ namespace Antlr4.StringTemplate
/** Just pass through the text */
public class NoIndentWriter : AutoIndentWriter
{
-        public NoIndentWriter(TextWriter @out)
-            : base(@out)
+        public NoIndentWriter(TextWriter writer)
+            : base(writer)
{
}

-        public override int Write(string str)
+        public override int Write(string value)
{
-            @out.Write(str);
-            return str.Length;
+            Writer.Write(value);
+            return value.Length;
}
}
}
diff --git a/Antlr4.StringTemplate/Template.cs b/Antlr4.StringTemplate/Template.cs
index a84dfb1..93f4e07 100644
--- a/Antlr4.StringTemplate/Template.cs
+++ b/Antlr4.StringTemplate/Template.cs
@@ -455,7 +455,7 @@ namespace Antlr4.StringTemplate
{
StringWriter @out = new StringWriter();
ITemplateWriter wr = new AutoIndentWriter(@out);
-            wr.SetLineWidth(lineWidth);
+            wr.LineWidth = lineWidth;
Write(wr, locale);
return @out.ToString();
}
diff --git a/Antlr4.Test.StringTemplate/TestLineWrap.cs b/Antlr4.Test.StringTemplate/TestLineWrap.cs
index 12b6b44..77c8ba6 100644
--- a/Antlr4.Test.StringTemplate/TestLineWrap.cs
+++ b/Antlr4.Test.StringTemplate/TestLineWrap.cs
@@ -32,12 +32,12 @@

namespace Antlr4.Test.StringTemplate
{
+    using System.Collections.Generic;
using Antlr4.StringTemplate;
using Microsoft.VisualStudio.TestTools.UnitTesting;
-    using StringWriter = System.IO.StringWriter;
-    using System.Collections.Generic;
using Environment = System.Environment;
using Path = System.IO.Path;
+    using StringWriter = System.IO.StringWriter;

[TestClass]
public class TestLineWrap : BaseTest
@@ -63,7 +63,7 @@ namespace Antlr4.Test.StringTemplate

StringWriter sw = new StringWriter();
ITemplateWriter stw = new AutoIndentWriter(sw, "\n"); // force \n as newline
-            stw.SetLineWidth(40);
+            stw.LineWidth = 40;
a.Write(stw);
string result = sw.ToString();
Assert.AreEqual(expecting, result);
diff --git a/Antlr4.Test.StringTemplate/TestVisualizer.cs b/Antlr4.Test.StringTemplate/TestVisualizer.cs
index af841a4..37a6d78 100644
--- a/Antlr4.Test.StringTemplate/TestVisualizer.cs
+++ b/Antlr4.Test.StringTemplate/TestVisualizer.cs
@@ -33,17 +33,14 @@
namespace Antlr4.Test.StringTemplate
{
using System;
-    using System.Collections.Generic;
-    using System.Linq;
-    using System.Text;
-    using Microsoft.VisualStudio.TestTools.UnitTesting;
using Antlr4.StringTemplate;
using Antlr4.StringTemplate.Debug;
-    using CultureInfo = System.Globalization.CultureInfo;
using Antlr4.StringTemplate.Misc;
-    using StringWriter = System.IO.StringWriter;
using Antlr4.StringTemplate.Visualizer;
+    using Microsoft.VisualStudio.TestTools.UnitTesting;
+    using CultureInfo = System.Globalization.CultureInfo;
using Path = System.IO.Path;
+    using StringWriter = System.IO.StringWriter;

[TestClass]
public class TestVisualizer : BaseTest
@@ -105,7 +102,7 @@ namespace Antlr4.Test.StringTemplate
template.impl.nativeGroup.Listener = errors;
StringWriter @out = new StringWriter();
ITemplateWriter wr = new AutoIndentWriter(@out);
-            wr.SetLineWidth(lineWidth);
+            wr.LineWidth = lineWidth;
Interpreter interp = new Interpreter(template.groupThatCreatedThisInstance, culture);
interp.Execute(wr, template); // Render and track events
TemplateVisualizer visualizer = new TemplateVisualizer(errorManager, template, @out.ToString(), interp, interp.GetExecutionTrace(), errors.Errors);

