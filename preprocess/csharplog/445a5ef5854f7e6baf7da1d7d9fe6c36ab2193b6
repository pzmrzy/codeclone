commit 445a5ef5854f7e6baf7da1d7d9fe6c36ab2193b6
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Wed Apr 13 18:27:50 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Wed Apr 13 18:27:50 2011 -0800

(C# 3) Fix a number of bugs introduced by CL8195 (consolidating rule return scopes)

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8212]

diff --git a/Antlr3.Runtime.Test/Composition/Program.cs b/Antlr3.Runtime.Test/Composition/Program.cs
index ce89dc2..c2aaf02 100644
--- a/Antlr3.Runtime.Test/Composition/Program.cs
+++ b/Antlr3.Runtime.Test/Composition/Program.cs
@@ -37,7 +37,7 @@
var lex = new VecMathLexer(input);
var tokens = new CommonTokenStream(lex);
var g = new VecMathParser(tokens);
-            VecMath_VecMath_Parser.prog_return r = g.prog();
+            IAstRuleReturnScope<CommonTree> r = g.prog();
CommonTree t = r.Tree;
Console.WriteLine("Original tree:   " + t.ToStringTree());

diff --git a/Antlr3.Runtime/Antlr3.Runtime.csproj b/Antlr3.Runtime/Antlr3.Runtime.csproj
index 74a3b3b..d885625 100644
--- a/Antlr3.Runtime/Antlr3.Runtime.csproj
+++ b/Antlr3.Runtime/Antlr3.Runtime.csproj
@@ -66,6 +66,8 @@
<Compile Include="ICharStream.cs" />
<Compile Include="IIntStream.cs" />
<Compile Include="IRuleReturnScope.cs" />
+    <Compile Include="ITemplateRuleReturnScope.cs" />
+    <Compile Include="ITemplateRuleReturnScope`1.cs" />
<Compile Include="IToken.cs" />
<Compile Include="ITokenSource.cs" />
<Compile Include="ITokenStream.cs" />
@@ -87,6 +89,7 @@
<Compile Include="RecognitionException.cs" />
<Compile Include="RecognizerSharedState.cs" />
<Compile Include="RuleReturnScope.cs" />
+    <Compile Include="TemplateParserRuleReturnScope`2.cs" />
<Compile Include="TokenConstants.cs" />
<Compile Include="TokenRewriteStream.cs" />
<Compile Include="Tree\AstTreeRuleReturnScope`1.cs" />
@@ -112,6 +115,7 @@
<Compile Include="Tree\RewriteRuleNodeStream.cs" />
<Compile Include="Tree\RewriteRuleSubtreeStream.cs" />
<Compile Include="Tree\RewriteRuleTokenStream.cs" />
+    <Compile Include="Tree\TemplateTreeRuleReturnScope`2.cs" />
<Compile Include="Tree\TreeConstants.cs" />
<Compile Include="Tree\TreeFilter.cs" />
<Compile Include="Tree\TreeIterator.cs" />
diff --git a/Antlr3.Runtime/ITemplateRuleReturnScope.cs b/Antlr3.Runtime/ITemplateRuleReturnScope.cs
new file mode 100644
index 0000000..8a3de74
--- /dev/null
+++ b/Antlr3.Runtime/ITemplateRuleReturnScope.cs
@@ -0,0 +1,42 @@
+﻿/*
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr.Runtime
+{
+    public interface ITemplateRuleReturnScope
+    {
+        object Template
+        {
+            get;
+        }
+    }
+}
diff --git a/Antlr3.Runtime/ITemplateRuleReturnScope`1.cs b/Antlr3.Runtime/ITemplateRuleReturnScope`1.cs
new file mode 100644
index 0000000..5c1e81e
--- /dev/null
+++ b/Antlr3.Runtime/ITemplateRuleReturnScope`1.cs
@@ -0,0 +1,42 @@
+﻿/*
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr.Runtime
+{
+    public interface ITemplateRuleReturnScope<TTemplate> : ITemplateRuleReturnScope
+    {
+        new TTemplate Template
+        {
+            get;
+        }
+    }
+}
diff --git a/Antlr3.Runtime/TemplateParserRuleReturnScope`2.cs b/Antlr3.Runtime/TemplateParserRuleReturnScope`2.cs
new file mode 100644
index 0000000..1e3c185
--- /dev/null
+++ b/Antlr3.Runtime/TemplateParserRuleReturnScope`2.cs
@@ -0,0 +1,60 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr.Runtime
+{
+    public class TemplateParserRuleReturnScope<TTemplate, TToken> : ParserRuleReturnScope<TToken>, ITemplateRuleReturnScope<TTemplate>, ITemplateRuleReturnScope
+    {
+        private TTemplate _template;
+
+        public TTemplate Template
+        {
+            get
+            {
+                return _template;
+            }
+
+            set
+            {
+                _template = value;
+            }
+        }
+
+        object ITemplateRuleReturnScope.Template
+        {
+            get
+            {
+                return Template;
+            }
+        }
+    }
+}
diff --git a/Antlr3.Runtime/Tree/AstParserRuleReturnScope`1.cs b/Antlr3.Runtime/Tree/AstParserRuleReturnScope`1.cs
index b6598ce..c2664ab 100644
--- a/Antlr3.Runtime/Tree/AstParserRuleReturnScope`1.cs
+++ b/Antlr3.Runtime/Tree/AstParserRuleReturnScope`1.cs
@@ -32,7 +32,7 @@

namespace Antlr.Runtime.Tree
{
-    public class AstParserRuleReturnScope<TTree> : ParserRuleReturnScope<TTree>, IAstRuleReturnScope<TTree>, IAstRuleReturnScope
+    public class AstParserRuleReturnScope<TTree, TToken> : ParserRuleReturnScope<TToken>, IAstRuleReturnScope<TTree>, IAstRuleReturnScope
{
private TTree _tree;

diff --git a/Antlr3.Runtime/Tree/AstTreeRuleReturnScope`1.cs b/Antlr3.Runtime/Tree/AstTreeRuleReturnScope`1.cs
index b31ca9c..6a0ea8e 100644
--- a/Antlr3.Runtime/Tree/AstTreeRuleReturnScope`1.cs
+++ b/Antlr3.Runtime/Tree/AstTreeRuleReturnScope`1.cs
@@ -32,11 +32,11 @@

namespace Antlr.Runtime.Tree
{
-    public class AstTreeRuleReturnScope<TTree> : TreeRuleReturnScope<TTree>, IAstRuleReturnScope<TTree>, IAstRuleReturnScope
+    public class AstTreeRuleReturnScope<TOutputTree, TInputTree> : TreeRuleReturnScope<TInputTree>, IAstRuleReturnScope<TOutputTree>, IAstRuleReturnScope
{
-        private TTree _tree;
+        private TOutputTree _tree;

-        public TTree Tree
+        public TOutputTree Tree
{
get
{
diff --git a/Antlr3.Runtime/Tree/TemplateTreeRuleReturnScope`2.cs b/Antlr3.Runtime/Tree/TemplateTreeRuleReturnScope`2.cs
new file mode 100644
index 0000000..96ac54f
--- /dev/null
+++ b/Antlr3.Runtime/Tree/TemplateTreeRuleReturnScope`2.cs
@@ -0,0 +1,60 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr.Runtime.Tree
+{
+    public class TemplateTreeRuleReturnScope<TTemplate, TTree> : TreeRuleReturnScope<TTree>, ITemplateRuleReturnScope<TTemplate>, ITemplateRuleReturnScope
+    {
+        private TTemplate _template;
+
+        public TTemplate Template
+        {
+            get
+            {
+                return _template;
+            }
+
+            set
+            {
+                _template = value;
+            }
+        }
+
+        object ITemplateRuleReturnScope.Template
+        {
+            get
+            {
+                return Template;
+            }
+        }
+    }
+}

