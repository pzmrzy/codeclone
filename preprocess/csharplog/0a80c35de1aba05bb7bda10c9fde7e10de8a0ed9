commit 0a80c35de1aba05bb7bda10c9fde7e10de8a0ed9
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Tue Oct 25 14:38:17 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Tue Oct 25 14:38:17 2011 -0800

C#: Build task performance improvement, build task supports Java target

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 9204]

diff --git a/AntlrBuildTask/Antlr3.Java.targets b/AntlrBuildTask/Antlr3.Java.targets
new file mode 100644
index 0000000..1350047
--- /dev/null
+++ b/AntlrBuildTask/Antlr3.Java.targets
@@ -0,0 +1,175 @@
+ï»¿<!--
+   [The "BSD licence"]
+   Copyright (c) 2011 Sam Harwell
+   All rights reserved.
+
+   Redistribution and use in source and binary forms, with or without
+   modification, are permitted provided that the following conditions
+   are met:
+   1. Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+   2. Redistributions in binary form must reproduce the above copyright
+      notice, this list of conditions and the following disclaimer in the
+      documentation and/or other materials provided with the distribution.
+   3. The name of the author may not be used to endorse or promote products
+      derived from this software without specific prior written permission.
+
+   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+   IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <PropertyGroup>
+    <BuildSystem>MSBuild</BuildSystem>
+    <TaskVersion>3.3.0.7239</TaskVersion>
+    <TaskKeyToken>eb42632606e9261f</TaskKeyToken>
+  </PropertyGroup>
+
+  <PropertyGroup>
+    <LoadTimeSensitiveTargets>
+      $(LoadTimeSensitiveTargets);
+      AntlrCompile;
+    </LoadTimeSensitiveTargets>
+    <LoadTimeSensitiveProperties>
+      $(LoadTimeSensitiveProperties);
+      AntlrCompileDependsOn;
+    </LoadTimeSensitiveProperties>
+  </PropertyGroup>
+
+  <PropertyGroup>
+    <AntlrBuildTaskLocation Condition="'$(AntlrBuildTaskPath)'==''">$(MSBuildBinPath)</AntlrBuildTaskLocation>
+    <AntlrBuildTaskLocation Condition="'$(AntlrBuildTaskPath)'!=''">$(AntlrBuildTaskPath)</AntlrBuildTaskLocation>
+    <AntlrToolLocation Condition="'$(AntlrToolPath)'==''">$(MSBuildBinPath)\Antlr3\Antlr3.exe</AntlrToolLocation>
+    <AntlrToolLocation Condition="'$(AntlrToolPath)'!=''">$(AntlrToolPath)</AntlrToolLocation>
+  </PropertyGroup>
+
+  <PropertyGroup>
+    <AntlrGenCodeFileNames Condition="'$(AntlrGenCodeFileNames)'==''">$(MSBuildProjectFile).AntlrGeneratedCodeFileListAbsolute.txt</AntlrGenCodeFileNames>
+  </PropertyGroup>
+
+  <UsingTask TaskName="Antlr3.Build.Tasks.AntlrClassGenerationTask" AssemblyFile="AntlrBuildTask.dll" />
+
+  <PropertyGroup>
+    <CoreCompileDependsOn>
+      AntlrCompile;
+      AntlrCompileAddFilesGenerated;
+      $(CoreCompileDependsOn)
+    </CoreCompileDependsOn>
+  </PropertyGroup>
+
+  <PropertyGroup>
+    <AntlrCompileDependsOn>
+      AntlrCompileReadGeneratedFileList;_ComputeGrammarInputs
+    </AntlrCompileDependsOn>
+  </PropertyGroup>
+
+  <ItemGroup Condition="'$(BuildingInsideVisualStudio)'=='true'">
+    <AvailableItemName Include="Antlr3" />
+    <AvailableItemName Include="AntlrTokens" />
+    <AvailableItemName Include="AntlrAbstractGrammar" />
+  </ItemGroup>
+
+  <Target Name="AntlrCompileReadGeneratedFileList">
+    <ReadLinesFromFile File="$(IntermediateOutputPath)$(AntlrGenCodeFileNames)">
+      <Output TaskParameter="Lines" ItemName="AntlrOutputCodeFilesList"/>
+    </ReadLinesFromFile>
+  </Target>
+
+  <PropertyGroup>
+    <!-- Add grammar compilation to the CoreCompileDependsOn so that the IDE inproc compilers (particularly VB)
+         can "see" the generated source files. -->
+    <CoreCompileDependsOn Condition="'$(BuildingInsideVisualStudio)' == 'true' ">
+      DesignTimeGrammarCompilation;
+      $(CoreCompileDependsOn)
+    </CoreCompileDependsOn>
+  </PropertyGroup>
+
+  <Target Name="DesignTimeGrammarCompilation">
+    <!-- Only if we are not actually performing a compile i.e. we are in design mode -->
+    <CallTarget Condition="'$(BuildingProject)' != 'true'"
+                Targets="AntlrCompile" />
+  </Target>
+
+  <Target Name="_ComputeGrammarInputs"
+          DependsOnTargets="$(_ComputeGrammarInputsDependsOn)">
+    <ItemGroup>
+      <_GrammarIncludeItems Condition="'%(SourceFolder.Antlr3Source)'=='true'" Include="@(SourceFolder->'%(RelativeDir)**\*.g')" />
+      <_GrammarIncludeItems Condition="'%(SourceFolder.Antlr3Source)'=='true'" Include="@(SourceFolder->'%(RelativeDir)**\*.g3')" />
+      <_TokensIncludeItems Condition="'%(SourceFolder.Antlr3Source)'=='true'" Include="@(SourceFolder->'%(RelativeDir)**\*.tokens')" />
+    </ItemGroup>
+    <PropertyGroup>
+      <_GrammarIncludeSpec>@(_GrammarIncludeItems)</_GrammarIncludeSpec>
+      <_TokensIncludeSpec>@(_TokensIncludeItems)</_TokensIncludeSpec>
+    </PropertyGroup>
+    <ItemGroup>
+      <Antlr3 Include="$(_GrammarIncludeSpec)" />
+      <AntlrTokens Include="$(_TokensIncludeSpec)" />
+    </ItemGroup>
+  </Target>
+
+  <Target Name="AntlrCompile"
+          DependsOnTargets="$(AntlrCompileDependsOn)"
+          Inputs="@(Antlr3);@(AntlrTokens);@(AntlrAbstractGrammar)"
+          Outputs="@(AntlrOutputCodeFilesList);
+                  $(IntermediateOutputPath)$(AntlrGenCodeFileNames);">
+
+    <ItemGroup>
+      <AntlrGeneratedCodeFiles Remove="@(AntlrGeneratedCodeFiles)" />
+    </ItemGroup>
+
+    <Message Importance="high" Text="Processing %(Antlr3.RelativeDir): @(Antlr3)." />
+
+    <PropertyGroup>
+      <_IntellisenseOnlyCompile>false</_IntellisenseOnlyCompile>
+      <_IntellisenseOnlyCompile Condition="'$(BuildingProject)' != 'true'">true</_IntellisenseOnlyCompile>
+    </PropertyGroup>
+    <AntlrClassGenerationTask
+      AntlrToolPath="$(AntlrToolLocation)"
+      BuildTaskPath="$(AntlrBuildTaskLocation)"
+      OutputPath="$(IntermediateOutputPath)\%(Antlr3.RelativeDir)"
+      Language="%(Antlr3.TargetLanguage)"
+      SourceCodeFiles="@(Antlr3)"
+      ContinueOnError="$(_IntellisenseOnlyCompile)"
+      TokensFiles="@(AntlrTokens)"
+      AbstractGrammarFiles="@(AntlrAbstractGrammar)"
+      LanguageSourceExtensions="$(DefaultLanguageSourceExtension)"
+      DebugGrammar="%(Antlr3.DebugGrammar)"
+      ProfileGrammar="%(Antlr3.ProfileGrammar)">
+
+      <Output ItemName="AntlrGeneratedCodeFiles" TaskParameter="GeneratedCodeFiles" />
+      <!--<Output ItemName="Compile" TaskParameter="GeneratedCodeFiles" />-->
+    </AntlrClassGenerationTask>
+
+    <WriteLinesToFile
+      Condition="'$(_IntellisenseOnlyCompile)' != 'true'"
+      File="$(IntermediateOutputPath)$(AntlrGenCodeFileNames)"
+      Lines="@(AntlrGeneratedCodeFiles)"
+      Overwrite="true"/>
+  </Target>
+
+  <Target Name="AntlrCompileAddFilesGenerated"
+          AfterTargets="AntlrCompile"
+          Condition="'@(Antlr3)' != ''">
+
+    <ItemGroup>
+      <AntlrGeneratedCodeFiles Condition="'@(AntlrGeneratedCodeFiles)' == ''" Include="@(AntlrOutputCodeFilesList)" />
+    </ItemGroup>
+
+    <ItemGroup>
+      <FileWrites Include="@(AntlrGeneratedCodeFiles);
+                           $(IntermediateOutputPath)$(AntlrGenCodeFileNames);" />
+    </ItemGroup>
+
+    <ItemGroup>
+      <Compile Include="@(AntlrGeneratedCodeFiles)" />
+    </ItemGroup>
+
+  </Target>
+</Project>
diff --git a/AntlrBuildTask/Antlr3.targets b/AntlrBuildTask/Antlr3.targets
index 3a440da..98e5613 100644
--- a/AntlrBuildTask/Antlr3.targets
+++ b/AntlrBuildTask/Antlr3.targets
@@ -33,7 +33,7 @@
<AntlrBuildTaskAssemblyName Condition="'$(AntlrBuildTaskAssemblyName)'==''">AntlrBuildTask, Version=$(TaskVersion), Culture=neutral, PublicKeyToken=$(TaskKeyToken)</AntlrBuildTaskAssemblyName>
</PropertyGroup>

-  <!--<PropertyGroup>
+  <PropertyGroup>
<LoadTimeSensitiveTargets>
$(LoadTimeSensitiveTargets);
AntlrCompile;
@@ -42,13 +42,7 @@
$(LoadTimeSensitiveProperties);
AntlrCompileDependsOn;
</LoadTimeSensitiveProperties>
-
-
-    <PrepareResourcesDependsOn>
-      AntlrCompile;
-      $(PrepareResourcesDependsOn)
-    </PrepareResourcesDependsOn>
-  </PropertyGroup>-->
+  </PropertyGroup>

<PropertyGroup>
<AntlrBuildTaskLocation Condition="'$(AntlrBuildTaskPath)'==''">$(MSBuildBinPath)</AntlrBuildTaskLocation>
@@ -116,6 +110,13 @@
<AntlrGeneratedCodeFiles Remove="@(AntlrGeneratedCodeFiles)" />
</ItemGroup>

+    <ItemGroup>
+      <Antlr3>
+        <DebugGrammar Condition=" '%(DebugGrammar)' == '' ">false</DebugGrammar>
+        <ProfileGrammar Condition=" '%(ProfileGrammar)' == '' ">false</ProfileGrammar>
+      </Antlr3>
+    </ItemGroup>
+
<PropertyGroup>
<_IntellisenseOnlyCompile>false</_IntellisenseOnlyCompile>
<_IntellisenseOnlyCompile Condition="'$(BuildingProject)' != 'true'">true</_IntellisenseOnlyCompile>
@@ -124,14 +125,17 @@
AntlrToolPath="$(AntlrToolLocation)"
BuildTaskPath="$(AntlrBuildTaskLocation)"
OutputPath="$(IntermediateOutputPath)"
-      Language="$(Language)"
+      Language="%(Antlr3.TargetLanguage)"
SourceCodeFiles="@(Antlr3)"
ContinueOnError="$(_IntellisenseOnlyCompile)"
TokensFiles="@(AntlrTokens)"
-      AbstractGrammarFiles="@(AntlrAbstractGrammar)">
+      AbstractGrammarFiles="@(AntlrAbstractGrammar)"
+      LanguageSourceExtensions="$(DefaultLanguageSourceExtension)"
+      DebugGrammar="%(Antlr3.DebugGrammar)"
+      ProfileGrammar="%(Antlr3.ProfileGrammar)">

<Output ItemName="AntlrGeneratedCodeFiles" TaskParameter="GeneratedCodeFiles" />
-      <Output ItemName="Compile" TaskParameter="GeneratedCodeFiles" />
+      <!--<Output ItemName="Compile" TaskParameter="GeneratedCodeFiles" />-->
</AntlrClassGenerationTask>

<WriteLinesToFile
@@ -142,21 +146,20 @@
</Target>

<Target Name="AntlrCompileAddFilesGenerated"
-          DependsOnTargets="AntlrCompile"
+          AfterTargets="AntlrCompile"
Condition="'@(Antlr3)' != ''">

<ItemGroup>
-      <Compile Condition="'@(AntlrGeneratedCodeFiles)' == ''" Include="@(AntlrOutputCodeFilesList)" />
+      <AntlrGeneratedCodeFiles Condition="'@(AntlrGeneratedCodeFiles)' == ''" Include="@(AntlrOutputCodeFilesList)" />
</ItemGroup>

<ItemGroup>
-      <_AntlrCodeGenFileWrites Condition="'@(AntlrGeneratedCodeFiles)' != ''" Include="@(AntlrGeneratedCodeFiles)" />
-      <_AntlrCodeGenFileWrites Condition="'@(AntlrGeneratedCodeFiles)' == ''" Include="@(AntlrOutputCodeFilesList)" />
+      <FileWrites Include="@(AntlrGeneratedCodeFiles);
+                           $(IntermediateOutputPath)$(AntlrGenCodeFileNames);" />
</ItemGroup>

<ItemGroup>
-      <FileWrites Include="@(_AntlrCodeGenFileWrites);
-                           $(IntermediateOutputPath)$(AntlrGenCodeFileNames);" />
+      <Compile Include="@(AntlrGeneratedCodeFiles)" />
</ItemGroup>

</Target>
diff --git a/AntlrBuildTask/AntlrBuildTask.csproj b/AntlrBuildTask/AntlrBuildTask.csproj
index ff3d960..f1330f3 100644
--- a/AntlrBuildTask/AntlrBuildTask.csproj
+++ b/AntlrBuildTask/AntlrBuildTask.csproj
@@ -63,6 +63,7 @@
<None Include="..\..\..\..\keys\antlr\Key.snk">
<Link>Key.snk</Link>
</None>
+    <None Include="Antlr3.Java.targets" />
</ItemGroup>
<Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
<!-- To modify your build process, add your task inside one of the targets below and uncomment it.
diff --git a/AntlrBuildTask/AntlrClassGenerationTask.cs b/AntlrBuildTask/AntlrClassGenerationTask.cs
index b4b30a1..fcb801a 100644
--- a/AntlrBuildTask/AntlrClassGenerationTask.cs
+++ b/AntlrBuildTask/AntlrClassGenerationTask.cs
@@ -38,6 +38,7 @@ namespace Antlr3.Build.Tasks
using System.Threading;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
+    using Directory = System.IO.Directory;
using File = System.IO.File;
using FileAttributes = System.IO.FileAttributes;
using Path = System.IO.Path;
@@ -45,6 +46,8 @@ namespace Antlr3.Build.Tasks
public class AntlrClassGenerationTask
: Task
{
+        private static AppDomain _sharedAppDomain;
+
private const string DefaultGeneratedSourceExtension = "g";
private List<ITaskItem> _generatedCodeFiles = new List<ITaskItem>();

@@ -68,7 +71,7 @@ namespace Antlr3.Build.Tasks
}

[Required]
-        public string Language
+        public string TargetLanguage
{
get;
set;
@@ -110,6 +113,24 @@ namespace Antlr3.Build.Tasks
set;
}

+        public string[] LanguageSourceExtensions
+        {
+            get;
+            set;
+        }
+
+        public bool DebugGrammar
+        {
+            get;
+            set;
+        }
+
+        public bool ProfileGrammar
+        {
+            get;
+            set;
+        }
+
[Output]
public ITaskItem[] GeneratedCodeFiles
{
@@ -123,6 +144,23 @@ namespace Antlr3.Build.Tasks
}
}

+        public AppDomain GetAntlrTaskAppDomain()
+        {
+            if (_sharedAppDomain != null)
+                return _sharedAppDomain;
+
+            AppDomainSetup info = new AppDomainSetup
+            {
+                ApplicationBase = BuildTaskPath,
+                LoaderOptimization = LoaderOptimization.MultiDomainHost,
+                ShadowCopyFiles = "true"
+            };
+
+            string friendlyName = "AntlrClassGenerationDomain_" + Guid.NewGuid();
+            _sharedAppDomain = AppDomain.CreateDomain(friendlyName, AppDomain.CurrentDomain.Evidence, info, new NamedPermissionSet("FullTrust"), new StrongName[0]);
+            return _sharedAppDomain;
+        }
+
public override bool Execute()
{
AppDomain domain = null;
@@ -130,15 +168,7 @@ namespace Antlr3.Build.Tasks

try
{
-                AppDomainSetup info = new AppDomainSetup
-                {
-                    ApplicationBase = BuildTaskPath,
-                    LoaderOptimization = LoaderOptimization.MultiDomainHost,
-                    ShadowCopyFiles = "true"
-                };
-
-                string friendlyName = "AntlrClassGenerationDomain_" + Guid.NewGuid();
-                domain = AppDomain.CreateDomain(friendlyName, AppDomain.CurrentDomain.Evidence, info, new NamedPermissionSet("FullTrust"), new StrongName[0]);
+                domain = GetAntlrTaskAppDomain();
AntlrClassGenerationTaskInternal wrapper = CreateBuildTaskWrapper(domain);
success = wrapper.Execute();

@@ -162,7 +192,7 @@ namespace Antlr3.Build.Tasks
}
finally
{
-                if (domain != null)
+                if (domain != null && domain != _sharedAppDomain)
AppDomain.Unload(domain);
}

@@ -219,6 +249,8 @@ namespace Antlr3.Build.Tasks

if (this.TokensFiles != null && this.TokensFiles.Length > 0)
{
+                Directory.CreateDirectory(OutputPath);
+
HashSet<string> copied = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
foreach (ITaskItem taskItem in TokensFiles)
{
@@ -250,10 +282,13 @@ namespace Antlr3.Build.Tasks

wrapper.AntlrToolPath = AntlrToolPath;
wrapper.SourceCodeFiles = sourceCodeFiles;
-            wrapper.Language = Language;
+            wrapper.TargetLanguage = TargetLanguage;
wrapper.OutputPath = OutputPath;
wrapper.RootNamespace = RootNamespace;
wrapper.GeneratedSourceExtension = GeneratedSourceExtension;
+            wrapper.LanguageSourceExtensions = LanguageSourceExtensions;
+            wrapper.DebugGrammar = DebugGrammar;
+            wrapper.ProfileGrammar = ProfileGrammar;
return wrapper;
}

diff --git a/AntlrBuildTask/AntlrClassGenerationTaskInternal.cs b/AntlrBuildTask/AntlrClassGenerationTaskInternal.cs
index c695bb4..905379b 100644
--- a/AntlrBuildTask/AntlrClassGenerationTaskInternal.cs
+++ b/AntlrBuildTask/AntlrClassGenerationTaskInternal.cs
@@ -62,7 +62,7 @@ namespace Antlr3.Build.Tasks
set;
}

-        public string Language
+        public string TargetLanguage
{
get;
set;
@@ -80,6 +80,24 @@ namespace Antlr3.Build.Tasks
set;
}

+        public string[] LanguageSourceExtensions
+        {
+            get;
+            set;
+        }
+
+        public bool DebugGrammar
+        {
+            get;
+            set;
+        }
+
+        public bool ProfileGrammar
+        {
+            get;
+            set;
+        }
+
public IList<string> SourceCodeFiles
{
get
@@ -126,6 +144,18 @@ namespace Antlr3.Build.Tasks
"-message-format", "vs2005"
};

+                if (DebugGrammar)
+                    args.Add("-debug");
+
+                if (ProfileGrammar)
+                    args.Add("-profile");
+
+                if (!string.IsNullOrEmpty(TargetLanguage))
+                {
+                    args.Add("-language");
+                    args.Add(TargetLanguage);
+                }
+
args.AddRange(SourceCodeFiles);

using (LoggingTraceListener traceListener = new LoggingTraceListener(_buildMessages))
@@ -135,7 +165,7 @@ namespace Antlr3.Build.Tasks
process();
}

-                _generatedCodeFiles.AddRange(GetGeneratedFiles().Where(file => Path.GetExtension(file).Equals(".cs", StringComparison.OrdinalIgnoreCase)));
+                _generatedCodeFiles.AddRange(GetGeneratedFiles().Where(file => LanguageSourceExtensions.Contains(Path.GetExtension(file), StringComparer.OrdinalIgnoreCase)));

int errorCount = GetNumErrors();
return errorCount == 0;

