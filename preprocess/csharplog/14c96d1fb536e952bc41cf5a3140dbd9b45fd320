commit 14c96d1fb536e952bc41cf5a3140dbd9b45fd320
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Dec 14 00:35:07 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Dec 14 00:35:07 2009 -0800

C# Port:
* Merge 6394-6395 "somewhat"

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6502]

diff --git a/STViz/DebugEventToTemplateEnumerationConverter.cs b/STViz/DebugEventToTemplateEnumerationConverter.cs
deleted file mode 100644
index af54354..0000000
--- a/STViz/DebugEventToTemplateEnumerationConverter.cs
+++ /dev/null
@@ -1,58 +0,0 @@
-﻿/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
- * All rights reserved.
- *
- * Conversion to C#:
- * Copyright (c) 2008-2009 Sam Harwell
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- * 3. The name of the author may not be used to endorse or promote products
- *    derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
- * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
- * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
- * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-namespace STViz
-{
-    using System;
-    using System.Collections.Generic;
-    using System.Globalization;
-    using System.Linq;
-    using System.Windows.Data;
-    using StringTemplate;
-
-    public class DebugEventToTemplateEnumerationConverter : IValueConverter
-    {
-        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
-        {
-            IEnumerable<Interpreter.DebugEvent> events = value as IEnumerable<Interpreter.DebugEvent>;
-            if (events == null)
-                return null;
-
-            return events.Select(e => e.Template);
-        }
-
-        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
-        {
-            throw new NotImplementedException();
-        }
-    }
-}
diff --git a/STViz/STViz.csproj b/STViz/STViz.csproj
index bc621b5..f58fb82 100644
--- a/STViz/STViz.csproj
+++ b/STViz/STViz.csproj
@@ -75,7 +75,6 @@
</Compile>
</ItemGroup>
<ItemGroup>
-    <Compile Include="DebugEventToTemplateEnumerationConverter.cs" />
<Compile Include="Properties\AssemblyInfo.cs">
<SubType>Code</SubType>
</Compile>
diff --git a/STViz/Window1.xaml b/STViz/Window1.xaml
index 0214907..e8e2d2d 100644
--- a/STViz/Window1.xaml
+++ b/STViz/Window1.xaml
@@ -1,12 +1,9 @@
﻿<Window x:Class="STViz.Window1"
xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
-    xmlns:stviz="clr-namespace:STViz"
Title="StringTemplate Visualizer" Height="522" Width="591">

<Window.Resources>
-        <stviz:DebugEventToTemplateEnumerationConverter x:Key="DebugEventToTemplateEnumerationConverter" />
-
<DataTemplate x:Key="AttributeListItemTemplate">
<TextBlock><TextBlock Text="{Binding Key}" /><Run> = </Run><TextBlock Text="{Binding Value}" /></TextBlock>
</DataTemplate>
@@ -15,8 +12,8 @@
<TextBlock Text="{Binding Name}" />
</DataTemplate>

-        <HierarchicalDataTemplate x:Key="TemplateEventsItemTemplate" ItemsSource="{Binding Path=Events, Converter={StaticResource DebugEventToTemplateEnumerationConverter}}">
-            <TextBlock Text="{Binding Name}" />
+        <HierarchicalDataTemplate x:Key="TemplateEventsItemTemplate" ItemsSource="{Binding Path=Template.Events}">
+            <TextBlock Text="{Binding Template.Name}" />
</HierarchicalDataTemplate>
</Window.Resources>

@@ -30,19 +27,19 @@
</MenuItem>
</Menu>
<Grid Name="grid1">
-            <TextBox Height="159" Margin="0,0,6,6" Name="txtTemplate" VerticalAlignment="Bottom" IsReadOnly="True" HorizontalAlignment="Right" Width="201">
-                <TextBox.DataContext>
-                    <Binding ElementName="lstStack" Path="SelectedItem" Mode="OneWay" />
+            <RichTextBox Height="159" Margin="0,0,6,6" Name="txtTemplate" VerticalAlignment="Bottom" IsReadOnly="True" HorizontalAlignment="Right" Width="201" VerticalScrollBarVisibility="Auto" DataContextChanged="OnTextTemplateDataContextChanged">
+                <RichTextBox.DataContext>
+                    <Binding ElementName="templatesTree" Path="SelectedItem" Mode="OneWay" />
<!--<Binding ElementName="templatesTree" Path="SelectedValue" />-->
-                </TextBox.DataContext>
-                <TextBox.Text>
+                </RichTextBox.DataContext>
+                <!--<RichTextBox.>
<Binding Path="CompiledTemplate.Template" Mode="OneWay"/>
-                </TextBox.Text>
-            </TextBox>
-            <TextBox Margin="164,6,6,171" Name="txtOutput" IsReadOnly="True">Output</TextBox>
-            <ListBox Margin="6,0,0,6" Name="lstStack" DataContext="{Binding ElementName=templatesTree, Path=SelectedItem, Mode=OneWay}" ItemsSource="{Binding Path=EnclosingInstanceStack}" ItemTemplate="{StaticResource TemplateStackListItemTemplate}" HorizontalAlignment="Left" Width="152" Height="217" VerticalAlignment="Bottom" />
-            <ListBox Margin="164,0,213,6" Name="lstAttributes" DataContext="{Binding ElementName=templatesTree, Path=SelectedItem, Mode=OneWay}" ItemsSource="{Binding Path=Attributes}" ItemTemplate="{StaticResource AttributeListItemTemplate}" Height="159" VerticalAlignment="Bottom" />
-            <TreeView Margin="6,6,0,229" Name="templatesTree" ItemsSource="{Binding}" ItemTemplate="{StaticResource TemplateEventsItemTemplate}" HorizontalAlignment="Left" Width="152" />
+                </RichTextBox.Text>-->
+            </RichTextBox>
+            <RichTextBox Margin="164,6,6,171" Name="txtOutput" IsReadOnly="True" />
+            <ListBox Margin="6,0,0,6" Name="lstStack" DataContext="{Binding ElementName=templatesTree, Path=SelectedItem, Mode=OneWay}" ItemsSource="{Binding Path=Template.EnclosingInstanceStack}" ItemTemplate="{StaticResource TemplateStackListItemTemplate}" HorizontalAlignment="Left" Width="152" Height="217" VerticalAlignment="Bottom" />
+            <ListBox Margin="164,0,213,6" Name="lstAttributes" DataContext="{Binding ElementName=templatesTree, Path=SelectedItem, Mode=OneWay}" ItemsSource="{Binding Path=Template.Attributes}" ItemTemplate="{StaticResource AttributeListItemTemplate}" Height="159" VerticalAlignment="Bottom" />
+            <TreeView Margin="6,6,0,229" Name="templatesTree" ItemsSource="{Binding}" ItemTemplate="{StaticResource TemplateEventsItemTemplate}" HorizontalAlignment="Left" Width="152" SelectedItemChanged="OnTemplatesTreeSelectedItemChanged" />
</Grid>
</DockPanel>
</Window>
diff --git a/STViz/Window1.xaml.cs b/STViz/Window1.xaml.cs
index b19345e..93beaa4 100644
--- a/STViz/Window1.xaml.cs
+++ b/STViz/Window1.xaml.cs
@@ -39,6 +39,8 @@ namespace STViz
using File = System.IO.File;
using Path = System.IO.Path;
using StringWriter = System.IO.StringWriter;
+    using System.Windows.Documents;
+    using System.Windows.Media;

public partial class Window1 : Window
{
@@ -49,11 +51,13 @@ namespace STViz
string templates =
"method(type,name,args,stats) ::= <<\n" +
"public <type> <name>(<args:{a| int <a>}; separator=\", \">) {\n" +
+                "    <if(locals)>int locals[<locals>];<endif>\n" +
"    <stats;separator=\"\\n\">\n" +
"}\n" +
">>\n" +
"assign(a,b) ::= \"<a> = <b>;\"\n" +
-                "return(x) ::= <<return <x>;>>\n";
+                "return(x) ::= <<return <x>;>>\n" +
+                "paren(x) ::= \"(<x>)\"\n";

string tmpdir = Path.GetTempPath();
File.WriteAllText(Path.Combine(tmpdir, "t.stg"), templates);
@@ -62,9 +66,12 @@ namespace STViz
st.code.Dump();
st.Add("type", "float");
st.Add("name", "foo");
+            st.Add("locals", 3);
st.Add("args", new String[] { "x", "y", "z" });
Template s1 = group.GetInstanceOf("assign");
-            s1.Add("a", "x");
+            Template paren = group.GetInstanceOf("paren");
+            paren.Add("x", "x");
+            s1.Add("a", paren);
s1.Add("b", "y");
Template s2 = group.GetInstanceOf("assign");
s2.Add("a", "y");
@@ -81,8 +88,53 @@ namespace STViz
interp.Exec(st);
IList<Interpreter.DebugEvent> events = interp.Events;

-            templatesTree.Items.Add(st);
-            txtOutput.Text = sw.ToString();
+            string text = sw.ToString();
+            templatesTree.Items.Add(new RootEvent(st, 0, text.Length));
+            txtOutput.Document = new FlowDocument(new Paragraph(new Run(text)));
+        }
+
+        private void OnTextTemplateDataContextChanged(object sender, DependencyPropertyChangedEventArgs e)
+        {
+            txtTemplate.Document.Blocks.Clear();
+
+            Interpreter.DebugEvent templateEvent = e.NewValue as Interpreter.DebugEvent;
+            if (templateEvent == null)
+                return;
+
+            Template template = templateEvent.Template;
+            if (template != null)
+            {
+                txtTemplate.Document.Blocks.Add(new Paragraph(new Run(template.CompiledTemplate.Template)));
+                if (template.IsSubtemplate)
+                {
+                    Highlight(txtTemplate.Document, template.CompiledTemplate.embeddedStart, template.CompiledTemplate.embeddedStop - template.CompiledTemplate.embeddedStart + 1);
+                }
+            }
+        }
+
+        private static void Highlight(FlowDocument document, int start, int length)
+        {
+            var range = new TextRange(document.ContentStart, document.ContentEnd);
+            range.ClearAllProperties();
+            range = new TextRange(document.ContentStart.GetPositionAtOffset(start), document.ContentStart.GetPositionAtOffset(start + length));
+            range.ApplyPropertyValue(TextElement.BackgroundProperty, Brushes.LightGray);
+        }
+
+        private void OnTemplatesTreeSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
+        {
+            Interpreter.DebugEvent debugEvent = e.NewValue as Interpreter.DebugEvent;
+            if (debugEvent == null)
+                return;
+
+            Highlight(txtOutput.Document, debugEvent.Start, debugEvent.Stop - debugEvent.Start + 1);
+        }
+
+        private class RootEvent : Interpreter.DebugEvent
+        {
+            public RootEvent(Template template, int start, int stop)
+                : base(template, start, stop)
+            {
+            }
}
}
}
diff --git a/StringTemplate4/AutoIndentWriter.cs b/StringTemplate4/AutoIndentWriter.cs
index ba5907d..d491eb4 100644
--- a/StringTemplate4/AutoIndentWriter.cs
+++ b/StringTemplate4/AutoIndentWriter.cs
@@ -60,16 +60,16 @@ namespace StringTemplate
protected bool atStartOfLine = true;

/** Track char position in the line (later we can think about tabs).
-         *  Indexed from 0.  We want to keep charPosition <= lineWidth.
+         *  Indexed from 0.  We want to keep charPosition &lt;= lineWidth.
*  This is the position we are *about* to write not the position
*  last written to.
*/
protected int charPosition = 0;

/// <summary>
-        /// The absolute char index into the output of the last char written.
+        /// The absolute char index into the output of the next char to be written.
/// </summary>
-        protected int charIndex = -1;
+        protected int charIndex = 0;

protected int lineWidth = NoWrap;

@@ -158,10 +158,10 @@ namespace StringTemplate
{
atStartOfLine = true;
charPosition = -1; // set so the write below sets to 0
-                    n += newline.Length;
@out.Write(newline);
+                    n += newline.Length;
+                    charIndex += newline.Length;
charPosition += n; // wrote n more char
-                    charIndex += n;
continue;
}
// normal character
diff --git a/StringTemplate4/CompiledTemplate.cs b/StringTemplate4/CompiledTemplate.cs
index 6255f80..1d056aa 100644
--- a/StringTemplate4/CompiledTemplate.cs
+++ b/StringTemplate4/CompiledTemplate.cs
@@ -81,13 +81,18 @@ namespace StringTemplate
{
get
{
-                if (embeddedStart >= 0)
-                    return template.Substring(embeddedStart, embeddedStop - embeddedStart);
-
return template;
}
}

+        public bool IsSubtemplate
+        {
+            get
+            {
+                return name.StartsWith("/" + StringTemplate.Template.SubtemplatePrefix);
+            }
+        }
+
public virtual string Instructions()
{
var disassembler = new BytecodeDisassembler(instrs, codeSize, strings);
diff --git a/StringTemplate4/Compiler.cs b/StringTemplate4/Compiler.cs
index 32af889..334593e 100644
--- a/StringTemplate4/Compiler.cs
+++ b/StringTemplate4/Compiler.cs
@@ -225,7 +225,7 @@ namespace StringTemplate
RecognizerSharedState state)
{
subtemplateCount++;
-            string name = templatePathPrefix + "_sub" + subtemplateCount;
+            string name = templatePathPrefix + Template.SubtemplatePrefix + subtemplateCount;
ITokenSource tokenSource = input.TokenSource;
TemplateLexer lexer = tokenSource as TemplateLexer;
int start = -1;
diff --git a/StringTemplate4/ITemplateWriter.cs b/StringTemplate4/ITemplateWriter.cs
index 5b67d89..7a61cf1 100644
--- a/StringTemplate4/ITemplateWriter.cs
+++ b/StringTemplate4/ITemplateWriter.cs
@@ -35,7 +35,8 @@ namespace StringTemplate
public interface ITemplateWriter
{
/// <summary>
-        /// Get the absolute char index into the output of the last char we wrote. Returns -1 if no char written.
+        /// Get the absolute char index into the output of the char we're about to write.
+        /// Returns 0 if no char written yet.
/// </summary>
int Index
{
diff --git a/StringTemplate4/Interpreter.cs b/StringTemplate4/Interpreter.cs
index 4795dcc..4a4de8f 100644
--- a/StringTemplate4/Interpreter.cs
+++ b/StringTemplate4/Interpreter.cs
@@ -124,7 +124,7 @@ namespace StringTemplate

public int Exec(Template self)
{
-            int start = @out.Index + 1; // track char we're about to write
+            int start = @out.Index; // track char we're about to write
int prevOpcode = 0;
int n = 0; // how many char we write out
int nameIndex = 0;
@@ -401,9 +401,12 @@ namespace StringTemplate

if (debug)
{
-                events.Add(new EvalTemplateEvent(self, start, @out.Index));
+                int stop = @out.Index - 1;
+                EvalTemplateEvent e = new EvalTemplateEvent(self, start, stop);
+                Console.WriteLine(e);
+                events.Add(e);
if (self.enclosingInstance != null)
-                    self.enclosingInstance.events.Add(new EvalTemplateEvent(self, start, @out.Index));
+                    self.enclosingInstance.events.Add(e);
}

return n;
@@ -411,12 +414,12 @@ namespace StringTemplate

protected int WriteObjectNoOptions(Template self, object o, int exprStart, int exprStop)
{
-            int start = @out.Index + 1; // track char we're about to write
-            int n = WriteObject(@out, self, o, (string[])null);
+            int start = @out.Index; // track char we're about to write
+            int n = WriteObject(@out, self, o, null);

if (debug)
{
-                events.Add(new EvalExprEvent(self, start, @out.Index, exprStart, exprStop));
+                events.Add(new EvalExprEvent(self, start, @out.Index - 1, exprStart, exprStop));
//self.events.Add(new EvalExprEvent(self, start, @out.Index, exprStart, exprStop));
}

@@ -425,7 +428,7 @@ namespace StringTemplate

protected int WriteObjectWithOptions(Template self, object o, object[] options, int exprStart, int exprStop)
{
-            int start = @out.Index + 1; // track char we're about to write
+            int start = @out.Index; // track char we're about to write
// precompute all option values (render all the way to strings)
string[] optionStrings = null;
if (options != null)
@@ -447,7 +450,7 @@ namespace StringTemplate

if (debug)
{
-                events.Add(new EvalTemplateEvent(self, start, @out.Index));
+                events.Add(new EvalTemplateEvent(self, start, @out.Index - 1));
//self.events.Add(new EvalTemplateEvent(self, start, @out.Index));
}

@@ -1167,15 +1170,11 @@ namespace StringTemplate

public class DebugEvent
{
-            // output location
-            protected int start;
-            protected int stop;
-
public DebugEvent(Template self, int start, int stop)
{
this.Template = self;
-                this.start = start;
-                this.stop = stop;
+                this.Start = start;
+                this.Stop = stop;
}

public Template Template
@@ -1184,9 +1183,21 @@ namespace StringTemplate
private set;
}

+            public int Start
+            {
+                get;
+                private set;
+            }
+
+            public int Stop
+            {
+                get;
+                private set;
+            }
+
public override string ToString()
{
-                return string.Format("{0}{{self={1},attr={2},start={3},stop={4}}}", GetType().Name, Template, Template.Attributes, start, stop);
+                return string.Format("{0}{{self={1},attr={2},start={3},stop={4}}}", GetType().Name, Template, Template.Attributes, Start, Stop);
}
}

@@ -1215,7 +1226,7 @@ namespace StringTemplate

public override string ToString()
{
-                return string.Format("{0}{{self={1},attr={2},start={3},stop={4},expr={5}}}", GetType().Name, Template, Template.Attributes, start, stop, expr);
+                return string.Format("{0}{{self={1},attr={2},start={3},stop={4},expr={5}}}", GetType().Name, Template, Template.Attributes, Start, Stop, expr);
}
}
}
diff --git a/StringTemplate4/Template.cs b/StringTemplate4/Template.cs
index 9909de9..f7fcdad 100644
--- a/StringTemplate4/Template.cs
+++ b/StringTemplate4/Template.cs
@@ -46,6 +46,7 @@ namespace StringTemplate

public class Template
{
+        public const string SubtemplatePrefix = "_sub";
public const string UnknownName = "unknown";
public static readonly Template Blank = new BlankTemplate();

@@ -145,6 +146,14 @@ namespace StringTemplate
}
}

+        public bool IsSubtemplate
+        {
+            get
+            {
+                return CompiledTemplate.IsSubtemplate;
+            }
+        }
+
public string Name
{
get
diff --git a/StringTemplate4/TemplateGroup.cs b/StringTemplate4/TemplateGroup.cs
index 04cd611..7f7d7fc 100644
--- a/StringTemplate4/TemplateGroup.cs
+++ b/StringTemplate4/TemplateGroup.cs
@@ -434,9 +434,10 @@ namespace StringTemplate
buf.Append(" : " + imports);
foreach (string name in templates.Keys)
{
-                if (name.StartsWith("/_sub"))
-                    continue;
CompiledTemplate c = templates[name];
+                if (c.IsSubtemplate)
+                    continue;
+
int slash = name.LastIndexOfAny(new char[] { Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar });
string effectiveName = name.Substring(slash + 1);
buf.Append(effectiveName);

