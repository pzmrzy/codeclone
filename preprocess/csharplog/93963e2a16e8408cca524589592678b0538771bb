commit 93963e2a16e8408cca524589592678b0538771bb
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Wed Jan 20 15:57:53 2010 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Wed Jan 20 15:57:53 2010 -0800

C# Port:
* Merge CL6444

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6584]

diff --git a/Antlr3.Test/ST4/StringTemplateTestBase.cs b/Antlr3.Test/ST4/StringTemplateTestBase.cs
index 3447d57..e648d81 100644
--- a/Antlr3.Test/ST4/StringTemplateTestBase.cs
+++ b/Antlr3.Test/ST4/StringTemplateTestBase.cs
@@ -64,7 +64,7 @@
public void CheckTokens(string template, string expected, char delimiterStartChar, char delimiterStopChar)
{
TemplateLexer lexer = new TemplateLexer(new ANTLRStringStream(template), delimiterStartChar, delimiterStopChar);
-            UnbufferedTokenStream tokens = new UnbufferedTokenStream(lexer);
+            CommonTokenStream tokens = new CommonTokenStream(lexer);
StringBuilder buf = new StringBuilder();
buf.Append("[");
int i = 1;
diff --git a/Antlr3.Test/ST4/TestGroups.cs b/Antlr3.Test/ST4/TestGroups.cs
index 83158b2..acf75f5 100644
--- a/Antlr3.Test/ST4/TestGroups.cs
+++ b/Antlr3.Test/ST4/TestGroups.cs
@@ -437,7 +437,7 @@ namespace AntlrUnitTests.ST4
ST st = group.GetInstanceOf("a");
string expected =
"foo" + newline +
-                    "bar" + newline;
+                    "bar";
string result = st.Render();
Assert.AreEqual(expected, result);
}
diff --git a/Antlr3.Test/ST4/TestSyntaxErrors.cs b/Antlr3.Test/ST4/TestSyntaxErrors.cs
index a7fb2c3..cea962b 100644
--- a/Antlr3.Test/ST4/TestSyntaxErrors.cs
+++ b/Antlr3.Test/ST4/TestSyntaxErrors.cs
@@ -57,7 +57,7 @@ namespace AntlrUnitTests.ST4
RecognitionException re = (RecognitionException)se.InnerException;
result = 1 + ":" + re.CharPositionInLine + ": " + se.Message;
}
-            string expected = "1:1: mismatched input '<' expecting EOF";
+            string expected = "1:0: is this a template? parser says: mismatched input ' ' expecting EndOfFile";
Assert.AreEqual(expected, result);
}

@@ -84,7 +84,6 @@ namespace AntlrUnitTests.ST4
public void TestValidButOutOfPlaceChar()
{
String templates =
-                "group t;\n" +
"foo() ::= <<hi <.> mom>>\n";
WriteFile(tmpdir, "t.stg", templates);

@@ -101,7 +100,6 @@ namespace AntlrUnitTests.ST4
public void TestValidButOutOfPlaceCharOnDifferentLine()
{
String templates =
-                "group t;\n" +
"foo() ::= \"hi <\n" +
".> mom\"\n";
WriteFile(tmpdir, "t.stg", templates);
@@ -119,7 +117,6 @@ namespace AntlrUnitTests.ST4
public void TestErrorInNestedTemplate()
{
String templates =
-                "group t;\n" +
"foo() ::= \"hi <name:{[<aaa.bb!>]}> mom\"\n";
WriteFile(tmpdir, "t.stg", templates);

diff --git a/StringTemplate4/Compiler/Group.g3 b/StringTemplate4/Compiler/Group.g3
index aa0cab0..534e614 100644
--- a/StringTemplate4/Compiler/Group.g3
+++ b/StringTemplate4/Compiler/Group.g3
@@ -198,7 +198,7 @@ ANONYMOUS_TEMPLATE
TemplateLexer lexer =
new TemplateLexer(input, this._group.delimiterStartChar, this._group.delimiterStopChar);
lexer.subtemplateDepth = 1;
-		UnbufferedTokenStream tokens = new UnbufferedTokenStream(lexer);
+		CommonTokenStream tokens = new CommonTokenStream(lexer);
TemplateParser parser = new TemplateParser(tokens, (ICodeGenerator)null, null);
parser.template();
}
diff --git a/StringTemplate4/Compiler/TemplateCompiler.cs b/StringTemplate4/Compiler/TemplateCompiler.cs
index ca40ecb..6638850 100644
--- a/StringTemplate4/Compiler/TemplateCompiler.cs
+++ b/StringTemplate4/Compiler/TemplateCompiler.cs
@@ -134,7 +134,7 @@ namespace StringTemplate.Compiler
code.template = template;

TemplateLexer lexer = new TemplateLexer(new ANTLRStringStream(template), delimiterStartChar, delimiterStopChar);
-            UnbufferedTokenStream tokens = new UnbufferedTokenStream(lexer);
+            CommonTokenStream tokens = new CommonTokenStream(lexer);
TemplateParser parser = new TemplateParser(tokens, this, enclosingTemplateName);
try
{
@@ -143,8 +143,10 @@ namespace StringTemplate.Compiler
catch (RecognitionException re)
{
string msg = parser.GetErrorMessage(re, parser.TokenNames);
-                Console.Error.WriteLine(re.StackTrace);
-                throw new TemplateRecognitionException(msg, re);
+                if (tokens.LA(1) != TemplateLexer.LDELIM)
+                    throw new TemplateRecognitionException("is this a template? parser says: " + msg, re);
+                else
+                    throw new TemplateRecognitionException(msg, re);
}

if (strings != null)
diff --git a/StringTemplate4/TemplateGroupDirectory.cs b/StringTemplate4/TemplateGroupDirectory.cs
index 7c4b136..7987616 100644
--- a/StringTemplate4/TemplateGroupDirectory.cs
+++ b/StringTemplate4/TemplateGroupDirectory.cs
@@ -131,13 +131,14 @@ namespace StringTemplate
if (ErrorManager.CompatibilityMode)
{
string template = File.ReadAllText(absoluteFileName);
+                    template = template.Trim();
DefineTemplate(prefix, templateName, null, template);
}
else
{
ANTLRFileStream fs = new ANTLRFileStream(absoluteFileName, encoding);
GroupLexer lexer = new GroupLexer(fs);
-                    UnbufferedTokenStream tokens = new UnbufferedTokenStream(lexer);
+                    CommonTokenStream tokens = new CommonTokenStream(lexer);
GroupParser parser = new GroupParser(tokens);
parser._group = this;
parser.templateDef(prefix);

