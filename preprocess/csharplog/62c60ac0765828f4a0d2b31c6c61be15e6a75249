commit 62c60ac0765828f4a0d2b31c6c61be15e6a75249
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Tue Apr 12 04:18:01 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Tue Apr 12 04:18:01 2011 -0800

(C# 3) STViz updates:
* Fix AST display issues with escape characters
* Fade items in the attributes window which are hidden by a value farther up the stack
* Bold user-instanced templates in the call hierarchy

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8183]

diff --git a/Antlr3/Codegen/CodeGenerator.cs b/Antlr3/Codegen/CodeGenerator.cs
index abf064a..d587aa8 100644
--- a/Antlr3/Codegen/CodeGenerator.cs
+++ b/Antlr3/Codegen/CodeGenerator.cs
@@ -489,6 +489,7 @@ namespace Antlr3.Codegen
if (string.IsNullOrEmpty(name) && superGroup == null)
{
TemplateGroup group = new TemplateGroupFile(groupFileName);
+                group.TrackCreationEvents = CodeGenerator.LaunchTemplateInspector;
group.IterateAcrossValues = true;
_coreTemplates[language] = group;
return group;
@@ -496,6 +497,7 @@ namespace Antlr3.Codegen
else
{
TemplateGroup group = new TemplateGroupFile(groupFileName);
+                group.TrackCreationEvents = CodeGenerator.LaunchTemplateInspector;
group.IterateAcrossValues = true;
group.ImportTemplates(superGroup);

diff --git a/Antlr4.StringTemplate.Visualizer/Antlr4.StringTemplate.Visualizer.csproj b/Antlr4.StringTemplate.Visualizer/Antlr4.StringTemplate.Visualizer.csproj
index c360d77..5dcb7ce 100644
--- a/Antlr4.StringTemplate.Visualizer/Antlr4.StringTemplate.Visualizer.csproj
+++ b/Antlr4.StringTemplate.Visualizer/Antlr4.StringTemplate.Visualizer.csproj
@@ -56,6 +56,7 @@
<Reference Include="PresentationFramework" />
</ItemGroup>
<ItemGroup>
+    <Compile Include="AstNodeToStringConverter.cs" />
<Compile Include="AttributeViewModel.cs" />
<Compile Include="Extensions\FlowDocumentExtensions.cs" />
<Compile Include="Extensions\ListExtensions.cs" />
diff --git a/Antlr4.StringTemplate.Visualizer/AstNodeToStringConverter.cs b/Antlr4.StringTemplate.Visualizer/AstNodeToStringConverter.cs
new file mode 100644
index 0000000..1bf5e5e
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/AstNodeToStringConverter.cs
@@ -0,0 +1,71 @@
+ï»¿/*
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr4.StringTemplate.Visualizer
+{
+    using System;
+    using System.Collections.Generic;
+    using System.Linq;
+    using System.Text;
+    using System.Windows.Data;
+    using System.Globalization;
+    using Antlr.Runtime.Tree;
+
+    public class AstNodeToStringConverter : IValueConverter
+    {
+        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
+        {
+            CommonTree tree = value as CommonTree;
+            if (tree != null)
+            {
+                if (tree.IsNil)
+                    return "nil";
+
+                string text = tree.Text;
+                if (string.IsNullOrEmpty(text))
+                    return string.Empty;
+
+                return text.Replace("\\", "\\\\").Replace("\r", "\\r").Replace("\n", "\\n").Replace("\0", "\\0");
+            }
+
+            if (value != null)
+                return value.ToString();
+
+            return value;
+        }
+
+        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
+        {
+            throw new NotSupportedException();
+        }
+    }
+}
diff --git a/Antlr4.StringTemplate.Visualizer/AttributeViewModel.cs b/Antlr4.StringTemplate.Visualizer/AttributeViewModel.cs
index b293790..1854660 100644
--- a/Antlr4.StringTemplate.Visualizer/AttributeViewModel.cs
+++ b/Antlr4.StringTemplate.Visualizer/AttributeViewModel.cs
@@ -42,12 +42,14 @@ namespace Antlr4.StringTemplate.Visualizer
{
private readonly string _name;
private readonly object _value;
+        private readonly bool _hidden;
private readonly ReadOnlyCollection<AddAttributeEvent> _events;

-        public AttributeViewModel(string name, object value, IEnumerable<AddAttributeEvent> events)
+        public AttributeViewModel(string name, object value, bool hidden, IEnumerable<AddAttributeEvent> events)
{
_name = name;
_value = value;
+            _hidden = hidden;
if (events != null)
_events = events.ToList().AsReadOnly();
}
@@ -68,6 +70,14 @@ namespace Antlr4.StringTemplate.Visualizer
}
}

+        public bool IsHidden
+        {
+            get
+            {
+                return _hidden;
+            }
+        }
+
public ReadOnlyCollection<AddAttributeEvent> Events
{
get
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs b/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
index aa54daa..8bc6f56 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
+++ b/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
@@ -38,6 +38,7 @@ namespace Antlr4.StringTemplate.Visualizer
using Antlr4.StringTemplate.Debug;
using ArgumentNullException = System.ArgumentNullException;
using Path = System.IO.Path;
+    using TemplateDebugState = Antlr4.StringTemplate.Template.TemplateDebugState;

public class TemplateCallHierarchyViewModel : INotifyPropertyChanged
{
@@ -88,6 +89,15 @@ namespace Antlr4.StringTemplate.Visualizer
}
}

+        public bool IsUserInstanced
+        {
+            get
+            {
+                TemplateDebugState debugState = _event.Template.DebugState;
+                return debugState != null && debugState.NewTemplateEvent != null;
+            }
+        }
+
public bool IsExpanded
{
get
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateFrameAttributeViewModel.cs b/Antlr4.StringTemplate.Visualizer/TemplateFrameAttributeViewModel.cs
index f810d4f..dc7f256 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateFrameAttributeViewModel.cs
+++ b/Antlr4.StringTemplate.Visualizer/TemplateFrameAttributeViewModel.cs
@@ -47,7 +47,7 @@ namespace Antlr4.StringTemplate.Visualizer
private readonly EvalTemplateEvent _event;
private readonly ReadOnlyCollection<AttributeViewModel> _attributes = EmptyAttributes;

-        public TemplateFrameAttributeViewModel(EvalTemplateEvent @event)
+        public TemplateFrameAttributeViewModel(EvalTemplateEvent @event, HashSet<string> hiddenAttributes)
{
if (@event == null)
throw new ArgumentNullException("event");
@@ -57,7 +57,16 @@ namespace Antlr4.StringTemplate.Visualizer
Template template = _event.Frame.Template;
IDictionary<string, object> attributes = template.GetAttributes();
if (attributes != null)
-                _attributes = attributes.Select(i => new AttributeViewModel(i.Key, i.Value, GetAttributeEvents(template, i.Key))).ToList().AsReadOnly();
+            {
+                List<AttributeViewModel> attributesList = new List<AttributeViewModel>();
+                foreach (var attribute in attributes)
+                {
+                    bool hidden = !hiddenAttributes.Add(attribute.Key);
+                    attributesList.Add(new AttributeViewModel(attribute.Key, attribute.Value, hidden, GetAttributeEvents(template, attribute.Key)));
+                }
+
+                _attributes = attributesList.AsReadOnly();
+            }
}

public event PropertyChangedEventHandler PropertyChanged;
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml
index 1ff5e67..151817f 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml
@@ -57,7 +57,17 @@
ItemsSource="{Binding TemplateCallHierarchy}">
<TreeView.ItemTemplate>
<HierarchicalDataTemplate ItemsSource="{Binding Children}">
-                        <ContentControl Content="{Binding}" />
+                        <ContentPresenter Content="{Binding}">
+                            <ContentPresenter.Resources>
+                                <Style TargetType="{x:Type TextBlock}">
+                                    <Style.Triggers>
+                                        <DataTrigger Binding="{Binding IsUserInstanced}" Value="true">
+                                            <Setter Property="FontWeight" Value="Bold" />
+                                        </DataTrigger>
+                                    </Style.Triggers>
+                                </Style>
+                            </ContentPresenter.Resources>
+                        </ContentPresenter>
</HierarchicalDataTemplate>
</TreeView.ItemTemplate>
<TreeView.ItemContainerStyle>
@@ -85,7 +95,17 @@
ItemsSource="{Binding AttributeStack}">
<TreeView.ItemTemplate>
<HierarchicalDataTemplate ItemsSource="{Binding Attributes}">
-                        <ContentControl Content="{Binding}" />
+                        <ContentPresenter Content="{Binding}">
+                            <ContentPresenter.Resources>
+                                <Style TargetType="{x:Type TextBlock}">
+                                    <Style.Triggers>
+                                        <DataTrigger Binding="{Binding IsHidden}" Value="true">
+                                            <Setter Property="Foreground" Value="Gray" />
+                                        </DataTrigger>
+                                    </Style.Triggers>
+                                </Style>
+                            </ContentPresenter.Resources>
+                        </ContentPresenter>
</HierarchicalDataTemplate>
</TreeView.ItemTemplate>
<TreeView.ItemContainerStyle>
@@ -108,9 +128,12 @@
<GridSplitter Grid.Column="1" Grid.ColumnSpan="1" Width="5" ResizeBehavior="PreviousAndNext" />
<TreeView Grid.Column="2" Grid.ColumnSpan="1" Name="AstTreeView" SelectedItemChanged="HandleAstTreeViewSelectedItemChanged"
ItemsSource="{Binding Ast.Children}">
+                            <TreeView.Resources>
+                                <local:AstNodeToStringConverter x:Key="AstNodeToStringConverter" />
+                            </TreeView.Resources>
<TreeView.ItemTemplate>
<HierarchicalDataTemplate ItemsSource="{Binding Children}">
-                                    <ContentControl Content="{Binding}" />
+                                    <ContentPresenter Content="{Binding Converter={StaticResource AstNodeToStringConverter}}" />
</HierarchicalDataTemplate>
</TreeView.ItemTemplate>
</TreeView>
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
index b192faa..5794a92 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
@@ -47,7 +47,8 @@ namespace Antlr4.StringTemplate.Visualizer

public partial class TemplateVisualizerFrame : UserControl
{
-        private TemplateFrame currentTemplate;
+        private InterpEvent _currentEvent;
+        private TemplateFrame _currentFrame;

public TemplateVisualizerFrame()
{
@@ -75,7 +76,8 @@ namespace Antlr4.StringTemplate.Visualizer
if (viewModel == null)
return;

-                currentTemplate = viewModel.Visualizer.RootTemplate;
+                _currentEvent = null;
+                _currentFrame = viewModel.Visualizer.RootTemplate;
OutputTextBox.Document = new FlowDocument(new Paragraph(new Run(viewModel.Output)
{
FontFamily = new FontFamily("Consolas")
@@ -94,7 +96,8 @@ namespace Antlr4.StringTemplate.Visualizer
if (runtimeMessage != null)
{
Interval interval = runtimeMessage.SourceInterval;
-                currentTemplate = runtimeMessage.Frame;
+                _currentEvent = null;
+                _currentFrame = runtimeMessage.Frame;
UpdateCurrentTemplate();
Highlight(TemplateTextBox.Document, interval);
}
@@ -108,9 +111,10 @@ namespace Antlr4.StringTemplate.Visualizer
private void HandleCallHierarchyTreeViewSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
{
TemplateCallHierarchyViewModel selected = CallHierarchyTreeView.SelectedItem as TemplateCallHierarchyViewModel;
-            if (selected != null)
+            if (selected != null && _currentFrame != selected.Frame)
{
-                currentTemplate = selected.Frame;
+                _currentEvent = selected.Event;
+                _currentFrame = selected.Frame;
UpdateCurrentTemplate();
}
}
@@ -121,8 +125,8 @@ namespace Antlr4.StringTemplate.Visualizer
if (node == null)
return;

-            CommonToken a = (CommonToken)currentTemplate.Template.impl.tokens.Get(node.TokenStartIndex);
-            CommonToken b = (CommonToken)currentTemplate.Template.impl.tokens.Get(node.TokenStopIndex);
+            IToken a = _currentFrame.Template.impl.tokens.Get(node.TokenStartIndex);
+            IToken b = _currentFrame.Template.impl.tokens.Get(node.TokenStopIndex);
if (a == null || b == null)
return;

@@ -131,13 +135,13 @@ namespace Antlr4.StringTemplate.Visualizer

private void HandleOutputTextBoxSelectionChanged(object sender, RoutedEventArgs e)
{
-            InterpEvent de = FindEventAtOutputLocation(ViewModel.AllEvents, OutputTextBox.Document.GetCharOffsetToPosition(OutputTextBox.CaretPosition));
-            if (de == null)
-                currentTemplate = ViewModel.Visualizer.RootTemplate;
+            _currentEvent = FindEventAtOutputLocation(ViewModel.AllEvents, OutputTextBox.Document.GetCharOffsetToPosition(OutputTextBox.CaretPosition));
+            if (_currentEvent == null)
+                _currentFrame = ViewModel.Visualizer.RootTemplate;
else
-                currentTemplate = de.Frame;
+                _currentFrame = _currentEvent.Frame;

-            SetSelectionPath(ViewModel.TemplateCallHierarchy[0], currentTemplate.GetEvalTemplateEventStack(true));
+            SetSelectionPath(ViewModel.TemplateCallHierarchy[0], _currentFrame.GetEvalTemplateEventStack(true));
UpdateCurrentTemplate();
}

@@ -155,7 +159,7 @@ namespace Antlr4.StringTemplate.Visualizer
return null;
}

-        private static void Highlight(FlowDocument document, Interval interval)
+        private static TextPointer Highlight(FlowDocument document, Interval interval)
{
if (document == null)
throw new ArgumentNullException("document");
@@ -166,19 +170,20 @@ namespace Antlr4.StringTemplate.Visualizer
TextRange documentRange = new TextRange(document.ContentStart, document.ContentEnd);
documentRange.ApplyPropertyValue(FlowDocument.BackgroundProperty, FlowDocument.BackgroundProperty.DefaultMetadata.DefaultValue);

-            // highlight the new text
-            if (interval != null)
-            {
-                int startOffset = interval.Start;
-                int endOffset = interval.End;
-                TextPointer highlightStart = document.GetPointerFromCharOffset(ref startOffset);
-                TextPointer highlightStop = document.GetPointerFromCharOffset(ref endOffset);
-                if (startOffset != 0 || endOffset != 0)
-                    return;
+            if (interval == null)
+                return null;

-                var textRange = new TextRange(highlightStart, highlightStop);
-                textRange.ApplyPropertyValue(FlowDocument.BackgroundProperty, Brushes.Yellow);
-            }
+            // highlight the new text
+            int startOffset = interval.Start;
+            int endOffset = interval.End;
+            TextPointer highlightStart = document.GetPointerFromCharOffset(ref startOffset);
+            TextPointer highlightStop = document.GetPointerFromCharOffset(ref endOffset);
+            if (startOffset != 0 || endOffset != 0)
+                return null;
+
+            var textRange = new TextRange(highlightStart, highlightStop);
+            textRange.ApplyPropertyValue(FlowDocument.BackgroundProperty, Brushes.Yellow);
+            return textRange.Start;
}

private static void SetSelectionPath(TemplateCallHierarchyViewModel viewModel, ICollection<EvalTemplateEvent> selectionPath)
@@ -214,11 +219,12 @@ namespace Antlr4.StringTemplate.Visualizer
// update all views according to current template
UpdateStack();
UpdateAttributes();
-            viewModel.Bytecode = currentTemplate.Template.impl.Disassemble();
-            TemplateTextBox.Document = new FlowDocument(new Paragraph(new Run(currentTemplate.Template.impl.template)
+            viewModel.Bytecode = _currentFrame.Template.impl.Disassemble();
+            TemplateTextBox.Document = new FlowDocument(new Paragraph(new Run(_currentFrame.Template.impl.template)
{
FontFamily = new FontFamily("Consolas")
}));
+            viewModel.Ast = _currentFrame.Template.impl.ast;

#region new stuff

@@ -234,19 +240,40 @@ namespace Antlr4.StringTemplate.Visualizer

// highlight output text and, if {...} subtemplate, region in ST src
// get last event for currentST; it's the event that captures ST eval
-            List<InterpEvent> events = currentTemplate.GetDebugState().Events;
-            EvalTemplateEvent e = events[events.Count - 1] as EvalTemplateEvent;
-            //m.output.moveCaretPosition(e.outputStartChar);
-            if (e != null)
-                Highlight(OutputTextBox.Document, e.OutputInterval);
-
-            if (currentTemplate.Template.IsAnonymousSubtemplate)
+            EvalExprEvent exprEvent = _currentEvent as EvalExprEvent;
+            if (exprEvent != null)
{
-                Interval r = currentTemplate.Template.impl.TemplateRange;
-                //				System.out.println("currentST src range="+r);
-                //m.template.moveCaretPosition(r.a);
-                //TemplateTextBox.CaretPosition.
-                Highlight(TemplateTextBox.Document, r);
+                Highlight(OutputTextBox.Document, exprEvent.OutputInterval);
+                Highlight(TemplateTextBox.Document, exprEvent.SourceInterval);
+            }
+            else
+            {
+                EvalTemplateEvent templateEvent = _currentEvent as EvalTemplateEvent;
+                if (templateEvent == null)
+                {
+                    List<InterpEvent> events = _currentFrame.GetDebugState().Events;
+                    templateEvent = events[events.Count - 1] as EvalTemplateEvent;
+                }
+
+                //m.output.moveCaretPosition(e.outputStartChar);
+                if (templateEvent != null)
+                {
+                    TextPointer position = Highlight(OutputTextBox.Document, templateEvent.OutputInterval);
+                    if (position != null)
+                    {
+                        Rect rect = position.GetCharacterRect(LogicalDirection.Forward);
+                        //OutputTextBox.ScrollToVerticalOffset(rect.Top);
+                    }
+                }
+
+                if (_currentFrame.Template.IsAnonymousSubtemplate)
+                {
+                    Interval r = _currentFrame.Template.impl.TemplateRange;
+                    //				System.out.println("currentST src range="+r);
+                    //m.template.moveCaretPosition(r.a);
+                    //TemplateTextBox.CaretPosition.
+                    Highlight(TemplateTextBox.Document, r);
+                }
}

#endregion
@@ -300,7 +327,7 @@ namespace Antlr4.StringTemplate.Visualizer

private void UpdateStack()
{
-            List<Template> stack = currentTemplate.GetEnclosingInstanceStack(true);
+            List<Template> stack = _currentFrame.GetEnclosingInstanceStack(true);
ViewModel.Title = string.Format("STViz - [{0}]", string.Join(" ", stack.Select(i => i.ToString()).ToArray()));
}

@@ -310,7 +337,8 @@ namespace Antlr4.StringTemplate.Visualizer
if (viewModel == null)
return;

-            viewModel.AttributeStack = currentTemplate.GetEvalTemplateEventStack(false).Select(i => new TemplateFrameAttributeViewModel(i)).ToList();
+            HashSet<string> hiddenAttributes = new HashSet<string>();
+            viewModel.AttributeStack = _currentFrame.GetEvalTemplateEventStack(false).Select(i => new TemplateFrameAttributeViewModel(i, hiddenAttributes)).ToList();
}
}
}
diff --git a/Antlr4.StringTemplate/Template.cs b/Antlr4.StringTemplate/Template.cs
index cc9e195..ed149bf 100644
--- a/Antlr4.StringTemplate/Template.cs
+++ b/Antlr4.StringTemplate/Template.cs
@@ -602,7 +602,11 @@ namespace Antlr4.StringTemplate
if (impl.FormalArguments != null)
args = string.Join(",", impl.FormalArguments.Select(i => i.Name).ToArray());

-            return string.Format("{0}({1})", Name, args);
+            string name = Name;
+            if (this.impl.isRegion)
+                name = "@" + TemplateGroup.GetUnmangledTemplateName(name);
+
+            return string.Format("{0}({1})", name, args);
}

// Template.Format("name, phone | <name>:<phone>", n, p);
diff --git a/Antlr4.StringTemplate/TemplateGroup.cs b/Antlr4.StringTemplate/TemplateGroup.cs
index 76c000c..d1fcef7 100644
--- a/Antlr4.StringTemplate/TemplateGroup.cs
+++ b/Antlr4.StringTemplate/TemplateGroup.cs
@@ -271,7 +271,7 @@ namespace Antlr4.StringTemplate
}

// this is only called internally. wack any debug ST create events
-            if (_trackCreationEvents)
+            if (TrackCreationEvents)
{
// toss it out
st.DebugState.NewTemplateEvent = null;

