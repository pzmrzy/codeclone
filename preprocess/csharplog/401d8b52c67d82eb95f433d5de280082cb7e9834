commit 401d8b52c67d82eb95f433d5de280082cb7e9834
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Thu Nov 25 09:25:17 2010 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Thu Nov 25 09:25:17 2010 -0800

(C# 3) Sort tokens by name and value

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7188]

diff --git a/Antlr3.StringTemplate/Language/Interface.g3 b/Antlr3.StringTemplate/Language/Interface.g3
index 2fc0340..7f1f82d 100644
--- a/Antlr3.StringTemplate/Language/Interface.g3
+++ b/Antlr3.StringTemplate/Language/Interface.g3
@@ -135,14 +135,14 @@ template[StringTemplateGroupInterface groupI]
:	(opt='optional')? name=ID LPAREN (formalArgs=args)? RPAREN SEMI
{
templateName = $name.text;
-			$groupI.DefineTemplate( templateName, $formalArgs.args ?? new System.Collections.Generic.SortedList<string, FormalArgument>(), opt!=null );
+			$groupI.DefineTemplate( templateName, $formalArgs.args ?? new System.Collections.Generic.SortedList<string, FormalArgument>(System.StringComparer.Ordinal), opt!=null );
}
;

args returns[System.Collections.Generic.SortedList<string, FormalArgument> args]
@init
{
-	$args = new System.Collections.Generic.SortedList<string, FormalArgument>();
+	$args = new System.Collections.Generic.SortedList<string, FormalArgument>(System.StringComparer.Ordinal);
}
:	a=ID {$args[$a.text] = new FormalArgument($a.text);}
( COMMA b=ID {$args[$b.text] = new FormalArgument($b.text);} )*
diff --git a/Antlr3/Codegen/CodeGenerator.cs b/Antlr3/Codegen/CodeGenerator.cs
index 480f78c..3c04bc9 100644
--- a/Antlr3/Codegen/CodeGenerator.cs
+++ b/Antlr3/Codegen/CodeGenerator.cs
@@ -1121,15 +1121,10 @@ namespace Antlr3.Codegen
protected virtual void GenTokenTypeConstants( StringTemplate code )
{
// make constants for the token types
-            foreach ( string tokenID in grammar.TokenIDs )
+            foreach (var token in grammar.composite.tokenIDToTypeMap.OrderBy(i => i.Value))
{
-                int tokenType = grammar.GetTokenType( tokenID );
-                if ( tokenType == Label.EOF ||
-                     tokenType >= Label.MIN_TOKEN_TYPE )
-                {
-                    // don't do FAUX labels 'cept EOF
-                    code.SetAttribute( "tokens.{name,type}", tokenID, tokenType );
-                }
+                if (token.Value == Label.EOF || token.Value >= Label.MIN_TOKEN_TYPE)
+                    code.SetAttribute("tokens.{name,type}", token.Key, token.Value);
}
}

diff --git a/Antlr3/Tool/AssignTokenTypesBehavior.cs b/Antlr3/Tool/AssignTokenTypesBehavior.cs
index a57a915..c97d2e0 100644
--- a/Antlr3/Tool/AssignTokenTypesBehavior.cs
+++ b/Antlr3/Tool/AssignTokenTypesBehavior.cs
@@ -40,6 +40,7 @@ namespace Antlr3.Tool

using CLSCompliant = System.CLSCompliantAttribute;
using Label = Antlr3.Analysis.Label;
+    using StringComparer = System.StringComparer;

/** Move all of the functionality from assign.types.g grammar file. */
[CLSCompliant(false)]
@@ -48,10 +49,10 @@ namespace Antlr3.Tool
protected const int Unassigned = -1;
protected const int UnassignedInParserRule = -2;

-        protected IDictionary<string, int> stringLiterals = new SortedList<string, int>();
+        protected IDictionary<string, int> stringLiterals = new SortedList<string, int>(StringComparer.Ordinal);
[CLSCompliant(false)]
-        protected IDictionary<string, int> tokens = new SortedList<string, int>();
-        protected IDictionary<string, string> aliases = new SortedList<string, string>();
+        protected IDictionary<string, int> tokens = new SortedList<string, int>(StringComparer.Ordinal);
+        protected IDictionary<string, string> aliases = new SortedList<string, string>(StringComparer.Ordinal);
protected IDictionary<string, string> aliasesReverseIndex = new Dictionary<string, string>();

public AssignTokenTypesBehavior( ITreeNodeStream input )
diff --git a/Antlr3/Tool/Grammar.cs b/Antlr3/Tool/Grammar.cs
index cf52803..260a97e 100644
--- a/Antlr3/Tool/Grammar.cs
+++ b/Antlr3/Tool/Grammar.cs
@@ -33,6 +33,7 @@
namespace Antlr3.Tool
{
using System.Collections.Generic;
+    using System.Collections.ObjectModel;
using System.Linq;
using Antlr.Runtime.JavaExtensions;
using Antlr3.Analysis;
@@ -58,13 +59,13 @@ namespace Antlr3.Tool
using Regex = System.Text.RegularExpressions.Regex;
using RegexOptions = System.Text.RegularExpressions.RegexOptions;
using StringBuilder = System.Text.StringBuilder;
+    using StringComparer = System.StringComparer;
using StringReader = System.IO.StringReader;
using StringTemplate = Antlr3.ST.StringTemplate;
using TextReader = System.IO.TextReader;
using TextWriter = System.IO.TextWriter;
using TimeSpan = System.TimeSpan;
using Tool = Antlr3.AntlrTool;
-    using System.Collections.ObjectModel;

/** Represents a grammar in memory. */
public class Grammar
@@ -403,7 +404,7 @@ namespace Antlr3.Tool
string defaultRuleModifier;

/** Map a rule to it's Rule object */
-        protected SortedList<string, Rule> nameToRuleMap = new SortedList<string, Rule>();
+        protected readonly SortedList<string, Rule> nameToRuleMap = new SortedList<string, Rule>(StringComparer.Ordinal);

/** If this rule is a delegate, some rules might be overridden; don't
*  want to gen code for them.
@@ -1938,7 +1939,7 @@ namespace Antlr3.Tool
{
if ( nameToSynpredASTMap == null )
{
-                nameToSynpredASTMap = new SortedList<string, GrammarAST>();
+                nameToSynpredASTMap = new SortedList<string, GrammarAST>(StringComparer.Ordinal);
}
string predName =
SynpredRulePrefix + ( nameToSynpredASTMap.Count + 1 ) + "_" + name;

