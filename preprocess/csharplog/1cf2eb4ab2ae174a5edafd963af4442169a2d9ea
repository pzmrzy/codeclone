commit 1cf2eb4ab2ae174a5edafd963af4442169a2d9ea
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sat Jan 22 14:50:04 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sat Jan 22 14:50:04 2011 -0800

(C# 3) Rename interfaces to their C# names

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7509]

diff --git a/Antlr4.StringTemplate/AutoIndentWriter.cs b/Antlr4.StringTemplate/AutoIndentWriter.cs
index 7f8a9dc..3fa5554 100644
--- a/Antlr4.StringTemplate/AutoIndentWriter.cs
+++ b/Antlr4.StringTemplate/AutoIndentWriter.cs
@@ -55,7 +55,7 @@ namespace Antlr4.StringTemplate
*  wrap="\n". ST will generate the right thing. Override the default (locale)
*  newline by passing in a string to the constructor.
*/
-    public class AutoIndentWriter : STWriter
+    public class AutoIndentWriter : ITemplateWriter
{
public const int NO_WRAP = -1;

diff --git a/Antlr4.StringTemplate/Debug/DebugTemplate.cs b/Antlr4.StringTemplate/Debug/DebugTemplate.cs
index 277aea6..927f270 100644
--- a/Antlr4.StringTemplate/Debug/DebugTemplate.cs
+++ b/Antlr4.StringTemplate/Debug/DebugTemplate.cs
@@ -94,7 +94,7 @@ namespace Antlr4.StringTemplate.Debug
ErrorBuffer errors = new ErrorBuffer();
impl.nativeGroup.setListener(errors);
StringWriter @out = new StringWriter();
-            STWriter wr = new AutoIndentWriter(@out);
+            ITemplateWriter wr = new AutoIndentWriter(@out);
wr.setLineWidth(lineWidth);
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, locale);
interp.Execute(wr, this); // render and track events
@@ -124,7 +124,7 @@ namespace Antlr4.StringTemplate.Debug
public virtual List<InterpEvent> getEvents(CultureInfo locale, int lineWidth)
{
StringWriter @out = new StringWriter();
-            STWriter wr = new AutoIndentWriter(@out);
+            ITemplateWriter wr = new AutoIndentWriter(@out);
wr.setLineWidth(lineWidth);
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, locale);
interp.Execute(wr, this); // render and track events
diff --git a/Antlr4.StringTemplate/IAttributeRenderer.cs b/Antlr4.StringTemplate/IAttributeRenderer.cs
index dc1306f..5037600 100644
--- a/Antlr4.StringTemplate/IAttributeRenderer.cs
+++ b/Antlr4.StringTemplate/IAttributeRenderer.cs
@@ -43,7 +43,7 @@ namespace Antlr4.StringTemplate
*
*  formatString can be null but locale will at least be Locale.getDefault()
*/
-    public interface AttributeRenderer
+    public interface IAttributeRenderer
{
string toString(object o, string formatString, CultureInfo culture);
}
diff --git a/Antlr4.StringTemplate/IModelAdaptor.cs b/Antlr4.StringTemplate/IModelAdaptor.cs
index 80c09e8..7b18b7e 100644
--- a/Antlr4.StringTemplate/IModelAdaptor.cs
+++ b/Antlr4.StringTemplate/IModelAdaptor.cs
@@ -43,7 +43,7 @@ namespace Antlr4.StringTemplate
*
*  See unit tests.
*/
-    public interface ModelAdaptor
+    public interface IModelAdaptor
{
/** Lookup property name in o and return its value.  It's a good
*  idea to cache a Method or Field reflection object to make
diff --git a/Antlr4.StringTemplate/ITemplateErrorListener.cs b/Antlr4.StringTemplate/ITemplateErrorListener.cs
index 03fb560..c879764 100644
--- a/Antlr4.StringTemplate/ITemplateErrorListener.cs
+++ b/Antlr4.StringTemplate/ITemplateErrorListener.cs
@@ -35,7 +35,7 @@ namespace Antlr4.StringTemplate
using Antlr4.StringTemplate.Misc;

/** How to handle messages */
-    public interface STErrorListener
+    public interface ITemplateErrorListener
{
void compileTimeError(STMessage msg);
void runTimeError(STMessage msg);
diff --git a/Antlr4.StringTemplate/ITemplateWriter.cs b/Antlr4.StringTemplate/ITemplateWriter.cs
index 7a0bdb3..5d62bb2 100644
--- a/Antlr4.StringTemplate/ITemplateWriter.cs
+++ b/Antlr4.StringTemplate/ITemplateWriter.cs
@@ -39,7 +39,7 @@ namespace Antlr4.StringTemplate
*  handled specially when wrapping lines (we don't want to wrap
*  in between an element and it's separator).
*/
-    public interface STWriter
+    public interface ITemplateWriter
{
void pushIndentation(string indent);

@@ -68,7 +68,7 @@ namespace Antlr4.StringTemplate
*  like &lt;data:{v|[&lt;v&gt;]}; wrap&gt;) we need to write the wrap string
*  before calling exec().  We expose just like for the separator.
*  See Interpreter.writeObject where it checks for ST instance.
-         *  If POJO, writePOJO passes wrap to STWriter's
+         *  If POJO, writePOJO passes wrap to ITemplateWriter's
*
*     write(String str, String wrap)
*
diff --git a/Antlr4.StringTemplate/Interpreter.cs b/Antlr4.StringTemplate/Interpreter.cs
index 8fadafd..d974116 100644
--- a/Antlr4.StringTemplate/Interpreter.cs
+++ b/Antlr4.StringTemplate/Interpreter.cs
@@ -141,7 +141,7 @@ namespace Antlr4.StringTemplate
}

/** Execute template self and return how many characters it wrote to out */
-        public virtual int Execute(STWriter @out, ST self)
+        public virtual int Execute(ITemplateWriter @out, ST self)
{
int save_ip = current_ip;
try
@@ -154,7 +154,7 @@ namespace Antlr4.StringTemplate
}
}

-        protected virtual int ExecuteImpl(STWriter @out, ST self)
+        protected virtual int ExecuteImpl(ITemplateWriter @out, ST self)
{
int start = @out.index(); // track char we're about to write
Bytecode prevOpcode = Bytecode.Invalid;
@@ -626,7 +626,7 @@ namespace Antlr4.StringTemplate
/** Write out an expression result that doesn't use expression options.
*  E.g., <name>
*/
-        protected virtual int writeObjectNoOptions(STWriter @out, ST self, object o)
+        protected virtual int writeObjectNoOptions(ITemplateWriter @out, ST self, object o)
{
int start = @out.index(); // track char we're about to write
int n = writeObject(@out, self, o, null);
@@ -651,7 +651,7 @@ namespace Antlr4.StringTemplate
/** Write out an expression result that uses expression options.
*  E.g., <names; separator=", ">
*/
-        protected virtual int writeObjectWithOptions(STWriter @out, ST self, object o,
+        protected virtual int writeObjectWithOptions(ITemplateWriter @out, ST self, object o,
object[] options)
{
int start = @out.index(); // track char we're about to write
@@ -692,7 +692,7 @@ namespace Antlr4.StringTemplate
/** Generic method to emit text for an object. It differentiates
*  between templates, iterable objects, and plain old Java objects (POJOs)
*/
-        protected virtual int writeObject(STWriter @out, ST self, object o, string[] options)
+        protected virtual int writeObject(ITemplateWriter @out, ST self, object o, string[] options)
{
int n = 0;
if (o == null)
@@ -741,7 +741,7 @@ namespace Antlr4.StringTemplate
return n;
}

-        protected virtual int writeIterator(STWriter @out, ST self, object o, string[] options)
+        protected virtual int writeIterator(ITemplateWriter @out, ST self, object o, string[] options)
{
if (o == null)
return 0;
@@ -769,12 +769,12 @@ namespace Antlr4.StringTemplate
return n;
}

-        protected virtual int writePOJO(STWriter @out, object o, string[] options)
+        protected virtual int writePOJO(ITemplateWriter @out, object o, string[] options)
{
string formatString = null;
if (options != null)
formatString = options[(int)Option.Format];
-            AttributeRenderer r = group.getAttributeRenderer(o.GetType());
+            IAttributeRenderer r = group.getAttributeRenderer(o.GetType());
string v;
if (r != null)
v = r.toString(o, formatString, culture);
@@ -1259,7 +1259,7 @@ namespace Antlr4.StringTemplate

try
{
-                ModelAdaptor adap = self.groupThatCreatedThisInstance.getModelAdaptor(o.GetType());
+                IModelAdaptor adap = self.groupThatCreatedThisInstance.getModelAdaptor(o.GetType());
return adap.getProperty(self, o, property, toString(self, property));
}
catch (STNoSuchPropertyException e)
diff --git a/Antlr4.StringTemplate/Misc/ErrorBuffer.cs b/Antlr4.StringTemplate/Misc/ErrorBuffer.cs
index d3f2f6f..777a372 100644
--- a/Antlr4.StringTemplate/Misc/ErrorBuffer.cs
+++ b/Antlr4.StringTemplate/Misc/ErrorBuffer.cs
@@ -37,7 +37,7 @@ namespace Antlr4.StringTemplate.Misc
using StringBuilder = System.Text.StringBuilder;

/** Used during tests to track all errors */
-    public class ErrorBuffer : STErrorListener
+    public class ErrorBuffer : ITemplateErrorListener
{
private readonly List<STMessage> errors = new List<STMessage>();

diff --git a/Antlr4.StringTemplate/Misc/ErrorManager.cs b/Antlr4.StringTemplate/Misc/ErrorManager.cs
index 9273cc7..4765982 100644
--- a/Antlr4.StringTemplate/Misc/ErrorManager.cs
+++ b/Antlr4.StringTemplate/Misc/ErrorManager.cs
@@ -42,9 +42,9 @@ namespace Antlr4.StringTemplate.Misc
*/
public class ErrorManager
{
-        public static STErrorListener DEFAULT_ERROR_LISTENER = new DefaultErrorListener();
+        public static ITemplateErrorListener DEFAULT_ERROR_LISTENER = new DefaultErrorListener();

-        private class DefaultErrorListener : STErrorListener
+        private class DefaultErrorListener : ITemplateErrorListener
{
public virtual void compileTimeError(STMessage msg)
{
@@ -100,19 +100,19 @@ namespace Antlr4.StringTemplate.Misc
*/
//public Stack<Token> context = new Stack<Token>();

-        private readonly STErrorListener listener;
+        private readonly ITemplateErrorListener listener;

public ErrorManager()
: this(DEFAULT_ERROR_LISTENER)
{
}

-        public ErrorManager(STErrorListener listener)
+        public ErrorManager(ITemplateErrorListener listener)
{
this.listener = listener;
}

-        public STErrorListener Listener
+        public ITemplateErrorListener Listener
{
get
{
diff --git a/Antlr4.StringTemplate/Misc/MapModelAdaptor.cs b/Antlr4.StringTemplate/Misc/MapModelAdaptor.cs
index 0d20938..43d5c2f 100644
--- a/Antlr4.StringTemplate/Misc/MapModelAdaptor.cs
+++ b/Antlr4.StringTemplate/Misc/MapModelAdaptor.cs
@@ -34,7 +34,7 @@ namespace Antlr4.StringTemplate.Misc
{
using IDictionary = System.Collections.IDictionary;

-    public class MapModelAdaptor : ModelAdaptor
+    public class MapModelAdaptor : IModelAdaptor
{
public virtual object getProperty(ST self, object o, object property, string propertyName)
{
diff --git a/Antlr4.StringTemplate/Misc/ObjectModelAdaptor.cs b/Antlr4.StringTemplate/Misc/ObjectModelAdaptor.cs
index 3c4af4f..24d5677 100644
--- a/Antlr4.StringTemplate/Misc/ObjectModelAdaptor.cs
+++ b/Antlr4.StringTemplate/Misc/ObjectModelAdaptor.cs
@@ -41,7 +41,7 @@ namespace Antlr4.StringTemplate.Misc
using PropertyInfo = System.Reflection.PropertyInfo;
using Type = System.Type;

-    public class ObjectModelAdaptor : ModelAdaptor
+    public class ObjectModelAdaptor : IModelAdaptor
{
private static readonly Dictionary<Type, Dictionary<string, System.Func<object, object>>> _memberAccessors =
new Dictionary<Type, Dictionary<string, System.Func<object, object>>>();
diff --git a/Antlr4.StringTemplate/Misc/TemplateModelAdaptor.cs b/Antlr4.StringTemplate/Misc/TemplateModelAdaptor.cs
index 2c559c3..5cdb235 100644
--- a/Antlr4.StringTemplate/Misc/TemplateModelAdaptor.cs
+++ b/Antlr4.StringTemplate/Misc/TemplateModelAdaptor.cs
@@ -32,7 +32,7 @@

namespace Antlr4.StringTemplate.Misc
{
-    public class STModelAdaptor : ModelAdaptor
+    public class STModelAdaptor : IModelAdaptor
{
public virtual object getProperty(ST self, object o, object property, string propertyName)
{
diff --git a/Antlr4.StringTemplate/NumberRenderer.cs b/Antlr4.StringTemplate/NumberRenderer.cs
index 8054589..0b438c1 100644
--- a/Antlr4.StringTemplate/NumberRenderer.cs
+++ b/Antlr4.StringTemplate/NumberRenderer.cs
@@ -43,7 +43,7 @@ namespace Antlr4.StringTemplate
*  For example, "%10d" emits a number as a decimal int padding to 10 char.
*  This can even do long to date conversions using the format string.
*/
-    public class NumberRenderer : AttributeRenderer
+    public class NumberRenderer : IAttributeRenderer
{
public virtual string toString(object o, string formatString, CultureInfo locale)
{
diff --git a/Antlr4.StringTemplate/StringRenderer.cs b/Antlr4.StringTemplate/StringRenderer.cs
index 9e75161..f352afc 100644
--- a/Antlr4.StringTemplate/StringRenderer.cs
+++ b/Antlr4.StringTemplate/StringRenderer.cs
@@ -39,7 +39,7 @@ namespace Antlr4.StringTemplate
/** This render knows to perform a few operations on String objects:
*  upper, lower, cap, url-encode, xml-encode.
*/
-    public class StringRenderer : AttributeRenderer
+    public class StringRenderer : IAttributeRenderer
{
// trim(s) and strlen(s) built-in funcs; these are format options
public virtual string toString(object o, string formatString, CultureInfo locale)
diff --git a/Antlr4.StringTemplate/Template.cs b/Antlr4.StringTemplate/Template.cs
index 394e8e7..28e0a1a 100644
--- a/Antlr4.StringTemplate/Template.cs
+++ b/Antlr4.StringTemplate/Template.cs
@@ -402,28 +402,28 @@ namespace Antlr4.StringTemplate
return impl.isAnonSubtemplate;
}

-        public virtual int write(STWriter @out)
+        public virtual int write(ITemplateWriter @out)
{
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, impl.nativeGroup.errMgr);
interp.setDefaultArguments(this);
return interp.Execute(@out, this);
}

-        public virtual int write(STWriter @out, CultureInfo locale)
+        public virtual int write(ITemplateWriter @out, CultureInfo locale)
{
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, locale, impl.nativeGroup.errMgr);
interp.setDefaultArguments(this);
return interp.Execute(@out, this);
}

-        public virtual int write(STWriter @out, STErrorListener listener)
+        public virtual int write(ITemplateWriter @out, ITemplateErrorListener listener)
{
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, new ErrorManager(listener));
interp.setDefaultArguments(this);
return interp.Execute(@out, this);
}

-        public virtual int write(STWriter @out, CultureInfo locale, STErrorListener listener)
+        public virtual int write(ITemplateWriter @out, CultureInfo locale, ITemplateErrorListener listener)
{
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, locale, new ErrorManager(listener));
interp.setDefaultArguments(this);
@@ -448,7 +448,7 @@ namespace Antlr4.StringTemplate
public virtual string render(CultureInfo locale, int lineWidth)
{
StringWriter @out = new StringWriter();
-            STWriter wr = new AutoIndentWriter(@out);
+            ITemplateWriter wr = new AutoIndentWriter(@out);
wr.setLineWidth(lineWidth);
write(wr, locale);
return @out.ToString();
diff --git a/Antlr4.StringTemplate/TemplateGroup.cs b/Antlr4.StringTemplate/TemplateGroup.cs
index f7afe23..c374b67 100644
--- a/Antlr4.StringTemplate/TemplateGroup.cs
+++ b/Antlr4.StringTemplate/TemplateGroup.cs
@@ -99,7 +99,7 @@ namespace Antlr4.StringTemplate
*
*  This structure is synchronized.
*/
-        protected TypeRegistry<AttributeRenderer> renderers;
+        protected TypeRegistry<IAttributeRenderer> renderers;

/** A dictionary that allows people to register a model adaptor for
*  a particular kind of object (subclass or implementation). Applies
@@ -108,8 +108,8 @@ namespace Antlr4.StringTemplate
*  ST initializes with model adaptors that know how to pull
*  properties out of Objects, Maps, and STs.
*/
-        protected TypeRegistry<ModelAdaptor> adaptors =
-            new TypeRegistry<ModelAdaptor>()
+        protected TypeRegistry<IModelAdaptor> adaptors =
+            new TypeRegistry<IModelAdaptor>()
{
{typeof(object), new ObjectModelAdaptor()},
{typeof(ST), new STModelAdaptor()},
@@ -547,14 +547,14 @@ namespace Antlr4.StringTemplate
*  This must invalidate cache entries, so set your adaptors up before
*  render()ing your templates for efficiency.
*/
-        public virtual void registerModelAdaptor(Type attributeType, ModelAdaptor adaptor)
+        public virtual void registerModelAdaptor(Type attributeType, IModelAdaptor adaptor)
{
adaptors[attributeType] = adaptor;
}

-        public virtual ModelAdaptor getModelAdaptor(Type attributeType)
+        public virtual IModelAdaptor getModelAdaptor(Type attributeType)
{
-            ModelAdaptor adaptor;
+            IModelAdaptor adaptor;
adaptors.TryGetValue(attributeType, out adaptor);
return adaptor;
}
@@ -563,18 +563,18 @@ namespace Antlr4.StringTemplate
*  templates evaluated relative to this group.  Use r to render if
*  object in question is instanceof(attributeType).
*/
-        public virtual void registerRenderer(Type attributeType, AttributeRenderer r)
+        public virtual void registerRenderer(Type attributeType, IAttributeRenderer r)
{
-            renderers = renderers ?? new TypeRegistry<AttributeRenderer>();
+            renderers = renderers ?? new TypeRegistry<IAttributeRenderer>();
renderers[attributeType] = r;
}

-        public virtual AttributeRenderer getAttributeRenderer(Type attributeType)
+        public virtual IAttributeRenderer getAttributeRenderer(Type attributeType)
{
if (renderers == null)
return null;

-            AttributeRenderer renderer;
+            IAttributeRenderer renderer;
renderers.TryGetValue(attributeType, out renderer);
return renderer;
}
@@ -641,12 +641,12 @@ namespace Antlr4.StringTemplate
return buf.ToString();
}

-        public virtual STErrorListener getListener()
+        public virtual ITemplateErrorListener getListener()
{
return errMgr.Listener;
}

-        public virtual void setListener(STErrorListener listener)
+        public virtual void setListener(ITemplateErrorListener listener)
{
errMgr = new ErrorManager(listener);
}
diff --git a/Antlr4.Test.StringTemplate/Extensions/ListExtensions.cs b/Antlr4.Test.StringTemplate/Extensions/ListExtensions.cs
index c6c0b8e..7e2d3f2 100644
--- a/Antlr4.Test.StringTemplate/Extensions/ListExtensions.cs
+++ b/Antlr4.Test.StringTemplate/Extensions/ListExtensions.cs
@@ -52,7 +52,7 @@ namespace Antlr4.Test.StringTemplate.Extensions
return st.render();
}

-        private class CollectionRenderer : AttributeRenderer
+        private class CollectionRenderer : IAttributeRenderer
{
public string toString(object o, string formatString, CultureInfo culture)
{
diff --git a/Antlr4.Test.StringTemplate/TestCompiler.cs b/Antlr4.Test.StringTemplate/TestCompiler.cs
index 3775c17..de0d7d9 100644
--- a/Antlr4.Test.StringTemplate/TestCompiler.cs
+++ b/Antlr4.Test.StringTemplate/TestCompiler.cs
@@ -152,7 +152,7 @@ namespace Antlr4.Test.StringTemplate
[TestMethod]
public void TestAnonIncludeArgMismatch()
{
-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
string template = "<a:{foo}>";
CompiledST code = new Compiler(new ErrorManager(errors)).compile(template);
string expected = "1:3: anonymous template has 0 arg(s) but mapped across 1 value(s)" + newline;
@@ -162,7 +162,7 @@ namespace Antlr4.Test.StringTemplate
[TestMethod]
public void TestAnonIncludeArgMismatch2()
{
-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
string template = "<a,b:{x|foo}>";
CompiledST code = new Compiler(new ErrorManager(errors)).compile(template);
string expected = "1:5: anonymous template has 1 arg(s) but mapped across 2 value(s)" + newline;
@@ -172,7 +172,7 @@ namespace Antlr4.Test.StringTemplate
[TestMethod]
public void TestAnonIncludeArgMismatch3()
{
-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
string template = "<a:{x|foo},{bar}>";
CompiledST code = new Compiler(new ErrorManager(errors)).compile(template);
string expected = "1:11: anonymous template has 0 arg(s) but mapped across 1 value(s)" + newline;
diff --git a/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs b/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
index b9d6b7c..f95caee 100644
--- a/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
+++ b/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
@@ -48,7 +48,7 @@ namespace Antlr4.Test.StringTemplate
"foo() ::= <<>>\n";
writeFile(tmpdir, "t.stg", templates);

-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
STGroup group = new STGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
group.load(); // force load
@@ -66,7 +66,7 @@ namespace Antlr4.Test.StringTemplate
"foo() ::= <<>>\n";
writeFile(tmpdir, "t.stg", templates);

-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
STGroup group = new STGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
group.load(); // force load
@@ -83,7 +83,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);

STGroupFile group = null;
-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
group = new STGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
group.load(); // force load
@@ -100,7 +100,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);

STGroupFile group = null;
-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
group = new STGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
group.load(); // force load
@@ -117,7 +117,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);

STGroupFile group = null;
-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
group = new STGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
group.load(); // force load
@@ -135,7 +135,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);

STGroupFile group = null;
-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
group = new STGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
group.load(); // force load
@@ -152,7 +152,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);

STGroupFile group = null;
-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
group = new STGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
group.load(); // force load
diff --git a/Antlr4.Test.StringTemplate/TestGroups.cs b/Antlr4.Test.StringTemplate/TestGroups.cs
index 56133ce..52646b2 100644
--- a/Antlr4.Test.StringTemplate/TestGroups.cs
+++ b/Antlr4.Test.StringTemplate/TestGroups.cs
@@ -227,7 +227,7 @@ namespace Antlr4.Test.StringTemplate
"b() ::= \"bar\"\n" +
"b() ::= \"duh\"\n";
writeFile(dir, "group.stg", groupFile);
-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
STGroupFile group = new STGroupFile(Path.Combine(dir, "group.stg"));
group.setListener(errors);
group.load();
diff --git a/Antlr4.Test.StringTemplate/TestLineWrap.cs b/Antlr4.Test.StringTemplate/TestLineWrap.cs
index c84aa41..9255e2e 100644
--- a/Antlr4.Test.StringTemplate/TestLineWrap.cs
+++ b/Antlr4.Test.StringTemplate/TestLineWrap.cs
@@ -62,7 +62,7 @@ namespace Antlr4.Test.StringTemplate
"32,5,6,77,888,1,6,32,5 };";

StringWriter sw = new StringWriter();
-            STWriter stw = new AutoIndentWriter(sw, "\n"); // force \n as newline
+            ITemplateWriter stw = new AutoIndentWriter(sw, "\n"); // force \n as newline
stw.setLineWidth(40);
a.write(stw);
string result = sw.ToString();
diff --git a/Antlr4.Test.StringTemplate/TestModelAdaptors.cs b/Antlr4.Test.StringTemplate/TestModelAdaptors.cs
index 6683887..fc82414 100644
--- a/Antlr4.Test.StringTemplate/TestModelAdaptors.cs
+++ b/Antlr4.Test.StringTemplate/TestModelAdaptors.cs
@@ -39,7 +39,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestModelAdaptors : BaseTest
{
-        private class UserAdaptor : ModelAdaptor
+        private class UserAdaptor : IModelAdaptor
{
public object getProperty(ST self, object o, object property, string propertyName)
{
@@ -51,7 +51,7 @@ namespace Antlr4.Test.StringTemplate
}
}

-        private class UserAdaptorConst : ModelAdaptor
+        private class UserAdaptorConst : IModelAdaptor
{
public object getProperty(ST self, object o, object property, string propertyName)
{
diff --git a/Antlr4.Test.StringTemplate/TestRegions.cs b/Antlr4.Test.StringTemplate/TestRegions.cs
index 1fa984b..78c8f49 100644
--- a/Antlr4.Test.StringTemplate/TestRegions.cs
+++ b/Antlr4.Test.StringTemplate/TestRegions.cs
@@ -253,7 +253,7 @@ namespace Antlr4.Test.StringTemplate
"X<@r()>Y" +
">>\n" +
"@a.q() ::= \"foo\"" + newline;
-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
writeFile(dir, "g.stg", g);
STGroupFile group = new STGroupFile(dir + "/g.stg");
group.setListener(errors);
@@ -276,7 +276,7 @@ namespace Antlr4.Test.StringTemplate

string sub =
"@a.r() ::= \"A<@super.q()>B\"" + newline; // allow this; trap at runtime
-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
group.setListener(errors);
writeFile(dir, "sub.stg", sub);
STGroupFile subGroup = new STGroupFile(dir + "/sub.stg");
diff --git a/Antlr4.Test.StringTemplate/TestSyntaxErrors.cs b/Antlr4.Test.StringTemplate/TestSyntaxErrors.cs
index 49794c2..5485bc1 100644
--- a/Antlr4.Test.StringTemplate/TestSyntaxErrors.cs
+++ b/Antlr4.Test.StringTemplate/TestSyntaxErrors.cs
@@ -101,7 +101,7 @@ namespace Antlr4.Test.StringTemplate
"foo() ::= <<hi <.> mom>>\n";
writeFile(tmpdir, "t.stg", templates);

-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
STGroupFile group = new STGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
group.load(); // force load
@@ -135,7 +135,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);

STGroupFile group = null;
-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
group = new STGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
group.load(); // force load
@@ -152,7 +152,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);

STGroupFile group = null;
-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
group = new STGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
group.load(); // force load
@@ -169,7 +169,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);

STGroupFile group = null;
-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
group = new STGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
group.load(); // force load
@@ -186,7 +186,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);

STGroupFile group = null;
-            STErrorListener errors = new ErrorBuffer();
+            ITemplateErrorListener errors = new ErrorBuffer();
group = new STGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
group.load(); // force load

