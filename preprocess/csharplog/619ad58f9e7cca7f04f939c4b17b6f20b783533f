commit 619ad58f9e7cca7f04f939c4b17b6f20b783533f
Author:     Sam Harwell <sam@tunnelvisionlabs.com>
AuthorDate: Thu Dec 18 23:46:34 2014 -0600
Commit:     Sam Harwell <sam@tunnelvisionlabs.com>
CommitDate: Fri Dec 19 00:09:21 2014 -0600

Add a PCL build of the ANTLR 3 Runtime (Profile 328) (fixes #14)

diff --git a/Antlr3.sln b/Antlr3.sln
index 00cef77..b6ba210 100644
--- a/Antlr3.sln
+++ b/Antlr3.sln
@@ -88,6 +88,8 @@ Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Build", "Build", "{D2D979DC
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Antlr3.Runtime.net40-client", "Runtime\Antlr3.Runtime\Antlr3.Runtime.net40-client.csproj", "{075C5424-3DB3-4AEF-AB9D-A87366AF152D}"
EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Antlr3.Runtime.portable-net40", "Runtime\Antlr3.Runtime\Antlr3.Runtime.portable-net40.csproj", "{34BA0BD4-FB93-48D7-967E-83F229F220A0}"
+EndProject
Global
GlobalSection(TestCaseManagementSettings) = postSolution
CategoryFile = Antlr3.vsmdi
@@ -201,6 +203,10 @@ Global
{075C5424-3DB3-4AEF-AB9D-A87366AF152D}.Debug|Any CPU.Build.0 = Debug|Any CPU
{075C5424-3DB3-4AEF-AB9D-A87366AF152D}.Release|Any CPU.ActiveCfg = Release|Any CPU
{075C5424-3DB3-4AEF-AB9D-A87366AF152D}.Release|Any CPU.Build.0 = Release|Any CPU
+		{34BA0BD4-FB93-48D7-967E-83F229F220A0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{34BA0BD4-FB93-48D7-967E-83F229F220A0}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{34BA0BD4-FB93-48D7-967E-83F229F220A0}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{34BA0BD4-FB93-48D7-967E-83F229F220A0}.Release|Any CPU.Build.0 = Release|Any CPU
EndGlobalSection
GlobalSection(SolutionProperties) = preSolution
HideSolutionNode = FALSE
diff --git a/Runtime/Antlr3.Runtime/ANTLRFileStream.cs b/Runtime/Antlr3.Runtime/ANTLRFileStream.cs
index b4725e3..9860bde 100644
--- a/Runtime/Antlr3.Runtime/ANTLRFileStream.cs
+++ b/Runtime/Antlr3.Runtime/ANTLRFileStream.cs
@@ -30,6 +30,8 @@
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

+#if !PORTABLE
+
namespace Antlr.Runtime
{
using Encoding = System.Text.Encoding;
@@ -86,3 +88,5 @@ namespace Antlr.Runtime
}
}
}
+
+#endif
diff --git a/Runtime/Antlr3.Runtime/ANTLRReaderStream.cs b/Runtime/Antlr3.Runtime/ANTLRReaderStream.cs
index b8ecc26..1564769 100644
--- a/Runtime/Antlr3.Runtime/ANTLRReaderStream.cs
+++ b/Runtime/Antlr3.Runtime/ANTLRReaderStream.cs
@@ -86,7 +86,7 @@ namespace Antlr.Runtime
}
finally
{
-                r.Close();
+                r.Dispose();
}
}
}
diff --git a/Runtime/Antlr3.Runtime/Antlr3.Runtime.net20.csproj b/Runtime/Antlr3.Runtime/Antlr3.Runtime.net20.csproj
index 13d6036..8eba523 100644
--- a/Runtime/Antlr3.Runtime/Antlr3.Runtime.net20.csproj
+++ b/Runtime/Antlr3.Runtime/Antlr3.Runtime.net20.csproj
@@ -75,6 +75,7 @@
<Compile Include="Misc\FunctionDelegates.cs" />
<Compile Include="Misc\ListStack`1.cs" />
<Compile Include="Misc\LookaheadStream.cs" />
+    <Compile Include="Misc\RegexOptionsHelper.cs" />
<Compile Include="MismatchedNotSetException.cs" />
<Compile Include="MismatchedRangeException.cs" />
<Compile Include="MismatchedSetException.cs" />
diff --git a/Runtime/Antlr3.Runtime/Antlr3.Runtime.net40-client.csproj b/Runtime/Antlr3.Runtime/Antlr3.Runtime.net40-client.csproj
index f023ea8..728baac 100644
--- a/Runtime/Antlr3.Runtime/Antlr3.Runtime.net40-client.csproj
+++ b/Runtime/Antlr3.Runtime/Antlr3.Runtime.net40-client.csproj
@@ -76,6 +76,7 @@
<Compile Include="Misc\FunctionDelegates.cs" />
<Compile Include="Misc\ListStack`1.cs" />
<Compile Include="Misc\LookaheadStream.cs" />
+    <Compile Include="Misc\RegexOptionsHelper.cs" />
<Compile Include="MismatchedNotSetException.cs" />
<Compile Include="MismatchedRangeException.cs" />
<Compile Include="MismatchedSetException.cs" />
diff --git a/Runtime/Antlr3.Runtime/Antlr3.Runtime.portable-net40.csproj b/Runtime/Antlr3.Runtime/Antlr3.Runtime.portable-net40.csproj
new file mode 100644
index 0000000..decdcfe
--- /dev/null
+++ b/Runtime/Antlr3.Runtime/Antlr3.Runtime.portable-net40.csproj
@@ -0,0 +1,147 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProductVersion>9.0.30729</ProductVersion>
+    <SchemaVersion>2.0</SchemaVersion>
+    <ProjectGuid>{34BA0BD4-FB93-48D7-967E-83F229F220A0}</ProjectGuid>
+    <ProjectTypeGuids>{786C830F-07A1-408B-BD7F-6EE04809D6DB};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
+    <OutputType>Library</OutputType>
+    <AppDesignerFolder>Properties</AppDesignerFolder>
+    <RootNamespace>Antlr.Runtime</RootNamespace>
+    <AssemblyName>Antlr3.Runtime</AssemblyName>
+    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
+    <TargetFrameworkProfile>Profile328</TargetFrameworkProfile>
+    <FileAlignment>512</FileAlignment>
+    <BaseIntermediateOutputPath>obj\portable-net40\</BaseIntermediateOutputPath>
+    <SignAssembly>true</SignAssembly>
+    <AssemblyOriginatorKeyFile>..\..\..\..\..\keys\antlr\Key.snk</AssemblyOriginatorKeyFile>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\portable-net40\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE;PORTABLE;NET40;NET40PLUS;NET35PLUS;NET20PLUS</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+    <DocumentationFile>bin\portable-net40\Debug\Antlr3.Runtime.xml</DocumentationFile>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\portable-net40\Release\</OutputPath>
+    <DefineConstants>TRACE;PORTABLE;NET40;NET40PLUS;NET35PLUS;NET20PLUS</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+    <DocumentationFile>bin\portable-net40\Release\Antlr3.Runtime.xml</DocumentationFile>
+  </PropertyGroup>
+  <ItemGroup>
+    <Compile Include="ANTLRFileStream.cs" />
+    <Compile Include="ANTLRInputStream.cs" />
+    <Compile Include="ANTLRReaderStream.cs" />
+    <Compile Include="ANTLRStringStream.cs" />
+    <Compile Include="AstParserRuleReturnScope`2.cs" />
+    <Compile Include="BaseRecognizer.cs" />
+    <Compile Include="BitSet.cs" />
+    <Compile Include="BufferedTokenStream.cs" />
+    <Compile Include="CharStreamConstants.cs" />
+    <Compile Include="CharStreamState.cs" />
+    <Compile Include="ClassicToken.cs" />
+    <Compile Include="CommonToken.cs" />
+    <Compile Include="CommonTokenStream.cs" />
+    <Compile Include="Debug\IDebugEventListener.cs" />
+    <Compile Include="DFA.cs" />
+    <Compile Include="EarlyExitException.cs" />
+    <Compile Include="FailedPredicateException.cs" />
+    <Compile Include="GrammarRuleAttribute.cs" />
+    <Compile Include="IAstRuleReturnScope.cs" />
+    <Compile Include="IAstRuleReturnScope`1.cs" />
+    <Compile Include="ICharStream.cs" />
+    <Compile Include="IIntStream.cs" />
+    <Compile Include="IRuleReturnScope.cs" />
+    <Compile Include="IRuleReturnScope`1.cs" />
+    <Compile Include="ITemplateRuleReturnScope.cs" />
+    <Compile Include="ITemplateRuleReturnScope`1.cs" />
+    <Compile Include="IToken.cs" />
+    <Compile Include="ITokenSource.cs" />
+    <Compile Include="ITokenStream.cs" />
+    <Compile Include="ITokenStreamInformation.cs" />
+    <Compile Include="LegacyCommonTokenStream.cs" />
+    <Compile Include="Lexer.cs" />
+    <Compile Include="Misc\FastQueue.cs" />
+    <Compile Include="Misc\FunctionDelegates.cs" />
+    <Compile Include="Misc\ListStack`1.cs" />
+    <Compile Include="Misc\LookaheadStream.cs" />
+    <Compile Include="Misc\RegexOptionsHelper.cs" />
+    <Compile Include="MismatchedNotSetException.cs" />
+    <Compile Include="MismatchedRangeException.cs" />
+    <Compile Include="MismatchedSetException.cs" />
+    <Compile Include="MismatchedTokenException.cs" />
+    <Compile Include="MismatchedTreeNodeException.cs" />
+    <Compile Include="MissingTokenException.cs" />
+    <Compile Include="NoViableAltException.cs" />
+    <Compile Include="Parser.cs" />
+    <Compile Include="ParserRuleReturnScope.cs" />
+    <Compile Include="Properties\AssemblyInfo.cs" />
+    <Compile Include="RecognitionException.cs" />
+    <Compile Include="RecognizerSharedState.cs" />
+    <Compile Include="System\ICloneable.cs" />
+    <Compile Include="System\NonSerializedAttribute.cs" />
+    <Compile Include="System\SerializableAttribute.cs" />
+    <Compile Include="TemplateParserRuleReturnScope`2.cs" />
+    <Compile Include="TokenChannels.cs" />
+    <Compile Include="TokenRewriteStream.cs" />
+    <Compile Include="Tokens.cs" />
+    <Compile Include="TokenTypes.cs" />
+    <Compile Include="Tree\AstTreeRuleReturnScope`2.cs" />
+    <Compile Include="Tree\BaseTree.cs" />
+    <Compile Include="Tree\BaseTreeAdaptor.cs" />
+    <Compile Include="Tree\AntlrRuntime_BaseTreeDebugView.cs" />
+    <Compile Include="Tree\BufferedTreeNodeStream.cs" />
+    <Compile Include="Tree\CommonErrorNode.cs" />
+    <Compile Include="Tree\CommonTree.cs" />
+    <Compile Include="Tree\CommonTreeAdaptor.cs" />
+    <Compile Include="Tree\CommonTreeNodeStream.cs" />
+    <Compile Include="Tree\DotTreeGenerator.cs" />
+    <Compile Include="Tree\IPositionTrackingStream.cs" />
+    <Compile Include="Tree\ITree.cs" />
+    <Compile Include="Tree\ITreeAdaptor.cs" />
+    <Compile Include="Tree\ITreeNodeStream.cs" />
+    <Compile Include="Tree\ITreeVisitorAction.cs" />
+    <Compile Include="Tree\ParseTree.cs" />
+    <Compile Include="Tree\RewriteCardinalityException.cs" />
+    <Compile Include="Tree\RewriteEarlyExitException.cs" />
+    <Compile Include="Tree\RewriteEmptyStreamException.cs" />
+    <Compile Include="Tree\RewriteRuleElementStream.cs" />
+    <Compile Include="Tree\RewriteRuleNodeStream.cs" />
+    <Compile Include="Tree\RewriteRuleSubtreeStream.cs" />
+    <Compile Include="Tree\RewriteRuleTokenStream.cs" />
+    <Compile Include="Tree\TemplateTreeRuleReturnScope`2.cs" />
+    <Compile Include="Tree\TreeFilter.cs" />
+    <Compile Include="Tree\TreeIterator.cs" />
+    <Compile Include="Tree\TreeParser.cs" />
+    <Compile Include="Tree\TreePatternLexer.cs" />
+    <Compile Include="Tree\TreePatternParser.cs" />
+    <Compile Include="Tree\TreeRewriter.cs" />
+    <Compile Include="Tree\TreeRuleReturnScope`1.cs" />
+    <Compile Include="Tree\TreeVisitor.cs" />
+    <Compile Include="Tree\TreeWizard.cs" />
+    <Compile Include="UnbufferedTokenStream.cs" />
+    <Compile Include="UnwantedTokenException.cs" />
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="..\..\..\..\..\keys\antlr\Key.snk">
+      <Link>Key.snk</Link>
+    </None>
+  </ItemGroup>
+  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.CSharp.targets" />
+  <!-- To modify your build process, add your task inside one of the targets below and uncomment it.
+       Other similar extension points exist, see Microsoft.Common.targets.
+  <Target Name="BeforeBuild">
+  </Target>
+  <Target Name="AfterBuild">
+  </Target>
+  -->
+</Project>
\ No newline at end of file
diff --git a/Runtime/Antlr3.Runtime/BaseRecognizer.cs b/Runtime/Antlr3.Runtime/BaseRecognizer.cs
index c62a5bf..aa76c29 100644
--- a/Runtime/Antlr3.Runtime/BaseRecognizer.cs
+++ b/Runtime/Antlr3.Runtime/BaseRecognizer.cs
@@ -40,9 +40,14 @@ namespace Antlr.Runtime
using IDebugEventListener = Antlr.Runtime.Debug.IDebugEventListener;
using MethodBase = System.Reflection.MethodBase;
using Regex = System.Text.RegularExpressions.Regex;
+    using TextWriter = System.IO.TextWriter;
+
+#if !PORTABLE
using StackFrame = System.Diagnostics.StackFrame;
using StackTrace = System.Diagnostics.StackTrace;
-    using TextWriter = System.IO.TextWriter;
+#else
+    using NotSupportedException = System.NotSupportedException;
+#endif

/** <summary>
*  A generic recognizer that can handle recognizers generated from
@@ -828,6 +833,7 @@ namespace Antlr.Runtime
state._fsp--;
}

+#if !PORTABLE
/** <summary>
*  Return List<String> of the rules in your parser instance
*  leading up to a call to this method.  You could override if
@@ -870,6 +876,7 @@ namespace Antlr.Runtime

return rules;
}
+#endif

public virtual int BacktrackingLevel
{
diff --git a/Runtime/Antlr3.Runtime/DFA.cs b/Runtime/Antlr3.Runtime/DFA.cs
index 76c4083..ff1e741 100644
--- a/Runtime/Antlr3.Runtime/DFA.cs
+++ b/Runtime/Antlr3.Runtime/DFA.cs
@@ -34,9 +34,12 @@ namespace Antlr.Runtime
{
using ArgumentNullException = System.ArgumentNullException;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;
-    using Console = System.Console;
using IDebugEventListener = Antlr.Runtime.Debug.IDebugEventListener;

+#if !PORTABLE
+    using Console = System.Console;
+#endif
+
public delegate int SpecialStateTransitionHandler( DFA dfa, int s, IIntStream input );

/** <summary>A DFA implemented as a set of transition tables.</summary>
@@ -200,12 +203,15 @@ namespace Antlr.Runtime
[Conditional("DEBUG_DFA")]
private void DfaDebugMessage(string format, params object[] args)
{
+#if !PORTABLE
Console.Error.WriteLine(format, args);
+#endif
}

[Conditional("DEBUG_DFA")]
private void DfaDebugInvalidSymbol(int s)
{
+#if !PORTABLE
Console.Error.WriteLine("min[{0}]={1}", s, min[s]);
Console.Error.WriteLine("max[{0}]={1}", s, max[s]);
Console.Error.WriteLine("eot[{0}]={1}", s, eot[s]);
@@ -215,6 +221,7 @@ namespace Antlr.Runtime
Console.Error.Write(transition[s][p] + " ");

Console.Error.WriteLine();
+#endif
}

protected virtual void NoViableAlt( int s, IIntStream input )
diff --git a/Runtime/Antlr3.Runtime/EarlyExitException.cs b/Runtime/Antlr3.Runtime/EarlyExitException.cs
index f2f6e81..9e08fb4 100644
--- a/Runtime/Antlr3.Runtime/EarlyExitException.cs
+++ b/Runtime/Antlr3.Runtime/EarlyExitException.cs
@@ -34,8 +34,11 @@ namespace Antlr.Runtime
{
using ArgumentNullException = System.ArgumentNullException;
using Exception = System.Exception;
+
+#if !PORTABLE
using SerializationInfo = System.Runtime.Serialization.SerializationInfo;
using StreamingContext = System.Runtime.Serialization.StreamingContext;
+#endif

/** <summary>The recognizer did not match anything for a (..)+ loop.</summary> */
[System.Serializable]
@@ -75,6 +78,7 @@ namespace Antlr.Runtime
this._decisionNumber = decisionNumber;
}

+#if !PORTABLE
protected EarlyExitException(SerializationInfo info, StreamingContext context)
: base(info, context)
{
@@ -83,6 +87,7 @@ namespace Antlr.Runtime

this._decisionNumber = info.GetInt32("DecisionNumber");
}
+#endif

public int DecisionNumber
{
@@ -92,6 +97,7 @@ namespace Antlr.Runtime
}
}

+#if !PORTABLE
public override void GetObjectData(SerializationInfo info, StreamingContext context)
{
if (info == null)
@@ -100,5 +106,6 @@ namespace Antlr.Runtime
base.GetObjectData(info, context);
info.AddValue("DecisionNumber", DecisionNumber);
}
+#endif
}
}
diff --git a/Runtime/Antlr3.Runtime/FailedPredicateException.cs b/Runtime/Antlr3.Runtime/FailedPredicateException.cs
index add3f58..c7bfaaf 100644
--- a/Runtime/Antlr3.Runtime/FailedPredicateException.cs
+++ b/Runtime/Antlr3.Runtime/FailedPredicateException.cs
@@ -34,8 +34,11 @@ namespace Antlr.Runtime
{
using ArgumentNullException = System.ArgumentNullException;
using Exception = System.Exception;
+
+#if !PORTABLE
using SerializationInfo = System.Runtime.Serialization.SerializationInfo;
using StreamingContext = System.Runtime.Serialization.StreamingContext;
+#endif

/** <summary>
*  A semantic predicate failed during validation.  Validation of predicates
@@ -85,6 +88,7 @@ namespace Antlr.Runtime
this._predicateText = predicateText;
}

+#if !PORTABLE
protected FailedPredicateException(SerializationInfo info, StreamingContext context)
: base(info, context)
{
@@ -94,6 +98,7 @@ namespace Antlr.Runtime
this._ruleName = info.GetString("RuleName");
this._predicateText = info.GetString("PredicateText");
}
+#endif

public string RuleName
{
@@ -111,6 +116,7 @@ namespace Antlr.Runtime
}
}

+#if !PORTABLE
public override void GetObjectData(SerializationInfo info, StreamingContext context)
{
if (info == null)
@@ -120,6 +126,7 @@ namespace Antlr.Runtime
info.AddValue("RuleName", _ruleName);
info.AddValue("PredicateText", _predicateText);
}
+#endif

public override string ToString()
{
diff --git a/Runtime/Antlr3.Runtime/Misc/RegexOptionsHelper.cs b/Runtime/Antlr3.Runtime/Misc/RegexOptionsHelper.cs
new file mode 100644
index 0000000..e357e6c
--- /dev/null
+++ b/Runtime/Antlr3.Runtime/Misc/RegexOptionsHelper.cs
@@ -0,0 +1,23 @@
+ï»¿namespace Antlr.Runtime.Misc
+{
+    using System.Text.RegularExpressions;
+
+#if PORTABLE
+    using System;
+#endif
+
+    internal static class RegexOptionsHelper
+    {
+        public static readonly RegexOptions Compiled;
+
+        static RegexOptionsHelper()
+        {
+#if !PORTABLE
+            Compiled = RegexOptions.Compiled;
+#else
+            if (!Enum.TryParse("Compiled", out Compiled))
+                Compiled = RegexOptions.None;
+#endif
+        }
+    }
+}
diff --git a/Runtime/Antlr3.Runtime/MismatchedNotSetException.cs b/Runtime/Antlr3.Runtime/MismatchedNotSetException.cs
index b6ebc8f..a0ec39a 100644
--- a/Runtime/Antlr3.Runtime/MismatchedNotSetException.cs
+++ b/Runtime/Antlr3.Runtime/MismatchedNotSetException.cs
@@ -33,8 +33,11 @@
namespace Antlr.Runtime
{
using Exception = System.Exception;
+
+#if !PORTABLE
using SerializationInfo = System.Runtime.Serialization.SerializationInfo;
using StreamingContext = System.Runtime.Serialization.StreamingContext;
+#endif

[System.Serializable]
public class MismatchedNotSetException : MismatchedSetException
@@ -68,10 +71,12 @@ namespace Antlr.Runtime
{
}

+#if !PORTABLE
protected MismatchedNotSetException(SerializationInfo info, StreamingContext context)
: base(info, context)
{
}
+#endif

public override string ToString()
{
diff --git a/Runtime/Antlr3.Runtime/MismatchedRangeException.cs b/Runtime/Antlr3.Runtime/MismatchedRangeException.cs
index c714aef..209e586 100644
--- a/Runtime/Antlr3.Runtime/MismatchedRangeException.cs
+++ b/Runtime/Antlr3.Runtime/MismatchedRangeException.cs
@@ -34,8 +34,11 @@ namespace Antlr.Runtime
{
using ArgumentNullException = System.ArgumentNullException;
using Exception = System.Exception;
+
+#if !PORTABLE
using SerializationInfo = System.Runtime.Serialization.SerializationInfo;
using StreamingContext = System.Runtime.Serialization.StreamingContext;
+#endif

[System.Serializable]
public class MismatchedRangeException : RecognitionException
@@ -78,6 +81,7 @@ namespace Antlr.Runtime
this._b = b;
}

+#if !PORTABLE
protected MismatchedRangeException(SerializationInfo info, StreamingContext context)
: base(info, context)
{
@@ -87,6 +91,7 @@ namespace Antlr.Runtime
this._a = info.GetInt32("A");
this._b = info.GetInt32("B");
}
+#endif

public int A
{
@@ -104,6 +109,7 @@ namespace Antlr.Runtime
}
}

+#if !PORTABLE
public override void GetObjectData(SerializationInfo info, StreamingContext context)
{
if (info == null)
@@ -113,6 +119,7 @@ namespace Antlr.Runtime
info.AddValue("A", _a);
info.AddValue("B", _b);
}
+#endif

public override string ToString()
{
diff --git a/Runtime/Antlr3.Runtime/MismatchedSetException.cs b/Runtime/Antlr3.Runtime/MismatchedSetException.cs
index 10baecf..0e4bfce 100644
--- a/Runtime/Antlr3.Runtime/MismatchedSetException.cs
+++ b/Runtime/Antlr3.Runtime/MismatchedSetException.cs
@@ -34,8 +34,11 @@ namespace Antlr.Runtime
{
using ArgumentNullException = System.ArgumentNullException;
using Exception = System.Exception;
+
+#if !PORTABLE
using SerializationInfo = System.Runtime.Serialization.SerializationInfo;
using StreamingContext = System.Runtime.Serialization.StreamingContext;
+#endif

[System.Serializable]
public class MismatchedSetException : RecognitionException
@@ -74,6 +77,7 @@ namespace Antlr.Runtime
this._expecting = expecting;
}

+#if !PORTABLE
protected MismatchedSetException(SerializationInfo info, StreamingContext context)
: base(info, context)
{
@@ -82,6 +86,7 @@ namespace Antlr.Runtime

this._expecting = (BitSet)info.GetValue("Expecting", typeof(BitSet));
}
+#endif

public BitSet Expecting
{
@@ -91,6 +96,7 @@ namespace Antlr.Runtime
}
}

+#if !PORTABLE
public override void GetObjectData(SerializationInfo info, StreamingContext context)
{
if (info == null)
@@ -99,6 +105,7 @@ namespace Antlr.Runtime
base.GetObjectData(info, context);
info.AddValue("Expecting", _expecting);
}
+#endif

public override string ToString()
{
diff --git a/Runtime/Antlr3.Runtime/MismatchedTokenException.cs b/Runtime/Antlr3.Runtime/MismatchedTokenException.cs
index 55c9aab..3785f0f 100644
--- a/Runtime/Antlr3.Runtime/MismatchedTokenException.cs
+++ b/Runtime/Antlr3.Runtime/MismatchedTokenException.cs
@@ -36,8 +36,11 @@ namespace Antlr.Runtime
using System.Collections.ObjectModel;
using ArgumentNullException = System.ArgumentNullException;
using Exception = System.Exception;
+
+#if !PORTABLE
using SerializationInfo = System.Runtime.Serialization.SerializationInfo;
using StreamingContext = System.Runtime.Serialization.StreamingContext;
+#endif

/** <summary>A mismatched char or Token or tree node</summary> */
[System.Serializable]
@@ -71,7 +74,7 @@ namespace Antlr.Runtime
this._expecting = expecting;

if (tokenNames != null)
-                this._tokenNames = new List<string>(tokenNames).AsReadOnly();
+                this._tokenNames = new ReadOnlyCollection<string>(new List<string>(tokenNames));
}

public MismatchedTokenException(string message, int expecting, IIntStream input, IList<string> tokenNames)
@@ -80,7 +83,7 @@ namespace Antlr.Runtime
this._expecting = expecting;

if (tokenNames != null)
-                this._tokenNames = new List<string>(tokenNames).AsReadOnly();
+                this._tokenNames = new ReadOnlyCollection<string>(new List<string>(tokenNames));
}

public MismatchedTokenException(string message, int expecting, IIntStream input, IList<string> tokenNames, Exception innerException)
@@ -89,9 +92,10 @@ namespace Antlr.Runtime
this._expecting = expecting;

if (tokenNames != null)
-                this._tokenNames = new List<string>(tokenNames).AsReadOnly();
+                this._tokenNames = new ReadOnlyCollection<string>(new List<string>(tokenNames));
}

+#if !PORTABLE
protected MismatchedTokenException(SerializationInfo info, StreamingContext context)
: base(info, context)
{
@@ -101,6 +105,7 @@ namespace Antlr.Runtime
this._expecting = info.GetInt32("Expecting");
this._tokenNames = new ReadOnlyCollection<string>((string[])info.GetValue("TokenNames", typeof(string[])));
}
+#endif

public int Expecting
{
@@ -118,6 +123,7 @@ namespace Antlr.Runtime
}
}

+#if !PORTABLE
public override void GetObjectData(SerializationInfo info, StreamingContext context)
{
if (info == null)
@@ -127,6 +133,7 @@ namespace Antlr.Runtime
info.AddValue("Expecting", _expecting);
info.AddValue("TokenNames", (_tokenNames != null) ? new List<string>(_tokenNames).ToArray() : default(string[]));
}
+#endif

public override string ToString()
{
diff --git a/Runtime/Antlr3.Runtime/MismatchedTreeNodeException.cs b/Runtime/Antlr3.Runtime/MismatchedTreeNodeException.cs
index 2a33279..9d33b60 100644
--- a/Runtime/Antlr3.Runtime/MismatchedTreeNodeException.cs
+++ b/Runtime/Antlr3.Runtime/MismatchedTreeNodeException.cs
@@ -35,8 +35,11 @@ namespace Antlr.Runtime
using ArgumentNullException = System.ArgumentNullException;
using Exception = System.Exception;
using ITreeNodeStream = Antlr.Runtime.Tree.ITreeNodeStream;
+
+#if !PORTABLE
using SerializationInfo = System.Runtime.Serialization.SerializationInfo;
using StreamingContext = System.Runtime.Serialization.StreamingContext;
+#endif

[System.Serializable]
public class MismatchedTreeNodeException : RecognitionException
@@ -75,6 +78,7 @@ namespace Antlr.Runtime
this._expecting = expecting;
}

+#if !PORTABLE
protected MismatchedTreeNodeException(SerializationInfo info, StreamingContext context)
: base(info, context)
{
@@ -83,6 +87,7 @@ namespace Antlr.Runtime

this._expecting = info.GetInt32("Expecting");
}
+#endif

public int Expecting
{
@@ -92,6 +97,7 @@ namespace Antlr.Runtime
}
}

+#if !PORTABLE
public override void GetObjectData(SerializationInfo info, StreamingContext context)
{
if (info == null)
@@ -100,6 +106,7 @@ namespace Antlr.Runtime
base.GetObjectData(info, context);
info.AddValue("Expecting", _expecting);
}
+#endif

public override string ToString()
{
diff --git a/Runtime/Antlr3.Runtime/MissingTokenException.cs b/Runtime/Antlr3.Runtime/MissingTokenException.cs
index 7a9cba1..8d99370 100644
--- a/Runtime/Antlr3.Runtime/MissingTokenException.cs
+++ b/Runtime/Antlr3.Runtime/MissingTokenException.cs
@@ -34,8 +34,11 @@ namespace Antlr.Runtime
{
using System.Collections.Generic;
using Exception = System.Exception;
+
+#if !PORTABLE
using SerializationInfo = System.Runtime.Serialization.SerializationInfo;
using StreamingContext = System.Runtime.Serialization.StreamingContext;
+#endif

/** <summary>
*  We were expecting a token but it's not found.  The current token
@@ -84,10 +87,12 @@ namespace Antlr.Runtime
this._inserted = inserted;
}

+#if !PORTABLE
protected MissingTokenException(SerializationInfo info, StreamingContext context)
: base(info, context)
{
}
+#endif

public virtual int MissingType
{
diff --git a/Runtime/Antlr3.Runtime/NoViableAltException.cs b/Runtime/Antlr3.Runtime/NoViableAltException.cs
index 4f37001..897f67c 100644
--- a/Runtime/Antlr3.Runtime/NoViableAltException.cs
+++ b/Runtime/Antlr3.Runtime/NoViableAltException.cs
@@ -34,8 +34,11 @@ namespace Antlr.Runtime
{
using ArgumentNullException = System.ArgumentNullException;
using Exception = System.Exception;
+
+#if !PORTABLE
using SerializationInfo = System.Runtime.Serialization.SerializationInfo;
using StreamingContext = System.Runtime.Serialization.StreamingContext;
+#endif

[System.Serializable]
public class NoViableAltException : RecognitionException
@@ -104,6 +107,7 @@ namespace Antlr.Runtime
this._stateNumber = stateNumber;
}

+#if !PORTABLE
protected NoViableAltException(SerializationInfo info, StreamingContext context)
: base(info, context)
{
@@ -114,6 +118,7 @@ namespace Antlr.Runtime
this._decisionNumber = info.GetInt32("DecisionNumber");
this._stateNumber = info.GetInt32("StateNumber");
}
+#endif

public int DecisionNumber
{
@@ -139,6 +144,7 @@ namespace Antlr.Runtime
}
}

+#if !PORTABLE
public override void GetObjectData(SerializationInfo info, StreamingContext context)
{
if (info == null)
@@ -149,6 +155,7 @@ namespace Antlr.Runtime
info.AddValue("DecisionNumber", _decisionNumber);
info.AddValue("StateNumber", _stateNumber);
}
+#endif

public override string ToString()
{
diff --git a/Runtime/Antlr3.Runtime/Properties/AssemblyInfo.cs b/Runtime/Antlr3.Runtime/Properties/AssemblyInfo.cs
index b823616..b55d54a 100644
--- a/Runtime/Antlr3.Runtime/Properties/AssemblyInfo.cs
+++ b/Runtime/Antlr3.Runtime/Properties/AssemblyInfo.cs
@@ -32,9 +32,12 @@

using System;
using System.Reflection;
-using System.Runtime.InteropServices;
using System.Security;

+#if !PORTABLE
+using System.Runtime.InteropServices;
+#endif
+
// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
@@ -49,6 +52,7 @@ using System.Security;
[assembly: CLSCompliant( true )]
[assembly: AllowPartiallyTrustedCallers]

+#if !PORTABLE
// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
@@ -56,6 +60,7 @@ using System.Security;

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid( "7a0b4db7-f127-4cf5-ac2c-e294957efcd6" )]
+#endif

/* Version information for an assembly consists of four values in the following order:
*
diff --git a/Runtime/Antlr3.Runtime/RecognitionException.cs b/Runtime/Antlr3.Runtime/RecognitionException.cs
index 007560d..f97d03e 100644
--- a/Runtime/Antlr3.Runtime/RecognitionException.cs
+++ b/Runtime/Antlr3.Runtime/RecognitionException.cs
@@ -37,8 +37,11 @@ namespace Antlr.Runtime
using ArgumentNullException = System.ArgumentNullException;
using Exception = System.Exception;
using NotSupportedException = System.NotSupportedException;
+
+#if !PORTABLE
using SerializationInfo = System.Runtime.Serialization.SerializationInfo;
using StreamingContext = System.Runtime.Serialization.StreamingContext;
+#endif

/** <summary>The root of the ANTLR exception hierarchy.</summary>
*
@@ -215,6 +218,7 @@ namespace Antlr.Runtime
}
}

+#if !PORTABLE
protected RecognitionException(SerializationInfo info, StreamingContext context)
: base(info, context)
{
@@ -227,6 +231,7 @@ namespace Antlr.Runtime
_charPositionInLine = info.GetInt32("CharPositionInLine");
_approximateLineInfo = info.GetBoolean("ApproximateLineInfo");
}
+#endif

/** <summary>Return the token type or char of the unexpected input element</summary> */
public virtual int UnexpectedType
@@ -353,6 +358,7 @@ namespace Antlr.Runtime
}
}

+#if !PORTABLE
public override void GetObjectData(SerializationInfo info, StreamingContext context)
{
if (info == null)
@@ -365,6 +371,7 @@ namespace Antlr.Runtime
info.AddValue("CharPositionInLine", _charPositionInLine);
info.AddValue("ApproximateLineInfo", _approximateLineInfo);
}
+#endif

protected virtual void ExtractInformationFromTreeNodeStream(ITreeNodeStream input)
{
diff --git a/Runtime/Antlr3.Runtime/System/ICloneable.cs b/Runtime/Antlr3.Runtime/System/ICloneable.cs
new file mode 100644
index 0000000..32a5a62
--- /dev/null
+++ b/Runtime/Antlr3.Runtime/System/ICloneable.cs
@@ -0,0 +1,11 @@
+ï»¿#if PORTABLE
+
+namespace System
+{
+    internal interface ICloneable
+    {
+        object Clone();
+    }
+}
+
+#endif
diff --git a/Runtime/Antlr3.Runtime/System/NonSerializedAttribute.cs b/Runtime/Antlr3.Runtime/System/NonSerializedAttribute.cs
new file mode 100644
index 0000000..87f9d71
--- /dev/null
+++ b/Runtime/Antlr3.Runtime/System/NonSerializedAttribute.cs
@@ -0,0 +1,11 @@
+ï»¿#if PORTABLE
+
+namespace System
+{
+    [AttributeUsage(AttributeTargets.Field, Inherited=false)]
+    internal sealed class NonSerializedAttribute : Attribute
+    {
+    }
+}
+
+#endif
diff --git a/Runtime/Antlr3.Runtime/System/SerializableAttribute.cs b/Runtime/Antlr3.Runtime/System/SerializableAttribute.cs
new file mode 100644
index 0000000..96ec30f
--- /dev/null
+++ b/Runtime/Antlr3.Runtime/System/SerializableAttribute.cs
@@ -0,0 +1,11 @@
+ï»¿#if PORTABLE
+
+namespace System
+{
+    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Delegate, Inherited = false)]
+    internal sealed class SerializableAttribute : Attribute
+    {
+    }
+}
+
+#endif
diff --git a/Runtime/Antlr3.Runtime/TokenRewriteStream.cs b/Runtime/Antlr3.Runtime/TokenRewriteStream.cs
index e9ab4a9..7f1c759 100644
--- a/Runtime/Antlr3.Runtime/TokenRewriteStream.cs
+++ b/Runtime/Antlr3.Runtime/TokenRewriteStream.cs
@@ -35,13 +35,16 @@ namespace Antlr.Runtime
using System.Collections.Generic;

using ArgumentException = System.ArgumentException;
-    using Console = System.Console;
using Math = System.Math;
using DebuggerDisplay = System.Diagnostics.DebuggerDisplayAttribute;
using Exception = System.Exception;
using StringBuilder = System.Text.StringBuilder;
using Type = System.Type;

+#if !PORTABLE
+    using Console = System.Console;
+#endif
+
/** Useful for dumping out the input stream after doing some
*  augmentation or other manipulations.
*
@@ -617,7 +620,9 @@ namespace Antlr.Runtime
rewrites[prevRop.instructionIndex] = null; // kill first delete
rop.index = Math.Min(prevRop.index, rop.index);
rop.lastIndex = Math.Max(prevRop.lastIndex, rop.lastIndex);
+#if !PORTABLE
Console.WriteLine("new rop " + rop);
+#endif
}
else if ( !disjoint && !same )
{
diff --git a/Runtime/Antlr3.Runtime/Tree/BufferedTreeNodeStream.cs b/Runtime/Antlr3.Runtime/Tree/BufferedTreeNodeStream.cs
index 3b5a01e..8f14cb1 100644
--- a/Runtime/Antlr3.Runtime/Tree/BufferedTreeNodeStream.cs
+++ b/Runtime/Antlr3.Runtime/Tree/BufferedTreeNodeStream.cs
@@ -34,11 +34,14 @@ namespace Antlr.Runtime.Tree
{
using System.Collections.Generic;

-    using Console = System.Console;
using IList = System.Collections.IList;
using InvalidOperationException = System.InvalidOperationException;
using StringBuilder = System.Text.StringBuilder;

+#if !PORTABLE
+    using Console = System.Console;
+#endif
+
/** <summary>A buffered stream of tree nodes.  Nodes can be from a tree of ANY kind.</summary>
*
*  This node stream sucks all nodes out of the tree specified in
@@ -590,7 +593,10 @@ namespace Antlr.Runtime.Tree

public virtual string ToString( object start, object stop )
{
+#if !PORTABLE
Console.Out.WriteLine( "toString" );
+#endif
+
if ( start == null || stop == null )
{
return null;
@@ -599,6 +605,7 @@ namespace Antlr.Runtime.Tree
{
throw new InvalidOperationException( "Buffer is not yet filled." );
}
+#if !PORTABLE
//Console.Out.WriteLine( "stop: " + stop );
if ( start is CommonTree )
Console.Out.Write( "toString: " + ( (CommonTree)start ).Token + ", " );
@@ -608,6 +615,7 @@ namespace Antlr.Runtime.Tree
Console.Out.WriteLine( ( (CommonTree)stop ).Token );
else
Console.Out.WriteLine( stop );
+#endif
// if we have the token stream, use that to dump text in order
if ( tokens != null )
{
diff --git a/Runtime/Antlr3.Runtime/Tree/RewriteCardinalityException.cs b/Runtime/Antlr3.Runtime/Tree/RewriteCardinalityException.cs
index 4590287..ef3a628 100644
--- a/Runtime/Antlr3.Runtime/Tree/RewriteCardinalityException.cs
+++ b/Runtime/Antlr3.Runtime/Tree/RewriteCardinalityException.cs
@@ -34,8 +34,11 @@ namespace Antlr.Runtime.Tree
{
using ArgumentNullException = System.ArgumentNullException;
using Exception = System.Exception;
+
+#if !PORTABLE
using SerializationInfo = System.Runtime.Serialization.SerializationInfo;
using StreamingContext = System.Runtime.Serialization.StreamingContext;
+#endif

/** <summary>
*  Base class for all exceptions thrown during AST rewrite construction.
@@ -75,6 +78,7 @@ namespace Antlr.Runtime.Tree
_elementDescription = elementDescription;
}

+#if !PORTABLE
protected RewriteCardinalityException(SerializationInfo info, StreamingContext context)
: base(info, context)
{
@@ -92,5 +96,6 @@ namespace Antlr.Runtime.Tree
base.GetObjectData(info, context);
info.AddValue("ElementDescription", _elementDescription);
}
+#endif
}
}
diff --git a/Runtime/Antlr3.Runtime/Tree/RewriteEarlyExitException.cs b/Runtime/Antlr3.Runtime/Tree/RewriteEarlyExitException.cs
index 43c51fe..8bed518 100644
--- a/Runtime/Antlr3.Runtime/Tree/RewriteEarlyExitException.cs
+++ b/Runtime/Antlr3.Runtime/Tree/RewriteEarlyExitException.cs
@@ -33,8 +33,11 @@
namespace Antlr.Runtime.Tree
{
using Exception = System.Exception;
+
+#if !PORTABLE
using SerializationInfo = System.Runtime.Serialization.SerializationInfo;
using StreamingContext = System.Runtime.Serialization.StreamingContext;
+#endif

/** <summary>No elements within a (...)+ in a rewrite rule</summary> */
[System.Serializable]
@@ -64,9 +67,11 @@ namespace Antlr.Runtime.Tree
{
}

+#if !PORTABLE
protected RewriteEarlyExitException(SerializationInfo info, StreamingContext context)
: base(info, context)
{
}
+#endif
}
}
diff --git a/Runtime/Antlr3.Runtime/Tree/RewriteEmptyStreamException.cs b/Runtime/Antlr3.Runtime/Tree/RewriteEmptyStreamException.cs
index 8390cd6..945162a 100644
--- a/Runtime/Antlr3.Runtime/Tree/RewriteEmptyStreamException.cs
+++ b/Runtime/Antlr3.Runtime/Tree/RewriteEmptyStreamException.cs
@@ -33,8 +33,11 @@
namespace Antlr.Runtime.Tree
{
using Exception = System.Exception;
+
+#if !PORTABLE
using SerializationInfo = System.Runtime.Serialization.SerializationInfo;
using StreamingContext = System.Runtime.Serialization.StreamingContext;
+#endif

/** <summary>Ref to ID or expr but no tokens in ID stream or subtrees in expr stream</summary> */
[System.Serializable]
@@ -64,9 +67,11 @@ namespace Antlr.Runtime.Tree
{
}

+#if !PORTABLE
protected RewriteEmptyStreamException(SerializationInfo info, StreamingContext context)
: base(info, context)
{
}
+#endif
}
}
diff --git a/Runtime/Antlr3.Runtime/Tree/TreeParser.cs b/Runtime/Antlr3.Runtime/Tree/TreeParser.cs
index f5a1508..f6d095b 100644
--- a/Runtime/Antlr3.Runtime/Tree/TreeParser.cs
+++ b/Runtime/Antlr3.Runtime/Tree/TreeParser.cs
@@ -34,7 +34,7 @@ namespace Antlr.Runtime.Tree
{
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;
using Regex = System.Text.RegularExpressions.Regex;
-    using RegexOptions = System.Text.RegularExpressions.RegexOptions;
+    using RegexOptionsHelper = Antlr.Runtime.Misc.RegexOptionsHelper;

/** <summary>
*  A parser for a stream of tree nodes.  "tree grammars" result in a subclass
@@ -50,8 +50,8 @@ namespace Antlr.Runtime.Tree
// precompiled regex used by inContext
static string dotdot = ".*[^.]\\.\\.[^.].*";
static string doubleEtc = ".*\\.\\.\\.\\s+\\.\\.\\..*";
-        static Regex dotdotPattern = new Regex( dotdot, RegexOptions.Compiled );
-        static Regex doubleEtcPattern = new Regex( doubleEtc, RegexOptions.Compiled );
+        static Regex dotdotPattern = new Regex( dotdot, RegexOptionsHelper.Compiled );
+        static Regex doubleEtcPattern = new Regex( doubleEtc, RegexOptionsHelper.Compiled );

protected ITreeNodeStream input;

diff --git a/Runtime/Antlr3.Runtime/Tree/TreeRewriter.cs b/Runtime/Antlr3.Runtime/Tree/TreeRewriter.cs
index 16a38a2..d4d7de8 100644
--- a/Runtime/Antlr3.Runtime/Tree/TreeRewriter.cs
+++ b/Runtime/Antlr3.Runtime/Tree/TreeRewriter.cs
@@ -34,7 +34,9 @@ namespace Antlr.Runtime.Tree
{
using Antlr.Runtime.Misc;

+#if !PORTABLE
using Console = System.Console;
+#endif

public class TreeRewriter : TreeParser
{
@@ -138,7 +140,9 @@ namespace Antlr.Runtime.Tree
ITree @new = newTree as ITree;
string oldMessage = old != null ? old.ToStringTree() : "??";
string newMessage = @new != null ? @new.ToStringTree() : "??";
+#if !PORTABLE
Console.WriteLine("{0} -> {1}", oldMessage, newMessage);
+#endif
}
}
}
diff --git a/Runtime/Antlr3.Runtime/UnwantedTokenException.cs b/Runtime/Antlr3.Runtime/UnwantedTokenException.cs
index 89b3481..b10ed82 100644
--- a/Runtime/Antlr3.Runtime/UnwantedTokenException.cs
+++ b/Runtime/Antlr3.Runtime/UnwantedTokenException.cs
@@ -34,8 +34,11 @@ namespace Antlr.Runtime
{
using System.Collections.Generic;
using Exception = System.Exception;
+
+#if !PORTABLE
using SerializationInfo = System.Runtime.Serialization.SerializationInfo;
using StreamingContext = System.Runtime.Serialization.StreamingContext;
+#endif

/** <summary>An extra token while parsing a TokenStream</summary> */
[System.Serializable]
@@ -75,10 +78,12 @@ namespace Antlr.Runtime
{
}

+#if !PORTABLE
protected UnwantedTokenException(SerializationInfo info, StreamingContext context)
: base(info, context)
{
}
+#endif

public virtual IToken UnexpectedToken
{

