commit 84ddd5cdf55aff2b1c8afffed8e8d9cdf2477e7d
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Jan 24 11:06:04 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Jan 24 11:06:04 2011 -0800

(C# 3) C# naming conventions

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7519]

diff --git a/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs b/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs
index 5bc2487..bc7c362 100644
--- a/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs
+++ b/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs
@@ -41,9 +41,9 @@ namespace Antlr4.StringTemplate.Visualizer.Extensions
public static string ToListString(this IList list)
{
TemplateGroup group = new TemplateGroup('$', '$');
-            group.defineTemplate("listTemplate", "list", "[$list:{x|$x$}; separator=\", \"$]");
-            group.registerRenderer(typeof(IList), new CollectionRenderer());
-            Template st = group.getInstanceOf("listTemplate");
+            group.DefineTemplate("listTemplate", "list", "[$list:{x|$x$}; separator=\", \"$]");
+            group.RegisterRenderer(typeof(IList), new CollectionRenderer());
+            Template st = group.GetInstanceOf("listTemplate");
st.Add("list", list);
return st.Render();
}
diff --git a/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs b/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
index e176043..2eb935d 100644
--- a/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
+++ b/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
@@ -57,13 +57,13 @@ namespace Antlr4.StringTemplate.Visualizer.Extensions
public static void Inspect(this DebugST template, ErrorManager errorManager, CultureInfo culture, int lineWidth)
{
ErrorBuffer errors = new ErrorBuffer();
-            template.impl.nativeGroup.setListener(errors);
+            template.impl.nativeGroup.Listener = errors;
StringWriter @out = new StringWriter();
ITemplateWriter wr = new AutoIndentWriter(@out);
-            wr.setLineWidth(lineWidth);
+            wr.SetLineWidth(lineWidth);
Interpreter interp = new Interpreter(template.groupThatCreatedThisInstance, culture);
interp.Execute(wr, template); // Render and track events
-            TemplateVisualizer visualizer = new TemplateVisualizer(errorManager, template, @out.ToString(), interp, interp.getExecutionTrace(), errors.Errors);
+            TemplateVisualizer visualizer = new TemplateVisualizer(errorManager, template, @out.ToString(), interp, interp.GetExecutionTrace(), errors.Errors);
visualizer.Show();
}
}
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs b/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
index fab0eff..63559aa 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
+++ b/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
@@ -114,7 +114,7 @@ namespace Antlr4.StringTemplate.Visualizer
if (_children == null)
{
_children = new List<TemplateCallHierarchyViewModel>();
-                    foreach (var @event in _interpreter.getEvents(_template))
+                    foreach (var @event in _interpreter.GetEvents(_template))
_children.Add(new TemplateCallHierarchyViewModel(_interpreter, @event.Self));
}

@@ -124,10 +124,10 @@ namespace Antlr4.StringTemplate.Visualizer

public override string ToString()
{
-            if (_template.IsAnonymousSubtemplate())
+            if (_template.IsAnonymousSubtemplate)
return "{...}";

-            return string.Format("{0} @ {1}:{2}", _template, Path.GetFileName(_template.newSTEvent.getFileName()), _template.newSTEvent.getLine());
+            return string.Format("{0} @ {1}:{2}", _template, Path.GetFileName(_template.newSTEvent.GetFileName()), _template.newSTEvent.GetLine());
}

protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
index 583183e..5e21d38 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
@@ -212,7 +212,7 @@ namespace Antlr4.StringTemplate.Visualizer

UpdateStack();
UpdateAttributes();
-            viewModel.Bytecode = currentTemplate.impl.disasm();
+            viewModel.Bytecode = currentTemplate.impl.Disassemble();
viewModel.Ast = currentTemplate.impl.ast;

SetSelectionPath(viewModel.TemplateCallHierarchy[0], currentTemplate.GetEnclosingInstanceStack(true));
@@ -232,10 +232,10 @@ namespace Antlr4.StringTemplate.Visualizer
}
else
{
-                    InterpEvent e = ViewModel.Visualizer.Interpreter.getEvents(currentTemplate.enclosingInstance)[i];
+                    InterpEvent e = ViewModel.Visualizer.Interpreter.GetEvents(currentTemplate.enclosingInstance)[i];
if (e is EvalTemplateEvent)
{
-                        if (currentTemplate.IsAnonymousSubtemplate())
+                        if (currentTemplate.IsAnonymousSubtemplate)
Highlight(TemplateTextBox.Document, r);

Highlight(OutputTextBox.Document, new Interval(e.Start, e.Stop));
@@ -297,7 +297,7 @@ namespace Antlr4.StringTemplate.Visualizer
if (i > 0)
locations.Append(", ");

-                                locations.AppendFormat("{0}:{1}", Path.GetFileName(ae.getFileName()), ae.getLine());
+                                locations.AppendFormat("{0}:{1}", Path.GetFileName(ae.GetFileName()), ae.GetLine());
i++;
}
}
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerViewModel.cs b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerViewModel.cs
index b31766b..45718c1 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerViewModel.cs
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerViewModel.cs
@@ -64,7 +64,7 @@ namespace Antlr4.StringTemplate.Visualizer
throw new ArgumentNullException("visualizer");

_visualizer = visualizer;
-            _allEvents = visualizer.Interpreter.getEvents();
+            _allEvents = visualizer.Interpreter.GetEvents();
_templateCallHierarchy =
new List<TemplateCallHierarchyViewModel>()
{
diff --git a/Antlr4.StringTemplate/AutoIndentWriter.cs b/Antlr4.StringTemplate/AutoIndentWriter.cs
index 76fd0b5..3243b5c 100644
--- a/Antlr4.StringTemplate/AutoIndentWriter.cs
+++ b/Antlr4.StringTemplate/AutoIndentWriter.cs
@@ -100,22 +100,22 @@ namespace Antlr4.StringTemplate
{
}

-        public virtual void setLineWidth(int lineWidth)
+        public virtual void SetLineWidth(int lineWidth)
{
this.lineWidth = lineWidth;
}

-        public virtual void pushIndentation(string indent)
+        public virtual void PushIndentation(string indent)
{
indents.Push(indent);
}

-        public virtual string popIndentation()
+        public virtual string PopIndentation()
{
return indents.Pop();
}

-        public virtual void pushAnchorPoint()
+        public virtual void PushAnchorPoint()
{
if ((anchors_sp + 1) >= anchors.Length)
{
@@ -125,18 +125,18 @@ namespace Antlr4.StringTemplate
anchors[anchors_sp] = charPosition;
}

-        public virtual void popAnchorPoint()
+        public virtual void PopAnchorPoint()
{
anchors_sp--;
}

-        public virtual int index()
+        public virtual int Index()
{
return charIndex;
}

/** Write out a string literal or attribute expression or expression element.*/
-        public virtual int write(string str)
+        public virtual int Write(string str)
{
int n = 0;
for (int i = 0; i < str.Length; i++)
@@ -159,7 +159,7 @@ namespace Antlr4.StringTemplate
// check to see if we are at the start of a line; need indent if so
if (atStartOfLine)
{
-                    n += indent();
+                    n += Indent();
atStartOfLine = false;
}
n++;
@@ -170,9 +170,9 @@ namespace Antlr4.StringTemplate
return n;
}

-        public virtual int writeSeparator(string str)
+        public virtual int WriteSeparator(string str)
{
-            return write(str);
+            return Write(str);
}

/** Write out a string literal or attribute expression or expression element.
@@ -181,13 +181,13 @@ namespace Antlr4.StringTemplate
*  at or beyond desired line width then emit a \n and any indentation
*  before spitting out this str.
*/
-        public virtual int write(string str, string wrap)
+        public virtual int Write(string str, string wrap)
{
-            int n = writeWrap(wrap);
-            return n + write(str);
+            int n = WriteWrap(wrap);
+            return n + Write(str);
}

-        public virtual int writeWrap(string wrap)
+        public virtual int WriteWrap(string wrap)
{
int n = 0;
// if want wrap and not already at start of line (last char was \n)
@@ -208,7 +208,7 @@ namespace Antlr4.StringTemplate
n += newline.Length;
charPosition = 0;
charIndex += newline.Length;
-                        n += indent();
+                        n += Indent();
// continue writing any chars out
}
else
@@ -223,7 +223,7 @@ namespace Antlr4.StringTemplate
return n;
}

-        public virtual int indent()
+        public virtual int Indent()
{
int n = 0;
foreach (string ind in indents)
diff --git a/Antlr4.StringTemplate/Compiler/BytecodeDisassembler.cs b/Antlr4.StringTemplate/Compiler/BytecodeDisassembler.cs
index b03fdf0..9558f1e 100644
--- a/Antlr4.StringTemplate/Compiler/BytecodeDisassembler.cs
+++ b/Antlr4.StringTemplate/Compiler/BytecodeDisassembler.cs
@@ -47,7 +47,7 @@ namespace Antlr4.StringTemplate.Compiler
this.code = code;
}

-        public virtual string instrs()
+        public virtual string GetInstructions()
{
StringBuilder buf = new StringBuilder();
int ip = 0;
@@ -62,26 +62,26 @@ namespace Antlr4.StringTemplate.Compiler
for (int opnd = 0; opnd < I.nopnds; opnd++)
{
buf.Append(' ');
-                    buf.Append(getShort(code.instrs, ip));
+                    buf.Append(GetShort(code.instrs, ip));
ip += Instruction.OperandSizeInBytes;
}
}
return buf.ToString();
}

-        public virtual string disassemble()
+        public virtual string Disassemble()
{
StringBuilder buf = new StringBuilder();
int i = 0;
while (i < code.codeSize)
{
-                i = disassembleInstruction(buf, i);
+                i = DisassembleInstruction(buf, i);
buf.AppendLine();
}
return buf.ToString();
}

-        public virtual int disassembleInstruction(StringBuilder buf, int ip)
+        public virtual int DisassembleInstruction(StringBuilder buf, int ip)
{
int opcode = code.instrs[ip];
if (ip >= code.codeSize)
@@ -105,12 +105,12 @@ namespace Antlr4.StringTemplate.Compiler
List<string> operands = new List<string>();
for (int i = 0; i < I.nopnds; i++)
{
-                int opnd = getShort(code.instrs, ip);
+                int opnd = GetShort(code.instrs, ip);
ip += Instruction.OperandSizeInBytes;
switch (I.type[i])
{
case OperandType.String:
-                    operands.Add(showConstPoolOperand(opnd));
+                    operands.Add(ShowConstantPoolOperand(opnd));
break;

case OperandType.Address:
@@ -135,7 +135,7 @@ namespace Antlr4.StringTemplate.Compiler
return ip;
}

-        private string showConstPoolOperand(int poolIndex)
+        private string ShowConstantPoolOperand(int poolIndex)
{
StringBuilder buf = new StringBuilder();
buf.Append("#");
@@ -150,7 +150,7 @@ namespace Antlr4.StringTemplate.Compiler
s = code.strings[poolIndex].ToString();
if (code.strings[poolIndex] is string)
{
-                        s = Utility.replaceEscapes(s);
+                        s = Utility.ReplaceEscapes(s);
s = '"' + s + '"';
}
}
@@ -160,12 +160,12 @@ namespace Antlr4.StringTemplate.Compiler
return buf.ToString();
}

-        public static int getShort(byte[] memory, int index)
+        internal static int GetShort(byte[] memory, int index)
{
return BitConverter.ToInt16(memory, index);
}

-        public virtual string strings()
+        public virtual string GetStrings()
{
StringBuilder buf = new StringBuilder();
int addr = 0;
@@ -176,7 +176,7 @@ namespace Antlr4.StringTemplate.Compiler
if (o is string)
{
string s = (string)o;
-                        s = Utility.replaceEscapes(s);
+                        s = Utility.ReplaceEscapes(s);
buf.AppendLine(string.Format("{0:0000}: \"{1}\"", addr, s));
}
else
@@ -189,7 +189,7 @@ namespace Antlr4.StringTemplate.Compiler
return buf.ToString();
}

-        public virtual string sourceMap()
+        public virtual string GetSourceMap()
{
StringBuilder buf = new StringBuilder();
int addr = 0;
diff --git a/Antlr4.StringTemplate/Compiler/CodeGenerator.g3 b/Antlr4.StringTemplate/Compiler/CodeGenerator.g3
index 029743f..63d5009 100644
--- a/Antlr4.StringTemplate/Compiler/CodeGenerator.g3
+++ b/Antlr4.StringTemplate/Compiler/CodeGenerator.g3
@@ -55,10 +55,10 @@ scope {
$template::state = new CompilationState(errMgr, name, input.TokenStream);
$impl = $template::state.impl;
if ($template.Count == 1) outermostImpl = $impl;
-	$impl.defineFormalArgs($args); // make sure args are defined prior to compilation
+	$impl.DefineFormalArguments($args); // make sure args are defined prior to compilation
if ( name!=null && name.StartsWith(TemplateCompiler.SubtemplatePrefix) ) {
-	    $impl.addArg(new FormalArgument("i"));
-	    $impl.addArg(new FormalArgument("i0"));
+	    $impl.AddArgument(new FormalArgument("i"));
+	    $impl.AddArgument(new FormalArgument("i0"));
}
$impl.template = _template; // always forget the entire template; char indexes are relative to it
}
@@ -74,7 +74,7 @@ chunk
;

element
-	:	^(INDENT {$template::state.indent($INDENT.text);} element {$template::state.emit(Bytecode.INSTR_DEDENT);})
+	:	^(INDENT {$template::state.Indent($INDENT.text);} element {$template::state.Emit(Bytecode.INSTR_DEDENT);})
|	ifstat
|	exprElement
|	TEXT
@@ -100,21 +100,21 @@ exprElement

region returns [string name]
:	^(	REGION ID
-			{$name = TemplateGroup.getMangledRegionName(outermostTemplateName, $ID.text);}
+			{$name = TemplateGroup.GetMangledRegionName(outermostTemplateName, $ID.text);}
template[$name,null]
{
CompiledTemplate sub = $template.impl;
sub.isRegion = true;
sub.regionDefType = Template.RegionType.Embedded;
-			sub.dump();
-			outermostImpl.addImplicitlyDefinedTemplate(sub);
+			sub.Dump();
+			outermostImpl.AddImplicitlyDefinedTemplate(sub);
}
)
;

subtemplate returns [string name, int nargs]
@init {
-    $name = TemplateCompiler.getNewSubtemplateName();
+    $name = TemplateCompiler.GetNewSubtemplateName();
List<FormalArgument> args = new List<FormalArgument>();
}
:	^(	SUBTEMPLATE
@@ -129,8 +129,8 @@ subtemplate returns [string name, int nargs]
sub.ast.SetUnknownTokenBoundaries();
sub.tokens = input.TokenStream;
}
-			sub.dump();
-			outermostImpl.addImplicitlyDefinedTemplate(sub);
+			sub.Dump();
+			outermostImpl.AddImplicitlyDefinedTemplate(sub);
}
)
;
@@ -229,7 +229,7 @@ mapTemplateRef[int num_exprs]
|	subtemplate
{
if ($subtemplate.nargs != $num_exprs) {
-            errMgr.compileTimeError(ErrorType.ANON_ARGUMENT_MISMATCH, templateToken, $subtemplate.start.token, $subtemplate.nargs, $num_exprs);
+            errMgr.CompiletimeError(ErrorType.ANON_ARGUMENT_MISMATCH, templateToken, $subtemplate.start.token, $subtemplate.nargs, $num_exprs);
}
for (int i=1; i<=$num_exprs; i++) emit($subtemplate.start,Bytecode.INSTR_NULL);
emit2($subtemplate.start, Bytecode.INSTR_NEW,
@@ -261,14 +261,14 @@ includeExpr
}
|	^(INCLUDE_REGION ID)		{
CompiledTemplate impl =
-										TemplateCompiler.defineBlankRegion(outermostImpl, $ID.text);
-									impl.dump();
+										TemplateCompiler.DefineBlankRegion(outermostImpl, $ID.text);
+									impl.Dump();
emit2($INCLUDE_REGION,Bytecode.INSTR_NEW,impl.name,0);
}
|	^(INCLUDE_SUPER_REGION ID)	{
CompiledTemplate impl =
-										TemplateCompiler.defineBlankRegion(outermostImpl, $ID.text);
-									impl.dump();
+										TemplateCompiler.DefineBlankRegion(outermostImpl, $ID.text);
+									impl.Dump();
emit2($INCLUDE_SUPER_REGION,Bytecode.INSTR_SUPER_NEW,impl.name,0);
}
|	primary
@@ -276,7 +276,7 @@ includeExpr

primary
:	ID				{refAttr($ID);}
-	|	STRING			{emit1($STRING,Bytecode.INSTR_LOAD_STR, Utility.strip($STRING.text,1));}
+	|	STRING			{emit1($STRING,Bytecode.INSTR_LOAD_STR, Utility.Strip($STRING.text,1));}
|	subtemplate		// push a subtemplate but ignore args since we can't pass any to it here
{emit2($start,Bytecode.INSTR_NEW, $subtemplate.name, 0);}
|	list
diff --git a/Antlr4.StringTemplate/Compiler/CodeGenerator.g3.cs b/Antlr4.StringTemplate/Compiler/CodeGenerator.g3.cs
index f4ce1fc..dcdc8b4 100644
--- a/Antlr4.StringTemplate/Compiler/CodeGenerator.g3.cs
+++ b/Antlr4.StringTemplate/Compiler/CodeGenerator.g3.cs
@@ -61,47 +61,47 @@ namespace Antlr4.StringTemplate.Compiler

public void emit1(CommonTree opAST, Bytecode opcode, int arg)
{
-            template_stack.Peek().state.emit1(opAST, opcode, arg);
+            template_stack.Peek().state.Emit1(opAST, opcode, arg);
}

public void emit1(CommonTree opAST, Bytecode opcode, string arg)
{
-            template_stack.Peek().state.emit1(opAST, opcode, arg);
+            template_stack.Peek().state.Emit1(opAST, opcode, arg);
}

public void emit2(CommonTree opAST, Bytecode opcode, int arg, int arg2)
{
-            template_stack.Peek().state.emit2(opAST, opcode, arg, arg2);
+            template_stack.Peek().state.Emit2(opAST, opcode, arg, arg2);
}

public void emit2(CommonTree opAST, Bytecode opcode, string s, int arg2)
{
-            template_stack.Peek().state.emit2(opAST, opcode, s, arg2);
+            template_stack.Peek().state.Emit2(opAST, opcode, s, arg2);
}

public void emit(Bytecode opcode)
{
-            template_stack.Peek().state.emit(opcode);
+            template_stack.Peek().state.Emit(opcode);
}

public void emit(CommonTree opAST, Bytecode opcode)
{
-            template_stack.Peek().state.emit(opAST, opcode);
+            template_stack.Peek().state.Emit(opAST, opcode);
}

public void insert(int addr, Bytecode opcode, string s)
{
-            template_stack.Peek().state.insert(addr, opcode, s);
+            template_stack.Peek().state.Insert(addr, opcode, s);
}

public void setOption(CommonTree id)
{
-            template_stack.Peek().state.setOption(id);
+            template_stack.Peek().state.SetOption(id);
}

public void write(int addr, short value)
{
-            template_stack.Peek().state.write(addr, value);
+            template_stack.Peek().state.Write(addr, value);
}

public int address()
@@ -111,17 +111,17 @@ namespace Antlr4.StringTemplate.Compiler

public void func(CommonTree id)
{
-            template_stack.Peek().state.func(templateToken, id);
+            template_stack.Peek().state.Function(templateToken, id);
}

public void refAttr(CommonTree id)
{
-            template_stack.Peek().state.refAttr(templateToken, id);
+            template_stack.Peek().state.ReferenceAttribute(templateToken, id);
}

public int defineString(string s)
{
-            return template_stack.Peek().state.defineString(s);
+            return template_stack.Peek().state.DefineString(s);
}
}
}
diff --git a/Antlr4.StringTemplate/Compiler/CompilationState.cs b/Antlr4.StringTemplate/Compiler/CompilationState.cs
index c0a7a65..7857d6c 100644
--- a/Antlr4.StringTemplate/Compiler/CompilationState.cs
+++ b/Antlr4.StringTemplate/Compiler/CompilationState.cs
@@ -64,62 +64,62 @@ namespace Antlr4.StringTemplate.Compiler
impl.name = name;
}

-        public virtual int defineString(string s)
+        public virtual int DefineString(string s)
{
return stringtable.Add(s);
}

-        public virtual void refAttr(IToken templateToken, CommonTree id)
+        public virtual void ReferenceAttribute(IToken templateToken, CommonTree id)
{
string name = id.Text;
FormalArgument arg = impl.TryGetFormalArgument(name);
if (arg != null)
{
int index = arg.Index;
-                emit1(id, Bytecode.INSTR_LOAD_LOCAL, index);
+                Emit1(id, Bytecode.INSTR_LOAD_LOCAL, index);
}
else
{
if (Interpreter.predefinedAnonSubtemplateAttributes.Contains(name))
{
-                    errMgr.compileTimeError(ErrorType.NO_SUCH_ATTRIBUTE, templateToken, id.token);
-                    emit(id, Bytecode.INSTR_NULL);
+                    errMgr.CompiletimeError(ErrorType.NO_SUCH_ATTRIBUTE, templateToken, id.token);
+                    Emit(id, Bytecode.INSTR_NULL);
}
else
{
-                    emit1(id, Bytecode.INSTR_LOAD_ATTR, name);
+                    Emit1(id, Bytecode.INSTR_LOAD_ATTR, name);
}
}
}

-        public virtual void setOption(CommonTree id)
+        public virtual void SetOption(CommonTree id)
{
Interpreter.Option O = TemplateCompiler.supportedOptions[id.Text];
-            emit1(id, Bytecode.INSTR_STORE_OPTION, (int)O);
+            Emit1(id, Bytecode.INSTR_STORE_OPTION, (int)O);
}

-        public virtual void func(IToken templateToken, CommonTree id)
+        public virtual void Function(IToken templateToken, CommonTree id)
{
Bytecode funcBytecode;
if (!TemplateCompiler.funcs.TryGetValue(id.Text, out funcBytecode))
{
-                errMgr.compileTimeError(ErrorType.NO_SUCH_FUNCTION, templateToken, id.token);
-                emit(id, Bytecode.INSTR_POP);
+                errMgr.CompiletimeError(ErrorType.NO_SUCH_FUNCTION, templateToken, id.token);
+                Emit(id, Bytecode.INSTR_POP);
}
else
{
-                emit(id, funcBytecode);
+                Emit(id, funcBytecode);
}
}

-        public virtual void emit(Bytecode opcode)
+        public virtual void Emit(Bytecode opcode)
{
-            emit(null, opcode);
+            Emit(null, opcode);
}

-        public virtual void emit(CommonTree opAST, Bytecode opcode)
+        public virtual void Emit(CommonTree opAST, Bytecode opcode)
{
-            ensureCapacity(1);
+            EnsureCapacity(1);
if (opAST != null)
{
int i = opAST.TokenStartIndex;
@@ -132,46 +132,46 @@ namespace Antlr4.StringTemplate.Compiler
impl.instrs[ip++] = (byte)opcode;
}

-        public virtual void emit1(CommonTree opAST, Bytecode opcode, int arg)
+        public virtual void Emit1(CommonTree opAST, Bytecode opcode, int arg)
{
-            emit(opAST, opcode);
-            ensureCapacity(Instruction.OperandSizeInBytes);
-            writeShort(impl.instrs, ip, (short)arg);
+            Emit(opAST, opcode);
+            EnsureCapacity(Instruction.OperandSizeInBytes);
+            WriteShort(impl.instrs, ip, (short)arg);
ip += Instruction.OperandSizeInBytes;
}

-        public virtual void emit2(CommonTree opAST, Bytecode opcode, int arg, int arg2)
+        public virtual void Emit2(CommonTree opAST, Bytecode opcode, int arg, int arg2)
{
-            emit(opAST, opcode);
-            ensureCapacity(Instruction.OperandSizeInBytes * 2);
-            writeShort(impl.instrs, ip, (short)arg);
+            Emit(opAST, opcode);
+            EnsureCapacity(Instruction.OperandSizeInBytes * 2);
+            WriteShort(impl.instrs, ip, (short)arg);
ip += Instruction.OperandSizeInBytes;
-            writeShort(impl.instrs, ip, (short)arg2);
+            WriteShort(impl.instrs, ip, (short)arg2);
ip += Instruction.OperandSizeInBytes;
}

-        public virtual void emit2(CommonTree opAST, Bytecode opcode, string s, int arg2)
+        public virtual void Emit2(CommonTree opAST, Bytecode opcode, string s, int arg2)
{
-            int i = defineString(s);
-            emit2(opAST, opcode, i, arg2);
+            int i = DefineString(s);
+            Emit2(opAST, opcode, i, arg2);
}

-        public virtual void emit1(CommonTree opAST, Bytecode opcode, string s)
+        public virtual void Emit1(CommonTree opAST, Bytecode opcode, string s)
{
-            int i = defineString(s);
-            emit1(opAST, opcode, i);
+            int i = DefineString(s);
+            Emit1(opAST, opcode, i);
}

-        public virtual void insert(int addr, Bytecode opcode, string s)
+        public virtual void Insert(int addr, Bytecode opcode, string s)
{
//System.out.println("before insert of "+opcode+"("+s+"):"+ Arrays.toString(impl.instrs));
-            ensureCapacity(1 + Instruction.OperandSizeInBytes);
+            EnsureCapacity(1 + Instruction.OperandSizeInBytes);
int instrSize = 1 + Instruction.OperandSizeInBytes;
// make room for opcode, opnd
Array.Copy(impl.instrs, addr, impl.instrs, addr + instrSize, ip - addr);
int save = ip;
ip = addr;
-            emit1(null, opcode, s);
+            Emit1(null, opcode, s);
ip = save + instrSize;
//System.out.println("after  insert of "+opcode+"("+s+"):"+ Arrays.toString(impl.instrs));
// adjust addresses for BR and BRF
@@ -182,20 +182,20 @@ namespace Antlr4.StringTemplate.Compiler
Instruction I = Instruction.instructions[(int)op];
if (op == Bytecode.INSTR_BR || op == Bytecode.INSTR_BRF)
{
-                    int opnd = BytecodeDisassembler.getShort(impl.instrs, a + 1);
-                    writeShort(impl.instrs, a + 1, (short)(opnd + instrSize));
+                    int opnd = BytecodeDisassembler.GetShort(impl.instrs, a + 1);
+                    WriteShort(impl.instrs, a + 1, (short)(opnd + instrSize));
}
a += I.nopnds * Instruction.OperandSizeInBytes + 1;
}
//System.out.println("after  insert of "+opcode+"("+s+"):"+ Arrays.toString(impl.instrs));
}

-        public virtual void write(int addr, short value)
+        public virtual void Write(int addr, short value)
{
-            writeShort(impl.instrs, addr, value);
+            WriteShort(impl.instrs, addr, value);
}

-        protected virtual void ensureCapacity(int n)
+        protected virtual void EnsureCapacity(int n)
{
if ((ip + n) >= impl.instrs.Length)
{
@@ -205,15 +205,15 @@ namespace Antlr4.StringTemplate.Compiler
}
}

-        public virtual void indent(string indent)
+        public virtual void Indent(string indent)
{
-            emit1(null, Bytecode.INSTR_INDENT, indent);
+            Emit1(null, Bytecode.INSTR_INDENT, indent);
}

/** Write value at index into a byte array highest to lowest byte,
*  left to right.
*/
-        public static void writeShort(byte[] memory, int index, short value)
+        public static void WriteShort(byte[] memory, int index, short value)
{
memory[index + 0] = (byte)(value & 0xFF);
memory[index + 1] = (byte)((value >> (8 * 1)) & 0xFF);
diff --git a/Antlr4.StringTemplate/Compiler/CompiledTemplate.cs b/Antlr4.StringTemplate/Compiler/CompiledTemplate.cs
index 32bee3d..daf8117 100644
--- a/Antlr4.StringTemplate/Compiler/CompiledTemplate.cs
+++ b/Antlr4.StringTemplate/Compiler/CompiledTemplate.cs
@@ -162,7 +162,7 @@ namespace Antlr4.StringTemplate.Compiler
return formalArguments.FirstOrDefault(i => i.Name == name);
}

-        public virtual void addImplicitlyDefinedTemplate(CompiledTemplate sub)
+        public virtual void AddImplicitlyDefinedTemplate(CompiledTemplate sub)
{
if (implicitlyDefinedTemplates == null)
implicitlyDefinedTemplates = new List<CompiledTemplate>();
@@ -170,7 +170,7 @@ namespace Antlr4.StringTemplate.Compiler
implicitlyDefinedTemplates.Add(sub);
}

-        public virtual void defineArgDefaultValueTemplates(TemplateGroup group)
+        public virtual void DefineArgumentDefaultValueTemplates(TemplateGroup group)
{
if (formalArguments == null)
return;
@@ -181,14 +181,14 @@ namespace Antlr4.StringTemplate.Compiler
{
string argSTname = fa.Name + "_default_value";
TemplateCompiler c2 = new TemplateCompiler(group.errMgr, group.delimiterStartChar, group.delimiterStopChar);
-                    string defArgTemplate = Utility.strip(fa.DefaultValueToken.Text, 1);
-                    fa.CompiledDefaultValue = c2.compile(nativeGroup.getFileName(), argSTname, null, defArgTemplate, fa.DefaultValueToken);
+                    string defArgTemplate = Utility.Strip(fa.DefaultValueToken.Text, 1);
+                    fa.CompiledDefaultValue = c2.Compile(nativeGroup.FileName, argSTname, null, defArgTemplate, fa.DefaultValueToken);
fa.CompiledDefaultValue.name = argSTname;
}
}
}

-        public virtual void defineFormalArgs(IEnumerable<FormalArgument> args)
+        public virtual void DefineFormalArguments(IEnumerable<FormalArgument> args)
{
hasFormalArgs = true; // even if no args; it's formally defined
if (args == null)
@@ -198,12 +198,12 @@ namespace Antlr4.StringTemplate.Compiler
else
{
foreach (FormalArgument a in args)
-                    addArg(a);
+                    AddArgument(a);
}
}

/** Used by Template.Add() to Add args one by one w/o turning on full formal args definition signal */
-        public virtual void addArg(FormalArgument a)
+        public virtual void AddArgument(FormalArgument a)
{
if (formalArguments == null)
formalArguments = new List<FormalArgument>();
@@ -212,39 +212,39 @@ namespace Antlr4.StringTemplate.Compiler
formalArguments.Add(a);
}

-        public virtual void defineImplicitlyDefinedTemplates(TemplateGroup group)
+        public virtual void DefineImplicitlyDefinedTemplates(TemplateGroup group)
{
if (implicitlyDefinedTemplates != null)
{
foreach (CompiledTemplate sub in implicitlyDefinedTemplates)
{
-                    group.rawDefineTemplate(sub.name, sub, null);
-                    sub.defineImplicitlyDefinedTemplates(group);
+                    group.RawDefineTemplate(sub.name, sub, null);
+                    sub.DefineImplicitlyDefinedTemplates(group);
}
}
}

-        public virtual string Instrs()
+        public virtual string GetInstructions()
{
BytecodeDisassembler dis = new BytecodeDisassembler(this);
-            return dis.instrs();
+            return dis.GetInstructions();
}

-        public virtual void dump()
+        public virtual void Dump()
{
-            Console.Write(disasm());
+            Console.Write(Disassemble());
}

-        public virtual string disasm()
+        public virtual string Disassemble()
{
BytecodeDisassembler dis = new BytecodeDisassembler(this);
using (StringWriter sw = new StringWriter())
{
-                sw.WriteLine(dis.disassemble());
+                sw.WriteLine(dis.Disassemble());
sw.WriteLine("Strings:");
-                sw.WriteLine(dis.strings());
+                sw.WriteLine(dis.GetStrings());
sw.WriteLine("Bytecode to template map:");
-                sw.WriteLine(dis.sourceMap());
+                sw.WriteLine(dis.GetSourceMap());
return sw.ToString();
}
}
diff --git a/Antlr4.StringTemplate/Compiler/Group.g3 b/Antlr4.StringTemplate/Compiler/Group.g3
index 68104da..79ad58c 100644
--- a/Antlr4.StringTemplate/Compiler/Group.g3
+++ b/Antlr4.StringTemplate/Compiler/Group.g3
@@ -56,7 +56,7 @@ group[TemplateGroup group, string prefix]
GroupLexer lexer = (GroupLexer)input.TokenSource;
this._group = lexer.group = $group;
}
-	:	(	'import' STRING {_group.importTemplates($STRING);}
+	:	(	'import' STRING {_group.ImportTemplates($STRING);}
|	'import' // common error: name not in string
{
MismatchedTokenException e = new MismatchedTokenException(STRING, input);
@@ -100,17 +100,17 @@ templateDef[string prefix]
template = "";
string msg = "missing template at '"+input.LT(1).Text+"'";
NoViableAltException e = new NoViableAltException("", 0, 0, input);
-    	    _group.errMgr.groupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
+    	    _group.errMgr.GroupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
}
)
{
-        template = Utility.strip(template, n);
+        template = Utility.Strip(template, n);
string templateName = $name.text;
if (prefix.Length > 0) templateName = prefix+"/"+$name.text;
-	    _group.defineTemplateOrRegion(templateName, $enclosing.text, templateToken,
+	    _group.DefineTemplateOrRegion(templateName, $enclosing.text, templateToken,
template, $name, $formalArgs.args);
}
-	|   alias=ID '::=' target=ID  {_group.defineTemplateAlias($alias, $target);}
+	|   alias=ID '::=' target=ID  {_group.DefineTemplateAlias($alias, $target);}
;

formalArgs returns[List<FormalArgument> args]
@@ -147,14 +147,14 @@ suffix returns [int cardinality=FormalArgument.REQUIRED]
dictDef
:	ID '::=' dict
{
-        if ( _group.rawGetDictionary($ID.text)!=null ) {
-			_group.errMgr.compileTimeError(ErrorType.MAP_REDEFINITION, null, $ID);
+        if ( _group.RawGetDictionary($ID.text)!=null ) {
+			_group.errMgr.CompiletimeError(ErrorType.MAP_REDEFINITION, null, $ID);
}
-        else if ( _group.rawGetTemplate($ID.text)!=null ) {
-			_group.errMgr.compileTimeError(ErrorType.TEMPLATE_REDEFINITION_AS_MAP, null, $ID);
+        else if ( _group.RawGetTemplate($ID.text)!=null ) {
+			_group.errMgr.CompiletimeError(ErrorType.TEMPLATE_REDEFINITION_AS_MAP, null, $ID);
}
else {
-            _group.defineDictionary($ID.text, $dict.mapping);
+            _group.DefineDictionary($ID.text, $dict.mapping);
}
}
;
@@ -178,13 +178,13 @@ defaultValuePair[IDictionary<string,object> mapping]
;

keyValuePair[IDictionary<string,object> mapping]
-	:	STRING ':' keyValue {mapping[Utility.replaceEscapes(Utility.strip($STRING.text, 1))] = $keyValue.value;}
+	:	STRING ':' keyValue {mapping[Utility.ReplaceEscapes(Utility.Strip($STRING.text, 1))] = $keyValue.value;}
;

keyValue returns [object value]
-	:	BIGSTRING			{$value = _group.createSingleton($BIGSTRING);}
-	|	ANONYMOUS_TEMPLATE	{$value = _group.createSingleton($ANONYMOUS_TEMPLATE);}
-	|	STRING				{$value = Utility.replaceEscapes(Utility.strip($STRING.text, 1));}
+	:	BIGSTRING			{$value = _group.CreateSingleton($BIGSTRING);}
+	|	ANONYMOUS_TEMPLATE	{$value = _group.CreateSingleton($ANONYMOUS_TEMPLATE);}
+	|	STRING				{$value = Utility.ReplaceEscapes(Utility.Strip($STRING.text, 1));}
|	{input.LT(1).Text.Equals("key")}?=> ID
{$value = TemplateGroup.DictionaryKey;}
;
@@ -202,7 +202,7 @@ STRING
|	{
string msg = "\\n in string";
NoViableAltException e = new NoViableAltException("", 0, 0, input);
-			group.errMgr.groupLexerError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
+			group.errMgr.GroupLexerError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
}
'\n'
|	~('\\'|'"'|'\n')
diff --git a/Antlr4.StringTemplate/Compiler/Group.g3.lexer.cs b/Antlr4.StringTemplate/Compiler/Group.g3.lexer.cs
index de0151d..5727861 100644
--- a/Antlr4.StringTemplate/Compiler/Group.g3.lexer.cs
+++ b/Antlr4.StringTemplate/Compiler/Group.g3.lexer.cs
@@ -56,7 +56,7 @@ namespace Antlr4.StringTemplate.Compiler
msg = GetErrorMessage(e, TokenNames);
}

-            group.errMgr.groupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
+            group.errMgr.GroupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
}

public override string SourceName
diff --git a/Antlr4.StringTemplate/Compiler/Group.g3.parser.cs b/Antlr4.StringTemplate/Compiler/Group.g3.parser.cs
index 798502c..9e68735 100644
--- a/Antlr4.StringTemplate/Compiler/Group.g3.parser.cs
+++ b/Antlr4.StringTemplate/Compiler/Group.g3.parser.cs
@@ -56,7 +56,7 @@ namespace Antlr4.StringTemplate.Compiler
public override void DisplayRecognitionError(string[] tokenNames, RecognitionException e)
{
string msg = GetErrorMessage(e, tokenNames);
-            _group.errMgr.groupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
+            _group.errMgr.GroupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
}

public override string SourceName
@@ -72,7 +72,7 @@ namespace Antlr4.StringTemplate.Compiler
public virtual void error(string msg)
{
NoViableAltException e = new NoViableAltException("", 0, 0, input);
-            _group.errMgr.groupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
+            _group.errMgr.GroupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
Recover(input, null);
}
}
diff --git a/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs b/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs
index 8697c2d..c30ad3c 100644
--- a/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs
+++ b/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs
@@ -114,23 +114,23 @@ namespace Antlr4.StringTemplate.Compiler
this.delimiterStopChar = delimiterStopChar;
}

-        public virtual CompiledTemplate compile(string template)
+        public virtual CompiledTemplate Compile(string template)
{
-            CompiledTemplate code = compile(null, null, null, template, null);
+            CompiledTemplate code = Compile(null, null, null, template, null);
code.hasFormalArgs = false;
return code;
}

/** Compile full template with unknown formal args. */
-        public virtual CompiledTemplate compile(string name, string template)
+        public virtual CompiledTemplate Compile(string name, string template)
{
-            CompiledTemplate code = compile(null, name, null, template, null);
+            CompiledTemplate code = Compile(null, name, null, template, null);
code.hasFormalArgs = false;
return code;
}

/** Compile full template with respect to a list of formal args. */
-        public virtual CompiledTemplate compile(string srcName, string name, List<FormalArgument> args, string template, IToken templateToken)
+        public virtual CompiledTemplate Compile(string srcName, string name, List<FormalArgument> args, string template, IToken templateToken)
{
ANTLRStringStream @is = new ANTLRStringStream(template);
@is.name = srcName != null ? srcName : name;
@@ -144,14 +144,14 @@ namespace Antlr4.StringTemplate.Compiler
}
catch (RecognitionException re)
{
-                reportMessageAndThrowSTException(tokens, templateToken, p, re);
+                ReportMessageAndThrowTemplateException(tokens, templateToken, p, re);
return null;
}

if (p.NumberOfSyntaxErrors > 0 || r.Tree == null)
{
CompiledTemplate impl = new CompiledTemplate();
-                impl.defineFormalArgs(args);
+                impl.DefineFormalArguments(args);
return impl;
}

@@ -174,58 +174,58 @@ namespace Antlr4.StringTemplate.Compiler
}
catch (RecognitionException re)
{
-                errMgr.internalError(null, "bad tree structure", re);
+                errMgr.InternalError(null, "bad tree structure", re);
}

return impl2;
}

-        public static CompiledTemplate defineBlankRegion(CompiledTemplate outermostImpl, string name)
+        public static CompiledTemplate DefineBlankRegion(CompiledTemplate outermostImpl, string name)
{
string outermostTemplateName = outermostImpl.name;
-            string mangled = TemplateGroup.getMangledRegionName(outermostTemplateName, name);
+            string mangled = TemplateGroup.GetMangledRegionName(outermostTemplateName, name);
CompiledTemplate blank = new CompiledTemplate();
blank.isRegion = true;
blank.regionDefType = Template.RegionType.Implicit;
blank.name = mangled;
-            outermostImpl.addImplicitlyDefinedTemplate(blank);
+            outermostImpl.AddImplicitlyDefinedTemplate(blank);
return blank;
}

-        public static string getNewSubtemplateName()
+        public static string GetNewSubtemplateName()
{
subtemplateCount++;
return SubtemplatePrefix + subtemplateCount;
}

-        protected virtual void reportMessageAndThrowSTException(ITokenStream tokens, IToken templateToken, Parser parser, RecognitionException re)
+        protected virtual void ReportMessageAndThrowTemplateException(ITokenStream tokens, IToken templateToken, Parser parser, RecognitionException re)
{
if (re.Token.Type == TemplateLexer.EOF_TYPE)
{
string msg = "premature EOF";
-                errMgr.compileTimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
+                errMgr.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
}
else if (re is NoViableAltException)
{
string msg = "'" + re.Token.Text + "' came as a complete surprise to me";
-                errMgr.compileTimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
+                errMgr.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
}
else if (tokens.Index == 0)
{
// couldn't parse anything
string msg = "this doesn't look like a template: \"" + tokens + "\"";
-                errMgr.compileTimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
+                errMgr.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
}
else if (tokens.LA(1) == TemplateLexer.LDELIM)
{
// couldn't parse expr
string msg = "doesn't look like an expression";
-                errMgr.compileTimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
+                errMgr.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
}
else
{
string msg = parser.GetErrorMessage(re, parser.TokenNames);
-                errMgr.compileTimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
+                errMgr.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
}

throw new TemplateException();
diff --git a/Antlr4.StringTemplate/Compiler/TemplateLexer.cs b/Antlr4.StringTemplate/Compiler/TemplateLexer.cs
index 0948887..595ca47 100644
--- a/Antlr4.StringTemplate/Compiler/TemplateLexer.cs
+++ b/Antlr4.StringTemplate/Compiler/TemplateLexer.cs
@@ -80,7 +80,7 @@ namespace Antlr4.StringTemplate.Compiler

string txt = Text;
if (txt != null)
-                    txt = Utility.replaceEscapes(txt);
+                    txt = Utility.ReplaceEscapes(txt);
else
txt = "<no text>";

@@ -210,7 +210,7 @@ namespace Antlr4.StringTemplate.Compiler

public virtual IToken _nextToken()
{
-            //System.out.println("nextToken: c="+(char)c+"@"+input.index());
+            //System.out.println("nextToken: c="+(char)c+"@"+input.Index());
while (true)
{ // lets us avoid recursion when skipping stuff
startCharIndex = input.Index;
diff --git a/Antlr4.StringTemplate/Compiler/TemplateParser.g3 b/Antlr4.StringTemplate/Compiler/TemplateParser.g3
index fbd5e19..992d425 100644
--- a/Antlr4.StringTemplate/Compiler/TemplateParser.g3
+++ b/Antlr4.StringTemplate/Compiler/TemplateParser.g3
@@ -126,14 +126,14 @@ option
:	ID
{
if ( !validOption ) {
-            errMgr.compileTimeError(ErrorType.NO_SUCH_OPTION, templateToken, $ID, $ID.text);
+            errMgr.CompiletimeError(ErrorType.NO_SUCH_OPTION, templateToken, $ID, $ID.text);
}
}
(	'=' exprNoComma 					-> {validOption}? ^('=' ID exprNoComma)
->
|	{
if ( defVal==null ) {
-				errMgr.compileTimeError(ErrorType.NO_DEFAULT_VALUE, templateToken, $ID);
+				errMgr.CompiletimeError(ErrorType.NO_DEFAULT_VALUE, templateToken, $ID);
}
}
-> {validOption&&defVal!=null}?
diff --git a/Antlr4.StringTemplate/Compiler/TestNewStuff.cs b/Antlr4.StringTemplate/Compiler/TestNewStuff.cs
index 7f1c2d3..23b4915 100644
--- a/Antlr4.StringTemplate/Compiler/TestNewStuff.cs
+++ b/Antlr4.StringTemplate/Compiler/TestNewStuff.cs
@@ -46,7 +46,7 @@ namespace Antlr4.StringTemplate.Compiler
List<FormalArgument> a = new List<FormalArgument>();
a.Add(new FormalArgument("x"));
string n = Path.GetFileNameWithoutExtension(args[0]);
-            c.compile(args[0], n, a, template, null);
+            c.Compile(args[0], n, a, template, null);
}
}
}
diff --git a/Antlr4.StringTemplate/Debug/AddAttributeEvent.cs b/Antlr4.StringTemplate/Debug/AddAttributeEvent.cs
index 5bda754..db96a92 100644
--- a/Antlr4.StringTemplate/Debug/AddAttributeEvent.cs
+++ b/Antlr4.StringTemplate/Debug/AddAttributeEvent.cs
@@ -64,7 +64,7 @@ namespace Antlr4.StringTemplate.Debug
return "addEvent{" +
", name='" + name + '\'' +
", value=" + value +
-                ", location=" + getFileName() + ":" + getLine() +
+                ", location=" + GetFileName() + ":" + GetLine() +
'}';
}
}
diff --git a/Antlr4.StringTemplate/Debug/ConstructionEvent.cs b/Antlr4.StringTemplate/Debug/ConstructionEvent.cs
index 00bae39..9223803 100644
--- a/Antlr4.StringTemplate/Debug/ConstructionEvent.cs
+++ b/Antlr4.StringTemplate/Debug/ConstructionEvent.cs
@@ -44,17 +44,17 @@ namespace Antlr4.StringTemplate.Debug
stack = new StackTrace(true);
}

-        public virtual string getFileName()
+        public virtual string GetFileName()
{
-            return getSTEntryPoint().GetFileName();
+            return GetTemplateEntryPoint().GetFileName();
}

-        public virtual int getLine()
+        public virtual int GetLine()
{
-            return getSTEntryPoint().GetFileLineNumber();
+            return GetTemplateEntryPoint().GetFileLineNumber();
}

-        public virtual StackFrame getSTEntryPoint()
+        public virtual StackFrame GetTemplateEntryPoint()
{
StackFrame[] trace = stack.GetFrames();
foreach (StackFrame e in trace)
diff --git a/Antlr4.StringTemplate/Debug/DebugTemplate.cs b/Antlr4.StringTemplate/Debug/DebugTemplate.cs
index d758b77..051b6a7 100644
--- a/Antlr4.StringTemplate/Debug/DebugTemplate.cs
+++ b/Antlr4.StringTemplate/Debug/DebugTemplate.cs
@@ -67,36 +67,36 @@ namespace Antlr4.StringTemplate.Debug
public override void Add(string name, object value)
{
if (TemplateGroup.debug)
-                addAttrEvents.map(name, new AddAttributeEvent(name, value));
+                addAttrEvents.Add(name, new AddAttributeEvent(name, value));

base.Add(name, value);
}

// TESTING SUPPORT

-        public virtual List<InterpEvent> getEvents()
+        public virtual List<InterpEvent> GetEvents()
{
-            return getEvents(CultureInfo.CurrentCulture);
+            return GetEvents(CultureInfo.CurrentCulture);
}

-        public virtual List<InterpEvent> getEvents(int lineWidth)
+        public virtual List<InterpEvent> GetEvents(int lineWidth)
{
-            return getEvents(CultureInfo.CurrentCulture, lineWidth);
+            return GetEvents(CultureInfo.CurrentCulture, lineWidth);
}

-        public virtual List<InterpEvent> getEvents(CultureInfo locale)
+        public virtual List<InterpEvent> GetEvents(CultureInfo locale)
{
-            return getEvents(locale, AutoIndentWriter.NoWrap);
+            return GetEvents(locale, AutoIndentWriter.NoWrap);
}

-        public virtual List<InterpEvent> getEvents(CultureInfo locale, int lineWidth)
+        public virtual List<InterpEvent> GetEvents(CultureInfo locale, int lineWidth)
{
StringWriter @out = new StringWriter();
ITemplateWriter wr = new AutoIndentWriter(@out);
-            wr.setLineWidth(lineWidth);
+            wr.SetLineWidth(lineWidth);
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, locale);
interp.Execute(wr, this); // Render and track events
-            return interp.getEvents();
+            return interp.GetEvents();
}
}
}
diff --git a/Antlr4.StringTemplate/ITemplateErrorListener.cs b/Antlr4.StringTemplate/ITemplateErrorListener.cs
index 4994e41..5086ab9 100644
--- a/Antlr4.StringTemplate/ITemplateErrorListener.cs
+++ b/Antlr4.StringTemplate/ITemplateErrorListener.cs
@@ -37,9 +37,9 @@ namespace Antlr4.StringTemplate
/** How to handle messages */
public interface ITemplateErrorListener
{
-        void compileTimeError(TemplateMessage msg);
-        void runTimeError(TemplateMessage msg);
+        void CompiletimeError(TemplateMessage msg);
+        void RuntimeError(TemplateMessage msg);
void IOError(TemplateMessage msg);
-        void internalError(TemplateMessage msg);
+        void InternalError(TemplateMessage msg);
}
}
diff --git a/Antlr4.StringTemplate/ITemplateWriter.cs b/Antlr4.StringTemplate/ITemplateWriter.cs
index 1c2ab81..e4bd836 100644
--- a/Antlr4.StringTemplate/ITemplateWriter.cs
+++ b/Antlr4.StringTemplate/ITemplateWriter.cs
@@ -35,55 +35,55 @@ namespace Antlr4.StringTemplate
/** Generic StringTemplate output writer filter.
*
*  Literals and the elements of expressions are emitted via Write().
-     *  Separators are emitted via writeSeparator() because they must be
+     *  Separators are emitted via WriteSeparator() because they must be
*  handled specially when wrapping lines (we don't want to wrap
*  in between an element and it's separator).
*/
public interface ITemplateWriter
{
-        void pushIndentation(string indent);
+        void PushIndentation(string indent);

-        string popIndentation();
+        string PopIndentation();

-        void pushAnchorPoint();
+        void PushAnchorPoint();

-        void popAnchorPoint();
+        void PopAnchorPoint();

-        void setLineWidth(int lineWidth);
+        void SetLineWidth(int lineWidth);

/** Write the string and return how many actual chars were written.
*  With autoindentation and wrapping, more chars than length(str)
*  can be emitted.  No wrapping is done.
*/
-        int write(string str);
+        int Write(string str);

/** Same as Write, but wrap lines using the indicated string as the
*  wrap character (such as "\n").
*/
-        int write(string str, string wrap);
+        int Write(string str, string wrap);

/** Because we evaluate Template instance by invoking exec() again, we
*  can't pass options in.  So the WRITE instruction of an applied
*  template (such as when we wrap in between template applications
*  like &lt;data:{v|[&lt;v&gt;]}; wrap&gt;) we need to Write the wrap string
*  before calling exec().  We expose just like for the separator.
-         *  See Interpreter.writeObject where it checks for Template instance.
-         *  If POJO, writePOJO passes wrap to ITemplateWriter's
+         *  See Interpreter.WriteObject where it checks for Template instance.
+         *  If POJO, WritePlainObject passes wrap to ITemplateWriter's
*
*     Write(String str, String wrap)
*
*  method.  Can't pass to exec().
*/
-        int writeWrap(string wrap);
+        int WriteWrap(string wrap);

/** Write a separator.  Same as Write() except that a \n cannot
*  be inserted before emitting a separator.
*/
-        int writeSeparator(string str);
+        int WriteSeparator(string str);

/** Return the absolute char index into the output of the char
*  we're about to Write.  Returns 0 if no char written yet.
*/
-        int index();
+        int Index();
}
}
diff --git a/Antlr4.StringTemplate/Interpreter.cs b/Antlr4.StringTemplate/Interpreter.cs
index eca9651..508df04 100644
--- a/Antlr4.StringTemplate/Interpreter.cs
+++ b/Antlr4.StringTemplate/Interpreter.cs
@@ -67,7 +67,7 @@ namespace Antlr4.StringTemplate
*  expressions that generate them.
*
*  We create a new interpreter for each Template.Render(), DebugST.inspect, or
-     *  DebugST.getEvents() invocation.
+     *  DebugST.GetEvents() invocation.
*/
public class Interpreter
{
@@ -156,7 +156,7 @@ namespace Antlr4.StringTemplate

protected virtual int ExecuteImpl(ITemplateWriter @out, Template self)
{
-            int start = @out.index(); // track char we're about to Write
+            int start = @out.Index(); // track char we're about to Write
Bytecode prevOpcode = Bytecode.Invalid;
int n = 0; // how many char we Write out
int nargs;
@@ -179,13 +179,13 @@ namespace Antlr4.StringTemplate
switch (opcode)
{
case Bytecode.INSTR_LOAD_STR:
-                    int strIndex = getShort(code, ip);
+                    int strIndex = GetShort(code, ip);
ip += Instruction.OperandSizeInBytes;
operands[++sp] = self.impl.strings[strIndex];
break;

case Bytecode.INSTR_LOAD_ATTR:
-                    nameIndex = getShort(code, ip);
+                    nameIndex = GetShort(code, ip);
ip += Instruction.OperandSizeInBytes;
name = self.impl.strings[nameIndex];
try
@@ -194,14 +194,14 @@ namespace Antlr4.StringTemplate
}
catch (TemplateNoSuchPropertyException)
{
-                        errMgr.runTimeError(self, current_ip, ErrorType.NO_SUCH_ATTRIBUTE, name);
+                        errMgr.RuntimeError(self, current_ip, ErrorType.NO_SUCH_ATTRIBUTE, name);
o = null;
}
operands[++sp] = o;
break;

case Bytecode.INSTR_LOAD_LOCAL:
-                    int valueIndex = getShort(code, ip);
+                    int valueIndex = GetShort(code, ip);
ip += Instruction.OperandSizeInBytes;
o = self.locals[valueIndex];
if (o == Template.EmptyAttribute)
@@ -210,77 +210,77 @@ namespace Antlr4.StringTemplate
break;

case Bytecode.INSTR_LOAD_PROP:
-                    nameIndex = getShort(code, ip);
+                    nameIndex = GetShort(code, ip);
ip += Instruction.OperandSizeInBytes;
o = operands[sp--];
name = self.impl.strings[nameIndex];
-                    operands[++sp] = getObjectProperty(self, o, name);
+                    operands[++sp] = GetObjectProperty(self, o, name);
break;

case Bytecode.INSTR_LOAD_PROP_IND:
object propName = operands[sp--];
o = operands[sp];
-                    operands[sp] = getObjectProperty(self, o, propName);
+                    operands[sp] = GetObjectProperty(self, o, propName);
break;

case Bytecode.INSTR_NEW:
-                    nameIndex = getShort(code, ip);
+                    nameIndex = GetShort(code, ip);
ip += Instruction.OperandSizeInBytes;
name = self.impl.strings[nameIndex];
-                    nargs = getShort(code, ip);
+                    nargs = GetShort(code, ip);
ip += Instruction.OperandSizeInBytes;
// look up in original hierarchy not enclosing template (variable group)
// see TestSubtemplates.testEvalSTFromAnotherGroup()
-                    st = self.groupThatCreatedThisInstance.getEmbeddedInstanceOf(self, ip, name);
+                    st = self.groupThatCreatedThisInstance.GetEmbeddedInstanceOf(self, ip, name);
// get n args and store into st's attr list
-                    storeArgs(self, nargs, st);
+                    StoreArguments(self, nargs, st);
sp -= nargs;
operands[++sp] = st;
break;

case Bytecode.INSTR_NEW_IND:
-                    nargs = getShort(code, ip);
+                    nargs = GetShort(code, ip);
ip += Instruction.OperandSizeInBytes;
name = (string)operands[sp - nargs];
-                    st = self.groupThatCreatedThisInstance.getEmbeddedInstanceOf(self, ip, name);
-                    storeArgs(self, nargs, st);
+                    st = self.groupThatCreatedThisInstance.GetEmbeddedInstanceOf(self, ip, name);
+                    StoreArguments(self, nargs, st);
sp -= nargs;
sp--; // pop template name
operands[++sp] = st;
break;

case Bytecode.INSTR_NEW_BOX_ARGS:
-                    nameIndex = getShort(code, ip);
+                    nameIndex = GetShort(code, ip);
ip += Instruction.OperandSizeInBytes;
name = self.impl.strings[nameIndex];
IDictionary<string, object> attrs = (IDictionary<string, object>)operands[sp--];
// look up in original hierarchy not enclosing template (variable group)
// see TestSubtemplates.testEvalSTFromAnotherGroup()
-                    st = self.groupThatCreatedThisInstance.getEmbeddedInstanceOf(self, ip, name);
+                    st = self.groupThatCreatedThisInstance.GetEmbeddedInstanceOf(self, ip, name);
// get n args and store into st's attr list
-                    storeArgs(self, attrs, st);
+                    StoreArguments(self, attrs, st);
operands[++sp] = st;
break;

case Bytecode.INSTR_SUPER_NEW:
-                    nameIndex = getShort(code, ip);
+                    nameIndex = GetShort(code, ip);
ip += Instruction.OperandSizeInBytes;
name = self.impl.strings[nameIndex];
-                    nargs = getShort(code, ip);
+                    nargs = GetShort(code, ip);
ip += Instruction.OperandSizeInBytes;
-                    super_new(self, name, nargs);
+                    SuperNew(self, name, nargs);
break;

case Bytecode.INSTR_SUPER_NEW_BOX_ARGS:
-                    nameIndex = getShort(code, ip);
+                    nameIndex = GetShort(code, ip);
ip += Instruction.OperandSizeInBytes;
name = self.impl.strings[nameIndex];
attrs = (IDictionary<string, object>)operands[sp--];
-                    super_new(self, name, attrs);
+                    SuperNew(self, name, attrs);
break;

case Bytecode.INSTR_STORE_OPTION:
-                    int optionIndex = getShort(code, ip);
+                    int optionIndex = GetShort(code, ip);
ip += Instruction.OperandSizeInBytes;
o = operands[sp--];    // value to store
options = (object[])operands[sp]; // get options
@@ -288,7 +288,7 @@ namespace Antlr4.StringTemplate
break;

case Bytecode.INSTR_STORE_ARG:
-                    nameIndex = getShort(code, ip);
+                    nameIndex = GetShort(code, ip);
name = self.impl.strings[nameIndex];
ip += Instruction.OperandSizeInBytes;
o = operands[sp--];
@@ -298,7 +298,7 @@ namespace Antlr4.StringTemplate

case Bytecode.INSTR_WRITE:
o = operands[sp--];
-                    int n1 = writeObjectNoOptions(@out, self, o);
+                    int n1 = WriteObjectNoOptions(@out, self, o);
n += n1;
nwline += n1;
break;
@@ -306,7 +306,7 @@ namespace Antlr4.StringTemplate
case Bytecode.INSTR_WRITE_OPT:
options = (object[])operands[sp--]; // get options
o = operands[sp--];                 // get option to Write
-                    int n2 = writeObjectWithOptions(@out, self, o, options);
+                    int n2 = WriteObjectWithOptions(@out, self, o, options);
n += n2;
nwline += n2;
break;
@@ -314,11 +314,11 @@ namespace Antlr4.StringTemplate
case Bytecode.INSTR_MAP:
st = (Template)operands[sp--]; // get prototype off stack
o = operands[sp--];		 // get object to map prototype across
-                    map(self, o, st);
+                    Map(self, o, st);
break;

case Bytecode.INSTR_ROT_MAP:
-                    int nmaps = getShort(code, ip);
+                    int nmaps = GetShort(code, ip);
ip += Instruction.OperandSizeInBytes;
List<Template> templates = new List<Template>();
for (int i = nmaps - 1; i >= 0; i--)
@@ -326,30 +326,30 @@ namespace Antlr4.StringTemplate
sp -= nmaps;
o = operands[sp--];
if (o != null)
-                        rot_map(self, o, templates);
+                        RotateMap(self, o, templates);
break;

case Bytecode.INSTR_ZIP_MAP:
st = (Template)operands[sp--];
-                    nmaps = getShort(code, ip);
+                    nmaps = GetShort(code, ip);
ip += Instruction.OperandSizeInBytes;
List<object> exprs = new List<object>();
for (int i = nmaps - 1; i >= 0; i--)
exprs.Add(operands[sp - i]);

sp -= nmaps;
-                    operands[++sp] = zip_map(self, exprs, st);
+                    operands[++sp] = ZipMap(self, exprs, st);
break;

case Bytecode.INSTR_BR:
-                    ip = getShort(code, ip);
+                    ip = GetShort(code, ip);
break;

case Bytecode.INSTR_BRF:
-                    addr = getShort(code, ip);
+                    addr = GetShort(code, ip);
ip += Instruction.OperandSizeInBytes;
o = operands[sp--]; // <if(expr)>...<endif>
-                    if (!testAttributeTrue(o))
+                    if (!TestAttributeTrue(o))
ip = addr; // jump

break;
@@ -369,32 +369,32 @@ namespace Antlr4.StringTemplate
case Bytecode.INSTR_ADD:
o = operands[sp--];             // pop value
List<object> list = (List<object>)operands[sp]; // don't pop list
-                    addToList(list, o);
+                    AddToList(list, o);
break;

case Bytecode.INSTR_TOSTR:
// replace with string value; early eval
-                    operands[sp] = toString(self, operands[sp]);
+                    operands[sp] = ToString(self, operands[sp]);
break;

case Bytecode.INSTR_FIRST:
-                    operands[sp] = first(operands[sp]);
+                    operands[sp] = First(operands[sp]);
break;

case Bytecode.INSTR_LAST:
-                    operands[sp] = last(operands[sp]);
+                    operands[sp] = Last(operands[sp]);
break;

case Bytecode.INSTR_REST:
-                    operands[sp] = rest(operands[sp]);
+                    operands[sp] = Rest(operands[sp]);
break;

case Bytecode.INSTR_TRUNC:
-                    operands[sp] = trunc(operands[sp]);
+                    operands[sp] = Trunc(operands[sp]);
break;

case Bytecode.INSTR_STRIP:
-                    operands[sp] = strip(operands[sp]);
+                    operands[sp] = Strip(operands[sp]);
break;

case Bytecode.INSTR_TRIM:
@@ -405,13 +405,13 @@ namespace Antlr4.StringTemplate
}
else
{
-                        errMgr.runTimeError(self, current_ip, ErrorType.EXPECTING_STRING, "trim", o.GetType());
+                        errMgr.RuntimeError(self, current_ip, ErrorType.EXPECTING_STRING, "trim", o.GetType());
operands[++sp] = o;
}
break;

case Bytecode.INSTR_LENGTH:
-                    operands[sp] = length(operands[sp]);
+                    operands[sp] = Length(operands[sp]);
break;

case Bytecode.INSTR_STRLEN:
@@ -422,39 +422,39 @@ namespace Antlr4.StringTemplate
}
else
{
-                        errMgr.runTimeError(self, current_ip, ErrorType.EXPECTING_STRING, "strlen", o.GetType());
+                        errMgr.RuntimeError(self, current_ip, ErrorType.EXPECTING_STRING, "strlen", o.GetType());
operands[++sp] = 0;
}
break;

case Bytecode.INSTR_REVERSE:
-                    operands[sp] = reverse(operands[sp]);
+                    operands[sp] = Reverse(operands[sp]);
break;

case Bytecode.INSTR_NOT:
-                    operands[sp] = !testAttributeTrue(operands[sp]);
+                    operands[sp] = !TestAttributeTrue(operands[sp]);
break;

case Bytecode.INSTR_OR:
right = operands[sp--];
left = operands[sp--];
-                    operands[++sp] = testAttributeTrue(left) || testAttributeTrue(right);
+                    operands[++sp] = TestAttributeTrue(left) || TestAttributeTrue(right);
break;

case Bytecode.INSTR_AND:
right = operands[sp--];
left = operands[sp--];
-                    operands[++sp] = testAttributeTrue(left) && testAttributeTrue(right);
+                    operands[++sp] = TestAttributeTrue(left) && TestAttributeTrue(right);
break;

case Bytecode.INSTR_INDENT:
-                    strIndex = getShort(code, ip);
+                    strIndex = GetShort(code, ip);
ip += Instruction.OperandSizeInBytes;
-                    @out.pushIndentation(self.impl.strings[strIndex]);
+                    @out.PushIndentation(self.impl.strings[strIndex]);
break;

case Bytecode.INSTR_DEDENT:
-                    @out.popIndentation();
+                    @out.PopIndentation();
break;

case Bytecode.INSTR_NEWLINE:
@@ -464,7 +464,7 @@ namespace Antlr4.StringTemplate
prevOpcode == Bytecode.INSTR_INDENT ||
nwline > 0)
{
-                            @out.write(Environment.NewLine);
+                            @out.Write(Environment.NewLine);
}
nwline = 0;
}
@@ -486,22 +486,22 @@ namespace Antlr4.StringTemplate
break;

default:
-                    errMgr.internalError(self, "invalid bytecode @ " + (ip - 1) + ": " + opcode, null);
-                    self.impl.dump();
+                    errMgr.InternalError(self, "invalid bytecode @ " + (ip - 1) + ": " + opcode, null);
+                    self.impl.Dump();
break;
}
prevOpcode = opcode;
}
if (TemplateGroup.debug)
{
-                int stop = @out.index() - 1;
+                int stop = @out.Index() - 1;
EvalTemplateEvent e = new EvalTemplateEvent((DebugST)self, start, stop);
//System.out.println("eval template "+self+": "+e);
events.Add(e);
if (self.enclosingInstance != null)
{
DebugST parent = (DebugST)self.enclosingInstance;
-                    getEvents(parent).Add(e);
+                    GetEvents(parent).Add(e);
}
}
return n;
@@ -509,56 +509,56 @@ namespace Antlr4.StringTemplate

// TODO: refactor to Remove dup'd code

-        internal virtual void super_new(Template self, string name, int nargs)
+        internal virtual void SuperNew(Template self, string name, int nargs)
{
Template st = null;
-            CompiledTemplate imported = self.impl.nativeGroup.lookupImportedTemplate(name);
+            CompiledTemplate imported = self.impl.nativeGroup.LookupImportedTemplate(name);
if (imported == null)
{
-                errMgr.runTimeError(self, current_ip, ErrorType.NO_IMPORTED_TEMPLATE,
+                errMgr.RuntimeError(self, current_ip, ErrorType.NO_IMPORTED_TEMPLATE,
name);
-                st = self.groupThatCreatedThisInstance.createStringTemplate();
+                st = self.groupThatCreatedThisInstance.CreateStringTemplate();
st.impl = new CompiledTemplate();
sp -= nargs;
operands[++sp] = st;
return;
}

-            st = imported.nativeGroup.createStringTemplate();
+            st = imported.nativeGroup.CreateStringTemplate();
st.enclosingInstance = self; // self invoked super.name()
st.groupThatCreatedThisInstance = group;
st.impl = imported;

// get n args and store into st's attr list
-            storeArgs(self, nargs, st);
+            StoreArguments(self, nargs, st);
sp -= nargs;
operands[++sp] = st;
}

-        internal virtual void super_new(Template self, string name, IDictionary<string, object> attrs)
+        internal virtual void SuperNew(Template self, string name, IDictionary<string, object> attrs)
{
Template st = null;
-            CompiledTemplate imported = self.impl.nativeGroup.lookupImportedTemplate(name);
+            CompiledTemplate imported = self.impl.nativeGroup.LookupImportedTemplate(name);
if (imported == null)
{
-                errMgr.runTimeError(self, current_ip, ErrorType.NO_IMPORTED_TEMPLATE, name);
-                st = self.groupThatCreatedThisInstance.createStringTemplate();
+                errMgr.RuntimeError(self, current_ip, ErrorType.NO_IMPORTED_TEMPLATE, name);
+                st = self.groupThatCreatedThisInstance.CreateStringTemplate();
st.impl = new CompiledTemplate();
operands[++sp] = st;
return;
}

-            st = imported.nativeGroup.createStringTemplate();
+            st = imported.nativeGroup.CreateStringTemplate();
st.enclosingInstance = self; // self invoked super.name()
st.groupThatCreatedThisInstance = group;
st.impl = imported;

// get n args and store into st's attr list
-            storeArgs(self, attrs, st);
+            StoreArguments(self, attrs, st);
operands[++sp] = st;
}

-        internal virtual void storeArgs(Template self, IDictionary<string, object> attrs, Template st)
+        internal virtual void StoreArguments(Template self, IDictionary<string, object> attrs, Template st)
{
int nformalArgs = 0;
if (st.impl.formalArguments != null)
@@ -569,7 +569,7 @@ namespace Antlr4.StringTemplate

if (nargs < (nformalArgs - st.impl.NumberOfArgsWithDefaultValues) || nargs > nformalArgs)
{
-                errMgr.runTimeError(self,
+                errMgr.RuntimeError(self,
current_ip,
ErrorType.ARGUMENT_COUNT_MISMATCH,
nargs,
@@ -582,7 +582,7 @@ namespace Antlr4.StringTemplate
// don't let it throw an exception in RawSetAttribute
if (!st.impl.formalArguments.Any(i => i.Name == argName))
{
-                    errMgr.runTimeError(self, current_ip, ErrorType.NO_SUCH_ATTRIBUTE, argName);
+                    errMgr.RuntimeError(self, current_ip, ErrorType.NO_SUCH_ATTRIBUTE, argName);
continue;
}

@@ -591,7 +591,7 @@ namespace Antlr4.StringTemplate
}
}

-        internal virtual void storeArgs(Template self, int nargs, Template st)
+        internal virtual void StoreArguments(Template self, int nargs, Template st)
{
int nformalArgs = 0;
if (st.impl.formalArguments != null)
@@ -604,7 +604,7 @@ namespace Antlr4.StringTemplate
if (nargs < (nformalArgs - st.impl.NumberOfArgsWithDefaultValues) ||
nargs > nformalArgs)
{
-                errMgr.runTimeError(self,
+                errMgr.RuntimeError(self,
current_ip,
ErrorType.ARGUMENT_COUNT_MISMATCH,
nargs,
@@ -626,10 +626,10 @@ namespace Antlr4.StringTemplate
/** Write out an expression result that doesn't use expression options.
*  E.g., <name>
*/
-        protected virtual int writeObjectNoOptions(ITemplateWriter @out, Template self, object o)
+        protected virtual int WriteObjectNoOptions(ITemplateWriter @out, Template self, object o)
{
-            int start = @out.index(); // track char we're about to Write
-            int n = writeObject(@out, self, o, null);
+            int start = @out.Index(); // track char we're about to Write
+            int n = WriteObject(@out, self, o, null);
if (TemplateGroup.debug)
{
Interval templateLocation = self.impl.sourceMap[current_ip];
@@ -641,7 +641,7 @@ namespace Antlr4.StringTemplate
exprStop = templateLocation.B;
}

-                EvalExprEvent e = new EvalExprEvent((DebugST)self, start, @out.index() - 1, exprStart, exprStop);
+                EvalExprEvent e = new EvalExprEvent((DebugST)self, start, @out.Index() - 1, exprStart, exprStop);
Console.WriteLine(e);
events.Add(e);
}
@@ -651,10 +651,10 @@ namespace Antlr4.StringTemplate
/** Write out an expression result that uses expression options.
*  E.g., <names; separator=", ">
*/
-        protected virtual int writeObjectWithOptions(ITemplateWriter @out, Template self, object o,
+        protected virtual int WriteObjectWithOptions(ITemplateWriter @out, Template self, object o,
object[] options)
{
-            int start = @out.index(); // track char we're about to Write
+            int start = @out.Index(); // track char we're about to Write
// precompute all option values (Render all the way to strings)
string[] optionStrings = null;
if (options != null)
@@ -662,26 +662,26 @@ namespace Antlr4.StringTemplate
optionStrings = new string[options.Length];
for (int i = 0; i < Compiler.TemplateCompiler.NUM_OPTIONS; i++)
{
-                    optionStrings[i] = toString(self, options[i]);
+                    optionStrings[i] = ToString(self, options[i]);
}
}
if (options != null && options[(int)Option.Anchor] != null)
{
-                @out.pushAnchorPoint();
+                @out.PushAnchorPoint();
}

-            int n = writeObject(@out, self, o, optionStrings);
+            int n = WriteObject(@out, self, o, optionStrings);

if (options != null && options[(int)Option.Anchor] != null)
{
-                @out.popAnchorPoint();
+                @out.PopAnchorPoint();
}
if (TemplateGroup.debug)
{
Interval templateLocation = self.impl.sourceMap[current_ip];
int exprStart = templateLocation.A, exprStop = templateLocation.B;
EvalExprEvent e = new EvalExprEvent((DebugST)self,
-                                                    start, @out.index() - 1,
+                                                    start, @out.Index() - 1,
exprStart, exprStop);
Console.WriteLine(e);
events.Add(e);
@@ -692,7 +692,7 @@ namespace Antlr4.StringTemplate
/** Generic method to emit text for an object. It differentiates
*  between templates, iterable objects, and plain old Java objects (POJOs)
*/
-        protected virtual int writeObject(ITemplateWriter @out, Template self, object o, string[] options)
+        protected virtual int WriteObject(ITemplateWriter @out, Template self, object o, string[] options)
{
int n = 0;
if (o == null)
@@ -707,14 +707,14 @@ namespace Antlr4.StringTemplate
if (o is Template)
{
((Template)o).enclosingInstance = self;
-                setDefaultArguments((Template)o);
+                SetDefaultArguments((Template)o);
if (options != null && options[(int)Option.Wrap] != null)
{
// if we have a wrap string, then inform writer it
// might need to wrap
try
{
-                        @out.writeWrap(options[(int)Option.Wrap]);
+                        @out.WriteWrap(options[(int)Option.Wrap]);
}
catch (IOException ioe)
{
@@ -725,13 +725,13 @@ namespace Antlr4.StringTemplate
}
else
{
-                o = convertAnythingIteratableToIterator(o); // normalize
+                o = ConvertAnythingIteratableToIterator(o); // normalize
try
{
if (o is Iterator)
-                        n = writeIterator(@out, self, o, options);
+                        n = WriteIterator(@out, self, o, options);
else
-                        n = writePOJO(@out, o, options);
+                        n = WritePlainObject(@out, o, options);
}
catch (IOException ioe)
{
@@ -741,7 +741,7 @@ namespace Antlr4.StringTemplate
return n;
}

-        protected virtual int writeIterator(ITemplateWriter @out, Template self, object o, string[] options)
+        protected virtual int WriteIterator(ITemplateWriter @out, Template self, object o, string[] options)
{
if (o == null)
return 0;
@@ -760,8 +760,8 @@ namespace Antlr4.StringTemplate
(iterValue != null ||           // either we have a value
options[(int)Option.Null] != null); // or no value but null option
if (needSeparator)
-                    n += @out.writeSeparator(separator);
-                int nw = writeObject(@out, self, iterValue, options);
+                    n += @out.WriteSeparator(separator);
+                int nw = WriteObject(@out, self, iterValue, options);
if (nw > 0)
seenAValue = true;
n += nw;
@@ -769,12 +769,12 @@ namespace Antlr4.StringTemplate
return n;
}

-        protected virtual int writePOJO(ITemplateWriter @out, object o, string[] options)
+        protected virtual int WritePlainObject(ITemplateWriter @out, object o, string[] options)
{
string formatString = null;
if (options != null)
formatString = options[(int)Option.Format];
-            IAttributeRenderer r = group.getAttributeRenderer(o.GetType());
+            IAttributeRenderer r = group.GetAttributeRenderer(o.GetType());
string v;
if (r != null)
v = r.ToString(o, formatString, culture);
@@ -783,29 +783,29 @@ namespace Antlr4.StringTemplate
int n;
if (options != null && options[(int)Option.Wrap] != null)
{
-                n = @out.write(v, options[(int)Option.Wrap]);
+                n = @out.Write(v, options[(int)Option.Wrap]);
}
else
{
-                n = @out.write(v);
+                n = @out.Write(v);
}
return n;
}

-        protected virtual void map(Template self, object attr, Template st)
+        protected virtual void Map(Template self, object attr, Template st)
{
-            rot_map(self, attr, new List<Template>() { st });
+            RotateMap(self, attr, new List<Template>() { st });
}

// <names:a> or <names:a,b>
-        protected virtual void rot_map(Template self, object attr, List<Template> prototypes)
+        protected virtual void RotateMap(Template self, object attr, List<Template> prototypes)
{
if (attr == null)
{
operands[++sp] = null;
return;
}
-            attr = convertAnythingIteratableToIterator(attr);
+            attr = ConvertAnythingIteratableToIterator(attr);
if (attr is Iterator)
{
List<Template> mapped = new List<Template>();
@@ -825,8 +825,8 @@ namespace Antlr4.StringTemplate
int templateIndex = ti % prototypes.Count; // rotate through
ti++;
Template proto = prototypes[templateIndex];
-                    Template st = group.createStringTemplate(proto);
-                    setFirstArgument(self, st, iterValue);
+                    Template st = group.CreateStringTemplate(proto);
+                    SetFirstArgument(self, st, iterValue);
if (st.impl.isAnonSubtemplate)
{
st.RawSetAttribute("i0", i0);
@@ -841,10 +841,10 @@ namespace Antlr4.StringTemplate
else
{ // if only single value, just apply first template to sole value
Template proto = prototypes[0];
-                Template st = group.createStringTemplate(proto);
+                Template st = group.CreateStringTemplate(proto);
if (st != null)
{
-                    setFirstArgument(self, st, attr);
+                    SetFirstArgument(self, st, attr);
if (st.impl.isAnonSubtemplate)
{
st.RawSetAttribute("i0", 0);
@@ -861,7 +861,7 @@ namespace Antlr4.StringTemplate

// <names,phones:{n,p | ...}> or <a,b:t()>
// todo: i, i0 not set unless mentioned? map:{k,v | ..}?
-        protected virtual Template.AttributeList zip_map(Template self, List<object> exprs, Template prototype)
+        protected virtual Template.AttributeList ZipMap(Template self, List<object> exprs, Template prototype)
{
if (exprs == null || prototype == null || exprs.Count == 0)
{
@@ -872,7 +872,7 @@ namespace Antlr4.StringTemplate
{
object attr = exprs[i];
if (attr != null)
-                    exprs[i] = convertAnythingToIterator(attr);
+                    exprs[i] = ConvertAnythingToIterator(attr);
}

// ensure arguments line up
@@ -881,19 +881,19 @@ namespace Antlr4.StringTemplate
List<FormalArgument> formalArguments = code.formalArguments;
if (!code.hasFormalArgs || formalArguments == null)
{
-                errMgr.runTimeError(self, current_ip, ErrorType.MISSING_FORMAL_ARGUMENTS);
+                errMgr.RuntimeError(self, current_ip, ErrorType.MISSING_FORMAL_ARGUMENTS);
return null;
}

// todo: track formal args not names for efficient filling of locals
object[] formalArgumentNames = formalArguments.Select(i => i.Name).ToArray();
int nformalArgs = formalArgumentNames.Length;
-            if (prototype.IsAnonymousSubtemplate())
+            if (prototype.IsAnonymousSubtemplate)
nformalArgs -= predefinedAnonSubtemplateAttributes.Count;

if (nformalArgs != numExprs)
{
-                errMgr.runTimeError(self, current_ip, ErrorType.MAP_ARGUMENT_COUNT_MISMATCH, numExprs, nformalArgs);
+                errMgr.RuntimeError(self, current_ip, ErrorType.MAP_ARGUMENT_COUNT_MISMATCH, numExprs, nformalArgs);
// TODO just fill first n
// truncate arg list to match smaller size
int shorterSize = Math.Min(formalArgumentNames.Length, numExprs);
@@ -909,7 +909,7 @@ namespace Antlr4.StringTemplate
{
// get a value for each attribute in list; put into Template instance
int numEmpty = 0;
-                Template embedded = group.createStringTemplate(prototype);
+                Template embedded = group.CreateStringTemplate(prototype);
embedded.RawSetAttribute("i0", i2);
embedded.RawSetAttribute("i", i2 + 1);
for (int a = 0; a < numExprs; a++)
@@ -936,20 +936,20 @@ namespace Antlr4.StringTemplate
return results;
}

-        protected virtual void setFirstArgument(Template self, Template st, object attr)
+        protected virtual void SetFirstArgument(Template self, Template st, object attr)
{
if (st.impl.formalArguments == null)
{
-                errMgr.runTimeError(self, current_ip, ErrorType.ARGUMENT_COUNT_MISMATCH, 1, st.impl.name, 0);
+                errMgr.RuntimeError(self, current_ip, ErrorType.ARGUMENT_COUNT_MISMATCH, 1, st.impl.name, 0);
return;
}

st.locals[0] = attr;
}

-        protected virtual void addToList(List<object> list, object o)
+        protected virtual void AddToList(List<object> list, object o)
{
-            o = Interpreter.convertAnythingIteratableToIterator(o);
+            o = Interpreter.ConvertAnythingIteratableToIterator(o);
if (o is Iterator)
{
// copy of elements into our temp list
@@ -964,14 +964,14 @@ namespace Antlr4.StringTemplate
}

/** Return the first attribute if multiple valued or the attribute
-         *  itself if single-valued.  Used in &lt;names:first()&gt;
+         *  itself if single-valued.  Used in &lt;names:First()&gt;
*/
-        public virtual object first(object v)
+        public virtual object First(object v)
{
if (v == null)
return null;
object r = v;
-            v = convertAnythingIteratableToIterator(v);
+            v = ConvertAnythingIteratableToIterator(v);
if (v is Iterator)
{
Iterator it = (Iterator)v;
@@ -987,7 +987,7 @@ namespace Antlr4.StringTemplate
*  itself if single-valued. Unless it's a list or array, this is pretty
*  slow as it iterates until the last element.
*/
-        public virtual object last(object v)
+        public virtual object Last(object v)
{
if (v == null)
return null;
@@ -997,7 +997,7 @@ namespace Antlr4.StringTemplate
return list[list.Count - 1];

object last = v;
-            v = convertAnythingIteratableToIterator(v);
+            v = ConvertAnythingIteratableToIterator(v);
Iterator it = v as Iterator;
if (it != null)
{
@@ -1011,12 +1011,12 @@ namespace Antlr4.StringTemplate
/** Return everything but the first attribute if multiple valued
*  or null if single-valued.
*/
-        public virtual object rest(object v)
+        public virtual object Rest(object v)
{
if (v == null)
return null;

-            v = convertAnythingIteratableToIterator(v);
+            v = ConvertAnythingIteratableToIterator(v);
Iterator it = v as Iterator;
if (it != null)
{
@@ -1039,13 +1039,13 @@ namespace Antlr4.StringTemplate
return null;
}

-        /** Return all but the last element.  trunc(x)=null if x is single-valued. */
-        public virtual object trunc(object v)
+        /** Return all but the last element.  Trunc(x)=null if x is single-valued. */
+        public virtual object Trunc(object v)
{
if (v == null)
return null;

-            v = convertAnythingIteratableToIterator(v);
+            v = ConvertAnythingIteratableToIterator(v);
if (v is Iterator)
{
List<object> a = new List<object>();
@@ -1060,17 +1060,17 @@ namespace Antlr4.StringTemplate
return a;
}

-            // trunc(x)==null when x single-valued attribute
+            // Trunc(x)==null when x single-valued attribute
return null;
}

/** Return a new list w/o null values. */
-        public virtual object strip(object v)
+        public virtual object Strip(object v)
{
if (v == null)
return null;

-            v = convertAnythingIteratableToIterator(v);
+            v = ConvertAnythingIteratableToIterator(v);
if (v is Iterator)
{
List<object> a = new List<object>();
@@ -1085,18 +1085,18 @@ namespace Antlr4.StringTemplate
return a;
}

-            return v; // strip(x)==x when x single-valued attribute
+            return v; // Strip(x)==x when x single-valued attribute
}

/** Return a list with the same elements as v but in reverse order. null
-         *  values are NOT stripped out. use reverse(strip(v)) to do that.
+         *  values are NOT stripped out. use Reverse(Strip(v)) to do that.
*/
-        public virtual object reverse(object v)
+        public virtual object Reverse(object v)
{
if (v == null)
return null;

-            v = convertAnythingIteratableToIterator(v);
+            v = ConvertAnythingIteratableToIterator(v);
Iterator it = v as Iterator;
if (it != null)
{
@@ -1116,7 +1116,7 @@ namespace Antlr4.StringTemplate
*  Special case several common collections and primitive arrays for
*  speed. This method by Kay Roepke from v3.
*/
-        public virtual object length(object v)
+        public virtual object Length(object v)
{
if (v == null)
return 0;
@@ -1152,7 +1152,7 @@ namespace Antlr4.StringTemplate
return 1;
}

-        protected virtual string toString(Template self, object value)
+        protected virtual string ToString(Template self, object value)
{
if (value != null)
{
@@ -1165,16 +1165,16 @@ namespace Antlr4.StringTemplate
StringWriter sw = new StringWriter();
/*
Interpreter interp = new Interpreter(group, new NoIndentWriter(sw), culture);
-                            interp.writeObjectNoOptions(self, value, -1, -1);
+                            interp.WriteObjectNoOptions(self, value, -1, -1);
*/
-                writeObjectNoOptions(new NoIndentWriter(sw), self, value);
+                WriteObjectNoOptions(new NoIndentWriter(sw), self, value);

return sw.ToString();
}
return null;
}

-        public static object convertAnythingIteratableToIterator(object o)
+        public static object ConvertAnythingIteratableToIterator(object o)
{
if (o == null)
return null;
@@ -1203,9 +1203,9 @@ namespace Antlr4.StringTemplate
return o;
}

-        public static Iterator convertAnythingToIterator(object o)
+        public static Iterator ConvertAnythingToIterator(object o)
{
-            o = convertAnythingIteratableToIterator(o);
+            o = ConvertAnythingIteratableToIterator(o);

Iterator iter = o as Iterator;
if (iter != null)
@@ -1216,7 +1216,7 @@ namespace Antlr4.StringTemplate
return singleton.iterator();
}

-        protected virtual bool testAttributeTrue(object a)
+        protected virtual bool TestAttributeTrue(object a)
{
if (a == null)
return false;
@@ -1248,23 +1248,23 @@ namespace Antlr4.StringTemplate
return true;
}

-        protected virtual object getObjectProperty(Template self, object o, object property)
+        protected virtual object GetObjectProperty(Template self, object o, object property)
{
if (o == null)
{
-                errMgr.runTimeError(self, current_ip, ErrorType.NO_SUCH_PROPERTY,
+                errMgr.RuntimeError(self, current_ip, ErrorType.NO_SUCH_PROPERTY,
"null attribute");
return null;
}

try
{
-                IModelAdaptor adap = self.groupThatCreatedThisInstance.getModelAdaptor(o.GetType());
-                return adap.GetProperty(self, o, property, toString(self, property));
+                IModelAdaptor adap = self.groupThatCreatedThisInstance.GetModelAdaptor(o.GetType());
+                return adap.GetProperty(self, o, property, ToString(self, property));
}
catch (TemplateNoSuchPropertyException e)
{
-                errMgr.runTimeError(self, current_ip, ErrorType.NO_SUCH_PROPERTY,
+                errMgr.RuntimeError(self, current_ip, ErrorType.NO_SUCH_PROPERTY,
e, o.GetType().Name + "." + property);
}
return null;
@@ -1276,7 +1276,7 @@ namespace Antlr4.StringTemplate
*
*  The evaluation context is the template enclosing invokedST.
*/
-        public virtual void setDefaultArguments(Template invokedST)
+        public virtual void SetDefaultArguments(Template invokedST)
{
if (invokedST.impl.formalArguments == null)
return;
@@ -1285,7 +1285,7 @@ namespace Antlr4.StringTemplate
// if no value for attribute and default arg, inject default arg into self
if (invokedST.locals[arg.Index] == Template.EmptyAttribute && arg.CompiledDefaultValue != null)
{
-                    Template defaultArgST = group.createStringTemplate();
+                    Template defaultArgST = group.CreateStringTemplate();
defaultArgST.enclosingInstance = invokedST.enclosingInstance;
defaultArgST.groupThatCreatedThisInstance = group;
defaultArgST.impl = arg.CompiledDefaultValue;
@@ -1297,7 +1297,7 @@ namespace Antlr4.StringTemplate
string defArgTemplate = arg.DefaultValueToken.Text;
if (defArgTemplate.StartsWith("{<(") && defArgTemplate.EndsWith(")>}"))
{
-                        invokedST.RawSetAttribute(arg.Name, toString(invokedST, defaultArgST));
+                        invokedST.RawSetAttribute(arg.Name, ToString(invokedST, defaultArgST));
}
else
{
@@ -1312,7 +1312,7 @@ namespace Antlr4.StringTemplate
StringBuilder tr = new StringBuilder();
BytecodeDisassembler dis = new BytecodeDisassembler(self.impl);
StringBuilder buf = new StringBuilder();
-            dis.disassembleInstruction(buf, ip);
+            dis.DisassembleInstruction(buf, ip);
string name = self.impl.name + ":";
if (self.impl.name == Template.UnknownName)
name = "";
@@ -1322,7 +1322,7 @@ namespace Antlr4.StringTemplate
for (int i = 0; i <= sp; i++)
{
object o = operands[i];
-                printForTrace(tr, o);
+                PrintForTrace(tr, o);
}

tr.Append(" ], calls=");
@@ -1337,7 +1337,7 @@ namespace Antlr4.StringTemplate
Console.WriteLine(s);
}

-        protected virtual void printForTrace(StringBuilder tr, object o)
+        protected virtual void PrintForTrace(StringBuilder tr, object o)
{
if (o is Template)
{
@@ -1347,7 +1347,7 @@ namespace Antlr4.StringTemplate
tr.Append(" " + ((Template)o).impl.name + "()");
return;
}
-            o = convertAnythingIteratableToIterator(o);
+            o = ConvertAnythingIteratableToIterator(o);
if (o is Iterator)
{
Iterator it = (Iterator)o;
@@ -1355,7 +1355,7 @@ namespace Antlr4.StringTemplate
while (it.hasNext())
{
object iterValue = it.next();
-                    printForTrace(tr, iterValue);
+                    PrintForTrace(tr, iterValue);
}
tr.Append(" ]");
}
@@ -1365,12 +1365,12 @@ namespace Antlr4.StringTemplate
}
}

-        public virtual List<InterpEvent> getEvents()
+        public virtual List<InterpEvent> GetEvents()
{
return events;
}

-        public virtual List<InterpEvent> getEvents(Template st)
+        public virtual List<InterpEvent> GetEvents(Template st)
{
List<InterpEvent> events;
if (!debugInfo.TryGetValue(st, out events) || events == null)
@@ -1379,12 +1379,12 @@ namespace Antlr4.StringTemplate
return events;
}

-        public virtual List<string> getExecutionTrace()
+        public virtual List<string> GetExecutionTrace()
{
return executeTrace;
}

-        public static int getShort(byte[] value, int startIndex)
+        private static int GetShort(byte[] value, int startIndex)
{
return BitConverter.ToInt16(value, startIndex);
}
diff --git a/Antlr4.StringTemplate/Misc/ErrorBuffer.cs b/Antlr4.StringTemplate/Misc/ErrorBuffer.cs
index 5f91458..48e2d57 100644
--- a/Antlr4.StringTemplate/Misc/ErrorBuffer.cs
+++ b/Antlr4.StringTemplate/Misc/ErrorBuffer.cs
@@ -57,12 +57,12 @@ namespace Antlr4.StringTemplate.Misc
}
}

-        public virtual void compileTimeError(TemplateMessage msg)
+        public virtual void CompiletimeError(TemplateMessage msg)
{
errors.Add(msg);
}

-        public virtual void runTimeError(TemplateMessage msg)
+        public virtual void RuntimeError(TemplateMessage msg)
{
// ignore these
if (msg.Error != ErrorType.NO_SUCH_PROPERTY)
@@ -74,7 +74,7 @@ namespace Antlr4.StringTemplate.Misc
errors.Add(msg);
}

-        public virtual void internalError(TemplateMessage msg)
+        public virtual void InternalError(TemplateMessage msg)
{
errors.Add(msg);
}
diff --git a/Antlr4.StringTemplate/Misc/ErrorManager.cs b/Antlr4.StringTemplate/Misc/ErrorManager.cs
index ffab970..f6f3630 100644
--- a/Antlr4.StringTemplate/Misc/ErrorManager.cs
+++ b/Antlr4.StringTemplate/Misc/ErrorManager.cs
@@ -46,12 +46,12 @@ namespace Antlr4.StringTemplate.Misc

private class DefaultErrorListener : ITemplateErrorListener
{
-            public virtual void compileTimeError(TemplateMessage msg)
+            public virtual void CompiletimeError(TemplateMessage msg)
{
Console.Error.WriteLine(msg);
}

-            public virtual void runTimeError(TemplateMessage msg)
+            public virtual void RuntimeError(TemplateMessage msg)
{
if (msg.Error != ErrorType.NO_SUCH_PROPERTY)
{ // ignore these
@@ -64,18 +64,18 @@ namespace Antlr4.StringTemplate.Misc
Console.Error.WriteLine(msg);
}

-            public virtual void internalError(TemplateMessage msg)
+            public virtual void InternalError(TemplateMessage msg)
{
Console.Error.WriteLine(msg);
// throw new Error("internal error", msg.cause);
}

-            public virtual void error(string s)
+            public virtual void Error(string s)
{
-                error(s, null);
+                Error(s, null);
}

-            public virtual void error(string s, Exception e)
+            public virtual void Error(string s, Exception e)
{
Console.Error.WriteLine(s);
if (e != null)
@@ -120,70 +120,70 @@ namespace Antlr4.StringTemplate.Misc
}
}

-        public virtual void compileTimeError(ErrorType error, IToken templateToken, IToken t)
+        public virtual void CompiletimeError(ErrorType error, IToken templateToken, IToken t)
{
string srcName = t.InputStream.SourceName;
if (srcName != null)
srcName = Path.GetFileName(srcName);

-            listener.compileTimeError(new TemplateCompiletimeMessage(error, srcName, templateToken, t, null, t.Text));
+            listener.CompiletimeError(new TemplateCompiletimeMessage(error, srcName, templateToken, t, null, t.Text));
}

public virtual void lexerError(string srcName, string msg, IToken templateToken, RecognitionException e)
{
-            listener.compileTimeError(new TemplateLexerMessage(srcName, msg, templateToken, e));
+            listener.CompiletimeError(new TemplateLexerMessage(srcName, msg, templateToken, e));
}

-        public virtual void compileTimeError(ErrorType error, IToken templateToken, IToken t, object arg)
+        public virtual void CompiletimeError(ErrorType error, IToken templateToken, IToken t, object arg)
{
string srcName = t.InputStream.SourceName;
srcName = Path.GetFileName(srcName);
-            listener.compileTimeError(new TemplateCompiletimeMessage(error, srcName, templateToken, t, null, arg));
+            listener.CompiletimeError(new TemplateCompiletimeMessage(error, srcName, templateToken, t, null, arg));
}

-        public virtual void compileTimeError(ErrorType error, IToken templateToken, IToken t, object arg, object arg2)
+        public virtual void CompiletimeError(ErrorType error, IToken templateToken, IToken t, object arg, object arg2)
{
string srcName = t.InputStream.SourceName;
if (srcName != null)
srcName = Path.GetFileName(srcName);

-            listener.compileTimeError(new TemplateCompiletimeMessage(error, srcName, templateToken, t, null, arg, arg2));
+            listener.CompiletimeError(new TemplateCompiletimeMessage(error, srcName, templateToken, t, null, arg, arg2));
}

-        public virtual void groupSyntaxError(ErrorType error, string srcName, RecognitionException e, string msg)
+        public virtual void GroupSyntaxError(ErrorType error, string srcName, RecognitionException e, string msg)
{
IToken t = e.Token;
-            listener.compileTimeError(new TemplateGroupCompiletimeMessage(error, srcName, e.Token, e, msg));
+            listener.CompiletimeError(new TemplateGroupCompiletimeMessage(error, srcName, e.Token, e, msg));
}

-        public virtual void groupLexerError(ErrorType error, string srcName, RecognitionException e, string msg)
+        public virtual void GroupLexerError(ErrorType error, string srcName, RecognitionException e, string msg)
{
-            listener.compileTimeError(new TemplateGroupCompiletimeMessage(error, srcName, e.Token, e, msg));
+            listener.CompiletimeError(new TemplateGroupCompiletimeMessage(error, srcName, e.Token, e, msg));
}

-        public virtual void runTimeError(Template self, int ip, ErrorType error)
+        public virtual void RuntimeError(Template self, int ip, ErrorType error)
{
-            listener.runTimeError(new TemplateRuntimeMessage(error, ip, self));
+            listener.RuntimeError(new TemplateRuntimeMessage(error, ip, self));
}

-        public virtual void runTimeError(Template self, int ip, ErrorType error, object arg)
+        public virtual void RuntimeError(Template self, int ip, ErrorType error, object arg)
{
-            listener.runTimeError(new TemplateRuntimeMessage(error, ip, self, arg));
+            listener.RuntimeError(new TemplateRuntimeMessage(error, ip, self, arg));
}

-        public virtual void runTimeError(Template self, int ip, ErrorType error, Exception e, object arg)
+        public virtual void RuntimeError(Template self, int ip, ErrorType error, Exception e, object arg)
{
-            listener.runTimeError(new TemplateRuntimeMessage(error, ip, self, e, arg));
+            listener.RuntimeError(new TemplateRuntimeMessage(error, ip, self, e, arg));
}

-        public virtual void runTimeError(Template self, int ip, ErrorType error, object arg, object arg2)
+        public virtual void RuntimeError(Template self, int ip, ErrorType error, object arg, object arg2)
{
-            listener.runTimeError(new TemplateRuntimeMessage(error, ip, self, null, arg, arg2));
+            listener.RuntimeError(new TemplateRuntimeMessage(error, ip, self, null, arg, arg2));
}

-        public virtual void runTimeError(Template self, int ip, ErrorType error, object arg, object arg2, object arg3)
+        public virtual void RuntimeError(Template self, int ip, ErrorType error, object arg, object arg2, object arg3)
{
-            listener.runTimeError(new TemplateRuntimeMessage(error, ip, self, null, arg, arg2, arg3));
+            listener.RuntimeError(new TemplateRuntimeMessage(error, ip, self, null, arg, arg2, arg3));
}

public virtual void IOError(Template self, ErrorType error, Exception e)
@@ -196,9 +196,9 @@ namespace Antlr4.StringTemplate.Misc
listener.IOError(new TemplateMessage(error, self, e, arg));
}

-        public virtual void internalError(Template self, string msg, Exception e)
+        public virtual void InternalError(Template self, string msg, Exception e)
{
-            listener.internalError(new TemplateMessage(ErrorType.INTERNAL_ERROR, self, e, msg));
+            listener.InternalError(new TemplateMessage(ErrorType.INTERNAL_ERROR, self, e, msg));
}
}
}
diff --git a/Antlr4.StringTemplate/Misc/ErrorType.cs b/Antlr4.StringTemplate/Misc/ErrorType.cs
index cf9c1f1..9ca1e48 100644
--- a/Antlr4.StringTemplate/Misc/ErrorType.cs
+++ b/Antlr4.StringTemplate/Misc/ErrorType.cs
@@ -65,7 +65,7 @@ namespace Antlr4.StringTemplate.Misc
// INTERNAL ERRORS
public static readonly ErrorType INTERNAL_ERROR = new ErrorType("{0}");
public static readonly ErrorType WRITE_IO_ERROR = new ErrorType("error writing output caused by");
-        public static readonly ErrorType CANT_LOAD_GROUP_FILE = new ErrorType("can't load group file {0}");
+        public static readonly ErrorType CANT_LOAD_GROUP_FILE = new ErrorType("can't Load group file {0}");

private readonly string _message;

diff --git a/Antlr4.StringTemplate/Misc/MultiMap.cs b/Antlr4.StringTemplate/Misc/MultiMap.cs
index f5f5176..0aa07ec 100644
--- a/Antlr4.StringTemplate/Misc/MultiMap.cs
+++ b/Antlr4.StringTemplate/Misc/MultiMap.cs
@@ -37,7 +37,7 @@ namespace Antlr4.StringTemplate.Misc
/** A hash table that maps a key to a list of elements not just a single. */
public class MultiMap<TKey, TValue> : Dictionary<TKey, List<TValue>>
{
-        public virtual void map(TKey key, TValue value)
+        public virtual void Add(TKey key, TValue value)
{
List<TValue> elementsForKey;
if (!TryGetValue(key, out elementsForKey))
diff --git a/Antlr4.StringTemplate/Misc/TemplateDump.cs b/Antlr4.StringTemplate/Misc/TemplateDump.cs
index f2ed223..136c546 100644
--- a/Antlr4.StringTemplate/Misc/TemplateDump.cs
+++ b/Antlr4.StringTemplate/Misc/TemplateDump.cs
@@ -55,7 +55,7 @@ namespace Antlr4.StringTemplate.Misc
this.self = self;
}

-        public static string toString(Template self)
+        public static string ToString(Template self)
{
TemplateDump d = new TemplateDump(self);
return d.ToString();
@@ -63,13 +63,13 @@ namespace Antlr4.StringTemplate.Misc

public override string ToString()
{
-            return toString(0);
+            return ToString(0);
}

-        protected virtual string toString(int n)
+        protected virtual string ToString(int n)
{
StringBuilder buf = new StringBuilder();
-            buf.Append(getTemplateDeclaratorString() + ":");
+            buf.Append(GetTemplateDeclaratorString() + ":");
n++;
if (self.GetAttributes() != null)
{
@@ -81,29 +81,29 @@ namespace Antlr4.StringTemplate.Misc
{
string name = (string)attrName;
buf.Append(Environment.NewLine);
-                    indent(buf, n);
+                    Indent(buf, n);
buf.Append(string.Format("%-" + w + "s = ", name));
buf.Append(string.Format(string.Format("{{0,-{0}}} = ", w), name));
object value;
self.GetAttributes().TryGetValue(name, out value);
-                    buf.Append(getValueDebugString(value, n));
+                    buf.Append(GetValueDebugString(value, n));
}
}
buf.Append(Environment.NewLine);
n--;
-            indent(buf, n);
+            Indent(buf, n);
buf.Append("]");
return buf.ToString();
}

-        protected virtual string getValueDebugString(object value, int n)
+        protected virtual string GetValueDebugString(object value, int n)
{
StringBuilder buf = new StringBuilder();
-            value = Interpreter.convertAnythingIteratableToIterator(value);
+            value = Interpreter.ConvertAnythingIteratableToIterator(value);
if (value is Template)
{
TemplateDump d = new TemplateDump((Template)value);
-                buf.Append(d.toString(n));
+                buf.Append(d.ToString(n));
}
else if (value is Iterator)
{
@@ -111,7 +111,7 @@ namespace Antlr4.StringTemplate.Misc
int na = 0;
while (it.hasNext())
{
-                    string v = getValueDebugString(it.next(), n);
+                    string v = GetValueDebugString(it.next(), n);
if (na > 0)
buf.Append(", ");
buf.Append(v);
@@ -125,11 +125,11 @@ namespace Antlr4.StringTemplate.Misc
return buf.ToString();
}

-        protected virtual string getTemplateDeclaratorString()
+        protected virtual string GetTemplateDeclaratorString()
{
StringBuilder buf = new StringBuilder();
buf.Append("<");
-            buf.Append(self.Name());
+            buf.Append(self.Name);
buf.Append("(");
if (self.impl.formalArguments != null)
buf.Append(string.Join(",", self.impl.formalArguments.Select(i => i.Name).ToArray()));
@@ -139,7 +139,7 @@ namespace Antlr4.StringTemplate.Misc
return buf.ToString();
}

-        protected virtual void indent(StringBuilder buf, int n)
+        protected virtual void Indent(StringBuilder buf, int n)
{
for (int i = 1; i <= n; i++)
buf.Append("   ");
diff --git a/Antlr4.StringTemplate/Misc/TemplateRuntimeMessage.cs b/Antlr4.StringTemplate/Misc/TemplateRuntimeMessage.cs
index 3180345..90bc0e9 100644
--- a/Antlr4.StringTemplate/Misc/TemplateRuntimeMessage.cs
+++ b/Antlr4.StringTemplate/Misc/TemplateRuntimeMessage.cs
@@ -87,25 +87,22 @@ namespace Antlr4.StringTemplate.Misc
/** Given an ip (code location), get it's range in source template then
*  return it's template line:col.
*/
-        public virtual string getSourceLocation()
+        public virtual string GetSourceLocation()
{
-            if (ip < 0)
-                return null;
-
-            Interval I = Self.impl.sourceMap[ip];
-            if (I == null)
+            Interval interval = SourceInterval;
+            if (interval == null)
return null;

// get left edge and get line/col
-            int i = I.A;
-            Coordinate loc = Utility.getLineCharPosition(Self.impl.template, i);
+            int i = interval.A;
+            Coordinate loc = Utility.GetLineCharPosition(Self.impl.template, i);
return loc.ToString();
}

public override string ToString()
{
StringBuilder buf = new StringBuilder();
-            string loc = getSourceLocation();
+            string loc = GetSourceLocation();
if (Self != null)
{
buf.Append("context [");
diff --git a/Antlr4.StringTemplate/Misc/Utility.cs b/Antlr4.StringTemplate/Misc/Utility.cs
index f4f7cc5..3e70c03 100644
--- a/Antlr4.StringTemplate/Misc/Utility.cs
+++ b/Antlr4.StringTemplate/Misc/Utility.cs
@@ -38,17 +38,13 @@ namespace Antlr4.StringTemplate.Misc

public static class Utility
{
-        public static string strip(string s, int n)
+        public static string Strip(string s, int n)
{
return s.Substring(n, s.Length - 2 * n);
}

-        //    public static String stripRight(String s, int n) {
-        //        return s.substring(0, s.length()-n);
-        //    }
-
// strip newline from front but just one
-        public static string trimOneStartingNewline(string s)
+        public static string TrimOneStartingNewline(string s)
{
if (s.StartsWith("\r\n"))
s = s.Substring(2);
@@ -58,7 +54,7 @@ namespace Antlr4.StringTemplate.Misc
}

// strip newline from end but just one
-        public static string trimOneTrailingNewline(string s)
+        public static string TrimOneTrailingNewline(string s)
{
if (s.EndsWith("\r\n"))
s = s.Substring(0, s.Length - 2);
@@ -67,7 +63,7 @@ namespace Antlr4.StringTemplate.Misc
return s;
}

-        public static string getPrefix(string name)
+        public static string GetPrefix(string name)
{
//System.out.println("getParent("+name+")="+p);
if (name == null)
@@ -77,11 +73,11 @@ namespace Antlr4.StringTemplate.Misc
if (lastSlash > 0)
return name.Substring(0, lastSlash);

-            //System.out.println("getPrefix("+name+")="+p);
+            //System.out.println("GetPrefix("+name+")="+p);
return "";
}

-        public static string replaceEscapes(string s)
+        public static string ReplaceEscapes(string s)
{
s = s.Replace("\n", "\\\\n");
s = s.Replace("\r", "\\\\r");
@@ -90,7 +86,7 @@ namespace Antlr4.StringTemplate.Misc
}

/** Given index into string, compute the line and char position in line */
-        public static Coordinate getLineCharPosition(string s, int index)
+        public static Coordinate GetLineCharPosition(string s, int index)
{
int line = 1;
int charPos = 0;
@@ -113,20 +109,5 @@ namespace Antlr4.StringTemplate.Misc

return new Coordinate(line, charPos);
}
-
-        public static object accessField(FieldInfo f, object obj)
-        {
-            return f.GetValue(obj);
-        }
-
-        public static object invokeMethod(MethodInfo m, object obj)
-        {
-            return m.Invoke(obj, null);
-        }
-
-        public static MethodInfo getMethod(Type c, string methodName)
-        {
-            return c.GetMethod(methodName, Type.EmptyTypes);
-        }
}
}
diff --git a/Antlr4.StringTemplate/NoIndentWriter.cs b/Antlr4.StringTemplate/NoIndentWriter.cs
index 38404f2..7480c7e 100644
--- a/Antlr4.StringTemplate/NoIndentWriter.cs
+++ b/Antlr4.StringTemplate/NoIndentWriter.cs
@@ -42,7 +42,7 @@ namespace Antlr4.StringTemplate
{
}

-        public override int write(string str)
+        public override int Write(string str)
{
@out.Write(str);
return str.Length;
diff --git a/Antlr4.StringTemplate/NumberRenderer.cs b/Antlr4.StringTemplate/NumberRenderer.cs
index a356598..51dce5d 100644
--- a/Antlr4.StringTemplate/NumberRenderer.cs
+++ b/Antlr4.StringTemplate/NumberRenderer.cs
@@ -45,13 +45,13 @@ namespace Antlr4.StringTemplate
*/
public class NumberRenderer : IAttributeRenderer
{
-        public virtual string ToString(object o, string formatString, CultureInfo locale)
+        public virtual string ToString(object o, string formatString, CultureInfo culture)
{
// o will be instanceof Number
if (formatString == null)
return o.ToString();

-            return string.Format(locale, formatString, o);
+            return string.Format(culture, formatString, o);
}
}
}
diff --git a/Antlr4.StringTemplate/StringRenderer.cs b/Antlr4.StringTemplate/StringRenderer.cs
index b52ca27..0926355 100644
--- a/Antlr4.StringTemplate/StringRenderer.cs
+++ b/Antlr4.StringTemplate/StringRenderer.cs
@@ -42,20 +42,20 @@ namespace Antlr4.StringTemplate
public class StringRenderer : IAttributeRenderer
{
// trim(s) and strlen(s) built-in funcs; these are Format options
-        public virtual string ToString(object o, string formatString, CultureInfo locale)
+        public virtual string ToString(object o, string formatString, CultureInfo culture)
{
string s = (string)o;
if (formatString == null)
return s;

if (formatString.Equals("upper"))
-                return s.ToUpper(locale);
+                return s.ToUpper(culture);

if (formatString.Equals("lower"))
-                return s.ToLower(locale);
+                return s.ToLower(culture);

if (formatString.Equals("cap"))
-                return char.ToUpper(s[0], locale) + s.Substring(1);
+                return char.ToUpper(s[0], culture) + s.Substring(1);

if (formatString.Equals("url-encode"))
return HttpUtility.UrlEncode(s);
diff --git a/Antlr4.StringTemplate/Template.cs b/Antlr4.StringTemplate/Template.cs
index 2190fca..a84dfb1 100644
--- a/Antlr4.StringTemplate/Template.cs
+++ b/Antlr4.StringTemplate/Template.cs
@@ -89,11 +89,11 @@ namespace Antlr4.StringTemplate
*  via Render.  So, we create st and then it needs to know which
*  group created it for sake of polymorphism:
*
-         *  st = skin1.getInstanceOf("searchbox");
+         *  st = skin1.GetInstanceOf("searchbox");
*  result = st.Render(); // knows skin1 created it
*
*  Say we have a group, g1, with template t and import t and u templates from
-         *  another group, g2.  g1.getInstanceOf("u") finds u in g2 but remembers
+         *  another group, g2.  g1.GetInstanceOf("u") finds u in g2 but remembers
*  that g1 created it.  If u includes t, it should create g1.t not g2.t.
*
*   g1 = {t(), u()}
@@ -143,11 +143,11 @@ namespace Antlr4.StringTemplate
public Template(TemplateGroup group, string template)
{
groupThatCreatedThisInstance = group;
-            impl = groupThatCreatedThisInstance.compile(group.getFileName(), null,
+            impl = groupThatCreatedThisInstance.Compile(group.FileName, null,
null, template, null);
impl.hasFormalArgs = false;
impl.name = UnknownName;
-            impl.defineImplicitlyDefinedTemplates(groupThatCreatedThisInstance);
+            impl.DefineImplicitlyDefinedTemplates(groupThatCreatedThisInstance);
}

/** Clone a prototype template for application in MAP operations; copy all fields */
@@ -194,7 +194,7 @@ namespace Antlr4.StringTemplate
{
// not defined
arg = new FormalArgument(name);
-                    impl.addArg(arg);
+                    impl.AddArgument(arg);
if (locals == null)
locals = new object[1];
else
@@ -292,9 +292,9 @@ namespace Antlr4.StringTemplate
p = p.enclosingInstance;
}
// got to root template and no definition, try dictionaries in group
-            if (impl.nativeGroup.isDictionary(name))
+            if (impl.nativeGroup.IsDictionary(name))
{
-                return impl.nativeGroup.rawGetDictionary(name);
+                return impl.nativeGroup.RawGetDictionary(name);
}

throw new TemplateNoSuchPropertyException(name);
@@ -369,7 +369,7 @@ namespace Antlr4.StringTemplate
{
if (i > 0)
buf.Append(" ");
-                buf.Append(st.Name());
+                buf.Append(st.Name);
i++;
}

@@ -392,41 +392,47 @@ namespace Antlr4.StringTemplate
return stack;
}

-        public virtual string Name()
+        public virtual string Name
{
-            return impl.name;
+            get
+            {
+                return impl.name;
+            }
}

-        public virtual bool IsAnonymousSubtemplate()
+        public virtual bool IsAnonymousSubtemplate
{
-            return impl.isAnonSubtemplate;
+            get
+            {
+                return impl.isAnonSubtemplate;
+            }
}

public virtual int Write(ITemplateWriter @out)
{
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, impl.nativeGroup.errMgr);
-            interp.setDefaultArguments(this);
+            interp.SetDefaultArguments(this);
return interp.Execute(@out, this);
}

public virtual int Write(ITemplateWriter @out, CultureInfo locale)
{
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, locale, impl.nativeGroup.errMgr);
-            interp.setDefaultArguments(this);
+            interp.SetDefaultArguments(this);
return interp.Execute(@out, this);
}

public virtual int Write(ITemplateWriter @out, ITemplateErrorListener listener)
{
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, new ErrorManager(listener));
-            interp.setDefaultArguments(this);
+            interp.SetDefaultArguments(this);
return interp.Execute(@out, this);
}

public virtual int Write(ITemplateWriter @out, CultureInfo locale, ITemplateErrorListener listener)
{
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, locale, new ErrorManager(listener));
-            interp.setDefaultArguments(this);
+            interp.SetDefaultArguments(this);
return interp.Execute(@out, this);
}

@@ -449,7 +455,7 @@ namespace Antlr4.StringTemplate
{
StringWriter @out = new StringWriter();
ITemplateWriter wr = new AutoIndentWriter(@out);
-            wr.setLineWidth(lineWidth);
+            wr.SetLineWidth(lineWidth);
Write(wr, locale);
return @out.ToString();
}
diff --git a/Antlr4.StringTemplate/TemplateGroup.cs b/Antlr4.StringTemplate/TemplateGroup.cs
index 811eec1..16c9cbf 100644
--- a/Antlr4.StringTemplate/TemplateGroup.cs
+++ b/Antlr4.StringTemplate/TemplateGroup.cs
@@ -65,20 +65,20 @@ namespace Antlr4.StringTemplate
public Encoding encoding;

/** Every group can import templates/dictionaries from other groups.
-         *  The list must be synchronized (see importTemplates).
+         *  The list must be synchronized (see ImportTemplates).
*/
protected List<TemplateGroup> imports;

-        public char delimiterStartChar = '<'; // Use <expr> by default
-        public char delimiterStopChar = '>';
+        public readonly char delimiterStartChar = '<'; // Use <expr> by default
+        public readonly char delimiterStopChar = '>';

/** Maps template name to StringTemplate object. synchronized. */
-        protected IDictionary<string, CompiledTemplate> templates = new Dictionary<string, CompiledTemplate>();
+        protected readonly IDictionary<string, CompiledTemplate> templates = new Dictionary<string, CompiledTemplate>();

/** Maps dict names to HashMap objects.  This is the list of dictionaries
*  defined by the user like typeInitMap ::= ["int":"0"]
*/
-        protected IDictionary<string, IDictionary<string, object>> dictionaries = new Dictionary<string, IDictionary<string, object>>();
+        protected readonly IDictionary<string, IDictionary<string, object>> dictionaries = new Dictionary<string, IDictionary<string, object>>();

/** A dictionary that allows people to register a renderer for
*  a particular kind of object for any template evaluated relative to this
@@ -108,7 +108,7 @@ namespace Antlr4.StringTemplate
*  Template initializes with model adaptors that know how to pull
*  properties out of Objects, Maps, and STs.
*/
-        protected TypeRegistry<IModelAdaptor> adaptors =
+        protected readonly TypeRegistry<IModelAdaptor> adaptors =
new TypeRegistry<IModelAdaptor>()
{
{typeof(object), new ObjectModelAdaptor()},
@@ -145,15 +145,15 @@ namespace Antlr4.StringTemplate
/** The primary means of getting an instance of a template from this
*  group. Names must be absolute, fully-qualified names like a/b
*/
-        public virtual Template getInstanceOf(string name)
+        public virtual Template GetInstanceOf(string name)
{
if (name == null)
return null;
-            //System.out.println("getInstanceOf("+name+")");
-            CompiledTemplate c = lookupTemplate(name);
+            //System.out.println("GetInstanceOf("+name+")");
+            CompiledTemplate c = LookupTemplate(name);
if (c != null)
{
-                Template instanceST = createStringTemplate();
+                Template instanceST = CreateStringTemplate();
instanceST.groupThatCreatedThisInstance = this;
instanceST.impl = c;
if (instanceST.impl.formalArguments != null)
@@ -167,13 +167,13 @@ namespace Antlr4.StringTemplate
return null;
}

-        protected internal virtual Template getEmbeddedInstanceOf(Template enclosingInstance, int ip, string name)
+        protected internal virtual Template GetEmbeddedInstanceOf(Template enclosingInstance, int ip, string name)
{
-            Template st = getInstanceOf(name);
+            Template st = GetInstanceOf(name);
if (st == null)
{
-                errMgr.runTimeError(enclosingInstance, ip, ErrorType.NO_SUCH_TEMPLATE, name);
-                st = createStringTemplate();
+                errMgr.RuntimeError(enclosingInstance, ip, ErrorType.NO_SUCH_TEMPLATE, name);
+                st = CreateStringTemplate();
st.impl = new CompiledTemplate();
return st;
}
@@ -182,36 +182,36 @@ namespace Antlr4.StringTemplate
}

/** Create singleton template for use with dictionary values */
-        public virtual Template createSingleton(IToken templateToken)
+        public virtual Template CreateSingleton(IToken templateToken)
{
string template;
if (templateToken.Type == GroupParser.BIGSTRING)
{
-                template = Utility.strip(templateToken.Text, 2);
+                template = Utility.Strip(templateToken.Text, 2);
}
else
{
-                template = Utility.strip(templateToken.Text, 1);
+                template = Utility.Strip(templateToken.Text, 1);
}
-            Template st = createStringTemplate();
+            Template st = CreateStringTemplate();
st.groupThatCreatedThisInstance = this;
-            st.impl = compile(getFileName(), null, null, template, templateToken);
+            st.impl = Compile(FileName, null, null, template, templateToken);
st.impl.hasFormalArgs = false;
st.impl.name = Template.UnknownName;
-            st.impl.defineImplicitlyDefinedTemplates(this);
+            st.impl.DefineImplicitlyDefinedTemplates(this);
return st;
}

/** Is this template defined in this group or from this group below?
*  Names must be absolute, fully-qualified names like /a/b
*/
-        public virtual bool isDefined(string name)
+        public virtual bool IsDefined(string name)
{
-            return lookupTemplate(name) != null;
+            return LookupTemplate(name) != null;
}

/** Look up a fully-qualified name */
-        public virtual CompiledTemplate lookupTemplate(string name)
+        public virtual CompiledTemplate LookupTemplate(string name)
{
CompiledTemplate code;
templates.TryGetValue(name, out code);
@@ -220,10 +220,10 @@ namespace Antlr4.StringTemplate

// try to load from disk and look up again
if (code == null)
-                code = load(name);
+                code = Load(name);

if (code == null)
-                code = lookupImportedTemplate(name);
+                code = LookupImportedTemplate(name);

if (code == null)
templates[name] = NotFoundTemplate;
@@ -231,12 +231,12 @@ namespace Antlr4.StringTemplate
return code;
}

-        /** "unload" all templates and dictionaries but leave renderers, adaptors,
-         *  and import relationships.  This essentially forces next getInstanceOf
+        /** "Unload" all templates and dictionaries but leave renderers, adaptors,
+         *  and import relationships.  This essentially forces next GetInstanceOf
*  to reload templates.
*/
[MethodImpl(MethodImplOptions.Synchronized)]
-        public virtual void unload()
+        public virtual void Unload()
{
templates.Clear();
dictionaries.Clear();
@@ -245,55 +245,55 @@ namespace Antlr4.StringTemplate
/** Load st from disk if dir or load whole group file if .stg file (then
*  return just one template). name is fully-qualified.
*/
-        protected virtual CompiledTemplate load(string name)
+        protected virtual CompiledTemplate Load(string name)
{
return null;
}

/** Force a load if it makes sense for the group */
-        public virtual void load()
+        public virtual void Load()
{
}

-        protected internal virtual CompiledTemplate lookupImportedTemplate(string name)
+        protected internal virtual CompiledTemplate LookupImportedTemplate(string name)
{
//System.out.println("look for "+name+" in "+imports);
if (imports == null)
return null;
foreach (TemplateGroup g in imports)
{
-                CompiledTemplate code = g.lookupTemplate(name);
+                CompiledTemplate code = g.LookupTemplate(name);
if (code != null)
return code;
}
return null;
}

-        public virtual CompiledTemplate rawGetTemplate(string name)
+        public virtual CompiledTemplate RawGetTemplate(string name)
{
CompiledTemplate template;
templates.TryGetValue(name, out template);
return template;
}

-        public virtual IDictionary<string, object> rawGetDictionary(string name)
+        public virtual IDictionary<string, object> RawGetDictionary(string name)
{
IDictionary<string, object> dictionary;
dictionaries.TryGetValue(name, out dictionary);
return dictionary;
}

-        public virtual bool isDictionary(string name)
+        public virtual bool IsDictionary(string name)
{
-            return rawGetDictionary(name) != null;
+            return RawGetDictionary(name) != null;
}

// for testing
-        public virtual CompiledTemplate defineTemplate(string templateName, string template)
+        public virtual CompiledTemplate DefineTemplate(string templateName, string template)
{
try
{
-                CompiledTemplate impl = defineTemplate(templateName, new CommonToken(GroupParser.ID, templateName), null, template, null);
+                CompiledTemplate impl = DefineTemplate(templateName, new CommonToken(GroupParser.ID, templateName), null, template, null);
return impl;
}
catch (TemplateException)
@@ -305,17 +305,17 @@ namespace Antlr4.StringTemplate
}

// for testing
-        public virtual CompiledTemplate defineTemplate(string name, string argsS, string template)
+        public virtual CompiledTemplate DefineTemplate(string name, string argsS, string template)
{
string[] args = argsS.Split(',');
List<FormalArgument> a = new List<FormalArgument>();
foreach (string arg in args)
a.Add(new FormalArgument(arg));

-            return defineTemplate(name, new CommonToken(GroupParser.ID, name), a, template, null);
+            return DefineTemplate(name, new CommonToken(GroupParser.ID, name), a, template, null);
}

-        public virtual CompiledTemplate defineTemplate(string templateName,
+        public virtual CompiledTemplate DefineTemplate(string templateName,
IToken nameT,
List<FormalArgument> args,
string template,
@@ -326,20 +326,20 @@ namespace Antlr4.StringTemplate
if (templateName.IndexOf('.') >= 0)
throw new ArgumentException("cannot have '.' in template names");

-            template = Utility.trimOneStartingNewline(template);
-            template = Utility.trimOneTrailingNewline(template);
+            template = Utility.TrimOneStartingNewline(template);
+            template = Utility.TrimOneTrailingNewline(template);
// compile, passing in templateName as enclosing name for any embedded regions
-            CompiledTemplate code = compile(getFileName(), templateName, args, template, templateToken);
+            CompiledTemplate code = Compile(FileName, templateName, args, template, templateToken);
code.name = templateName;
-            rawDefineTemplate(templateName, code, nameT);
-            code.defineArgDefaultValueTemplates(this);
-            code.defineImplicitlyDefinedTemplates(this); // define any anonymous subtemplates
+            RawDefineTemplate(templateName, code, nameT);
+            code.DefineArgumentDefaultValueTemplates(this);
+            code.DefineImplicitlyDefinedTemplates(this); // define any anonymous subtemplates

return code;
}

/** Make name and alias for target.  Replace any previous def of name */
-        public virtual CompiledTemplate defineTemplateAlias(IToken aliasT, IToken targetT)
+        public virtual CompiledTemplate DefineTemplateAlias(IToken aliasT, IToken targetT)
{
string alias = aliasT.Text;
string target = targetT.Text;
@@ -347,7 +347,7 @@ namespace Antlr4.StringTemplate
templates.TryGetValue(target, out targetCode);
if (targetCode == null)
{
-                errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED, null, aliasT, alias, target);
+                errMgr.CompiletimeError(ErrorType.ALIAS_TARGET_UNDEFINED, null, aliasT, alias, target);
return null;
}

@@ -355,17 +355,17 @@ namespace Antlr4.StringTemplate
return targetCode;
}

-        public virtual CompiledTemplate defineRegion(string enclosingTemplateName,
+        public virtual CompiledTemplate DefineRegion(string enclosingTemplateName,
IToken regionT,
string template)
{
string name = regionT.Text;
-            CompiledTemplate code = compile(getFileName(), enclosingTemplateName, null, template, regionT);
-            string mangled = getMangledRegionName(enclosingTemplateName, name);
+            CompiledTemplate code = Compile(FileName, enclosingTemplateName, null, template, regionT);
+            string mangled = GetMangledRegionName(enclosingTemplateName, name);

-            if (lookupTemplate(mangled) == null)
+            if (LookupTemplate(mangled) == null)
{
-                errMgr.compileTimeError(ErrorType.NO_SUCH_REGION, null, regionT, enclosingTemplateName, name);
+                errMgr.CompiletimeError(ErrorType.NO_SUCH_REGION, null, regionT, enclosingTemplateName, name);
return new CompiledTemplate();
}

@@ -373,11 +373,11 @@ namespace Antlr4.StringTemplate
code.isRegion = true;
code.regionDefType = Template.RegionType.Explicit;

-            rawDefineTemplate(mangled, code, regionT);
+            RawDefineTemplate(mangled, code, regionT);
return code;
}

-        public virtual void defineTemplateOrRegion(
+        public virtual void DefineTemplateOrRegion(
string templateName,
string regionSurroundingTemplateName,
IToken templateToken,
@@ -392,11 +392,11 @@ namespace Antlr4.StringTemplate
{
if (regionSurroundingTemplateName != null)
{
-                    defineRegion(regionSurroundingTemplateName, nameToken, template);
+                    DefineRegion(regionSurroundingTemplateName, nameToken, template);
}
else
{
-                    defineTemplate(templateName, nameToken, args, template, templateToken);
+                    DefineTemplate(templateName, nameToken, args, template, templateToken);
}
}
catch (TemplateException)
@@ -406,7 +406,7 @@ namespace Antlr4.StringTemplate
}
}

-        public virtual void rawDefineTemplate(string name, CompiledTemplate code, IToken defT)
+        public virtual void RawDefineTemplate(string name, CompiledTemplate code, IToken defT)
{
CompiledTemplate prev;
templates.TryGetValue(name, out prev);
@@ -414,17 +414,17 @@ namespace Antlr4.StringTemplate
{
if (!prev.isRegion)
{
-                    errMgr.compileTimeError(ErrorType.TEMPLATE_REDEFINITION, null, defT);
+                    errMgr.CompiletimeError(ErrorType.TEMPLATE_REDEFINITION, null, defT);
return;
}
if (prev.isRegion && prev.regionDefType == Template.RegionType.Embedded)
{
-                    errMgr.compileTimeError(ErrorType.EMBEDDED_REGION_REDEFINITION, null, defT, getUnMangledTemplateName(name));
+                    errMgr.CompiletimeError(ErrorType.EMBEDDED_REGION_REDEFINITION, null, defT, GetUnmangledTemplateName(name));
return;
}
else if (prev.isRegion && prev.regionDefType == Template.RegionType.Explicit)
{
-                    errMgr.compileTimeError(ErrorType.REGION_REDEFINITION, null, defT, getUnMangledTemplateName(name));
+                    errMgr.CompiletimeError(ErrorType.REGION_REDEFINITION, null, defT, GetUnmangledTemplateName(name));
return;
}
}
@@ -432,34 +432,34 @@ namespace Antlr4.StringTemplate
templates[name] = code;
}

-        public virtual void undefineTemplate(string name)
+        public virtual void UndefineTemplate(string name)
{
templates.Remove(name);
}

/** Compile a template */
-        public virtual CompiledTemplate compile(string srcName,
+        public virtual CompiledTemplate Compile(string srcName,
string name,
List<FormalArgument> args,
string template,
IToken templateToken) // for error location
{
-            //System.out.println("TemplateGroup.compile: "+enclosingTemplateName);
+            //System.out.println("TemplateGroup.Compile: "+enclosingTemplateName);
Compiler.TemplateCompiler c = new Compiler.TemplateCompiler(errMgr, delimiterStartChar, delimiterStopChar);
-            CompiledTemplate code = c.compile(srcName, name, args, template, templateToken);
+            CompiledTemplate code = c.Compile(srcName, name, args, template, templateToken);
code.nativeGroup = this;
code.template = template;
return code;
}

/** The "foo" of t() ::= "<@foo()>" is mangled to "region#t#foo" */
-        public static string getMangledRegionName(string enclosingTemplateName, string name)
+        public static string GetMangledRegionName(string enclosingTemplateName, string name)
{
return "region__" + enclosingTemplateName + "__" + name;
}

/** Return "t.foo" from "region__t__foo" */
-        public static string getUnMangledTemplateName(string mangledName)
+        public static string GetUnmangledTemplateName(string mangledName)
{
string t = mangledName.Substring("region__".Length, mangledName.LastIndexOf("__") - "region__".Length);
string r = mangledName.Substring(mangledName.LastIndexOf("__") + 2, mangledName.Length - mangledName.LastIndexOf("__") - 2);
@@ -469,13 +469,13 @@ namespace Antlr4.StringTemplate
/** Define a map for this group; not thread safe...do not keep adding
*  these while you reference them.
*/
-        public virtual void defineDictionary(string name, IDictionary<string, object> mapping)
+        public virtual void DefineDictionary(string name, IDictionary<string, object> mapping)
{
dictionaries[name] = mapping;
}

/** Make this group import templates/dictionaries from g. */
-        public virtual void importTemplates(TemplateGroup g)
+        public virtual void ImportTemplates(TemplateGroup g)
{
if (g == null)
return;
@@ -491,19 +491,19 @@ namespace Antlr4.StringTemplate
*
*  Override this if you want to look for groups elsewhere (database maybe?)
*
-         *  importTemplates("org.foo.proj.G.stg") will try to find file org/foo/proj/G.stg
+         *  ImportTemplates("org.foo.proj.G.stg") will try to find file org/foo/proj/G.stg
*  relative to current dir or in CLASSPATH. The name is not relative to this group.
*  Can use "/a/b/c/myfile.stg" also or "/a/b/c/mydir".
*
*  Pass token so you can give good error if you want.
*/
-        public virtual void importTemplates(IToken fileNameToken)
+        public virtual void ImportTemplates(IToken fileNameToken)
{
string fileName = fileNameToken.Text;
// do nothing upon syntax error
if (fileName == null || fileName.Equals("<missing STRING>"))
return;
-            fileName = Utility.strip(fileName, 1);
+            fileName = Utility.Strip(fileName, 1);
TemplateGroup g = null;
if (fileName.EndsWith(".stg"))
{
@@ -513,11 +513,11 @@ namespace Antlr4.StringTemplate
{
g = new TemplateGroupDirectory(fileName, delimiterStartChar, delimiterStopChar);
}
-            importTemplates(g);
+            ImportTemplates(g);
}

/** Load a group file with full path fileName; it's relative to root by prefix. */
-        public virtual void loadGroupFile(string prefix, string fileName)
+        public virtual void LoadGroupFile(string prefix, string fileName)
{
//System.out.println("load group file prefix="+prefix+", fileName="+fileName);
GroupParser parser = null;
@@ -547,12 +547,12 @@ namespace Antlr4.StringTemplate
*  This must invalidate cache entries, so set your adaptors up before
*  Render()ing your templates for efficiency.
*/
-        public virtual void registerModelAdaptor(Type attributeType, IModelAdaptor adaptor)
+        public virtual void RegisterModelAdaptor(Type attributeType, IModelAdaptor adaptor)
{
adaptors[attributeType] = adaptor;
}

-        public virtual IModelAdaptor getModelAdaptor(Type attributeType)
+        public virtual IModelAdaptor GetModelAdaptor(Type attributeType)
{
IModelAdaptor adaptor;
adaptors.TryGetValue(attributeType, out adaptor);
@@ -563,13 +563,13 @@ namespace Antlr4.StringTemplate
*  templates evaluated relative to this group.  Use r to Render if
*  object in question is instanceof(attributeType).
*/
-        public virtual void registerRenderer(Type attributeType, IAttributeRenderer r)
+        public virtual void RegisterRenderer(Type attributeType, IAttributeRenderer r)
{
renderers = renderers ?? new TypeRegistry<IAttributeRenderer>();
renderers[attributeType] = r;
}

-        public virtual IAttributeRenderer getAttributeRenderer(Type attributeType)
+        public virtual IAttributeRenderer GetAttributeRenderer(Type attributeType)
{
if (renderers == null)
return null;
@@ -580,7 +580,7 @@ namespace Antlr4.StringTemplate
}

/** StringTemplate object factory; each group can have its own. */
-        public virtual Template createStringTemplate()
+        public virtual Template CreateStringTemplate()
{
// TODO: try making a mem pool?
if (debug)
@@ -589,7 +589,7 @@ namespace Antlr4.StringTemplate
return new Template();
}

-        public virtual Template createStringTemplate(Template proto)
+        public virtual Template CreateStringTemplate(Template proto)
{
if (debug)
return new DebugST(proto);
@@ -597,22 +597,28 @@ namespace Antlr4.StringTemplate
return new Template(proto);
}

-        public virtual string getName()
+        public virtual string Name
{
-            return "<no name>;";
+            get
+            {
+                return "<no name>;";
+            }
}

-        public virtual string getFileName()
+        public virtual string FileName
{
-            return null;
+            get
+            {
+                return null;
+            }
}

-        public virtual string toString()
+        public override string ToString()
{
-            return getName();
+            return Name;
}

-        public virtual string show()
+        public virtual string Show()
{
StringBuilder buf = new StringBuilder();
if (imports != null)
@@ -641,14 +647,17 @@ namespace Antlr4.StringTemplate
return buf.ToString();
}

-        public virtual ITemplateErrorListener getListener()
+        public virtual ITemplateErrorListener Listener
{
-            return errMgr.Listener;
-        }
+            get
+            {
+                return errMgr.Listener;
+            }

-        public virtual void setListener(ITemplateErrorListener listener)
-        {
-            errMgr = new ErrorManager(listener);
+            set
+            {
+                errMgr = new ErrorManager(value);
+            }
}
}
}
diff --git a/Antlr4.StringTemplate/TemplateGroupDirectory.cs b/Antlr4.StringTemplate/TemplateGroupDirectory.cs
index f249998..39e2b75 100644
--- a/Antlr4.StringTemplate/TemplateGroupDirectory.cs
+++ b/Antlr4.StringTemplate/TemplateGroupDirectory.cs
@@ -94,7 +94,7 @@ namespace Antlr4.StringTemplate
}
catch (Exception e)
{
-                errMgr.internalError(null, "can't load group dir " + dirName, e);
+                errMgr.InternalError(null, "can't Load group dir " + dirName, e);
}
}

@@ -119,9 +119,9 @@ namespace Antlr4.StringTemplate
/** Load a template from dir or group file.  Group file is given
*  precedence over dir with same name.
*/
-        protected override CompiledTemplate load(string name)
+        protected override CompiledTemplate Load(string name)
{
-            string parent = Utility.getPrefix(name);
+            string parent = Utility.GetPrefix(name);

if (Path.IsPathRooted(parent))
throw new ArgumentException();
@@ -134,12 +134,12 @@ namespace Antlr4.StringTemplate
}
catch (UriFormatException e)
{
-                errMgr.internalError(null, "bad URL: " + Path.Combine(root.LocalPath, parent) + ".stg", e);
+                errMgr.InternalError(null, "bad URL: " + Path.Combine(root.LocalPath, parent) + ".stg", e);
return null;
}

if (!File.Exists(groupFileURL.LocalPath))
-                return loadTemplateFile(parent, name + ".st");
+                return LoadTemplateFile(parent, name + ".st");
#if false
InputStream @is = null;
try
@@ -168,7 +168,7 @@ namespace Antlr4.StringTemplate
}
#endif

-            loadGroupFile(parent, Path.Combine(root.LocalPath, parent) + ".stg");
+            LoadGroupFile(parent, Path.Combine(root.LocalPath, parent) + ".stg");

CompiledTemplate template;
templates.TryGetValue(name, out template);
@@ -176,7 +176,7 @@ namespace Antlr4.StringTemplate
}

/** Load full path name .st file relative to root by prefix */
-        public virtual CompiledTemplate loadTemplateFile(string prefix, string fileName)
+        public virtual CompiledTemplate LoadTemplateFile(string prefix, string fileName)
{
if (Path.IsPathRooted(fileName))
throw new ArgumentException();
@@ -190,7 +190,7 @@ namespace Antlr4.StringTemplate
}
catch (UriFormatException me)
{
-                errMgr.runTimeError(null, 0, ErrorType.INVALID_TEMPLATE_NAME, me, Path.Combine(root.LocalPath, fileName));
+                errMgr.RuntimeError(null, 0, ErrorType.INVALID_TEMPLATE_NAME, me, Path.Combine(root.LocalPath, fileName));
return null;
}

@@ -217,7 +217,7 @@ namespace Antlr4.StringTemplate
}
catch (RecognitionException re)
{
-                errMgr.groupSyntaxError(ErrorType.SYNTAX_ERROR, Path.GetFileName(f.LocalPath), re, re.Message);
+                errMgr.GroupSyntaxError(ErrorType.SYNTAX_ERROR, Path.GetFileName(f.LocalPath), re, re.Message);
}

CompiledTemplate template;
@@ -225,14 +225,20 @@ namespace Antlr4.StringTemplate
return template;
}

-        public override string getName()
+        public override string Name
{
-            return groupDirName;
+            get
+            {
+                return groupDirName;
+            }
}

-        public override string getFileName()
+        public override string FileName
{
-            return Path.GetFileName(root.LocalPath);
+            get
+            {
+                return Path.GetFileName(root.LocalPath);
+            }
}
}
}
diff --git a/Antlr4.StringTemplate/TemplateGroupFile.cs b/Antlr4.StringTemplate/TemplateGroupFile.cs
index 404aad7..cf48285 100644
--- a/Antlr4.StringTemplate/TemplateGroupFile.cs
+++ b/Antlr4.StringTemplate/TemplateGroupFile.cs
@@ -94,7 +94,7 @@ namespace Antlr4.StringTemplate
}
catch (Exception e)
{
-                errMgr.internalError(null, "can't load group file " + fileName, e);
+                errMgr.InternalError(null, "can't Load group file " + fileName, e);
}

this.fileName = fileName;
@@ -118,31 +118,31 @@ namespace Antlr4.StringTemplate
this.encoding = encoding;
}

-        public override bool isDefined(string name)
+        public override bool IsDefined(string name)
{
if (!alreadyLoaded)
-                load();
-            return base.isDefined(name);
+                Load();
+            return base.IsDefined(name);
}

[MethodImpl(MethodImplOptions.Synchronized)]
-        public override void unload()
+        public override void Unload()
{
-            base.unload();
+            base.Unload();
alreadyLoaded = false;
}

-        protected override CompiledTemplate load(string name)
+        protected override CompiledTemplate Load(string name)
{
if (!alreadyLoaded)
-                load();
+                Load();

CompiledTemplate template;
templates.TryGetValue(name, out template);
return template;
}

-        public override void load()
+        public override void Load()
{
if (alreadyLoaded)
return;
@@ -150,25 +150,31 @@ namespace Antlr4.StringTemplate
alreadyLoaded = true; // do before actual load to say we're doing it
// no prefix since this group file is the entire group, nothing lives
// beneath it.
-            loadGroupFile("", url.ToString());
+            LoadGroupFile("", url.ToString());
}

-        public override string show()
+        public override string Show()
{
if (!alreadyLoaded)
-                load();
+                Load();

-            return base.show();
+            return base.Show();
}

-        public override string getName()
+        public override string Name
{
-            return Path.GetFileNameWithoutExtension(fileName);
+            get
+            {
+                return Path.GetFileNameWithoutExtension(fileName);
+            }
}

-        public override string getFileName()
+        public override string FileName
{
-            return fileName;
+            get
+            {
+                return fileName;
+            }
}
}
}
diff --git a/Antlr4.Test.StringTemplate/ErrorBufferAllErrors.cs b/Antlr4.Test.StringTemplate/ErrorBufferAllErrors.cs
index 60072a5..87a802c 100644
--- a/Antlr4.Test.StringTemplate/ErrorBufferAllErrors.cs
+++ b/Antlr4.Test.StringTemplate/ErrorBufferAllErrors.cs
@@ -38,7 +38,7 @@ namespace Antlr4.Test.StringTemplate

public class ErrorBufferAllErrors : ErrorBuffer
{
-        public override void runTimeError(TemplateMessage msg)
+        public override void RuntimeError(TemplateMessage msg)
{
ErrorList.Add(msg);
}
diff --git a/Antlr4.Test.StringTemplate/Extensions/ListExtensions.cs b/Antlr4.Test.StringTemplate/Extensions/ListExtensions.cs
index fb876d1..90324fd 100644
--- a/Antlr4.Test.StringTemplate/Extensions/ListExtensions.cs
+++ b/Antlr4.Test.StringTemplate/Extensions/ListExtensions.cs
@@ -45,9 +45,9 @@ namespace Antlr4.Test.StringTemplate.Extensions
public static string ToListString(this IList list)
{
TemplateGroup group = new TemplateGroup('$', '$');
-            group.defineTemplate("listTemplate", "list", "[$list:{x|$x$}; separator=\", \"$]");
-            group.registerRenderer(typeof(IList), new CollectionRenderer());
-            Template st = group.getInstanceOf("listTemplate");
+            group.DefineTemplate("listTemplate", "list", "[$list:{x|$x$}; separator=\", \"$]");
+            group.RegisterRenderer(typeof(IList), new CollectionRenderer());
+            Template st = group.GetInstanceOf("listTemplate");
st.Add("list", list);
return st.Render();
}
diff --git a/Antlr4.Test.StringTemplate/TestCompiler.cs b/Antlr4.Test.StringTemplate/TestCompiler.cs
index 7933450..4f6e9a8 100644
--- a/Antlr4.Test.StringTemplate/TestCompiler.cs
+++ b/Antlr4.Test.StringTemplate/TestCompiler.cs
@@ -51,13 +51,13 @@ namespace Antlr4.Test.StringTemplate
public void TestAttr()
{
string template = "hi <name>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, " +
"Write, " +
"load_attr 1, " +
"Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name]";
string stringsResult = code.strings.ToListString();
@@ -68,10 +68,10 @@ namespace Antlr4.Test.StringTemplate
public void TestInclude()
{
string template = "hi <foo()>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, Write, new 1 0, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , foo]";
string stringsResult = code.strings.ToListString();
@@ -82,11 +82,11 @@ namespace Antlr4.Test.StringTemplate
public void TestSuperInclude()
{
string template = "<super.foo()>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"super_new 0 0, Write";
-            code.dump();
-            string asmResult = code.Instrs();
+            code.Dump();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[foo]";
string stringsResult = code.strings.ToListString();
@@ -97,10 +97,10 @@ namespace Antlr4.Test.StringTemplate
public void TestSuperIncludeWithArgs()
{
string template = "<super.foo(a,{b})>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_attr 0, new 1 0, super_new 2 2, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[a, _sub1, foo]";
string stringsResult = code.strings.ToListString();
@@ -111,10 +111,10 @@ namespace Antlr4.Test.StringTemplate
public void TestSuperIncludeWithNamedArgs()
{
string template = "<super.foo(x=a,y={b})>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"args, load_attr 0, store_arg 1, new 2 0, store_arg 3, super_new_box_args 4, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[a, x, _sub1, y, foo]";
string stringsResult = code.strings.ToListString();
@@ -125,10 +125,10 @@ namespace Antlr4.Test.StringTemplate
public void TestIncludeWithArgs()
{
string template = "hi <foo(a,b)>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, Write, load_attr 1, load_attr 2, new 3 2, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , a, b, foo]";
string stringsResult = code.strings.ToListString();
@@ -139,10 +139,10 @@ namespace Antlr4.Test.StringTemplate
public void TestAnonIncludeArgs()
{
string template = "<({ a, b | <a><b>})>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"new 0 0, tostr, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[_sub1]";
string stringsResult = code.strings.ToListString();
@@ -154,7 +154,7 @@ namespace Antlr4.Test.StringTemplate
{
ITemplateErrorListener errors = new ErrorBuffer();
string template = "<a:{foo}>";
-            CompiledTemplate code = new TemplateCompiler(new ErrorManager(errors)).compile(template);
+            CompiledTemplate code = new TemplateCompiler(new ErrorManager(errors)).Compile(template);
string expected = "1:3: anonymous template has 0 arg(s) but mapped across 1 value(s)" + newline;
Assert.AreEqual(expected, errors.ToString());
}
@@ -164,7 +164,7 @@ namespace Antlr4.Test.StringTemplate
{
ITemplateErrorListener errors = new ErrorBuffer();
string template = "<a,b:{x|foo}>";
-            CompiledTemplate code = new TemplateCompiler(new ErrorManager(errors)).compile(template);
+            CompiledTemplate code = new TemplateCompiler(new ErrorManager(errors)).Compile(template);
string expected = "1:5: anonymous template has 1 arg(s) but mapped across 2 value(s)" + newline;
Assert.AreEqual(expected, errors.ToString());
}
@@ -174,7 +174,7 @@ namespace Antlr4.Test.StringTemplate
{
ITemplateErrorListener errors = new ErrorBuffer();
string template = "<a:{x|foo},{bar}>";
-            CompiledTemplate code = new TemplateCompiler(new ErrorManager(errors)).compile(template);
+            CompiledTemplate code = new TemplateCompiler(new ErrorManager(errors)).Compile(template);
string expected = "1:11: anonymous template has 0 arg(s) but mapped across 1 value(s)" + newline;
Assert.AreEqual(expected, errors.ToString());
}
@@ -183,10 +183,10 @@ namespace Antlr4.Test.StringTemplate
public void TestIndirectIncludeWitArgs()
{
string template = "hi <(foo)(a,b)>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, Write, load_attr 1, tostr, load_attr 2, load_attr 3, new_ind 2, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , foo, a, b]";
string stringsResult = code.strings.ToListString();
@@ -197,10 +197,10 @@ namespace Antlr4.Test.StringTemplate
public void TestProp()
{
string template = "hi <a.b>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, Write, load_attr 1, load_prop 2, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , a, b]";
string stringsResult = code.strings.ToListString();
@@ -211,11 +211,11 @@ namespace Antlr4.Test.StringTemplate
public void TestProp2()
{
string template = "<u.id>: <u.name>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_attr 0, load_prop 1, Write, load_str 2, Write, " +
"load_attr 0, load_prop 3, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[u, id, : , name]";
string stringsResult = code.strings.ToListString();
@@ -226,10 +226,10 @@ namespace Antlr4.Test.StringTemplate
public void TestMap()
{
string template = "<name:bold()>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_attr 0, null, new 1 1, map, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, bold]";
string stringsResult = code.strings.ToListString();
@@ -240,11 +240,11 @@ namespace Antlr4.Test.StringTemplate
public void TestMapAsOption()
{
string template = "<a; wrap=name:bold()>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_attr 0, options, load_attr 1, null, new 2 1, map, " +
"store_option 4, write_opt";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[a, name, bold]";
string stringsResult = code.strings.ToListString();
@@ -255,10 +255,10 @@ namespace Antlr4.Test.StringTemplate
public void TestMapArg()
{
string template = "<name:bold(x)>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_attr 0, null, load_attr 1, new 2 2, map, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, x, bold]";
string stringsResult = code.strings.ToListString();
@@ -269,10 +269,10 @@ namespace Antlr4.Test.StringTemplate
public void TestIndirectMapArg()
{
string template = "<name:(t)(x)>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_attr 0, load_attr 1, tostr, null, load_attr 2, new_ind 2, map, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, t, x]";
string stringsResult = code.strings.ToListString();
@@ -283,10 +283,10 @@ namespace Antlr4.Test.StringTemplate
public void TestRepeatedMap()
{
string template = "<name:bold():italics()>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_attr 0, null, new 1 1, map, null, new 2 1, map, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, bold, italics]";
string stringsResult = code.strings.ToListString();
@@ -297,11 +297,11 @@ namespace Antlr4.Test.StringTemplate
public void TestRepeatedMapArg()
{
string template = "<name:bold(x):italics(x,y)>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_attr 0, null, load_attr 1, new 2 2, map, " +
"null, load_attr 1, load_attr 3, new 4 3, map, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, x, bold, y, italics]";
string stringsResult = code.strings.ToListString();
@@ -312,10 +312,10 @@ namespace Antlr4.Test.StringTemplate
public void TestRotMap()
{
string template = "<name:bold(),italics()>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_attr 0, null, new 1 1, null, new 2 1, rot_map 2, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, bold, italics]";
string stringsResult = code.strings.ToListString();
@@ -326,10 +326,10 @@ namespace Antlr4.Test.StringTemplate
public void TestRotMapArg()
{
string template = "<name:bold(x),italics()>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_attr 0, null, load_attr 1, new 2 2, null, new 3 1, rot_map 2, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, x, bold, italics]";
string stringsResult = code.strings.ToListString();
@@ -340,10 +340,10 @@ namespace Antlr4.Test.StringTemplate
public void TestZipMap()
{
string template = "<names,phones:bold()>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_attr 0, load_attr 1, null, null, new 2 2, zip_map 2, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[names, phones, bold]";
string stringsResult = code.strings.ToListString();
@@ -354,10 +354,10 @@ namespace Antlr4.Test.StringTemplate
public void TestZipMapArg()
{
string template = "<names,phones:bold(x)>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_attr 0, load_attr 1, null, null, load_attr 2, new 3 3, zip_map 2, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[names, phones, x, bold]";
string stringsResult = code.strings.ToListString();
@@ -368,10 +368,10 @@ namespace Antlr4.Test.StringTemplate
public void TestAnonMap()
{
string template = "<name:{n | <n>}>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_attr 0, null, new 1 1, map, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, _sub1]";
string stringsResult = code.strings.ToListString();
@@ -382,10 +382,10 @@ namespace Antlr4.Test.StringTemplate
public void TestAnonZipMap()
{
string template = "<a,b:{x,y | <x><y>}>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_attr 0, load_attr 1, null, null, new 2 2, zip_map 2, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[a, b, _sub1]";
string stringsResult = code.strings.ToListString();
@@ -396,10 +396,10 @@ namespace Antlr4.Test.StringTemplate
public void TestIf()
{
string template = "go: <if(name)>hi, foo<endif>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, Write, load_attr 1, brf 14, load_str 2, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo]";
string stringsResult = code.strings.ToListString();
@@ -410,7 +410,7 @@ namespace Antlr4.Test.StringTemplate
public void TestIfElse()
{
string template = "go: <if(name)>hi, foo<else>bye<endif>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, " +
"Write, " +
@@ -421,7 +421,7 @@ namespace Antlr4.Test.StringTemplate
"br 21, " +
"load_str 3, " +
"Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo, bye]";
string stringsResult = code.strings.ToListString();
@@ -432,7 +432,7 @@ namespace Antlr4.Test.StringTemplate
public void TestElseIf()
{
string template = "go: <if(name)>hi, foo<elseif(user)>a user<endif>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, " +
"Write, " +
@@ -445,7 +445,7 @@ namespace Antlr4.Test.StringTemplate
"brf 27, " +
"load_str 4, " +
"Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo, user, a user]";
string stringsResult = code.strings.ToListString();
@@ -456,7 +456,7 @@ namespace Antlr4.Test.StringTemplate
public void TestElseIfElse()
{
string template = "go: <if(name)>hi, foo<elseif(user)>a user<else>bye<endif>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, " +
"Write, " +
@@ -472,7 +472,7 @@ namespace Antlr4.Test.StringTemplate
"br 34, " +
"load_str 5, " +
"Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo, user, a user, bye]";
string stringsResult = code.strings.ToListString();
@@ -483,10 +483,10 @@ namespace Antlr4.Test.StringTemplate
public void TestOption()
{
string template = "hi <name; separator=\"x\">";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, Write, load_attr 1, options, load_str 2, store_option 3, write_opt";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, x]";
string stringsResult = code.strings.ToListString();
@@ -497,10 +497,10 @@ namespace Antlr4.Test.StringTemplate
public void TestOptionAsTemplate()
{
string template = "hi <name; separator={, }>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, Write, load_attr 1, options, new 2 0, store_option 3, write_opt";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, _sub1]";
string stringsResult = code.strings.ToListString();
@@ -511,7 +511,7 @@ namespace Antlr4.Test.StringTemplate
public void TestOptions()
{
string template = "hi <name; anchor, wrap=foo(), separator=\", \">";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, " +
"Write, " +
@@ -528,7 +528,7 @@ namespace Antlr4.Test.StringTemplate
"[hi , name, true, foo, , ]";
string stringsResult = code.strings.ToListString();
Assert.AreEqual(stringsExpected, stringsResult);
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
}

@@ -536,9 +536,9 @@ namespace Antlr4.Test.StringTemplate
public void TestEmptyList()
{
string template = "<[]>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected = "list, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[]";
string stringsResult = code.strings.ToListString();
@@ -549,9 +549,9 @@ namespace Antlr4.Test.StringTemplate
public void TestList()
{
string template = "<[a,b]>";
-            CompiledTemplate code = new TemplateCompiler().compile(template);
+            CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected = "list, load_attr 0, Add, load_attr 1, Add, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[a, b]";
string stringsResult = code.strings.ToListString();
@@ -563,10 +563,10 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<@r>foo<@end>";
// compile as if in root dir and in template 'a'
-            CompiledTemplate code = new TemplateCompiler('<', '>').compile("a", template);
+            CompiledTemplate code = new TemplateCompiler('<', '>').Compile("a", template);
string asmExpected =
"new 0 0, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[region__a__r]";
string stringsResult = code.strings.ToListString();
@@ -578,10 +578,10 @@ namespace Antlr4.Test.StringTemplate
{
string template = "x:<@r()>";
// compile as if in root dir and in template 'a'
-            CompiledTemplate code = new TemplateCompiler('<', '>').compile("a", template);
+            CompiledTemplate code = new TemplateCompiler('<', '>').Compile("a", template);
string asmExpected =
"load_str 0, Write, new 1 0, Write";
-            string asmResult = code.Instrs();
+            string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[x:, region__a__r]";
string stringsResult = code.strings.ToListString();
diff --git a/Antlr4.Test.StringTemplate/TestCoreBasics.cs b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
index da89b11..2ca52ae 100644
--- a/Antlr4.Test.StringTemplate/TestCoreBasics.cs
+++ b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
@@ -72,8 +72,8 @@ namespace Antlr4.Test.StringTemplate
ErrorBuffer errors = new ErrorBuffer();
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            Template st = group.getInstanceOf("t");
+            group.Listener = errors;
+            Template st = group.GetInstanceOf("t");
string result = null;
try
{
@@ -203,7 +203,7 @@ namespace Antlr4.Test.StringTemplate
ErrorBufferAllErrors errors = new ErrorBufferAllErrors();
string template = "<u.qqq>";
TemplateGroup group = new TemplateGroup();
-            group.setListener(errors);
+            group.Listener = errors;
Template st = new Template(group, template);
st.Add("u", new User(1, "parrt"));
string expected = "";
@@ -219,7 +219,7 @@ namespace Antlr4.Test.StringTemplate
{
ErrorBufferAllErrors errors = new ErrorBufferAllErrors();
TemplateGroup group = new TemplateGroup();
-            group.setListener(errors);
+            group.Listener = errors;
string template = "<u.(qqq)>";
Template st = new Template(group, template);
st.Add("u", new User(1, "parrt"));
@@ -237,7 +237,7 @@ namespace Antlr4.Test.StringTemplate
{
ErrorBufferAllErrors errors = new ErrorBufferAllErrors();
TemplateGroup group = new TemplateGroup();
-            group.setListener(errors);
+            group.Listener = errors;
string template = "<u.(name)>";
Template st = new Template(group, template);
st.Add("u", new User(1, "parrt"));
@@ -253,11 +253,11 @@ namespace Antlr4.Test.StringTemplate
[TestMethod]
public void TestInclude()
{
-            string template = "load <box()>;";
+            string template = "Load <box()>;";
Template st = new Template(template);
-            st.impl.nativeGroup.defineTemplate("box", "kewl\ndaddy");
+            st.impl.nativeGroup.DefineTemplate("box", "kewl\ndaddy");
string expected =
-                "load kewl" + newline +
+                "Load kewl" + newline +
"daddy;";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -266,12 +266,12 @@ namespace Antlr4.Test.StringTemplate
[TestMethod]
public void TestIncludeWithArg()
{
-            string template = "load <box(\"arg\")>;";
+            string template = "Load <box(\"arg\")>;";
Template st = new Template(template);
-            st.impl.nativeGroup.defineTemplate("box", "x", "kewl <x> daddy");
-            st.impl.dump();
+            st.impl.nativeGroup.DefineTemplate("box", "x", "kewl <x> daddy");
+            st.impl.Dump();
st.Add("name", "Ter");
-            string expected = "load kewl arg daddy;";
+            string expected = "Load kewl arg daddy;";
string result = st.Render();
Assert.AreEqual(expected, result);
}
@@ -279,12 +279,12 @@ namespace Antlr4.Test.StringTemplate
[TestMethod]
public void TestIncludeWithArg2()
{
-            string template = "load <box(\"arg\", foo())>;";
+            string template = "Load <box(\"arg\", foo())>;";
Template st = new Template(template);
-            st.impl.nativeGroup.defineTemplate("box", "x,y", "kewl <x> <y> daddy");
-            st.impl.nativeGroup.defineTemplate("foo", "blech");
+            st.impl.nativeGroup.DefineTemplate("box", "x,y", "kewl <x> <y> daddy");
+            st.impl.nativeGroup.DefineTemplate("foo", "blech");
st.Add("name", "Ter");
-            string expected = "load kewl arg blech daddy;";
+            string expected = "Load kewl arg blech daddy;";
string result = st.Render();
Assert.AreEqual(expected, result);
}
@@ -292,12 +292,12 @@ namespace Antlr4.Test.StringTemplate
[TestMethod]
public void TestIncludeWithNestedArgs()
{
-            string template = "load <box(foo(\"arg\"))>;";
+            string template = "Load <box(foo(\"arg\"))>;";
Template st = new Template(template);
-            st.impl.nativeGroup.defineTemplate("box", "y", "kewl <y> daddy");
-            st.impl.nativeGroup.defineTemplate("foo", "x", "blech <x>");
+            st.impl.nativeGroup.DefineTemplate("box", "y", "kewl <y> daddy");
+            st.impl.nativeGroup.DefineTemplate("foo", "x", "blech <x>");
st.Add("name", "Ter");
-            string expected = "load kewl blech arg daddy;";
+            string expected = "Load kewl blech arg daddy;";
string result = st.Render();
Assert.AreEqual(expected, result);
}
@@ -306,9 +306,9 @@ namespace Antlr4.Test.StringTemplate
public void TestDefineTemplate()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("inc", "x", "<x>+1");
-            group.defineTemplate("test", "name", "hi <name>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("inc", "x", "<x>+1");
+            group.DefineTemplate("test", "name", "hi <name>!");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
st.Add("name", "Sumana");
@@ -322,9 +322,9 @@ namespace Antlr4.Test.StringTemplate
public void TestMap()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("inc", "x", "[<x>]");
-            group.defineTemplate("test", "name", "hi <name:inc()>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("inc", "x", "[<x>]");
+            group.DefineTemplate("test", "name", "hi <name:inc()>!");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
st.Add("name", "Sumana");
@@ -338,9 +338,9 @@ namespace Antlr4.Test.StringTemplate
public void TestIndirectMap()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("inc", "x", "[<x>]");
-            group.defineTemplate("test", "t,name", "<name:(t)()>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("inc", "x", "[<x>]");
+            group.DefineTemplate("test", "t,name", "<name:(t)()>!");
+            Template st = group.GetInstanceOf("test");
st.Add("t", "inc");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -360,7 +360,7 @@ namespace Antlr4.Test.StringTemplate
"bold(x) ::= <<*<x>*>>\n";
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            Template st = group.getInstanceOf("test");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
st.Add("name", "Sumana");
@@ -373,8 +373,8 @@ namespace Antlr4.Test.StringTemplate
public void TestParallelMap()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "names,phones", "hi <names,phones:{n,p | <n>:<p>;}>");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "names,phones", "hi <names,phones:{n,p | <n>:<p>;}>");
+            Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
st.Add("names", "Sumana");
@@ -391,8 +391,8 @@ namespace Antlr4.Test.StringTemplate
public void TestParallelMapWith3Versus2Elements()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "names,phones", "hi <names,phones:{n,p | <n>:<p>;}>");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "names,phones", "hi <names,phones:{n,p | <n>:<p>;}>");
+            Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
st.Add("names", "Sumana");
@@ -408,10 +408,10 @@ namespace Antlr4.Test.StringTemplate
public void TestParallelMapThenMap()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("bold", "x", "[<x>]");
-            group.defineTemplate("test", "names,phones",
+            group.DefineTemplate("bold", "x", "[<x>]");
+            group.DefineTemplate("test", "names,phones",
"hi <names,phones:{n,p | <n>:<p>;}:bold()>");
-            Template st = group.getInstanceOf("test");
+            Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
st.Add("names", "Sumana");
@@ -427,10 +427,10 @@ namespace Antlr4.Test.StringTemplate
public void TestMapThenParallelMap()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("bold", "x", "[<x>]");
-            group.defineTemplate("test", "names,phones",
+            group.DefineTemplate("bold", "x", "[<x>]");
+            group.DefineTemplate("test", "names,phones",
"hi <[names:bold()],phones:{n,p | <n>:<p>;}>");
-            Template st = group.getInstanceOf("test");
+            Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
st.Add("names", "Sumana");
@@ -446,9 +446,9 @@ namespace Antlr4.Test.StringTemplate
public void TestMapIndexes()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("inc", "x,i", "<i>:<x>");
-            group.defineTemplate("test", "name", "<name:{n|<inc(n,i)>}; separator=\", \">");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("inc", "x,i", "<i>:<x>");
+            group.DefineTemplate("test", "name", "<name:{n|<inc(n,i)>}; separator=\", \">");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
st.Add("name", null); // don't count this one
@@ -463,8 +463,8 @@ namespace Antlr4.Test.StringTemplate
public void TestMapIndexes2()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "<name:{n | <i>:<n>}; separator=\", \">");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", "<name:{n | <i>:<n>}; separator=\", \">");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
st.Add("name", null); // don't count this one. still can't apply subtemplate to null value
@@ -479,9 +479,9 @@ namespace Antlr4.Test.StringTemplate
public void TestMapSingleValue()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("a", "x", "[<x>]");
-            group.defineTemplate("test", "name", "hi <name:a()>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("a", "x", "[<x>]");
+            group.DefineTemplate("test", "name", "hi <name:a()>!");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
string expected = "hi [Ter]!";
string result = st.Render();
@@ -492,9 +492,9 @@ namespace Antlr4.Test.StringTemplate
public void TestMapNullValue()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("a", "x", "[<x>]");
-            group.defineTemplate("test", "name", "hi <name:a()>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("a", "x", "[<x>]");
+            group.DefineTemplate("test", "name", "hi <name:a()>!");
+            Template st = group.GetInstanceOf("test");
string expected = "hi !";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -504,8 +504,8 @@ namespace Antlr4.Test.StringTemplate
public void TestMapNullValueInList()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "<name; separator=\", \">");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", "<name; separator=\", \">");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
st.Add("name", null); // don't print this one
@@ -520,10 +520,10 @@ namespace Antlr4.Test.StringTemplate
public void TestRepeatedMap()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("a", "x", "[<x>]");
-            group.defineTemplate("b", "x", "(<x>)");
-            group.defineTemplate("test", "name", "hi <name:a():b()>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("a", "x", "[<x>]");
+            group.DefineTemplate("b", "x", "(<x>)");
+            group.DefineTemplate("test", "name", "hi <name:a():b()>!");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
st.Add("name", "Sumana");
@@ -537,10 +537,10 @@ namespace Antlr4.Test.StringTemplate
public void TestRoundRobinMap()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("a", "x", "[<x>]");
-            group.defineTemplate("b", "x", "(<x>)");
-            group.defineTemplate("test", "name", "hi <name:a(),b()>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("a", "x", "[<x>]");
+            group.DefineTemplate("b", "x", "(<x>)");
+            group.DefineTemplate("test", "name", "hi <name:a(),b()>!");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
st.Add("name", "Sumana");
@@ -616,8 +616,8 @@ namespace Antlr4.Test.StringTemplate
">>\n";
writeFile(dir, "group.stg", groupFile);
TemplateGroupFile group = new TemplateGroupFile(dir + "/group.stg");
-            Template st = group.getInstanceOf("a");
-            st.impl.dump();
+            Template st = group.GetInstanceOf("a");
+            st.impl.Dump();
string expected = "foo" + newline +
"bar";
string result = st.Render();
@@ -834,8 +834,8 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparator()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "names", "<names:{n | case <n>}; separator=\", \">");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "names", "<names:{n | case <n>}; separator=\", \">");
+            Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
string expected =
@@ -848,8 +848,8 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparatorInList()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "names", "<names:{n | case <n>}; separator=\", \">");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "names", "<names:{n | case <n>}; separator=\", \">");
+            Template st = group.GetInstanceOf("test");
st.Add("names", new List<string>() { "Ter", "Tom" });
string expected =
"case Ter, case Tom";
@@ -862,7 +862,7 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<a:t(x,y),u()>";
Template st = new Template(template);
-            st.impl.dump();
+            st.impl.Dump();
}
}
}
diff --git a/Antlr4.Test.StringTemplate/TestDebugEvents.cs b/Antlr4.Test.StringTemplate/TestDebugEvents.cs
index a89cfe0..ba469d8 100644
--- a/Antlr4.Test.StringTemplate/TestDebugEvents.cs
+++ b/Antlr4.Test.StringTemplate/TestDebugEvents.cs
@@ -51,8 +51,8 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
TemplateGroup.debug = true;
-            DebugST st = (DebugST)group.getInstanceOf("t");
-            List<InterpEvent> events = st.getEvents();
+            DebugST st = (DebugST)group.GetInstanceOf("t");
+            List<InterpEvent> events = st.GetEvents();
string expected =
"[EvalExprEvent{self=t(), start=0, stop=2, expr=foo}," +
" EvalTemplateEvent{self=t(), start=0, stop=2}]";
@@ -69,8 +69,8 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
TemplateGroup.debug = true;
-            DebugST st = (DebugST)group.getInstanceOf("t");
-            List<InterpEvent> events = st.getEvents();
+            DebugST st = (DebugST)group.GetInstanceOf("t");
+            List<InterpEvent> events = st.GetEvents();
string expected =
"[EvalExprEvent{self=t(), start=0, stop=-1, expr=<x>}," +
" EvalExprEvent{self=t(), start=0, stop=0, expr= }," +
@@ -89,8 +89,8 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
TemplateGroup.debug = true;
-            DebugST st = (DebugST)group.getInstanceOf("t");
-            List<InterpEvent> events = st.getEvents();
+            DebugST st = (DebugST)group.GetInstanceOf("t");
+            List<InterpEvent> events = st.GetEvents();
string expected =
"[EvalExprEvent{self=t(), start=0, stop=0, expr=[}," +
" EvalExprEvent{self=u(), start=1, stop=0, expr=<x>}," +
diff --git a/Antlr4.Test.StringTemplate/TestDictionaries.cs b/Antlr4.Test.StringTemplate/TestDictionaries.cs
index a50a741..86bb548 100644
--- a/Antlr4.Test.StringTemplate/TestDictionaries.cs
+++ b/Antlr4.Test.StringTemplate/TestDictionaries.cs
@@ -50,7 +50,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
-            Template st = group.getInstanceOf("var");
+            Template st = group.GetInstanceOf("var");
st.Add("type", "int");
st.Add("name", "x");
string expecting = "int x = 0;";
@@ -67,8 +67,8 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
-            Template st = group.getInstanceOf("var");
-            st.impl.dump();
+            Template st = group.GetInstanceOf("var");
+            st.impl.Dump();
st.Add("w", "L");
st.Add("type", "int");
st.Add("name", "x");
@@ -87,7 +87,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
-            Template st = group.getInstanceOf("var");
+            Template st = group.GetInstanceOf("var");
st.Add("w", "L");
st.Add("type", new Template("int"));
st.Add("name", "x");
@@ -105,7 +105,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
-            Template st = group.getInstanceOf("foo");
+            Template st = group.GetInstanceOf("foo");
IDictionary<HashableUser, string> m = new Dictionary<HashableUser, string>();
m[new HashableUser(99, "parrt")] = "first";
m[new HashableUser(172036, "tombu")] = "second";
@@ -126,7 +126,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
-            Template st = group.getInstanceOf("var");
+            Template st = group.GetInstanceOf("var");
st.Add("w", "L");
st.Add("type", "double"); // double not in typeInit map
st.Add("name", "x");
@@ -144,7 +144,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
-            Template st = group.getInstanceOf("var");
+            Template st = group.GetInstanceOf("var");
st.Add("w", "L");
st.Add("type", null); // double not in typeInit map
st.Add("name", "x");
@@ -162,7 +162,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
-            Template st = group.getInstanceOf("var");
+            Template st = group.GetInstanceOf("var");
st.Add("type", "int");
st.Add("name", "x");
string expecting = "int x = ;";
@@ -179,7 +179,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
-            Template st = group.getInstanceOf("var");
+            Template st = group.GetInstanceOf("var");
st.Add("type", "float");
st.Add("name", "x");
string expecting = "float x = ;";
@@ -196,7 +196,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
-            Template st = group.getInstanceOf("var");
+            Template st = group.GetInstanceOf("var");
st.Add("type", "UserRecord");
st.Add("name", "x");
string expecting = "UserRecord x = null;";
@@ -213,7 +213,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
-            Template st = group.getInstanceOf("var");
+            Template st = group.GetInstanceOf("var");
// missing or set to null: st.Add("type", null);
st.Add("name", "x");
string expecting = " x = null;";
@@ -231,8 +231,8 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "test.stg", templates);
ErrorBuffer errors = new ErrorBuffer();
TemplateGroupFile group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
-            group.setListener(errors);
-            group.load();
+            group.Listener = errors;
+            group.Load();
string expected = "[test.stg 1:33: missing value for key at ']']";
string result = errors.Errors.ToListString();
Assert.AreEqual(expected, result);
@@ -247,7 +247,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
-            Template st = group.getInstanceOf("var");
+            Template st = group.GetInstanceOf("var");
st.Add("type", "UserRecord");
st.Add("name", "x");
string expecting = "UserRecord x = UserRecord;";
@@ -267,7 +267,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
-            Template st = group.getInstanceOf("var");
+            Template st = group.GetInstanceOf("var");
st.Add("type", "default");
st.Add("name", "x");
string expecting = "default x = foo;";
@@ -287,7 +287,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
-            Template st = group.getInstanceOf("t");
+            Template st = group.GetInstanceOf("t");
string expecting = " default ";
string result = st.Render();
Assert.AreEqual(expecting, result);
@@ -303,7 +303,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
-            Template st = group.getInstanceOf("intermediate");
+            Template st = group.GetInstanceOf("intermediate");
st.Add("type", "int");
st.Add("name", "x");
string expecting = "int x = 0;";
@@ -321,8 +321,8 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
-            Template interm = group.getInstanceOf("intermediate");
-            Template var = group.getInstanceOf("var");
+            Template interm = group.GetInstanceOf("intermediate");
+            Template var = group.GetInstanceOf("var");
var.Add("type", "int");
var.Add("name", "x");
interm.Add("stuff", var);
diff --git a/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs b/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
index c0454b9..d677a61 100644
--- a/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
+++ b/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
@@ -53,8 +53,8 @@ namespace Antlr4.Test.StringTemplate
public void TestParallelMap()
{
TemplateGroup group = new TemplateGroup('$', '$');
-            group.defineTemplate("test", "names,phones", "hi $names,phones:{n,p | $n$:$p$;}$");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "names,phones", "hi $names,phones:{n,p | $n$:$p$;}$");
+            Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
st.Add("names", "Sumana");
@@ -76,7 +76,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(dir, "a.st", a);
writeFile(dir, "b.st", b);
TemplateGroup group = new TemplateGroupDirectory(dir, '$', '$');
-            Template st = group.getInstanceOf("a");
+            Template st = group.GetInstanceOf("a");
string expected = " bar ";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -93,7 +93,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg", '$', '$');
-            Template b = group.getInstanceOf("method");
+            Template b = group.GetInstanceOf("method");
b.Add("name", "foo");
string expecting = "x=99; // foo";
string result = b.Render();
diff --git a/Antlr4.Test.StringTemplate/TestFunctions.cs b/Antlr4.Test.StringTemplate/TestFunctions.cs
index 898eeca..e5afcac 100644
--- a/Antlr4.Test.StringTemplate/TestFunctions.cs
+++ b/Antlr4.Test.StringTemplate/TestFunctions.cs
@@ -134,7 +134,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            Template e = group.getInstanceOf("a");
+            Template e = group.GetInstanceOf("a");
List<string> names = new List<string>();
names.Add("Ter");
names.Add("Tom");
@@ -228,7 +228,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            Template e = group.getInstanceOf("a");
+            Template e = group.GetInstanceOf("a");
List<string> mine = new List<string>();
mine.Add("Ter");
mine.Add("Tom");
diff --git a/Antlr4.Test.StringTemplate/TestGroupSyntax.cs b/Antlr4.Test.StringTemplate/TestGroupSyntax.cs
index 3c9f6a2..a465f49 100644
--- a/Antlr4.Test.StringTemplate/TestGroupSyntax.cs
+++ b/Antlr4.Test.StringTemplate/TestGroupSyntax.cs
@@ -51,7 +51,7 @@ namespace Antlr4.Test.StringTemplate
"t() ::= <<" + Environment.NewLine +
"foo" + Environment.NewLine +
">>" + Environment.NewLine;
-            string result = group.show();
+            string result = group.Show();
Assert.AreEqual(expected, result);
}

@@ -75,7 +75,7 @@ namespace Antlr4.Test.StringTemplate
"wow() ::= <<" + Environment.NewLine +
"last" + Environment.NewLine +
">>" + Environment.NewLine;
-            string result = group.show();
+            string result = group.Show();
Assert.AreEqual(expected, result);
}

@@ -91,7 +91,7 @@ namespace Antlr4.Test.StringTemplate
"t(a,b) ::= <<" + Environment.NewLine +
"[<a>]" + Environment.NewLine +
">>" + Environment.NewLine;
-            string result = group.show();
+            string result = group.Show();
Assert.AreEqual(expected, result);
}

@@ -107,7 +107,7 @@ namespace Antlr4.Test.StringTemplate
"t(a={def1},b=\"def2\") ::= <<" + Environment.NewLine +
"[<a>]" + Environment.NewLine +
">>" + Environment.NewLine;
-            string result = group.show();
+            string result = group.Show();
Assert.AreEqual(expected, result);
}

@@ -123,7 +123,7 @@ namespace Antlr4.Test.StringTemplate
"t(a={x | 2*<x>}) ::= <<" + Environment.NewLine +
"[<a>]" + Environment.NewLine +
">>" + Environment.NewLine;
-            string result = group.show();
+            string result = group.Show();
Assert.AreEqual(expected, result);
}

@@ -139,7 +139,7 @@ namespace Antlr4.Test.StringTemplate
"t(a) ::= <<" + Environment.NewLine +
"<a:{x | <x:{y | <y>}>}>" + Environment.NewLine +
">>" + Environment.NewLine;
-            string result = group.show();
+            string result = group.Show();
Assert.AreEqual(expected, result);
}

@@ -151,12 +151,12 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.load();
+            group.Load();
string expected =
"t(a={x | <x:{y|<y>}>}) ::= <<" + Environment.NewLine +
"ick" + Environment.NewLine +
">>" + Environment.NewLine;
-            string result = group.show();
+            string result = group.Show();
Assert.AreEqual(expected, result);
}

@@ -172,7 +172,7 @@ namespace Antlr4.Test.StringTemplate
"t(a={x | \\< <x:{y|<y>\\}}>}) ::= <<" + Environment.NewLine +
"[<a>]" + Environment.NewLine +
">>" + Environment.NewLine;
-            string result = group.show();
+            string result = group.Show();
Assert.AreEqual(expected, result);
}
}
diff --git a/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs b/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
index 5d46cdd..2026499 100644
--- a/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
+++ b/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
@@ -50,8 +50,8 @@ namespace Antlr4.Test.StringTemplate

ITemplateErrorListener errors = new ErrorBuffer();
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "t.stg 2:0: mismatched input 'foo' expecting STRING" + newline +
"t.stg 2:3: required (...)+ loop did not match anything at input '('" + newline;
string result = errors.ToString();
@@ -68,8 +68,8 @@ namespace Antlr4.Test.StringTemplate

ITemplateErrorListener errors = new ErrorBuffer();
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "t.stg 1:7: mismatched input 'Super' expecting STRING" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -85,8 +85,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = null;
ITemplateErrorListener errors = new ErrorBuffer();
group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "t.stg 2:0: missing template at '<EOF>'" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -102,8 +102,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = null;
ITemplateErrorListener errors = new ErrorBuffer();
group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "t.stg 1:5: no viable alternative at input '::='" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -119,8 +119,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = null;
ITemplateErrorListener errors = new ErrorBuffer();
group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "t.stg 1:11: \\n in string" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -137,8 +137,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = null;
ITemplateErrorListener errors = new ErrorBuffer();
group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "t.stg 1:0: garbled template definition starting at 'foo'" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -154,8 +154,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = null;
ITemplateErrorListener errors = new ErrorBuffer();
group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "t.stg 1:6: mismatched input ')' expecting ID" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -171,8 +171,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = null;
ErrorBuffer errors = new ErrorBuffer();
group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected =
"[t.stg 1:6: mismatched input ',' expecting ID, " +
"t.stg 1:7: mismatched input ')' expecting ID]";
@@ -190,8 +190,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = null;
ErrorBuffer errors = new ErrorBuffer();
group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected =
"[t.stg 1:4: no viable alternative at input 'a', " +
"t.stg 1:6: garbled template definition starting at 'b']";
@@ -209,8 +209,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = null;
ErrorBuffer errors = new ErrorBuffer();
group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "[t.stg 1:15: 'b' came as a complete surprise to me]";
string result = errors.Errors.ToListString();
Assert.AreEqual(expected, result);
@@ -226,8 +226,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = null;
ErrorBuffer errors = new ErrorBuffer();
group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "[t.stg 1:7: missing dictionary entry at ']']";
string result = errors.Errors.ToListString();
Assert.AreEqual(expected, result);
@@ -243,8 +243,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = null;
ErrorBuffer errors = new ErrorBuffer();
group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "[t.stg 1:11: missing value for key at ']']";
string result = errors.Errors.ToListString();
Assert.AreEqual(expected, result);
@@ -260,8 +260,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = null;
ErrorBuffer errors = new ErrorBuffer();
group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "[t.stg 1:17: invalid character '}']";
string result = errors.Errors.ToListString();
Assert.AreEqual(expected, result);
@@ -277,8 +277,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = null;
ErrorBuffer errors = new ErrorBuffer();
group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "[t.stg 1:9: unterminated string, t.stg 1:9: missing template at '<EOF>']";
string result = errors.Errors.ToListString();
Assert.AreEqual(expected, result);
diff --git a/Antlr4.Test.StringTemplate/TestGroups.cs b/Antlr4.Test.StringTemplate/TestGroups.cs
index ea10355..c6382f4 100644
--- a/Antlr4.Test.StringTemplate/TestGroups.cs
+++ b/Antlr4.Test.StringTemplate/TestGroups.cs
@@ -51,7 +51,7 @@ namespace Antlr4.Test.StringTemplate
">>" + newline;
writeFile(dir, "a.st", a);
TemplateGroup group = new TemplateGroupDirectory(dir);
-            Template st = group.getInstanceOf("a");
+            Template st = group.GetInstanceOf("a");
string expected = "foo";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -70,8 +70,8 @@ namespace Antlr4.Test.StringTemplate
"b() ::= \"bar\"" + newline;
writeFile(dir, "b.st", b);
TemplateGroup group = new TemplateGroupDirectory(dir);
-            Template st1 = group.getInstanceOf("a");
-            Template st2 = group.getInstanceOf("b");
+            Template st1 = group.GetInstanceOf("a");
+            Template st2 = group.GetInstanceOf("b");
string expected = "foobar";
string result = st1.Render() + st2.Render();
Assert.AreEqual(expected, result);
@@ -91,12 +91,12 @@ namespace Antlr4.Test.StringTemplate
"b() ::= \"bar\"" + newline;
writeFile(Path.Combine(dir, "subdir"), "b.st", b);
TemplateGroup group = new TemplateGroupDirectory(dir);
-            Template st1 = group.getInstanceOf("a");
-            Template st2 = group.getInstanceOf("subdir/b");
+            Template st1 = group.GetInstanceOf("a");
+            Template st2 = group.GetInstanceOf("subdir/b");
string expected = "foobar";
string result = st1.Render() + st2.Render();
Assert.AreEqual(expected, result);
-            st2 = group.getInstanceOf("subdir/b"); // should work with / in front too
+            st2 = group.GetInstanceOf("subdir/b"); // should work with / in front too
expected = "bar";
result = st2.Render();
Assert.AreEqual(expected, result);
@@ -114,7 +114,7 @@ namespace Antlr4.Test.StringTemplate
"b() ::= <<bar>>\n";
writeFile(dir + "/subdir", "b.st", b);
TemplateGroup group = new TemplateGroupDirectory(dir);
-            Template st = group.getInstanceOf("a");
+            Template st = group.GetInstanceOf("a");
string expected = " bar ";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -135,9 +135,9 @@ namespace Antlr4.Test.StringTemplate
"c() ::= \"duh\"\n";
writeFile(dir, "group.stg", groupFile);
TemplateGroup group = new TemplateGroupDirectory(dir);
-            Template st1 = group.getInstanceOf("a");
-            Template st2 = group.getInstanceOf("group/b");
-            Template st3 = group.getInstanceOf("group/c");
+            Template st1 = group.GetInstanceOf("a");
+            Template st2 = group.GetInstanceOf("group/b");
+            Template st3 = group.GetInstanceOf("group/c");
string expected = "foobarduh";
string result = st1.Render() + st2.Render() + st3.Render();
Assert.AreEqual(expected, result);
@@ -157,8 +157,8 @@ namespace Antlr4.Test.StringTemplate
"b() ::= \"bar\"" + newline;
writeFile(dir + "/sub1/sub2", "b.st", b);
TemplateGroup group = new TemplateGroupDirectory(dir);
-            Template st1 = group.getInstanceOf("a");
-            Template st2 = group.getInstanceOf("sub1/sub2/b");
+            Template st1 = group.GetInstanceOf("a");
+            Template st2 = group.GetInstanceOf("sub1/sub2/b");
string expected = "foobar";
string result = st1.Render() + st2.Render();
Assert.AreEqual(expected, result);
@@ -179,9 +179,9 @@ namespace Antlr4.Test.StringTemplate
"c() ::= \"duh\"\n";
writeFile(dir, "subdir/group.stg", groupFile);
TemplateGroup group = new TemplateGroupDirectory(dir);
-            Template st1 = group.getInstanceOf("a");
-            Template st2 = group.getInstanceOf("subdir/group/b");
-            Template st3 = group.getInstanceOf("subdir/group/c");
+            Template st1 = group.GetInstanceOf("a");
+            Template st2 = group.GetInstanceOf("subdir/group/b");
+            Template st3 = group.GetInstanceOf("subdir/group/c");
string expected = "foobarduh";
string result = st1.Render() + st2.Render() + st3.Render();
Assert.AreEqual(expected, result);
@@ -196,7 +196,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(dir, "a.st", a);
writeFile(dir, "b.st", b);
TemplateGroup group = new TemplateGroupDirectory(dir);
-            Template st = group.getInstanceOf("a");
+            Template st = group.GetInstanceOf("a");
string expected = " bar ";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -212,8 +212,8 @@ namespace Antlr4.Test.StringTemplate
writeFile(dir + "/subdir", "a.st", a);
writeFile(dir + "/subdir", "b.st", b);
TemplateGroup group = new TemplateGroupDirectory(dir);
-            Template st = group.getInstanceOf("subdir/a");
-            st.impl.dump();
+            Template st = group.GetInstanceOf("subdir/a");
+            st.impl.Dump();
string expected = " bar ";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -229,8 +229,8 @@ namespace Antlr4.Test.StringTemplate
writeFile(dir, "group.stg", groupFile);
ITemplateErrorListener errors = new ErrorBuffer();
TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
-            group.setListener(errors);
-            group.load();
+            group.Listener = errors;
+            group.Load();
string expected = "group.stg 2:0: redefinition of template b" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -245,7 +245,7 @@ namespace Antlr4.Test.StringTemplate
"b ::= a\n";
writeFile(dir, "group.stg", groupFile);
TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
-            Template st = group.getInstanceOf("b");
+            Template st = group.GetInstanceOf("b");
string expected = "bar";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -260,7 +260,7 @@ namespace Antlr4.Test.StringTemplate
"b ::= a\n";
writeFile(dir, "group.stg", groupFile);
TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
-            Template st = group.getInstanceOf("b");
+            Template st = group.GetInstanceOf("b");
st.Add("x", 1);
st.Add("y", 2);
string expected = "12";
@@ -277,7 +277,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(dir, "a.st", a);
writeFile(dir, "b.st", b);
TemplateGroup group = new TemplateGroupDirectory(dir);
-            Template st = group.getInstanceOf("a");
+            Template st = group.GetInstanceOf("a");
string expected = " foo ";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -294,7 +294,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
-            Template b = group.getInstanceOf("method");
+            Template b = group.GetInstanceOf("method");
b.Add("name", "foo");
string expecting = "x=99; // foo";
string result = b.Render();
@@ -309,7 +309,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
-            Template b = group.getInstanceOf("stat");
+            Template b = group.GetInstanceOf("stat");
b.Add("name", "foo");
string expecting = "x=99; // foo";
string result = b.Render();
@@ -324,7 +324,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
-            Template b = group.getInstanceOf("stat");
+            Template b = group.GetInstanceOf("stat");
b.Add("name", "foo");
string expecting = "x=99; // foo";
string result = b.Render();
@@ -354,7 +354,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
-            Template m = group.getInstanceOf("method");
+            Template m = group.GetInstanceOf("method");
m.Add("fields", new Field());
string expecting = "x=parrt; // parrt";
string result = m.Render();
@@ -372,7 +372,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
-            Template m = group.getInstanceOf("method");
+            Template m = group.GetInstanceOf("method");
m.Add("fields", new Field());
string expecting = "x=parrt; // parrt";
string result = m.Render();
@@ -391,7 +391,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
-            Template m = group.getInstanceOf("method");
+            Template m = group.GetInstanceOf("method");
m.Add("fields", new Field());
string expecting = "x=parrt; // parrt";
string result = m.Render();
@@ -409,7 +409,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
-            Template b = group.getInstanceOf("method");
+            Template b = group.GetInstanceOf("method");
b.Add("name", "foo");
b.Add("size", "2");
string expecting = "x=foo; // foo";
@@ -429,7 +429,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
-            Template b = group.getInstanceOf("method");
+            Template b = group.GetInstanceOf("method");
b.Add("name", "foo");
b.Add("size", "2");
string expecting = "x=[foo] ; // foo"; // won't see ' ' after '=' since it's an indent not simple string
@@ -449,7 +449,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
-            Template b = group.getInstanceOf("method");
+            Template b = group.GetInstanceOf("method");
b.Add("name", "foo");
string expecting = "x=34; // foo";
string result = b.Render();
@@ -474,7 +474,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
-            Template a = group.getInstanceOf("A");
+            Template a = group.GetInstanceOf("A");
a.Add("x", new Counter());
string expecting = "0 1 2 0"; // trace must be false to get these numbers
string result = a.Render();
@@ -491,7 +491,7 @@ namespace Antlr4.Test.StringTemplate
"g() ::= \"<f(x={a},y={b})>\"";
writeFile(dir, "group.stg", groupFile);
TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
-            Template st = group.getInstanceOf("g");
+            Template st = group.GetInstanceOf("g");
string expected = "ab";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -506,7 +506,7 @@ namespace Antlr4.Test.StringTemplate
"g() ::= \"<f(y={b},x={a})>\"";
writeFile(dir, "group.stg", groupFile);
TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
-            Template st = group.getInstanceOf("g");
+            Template st = group.GetInstanceOf("g");
string expected = "ab";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -524,8 +524,8 @@ namespace Antlr4.Test.StringTemplate
writeFile(dir, "group.stg", groupFile);
TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
ErrorBuffer errors = new ErrorBuffer();
-            group.setListener(errors);
-            Template st = group.getInstanceOf("g");
+            group.Listener = errors;
+            Template st = group.GetInstanceOf("g");
st.Render();
string expected = "context [g] 1:1 attribute z isn't defined" + newline;
string result = errors.ToString();
@@ -544,8 +544,8 @@ namespace Antlr4.Test.StringTemplate
writeFile(dir, "group.stg", groupFile);
TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
ErrorBuffer errors = new ErrorBuffer();
-            group.setListener(errors);
-            group.load();
+            group.Listener = errors;
+            group.Load();
string expected = "group.stg 2:18: mismatched input '{' expecting ID" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -562,8 +562,8 @@ namespace Antlr4.Test.StringTemplate
writeFile(dir, "group.stg", groupFile);
TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
ErrorBuffer errors = new ErrorBuffer();
-            group.setListener(errors);
-            group.load();
+            group.Listener = errors;
+            group.Load();
string expected = "group.stg 2:22: '=' came as a complete surprise to me" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -581,7 +581,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(dir, "group.stg", groupFile);

TemplateGroup group1 = new TemplateGroupDirectory(dir);
-            Template st = group1.getInstanceOf("group/a"); // can't see
+            Template st = group1.GetInstanceOf("group/a"); // can't see
Assert.AreEqual(null, st);
}

@@ -597,7 +597,7 @@ namespace Antlr4.Test.StringTemplate
">>" + newline;
writeFile(dir, "a.st", a);
TemplateGroup group = new TemplateGroupDirectory(dir);
-            Template st = group.getInstanceOf("a");
+            Template st = group.GetInstanceOf("a");
string expected = "foo";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -613,7 +613,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(dir + "/subdir", "a.st", a);
writeFile(dir + "/subdir", "b.st", b);
TemplateGroup group = new TemplateGroupDirectory(dir);
-            Template st = group.getInstanceOf("subdir/a");
+            Template st = group.GetInstanceOf("subdir/a");
string expected = " bar ";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -632,8 +632,8 @@ namespace Antlr4.Test.StringTemplate
"c() ::= \"<a()>\"\n";
writeFile(dir, "group.stg", groupFile);
TemplateGroup group = new TemplateGroupDirectory(dir);
-            Template st1 = group.getInstanceOf("a");
-            Template st2 = group.getInstanceOf("group/c"); // invokes /a
+            Template st1 = group.GetInstanceOf("a");
+            Template st2 = group.GetInstanceOf("group/c"); // invokes /a
string expected = " bar  bar ";
string result = st1.Render() + st2.Render();
Assert.AreEqual(expected, result);
@@ -650,17 +650,17 @@ namespace Antlr4.Test.StringTemplate
writeFile(dir, "a.st", a);
writeFile(dir, "b.st", b);
TemplateGroup group = new TemplateGroupDirectory(dir);
-            group.load(); // force load
-            Template st = group.getInstanceOf("a");
+            group.Load(); // force load
+            Template st = group.GetInstanceOf("a");
int originalHashCode = RuntimeHelpers.GetHashCode(st);
-            group.unload(); // blast cache
-            st = group.getInstanceOf("a");
+            group.Unload(); // blast cache
+            st = group.GetInstanceOf("a");
int newHashCode = RuntimeHelpers.GetHashCode(st);
Assert.AreEqual(originalHashCode == newHashCode, false); // diff objects
string expected = "foo";
string result = st.Render();
Assert.AreEqual(expected, result);
-            st = group.getInstanceOf("b");
+            st = group.GetInstanceOf("b");
expected = "bar";
result = st.Render();
Assert.AreEqual(expected, result);
@@ -675,17 +675,17 @@ namespace Antlr4.Test.StringTemplate
"b() ::= <<bar>>\n";
writeFile(dir, "a.stg", a);
TemplateGroup group = new TemplateGroupFile(dir + "/a.stg");
-            group.load(); // force load
-            Template st = group.getInstanceOf("a");
+            group.Load(); // force load
+            Template st = group.GetInstanceOf("a");
int originalHashCode = RuntimeHelpers.GetHashCode(st);
-            group.unload(); // blast cache
-            st = group.getInstanceOf("a");
+            group.Unload(); // blast cache
+            st = group.GetInstanceOf("a");
int newHashCode = RuntimeHelpers.GetHashCode(st);
Assert.AreEqual(originalHashCode == newHashCode, false); // diff objects
string expected = "foo";
string result = st.Render();
Assert.AreEqual(expected, result);
-            st = group.getInstanceOf("b");
+            st = group.GetInstanceOf("b");
expected = "bar";
result = st.Render();
Assert.AreEqual(expected, result);
diff --git a/Antlr4.Test.StringTemplate/TestImports.cs b/Antlr4.Test.StringTemplate/TestImports.cs
index 38a1e39..3fb2ae2 100644
--- a/Antlr4.Test.StringTemplate/TestImports.cs
+++ b/Antlr4.Test.StringTemplate/TestImports.cs
@@ -54,14 +54,14 @@ namespace Antlr4.Test.StringTemplate

TemplateGroup group1 = new TemplateGroupDirectory(dir1);
TemplateGroup group2 = new TemplateGroupDirectory(dir2);
-            group2.importTemplates(group1);
-            Template st = group2.getInstanceOf("b");
+            group2.ImportTemplates(group1);
+            Template st = group2.GetInstanceOf("b");
string expected = "dir1 b";
string result = st.Render();
Assert.AreEqual(expected, result);

// do it again, but make a template ref imported template
-            st = group2.getInstanceOf("a");
+            st = group2.GetInstanceOf("a");
expected = " dir1 b ";
result = st.Render();
Assert.AreEqual(expected, result);
@@ -83,7 +83,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(dir2, "b.st", b);

TemplateGroup group = new TemplateGroupFile(dir1 + "/a.stg");
-            Template st = group.getInstanceOf("b"); // visible only if import worked
+            Template st = group.GetInstanceOf("b"); // visible only if import worked
string expected = "dir2 b";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -104,7 +104,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(dir, "group2.stg", groupFile);

TemplateGroup group1 = new TemplateGroupFile(dir + "/group1.stg");
-            Template st = group1.getInstanceOf("c"); // should see c()
+            Template st = group1.GetInstanceOf("c"); // should see c()
string expected = "g2 c";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -124,9 +124,9 @@ namespace Antlr4.Test.StringTemplate

TemplateGroup group1 = new TemplateGroupDirectory(dir + "/x");
TemplateGroup group2 = new TemplateGroupFile(dir + "/y/group.stg");
-            group1.importTemplates(group2);
-            Template st = group1.getInstanceOf("a");
-            st.impl.dump();
+            group1.ImportTemplates(group2);
+            Template st = group1.GetInstanceOf("a");
+            st.impl.Dump();
string expected = " group file b ";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -148,8 +148,8 @@ namespace Antlr4.Test.StringTemplate

TemplateGroup group1 = new TemplateGroupFile(dir + "/x/group.stg");
TemplateGroup group2 = new TemplateGroupFile(dir + "/y/group.stg");
-            group1.importTemplates(group2);
-            Template st = group1.getInstanceOf("b");
+            group1.ImportTemplates(group2);
+            Template st = group1.GetInstanceOf("b");
string expected = "g2 c";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -167,8 +167,8 @@ namespace Antlr4.Test.StringTemplate

TemplateGroup group1 = new TemplateGroupDirectory(dir + "/x");
TemplateGroup group2 = new TemplateGroupDirectory(dir + "/y");
-            group1.importTemplates(group2);
-            Template st = group1.getInstanceOf("subdir/a");
+            group1.ImportTemplates(group2);
+            Template st = group1.GetInstanceOf("subdir/a");
string expected = " x's subdir/b ";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -189,8 +189,8 @@ namespace Antlr4.Test.StringTemplate

TemplateGroup group1 = new TemplateGroupDirectory(dir + "/x");
TemplateGroup group2 = new TemplateGroupDirectory(dir + "/y");
-            group1.importTemplates(group2);
-            Template st = group1.getInstanceOf("subdir/a");
+            group1.ImportTemplates(group2);
+            Template st = group1.GetInstanceOf("subdir/a");
string expected = " group file: b ";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -210,16 +210,16 @@ namespace Antlr4.Test.StringTemplate

TemplateGroup group1 = new TemplateGroupDirectory(dir1);
TemplateGroup group2 = new TemplateGroupDirectory(dir2);
-            group1.importTemplates(group2);
+            group1.ImportTemplates(group2);

// normal lookup; a created from dir2 calls dir2.b
-            Template st = group2.getInstanceOf("a");
+            Template st = group2.GetInstanceOf("a");
string expected = " dir2 b ";
string result = st.Render();
Assert.AreEqual(expected, result);

// polymorphic lookup; a created from dir1 calls dir2.a which calls dir1.b
-            st = group1.getInstanceOf("a");
+            st = group1.GetInstanceOf("a");
expected = " dir1 b ";
result = st.Render();
Assert.AreEqual(expected, result);
@@ -239,8 +239,8 @@ namespace Antlr4.Test.StringTemplate

TemplateGroup group1 = new TemplateGroupDirectory(dir1);
TemplateGroup group2 = new TemplateGroupDirectory(dir2);
-            group2.importTemplates(group1);
-            Template st = group2.getInstanceOf("a");
+            group2.ImportTemplates(group1);
+            Template st = group2.GetInstanceOf("a");
string expected = " [dir1 a] ";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -260,14 +260,14 @@ namespace Antlr4.Test.StringTemplate

TemplateGroup group1 = new TemplateGroupDirectory(dir1);
TemplateGroup group2 = new TemplateGroupDirectory(dir2);
-            group2.importTemplates(group1);
+            group2.ImportTemplates(group1);

-            Template st = group2.getInstanceOf("a");
-            Template st2 = group2.getInstanceOf("b");
+            Template st = group2.GetInstanceOf("a");
+            Template st2 = group2.GetInstanceOf("b");
int originalHashCode = RuntimeHelpers.GetHashCode(st);
int originalHashCode2 = RuntimeHelpers.GetHashCode(st2);
-            group1.unload(); // blast cache
-            st = group2.getInstanceOf("a");
+            group1.Unload(); // blast cache
+            st = group2.GetInstanceOf("a");
int newHashCode = RuntimeHelpers.GetHashCode(st);
Assert.AreEqual(originalHashCode == newHashCode, false); // diff objects

@@ -275,7 +275,7 @@ namespace Antlr4.Test.StringTemplate
string result = st.Render();
Assert.AreEqual(expected, result);

-            st = group2.getInstanceOf("b");
+            st = group2.GetInstanceOf("b");
int newHashCode2 = RuntimeHelpers.GetHashCode(st);
Assert.AreEqual(originalHashCode2 == newHashCode2, false); // diff objects
result = st.Render();
diff --git a/Antlr4.Test.StringTemplate/TestIndentation.cs b/Antlr4.Test.StringTemplate/TestIndentation.cs
index 00cf8ec..2586796 100644
--- a/Antlr4.Test.StringTemplate/TestIndentation.cs
+++ b/Antlr4.Test.StringTemplate/TestIndentation.cs
@@ -49,8 +49,8 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            Template t = group.getInstanceOf("list");
-            t.impl.dump();
+            Template t = group.GetInstanceOf("list");
+            t.impl.Dump();
t.Add("a", "Terence");
t.Add("b", "Jim");
string expecting =
@@ -68,7 +68,7 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            Template t = group.getInstanceOf("list");
+            Template t = group.GetInstanceOf("list");
t.Add("names", "Terence");
t.Add("names", "Jim");
t.Add("names", "Sriram");
@@ -88,7 +88,7 @@ namespace Antlr4.Test.StringTemplate
">>" + newline;
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            Template t = group.getInstanceOf("list");
+            Template t = group.GetInstanceOf("list");
t.Add("names", "Terence\nis\na\nmaniac");
t.Add("names", "Jim");
t.Add("names", "Sriram\nis\ncool");
@@ -113,7 +113,7 @@ namespace Antlr4.Test.StringTemplate
">>" + newline;
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            Template t = group.getInstanceOf("list");
+            Template t = group.GetInstanceOf("list");
t.Add("names", "Terence\n\nis a maniac");
string expecting =
"  Terence" + newline +
@@ -133,7 +133,7 @@ namespace Antlr4.Test.StringTemplate
">>" + newline;
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            Template t = group.getInstanceOf("list");
+            Template t = group.GetInstanceOf("list");
t.Add("names", "Terence");
t.Add("names", "Jim");
t.Add("names", "Sriram");
@@ -164,17 +164,17 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            Template t = group.getInstanceOf("method");
+            Template t = group.GetInstanceOf("method");
t.Add("name", "foo");
-            Template s1 = group.getInstanceOf("assign");
+            Template s1 = group.GetInstanceOf("assign");
s1.Add("lhs", "x");
s1.Add("expr", "0");
-            Template s2 = group.getInstanceOf("ifstat");
+            Template s2 = group.GetInstanceOf("ifstat");
s2.Add("expr", "x>0");
-            Template s2a = group.getInstanceOf("assign");
+            Template s2a = group.GetInstanceOf("assign");
s2a.Add("lhs", "y");
s2a.Add("expr", "x+y");
-            Template s2b = group.getInstanceOf("assign");
+            Template s2b = group.GetInstanceOf("assign");
s2b.Add("lhs", "z");
s2b.Add("expr", "4");
s2.Add("stats", s2a);
diff --git a/Antlr4.Test.StringTemplate/TestIndirectionAndEarlyEval.cs b/Antlr4.Test.StringTemplate/TestIndirectionAndEarlyEval.cs
index d305501..e641da1 100644
--- a/Antlr4.Test.StringTemplate/TestIndirectionAndEarlyEval.cs
+++ b/Antlr4.Test.StringTemplate/TestIndirectionAndEarlyEval.cs
@@ -54,10 +54,10 @@ namespace Antlr4.Test.StringTemplate
public void TestIndirectTemplateInclude()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("foo", "bar");
+            group.DefineTemplate("foo", "bar");
string template = "<(name)()>";
-            group.defineTemplate("test", "name", template);
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", template);
+            Template st = group.GetInstanceOf("test");
st.Add("name", "foo");
string expected = "bar";
string result = st.Render();
@@ -68,10 +68,10 @@ namespace Antlr4.Test.StringTemplate
public void TestIndirectTemplateIncludeWithArgs()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("foo", "x,y", "<x><y>");
+            group.DefineTemplate("foo", "x,y", "<x><y>");
string template = "<(name)({1},{2})>";
-            group.defineTemplate("test", "name", template);
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", template);
+            Template st = group.GetInstanceOf("test");
st.Add("name", "foo");
string expected = "12";
string result = st.Render();
@@ -82,11 +82,11 @@ namespace Antlr4.Test.StringTemplate
public void TestIndirectTemplateIncludeViaTemplate()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("foo", "bar");
-            group.defineTemplate("tname", "foo");
+            group.DefineTemplate("foo", "bar");
+            group.DefineTemplate("tname", "foo");
string template = "<(tname())()>";
-            group.defineTemplate("test", "name", template);
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", template);
+            Template st = group.GetInstanceOf("test");
string expected = "bar";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -108,9 +108,9 @@ namespace Antlr4.Test.StringTemplate
public void TestIndirectMap()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("a", "x", "[<x>]");
-            group.defineTemplate("test", "names,templateName", "hi <names:(templateName)()>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("a", "x", "[<x>]");
+            group.DefineTemplate("test", "names,templateName", "hi <names:(templateName)()>!");
+            Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
st.Add("names", "Sumana");
diff --git a/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs b/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
index 5561ca0..aab84d2 100644
--- a/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
+++ b/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
@@ -72,8 +72,8 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            Template st = group.getInstanceOf("t");
+            group.Listener = errors;
+            Template st = group.GetInstanceOf("t");
st.Render();
string expected = "context [t] 1:0 no such template: foo" + newline;
string result = errors.ToString();
@@ -90,14 +90,14 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
+            group.Listener = errors;
string templates2 =
"u() ::= \"blech\"" + Environment.NewLine;

writeFile(tmpdir, "t2.stg", templates2);
TemplateGroup group2 = new TemplateGroupFile(tmpdir + "/" + "t2.stg");
-            group.importTemplates(group2);
-            Template st = group.getInstanceOf("t");
+            group.ImportTemplates(group2);
+            Template st = group.GetInstanceOf("t");
st.Render();
string expected = "context [t] 1:1 no such template: super.t" + newline;
string result = errors.ToString();
@@ -114,8 +114,8 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            Template st = group.getInstanceOf("t");
+            group.Listener = errors;
+            Template st = group.GetInstanceOf("t");
st.Add("u", new User(32, "parrt"));
st.Render();
string expected = "";
@@ -133,8 +133,8 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            Template st = group.getInstanceOf("t");
+            group.Listener = errors;
+            Template st = group.GetInstanceOf("t");
st.Add("u", new UserHiddenName("parrt"));
st.Render();
string expected = "";
@@ -152,8 +152,8 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            Template st = group.getInstanceOf("t");
+            group.Listener = errors;
+            Template st = group.GetInstanceOf("t");
st.Add("u", new UserHiddenNameField("parrt"));
st.Render();
string expected = "";
@@ -172,8 +172,8 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            Template st = group.getInstanceOf("t");
+            group.Listener = errors;
+            Template st = group.GetInstanceOf("t");
st.Render();
string expected = "context [t] 1:1 passed 1 arg(s) to template u with 2 declared arg(s)" + newline;
string result = errors.ToString();
@@ -191,8 +191,8 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            Template st = group.getInstanceOf("t");
+            group.Listener = errors;
+            Template st = group.GetInstanceOf("t");
string expected = "9";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -213,9 +213,9 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
+            group.Listener = errors;
TemplateGroup.debug = true;
-            Template st = group.getInstanceOf("t");
+            Template st = group.GetInstanceOf("t");
st.Render();
string expected = "context [t u] 1:1 attribute x isn't defined" + newline;
string result = errors.ToString();
@@ -227,7 +227,7 @@ namespace Antlr4.Test.StringTemplate
{
ErrorBuffer errors = new ErrorBuffer();
TemplateGroup group = new TemplateGroup();
-            group.setListener(errors);
+            group.Listener = errors;
Template e = new Template(group,
"<names,phones,salaries:{n,p | <n>@<p>}; separator=\", \">"
);
@@ -251,7 +251,7 @@ namespace Antlr4.Test.StringTemplate
{
ErrorBuffer errors = new ErrorBuffer();
TemplateGroup group = new TemplateGroup();
-            group.setListener(errors);
+            group.Listener = errors;
Template e = new Template(group, "<trim(s)>");
e.Add("s", 34);
e.Render(); // generate the error
@@ -264,7 +264,7 @@ namespace Antlr4.Test.StringTemplate
{
ErrorBuffer errors = new ErrorBuffer();
TemplateGroup group = new TemplateGroup();
-            group.setListener(errors);
+            group.Listener = errors;
Template e = new Template(group, "<strlen(s)>");
e.Add("s", 34);
e.Render(); // generate the error
diff --git a/Antlr4.Test.StringTemplate/TestLineWrap.cs b/Antlr4.Test.StringTemplate/TestLineWrap.cs
index ca6b2f8..12b6b44 100644
--- a/Antlr4.Test.StringTemplate/TestLineWrap.cs
+++ b/Antlr4.Test.StringTemplate/TestLineWrap.cs
@@ -50,7 +50,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template a = group.getInstanceOf("array");
+            Template a = group.GetInstanceOf("array");
a.Add("values",
new int[] {3,9,20,2,1,4,6,32,5,6,77,888,2,1,6,32,5,6,77,
4,9,20,2,1,4,63,9,20,2,1,4,6,32,5,6,77,6,32,5,6,77,
@@ -63,7 +63,7 @@ namespace Antlr4.Test.StringTemplate

StringWriter sw = new StringWriter();
ITemplateWriter stw = new AutoIndentWriter(sw, "\n"); // force \n as newline
-            stw.setLineWidth(40);
+            stw.SetLineWidth(40);
a.Write(stw);
string result = sw.ToString();
Assert.AreEqual(expecting, result);
@@ -77,7 +77,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template a = group.getInstanceOf("array");
+            Template a = group.GetInstanceOf("array");
a.Add("values",
new int[] {3,9,20,2,1,4,6,32,5,6,77,888,2,1,6,32,5,6,77,
4,9,20,2,1,4,63,9,20,2,1,4,6,32,5,6,77,6,32,5,6,77,
@@ -104,7 +104,7 @@ namespace Antlr4.Test.StringTemplate
x.Add("stuff", "1");
x.Add("stuff", "2");
x.Add("stuff", "3");
-            Template a = group.getInstanceOf("array");
+            Template a = group.GetInstanceOf("array");
a.Add("values", new List<object>() { "a", x, "b" });
string expecting =
"{ a, " + Environment.NewLine +
@@ -119,11 +119,11 @@ namespace Antlr4.Test.StringTemplate
public void TestFortranLineWrap()
{
string templates =
-                    "func(args) ::= <<       FUNCTION line( <args; wrap=\"\\n      c\", separator=\",\"> )>>" + newline;
+                    "Function(args) ::= <<       FUNCTION line( <args; wrap=\"\\n      c\", separator=\",\"> )>>" + newline;
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template a = group.getInstanceOf("func");
+            Template a = group.GetInstanceOf("Function");
a.Add("args",
new string[] { "a", "b", "c", "d", "e", "f" });
string expecting =
@@ -140,7 +140,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template a = group.getInstanceOf("array");
+            Template a = group.GetInstanceOf("array");
a.Add("values",
new int[] {3,9,20,2,1,4,6,32,5,6,77,888,2,1,6,32,5,6,77,
4,9,20,2,1,4,63,9,20,2,1,4,6});
@@ -161,7 +161,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template a = group.getInstanceOf("duh");
+            Template a = group.GetInstanceOf("duh");
a.Add("chars", new string[] { "a", "b", "c", "d", "e" });
// lineWidth==3 implies that we can have 3 characters at most
string expecting =
@@ -178,7 +178,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template a = group.getInstanceOf("duh");
+            Template a = group.GetInstanceOf("duh");
a.Add("chars", new string[] { "a", "b", "\n", "d", "e" });
// don't do \n if it's last element anyway
string expecting =
@@ -195,7 +195,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template a = group.getInstanceOf("duh");
+            Template a = group.GetInstanceOf("duh");
a.Add("chars", new string[] { "a", "b", "c", "\n", "d", "e" });
// Once we wrap, we must dump chars as we see them.  A newline right
// after a wrap is just an "unfortunate" event.  People will expect
@@ -215,7 +215,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template a = group.getInstanceOf("duh");
+            Template a = group.GetInstanceOf("duh");
a.Add("data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
string expecting =
"!123" + Environment.NewLine +
@@ -232,7 +232,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template a = group.getInstanceOf("duh");
+            Template a = group.GetInstanceOf("duh");
a.Add("data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
string expecting =
"![1][2][3]" + Environment.NewLine + // width=9 is the 3 char; don't break til after ]
@@ -249,7 +249,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template a = group.getInstanceOf("duh");
+            Template a = group.GetInstanceOf("duh");
a.Add("data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
string expecting =
"![1][2][3]" + Environment.NewLine +
@@ -267,8 +267,8 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template t = group.getInstanceOf("top");
-            Template s = group.getInstanceOf("str");
+            Template t = group.GetInstanceOf("top");
+            Template s = group.GetInstanceOf("str");
s.Add("data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
t.Add("s", s);
string expecting =
@@ -288,7 +288,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template a = group.getInstanceOf("duh");
+            Template a = group.GetInstanceOf("duh");
a.Add("chars", new string[] { "a", "b", "c", "d", "e" });
//
string expecting =
@@ -308,7 +308,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template a = group.getInstanceOf("duh");
+            Template a = group.GetInstanceOf("duh");
a.Add("chars", new string[] { "a", "b", "c", "d", "e" });
//
string expecting =
@@ -328,8 +328,8 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template top = group.getInstanceOf("top");
-            Template duh = group.getInstanceOf("duh");
+            Template top = group.GetInstanceOf("top");
+            Template duh = group.GetInstanceOf("duh");
duh.Add("chars", new string[] { "a", "b", "c", "d", "e" });
top.Add("d", duh);
string expecting =
@@ -349,8 +349,8 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template top = group.getInstanceOf("top");
-            Template duh = group.getInstanceOf("duh");
+            Template top = group.GetInstanceOf("top");
+            Template duh = group.GetInstanceOf("duh");
duh.Add("chars", new string[] { "a", "b", "c", "d", "e" });
top.Add("d", duh);
//
@@ -369,7 +369,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template a = group.getInstanceOf("m");
+            Template a = group.GetInstanceOf("m");
a.Add("args",
new string[] { "a", "b", "c" });
a.Add("body", "i=3;");
@@ -388,7 +388,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template m = group.getInstanceOf("m");
+            Template m = group.GetInstanceOf("m");
m.Add("body", "i=3;");
// make it wrap because of ") throws Ick { " literal
string expecting =
@@ -406,8 +406,8 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

-            Template top = group.getInstanceOf("top");
-            Template a = group.getInstanceOf("array");
+            Template top = group.GetInstanceOf("top");
+            Template a = group.GetInstanceOf("array");
a.Add("values",
new int[] {3,9,20,2,1,4,6,32,5,6,77,888,2,1,6,32,5,6,77,
4,9,20,2,1,4,63,9,20,2,1,4,6,32,5,6,77,6,32,5,6,77,
diff --git a/Antlr4.Test.StringTemplate/TestLists.cs b/Antlr4.Test.StringTemplate/TestLists.cs
index 1167eb4..8ee97f6 100644
--- a/Antlr4.Test.StringTemplate/TestLists.cs
+++ b/Antlr4.Test.StringTemplate/TestLists.cs
@@ -207,7 +207,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            Template e = group.getInstanceOf("test");
+            Template e = group.GetInstanceOf("test");
e.Add("names", "Ter");
e.Add("names", "Tom");
e.Add("phones", "1");
diff --git a/Antlr4.Test.StringTemplate/TestModelAdaptors.cs b/Antlr4.Test.StringTemplate/TestModelAdaptors.cs
index 48858a2..923cbff 100644
--- a/Antlr4.Test.StringTemplate/TestModelAdaptors.cs
+++ b/Antlr4.Test.StringTemplate/TestModelAdaptors.cs
@@ -91,8 +91,8 @@ namespace Antlr4.Test.StringTemplate
"foo(x) ::= \"<x.id>: <x.name>\"\n";
writeFile(tmpdir, "foo.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/foo.stg");
-            group.registerModelAdaptor(typeof(User), new UserAdaptor());
-            Template st = group.getInstanceOf("foo");
+            group.RegisterModelAdaptor(typeof(User), new UserAdaptor());
+            Template st = group.GetInstanceOf("foo");
st.Add("x", new User(100, "parrt"));
string expecting = "100: parrt";
string result = st.Render();
@@ -107,9 +107,9 @@ namespace Antlr4.Test.StringTemplate
"foo(x) ::= \"<x.qqq>\"\n";
writeFile(tmpdir, "foo.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/foo.stg");
-            group.setListener(errors);
-            group.registerModelAdaptor(typeof(User), new UserAdaptor());
-            Template st = group.getInstanceOf("foo");
+            group.Listener = errors;
+            group.RegisterModelAdaptor(typeof(User), new UserAdaptor());
+            Template st = group.GetInstanceOf("foo");
st.Add("x", new User(100, "parrt"));
string expecting = "";
string result = st.Render();
@@ -127,8 +127,8 @@ namespace Antlr4.Test.StringTemplate
"foo(x) ::= \"<x.id>: <x.name>\"\n";
writeFile(tmpdir, "foo.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/foo.stg");
-            group.registerModelAdaptor(typeof(User), new UserAdaptor());
-            Template st = group.getInstanceOf("foo");
+            group.RegisterModelAdaptor(typeof(User), new UserAdaptor());
+            Template st = group.GetInstanceOf("foo");
st.Add("x", new SuperUser(100, "parrt")); // create subclass of User
string expecting = "100: super parrt";
string result = st.Render();
@@ -142,13 +142,13 @@ namespace Antlr4.Test.StringTemplate
"foo(x) ::= \"<x.id>: <x.name>\"\n";
writeFile(tmpdir, "foo.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/foo.stg");
-            group.registerModelAdaptor(typeof(User), new UserAdaptor());
-            group.getModelAdaptor(typeof(User)); // get User, SuperUser into cache
-            group.getModelAdaptor(typeof(SuperUser));
+            group.RegisterModelAdaptor(typeof(User), new UserAdaptor());
+            group.GetModelAdaptor(typeof(User)); // get User, SuperUser into cache
+            group.GetModelAdaptor(typeof(SuperUser));

-            group.registerModelAdaptor(typeof(User), new UserAdaptorConst());
+            group.RegisterModelAdaptor(typeof(User), new UserAdaptorConst());
// cache should be reset so we see new adaptor
-            Template st = group.getInstanceOf("foo");
+            Template st = group.GetInstanceOf("foo");
st.Add("x", new User(100, "parrt"));
string expecting = "const id value: const name value"; // sees UserAdaptorConst
string result = st.Render();
@@ -162,9 +162,9 @@ namespace Antlr4.Test.StringTemplate
"foo(x) ::= \"<x.id>: <x.name>\"\n";
writeFile(tmpdir, "foo.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/foo.stg");
-            group.registerModelAdaptor(typeof(User), new UserAdaptor());
-            group.registerModelAdaptor(typeof(SuperUser), new UserAdaptorConst()); // most specific
-            Template st = group.getInstanceOf("foo");
+            group.RegisterModelAdaptor(typeof(User), new UserAdaptor());
+            group.RegisterModelAdaptor(typeof(SuperUser), new UserAdaptorConst()); // most specific
+            Template st = group.GetInstanceOf("foo");
st.Add("x", new User(100, "parrt"));
string expecting = "100: parrt";
string result = st.Render();
diff --git a/Antlr4.Test.StringTemplate/TestNullAndEmptyValues.cs b/Antlr4.Test.StringTemplate/TestNullAndEmptyValues.cs
index a49a2ca..fb3c645 100644
--- a/Antlr4.Test.StringTemplate/TestNullAndEmptyValues.cs
+++ b/Antlr4.Test.StringTemplate/TestNullAndEmptyValues.cs
@@ -43,8 +43,8 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparatorWithNullFirstValue()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "hi <name; separator=\", \">!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", "hi <name; separator=\", \">!");
+            Template st = group.GetInstanceOf("test");
st.Add("name", null); // null is added to list, but ignored in iteration
st.Add("name", "Tom");
st.Add("name", "Sumana");
@@ -57,9 +57,9 @@ namespace Antlr4.Test.StringTemplate
public void TestTemplateAppliedToNullIsEmpty()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "<name:t()>");
-            group.defineTemplate("t", "x", "<x>");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", "<name:t()>");
+            group.DefineTemplate("t", "x", "<x>");
+            Template st = group.GetInstanceOf("test");
st.Add("name", null); // null is added to list, but ignored in iteration
string expected = "";
string result = st.Render();
@@ -70,9 +70,9 @@ namespace Antlr4.Test.StringTemplate
public void TestTemplateAppliedToMissingValueIsEmpty()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "<name:t()>");
-            group.defineTemplate("t", "x", "<x>");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", "<name:t()>");
+            group.DefineTemplate("t", "x", "<x>");
+            Template st = group.GetInstanceOf("test");
string expected = "";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -82,8 +82,8 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparatorWithNull2ndValue()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "hi <name; separator=\", \">!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", "hi <name; separator=\", \">!");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", null);
st.Add("name", "Sumana");
@@ -96,8 +96,8 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparatorWithNullLastValue()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "hi <name; separator=\", \">!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", "hi <name; separator=\", \">!");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
st.Add("name", null);
@@ -110,8 +110,8 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparatorWithTwoNullValuesInRow()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "hi <name; separator=\", \">!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", "hi <name; separator=\", \">!");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
st.Add("name", null);
@@ -126,8 +126,8 @@ namespace Antlr4.Test.StringTemplate
public void TestTwoNullValues()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "hi <name; null=\"x\">!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", "hi <name; null=\"x\">!");
+            Template st = group.GetInstanceOf("test");
st.Add("name", null);
st.Add("name", null);
string expected = "hi xx!";
@@ -139,8 +139,8 @@ namespace Antlr4.Test.StringTemplate
public void TestNullListItemNotCountedForIteratorIndex()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "<name:{n | <i>:<n>}>");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", "<name:{n | <i>:<n>}>");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", null);
st.Add("name", null);
@@ -154,11 +154,11 @@ namespace Antlr4.Test.StringTemplate
public void TestSizeZeroButNonNullListGetsNoOutput()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "users",
+            group.DefineTemplate("test", "users",
"begin\n" +
"<users>\n" +
"end\n");
-            Template t = group.getInstanceOf("test");
+            Template t = group.GetInstanceOf("test");
t.Add("users", null);
string expecting = "begin" + newline + "end";
string result = t.Render();
@@ -169,11 +169,11 @@ namespace Antlr4.Test.StringTemplate
public void TestNullListGetsNoOutput()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "users",
+            group.DefineTemplate("test", "users",
"begin\n" +
"<users:{u | name: <u>}; separator=\", \">\n" +
"end\n");
-            Template t = group.getInstanceOf("test");
+            Template t = group.GetInstanceOf("test");
string expecting = "begin" + newline + "end";
string result = t.Render();
Assert.AreEqual(expecting, result);
@@ -183,11 +183,11 @@ namespace Antlr4.Test.StringTemplate
public void TestEmptyListGetsNoOutput()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "users",
+            group.DefineTemplate("test", "users",
"begin\n" +
"<users:{u | name: <u>}; separator=\", \">\n" +
"end\n");
-            Template t = group.getInstanceOf("test");
+            Template t = group.GetInstanceOf("test");
t.Add("users", new List<string>());
string expecting = "begin" + newline + "end";
string result = t.Render();
@@ -198,8 +198,8 @@ namespace Antlr4.Test.StringTemplate
public void TestMissingDictionaryValue()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "m", "<m.foo>");
-            Template t = group.getInstanceOf("test");
+            group.DefineTemplate("test", "m", "<m.foo>");
+            Template t = group.GetInstanceOf("test");
t.Add("m", new Dictionary<string, string>());
string expecting = "";
string result = t.Render();
@@ -210,8 +210,8 @@ namespace Antlr4.Test.StringTemplate
public void TestMissingDictionaryValue2()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "m", "<if(m.foo)>[<m.foo>]<endif>");
-            Template t = group.getInstanceOf("test");
+            group.DefineTemplate("test", "m", "<if(m.foo)>[<m.foo>]<endif>");
+            Template t = group.GetInstanceOf("test");
t.Add("m", new Dictionary<string, string>());
string expecting = "";
string result = t.Render();
@@ -222,8 +222,8 @@ namespace Antlr4.Test.StringTemplate
public void TestMissingDictionaryValue3()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "m", "<if(m.foo)>[<m.foo>]<endif>");
-            Template t = group.getInstanceOf("test");
+            group.DefineTemplate("test", "m", "<if(m.foo)>[<m.foo>]<endif>");
+            Template t = group.GetInstanceOf("test");
t.Add("m", new Dictionary<string, string>() { { "foo", null } });
string expecting = "";
string result = t.Render();
diff --git a/Antlr4.Test.StringTemplate/TestOptions.cs b/Antlr4.Test.StringTemplate/TestOptions.cs
index 31cdf0b..2731343 100644
--- a/Antlr4.Test.StringTemplate/TestOptions.cs
+++ b/Antlr4.Test.StringTemplate/TestOptions.cs
@@ -44,8 +44,8 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparator()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "hi <name; separator=\", \">!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", "hi <name; separator=\", \">!");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
st.Add("name", "Sumana");
@@ -58,8 +58,8 @@ namespace Antlr4.Test.StringTemplate
public void TestAttrSeparator()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name,sep", "hi <name; separator=sep>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name,sep", "hi <name; separator=sep>!");
+            Template st = group.GetInstanceOf("test");
st.Add("sep", ", ");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -73,9 +73,9 @@ namespace Antlr4.Test.StringTemplate
public void TestIncludeSeparator()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("foo", "|");
-            group.defineTemplate("test", "name,sep", "hi <name; separator=foo()>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("foo", "|");
+            group.DefineTemplate("test", "name,sep", "hi <name; separator=foo()>!");
+            Template st = group.GetInstanceOf("test");
st.Add("sep", ", ");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -89,8 +89,8 @@ namespace Antlr4.Test.StringTemplate
public void TestSubtemplateSeparator()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name,sep", "hi <name; separator={<sep> _}>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name,sep", "hi <name; separator={<sep> _}>!");
+            Template st = group.GetInstanceOf("test");
st.Add("sep", ",");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -104,8 +104,8 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparatorWithNullFirstValueAndNullOption()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "hi <name; null=\"n/a\", separator=\", \">!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", "hi <name; null=\"n/a\", separator=\", \">!");
+            Template st = group.GetInstanceOf("test");
st.Add("name", null);
st.Add("name", "Tom");
st.Add("name", "Sumana");
@@ -118,9 +118,9 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparatorWithNull2ndValueAndNullOption()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "hi <name; null=\"n/a\", separator=\", \">!");
-            Template st = group.getInstanceOf("test");
-            st.impl.dump();
+            group.DefineTemplate("test", "name", "hi <name; null=\"n/a\", separator=\", \">!");
+            Template st = group.GetInstanceOf("test");
+            st.impl.Dump();
st.Add("name", "Ter");
st.Add("name", null);
st.Add("name", "Sumana");
@@ -133,8 +133,8 @@ namespace Antlr4.Test.StringTemplate
public void TestNullValueAndNullOption()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "<name; null=\"n/a\">");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", "<name; null=\"n/a\">");
+            Template st = group.GetInstanceOf("test");
st.Add("name", null);
string expected = "n/a";
string result = st.Render();
@@ -145,8 +145,8 @@ namespace Antlr4.Test.StringTemplate
public void TestListApplyWithNullValueAndNullOption()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "<name:{n | <n>}; null=\"n/a\">");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", "<name:{n | <n>}; null=\"n/a\">");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", null);
st.Add("name", "Sumana");
@@ -162,8 +162,8 @@ namespace Antlr4.Test.StringTemplate
// the value.  This verifies that null not blank comes out of first apply
// since we don't get [null].
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "<name:{n | <n>}:{n | [<n>]}; null=\"n/a\">");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", "<name:{n | <n>}:{n | [<n>]}; null=\"n/a\">");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", null);
st.Add("name", "Sumana");
@@ -176,8 +176,8 @@ namespace Antlr4.Test.StringTemplate
public void TestMissingValueAndNullOption()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "name", "<name; null=\"n/a\">");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "name", "<name; null=\"n/a\">");
+            Template st = group.GetInstanceOf("test");
string expected = "n/a";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -187,9 +187,9 @@ namespace Antlr4.Test.StringTemplate
public void TestOptionDoesntApplyToNestedTemplate()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("foo", "<zippo>");
-            group.defineTemplate("test", "zippo", "<foo(); null=\"n/a\">");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("foo", "<zippo>");
+            group.DefineTemplate("test", "zippo", "<foo(); null=\"n/a\">");
+            Template st = group.GetInstanceOf("test");
st.Add("zippo", null);
string expected = "";
string result = st.Render();
@@ -201,9 +201,9 @@ namespace Antlr4.Test.StringTemplate
{
ErrorBuffer errors = new ErrorBuffer();
TemplateGroup group = new TemplateGroup();
-            group.setListener(errors);
-            group.defineTemplate("test", "name", "<name; bad=\"ugly\">");
-            Template st = group.getInstanceOf("test");
+            group.Listener = errors;
+            group.DefineTemplate("test", "name", "<name; bad=\"ugly\">");
+            Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
string expected = "Ter";
string result = st.Render();
diff --git a/Antlr4.Test.StringTemplate/TestRegions.cs b/Antlr4.Test.StringTemplate/TestRegions.cs
index 6f06186..1f5dc24 100644
--- a/Antlr4.Test.StringTemplate/TestRegions.cs
+++ b/Antlr4.Test.StringTemplate/TestRegions.cs
@@ -49,7 +49,7 @@ namespace Antlr4.Test.StringTemplate
">>\n";
writeFile(dir, "group.stg", groupFile);
TemplateGroup group = new TemplateGroupFile(dir + "/group.stg");
-            Template st = group.getInstanceOf("a");
+            Template st = group.GetInstanceOf("a");
string expected = "[bar]";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -65,7 +65,7 @@ namespace Antlr4.Test.StringTemplate
">>\n";
writeFile(dir, "group.stg", groupFile);
TemplateGroup group = new TemplateGroupFile(dir + "/group.stg");
-            Template st = group.getInstanceOf("a");
+            Template st = group.GetInstanceOf("a");
string expected = "[]";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -82,8 +82,8 @@ namespace Antlr4.Test.StringTemplate

TemplateGroup group1 = new TemplateGroupFile(dir + "/g1.stg");
TemplateGroup group2 = new TemplateGroupFile(dir + "/g2.stg");
-            group2.importTemplates(group1); // define r in g2
-            Template st = group2.getInstanceOf("a");
+            group2.ImportTemplates(group1); // define r in g2
+            Template st = group2.GetInstanceOf("a");
string expected = "[foo]";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -100,8 +100,8 @@ namespace Antlr4.Test.StringTemplate

TemplateGroup group1 = new TemplateGroupFile(dir + "/g1.stg");
TemplateGroup group2 = new TemplateGroupFile(dir + "/g2.stg");
-            group2.importTemplates(group1); // define r in g2
-            Template st = group2.getInstanceOf("a");
+            group2.ImportTemplates(group1); // define r in g2
+            Template st = group2.GetInstanceOf("a");
string expected = "[(foo)]";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -118,8 +118,8 @@ namespace Antlr4.Test.StringTemplate

TemplateGroup group1 = new TemplateGroupFile(dir + "/g1.stg");
TemplateGroup group2 = new TemplateGroupFile(dir + "/g2.stg");
-            group1.importTemplates(group2); // opposite of previous; g1 imports g2
-            Template st = group1.getInstanceOf("a");
+            group1.ImportTemplates(group2); // opposite of previous; g1 imports g2
+            Template st = group1.GetInstanceOf("a");
string expected = "[]"; // @a.r implicitly defined in g1; can't see g2's
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -134,7 +134,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(dir, "g.stg", g);

TemplateGroup group = new TemplateGroupFile(dir + "/g.stg");
-            Template st = group.getInstanceOf("a");
+            Template st = group.GetInstanceOf("a");
string expected = "[foo]";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -150,8 +150,8 @@ namespace Antlr4.Test.StringTemplate

TemplateGroupFile group = new TemplateGroupFile(dir + "/g.stg");
ErrorBuffer errors = new ErrorBuffer();
-            group.setListener(errors);
-            group.load();
+            group.Listener = errors;
+            group.Load();
string expected = "g.stg 2:3: region a.r is embedded and thus already implicitly defined" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -173,9 +173,9 @@ namespace Antlr4.Test.StringTemplate
"@a.r() ::= \"A<@super.r()>B\"" + newline;
writeFile(dir, "sub.stg", sub);
TemplateGroupFile subGroup = new TemplateGroupFile(dir + "/sub.stg");
-            subGroup.importTemplates(group);
+            subGroup.ImportTemplates(group);

-            Template st = subGroup.getInstanceOf("a");
+            Template st = subGroup.GetInstanceOf("a");
string result = st.Render();
string expecting = "XAfooBY";
Assert.AreEqual(expecting, result);
@@ -186,17 +186,17 @@ namespace Antlr4.Test.StringTemplate
{
string dir = tmpdir;
// Bug: This was causing infinite recursion:
-            // getInstanceOf(super::a)
-            // getInstanceOf(sub::a)
-            // getInstanceOf(subsub::a)
-            // getInstanceOf(subsub::region__a__r)
-            // getInstanceOf(subsub::super.region__a__r)
-            // getInstanceOf(subsub::super.region__a__r)
-            // getInstanceOf(subsub::super.region__a__r)
+            // GetInstanceOf(super::a)
+            // GetInstanceOf(sub::a)
+            // GetInstanceOf(subsub::a)
+            // GetInstanceOf(subsub::region__a__r)
+            // GetInstanceOf(subsub::super.region__a__r)
+            // GetInstanceOf(subsub::super.region__a__r)
+            // GetInstanceOf(subsub::super.region__a__r)
// ...
// Somehow, the ref to super in subsub is not moving up the chain
// to the @super.r(); oh, i introduced a bug when i put setGroup
-            // into STG.getInstanceOf()!
+            // into STG.GetInstanceOf()!

string g =
"a() ::= \"X<@r()>Y\"" +
@@ -208,15 +208,15 @@ namespace Antlr4.Test.StringTemplate
"@a.r() ::= \"<@super.r()>2\"" + newline;
writeFile(dir, "sub.stg", sub);
TemplateGroupFile subGroup = new TemplateGroupFile(dir + "/sub.stg");
-            subGroup.importTemplates(group);
+            subGroup.ImportTemplates(group);

string subsub =
"@a.r() ::= \"<@super.r()>3\"" + newline;
writeFile(dir, "subsub.stg", subsub);
TemplateGroupFile subSubGroup = new TemplateGroupFile(dir + "/subsub.stg");
-            subSubGroup.importTemplates(subGroup);
+            subSubGroup.ImportTemplates(subGroup);

-            Template st = subSubGroup.getInstanceOf("a");
+            Template st = subSubGroup.GetInstanceOf("a");

string result = st.Render();
string expecting = "Xfoo23Y";
@@ -236,9 +236,9 @@ namespace Antlr4.Test.StringTemplate
"@a.r() ::= \"A<@super.r()>\"" + newline;
writeFile(dir, "sub.stg", sub);
TemplateGroupFile subGroup = new TemplateGroupFile(dir + "/sub.stg");
-            subGroup.importTemplates(group);
+            subGroup.ImportTemplates(group);

-            Template st = subGroup.getInstanceOf("a");
+            Template st = subGroup.GetInstanceOf("a");
string result = st.Render();
string expecting = "XAfooY";
Assert.AreEqual(expecting, result);
@@ -256,8 +256,8 @@ namespace Antlr4.Test.StringTemplate
ITemplateErrorListener errors = new ErrorBuffer();
writeFile(dir, "g.stg", g);
TemplateGroupFile group = new TemplateGroupFile(dir + "/g.stg");
-            group.setListener(errors);
-            Template st = group.getInstanceOf("a");
+            group.Listener = errors;
+            Template st = group.GetInstanceOf("a");
st.Render();
string result = errors.ToString();
string expecting = "g.stg 3:3: template a doesn't have a region called q" + newline;
@@ -277,12 +277,12 @@ namespace Antlr4.Test.StringTemplate
string sub =
"@a.r() ::= \"A<@super.q()>B\"" + newline; // allow this; trap at runtime
ITemplateErrorListener errors = new ErrorBuffer();
-            group.setListener(errors);
+            group.Listener = errors;
writeFile(dir, "sub.stg", sub);
TemplateGroupFile subGroup = new TemplateGroupFile(dir + "/sub.stg");
-            subGroup.importTemplates(group);
+            subGroup.ImportTemplates(group);

-            Template st = subGroup.getInstanceOf("a");
+            Template st = subGroup.GetInstanceOf("a");
string result = st.Render();
string expecting = "XABY";
Assert.AreEqual(expecting, result);
diff --git a/Antlr4.Test.StringTemplate/TestRenderers.cs b/Antlr4.Test.StringTemplate/TestRenderers.cs
index 1de26f4..c471aa1 100644
--- a/Antlr4.Test.StringTemplate/TestRenderers.cs
+++ b/Antlr4.Test.StringTemplate/TestRenderers.cs
@@ -143,8 +143,8 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            group.registerRenderer(typeof(string), new StringRenderer());
-            Template st = group.getInstanceOf("foo");
+            group.RegisterRenderer(typeof(string), new StringRenderer());
+            Template st = group.GetInstanceOf("foo");
st.Add("x", "hi");
string expecting = "     hi ";
string result = st.Render();
@@ -157,7 +157,7 @@ namespace Antlr4.Test.StringTemplate
string template =
"The names: <names; format=\"upper\">";
TemplateGroup group = new TemplateGroup();
-            group.registerRenderer(typeof(string), new StringRenderer());
+            group.RegisterRenderer(typeof(string), new StringRenderer());
Template st = new Template(template);
st.groupThatCreatedThisInstance = group;
st.Add("names", "ter");
@@ -174,7 +174,7 @@ namespace Antlr4.Test.StringTemplate
string template =
"The names: <names; separator=\" and \", format=\"upper\">";
TemplateGroup group = new TemplateGroup();
-            group.registerRenderer(typeof(string), new StringRenderer());
+            group.RegisterRenderer(typeof(string), new StringRenderer());
Template st = new Template(template);
st.groupThatCreatedThisInstance = group;
st.Add("names", "ter");
@@ -191,7 +191,7 @@ namespace Antlr4.Test.StringTemplate
string template =
"The names: <names; separator=\" and \", null=\"n/a\", format=\"upper\">";
TemplateGroup group = new TemplateGroup();
-            group.registerRenderer(typeof(string), new StringRenderer());
+            group.RegisterRenderer(typeof(string), new StringRenderer());
Template st = new Template(template);
st.groupThatCreatedThisInstance = group;
List<string> names = new List<string>();
@@ -212,9 +212,9 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
-            group.registerRenderer(typeof(int), new NumberRenderer());
-            group.registerRenderer(typeof(double), new NumberRenderer());
-            Template st = group.getInstanceOf("foo");
+            group.RegisterRenderer(typeof(int), new NumberRenderer());
+            group.RegisterRenderer(typeof(double), new NumberRenderer());
+            Template st = group.GetInstanceOf("foo");
st.Add("x", -2100);
st.Add("y", 3.14159);
string expecting = " -2100 3.142 ";
@@ -229,9 +229,9 @@ namespace Antlr4.Test.StringTemplate
"numberThing(x,y,z) ::= \"numbers: <x>, <y>; <z>\"\n";
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
-            group.registerRenderer(typeof(int), new NumberRenderer());
-            group.registerRenderer(typeof(double), new NumberRenderer());
-            Template st = group.getInstanceOf("numberThing");
+            group.RegisterRenderer(typeof(int), new NumberRenderer());
+            group.RegisterRenderer(typeof(double), new NumberRenderer());
+            Template st = group.GetInstanceOf("numberThing");
st.Add("x", -2100);
st.Add("y", 3.14159);
st.Add("z", "hi");
@@ -248,9 +248,9 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
-            group.registerRenderer(typeof(int), new NumberRenderer());
-            group.registerRenderer(typeof(double), new NumberRenderer());
-            Template st = group.getInstanceOf("foo");
+            group.RegisterRenderer(typeof(int), new NumberRenderer());
+            group.RegisterRenderer(typeof(double), new NumberRenderer());
+            Template st = group.GetInstanceOf("foo");
st.Add("x", -2100);
st.Add("y", 3.14159);
// Polish uses '?' (ASCII 160) for ',' and ',' for '.'
diff --git a/Antlr4.Test.StringTemplate/TestScopes.cs b/Antlr4.Test.StringTemplate/TestScopes.cs
index e66e9ae..a20debf 100644
--- a/Antlr4.Test.StringTemplate/TestScopes.cs
+++ b/Antlr4.Test.StringTemplate/TestScopes.cs
@@ -48,8 +48,8 @@ namespace Antlr4.Test.StringTemplate
ErrorBuffer errors = new ErrorBuffer();
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            Template st = group.getInstanceOf("t");
+            group.Listener = errors;
+            Template st = group.GetInstanceOf("t");
st.Add("x", "x");
st.Add("y", "y");
string result = st.Render();
@@ -70,8 +70,8 @@ namespace Antlr4.Test.StringTemplate
ErrorBuffer errors = new ErrorBuffer();
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            Template st = group.getInstanceOf("t");
+            group.Listener = errors;
+            Template st = group.GetInstanceOf("t");
string result = st.Render();

string expectedError = "context [t] 1:1 passed 0 arg(s) to template u with 1 declared arg(s)" + newline;
@@ -86,8 +86,8 @@ namespace Antlr4.Test.StringTemplate
ErrorBuffer errors = new ErrorBuffer();
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            Template st = group.getInstanceOf("t");
+            group.Listener = errors;
+            Template st = group.GetInstanceOf("t");
string result = st.Render();

string expectedError = "context [t] 1:1 attribute x isn't defined" + newline;
@@ -103,8 +103,8 @@ namespace Antlr4.Test.StringTemplate
ErrorBuffer errors = new ErrorBuffer();
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            Template st = group.getInstanceOf("t");
+            group.Listener = errors;
+            Template st = group.GetInstanceOf("t");
st.Add("x", "x");
st.Add("y", "y");
string result = st.Render();
@@ -114,7 +114,7 @@ namespace Antlr4.Test.StringTemplate

string expected = "xx";
Assert.AreEqual(expected, result);
-            group.setListener(ErrorManager.DEFAULT_ERROR_LISTENER);
+            group.Listener = ErrorManager.DEFAULT_ERROR_LISTENER;
}

[TestMethod]
@@ -126,18 +126,18 @@ namespace Antlr4.Test.StringTemplate
ErrorBuffer errors = new ErrorBuffer();
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            Template st = group.getInstanceOf("t");
+            group.Listener = errors;
+            Template st = group.GetInstanceOf("t");
st.Add("names", "Ter");
string result = st.Render();
-            group.getInstanceOf("u").impl.dump();
+            group.GetInstanceOf("u").impl.Dump();

string expectedError = "t.stg 2:11: attribute i isn't defined" + newline;
Assert.AreEqual(expectedError, errors.ToString());

string expected = ":Ter";
Assert.AreEqual(expected, result);
-            group.setListener(ErrorManager.DEFAULT_ERROR_LISTENER);
+            group.Listener = ErrorManager.DEFAULT_ERROR_LISTENER;
}
}
}
diff --git a/Antlr4.Test.StringTemplate/TestSubtemplates.cs b/Antlr4.Test.StringTemplate/TestSubtemplates.cs
index a83ec7a..79ee7a4 100644
--- a/Antlr4.Test.StringTemplate/TestSubtemplates.cs
+++ b/Antlr4.Test.StringTemplate/TestSubtemplates.cs
@@ -44,8 +44,8 @@ namespace Antlr4.Test.StringTemplate
public void TestSimpleIteration()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "names", "<names:{n|<n>}>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "names", "<names:{n|<n>}>!");
+            Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
st.Add("names", "Sumana");
@@ -58,8 +58,8 @@ namespace Antlr4.Test.StringTemplate
public void TestMapIterationIsByKeys()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "emails", "<emails:{n|<n>}>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "emails", "<emails:{n|<n>}>!");
+            Template st = group.GetInstanceOf("test");
IDictionary<string, string> emails = new Dictionary<string, string>();
emails["parrt"] = "Ter";
emails["tombu"] = "Tom";
@@ -74,8 +74,8 @@ namespace Antlr4.Test.StringTemplate
public void TestSimpleIterationWithArg()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "names", "<names:{n | <n>}>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "names", "<names:{n | <n>}>!");
+            Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
st.Add("names", "Sumana");
@@ -88,8 +88,8 @@ namespace Antlr4.Test.StringTemplate
public void TestNestedIterationWithArg()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "users", "<users:{u | <u.id:{id | <id>=}><u.name>}>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "users", "<users:{u | <u.id:{id | <id>=}><u.name>}>!");
+            Template st = group.GetInstanceOf("test");
st.Add("users", new TestCoreBasics.User(1, "parrt"));
st.Add("users", new TestCoreBasics.User(2, "tombu"));
st.Add("users", new TestCoreBasics.User(3, "sri"));
@@ -190,7 +190,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "g.stg", templates);

TemplateGroup group = new TemplateGroupFile(tmpdir + "/g.stg");
-            Template p = group.getInstanceOf("page");
+            Template p = group.GetInstanceOf("page");
p.Add("names", "Ter");
p.Add("names", "Tom");
p.Add("names", "Sriram");
@@ -206,15 +206,15 @@ namespace Antlr4.Test.StringTemplate
{
ErrorBuffer errors = new ErrorBuffer();
TemplateGroup innerGroup = new TemplateGroup();
-            innerGroup.setListener(errors);
-            innerGroup.defineTemplate("test", "m", "<m:samegroup()>");
-            innerGroup.defineTemplate("samegroup", "x", "hi ");
-            Template st = innerGroup.getInstanceOf("test");
+            innerGroup.Listener = errors;
+            innerGroup.DefineTemplate("test", "m", "<m:samegroup()>");
+            innerGroup.DefineTemplate("samegroup", "x", "hi ");
+            Template st = innerGroup.GetInstanceOf("test");
st.Add("m", new int[] { 1, 2, 3 });

TemplateGroup outerGroup = new TemplateGroup();
-            outerGroup.defineTemplate("errorMessage", "x", "<x>");
-            Template outerST = outerGroup.getInstanceOf("errorMessage");
+            outerGroup.DefineTemplate("errorMessage", "x", "<x>");
+            Template outerST = outerGroup.GetInstanceOf("errorMessage");
outerST.Add("x", st);

string expected = "hi hi hi ";
@@ -230,15 +230,15 @@ namespace Antlr4.Test.StringTemplate
{
ErrorBuffer errors = new ErrorBuffer();
TemplateGroup innerGroup = new TemplateGroup();
-            innerGroup.setListener(errors);
-            innerGroup.defineTemplate("test", "m", "<m:samegroup()>");
-            innerGroup.defineTemplate("samegroup", "x", "hi ");
-            Template st = innerGroup.getInstanceOf("test");
+            innerGroup.Listener = errors;
+            innerGroup.DefineTemplate("test", "m", "<m:samegroup()>");
+            innerGroup.DefineTemplate("samegroup", "x", "hi ");
+            Template st = innerGroup.GetInstanceOf("test");
st.Add("m", 10);

TemplateGroup outerGroup = new TemplateGroup();
-            outerGroup.defineTemplate("errorMessage", "x", "<x>");
-            Template outerST = outerGroup.getInstanceOf("errorMessage");
+            outerGroup.DefineTemplate("errorMessage", "x", "<x>");
+            Template outerST = outerGroup.GetInstanceOf("errorMessage");
outerST.Add("x", st);

string expected = "hi ";
@@ -254,15 +254,15 @@ namespace Antlr4.Test.StringTemplate
{
ErrorBuffer errors = new ErrorBuffer();
TemplateGroup innerGroup = new TemplateGroup();
-            innerGroup.setListener(errors);
-            innerGroup.defineTemplate("bob", "inner");
-            Template st = innerGroup.getInstanceOf("bob");
+            innerGroup.Listener = errors;
+            innerGroup.DefineTemplate("bob", "inner");
+            Template st = innerGroup.GetInstanceOf("bob");

TemplateGroup outerGroup = new TemplateGroup();
-            outerGroup.setListener(errors);
-            outerGroup.defineTemplate("errorMessage", "x", "<x>");
-            outerGroup.defineTemplate("bob", "outer"); // should not be visible to test() in innerGroup
-            Template outerST = outerGroup.getInstanceOf("errorMessage");
+            outerGroup.Listener = errors;
+            outerGroup.DefineTemplate("errorMessage", "x", "<x>");
+            outerGroup.DefineTemplate("bob", "outer"); // should not be visible to test() in innerGroup
+            Template outerST = outerGroup.GetInstanceOf("errorMessage");
outerST.Add("x", st);

string expected = "inner";
diff --git a/Antlr4.Test.StringTemplate/TestSyntaxErrors.cs b/Antlr4.Test.StringTemplate/TestSyntaxErrors.cs
index ce2c849..a11e00f 100644
--- a/Antlr4.Test.StringTemplate/TestSyntaxErrors.cs
+++ b/Antlr4.Test.StringTemplate/TestSyntaxErrors.cs
@@ -42,10 +42,10 @@ namespace Antlr4.Test.StringTemplate
string template = " <> ";
TemplateGroup group = new TemplateGroup();
ErrorBuffer errors = new ErrorBuffer();
-            group.setListener(errors);
+            group.Listener = errors;
try
{
-                group.defineTemplate("test", template);
+                group.DefineTemplate("test", template);
}
catch (TemplateException)
{
@@ -61,10 +61,10 @@ namespace Antlr4.Test.StringTemplate
string template = "hi <> ";
TemplateGroup group = new TemplateGroup();
ErrorBuffer errors = new ErrorBuffer();
-            group.setListener(errors);
+            group.Listener = errors;
try
{
-                group.defineTemplate("test", template);
+                group.DefineTemplate("test", template);
}
catch (TemplateException)
{
@@ -80,10 +80,10 @@ namespace Antlr4.Test.StringTemplate
string template = "   <*>";
TemplateGroup group = new TemplateGroup();
ErrorBuffer errors = new ErrorBuffer();
-            group.setListener(errors);
+            group.Listener = errors;
try
{
-                group.defineTemplate("test", template);
+                group.DefineTemplate("test", template);
}
catch (TemplateException)
{
@@ -103,8 +103,8 @@ namespace Antlr4.Test.StringTemplate

ITemplateErrorListener errors = new ErrorBuffer();
TemplateGroupFile group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "t.stg 1:15: doesn't look like an expression" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -120,8 +120,8 @@ namespace Antlr4.Test.StringTemplate

ErrorBuffer errors = new ErrorBuffer();
TemplateGroupFile group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "[t.stg 1:15: \\n in string, t.stg 1:14: doesn't look like an expression]";
string result = errors.Errors.ToListString();
Assert.AreEqual(expected, result);
@@ -137,8 +137,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = null;
ITemplateErrorListener errors = new ErrorBuffer();
group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "t.stg 1:29: '!' came as a complete surprise to me" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -154,8 +154,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = null;
ITemplateErrorListener errors = new ErrorBuffer();
group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "t.stg 1:34: premature EOF" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -171,8 +171,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = null;
ITemplateErrorListener errors = new ErrorBuffer();
group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "t.stg 1:19: '>' came as a complete surprise to me" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -188,8 +188,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = null;
ITemplateErrorListener errors = new ErrorBuffer();
group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
-            group.setListener(errors);
-            group.load(); // force load
+            group.Listener = errors;
+            group.Load(); // force load
string expected = "t.stg 1:19: mismatched input ',' expecting RDELIM" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
diff --git a/Antlr4.Test.StringTemplate/TestVisualizer.cs b/Antlr4.Test.StringTemplate/TestVisualizer.cs
index 757ad00..af841a4 100644
--- a/Antlr4.Test.StringTemplate/TestVisualizer.cs
+++ b/Antlr4.Test.StringTemplate/TestVisualizer.cs
@@ -65,21 +65,21 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
TemplateGroup.debug = true;
-            DebugST st = (DebugST)group.getInstanceOf("method");
-            st.impl.dump();
+            DebugST st = (DebugST)group.GetInstanceOf("method");
+            st.impl.Dump();
st.Add("type", "float");
st.Add("name", "foo");
st.Add("locals", 3);
st.Add("args", new String[] { "x", "y", "z" });
-            Template s1 = group.getInstanceOf("assign");
-            Template paren = group.getInstanceOf("paren");
+            Template s1 = group.GetInstanceOf("assign");
+            Template paren = group.GetInstanceOf("paren");
paren.Add("x", "x");
s1.Add("a", paren);
s1.Add("b", "y");
-            Template s2 = group.getInstanceOf("assign");
+            Template s2 = group.GetInstanceOf("assign");
s2.Add("a", "y");
s2.Add("b", "z");
-            Template s3 = group.getInstanceOf("return");
+            Template s3 = group.GetInstanceOf("return");
s3.Add("x", "3.14159");
st.Add("stats", s1);
st.Add("stats", s2);
@@ -102,13 +102,13 @@ namespace Antlr4.Test.StringTemplate
private void Inspect(DebugST template, ErrorManager errorManager, CultureInfo culture, int lineWidth)
{
ErrorBuffer errors = new ErrorBuffer();
-            template.impl.nativeGroup.setListener(errors);
+            template.impl.nativeGroup.Listener = errors;
StringWriter @out = new StringWriter();
ITemplateWriter wr = new AutoIndentWriter(@out);
-            wr.setLineWidth(lineWidth);
+            wr.SetLineWidth(lineWidth);
Interpreter interp = new Interpreter(template.groupThatCreatedThisInstance, culture);
interp.Execute(wr, template); // Render and track events
-            TemplateVisualizer visualizer = new TemplateVisualizer(errorManager, template, @out.ToString(), interp, interp.getExecutionTrace(), errors.Errors);
+            TemplateVisualizer visualizer = new TemplateVisualizer(errorManager, template, @out.ToString(), interp, interp.GetExecutionTrace(), errors.Errors);
visualizer.Show();
}
}
diff --git a/Antlr4.Test.StringTemplate/TestWhitespace.cs b/Antlr4.Test.StringTemplate/TestWhitespace.cs
index 5efe895..06e77de 100644
--- a/Antlr4.Test.StringTemplate/TestWhitespace.cs
+++ b/Antlr4.Test.StringTemplate/TestWhitespace.cs
@@ -44,8 +44,8 @@ namespace Antlr4.Test.StringTemplate
public void TestTrimmedSubtemplates()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "names", "<names:{n | <n>}>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "names", "<names:{n | <n>}>!");
+            Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
st.Add("names", "Sumana");
@@ -58,9 +58,9 @@ namespace Antlr4.Test.StringTemplate
public void TestTrimmedSubtemplatesNoArgs()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "[<foo({ foo })>]");
-            group.defineTemplate("foo", "x", "<x>");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "[<foo({ foo })>]");
+            group.DefineTemplate("foo", "x", "<x>");
+            Template st = group.GetInstanceOf("test");
string expected = "[ foo ]";
string result = st.Render();
Assert.AreEqual(expected, result);
@@ -70,8 +70,8 @@ namespace Antlr4.Test.StringTemplate
public void TestTrimmedSubtemplatesArgs()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "names", "<names:{x|  foo }>");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "names", "<names:{x|  foo }>");
+            Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
st.Add("names", "Sumana");
@@ -84,8 +84,8 @@ namespace Antlr4.Test.StringTemplate
public void TestTrimJustOneWSInSubtemplates()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "names", "<names:{n |  <n> }>!");
-            Template st = group.getInstanceOf("test");
+            group.DefineTemplate("test", "names", "<names:{n |  <n> }>!");
+            Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
st.Add("names", "Sumana");
@@ -98,9 +98,9 @@ namespace Antlr4.Test.StringTemplate
public void TestTrimNewlineInSubtemplates()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "names", "<names:{n |\n" +
+            group.DefineTemplate("test", "names", "<names:{n |\n" +
"<n>}>!");
-            Template st = group.getInstanceOf("test");
+            Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
st.Add("names", "Sumana");
@@ -113,10 +113,10 @@ namespace Antlr4.Test.StringTemplate
public void TestLeaveNewlineOnEndInSubtemplates()
{
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "names", "<names:{n |\n" +
+            group.DefineTemplate("test", "names", "<names:{n |\n" +
"<n>\n" +
"}>!");
-            Template st = group.getInstanceOf("test");
+            Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
st.Add("names", "Sumana");
@@ -130,10 +130,10 @@ namespace Antlr4.Test.StringTemplate
{
// fails since it counts indent from outer too
TemplateGroup group = new TemplateGroup();
-            group.defineTemplate("test", "names", "  <names:{n |\n" +
+            group.DefineTemplate("test", "names", "  <names:{n |\n" +
"    <n>\n" +
"  }>!");
-            Template st = group.getInstanceOf("test");
+            Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
st.Add("names", "Sumana");
@@ -143,7 +143,7 @@ namespace Antlr4.Test.StringTemplate
"    Sumana" + newline +
"!";
string result = st.Render();
-            st.impl.dump();
+            st.impl.Dump();
Assert.AreEqual(expected, result);
}


