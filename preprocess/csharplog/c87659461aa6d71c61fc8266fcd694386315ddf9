commit c87659461aa6d71c61fc8266fcd694386315ddf9
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Mar 16 15:18:54 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Mar 16 15:18:54 2009 -0800

C# Port:
* C# naming conventions for methods in StringTemplate library

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 5890]

diff --git a/Antlr3.StringTemplate/AutoIndentWriter.cs b/Antlr3.StringTemplate/AutoIndentWriter.cs
index 1678ee7..da10852 100644
--- a/Antlr3.StringTemplate/AutoIndentWriter.cs
+++ b/Antlr3.StringTemplate/AutoIndentWriter.cs
@@ -117,7 +117,7 @@ namespace Antlr3.ST
}
}

-        public virtual void setLineWidth( int lineWidth )
+        public virtual void SetLineWidth( int lineWidth )
{
_lineWidth = lineWidth;
}
@@ -135,7 +135,7 @@ namespace Antlr3.ST
*  This prevents a check later to deal with anchors when starting new line.
*  </remarks>
*/
-        public virtual void pushIndentation( string indent )
+        public virtual void PushIndentation( string indent )
{
int lastAnchor = 0;
int indentWidth = IndentationWidth;
@@ -143,7 +143,7 @@ namespace Antlr3.ST
if ( _anchors_sp >= 0 && _anchors[_anchors_sp] > indentWidth )
{
lastAnchor = _anchors[_anchors_sp];
-                StringBuilder buf = getIndentString( lastAnchor - indentWidth );
+                StringBuilder buf = GetIndentString( lastAnchor - indentWidth );
if ( indent != null )
buf.Append( indent ); // don't add if null
_indents.Add( buf.ToString() );
@@ -156,7 +156,7 @@ namespace Antlr3.ST
}

/// <exception cref="System.ArgumentOutOfRangeException" />
-        public virtual string popIndentation()
+        public virtual string PopIndentation()
{
string value = _indents[_indents.Count - 1];
_indents.RemoveAt( _indents.Count - 1 );
@@ -170,7 +170,7 @@ namespace Antlr3.ST
/// <exception cref="System.InvalidCastException" />
/// <exception cref="System.ArgumentOutOfRangeException" />
/// <exception cref="System.ArgumentException" />
-        public virtual void pushAnchorPoint()
+        public virtual void PushAnchorPoint()
{
if ( ( _anchors_sp + 1 ) >= _anchors.Length )
{
@@ -182,7 +182,7 @@ namespace Antlr3.ST
_anchors[_anchors_sp] = _charPosition;
}

-        public virtual void popAnchorPoint()
+        public virtual void PopAnchorPoint()
{
_anchors_sp--;
}
@@ -198,7 +198,7 @@ namespace Antlr3.ST
/// <summary>Write out a string literal or attribute expression or expression element.</summary>
/// <exception cref="System.ObjectDisposedException" />
/// <exception cref="System.IO.IOException" />
-        public virtual int write( string str )
+        public virtual int Write( string str )
{
int n = 0;
for ( int i = 0; i < str.Length; i++ )
@@ -222,7 +222,7 @@ namespace Antlr3.ST
// check to see if we are at the start of a line; need indent if so
if ( _atStartOfLine )
{
-                    n += indent();
+                    n += Indent();
_atStartOfLine = false;
}
n++;
@@ -234,9 +234,9 @@ namespace Antlr3.ST

/// <exception cref="System.ObjectDisposedException" />
/// <exception cref="System.IO.IOException" />
-        public virtual int writeSeparator( string str )
+        public virtual int WriteSeparator( string str )
{
-            return write( str );
+            return Write( str );
}

/** <summary>Write out a string literal or attribute expression or expression element.</summary>
@@ -252,17 +252,17 @@ namespace Antlr3.ST
*  <exception cref="System.OverflowException" />
*  <exception cref="System.IO.IOException" />
*/
-        public virtual int write( string str, string wrap )
+        public virtual int Write( string str, string wrap )
{
-            int n = writeWrapSeparator( wrap );
-            return n + write( str );
+            int n = WriteWrapSeparator( wrap );
+            return n + Write( str );
}

/// <exception cref="System.ArgumentNullException" />
/// <exception cref="System.ObjectDisposedException" />
/// <exception cref="System.OverflowException" />
/// <exception cref="System.IO.IOException" />
-        public virtual int writeWrapSeparator( string wrap )
+        public virtual int WriteWrapSeparator( string wrap )
{
int n = 0;
// if want wrap and not already at start of line (last char was \n)
@@ -282,7 +282,7 @@ namespace Antlr3.ST
n += _newline.Length;
_writer.Write( _newline );
_charPosition = 0;
-                        n += indent();
+                        n += Indent();

// handle \r\n in the wrap string
if ( (c == '\r') && (i < wrap.Length - 1) && (wrap[i + 1] == '\n') )
@@ -303,7 +303,7 @@ namespace Antlr3.ST

/// <exception cref="System.ObjectDisposedException" />
/// <exception cref="System.IO.IOException" />
-        public virtual int indent()
+        public virtual int Indent()
{
int n = 0;
for ( int i = 0; i < _indents.Count; i++ )
@@ -322,7 +322,7 @@ namespace Antlr3.ST
/// <exception cref="System.ArgumentException" />
/// <exception cref="System.ObjectDisposedException" />
/// <exception cref="System.IO.IOException" />
-        public virtual int indent( int spaces )
+        public virtual int Indent( int spaces )
{
if ( spaces < 0 )
throw new ArgumentException( "spaces cannot be negative", "spaces" );
@@ -332,7 +332,7 @@ namespace Antlr3.ST
return spaces;
}

-        protected virtual StringBuilder getIndentString( int spaces )
+        protected virtual StringBuilder GetIndentString( int spaces )
{
return new StringBuilder( new string( ' ', spaces ) );
}
diff --git a/Antlr3.StringTemplate/CommonGroupLoader.cs b/Antlr3.StringTemplate/CommonGroupLoader.cs
index 92c5520..697c24c 100644
--- a/Antlr3.StringTemplate/CommonGroupLoader.cs
+++ b/Antlr3.StringTemplate/CommonGroupLoader.cs
@@ -70,7 +70,7 @@ namespace Antlr3.ST
*  Look in each relative directory for the file called 'name'.
*  </summary>
*/
-        protected override TextReader locate( string name )
+        protected override TextReader Locate( string name )
{
// check for templates on disk first
foreach ( string dir in _dirs )
diff --git a/Antlr3.StringTemplate/Language/ASTExpr.cs b/Antlr3.StringTemplate/Language/ASTExpr.cs
index 36547b4..e17ee13 100644
--- a/Antlr3.StringTemplate/Language/ASTExpr.cs
+++ b/Antlr3.StringTemplate/Language/ASTExpr.cs
@@ -163,20 +163,20 @@ namespace Antlr3.ST.Language
*  char position.
*  </remarks>
*/
-        public override int write( StringTemplate self, IStringTemplateWriter @out )
+        public override int Write( StringTemplate self, IStringTemplateWriter @out )
{
if ( exprTree == null || self == null || @out == null )
{
return 0;
}
// handle options, anchor, wrap, separator...
-            StringTemplateAST anchorAST = (StringTemplateAST)getOption( "anchor" );
+            StringTemplateAST anchorAST = (StringTemplateAST)GetOption( "anchor" );
if ( anchorAST != null )
{ // any non-empty expr means true; check presence
-                @out.pushAnchorPoint();
+                @out.PushAnchorPoint();
}
-            @out.pushIndentation( Indentation );
-            handleExprOptions( self );
+            @out.PushIndentation( Indentation );
+            HandleExprOptions( self );
//System.out.println("evaluating tree: "+exprTree.toStringList());
ActionEvaluator eval =
new ActionEvaluator( self, this, @out, exprTree );
@@ -188,43 +188,43 @@ namespace Antlr3.ST.Language
}
catch ( RecognitionException re )
{
-                self.error( "can't evaluate tree: " + exprTree.ToStringTree(), re );
+                self.Error( "can't evaluate tree: " + exprTree.ToStringTree(), re );
}
-            @out.popIndentation();
+            @out.PopIndentation();
if ( anchorAST != null )
{
-                @out.popAnchorPoint();
+                @out.PopAnchorPoint();
}
return n;
}

/** <summary>Grab and cache options; verify options are valid</summary> */
-        protected virtual void handleExprOptions( StringTemplate self )
+        protected virtual void HandleExprOptions( StringTemplate self )
{
// make sure options don't use format / renderer.  They are usually
// strings which might invoke a string renderer etc...
formatString = null;
-            StringTemplateAST wrapAST = (StringTemplateAST)getOption( "wrap" );
+            StringTemplateAST wrapAST = (StringTemplateAST)GetOption( "wrap" );
if ( wrapAST != null )
{
-                wrapString = evaluateExpression( self, wrapAST );
+                wrapString = EvaluateExpression( self, wrapAST );
}
-            StringTemplateAST nullValueAST = (StringTemplateAST)getOption( "null" );
+            StringTemplateAST nullValueAST = (StringTemplateAST)GetOption( "null" );
if ( nullValueAST != null )
{
-                nullValue = evaluateExpression( self, nullValueAST );
+                nullValue = EvaluateExpression( self, nullValueAST );
}
-            StringTemplateAST separatorAST = (StringTemplateAST)getOption( "separator" );
+            StringTemplateAST separatorAST = (StringTemplateAST)GetOption( "separator" );
if ( separatorAST != null )
{
-                separatorString = evaluateExpression( self, separatorAST );
+                separatorString = EvaluateExpression( self, separatorAST );
}
// following addition inspired by John Snyders
StringTemplateAST formatAST =
-                (StringTemplateAST)getOption( "format" );
+                (StringTemplateAST)GetOption( "format" );
if ( formatAST != null )
{
-                formatString = evaluateExpression( self, formatAST );
+                formatString = EvaluateExpression( self, formatAST );
}

// Check that option is valid
@@ -233,7 +233,7 @@ namespace Antlr3.ST.Language
foreach ( string option in options.Keys )
{
if ( !supportedOptions.Contains( option ) )
-                        self.warning( "ignoring unsupported option: " + option );
+                        self.Warning( "ignoring unsupported option: " + option );
}
}
}
@@ -245,7 +245,7 @@ namespace Antlr3.ST.Language
*  to be walked in lock step as n=names[i], p=phones[i].
*  </summary>
*/
-        public virtual object applyTemplateToListOfAttributes( StringTemplate self,
+        public virtual object ApplyTemplateToListOfAttributes( StringTemplate self,
IList attributes,
StringTemplate templateToApply )
{
@@ -263,7 +263,7 @@ namespace Antlr3.ST.Language
object o = attributes[a];
if ( o != null )
{
-                    o = convertAnythingToIterator( o );
+                    o = ConvertAnythingToIterator( o );
attributes[a] = o; // alter the list in place
}
}
@@ -271,20 +271,20 @@ namespace Antlr3.ST.Language
int numAttributes = attributes.Count;

// ensure arguments line up
-            var formalArguments = templateToApply.getFormalArguments();
+            var formalArguments = templateToApply.GetFormalArguments();
if ( formalArguments == null || formalArguments.Count == 0 )
{
-                self.error( "missing arguments in anonymous" +
-                           " template in context " + self.getEnclosingInstanceStackString() );
+                self.Error( "missing arguments in anonymous" +
+                           " template in context " + self.GetEnclosingInstanceStackString() );
return null;
}
string[] formalArgumentNames = formalArguments.Select( fa => fa.name ).ToArray();
if ( formalArgumentNames.Length != numAttributes )
{
string formalArgumentsText = formalArguments.Select( fa => fa.name ).ToList().ToElementString();
-                self.error( "number of arguments " + formalArgumentsText +
+                self.Error( "number of arguments " + formalArgumentsText +
" mismatch between attribute list and anonymous" +
-                           " template in context " + self.getEnclosingInstanceStackString() );
+                           " template in context " + self.GetEnclosingInstanceStackString() );
// truncate arg list to match smaller size
int shorterSize = Math.Min( formalArgumentNames.Length, numAttributes );
numAttributes = shorterSize;
@@ -323,9 +323,9 @@ namespace Antlr3.ST.Language
}
argumentContext[DEFAULT_INDEX_VARIABLE_NAME] = i + 1;
argumentContext[DEFAULT_INDEX0_VARIABLE_NAME] = i;
-                StringTemplate embedded = templateToApply.getInstanceOf();
-                embedded.setEnclosingInstance( self );
-                embedded.setArgumentContext( argumentContext );
+                StringTemplate embedded = templateToApply.GetInstanceOf();
+                embedded.SetEnclosingInstance( self );
+                embedded.SetArgumentContext( argumentContext );
results.Add( embedded );
i++;
}
@@ -333,7 +333,7 @@ namespace Antlr3.ST.Language
return results;
}

-        public virtual object applyListOfAlternatingTemplates( StringTemplate self,
+        public virtual object ApplyListOfAlternatingTemplates( StringTemplate self,
object attributeValue,
IList<StringTemplate> templatesToApply )
{
@@ -346,8 +346,8 @@ namespace Antlr3.ST.Language

// normalize collections and such to use iterators
// anything iteratable can be used for "APPLY"
-            attributeValue = convertArrayToList( attributeValue );
-            attributeValue = convertAnythingIteratableToIterator( attributeValue );
+            attributeValue = ConvertArrayToList( attributeValue );
+            attributeValue = ConvertAnythingIteratableToIterator( attributeValue );

if ( attributeValue is Iterator )
{
@@ -372,15 +372,15 @@ namespace Antlr3.ST.Language
// eval.g), but that is used as the examplar.  We must create
// a new instance of the embedded template to apply each time
// to get new attribute sets etc...
-                    StringTemplateAST args = embedded.getArgumentsAST();
-                    embedded = embedded.getInstanceOf(); // make new instance
-                    embedded.setEnclosingInstance( self );
-                    embedded.setArgumentsAST( args );
+                    StringTemplateAST args = embedded.GetArgumentsAST();
+                    embedded = embedded.GetInstanceOf(); // make new instance
+                    embedded.SetEnclosingInstance( self );
+                    embedded.SetArgumentsAST( args );
argumentContext = new Dictionary<string, object>();
-                    var formalArgs = embedded.getFormalArguments();
+                    var formalArgs = embedded.GetFormalArguments();
bool isAnonymous =
-                        embedded.getName() == StringTemplate.ANONYMOUS_ST_NAME;
-                    setSoleFormalArgumentToIthValue( embedded, argumentContext, ithValue );
+                        embedded.GetName() == StringTemplate.ANONYMOUS_ST_NAME;
+                    SetSoleFormalArgumentToIthValue( embedded, argumentContext, ithValue );
// if it's an anonymous template with a formal arg, don't set it/attr
if ( !( isAnonymous && formalArgs != null && formalArgs.Count > 0 ) )
{
@@ -389,8 +389,8 @@ namespace Antlr3.ST.Language
}
argumentContext[DEFAULT_INDEX_VARIABLE_NAME] = i + 1;
argumentContext[DEFAULT_INDEX0_VARIABLE_NAME] = i;
-                    embedded.setArgumentContext( argumentContext );
-                    evaluateArguments( embedded );
+                    embedded.SetArgumentContext( argumentContext );
+                    EvaluateArguments( embedded );
/*
System.err.println("i="+i+": applyTemplate("+embedded.getName()+
", args="+argumentContext+
@@ -414,11 +414,11 @@ namespace Antlr3.ST.Language
*/
embedded = (StringTemplate)templatesToApply[0];
argumentContext = new Dictionary<string, object>();
-                var formalArgs = embedded.getFormalArguments();
-                StringTemplateAST args = embedded.getArgumentsAST();
-                setSoleFormalArgumentToIthValue( embedded, argumentContext, attributeValue );
+                var formalArgs = embedded.GetFormalArguments();
+                StringTemplateAST args = embedded.GetArgumentsAST();
+                SetSoleFormalArgumentToIthValue( embedded, argumentContext, attributeValue );
bool isAnonymous =
-                    embedded.getName() == StringTemplate.ANONYMOUS_ST_NAME;
+                    embedded.GetName() == StringTemplate.ANONYMOUS_ST_NAME;
// if it's an anonymous template with a formal arg, don't set it/attr
if ( !( isAnonymous && formalArgs != null && formalArgs.Count > 0 ) )
{
@@ -427,25 +427,25 @@ namespace Antlr3.ST.Language
}
argumentContext[DEFAULT_INDEX_VARIABLE_NAME] = 1;
argumentContext[DEFAULT_INDEX0_VARIABLE_NAME] = 0;
-                embedded.setArgumentContext( argumentContext );
-                evaluateArguments( embedded );
+                embedded.SetArgumentContext( argumentContext );
+                EvaluateArguments( embedded );
return embedded;
}
}

-        protected virtual void setSoleFormalArgumentToIthValue( StringTemplate embedded, IDictionary argumentContext, object ithValue )
+        protected virtual void SetSoleFormalArgumentToIthValue( StringTemplate embedded, IDictionary argumentContext, object ithValue )
{
-            var formalArgs = embedded.getFormalArguments();
+            var formalArgs = embedded.GetFormalArguments();
if ( formalArgs != null )
{
string soleArgName = null;
bool isAnonymous =
-                    embedded.getName() == StringTemplate.ANONYMOUS_ST_NAME;
+                    embedded.GetName() == StringTemplate.ANONYMOUS_ST_NAME;
if ( formalArgs.Count == 1 || ( isAnonymous && formalArgs.Count > 0 ) )
{
if ( isAnonymous && formalArgs.Count > 1 )
{
-                        embedded.error( "too many arguments on {...} template: " + formalArgs );
+                        embedded.Error( "too many arguments on {...} template: " + formalArgs );
}
// if exactly 1 arg or anonymous, give that the value of
// "it" as a convenience like they said
@@ -468,7 +468,7 @@ namespace Antlr3.ST.Language
*  Cache repeated requests for obj.prop within same group.
*  </remarks>
*/
-        public virtual object getObjectProperty( StringTemplate self,
+        public virtual object GetObjectProperty( StringTemplate self,
object o,
object propertyName )
{
@@ -496,10 +496,10 @@ namespace Antlr3.ST.Language
value = convertArrayToList(value);
self.getGroup().cacheObjectProperty(o,propertyName,value);
*/
-            object value = rawGetObjectProperty( self, o, propertyName );
+            object value = RawGetObjectProperty( self, o, propertyName );
// take care of array properties...convert to a List so we can
// apply templates to the elements etc...
-            value = convertArrayToList( value );
+            value = ConvertArrayToList( value );
return value;
}

@@ -560,7 +560,7 @@ namespace Antlr3.ST.Language
return member;
}

-        protected virtual object rawGetObjectProperty( StringTemplate self, object o, object property )
+        protected virtual object RawGetObjectProperty( StringTemplate self, object o, object property )
{
Type c = o.GetType();
object value = null;
@@ -570,7 +570,7 @@ namespace Antlr3.ST.Language
if ( c == typeof( StringTemplate.Aggregate ) )
{
string propertyName2 = (string)property;
-                value = ( (StringTemplate.Aggregate)o ).get( (string)propertyName2 );
+                value = ( (StringTemplate.Aggregate)o ).Get( (string)propertyName2 );
return value;
}

@@ -579,7 +579,7 @@ namespace Antlr3.ST.Language
// TODO: TJP just asked himself why we can't do inherited attr here?
else if ( c == typeof( StringTemplate ) )
{
-                var attributes = ( (StringTemplate)o ).getAttributes();
+                var attributes = ( (StringTemplate)o ).GetAttributes();
if ( attributes != null )
{
string propertyName2 = (string)property;
@@ -661,7 +661,7 @@ namespace Antlr3.ST.Language
}
catch ( Exception e )
{
-                    self.error( "Can't get property " + propertyName + " using method get/is" + propertyName +
+                    self.Error( "Can't get property " + propertyName + " using method get/is" + propertyName +
" from " + c.Name + " instance", e );
}
}
@@ -676,14 +676,14 @@ namespace Antlr3.ST.Language
}
catch ( FieldAccessException iae )
{
-                        self.error( "Can't access property " + propertyName + " using method get/is" + propertyName +
+                        self.Error( "Can't access property " + propertyName + " using method get/is" + propertyName +
" or direct field access from " + c.Name + " instance", iae );
}
}
else
{
-                    self.error( "Class " + c.Name + " has no such attribute: " + propertyName +
-                        " in template context " + self.getEnclosingInstanceStackString(), null );
+                    self.Error( "Class " + c.Name + " has no such attribute: " + propertyName +
+                        " in template context " + self.GetEnclosingInstanceStackString(), null );
}
}

@@ -729,7 +729,7 @@ namespace Antlr3.ST.Language
*  with size==0 to return false. TJP 5/1/2005
*  </remarks>
*/
-        public virtual bool testAttributeTrue( object a )
+        public virtual bool TestAttributeTrue( object a )
{
if ( a == null )
{
@@ -778,21 +778,21 @@ namespace Antlr3.ST.Language
*  this is inserted into another template.
*  </summary>
*/
-        public virtual StringTemplate getTemplateInclude( StringTemplate enclosing,
+        public virtual StringTemplate GetTemplateInclude( StringTemplate enclosing,
string templateName,
StringTemplateAST argumentsAST )
{
//System.out.println("getTemplateInclude: look up "+enclosing.getGroup().getName()+"::"+templateName);
-            StringTemplateGroup group = enclosing.getGroup();
-            StringTemplate embedded = group.getEmbeddedInstanceOf( enclosing, templateName );
+            StringTemplateGroup group = enclosing.GetGroup();
+            StringTemplate embedded = group.GetEmbeddedInstanceOf( enclosing, templateName );
if ( embedded == null )
{
-                enclosing.error( "cannot make embedded instance of " + templateName +
-                        " in template " + enclosing.getName() );
+                enclosing.Error( "cannot make embedded instance of " + templateName +
+                        " in template " + enclosing.GetName() );
return null;
}
-            embedded.setArgumentsAST( argumentsAST );
-            evaluateArguments( embedded );
+            embedded.SetArgumentsAST( argumentsAST );
+            EvaluateArguments( embedded );
return embedded;
}

@@ -810,9 +810,9 @@ namespace Antlr3.ST.Language
*  a separator arg; used when is a vector.
*  </remarks>
*/
-        public virtual int writeAttribute( StringTemplate self, object o, IStringTemplateWriter @out )
+        public virtual int WriteAttribute( StringTemplate self, object o, IStringTemplateWriter @out )
{
-            return write( self, o, @out );
+            return Write( self, o, @out );
}

/** <summary>Write o relative to self to out.</summary>
@@ -822,7 +822,7 @@ namespace Antlr3.ST.Language
*  you are about to write a value, check formatting.
*  </remarks>
*/
-        protected virtual int write( StringTemplate self,
+        protected virtual int Write( StringTemplate self,
object o,
IStringTemplateWriter @out )
{
@@ -846,18 +846,18 @@ namespace Antlr3.ST.Language
// than one template (like both a header file and C file when
// generating C code).  It must execute within the context of
// the enclosing template.
-                    stToWrite.setEnclosingInstance( self );
+                    stToWrite.SetEnclosingInstance( self );
// if self is found up the enclosing instance chain, then
// infinite recursion
-                    if ( StringTemplate.inLintMode() &&
-                         StringTemplate.isRecursiveEnclosingInstance( stToWrite ) )
+                    if ( StringTemplate.InLintMode() &&
+                         StringTemplate.IsRecursiveEnclosingInstance( stToWrite ) )
{
// throw exception since sometimes eval keeps going
// even after I ignore this write of o.
throw new InvalidOperationException( "infinite recursion to " +
-                                stToWrite.getTemplateDeclaratorString() + " referenced in " +
-                                stToWrite.getEnclosingInstance().getTemplateDeclaratorString() +
-                                "; stack trace:" + Environment.NewLine + stToWrite.getEnclosingInstanceStackTrace() );
+                                stToWrite.GetTemplateDeclaratorString() + " referenced in " +
+                                stToWrite.GetEnclosingInstance().GetTemplateDeclaratorString() +
+                                "; stack trace:" + Environment.NewLine + stToWrite.GetEnclosingInstanceStackTrace() );
}
else
{
@@ -865,13 +865,13 @@ namespace Antlr3.ST.Language
// might need to wrap
if ( wrapString != null )
{
-                            n = @out.writeWrapSeparator( wrapString );
+                            n = @out.WriteWrapSeparator( wrapString );
}
// check if formatting needs to be applied to the stToWrite
if ( formatString != null )
{
IAttributeRenderer renderer =
-                                self.getAttributeRenderer( typeof( string ) );
+                                self.GetAttributeRenderer( typeof( string ) );
if ( renderer != null )
{
// you pay a penalty for applying format option to a template
@@ -879,18 +879,18 @@ namespace Antlr3.ST.Language
// be formatted before being written to the real output.
StringWriter buf = new StringWriter();
IStringTemplateWriter sw =
-                                    self.getGroup().getStringTemplateWriter( buf );
-                                stToWrite.write( sw );
-                                n = @out.write( renderer.ToString( buf.ToString(), formatString ) );
+                                    self.GetGroup().GetStringTemplateWriter( buf );
+                                stToWrite.Write( sw );
+                                n = @out.Write( renderer.ToString( buf.ToString(), formatString ) );
return n;
}
}
-                        n = stToWrite.write( @out );
+                        n = stToWrite.Write( @out );
}
return n;
}
// normalize anything iteratable to iterator
-                o = convertAnythingIteratableToIterator( o );
+                o = ConvertAnythingIteratableToIterator( o );
if ( o is Iterator )
{
Iterator iter = (Iterator)o;
@@ -907,10 +907,10 @@ namespace Antlr3.ST.Language
if ( seenPrevValue /*prevIterValue!=null*/
&& separatorString != null )
{
-                                n += @out.writeSeparator( separatorString );
+                                n += @out.WriteSeparator( separatorString );
}
seenPrevValue = true;
-                            int nw = write( self, iterValue, @out );
+                            int nw = Write( self, iterValue, @out );
n += nw;
}
}
@@ -918,7 +918,7 @@ namespace Antlr3.ST.Language
else
{
IAttributeRenderer renderer =
-                        self.getAttributeRenderer( o.GetType() );
+                        self.GetAttributeRenderer( o.GetType() );
string v = null;
if ( renderer != null )
{
@@ -937,18 +937,18 @@ namespace Antlr3.ST.Language
}
if ( wrapString != null )
{
-                        n = @out.write( v, wrapString );
+                        n = @out.Write( v, wrapString );
}
else
{
-                        n = @out.write( v );
+                        n = @out.Write( v );
}
return n;
}
}
catch ( IOException io )
{
-                self.error( "problem writing object: " + o, io );
+                self.Error( "problem writing object: " + o, io );
}
return n;
}
@@ -961,7 +961,7 @@ namespace Antlr3.ST.Language
*  all the time; must precompute w/o writing to output buffer.
*  </summary>
*/
-        protected virtual string evaluateExpression( StringTemplate self,
+        protected virtual string EvaluateExpression( StringTemplate self,
object expr )
{
if ( expr == null )
@@ -974,7 +974,7 @@ namespace Antlr3.ST.Language
// must evaluate, writing to a string so we can hang on to it
StringWriter buf = new StringWriter();
IStringTemplateWriter sw =
-                    self.getGroup().getStringTemplateWriter( buf );
+                    self.GetGroup().GetStringTemplateWriter( buf );
{
ActionEvaluator eval =
new ActionEvaluator( self, this, sw, exprAST );
@@ -984,7 +984,7 @@ namespace Antlr3.ST.Language
}
catch ( RecognitionException re )
{
-                        self.error( "can't evaluate tree: " + exprTree.ToStringTree(), re );
+                        self.Error( "can't evaluate tree: " + exprTree.ToStringTree(), re );
}
}
return buf.ToString();
@@ -1003,9 +1003,9 @@ namespace Antlr3.ST.Language
*  that bold.item should get the value of enclosing.item.
*  </summary>
*/
-        protected virtual void evaluateArguments( StringTemplate self )
+        protected virtual void EvaluateArguments( StringTemplate self )
{
-            StringTemplateAST argumentsAST = self.getArgumentsAST();
+            StringTemplateAST argumentsAST = self.GetArgumentsAST();
if ( argumentsAST == null || argumentsAST.GetChild( 0 ) == null )
{
// return immediately if missing tree or no actual args
@@ -1017,11 +1017,11 @@ namespace Antlr3.ST.Language
// available as well so we put a dummy ST between the enclosing
// context and the embedded context.  The dummy has the predefined
// context as does the embedded.
-            StringTemplate enclosing = self.getEnclosingInstance();
-            StringTemplate argContextST = new StringTemplate( self.getGroup(), "" );
-            argContextST.setName( "<invoke " + self.getName() + " arg context>" );
-            argContextST.setEnclosingInstance( enclosing );
-            argContextST.setArgumentContext( self.getArgumentContext() );
+            StringTemplate enclosing = self.GetEnclosingInstance();
+            StringTemplate argContextST = new StringTemplate( self.GetGroup(), "" );
+            argContextST.SetName( "<invoke " + self.GetName() + " arg context>" );
+            argContextST.SetEnclosingInstance( enclosing );
+            argContextST.SetArgumentContext( self.GetArgumentContext() );

ActionEvaluator eval =
new ActionEvaluator( argContextST, this, null, argumentsAST );
@@ -1036,12 +1036,12 @@ namespace Antlr3.ST.Language
// in any existing arg context, that context gets filled with
// new values.  With bold(item=obj), context becomes:
// {[obj=...],[item=...]}.
-                Dictionary<string, object> ac = eval.argList( self, self.getArgumentContext() );
-                self.setArgumentContext( ac );
+                Dictionary<string, object> ac = eval.argList( self, self.GetArgumentContext() );
+                self.SetArgumentContext( ac );
}
catch ( RecognitionException re )
{
-                self.error( "can't evaluate tree: " + argumentsAST.ToStringTree(), re );
+                self.Error( "can't evaluate tree: " + argumentsAST.ToStringTree(), re );
}
}

@@ -1061,7 +1061,7 @@ namespace Antlr3.ST.Language
*  ArrayWrappedInList that knows to create an ArrayIterator.
*  </summary>
*/
-        public static object convertArrayToList( object value )
+        public static object ConvertArrayToList( object value )
{
if ( value == null )
{
@@ -1078,7 +1078,7 @@ namespace Antlr3.ST.Language
return value;
}

-        protected internal static object convertAnythingIteratableToIterator( object o )
+        protected internal static object ConvertAnythingIteratableToIterator( object o )
{
Iterator iter = null;
if ( o is IDictionary )
@@ -1100,7 +1100,7 @@ namespace Antlr3.ST.Language
return iter;
}

-        protected static Iterator convertAnythingToIterator( object o )
+        protected static Iterator ConvertAnythingToIterator( object o )
{
Iterator iter = null;
if ( o is ICollection )
@@ -1129,14 +1129,14 @@ namespace Antlr3.ST.Language
*  itself if single-valued.  Used in &lt;names:first()>
*  </summary>
*/
-        public virtual object first( object attribute )
+        public virtual object First( object attribute )
{
if ( attribute == null )
{
return null;
}
object f = attribute;
-            attribute = convertAnythingIteratableToIterator( attribute );
+            attribute = ConvertAnythingIteratableToIterator( attribute );
if ( attribute is Iterator )
{
Iterator it = (Iterator)attribute;
@@ -1154,14 +1154,14 @@ namespace Antlr3.ST.Language
*  or null if single-valued.  Used in &lt;names:rest()>.
*  </summary>
*/
-        public virtual object rest( object attribute )
+        public virtual object Rest( object attribute )
{
if ( attribute == null )
{
return null;
}
object theRest = attribute;
-            attribute = convertAnythingIteratableToIterator( attribute );
+            attribute = ConvertAnythingIteratableToIterator( attribute );
if ( attribute is Iterator )
{
IList a = new List<object>();
@@ -1194,14 +1194,14 @@ namespace Antlr3.ST.Language
*  make a special case for a List or Vector.
*  </summary>
*/
-        public virtual object last( object attribute )
+        public virtual object Last( object attribute )
{
if ( attribute == null )
{
return null;
}
object last = attribute;
-            attribute = convertAnythingIteratableToIterator( attribute );
+            attribute = ConvertAnythingIteratableToIterator( attribute );
if ( attribute is Iterator )
{
Iterator it = (Iterator)attribute;
@@ -1215,13 +1215,13 @@ namespace Antlr3.ST.Language
}

/** <summary>Return a new list w/o null values.</summary> */
-        public virtual object strip( object attribute )
+        public virtual object Strip( object attribute )
{
if ( attribute == null )
{
return null;
}
-            attribute = convertAnythingIteratableToIterator( attribute );
+            attribute = ConvertAnythingIteratableToIterator( attribute );
if ( attribute is Iterator )
{
IList a = new List<object>();
@@ -1238,13 +1238,13 @@ namespace Antlr3.ST.Language
}

/** <summary>Return all but the last element.  trunc(x)=null if x is single-valued.</summary> */
-        public virtual object trunc( object attribute )
+        public virtual object Trunc( object attribute )
{
if ( attribute == null )
{
return null;
}
-            attribute = convertAnythingIteratableToIterator( attribute );
+            attribute = ConvertAnythingIteratableToIterator( attribute );
if ( attribute is Iterator )
{
IList a = new List<object>();
@@ -1267,7 +1267,7 @@ namespace Antlr3.ST.Language
*  speed.  This method by Kay Roepke.
*  </summary>
*/
-        public virtual object length( object attribute )
+        public virtual object Length( object attribute )
{
if ( attribute == null )
{
@@ -1320,7 +1320,7 @@ namespace Antlr3.ST.Language
return i;
}

-        public virtual object getOption( string name )
+        public virtual object GetOption( string name )
{
object value = null;
if ( options != null )
diff --git a/Antlr3.StringTemplate/Language/Action.g3 b/Antlr3.StringTemplate/Language/Action.g3
index 893529c..dfae05f 100644
--- a/Antlr3.StringTemplate/Language/Action.g3
+++ b/Antlr3.StringTemplate/Language/Action.g3
@@ -255,13 +255,13 @@ anonymousTemplate
:	t=ANONYMOUS_TEMPLATE
{
anonymous = new StringTemplate();
-			anonymous.setGroup(self.getGroup());
-			anonymous.setEnclosingInstance(self);
-			anonymous.setTemplate($t.text);
+			anonymous.SetGroup(self.GetGroup());
+			anonymous.SetEnclosingInstance(self);
+			anonymous.SetTemplate($t.text);
if ( $t is StringTemplateToken )
-				anonymous.defineFormalArguments(((StringTemplateToken)$t).args);
+				anonymous.DefineFormalArguments(((StringTemplateToken)$t).args);
else
-				anonymous.defineFormalArguments(new ArrayList());
+				anonymous.DefineFormalArguments(new ArrayList());
}
;

diff --git a/Antlr3.StringTemplate/Language/ActionEvaluator.cs b/Antlr3.StringTemplate/Language/ActionEvaluator.cs
index 78002f5..cc5c68e 100644
--- a/Antlr3.StringTemplate/Language/ActionEvaluator.cs
+++ b/Antlr3.StringTemplate/Language/ActionEvaluator.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\ActionEvaluator.g3 2009-03-07 08:54:44
+// $ANTLR 3.1.2 Language\\ActionEvaluator.g3 2009-03-16 17:34:36

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -141,7 +141,7 @@ public partial class ActionEvaluator : TreeParser

state._fsp--;

-			numCharsWritten = chunk.writeAttribute(self,expr1,writer);
+			numCharsWritten = chunk.WriteAttribute(self,expr1,writer);

}

@@ -332,8 +332,8 @@ public partial class ActionEvaluator : TreeParser
Match(input, TokenConstants.UP, null);

StringWriter buf = new StringWriter();
-							IStringTemplateWriter sw = self.getGroup().getStringTemplateWriter(buf);
-							int n = chunk.writeAttribute(self,e,sw);
+							IStringTemplateWriter sw = self.GetGroup().GetStringTemplateWriter(buf);
+							int n = chunk.WriteAttribute(self,e,sw);
if ( n > 0 )
{
value = buf.ToString();
@@ -540,7 +540,7 @@ public partial class ActionEvaluator : TreeParser

if ( name!=null )
{
-							value = chunk.getTemplateInclude(self, name, args);
+							value = chunk.GetTemplateInclude(self, name, args);
}


@@ -647,7 +647,7 @@ public partial class ActionEvaluator : TreeParser
;


-				value = chunk.applyListOfAlternatingTemplates(self,a,templatesToApply);
+				value = chunk.ApplyListOfAlternatingTemplates(self,a,templatesToApply);

Match(input, TokenConstants.UP, null);

@@ -705,7 +705,7 @@ public partial class ActionEvaluator : TreeParser

StringTemplate anonymous = anon.StringTemplate;
templatesToApply.Add(anonymous);
-								value = chunk.applyTemplateToListOfAttributes(self,
+								value = chunk.ApplyTemplateToListOfAttributes(self,
attributes,
anon.StringTemplate);

@@ -800,7 +800,7 @@ public partial class ActionEvaluator : TreeParser

state._fsp--;

-				value =chunk.first(a);
+				value =chunk.First(a);

}
break;
@@ -813,7 +813,7 @@ public partial class ActionEvaluator : TreeParser

state._fsp--;

-				value =chunk.rest(a);
+				value =chunk.Rest(a);

}
break;
@@ -826,7 +826,7 @@ public partial class ActionEvaluator : TreeParser

state._fsp--;

-				value =chunk.last(a);
+				value =chunk.Last(a);

}
break;
@@ -839,7 +839,7 @@ public partial class ActionEvaluator : TreeParser

state._fsp--;

-				value =chunk.length(a);
+				value =chunk.Length(a);

}
break;
@@ -852,7 +852,7 @@ public partial class ActionEvaluator : TreeParser

state._fsp--;

-				value =chunk.strip(a);
+				value =chunk.Strip(a);

}
break;
@@ -865,7 +865,7 @@ public partial class ActionEvaluator : TreeParser

state._fsp--;

-				value =chunk.trunc(a);
+				value =chunk.Trunc(a);

}
break;
@@ -991,11 +991,11 @@ public partial class ActionEvaluator : TreeParser
MatchAny(input);

string templateName = (ID9!=null?ID9.Text:null);
-									StringTemplateGroup group = self.getGroup();
-									StringTemplate embedded = group.getEmbeddedInstanceOf(self, templateName);
+									StringTemplateGroup group = self.GetGroup();
+									StringTemplate embedded = group.GetEmbeddedInstanceOf(self, templateName);
if ( embedded!=null )
{
-										embedded.setArgumentsAST(args);
+										embedded.SetArgumentsAST(args);
templatesToApply.Add(embedded);
}

@@ -1010,7 +1010,7 @@ public partial class ActionEvaluator : TreeParser
StringTemplate anonymous = anon.StringTemplate;
// to properly see overridden templates, always set
// anonymous' group to be self's group
-									anonymous.setGroup(self.getGroup());
+									anonymous.SetGroup(self.GetGroup());
templatesToApply.Add(anonymous);


@@ -1034,11 +1034,11 @@ public partial class ActionEvaluator : TreeParser
if ( n!=null )
{
string templateName = n.ToString();
-											StringTemplateGroup group = self.getGroup();
-											embedded = group.getEmbeddedInstanceOf(self, templateName);
+											StringTemplateGroup group = self.GetGroup();
+											embedded = group.GetEmbeddedInstanceOf(self, templateName);
if ( embedded!=null )
{
-												embedded.setArgumentsAST(args2);
+												embedded.SetArgumentsAST(args2);
templatesToApply.Add(embedded);
}
}
@@ -1109,7 +1109,7 @@ public partial class ActionEvaluator : TreeParser

state._fsp--;

-				value = chunk.testAttributeTrue(a);
+				value = chunk.TestAttributeTrue(a);

}
break;
@@ -1126,7 +1126,7 @@ public partial class ActionEvaluator : TreeParser


Match(input, TokenConstants.UP, null);
-				value = !chunk.testAttributeTrue(a);
+				value = !chunk.TestAttributeTrue(a);

}
break;
@@ -1303,7 +1303,7 @@ public partial class ActionEvaluator : TreeParser


Match(input, TokenConstants.UP, null);
-				value = chunk.getObjectProperty(self,obj,propName);
+				value = chunk.GetObjectProperty(self,obj,propName);

}
break;
@@ -1312,7 +1312,7 @@ public partial class ActionEvaluator : TreeParser
{
i3=(StringTemplateAST)Match(input,ID,Follow._ID_in_attribute742);

-						value =self.getAttribute((i3!=null?i3.Text:null));
+						value =self.GetAttribute((i3!=null?i3.Text:null));


}
@@ -1343,9 +1343,9 @@ public partial class ActionEvaluator : TreeParser
value =(at!=null?at.Text:null);
if ( (at!=null?at.Text:null)!=null )
{
-								StringTemplate valueST =new StringTemplate(self.getGroup(), (at!=null?at.Text:null));
-								valueST.setEnclosingInstance(self);
-								valueST.setName("<anonymous template argument>");
+								StringTemplate valueST =new StringTemplate(self.GetGroup(), (at!=null?at.Text:null));
+								valueST.SetEnclosingInstance(self);
+								valueST.SetName("<anonymous template argument>");
value = valueST;
}

@@ -1507,14 +1507,14 @@ public partial class ActionEvaluator : TreeParser
string soleArgName = null;
// find the sole defined formal argument for embedded
bool error = false;
-							var formalArgs = embedded.getFormalArguments();
+							var formalArgs = embedded.GetFormalArguments();
if ( formalArgs!=null )
{
var argNames = formalArgs.Select( fa => fa.name ).ToArray();
if ( argNames.Length==1 )
{
soleArgName = (string)argNames.ToArray()[0];
-									//System.out.println("sole formal arg of "+embedded.getName()+" is "+soleArgName);
+									//System.out.println("sole formal arg of "+embedded.GetName()+" is "+soleArgName);
}
else
{
@@ -1527,13 +1527,13 @@ public partial class ActionEvaluator : TreeParser
}
if ( error )
{
-								self.error("template "+embedded.getName()+
+								self.Error("template "+embedded.GetName()+
" must have exactly one formal arg in template context "+
-										   self.getEnclosingInstanceStackString());
+										   self.GetEnclosingInstanceStackString());
}
else
{
-								self.rawSetArgumentAttribute(embedded,argumentContext,soleArgName,e);
+								self.RawSetArgumentAttribute(embedded,argumentContext,soleArgName,e);
}
}

@@ -1600,7 +1600,7 @@ public partial class ActionEvaluator : TreeParser

if ( expr11 != null )
{
-								self.rawSetArgumentAttribute(embedded,argumentContext,(arg!=null?arg.Text:null),expr11);
+								self.RawSetArgumentAttribute(embedded,argumentContext,(arg!=null?arg.Text:null),expr11);
}


@@ -1610,7 +1610,7 @@ public partial class ActionEvaluator : TreeParser
// Language\\ActionEvaluator.g3:371:4: DOTDOTDOT
{
Match(input,DOTDOTDOT,Follow._DOTDOTDOT_in_argumentAssignment877);
-				embedded.setPassThroughAttributes(true);
+				embedded.SetPassThroughAttributes(true);

}
break;
diff --git a/Antlr3.StringTemplate/Language/ActionEvaluator.g3 b/Antlr3.StringTemplate/Language/ActionEvaluator.g3
index 90f58ae..94713a0 100644
--- a/Antlr3.StringTemplate/Language/ActionEvaluator.g3
+++ b/Antlr3.StringTemplate/Language/ActionEvaluator.g3
@@ -85,7 +85,7 @@ using Vector = System.Collections.Generic.List<object>;

public
action returns [int numCharsWritten=0]
-	:	expr {$numCharsWritten = chunk.writeAttribute(self,$expr.value,writer);}
+	:	expr {$numCharsWritten = chunk.WriteAttribute(self,$expr.value,writer);}
;

expr returns [object value]
@@ -104,8 +104,8 @@ expr returns [object value]
// convert to string (force early eval)
{
StringWriter buf = new StringWriter();
-			IStringTemplateWriter sw = self.getGroup().getStringTemplateWriter(buf);
-			int n = chunk.writeAttribute(self,$e.value,sw);
+			IStringTemplateWriter sw = self.GetGroup().GetStringTemplateWriter(buf);
+			int n = chunk.WriteAttribute(self,$e.value,sw);
if ( n > 0 )
{
$value = buf.ToString();
@@ -144,7 +144,7 @@ templateInclude returns [object value=null]
string name = null;
}
:	^(	INCLUDE
-			//{value = chunk.getTemplateInclude(self, name.getText(), #args);}
+			//{value = chunk.GetTemplateInclude(self, name.getText(), #args);}
(	id=ID a1=.
{name=$id.text; args=$a1;}

@@ -156,7 +156,7 @@ templateInclude returns [object value=null]
{
if ( name!=null )
{
-				$value = chunk.getTemplateInclude(self, name, args);
+				$value = chunk.GetTemplateInclude(self, name, args);
}
}
;
@@ -172,14 +172,14 @@ templateApplication returns [object value]
}
:	^(	APPLY a=expr
(template[templatesToApply])+
-			{$value = chunk.applyListOfAlternatingTemplates(self,$a.value,templatesToApply);}
+			{$value = chunk.ApplyListOfAlternatingTemplates(self,$a.value,templatesToApply);}
)
|	^(	MULTI_APPLY (a=expr {attributes.Add($a.value);} )+ COLON
anon=ANONYMOUS_TEMPLATE
{
StringTemplate anonymous = $anon.StringTemplate;
templatesToApply.Add(anonymous);
-				$value = chunk.applyTemplateToListOfAttributes(self,
+				$value = chunk.ApplyTemplateToListOfAttributes(self,
attributes,
$anon.StringTemplate);
}
@@ -188,12 +188,12 @@ templateApplication returns [object value]

function returns [object value]
:	^(	FUNCTION
-			(	'first'		a=singleFunctionArg	{$value=chunk.first($a.value);}
-			|	'rest'		a=singleFunctionArg	{$value=chunk.rest($a.value);}
-			|	'last'		a=singleFunctionArg	{$value=chunk.last($a.value);}
-			|	'length'	a=singleFunctionArg	{$value=chunk.length($a.value);}
-			|	'strip'		a=singleFunctionArg	{$value=chunk.strip($a.value);}
-			|	'trunc'		a=singleFunctionArg	{$value=chunk.trunc($a.value);}
+			(	'first'		a=singleFunctionArg	{$value=chunk.First($a.value);}
+			|	'rest'		a=singleFunctionArg	{$value=chunk.Rest($a.value);}
+			|	'last'		a=singleFunctionArg	{$value=chunk.Last($a.value);}
+			|	'length'	a=singleFunctionArg	{$value=chunk.Length($a.value);}
+			|	'strip'		a=singleFunctionArg	{$value=chunk.Strip($a.value);}
+			|	'trunc'		a=singleFunctionArg	{$value=chunk.Trunc($a.value);}
)
)
;
@@ -211,11 +211,11 @@ template[System.Collections.Generic.List<StringTemplate> templatesToApply]
(	ID args=. // don't eval argList now; must re-eval each iteration
{
string templateName = $ID.text;
-					StringTemplateGroup group = self.getGroup();
-					StringTemplate embedded = group.getEmbeddedInstanceOf(self, templateName);
+					StringTemplateGroup group = self.GetGroup();
+					StringTemplate embedded = group.GetEmbeddedInstanceOf(self, templateName);
if ( embedded!=null )
{
-						embedded.setArgumentsAST($args);
+						embedded.SetArgumentsAST($args);
$templatesToApply.Add(embedded);
}
}
@@ -225,7 +225,7 @@ template[System.Collections.Generic.List<StringTemplate> templatesToApply]
StringTemplate anonymous = $anon.StringTemplate;
// to properly see overridden templates, always set
// anonymous' group to be self's group
-					anonymous.setGroup(self.getGroup());
+					anonymous.SetGroup(self.GetGroup());
$templatesToApply.Add(anonymous);
}

@@ -235,11 +235,11 @@ template[System.Collections.Generic.List<StringTemplate> templatesToApply]
if ( $n.value!=null )
{
string templateName = $n.value.ToString();
-							StringTemplateGroup group = self.getGroup();
-							embedded = group.getEmbeddedInstanceOf(self, templateName);
+							StringTemplateGroup group = self.GetGroup();
+							embedded = group.GetEmbeddedInstanceOf(self, templateName);
if ( embedded!=null )
{
-								embedded.setArgumentsAST($args2);
+								embedded.SetArgumentsAST($args2);
$templatesToApply.Add(embedded);
}
}
@@ -251,8 +251,8 @@ template[System.Collections.Generic.List<StringTemplate> templatesToApply]

public
ifCondition returns [bool value]
-	:	a=ifAtom {$value = chunk.testAttributeTrue($a.value);}
-	|	^(NOT a=ifAtom) {$value = !chunk.testAttributeTrue($a.value);}
+	:	a=ifAtom {$value = chunk.TestAttributeTrue($a.value);}
+	|	^(NOT a=ifAtom) {$value = !chunk.TestAttributeTrue($a.value);}
;

ifAtom returns [object value]
@@ -273,11 +273,11 @@ attribute returns [object value]
|	^(VALUE e=expr) {if ($e.value!=null) {propName=$e.value;}}
)
)
-		{$value = chunk.getObjectProperty(self,$obj.value,propName);}
+		{$value = chunk.GetObjectProperty(self,$obj.value,propName);}

|	i3=ID
{
-		$value=self.getAttribute($i3.text);
+		$value=self.GetAttribute($i3.text);
}

|	i=INT {$value=int.Parse($i.text);}
@@ -292,9 +292,9 @@ attribute returns [object value]
$value=$at.text;
if ( $at.text!=null )
{
-				StringTemplate valueST =new StringTemplate(self.getGroup(), $at.text);
-				valueST.setEnclosingInstance(self);
-				valueST.setName("<anonymous template argument>");
+				StringTemplate valueST =new StringTemplate(self.GetGroup(), $at.text);
+				valueST.SetEnclosingInstance(self);
+				valueST.SetName("<anonymous template argument>");
$value = valueST;
}
}
@@ -328,14 +328,14 @@ singleTemplateArg[StringTemplate embedded, Map argumentContext]
string soleArgName = null;
// find the sole defined formal argument for embedded
bool error = false;
-				var formalArgs = $embedded.getFormalArguments();
+				var formalArgs = $embedded.GetFormalArguments();
if ( formalArgs!=null )
{
var argNames = formalArgs.Select( fa => fa.name ).ToArray();
if ( argNames.Length==1 )
{
soleArgName = (string)argNames.ToArray()[0];
-						//System.out.println("sole formal arg of "+$embedded.getName()+" is "+soleArgName);
+						//System.out.println("sole formal arg of "+$embedded.GetName()+" is "+soleArgName);
}
else
{
@@ -348,13 +348,13 @@ singleTemplateArg[StringTemplate embedded, Map argumentContext]
}
if ( error )
{
-					self.error("template "+$embedded.getName()+
+					self.Error("template "+$embedded.GetName()+
" must have exactly one formal arg in template context "+
-							   self.getEnclosingInstanceStackString());
+							   self.GetEnclosingInstanceStackString());
}
else
{
-					self.rawSetArgumentAttribute($embedded,$argumentContext,soleArgName,$e.value);
+					self.RawSetArgumentAttribute($embedded,$argumentContext,soleArgName,$e.value);
}
}
}
@@ -365,8 +365,8 @@ argumentAssignment[StringTemplate embedded, Map argumentContext]
{
if ( $expr.value != null )
{
-				self.rawSetArgumentAttribute($embedded,$argumentContext,$arg.text,$expr.value);
+				self.RawSetArgumentAttribute($embedded,$argumentContext,$arg.text,$expr.value);
}
}
-	|	DOTDOTDOT {$embedded.setPassThroughAttributes(true);}
+	|	DOTDOTDOT {$embedded.SetPassThroughAttributes(true);}
;
diff --git a/Antlr3.StringTemplate/Language/ActionEvaluatorHelper.cs b/Antlr3.StringTemplate/Language/ActionEvaluatorHelper.cs
index e20a95a..2d16055 100644
--- a/Antlr3.StringTemplate/Language/ActionEvaluatorHelper.cs
+++ b/Antlr3.StringTemplate/Language/ActionEvaluatorHelper.cs
@@ -58,7 +58,7 @@ namespace Antlr3.ST.Language

public override void ReportError( RecognitionException e )
{
-            self.error( "eval tree parse error", e );
+            self.Error( "eval tree parse error", e );
}
}

diff --git a/Antlr3.StringTemplate/Language/ActionParser.cs b/Antlr3.StringTemplate/Language/ActionParser.cs
index ae3f09f..c539954 100644
--- a/Antlr3.StringTemplate/Language/ActionParser.cs
+++ b/Antlr3.StringTemplate/Language/ActionParser.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\Action.g3 2009-03-15 17:10:09
+// $ANTLR 3.1.2 Language\\Action.g3 2009-03-16 17:25:40

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -2399,13 +2399,13 @@ public partial class ActionParser : Parser
{

anonymous = new StringTemplate();
-							anonymous.setGroup(self.getGroup());
-							anonymous.setEnclosingInstance(self);
-							anonymous.setTemplate((t!=null?t.Text:null));
+							anonymous.SetGroup(self.GetGroup());
+							anonymous.SetEnclosingInstance(self);
+							anonymous.SetTemplate((t!=null?t.Text:null));
if ( t is StringTemplateToken )
-								anonymous.defineFormalArguments(((StringTemplateToken)t).args);
+								anonymous.DefineFormalArguments(((StringTemplateToken)t).args);
else
-								anonymous.defineFormalArguments(new ArrayList());
+								anonymous.DefineFormalArguments(new ArrayList());

}

diff --git a/Antlr3.StringTemplate/Language/ActionParserHelper.cs b/Antlr3.StringTemplate/Language/ActionParserHelper.cs
index 7f8f13e..04b083c 100644
--- a/Antlr3.StringTemplate/Language/ActionParserHelper.cs
+++ b/Antlr3.StringTemplate/Language/ActionParserHelper.cs
@@ -45,7 +45,6 @@ namespace Antlr3.ST.Language
public ActionParser( ITokenSource lexer, StringTemplate self )
: this( lexer, 2 )
{
-            //this( new CommonTokenStream( lexer ), 2 );
this.self = self;
}

@@ -57,14 +56,14 @@ namespace Antlr3.ST.Language

public override void ReportError( RecognitionException e )
{
-            StringTemplateGroup group = self.getGroup();
+            StringTemplateGroup group = self.GetGroup();
if ( group == StringTemplate.defaultGroup )
{
-                self.error( "action parse error; template context is " + self.getEnclosingInstanceStackString(), e );
+                self.Error( "action parse error; template context is " + self.GetEnclosingInstanceStackString(), e );
}
else
{
-                self.error( "action parse error in group " + self.getGroup().Name + " line " + self.getGroupFileLine() + "; template context is " + self.getEnclosingInstanceStackString(), e );
+                self.Error( "action parse error in group " + self.GetGroup().Name + " line " + self.GetGroupFileLine() + "; template context is " + self.GetEnclosingInstanceStackString(), e );
}
}
}
diff --git a/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.cs b/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.cs
index a68237a..943e05c 100644
--- a/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.cs
+++ b/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\AngleBracketTemplateLexer.g3 2009-03-07 08:53:04
+// $ANTLR 3.1.2 Language\\AngleBracketTemplateLexer.g3 2009-03-16 17:15:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -804,10 +804,10 @@ public partial class AngleBracketTemplateLexer : Lexer
case 1:
// Language\\AngleBracketTemplateLexer.g3:158:7: {...}? => (=> ( '\\r' )? '\\n' |ch= . )
{
-								if ( !((!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) )))) )
+								if ( !((!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) )))) )
{
if (state.backtracking>0) {state.failed=true; return ;}
-									throw new FailedPredicateException(input, "ACTION", "!(upcomingAtEND(1) || ( input.LA(1) == '\\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\\r' && input.LA(2) == '\\n' && upcomingAtEND(3) ))");
+									throw new FailedPredicateException(input, "ACTION", "!(UpcomingAtEND(1) || ( input.LA(1) == '\\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\\r' && input.LA(2) == '\\n' && UpcomingAtEND(3) ))");
}
// Language\\AngleBracketTemplateLexer.g3:159:6: (=> ( '\\r' )? '\\n' |ch= . )
int alt17=2;
@@ -1068,7 +1068,7 @@ public partial class AngleBracketTemplateLexer : Lexer
MatchAny(); if (state.failed) return ;
if ( state.backtracking == 0 )
{
-								self.error("missing region "+t+" <@end> tag");
+								self.Error("missing region "+t+" <@end> tag");
}

}
@@ -3292,7 +3292,7 @@ public partial class AngleBracketTemplateLexer : Lexer
int index18_1 = input.Index;
input.Rewind();
s = -1;
-				if ( ((!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) )))) ) {s = 5;}
+				if ( ((!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) )))) ) {s = 5;}

else if ( (true) ) {s = 6;}

@@ -3308,7 +3308,7 @@ public partial class AngleBracketTemplateLexer : Lexer
int index18_2 = input.Index;
input.Rewind();
s = -1;
-				if ( ((!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) )))) ) {s = 5;}
+				if ( ((!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) )))) ) {s = 5;}

else if ( (true) ) {s = 6;}

@@ -3330,7 +3330,7 @@ public partial class AngleBracketTemplateLexer : Lexer

else if ( (LA18_3=='\n') ) {s = 9;}

-				else if ( ((LA18_3>='\u0000' && LA18_3<='\t')||(LA18_3>='\u000B' && LA18_3<='\f')||(LA18_3>='\u000E' && LA18_3<='?')||(LA18_3>='A' && LA18_3<='\uFFFF')) && ((!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) ))))) {s = 5;}
+				else if ( ((LA18_3>='\u0000' && LA18_3<='\t')||(LA18_3>='\u000B' && LA18_3<='\f')||(LA18_3>='\u000E' && LA18_3<='?')||(LA18_3>='A' && LA18_3<='\uFFFF')) && ((!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) ))))) {s = 5;}

else s = 6;

@@ -3350,7 +3350,7 @@ public partial class AngleBracketTemplateLexer : Lexer

else if ( (LA18_4=='\n') ) {s = 9;}

-				else if ( ((LA18_4>='\u0000' && LA18_4<='\t')||(LA18_4>='\u000B' && LA18_4<='\f')||(LA18_4>='\u000E' && LA18_4<='\uFFFF')) && ((!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) ))))) {s = 5;}
+				else if ( ((LA18_4>='\u0000' && LA18_4<='\t')||(LA18_4>='\u000B' && LA18_4<='\f')||(LA18_4>='\u000E' && LA18_4<='\uFFFF')) && ((!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) ))))) {s = 5;}

else s = 6;

@@ -3382,7 +3382,7 @@ public partial class AngleBracketTemplateLexer : Lexer
int index18_8 = input.Index;
input.Rewind();
s = -1;
-				if ( ((!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) )))) ) {s = 5;}
+				if ( ((!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) )))) ) {s = 5;}

else if ( (true) ) {s = 6;}

@@ -3398,7 +3398,7 @@ public partial class AngleBracketTemplateLexer : Lexer
int index18_9 = input.Index;
input.Rewind();
s = -1;
-				if ( ((!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) )))) ) {s = 5;}
+				if ( ((!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) )))) ) {s = 5;}

else if ( (true) ) {s = 6;}

@@ -3462,7 +3462,7 @@ public partial class AngleBracketTemplateLexer : Lexer
int index18_13 = input.Index;
input.Rewind();
s = -1;
-				if ( ((!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) )))) ) {s = 5;}
+				if ( ((!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) )))) ) {s = 5;}

else if ( (true) ) {s = 6;}

diff --git a/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.g3 b/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.g3
index ae2c0fc..d6608c9 100644
--- a/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.g3
+++ b/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.g3
@@ -155,14 +155,14 @@ options { k = 1; }
{
atLeft = false;
}
-				(	{!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) ))}? =>
+				(	{!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) ))}? =>
(	('\r'|'\n') => ('\r' {builder.Append('\r');})? '\n' {builder.Append('\n'); atLeft = true;}
|	ch=. {builder.Append((char)$ch); atLeft = false;}
)
)+
(	('\r'|'\n') => ('\r')? '\n' {atLeft = true;} )?
(	'<@end>'
-				|	. {self.error("missing region "+t+" <@end> tag");}
+				|	. {self.Error("missing region "+t+" <@end> tag");}
)
( {atLeft}? => ('\r')? '\n' )?
)
diff --git a/Antlr3.StringTemplate/Language/AngleBracketTemplateLexerHelper.cs b/Antlr3.StringTemplate/Language/AngleBracketTemplateLexerHelper.cs
index 0567d1b..48ba262 100644
--- a/Antlr3.StringTemplate/Language/AngleBracketTemplateLexerHelper.cs
+++ b/Antlr3.StringTemplate/Language/AngleBracketTemplateLexerHelper.cs
@@ -49,7 +49,7 @@ namespace Antlr3.ST.Language

public override void ReportError( RecognitionException e )
{
-            self.error( "<...> chunk lexer error", e );
+            self.Error( "<...> chunk lexer error", e );
}

public override string[] GetTokenNames()
@@ -57,24 +57,15 @@ namespace Antlr3.ST.Language
return TemplateParser.tokenNames;
}

-        //protected boolean upcomingELSE(int i) /*throws CharStreamException*/ {
-        //    return LA(i)=='<'&&LA(i+1)=='e'&&LA(i+2)=='l'&&LA(i+3)=='s'&&LA(i+4)=='e'&&
-        //           LA(i+5)=='>';
-        //}
-
-        //protected boolean upcomingENDIF(int i) throws CharStreamException {
-        //    return LA(i)=='<'&&LA(i+1)=='e'&&LA(i+2)=='n'&&LA(i+3)=='d'&&LA(i+4)=='i'&&
-        //           LA(i+5)=='f'&&LA(i+6)=='>';
-        //}
-
-        protected bool upcomingAtEND(int i)
+        bool UpcomingAtEND( int i )
{
-            return input.LA(i)=='<'&&input.LA(i+1)=='@'&&input.LA(i+2)=='e'&&input.LA(i+3)=='n'&&input.LA(i+4)=='d'&&input.LA(i+5)=='>';
+            return input.LA( i ) == '<'
+                && input.LA( i + 1 ) == '@'
+                && input.LA( i + 2 ) == 'e'
+                && input.LA( i + 3 ) == 'n'
+                && input.LA( i + 4 ) == 'd'
+                && input.LA( i + 5 ) == '>';
}
-
-        //protected boolean upcomingNewline(int i) throws CharStreamException {
-        //    return (LA(i)=='\r'&&LA(i+1)=='\n')||LA(i)=='\n';
-        //}
}

}
diff --git a/Antlr3.StringTemplate/Language/Cat.cs b/Antlr3.StringTemplate/Language/Cat.cs
index c7e6f1e..4339015 100644
--- a/Antlr3.StringTemplate/Language/Cat.cs
+++ b/Antlr3.StringTemplate/Language/Cat.cs
@@ -51,7 +51,7 @@ namespace Antlr3.ST.Language
{
return items.SelectMany( ( item ) =>
{
-                item = ASTExpr.convertAnythingIteratableToIterator( item );
+                item = ASTExpr.ConvertAnythingIteratableToIterator( item );
if ( item is Antlr.Runtime.JavaExtensions.Iterator )
return ( (Antlr.Runtime.JavaExtensions.Iterator)item ).Source.Cast<object>();
else if ( item is string )
diff --git a/Antlr3.StringTemplate/Language/ConditionalExpr.cs b/Antlr3.StringTemplate/Language/ConditionalExpr.cs
index 0bc8f68..950737a 100644
--- a/Antlr3.StringTemplate/Language/ConditionalExpr.cs
+++ b/Antlr3.StringTemplate/Language/ConditionalExpr.cs
@@ -56,12 +56,12 @@ namespace Antlr3.ST.Language
{
}

-        public virtual void setSubtemplate( StringTemplate subtemplate )
+        public virtual void SetSubtemplate( StringTemplate subtemplate )
{
this.subtemplate = subtemplate;
}

-        public virtual void addElseIfSubtemplate( ASTExpr conditionalTree,
+        public virtual void AddElseIfSubtemplate( ASTExpr conditionalTree,
StringTemplate subtemplate )
{
if ( elseIfSubtemplates == null )
@@ -76,17 +76,17 @@ namespace Antlr3.ST.Language
elseIfSubtemplates.Add( d );
}

-        public virtual StringTemplate getSubtemplate()
+        public virtual StringTemplate GetSubtemplate()
{
return subtemplate;
}

-        public virtual StringTemplate getElseSubtemplate()
+        public virtual StringTemplate GetElseSubtemplate()
{
return elseSubtemplate;
}

-        public virtual void setElseSubtemplate( StringTemplate elseSubtemplate )
+        public virtual void SetElseSubtemplate( StringTemplate elseSubtemplate )
{
this.elseSubtemplate = elseSubtemplate;
}
@@ -97,7 +97,7 @@ namespace Antlr3.ST.Language
*  is true, then write subtemplate.
*  </summary>
*/
-        public override int write( StringTemplate self, IStringTemplateWriter @out )
+        public override int Write( StringTemplate self, IStringTemplateWriter @out )
{
if ( exprTree == null || self == null || @out == null )
{
@@ -117,7 +117,7 @@ namespace Antlr3.ST.Language
// IF
if ( includeSubtemplate )
{
-                    n = writeSubTemplate( self, @out, subtemplate );
+                    n = WriteSubTemplate( self, @out, subtemplate );
testedTrue = true;
}
// ELSEIF
@@ -130,7 +130,7 @@ namespace Antlr3.ST.Language
includeSubtemplate = eval.ifCondition();
if ( includeSubtemplate )
{
-                            writeSubTemplate( self, @out, elseIfClause.st );
+                            WriteSubTemplate( self, @out, elseIfClause.st );
testedTrue = true;
break;
}
@@ -140,21 +140,21 @@ namespace Antlr3.ST.Language
if ( !testedTrue && elseSubtemplate != null )
{
// evaluate ELSE clause if present and IF condition failed
-                    StringTemplate s = elseSubtemplate.getInstanceOf();
-                    s.setEnclosingInstance( self );
-                    s.setGroup( self.getGroup() );
-                    s.setNativeGroup( self.getNativeGroup() );
-                    n = s.write( @out );
+                    StringTemplate s = elseSubtemplate.GetInstanceOf();
+                    s.SetEnclosingInstance( self );
+                    s.SetGroup( self.GetGroup() );
+                    s.SetNativeGroup( self.GetNativeGroup() );
+                    n = s.Write( @out );
}
}
catch ( RecognitionException re )
{
-                self.error( "can't evaluate tree: " + exprTree.ToStringTree(), re );
+                self.Error( "can't evaluate tree: " + exprTree.ToStringTree(), re );
}
return n;
}

-        protected virtual int writeSubTemplate( StringTemplate self,
+        protected virtual int WriteSubTemplate( StringTemplate self,
IStringTemplateWriter @out,
StringTemplate subtemplate )
{
@@ -164,13 +164,13 @@ namespace Antlr3.ST.Language
* new template instance every time we exec this chunk to get the new
* "enclosing instance" pointer.
*/
-            StringTemplate s = subtemplate.getInstanceOf();
-            s.setEnclosingInstance( self );
+            StringTemplate s = subtemplate.GetInstanceOf();
+            s.SetEnclosingInstance( self );
// make sure we evaluate in context of enclosing template's
// group so polymorphism works. :)
-            s.setGroup( self.getGroup() );
-            s.setNativeGroup( self.getNativeGroup() );
-            return s.write( @out );
+            s.SetGroup( self.GetGroup() );
+            s.SetNativeGroup( self.GetNativeGroup() );
+            return s.Write( @out );
}
}
}
diff --git a/Antlr3.StringTemplate/Language/Expr.cs b/Antlr3.StringTemplate/Language/Expr.cs
index 6a3ef98..4d6e2b4 100644
--- a/Antlr3.StringTemplate/Language/Expr.cs
+++ b/Antlr3.StringTemplate/Language/Expr.cs
@@ -65,7 +65,7 @@ namespace Antlr3.ST.Language
}

/** <summary>How to write this node to output; return how many char written</summary> */
-        abstract public int write( StringTemplate self, IStringTemplateWriter writer );
+        abstract public int Write( StringTemplate self, IStringTemplateWriter writer );

public StringTemplate EnclosingTemplate
{
diff --git a/Antlr3.StringTemplate/Language/FormalArgument.cs b/Antlr3.StringTemplate/Language/FormalArgument.cs
index 3871ea1..de2023b 100644
--- a/Antlr3.StringTemplate/Language/FormalArgument.cs
+++ b/Antlr3.StringTemplate/Language/FormalArgument.cs
@@ -101,7 +101,7 @@ namespace Antlr3.ST.Language
this.defaultValueST = defaultValueST;
}

-        public static string getCardinalityName( int cardinality )
+        public static string GetCardinalityName( int cardinality )
{
switch ( cardinality )
{
diff --git a/Antlr3.StringTemplate/Language/Group.g3 b/Antlr3.StringTemplate/Language/Group.g3
index 89dc48d..8a96954 100644
--- a/Antlr3.StringTemplate/Language/Group.g3
+++ b/Antlr3.StringTemplate/Language/Group.g3
@@ -126,9 +126,9 @@ group[StringTemplateGroup g]
this._group = g;
}
:	'group' name=ID {g.Name = $name.text;}
-		( COLON s=ID {g.setSuperGroup($s.text);} )?
-		(	'implements' i=ID {g.implementInterface($i.text);}
-			(COMMA i2=ID {g.implementInterface($i2.text);} )*
+		( COLON s=ID {g.SetSuperGroup($s.text);} )?
+		(	'implements' i=ID {g.ImplementInterface($i.text);}
+			(COMMA i2=ID {g.ImplementInterface($i2.text);} )*
)?
SEMI
( template[g] | mapdef[g] )+
@@ -146,10 +146,10 @@ template[StringTemplateGroup g]
}
:	(	AT scope2=ID DOT region=ID
{
-				templateName=g.getMangledRegionName($scope2.text,$region.text);
-				if ( g.isDefinedInThisGroup(templateName) )
+				templateName=g.GetMangledRegionName($scope2.text,$region.text);
+				if ( g.IsDefinedInThisGroup(templateName) )
{
-					g.error("group "+g.Name+" line "+line+": redefinition of template region: @"+
+					g.Error("group "+g.Name+" line "+line+": redefinition of template region: @"+
$scope2.text+"."+$region.text);
st = new StringTemplate(); // create bogus template to fill in
}
@@ -157,16 +157,16 @@ template[StringTemplateGroup g]
{
bool err = false;
// @template.region() ::= "..."
-					StringTemplate scopeST = g.lookupTemplate($scope2.text);
+					StringTemplate scopeST = g.LookupTemplate($scope2.text);
if ( scopeST == null )
{
-						g.error("group "+g.Name+" line "+line+": reference to region within undefined template: "+
+						g.Error("group "+g.Name+" line "+line+": reference to region within undefined template: "+
$scope2.text);
err=true;
}
-					else if ( !scopeST.containsRegionName($region.text) )
+					else if ( !scopeST.ContainsRegionName($region.text) )
{
-						g.error("group "+g.Name+" line "+line+": template "+$scope2.text+" has no region called "+
+						g.Error("group "+g.Name+" line "+line+": template "+$scope2.text+" has no region called "+
$region.text);
err=true;
}
@@ -176,7 +176,7 @@ template[StringTemplateGroup g]
}
else
{
-						st = g.defineRegionTemplate($scope2.text,
+						st = g.DefineRegionTemplate($scope2.text,
$region.text,
null,
StringTemplate.REGION_EXPLICIT);
@@ -185,28 +185,28 @@ template[StringTemplateGroup g]
}
|	name=ID {templateName = $name.text;}
{
-				if ( g.isDefinedInThisGroup(templateName) )
+				if ( g.IsDefinedInThisGroup(templateName) )
{
-					g.error("redefinition of template: "+templateName);
+					g.Error("redefinition of template: "+templateName);
st = new StringTemplate(); // create bogus template to fill in
}
else
{
-					st = g.defineTemplate(templateName, null);
+					st = g.DefineTemplate(templateName, null);
}
}
)
-		{if ( st!=null ) {st.setGroupFileLine(line);}}
+		{if ( st!=null ) {st.SetGroupFileLine(line);}}
LPAREN
-			(args[st]|{st.defineEmptyFormalArgumentList();})
+			(args[st]|{st.DefineEmptyFormalArgumentList();})
RPAREN
DEFINED_TO_BE
-		(	t=STRING     {st.setTemplate($t.text);}
-		|	bt=BIGSTRING {st.setTemplate($bt.text);}
+		(	t=STRING     {st.SetTemplate($t.text);}
+		|	bt=BIGSTRING {st.SetTemplate($bt.text);}
)

|   alias=ID DEFINED_TO_BE target=ID
-		{g.defineTemplateAlias($alias.text, $target.text);}
+		{g.DefineTemplateAlias($alias.text, $target.text);}
;

args[StringTemplate st]
@@ -222,34 +222,34 @@ arg[StringTemplate st]
(	ASSIGN s=STRING
{
defaultValue=new StringTemplate("\$_val_\$");
-				defaultValue.setAttribute("_val_", $s.text);
-				defaultValue.defineFormalArgument("_val_");
-				defaultValue.Name = "<"+st.getName()+"'s arg "+$name.text+" default value subtemplate>";
+				defaultValue.SetAttribute("_val_", $s.text);
+				defaultValue.DefineFormalArgument("_val_");
+				defaultValue.Name = "<"+st.GetName()+"'s arg "+$name.text+" default value subtemplate>";
}
|	ASSIGN bs=ANONYMOUS_TEMPLATE
{
-				defaultValue=new StringTemplate(st.getGroup(), $bs.text);
-				defaultValue.Name = "<"+st.getName()+"'s arg "+$name.text+" default value subtemplate>";
+				defaultValue=new StringTemplate(st.GetGroup(), $bs.text);
+				defaultValue.Name = "<"+st.GetName()+"'s arg "+$name.text+" default value subtemplate>";
}
)?
-		{st.defineFormalArgument($name.text, defaultValue);}
+		{st.DefineFormalArgument($name.text, defaultValue);}
;

mapdef[StringTemplateGroup g]
:	name=ID
DEFINED_TO_BE m=map
{
-			if ( g.getMap($name.text)!=null )
+			if ( g.GetMap($name.text)!=null )
{
-				g.error("redefinition of map: "+$name.text);
+				g.Error("redefinition of map: "+$name.text);
}
-			else if ( g.isDefinedInThisGroup($name.text) )
+			else if ( g.IsDefinedInThisGroup($name.text) )
{
-				g.error("redefinition of template as map: "+$name.text);
+				g.Error("redefinition of template as map: "+$name.text);
}
else
{
-				g.defineMap($name.text, m);
+				g.DefineMap($name.text, m);
}
}
;
diff --git a/Antlr3.StringTemplate/Language/GroupParser.cs b/Antlr3.StringTemplate/Language/GroupParser.cs
index c73205f..78a57b7 100644
--- a/Antlr3.StringTemplate/Language/GroupParser.cs
+++ b/Antlr3.StringTemplate/Language/GroupParser.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\Group.g3 2009-03-07 08:51:18
+// $ANTLR 3.1.2 Language\\Group.g3 2009-03-16 17:25:52

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -139,7 +139,7 @@ public partial class GroupParser : Parser
{
Match(input,COLON,Follow._COLON_in_group105);
s=(IToken)Match(input,ID,Follow._ID_in_group109);
-				g.setSuperGroup((s!=null?s.Text:null));
+				g.SetSuperGroup((s!=null?s.Text:null));

}
break;
@@ -161,7 +161,7 @@ public partial class GroupParser : Parser
{
Match(input,KWIMPLEMENTS,Follow._KWIMPLEMENTS_in_group120);
i=(IToken)Match(input,ID,Follow._ID_in_group124);
-				g.implementInterface((i!=null?i.Text:null));
+				g.ImplementInterface((i!=null?i.Text:null));
// Language\\Group.g3:131:4: ( COMMA i2= ID )*
for ( ; ; )
{
@@ -181,7 +181,7 @@ public partial class GroupParser : Parser
{
Match(input,COMMA,Follow._COMMA_in_group132);
i2=(IToken)Match(input,ID,Follow._ID_in_group136);
-						g.implementInterface((i2!=null?i2.Text:null));
+						g.ImplementInterface((i2!=null?i2.Text:null));

}
break;
@@ -384,10 +384,10 @@ public partial class GroupParser : Parser
Match(input,DOT,Follow._DOT_in_template194);
region=(IToken)Match(input,ID,Follow._ID_in_template198);

-									templateName=g.getMangledRegionName((scope2!=null?scope2.Text:null),(region!=null?region.Text:null));
-									if ( g.isDefinedInThisGroup(templateName) )
+									templateName=g.GetMangledRegionName((scope2!=null?scope2.Text:null),(region!=null?region.Text:null));
+									if ( g.IsDefinedInThisGroup(templateName) )
{
-										g.error("group "+g.Name+" line "+line+": redefinition of template region: @"+
+										g.Error("group "+g.Name+" line "+line+": redefinition of template region: @"+
(scope2!=null?scope2.Text:null)+"."+(region!=null?region.Text:null));
st = new StringTemplate(); // create bogus template to fill in
}
@@ -395,16 +395,16 @@ public partial class GroupParser : Parser
{
bool err = false;
// @template.region() ::= "..."
-										StringTemplate scopeST = g.lookupTemplate((scope2!=null?scope2.Text:null));
+										StringTemplate scopeST = g.LookupTemplate((scope2!=null?scope2.Text:null));
if ( scopeST == null )
{
-											g.error("group "+g.Name+" line "+line+": reference to region within undefined template: "+
+											g.Error("group "+g.Name+" line "+line+": reference to region within undefined template: "+
(scope2!=null?scope2.Text:null));
err=true;
}
-										else if ( !scopeST.containsRegionName((region!=null?region.Text:null)) )
+										else if ( !scopeST.ContainsRegionName((region!=null?region.Text:null)) )
{
-											g.error("group "+g.Name+" line "+line+": template "+(scope2!=null?scope2.Text:null)+" has no region called "+
+											g.Error("group "+g.Name+" line "+line+": template "+(scope2!=null?scope2.Text:null)+" has no region called "+
(region!=null?region.Text:null));
err=true;
}
@@ -414,7 +414,7 @@ public partial class GroupParser : Parser
}
else
{
-											st = g.defineRegionTemplate((scope2!=null?scope2.Text:null),
+											st = g.DefineRegionTemplate((scope2!=null?scope2.Text:null),
(region!=null?region.Text:null),
null,
StringTemplate.REGION_EXPLICIT);
@@ -430,14 +430,14 @@ public partial class GroupParser : Parser
name=(IToken)Match(input,ID,Follow._ID_in_template211);
templateName = (name!=null?name.Text:null);

-									if ( g.isDefinedInThisGroup(templateName) )
+									if ( g.IsDefinedInThisGroup(templateName) )
{
-										g.error("redefinition of template: "+templateName);
+										g.Error("redefinition of template: "+templateName);
st = new StringTemplate(); // create bogus template to fill in
}
else
{
-										st = g.defineTemplate(templateName, null);
+										st = g.DefineTemplate(templateName, null);
}


@@ -446,7 +446,7 @@ public partial class GroupParser : Parser

}

-				if ( st!=null ) {st.setGroupFileLine(line);}
+				if ( st!=null ) {st.SetGroupFileLine(line);}
Match(input,LPAREN,Follow._LPAREN_in_template230);
// Language\\Group.g3:201:4: ( args[st] |)
int alt6=2;
@@ -482,7 +482,7 @@ public partial class GroupParser : Parser
case 2:
// Language\\Group.g3:201:14:
{
-					st.defineEmptyFormalArgumentList();
+					st.DefineEmptyFormalArgumentList();

}
break;
@@ -515,7 +515,7 @@ public partial class GroupParser : Parser
// Language\\Group.g3:204:5: t= STRING
{
t=(IToken)Match(input,STRING,Follow._STRING_in_template256);
-					st.setTemplate((t!=null?t.Text:null));
+					st.SetTemplate((t!=null?t.Text:null));

}
break;
@@ -523,7 +523,7 @@ public partial class GroupParser : Parser
// Language\\Group.g3:205:5: bt= BIGSTRING
{
bt=(IToken)Match(input,BIGSTRING,Follow._BIGSTRING_in_template270);
-					st.setTemplate((bt!=null?bt.Text:null));
+					st.SetTemplate((bt!=null?bt.Text:null));

}
break;
@@ -539,7 +539,7 @@ public partial class GroupParser : Parser
alias=(IToken)Match(input,ID,Follow._ID_in_template286);
Match(input,DEFINED_TO_BE,Follow._DEFINED_TO_BE_in_template288);
target=(IToken)Match(input,ID,Follow._ID_in_template292);
-				g.defineTemplateAlias((alias!=null?alias.Text:null), (target!=null?target.Text:null));
+				g.DefineTemplateAlias((alias!=null?alias.Text:null), (target!=null?target.Text:null));

}
break;
@@ -669,9 +669,9 @@ public partial class GroupParser : Parser
s=(IToken)Match(input,STRING,Follow._STRING_in_arg348);

defaultValue=new StringTemplate("$_val_$");
-								defaultValue.setAttribute("_val_", (s!=null?s.Text:null));
-								defaultValue.defineFormalArgument("_val_");
-								defaultValue.Name = "<"+st.getName()+"'s arg "+(name!=null?name.Text:null)+" default value subtemplate>";
+								defaultValue.SetAttribute("_val_", (s!=null?s.Text:null));
+								defaultValue.DefineFormalArgument("_val_");
+								defaultValue.Name = "<"+st.GetName()+"'s arg "+(name!=null?name.Text:null)+" default value subtemplate>";


}
@@ -682,8 +682,8 @@ public partial class GroupParser : Parser
Match(input,ASSIGN,Follow._ASSIGN_in_arg359);
bs=(IToken)Match(input,ANONYMOUS_TEMPLATE,Follow._ANONYMOUS_TEMPLATE_in_arg363);

-								defaultValue=new StringTemplate(st.getGroup(), (bs!=null?bs.Text:null));
-								defaultValue.Name = "<"+st.getName()+"'s arg "+(name!=null?name.Text:null)+" default value subtemplate>";
+								defaultValue=new StringTemplate(st.GetGroup(), (bs!=null?bs.Text:null));
+								defaultValue.Name = "<"+st.GetName()+"'s arg "+(name!=null?name.Text:null)+" default value subtemplate>";


}
@@ -691,7 +691,7 @@ public partial class GroupParser : Parser

}

-			st.defineFormalArgument((name!=null?name.Text:null), defaultValue);
+			st.DefineFormalArgument((name!=null?name.Text:null), defaultValue);

}

@@ -729,17 +729,17 @@ public partial class GroupParser : Parser
state._fsp--;


-						if ( g.getMap((name!=null?name.Text:null))!=null )
+						if ( g.GetMap((name!=null?name.Text:null))!=null )
{
-							g.error("redefinition of map: "+(name!=null?name.Text:null));
+							g.Error("redefinition of map: "+(name!=null?name.Text:null));
}
-						else if ( g.isDefinedInThisGroup((name!=null?name.Text:null)) )
+						else if ( g.IsDefinedInThisGroup((name!=null?name.Text:null)) )
{
-							g.error("redefinition of template as map: "+(name!=null?name.Text:null));
+							g.Error("redefinition of template as map: "+(name!=null?name.Text:null));
}
else
{
-							g.defineMap((name!=null?name.Text:null), m);
+							g.DefineMap((name!=null?name.Text:null), m);
}


diff --git a/Antlr3.StringTemplate/Language/GroupParserHelper.cs b/Antlr3.StringTemplate/Language/GroupParserHelper.cs
index e249ee2..45a2f3a 100644
--- a/Antlr3.StringTemplate/Language/GroupParserHelper.cs
+++ b/Antlr3.StringTemplate/Language/GroupParserHelper.cs
@@ -45,12 +45,12 @@ namespace Antlr3.ST.Language
{
if ( _group != null )
{
-                _group.error( "template group parse error", e );
+                _group.Error( "template group parse error", e );
}
else
{
Console.Error.WriteLine( "template group parse error: " + e );
-                e.printStackTrace( Console.Error );
+                e.PrintStackTrace( Console.Error );
}
}
}
diff --git a/Antlr3.StringTemplate/Language/Interface.g3 b/Antlr3.StringTemplate/Language/Interface.g3
index 1883e44..478eaf1 100644
--- a/Antlr3.StringTemplate/Language/Interface.g3
+++ b/Antlr3.StringTemplate/Language/Interface.g3
@@ -115,7 +115,7 @@ groupInterface[StringTemplateGroupInterface groupI]
{
this.groupI = groupI;
}
-	:	'interface' name=ID {groupI.setName($name.text);} SEMI
+	:	'interface' name=ID {groupI.SetName($name.text);} SEMI
( template[groupI] )+
EOF
;
@@ -129,7 +129,7 @@ template[StringTemplateGroupInterface groupI]
:	(opt='optional')? name=ID LPAREN (formalArgs=args)? RPAREN SEMI
{
templateName = $name.text;
-			$groupI.defineTemplate( templateName, $formalArgs.args ?? new System.Collections.Generic.SortedList<string, FormalArgument>(), opt!=null );
+			$groupI.DefineTemplate( templateName, $formalArgs.args ?? new System.Collections.Generic.SortedList<string, FormalArgument>(), opt!=null );
}
;

diff --git a/Antlr3.StringTemplate/Language/InterfaceParser.cs b/Antlr3.StringTemplate/Language/InterfaceParser.cs
index 637a573..830fa88 100644
--- a/Antlr3.StringTemplate/Language/InterfaceParser.cs
+++ b/Antlr3.StringTemplate/Language/InterfaceParser.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\Interface.g3 2009-03-07 08:51:17
+// $ANTLR 3.1.2 Language\\Interface.g3 2009-03-16 17:22:55

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -100,7 +100,7 @@ public partial class InterfaceParser : Parser
{
Match(input,13,Follow._13_in_groupInterface67);
name=(IToken)Match(input,ID,Follow._ID_in_groupInterface71);
-			groupI.setName((name!=null?name.Text:null));
+			groupI.SetName((name!=null?name.Text:null));
Match(input,SEMI,Follow._SEMI_in_groupInterface75);
// Language\\Interface.g3:119:3: ( template[groupI] )+
int cnt1=0;
@@ -226,7 +226,7 @@ public partial class InterfaceParser : Parser
Match(input,SEMI,Follow._SEMI_in_template129);

templateName = (name!=null?name.Text:null);
-						groupI.defineTemplate( templateName, formalArgs ?? new System.Collections.Generic.SortedList<string, FormalArgument>(), opt!=null );
+						groupI.DefineTemplate( templateName, formalArgs ?? new System.Collections.Generic.SortedList<string, FormalArgument>(), opt!=null );


}
diff --git a/Antlr3.StringTemplate/Language/InterfaceParserHelper.cs b/Antlr3.StringTemplate/Language/InterfaceParserHelper.cs
index 4b9db10..fb987e0 100644
--- a/Antlr3.StringTemplate/Language/InterfaceParserHelper.cs
+++ b/Antlr3.StringTemplate/Language/InterfaceParserHelper.cs
@@ -45,12 +45,12 @@ namespace Antlr3.ST.Language
{
if ( groupI != null )
{
-                groupI.error( "template group interface parse error", e );
+                groupI.Error( "template group interface parse error", e );
}
else
{
Console.Error.WriteLine( "template group interface parse error: " + e );
-                e.printStackTrace( Console.Error );
+                e.PrintStackTrace( Console.Error );
}
}
}
diff --git a/Antlr3.StringTemplate/Language/StringRef.cs b/Antlr3.StringTemplate/Language/StringRef.cs
index c430130..82821b7 100644
--- a/Antlr3.StringTemplate/Language/StringRef.cs
+++ b/Antlr3.StringTemplate/Language/StringRef.cs
@@ -50,9 +50,9 @@ namespace Antlr3.ST.Language
*  &lt;"foo"; wrap="\n"> should wrap though if necessary.
*  </summary>
*/
-        public override int write( StringTemplate self, IStringTemplateWriter writer )
+        public override int Write( StringTemplate self, IStringTemplateWriter writer )
{
-            return writer.write( str ?? string.Empty );
+            return writer.Write( str ?? string.Empty );
}

public override string ToString()
diff --git a/Antlr3.StringTemplate/Language/Template.g3 b/Antlr3.StringTemplate/Language/Template.g3
index 3a226c0..a9b2091 100644
--- a/Antlr3.StringTemplate/Language/Template.g3
+++ b/Antlr3.StringTemplate/Language/Template.g3
@@ -116,12 +116,12 @@ template[StringTemplate self]
{
this.self = self;
}
-	:	(	s=LITERAL  {self.addChunk(new StringRef(self,$s.text));}
+	:	(	s=LITERAL  {self.AddChunk(new StringRef(self,$s.text));}
|	nl=NEWLINE
{
if ( input.LA(1)!=ELSE && input.LA(1)!=ENDIF )
{
-					self.addChunk(new NewlineRef(self,$nl.text));
+					self.AddChunk(new NewlineRef(self,$nl.text));
}
}
|	action[self]
@@ -133,47 +133,47 @@ action[StringTemplate self]
:	a=ACTION
{
string indent = ((ChunkToken)a).Indentation;
-			ASTExpr c = self.parseAction($a.text);
+			ASTExpr c = self.ParseAction($a.text);
c.Indentation = indent;
-			self.addChunk(c);
+			self.AddChunk(c);
}

|	i=IF
{
-			ConditionalExpr c = (ConditionalExpr)self.parseAction($i.text);
+			ConditionalExpr c = (ConditionalExpr)self.ParseAction($i.text);
// create and precompile the subtemplate
-			StringTemplate subtemplate = new StringTemplate(self.getGroup(), null);
-			subtemplate.setEnclosingInstance(self);
-			subtemplate.setName($i.text+"_subtemplate");
-			self.addChunk(c);
+			StringTemplate subtemplate = new StringTemplate(self.GetGroup(), null);
+			subtemplate.SetEnclosingInstance(self);
+			subtemplate.SetName($i.text+"_subtemplate");
+			self.AddChunk(c);
}

-		template[subtemplate] {if ( c!=null ) c.setSubtemplate(subtemplate);}
+		template[subtemplate] {if ( c!=null ) c.SetSubtemplate(subtemplate);}

(	ei=ELSEIF
{
-				ASTExpr ec = self.parseAction($ei.text);
+				ASTExpr ec = self.ParseAction($ei.text);
// create and precompile the subtemplate
-				StringTemplate elseIfSubtemplate = new StringTemplate(self.getGroup(), null);
-				elseIfSubtemplate.setEnclosingInstance(self);
-				elseIfSubtemplate.setName($ei.text+"_subtemplate");
+				StringTemplate elseIfSubtemplate = new StringTemplate(self.GetGroup(), null);
+				elseIfSubtemplate.SetEnclosingInstance(self);
+				elseIfSubtemplate.SetName($ei.text+"_subtemplate");
}

template[elseIfSubtemplate]

-			{if ( c!=null ) c.addElseIfSubtemplate(ec, elseIfSubtemplate);}
+			{if ( c!=null ) c.AddElseIfSubtemplate(ec, elseIfSubtemplate);}
)*

(	ELSE
{
// create and precompile the subtemplate
-				StringTemplate elseSubtemplate = new StringTemplate(self.getGroup(), null);
-				elseSubtemplate.setEnclosingInstance(self);
-				elseSubtemplate.setName("else_subtemplate");
+				StringTemplate elseSubtemplate = new StringTemplate(self.GetGroup(), null);
+				elseSubtemplate.SetEnclosingInstance(self);
+				elseSubtemplate.SetName("else_subtemplate");
}

template[elseSubtemplate]
-			{if ( c!=null ) c.setElseSubtemplate(elseSubtemplate);}
+			{if ( c!=null ) c.SetElseSubtemplate(elseSubtemplate);}
)?

ENDIF
@@ -191,38 +191,38 @@ action[StringTemplate self]
{
//System.out.println("super region ref "+regionName);
string regionRef = regionName.substring("super.".Length,regionName.Length);
-				string templateScope = self.getGroup().getUnMangledTemplateName(self.getName());
-				StringTemplate scopeST = self.getGroup().lookupTemplate(templateScope);
+				string templateScope = self.GetGroup().GetUnMangledTemplateName(self.GetName());
+				StringTemplate scopeST = self.GetGroup().LookupTemplate(templateScope);
if ( scopeST==null )
{
-					self.getGroup().error("reference to region within undefined template: "+templateScope);
+					self.GetGroup().Error("reference to region within undefined template: "+templateScope);
err=true;
}
-				if ( !scopeST.containsRegionName(regionRef) )
+				if ( !scopeST.ContainsRegionName(regionRef) )
{
-					self.getGroup().error("template "+templateScope+" has no region called "+regionRef);
+					self.GetGroup().Error("template "+templateScope+" has no region called "+regionRef);
err=true;
}
else
{
-					mangledRef = self.getGroup().getMangledRegionName(templateScope,regionRef);
+					mangledRef = self.GetGroup().GetMangledRegionName(templateScope,regionRef);
mangledRef = "super."+mangledRef;
}
}
else
{
//System.out.println("region ref "+regionName);
-				StringTemplate regionST = self.getGroup().defineImplicitRegionTemplate(self,regionName);
-				mangledRef = regionST.getName();
+				StringTemplate regionST = self.GetGroup().DefineImplicitRegionTemplate(self,regionName);
+				mangledRef = regionST.GetName();
}

if ( !err )
{
// treat as regular action: mangled template include
string indent = ((ChunkToken)$rr).Indentation;
-				ASTExpr c = self.parseAction(mangledRef+"()");
+				ASTExpr c = self.ParseAction(mangledRef+"()");
c.Indentation = indent;
-				self.addChunk(c);
+				self.AddChunk(c);
}
}

@@ -234,16 +234,16 @@ action[StringTemplate self]
{
string regionName = combinedNameTemplateStr.substring(0,indexOfDefSymbol);
string template = combinedNameTemplateStr.substring(indexOfDefSymbol+3, combinedNameTemplateStr.Length);
-				StringTemplate regionST = self.getGroup().defineRegionTemplate(self,regionName,template,StringTemplate.REGION_EMBEDDED);
+				StringTemplate regionST = self.GetGroup().DefineRegionTemplate(self,regionName,template,StringTemplate.REGION_EMBEDDED);
// treat as regular action: mangled template include
string indent = ((ChunkToken)$rd).Indentation;
-				ASTExpr c = self.parseAction(regionST.getName()+"()");
+				ASTExpr c = self.ParseAction(regionST.GetName()+"()");
c.Indentation = indent;
-				self.addChunk(c);
+				self.AddChunk(c);
}
else
{
-				self.error("embedded region definition screwed up");
+				self.Error("embedded region definition screwed up");
}
}
;
@@ -334,14 +334,14 @@ ACTION
}
( ('\r'|'\n') => ('\r')? '\n' )?
{atLeft = false;}
-					(	{!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) ))}? =>
+					(	{!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) ))}? =>
(	('\r'|'\n') => ('\r' {builder.Append('\r');})? '\n' {builder.Append('\n'); atLeft = true;}
|	ch=. {builder.Append((char)$ch); atLeft = false;}
)
)+
(	('\r'|'\n') => ('\r')? '\n' {atLeft = true;} )?
(	('$@end$') => '$@end$'
-					|	.	{self.error("missing region "+t+" $@end$ tag");}
+					|	.	{self.Error("missing region "+t+" $@end$ tag");}
)
(	{atLeft}? ('\r')? '\n' )?
)
diff --git a/Antlr3.StringTemplate/Language/TemplateLexer.cs b/Antlr3.StringTemplate/Language/TemplateLexer.cs
index 8c475c3..2b23471 100644
--- a/Antlr3.StringTemplate/Language/TemplateLexer.cs
+++ b/Antlr3.StringTemplate/Language/TemplateLexer.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\Template.g3 2009-03-07 08:52:37
+// $ANTLR 3.1.2 Language\\Template.g3 2009-03-16 17:21:57

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -910,10 +910,10 @@ public partial class TemplateLexer : Lexer
case 1:
// Language\\Template.g3:337:8: {...}? => (=> ( '\\r' )? '\\n' |ch= . )
{
-								if ( !((!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) )))) )
+								if ( !((!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) )))) )
{
if (state.backtracking>0) {state.failed=true; return ;}
-									throw new FailedPredicateException(input, "ACTION", "!(upcomingAtEND(1) || ( input.LA(1) == '\\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\\r' && input.LA(2) == '\\n' && upcomingAtEND(3) ))");
+									throw new FailedPredicateException(input, "ACTION", "!(UpcomingAtEND(1) || ( input.LA(1) == '\\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\\r' && input.LA(2) == '\\n' && UpcomingAtEND(3) ))");
}
// Language\\Template.g3:338:7: (=> ( '\\r' )? '\\n' |ch= . )
int alt17=2;
@@ -1175,7 +1175,7 @@ public partial class TemplateLexer : Lexer
MatchAny(); if (state.failed) return ;
if ( state.backtracking == 0 )
{
-								self.error("missing region "+t+" $@end$ tag");
+								self.Error("missing region "+t+" $@end$ tag");
}

}
@@ -3278,7 +3278,7 @@ public partial class TemplateLexer : Lexer
int index18_1 = input.Index;
input.Rewind();
s = -1;
-				if ( ((!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) )))) ) {s = 5;}
+				if ( ((!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) )))) ) {s = 5;}

else if ( (true) ) {s = 6;}

@@ -3294,7 +3294,7 @@ public partial class TemplateLexer : Lexer
int index18_2 = input.Index;
input.Rewind();
s = -1;
-				if ( ((!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) )))) ) {s = 5;}
+				if ( ((!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) )))) ) {s = 5;}

else if ( (true) ) {s = 6;}

@@ -3316,7 +3316,7 @@ public partial class TemplateLexer : Lexer

else if ( (LA18_3=='\n') ) {s = 9;}

-				else if ( ((LA18_3>='\u0000' && LA18_3<='\t')||(LA18_3>='\u000B' && LA18_3<='\f')||(LA18_3>='\u000E' && LA18_3<='?')||(LA18_3>='A' && LA18_3<='\uFFFF')) && ((!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) ))))) {s = 5;}
+				else if ( ((LA18_3>='\u0000' && LA18_3<='\t')||(LA18_3>='\u000B' && LA18_3<='\f')||(LA18_3>='\u000E' && LA18_3<='?')||(LA18_3>='A' && LA18_3<='\uFFFF')) && ((!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) ))))) {s = 5;}

else s = 6;

@@ -3336,7 +3336,7 @@ public partial class TemplateLexer : Lexer

else if ( (LA18_4=='\n') ) {s = 9;}

-				else if ( ((LA18_4>='\u0000' && LA18_4<='\t')||(LA18_4>='\u000B' && LA18_4<='\f')||(LA18_4>='\u000E' && LA18_4<='\uFFFF')) && ((!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) ))))) {s = 5;}
+				else if ( ((LA18_4>='\u0000' && LA18_4<='\t')||(LA18_4>='\u000B' && LA18_4<='\f')||(LA18_4>='\u000E' && LA18_4<='\uFFFF')) && ((!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) ))))) {s = 5;}

else s = 6;

@@ -3368,7 +3368,7 @@ public partial class TemplateLexer : Lexer
int index18_8 = input.Index;
input.Rewind();
s = -1;
-				if ( ((!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) )))) ) {s = 5;}
+				if ( ((!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) )))) ) {s = 5;}

else if ( (true) ) {s = 6;}

@@ -3384,7 +3384,7 @@ public partial class TemplateLexer : Lexer
int index18_9 = input.Index;
input.Rewind();
s = -1;
-				if ( ((!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) )))) ) {s = 5;}
+				if ( ((!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) )))) ) {s = 5;}

else if ( (true) ) {s = 6;}

@@ -3448,7 +3448,7 @@ public partial class TemplateLexer : Lexer
int index18_13 = input.Index;
input.Rewind();
s = -1;
-				if ( ((!(upcomingAtEND(1) || ( input.LA(1) == '\n' && upcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && upcomingAtEND(3) )))) ) {s = 5;}
+				if ( ((!(UpcomingAtEND(1) || ( input.LA(1) == '\n' && UpcomingAtEND(2) ) || ( input.LA(1) == '\r' && input.LA(2) == '\n' && UpcomingAtEND(3) )))) ) {s = 5;}

else if ( (true) ) {s = 6;}

diff --git a/Antlr3.StringTemplate/Language/TemplateLexerHelper.cs b/Antlr3.StringTemplate/Language/TemplateLexerHelper.cs
index 744e0b5..444c77b 100644
--- a/Antlr3.StringTemplate/Language/TemplateLexerHelper.cs
+++ b/Antlr3.StringTemplate/Language/TemplateLexerHelper.cs
@@ -49,26 +49,17 @@ namespace Antlr3.ST.Language

public override void ReportError( RecognitionException e )
{
-            self.error( "$...$ chunk lexer error", e );
+            self.Error( "$...$ chunk lexer error", e );
}

-        //protected boolean upcomingELSE(int i) throws CharStreamException {
-        //    return LA(i)=='$'&&LA(i+1)=='e'&&LA(i+2)=='l'&&LA(i+3)=='s'&&LA(i+4)=='e'&&
-        //           LA(i+5)=='$';
-        //}
-
-        //protected boolean upcomingENDIF(int i) throws CharStreamException {
-        //    return LA(i)=='$'&&LA(i+1)=='e'&&LA(i+2)=='n'&&LA(i+3)=='d'&&LA(i+4)=='i'&&
-        //           LA(i+5)=='f'&&LA(i+6)=='$';
-        //}
-
-        protected bool upcomingAtEND(int i)
+        bool UpcomingAtEND( int i )
{
-            return input.LA(i)=='$'&&input.LA(i+1)=='@'&&input.LA(i+2)=='e'&&input.LA(i+3)=='n'&&input.LA(i+4)=='d'&&input.LA(i+5)=='$';
+            return input.LA( i ) == '$'
+                && input.LA( i + 1 ) == '@'
+                && input.LA( i + 2 ) == 'e'
+                && input.LA( i + 3 ) == 'n'
+                && input.LA( i + 4 ) == 'd'
+                && input.LA( i + 5 ) == '$';
}
-
-        //protected boolean upcomingNewline(int i) throws CharStreamException {
-        //    return (LA(i)=='\r'&&LA(i+1)=='\n')||LA(i)=='\n';
-        //}
}
}
diff --git a/Antlr3.StringTemplate/Language/TemplateParser.cs b/Antlr3.StringTemplate/Language/TemplateParser.cs
index 0238896..cd4cc90 100644
--- a/Antlr3.StringTemplate/Language/TemplateParser.cs
+++ b/Antlr3.StringTemplate/Language/TemplateParser.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\Template.g3 2009-03-16 15:51:02
+// $ANTLR 3.1.2 Language\\Template.g3 2009-03-16 17:21:57

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -141,7 +141,7 @@ public partial class TemplateParser : Parser
// Language\\Template.g3:119:6: s= LITERAL
{
s=(IToken)Match(input,LITERAL,Follow._LITERAL_in_template71);
-					self.addChunk(new StringRef(self,(s!=null?s.Text:null)));
+					self.AddChunk(new StringRef(self,(s!=null?s.Text:null)));

}
break;
@@ -152,7 +152,7 @@ public partial class TemplateParser : Parser

if ( input.LA(1)!=ELSE && input.LA(1)!=ENDIF )
{
-										self.addChunk(new NewlineRef(self,(nl!=null?nl.Text:null)));
+										self.AddChunk(new NewlineRef(self,(nl!=null?nl.Text:null)));
}


@@ -268,9 +268,9 @@ public partial class TemplateParser : Parser
a=(IToken)Match(input,ACTION,Follow._ACTION_in_action118);

string indent = ((ChunkToken)a).Indentation;
-							ASTExpr c = self.parseAction((a!=null?a.Text:null));
+							ASTExpr c = self.ParseAction((a!=null?a.Text:null));
c.Indentation = indent;
-							self.addChunk(c);
+							self.AddChunk(c);


}
@@ -280,19 +280,19 @@ public partial class TemplateParser : Parser
{
i=(IToken)Match(input,IF,Follow._IF_in_action130);

-							ConditionalExpr c = (ConditionalExpr)self.parseAction((i!=null?i.Text:null));
+							ConditionalExpr c = (ConditionalExpr)self.ParseAction((i!=null?i.Text:null));
// create and precompile the subtemplate
-							StringTemplate subtemplate = new StringTemplate(self.getGroup(), null);
-							subtemplate.setEnclosingInstance(self);
-							subtemplate.setName((i!=null?i.Text:null)+"_subtemplate");
-							self.addChunk(c);
+							StringTemplate subtemplate = new StringTemplate(self.GetGroup(), null);
+							subtemplate.SetEnclosingInstance(self);
+							subtemplate.SetName((i!=null?i.Text:null)+"_subtemplate");
+							self.AddChunk(c);

PushFollow(Follow._template_in_action139);
template(subtemplate);

state._fsp--;

-				if ( c!=null ) c.setSubtemplate(subtemplate);
+				if ( c!=null ) c.SetSubtemplate(subtemplate);
// Language\\Template.g3:153:3: (ei= ELSEIF template[elseIfSubtemplate] )*
for ( ; ; )
{
@@ -312,18 +312,18 @@ public partial class TemplateParser : Parser
{
ei=(IToken)Match(input,ELSEIF,Follow._ELSEIF_in_action151);

-										ASTExpr ec = self.parseAction((ei!=null?ei.Text:null));
+										ASTExpr ec = self.ParseAction((ei!=null?ei.Text:null));
// create and precompile the subtemplate
-										StringTemplate elseIfSubtemplate = new StringTemplate(self.getGroup(), null);
-										elseIfSubtemplate.setEnclosingInstance(self);
-										elseIfSubtemplate.setName((ei!=null?ei.Text:null)+"_subtemplate");
+										StringTemplate elseIfSubtemplate = new StringTemplate(self.GetGroup(), null);
+										elseIfSubtemplate.SetEnclosingInstance(self);
+										elseIfSubtemplate.SetName((ei!=null?ei.Text:null)+"_subtemplate");

PushFollow(Follow._template_in_action162);
template(elseIfSubtemplate);

state._fsp--;

-						if ( c!=null ) c.addElseIfSubtemplate(ec, elseIfSubtemplate);
+						if ( c!=null ) c.AddElseIfSubtemplate(ec, elseIfSubtemplate);

}
break;
@@ -353,16 +353,16 @@ public partial class TemplateParser : Parser
Match(input,ELSE,Follow._ELSE_in_action181);

// create and precompile the subtemplate
-									StringTemplate elseSubtemplate = new StringTemplate(self.getGroup(), null);
-									elseSubtemplate.setEnclosingInstance(self);
-									elseSubtemplate.setName("else_subtemplate");
+									StringTemplate elseSubtemplate = new StringTemplate(self.GetGroup(), null);
+									elseSubtemplate.SetEnclosingInstance(self);
+									elseSubtemplate.SetName("else_subtemplate");

PushFollow(Follow._template_in_action192);
template(elseSubtemplate);

state._fsp--;

-					if ( c!=null ) c.setElseSubtemplate(elseSubtemplate);
+					if ( c!=null ) c.SetElseSubtemplate(elseSubtemplate);

}
break;
@@ -389,38 +389,38 @@ public partial class TemplateParser : Parser
{
//System.out.println("super region ref "+regionName);
string regionRef = regionName.substring("super.".Length,regionName.Length);
-								string templateScope = self.getGroup().getUnMangledTemplateName(self.getName());
-								StringTemplate scopeST = self.getGroup().lookupTemplate(templateScope);
+								string templateScope = self.GetGroup().GetUnMangledTemplateName(self.GetName());
+								StringTemplate scopeST = self.GetGroup().LookupTemplate(templateScope);
if ( scopeST==null )
{
-									self.getGroup().error("reference to region within undefined template: "+templateScope);
+									self.GetGroup().Error("reference to region within undefined template: "+templateScope);
err=true;
}
-								if ( !scopeST.containsRegionName(regionRef) )
+								if ( !scopeST.ContainsRegionName(regionRef) )
{
-									self.getGroup().error("template "+templateScope+" has no region called "+regionRef);
+									self.GetGroup().Error("template "+templateScope+" has no region called "+regionRef);
err=true;
}
else
{
-									mangledRef = self.getGroup().getMangledRegionName(templateScope,regionRef);
+									mangledRef = self.GetGroup().GetMangledRegionName(templateScope,regionRef);
mangledRef = "super."+mangledRef;
}
}
else
{
//System.out.println("region ref "+regionName);
-								StringTemplate regionST = self.getGroup().defineImplicitRegionTemplate(self,regionName);
-								mangledRef = regionST.getName();
+								StringTemplate regionST = self.GetGroup().DefineImplicitRegionTemplate(self,regionName);
+								mangledRef = regionST.GetName();
}

if ( !err )
{
// treat as regular action: mangled template include
string indent = ((ChunkToken)rr).Indentation;
-								ASTExpr c = self.parseAction(mangledRef+"()");
+								ASTExpr c = self.ParseAction(mangledRef+"()");
c.Indentation = indent;
-								self.addChunk(c);
+								self.AddChunk(c);
}


@@ -437,16 +437,16 @@ public partial class TemplateParser : Parser
{
string regionName = combinedNameTemplateStr.substring(0,indexOfDefSymbol);
string template = combinedNameTemplateStr.substring(indexOfDefSymbol+3, combinedNameTemplateStr.Length);
-								StringTemplate regionST = self.getGroup().defineRegionTemplate(self,regionName,template,StringTemplate.REGION_EMBEDDED);
+								StringTemplate regionST = self.GetGroup().DefineRegionTemplate(self,regionName,template,StringTemplate.REGION_EMBEDDED);
// treat as regular action: mangled template include
string indent = ((ChunkToken)rd).Indentation;
-								ASTExpr c = self.parseAction(regionST.getName()+"()");
+								ASTExpr c = self.ParseAction(regionST.GetName()+"()");
c.Indentation = indent;
-								self.addChunk(c);
+								self.AddChunk(c);
}
else
{
-								self.error("embedded region definition screwed up");
+								self.Error("embedded region definition screwed up");
}


diff --git a/Antlr3.StringTemplate/Language/TemplateParserHelper.cs b/Antlr3.StringTemplate/Language/TemplateParserHelper.cs
index afbebc3..b973334 100644
--- a/Antlr3.StringTemplate/Language/TemplateParserHelper.cs
+++ b/Antlr3.StringTemplate/Language/TemplateParserHelper.cs
@@ -40,14 +40,14 @@ namespace Antlr3.ST.Language

public override void ReportError( RecognitionException e )
{
-            StringTemplateGroup group = self.getGroup();
+            StringTemplateGroup group = self.GetGroup();
if ( group == StringTemplate.defaultGroup )
{
-                self.error( "template parse error; template context is " + self.getEnclosingInstanceStackString(), e );
+                self.Error( "template parse error; template context is " + self.GetEnclosingInstanceStackString(), e );
}
else
{
-                self.error( "template parse error in group " + self.getGroup().Name + " line " + self.getGroupFileLine() + "; template context is " + self.getEnclosingInstanceStackString(), e );
+                self.Error( "template parse error in group " + self.GetGroup().Name + " line " + self.GetGroupFileLine() + "; template context is " + self.GetEnclosingInstanceStackString(), e );
}
}
}
diff --git a/Antlr3.StringTemplate/NoIndentWriter.cs b/Antlr3.StringTemplate/NoIndentWriter.cs
index ed1bf29..4bbd769 100644
--- a/Antlr3.StringTemplate/NoIndentWriter.cs
+++ b/Antlr3.StringTemplate/NoIndentWriter.cs
@@ -42,7 +42,7 @@ namespace Antlr3.ST
{
}

-        public override int write( string str )
+        public override int Write( string str )
{
Writer.Write( str );
return str.Length;
diff --git a/Antlr3.StringTemplate/PathGroupLoader.cs b/Antlr3.StringTemplate/PathGroupLoader.cs
index 89019bf..7cbb350 100644
--- a/Antlr3.StringTemplate/PathGroupLoader.cs
+++ b/Antlr3.StringTemplate/PathGroupLoader.cs
@@ -89,7 +89,7 @@ namespace Antlr3.ST
*  during parsing.
*  </summary>
*/
-        public virtual StringTemplateGroup loadGroup( string groupName,
+        public virtual StringTemplateGroup LoadGroup( string groupName,
Type templateLexer,
StringTemplateGroup superGroup )
{
@@ -103,10 +103,10 @@ namespace Antlr3.ST
}
try
{
-                br = locate( groupName + ".stg" );
+                br = Locate( groupName + ".stg" );
if ( br == null )
{
-                    error( "no such group file " + groupName + ".stg" );
+                    Error( "no such group file " + groupName + ".stg" );
return null;
}
group = new StringTemplateGroup( br, lexer, _errors, superGroup );
@@ -115,7 +115,7 @@ namespace Antlr3.ST
}
catch ( IOException ioe )
{
-                error( "can't load group " + groupName, ioe );
+                Error( "can't load group " + groupName, ioe );
}
finally
{
@@ -127,46 +127,46 @@ namespace Antlr3.ST
}
catch ( IOException ioe2 )
{
-                        error( "Cannot close template group file: " + groupName + ".stg", ioe2 );
+                        Error( "Cannot close template group file: " + groupName + ".stg", ioe2 );
}
}
}
return group;
}

-        public virtual StringTemplateGroup loadGroup( string groupName,
+        public virtual StringTemplateGroup LoadGroup( string groupName,
StringTemplateGroup superGroup )
{
-            return loadGroup( groupName, null, superGroup );
+            return LoadGroup( groupName, null, superGroup );
}

-        public virtual StringTemplateGroup loadGroup( string groupName )
+        public virtual StringTemplateGroup LoadGroup( string groupName )
{
-            return loadGroup( groupName, null );
+            return LoadGroup( groupName, null );
}

-        public virtual StringTemplateGroupInterface loadInterface( string interfaceName )
+        public virtual StringTemplateGroupInterface LoadInterface( string interfaceName )
{
StringTemplateGroupInterface I = null;
try
{
-                TextReader br = locate( interfaceName + ".sti" );
+                TextReader br = Locate( interfaceName + ".sti" );
if ( br == null )
{
-                    error( "no such interface file " + interfaceName + ".sti" );
+                    Error( "no such interface file " + interfaceName + ".sti" );
return null;
}
I = new StringTemplateGroupInterface( br, _errors );
}
catch ( IOException ioe )
{
-                error( "can't load interface " + interfaceName, ioe );
+                Error( "can't load interface " + interfaceName, ioe );
}
return I;
}

/** <summary>Look in each directory for the file called 'name'.</summary> */
-        protected virtual TextReader locate( string name )
+        protected virtual TextReader Locate( string name )
{
for ( int i = 0; i < _dirs.Length; i++ )
{
@@ -175,45 +175,45 @@ namespace Antlr3.ST
if ( System.IO.File.Exists( fileName ) )
{
System.IO.FileStream fis = System.IO.File.OpenRead( fileName );
-                    StreamReader isr = getInputStreamReader( new System.IO.BufferedStream( fis ) );
+                    StreamReader isr = GetInputStreamReader( new System.IO.BufferedStream( fis ) );
return isr;
}
}
return null;
}

-        protected virtual StreamReader getInputStreamReader( Stream stream )
+        protected virtual StreamReader GetInputStreamReader( Stream stream )
{
return new StreamReader( stream, _fileCharEncoding );
}

-        public virtual Encoding getFileCharEncoding()
+        public virtual Encoding GetFileCharEncoding()
{
return _fileCharEncoding;
}

-        public virtual void setFileCharEncoding( Encoding fileCharEncoding )
+        public virtual void SetFileCharEncoding( Encoding fileCharEncoding )
{
this._fileCharEncoding = fileCharEncoding ?? Encoding.Default;
}

-        public virtual void error( string msg )
+        public virtual void Error( string msg )
{
-            error( msg, null );
+            Error( msg, null );
}

-        public virtual void error( string msg, Exception e )
+        public virtual void Error( string msg, Exception e )
{
if ( _errors != null )
{
-                _errors.error( msg, e );
+                _errors.Error( msg, e );
}
else
{
Console.Error.WriteLine( "StringTemplate: " + msg );
if ( e != null )
{
-                    e.printStackTrace();
+                    e.PrintStackTrace();
}
}
}
diff --git a/Antlr3.StringTemplate/Runtime.Tree/DOTTreeGenerator.cs b/Antlr3.StringTemplate/Runtime.Tree/DOTTreeGenerator.cs
index 6aacc62..d21b4e9 100644
--- a/Antlr3.StringTemplate/Runtime.Tree/DOTTreeGenerator.cs
+++ b/Antlr3.StringTemplate/Runtime.Tree/DOTTreeGenerator.cs
@@ -81,16 +81,16 @@ namespace Antlr.Runtime.Tree
/** Track node number so we can get unique node names */
int nodeNumber = 0;

-        public virtual StringTemplate toDOT( object tree,
+        public virtual StringTemplate ToDOT( object tree,
ITreeAdaptor adaptor,
StringTemplate _treeST,
StringTemplate _edgeST )
{
-            StringTemplate treeST = _treeST.getInstanceOf();
+            StringTemplate treeST = _treeST.GetInstanceOf();
nodeNumber = 0;
-            toDOTDefineNodes( tree, adaptor, treeST );
+            ToDOTDefineNodes( tree, adaptor, treeST );
nodeNumber = 0;
-            toDOTDefineEdges( tree, adaptor, treeST );
+            ToDOTDefineEdges( tree, adaptor, treeST );
/*
if ( adaptor.getChildCount(tree)==0 ) {
// single node, don't do edge.
@@ -100,10 +100,10 @@ namespace Antlr.Runtime.Tree
return treeST;
}

-        public virtual StringTemplate toDOT( object tree,
+        public virtual StringTemplate ToDOT( object tree,
ITreeAdaptor adaptor )
{
-            return toDOT( tree, adaptor, _treeST, _edgeST );
+            return ToDOT( tree, adaptor, _treeST, _edgeST );
}

/** Generate DOT (graphviz) for a whole tree not just a node.
@@ -123,12 +123,12 @@ namespace Antlr.Runtime.Tree
*
* Takes a Tree interface object.
*/
-        public virtual StringTemplate toDOT( ITree tree )
+        public virtual StringTemplate ToDOT( ITree tree )
{
-            return toDOT( tree, new CommonTreeAdaptor() );
+            return ToDOT( tree, new CommonTreeAdaptor() );
}

-        protected virtual void toDOTDefineNodes( object tree, ITreeAdaptor adaptor, StringTemplate treeST )
+        protected virtual void ToDOTDefineNodes( object tree, ITreeAdaptor adaptor, StringTemplate treeST )
{
if ( tree == null )
{
@@ -143,20 +143,20 @@ namespace Antlr.Runtime.Tree
}

// define parent node
-            StringTemplate parentNodeST = getNodeST( adaptor, tree );
-            treeST.setAttribute( "nodes", parentNodeST );
+            StringTemplate parentNodeST = GetNodeST( adaptor, tree );
+            treeST.SetAttribute( "nodes", parentNodeST );

// for each child, do a "<unique-name> [label=text]" node def
for ( int i = 0; i < n; i++ )
{
object child = adaptor.GetChild( tree, i );
-                StringTemplate nodeST = getNodeST( adaptor, child );
-                treeST.setAttribute( "nodes", nodeST );
-                toDOTDefineNodes( child, adaptor, treeST );
+                StringTemplate nodeST = GetNodeST( adaptor, child );
+                treeST.SetAttribute( "nodes", nodeST );
+                ToDOTDefineNodes( child, adaptor, treeST );
}
}

-        protected virtual void toDOTDefineEdges( object tree, ITreeAdaptor adaptor, StringTemplate treeST )
+        protected virtual void ToDOTDefineEdges( object tree, ITreeAdaptor adaptor, StringTemplate treeST )
{
if ( tree == null )
{
@@ -170,7 +170,7 @@ namespace Antlr.Runtime.Tree
return;
}

-            string parentName = "n" + getNodeNumber( tree );
+            string parentName = "n" + GetNodeNumber( tree );

// for each child, do a parent -> child edge using unique node names
string parentText = adaptor.GetText( tree );
@@ -178,28 +178,28 @@ namespace Antlr.Runtime.Tree
{
object child = adaptor.GetChild( tree, i );
string childText = adaptor.GetText( child );
-                string childName = "n" + getNodeNumber( child );
-                StringTemplate edgeST = _edgeST.getInstanceOf();
-                edgeST.setAttribute( "parent", parentName );
-                edgeST.setAttribute( "child", childName );
-                edgeST.setAttribute( "parentText", fixString( parentText ) );
-                edgeST.setAttribute( "childText", fixString( childText ) );
-                treeST.setAttribute( "edges", edgeST );
-                toDOTDefineEdges( child, adaptor, treeST );
+                string childName = "n" + GetNodeNumber( child );
+                StringTemplate edgeST = _edgeST.GetInstanceOf();
+                edgeST.SetAttribute( "parent", parentName );
+                edgeST.SetAttribute( "child", childName );
+                edgeST.SetAttribute( "parentText", FixString( parentText ) );
+                edgeST.SetAttribute( "childText", FixString( childText ) );
+                treeST.SetAttribute( "edges", edgeST );
+                ToDOTDefineEdges( child, adaptor, treeST );
}
}

-        protected virtual StringTemplate getNodeST( ITreeAdaptor adaptor, object t )
+        protected virtual StringTemplate GetNodeST( ITreeAdaptor adaptor, object t )
{
string text = adaptor.GetText( t );
-            StringTemplate nodeST = _nodeST.getInstanceOf();
-            string uniqueName = "n" + getNodeNumber( t );
-            nodeST.setAttribute( "name", uniqueName );
-            nodeST.setAttribute( "text", fixString( text ) );
+            StringTemplate nodeST = _nodeST.GetInstanceOf();
+            string uniqueName = "n" + GetNodeNumber( t );
+            nodeST.SetAttribute( "name", uniqueName );
+            nodeST.SetAttribute( "text", FixString( text ) );
return nodeST;
}

-        protected virtual int getNodeNumber( object t )
+        protected virtual int GetNodeNumber( object t )
{
int i;
if ( nodeToNumberMap.TryGetValue( t, out i ) )
@@ -214,7 +214,7 @@ namespace Antlr.Runtime.Tree
}
}

-        protected virtual string fixString( string text )
+        protected virtual string FixString( string text )
{
if ( text != null )
{
diff --git a/Antlr3.StringTemplate/StringTemplate.cs b/Antlr3.StringTemplate/StringTemplate.cs
index 3e2e10a..aa190ad 100644
--- a/Antlr3.StringTemplate/StringTemplate.cs
+++ b/Antlr3.StringTemplate/StringTemplate.cs
@@ -124,11 +124,11 @@ namespace Antlr3.ST
*  user from doing so.
*  </summary>
*/
-            public void put( string propName, object propValue )
+            public void Put( string propName, object propValue )
{
properties[propName] = propValue;
}
-            public object get( string propName )
+            public object Get( string propName )
{
object value;
if ( properties.TryGetValue( propName, out value ) )
@@ -168,7 +168,7 @@ namespace Antlr3.ST
string _name = ANONYMOUS_ST_NAME;

static int _templateCounter = 0;
-        static int getNextTemplateCounter()
+        static int GetNextTemplateCounter()
{
return System.Threading.Interlocked.Increment( ref _templateCounter );
}
@@ -177,12 +177,12 @@ namespace Antlr3.ST
*  can access but not really of interest to the user.
*  </summary>
*/
-        public static void resetTemplateCounter()
+        public static void ResetTemplateCounter()
{
_templateCounter = 0;
}

-        int _templateID = getNextTemplateCounter();
+        int _templateID = GetNextTemplateCounter();

/** <summary>
*  Enclosing instance if I'm embedded within another template.
@@ -375,8 +375,8 @@ namespace Antlr3.ST
public StringTemplate( string template, Type lexer )
: this()
{
-            setGroup( new StringTemplateGroup( "defaultGroup", lexer ) );
-            setTemplate( template );
+            SetGroup( new StringTemplateGroup( "defaultGroup", lexer ) );
+            SetTemplate( template );
}

/** <summary>Create an anonymous template with no name, but with a group</summary> */
@@ -385,9 +385,9 @@ namespace Antlr3.ST
{
if ( group != null )
{
-                setGroup( group );
+                SetGroup( group );
}
-            setTemplate( template );
+            SetTemplate( template );
}

public StringTemplate( StringTemplateGroup group,
@@ -404,11 +404,11 @@ namespace Antlr3.ST
{
get
{
-                return getArgumentContext();
+                return GetArgumentContext();
}
set
{
-                setArgumentContext( value );
+                SetArgumentContext( value );
}
}

@@ -416,11 +416,11 @@ namespace Antlr3.ST
{
get
{
-                return getArgumentsAST();
+                return GetArgumentsAST();
}
set
{
-                setArgumentsAST( value );
+                SetArgumentsAST( value );
}
}

@@ -428,11 +428,11 @@ namespace Antlr3.ST
{
get
{
-                return getAttributes();
+                return GetAttributes();
}
set
{
-                setAttributes( value );
+                SetAttributes( value );
}
}

@@ -440,7 +440,7 @@ namespace Antlr3.ST
{
get
{
-                return getChunks();
+                return GetChunks();
}
}

@@ -448,11 +448,11 @@ namespace Antlr3.ST
{
get
{
-                return getEnclosingInstance();
+                return GetEnclosingInstance();
}
set
{
-                setEnclosingInstance( value );
+                SetEnclosingInstance( value );
}
}

@@ -460,11 +460,11 @@ namespace Antlr3.ST
{
get
{
-                return getErrorListener();
+                return GetErrorListener();
}
set
{
-                setErrorListener( value );
+                SetErrorListener( value );
}
}

@@ -472,11 +472,11 @@ namespace Antlr3.ST
{
get
{
-                return getGroup();
+                return GetGroup();
}
set
{
-                setGroup( value );
+                SetGroup( value );
}
}

@@ -484,11 +484,11 @@ namespace Antlr3.ST
{
get
{
-                return getGroupFileLine();
+                return GetGroupFileLine();
}
set
{
-                setGroupFileLine( value );
+                SetGroupFileLine( value );
}
}

@@ -496,7 +496,7 @@ namespace Antlr3.ST
{
get
{
-                return getFormalArguments();
+                return GetFormalArguments();
}
}

@@ -504,11 +504,11 @@ namespace Antlr3.ST
{
get
{
-                return getIsRegion();
+                return GetIsRegion();
}
set
{
-                setIsRegion( value );
+                SetIsRegion( value );
}
}

@@ -516,11 +516,11 @@ namespace Antlr3.ST
{
get
{
-                return inLintMode();
+                return InLintMode();
}
set
{
-                setLintMode( value );
+                SetLintMode( value );
}
}

@@ -528,11 +528,11 @@ namespace Antlr3.ST
{
get
{
-                return getName();
+                return GetName();
}
set
{
-                setName( value );
+                SetName( value );
}
}

@@ -540,11 +540,11 @@ namespace Antlr3.ST
{
get
{
-                return getNativeGroup();
+                return GetNativeGroup();
}
set
{
-                setNativeGroup( value );
+                SetNativeGroup( value );
}
}

@@ -552,7 +552,7 @@ namespace Antlr3.ST
{
get
{
-                return getOutermostEnclosingInstance();
+                return GetOutermostEnclosingInstance();
}
}

@@ -560,7 +560,7 @@ namespace Antlr3.ST
{
get
{
-                return getOutermostName();
+                return GetOutermostName();
}
}

@@ -568,11 +568,11 @@ namespace Antlr3.ST
{
get
{
-                return getRegionDefType();
+                return GetRegionDefType();
}
set
{
-                setRegionDefType( value );
+                SetRegionDefType( value );
}
}

@@ -580,11 +580,11 @@ namespace Antlr3.ST
{
get
{
-                return getTemplate();
+                return GetTemplate();
}
set
{
-                setTemplate( value );
+                SetTemplate( value );
}
}

@@ -592,7 +592,7 @@ namespace Antlr3.ST
{
get
{
-                return getTemplateDeclaratorString();
+                return GetTemplateDeclaratorString();
}
}

@@ -600,7 +600,7 @@ namespace Antlr3.ST
{
get
{
-                return getTemplateID();
+                return GetTemplateID();
}
}

@@ -615,7 +615,7 @@ namespace Antlr3.ST
*  template to eval in a context different from the examplar.
*  </summary>
*/
-        protected virtual void dup( StringTemplate from, StringTemplate to )
+        protected virtual void Dup( StringTemplate from, StringTemplate to )
{
to._attributeRenderers = from._attributeRenderers;
to._pattern = from._pattern;
@@ -638,7 +638,7 @@ namespace Antlr3.ST
*  template but does not have any attribute values.
*  </summary>
*/
-        public virtual StringTemplate getInstanceOf()
+        public virtual StringTemplate GetInstanceOf()
{
StringTemplate t = null;
if ( _nativeGroup != null )
@@ -646,131 +646,131 @@ namespace Antlr3.ST
// create a template using the native group for this template
// but it's "group" is set to this.group by dup after creation so
// polymorphism still works.
-                t = _nativeGroup.createStringTemplate();
+                t = _nativeGroup.CreateStringTemplate();
}
else
{
-                t = _group.createStringTemplate();
+                t = _group.CreateStringTemplate();
}
-            dup( this, t );
+            Dup( this, t );
return t;
}

-        public virtual StringTemplate getEnclosingInstance()
+        public virtual StringTemplate GetEnclosingInstance()
{
return _enclosingInstance;
}

-        public virtual StringTemplate getOutermostEnclosingInstance()
+        public virtual StringTemplate GetOutermostEnclosingInstance()
{
if ( _enclosingInstance != null )
{
-                return _enclosingInstance.getOutermostEnclosingInstance();
+                return _enclosingInstance.GetOutermostEnclosingInstance();
}
return this;
}

-        public virtual void setEnclosingInstance( StringTemplate enclosingInstance )
+        public virtual void SetEnclosingInstance( StringTemplate enclosingInstance )
{
if ( this == enclosingInstance )
{
-                throw new ArgumentException( "cannot embed template " + getName() + " in itself" );
+                throw new ArgumentException( "cannot embed template " + GetName() + " in itself" );
}
// set the parent for this template
this._enclosingInstance = enclosingInstance;
}

-        public virtual Dictionary<string, object> getArgumentContext()
+        public virtual Dictionary<string, object> GetArgumentContext()
{
return _argumentContext;
}

-        public virtual void setArgumentContext( Dictionary<string, object> ac )
+        public virtual void SetArgumentContext( Dictionary<string, object> ac )
{
_argumentContext = ac;
}

-        public virtual StringTemplateAST getArgumentsAST()
+        public virtual StringTemplateAST GetArgumentsAST()
{
return _argumentsAST;
}

-        public virtual void setArgumentsAST( StringTemplateAST argumentsAST )
+        public virtual void SetArgumentsAST( StringTemplateAST argumentsAST )
{
this._argumentsAST = argumentsAST;
}

-        public virtual string getName()
+        public virtual string GetName()
{
return _name;
}

-        public virtual string getOutermostName()
+        public virtual string GetOutermostName()
{
if ( _enclosingInstance != null )
{
-                return _enclosingInstance.getOutermostName();
+                return _enclosingInstance.GetOutermostName();
}
-            return getName();
+            return GetName();
}

-        public virtual void setName( string name )
+        public virtual void SetName( string name )
{
this._name = name;
}

-        public virtual StringTemplateGroup getGroup()
+        public virtual StringTemplateGroup GetGroup()
{
return _group;
}

-        public virtual void setGroup( StringTemplateGroup group )
+        public virtual void SetGroup( StringTemplateGroup group )
{
this._group = group;
}

-        public virtual StringTemplateGroup getNativeGroup()
+        public virtual StringTemplateGroup GetNativeGroup()
{
return _nativeGroup;
}

-        public virtual void setNativeGroup( StringTemplateGroup nativeGroup )
+        public virtual void SetNativeGroup( StringTemplateGroup nativeGroup )
{
this._nativeGroup = nativeGroup;
}

/** <summary>Return the outermost template's group file line number</summary> */
-        public virtual int getGroupFileLine()
+        public virtual int GetGroupFileLine()
{
if ( _enclosingInstance != null )
{
-                return _enclosingInstance.getGroupFileLine();
+                return _enclosingInstance.GetGroupFileLine();
}
return _groupFileLine;
}

-        public virtual void setGroupFileLine( int groupFileLine )
+        public virtual void SetGroupFileLine( int groupFileLine )
{
this._groupFileLine = groupFileLine;
}

-        public virtual void setTemplate( string template )
+        public virtual void SetTemplate( string template )
{
this._pattern = template;
-            breakTemplateIntoChunks();
+            BreakTemplateIntoChunks();
}

-        public virtual string getTemplate()
+        public virtual string GetTemplate()
{
return _pattern;
}

-        public virtual void setErrorListener( IStringTemplateErrorListener listener )
+        public virtual void SetErrorListener( IStringTemplateErrorListener listener )
{
this._listener = listener;
}

-        public virtual IStringTemplateErrorListener getErrorListener()
+        public virtual IStringTemplateErrorListener GetErrorListener()
{
if ( _listener == null )
{
@@ -779,20 +779,20 @@ namespace Antlr3.ST
return _listener;
}

-        public virtual void reset()
+        public virtual void Reset()
{
attributes = new Dictionary<string, object>(); // just throw out table and make new one
}

-        public virtual void setPredefinedAttributes()
+        public virtual void SetPredefinedAttributes()
{
-            if ( !inLintMode() )
+            if ( !InLintMode() )
{
return; // only do this method so far in lint mode
}
}

-        public virtual void removeAttribute( string name )
+        public virtual void RemoveAttribute( string name )
{
if ( attributes != null )
attributes.Remove( name );
@@ -815,7 +815,7 @@ namespace Antlr3.ST
*  If you send in an array, it is converted to an ArrayIterator.
*  </remarks>
*/
-        public virtual void setAttribute( string name, object value )
+        public virtual void SetAttribute( string name, object value )
{
if ( value == null || name == null )
{
@@ -832,7 +832,7 @@ namespace Antlr3.ST

if ( value is StringTemplate )
{
-                ( (StringTemplate)value ).setEnclosingInstance( this );
+                ( (StringTemplate)value ).SetEnclosingInstance( this );
}
else if ( value is HashSet<object> )
{
@@ -841,7 +841,7 @@ namespace Antlr3.ST
else
{
// convert value if array
-                value = ASTExpr.convertArrayToList( value );
+                value = ASTExpr.ConvertArrayToList( value );
}

// convert plain collections
@@ -849,7 +849,7 @@ namespace Antlr3.ST
object o = this.attributes.get( name );
if ( o == null )
{ // new attribute
-                rawSetAttribute( this.attributes, name, value );
+                RawSetAttribute( this.attributes, name, value );
return;
}
// it will be a multi-value attribute
@@ -865,14 +865,14 @@ namespace Antlr3.ST
IList listAttr = (IList)o;
v = new STAttributeList( listAttr.Count );
v.AddRange( listAttr.Cast<object>() );
-                rawSetAttribute( this.attributes, name, v ); // replace attribute w/list
+                RawSetAttribute( this.attributes, name, v ); // replace attribute w/list
}
else
{
// non-list second attribute, must convert existing to ArrayList
v = new STAttributeList(); // make list to hold multiple values
// make it point to list now
-                rawSetAttribute( this.attributes, name, v ); // replace attribute w/list
+                RawSetAttribute( this.attributes, name, v ); // replace attribute w/list
v.Add( o );  // add previous single-valued attribute
}
if ( value is IList )
@@ -894,24 +894,24 @@ namespace Antlr3.ST
*  must have the format: "name.{propName1,propName2}".
*  </summary>
*/
-        public virtual void setAttribute( string aggrSpec, object v1, object v2 )
+        public virtual void SetAttribute( string aggrSpec, object v1, object v2 )
{
-            setAttribute( aggrSpec, new object[] { v1, v2 } );
+            SetAttribute( aggrSpec, new object[] { v1, v2 } );
}

-        public virtual void setAttribute( string aggrSpec, object v1, object v2, object v3 )
+        public virtual void SetAttribute( string aggrSpec, object v1, object v2, object v3 )
{
-            setAttribute( aggrSpec, new object[] { v1, v2, v3 } );
+            SetAttribute( aggrSpec, new object[] { v1, v2, v3 } );
}

-        public virtual void setAttribute( string aggrSpec, object v1, object v2, object v3, object v4 )
+        public virtual void SetAttribute( string aggrSpec, object v1, object v2, object v3, object v4 )
{
-            setAttribute( aggrSpec, new object[] { v1, v2, v3, v4 } );
+            SetAttribute( aggrSpec, new object[] { v1, v2, v3, v4 } );
}

-        public virtual void setAttribute( string aggrSpec, object v1, object v2, object v3, object v4, object v5 )
+        public virtual void SetAttribute( string aggrSpec, object v1, object v2, object v3, object v4, object v5 )
{
-            setAttribute( aggrSpec, new object[] { v1, v2, v3, v4, v5 } );
+            SetAttribute( aggrSpec, new object[] { v1, v2, v3, v4, v5 } );
}

/** <summary>
@@ -920,13 +920,13 @@ namespace Antlr3.ST
*  it conflicts semantically with setAttribute("foo",new Object[] {...});
*  </summary>
*/
-        protected virtual void setAttribute( string aggrSpec, params object[] values )
+        protected virtual void SetAttribute( string aggrSpec, params object[] values )
{
if ( values.Length < 2 )
throw new ArgumentException();

List<string> properties = new List<string>();
-            string aggrName = parseAggregateAttributeSpec( aggrSpec, properties );
+            string aggrName = ParseAggregateAttributeSpec( aggrSpec, properties );
if ( values == null || properties.Count == 0 )
{
throw new ArgumentException( "missing properties or values for '" + aggrSpec + "'" );
@@ -941,15 +941,15 @@ namespace Antlr3.ST
object value = values[i];
if ( value is StringTemplate )
{
-                    ( (StringTemplate)value ).setEnclosingInstance( this );
+                    ( (StringTemplate)value ).SetEnclosingInstance( this );
}
else
{
-                    value = ASTExpr.convertArrayToList( value );
+                    value = ASTExpr.ConvertArrayToList( value );
}
-                aggr.put( properties[i], value );
+                aggr.Put( properties[i], value );
}
-            setAttribute( aggrName, aggr );
+            SetAttribute( aggrName, aggr );
}

/** <summary>
@@ -957,7 +957,7 @@ namespace Antlr3.ST
*  and the aggrName. Space is allowed around ','.
*  </summary>
*/
-        protected virtual string parseAggregateAttributeSpec( string aggrSpec, List<string> properties )
+        protected virtual string ParseAggregateAttributeSpec( string aggrSpec, List<string> properties )
{
int dot = aggrSpec.IndexOf( '.' );
if ( dot <= 0 )
@@ -1009,17 +1009,17 @@ namespace Antlr3.ST
*  and a formal argument list exists.
*  </summary>
*/
-        protected virtual void rawSetAttribute( IDictionary<string, object> attributes,
+        protected virtual void RawSetAttribute( IDictionary<string, object> attributes,
string name,
object value )
{
if ( _formalArguments != FormalArgument.UNKNOWN &&
-                getFormalArgument( name ) == null )
+                GetFormalArgument( name ) == null )
{
// a normal call to setAttribute with unknown attribute
throw new ArgumentException( "no such attribute: " + name +
" in template context " +
-                                                 getEnclosingInstanceStackString() );
+                                                 GetEnclosingInstanceStackString() );
}
if ( value == null )
{
@@ -1035,18 +1035,18 @@ namespace Antlr3.ST
*  something other than "this".
*  </summary>
*/
-        public virtual void rawSetArgumentAttribute( StringTemplate embedded,
+        public virtual void RawSetArgumentAttribute( StringTemplate embedded,
IDictionary attributes,
string name,
object value )
{
if ( embedded._formalArguments != FormalArgument.UNKNOWN &&
-                 embedded.getFormalArgument( name ) == null )
+                 embedded.GetFormalArgument( name ) == null )
{
-                throw new ArgumentException( "template " + embedded.getName() +
+                throw new ArgumentException( "template " + embedded.GetName() +
" has no such attribute: " + name +
" in template context " +
-                                                 getEnclosingInstanceStackString() );
+                                                 GetEnclosingInstanceStackString() );
}
if ( value == null )
{
@@ -1055,9 +1055,9 @@ namespace Antlr3.ST
attributes[name] = value;
}

-        public virtual object getAttribute( string name )
+        public virtual object GetAttribute( string name )
{
-            return get( this, name );
+            return Get( this, name );
}

/** <summary>
@@ -1068,19 +1068,19 @@ namespace Antlr3.ST
*  for all instances of this template.
*  </summary>
*/
-        public virtual int write( IStringTemplateWriter writer )
+        public virtual int Write( IStringTemplateWriter writer )
{
if ( _group.debugTemplateOutput )
{
-                _group.emitTemplateStartDebugString( this, writer );
+                _group.EmitTemplateStartDebugString( this, writer );
}
int n = 0;
-            setPredefinedAttributes();
-            setDefaultArgumentValues();
+            SetPredefinedAttributes();
+            SetDefaultArgumentValues();
for ( int i = 0; _chunks != null && i < _chunks.Count; i++ )
{
Expr a = (Expr)_chunks[i];
-                int chunkN = a.write( this, writer );
+                int chunkN = a.Write( this, writer );
// expr-on-first-line-with-no-output NEWLINE => NEWLINE
if ( chunkN == 0 && i == 0 && ( i + 1 ) < _chunks.Count &&
_chunks[i + 1] is NewlineRef )
@@ -1103,11 +1103,11 @@ namespace Antlr3.ST
}
if ( _group.debugTemplateOutput )
{
-                _group.emitTemplateStopDebugString( this, writer );
+                _group.EmitTemplateStopDebugString( this, writer );
}
if ( _lintMode )
{
-                checkForTrouble();
+                CheckForTrouble();
}
return n;
}
@@ -1142,7 +1142,7 @@ namespace Antlr3.ST
*  This method is not static so people can override functionality.
*  </remarks>
*/
-        public virtual object get( StringTemplate self, string attribute )
+        public virtual object Get( StringTemplate self, string attribute )
{
//System.out.println("### get("+self.getEnclosingInstanceStackString()+", "+attribute+")");
//System.out.println("attributes="+(self.attributes!=null?self.attributes.keySet().toString():"none"));
@@ -1153,7 +1153,7 @@ namespace Antlr3.ST

if ( _lintMode )
{
-                self.trackAttributeReference( attribute );
+                self.TrackAttributeReference( attribute );
}

// is it here?
@@ -1166,7 +1166,7 @@ namespace Antlr3.ST
// nope, check argument context in case embedded
if ( o == null )
{
-                IDictionary<string, object> argContext = self.getArgumentContext();
+                IDictionary<string, object> argContext = self.GetArgumentContext();
if ( argContext != null )
{
o = argContext.get( attribute );
@@ -1175,7 +1175,7 @@ namespace Antlr3.ST

if ( o == null &&
!self._passThroughAttributes &&
-                 self.getFormalArgument( attribute ) != null )
+                 self.GetFormalArgument( attribute ) != null )
{
// if you've defined attribute as formal arg for this
// template and it has no value, do not look up the
@@ -1191,10 +1191,10 @@ namespace Antlr3.ST
System.out.println("looking for "+getName()+"."+attribute+" in super="+
enclosingInstance.getName());
*/
-                object valueFromEnclosing = get( self._enclosingInstance, attribute );
+                object valueFromEnclosing = Get( self._enclosingInstance, attribute );
if ( valueFromEnclosing == null )
{
-                    checkNullAttributeAgainstFormalArguments( self, attribute );
+                    CheckNullAttributeAgainstFormalArguments( self, attribute );
}
o = valueFromEnclosing;
}
@@ -1203,7 +1203,7 @@ namespace Antlr3.ST
else if ( o == null && self._enclosingInstance == null )
{
// It might be a map in the group or supergroup...
-                o = self._group.getMap( attribute );
+                o = self._group.GetMap( attribute );
}

return o;
@@ -1214,7 +1214,7 @@ namespace Antlr3.ST
*  chunks: Strings and actions/expressions.
*  </summary>
*/
-        protected virtual void breakTemplateIntoChunks()
+        protected virtual void BreakTemplateIntoChunks()
{
//System.out.println("parsing template: "+pattern);
if ( _pattern == null )
@@ -1247,20 +1247,20 @@ namespace Antlr3.ST
catch ( Exception e )
{
string name = "<unknown>";
-                string outerName = getOutermostName();
-                if ( getName() != null )
+                string outerName = GetOutermostName();
+                if ( GetName() != null )
{
-                    name = getName();
+                    name = GetName();
}
if ( outerName != null && !name.Equals( outerName ) )
{
name = name + " nested in " + outerName;
}
-                error( "problem parsing template '" + name + "'", e );
+                Error( "problem parsing template '" + name + "'", e );
}
}

-        public virtual ASTExpr parseAction( string action )
+        public virtual ASTExpr ParseAction( string action )
{
//System.out.println("parse action "+action);
ActionLexer lexer = new ActionLexer( new Antlr.Runtime.ANTLRStringStream( action.ToString() ) );
@@ -1288,7 +1288,7 @@ namespace Antlr3.ST
}
catch ( RecognitionException re )
{
-                error( "Can't parse chunk: " + action.ToString(), re );
+                Error( "Can't parse chunk: " + action.ToString(), re );
}
//catch (TokenStreamException tse) {
//    error("Can't parse chunk: "+action.toString(), tse);
@@ -1301,12 +1301,12 @@ namespace Antlr3.ST
return a;
}

-        public virtual int getTemplateID()
+        public virtual int GetTemplateID()
{
return _templateID;
}

-        public virtual IDictionary<string, object> getAttributes()
+        public virtual IDictionary<string, object> GetAttributes()
{
return attributes;
}
@@ -1316,12 +1316,12 @@ namespace Antlr3.ST
*  refs in a template.
*  </summary>
*/
-        public virtual IList<Expr> getChunks()
+        public virtual IList<Expr> GetChunks()
{
return _chunks;
}

-        public virtual void addChunk( Expr e )
+        public virtual void AddChunk( Expr e )
{
if ( _chunks == null )
{
@@ -1330,19 +1330,19 @@ namespace Antlr3.ST
_chunks.Add( e );
}

-        public virtual void setAttributes( IDictionary<string, object> attributes )
+        public virtual void SetAttributes( IDictionary<string, object> attributes )
{
this.attributes = attributes;
}

#region Formal Arg Stuff

-        public virtual IList<FormalArgument> getFormalArguments()
+        public virtual IList<FormalArgument> GetFormalArguments()
{
return _formalArguments;
}

-        public virtual void setFormalArguments( IList<FormalArgument> args )
+        public virtual void SetFormalArguments( IList<FormalArgument> args )
{
_formalArguments = args;
}
@@ -1361,7 +1361,7 @@ namespace Antlr3.ST
*  the template attributes table just for consistency's sake.
*  </remarks>
*/
-        public virtual void setDefaultArgumentValues()
+        public virtual void SetDefaultArgumentValues()
{
if ( _numberOfDefaultArgumentValues == 0 )
{
@@ -1379,7 +1379,7 @@ namespace Antlr3.ST
// use the default value then
if ( arg.defaultValueST != null )
{
-                        object existingValue = getAttribute( argName );
+                        object existingValue = GetAttribute( argName );
if ( existingValue == null )
{ // value unset?
// if no value for attribute, set arg context
@@ -1398,32 +1398,32 @@ namespace Antlr3.ST
*  recursively look for the formal parameter.
*  </summary>
*/
-        public virtual FormalArgument lookupFormalArgument( string name )
+        public virtual FormalArgument LookupFormalArgument( string name )
{
-            FormalArgument arg = getFormalArgument( name );
+            FormalArgument arg = GetFormalArgument( name );
if ( arg == null && _enclosingInstance != null )
{
-                arg = _enclosingInstance.lookupFormalArgument( name );
+                arg = _enclosingInstance.LookupFormalArgument( name );
}
return arg;
}

-        public virtual FormalArgument getFormalArgument( string name )
+        public virtual FormalArgument GetFormalArgument( string name )
{
return _formalArguments.FirstOrDefault( fa => fa.name == name );
}

-        public virtual void defineEmptyFormalArgumentList()
+        public virtual void DefineEmptyFormalArgumentList()
{
-            setFormalArguments( new List<FormalArgument>() );
+            SetFormalArguments( new List<FormalArgument>() );
}

-        public virtual void defineFormalArgument( string name )
+        public virtual void DefineFormalArgument( string name )
{
-            defineFormalArgument( name, null );
+            DefineFormalArgument( name, null );
}

-        public virtual void defineFormalArguments( IList names )
+        public virtual void DefineFormalArguments( IList names )
{
if ( names == null )
{
@@ -1432,11 +1432,11 @@ namespace Antlr3.ST
for ( int i = 0; i < names.Count; i++ )
{
string name = (string)names[i];
-                defineFormalArgument( name );
+                DefineFormalArgument( name );
}
}

-        public virtual void defineFormalArgument( string name, StringTemplate defaultValue )
+        public virtual void DefineFormalArgument( string name, StringTemplate defaultValue )
{
if ( defaultValue != null )
{
@@ -1459,7 +1459,7 @@ namespace Antlr3.ST
*  template to see through the formal arg list to inherited values.
*  </summary>
*/
-        public virtual void setPassThroughAttributes( bool passThroughAttributes )
+        public virtual void SetPassThroughAttributes( bool passThroughAttributes )
{
this._passThroughAttributes = passThroughAttributes;
}
@@ -1469,7 +1469,7 @@ namespace Antlr3.ST
*  renderer objects.
*  </summary>
*/
-        public virtual void setAttributeRenderers( Dictionary<Type, IAttributeRenderer> renderers )
+        public virtual void SetAttributeRenderers( Dictionary<Type, IAttributeRenderer> renderers )
{
this._attributeRenderers = renderers;
}
@@ -1479,7 +1479,7 @@ namespace Antlr3.ST
*  overrides any renderer set in the group for this class type.
*  </summary>
*/
-        public virtual void registerRenderer( Type attributeClassType, IAttributeRenderer renderer )
+        public virtual void RegisterRenderer( Type attributeClassType, IAttributeRenderer renderer )
{
if ( _attributeRenderers == null )
{
@@ -1493,7 +1493,7 @@ namespace Antlr3.ST
*  this template.  If not found, the template's group is queried.
*  </summary>
*/
-        public virtual IAttributeRenderer getAttributeRenderer( Type attributeClassType )
+        public virtual IAttributeRenderer GetAttributeRenderer( Type attributeClassType )
{
IAttributeRenderer renderer = null;
if ( _attributeRenderers != null )
@@ -1511,24 +1511,24 @@ namespace Antlr3.ST
// check parent template if we are embedded
if ( _enclosingInstance != null )
{
-                return _enclosingInstance.getAttributeRenderer( attributeClassType );
+                return _enclosingInstance.GetAttributeRenderer( attributeClassType );
}
// else check group
-            return _group.getAttributeRenderer( attributeClassType );
+            return _group.GetAttributeRenderer( attributeClassType );
}

#region Utility routines

-        public virtual void error( string msg )
+        public virtual void Error( string msg )
{
-            error( msg, null );
+            Error( msg, null );
}

-        public virtual void warning( string msg )
+        public virtual void Warning( string msg )
{
-            if ( getErrorListener() != null )
+            if ( GetErrorListener() != null )
{
-                getErrorListener().warning( msg );
+                GetErrorListener().Warning( msg );
}
else
{
@@ -1536,11 +1536,11 @@ namespace Antlr3.ST
}
}

-        public virtual void error( string msg, Exception e )
+        public virtual void Error( string msg, Exception e )
{
-            if ( getErrorListener() != null )
+            if ( GetErrorListener() != null )
{
-                getErrorListener().error( msg, e );
+                GetErrorListener().Error( msg, e );
}
else
{
@@ -1551,7 +1551,7 @@ namespace Antlr3.ST
{
e = e.InnerException ?? e;
}
-                    e.printStackTrace( Console.Error );
+                    e.PrintStackTrace( Console.Error );
}
else
{
@@ -1566,18 +1566,18 @@ namespace Antlr3.ST
*  you set attributes that are not used.
*  </summary>
*/
-        public static void setLintMode( bool lint )
+        public static void SetLintMode( bool lint )
{
StringTemplate._lintMode = lint;
}

-        public static bool inLintMode()
+        public static bool InLintMode()
{
return _lintMode;
}

/** <summary>Indicates that 'name' has been referenced in this template.</summary> */
-        protected virtual void trackAttributeReference( string name )
+        protected virtual void TrackAttributeReference( string name )
{
if ( _referencedAttributes == null )
{
@@ -1591,7 +1591,7 @@ namespace Antlr3.ST
*  if st is a template already in the enclosing instance chain.
*  </summary>
*/
-        public static bool isRecursiveEnclosingInstance( StringTemplate st )
+        public static bool IsRecursiveEnclosingInstance( StringTemplate st )
{
if ( st == null )
{
@@ -1616,7 +1616,7 @@ namespace Antlr3.ST

string _newline = Environment.NewLine;

-        public virtual string getEnclosingInstanceStackTrace()
+        public virtual string GetEnclosingInstanceStackTrace()
{
StringBuilder buf = new StringBuilder();
HashSet<object> seen = new HashSet<object>();
@@ -1625,14 +1625,14 @@ namespace Antlr3.ST
{
if ( seen.Contains( p ) )
{
-                    buf.Append( p.getTemplateDeclaratorString() );
+                    buf.Append( p.GetTemplateDeclaratorString() );
buf.Append( " (start of recursive cycle)" );
buf.Append( _newline );
buf.Append( "..." );
break;
}
seen.Add( p );
-                buf.Append( p.getTemplateDeclaratorString() );
+                buf.Append( p.GetTemplateDeclaratorString() );
if ( p.attributes != null )
{
buf.Append( ", attributes=[" );
@@ -1651,9 +1651,9 @@ namespace Antlr3.ST
StringTemplate st = (StringTemplate)o;
buf.Append( "=" );
buf.Append( "<" );
-                            buf.Append( st.getName() );
+                            buf.Append( st.GetName() );
buf.Append( "()@" );
-                            buf.Append( st.getTemplateID().ToString() );
+                            buf.Append( st.GetTemplateID().ToString() );
buf.Append( ">" );
}
else if ( o is IList )
@@ -1673,9 +1673,9 @@ namespace Antlr3.ST
n++;
StringTemplate st = (StringTemplate)listValue;
buf.Append( "<" );
-                                    buf.Append( st.getName() );
+                                    buf.Append( st.GetName() );
buf.Append( "()@" );
-                                    buf.Append( st.getTemplateID().ToString() );
+                                    buf.Append( st.GetTemplateID().ToString() );
buf.Append( ">" );
}
}
@@ -1700,32 +1700,32 @@ namespace Antlr3.ST
return buf.ToString();
}

-        public virtual string getTemplateDeclaratorString()
+        public virtual string GetTemplateDeclaratorString()
{
StringBuilder buf = new StringBuilder();
buf.Append( "<" );
-            buf.Append( getName() );
+            buf.Append( GetName() );
buf.Append( "(" );
buf.Append( _formalArguments.Select( fa => fa.name ).ToList().ToElementString() );
buf.Append( ")@" );
-            buf.Append( getTemplateID().ToString() );
+            buf.Append( GetTemplateID().ToString() );
buf.Append( ">" );
return buf.ToString();
}

-        protected virtual string getTemplateHeaderString( bool showAttributes )
+        protected virtual string GetTemplateHeaderString( bool showAttributes )
{
if ( showAttributes )
{
StringBuilder buf = new StringBuilder();
-                buf.Append( getName() );
+                buf.Append( GetName() );
if ( attributes != null )
{
buf.Append( "[" + string.Join( ", ", attributes.Keys.Cast<object>().Select( o => o.ToString() ).ToArray() ) + "]" );
}
return buf.ToString();
}
-            return getName();
+            return GetName();
}

#if false
@@ -1737,7 +1737,7 @@ namespace Antlr3.ST
*  in argumentContext.
*  </summary>
*/
-        protected void checkAttributesAgainstFormalArguments()
+        protected void CheckAttributesAgainstFormalArguments()
{
var args = FormalArguments;
/*
@@ -1778,26 +1778,26 @@ namespace Antlr3.ST
*  ask enclosing.
*  </remarks>
*/
-        protected virtual void checkNullAttributeAgainstFormalArguments(
+        protected virtual void CheckNullAttributeAgainstFormalArguments(
StringTemplate self,
string attribute )
{
-            if ( self.getFormalArguments() == FormalArgument.UNKNOWN )
+            if ( self.GetFormalArguments() == FormalArgument.UNKNOWN )
{
// bypass unknown arg lists
if ( self._enclosingInstance != null )
{
-                    checkNullAttributeAgainstFormalArguments(
+                    CheckNullAttributeAgainstFormalArguments(
self._enclosingInstance,
attribute );
}
return;
}
-            FormalArgument formalArg = self.lookupFormalArgument( attribute );
+            FormalArgument formalArg = self.LookupFormalArgument( attribute );
if ( formalArg == null )
{
throw new ArgumentException( "no such attribute: " + attribute +
-                                                 " in template context " + getEnclosingInstanceStackString() );
+                                                 " in template context " + GetEnclosingInstanceStackString() );
}
}

@@ -1806,7 +1806,7 @@ namespace Antlr3.ST
*  of attributes not reference.
*  </summary>
*/
-        protected virtual void checkForTrouble()
+        protected virtual void CheckForTrouble()
{
// we have table of set values and list of values referenced
// compare, looking for SET BUT NOT REFERENCED ATTRIBUTES
@@ -1820,7 +1820,7 @@ namespace Antlr3.ST
if ( _referencedAttributes != null &&
!_referencedAttributes.Contains( name ) )
{
-                    warning( getName() + ": set but not used: " + name );
+                    Warning( GetName() + ": set but not used: " + name );
}
}
// can do the reverse, but will have lots of false warnings :(
@@ -1832,30 +1832,30 @@ namespace Antlr3.ST
*  here that would be "[z y x]".
*  </summary>
*/
-        public virtual string getEnclosingInstanceStackString()
+        public virtual string GetEnclosingInstanceStackString()
{
System.Collections.Generic.List<string> names = new System.Collections.Generic.List<string>();
StringTemplate p = this;
while ( p != null )
{
-                string name = p.getName();
+                string name = p.GetName();
names.Insert( 0, name + ( p._passThroughAttributes ? "(...)" : "" ) );
p = p._enclosingInstance;
}
return "[" + string.Join( " ", names.ToArray() ) + "]";
}

-        public virtual bool getIsRegion()
+        public virtual bool GetIsRegion()
{
return _isRegion;
}

-        public virtual void setIsRegion( bool isRegion )
+        public virtual void SetIsRegion( bool isRegion )
{
this._isRegion = isRegion;
}

-        public virtual void addRegionName( string name )
+        public virtual void AddRegionName( string name )
{
if ( _regions == null )
{
@@ -1865,7 +1865,7 @@ namespace Antlr3.ST
}

/** <summary>Does this template ref or embed region name?</summary> */
-        public virtual bool containsRegionName( string name )
+        public virtual bool ContainsRegionName( string name )
{
if ( _regions == null )
{
@@ -1874,20 +1874,20 @@ namespace Antlr3.ST
return _regions.Contains( name );
}

-        public virtual int getRegionDefType()
+        public virtual int GetRegionDefType()
{
return _regionDefType;
}

-        public virtual void setRegionDefType( int regionDefType )
+        public virtual void SetRegionDefType( int regionDefType )
{
this._regionDefType = regionDefType;
}

-        public virtual string toDebugString()
+        public virtual string ToDebugString()
{
StringBuilder buf = new StringBuilder();
-            buf.Append( "template-" + getTemplateDeclaratorString() + ":" );
+            buf.Append( "template-" + GetTemplateDeclaratorString() + ":" );
buf.Append( "chunks=" );
if ( _chunks != null )
{
@@ -1907,7 +1907,7 @@ namespace Antlr3.ST
object value = attributes.get( name );
if ( value is StringTemplate )
{
-                        buf.Append( ( (StringTemplate)value ).toDebugString() );
+                        buf.Append( ( (StringTemplate)value ).ToDebugString() );
}
else
{
@@ -1925,19 +1925,19 @@ namespace Antlr3.ST
*  Follow (nest) attributes that are templates only.
*  </summary>
*/
-        public virtual string toStructureString()
+        public virtual string ToStructureString()
{
-            return toStructureString( 0 );
+            return ToStructureString( 0 );
}

-        public virtual string toStructureString( int indent )
+        public virtual string ToStructureString( int indent )
{
StringBuilder buf = new StringBuilder();
for ( int i = 1; i <= indent; i++ )
{ // indent
buf.Append( "  " );
}
-            buf.Append( getName() );
+            buf.Append( GetName() );
buf.Append( attributes.Keys );
buf.Append( ":" + _newline );
if ( attributes != null )
@@ -1948,7 +1948,7 @@ namespace Antlr3.ST
object value = attr.Value;
if ( value is StringTemplate )
{ // descend
-                        buf.Append( ( (StringTemplate)value ).toStructureString( indent + 1 ) );
+                        buf.Append( ( (StringTemplate)value ).ToStructureString( indent + 1 ) );
}
else
{
@@ -1960,7 +1960,7 @@ namespace Antlr3.ST
object o = (object)alist[i];
if ( o is StringTemplate )
{ // descend
-                                    buf.Append( ( (StringTemplate)o ).toStructureString( indent + 1 ) );
+                                    buf.Append( ( (StringTemplate)o ).ToStructureString( indent + 1 ) );
}
}
}
@@ -1972,7 +1972,7 @@ namespace Antlr3.ST
{
if ( o is StringTemplate )
{ // descend
-                                    buf.Append( ( (StringTemplate)o ).toStructureString( indent + 1 ) );
+                                    buf.Append( ( (StringTemplate)o ).ToStructureString( indent + 1 ) );
}
}
}
@@ -1983,7 +1983,7 @@ namespace Antlr3.ST
}

#if false
-        public String getDOTForDependencyGraph(bool showAttributes) {
+        public String GetDOTForDependencyGraph(bool showAttributes) {
StringBuffer buf = new StringBuffer();
buf.append("digraph prof {\n");
HashMap edges = new HashMap();
@@ -2024,7 +2024,7 @@ namespace Antlr3.ST
*      }
*  </remarks>
*/
-        public virtual StringTemplate getDOTForDependencyGraph( bool showAttributes )
+        public virtual StringTemplate GetDOTForDependencyGraph( bool showAttributes )
{
string structure =
"digraph StringTemplateDependencyGraph {" + _newline +
@@ -2034,7 +2034,7 @@ namespace Antlr3.ST
"}" + _newline;
StringTemplate graphST = new StringTemplate( structure );
Dictionary<object, object> edges = new Dictionary<object, object>();
-            this.getDependencyGraph( edges, showAttributes );
+            this.GetDependencyGraph( edges, showAttributes );
var sourceNodes = edges.Keys;
// for each source template
foreach ( string src in sourceNodes )
@@ -2043,12 +2043,12 @@ namespace Antlr3.ST
// for each target template
foreach ( string trg in targetNodes )
{
-                    graphST.setAttribute( "edges.{src,trg}", src, trg );
+                    graphST.SetAttribute( "edges.{src,trg}", src, trg );
}
}
-            graphST.setAttribute( "shape", "none" );
-            graphST.setAttribute( "fontsize", "11" );
-            graphST.setAttribute( "height", "0" ); // make height
+            graphST.SetAttribute( "shape", "none" );
+            graphST.SetAttribute( "fontsize", "11" );
+            graphST.SetAttribute( "height", "0" ); // make height
return graphST;
}

@@ -2068,9 +2068,9 @@ namespace Antlr3.ST
*  because we are static like method and method[...] with args.
*  </remarks>
*/
-        public virtual void getDependencyGraph( IDictionary edges, bool showAttributes )
+        public virtual void GetDependencyGraph( IDictionary edges, bool showAttributes )
{
-            string srcNode = this.getTemplateHeaderString( showAttributes );
+            string srcNode = this.GetTemplateHeaderString( showAttributes );
if ( attributes != null )
{
foreach ( var attr in attributes )
@@ -2080,9 +2080,9 @@ namespace Antlr3.ST
if ( value is StringTemplate )
{
string targetNode =
-                            ( (StringTemplate)value ).getTemplateHeaderString( showAttributes );
-                        putToMultiValuedMap( edges, srcNode, targetNode );
-                        ( (StringTemplate)value ).getDependencyGraph( edges, showAttributes ); // descend
+                            ( (StringTemplate)value ).GetTemplateHeaderString( showAttributes );
+                        PutToMultiValuedMap( edges, srcNode, targetNode );
+                        ( (StringTemplate)value ).GetDependencyGraph( edges, showAttributes ); // descend
}
else
{
@@ -2095,9 +2095,9 @@ namespace Antlr3.ST
if ( o is StringTemplate )
{
string targetNode =
-                                        ( (StringTemplate)o ).getTemplateHeaderString( showAttributes );
-                                    putToMultiValuedMap( edges, srcNode, targetNode );
-                                    ( (StringTemplate)o ).getDependencyGraph( edges, showAttributes ); // descend
+                                        ( (StringTemplate)o ).GetTemplateHeaderString( showAttributes );
+                                    PutToMultiValuedMap( edges, srcNode, targetNode );
+                                    ( (StringTemplate)o ).GetDependencyGraph( edges, showAttributes ); // descend
}
}
}
@@ -2110,9 +2110,9 @@ namespace Antlr3.ST
if ( o is StringTemplate )
{
string targetNode =
-                                        ( (StringTemplate)o ).getTemplateHeaderString( showAttributes );
-                                    putToMultiValuedMap( edges, srcNode, targetNode );
-                                    ( (StringTemplate)o ).getDependencyGraph( edges, showAttributes ); // descend
+                                        ( (StringTemplate)o ).GetTemplateHeaderString( showAttributes );
+                                    PutToMultiValuedMap( edges, srcNode, targetNode );
+                                    ( (StringTemplate)o ).GetDependencyGraph( edges, showAttributes ); // descend
}
}
}
@@ -2134,13 +2134,13 @@ namespace Antlr3.ST
{
string templateInclude = t.GetChild( 0 ).Text;
Console.Out.WriteLine( "found include " + templateInclude );
-                        putToMultiValuedMap( edges, srcNode, templateInclude );
-                        StringTemplateGroup group = getGroup();
+                        PutToMultiValuedMap( edges, srcNode, templateInclude );
+                        StringTemplateGroup group = GetGroup();
if ( group != null )
{
-                            StringTemplate st = group.getInstanceOf( templateInclude );
+                            StringTemplate st = group.GetInstanceOf( templateInclude );
// descend into the reference template
-                            st.getDependencyGraph( edges, showAttributes );
+                            st.GetDependencyGraph( edges, showAttributes );
}
}
}
@@ -2148,7 +2148,7 @@ namespace Antlr3.ST
}

/** <summary>Manage a hash table like it has multiple unique values.  Map&lt;Object,Set>.</summary> */
-        protected virtual void putToMultiValuedMap( IDictionary map, object key, object value )
+        protected virtual void PutToMultiValuedMap( IDictionary map, object key, object value )
{
HashSet<object> bag = (HashSet<object>)map[key];
if ( bag == null )
@@ -2159,9 +2159,9 @@ namespace Antlr3.ST
bag.Add( value );
}

-        public virtual void printDebugString()
+        public virtual void PrintDebugString()
{
-            Console.Out.WriteLine( "template-" + getName() + ":" );
+            Console.Out.WriteLine( "template-" + GetName() + ":" );
Console.Out.Write( "chunks=" );
Console.Out.WriteLine( _chunks.ToString() );
if ( attributes == null )
@@ -2181,7 +2181,7 @@ namespace Antlr3.ST
if ( value is StringTemplate )
{
Console.Out.Write( name + "=" );
-                    ( (StringTemplate)value ).printDebugString();
+                    ( (StringTemplate)value ).PrintDebugString();
}
else
{
@@ -2194,7 +2194,7 @@ namespace Antlr3.ST
Console.Out.Write( name + "[" + i + "] is " + o.GetType().Name + "=" );
if ( o is StringTemplate )
{
-                                ( (StringTemplate)o ).printDebugString();
+                                ( (StringTemplate)o ).PrintDebugString();
}
else
{
@@ -2222,20 +2222,20 @@ namespace Antlr3.ST
{
StringWriter @out = new StringWriter();
// Write the output to a StringWriter
-            IStringTemplateWriter wr = _group.getStringTemplateWriter( @out );
-            wr.setLineWidth( lineWidth );
+            IStringTemplateWriter wr = _group.GetStringTemplateWriter( @out );
+            wr.SetLineWidth( lineWidth );
try
{
-                write( wr );
+                Write( wr );
}
catch ( IOException /*io*/)
{
-                error( "Got IOException writing to writer " + wr.GetType().Name );
+                Error( "Got IOException writing to writer " + wr.GetType().Name );
}
// reset so next toString() does not wrap; normally this is a new writer
// each time, but just in case they override the group to reuse the
// writer.
-            wr.setLineWidth( StringTemplateWriterConstants.NO_WRAP );
+            wr.SetLineWidth( StringTemplateWriterConstants.NO_WRAP );
return @out.ToString();
}

diff --git a/Antlr3.StringTemplate/StringTemplateErrorListener.cs b/Antlr3.StringTemplate/StringTemplateErrorListener.cs
index 848f013..14a4f34 100644
--- a/Antlr3.StringTemplate/StringTemplateErrorListener.cs
+++ b/Antlr3.StringTemplate/StringTemplateErrorListener.cs
@@ -41,7 +41,7 @@ namespace Antlr3.ST
*/
public interface IStringTemplateErrorListener
{
-        void error( string msg, Exception e );
-        void warning( string msg );
+        void Error( string msg, Exception e );
+        void Warning( string msg );
}
}
diff --git a/Antlr3.StringTemplate/StringTemplateGroup.cs b/Antlr3.StringTemplate/StringTemplateGroup.cs
index 613b1a3..4034869 100644
--- a/Antlr3.StringTemplate/StringTemplateGroup.cs
+++ b/Antlr3.StringTemplate/StringTemplateGroup.cs
@@ -231,16 +231,16 @@ namespace Antlr3.ST

class DefaultErrorListener : IStringTemplateErrorListener
{
-            public virtual void error( string s, Exception e )
+            public virtual void Error( string s, Exception e )
{
Console.Error.WriteLine( s );
if ( e != null )
{
-                    e.printStackTrace( Console.Error );
+                    e.PrintStackTrace( Console.Error );
}
}

-            public virtual void warning( string s )
+            public virtual void Warning( string s )
{
Console.Out.WriteLine( s );
}
@@ -369,9 +369,9 @@ namespace Antlr3.ST
this._listener = errors;
}
SuperGroup = superGroup;
-            parseGroup( r );
+            ParseGroup( r );
_nameToGroupMap[_name] = this;
-            verifyInterfaceImplementations();
+            VerifyInterfaceImplementations();
}


@@ -485,25 +485,25 @@ namespace Antlr3.ST
#endregion

[Obsolete]
-        public Type getTemplateLexerClass()
+        public Type GetTemplateLexerClass()
{
return TemplateLexerClass;
}

[Obsolete]
-        public string getName()
+        public string GetName()
{
return Name;
}

[Obsolete]
-        public void setName( string name )
+        public void SetName( string name )
{
Name = name;
}

[Obsolete]
-        public void setSuperGroup( StringTemplateGroup superGroup )
+        public void SetSuperGroup( StringTemplateGroup superGroup )
{
SuperGroup = superGroup;
}
@@ -514,7 +514,7 @@ namespace Antlr3.ST
*  for this (sub) group.
*  </summary>
*/
-        public virtual void setSuperGroup( string superGroupName )
+        public virtual void SetSuperGroup( string superGroupName )
{
StringTemplateGroup superGroup =
(StringTemplateGroup)_nameToGroupMap.get( superGroupName );
@@ -524,7 +524,7 @@ namespace Antlr3.ST
return;
}
// else load it using this group's template lexer
-            superGroup = loadGroup( superGroupName, this._templateLexerClass, null );
+            superGroup = LoadGroup( superGroupName, this._templateLexerClass, null );
if ( superGroup != null )
{
_nameToGroupMap[superGroupName] = superGroup;
@@ -534,13 +534,13 @@ namespace Antlr3.ST
{
if ( _groupLoader == null )
{
-                    _listener.error( "no group loader registered", null );
+                    _listener.Error( "no group loader registered", null );
}
}
}

/** <summary>Just track the new interface; check later.  Allows dups, but no biggie.</summary> */
-        public virtual void implementInterface( StringTemplateGroupInterface I )
+        public virtual void ImplementInterface( StringTemplateGroupInterface I )
{
if ( _interfaces == null )
{
@@ -554,37 +554,37 @@ namespace Antlr3.ST
*  if not in the nameToInterfaceMap.
*  </summary>
*/
-        public virtual void implementInterface( string interfaceName )
+        public virtual void ImplementInterface( string interfaceName )
{
StringTemplateGroupInterface I = _nameToInterfaceMap.get( interfaceName );
if ( I != null )
{ // we've seen before; just use it
-                implementInterface( I );
+                ImplementInterface( I );
return;
}
-            I = loadInterface( interfaceName ); // else load it
+            I = LoadInterface( interfaceName ); // else load it
if ( I != null )
{
_nameToInterfaceMap[interfaceName] = I;
-                implementInterface( I );
+                ImplementInterface( I );
}
else
{
if ( _groupLoader == null )
{
-                    _listener.error( "no group loader registered", null );
+                    _listener.Error( "no group loader registered", null );
}
}
}

[Obsolete]
-        public StringTemplateGroup getSuperGroup()
+        public StringTemplateGroup GetSuperGroup()
{
return SuperGroup;
}

/** <summary>Walk up group hierarchy and show top down to this group</summary> */
-        public virtual string getGroupHierarchyStackString()
+        public virtual string GetGroupHierarchyStackString()
{
System.Collections.Generic.List<string> groupNames = new System.Collections.Generic.List<string>();
StringTemplateGroup p = this;
@@ -597,19 +597,19 @@ namespace Antlr3.ST
}

[Obsolete]
-        public string getRootDir()
+        public string GetRootDir()
{
return RootDir;
}

[Obsolete]
-        public void setRootDir( string rootDir )
+        public void SetRootDir( string rootDir )
{
RootDir = rootDir;
}

/** <summary>StringTemplate object factory; each group can have its own.</summary> */
-        public virtual StringTemplate createStringTemplate()
+        public virtual StringTemplate CreateStringTemplate()
{
StringTemplate st = new StringTemplate();
return st;
@@ -620,23 +620,23 @@ namespace Antlr3.ST
*  ST encloses it for error messages.
*  </summary>
*/
-        protected virtual StringTemplate getInstanceOf( StringTemplate enclosingInstance,
+        protected virtual StringTemplate GetInstanceOf( StringTemplate enclosingInstance,
string name )
{
//System.out.println("getInstanceOf("+getName()+"::"+name+")");
-            StringTemplate st = lookupTemplate( enclosingInstance, name );
+            StringTemplate st = LookupTemplate( enclosingInstance, name );
if ( st != null )
{
-                StringTemplate instanceST = st.getInstanceOf();
+                StringTemplate instanceST = st.GetInstanceOf();
return instanceST;
}
return null;
}

/** <summary>The primary means of getting an instance of a template from this group.</summary> */
-        public virtual StringTemplate getInstanceOf( string name )
+        public virtual StringTemplate GetInstanceOf( string name )
{
-            return getInstanceOf( null, name );
+            return GetInstanceOf( null, name );
}

/** <summary>
@@ -645,14 +645,14 @@ namespace Antlr3.ST
*  use.
*  </summary>
*/
-        public virtual StringTemplate getInstanceOf( string name, IDictionary<string, object> attributes )
+        public virtual StringTemplate GetInstanceOf( string name, IDictionary<string, object> attributes )
{
-            StringTemplate st = getInstanceOf( name );
+            StringTemplate st = GetInstanceOf( name );
st.attributes = attributes;
return st;
}

-        public virtual StringTemplate getEmbeddedInstanceOf( StringTemplate enclosingInstance,
+        public virtual StringTemplate GetEmbeddedInstanceOf( StringTemplate enclosingInstance,
string name )
{
/*
@@ -668,16 +668,16 @@ namespace Antlr3.ST
// group for the embedded instance not the current evaluation
// group (which is always pulled down to the original group
// from which somebody did group.getInstanceOf("foo");
-                st = enclosingInstance.getNativeGroup().getInstanceOf( enclosingInstance, name );
+                st = enclosingInstance.GetNativeGroup().GetInstanceOf( enclosingInstance, name );
}
else
{
-                st = getInstanceOf( enclosingInstance, name );
+                st = GetInstanceOf( enclosingInstance, name );
}
// make sure all embedded templates have the same group as enclosing
// so that polymorphic refs will start looking at the original group
-            st.setGroup( this );
-            st.setEnclosingInstance( enclosingInstance );
+            st.SetGroup( this );
+            st.SetEnclosingInstance( enclosingInstance );
return st;
}

@@ -694,7 +694,7 @@ namespace Antlr3.ST
*  </remarks>
*/
[MethodImpl( MethodImplOptions.Synchronized )]
-        public virtual StringTemplate lookupTemplate( StringTemplate enclosingInstance, string name )
+        public virtual StringTemplate LookupTemplate( StringTemplate enclosingInstance, string name )
{
//System.out.println("look up "+getName()+"::"+name);
if ( name.StartsWith( "super." ) )
@@ -704,7 +704,7 @@ namespace Antlr3.ST
int dot = name.IndexOf( '.' );
name = name.Substring( dot + 1 );
StringTemplate superScopeST =
-                        _superGroup.lookupTemplate( enclosingInstance, name );
+                        _superGroup.LookupTemplate( enclosingInstance, name );
/*
System.out.println("superScopeST is "+
superScopeST.getGroup().getName()+"::"+name+
@@ -714,7 +714,7 @@ namespace Antlr3.ST
}
throw new ArgumentException( Name + " has no super group; invalid template: " + name );
}
-            checkRefreshInterval();
+            CheckRefreshInterval();
StringTemplate st;
if ( !_templates.TryGetValue( name, out st ) || st == null )
{
@@ -722,17 +722,17 @@ namespace Antlr3.ST
if ( !_templatesDefinedInGroupFile )
{
// only check the disk for individual template
-                    st = loadTemplateFromBeneathRootDirOrCLASSPATH( getFileNameFromTemplateName( name ) );
+                    st = LoadTemplateFromBeneathRootDirOrCLASSPATH( GetFileNameFromTemplateName( name ) );
}
if ( st == null && _superGroup != null )
{
// try to resolve in super group
-                    st = _superGroup.getInstanceOf( name );
+                    st = _superGroup.GetInstanceOf( name );
// make sure that when we inherit a template, that it's
// group is reset; it's nativeGroup will remain where it was
if ( st != null )
{
-                        st.setGroup( this );
+                        st.SetGroup( this );
}
}
if ( st != null )
@@ -750,12 +750,12 @@ namespace Antlr3.ST
if ( enclosingInstance != null )
{
context = "; context is " +
-                                  enclosingInstance.getEnclosingInstanceStackString();
+                                  enclosingInstance.GetEnclosingInstanceStackString();
}
-                    string hier = getGroupHierarchyStackString();
+                    string hier = GetGroupHierarchyStackString();
context += "; group hierarchy is " + hier;
throw new ArgumentException( "Can't find template " +
-                                                       getFileNameFromTemplateName( name ) +
+                                                       GetFileNameFromTemplateName( name ) +
context );
}
}
@@ -767,11 +767,11 @@ namespace Antlr3.ST
return st;
}

-        public virtual StringTemplate lookupTemplate( string name )
+        public virtual StringTemplate LookupTemplate( string name )
{
try
{
-                return lookupTemplate( null, name );
+                return LookupTemplate( null, name );
}
catch ( ArgumentException )
{
@@ -779,7 +779,7 @@ namespace Antlr3.ST
}
}

-        protected virtual void checkRefreshInterval()
+        protected virtual void CheckRefreshInterval()
{
if ( _templatesDefinedInGroupFile )
{
@@ -795,7 +795,7 @@ namespace Antlr3.ST
}
}

-        protected virtual StringTemplate loadTemplate( string name, TextReader r )
+        protected virtual StringTemplate LoadTemplate( string name, TextReader r )
{
string line;
string nl = Environment.NewLine;
@@ -810,10 +810,10 @@ namespace Antlr3.ST
string pattern = buf.ToString().Trim();
if ( pattern.Length == 0 )
{
-                error( "no text in template '" + name + "'" );
+                Error( "no text in template '" + name + "'" );
return null;
}
-            return defineTemplate( name, pattern );
+            return DefineTemplate( name, pattern );
}

/** <summary>
@@ -823,14 +823,14 @@ namespace Antlr3.ST
*  from there.
*  </summary>
*/
-        protected virtual StringTemplate loadTemplateFromBeneathRootDirOrCLASSPATH( string fileName )
+        protected virtual StringTemplate LoadTemplateFromBeneathRootDirOrCLASSPATH( string fileName )
{
StringTemplate template = null;
-            string name = getTemplateNameFromFileName( fileName );
+            string name = GetTemplateNameFromFileName( fileName );
// if no rootDir, try to load as a resource in CLASSPATH
if ( RootDir == null )
{
-                string resourceName = getFileNameFromTemplateName( name.Replace( '/', '.' ) );
+                string resourceName = GetFileNameFromTemplateName( name.Replace( '/', '.' ) );
System.Reflection.Assembly assembly = _rootAssembly ?? System.Reflection.Assembly.GetCallingAssembly();
System.IO.Stream @is = assembly.GetManifestResourceStream( resourceName );
if ( @is == null )
@@ -853,12 +853,12 @@ namespace Antlr3.ST
TextReader br = null;
try
{
-                    br = getInputStreamReader( new System.IO.BufferedStream( @is ) );
-                    template = loadTemplate( name, br );
+                    br = GetInputStreamReader( new System.IO.BufferedStream( @is ) );
+                    template = LoadTemplate( name, br );
}
catch ( IOException ioe )
{
-                    error( "Problem reading template file: " + fileName, ioe );
+                    Error( "Problem reading template file: " + fileName, ioe );
}
finally
{
@@ -870,14 +870,14 @@ namespace Antlr3.ST
}
catch ( IOException ioe2 )
{
-                            error( "Cannot close template file: " + fileName, ioe2 );
+                            Error( "Cannot close template file: " + fileName, ioe2 );
}
}
}
return template;
}
// load via rootDir
-            template = loadTemplate( name, RootDir + "/" + fileName );
+            template = LoadTemplate( name, RootDir + "/" + fileName );
return template;
}

@@ -886,7 +886,7 @@ namespace Antlr3.ST
*  purpose method)
*  </summary>
*/
-        public virtual string getFileNameFromTemplateName( string templateName )
+        public virtual string GetFileNameFromTemplateName( string templateName )
{
return templateName + ".st";
}
@@ -897,7 +897,7 @@ namespace Antlr3.ST
*  purpose method)
*  </summary>
*/
-        public virtual string getTemplateNameFromFileName( string fileName )
+        public virtual string GetTemplateNameFromFileName( string fileName )
{
string name = fileName;
int suffix = name.LastIndexOf( ".st" );
@@ -908,16 +908,16 @@ namespace Antlr3.ST
return name;
}

-        protected virtual StringTemplate loadTemplate( string name, string fileName )
+        protected virtual StringTemplate LoadTemplate( string name, string fileName )
{
TextReader br = null;
StringTemplate template = null;
try
{
Stream fin = System.IO.File.OpenRead( fileName );
-                StreamReader isr = getInputStreamReader( new System.IO.BufferedStream( fin ) );
+                StreamReader isr = GetInputStreamReader( new System.IO.BufferedStream( fin ) );
br = isr;
-                template = loadTemplate( name, br );
+                template = LoadTemplate( name, br );
br.Close();
br = null;
}
@@ -931,14 +931,14 @@ namespace Antlr3.ST
}
catch ( IOException /*ioe2*/)
{
-                        error( "Cannot close template file: " + fileName );
+                        Error( "Cannot close template file: " + fileName );
}
}
}
return template;
}

-        protected virtual StreamReader getInputStreamReader( Stream @in )
+        protected virtual StreamReader GetInputStreamReader( Stream @in )
{
StreamReader isr = null;
try
@@ -947,19 +947,19 @@ namespace Antlr3.ST
}
catch ( ArgumentException /*uee*/)
{
-                error( "Invalid file character encoding: " + _fileCharEncoding );
+                Error( "Invalid file character encoding: " + _fileCharEncoding );
}
return isr;
}

[Obsolete]
-        public Encoding getFileCharEncoding()
+        public Encoding GetFileCharEncoding()
{
return FileCharEncoding;
}

[Obsolete]
-        public void setFileCharEncoding( Encoding fileCharEncoding )
+        public void SetFileCharEncoding( Encoding fileCharEncoding )
{
FileCharEncoding = fileCharEncoding;
}
@@ -970,49 +970,49 @@ namespace Antlr3.ST
*  </summary>
*/
[MethodImpl( MethodImplOptions.Synchronized )]
-        public virtual StringTemplate defineTemplate( string name, string template )
+        public virtual StringTemplate DefineTemplate( string name, string template )
{
//System.out.println("defineTemplate "+getName()+"::"+name);
if ( name != null && name.IndexOf( '.' ) >= 0 )
{
throw new ArgumentException( "cannot have '.' in template names" );
}
-            StringTemplate st = createStringTemplate();
-            st.setName( name );
-            st.setGroup( this );
-            st.setNativeGroup( this );
-            st.setTemplate( template );
-            st.setErrorListener( _listener );
+            StringTemplate st = CreateStringTemplate();
+            st.SetName( name );
+            st.SetGroup( this );
+            st.SetNativeGroup( this );
+            st.SetTemplate( template );
+            st.SetErrorListener( _listener );
_templates[name] = st;
return st;
}

/** <summary>Track all references to regions &lt;@foo>...&lt;@end> or &lt;@foo()>.</summary> */
-        public virtual StringTemplate defineRegionTemplate( string enclosingTemplateName,
+        public virtual StringTemplate DefineRegionTemplate( string enclosingTemplateName,
string regionName,
string template,
int type )
{
string mangledName =
-                getMangledRegionName( enclosingTemplateName, regionName );
-            StringTemplate regionST = defineTemplate( mangledName, template );
-            regionST.setIsRegion( true );
-            regionST.setRegionDefType( type );
+                GetMangledRegionName( enclosingTemplateName, regionName );
+            StringTemplate regionST = DefineTemplate( mangledName, template );
+            regionST.SetIsRegion( true );
+            regionST.SetRegionDefType( type );
return regionST;
}

/** <summary>Track all references to regions &lt;@foo>...&lt;@end> or &lt;@foo()>.</summary>  */
-        public virtual StringTemplate defineRegionTemplate( StringTemplate enclosingTemplate,
+        public virtual StringTemplate DefineRegionTemplate( StringTemplate enclosingTemplate,
string regionName,
string template,
int type )
{
StringTemplate regionST =
-                defineRegionTemplate( enclosingTemplate.getOutermostName(),
+                DefineRegionTemplate( enclosingTemplate.GetOutermostName(),
regionName,
template,
type );
-            enclosingTemplate.getOutermostEnclosingInstance().addRegionName( regionName );
+            enclosingTemplate.GetOutermostEnclosingInstance().AddRegionName( regionName );
return regionST;
}

@@ -1027,10 +1027,10 @@ namespace Antlr3.ST
*  to override.
*  </remarks>
*/
-        public virtual StringTemplate defineImplicitRegionTemplate( StringTemplate enclosingTemplate,
+        public virtual StringTemplate DefineImplicitRegionTemplate( StringTemplate enclosingTemplate,
string name )
{
-            return defineRegionTemplate( enclosingTemplate,
+            return DefineRegionTemplate( enclosingTemplate,
name,
"",
StringTemplate.REGION_IMPLICIT );
@@ -1038,14 +1038,14 @@ namespace Antlr3.ST
}

/** <summary>The "foo" of t() ::= "&lt;@foo()>" is mangled to "region#t#foo"</summary> */
-        public virtual string getMangledRegionName( string enclosingTemplateName,
+        public virtual string GetMangledRegionName( string enclosingTemplateName,
string name )
{
return "region__" + enclosingTemplateName + "__" + name;
}

/** <summary>Return "t" from "region__t__foo"</summary> */
-        public virtual string getUnMangledTemplateName( string mangledName )
+        public virtual string GetUnMangledTemplateName( string mangledName )
{
return mangledName.substring( "region__".Length,
mangledName.LastIndexOf( "__" ) );
@@ -1053,12 +1053,12 @@ namespace Antlr3.ST

/** <summary>Make name and alias for target.  Replace any previous def of name</summary> */
[MethodImpl( MethodImplOptions.Synchronized )]
-        public virtual StringTemplate defineTemplateAlias( string name, string target )
+        public virtual StringTemplate DefineTemplateAlias( string name, string target )
{
-            StringTemplate targetST = getTemplateDefinition( target );
+            StringTemplate targetST = GetTemplateDefinition( target );
if ( targetST == null )
{
-                error( "cannot alias " + name + " to undefined template: " + target );
+                Error( "cannot alias " + name + " to undefined template: " + target );
return null;
}
_templates[name] = targetST;
@@ -1066,15 +1066,15 @@ namespace Antlr3.ST
}

[MethodImpl( MethodImplOptions.Synchronized )]
-        public virtual bool isDefinedInThisGroup( string name )
+        public virtual bool IsDefinedInThisGroup( string name )
{
StringTemplate st;
if ( _templates.TryGetValue( name, out st ) && st != null )
{
-                if ( st.getIsRegion() )
+                if ( st.GetIsRegion() )
{
// don't allow redef of @t.r() ::= "..." or <@r>...<@end>
-                    if ( st.getRegionDefType() == StringTemplate.REGION_IMPLICIT )
+                    if ( st.GetRegionDefType() == StringTemplate.REGION_IMPLICIT )
{
return false;
}
@@ -1086,7 +1086,7 @@ namespace Antlr3.ST

/** <summary>Get the ST for 'name' in this group only</summary> */
[MethodImpl( MethodImplOptions.Synchronized )]
-        public virtual StringTemplate getTemplateDefinition( string name )
+        public virtual StringTemplate GetTemplateDefinition( string name )
{
return _templates[name];
}
@@ -1096,11 +1096,11 @@ namespace Antlr3.ST
*  or above it in the group hierarchy?
*  </summary>
*/
-        public virtual bool isDefined( string name )
+        public virtual bool IsDefined( string name )
{
try
{
-                return lookupTemplate( name ) != null;
+                return LookupTemplate( name ) != null;
}
catch ( ArgumentException /*iae*/)
{
@@ -1108,7 +1108,7 @@ namespace Antlr3.ST
}
}

-        protected virtual void parseGroup( TextReader r )
+        protected virtual void ParseGroup( TextReader r )
{
try
{
@@ -1124,53 +1124,53 @@ namespace Antlr3.ST
{
name = Name;
}
-                error( "problem parsing group " + name + ": " + e, e );
+                Error( "problem parsing group " + name + ": " + e, e );
}
}

/** <summary>Verify that this group satisfies its interfaces</summary> */
-        protected virtual void verifyInterfaceImplementations()
+        protected virtual void VerifyInterfaceImplementations()
{
for ( int i = 0; _interfaces != null && i < _interfaces.Count; i++ )
{
StringTemplateGroupInterface I = _interfaces[i];
-                IList missing = I.getMissingTemplates( this );
-                IList mismatched = I.getMismatchedTemplates( this );
+                IList missing = I.GetMissingTemplates( this );
+                IList mismatched = I.GetMismatchedTemplates( this );
if ( missing != null )
{
string missingText = "[" + string.Join( ",", missing.Cast<string>().ToArray() ) + "]";
-                    error( "group " + Name + " does not satisfy interface " +
-                          I.getName() + ": missing templates " + missingText );
+                    Error( "group " + Name + " does not satisfy interface " +
+                          I.GetName() + ": missing templates " + missingText );
}
if ( mismatched != null )
{
string mismatchedText = "[" + string.Join( ",", mismatched.Cast<string>().ToArray() ) + "]";
-                    error( "group " + Name + " does not satisfy interface " +
-                          I.getName() + ": mismatched arguments on these templates " + mismatchedText );
+                    Error( "group " + Name + " does not satisfy interface " +
+                          I.GetName() + ": mismatched arguments on these templates " + mismatchedText );
}
}
}

[Obsolete]
-        public TimeSpan getRefreshInterval()
+        public TimeSpan GetRefreshInterval()
{
return RefreshInterval;
}

[Obsolete]
-        public void setRefreshInterval( TimeSpan refreshInterval )
+        public void SetRefreshInterval( TimeSpan refreshInterval )
{
RefreshInterval = refreshInterval;
}

[Obsolete]
-        public void setErrorListener( IStringTemplateErrorListener listener )
+        public void SetErrorListener( IStringTemplateErrorListener listener )
{
ErrorListener = listener;
}

[Obsolete]
-        public IStringTemplateErrorListener getErrorListener()
+        public IStringTemplateErrorListener GetErrorListener()
{
return ErrorListener;
}
@@ -1180,7 +1180,7 @@ namespace Antlr3.ST
*  filtering output
*  </summary>
*/
-        public virtual void setStringTemplateWriter( Type c )
+        public virtual void SetStringTemplateWriter( Type c )
{
_userSpecifiedWriter = c;
}
@@ -1190,7 +1190,7 @@ namespace Antlr3.ST
*  If a writer is specified, use it instead of the default.
*  </summary>
*/
-        public virtual IStringTemplateWriter getStringTemplateWriter( TextWriter w )
+        public virtual IStringTemplateWriter GetStringTemplateWriter( TextWriter w )
{
IStringTemplateWriter stw = null;
if ( _userSpecifiedWriter != null )
@@ -1203,7 +1203,7 @@ namespace Antlr3.ST
}
catch ( Exception e )
{
-                    error( "problems getting StringTemplateWriter", e );
+                    Error( "problems getting StringTemplateWriter", e );
}
}
if ( stw == null )
@@ -1219,7 +1219,7 @@ namespace Antlr3.ST
*  override it per template).
*  </summary>
*/
-        public virtual void setAttributeRenderers( Dictionary<Type, IAttributeRenderer> renderers )
+        public virtual void SetAttributeRenderers( Dictionary<Type, IAttributeRenderer> renderers )
{
this._attributeRenderers = renderers;
}
@@ -1229,7 +1229,7 @@ namespace Antlr3.ST
*  templates in this group.
*  </summary>
*/
-        public virtual void registerRenderer( Type attributeClassType, IAttributeRenderer renderer )
+        public virtual void RegisterRenderer( Type attributeClassType, IAttributeRenderer renderer )
{
if ( _attributeRenderers == null )
{
@@ -1243,7 +1243,7 @@ namespace Antlr3.ST
*  this group?  If not found, as superGroup if it has one.
*  </summary>
*/
-        public virtual IAttributeRenderer getAttributeRenderer( Type attributeClassType )
+        public virtual IAttributeRenderer GetAttributeRenderer( Type attributeClassType )
{
if ( _attributeRenderers == null )
{
@@ -1252,7 +1252,7 @@ namespace Antlr3.ST
return null; // no renderers and no parent?  Stop.
}
// no renderers; consult super group
-                return _superGroup.getAttributeRenderer( attributeClassType );
+                return _superGroup.GetAttributeRenderer( attributeClassType );
}

IAttributeRenderer renderer;
@@ -1261,25 +1261,25 @@ namespace Antlr3.ST
if ( _superGroup != null )
{
// no renderer registered for this class, check super group
-                    renderer = _superGroup.getAttributeRenderer( attributeClassType );
+                    renderer = _superGroup.GetAttributeRenderer( attributeClassType );
}
}
return renderer;
}

#if false
-        public virtual void cacheClassProperty(Type c, String propertyName, Member member) {
+        public virtual void CacheClassProperty(Type c, String propertyName, Member member) {
Object key = new ClassPropCacheKey(c,propertyName);
classPropertyCache.put(key,member);
}

-        public virtual Member getCachedClassProperty(Type c, String propertyName) {
+        public virtual Member GetCachedClassProperty(Type c, String propertyName) {
Object key = new ClassPropCacheKey(c,propertyName);
return (Member)classPropertyCache.get(key);
}
#endif

-        public virtual IDictionary getMap( string name )
+        public virtual IDictionary GetMap( string name )
{
if ( _maps == null )
{
@@ -1287,12 +1287,12 @@ namespace Antlr3.ST
{
return null;
}
-                return _superGroup.getMap( name );
+                return _superGroup.GetMap( name );
}
IDictionary m;
if ( ( !_maps.TryGetValue( name, out m ) || m == null ) && _superGroup != null )
{
-                m = _superGroup.getMap( name );
+                m = _superGroup.GetMap( name );
}
return m;
}
@@ -1302,75 +1302,75 @@ namespace Antlr3.ST
*  these while you reference them.
*  </summary>
*/
-        public virtual void defineMap( string name, IDictionary mapping )
+        public virtual void DefineMap( string name, IDictionary mapping )
{
_maps[name] = mapping;
}

-        public static void registerDefaultLexer( Type lexerClass )
+        public static void RegisterDefaultLexer( Type lexerClass )
{
_defaultTemplateLexerClass = lexerClass;
}

-        public static void registerGroupLoader( IStringTemplateGroupLoader loader )
+        public static void RegisterGroupLoader( IStringTemplateGroupLoader loader )
{
_groupLoader = loader;
}

-        public static StringTemplateGroup loadGroup( string name )
+        public static StringTemplateGroup LoadGroup( string name )
{
-            return loadGroup( name, null, null );
+            return LoadGroup( name, null, null );
}

-        public static StringTemplateGroup loadGroup( string name,
+        public static StringTemplateGroup LoadGroup( string name,
StringTemplateGroup superGroup )
{
-            return loadGroup( name, null, superGroup );
+            return LoadGroup( name, null, superGroup );
}

-        public static StringTemplateGroup loadGroup( string name,
+        public static StringTemplateGroup LoadGroup( string name,
Type lexer,
StringTemplateGroup superGroup )
{
if ( _groupLoader != null )
{
-                return _groupLoader.loadGroup( name, lexer, superGroup );
+                return _groupLoader.LoadGroup( name, lexer, superGroup );
}
return null;
}

-        public static StringTemplateGroupInterface loadInterface( string name )
+        public static StringTemplateGroupInterface LoadInterface( string name )
{
if ( _groupLoader != null )
{
-                return _groupLoader.loadInterface( name );
+                return _groupLoader.LoadInterface( name );
}
return null;
}

-        public virtual void error( string msg )
+        public virtual void Error( string msg )
{
-            error( msg, null );
+            Error( msg, null );
}

-        public virtual void error( string msg, Exception e )
+        public virtual void Error( string msg, Exception e )
{
if ( _listener != null )
{
-                _listener.error( msg, e );
+                _listener.Error( msg, e );
}
else
{
Console.Error.WriteLine( "StringTemplate: " + msg );
if ( e != null )
{
-                    e.printStackTrace();
+                    e.PrintStackTrace();
}
}
}

[MethodImpl( MethodImplOptions.Synchronized )]
-        public virtual ICollection<string> getTemplateNames()
+        public virtual ICollection<string> GetTemplateNames()
{
return _templates.Keys;
}
@@ -1380,12 +1380,12 @@ namespace Antlr3.ST
*  strings for debugging around output for templates from this group.
*  </summary>
*/
-        public virtual void emitDebugStartStopStrings( bool emit )
+        public virtual void EmitDebugStartStopStrings( bool emit )
{
this.debugTemplateOutput = emit;
}

-        public virtual void doNotEmitDebugStringsForTemplate( string templateName )
+        public virtual void DoNotEmitDebugStringsForTemplate( string templateName )
{
if ( _noDebugStartStopStrings == null )
{
@@ -1394,47 +1394,47 @@ namespace Antlr3.ST
_noDebugStartStopStrings.Add( templateName );
}

-        public virtual void emitTemplateStartDebugString( StringTemplate st,
+        public virtual void EmitTemplateStartDebugString( StringTemplate st,
IStringTemplateWriter @out )
{
if ( _noDebugStartStopStrings == null ||
-                 !_noDebugStartStopStrings.Contains( st.getName() ) )
+                 !_noDebugStartStopStrings.Contains( st.GetName() ) )
{
string groupPrefix = "";
-                if ( !st.getName().StartsWith( "if" ) && !st.getName().StartsWith( "else" ) )
+                if ( !st.GetName().StartsWith( "if" ) && !st.GetName().StartsWith( "else" ) )
{
-                    if ( st.getNativeGroup() != null )
+                    if ( st.GetNativeGroup() != null )
{
-                        groupPrefix = st.getNativeGroup().Name + ".";
+                        groupPrefix = st.GetNativeGroup().Name + ".";
}
else
{
-                        groupPrefix = st.getGroup().Name + ".";
+                        groupPrefix = st.GetGroup().Name + ".";
}
}
-                @out.write( "<" + groupPrefix + st.getName() + ">" );
+                @out.Write( "<" + groupPrefix + st.GetName() + ">" );
}
}

-        public virtual void emitTemplateStopDebugString( StringTemplate st,
+        public virtual void EmitTemplateStopDebugString( StringTemplate st,
IStringTemplateWriter @out )
{
if ( _noDebugStartStopStrings == null ||
-                 !_noDebugStartStopStrings.Contains( st.getName() ) )
+                 !_noDebugStartStopStrings.Contains( st.GetName() ) )
{
string groupPrefix = "";
-                if ( !st.getName().StartsWith( "if" ) && !st.getName().StartsWith( "else" ) )
+                if ( !st.GetName().StartsWith( "if" ) && !st.GetName().StartsWith( "else" ) )
{
-                    if ( st.getNativeGroup() != null )
+                    if ( st.GetNativeGroup() != null )
{
-                        groupPrefix = st.getNativeGroup().Name + ".";
+                        groupPrefix = st.GetNativeGroup().Name + ".";
}
else
{
-                        groupPrefix = st.getGroup().Name + ".";
+                        groupPrefix = st.GetGroup().Name + ".";
}
}
-                @out.write( "</" + groupPrefix + st.getName() + ">" );
+                @out.Write( "</" + groupPrefix + st.GetName() + ">" );
}
}

@@ -1456,13 +1456,13 @@ namespace Antlr3.ST
StringTemplate st = template.Value;
if ( st != NOT_FOUND_ST )
{
-                    formalArgs = formalArgs.getInstanceOf();
-                    formalArgs.setAttribute( "args", st.getFormalArguments() );
+                    formalArgs = formalArgs.GetInstanceOf();
+                    formalArgs.SetAttribute( "args", st.GetFormalArguments() );
buf.Append( tname + "(" + formalArgs + ")" );
if ( showTemplatePatterns )
{
buf.Append( " ::= <<" );
-                        buf.Append( st.getTemplate() );
+                        buf.Append( st.GetTemplate() );
buf.Append( ">>" + _newline );
}
else
diff --git a/Antlr3.StringTemplate/StringTemplateGroupInterface.cs b/Antlr3.StringTemplate/StringTemplateGroupInterface.cs
index cd9ea02..8c98334 100644
--- a/Antlr3.StringTemplate/StringTemplateGroupInterface.cs
+++ b/Antlr3.StringTemplate/StringTemplateGroupInterface.cs
@@ -78,16 +78,16 @@ namespace Antlr3.ST
{
#region StringTemplateErrorListener Members

-            public void error( string s, Exception e )
+            public void Error( string s, Exception e )
{
Console.Error.WriteLine( s );
if ( e != null )
{
-                    e.printStackTrace( Console.Error );
+                    e.PrintStackTrace( Console.Error );
}
}

-            public void warning( string s )
+            public void Warning( string s )
{
Console.Out.WriteLine( s );
}
@@ -127,21 +127,21 @@ namespace Antlr3.ST
StringTemplateGroupInterface superInterface )
{
this._listener = errors;
-            setSuperInterface( superInterface );
-            parseInterface( r );
+            SetSuperInterface( superInterface );
+            ParseInterface( r );
}

-        public virtual StringTemplateGroupInterface getSuperInterface()
+        public virtual StringTemplateGroupInterface GetSuperInterface()
{
return _superInterface;
}

-        public virtual void setSuperInterface( StringTemplateGroupInterface superInterface )
+        public virtual void SetSuperInterface( StringTemplateGroupInterface superInterface )
{
this._superInterface = superInterface;
}

-        protected virtual void parseInterface( TextReader r )
+        protected virtual void ParseInterface( TextReader r )
{
try
{
@@ -153,15 +153,15 @@ namespace Antlr3.ST
catch ( Exception e )
{
string name = "<unknown>";
-                if ( getName() != null )
+                if ( GetName() != null )
{
-                    name = getName();
+                    name = GetName();
}
-                error( "problem parsing group " + name + ": " + e, e );
+                Error( "problem parsing group " + name + ": " + e, e );
}
}

-        public virtual void defineTemplate( string name, IDictionary<string, FormalArgument> formalArgs, bool optional )
+        public virtual void DefineTemplate( string name, IDictionary<string, FormalArgument> formalArgs, bool optional )
{
TemplateDefinition d = new TemplateDefinition( name, formalArgs, optional );
_templates[d.name] = d;
@@ -172,11 +172,11 @@ namespace Antlr3.ST
*  in this interface.  Return null if all is well.
*  </summary>
*/
-        public virtual IList getMissingTemplates( StringTemplateGroup group )
+        public virtual IList GetMissingTemplates( StringTemplateGroup group )
{
IList missing =
_templates.Values
-                .Where( template => !template.optional && !group.isDefined( template.name ) )
+                .Where( template => !template.optional && !group.IsDefined( template.name ) )
.Select( template => template.name )
.ToArray();

@@ -188,15 +188,15 @@ namespace Antlr3.ST
*  that have wrong formal argument lists.  Return null if all is well.
*  </summary>
*/
-        public virtual IList getMismatchedTemplates( StringTemplateGroup group )
+        public virtual IList GetMismatchedTemplates( StringTemplateGroup group )
{
IList mismatched = new List<object>();
foreach ( TemplateDefinition d in _templates.Values )
{
-                if ( group.isDefined( d.name ) )
+                if ( group.IsDefined( d.name ) )
{
-                    StringTemplate defST = group.getTemplateDefinition( d.name );
-                    var formalArgs = defST.getFormalArguments();
+                    StringTemplate defST = group.GetTemplateDefinition( d.name );
+                    var formalArgs = defST.GetFormalArguments();
bool ack = false;
if ( ( d.formalArgs != null && formalArgs == null ) ||
( d.formalArgs == null && formalArgs != null ) ||
@@ -219,7 +219,7 @@ namespace Antlr3.ST
if ( ack )
{
//System.out.println(d.formalArgs+"!="+formalArgs);
-                        mismatched.Add( getTemplateSignature( d ) );
+                        mismatched.Add( GetTemplateSignature( d ) );
}
}
}
@@ -230,33 +230,33 @@ namespace Antlr3.ST
return mismatched;
}

-        public virtual string getName()
+        public virtual string GetName()
{
return _name;
}

-        public virtual void setName( string name )
+        public virtual void SetName( string name )
{
this._name = name;
}

-        public virtual void error( string msg )
+        public virtual void Error( string msg )
{
-            error( msg, null );
+            Error( msg, null );
}

-        public virtual void error( string msg, Exception e )
+        public virtual void Error( string msg, Exception e )
{
if ( _listener != null )
{
-                _listener.error( msg, e );
+                _listener.Error( msg, e );
}
else
{
Console.Error.WriteLine( "StringTemplate: " + msg );
if ( e != null )
{
-                    e.printStackTrace();
+                    e.PrintStackTrace();
}
}
}
@@ -267,17 +267,17 @@ namespace Antlr3.ST
{
StringBuilder buf = new StringBuilder();
buf.Append( "interface " );
-            buf.Append( getName() );
+            buf.Append( GetName() );
buf.Append( ";" + newline );
foreach ( TemplateDefinition d in _templates.Values )
{
-                buf.Append( getTemplateSignature( d ) );
+                buf.Append( GetTemplateSignature( d ) );
buf.Append( ";" + newline );
}
return buf.ToString();
}

-        protected virtual string getTemplateSignature( TemplateDefinition d )
+        protected virtual string GetTemplateSignature( TemplateDefinition d )
{
StringBuilder buf = new StringBuilder();
if ( d.optional )
diff --git a/Antlr3.StringTemplate/StringTemplateGroupLoader.cs b/Antlr3.StringTemplate/StringTemplateGroupLoader.cs
index 1a94454..54e7d4c 100644
--- a/Antlr3.StringTemplate/StringTemplateGroupLoader.cs
+++ b/Antlr3.StringTemplate/StringTemplateGroupLoader.cs
@@ -47,7 +47,7 @@ namespace Antlr3.ST
*  if no group is found.
*  </summary>
*/
-        StringTemplateGroup loadGroup( string groupName );
+        StringTemplateGroup LoadGroup( string groupName );

/** <summary>
*  Load a group with a specified superGroup.  Groups with
@@ -55,7 +55,7 @@ namespace Antlr3.ST
*  during parsing.
*  </summary>
*/
-        StringTemplateGroup loadGroup( string groupName,
+        StringTemplateGroup LoadGroup( string groupName,
StringTemplateGroup superGroup );


@@ -64,7 +64,7 @@ namespace Antlr3.ST
*  it assumes angle brackets &lt;...>.
*  </summary>
*/
-        StringTemplateGroup loadGroup( string groupName,
+        StringTemplateGroup LoadGroup( string groupName,
Type templateLexer,
StringTemplateGroup superGroup );

@@ -73,6 +73,6 @@ namespace Antlr3.ST
*  if no interface is found.
*  </summary>
*/
-        StringTemplateGroupInterface loadInterface( string interfaceName );
+        StringTemplateGroupInterface LoadInterface( string interfaceName );
}
}
diff --git a/Antlr3.StringTemplate/StringTemplateWriter.cs b/Antlr3.StringTemplate/StringTemplateWriter.cs
index 73f9bb6..1f8f1f5 100644
--- a/Antlr3.StringTemplate/StringTemplateWriter.cs
+++ b/Antlr3.StringTemplate/StringTemplateWriter.cs
@@ -48,15 +48,15 @@ namespace Antlr3.ST
*/
public interface IStringTemplateWriter
{
-        void pushIndentation( string indent );
+        void PushIndentation( string indent );

-        string popIndentation();
+        string PopIndentation();

-        void pushAnchorPoint();
+        void PushAnchorPoint();

-        void popAnchorPoint();
+        void PopAnchorPoint();

-        void setLineWidth( int lineWidth );
+        void SetLineWidth( int lineWidth );

/** <summary>
*  Write the string and return how many actual chars were written.
@@ -64,14 +64,14 @@ namespace Antlr3.ST
*  can be emitted.  No wrapping is done.
*  </summary>
*/
-        int write( string str );
+        int Write( string str );

/** <summary>
*  Same as write, but wrap lines using the indicated string as the
*  wrap character (such as "\n").
*  </summary>
*/
-        int write( string str, string wrap );
+        int Write( string str, string wrap );

/** <summary>
*  Because we might need to wrap at a non-atomic string boundary
@@ -80,13 +80,13 @@ namespace Antlr3.ST
*  writing just like for the separator.
*  </summary>
*/
-        int writeWrapSeparator( string wrap );
+        int WriteWrapSeparator( string wrap );

/** <summary>
*  Write a separator.  Same as write() except that a \n cannot
*  be inserted before emitting a separator.
*  </summary>
*/
-        int writeSeparator( string str );
+        int WriteSeparator( string str );
}
}
diff --git a/Antlr3.Targets/Antlr3.Targets.C/CTarget.cs b/Antlr3.Targets/Antlr3.Targets.C/CTarget.cs
index 4a98849..466b650 100644
--- a/Antlr3.Targets/Antlr3.Targets.C/CTarget.cs
+++ b/Antlr3.Targets/Antlr3.Targets.C/CTarget.cs
@@ -53,7 +53,7 @@ namespace Antlr3.Targets
// Before we write this, and cause it to generate its string,
// we need to add all the string literals that we are going to match
//
-            outputFileST.setAttribute( "literals", strings );
+            outputFileST.SetAttribute( "literals", strings );
string fileName = generator.getRecognizerFileName( grammar.name, grammar.type );
generator.write( outputFileST, fileName );
}
diff --git a/Antlr3.Test/BaseTest.cs b/Antlr3.Test/BaseTest.cs
index d774c1c..67a083b 100644
--- a/Antlr3.Test/BaseTest.cs
+++ b/Antlr3.Test/BaseTest.cs
@@ -105,7 +105,7 @@ namespace AntlrUnitTests
{
}

-            StringTemplate.resetTemplateCounter();
+            StringTemplate.ResetTemplateCounter();
StringTemplate.defaultGroup = new StringTemplateGroup( "defaultGroup", "." );

// verify token constants in StringTemplate
@@ -290,7 +290,7 @@ namespace AntlrUnitTests
catch ( Exception e )
{
Console.Error.WriteLine( "can't exec compilation" );
-                e.printStackTrace( Console.Error );
+                e.PrintStackTrace( Console.Error );
return false;
}
}
@@ -346,7 +346,7 @@ namespace AntlrUnitTests
{
allIsWell = false;
Console.Error.WriteLine( "problems building grammar: " + e );
-                e.printStackTrace( Console.Error );
+                e.PrintStackTrace( Console.Error );
}
return allIsWell;
}
@@ -602,7 +602,7 @@ namespace AntlrUnitTests
catch ( Exception e )
{
Console.Error.WriteLine( "can't exec recognizer" );
-                e.printStackTrace( Console.Error );
+                e.PrintStackTrace( Console.Error );
}
return null;
}
@@ -736,7 +736,7 @@ namespace AntlrUnitTests
catch ( IOException ioe )
{
Console.Error.WriteLine( "can't write file" );
-                ioe.printStackTrace( Console.Error );
+                ioe.PrintStackTrace( Console.Error );
}
}

@@ -781,10 +781,10 @@ namespace AntlrUnitTests
new StringTemplate(
"        $parserName$ parser = new $parserName$(tokens);\n" );
}
-            outputFileST.setAttribute( "createParser", createParserST );
-            outputFileST.setAttribute( "parserName", parserName );
-            outputFileST.setAttribute( "lexerName", lexerName );
-            outputFileST.setAttribute( "parserStartRuleName", parserStartRuleName );
+            outputFileST.SetAttribute( "createParser", createParserST );
+            outputFileST.SetAttribute( "parserName", parserName );
+            outputFileST.SetAttribute( "lexerName", lexerName );
+            outputFileST.SetAttribute( "parserStartRuleName", parserStartRuleName );
writeFile( tmpdir, "Test.java", outputFileST.ToString() );
}

@@ -807,7 +807,7 @@ namespace AntlrUnitTests
"    }\n" +
"}"
);
-            outputFileST.setAttribute( "lexerName", lexerName );
+            outputFileST.SetAttribute( "lexerName", lexerName );
writeFile( tmpdir, "Test.java", outputFileST.ToString() );
}

@@ -858,12 +858,12 @@ namespace AntlrUnitTests
new StringTemplate(
"        $parserName$ parser = new $parserName$(tokens);\n" );
}
-            outputFileST.setAttribute( "createParser", createParserST );
-            outputFileST.setAttribute( "parserName", parserName );
-            outputFileST.setAttribute( "treeParserName", treeParserName );
-            outputFileST.setAttribute( "lexerName", lexerName );
-            outputFileST.setAttribute( "parserStartRuleName", parserStartRuleName );
-            outputFileST.setAttribute( "treeParserStartRuleName", treeParserStartRuleName );
+            outputFileST.SetAttribute( "createParser", createParserST );
+            outputFileST.SetAttribute( "parserName", parserName );
+            outputFileST.SetAttribute( "treeParserName", treeParserName );
+            outputFileST.SetAttribute( "lexerName", lexerName );
+            outputFileST.SetAttribute( "parserStartRuleName", parserStartRuleName );
+            outputFileST.SetAttribute( "treeParserStartRuleName", treeParserStartRuleName );
writeFile( tmpdir, "Test.java", outputFileST.ToString() );
}

@@ -911,12 +911,12 @@ namespace AntlrUnitTests
new StringTemplate(
"        $parserName$ parser = new $parserName$(tokens);\n" );
}
-            outputFileST.setAttribute( "createParser", createParserST );
-            outputFileST.setAttribute( "parserName", parserName );
-            outputFileST.setAttribute( "treeParserName", treeParserName );
-            outputFileST.setAttribute( "lexerName", lexerName );
-            outputFileST.setAttribute( "parserStartRuleName", parserStartRuleName );
-            outputFileST.setAttribute( "treeParserStartRuleName", treeParserStartRuleName );
+            outputFileST.SetAttribute( "createParser", createParserST );
+            outputFileST.SetAttribute( "parserName", parserName );
+            outputFileST.SetAttribute( "treeParserName", treeParserName );
+            outputFileST.SetAttribute( "lexerName", lexerName );
+            outputFileST.SetAttribute( "parserStartRuleName", parserStartRuleName );
+            outputFileST.SetAttribute( "treeParserStartRuleName", treeParserStartRuleName );
writeFile( tmpdir, "Test.java", outputFileST.ToString() );
}

@@ -967,10 +967,10 @@ namespace AntlrUnitTests
new StringTemplate(
"        $parserName$ parser = new $parserName$(tokens);\n" );
}
-            outputFileST.setAttribute( "createParser", createParserST );
-            outputFileST.setAttribute( "parserName", parserName );
-            outputFileST.setAttribute( "lexerName", lexerName );
-            outputFileST.setAttribute( "parserStartRuleName", parserStartRuleName );
+            outputFileST.SetAttribute( "createParser", createParserST );
+            outputFileST.SetAttribute( "parserName", parserName );
+            outputFileST.SetAttribute( "lexerName", lexerName );
+            outputFileST.SetAttribute( "parserStartRuleName", parserStartRuleName );
writeFile( tmpdir, "Test.java", outputFileST.ToString() );
}

diff --git a/Antlr3.Test/RuntimeTestHarness.cs b/Antlr3.Test/RuntimeTestHarness.cs
index e050cbd..97c451e 100644
--- a/Antlr3.Test/RuntimeTestHarness.cs
+++ b/Antlr3.Test/RuntimeTestHarness.cs
@@ -44,7 +44,7 @@ namespace AntlrUnitTests
{
StringTemplate outputFileST = GetLexerTestFileTemplate();

-            outputFileST.setAttribute( "lexerName", lexerName );
+            outputFileST.SetAttribute( "lexerName", lexerName );

WriteTestFile( outputFileST.ToString() );
}
@@ -53,10 +53,10 @@ namespace AntlrUnitTests
StringTemplate outputFileST = GetCombinedTestFileTemplate();
StringTemplate createParserST = GetParserCreationTemplate();

-            outputFileST.setAttribute( "createParser", createParserST );
-            outputFileST.setAttribute( "parserName", parserName );
-            outputFileST.setAttribute( "lexerName", lexerName );
-            outputFileST.setAttribute( "parserStartRuleName", parserStartRuleName );
+            outputFileST.SetAttribute( "createParser", createParserST );
+            outputFileST.SetAttribute( "parserName", parserName );
+            outputFileST.SetAttribute( "lexerName", lexerName );
+            outputFileST.SetAttribute( "parserStartRuleName", parserStartRuleName );

WriteTestFile( outputFileST.ToString() );
}
@@ -65,12 +65,12 @@ namespace AntlrUnitTests
StringTemplate outputFileST = GetTreeTestFileTemplate();
StringTemplate createParserST = GetParserCreationTemplate();

-            outputFileST.setAttribute( "createParser", createParserST );
-            outputFileST.setAttribute( "parserName", parserName );
-            outputFileST.setAttribute( "treeParserName", treeParserName );
-            outputFileST.setAttribute( "lexerName", lexerName );
-            outputFileST.setAttribute( "parserStartRuleName", parserStartRuleName );
-            outputFileST.setAttribute( "treeParserStartRuleName", treeParserStartRuleName );
+            outputFileST.SetAttribute( "createParser", createParserST );
+            outputFileST.SetAttribute( "parserName", parserName );
+            outputFileST.SetAttribute( "treeParserName", treeParserName );
+            outputFileST.SetAttribute( "lexerName", lexerName );
+            outputFileST.SetAttribute( "parserStartRuleName", parserStartRuleName );
+            outputFileST.SetAttribute( "treeParserStartRuleName", treeParserStartRuleName );

WriteTestFile( outputFileST.ToString() );
}
@@ -84,12 +84,12 @@ namespace AntlrUnitTests
StringTemplate outputFileST = GetTreeAndTreeTestFileTemplate();
StringTemplate createParserST = GetParserCreationTemplate();

-            outputFileST.setAttribute( "createParser", createParserST );
-            outputFileST.setAttribute( "parserName", parserName );
-            outputFileST.setAttribute( "treeParserName", treeParserName );
-            outputFileST.setAttribute( "lexerName", lexerName );
-            outputFileST.setAttribute( "parserStartRuleName", parserStartRuleName );
-            outputFileST.setAttribute( "treeParserStartRuleName", treeParserStartRuleName );
+            outputFileST.SetAttribute( "createParser", createParserST );
+            outputFileST.SetAttribute( "parserName", parserName );
+            outputFileST.SetAttribute( "treeParserName", treeParserName );
+            outputFileST.SetAttribute( "lexerName", lexerName );
+            outputFileST.SetAttribute( "parserStartRuleName", parserStartRuleName );
+            outputFileST.SetAttribute( "treeParserStartRuleName", treeParserStartRuleName );

WriteTestFile( outputFileST.ToString() );
}
@@ -98,10 +98,10 @@ namespace AntlrUnitTests
StringTemplate outputFileST = GetTemplateTestFileTemplate();
StringTemplate createParserST = GetParserCreationTemplate();

-            outputFileST.setAttribute( "createParser", createParserST );
-            outputFileST.setAttribute( "parserName", parserName );
-            outputFileST.setAttribute( "lexerName", lexerName );
-            outputFileST.setAttribute( "parserStartRuleName", parserStartRuleName );
+            outputFileST.SetAttribute( "createParser", createParserST );
+            outputFileST.SetAttribute( "parserName", parserName );
+            outputFileST.SetAttribute( "lexerName", lexerName );
+            outputFileST.SetAttribute( "parserStartRuleName", parserStartRuleName );

WriteTestFile( outputFileST.ToString() );
}
diff --git a/Antlr3.Test/StringTemplateTests.cs b/Antlr3.Test/StringTemplateTests.cs
index c6ffb76..b6eb30e 100644
--- a/Antlr3.Test/StringTemplateTests.cs
+++ b/Antlr3.Test/StringTemplateTests.cs
@@ -62,7 +62,7 @@ namespace AntlrUnitTests
{
StringBuilder errorOutput = new StringBuilder( 500 );
int n = 0;
-            public void error( string msg, Exception e )
+            public void Error( string msg, Exception e )
{
n++;
if ( n > 1 )
@@ -72,7 +72,7 @@ namespace AntlrUnitTests
if ( e != null )
{
StringWriter duh = new StringWriter();
-                    e.printStackTrace( duh );
+                    e.PrintStackTrace( duh );
errorOutput.Append( msg + ": " + duh.ToString() );
}
else
@@ -80,7 +80,7 @@ namespace AntlrUnitTests
errorOutput.Append( msg );
}
}
-            public void warning( string msg )
+            public void Warning( string msg )
{
n++;
errorOutput.Append( msg );
@@ -170,7 +170,7 @@ namespace AntlrUnitTests
// this also tests the group loader
IStringTemplateErrorListener errors = new ErrorBuffer();
string tmpdir = Path.GetTempPath();
-            StringTemplateGroup.registerGroupLoader( null );
+            StringTemplateGroup.RegisterGroupLoader( null );

string templates =
"group testG implements blort;" + newline +
@@ -193,7 +193,7 @@ namespace AntlrUnitTests
// this also tests the group loader
IStringTemplateErrorListener errors = new ErrorBuffer();
string tmpdir = Path.GetTempPath();
-            StringTemplateGroup.registerGroupLoader( new PathGroupLoader( tmpdir, errors ) );
+            StringTemplateGroup.RegisterGroupLoader( new PathGroupLoader( tmpdir, errors ) );

string templates =
"group testG implements blort;" + newline +
@@ -228,7 +228,7 @@ namespace AntlrUnitTests
return;
}
}
-            StringTemplateGroup.registerGroupLoader(
+            StringTemplateGroup.RegisterGroupLoader(
new PathGroupLoader( tmpdir + ":" + tmpdir + "/sub", errors )
);

@@ -241,7 +241,7 @@ namespace AntlrUnitTests
writeFile( tmpdir + "/sub", "testG2.stg", templates );

StringTemplateGroup group =
-                StringTemplateGroup.loadGroup( "testG2" );
+                StringTemplateGroup.LoadGroup( "testG2" );
string expecting = "group testG2;" + newline +
"bold(item) ::= <<foo>>" + newline +
"duh(a,b,c) ::= <<foo>>" + newline +
@@ -255,7 +255,7 @@ namespace AntlrUnitTests
// this also tests the group loader
IStringTemplateErrorListener errors = new ErrorBuffer();
string tmpdir = Path.GetTempPath();
-            StringTemplateGroup.registerGroupLoader( new PathGroupLoader( tmpdir, errors ) );
+            StringTemplateGroup.RegisterGroupLoader( new PathGroupLoader( tmpdir, errors ) );
string groupI =
"interface testI;" + newline +
"t();" + newline +
@@ -284,7 +284,7 @@ namespace AntlrUnitTests
// this also tests the group loader
IStringTemplateErrorListener errors = new ErrorBuffer();
string tmpdir = Path.GetTempPath();
-            StringTemplateGroup.registerGroupLoader(
+            StringTemplateGroup.RegisterGroupLoader(
new PathGroupLoader( tmpdir, errors )
);
string superGroup =
@@ -302,8 +302,8 @@ namespace AntlrUnitTests
new StringTemplateGroup( new StreamReader( tmpdir + "/testG.stg" ),
typeof( DefaultTemplateLexer ),
errors );
-            StringTemplate st = group.getInstanceOf( "main" );
-            st.setAttribute( "x", "foo" );
+            StringTemplate st = group.GetInstanceOf( "main" );
+            st.SetAttribute( "x", "foo" );

string expecting = "*foo*";
Assert.AreEqual( expecting, st.ToString() );
@@ -315,7 +315,7 @@ namespace AntlrUnitTests
// this also tests the group loader
IStringTemplateErrorListener errors = new ErrorBuffer();
string tmpdir = Path.GetTempPath();
-            StringTemplateGroup.registerGroupLoader(
+            StringTemplateGroup.RegisterGroupLoader(
new PathGroupLoader( tmpdir, errors )
);
string superGroup =
@@ -332,8 +332,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StreamReader( tmpdir + "/testG.stg" ),
errors );
-            StringTemplate st = group.getInstanceOf( "main" );
-            st.setAttribute( "x", "foo" );
+            StringTemplate st = group.GetInstanceOf( "main" );
+            st.SetAttribute( "x", "foo" );

string expecting = "*foo*";
Assert.AreEqual( expecting, st.ToString() );
@@ -345,7 +345,7 @@ namespace AntlrUnitTests
// this also tests the group loader
IStringTemplateErrorListener errors = new ErrorBuffer();
string tmpdir = Path.GetTempPath();
-            StringTemplateGroup.registerGroupLoader( new PathGroupLoader( tmpdir, errors ) );
+            StringTemplateGroup.RegisterGroupLoader( new PathGroupLoader( tmpdir, errors ) );
string groupI =
"interface testI;" + newline +
"t();" + newline +
@@ -373,7 +373,7 @@ namespace AntlrUnitTests
// this also tests the group loader
IStringTemplateErrorListener errors = new ErrorBuffer();
string tmpdir = Path.GetTempPath();
-            StringTemplateGroup.registerGroupLoader( new PathGroupLoader( tmpdir, errors ) );
+            StringTemplateGroup.RegisterGroupLoader( new PathGroupLoader( tmpdir, errors ) );
string groupI =
"interface testI;" + newline +
"t();" + newline +
@@ -401,7 +401,7 @@ namespace AntlrUnitTests
// this also tests the group loader
IStringTemplateErrorListener errors = new ErrorBuffer();
string tmpdir = Path.GetTempPath();
-            StringTemplateGroup.registerGroupLoader( new PathGroupLoader( tmpdir, errors ) );
+            StringTemplateGroup.RegisterGroupLoader( new PathGroupLoader( tmpdir, errors ) );
string groupI =
"interface testI;" + newline +
"t();" + newline +
@@ -442,12 +442,12 @@ namespace AntlrUnitTests
"t() ::= <<literal template>>" + newline;
Assert.AreEqual( expecting, group.ToString() );

-            StringTemplate a = group.getInstanceOf( "t" );
+            StringTemplate a = group.GetInstanceOf( "t" );
expecting = "literal template";
Assert.AreEqual( expecting, a.ToString() );

-            StringTemplate b = group.getInstanceOf( "bold" );
-            b.setAttribute( "item", "dork" );
+            StringTemplate b = group.GetInstanceOf( "bold" );
+            b.SetAttribute( "item", "dork" );
expecting = "<b>dork</b>";
Assert.AreEqual( expecting, b.ToString() );
}
@@ -470,12 +470,12 @@ namespace AntlrUnitTests
"t() ::= <<$\"literal\":{a|$a$\\}}$ template>>" + newline;
Assert.AreEqual( expecting, group.ToString() );

-            StringTemplate b = group.getInstanceOf( "bold" );
-            b.setAttribute( "item", "dork" );
+            StringTemplate b = group.GetInstanceOf( "bold" );
+            b.SetAttribute( "item", "dork" );
expecting = "<b>dork</b>";
Assert.AreEqual( expecting, b.ToString() );

-            StringTemplate a = group.getInstanceOf( "t" );
+            StringTemplate a = group.GetInstanceOf( "t" );
expecting = "literal} template";
Assert.AreEqual( expecting, a.ToString() );
}
@@ -496,11 +496,11 @@ namespace AntlrUnitTests
typeof( DefaultTemplateLexer ) );

// check setting unknown arg in empty formal list
-            StringTemplate a = group.getInstanceOf( "t" );
+            StringTemplate a = group.GetInstanceOf( "t" );
string error = null;
try
{
-                a.setAttribute( "foo", "x" ); // want NoSuchElementException
+                a.SetAttribute( "foo", "x" ); // want NoSuchElementException
}
catch ( ArgumentException e )
{
@@ -510,12 +510,12 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, error );

// check setting known arg
-            a = group.getInstanceOf( "t2" );
-            a.setAttribute( "item", "x" ); // shouldn't get exception
+            a = group.GetInstanceOf( "t2" );
+            a.SetAttribute( "item", "x" ); // shouldn't get exception

// check setting unknown arg in nonempty list of formal args
-            a = group.getInstanceOf( "t3" );
-            a.setAttribute( "b", "x" );
+            a = group.GetInstanceOf( "t3" );
+            a.SetAttribute( "b", "x" );
}

[TestMethod]
@@ -549,9 +549,9 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ) );
-            StringTemplate t = group.getInstanceOf( "page" );
-            t.setAttribute( "title", "my title" );
-            t.setAttribute( "font", "Helvetica" ); // body() will see it
+            StringTemplate t = group.GetInstanceOf( "page" );
+            t.SetAttribute( "title", "my title" );
+            t.SetAttribute( "font", "Helvetica" ); // body() will see it
t.ToString(); // should be no problem
}

@@ -565,7 +565,7 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ) );
-            StringTemplate t = group.getInstanceOf( "page" );
+            StringTemplate t = group.GetInstanceOf( "page" );
string expecting = "<font face=Times>my body</font>";
Assert.AreEqual( expecting, t.ToString() );
}
@@ -580,8 +580,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ) );
-            StringTemplate t = group.getInstanceOf( "page" );
-            t.setAttribute( "x", "Times" );
+            StringTemplate t = group.GetInstanceOf( "page" );
+            t.SetAttribute( "x", "Times" );
string error = "";
try
{
@@ -605,8 +605,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ) );
-            StringTemplate t = group.getInstanceOf( "page" );
-            t.setAttribute( "name", "Ter" );
+            StringTemplate t = group.GetInstanceOf( "page" );
+            t.SetAttribute( "name", "Ter" );
string expecting = "<font face=Times><b>Ter</b></font>";
Assert.AreEqual( expecting, t.ToString() );
}
@@ -621,9 +621,9 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ) );
-            StringTemplate t = group.getInstanceOf( "page" );
-            t.setAttribute( "x", "Times" );
-            t.setAttribute( "name", "Ter" );
+            StringTemplate t = group.GetInstanceOf( "page" );
+            t.SetAttribute( "x", "Times" );
+            t.SetAttribute( "name", "Ter" );
string error = "";
try
{
@@ -647,7 +647,7 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ) );
-            StringTemplate t = group.getInstanceOf( "page" );
+            StringTemplate t = group.GetInstanceOf( "page" );
string error = "";
try
{
@@ -671,7 +671,7 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ) );
-            StringTemplate t = group.getInstanceOf( "page" );
+            StringTemplate t = group.GetInstanceOf( "page" );
string error = "";
try
{
@@ -697,8 +697,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup(
new StringReader( templates ) );
-            StringTemplate t = group.getInstanceOf( "a" );
-            t.setAttribute( "s", "Test" );
+            StringTemplate t = group.GetInstanceOf( "a" );
+            t.SetAttribute( "s", "Test" );
string expecting = "case 1 : Test break;";
Assert.AreEqual( expecting, t.ToString() );
}
@@ -709,8 +709,8 @@ namespace AntlrUnitTests
StringTemplate st = new StringTemplate(
"Tokens : <rules; separator=\"|\"> ;",
typeof( AngleBracketTemplateLexer ) );
-            st.setAttribute( "rules", "A" );
-            st.setAttribute( "rules", "B" );
+            st.SetAttribute( "rules", "A" );
+            st.SetAttribute( "rules", "B" );
string expecting = "Tokens : A|B ;";
Assert.AreEqual( expecting, st.ToString() );
}
@@ -724,7 +724,7 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ) );
-            StringTemplate st = group.getInstanceOf( "a" );
+            StringTemplate st = group.GetInstanceOf( "a" );
string result = st.ToString();
string expecting = "XY";
Assert.AreEqual( expecting, result );
@@ -739,7 +739,7 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ) );
-            StringTemplate st = group.getInstanceOf( "a" );
+            StringTemplate st = group.GetInstanceOf( "a" );
string result = st.ToString();
string expecting = "XblortY";
Assert.AreEqual( expecting, result );
@@ -753,7 +753,7 @@ namespace AntlrUnitTests
"a() ::= \"X<@r()>Y\"" + newline;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "a" );
+            StringTemplate st = group.GetInstanceOf( "a" );
string result = st.ToString();
string expecting = "XY";
Assert.AreEqual( expecting, result );
@@ -767,7 +767,7 @@ namespace AntlrUnitTests
"a() ::= \"X<@r>blort<@end>Y\"" + newline;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "a" );
+            StringTemplate st = group.GetInstanceOf( "a" );
string result = st.ToString();
string expecting = "XblortY";
Assert.AreEqual( expecting, result );
@@ -785,7 +785,7 @@ namespace AntlrUnitTests
"Y\"" + newline;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "a" );
+            StringTemplate st = group.GetInstanceOf( "a" );
string result = st.ToString();
string expecting = "XblortY";
Assert.AreEqual( expecting, result );
@@ -800,7 +800,7 @@ namespace AntlrUnitTests
"@a.r() ::= \"foo\"" + newline;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "a" );
+            StringTemplate st = group.GetInstanceOf( "a" );
string result = st.ToString();
string expecting = "XfooY";
Assert.AreEqual( expecting, result );
@@ -815,8 +815,8 @@ namespace AntlrUnitTests
"@a.r() ::= \"foo\"" + newline;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "a" );
-            st.setAttribute( "v", "true" );
+            StringTemplate st = group.GetInstanceOf( "a" );
+            st.SetAttribute( "v", "true" );
string result = st.ToString();
string expecting = "XAfooBY";
Assert.AreEqual( expecting, result );
@@ -833,8 +833,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
errors );
-            StringTemplate st = group.getInstanceOf( "a" );
-            st.setAttribute( "v", "true" );
+            StringTemplate st = group.GetInstanceOf( "a" );
+            st.SetAttribute( "v", "true" );
string result = st.ToString();
string expecting = "XAyoBY";
Assert.AreEqual( expecting, result );
@@ -863,7 +863,7 @@ namespace AntlrUnitTests
null,
group );

-            StringTemplate st = subGroup.getInstanceOf( "a" );
+            StringTemplate st = subGroup.GetInstanceOf( "a" );
string result = st.ToString();
string expecting = "XfooY";
Assert.AreEqual( expecting, result );
@@ -888,7 +888,7 @@ namespace AntlrUnitTests
null,
group );

-            StringTemplate st = subGroup.getInstanceOf( "a" );
+            StringTemplate st = subGroup.GetInstanceOf( "a" );
string result = st.ToString();
string expecting = "XAfooBY";
Assert.AreEqual( expecting, result );
@@ -908,7 +908,7 @@ namespace AntlrUnitTests
// ...
// Somehow, the ref to super in subsub is not moving up the chain
// to the @super.r(); oh, i introduced a bug when i put setGroup
-            // into STG.getInstanceOf()!
+            // into STG.GetInstanceOf()!

string templates1 =
"group super;" + newline +
@@ -935,7 +935,7 @@ namespace AntlrUnitTests
null,
subGroup );

-            StringTemplate st = subSubGroup.getInstanceOf( "a" );
+            StringTemplate st = subSubGroup.GetInstanceOf( "a" );
string result = st.ToString();
string expecting = "Xfoo23Y";
Assert.AreEqual( expecting, result );
@@ -959,7 +959,7 @@ namespace AntlrUnitTests
null,
group );

-            StringTemplate st = subGroup.getInstanceOf( "a" );
+            StringTemplate st = subGroup.GetInstanceOf( "a" );
string result = st.ToString();
string expecting = "XAfooY";
Assert.AreEqual( expecting, result );
@@ -977,7 +977,7 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
errors );
-            StringTemplate st = group.getInstanceOf( "a" );
+            StringTemplate st = group.GetInstanceOf( "a" );
st.ToString();
string result = errors.ToString();
string expecting = "group test line 2: redefinition of template region: @a.r";
@@ -997,7 +997,7 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
errors );
-            StringTemplate st = group.getInstanceOf( "a" );
+            StringTemplate st = group.GetInstanceOf( "a" );
st.ToString();
string result = errors.ToString();
string expecting = "group test line 4: redefinition of template region: @a.r";
@@ -1025,7 +1025,7 @@ namespace AntlrUnitTests
errors,
group );

-            StringTemplate st = subGroup.getInstanceOf( "a" );
+            StringTemplate st = subGroup.GetInstanceOf( "a" );
string result = errors.ToString();
string expecting = "group sub line 3: redefinition of template region: @a.r";
Assert.AreEqual( expecting, result );
@@ -1043,7 +1043,7 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
errors );
-            StringTemplate st = group.getInstanceOf( "a" );
+            StringTemplate st = group.GetInstanceOf( "a" );
st.ToString();
string result = errors.ToString();
string expecting = "group test line 3: template a has no region called q";
@@ -1070,7 +1070,7 @@ namespace AntlrUnitTests
errors,
group );

-            StringTemplate st = subGroup.getInstanceOf( "a" );
+            StringTemplate st = subGroup.GetInstanceOf( "a" );
string result = errors.ToString();
string expecting = "template a has no region called q";
Assert.AreEqual( expecting, result );
@@ -1089,7 +1089,7 @@ namespace AntlrUnitTests
typeof( DefaultTemplateLexer ),
errors,
null );
-            StringTemplate st = group.getInstanceOf( "a" );
+            StringTemplate st = group.GetInstanceOf( "a" );
st.ToString();
string result = errors.ToString();
string expecting = "missing region r $@end$ tag";
@@ -1107,7 +1107,7 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
errors );
-            StringTemplate st = group.getInstanceOf( "a" );
+            StringTemplate st = group.GetInstanceOf( "a" );
st.ToString();
string result = errors.ToString();
string expecting = "missing region r <@end> tag";
@@ -1120,13 +1120,13 @@ namespace AntlrUnitTests
// make a bold template in the super group that you can inherit from sub
StringTemplateGroup supergroup = new StringTemplateGroup( "super" );
StringTemplateGroup subgroup = new StringTemplateGroup( "sub" );
-            StringTemplate bold = supergroup.defineTemplate( "bold", "<b>$it$</b>" );
+            StringTemplate bold = supergroup.DefineTemplate( "bold", "<b>$it$</b>" );
subgroup.SuperGroup = supergroup;
IStringTemplateErrorListener errors = new ErrorBuffer();
subgroup.ErrorListener = errors;
supergroup.ErrorListener = errors;
StringTemplate duh = new StringTemplate( subgroup, "$name:bold()$" );
-            duh.setAttribute( "name", "Terence" );
+            duh.SetAttribute( "name", "Terence" );
string expecting = "<b>Terence</b>";
Assert.AreEqual( expecting, duh.ToString() );
}
@@ -1137,14 +1137,14 @@ namespace AntlrUnitTests
// make a bold template in the super group and one in sub group
StringTemplateGroup supergroup = new StringTemplateGroup( "super" );
StringTemplateGroup subgroup = new StringTemplateGroup( "sub" );
-            supergroup.defineTemplate( "bold", "<b>$it$</b>" );
-            subgroup.defineTemplate( "bold", "<strong>$it$</strong>" );
+            supergroup.DefineTemplate( "bold", "<b>$it$</b>" );
+            subgroup.DefineTemplate( "bold", "<strong>$it$</strong>" );
subgroup.SuperGroup = supergroup;
IStringTemplateErrorListener errors = new ErrorBuffer();
subgroup.ErrorListener = errors;
supergroup.ErrorListener = errors;
StringTemplate duh = new StringTemplate( subgroup, "$name:bold()$" );
-            duh.setAttribute( "name", "Terence" );
+            duh.SetAttribute( "name", "Terence" );
string expecting = "<strong>Terence</strong>";
Assert.AreEqual( expecting, duh.ToString() );
}
@@ -1156,7 +1156,7 @@ namespace AntlrUnitTests
StringTemplateGroup rootgroup = new StringTemplateGroup( "root" );
StringTemplateGroup level1 = new StringTemplateGroup( "level1" );
StringTemplateGroup level2 = new StringTemplateGroup( "level2" );
-            rootgroup.defineTemplate( "bold", "<b>$it$</b>" );
+            rootgroup.DefineTemplate( "bold", "<b>$it$</b>" );
level1.SuperGroup = rootgroup;
level2.SuperGroup = level1;
IStringTemplateErrorListener errors = new ErrorBuffer();
@@ -1164,7 +1164,7 @@ namespace AntlrUnitTests
level1.ErrorListener = errors;
level2.ErrorListener = errors;
StringTemplate duh = new StringTemplate( level2, "$name:bold()$" );
-            duh.setAttribute( "name", "Terence" );
+            duh.SetAttribute( "name", "Terence" );
string expecting = "<b>Terence</b>";
Assert.AreEqual( expecting, duh.ToString() );
}
@@ -1195,7 +1195,7 @@ namespace AntlrUnitTests
StringTemplateGroup sub =
new StringTemplateGroup( new StringReader( subtemplates ) );
sub.SuperGroup = @base;
-            StringTemplate st = sub.getInstanceOf( "decls" );
+            StringTemplate st = sub.GetInstanceOf( "decls" );
string expecting = "DSL";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -1228,7 +1228,7 @@ namespace AntlrUnitTests
null,
subGroup );

-            StringTemplate st = subSubGroup.getInstanceOf( "r" );
+            StringTemplate st = subSubGroup.GetInstanceOf( "r" );
string result = st.ToString();
string expecting = "foo23";
Assert.AreEqual( expecting, result );
@@ -1241,11 +1241,11 @@ namespace AntlrUnitTests
// Use a template group so we can specify the start/stop chars
StringTemplateGroup group =
new StringTemplateGroup( "dummy", "." );
-            StringTemplate bold = group.defineTemplate( "bold", "<b>$it$</b>" );
+            StringTemplate bold = group.DefineTemplate( "bold", "<b>$it$</b>" );
StringTemplate duh = new StringTemplate( group, "$(\"blort: \"+(list)):bold()$" );
-            duh.setAttribute( "list", "a" );
-            duh.setAttribute( "list", "b" );
-            duh.setAttribute( "list", "c" );
+            duh.SetAttribute( "list", "a" );
+            duh.SetAttribute( "list", "b" );
+            duh.SetAttribute( "list", "c" );
// System.out.println(duh);
string expecting = "<b>blort: abc</b>";
Assert.AreEqual( expecting, duh.ToString() );
@@ -1258,12 +1258,12 @@ namespace AntlrUnitTests
// Use a template group so we can specify the start/stop chars
StringTemplateGroup group =
new StringTemplateGroup( "dummy", "." );
-            group.defineTemplate( "link", "<a href=\"$url$\"><b>$title$</b></a>" );
+            group.DefineTemplate( "link", "<a href=\"$url$\"><b>$title$</b></a>" );
StringTemplate duh =
new StringTemplate( group,
"$link(url=\"/member/view?ID=\"+ID+\"&x=y\"+foo, title=\"the title\")$" );
-            duh.setAttribute( "ID", "3321" );
-            duh.setAttribute( "foo", "fubar" );
+            duh.SetAttribute( "ID", "3321" );
+            duh.SetAttribute( "foo", "fubar" );
string expecting = "<a href=\"/member/view?ID=3321&x=yfubar\"><b>the title</b></a>";
Assert.AreEqual( expecting, duh.ToString() );
}
@@ -1273,7 +1273,7 @@ namespace AntlrUnitTests
{
StringTemplateGroup group =
new StringTemplateGroup( "test" );
-            StringTemplate bold = group.defineTemplate( "bold", "<b>$it$</b>" );
+            StringTemplate bold = group.DefineTemplate( "bold", "<b>$it$</b>" );
StringTemplate t =
new StringTemplate( group, "$data$, $data:bold()$, " +
"$list:bold():bold()$, $array$, $a2$, $a3$, $a4$" );
@@ -1285,12 +1285,12 @@ namespace AntlrUnitTests
list.Add( "a" );
list.Add( "b" );
list.Add( "c" );
-            t.setAttribute( "data", v );
-            t.setAttribute( "list", list );
-            t.setAttribute( "array", new string[] { "x", "y" } );
-            t.setAttribute( "a2", new int[] { 10, 20 } );
-            t.setAttribute( "a3", new float[] { 1.2f, 1.3f } );
-            t.setAttribute( "a4", new double[] { 8.7, 9.2 } );
+            t.SetAttribute( "data", v );
+            t.SetAttribute( "list", list );
+            t.SetAttribute( "array", new string[] { "x", "y" } );
+            t.SetAttribute( "a2", new int[] { 10, 20 } );
+            t.SetAttribute( "a3", new float[] { 1.2f, 1.3f } );
+            t.SetAttribute( "a4", new double[] { 8.7, 9.2 } );
//System.out.println(t);
string expecting = "123, <b>1</b><b>2</b><b>3</b>, " +
"<b><b>a</b></b><b><b>b</b></b><b><b>c</b></b>, xy, 1020, 1.21.3, 8.79.2";
@@ -1302,10 +1302,10 @@ namespace AntlrUnitTests
{
StringTemplateGroup group =
new StringTemplateGroup( "test" );
-            StringTemplate bold = group.defineTemplate( "bold", "<b>$it$</b>" );
+            StringTemplate bold = group.DefineTemplate( "bold", "<b>$it$</b>" );
StringTemplate t = new StringTemplate( group, "$(f+l):bold()$" );
-            t.setAttribute( "f", "Joe" );
-            t.setAttribute( "l", "Schmoe" );
+            t.SetAttribute( "f", "Joe" );
+            t.SetAttribute( "l", "Schmoe" );
//System.out.println(t);
string expecting = "<b>JoeSchmoe</b>";
Assert.AreEqual( expecting, t.ToString() );
@@ -1316,11 +1316,11 @@ namespace AntlrUnitTests
{
StringTemplateGroup group =
new StringTemplateGroup( "test" );
-            StringTemplate bold = group.defineTemplate( "foobar", "foo$attr$bar" );
+            StringTemplate bold = group.DefineTemplate( "foobar", "foo$attr$bar" );
StringTemplate t = new StringTemplate( group, "$data:(name+\"bar\")()$" );
-            t.setAttribute( "data", "Ter" );
-            t.setAttribute( "data", "Tom" );
-            t.setAttribute( "name", "foo" );
+            t.SetAttribute( "data", "Ter" );
+            t.SetAttribute( "data", "Tom" );
+            t.SetAttribute( "name", "foo" );
//System.out.println(t);
string expecting = "fooTerbarfooTombar";
Assert.AreEqual( expecting, t.ToString() );
@@ -1331,11 +1331,11 @@ namespace AntlrUnitTests
{
StringTemplateGroup group =
new StringTemplateGroup( "test" );
-            StringTemplate foobar = group.defineTemplate( "foobar", "foo$it$bar" );
-            StringTemplate a = group.defineTemplate( "a", "$it$bar" );
+            StringTemplate foobar = group.DefineTemplate( "foobar", "foo$it$bar" );
+            StringTemplate a = group.DefineTemplate( "a", "$it$bar" );
StringTemplate t = new StringTemplate( group, "$data:(\"foo\":a())()$" );
-            t.setAttribute( "data", "Ter" );
-            t.setAttribute( "data", "Tom" );
+            t.SetAttribute( "data", "Ter" );
+            t.SetAttribute( "data", "Tom" );
//System.out.println(t);
string expecting = "fooTerbarfooTombar";
Assert.AreEqual( expecting, t.ToString() );
@@ -1346,9 +1346,9 @@ namespace AntlrUnitTests
{
StringTemplateGroup group =
new StringTemplateGroup( "test" );
-            StringTemplate foo = group.defineTemplate( "foo", "hi there!" );
+            StringTemplate foo = group.DefineTemplate( "foo", "hi there!" );
StringTemplate t = new StringTemplate( group, "$(name)()$" );
-            t.setAttribute( "name", "foo" );
+            t.SetAttribute( "name", "foo" );
//System.out.println(t);
string expecting = "hi there!";
Assert.AreEqual( expecting, t.ToString() );
@@ -1376,20 +1376,20 @@ namespace AntlrUnitTests
[TestMethod]
public void TestSetButNotRefd()
{
-            StringTemplate.setLintMode( true );
+            StringTemplate.SetLintMode( true );
StringTemplateGroup group =
new StringTemplateGroup( "test" );
StringTemplate t = new StringTemplate( group, "$a$ then $b$ and $c$ refs." );
-            t.setAttribute( "a", "Terence" );
-            t.setAttribute( "b", "Terence" );
-            t.setAttribute( "cc", "Terence" ); // oops...should be 'c'
+            t.SetAttribute( "a", "Terence" );
+            t.SetAttribute( "b", "Terence" );
+            t.SetAttribute( "cc", "Terence" ); // oops...should be 'c'
IStringTemplateErrorListener errors = new ErrorBuffer();
group.ErrorListener = errors;
string expectingError = "anonymous: set but not used: cc";
string result = t.ToString();    // result is irrelevant
//System.out.println("result error: '"+errors+"'");
//System.out.println("expecting: '"+expectingError+"'");
-            StringTemplate.setLintMode( false );
+            StringTemplate.SetLintMode( false );
Assert.AreEqual( expectingError, errors.ToString() );
}

@@ -1401,7 +1401,7 @@ namespace AntlrUnitTests
IStringTemplateErrorListener errors = new ErrorBuffer();
group.ErrorListener = errors;
StringTemplate t = new StringTemplate( group, "$names:bold(x=it)$" );
-            t.setAttribute( "names", "Terence" );
+            t.SetAttribute( "names", "Terence" );

string error = null;
try
@@ -1424,8 +1424,8 @@ namespace AntlrUnitTests
IStringTemplateErrorListener errors = new ErrorBuffer();
group.ErrorListener = errors;
StringTemplate t = new StringTemplate( group, "$names:bold(x=it)$" );
-            t.setAttribute( "names", "Terence" );
-            t.setAttribute( "names", "Tom" );
+            t.SetAttribute( "names", "Terence" );
+            t.SetAttribute( "names", "Tom" );
//System.out.println(t);
string error = null;
try
@@ -1445,10 +1445,10 @@ namespace AntlrUnitTests
{
StringTemplateGroup group =
new StringTemplateGroup( "test" );
-            StringTemplate bold = group.defineTemplate( "bold", "<b>$x$</b>" );
+            StringTemplate bold = group.DefineTemplate( "bold", "<b>$x$</b>" );
StringTemplate t = new StringTemplate( group, "$names:bold(x=it)$" );
-            t.setAttribute( "names", "Terence" );
-            t.setAttribute( "names", "Tom" );
+            t.SetAttribute( "names", "Terence" );
+            t.SetAttribute( "names", "Tom" );
//System.out.println("'"+t.toString()+"'");
string expecting = "<b>Terence</b><b>Tom</b>";
Assert.AreEqual( expecting, t.ToString() );
@@ -1458,12 +1458,12 @@ namespace AntlrUnitTests
public void TestChangingAttrValueRepeatedTemplateApplicationToVector()
{
StringTemplateGroup group = new StringTemplateGroup( "dummy", "." );
-            StringTemplate bold = group.defineTemplate( "bold", "<b>$item$</b>" );
-            StringTemplate italics = group.defineTemplate( "italics", "<i>$it$</i>" );
+            StringTemplate bold = group.DefineTemplate( "bold", "<b>$item$</b>" );
+            StringTemplate italics = group.DefineTemplate( "italics", "<i>$it$</i>" );
StringTemplate members = new StringTemplate( group, "$members:bold(item=it):italics(it=it)$" );
-            members.setAttribute( "members", "Jim" );
-            members.setAttribute( "members", "Mike" );
-            members.setAttribute( "members", "Ashar" );
+            members.SetAttribute( "members", "Jim" );
+            members.SetAttribute( "members", "Mike" );
+            members.SetAttribute( "members", "Ashar" );
//System.out.println("members="+members);
string expecting = "<i><b>Jim</b></i><i><b>Mike</b></i><i><b>Ashar</b></i>";
Assert.AreEqual( expecting, members.ToString() );
@@ -1473,13 +1473,13 @@ namespace AntlrUnitTests
public void TestAlternatingTemplateApplication()
{
StringTemplateGroup group = new StringTemplateGroup( "dummy", "." );
-            StringTemplate listItem = group.defineTemplate( "listItem", "<li>$it$</li>" );
-            StringTemplate bold = group.defineTemplate( "bold", "<b>$it$</b>" );
-            StringTemplate italics = group.defineTemplate( "italics", "<i>$it$</i>" );
+            StringTemplate listItem = group.DefineTemplate( "listItem", "<li>$it$</li>" );
+            StringTemplate bold = group.DefineTemplate( "bold", "<b>$it$</b>" );
+            StringTemplate italics = group.DefineTemplate( "italics", "<i>$it$</i>" );
StringTemplate item = new StringTemplate( group, "$item:bold(),italics():listItem()$" );
-            item.setAttribute( "item", "Jim" );
-            item.setAttribute( "item", "Mike" );
-            item.setAttribute( "item", "Ashar" );
+            item.SetAttribute( "item", "Jim" );
+            item.SetAttribute( "item", "Mike" );
+            item.SetAttribute( "item", "Ashar" );
//System.out.println("ITEM="+item);
string expecting = "<li><b>Jim</b></li><li><i>Mike</i></li><li><b>Ashar</b></li>";
Assert.AreEqual( expecting, item.ToString() );
@@ -1490,8 +1490,8 @@ namespace AntlrUnitTests
{
StringTemplateGroup group =
new StringTemplateGroup( "test" );
-            StringTemplate hostname = group.defineTemplate( "hostname", "$machine$.jguru.com" );
-            StringTemplate bold = group.defineTemplate( "bold", "<b>$x$</b>" );
+            StringTemplate hostname = group.DefineTemplate( "hostname", "$machine$.jguru.com" );
+            StringTemplate bold = group.DefineTemplate( "bold", "<b>$x$</b>" );
StringTemplate t = new StringTemplate( group, "$bold(x=hostname(machine=\"www\"))$" );
string expecting = "<b>www.jguru.com</b>";
Assert.AreEqual( expecting, t.ToString() );
@@ -1501,9 +1501,9 @@ namespace AntlrUnitTests
public void TestTemplateApplicationAsRHSOfAssignment()
{
StringTemplateGroup group = new StringTemplateGroup( "test" );
-            StringTemplate hostname = group.defineTemplate( "hostname", "$machine$.jguru.com" );
-            StringTemplate bold = group.defineTemplate( "bold", "<b>$x$</b>" );
-            StringTemplate italics = group.defineTemplate( "italics", "<i>$it$</i>" );
+            StringTemplate hostname = group.DefineTemplate( "hostname", "$machine$.jguru.com" );
+            StringTemplate bold = group.DefineTemplate( "bold", "<b>$x$</b>" );
+            StringTemplate italics = group.DefineTemplate( "italics", "<i>$it$</i>" );
StringTemplate t = new StringTemplate( group, "$bold(x=hostname(machine=\"www\"):italics())$" );
string expecting = "<b><i>www.jguru.com</i></b>";
Assert.AreEqual( expecting, t.ToString() );
@@ -1514,10 +1514,10 @@ namespace AntlrUnitTests
{
StringTemplateGroup group =
new StringTemplateGroup( "test" );
-            StringTemplate italics = group.defineTemplate( "italics", "<i>$x$</i>" );
-            StringTemplate bold = group.defineTemplate( "bold", "<b>$x$</b>" );
+            StringTemplate italics = group.DefineTemplate( "italics", "<i>$x$</i>" );
+            StringTemplate bold = group.DefineTemplate( "bold", "<b>$x$</b>" );
StringTemplate t = new StringTemplate( group, "$bold(x=italics(x=name))$" );
-            t.setAttribute( "name", "Terence" );
+            t.SetAttribute( "name", "Terence" );
//System.out.println(t);
string expecting = "<b><i>Terence</i></b>";
Assert.AreEqual( expecting, t.ToString() );
@@ -1528,14 +1528,14 @@ namespace AntlrUnitTests
{
StringTemplateGroup group =
new StringTemplateGroup( "test" );
-            StringTemplate bold = group.defineTemplate( "bulletSeparator", "</li>$foo$<li>" );
+            StringTemplate bold = group.DefineTemplate( "bulletSeparator", "</li>$foo$<li>" );
// make separator a complicated expression with args passed to included template
StringTemplate t =
new StringTemplate( group,
"<ul>$name; separator=bulletSeparator(foo=\" \")+\"&nbsp;\"$</ul>" );
-            t.setAttribute( "name", "Ter" );
-            t.setAttribute( "name", "Tom" );
-            t.setAttribute( "name", "Mel" );
+            t.SetAttribute( "name", "Ter" );
+            t.SetAttribute( "name", "Tom" );
+            t.SetAttribute( "name", "Mel" );
//System.out.println(t);
string expecting = "<ul>Ter</li> <li>&nbsp;Tom</li> <li>&nbsp;Mel</ul>";
Assert.AreEqual( expecting, t.ToString() );
@@ -1548,7 +1548,7 @@ namespace AntlrUnitTests
new StringTemplateGroup( "test" );
StringTemplate a = new StringTemplate( group,
"$if (!firstName)$$email$$endif$" );
-            a.setAttribute( "email", "parrt@jguru.com" );
+            a.SetAttribute( "email", "parrt@jguru.com" );
string expecting = "parrt@jguru.com";
Assert.AreEqual( a.ToString(), expecting );
}
@@ -1558,11 +1558,11 @@ namespace AntlrUnitTests
{
StringTemplateGroup group =
new StringTemplateGroup( "test" );
-            StringTemplate bold = group.defineTemplate( "bold", "<b>$it$</b>" );
+            StringTemplate bold = group.DefineTemplate( "bold", "<b>$it$</b>" );
//StringTemplate a = new StringTemplate(group, "$\" Parr\":bold()$");
StringTemplate b = new StringTemplate( group, "$bold(it={$name$ Parr})$" );
-            //a.setAttribute("name", "Terence");
-            b.setAttribute( "name", "Terence" );
+            //a.SetAttribute("name", "Terence");
+            b.SetAttribute( "name", "Terence" );
string expecting = "<b>Terence Parr</b>";
//assertEquals(a.toString(), expecting);
Assert.AreEqual( b.ToString(), expecting );
@@ -1573,10 +1573,10 @@ namespace AntlrUnitTests
{
StringTemplateGroup group =
new StringTemplateGroup( "test" );
-            StringTemplate bold = group.defineTemplate( "bold", "<b>$it$</b>" );
+            StringTemplate bold = group.DefineTemplate( "bold", "<b>$it$</b>" );
StringTemplate b = new StringTemplate( group, "$bold(it=name+\" Parr\")$" );
-            //a.setAttribute("name", "Terence");
-            b.setAttribute( "name", "Terence" );
+            //a.SetAttribute("name", "Terence");
+            b.SetAttribute( "name", "Terence" );
string expecting = "<b>Terence Parr</b>";
//assertEquals(expecting, a.toString());
Assert.AreEqual( expecting, b.ToString() );
@@ -1587,10 +1587,10 @@ namespace AntlrUnitTests
{
StringTemplateGroup group =
new StringTemplateGroup( "test" );
-            StringTemplate bold = group.defineTemplate( "bold", "<b>$it$</b>" );
+            StringTemplate bold = group.DefineTemplate( "bold", "<b>$it$</b>" );
StringTemplate b = new StringTemplate( group, "$bold(it=name+\" Parr=\")$" );
-            //a.setAttribute("name", "Terence");
-            b.setAttribute( "name", "Terence" );
+            //a.SetAttribute("name", "Terence");
+            b.SetAttribute( "name", "Terence" );
string expecting = "<b>Terence Parr=</b>";
//assertEquals(expecting, a.toString());
Assert.AreEqual( expecting, b.ToString() );
@@ -1639,8 +1639,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( "dummy", tmpWorkDir.ToString() );

-                        StringTemplate a = group.getInstanceOf( "page" );
-                        a.setAttribute( "member", new Connector() );
+                        StringTemplate a = group.GetInstanceOf( "page" );
+                        a.SetAttribute( "member", new Connector() );
string expecting = "<html><head>" + newline +
"</head>" + newline +
"<body>" + newline +
@@ -1678,9 +1678,9 @@ namespace AntlrUnitTests
" List:" + newline + "  " + newline + "foo" + newline + newline +
"$names:{<br>$i$. $it$" + newline +
"}$" );
-            t.setAttribute( "names", "Terence" );
-            t.setAttribute( "names", "Jim" );
-            t.setAttribute( "names", "Sriram" );
+            t.SetAttribute( "names", "Terence" );
+            t.SetAttribute( "names", "Jim" );
+            t.SetAttribute( "names", "Sriram" );
//System.out.println(t);
string expecting =
" List:" + newline +
@@ -1701,13 +1701,13 @@ namespace AntlrUnitTests
null,
typeof( AngleBracketTemplateLexer ),
System.Reflection.Assembly.GetExecutingAssembly() );
-            StringTemplate m = mgroup.getInstanceOf( "AntlrUnitTests/method" );
+            StringTemplate m = mgroup.GetInstanceOf( "AntlrUnitTests/method" );
// "method.st" references body() so "body.st" will be loaded too
-            m.setAttribute( "visibility", "public" );
-            m.setAttribute( "name", "foobar" );
-            m.setAttribute( "returnType", "void" );
-            m.setAttribute( "statements", "i=1;" ); // body inherits these from method
-            m.setAttribute( "statements", "x=i;" );
+            m.SetAttribute( "visibility", "public" );
+            m.SetAttribute( "name", "foobar" );
+            m.SetAttribute( "returnType", "void" );
+            m.SetAttribute( "statements", "i=1;" ); // body inherits these from method
+            m.SetAttribute( "statements", "x=i;" );
string expecting =
"public void foobar() {" + newline +
"\t// start of a body" + newline +
@@ -1723,9 +1723,9 @@ namespace AntlrUnitTests
public void TestApplyTemplateToSingleValuedAttribute()
{
StringTemplateGroup group = new StringTemplateGroup( "test" );
-            StringTemplate bold = group.defineTemplate( "bold", "<b>$x$</b>" );
+            StringTemplate bold = group.DefineTemplate( "bold", "<b>$x$</b>" );
StringTemplate name = new StringTemplate( group, "$name:bold(x=name)$" );
-            name.setAttribute( "name", "Terence" );
+            name.SetAttribute( "name", "Terence" );
Assert.AreEqual( "<b>Terence</b>", name.ToString() );
}

@@ -1733,7 +1733,7 @@ namespace AntlrUnitTests
public void TestStringLiteralAsAttribute()
{
StringTemplateGroup group = new StringTemplateGroup( "test" );
-            StringTemplate bold = group.defineTemplate( "bold", "<b>$it$</b>" );
+            StringTemplate bold = group.DefineTemplate( "bold", "<b>$it$</b>" );
StringTemplate name = new StringTemplate( group, "$\"Terence\":bold()$" );
Assert.AreEqual( "<b>Terence</b>", name.ToString() );
}
@@ -1742,9 +1742,9 @@ namespace AntlrUnitTests
public void TestApplyTemplateToSingleValuedAttributeWithDefaultAttribute()
{
StringTemplateGroup group = new StringTemplateGroup( "test" );
-            StringTemplate bold = group.defineTemplate( "bold", "<b>$it$</b>" );
+            StringTemplate bold = group.DefineTemplate( "bold", "<b>$it$</b>" );
StringTemplate name = new StringTemplate( group, "$name:bold()$" );
-            name.setAttribute( "name", "Terence" );
+            name.SetAttribute( "name", "Terence" );
Assert.AreEqual( "<b>Terence</b>", name.ToString() );
}

@@ -1755,7 +1755,7 @@ namespace AntlrUnitTests
// Use a template group so we can specify the start/stop chars
StringTemplateGroup group = new StringTemplateGroup( "dummy", "." );
StringTemplate item = new StringTemplate( group, "$item:{<li>$it$</li>}$" );
-            item.setAttribute( "item", "Terence" );
+            item.SetAttribute( "item", "Terence" );
Assert.AreEqual( "<li>Terence</li>", item.ToString() );
}

@@ -1768,10 +1768,10 @@ namespace AntlrUnitTests
StringTemplate list = new StringTemplate( group, "<ul>$items$</ul>" );
// demonstrate setting arg to anonymous subtemplate
StringTemplate item = new StringTemplate( group, "$item:{<li>$it$</li>}; separator=\",\"$" );
-            item.setAttribute( "item", "Terence" );
-            item.setAttribute( "item", "Jim" );
-            item.setAttribute( "item", "John" );
-            list.setAttribute( "items", item ); // nested template
+            item.SetAttribute( "item", "Terence" );
+            item.SetAttribute( "item", "Jim" );
+            item.SetAttribute( "item", "John" );
+            list.SetAttribute( "items", item ); // nested template
string expecting = "<ul><li>Terence</li>,<li>Jim</li>,<li>John</li></ul>";
Assert.AreEqual( expecting, list.ToString() );
}
@@ -1781,8 +1781,8 @@ namespace AntlrUnitTests
{
StringTemplate st = new StringTemplate( "$items:{$it.lastName$, $it.firstName$\n}$" );
// also testing wacky spaces in aggregate spec
-            st.setAttribute( "items.{ firstName ,lastName}", "Ter", "Parr" );
-            st.setAttribute( "items.{firstName, lastName }", "Tom", "Burns" );
+            st.SetAttribute( "items.{ firstName ,lastName}", "Ter", "Parr" );
+            st.SetAttribute( "items.{firstName, lastName }", "Tom", "Burns" );
string expecting =
"Parr, Ter" + newline +
"Burns, Tom" + newline;
@@ -1793,9 +1793,9 @@ namespace AntlrUnitTests
public void TestRepeatedApplicationOfTemplateToSingleValuedAttribute()
{
StringTemplateGroup group = new StringTemplateGroup( "dummy", "." );
-            StringTemplate search = group.defineTemplate( "bold", "<b>$it$</b>" );
+            StringTemplate search = group.DefineTemplate( "bold", "<b>$it$</b>" );
StringTemplate item = new StringTemplate( group, "$item:bold():bold()$" );
-            item.setAttribute( "item", "Jim" );
+            item.SetAttribute( "item", "Jim" );
Assert.AreEqual( "<b><b>Jim</b></b>", item.ToString() );
}

@@ -1803,11 +1803,11 @@ namespace AntlrUnitTests
public void TestRepeatedApplicationOfTemplateToMultiValuedAttributeWithSeparator()
{
StringTemplateGroup group = new StringTemplateGroup( "dummy", "." );
-            StringTemplate search = group.defineTemplate( "bold", "<b>$it$</b>" );
+            StringTemplate search = group.DefineTemplate( "bold", "<b>$it$</b>" );
StringTemplate item = new StringTemplate( group, "$item:bold():bold(); separator=\",\"$" );
-            item.setAttribute( "item", "Jim" );
-            item.setAttribute( "item", "Mike" );
-            item.setAttribute( "item", "Ashar" );
+            item.SetAttribute( "item", "Jim" );
+            item.SetAttribute( "item", "Mike" );
+            item.SetAttribute( "item", "Ashar" );
// first application of template must yield another vector!
//System.out.println("ITEM="+item);
string expecting = "<b><b>Jim</b></b>,<b><b>Mike</b></b>,<b><b>Ashar</b></b>";
@@ -1825,11 +1825,11 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( "dummy", ".", typeof( AngleBracketTemplateLexer ) );
query = new StringTemplate( group, "SELECT <distinct> <column; separator=\", \"> FROM <table>;" );
-            query.setAttribute( "column", "name" );
-            query.setAttribute( "column", "email" );
-            query.setAttribute( "table", "User" );
+            query.SetAttribute( "column", "name" );
+            query.SetAttribute( "column", "email" );
+            query.SetAttribute( "table", "User" );
// uncomment next line to make "DISTINCT" appear in output
-            // query.setAttribute("distince", "DISTINCT");
+            // query.SetAttribute("distince", "DISTINCT");
// System.out.println(query);
Assert.AreEqual( "SELECT  name, email FROM User;", query.ToString() );
}
@@ -1839,8 +1839,8 @@ namespace AntlrUnitTests
{
// all attributes are single-valued:
StringTemplate query = new StringTemplate( "SELECT $column$ FROM $table$;" );
-            query.setAttribute( "column", "name" );
-            query.setAttribute( "table", "User" );
+            query.SetAttribute( "column", "name" );
+            query.SetAttribute( "table", "User" );
Assert.AreEqual( "SELECT name FROM User;", query.ToString() );
}

@@ -1853,9 +1853,9 @@ namespace AntlrUnitTests
new StringTemplate( group,
"SELECT <column> FROM PERSON " +
"<if(cond)>WHERE ID=<id><endif>;" );
-            t.setAttribute( "column", "name" );
-            t.setAttribute( "cond", "true" );
-            t.setAttribute( "id", "231" );
+            t.SetAttribute( "column", "name" );
+            t.SetAttribute( "cond", "true" );
+            t.SetAttribute( "id", "231" );
Assert.AreEqual( "SELECT name FROM PERSON WHERE ID=231;", t.ToString() );
}

@@ -1866,9 +1866,9 @@ namespace AntlrUnitTests
StringTemplate t = new StringTemplate( group, "<if(map.(type))><type> <prop>=<map.(type)>;<endif>" );
Dictionary<object, object> map = new Dictionary<object, object>();
map["int"] = "0";
-            t.setAttribute( "map", map );
-            t.setAttribute( "prop", "x" );
-            t.setAttribute( "type", "int" );
+            t.SetAttribute( "map", map );
+            t.SetAttribute( "prop", "x" );
+            t.SetAttribute( "type", "int" );
Assert.AreEqual( "int x=0;", t.ToString() );
}

@@ -1879,9 +1879,9 @@ namespace AntlrUnitTests
StringTemplate t = new StringTemplate( group, "$if(map.(type))$$type$ $prop$=$map.(type)$;$endif$" );
Dictionary<object, object> map = new Dictionary<object, object>();
map["int"] = "0";
-            t.setAttribute( "map", map );
-            t.setAttribute( "prop", "x" );
-            t.setAttribute( "type", "int" );
+            t.SetAttribute( "map", map );
+            t.SetAttribute( "prop", "x" );
+            t.SetAttribute( "type", "int" );
Assert.AreEqual( "int x=0;", t.ToString() );
}

@@ -1894,11 +1894,11 @@ namespace AntlrUnitTests
StringTemplate t =
new StringTemplate( group,
"$if(b)$x$endif$ $if(!b)$y$endif$" );
-            t.setAttribute( "b", true );
+            t.SetAttribute( "b", true );
Assert.AreEqual( t.ToString(), "x " );

-            t = t.getInstanceOf();
-            t.setAttribute( "b", false );
+            t = t.GetInstanceOf();
+            t.SetAttribute( "b", false );
Assert.AreEqual( " y", t.ToString() );
}

@@ -1915,7 +1915,7 @@ namespace AntlrUnitTests
"junk" + newline +
"<endif>"
);
-            t.setAttribute( "a", "blort" );
+            t.SetAttribute( "a", "blort" );
// leave b as null
//System.out.println("t="+t);
string expecting =
@@ -1933,7 +1933,7 @@ namespace AntlrUnitTests
StringTemplate t =
new StringTemplate( group,
"$if(names:{$it$})$Fail!$endif$ $if(!names:{$it$})$Works!$endif$" );
-            t.setAttribute( "b", true );
+            t.SetAttribute( "b", true );
Assert.AreEqual( t.ToString(), " Works!" );
}

@@ -2009,7 +2009,7 @@ namespace AntlrUnitTests
"<b>Email: $p.email$</b><br>" + newline +
"$p.bio$"
);
-            t.setAttribute( "p", new Connector() );
+            t.SetAttribute( "p", new Connector() );
//System.out.println("t is "+t.toString());
string expecting =
"<b>Name: Terence Parr</b><br>" + newline +
@@ -2025,13 +2025,13 @@ namespace AntlrUnitTests
// Use a template group so we can specify the start/stop chars
StringTemplateGroup group =
new StringTemplateGroup( "dummy", "." );
-            group.defineTemplate( "link", "<a href=\"$url$\"><b>$title$</b></a>" );
+            group.DefineTemplate( "link", "<a href=\"$url$\"><b>$title$</b></a>" );
StringTemplate duh =
new StringTemplate( group,
"start|$p:{$link(url=\"/member/view?ID=\"+it.ID, title=it.firstName)$ $if(it.canEdit)$canEdit$endif$}:" +
"{$it$<br>\n}$|end" );
-            duh.setAttribute( "p", new Connector() );
-            duh.setAttribute( "p", new Connector2() );
+            duh.SetAttribute( "p", new Connector() );
+            duh.SetAttribute( "p", new Connector2() );
//System.out.println(duh);
string expecting = "start|<a href=\"/member/view?ID=1\"><b>Terence</b></a> <br>" + newline +
"<a href=\"/member/view?ID=2\"><b>Tom</b></a> canEdit<br>" + newline +
@@ -2073,13 +2073,13 @@ namespace AntlrUnitTests
public void TestRecursion()
{
StringTemplateGroup group = new StringTemplateGroup( "dummy", ".", typeof( AngleBracketTemplateLexer ) );
-            group.defineTemplate( "tree",
+            group.DefineTemplate( "tree",
"<if(it.firstChild)>" +
"( <it.text> <it.children:tree(); separator=\" \"> )" +
"<else>" +
"<it.text>" +
"<endif>" );
-            StringTemplate tree = group.getInstanceOf( "tree" );
+            StringTemplate tree = group.GetInstanceOf( "tree" );
// build ( a b (c d) e )
Tree root = new Tree( "a" );
root.addChild( new Tree( "b" ) );
@@ -2087,7 +2087,7 @@ namespace AntlrUnitTests
subtree.addChild( new Tree( "d" ) );
root.addChild( subtree );
root.addChild( new Tree( "e" ) );
-            tree.setAttribute( "it", root );
+            tree.SetAttribute( "it", root );
string expecting = "( a b ( c d ) e )";
Assert.AreEqual( expecting, tree.ToString() );
}
@@ -2106,7 +2106,7 @@ namespace AntlrUnitTests
"}$</i>" + newline +
"}$"
);
-            t.setAttribute( "A", "parrt" );
+            t.SetAttribute( "A", "parrt" );
string expecting = newline +
"<i>" + newline +
"<b>parrt</b>" + newline +
@@ -2128,8 +2128,8 @@ namespace AntlrUnitTests
"}$</i>" + newline +
"}$"
);
-            t.setAttribute( "A", "parrt" );
-            t.setAttribute( "B", "tombu" );
+            t.SetAttribute( "A", "parrt" );
+            t.SetAttribute( "B", "tombu" );
string expecting = newline +
"<i>" + newline +
"<b>parrt, tombu</b>" + newline +
@@ -2149,8 +2149,8 @@ namespace AntlrUnitTests
"$names:{<tr>$it:{<td>$it:{<b>$it$</b>}$</td>}$</tr>}$" + newline +
"</table>" + newline
);
-            t.setAttribute( "names", "parrt" );
-            t.setAttribute( "names", "tombu" );
+            t.SetAttribute( "names", "parrt" );
+            t.SetAttribute( "names", "tombu" );
string expecting =
"<table>" + newline +
"<tr><td><b>parrt</b></td></tr><tr><td><b>tombu</b></td></tr>" + newline +
@@ -2163,7 +2163,7 @@ namespace AntlrUnitTests
{
StringTemplateGroup group =
new StringTemplateGroup( "dummy", "." );
-            group.defineTemplate( "foo", "$x$ && $it$" );
+            group.DefineTemplate( "foo", "$x$ && $it$" );
StringTemplate t =
new StringTemplate(
group,
@@ -2180,9 +2180,9 @@ namespace AntlrUnitTests
// $A:{$attr:foo(x="\{dog\}\"")$ is cool}$
"$A:{$it:foo(x=\"\\{dog\\}\\\"\")$ is cool}$"
);
-            t.setAttribute( "A", "ick" );
-            u.setAttribute( "A", "ick" );
-            v.setAttribute( "A", "ick" );
+            t.SetAttribute( "A", "ick" );
+            u.SetAttribute( "A", "ick" );
+            v.SetAttribute( "A", "ick" );
//System.out.println("t is '"+t.toString()+"'");
//System.out.println("u is '"+u.toString()+"'");
//System.out.println("v is '"+v.toString()+"'");
@@ -2198,7 +2198,7 @@ namespace AntlrUnitTests
public void TestEscapesOutsideExpressions()
{
StringTemplate b = new StringTemplate( "It\\'s ok...\\$; $a:{\\'hi\\', $it$}$" );
-            b.setAttribute( "a", "Ter" );
+            b.SetAttribute( "a", "Ter" );
string expecting = "It\\'s ok...$; \\'hi\\', Ter";
string result = b.ToString();
Assert.AreEqual( expecting, result );
@@ -2214,11 +2214,11 @@ namespace AntlrUnitTests
"bar" + newline +
"$endif$"
);
-            e.setAttribute( "title", "sample" );
+            e.SetAttribute( "title", "sample" );
string expecting = "foo";
Assert.AreEqual( expecting, e.ToString() );

-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
expecting = "bar";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -2233,7 +2233,7 @@ namespace AntlrUnitTests
"bar" + newline +
"$endif$"
);
-            e.setAttribute( "y", "yep" );
+            e.SetAttribute( "y", "yep" );
string expecting = "bar";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -2249,7 +2249,7 @@ namespace AntlrUnitTests
"<endif>",
typeof( AngleBracketTemplateLexer )
);
-            e.setAttribute( "y", "yep" );
+            e.SetAttribute( "y", "yep" );
string expecting = "bar";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -2266,7 +2266,7 @@ namespace AntlrUnitTests
"blort" + newline +
"$endif$"
);
-            e.setAttribute( "z", "yep" );
+            e.SetAttribute( "z", "yep" );
string expecting = "blort";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -2303,16 +2303,16 @@ namespace AntlrUnitTests
"$endif$" + newline +
"$endif$"
);
-            e.setAttribute( "title", "sample" );
+            e.SetAttribute( "title", "sample" );
string expecting = "foo";
Assert.AreEqual( expecting, e.ToString() );

-            e = e.getInstanceOf();
-            e.setAttribute( "header", "more" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "header", "more" );
expecting = "bar";
Assert.AreEqual( expecting, e.ToString() );

-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
expecting = "blort";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -2331,16 +2331,16 @@ namespace AntlrUnitTests
"blort" + newline +
"$endif$" + newline
);
-            sub.setAttribute( "foo", "stuff" );
-            main.setAttribute( "sub", sub );
+            sub.SetAttribute( "foo", "stuff" );
+            main.SetAttribute( "sub", sub );
string expecting =
"begin" + newline +
"stuff";
Assert.AreEqual( expecting, main.ToString() );

main = new StringTemplate( group, "$sub$" );
-            sub = sub.getInstanceOf();
-            main.setAttribute( "sub", sub );
+            sub = sub.GetInstanceOf();
+            main.SetAttribute( "sub", sub );
expecting =
"begin" + newline +
"blort";
@@ -2360,10 +2360,10 @@ namespace AntlrUnitTests
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ),
errors );
-            StringTemplate t = group.getInstanceOf( "list" );
-            t.setAttribute( "names", "Terence" );
-            t.setAttribute( "names", "Jim" );
-            t.setAttribute( "names", "Sriram" );
+            StringTemplate t = group.GetInstanceOf( "list" );
+            t.SetAttribute( "names", "Terence" );
+            t.SetAttribute( "names", "Jim" );
+            t.SetAttribute( "names", "Sriram" );
string expecting =
"  Terence" + newline +
"  Jim" + newline +
@@ -2384,10 +2384,10 @@ namespace AntlrUnitTests
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ),
errors );
-            StringTemplate t = group.getInstanceOf( "list" );
-            t.setAttribute( "names", "Terence\nis\na\nmaniac" );
-            t.setAttribute( "names", "Jim" );
-            t.setAttribute( "names", "Sriram\nis\ncool" );
+            StringTemplate t = group.GetInstanceOf( "list" );
+            t.SetAttribute( "names", "Terence\nis\na\nmaniac" );
+            t.SetAttribute( "names", "Jim" );
+            t.SetAttribute( "names", "Sriram\nis\ncool" );
string expecting =
"  Terence" + newline +
"  is" + newline +
@@ -2413,8 +2413,8 @@ namespace AntlrUnitTests
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ),
errors );
-            StringTemplate t = group.getInstanceOf( "list" );
-            t.setAttribute( "names", "Terence\n\nis a maniac" );
+            StringTemplate t = group.GetInstanceOf( "list" );
+            t.SetAttribute( "names", "Terence\n\nis a maniac" );
string expecting =
"  Terence" + newline +
"" + newline + // no indent on blank line
@@ -2437,10 +2437,10 @@ namespace AntlrUnitTests
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ),
errors );
-            StringTemplate t = group.getInstanceOf( "list" );
-            t.setAttribute( "names", "Terence" );
-            t.setAttribute( "names", "Jim" );
-            t.setAttribute( "names", "Sriram" );
+            StringTemplate t = group.GetInstanceOf( "list" );
+            t.SetAttribute( "names", "Terence" );
+            t.SetAttribute( "names", "Jim" );
+            t.SetAttribute( "names", "Sriram" );
string expecting =
"Before:" + newline +
"  Terence" + newline +
@@ -2472,23 +2472,23 @@ namespace AntlrUnitTests
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ),
errors );
-            StringTemplate t = group.getInstanceOf( "method" );
-            t.setAttribute( "name", "foo" );
-            StringTemplate s1 = group.getInstanceOf( "assign" );
-            s1.setAttribute( "lhs", "x" );
-            s1.setAttribute( "expr", "0" );
-            StringTemplate s2 = group.getInstanceOf( "ifstat" );
-            s2.setAttribute( "expr", "x>0" );
-            StringTemplate s2a = group.getInstanceOf( "assign" );
-            s2a.setAttribute( "lhs", "y" );
-            s2a.setAttribute( "expr", "x+y" );
-            StringTemplate s2b = group.getInstanceOf( "assign" );
-            s2b.setAttribute( "lhs", "z" );
-            s2b.setAttribute( "expr", "4" );
-            s2.setAttribute( "stats", s2a );
-            s2.setAttribute( "stats", s2b );
-            t.setAttribute( "stats", s1 );
-            t.setAttribute( "stats", s2 );
+            StringTemplate t = group.GetInstanceOf( "method" );
+            t.SetAttribute( "name", "foo" );
+            StringTemplate s1 = group.GetInstanceOf( "assign" );
+            s1.SetAttribute( "lhs", "x" );
+            s1.SetAttribute( "expr", "0" );
+            StringTemplate s2 = group.GetInstanceOf( "ifstat" );
+            s2.SetAttribute( "expr", "x>0" );
+            StringTemplate s2a = group.GetInstanceOf( "assign" );
+            s2a.SetAttribute( "lhs", "y" );
+            s2a.SetAttribute( "expr", "x+y" );
+            StringTemplate s2b = group.GetInstanceOf( "assign" );
+            s2b.SetAttribute( "lhs", "z" );
+            s2b.SetAttribute( "expr", "4" );
+            s2.SetAttribute( "stats", s2a );
+            s2.SetAttribute( "stats", s2b );
+            t.SetAttribute( "stats", s1 );
+            t.SetAttribute( "stats", s2 );
string expecting =
"void foo() {" + newline +
"\tx=0;" + newline +
@@ -2509,38 +2509,38 @@ namespace AntlrUnitTests
_buffer = buffer;
}

-            public void pushIndentation( string indent )
+            public void PushIndentation( string indent )
{
}
-            public string popIndentation()
+            public string PopIndentation()
{
return null;
}
-            public void pushAnchorPoint()
+            public void PushAnchorPoint()
{
}
-            public void popAnchorPoint()
+            public void PopAnchorPoint()
{
}
-            public void setLineWidth( int lineWidth )
+            public void SetLineWidth( int lineWidth )
{
}
-            public int write( string str )
+            public int Write( string str )
{
_buffer.Append( str );
return str.Length;
}
-            public int write( string str, string wrap )
+            public int Write( string str, string wrap )
{
return 0;
}
-            public int writeWrapSeparator( string wrap )
+            public int WriteWrapSeparator( string wrap )
{
return 0;
}
-            public int writeSeparator( string str )
+            public int WriteSeparator( string str )
{
-                return write( str );
+                return Write( str );
}
}

@@ -2551,10 +2551,10 @@ namespace AntlrUnitTests
IStringTemplateWriter w = new AlternativeWriter( buf );
StringTemplateGroup group =
new StringTemplateGroup( "test" );
-            group.defineTemplate( "bold", "<b>$x$</b>" );
+            group.DefineTemplate( "bold", "<b>$x$</b>" );
StringTemplate name = new StringTemplate( group, "$name:bold(x=name)$" );
-            name.setAttribute( "name", "Terence" );
-            name.write( w );
+            name.SetAttribute( "name", "Terence" );
+            name.Write( w );
Assert.AreEqual( "<b>Terence</b>", buf.ToString() );
}

@@ -2567,16 +2567,16 @@ namespace AntlrUnitTests
m["a"] = "1";
m["b"] = "2";
m["c"] = "3";
-            st.setAttribute( "items", m );
+            st.SetAttribute( "items", m );
string expecting = "<li>1</li><li>2</li><li>3</li>";
Assert.AreEqual( expecting, st.ToString() );

-            st = st.getInstanceOf();
+            st = st.GetInstanceOf();
HashSet<object> s = new HashSet<object>();
s.Add( "1" );
s.Add( "2" );
s.Add( "3" );
-            st.setAttribute( "items", s );
+            st.SetAttribute( "items", s );
//expecting = "<li>3</li><li>2</li><li>1</li>";
expecting = "<li>1</li><li>2</li><li>3</li>";
Assert.AreEqual( expecting, st.ToString() );
@@ -2591,16 +2591,16 @@ namespace AntlrUnitTests
m["a"] = "1";
m["b"] = "2";
m["c"] = "3";
-            st.setAttribute( "items", m );
+            st.SetAttribute( "items", m );
string expecting = "1,2,3";
Assert.AreEqual( expecting, st.ToString() );

-            st = st.getInstanceOf();
+            st = st.GetInstanceOf();
HashSet<object> s = new HashSet<object>();
s.Add( "1" );
s.Add( "2" );
s.Add( "3" );
-            st.setAttribute( "items", s );
+            st.SetAttribute( "items", s );
//expecting = "3,2,1";
expecting = "1,2,3";
Assert.AreEqual( expecting, st.ToString() );
@@ -2626,12 +2626,12 @@ namespace AntlrUnitTests
{
StringTemplate st =
new StringTemplate( "$x.values:{<li>$it$</li>}$" );
-            st.setAttribute( "x", new Connector3() );
+            st.SetAttribute( "x", new Connector3() );
string expecting = "<li>1</li><li>2</li><li>3</li>";
Assert.AreEqual( expecting, st.ToString() );

st = new StringTemplate( "$x.stuff:{<li>$it$</li>}$" );
-            st.setAttribute( "x", new Connector3() );
+            st.SetAttribute( "x", new Connector3() );
expecting = "<li>1</li><li>2</li>";
Assert.AreEqual( expecting, st.ToString() );
}
@@ -2643,10 +2643,10 @@ namespace AntlrUnitTests
StringTemplateGroup group = new StringTemplateGroup( "super" );
StringTemplateGroup subGroup = new StringTemplateGroup( "sub" );
subGroup.SuperGroup = group;
-            group.defineTemplate( "page", "$font()$:text" );
-            group.defineTemplate( "font", "Helvetica" );
-            subGroup.defineTemplate( "font", "$super.font()$ and Times" );
-            StringTemplate st = subGroup.getInstanceOf( "page" );
+            group.DefineTemplate( "page", "$font()$:text" );
+            group.DefineTemplate( "font", "Helvetica" );
+            subGroup.DefineTemplate( "font", "$super.font()$ and Times" );
+            StringTemplate st = subGroup.GetInstanceOf( "page" );
string expecting =
"Helvetica and Times:text";
Assert.AreEqual( expecting, st.ToString() );
@@ -2658,11 +2658,11 @@ namespace AntlrUnitTests
StringTemplateGroup group = new StringTemplateGroup( "super" );
StringTemplateGroup subGroup = new StringTemplateGroup( "sub" );
subGroup.SuperGroup = group;
-            group.defineTemplate( "bold", "<b>$it$</b>" );
-            subGroup.defineTemplate( "bold", "<strong>$it$</strong>" );
-            subGroup.defineTemplate( "page", "$name:super.bold()$" );
-            StringTemplate st = subGroup.getInstanceOf( "page" );
-            st.setAttribute( "name", "Ter" );
+            group.DefineTemplate( "bold", "<b>$it$</b>" );
+            subGroup.DefineTemplate( "bold", "<strong>$it$</strong>" );
+            subGroup.DefineTemplate( "page", "$name:super.bold()$" );
+            StringTemplate st = subGroup.GetInstanceOf( "page" );
+            st.SetAttribute( "name", "Ter" );
string expecting =
"<b>Ter</b>";
Assert.AreEqual( expecting, st.ToString() );
@@ -2674,8 +2674,8 @@ namespace AntlrUnitTests
StringTemplateGroup group = new StringTemplateGroup( "base" );
StringTemplateGroup subGroup = new StringTemplateGroup( "sub" );
subGroup.SuperGroup = group;
-            group.defineTemplate( "bold", "<b>$it$</b>" );
-            subGroup.defineTemplate( "bold", "<strong>$it$</strong>" );
+            group.DefineTemplate( "bold", "<b>$it$</b>" );
+            subGroup.DefineTemplate( "bold", "<strong>$it$</strong>" );
// this is the same as testApplySuperTemplateRef() test
// 'cept notice that here the supergroup defines page
// As long as you create the instance via the subgroup,
@@ -2684,9 +2684,9 @@ namespace AntlrUnitTests
// getGroup().superGroup value.  If I create instance
// of page in group not subGroup, however, I will get
// an error as superGroup is null for group "group".
-            group.defineTemplate( "page", "$name:super.bold()$" );
-            StringTemplate st = subGroup.getInstanceOf( "page" );
-            st.setAttribute( "name", "Ter" );
+            group.DefineTemplate( "page", "$name:super.bold()$" );
+            StringTemplate st = subGroup.GetInstanceOf( "page" );
+            st.SetAttribute( "name", "Ter" );
string error = null;
try
{
@@ -2710,11 +2710,11 @@ namespace AntlrUnitTests
// if you create an instance of page via the subgroup,
// then bold() should evaluate to the subgroup not the super
// even though page is defined in the super.  Just like polymorphism.
-            group.defineTemplate( "bold", "<b>$it$</b>" );
-            group.defineTemplate( "page", "$name:bold()$" );
-            subGroup.defineTemplate( "bold", "<strong>$it$</strong>" );
-            StringTemplate st = subGroup.getInstanceOf( "page" );
-            st.setAttribute( "name", "Ter" );
+            group.DefineTemplate( "bold", "<b>$it$</b>" );
+            group.DefineTemplate( "page", "$name:bold()$" );
+            subGroup.DefineTemplate( "bold", "<strong>$it$</strong>" );
+            StringTemplate st = subGroup.GetInstanceOf( "page" );
+            st.SetAttribute( "name", "Ter" );
string expecting =
"<strong>Ter</strong>";
Assert.AreEqual( expecting, st.ToString() );
@@ -2734,13 +2734,13 @@ namespace AntlrUnitTests
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ),
errors );
-            StringTemplate outputST = group.getInstanceOf( "output" );
-            StringTemplate bodyST1 = group.getInstanceOf( "mybody" );
-            StringTemplate bodyST2 = group.getInstanceOf( "mybody" );
-            StringTemplate bodyST3 = group.getInstanceOf( "mybody" );
-            outputST.setAttribute( "items", bodyST1 );
-            outputST.setAttribute( "items", bodyST2 );
-            outputST.setAttribute( "items", bodyST3 );
+            StringTemplate outputST = group.GetInstanceOf( "output" );
+            StringTemplate bodyST1 = group.GetInstanceOf( "mybody" );
+            StringTemplate bodyST2 = group.GetInstanceOf( "mybody" );
+            StringTemplate bodyST3 = group.GetInstanceOf( "mybody" );
+            outputST.SetAttribute( "items", bodyST1 );
+            outputST.SetAttribute( "items", bodyST2 );
+            outputST.SetAttribute( "items", bodyST3 );
string expecting = "page: thatstuffthatstuffthatstuff";
Assert.AreEqual( expecting, outputST.ToString() );
}
@@ -2756,9 +2756,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate b = group.getInstanceOf( "block" );
-            b.setAttribute( "stats", group.getInstanceOf( "ifstat" ) );
-            b.setAttribute( "stats", group.getInstanceOf( "ifstat" ) );
+            StringTemplate b = group.GetInstanceOf( "block" );
+            b.SetAttribute( "stats", group.GetInstanceOf( "ifstat" ) );
+            b.SetAttribute( "stats", group.GetInstanceOf( "ifstat" ) );
string expecting = "IF true then IF true then ";
string result = b.ToString();
//System.err.println("result='"+result+"'");
@@ -2776,14 +2776,14 @@ namespace AntlrUnitTests
"block(stats) ::= \"<stats>\"" +
"ifstat(stats) ::= \"IF true then <stats>\"" + newline
;
-            StringTemplate.setLintMode( true );
-            StringTemplate.resetTemplateCounter();
+            StringTemplate.SetLintMode( true );
+            StringTemplate.ResetTemplateCounter();
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate b = group.getInstanceOf( "block" );
-            StringTemplate ifstat = group.getInstanceOf( "ifstat" );
-            b.setAttribute( "stats", ifstat ); // block has if stat
-            ifstat.setAttribute( "stats", b ); // but make "if" contain block
+            StringTemplate b = group.GetInstanceOf( "block" );
+            StringTemplate ifstat = group.GetInstanceOf( "ifstat" );
+            b.SetAttribute( "stats", ifstat ); // block has if stat
+            ifstat.SetAttribute( "stats", b ); // but make "if" contain block
string expectingError =
"infinite recursion to <ifstat([stats])@4> referenced in <block([stats])@3>; stack trace:" + newline +
"<ifstat([stats])@4>, attributes=[stats=<block()@3>]>" + newline +
@@ -2805,7 +2805,7 @@ namespace AntlrUnitTests
}
//System.err.println("errors="+errors+"'");
//System.err.println("expecting="+expectingError+"'");
-            StringTemplate.setLintMode( false );
+            StringTemplate.SetLintMode( false );
Assert.AreEqual( expectingError, errors );
}

@@ -2822,8 +2822,8 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate b = group.getInstanceOf( "block" );
-            b.setAttribute( "stats", group.getInstanceOf( "block" ) );
+            StringTemplate b = group.GetInstanceOf( "block" );
+            b.SetAttribute( "stats", group.GetInstanceOf( "block" ) );
string expecting = "{{}}";
string result = b.ToString();
//System.err.println(result);
@@ -2841,8 +2841,8 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate b = group.getInstanceOf( "other" );  // alias for page
-            b.setAttribute( "name", "Ter" );
+            StringTemplate b = group.GetInstanceOf( "other" );  // alias for page
+            b.SetAttribute( "name", "Ter" );
string expecting = "name is Ter";
string result = b.ToString();
Assert.AreEqual( expecting, result );
@@ -2866,17 +2866,17 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate b = group.getInstanceOf( "Cfile" );
-            StringTemplate f1 = group.getInstanceOf( "func" );
-            StringTemplate f2 = group.getInstanceOf( "func" );
-            f1.setAttribute( "name", "f" );
-            f1.setAttribute( "args", "" );
-            f1.setAttribute( "body", "i=1;" );
-            f2.setAttribute( "name", "g" );
-            f2.setAttribute( "args", "int arg" );
-            f2.setAttribute( "body", "y=1;" );
-            b.setAttribute( "funcs", f1 );
-            b.setAttribute( "funcs", f2 );
+            StringTemplate b = group.GetInstanceOf( "Cfile" );
+            StringTemplate f1 = group.GetInstanceOf( "func" );
+            StringTemplate f2 = group.GetInstanceOf( "func" );
+            f1.SetAttribute( "name", "f" );
+            f1.SetAttribute( "args", "" );
+            f1.SetAttribute( "body", "i=1;" );
+            f2.SetAttribute( "name", "g" );
+            f2.SetAttribute( "args", "int arg" );
+            f2.SetAttribute( "body", "y=1;" );
+            b.SetAttribute( "funcs", f1 );
+            b.SetAttribute( "funcs", f2 );
string expecting = "#include <stdio.h>" + newline +
"public void f();" + newline +
"public void g(int arg);" + newline +
@@ -2924,9 +2924,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate f = group.getInstanceOf( "file" );
-            f.setAttribute( "variables.{decl,format}", new Decl( "i", "int" ), "intdecl" );
-            f.setAttribute( "variables.{decl,format}", new Decl( "a", "int-array" ), "intarray" );
+            StringTemplate f = group.GetInstanceOf( "file" );
+            f.SetAttribute( "variables.{decl,format}", new Decl( "i", "int" ), "intdecl" );
+            f.SetAttribute( "variables.{decl,format}", new Decl( "a", "int-array" ), "intarray" );
//System.out.println("f='"+f+"'");
string expecting = "int i = 0;" + newline +
"int[] a = null;";
@@ -2947,8 +2947,8 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate f = group.getInstanceOf( "test" );
-            f.setAttribute( "name", "first" );
+            StringTemplate f = group.GetInstanceOf( "test" );
+            f.SetAttribute( "name", "first" );
string expecting = "the first";
Assert.AreEqual( expecting, f.ToString() );
}
@@ -2967,8 +2967,8 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate f = group.getInstanceOf( "test" );
-            f.setAttribute( "name", "first" );
+            StringTemplate f = group.GetInstanceOf( "test" );
+            f.SetAttribute( "name", "first" );
string expecting = "the first: foo";
Assert.AreEqual( expecting, f.ToString() );
}
@@ -2986,9 +2986,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate f = group.getInstanceOf( "test" );
-            f.setAttribute( "names", "me" );
-            f.setAttribute( "names", "you" );
+            StringTemplate f = group.GetInstanceOf( "test" );
+            f.SetAttribute( "names", "me" );
+            f.SetAttribute( "names", "you" );
string expecting = "";
Assert.AreEqual( expecting, f.ToString() );
}
@@ -3007,8 +3007,8 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate f = group.getInstanceOf( "test" );
-            //f.setAttribute("name", "first");
+            StringTemplate f = group.GetInstanceOf( "test" );
+            //f.SetAttribute("name", "first");
string expecting = "";
Assert.AreEqual( expecting, f.ToString() );
}
@@ -3018,7 +3018,7 @@ namespace AntlrUnitTests
{
StringTemplate a = new StringTemplate( "$stuff.prop$" );
Dictionary<object, object> map = new Dictionary<object, object>();
-            a.setAttribute( "stuff", map );
+            a.SetAttribute( "stuff", map );
map["prop"] = "Terence";
string results = a.ToString();
//System.out.println(results);
@@ -3031,8 +3031,8 @@ namespace AntlrUnitTests
{
StringTemplate a = new StringTemplate( "$stuff.prop$" );
Dictionary<object, object> map = new Dictionary<object, object>();
-            a.setAttribute( "stuff", map );
-            a.setAttribute( "title", "ST rocks" );
+            a.SetAttribute( "stuff", map );
+            a.SetAttribute( "title", "ST rocks" );
map["prop"] = new StringTemplate( "embedded refers to $title$" );
string results = a.ToString();
//System.out.println(results);
@@ -3148,7 +3148,7 @@ namespace AntlrUnitTests
typeof( AngleBracketTemplateLexer )
);
StringWriter sw = new StringWriter();
-            st.write( new AutoIndentWriter( sw, "\n" ) ); // force \n as newline
+            st.Write( new AutoIndentWriter( sw, "\n" ) ); // force \n as newline
string result = sw.ToString();
string expecting = "Foo \n\n\t bar\n";     // expect \n in output
Assert.AreEqual( expecting, result );
@@ -3156,7 +3156,7 @@ namespace AntlrUnitTests
st = new StringTemplate(
"Foo $\\n$$\\t$ bar" + newline );
sw = new StringWriter();
-            st.write( new AutoIndentWriter( sw, "\n" ) ); // force \n as newline
+            st.Write( new AutoIndentWriter( sw, "\n" ) ); // force \n as newline
expecting = "Foo \n\t bar\n";     // expect \n in output
result = sw.ToString();
Assert.AreEqual( expecting, result );
@@ -3164,7 +3164,7 @@ namespace AntlrUnitTests
st = new StringTemplate(
"Foo$\\ $bar$\\n$" );
sw = new StringWriter();
-            st.write( new AutoIndentWriter( sw, "\n" ) ); // force \n as newline
+            st.Write( new AutoIndentWriter( sw, "\n" ) ); // force \n as newline
result = sw.ToString();
expecting = "Foo bar\n"; // force \n
Assert.AreEqual( expecting, result );
@@ -3179,7 +3179,7 @@ namespace AntlrUnitTests
typeof( AngleBracketTemplateLexer )
);
StringWriter sw = new StringWriter();
-            st.write( new AutoIndentWriter( sw, "\n" ) ); // force \n as newline
+            st.Write( new AutoIndentWriter( sw, "\n" ) ); // force \n as newline
string result = sw.ToString();
string expecting = "Foo\nBar\n";     // expect \n in output
Assert.AreEqual( expecting, result );
@@ -3194,7 +3194,7 @@ namespace AntlrUnitTests
typeof( AngleBracketTemplateLexer )
);
StringWriter sw = new StringWriter();
-            st.write( new AutoIndentWriter( sw, "\r\n" ) ); // force \r\n as newline
+            st.Write( new AutoIndentWriter( sw, "\r\n" ) ); // force \r\n as newline
string result = sw.ToString();
string expecting = "Foo\r\nBar\r\n";     // expect \r\n in output
Assert.AreEqual( expecting, result );
@@ -3208,9 +3208,9 @@ namespace AntlrUnitTests
"<name>\n",
typeof( AngleBracketTemplateLexer )
);
-            st.setAttribute( "name", "a\nb\r\nc" );
+            st.SetAttribute( "name", "a\nb\r\nc" );
StringWriter sw = new StringWriter();
-            st.write( new AutoIndentWriter( sw, "\n" ) ); // force \n as newline
+            st.Write( new AutoIndentWriter( sw, "\n" ) ); // force \n as newline
string result = sw.ToString();
string expecting = "Foo\na\nb\nc\n";     // expect \n in output
Assert.AreEqual( expecting, result );
@@ -3249,12 +3249,12 @@ namespace AntlrUnitTests
IStringTemplateErrorListener errors = new ErrorBuffer();
group.ErrorListener = errors;
StringTemplate t = new StringTemplate( group, "$names; separator=\",\"$" );
-            t.setAttribute( "names", "Terence" );
-            t.setAttribute( "names", "" );
-            t.setAttribute( "names", "" );
-            t.setAttribute( "names", "Tom" );
-            t.setAttribute( "names", "Frank" );
-            t.setAttribute( "names", "" );
+            t.SetAttribute( "names", "Terence" );
+            t.SetAttribute( "names", "" );
+            t.SetAttribute( "names", "" );
+            t.SetAttribute( "names", "Tom" );
+            t.SetAttribute( "names", "Frank" );
+            t.SetAttribute( "names", "" );
// empty values get separator still
string expecting = "Terence,,,Tom,Frank,";
string result = t.ToString();
@@ -3270,10 +3270,10 @@ namespace AntlrUnitTests
group.ErrorListener = errors;
StringTemplate t = new StringTemplate( group,
"$users:{$if(it.ok)$$it.name$$endif$}; separator=\",\"$" );
-            t.setAttribute( "users.{name,ok}", "Terence", ( true ) );
-            t.setAttribute( "users.{name,ok}", "Tom", ( false ) );
-            t.setAttribute( "users.{name,ok}", "Frank", ( true ) );
-            t.setAttribute( "users.{name,ok}", "Johnny", ( false ) );
+            t.SetAttribute( "users.{name,ok}", "Terence", ( true ) );
+            t.SetAttribute( "users.{name,ok}", "Tom", ( false ) );
+            t.SetAttribute( "users.{name,ok}", "Frank", ( true ) );
+            t.SetAttribute( "users.{name,ok}", "Johnny", ( false ) );
// empty conditional values get no separator
string expecting = "Terence,,Frank,";
string result = t.ToString();
@@ -3289,10 +3289,10 @@ namespace AntlrUnitTests
group.ErrorListener = errors;
StringTemplate t = new StringTemplate( group,
"$users:{$if(it.ok)$$it.name$$else$$endif$}; separator=\",\"$" );
-            t.setAttribute( "users.{name,ok}", "Terence", true );
-            t.setAttribute( "users.{name,ok}", "Tom", false );
-            t.setAttribute( "users.{name,ok}", "Frank", true );
-            t.setAttribute( "users.{name,ok}", "Johnny", false );
+            t.SetAttribute( "users.{name,ok}", "Terence", true );
+            t.SetAttribute( "users.{name,ok}", "Tom", false );
+            t.SetAttribute( "users.{name,ok}", "Frank", true );
+            t.SetAttribute( "users.{name,ok}", "Johnny", false );
// empty conditional values get no separator
string expecting = "Terence,,Frank,";
string result = t.ToString();
@@ -3303,15 +3303,15 @@ namespace AntlrUnitTests
public void TestWhiteSpaceAtEndOfTemplate()
{
StringTemplateGroup group = new StringTemplateGroup( "group", System.Reflection.Assembly.GetExecutingAssembly() );
-            StringTemplate pageST = group.getInstanceOf( "AntlrUnitTests/page" );
-            StringTemplate listST = group.getInstanceOf( "AntlrUnitTests/users_list" );
+            StringTemplate pageST = group.GetInstanceOf( "AntlrUnitTests/page" );
+            StringTemplate listST = group.GetInstanceOf( "AntlrUnitTests/users_list" );
// users.list references row.st which has a single blank line at the end.
// I.e., there are 2 \n in a row at the end
// ST should eat all whitespace at end
-            listST.setAttribute( "users", new Connector() );
-            listST.setAttribute( "users", new Connector2() );
-            pageST.setAttribute( "title", "some title" );
-            pageST.setAttribute( "body", listST );
+            listST.SetAttribute( "users", new Connector() );
+            listST.SetAttribute( "users", new Connector2() );
+            pageST.SetAttribute( "title", "some title" );
+            pageST.SetAttribute( "body", listST );
string expecting = "some title" + newline +
"Terence parrt@jguru.comTom tombu@jguru.com";
string result = pageST.ToString();
@@ -3335,7 +3335,7 @@ namespace AntlrUnitTests
"begin\n" +
"$duh.users:{name: $it$}; separator=\", \"$\n" +
"end\n" );
-            t.setAttribute( "duh", new Duh() );
+            t.SetAttribute( "duh", new Duh() );
string expecting = "begin" + newline + "end" + newline;
string result = t.ToString();
Assert.AreEqual( expecting, result );
@@ -3352,7 +3352,7 @@ namespace AntlrUnitTests
"begin\n" +
"$users:{name: $it$}; separator=\", \"$\n" +
"end\n" );
-            //t.setAttribute("users", new Duh());
+            //t.SetAttribute("users", new Duh());
string expecting = "begin" + newline + "end" + newline;
string result = t.ToString();
Assert.AreEqual( expecting, result );
@@ -3369,7 +3369,7 @@ namespace AntlrUnitTests
"begin\n" +
"$users:{name: $it$}; separator=\", \"$\n" +
"end\n" );
-            t.setAttribute( "users", new List<object>() );
+            t.SetAttribute( "users", new List<object>() );
string expecting = "begin" + newline + "end" + newline;
string result = t.ToString();
Assert.AreEqual( expecting, result );
@@ -3386,7 +3386,7 @@ namespace AntlrUnitTests
"begin\n" +
"$users; separator=\", \"$\n" +
"end\n" );
-            t.setAttribute( "users", new List<object>() );
+            t.SetAttribute( "users", new List<object>() );
string expecting = "begin" + newline + "end" + newline;
string result = t.ToString();
Assert.AreEqual( expecting, result );
@@ -3399,7 +3399,7 @@ namespace AntlrUnitTests
new StringTemplateGroup( "test" );
IStringTemplateErrorListener errors = new ErrorBuffer();
group.ErrorListener = errors;
-            group.defineTemplate( "bold", "<b>$it$</b>" );
+            group.DefineTemplate( "bold", "<b>$it$</b>" );
StringTemplate t = new StringTemplate( group,
"$users$\n" +
"end\n" );
@@ -3451,9 +3451,9 @@ namespace AntlrUnitTests
"$title$: {\n" +
"	$name; separator=\"\n\"$\n" +
"}" );
-            a.setAttribute( "title", "foo" );
-            a.setAttribute( "name", "Terence" );
-            a.setAttribute( "name", "Frank" );
+            a.SetAttribute( "title", "foo" );
+            a.SetAttribute( "name", "Terence" );
+            a.SetAttribute( "name", "Frank" );
string results = a.ToString();
//System.out.println(results);
string expecting =
@@ -3473,8 +3473,8 @@ namespace AntlrUnitTests
group.ErrorListener = errors;
StringTemplate t = new StringTemplate( group,
"variable property $propName$=$v.(propName)$" );
-            t.setAttribute( "v", new Decl( "i", "int" ) );
-            t.setAttribute( "propName", "type" );
+            t.SetAttribute( "v", new Decl( "i", "int" ) );
+            t.SetAttribute( "propName", "type" );
string expecting = "variable property type=int";
string result = t.ToString();
Assert.AreEqual( "", errors.ToString() );
@@ -3490,7 +3490,7 @@ namespace AntlrUnitTests
"$if(users)$\n" +
"Users: $users:{$it.name$ }$\n" +
"$endif$" );
-            t.setAttribute( "users", new LinkedList<object>() );
+            t.SetAttribute( "users", new LinkedList<object>() );
string expecting = "";
string result = t.ToString();
Assert.AreEqual( expecting, result );
@@ -3508,8 +3508,8 @@ namespace AntlrUnitTests
// somehow, it must be set.
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate b = group.getInstanceOf( "method" );
-            b.setAttribute( "name", "foo" );
+            StringTemplate b = group.GetInstanceOf( "method" );
+            b.SetAttribute( "name", "foo" );
string expecting = "x=y; // ";
string result = b.ToString();
//System.err.println("result='"+result+"'");
@@ -3531,8 +3531,8 @@ namespace AntlrUnitTests
// is evaluated in the context of stat's arg list.
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate b = group.getInstanceOf( "method" );
-            b.setAttribute( "name", "foo" );
+            StringTemplate b = group.GetInstanceOf( "method" );
+            b.SetAttribute( "name", "foo" );
string expecting = "x=y; // foo";
string result = b.ToString();
//System.err.println("result='"+result+"'");
@@ -3549,8 +3549,8 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate b = group.getInstanceOf( "method" );
-            b.setAttribute( "name", "foo" );
+            StringTemplate b = group.GetInstanceOf( "method" );
+            b.SetAttribute( "name", "foo" );
string expecting = "x=y; // foo";
string result = b.ToString();
//System.err.println("result='"+result+"'");
@@ -3569,8 +3569,8 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate b = group.getInstanceOf( "method" );
-            b.setAttribute( "name", "foo" );
+            StringTemplate b = group.GetInstanceOf( "method" );
+            b.SetAttribute( "name", "foo" );
string expecting = "x=34; // foo";
string result = b.ToString();
//System.err.println("result='"+result+"'");
@@ -3589,8 +3589,8 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate b = group.getInstanceOf( "method" );
-            b.setAttribute( "name", "foo" );
+            StringTemplate b = group.GetInstanceOf( "method" );
+            b.SetAttribute( "name", "foo" );
string expecting = "x=99; // foo";
string result = b.ToString();
//System.err.println("result='"+result+"'");
@@ -3606,8 +3606,8 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate b = group.getInstanceOf( "stat" );
-            b.setAttribute( "name", "foo" );
+            StringTemplate b = group.GetInstanceOf( "stat" );
+            b.SetAttribute( "name", "foo" );
string expecting = "x=99; // foo";
string result = b.ToString();
//System.err.println("result='"+result+"'");
@@ -3626,9 +3626,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate b = group.getInstanceOf( "method" );
-            b.setAttribute( "name", "foo" );
-            b.setAttribute( "size", "2" );
+            StringTemplate b = group.GetInstanceOf( "method" );
+            b.SetAttribute( "name", "foo" );
+            b.SetAttribute( "size", "2" );
string expecting = "x=foo; // foo";
string result = b.ToString();
//System.err.println("result='"+result+"'");
@@ -3647,9 +3647,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate b = group.getInstanceOf( "method" );
-            b.setAttribute( "name", "foo" );
-            b.setAttribute( "size", "2" );
+            StringTemplate b = group.GetInstanceOf( "method" );
+            b.SetAttribute( "name", "foo" );
+            b.SetAttribute( "size", "2" );
string expecting = "x= [foo] ; // foo";
string result = b.ToString();
//System.err.println("result='"+result+"'");
@@ -3668,8 +3668,8 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate b = group.getInstanceOf( "method" );
-            b.setAttribute( "name", "foo" );
+            StringTemplate b = group.GetInstanceOf( "method" );
+            b.SetAttribute( "name", "foo" );
string expecting = "x=34; // foo";
string result = b.ToString();
Assert.AreEqual( expecting, result );
@@ -3687,9 +3687,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate b = group.getInstanceOf( "method" );
-            b.setAttribute( "name", "foo" );
-            b.setAttribute( "size", "34" );
+            StringTemplate b = group.GetInstanceOf( "method" );
+            b.SetAttribute( "name", "foo" );
+            b.SetAttribute( "size", "34" );
string expecting = "x=34;";
string result = b.ToString();
Assert.AreEqual( expecting, result );
@@ -3708,11 +3708,11 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate f = group.getInstanceOf( "file" );
-            f.setAttribute( "size", "34" );
-            StringTemplate m = group.getInstanceOf( "method" );
-            m.setAttribute( "name", "foo" );
-            f.setAttribute( "m", m );
+            StringTemplate f = group.GetInstanceOf( "file" );
+            f.SetAttribute( "size", "34" );
+            StringTemplate m = group.GetInstanceOf( "method" );
+            m.SetAttribute( "name", "foo" );
+            f.SetAttribute( "m", m );
string expecting = "x=34.0;";
string result = m.ToString();
Assert.AreEqual( expecting, result );
@@ -3731,9 +3731,9 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ) );
-            StringTemplate b = group.getInstanceOf( "method" );
-            b.setAttribute( "name", "foo" );
-            b.setAttribute( "size", "34" );
+            StringTemplate b = group.GetInstanceOf( "method" );
+            b.SetAttribute( "name", "foo" );
+            b.SetAttribute( "size", "34" );
string expecting = "x=34;";
string result = b.ToString();
Assert.AreEqual( expecting, result );
@@ -3748,7 +3748,7 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate b = group.getInstanceOf( "b" );
+            StringTemplate b = group.GetInstanceOf( "b" );
string expecting = ".foo.";
string result = b.ToString();
Assert.AreEqual( expecting, result );
@@ -3820,9 +3820,9 @@ namespace AntlrUnitTests
StringTemplate st = new StringTemplate(
"date: <created>",
typeof( AngleBracketTemplateLexer ) );
-            st.setAttribute( "created",
+            st.SetAttribute( "created",
new DateTime( 2005, 07, 05 ) );
-            st.registerRenderer( typeof( DateTime ), new DateRenderer() );
+            st.RegisterRenderer( typeof( DateTime ), new DateRenderer() );
string expecting = "date: 2005.07.05";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -3834,9 +3834,9 @@ namespace AntlrUnitTests
StringTemplate st = new StringTemplate(
"date: <created; format=\"yyyy.MM.dd\">",
typeof( AngleBracketTemplateLexer ) );
-            st.setAttribute( "created",
+            st.SetAttribute( "created",
new DateTime( 2005, 07, 05 ) );
-            st.registerRenderer( typeof( DateTime ), new DateRenderer3() );
+            st.RegisterRenderer( typeof( DateTime ), new DateRenderer3() );
string expecting = "date: 2005.07.05";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -3848,10 +3848,10 @@ namespace AntlrUnitTests
StringTemplate st = new StringTemplate(
"The names: <names; format=\"upper\">",
typeof( AngleBracketTemplateLexer ) );
-            st.setAttribute( "names", "ter" );
-            st.setAttribute( "names", "tom" );
-            st.setAttribute( "names", "sriram" );
-            st.registerRenderer( typeof( string ), new StringRenderer() );
+            st.SetAttribute( "names", "ter" );
+            st.SetAttribute( "names", "tom" );
+            st.SetAttribute( "names", "sriram" );
+            st.RegisterRenderer( typeof( string ), new StringRenderer() );
string expecting = "The names: TERTOMSRIRAM";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -3863,10 +3863,10 @@ namespace AntlrUnitTests
StringTemplate st = new StringTemplate(
"The names: <names; separator=\" and \", format=\"upper\">",
typeof( AngleBracketTemplateLexer ) );
-            st.setAttribute( "names", "ter" );
-            st.setAttribute( "names", "tom" );
-            st.setAttribute( "names", "sriram" );
-            st.registerRenderer( typeof( string ), new StringRenderer() );
+            st.SetAttribute( "names", "ter" );
+            st.SetAttribute( "names", "tom" );
+            st.SetAttribute( "names", "sriram" );
+            st.RegisterRenderer( typeof( string ), new StringRenderer() );
string expecting = "The names: TER and TOM and SRIRAM";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -3882,8 +3882,8 @@ namespace AntlrUnitTests
names.Add( "ter" );
names.Add( null );
names.Add( "sriram" );
-            st.setAttribute( "names", names );
-            st.registerRenderer( typeof( string ), new StringRenderer() );
+            st.SetAttribute( "names", names );
+            st.RegisterRenderer( typeof( string ), new StringRenderer() );
string expecting = "The names: TER and N/A and SRIRAM";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -3900,10 +3900,10 @@ namespace AntlrUnitTests
StringTemplate st = new StringTemplate(
"date: <created>",
typeof( AngleBracketTemplateLexer ) );
-            st.setAttribute( "created",
+            st.SetAttribute( "created",
new DateTime( 2005, 07, 05 ) );
-            outer.setAttribute( "x", st );
-            outer.registerRenderer( typeof( DateTime ), new DateRenderer() );
+            outer.SetAttribute( "x", st );
+            outer.RegisterRenderer( typeof( DateTime ), new DateRenderer() );
string expecting = "X: date: 2005.07.05";
string result = outer.ToString();
Assert.AreEqual( expecting, result );
@@ -3918,10 +3918,10 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "dateThing" );
-            st.setAttribute( "created",
+            StringTemplate st = group.GetInstanceOf( "dateThing" );
+            st.SetAttribute( "created",
new DateTime( 2005, 07, 05 ) );
-            group.registerRenderer( typeof( DateTime ), new DateRenderer() );
+            group.RegisterRenderer( typeof( DateTime ), new DateRenderer() );
string expecting = "date: 2005.07.05";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -3936,11 +3936,11 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "dateThing" );
-            st.setAttribute( "created",
+            StringTemplate st = group.GetInstanceOf( "dateThing" );
+            st.SetAttribute( "created",
new DateTime( 2005, 07, 05 ) );
-            group.registerRenderer( typeof( DateTime ), new DateRenderer() );
-            st.registerRenderer( typeof( DateTime ), new DateRenderer2() );
+            group.RegisterRenderer( typeof( DateTime ), new DateRenderer() );
+            st.RegisterRenderer( typeof( DateTime ), new DateRenderer2() );
string expecting = "date: 07/05/2005";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -3956,9 +3956,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "var" );
-            st.setAttribute( "type", "int" );
-            st.setAttribute( "name", "x" );
+            StringTemplate st = group.GetInstanceOf( "var" );
+            st.SetAttribute( "type", "int" );
+            st.SetAttribute( "name", "x" );
string expecting = "int x = 0;";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -3974,10 +3974,10 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "var" );
-            st.setAttribute( "w", "L" );
-            st.setAttribute( "type", "int" );
-            st.setAttribute( "name", "x" );
+            StringTemplate st = group.GetInstanceOf( "var" );
+            st.SetAttribute( "w", "L" );
+            st.SetAttribute( "type", "int" );
+            st.SetAttribute( "name", "x" );
string expecting = "int x = 0L;";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -3996,10 +3996,10 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "var" );
-            st.setAttribute( "w", "L" );
-            st.setAttribute( "type", new StringTemplate( "int" ) );
-            st.setAttribute( "name", "x" );
+            StringTemplate st = group.GetInstanceOf( "var" );
+            st.SetAttribute( "w", "L" );
+            st.SetAttribute( "type", new StringTemplate( "int" ) );
+            st.SetAttribute( "name", "x" );
string expecting = "int x = 0L;";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -4015,10 +4015,10 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "var" );
-            st.setAttribute( "w", "L" );
-            st.setAttribute( "type", "double" ); // double not in typeInit map
-            st.setAttribute( "name", "x" );
+            StringTemplate st = group.GetInstanceOf( "var" );
+            st.SetAttribute( "w", "L" );
+            st.SetAttribute( "type", "double" ); // double not in typeInit map
+            st.SetAttribute( "name", "x" );
string expecting = "double x = ;"; // weird, but tests default value is key
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -4034,9 +4034,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "var" );
-            st.setAttribute( "type", "int" );
-            st.setAttribute( "name", "x" );
+            StringTemplate st = group.GetInstanceOf( "var" );
+            st.SetAttribute( "type", "int" );
+            st.SetAttribute( "name", "x" );
string expecting = "int x = ;";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -4052,9 +4052,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "var" );
-            st.setAttribute( "type", "float" );
-            st.setAttribute( "name", "x" );
+            StringTemplate st = group.GetInstanceOf( "var" );
+            st.SetAttribute( "type", "float" );
+            st.SetAttribute( "name", "x" );
string expecting = "float x = ;";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -4070,9 +4070,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "var" );
-            st.setAttribute( "type", "UserRecord" );
-            st.setAttribute( "name", "x" );
+            StringTemplate st = group.GetInstanceOf( "var" );
+            st.SetAttribute( "type", "UserRecord" );
+            st.SetAttribute( "name", "x" );
string expecting = "UserRecord x = null;";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -4088,9 +4088,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "var" );
-            st.setAttribute( "type", "UserRecord" );
-            st.setAttribute( "name", "x" );
+            StringTemplate st = group.GetInstanceOf( "var" );
+            st.SetAttribute( "type", "UserRecord" );
+            st.SetAttribute( "name", "x" );
string expecting = "UserRecord x = ;";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -4106,9 +4106,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "var" );
-            st.setAttribute( "type", "UserRecord" );
-            st.setAttribute( "name", "x" );
+            StringTemplate st = group.GetInstanceOf( "var" );
+            st.SetAttribute( "type", "UserRecord" );
+            st.SetAttribute( "name", "x" );
string expecting = "UserRecord x = UserRecord;";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -4129,9 +4129,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "var" );
-            st.setAttribute( "type", "default" );
-            st.setAttribute( "name", "x" );
+            StringTemplate st = group.GetInstanceOf( "var" );
+            st.SetAttribute( "type", "default" );
+            st.SetAttribute( "name", "x" );
string expecting = "default x = foo;";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -4152,7 +4152,7 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "t1" );
+            StringTemplate st = group.GetInstanceOf( "t1" );
string expecting = "default";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -4169,9 +4169,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate st = group.getInstanceOf( "intermediate" );
-            st.setAttribute( "type", "int" );
-            st.setAttribute( "name", "x" );
+            StringTemplate st = group.GetInstanceOf( "intermediate" );
+            st.SetAttribute( "type", "int" );
+            st.SetAttribute( "name", "x" );
string expecting = "int x = 0;";
string result = st.ToString();
Assert.AreEqual( expecting, result );
@@ -4188,11 +4188,11 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate interm = group.getInstanceOf( "intermediate" );
-            StringTemplate var = group.getInstanceOf( "var" );
-            var.setAttribute( "type", "int" );
-            var.setAttribute( "name", "x" );
-            interm.setAttribute( "stuff", var );
+            StringTemplate interm = group.GetInstanceOf( "intermediate" );
+            StringTemplate var = group.GetInstanceOf( "var" );
+            var.SetAttribute( "type", "int" );
+            var.SetAttribute( "name", "x" );
+            interm.SetAttribute( "stuff", var );
string expecting = "int x = 0;";
string result = interm.ToString();
Assert.AreEqual( expecting, result );
@@ -4207,7 +4207,7 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate a = group.getInstanceOf( "foo" );
+            StringTemplate a = group.GetInstanceOf( "foo" );
string expecting = "";
string result = a.ToString();
Assert.AreEqual( expecting, result );
@@ -4222,7 +4222,7 @@ namespace AntlrUnitTests
"x(a,b) ::= \"a=<a>, b=<b>\"" + newline;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate a = group.getInstanceOf( "top" );
+            StringTemplate a = group.GetInstanceOf( "top" );
string expecting = "a=, b=";
string result = a.ToString();
Assert.AreEqual( expecting, result );
@@ -4238,7 +4238,7 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ) );
-            StringTemplate a = group.getInstanceOf( "top" );
+            StringTemplate a = group.GetInstanceOf( "top" );
string expecting = "a=, b=";
string result = a.ToString();
Assert.AreEqual( expecting, result );
@@ -4255,7 +4255,7 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"Danish: \x0143 char"
);
-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
string expecting = "Danish: \x0143 char";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4266,7 +4266,7 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"DINGBAT CIRCLED SANS-SERIF DIGIT ONE: \x2780"
);
-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
string expecting = "DINGBAT CIRCLED SANS-SERIF DIGIT ONE: \x2780";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4277,10 +4277,10 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$first(names)$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "names", "Sriram" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "names", "Sriram" );
string expecting = "Ter";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4291,10 +4291,10 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$trunc(names); separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "names", "Sriram" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "names", "Sriram" );
string expecting = "Ter, Tom";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4305,10 +4305,10 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$rest(names); separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "names", "Sriram" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "names", "Sriram" );
string expecting = "Tom, Sriram";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4319,8 +4319,8 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$rest(names); separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", new List<object>() );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", new List<object>() );
string expecting = "";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4335,11 +4335,11 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate e = group.getInstanceOf( "a" );
+            StringTemplate e = group.GetInstanceOf( "a" );
IList names = new List<object>();
names.Add( "Ter" );
names.Add( "Tom" );
-            e.setAttribute( "names", names );
+            e.SetAttribute( "names", names );
string expecting = "Tom, Tom";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4350,10 +4350,10 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$last(names)$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "names", "Sriram" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "names", "Sriram" );
string expecting = "Sriram";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4365,12 +4365,12 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$[first(mine),rest(yours)]; separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "mine", "1" );
-            e.setAttribute( "mine", "2" );
-            e.setAttribute( "mine", "3" );
-            e.setAttribute( "yours", "a" );
-            e.setAttribute( "yours", "b" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "mine", "1" );
+            e.SetAttribute( "mine", "2" );
+            e.SetAttribute( "mine", "3" );
+            e.SetAttribute( "yours", "a" );
+            e.SetAttribute( "yours", "b" );
string expecting = "1, b";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4382,11 +4382,11 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$[mine,yours]; separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "mine", "1" );
-            e.setAttribute( "mine", "2" );
-            e.setAttribute( "mine", "3" );
-            e.setAttribute( "yours", "a" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "mine", "1" );
+            e.SetAttribute( "mine", "2" );
+            e.SetAttribute( "mine", "3" );
+            e.SetAttribute( "yours", "a" );
string expecting = "1, 2, 3, a";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4401,14 +4401,14 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate e = group.getInstanceOf( "a" );
+            StringTemplate e = group.GetInstanceOf( "a" );
IList mine = new List<object>();
mine.Add( "Ter" );
mine.Add( "Tom" );
-            e.setAttribute( "mine", mine );
+            e.SetAttribute( "mine", mine );
IList yours = new List<object>();
yours.Add( "Foo" );
-            e.setAttribute( "yours", yours );
+            e.SetAttribute( "yours", yours );
string expecting = "TerTomFoo, TerTomFoo";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4423,11 +4423,11 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$[x,mine,y,yours,z]; separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "mine", "1" );
-            e.setAttribute( "mine", "2" );
-            e.setAttribute( "mine", "3" );
-            e.setAttribute( "yours", "a" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "mine", "1" );
+            e.SetAttribute( "mine", "2" );
+            e.SetAttribute( "mine", "3" );
+            e.SetAttribute( "yours", "a" );
string expecting = "1, 2, 3, a";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4438,10 +4438,10 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$first(rest(names))$" // gets 2nd element
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "names", "Sriram" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "names", "Sriram" );
string expecting = "Tom";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4452,8 +4452,8 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$first(names)$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
string expecting = "Ter";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4464,8 +4464,8 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$last(names)$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
string expecting = "Ter";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4476,8 +4476,8 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$last(names)$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", new List<object>( new object[] { "Ter" } ) );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", new List<object>( new object[] { "Ter" } ) );
string expecting = "Ter";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4488,8 +4488,8 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$rest(names)$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
string expecting = "";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4500,8 +4500,8 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$rest(names)$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", new List<object>( new object[] { "Ter" } ) );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", new List<object>( new object[] { "Ter" } ) );
string expecting = "";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4512,9 +4512,9 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$rest(names)$, $rest(names)$" // gets 2nd element
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
string expecting = "Tom, Tom";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4535,11 +4535,11 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ) );
-            StringTemplate e = group.getInstanceOf( "root" );
+            StringTemplate e = group.GetInstanceOf( "root" );
IList names = new List<object>();
names.Add( "Ter" );
names.Add( "Tom" );
-            e.setAttribute( "names", names.iterator() );
+            e.SetAttribute( "names", names.iterator() );
string expecting = "TerTom, ";  // This does not give TerTom twice!!
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4563,9 +4563,9 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ) );
-            StringTemplate e = group.getInstanceOf( "root" );
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
+            StringTemplate e = group.GetInstanceOf( "root" );
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
String expecting = "Tom, Tom";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4577,9 +4577,9 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$rest(names)$, $rest(names)$" // gets 2nd element
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
string expecting = "Tom, Tom";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4590,12 +4590,12 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$names; separator=\", \"$" // gets 2nd element
);
-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
IList names = new List<object>();
names.Add( "Ter" );
names.Add( "Tom" );
-            e.setAttribute( "names", names );
-            e.setAttribute( "names", "Sriram" );
+            e.SetAttribute( "names", names );
+            e.SetAttribute( "names", "Sriram" );
string expecting = "Ter, Tom, Sriram";
Assert.AreEqual( expecting, e.ToString() );

@@ -4608,12 +4608,12 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$names; separator=\", \"$" // gets 2nd element
);
-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
IList names = new List<object>();
names.Add( "Ter" );
names.Add( "Tom" );
-            e.setAttribute( "names", "Sriram" ); // single element first now
-            e.setAttribute( "names", names );
+            e.SetAttribute( "names", "Sriram" ); // single element first now
+            e.SetAttribute( "names", names );
string expecting = "Sriram, Ter, Tom";
Assert.AreEqual( expecting, e.ToString() );

@@ -4626,9 +4626,9 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$names; separator=\", \"$" // gets 2nd element
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", new string[] { "Ter", "Tom" } );
-            e.setAttribute( "names", "Sriram" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", new string[] { "Ter", "Tom" } );
+            e.SetAttribute( "names", "Sriram" );
string expecting = "Ter, Tom, Sriram";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4642,9 +4642,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate e = group.getInstanceOf( "f" );
-            e.setAttribute( "x", "Ter" );
-            e.setAttribute( "x", "Tom" );
+            StringTemplate e = group.GetInstanceOf( "f" );
+            e.SetAttribute( "x", "Ter" );
+            e.SetAttribute( "x", "Tom" );
string expecting = "TerTom TerTom";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4659,9 +4659,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate e = group.getInstanceOf( "test" );
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
+            StringTemplate e = group.GetInstanceOf( "test" );
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
string expecting = "*Ter*, *Tom* ";
string result = e.ToString();
Assert.AreEqual( expecting, result );
@@ -4678,9 +4678,9 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( AngleBracketTemplateLexer ) );
-            StringTemplate e = group.getInstanceOf( "test" );
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
+            StringTemplate e = group.GetInstanceOf( "test" );
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
string expecting = "*Ter*, *Tom* ";
string result = e.ToString();
Assert.AreEqual( expecting, result );
@@ -4692,9 +4692,9 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$names:{n| $n$}; separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
string expecting = "Ter, Tom";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4705,9 +4705,9 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$names:{n| $n$:$it$}; separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
string error = null;
try
{
@@ -4727,9 +4727,9 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$names:{n| .$n$.}:{ n | _$n$_}; separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
string expecting = "_.Ter._, _.Tom._";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4740,11 +4740,11 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$first([names,phones])$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "phones", "1" );
-            e.setAttribute( "phones", "2" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "phones", "1" );
+            e.SetAttribute( "phones", "2" );
string expecting = "Ter";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4755,19 +4755,19 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$first(maps).Ter$"
);
-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
IDictionary m1 = new Dictionary<object, object>();
IDictionary m2 = new Dictionary<object, object>();
m1["Ter"] = "x5707";
-            e.setAttribute( "maps", m1 );
+            e.SetAttribute( "maps", m1 );
m2["Tom"] = "x5332";
-            e.setAttribute( "maps", m2 );
+            e.SetAttribute( "maps", m2 );
string expecting = "x5707";
Assert.AreEqual( expecting, e.ToString() );

-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
IList list = new List<object>( new object[] { m1, m2 } );
-            e.setAttribute( "maps", list );
+            e.SetAttribute( "maps", list );
expecting = "x5707";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4783,15 +4783,15 @@ namespace AntlrUnitTests
IDictionary m1 = new Dictionary<object, object>();
IDictionary m2 = new Dictionary<object, object>();
m1.Add( "Ter", "x5707" );
-            e.setAttribute( "maps", m1 );
+            e.SetAttribute( "maps", m1 );
m2.Add( "Tom", "x5332" );
-            e.setAttribute( "maps", m2 );
+            e.SetAttribute( "maps", m2 );
string expecting = "x5707";
Assert.AreEqual( expecting, e.ToString() );

-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
IList list = new List<object>() { m1, m2 };
-            e.setAttribute( "maps", list );
+            e.SetAttribute( "maps", list );
expecting = "x5707";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4803,11 +4803,11 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$[names,phones]$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "phones", "1" );
-            e.setAttribute( "phones", "2" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "phones", "1" );
+            e.SetAttribute( "phones", "2" );
string expecting = "TerTom12";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4818,11 +4818,11 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$[names,phones]; separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "phones", "1" );
-            e.setAttribute( "phones", "2" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "phones", "1" );
+            e.SetAttribute( "phones", "2" );
string expecting = "Ter, Tom, 1, 2";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4833,11 +4833,11 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$[names,phones]:{a|$a$.}$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "phones", "1" );
-            e.setAttribute( "phones", "2" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "phones", "1" );
+            e.SetAttribute( "phones", "2" );
string expecting = "Ter.Tom.1.2.";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4848,13 +4848,13 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$[names,phones,salaries]; separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "phones", "1" );
-            e.setAttribute( "phones", "2" );
-            e.setAttribute( "salaries", "big" );
-            e.setAttribute( "salaries", "huge" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "phones", "1" );
+            e.SetAttribute( "phones", "2" );
+            e.SetAttribute( "salaries", "big" );
+            e.SetAttribute( "salaries", "huge" );
string expecting = "Ter, Tom, 1, 2, big, huge";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4865,11 +4865,11 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$[names:{$it$!},phones]; separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "phones", "1" );
-            e.setAttribute( "phones", "2" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "phones", "1" );
+            e.SetAttribute( "phones", "2" );
string expecting = "Ter!, Tom!, 1, 2";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4880,11 +4880,11 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$[{$if(names)$doh$endif$},phones]; separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "phones", "1" );
-            e.setAttribute( "phones", "2" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "phones", "1" );
+            e.SetAttribute( "phones", "2" );
string expecting = "doh, 1, 2";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4895,9 +4895,9 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$[names:{$it$!},\"foo\"]:{x}; separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "phones", "1" );
-            e.setAttribute( "phones", "2" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "phones", "1" );
+            e.SetAttribute( "phones", "2" );
string expecting = "x";  // only one since template application gives nothing
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4908,11 +4908,11 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$[names, [\"foo\",\"bar\"]:{$it$!},phones]; separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "phones", "1" );
-            e.setAttribute( "phones", "2" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "phones", "1" );
+            e.SetAttribute( "phones", "2" );
string expecting = "Ter, Tom, foo!, bar!, 1, 2";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -4928,11 +4928,11 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( AngleBracketTemplateLexer ) );
-            StringTemplate e = group.getInstanceOf( "test" );
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "phones", "1" );
-            e.setAttribute( "phones", "2" );
+            StringTemplate e = group.GetInstanceOf( "test" );
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "phones", "1" );
+            e.SetAttribute( "phones", "2" );
string expecting = "*Ter**Tom**1**2*";
string result = e.ToString();
Assert.AreEqual( expecting, result );
@@ -4949,8 +4949,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( AngleBracketTemplateLexer ) );
-            StringTemplate e = group.getInstanceOf( "test" );
-            e.setAttribute( "name", "Ter" );
+            StringTemplate e = group.GetInstanceOf( "test" );
+            e.SetAttribute( "name", "Ter" );
string expecting = "*Ter*";
string result = e.ToString();
Assert.AreEqual( expecting, result );
@@ -4970,10 +4970,10 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( AngleBracketTemplateLexer ) );
-            StringTemplate e = group.getInstanceOf( "test" );
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "x", "ick" );
+            StringTemplate e = group.GetInstanceOf( "test" );
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "x", "ick" );
string expecting = "*ick**ick*";
string result = e.ToString();
Assert.AreEqual( expecting, result );
@@ -4991,9 +4991,9 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( AngleBracketTemplateLexer ) );
-            StringTemplate e = group.getInstanceOf( "test" );
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
+            StringTemplate e = group.GetInstanceOf( "test" );
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
string expecting = "*Ter*_Tom_";
string result = e.ToString();
Assert.AreEqual( expecting, result );
@@ -5011,8 +5011,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( AngleBracketTemplateLexer ), errors );
-            StringTemplate e = group.getInstanceOf( "test" );
-            e.setAttribute( "name", "Ter" );
+            StringTemplate e = group.GetInstanceOf( "test" );
+            e.SetAttribute( "name", "Ter" );
string result = e.ToString();
string expecting = "template bold must have exactly one formal arg in template context [test <invoke bold arg context>]";
Assert.AreEqual( expecting, errors.ToString() );
@@ -5029,9 +5029,9 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate e = group.getInstanceOf( "test" );
-            e.setAttribute( "templateName", "italics" );
-            e.setAttribute( "arg", "Ter" );
+            StringTemplate e = group.GetInstanceOf( "test" );
+            e.SetAttribute( "templateName", "italics" );
+            e.SetAttribute( "arg", "Ter" );
string expecting = "_Ter_";
string result = e.ToString();
Assert.AreEqual( expecting, result );
@@ -5043,13 +5043,13 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$names,phones,salaries:{n,p,s | $n$@$p$: $s$\n}$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "phones", "1" );
-            e.setAttribute( "phones", "2" );
-            e.setAttribute( "salaries", "big" );
-            e.setAttribute( "salaries", "huge" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "phones", "1" );
+            e.SetAttribute( "phones", "2" );
+            e.SetAttribute( "salaries", "big" );
+            e.SetAttribute( "salaries", "huge" );
string expecting = "Ter@1: big" + newline + "Tom@2: huge" + newline;
Assert.AreEqual( expecting, e.ToString() );
}
@@ -5060,14 +5060,14 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$names,phones,salaries:{n,p,s | $n$@$p$: $s$\n}$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "names", "Sriram" );
-            e.setAttribute( "phones", new List<object>( new object[] { "1", null, "3" } ) );
-            e.setAttribute( "salaries", "big" );
-            e.setAttribute( "salaries", "huge" );
-            e.setAttribute( "salaries", "enormous" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "names", "Sriram" );
+            e.SetAttribute( "phones", new List<object>( new object[] { "1", null, "3" } ) );
+            e.SetAttribute( "salaries", "big" );
+            e.SetAttribute( "salaries", "huge" );
+            e.SetAttribute( "salaries", "enormous" );
string expecting = "Ter@1: big" + newline +
"Tom@: huge" + newline +
"Sriram@3: enormous" + newline;
@@ -5080,13 +5080,13 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$names,phones,salaries:{n,p,s | $i0$. $n$@$p$: $s$\n}$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "phones", "1" );
-            e.setAttribute( "phones", "2" );
-            e.setAttribute( "salaries", "big" );
-            e.setAttribute( "salaries", "huge" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "phones", "1" );
+            e.SetAttribute( "phones", "2" );
+            e.SetAttribute( "salaries", "big" );
+            e.SetAttribute( "salaries", "huge" );
string expecting = "0. Ter@1: big" + newline + "1. Tom@2: huge" + newline;
Assert.AreEqual( expecting, e.ToString() );
}
@@ -5097,13 +5097,13 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$names,phones,salaries:{n,p,s | $n$@$p$: $s$}; separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "names", "Sriram" );
-            e.setAttribute( "phones", "1" );
-            e.setAttribute( "phones", "2" );
-            e.setAttribute( "salaries", "big" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "names", "Sriram" );
+            e.SetAttribute( "phones", "1" );
+            e.SetAttribute( "phones", "2" );
+            e.SetAttribute( "salaries", "big" );
string expecting = "Ter@1: big, Tom@2: , Sriram@: ";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -5114,10 +5114,10 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$names,phones,salaries:{n,p,s | $n$@$p$: $s$}; separator=\", \"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "phones", "1" );
-            e.setAttribute( "salaries", "big" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "phones", "1" );
+            e.SetAttribute( "salaries", "big" );
string expecting = "Ter@1: big";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -5129,13 +5129,13 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$names,phones,salaries:{n,p | $n$@$p$}; separator=\", \"$"
);
-            e.setErrorListener( errors );
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "phones", "1" );
-            e.setAttribute( "phones", "2" );
-            e.setAttribute( "salaries", "big" );
+            e.SetErrorListener( errors );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "phones", "1" );
+            e.SetAttribute( "phones", "2" );
+            e.SetAttribute( "salaries", "big" );
string expecting = "Ter@1, Tom@2";
Assert.AreEqual( expecting, e.ToString() );
string errorExpecting = "number of arguments [n, p] mismatch between attribute list and anonymous template in context [anonymous]";
@@ -5149,11 +5149,11 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$names,phones,salaries:{$n$@$p$}; separator=\", \"$"
);
-            e.setErrorListener( errors );
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "phones", "2" );
-            e.setAttribute( "salaries", "big" );
+            e.SetErrorListener( errors );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "phones", "2" );
+            e.SetAttribute( "salaries", "big" );
e.ToString(); // generate the error
string errorExpecting = "missing arguments in anonymous template in context [anonymous]";
Assert.AreEqual( errorExpecting, errors.ToString() );
@@ -5170,13 +5170,13 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ),
typeof( DefaultTemplateLexer ) );
-            StringTemplate p = group.getInstanceOf( "page" );
-            p.setAttribute( "names", "Ter" );
-            p.setAttribute( "names", "Tom" );
-            p.setAttribute( "names", "Sriram" );
-            p.setAttribute( "phones", "1" );
-            p.setAttribute( "phones", "2" );
-            p.setAttribute( "salaries", "big" );
+            StringTemplate p = group.GetInstanceOf( "page" );
+            p.SetAttribute( "names", "Ter" );
+            p.SetAttribute( "names", "Tom" );
+            p.SetAttribute( "names", "Sriram" );
+            p.SetAttribute( "phones", "1" );
+            p.SetAttribute( "phones", "2" );
+            p.SetAttribute( "salaries", "big" );
string expecting = "Ter@1: big, Tom@2: n/a, Sriram@n/a: n/a";
Assert.AreEqual( expecting, p.ToString() );
}
@@ -5211,7 +5211,7 @@ namespace AntlrUnitTests
null,
group );

-            StringTemplate b = subgroup.getInstanceOf( "body" );
+            StringTemplate b = subgroup.GetInstanceOf( "body" );
string expecting = "bar";
string result = b.ToString();
Assert.AreEqual( expecting, result );
@@ -5233,7 +5233,7 @@ namespace AntlrUnitTests
new StringTemplate( "$x.foo$:$x.bar$" );
object o = new NonPublicProperty();

-            st.setAttribute( "x", o );
+            st.SetAttribute( "x", o );
string expecting = "9:34";
Assert.AreEqual( expecting, st.ToString() );
}
@@ -5248,8 +5248,8 @@ namespace AntlrUnitTests
group,
"$A:{$i$. $it$}; separator=\"\\n\"$"
);
-            t.setAttribute( "A", "parrt" );
-            t.setAttribute( "A", "tombu" );
+            t.SetAttribute( "A", "parrt" );
+            t.SetAttribute( "A", "tombu" );
string expecting =
"1. parrt" + newline +
"2. tombu";
@@ -5266,8 +5266,8 @@ namespace AntlrUnitTests
group,
"$A:{$i0$. $it$}; separator=\"\\n\"$"
);
-            t.setAttribute( "A", "parrt" );
-            t.setAttribute( "A", "tombu" );
+            t.SetAttribute( "A", "parrt" );
+            t.SetAttribute( "A", "tombu" );
string expecting =
"0. parrt" + newline +
"1. tombu";
@@ -5284,10 +5284,10 @@ namespace AntlrUnitTests
group,
"$A,B:{a,b|$i$. $a$@$b$}; separator=\"\\n\"$"
);
-            t.setAttribute( "A", "parrt" );
-            t.setAttribute( "A", "tombu" );
-            t.setAttribute( "B", "x5707" );
-            t.setAttribute( "B", "x5000" );
+            t.SetAttribute( "A", "parrt" );
+            t.SetAttribute( "A", "tombu" );
+            t.SetAttribute( "B", "x5707" );
+            t.SetAttribute( "B", "x5000" );
string expecting =
"1. parrt@x5707" + newline +
"2. tombu@x5000";
@@ -5304,10 +5304,10 @@ namespace AntlrUnitTests
group,
"$A,B:{a,b|$i0$. $a$@$b$}; separator=\"\\n\"$"
);
-            t.setAttribute( "A", "parrt" );
-            t.setAttribute( "A", "tombu" );
-            t.setAttribute( "B", "x5707" );
-            t.setAttribute( "B", "x5000" );
+            t.SetAttribute( "A", "parrt" );
+            t.SetAttribute( "A", "tombu" );
+            t.SetAttribute( "B", "x5707" );
+            t.SetAttribute( "B", "x5000" );
string expecting =
"0. parrt@x5707" + newline +
"1. tombu@x5000";
@@ -5321,8 +5321,8 @@ namespace AntlrUnitTests
// context.  it can therefore see name.
StringTemplateGroup group =
new StringTemplateGroup( "test" );
-            StringTemplate main = group.defineTemplate( "main", "$foo(t={Hi, $name$}, name=\"parrt\")$" );
-            StringTemplate foo = group.defineTemplate( "foo", "$t$" );
+            StringTemplate main = group.DefineTemplate( "main", "$foo(t={Hi, $name$}, name=\"parrt\")$" );
+            StringTemplate foo = group.DefineTemplate( "foo", "$t$" );
string expecting = "Hi, parrt";
Assert.AreEqual( expecting, main.ToString() );
}
@@ -5335,7 +5335,7 @@ namespace AntlrUnitTests
string error = null;
try
{
-                t.setAttribute( "user.Name", "Kunle" );
+                t.SetAttribute( "user.Name", "Kunle" );
}
catch ( ArgumentException e )
{
@@ -5375,8 +5375,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate a = group.getInstanceOf( "array" );
-            a.setAttribute( "values",
+            StringTemplate a = group.GetInstanceOf( "array" );
+            a.SetAttribute( "values",
new int[] {3,9,20,2,1,4,6,32,5,6,77,888,2,1,6,32,5,6,77,
4,9,20,2,1,4,63,9,20,2,1,4,6,32,5,6,77,6,32,5,6,77,
3,9,20,2,1,4,6,32,5,6,77,888,1,6,32,5} );
@@ -5397,8 +5397,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate a = group.getInstanceOf( "array" );
-            a.setAttribute( "values",
+            StringTemplate a = group.GetInstanceOf( "array" );
+            a.SetAttribute( "values",
new int[] {3,9,20,2,1,4,6,32,5,6,77,888,2,1,6,32,5,6,77,
4,9,20,2,1,4,63,9,20,2,1,4,6,32,5,6,77,6,32,5,6,77,
3,9,20,2,1,4,6,32,5,6,77,888,1,6,32,5} );
@@ -5410,8 +5410,8 @@ namespace AntlrUnitTests

StringWriter sw = new StringWriter();
IStringTemplateWriter stw = new AutoIndentWriter( sw, "\n" ); // force \n as newline
-            stw.setLineWidth( 40 );
-            a.write( stw );
+            stw.SetLineWidth( 40 );
+            a.Write( stw );
string result = sw.ToString();
Assert.AreEqual( expecting, result );
}
@@ -5425,8 +5425,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate a = group.getInstanceOf( "array" );
-            a.setAttribute( "values",
+            StringTemplate a = group.GetInstanceOf( "array" );
+            a.SetAttribute( "values",
new int[] {3,9,20,2,1,4,6,32,5,6,77,888,2,1,6,32,5,6,77,
4,9,20,2,1,4,63,9,20,2,1,4,6,32,5,6,77,6,32,5,6,77,
3,9,20,2,1,4,6,32,5,6,77,888,1,6,32,5} );
@@ -5449,11 +5449,11 @@ namespace AntlrUnitTests
new StringTemplateGroup( new StringReader( templates ) );

StringTemplate x = new StringTemplate( group, "<\\n>{ <stuff; anchor, separator=\",\\n\"> }<\\n>" );
-            x.setAttribute( "stuff", "1" );
-            x.setAttribute( "stuff", "2" );
-            x.setAttribute( "stuff", "3" );
-            StringTemplate a = group.getInstanceOf( "array" );
-            a.setAttribute( "values", new object[] { "a", x, "b" } );
+            x.SetAttribute( "stuff", "1" );
+            x.SetAttribute( "stuff", "2" );
+            x.SetAttribute( "stuff", "3" );
+            StringTemplate a = group.GetInstanceOf( "array" );
+            a.SetAttribute( "values", new object[] { "a", x, "b" } );
String expecting =
"{ a, " + newline +
"  { 1," + newline +
@@ -5472,8 +5472,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate a = group.getInstanceOf( "func" );
-            a.setAttribute( "args",
+            StringTemplate a = group.GetInstanceOf( "func" );
+            a.SetAttribute( "args",
new string[] { "a", "b", "c", "d", "e", "f" } );
string expecting =
"       FUNCTION line( a,b,c,d," + newline +
@@ -5490,8 +5490,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate a = group.getInstanceOf( "array" );
-            a.setAttribute( "values",
+            StringTemplate a = group.GetInstanceOf( "array" );
+            a.SetAttribute( "values",
new int[] {3,9,20,2,1,4,6,32,5,6,77,888,2,1,6,32,5,6,77,
4,9,20,2,1,4,63,9,20,2,1,4,6} );
string expecting =
@@ -5512,8 +5512,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate a = group.getInstanceOf( "duh" );
-            a.setAttribute( "chars", new string[] { "a", "b", "c", "d", "e" } );
+            StringTemplate a = group.GetInstanceOf( "duh" );
+            a.SetAttribute( "chars", new string[] { "a", "b", "c", "d", "e" } );
// lineWidth==3 implies that we can have 3 characters at most
string expecting =
"abc" + newline +
@@ -5530,8 +5530,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate a = group.getInstanceOf( "duh" );
-            a.setAttribute( "chars", new string[] { "a", "b", "\n", "d", "e" } );
+            StringTemplate a = group.GetInstanceOf( "duh" );
+            a.SetAttribute( "chars", new string[] { "a", "b", "\n", "d", "e" } );
// don't do \n if it's last element anyway
string expecting =
"ab" + newline +
@@ -5548,8 +5548,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate a = group.getInstanceOf( "duh" );
-            a.setAttribute( "chars", new string[] { "a", "b", "c", "\n", "d", "e" } );
+            StringTemplate a = group.GetInstanceOf( "duh" );
+            a.SetAttribute( "chars", new string[] { "a", "b", "c", "\n", "d", "e" } );
// Once we wrap, we must dump chars as we see them.  A newline right
// after a wrap is just an "unfortunate" event.  People will expect
// a newline if it's in the data.
@@ -5569,8 +5569,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate a = group.getInstanceOf( "duh" );
-            a.setAttribute( "data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 } );
+            StringTemplate a = group.GetInstanceOf( "duh" );
+            a.SetAttribute( "data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 } );
string expecting =
"![1][2][3]" + newline + // width=9 is the 3 char; don't break til after ]
"[4][5][6]" + newline +
@@ -5587,8 +5587,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate a = group.getInstanceOf( "duh" );
-            a.setAttribute( "data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 } );
+            StringTemplate a = group.GetInstanceOf( "duh" );
+            a.SetAttribute( "data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 } );
string expecting =
"![1][2][3]" + newline +
" [4][5][6]" + newline +
@@ -5606,10 +5606,10 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate t = group.getInstanceOf( "top" );
-            StringTemplate s = group.getInstanceOf( "str" );
-            s.setAttribute( "data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 } );
-            t.setAttribute( "s", s );
+            StringTemplate t = group.GetInstanceOf( "top" );
+            StringTemplate s = group.GetInstanceOf( "str" );
+            s.SetAttribute( "data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 } );
+            t.SetAttribute( "s", s );
string expecting =
"  ![1][2]!+" + newline +
"  ![3][4]!+" + newline +
@@ -5628,8 +5628,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate a = group.getInstanceOf( "duh" );
-            a.setAttribute( "chars", new string[] { "a", "b", "c", "d", "e" } );
+            StringTemplate a = group.GetInstanceOf( "duh" );
+            a.SetAttribute( "chars", new string[] { "a", "b", "c", "d", "e" } );
//
string expecting =
"    a" + newline +
@@ -5649,8 +5649,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate a = group.getInstanceOf( "duh" );
-            a.setAttribute( "chars", new string[] { "a", "b", "c", "d", "e" } );
+            StringTemplate a = group.GetInstanceOf( "duh" );
+            a.SetAttribute( "chars", new string[] { "a", "b", "c", "d", "e" } );
//
string expecting =
"    ab" + newline +
@@ -5670,10 +5670,10 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate top = group.getInstanceOf( "top" );
-            StringTemplate duh = group.getInstanceOf( "duh" );
-            duh.setAttribute( "chars", new string[] { "a", "b", "c", "d", "e" } );
-            top.setAttribute( "d", duh );
+            StringTemplate top = group.GetInstanceOf( "top" );
+            StringTemplate duh = group.GetInstanceOf( "duh" );
+            duh.SetAttribute( "chars", new string[] { "a", "b", "c", "d", "e" } );
+            top.SetAttribute( "d", duh );
string expecting =
"    ab" + newline +
"    cd" + newline +
@@ -5692,10 +5692,10 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate top = group.getInstanceOf( "top" );
-            StringTemplate duh = group.getInstanceOf( "duh" );
-            duh.setAttribute( "chars", new string[] { "a", "b", "c", "d", "e" } );
-            top.setAttribute( "d", duh );
+            StringTemplate top = group.GetInstanceOf( "top" );
+            StringTemplate duh = group.GetInstanceOf( "duh" );
+            duh.SetAttribute( "chars", new string[] { "a", "b", "c", "d", "e" } );
+            top.SetAttribute( "d", duh );

string expecting =
"  x: ab" + newline +
@@ -5713,10 +5713,10 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate a = group.getInstanceOf( "m" );
-            a.setAttribute( "args",
+            StringTemplate a = group.GetInstanceOf( "m" );
+            a.SetAttribute( "args",
new string[] { "a", "b", "c" } );
-            a.setAttribute( "body", "i=3;" );
+            a.SetAttribute( "body", "i=3;" );
// make it wrap because of ") throws Ick { " literal
int n = "public void foo(a, b, c".Length;
string expecting =
@@ -5733,8 +5733,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate m = group.getInstanceOf( "m" );
-            m.setAttribute( "body", "i=3;" );
+            StringTemplate m = group.GetInstanceOf( "m" );
+            m.SetAttribute( "body", "i=3;" );
// make it wrap because of ") throws Ick { " literal
string expecting =
"{ " + newline +
@@ -5752,14 +5752,14 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-            StringTemplate top = group.getInstanceOf( "top" );
-            StringTemplate a = group.getInstanceOf( "array" );
-            a.setAttribute( "values",
+            StringTemplate top = group.GetInstanceOf( "top" );
+            StringTemplate a = group.GetInstanceOf( "array" );
+            a.SetAttribute( "values",
new int[] {3,9,20,2,1,4,6,32,5,6,77,888,2,1,6,32,5,6,77,
4,9,20,2,1,4,63,9,20,2,1,4,6,32,5,6,77,6,32,5,6,77,
3,9,20,2,1,4,6,32,5,6,77,888,1,6,32,5} );
-            top.setAttribute( "arrays", a );
-            top.setAttribute( "arrays", a ); // add twice
+            top.SetAttribute( "arrays", a );
+            top.SetAttribute( "arrays", a ); // add twice
string expecting =
"Arrays: int[] a = { 3,9,20,2,1,4,6,32,5," + newline +
"                    6,77,888,2,1,6,32,5," + newline +
@@ -5782,8 +5782,8 @@ namespace AntlrUnitTests
{
StringTemplateGroup group =
new StringTemplateGroup( "test" );
-            StringTemplate t = group.defineTemplate( "t", "\\\\$v$" );
-            t.setAttribute( "v", "Joe" );
+            StringTemplate t = group.DefineTemplate( "t", "\\\\$v$" );
+            t.SetAttribute( "v", "Joe" );
//System.out.println(t);
string expecting = "\\Joe";
Assert.AreEqual( expecting, t.ToString() );
@@ -5794,8 +5794,8 @@ namespace AntlrUnitTests
{
StringTemplateGroup group =
new StringTemplateGroup( "test", typeof( AngleBracketTemplateLexer ) );
-            StringTemplate t = group.defineTemplate( "t", "<v:{a|\\\\<a>}>" );
-            t.setAttribute( "v", "Joe" );
+            StringTemplate t = group.DefineTemplate( "t", "<v:{a|\\\\<a>}>" );
+            t.SetAttribute( "v", "Joe" );
//System.out.println(t);
string expecting = "\\Joe";
Assert.AreEqual( expecting, t.ToString() );
@@ -5807,13 +5807,13 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( "test", typeof( AngleBracketTemplateLexer ) );
StringTemplate t =
-                group.defineTemplate( "t", "<data:array()>" );
-            group.defineTemplate( "array", "[<it:element(); separator=\",\">]" );
-            group.defineTemplate( "element", "<it>" );
+                group.DefineTemplate( "t", "<data:array()>" );
+            group.DefineTemplate( "array", "[<it:element(); separator=\",\">]" );
+            group.DefineTemplate( "element", "<it>" );
IList data = new List<object>();
data.Add( new int[] { 1, 2, 3 } );
data.Add( new int[] { 10, 20, 30 } );
-            t.setAttribute( "data", data );
+            t.SetAttribute( "data", data );
//System.out.println(t);
string expecting = "[1,2,3][10,20,30]";
Assert.AreEqual( expecting, t.ToString() );
@@ -5827,7 +5827,7 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( "test", typeof( AngleBracketTemplateLexer ) );
StringTemplate t =
-                group.defineTemplate( "t", "<data; null=\"0\">" );
+                group.DefineTemplate( "t", "<data; null=\"0\">" );
//System.out.println(t);
string expecting = "0";
Assert.AreEqual( expecting, t.ToString() );
@@ -5839,11 +5839,11 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( "test", typeof( AngleBracketTemplateLexer ) );
StringTemplate t =
-                group.defineTemplate( "t", "<data; null=\"\", separator=\", \">" );
+                group.DefineTemplate( "t", "<data; null=\"\", separator=\", \">" );
IList data = new List<object>();
data.Add( null );
data.Add( 1 );
-            t.setAttribute( "data", data );
+            t.SetAttribute( "data", data );
string expecting = ", 1";
Assert.AreEqual( expecting, t.ToString() );
}
@@ -5854,10 +5854,10 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( "test", typeof( AngleBracketTemplateLexer ) );
StringTemplate t =
-                group.defineTemplate( "t", "<data; null=\"0\">" );
+                group.DefineTemplate( "t", "<data; null=\"0\">" );
IList data = new List<object>();
data.Add( null );
-            t.setAttribute( "data", data );
+            t.SetAttribute( "data", data );
//System.out.println(t);
string expecting = "0";
Assert.AreEqual( expecting, t.ToString() );
@@ -5869,7 +5869,7 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( "test", typeof( AngleBracketTemplateLexer ) );
StringTemplate t =
-                group.defineTemplate( "t", "<data; null=\"-1\", separator=\", \">" );
+                group.DefineTemplate( "t", "<data; null=\"-1\", separator=\", \">" );
IList data = new List<object>();
data.Add( null );
data.Add( 1 );
@@ -5877,7 +5877,7 @@ namespace AntlrUnitTests
data.Add( 3 );
data.Add( 4 );
data.Add( null );
-            t.setAttribute( "data", data );
+            t.SetAttribute( "data", data );
//System.out.println(t);
string expecting = "-1, 1, -1, 3, 4, -1";
Assert.AreEqual( expecting, t.ToString() );
@@ -5889,7 +5889,7 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( "test", typeof( AngleBracketTemplateLexer ) );
StringTemplate t =
-                group.defineTemplate( "t", "<data; separator=\", \">" );
+                group.DefineTemplate( "t", "<data; separator=\", \">" );
IList data = new List<object>();
data.Add( null );
data.Add( 1 );
@@ -5897,7 +5897,7 @@ namespace AntlrUnitTests
data.Add( 3 );
data.Add( 4 );
data.Add( null );
-            t.setAttribute( "data", data );
+            t.SetAttribute( "data", data );
//System.out.println(t);
string expecting = "1, 3, 4";
Assert.AreEqual( expecting, t.ToString() );
@@ -5909,14 +5909,14 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( "test", typeof( AngleBracketTemplateLexer ) );
StringTemplate t =
-                group.defineTemplate( "t", "<data:array(); null=\"-1\", separator=\", \">" );
-            group.defineTemplate( "array", "<it>" );
+                group.DefineTemplate( "t", "<data:array(); null=\"-1\", separator=\", \">" );
+            group.DefineTemplate( "array", "<it>" );
IList data = new List<object>();
data.Add( 0 );
data.Add( null );
data.Add( 2 );
data.Add( null );
-            t.setAttribute( "data", data );
+            t.SetAttribute( "data", data );
string expecting = "0, -1, 2, -1";
Assert.AreEqual( expecting, t.ToString() );
}
@@ -5927,14 +5927,14 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( "test", typeof( AngleBracketTemplateLexer ) );
StringTemplate t =
-                group.defineTemplate( "t", "<data:array(); null=\"-1\", separator=\", \">" );
-            group.defineTemplate( "array", "<it>" );
+                group.DefineTemplate( "t", "<data:array(); null=\"-1\", separator=\", \">" );
+            group.DefineTemplate( "array", "<it>" );
IList data = new List<object>();
data.Add( null );
data.Add( 0 );
data.Add( null );
data.Add( 2 );
-            t.setAttribute( "data", data );
+            t.SetAttribute( "data", data );
string expecting = "-1, 0, -1, 2";
Assert.AreEqual( expecting, t.ToString() );
}
@@ -5945,11 +5945,11 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( "test", typeof( AngleBracketTemplateLexer ) );
StringTemplate t =
-                group.defineTemplate( "t", "<data:array(); null=\"-1\", separator=\", \">" );
-            group.defineTemplate( "array", "<it>" );
+                group.DefineTemplate( "t", "<data:array(); null=\"-1\", separator=\", \">" );
+            group.DefineTemplate( "array", "<it>" );
IList data = new List<object>();
data.Add( null );
-            t.setAttribute( "data", data );
+            t.SetAttribute( "data", data );
string expecting = "-1";
Assert.AreEqual( expecting, t.ToString() );
}
@@ -5960,8 +5960,8 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( "test", typeof( AngleBracketTemplateLexer ) );
StringTemplate t =
-                group.defineTemplate( "t", "<data:array(); null=\"-1\", separator=\", \">" );
-            group.defineTemplate( "array", "<it>" );
+                group.DefineTemplate( "t", "<data:array(); null=\"-1\", separator=\", \">" );
+            group.DefineTemplate( "array", "<it>" );
string expecting = "-1";
Assert.AreEqual( expecting, t.ToString() );
}
@@ -5972,10 +5972,10 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$length(names)$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "names", "Tom" );
-            e.setAttribute( "names", "Sriram" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "names", "Tom" );
+            e.SetAttribute( "names", "Sriram" );
string expecting = "3";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -5986,12 +5986,12 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$length(names)$"
);
-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
IDictionary m = new Dictionary<object, object>();
m["Tom"] = "foo";
m["Sriram"] = "foo";
m["Doug"] = "foo";
-            e.setAttribute( "names", m );
+            e.SetAttribute( "names", m );
string expecting = "3";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -6002,12 +6002,12 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$length(names)$"
);
-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
HashSet<object> m = new HashSet<object>();
m.Add( "Tom" );
m.Add( "Sriram" );
m.Add( "Doug" );
-            e.setAttribute( "names", m );
+            e.SetAttribute( "names", m );
string expecting = "3";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -6018,8 +6018,8 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$length(names)$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", null );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", null );
string expecting = "0";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -6030,8 +6030,8 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$length(names)$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
string expecting = "1";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -6042,8 +6042,8 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$length(ints)$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "ints", new int[] { 1, 2, 3, 4 } );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "ints", new int[] { 1, 2, 3, 4 } );
string expecting = "4";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -6054,13 +6054,13 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$length(data)$"
);
-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
IList data = new List<object>();
data.Add( "Hi" );
data.Add( null );
data.Add( "mom" );
data.Add( null );
-            e.setAttribute( "data", data );
+            e.SetAttribute( "data", data );
string expecting = "4"; // nulls are counted
Assert.AreEqual( expecting, e.ToString() );
}
@@ -6071,13 +6071,13 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$strip(data)$"
);
-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
IList data = new List<object>();
data.Add( "Hi" );
data.Add( null );
data.Add( "mom" );
data.Add( null );
-            e.setAttribute( "data", data );
+            e.SetAttribute( "data", data );
string expecting = "Himom"; // nulls are skipped
Assert.AreEqual( expecting, e.ToString() );
}
@@ -6088,7 +6088,7 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$strip(data):{list | $strip(list)$}; separator=\",\"$"
);
-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
IList data = new List<object>();
IList dataOne = new List<object>();
dataOne.Add( "Hi" );
@@ -6101,7 +6101,7 @@ namespace AntlrUnitTests
dataTwo.Add( "dad" );
dataTwo.Add( null );
data.Add( dataTwo );
-            e.setAttribute( "data", data );
+            e.SetAttribute( "data", data );
string expecting = "Himom,Hidad"; // nulls are skipped
Assert.AreEqual( expecting, e.ToString() );
}
@@ -6112,8 +6112,8 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$strip(data)$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "data", "hi" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "data", "hi" );
string expecting = "hi"; // nulls are skipped
Assert.AreEqual( expecting, e.ToString() );
}
@@ -6124,7 +6124,7 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$strip(data)$"
);
-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
string expecting = ""; // nulls are skipped
Assert.AreEqual( expecting, e.ToString() );
}
@@ -6139,12 +6139,12 @@ namespace AntlrUnitTests
;
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
-            StringTemplate e = group.getInstanceOf( "a" );
+            StringTemplate e = group.GetInstanceOf( "a" );
IList names = new List<object>();
names.Add( "Ter" );
names.Add( null );
names.Add( "Tom" );
-            e.setAttribute( "names", names );
+            e.SetAttribute( "names", names );
string expecting = "TerTom, TerTom";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -6155,13 +6155,13 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$length(strip(data))$"
);
-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
IList data = new List<object>();
data.Add( "Hi" );
data.Add( null );
data.Add( "mom" );
data.Add( null );
-            e.setAttribute( "data", data );
+            e.SetAttribute( "data", data );
string expecting = "2"; // nulls are counted
Assert.AreEqual( expecting, e.ToString() );
}
@@ -6172,7 +6172,7 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$length(strip(data))$"
);
-            e = e.getInstanceOf();
+            e = e.GetInstanceOf();
IList data = new List<object>();
data.Add( null );
data.Add( null );
@@ -6185,7 +6185,7 @@ namespace AntlrUnitTests
data.Add( null );
data.Add( null );
data.Add( null );
-            e.setAttribute( "data", data );
+            e.SetAttribute( "data", data );
string expecting = "2"; // nulls are counted
Assert.AreEqual( expecting, e.ToString() );
}
@@ -6201,7 +6201,7 @@ namespace AntlrUnitTests
IDictionary map = new SortedList<object, object>();
map["int"] = "0";
map["float"] = "0.0";
-            t.setAttribute( "aMap", map );
+            t.SetAttribute( "aMap", map );
// either order of enumerating the dictionary is allowed
string result = t.ToString();
if ( result.StartsWith( "int" ) )
@@ -6221,7 +6221,7 @@ namespace AntlrUnitTests
IDictionary map = new SortedList<object, object>();
map["int"] = "0";
map["float"] = "0.0";
-            t.setAttribute( "aMap", map );
+            t.SetAttribute( "aMap", map );

// either order of enumerating the dictionary is allowed
string result = t.ToString();
@@ -6242,7 +6242,7 @@ namespace AntlrUnitTests
IDictionary map = new Dictionary<object, object>();
map.Add( 1, new List<object>( new object[] { "ick", "foo" } ) );
map.Add( 2, new List<object>( new object[] { "x", "y" } ) );
-            t.setAttribute( "aMap", map );
+            t.SetAttribute( "aMap", map );
string result = t.ToString();
if ( result.StartsWith( "1" ) )
Assert.AreEqual( "1:ickfoo, 2:xy", t.ToString() );
@@ -6260,9 +6260,9 @@ namespace AntlrUnitTests
// context.  it can therefore see name.
StringTemplateGroup group =
new StringTemplateGroup( "test" );
-            StringTemplate main = group.defineTemplate( "main", "$foo(t={Hi, $super.name$}, name=\"parrt\")$" );
-            main.setAttribute( "name", "tombu" );
-            StringTemplate foo = group.defineTemplate( "foo", "$t$" );
+            StringTemplate main = group.DefineTemplate( "main", "$foo(t={Hi, $super.name$}, name=\"parrt\")$" );
+            main.SetAttribute( "name", "tombu" );
+            StringTemplate foo = group.DefineTemplate( "foo", "$t$" );
string expecting = "Hi, parrt";
Assert.AreEqual( expecting, main.ToString() );
}
@@ -6288,10 +6288,10 @@ namespace AntlrUnitTests
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );

-                StringTemplate st = group.getInstanceOf( "t1" );
+                StringTemplate st = group.GetInstanceOf( "t1" );
Assert.AreEqual( "R1", st.ToString() );

-                st = group.getInstanceOf( "t2" );
+                st = group.GetInstanceOf( "t2" );
Assert.AreEqual( "R2", st.ToString() );

Assert.Fail( "A parse error should have been generated" );
@@ -6320,12 +6320,12 @@ namespace AntlrUnitTests
StringTemplateGroup subGroup = new StringTemplateGroup(
new StringReader( subGroupString ), typeof( AngleBracketTemplateLexer ) );
subGroup.SuperGroup = superGroup;
-            StringTemplate a = subGroup.getInstanceOf( "a" );
-            a.setAttribute( "x", "foo" );
+            StringTemplate a = subGroup.GetInstanceOf( "a" );
+            a.SetAttribute( "x", "foo" );
Assert.AreEqual( "super.a", a.ToString() );
-            StringTemplate b = subGroup.getInstanceOf( "b" );
+            StringTemplate b = subGroup.GetInstanceOf( "b" );
Assert.AreEqual( "sub.csuper.b", b.ToString() );
-            StringTemplate c = subGroup.getInstanceOf( "c" );
+            StringTemplate c = subGroup.GetInstanceOf( "c" );
Assert.AreEqual( "sub.c", c.ToString() );
}

@@ -6336,10 +6336,10 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$[\"Ter\",,\"Jesse\"]:{n | $i$:$n$}; separator=\", \", null=\"\"$"
);
-            e = e.getInstanceOf();
-            e.setAttribute( "names", "Ter" );
-            e.setAttribute( "phones", "1" );
-            e.setAttribute( "salaries", "big" );
+            e = e.GetInstanceOf();
+            e.SetAttribute( "names", "Ter" );
+            e.SetAttribute( "phones", "1" );
+            e.SetAttribute( "salaries", "big" );
string expecting = "1:Ter, 2:, 3:Jesse";
Assert.AreEqual( expecting, e.ToString() );
}
@@ -6350,10 +6350,10 @@ namespace AntlrUnitTests
StringTemplate st = new StringTemplate(
"Tokens : <rules; separator=names:{<it>}> ;",
typeof( AngleBracketTemplateLexer ) );
-            st.setAttribute( "rules", "A" );
-            st.setAttribute( "rules", "B" );
-            st.setAttribute( "names", "Ter" );
-            st.setAttribute( "names", "Tom" );
+            st.SetAttribute( "rules", "A" );
+            st.SetAttribute( "rules", "B" );
+            st.SetAttribute( "names", "Ter" );
+            st.SetAttribute( "names", "Tom" );
string expecting = "Tokens : ATerTomB ;";
Assert.AreEqual( expecting, st.ToString() );
}
@@ -6367,7 +6367,7 @@ namespace AntlrUnitTests
catch ( IOException ioe )
{
Console.Error.WriteLine( "can't write file" );
-                ioe.printStackTrace( Console.Error );
+                ioe.PrintStackTrace( Console.Error );
}
}
}
diff --git a/Antlr3.Test/TestAttributes.cs b/Antlr3.Test/TestAttributes.cs
index 843c786..4ac1c82 100644
--- a/Antlr3.Test/TestAttributes.cs
+++ b/Antlr3.Test/TestAttributes.cs
@@ -76,7 +76,7 @@ namespace AntlrUnitTests
StringTemplateGroup templates =
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, "<action>" );
-            actionST.setAttribute( "action", rawTranslation );
+            actionST.SetAttribute( "action", rawTranslation );
string found = actionST.ToString();
assertEquals( expecting, found );
}
@@ -3443,7 +3443,7 @@ namespace AntlrUnitTests
object chunk = translator.chunks[i];
if ( chunk is StringTemplate )
{
-                    if ( ( (StringTemplate)chunk ).getName().Equals( "scopeSetAttributeRef" ) )
+                    if ( ( (StringTemplate)chunk ).GetName().Equals( "scopeSetAttributeRef" ) )
{
foundScopeSetAttributeRef = true;
}
diff --git a/Antlr3/Analysis/SemanticContext.cs b/Antlr3/Analysis/SemanticContext.cs
index 71a64d1..c2d0bf0 100644
--- a/Antlr3/Analysis/SemanticContext.cs
+++ b/Antlr3/Analysis/SemanticContext.cs
@@ -185,11 +185,11 @@ namespace Antlr3.Analysis
{
if ( synpred )
{
-                        eST = templates.getInstanceOf( "evalSynPredicate" );
+                        eST = templates.GetInstanceOf( "evalSynPredicate" );
}
else
{
-                        eST = templates.getInstanceOf( "evalPredicate" );
+                        eST = templates.GetInstanceOf( "evalPredicate" );
generator.grammar.decisionsWhoseDFAsUsesSemPreds.Add( dfa );
}
string predEnclosingRuleName = predicateAST.enclosingRuleName;
@@ -203,21 +203,21 @@ namespace Antlr3.Analysis
//eST.setAttribute("pred", this.toString());
if ( generator != null )
{
-                        eST.setAttribute( "pred",
+                        eST.SetAttribute( "pred",
generator.translateAction( predEnclosingRuleName, predicateAST ) );
}
}
else
{
eST = new StringTemplate( "$pred$" );
-                    eST.setAttribute( "pred", this.ToString() );
+                    eST.SetAttribute( "pred", this.ToString() );
return eST;
}
if ( generator != null )
{
string description =
generator.target.getTargetStringLiteralFromString( this.ToString() );
-                    eST.setAttribute( "description", description );
+                    eST.SetAttribute( "description", description );
}
return eST;
}
@@ -275,7 +275,7 @@ namespace Antlr3.Analysis
{
if ( templates != null )
{
-                    return templates.getInstanceOf( "true" );
+                    return templates.GetInstanceOf( "true" );
}
return new StringTemplate( "true" );
}
@@ -322,14 +322,14 @@ namespace Antlr3.Analysis
StringTemplate eST = null;
if ( templates != null )
{
-                    eST = templates.getInstanceOf( "andPredicates" );
+                    eST = templates.GetInstanceOf( "andPredicates" );
}
else
{
eST = new StringTemplate( "($left$&&$right$)" );
}
-                eST.setAttribute( "left", left.genExpr( generator, templates, dfa ) );
-                eST.setAttribute( "right", right.genExpr( generator, templates, dfa ) );
+                eST.SetAttribute( "left", left.genExpr( generator, templates, dfa ) );
+                eST.SetAttribute( "right", right.genExpr( generator, templates, dfa ) );
return eST;
}
public override SemanticContext GatedPredicateContext
@@ -397,7 +397,7 @@ namespace Antlr3.Analysis
StringTemplate eST = null;
if ( templates != null )
{
-                    eST = templates.getInstanceOf( "orPredicates" );
+                    eST = templates.GetInstanceOf( "orPredicates" );
}
else
{
@@ -405,7 +405,7 @@ namespace Antlr3.Analysis
}
foreach ( SemanticContext semctx in operands )
{
-                    eST.setAttribute( "operands", semctx.genExpr( generator, templates, dfa ) );
+                    eST.SetAttribute( "operands", semctx.genExpr( generator, templates, dfa ) );
}
return eST;
}
@@ -480,13 +480,13 @@ namespace Antlr3.Analysis
StringTemplate eST = null;
if ( templates != null )
{
-                    eST = templates.getInstanceOf( "notPredicate" );
+                    eST = templates.GetInstanceOf( "notPredicate" );
}
else
{
eST = new StringTemplate( "?!($pred$)" );
}
-                eST.setAttribute( "pred", ctx.genExpr( generator, templates, dfa ) );
+                eST.SetAttribute( "pred", ctx.genExpr( generator, templates, dfa ) );
return eST;
}
public override SemanticContext GatedPredicateContext
diff --git a/Antlr3/Codegen/ACyclicDFACodeGenerator.cs b/Antlr3/Codegen/ACyclicDFACodeGenerator.cs
index 63515bd..8d3575f 100644
--- a/Antlr3/Codegen/ACyclicDFACodeGenerator.cs
+++ b/Antlr3/Codegen/ACyclicDFACodeGenerator.cs
@@ -63,8 +63,8 @@ namespace Antlr3.Codegen
//System.out.println("walk "+s.stateNumber+" in dfa for decision "+dfa.decisionNumber);
if ( s.IsAcceptState )
{
-                StringTemplate dfaST2 = templates.getInstanceOf( "dfaAcceptState" );
-                dfaST2.setAttribute( "alt", s.getUniquelyPredictedAlt() );
+                StringTemplate dfaST2 = templates.GetInstanceOf( "dfaAcceptState" );
+                dfaST2.SetAttribute( "alt", s.getUniquelyPredictedAlt() );
return dfaST2;
}

@@ -82,18 +82,18 @@ namespace Antlr3.Codegen
dfaEdgeName = "dfaEdgeSwitch";
}

-            StringTemplate dfaST = templates.getInstanceOf( dfaStateName );
+            StringTemplate dfaST = templates.GetInstanceOf( dfaStateName );
if ( dfa.NFADecisionStartState.decisionStateType == NFAState.LOOPBACK )
{
-                dfaST = templates.getInstanceOf( dfaLoopbackStateName );
+                dfaST = templates.GetInstanceOf( dfaLoopbackStateName );
}
else if ( dfa.NFADecisionStartState.decisionStateType == NFAState.OPTIONAL_BLOCK_START )
{
-                dfaST = templates.getInstanceOf( dfaOptionalBlockStateName );
+                dfaST = templates.GetInstanceOf( dfaOptionalBlockStateName );
}
-            dfaST.setAttribute( "k", k );
-            dfaST.setAttribute( "stateNumber", s.stateNumber );
-            dfaST.setAttribute( "semPredState",
+            dfaST.SetAttribute( "k", k );
+            dfaST.SetAttribute( "stateNumber", s.stateNumber );
+            dfaST.SetAttribute( "semPredState",
s.IsResolvedWithPredicates );
/*
String description = dfa.getNFADecisionStartState().getDescription();
@@ -123,16 +123,16 @@ namespace Antlr3.Codegen
*/
continue;
}
-                StringTemplate edgeST = templates.getInstanceOf( dfaEdgeName );
+                StringTemplate edgeST = templates.GetInstanceOf( dfaEdgeName );
// If the template wants all the label values delineated, do that
-                if ( edgeST.getFormalArgument( "labels" ) != null )
+                if ( edgeST.GetFormalArgument( "labels" ) != null )
{
List<string> labels = edge.Label.Set.Select( value => parentGenerator.getTokenTypeAsTargetLabel( value ) ).ToList();
-                    edgeST.setAttribute( "labels", labels );
+                    edgeST.SetAttribute( "labels", labels );
}
else
{ // else create an expression to evaluate (the general case)
-                    edgeST.setAttribute( "labelExpr",
+                    edgeST.SetAttribute( "labelExpr",
parentGenerator.genLabelExpr( templates, edge, k ) );
}

@@ -148,7 +148,7 @@ namespace Antlr3.Codegen
StringTemplate predST = preds.genExpr( parentGenerator,
parentGenerator.Templates,
dfa );
-                        edgeST.setAttribute( "predicates", predST );
+                        edgeST.SetAttribute( "predicates", predST );
}
}

@@ -157,8 +157,8 @@ namespace Antlr3.Codegen
dfa,
(DFAState)edge.target,
k + 1 );
-                edgeST.setAttribute( "targetState", targetST );
-                dfaST.setAttribute( "edges", edgeST );
+                edgeST.SetAttribute( "targetState", targetST );
+                dfaST.SetAttribute( "edges", edgeST );
/*
System.out.println("back to DFA "+
dfa.decisionNumber+"."+s.stateNumber);
@@ -169,7 +169,7 @@ namespace Antlr3.Codegen
if ( EOTPredicts != NFA.INVALID_ALT_NUMBER )
{
// EOT unique predicts an alt
-                dfaST.setAttribute( "eotPredictsAlt", EOTPredicts );
+                dfaST.SetAttribute( "eotPredictsAlt", EOTPredicts );
}
else if ( EOTTarget != null && EOTTarget.NumberOfTransitions > 0 )
{
@@ -184,8 +184,8 @@ namespace Antlr3.Codegen
for ( int i = 0; i < EOTTarget.NumberOfTransitions; i++ )
{
Transition predEdge = (Transition)EOTTarget.transition( i );
-                    StringTemplate edgeST = templates.getInstanceOf( dfaEdgeName );
-                    edgeST.setAttribute( "labelExpr",
+                    StringTemplate edgeST = templates.GetInstanceOf( dfaEdgeName );
+                    edgeST.SetAttribute( "labelExpr",
parentGenerator.genSemanticPredicateExpr( templates, predEdge ) );
// the target must be an accept state
//System.out.println("EOT edge");
@@ -194,8 +194,8 @@ namespace Antlr3.Codegen
dfa,
(DFAState)predEdge.target,
k + 1 );
-                    edgeST.setAttribute( "targetState", targetST );
-                    dfaST.setAttribute( "edges", edgeST );
+                    edgeST.SetAttribute( "targetState", targetST );
+                    dfaST.SetAttribute( "edges", edgeST );
}
}
return dfaST;
diff --git a/Antlr3/Codegen/CodeGenerator.cs b/Antlr3/Codegen/CodeGenerator.cs
index ac9ab90..cc69311 100644
--- a/Antlr3/Codegen/CodeGenerator.cs
+++ b/Antlr3/Codegen/CodeGenerator.cs
@@ -66,6 +66,8 @@ namespace Antlr3.Codegen
using IToken = Antlr.Runtime.IToken;
using Label = Antlr3.Analysis.Label;
using LookaheadSet = Antlr3.Analysis.LookaheadSet;
+    using MethodImpl = System.Runtime.CompilerServices.MethodImplAttribute;
+    using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
using NFAState = Antlr3.Analysis.NFAState;
using RecognitionException = Antlr.Runtime.RecognitionException;
using Rule = Antlr3.Tool.Rule;
@@ -128,6 +130,7 @@ namespace Antlr3.Codegen
*  specific actions.
*/
public Target target = null;
+        static readonly Dictionary<string, Target> _targets = new Dictionary<string, Target>();

/** Where are the templates this generator should use to generate code? */
protected StringTemplateGroup templates;
@@ -240,47 +243,52 @@ namespace Antlr3.Codegen
}
#endregion

+        [MethodImpl( MethodImplOptions.Synchronized )]
protected virtual void loadLanguageTarget( string language )
{
-            // first try to load the target via a satellite DLL
-            string assembly = "Antlr3.Targets." + language + ".dll";
-            string path1 = System.IO.Path.Combine( System.IO.Path.GetDirectoryName( typeof( CodeGenerator ).Assembly.Location ), "Targets" );
-            string path2 = System.IO.Path.GetDirectoryName( typeof( CodeGenerator ).Assembly.Location );
-            string[] paths = { path1, path2 };
+            if ( !_targets.TryGetValue( language, out target ) )
+            {
+                // first try to load the target via a satellite DLL
+                string assembly = "Antlr3.Targets." + language + ".dll";
+                string path1 = System.IO.Path.Combine( System.IO.Path.GetDirectoryName( typeof( CodeGenerator ).Assembly.Location ), "Targets" );
+                string path2 = System.IO.Path.GetDirectoryName( typeof( CodeGenerator ).Assembly.Location );
+                string[] paths = { path1, path2 };

-            System.Reflection.Assembly targetAssembly = null;
-            System.Type targetType = null;
-            string targetName = "Antlr3.Targets." + language + "Target";
+                System.Reflection.Assembly targetAssembly = null;
+                System.Type targetType = null;
+                string targetName = "Antlr3.Targets." + language + "Target";

-            foreach ( string path in paths )
-            {
-                string filename = System.IO.Path.Combine( path, assembly );
-                if ( System.IO.File.Exists( filename ) )
+                foreach ( string path in paths )
{
-                    try
-                    {
-                        targetAssembly = System.Reflection.Assembly.LoadFile( filename );
-                        targetType = targetAssembly.GetType( targetName, false );
-                    }
-                    catch
+                    string filename = System.IO.Path.Combine( path, assembly );
+                    if ( System.IO.File.Exists( filename ) )
{
+                        try
+                        {
+                            targetAssembly = System.Reflection.Assembly.LoadFile( filename );
+                            targetType = targetAssembly.GetType( targetName, false );
+                        }
+                        catch
+                        {
+                        }
}
}
-            }
-
-            // then try to load from the current file
-            if ( targetType == null )
-            {
-                targetType = System.Type.GetType( targetName );

+                // then try to load from the current file
if ( targetType == null )
{
-                    ErrorManager.error( ErrorManager.MSG_CANNOT_CREATE_TARGET_GENERATOR, targetName );
-                    return;
+                    targetType = System.Type.GetType( targetName );
+
+                    if ( targetType == null )
+                    {
+                        ErrorManager.error( ErrorManager.MSG_CANNOT_CREATE_TARGET_GENERATOR, targetName );
+                        return;
+                    }
}
-            }

-            target = (Target)targetType.GetConstructor( new System.Type[0] ).Invoke( new object[0] );
+                target = (Target)targetType.GetConstructor( new System.Type[0] ).Invoke( new object[0] );
+                _targets[language] = target;
+            }
}

/** load the main language.stg template group file */
@@ -294,12 +302,12 @@ namespace Antlr3.Codegen
IStringTemplateGroupLoader loader =
new CommonGroupLoader( templateDirs,
ErrorManager.getStringTemplateErrorListener() );
-            StringTemplateGroup.registerGroupLoader( loader );
-            StringTemplateGroup.registerDefaultLexer( typeof( AngleBracketTemplateLexer ) );
+            StringTemplateGroup.RegisterGroupLoader( loader );
+            StringTemplateGroup.RegisterDefaultLexer( typeof( AngleBracketTemplateLexer ) );

// first load main language template
StringTemplateGroup coreTemplates =
-                StringTemplateGroup.loadGroup( language );
+                StringTemplateGroup.LoadGroup( language );
baseTemplates = coreTemplates;
if ( coreTemplates == null )
{
@@ -316,42 +324,42 @@ namespace Antlr3.Codegen
if ( debug && grammar.type != Grammar.LEXER )
{
StringTemplateGroup dbgTemplates =
-                        StringTemplateGroup.loadGroup( "Dbg", coreTemplates );
+                        StringTemplateGroup.LoadGroup( "Dbg", coreTemplates );
baseTemplates = dbgTemplates;
StringTemplateGroup astTemplates =
-                        StringTemplateGroup.loadGroup( "AST", dbgTemplates );
+                        StringTemplateGroup.LoadGroup( "AST", dbgTemplates );
StringTemplateGroup astParserTemplates = astTemplates;
//if ( !grammar.rewriteMode() ) {
if ( grammar.type == Grammar.TREE_PARSER )
{
astParserTemplates =
-                            StringTemplateGroup.loadGroup( "ASTTreeParser", astTemplates );
+                            StringTemplateGroup.LoadGroup( "ASTTreeParser", astTemplates );
}
else
{
astParserTemplates =
-                            StringTemplateGroup.loadGroup( "ASTParser", astTemplates );
+                            StringTemplateGroup.LoadGroup( "ASTParser", astTemplates );
}
//}
StringTemplateGroup astDbgTemplates =
-                        StringTemplateGroup.loadGroup( "ASTDbg", astParserTemplates );
+                        StringTemplateGroup.LoadGroup( "ASTDbg", astParserTemplates );
templates = astDbgTemplates;
}
else
{
StringTemplateGroup astTemplates =
-                        StringTemplateGroup.loadGroup( "AST", coreTemplates );
+                        StringTemplateGroup.LoadGroup( "AST", coreTemplates );
StringTemplateGroup astParserTemplates = astTemplates;
//if ( !grammar.rewriteMode() ) {
if ( grammar.type == Grammar.TREE_PARSER )
{
astParserTemplates =
-                            StringTemplateGroup.loadGroup( "ASTTreeParser", astTemplates );
+                            StringTemplateGroup.LoadGroup( "ASTTreeParser", astTemplates );
}
else
{
astParserTemplates =
-                            StringTemplateGroup.loadGroup( "ASTParser", astTemplates );
+                            StringTemplateGroup.LoadGroup( "ASTParser", astTemplates );
}
//}
templates = astParserTemplates;
@@ -362,20 +370,20 @@ namespace Antlr3.Codegen
if ( debug && grammar.type != Grammar.LEXER )
{
StringTemplateGroup dbgTemplates =
-                        StringTemplateGroup.loadGroup( "Dbg", coreTemplates );
+                        StringTemplateGroup.LoadGroup( "Dbg", coreTemplates );
baseTemplates = dbgTemplates;
StringTemplateGroup stTemplates =
-                        StringTemplateGroup.loadGroup( "ST", dbgTemplates );
+                        StringTemplateGroup.LoadGroup( "ST", dbgTemplates );
templates = stTemplates;
}
else
{
-                    templates = StringTemplateGroup.loadGroup( "ST", coreTemplates );
+                    templates = StringTemplateGroup.LoadGroup( "ST", coreTemplates );
}
}
else if ( debug && grammar.type != Grammar.LEXER )
{
-                templates = StringTemplateGroup.loadGroup( "Dbg", coreTemplates );
+                templates = StringTemplateGroup.LoadGroup( "Dbg", coreTemplates );
baseTemplates = templates;
}
else
@@ -385,9 +393,9 @@ namespace Antlr3.Codegen

if ( EMIT_TEMPLATE_DELIMITERS )
{
-                templates.emitDebugStartStopStrings( true );
-                templates.doNotEmitDebugStringsForTemplate( "codeFileExtension" );
-                templates.doNotEmitDebugStringsForTemplate( "headerFileExtension" );
+                templates.EmitDebugStartStopStrings( true );
+                templates.DoNotEmitDebugStringsForTemplate( "codeFileExtension" );
+                templates.DoNotEmitDebugStringsForTemplate( "headerFileExtension" );
}
}

@@ -432,18 +440,18 @@ namespace Antlr3.Codegen
optimizer.optimize();

// OUTPUT FILE (contains recognizerST)
-            outputFileST = templates.getInstanceOf( "outputFile" );
+            outputFileST = templates.GetInstanceOf( "outputFile" );

// HEADER FILE
-            if ( templates.isDefined( "headerFile" ) )
+            if ( templates.IsDefined( "headerFile" ) )
{
-                headerFileST = templates.getInstanceOf( "headerFile" );
+                headerFileST = templates.GetInstanceOf( "headerFile" );
}
else
{
// create a dummy to avoid null-checks all over code generator
headerFileST = new StringTemplate( templates, "" );
-                headerFileST.setName( "dummy-header-file" );
+                headerFileST.SetName( "dummy-header-file" );
}

bool filterMode = grammar.getOption( "filter" ) != null &&
@@ -463,85 +471,85 @@ namespace Antlr3.Codegen
verifyActionScopesOkForTarget( actions );
// translate $x::y references
translateActionAttributeReferences( actions );
-            StringTemplate gateST = templates.getInstanceOf( "actionGate" );
+            StringTemplate gateST = templates.GetInstanceOf( "actionGate" );
if ( filterMode )
{
// if filtering, we need to set actions to execute at backtracking
// level 1 not 0.
-                gateST = templates.getInstanceOf( "filteringActionGate" );
+                gateST = templates.GetInstanceOf( "filteringActionGate" );
}
grammar.setSynPredGateIfNotAlready( gateST );

-            headerFileST.setAttribute( "actions", actions );
-            outputFileST.setAttribute( "actions", actions );
+            headerFileST.SetAttribute( "actions", actions );
+            outputFileST.SetAttribute( "actions", actions );

-            headerFileST.setAttribute( "buildTemplate", grammar.BuildTemplate );
-            outputFileST.setAttribute( "buildTemplate", grammar.BuildTemplate );
-            headerFileST.setAttribute( "buildAST", grammar.BuildAST );
-            outputFileST.setAttribute( "buildAST", grammar.BuildAST );
+            headerFileST.SetAttribute( "buildTemplate", grammar.BuildTemplate );
+            outputFileST.SetAttribute( "buildTemplate", grammar.BuildTemplate );
+            headerFileST.SetAttribute( "buildAST", grammar.BuildAST );
+            outputFileST.SetAttribute( "buildAST", grammar.BuildAST );

-            outputFileST.setAttribute( "rewriteMode", grammar.RewriteMode );
-            headerFileST.setAttribute( "rewriteMode", grammar.RewriteMode );
+            outputFileST.SetAttribute( "rewriteMode", grammar.RewriteMode );
+            headerFileST.SetAttribute( "rewriteMode", grammar.RewriteMode );

-            outputFileST.setAttribute( "backtracking", canBacktrack );
-            headerFileST.setAttribute( "backtracking", canBacktrack );
+            outputFileST.SetAttribute( "backtracking", canBacktrack );
+            headerFileST.SetAttribute( "backtracking", canBacktrack );
// turn on memoize attribute at grammar level so we can create ruleMemo.
// each rule has memoize attr that hides this one, indicating whether
// it needs to save results
string memoize = (string)grammar.getOption( "memoize" );
-            outputFileST.setAttribute( "memoize",
+            outputFileST.SetAttribute( "memoize",
( grammar.atLeastOneRuleMemoizes ||
( memoize != null && memoize.Equals( "true" ) ) &&
canBacktrack ) );
-            headerFileST.setAttribute( "memoize",
+            headerFileST.SetAttribute( "memoize",
( grammar.atLeastOneRuleMemoizes ||
( memoize != null && memoize.Equals( "true" ) ) &&
canBacktrack ) );


-            outputFileST.setAttribute( "trace", trace );
-            headerFileST.setAttribute( "trace", trace );
+            outputFileST.SetAttribute( "trace", trace );
+            headerFileST.SetAttribute( "trace", trace );

-            outputFileST.setAttribute( "profile", profile );
-            headerFileST.setAttribute( "profile", profile );
+            outputFileST.SetAttribute( "profile", profile );
+            headerFileST.SetAttribute( "profile", profile );

// RECOGNIZER
if ( grammar.type == Grammar.LEXER )
{
-                recognizerST = templates.getInstanceOf( "lexer" );
-                outputFileST.setAttribute( "LEXER", true );
-                headerFileST.setAttribute( "LEXER", true );
-                recognizerST.setAttribute( "filterMode", filterMode );
+                recognizerST = templates.GetInstanceOf( "lexer" );
+                outputFileST.SetAttribute( "LEXER", true );
+                headerFileST.SetAttribute( "LEXER", true );
+                recognizerST.SetAttribute( "filterMode", filterMode );
}
else if ( grammar.type == Grammar.PARSER ||
grammar.type == Grammar.COMBINED )
{
-                recognizerST = templates.getInstanceOf( "parser" );
-                outputFileST.setAttribute( "PARSER", true );
-                headerFileST.setAttribute( "PARSER", true );
+                recognizerST = templates.GetInstanceOf( "parser" );
+                outputFileST.SetAttribute( "PARSER", true );
+                headerFileST.SetAttribute( "PARSER", true );
}
else
{
-                recognizerST = templates.getInstanceOf( "treeParser" );
-                outputFileST.setAttribute( "TREE_PARSER", true );
-                headerFileST.setAttribute( "TREE_PARSER", true );
-                recognizerST.setAttribute( "filterMode", filterMode );
+                recognizerST = templates.GetInstanceOf( "treeParser" );
+                outputFileST.SetAttribute( "TREE_PARSER", true );
+                headerFileST.SetAttribute( "TREE_PARSER", true );
+                recognizerST.SetAttribute( "filterMode", filterMode );
}
-            outputFileST.setAttribute( "recognizer", recognizerST );
-            headerFileST.setAttribute( "recognizer", recognizerST );
-            outputFileST.setAttribute( "actionScope",
+            outputFileST.SetAttribute( "recognizer", recognizerST );
+            headerFileST.SetAttribute( "recognizer", recognizerST );
+            outputFileST.SetAttribute( "actionScope",
grammar.getDefaultActionScope( grammar.type ) );
-            headerFileST.setAttribute( "actionScope",
+            headerFileST.SetAttribute( "actionScope",
grammar.getDefaultActionScope( grammar.type ) );

string targetAppropriateFileNameString =
target.getTargetStringLiteralFromString( grammar.FileName );
-            outputFileST.setAttribute( "fileName", targetAppropriateFileNameString );
-            headerFileST.setAttribute( "fileName", targetAppropriateFileNameString );
-            outputFileST.setAttribute( "ANTLRVersion", tool.VERSION );
-            headerFileST.setAttribute( "ANTLRVersion", tool.VERSION );
-            outputFileST.setAttribute( "generatedTimestamp", AntlrTool.getCurrentTimeStamp() );
-            headerFileST.setAttribute( "generatedTimestamp", AntlrTool.getCurrentTimeStamp() );
+            outputFileST.SetAttribute( "fileName", targetAppropriateFileNameString );
+            headerFileST.SetAttribute( "fileName", targetAppropriateFileNameString );
+            outputFileST.SetAttribute( "ANTLRVersion", tool.VERSION );
+            headerFileST.SetAttribute( "ANTLRVersion", tool.VERSION );
+            outputFileST.SetAttribute( "generatedTimestamp", AntlrTool.getCurrentTimeStamp() );
+            headerFileST.SetAttribute( "generatedTimestamp", AntlrTool.getCurrentTimeStamp() );

{
// GENERATE RECOGNIZER
@@ -580,19 +588,19 @@ namespace Antlr3.Codegen
{
synpredNames = grammar.synPredNamesUsedInDFA;
}
-            outputFileST.setAttribute( "synpreds", synpredNames );
-            headerFileST.setAttribute( "synpreds", synpredNames );
+            outputFileST.SetAttribute( "synpreds", synpredNames );
+            headerFileST.SetAttribute( "synpreds", synpredNames );

// all recognizers can see Grammar object
-            recognizerST.setAttribute( "grammar", grammar );
+            recognizerST.SetAttribute( "grammar", grammar );

// WRITE FILES
try
{
target.genRecognizerFile( tool, this, grammar, outputFileST );
-                if ( templates.isDefined( "headerFile" ) )
+                if ( templates.IsDefined( "headerFile" ) )
{
-                    StringTemplate extST = templates.getInstanceOf( "headerFileExtension" );
+                    StringTemplate extST = templates.GetInstanceOf( "headerFileExtension" );
target.genRecognizerHeaderFile( tool, this, grammar, headerFileST, extST.ToString() );
}
// write out the vocab interchange file; used by antlr,
@@ -745,19 +753,19 @@ namespace Antlr3.Codegen
ulong w = words[j];
wordStrings[j] = target.getTarget64BitStringFromValue( w );
}
-            recognizerST.setAttribute( "bitsets.{name,inName,bits,tokenTypes,tokenIndex}",
+            recognizerST.SetAttribute( "bitsets.{name,inName,bits,tokenTypes,tokenIndex}",
referencedElementName,
enclosingRuleName,
wordStrings,
tokenTypeList,
elementIndex );
-            outputFileST.setAttribute( "bitsets.{name,inName,bits,tokenTypes,tokenIndex}",
+            outputFileST.SetAttribute( "bitsets.{name,inName,bits,tokenTypes,tokenIndex}",
referencedElementName,
enclosingRuleName,
wordStrings,
tokenTypeList,
elementIndex );
-            headerFileST.setAttribute( "bitsets.{name,inName,bits,tokenTypes,tokenIndex}",
+            headerFileST.SetAttribute( "bitsets.{name,inName,bits,tokenTypes,tokenIndex}",
referencedElementName,
enclosingRuleName,
wordStrings,
@@ -791,16 +799,16 @@ namespace Antlr3.Codegen
{
// generate any kind of DFA here (cyclic or acyclic)
dfa.createStateTables( this );
-                outputFileST.setAttribute( "cyclicDFAs", dfa );
-                headerFileST.setAttribute( "cyclicDFAs", dfa );
-                decisionST = templates.getInstanceOf( "dfaDecision" );
+                outputFileST.SetAttribute( "cyclicDFAs", dfa );
+                headerFileST.SetAttribute( "cyclicDFAs", dfa );
+                decisionST = templates.GetInstanceOf( "dfaDecision" );
string description = dfa.NFADecisionStartState.Description;
description = target.getTargetStringLiteralFromString( description );
if ( description != null )
{
-                    decisionST.setAttribute( "description", description );
+                    decisionST.SetAttribute( "description", description );
}
-                decisionST.setAttribute( "decisionNumber",
+                decisionST.SetAttribute( "decisionNumber",
dfa.DecisionNumber );
}
return decisionST;
@@ -815,11 +823,11 @@ namespace Antlr3.Codegen
public virtual StringTemplate generateSpecialState( DFAState s )
{
StringTemplate stateST;
-            stateST = templates.getInstanceOf( "cyclicDFAState" );
-            stateST.setAttribute( "needErrorClause", true );
-            stateST.setAttribute( "semPredState", s.IsResolvedWithPredicates );
-            stateST.setAttribute( "stateNumber", s.stateNumber );
-            stateST.setAttribute( "decisionNumber", s.dfa.decisionNumber );
+            stateST = templates.GetInstanceOf( "cyclicDFAState" );
+            stateST.SetAttribute( "needErrorClause", true );
+            stateST.SetAttribute( "semPredState", s.IsResolvedWithPredicates );
+            stateST.SetAttribute( "stateNumber", s.stateNumber );
+            stateST.SetAttribute( "decisionNumber", s.dfa.decisionNumber );

bool foundGatedPred = false;
StringTemplate eotST = null;
@@ -830,19 +838,19 @@ namespace Antlr3.Codegen
if ( edge.label.Atom == Label.EOT )
{
// this is the default clause; has to held until last
-                    edgeST = templates.getInstanceOf( "eotDFAEdge" );
-                    stateST.removeAttribute( "needErrorClause" );
+                    edgeST = templates.GetInstanceOf( "eotDFAEdge" );
+                    stateST.RemoveAttribute( "needErrorClause" );
eotST = edgeST;
}
else
{
-                    edgeST = templates.getInstanceOf( "cyclicDFAEdge" );
+                    edgeST = templates.GetInstanceOf( "cyclicDFAEdge" );
StringTemplate exprST =
genLabelExpr( templates, edge, 1 );
-                    edgeST.setAttribute( "labelExpr", exprST );
+                    edgeST.SetAttribute( "labelExpr", exprST );
}
-                edgeST.setAttribute( "edgeNumber", i + 1 );
-                edgeST.setAttribute( "targetStateNumber",
+                edgeST.SetAttribute( "edgeNumber", i + 1 );
+                edgeST.SetAttribute( "targetStateNumber",
edge.target.stateNumber );
// stick in any gated predicates for any edge if not already a pred
if ( !edge.label.IsSemanticPredicate )
@@ -855,23 +863,23 @@ namespace Antlr3.Codegen
StringTemplate predST = preds.genExpr( this,
Templates,
t.dfa );
-                        edgeST.setAttribute( "predicates", predST.ToString() );
+                        edgeST.SetAttribute( "predicates", predST.ToString() );
}
}
if ( edge.label.Atom != Label.EOT )
{
-                    stateST.setAttribute( "edges", edgeST );
+                    stateST.SetAttribute( "edges", edgeST );
}
}
if ( foundGatedPred )
{
// state has >= 1 edge with a gated pred (syn or sem)
// must rewind input first, set flag.
-                stateST.setAttribute( "semPredState", foundGatedPred );
+                stateST.SetAttribute( "semPredState", foundGatedPred );
}
if ( eotST != null )
{
-                stateST.setAttribute( "edges", eotST );
+                stateST.SetAttribute( "edges", eotST );
}
return stateST;
}
@@ -891,10 +899,10 @@ namespace Antlr3.Codegen
return genSetExpr( templates, label.Set, k, true );
}
// must be simple label
-            StringTemplate eST = templates.getInstanceOf( "lookaheadTest" );
-            eST.setAttribute( "atom", getTokenTypeAsTargetLabel( label.Atom ) );
-            eST.setAttribute( "atomAsInt", label.Atom );
-            eST.setAttribute( "k", k );
+            StringTemplate eST = templates.GetInstanceOf( "lookaheadTest" );
+            eST.SetAttribute( "atom", getTokenTypeAsTargetLabel( label.Atom ) );
+            eST.SetAttribute( "atomAsInt", label.Atom );
+            eST.SetAttribute( "k", k );
return eST;
}

@@ -923,7 +931,7 @@ namespace Antlr3.Codegen
if ( iset.Intervals == null || iset.Intervals.Count == 0 )
{
StringTemplate emptyST = new StringTemplate( templates, "" );
-                emptyST.setName( "empty-set-expr" );
+                emptyST.SetName( "empty-set-expr" );
return emptyST;
}
string testSTName = "lookaheadTest";
@@ -933,7 +941,7 @@ namespace Antlr3.Codegen
testSTName = "isolatedLookaheadTest";
testRangeSTName = "isolatedLookaheadRangeTest";
}
-            StringTemplate setST = templates.getInstanceOf( "setTest" );
+            StringTemplate setST = templates.GetInstanceOf( "setTest" );
int rangeNumber = 1;
foreach ( Interval I in iset.getIntervals() )
{
@@ -942,22 +950,22 @@ namespace Antlr3.Codegen
StringTemplate eST;
if ( a == b )
{
-                    eST = templates.getInstanceOf( testSTName );
-                    eST.setAttribute( "atom", getTokenTypeAsTargetLabel( a ) );
-                    eST.setAttribute( "atomAsInt", a );
+                    eST = templates.GetInstanceOf( testSTName );
+                    eST.SetAttribute( "atom", getTokenTypeAsTargetLabel( a ) );
+                    eST.SetAttribute( "atomAsInt", a );
//eST.setAttribute("k",Utils.integer(k));
}
else
{
-                    eST = templates.getInstanceOf( testRangeSTName );
-                    eST.setAttribute( "lower", getTokenTypeAsTargetLabel( a ) );
-                    eST.setAttribute( "lowerAsInt", a );
-                    eST.setAttribute( "upper", getTokenTypeAsTargetLabel( b ) );
-                    eST.setAttribute( "upperAsInt", b );
-                    eST.setAttribute( "rangeNumber", rangeNumber );
+                    eST = templates.GetInstanceOf( testRangeSTName );
+                    eST.SetAttribute( "lower", getTokenTypeAsTargetLabel( a ) );
+                    eST.SetAttribute( "lowerAsInt", a );
+                    eST.SetAttribute( "upper", getTokenTypeAsTargetLabel( b ) );
+                    eST.SetAttribute( "upperAsInt", b );
+                    eST.SetAttribute( "rangeNumber", rangeNumber );
}
-                eST.setAttribute( "k", k );
-                setST.setAttribute( "ranges", eST );
+                eST.SetAttribute( "k", k );
+                setST.SetAttribute( "ranges", eST );
rangeNumber++;
}
return setST;
@@ -979,7 +987,7 @@ namespace Antlr3.Codegen
tokenType >= Label.MIN_TOKEN_TYPE )
{
// don't do FAUX labels 'cept EOF
-                    code.setAttribute( "tokens.{name,type}", tokenID, tokenType );
+                    code.SetAttribute( "tokens.{name,type}", tokenID, tokenType );
}
}
}
@@ -995,7 +1003,7 @@ namespace Antlr3.Codegen
if ( tokenName != null )
{
tokenName = target.getTargetStringLiteralFromString( tokenName, true );
-                    code.setAttribute( "tokenNames", tokenName );
+                    code.SetAttribute( "tokenNames", tokenName );
}
}
}
@@ -1032,14 +1040,14 @@ namespace Antlr3.Codegen
StringTemplate vocabFileST =
new StringTemplate( vocabFilePattern,
typeof( AngleBracketTemplateLexer ) );
-            vocabFileST.setName( "vocab-file" );
+            vocabFileST.SetName( "vocab-file" );
// make constants for the token names
foreach ( string tokenID in grammar.TokenIDs )
{
int tokenType = grammar.getTokenType( tokenID );
if ( tokenType >= Label.MIN_TOKEN_TYPE )
{
-                    vocabFileST.setAttribute( "tokens.{name,type}", tokenID, tokenType );
+                    vocabFileST.SetAttribute( "tokens.{name,type}", tokenID, tokenType );
}
}

@@ -1049,7 +1057,7 @@ namespace Antlr3.Codegen
int tokenType = grammar.getTokenType( literal );
if ( tokenType >= Label.MIN_TOKEN_TYPE )
{
-                    vocabFileST.setAttribute( "tokens.{name,type}", literal, tokenType );
+                    vocabFileST.SetAttribute( "tokens.{name,type}", literal, tokenType );
}
}

@@ -1093,8 +1101,8 @@ namespace Antlr3.Codegen
IList chunks = translator.translateToChunks();
chunks = target.postProcessAction( chunks, actionToken );
StringTemplate catST = new StringTemplate( templates, "<chunks>" );
-                    catST.setAttribute( "chunks", chunks );
-                    templates.createStringTemplate();
+                    catST.SetAttribute( "chunks", chunks );
+                    templates.CreateStringTemplate();
translatedArgs.Add( catST );
}
}
@@ -1455,7 +1463,7 @@ namespace Antlr3.Codegen
*/
public virtual string getRecognizerFileName( string name, int type )
{
-            StringTemplate extST = templates.getInstanceOf( "codeFileExtension" );
+            StringTemplate extST = templates.GetInstanceOf( "codeFileExtension" );
string recognizerName = grammar.getRecognizerName();
return recognizerName + extST.ToString();
/*
@@ -1486,9 +1494,9 @@ namespace Antlr3.Codegen
DateTime start = DateTime.Now;
TextWriter w = tool.getOutputFile( grammar, fileName );
// Write the output to a StringWriter
-            IStringTemplateWriter wr = templates.getStringTemplateWriter( w );
-            wr.setLineWidth( lineWidth );
-            code.write( wr );
+            IStringTemplateWriter wr = templates.GetStringTemplateWriter( w );
+            wr.SetLineWidth( lineWidth );
+            code.Write( wr );
w.Close();
DateTime stop = DateTime.Now;
//JSystem.@out.println("render time for "+fileName+": "+(int)(stop-start)+"ms");
diff --git a/Antlr3/Grammars/ActionTranslator.cs b/Antlr3/Grammars/ActionTranslator.cs
index f1cbfaf..fce14f7 100644
--- a/Antlr3/Grammars/ActionTranslator.cs
+++ b/Antlr3/Grammars/ActionTranslator.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\ActionTranslator.g3 2009-03-07 08:57:31
+// $ANTLR 3.1.2 Grammars\\ActionTranslator.g3 2009-03-16 17:44:10

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -223,9 +223,9 @@ public partial class ActionTranslator : Lexer
{
st = template("ruleSetPropertyRef_"+(y!=null?y.Text:null));
grammar.referenceRuleLabelPredefinedAttribute((x!=null?x.Text:null));
-									st.setAttribute("scope", (x!=null?x.Text:null));
-									st.setAttribute("attr", (y!=null?y.Text:null));
-									st.setAttribute("expr", translateAction((expr!=null?expr.Text:null)));
+									st.SetAttribute("scope", (x!=null?x.Text:null));
+									st.SetAttribute("attr", (y!=null?y.Text:null));
+									st.SetAttribute("expr", translateAction((expr!=null?expr.Text:null)));
}
else
{
@@ -248,15 +248,15 @@ public partial class ActionTranslator : Lexer
else if ( scope.isParameterScope )
{
st = template("parameterSetAttributeRef");
-								st.setAttribute("attr", scope.getAttribute((y!=null?y.Text:null)));
-								st.setAttribute("expr", translateAction((expr!=null?expr.Text:null)));
+								st.SetAttribute("attr", scope.getAttribute((y!=null?y.Text:null)));
+								st.SetAttribute("expr", translateAction((expr!=null?expr.Text:null)));
}
else
{ // must be return value
st = template("returnSetAttributeRef");
-								st.setAttribute("ruleDescriptor", enclosingRule);
-								st.setAttribute("attr", scope.getAttribute((y!=null?y.Text:null)));
-								st.setAttribute("expr", translateAction((expr!=null?expr.Text:null)));
+								st.SetAttribute("ruleDescriptor", enclosingRule);
+								st.SetAttribute("attr", scope.getAttribute((y!=null?y.Text:null)));
+								st.SetAttribute("expr", translateAction((expr!=null?expr.Text:null)));
}

}
@@ -316,8 +316,8 @@ public partial class ActionTranslator : Lexer
{
st = template("rulePropertyRef_"+(y!=null?y.Text:null));
grammar.referenceRuleLabelPredefinedAttribute((x!=null?x.Text:null));
-								st.setAttribute("scope", (x!=null?x.Text:null));
-								st.setAttribute("attr", (y!=null?y.Text:null));
+								st.SetAttribute("scope", (x!=null?x.Text:null));
+								st.SetAttribute("attr", (y!=null?y.Text:null));
}
else if ( scope.isPredefinedLexerRuleScope )
{
@@ -330,13 +330,13 @@ public partial class ActionTranslator : Lexer
else if ( scope.isParameterScope )
{
st = template("parameterAttributeRef");
-								st.setAttribute("attr", scope.getAttribute((y!=null?y.Text:null)));
+								st.SetAttribute("attr", scope.getAttribute((y!=null?y.Text:null)));
}
else
{ // must be return value
st = template("returnAttributeRef");
-								st.setAttribute("ruleDescriptor", enclosingRule);
-								st.setAttribute("attr", scope.getAttribute((y!=null?y.Text:null)));
+								st.SetAttribute("ruleDescriptor", enclosingRule);
+								st.SetAttribute("attr", scope.getAttribute((y!=null?y.Text:null)));
}

}
@@ -475,8 +475,8 @@ public partial class ActionTranslator : Lexer
}
}
StringTemplate st = template("tokenLabelPropertyRef_"+(y!=null?y.Text:null));
-							st.setAttribute("scope", label);
-							st.setAttribute("attr", AttributeScope.tokenScope.getAttribute((y!=null?y.Text:null)));
+							st.SetAttribute("scope", label);
+							st.SetAttribute("attr", AttributeScope.tokenScope.getAttribute((y!=null?y.Text:null)));

}

@@ -652,15 +652,15 @@ public partial class ActionTranslator : Lexer
{
st = template("ruleLabelPropertyRef_"+(y!=null?y.Text:null));
grammar.referenceRuleLabelPredefinedAttribute(refdRuleName);
-								st.setAttribute("scope", label);
-								st.setAttribute("attr", (y!=null?y.Text:null));
+								st.SetAttribute("scope", label);
+								st.SetAttribute("attr", (y!=null?y.Text:null));
}
else if ( scope.isPredefinedLexerRuleScope )
{
st = template("lexerRuleLabelPropertyRef_"+(y!=null?y.Text:null));
grammar.referenceRuleLabelPredefinedAttribute(refdRuleName);
-								st.setAttribute("scope", label);
-								st.setAttribute("attr", (y!=null?y.Text:null));
+								st.SetAttribute("scope", label);
+								st.SetAttribute("attr", (y!=null?y.Text:null));
}
else if ( scope.isParameterScope )
{
@@ -669,9 +669,9 @@ public partial class ActionTranslator : Lexer
else
{
st = template("ruleLabelRef");
-								st.setAttribute("referencedRule", refdRule);
-								st.setAttribute("scope", label);
-								st.setAttribute("attr", scope.getAttribute((y!=null?y.Text:null)));
+								st.SetAttribute("referencedRule", refdRule);
+								st.SetAttribute("scope", label);
+								st.SetAttribute("attr", scope.getAttribute((y!=null?y.Text:null)));
}

}
@@ -725,7 +725,7 @@ public partial class ActionTranslator : Lexer
{
st = template("tokenLabelRef");
}
-							st.setAttribute("label", (ID1!=null?ID1.Text:null));
+							st.SetAttribute("label", (ID1!=null?ID1.Text:null));

}

@@ -776,7 +776,7 @@ public partial class ActionTranslator : Lexer
else
{
StringTemplate st = template("tokenLabelRef");
-								st.setAttribute("label", label);
+								st.SetAttribute("label", label);
}

}
@@ -830,7 +830,7 @@ public partial class ActionTranslator : Lexer
else
{
StringTemplate st = template("lexerRuleLabel");
-								st.setAttribute("label", label);
+								st.SetAttribute("label", label);
}

}
@@ -906,9 +906,9 @@ public partial class ActionTranslator : Lexer
{
st = template("ruleSetPropertyRef_"+(ID4!=null?ID4.Text:null));
grammar.referenceRuleLabelPredefinedAttribute(enclosingRule.name);
-									st.setAttribute("scope", enclosingRule.name);
-									st.setAttribute("attr", (ID4!=null?ID4.Text:null));
-									st.setAttribute("expr", translateAction((expr!=null?expr.Text:null)));
+									st.SetAttribute("scope", enclosingRule.name);
+									st.SetAttribute("attr", (ID4!=null?ID4.Text:null));
+									st.SetAttribute("expr", translateAction((expr!=null?expr.Text:null)));
}
else
{
@@ -922,15 +922,15 @@ public partial class ActionTranslator : Lexer
else if ( scope.isParameterScope )
{
st = template("parameterSetAttributeRef");
-								st.setAttribute("attr", scope.getAttribute((ID4!=null?ID4.Text:null)));
-								st.setAttribute("expr", translateAction((expr!=null?expr.Text:null)));
+								st.SetAttribute("attr", scope.getAttribute((ID4!=null?ID4.Text:null)));
+								st.SetAttribute("expr", translateAction((expr!=null?expr.Text:null)));
}
else
{
st = template("returnSetAttributeRef");
-								st.setAttribute("ruleDescriptor", enclosingRule);
-								st.setAttribute("attr", scope.getAttribute((ID4!=null?ID4.Text:null)));
-								st.setAttribute("expr", translateAction((expr!=null?expr.Text:null)));
+								st.SetAttribute("ruleDescriptor", enclosingRule);
+								st.SetAttribute("attr", scope.getAttribute((ID4!=null?ID4.Text:null)));
+								st.SetAttribute("expr", translateAction((expr!=null?expr.Text:null)));
}

}
@@ -976,25 +976,25 @@ public partial class ActionTranslator : Lexer
{
st = template("rulePropertyRef_"+(ID5!=null?ID5.Text:null));
grammar.referenceRuleLabelPredefinedAttribute(enclosingRule.name);
-								st.setAttribute("scope", enclosingRule.name);
-								st.setAttribute("attr", (ID5!=null?ID5.Text:null));
+								st.SetAttribute("scope", enclosingRule.name);
+								st.SetAttribute("attr", (ID5!=null?ID5.Text:null));
}
else if ( scope.isPredefinedLexerRuleScope )
{
st = template("lexerRulePropertyRef_"+(ID5!=null?ID5.Text:null));
-								st.setAttribute("scope", enclosingRule.name);
-								st.setAttribute("attr", (ID5!=null?ID5.Text:null));
+								st.SetAttribute("scope", enclosingRule.name);
+								st.SetAttribute("attr", (ID5!=null?ID5.Text:null));
}
else if ( scope.isParameterScope )
{
st = template("parameterAttributeRef");
-								st.setAttribute("attr", scope.getAttribute((ID5!=null?ID5.Text:null)));
+								st.SetAttribute("attr", scope.getAttribute((ID5!=null?ID5.Text:null)));
}
else
{
st = template("returnAttributeRef");
-								st.setAttribute("ruleDescriptor", enclosingRule);
-								st.setAttribute("attr", scope.getAttribute((ID5!=null?ID5.Text:null)));
+								st.SetAttribute("ruleDescriptor", enclosingRule);
+								st.SetAttribute("attr", scope.getAttribute((ID5!=null?ID5.Text:null)));
}

}
@@ -1071,9 +1071,9 @@ public partial class ActionTranslator : Lexer
if ( scope!=null )
{
StringTemplate st = template("scopeSetAttributeRef");
-								st.setAttribute("scope", (x!=null?x.Text:null));
-								st.setAttribute("attr",  scope.getAttribute((y!=null?y.Text:null)));
-								st.setAttribute("expr",  translateAction((expr!=null?expr.Text:null)));
+								st.SetAttribute("scope", (x!=null?x.Text:null));
+								st.SetAttribute("attr",  scope.getAttribute((y!=null?y.Text:null)));
+								st.SetAttribute("expr",  translateAction((expr!=null?expr.Text:null)));
}
else
{
@@ -1128,8 +1128,8 @@ public partial class ActionTranslator : Lexer
if ( scope!=null )
{
StringTemplate st = template("scopeAttributeRef");
-								st.setAttribute("scope", (x!=null?x.Text:null));
-								st.setAttribute("attr",  scope.getAttribute((y!=null?y.Text:null)));
+								st.SetAttribute("scope", (x!=null?x.Text:null));
+								st.SetAttribute("attr",  scope.getAttribute((y!=null?y.Text:null)));
}
else
{
@@ -1225,9 +1225,9 @@ public partial class ActionTranslator : Lexer
{

StringTemplate st = template("scopeAttributeRef");
-							st.setAttribute("scope",    (x!=null?x.Text:null));
-							st.setAttribute("attr",     resolveDynamicScope((x!=null?x.Text:null)).getAttribute((y!=null?y.Text:null)));
-							st.setAttribute("negIndex", (expr!=null?expr.Text:null));
+							st.SetAttribute("scope",    (x!=null?x.Text:null));
+							st.SetAttribute("attr",     resolveDynamicScope((x!=null?x.Text:null)).getAttribute((y!=null?y.Text:null)));
+							st.SetAttribute("negIndex", (expr!=null?expr.Text:null));

}

@@ -1274,9 +1274,9 @@ public partial class ActionTranslator : Lexer
{

StringTemplate st = template("scopeAttributeRef");
-							st.setAttribute("scope", (x!=null?x.Text:null));
-							st.setAttribute("attr",  resolveDynamicScope((x!=null?x.Text:null)).getAttribute((y!=null?y.Text:null)));
-							st.setAttribute("index", (expr!=null?expr.Text:null));
+							st.SetAttribute("scope", (x!=null?x.Text:null));
+							st.SetAttribute("attr",  resolveDynamicScope((x!=null?x.Text:null)).getAttribute((y!=null?y.Text:null)));
+							st.SetAttribute("index", (expr!=null?expr.Text:null));

}

@@ -1372,7 +1372,7 @@ public partial class ActionTranslator : Lexer
{

StringTemplate st = template("isolatedDynamicScopeRef");
-							st.setAttribute("scope", (ID6!=null?ID6.Text:null));
+							st.SetAttribute("scope", (ID6!=null?ID6.Text:null));

}

@@ -1771,9 +1771,9 @@ public partial class ActionTranslator : Lexer
StringTemplate st = template("actionSetAttribute");
string action = (a!=null?a.Text:null);
action = action.Substring( 1, action.Length - 2 ); // stuff inside {...}
-							st.setAttribute("st", translateAction(action));
-							st.setAttribute("attrName", (ID7!=null?ID7.Text:null));
-							st.setAttribute("expr", translateAction((expr!=null?expr.Text:null)));
+							st.SetAttribute("st", translateAction(action));
+							st.SetAttribute("attrName", (ID7!=null?ID7.Text:null));
+							st.SetAttribute("expr", translateAction((expr!=null?expr.Text:null)));

}

@@ -1839,9 +1839,9 @@ public partial class ActionTranslator : Lexer
{

StringTemplate st = template("actionSetAttribute");
-							st.setAttribute("st", (x!=null?x.Text:null));
-							st.setAttribute("attrName", (y!=null?y.Text:null));
-							st.setAttribute("expr", translateAction((expr!=null?expr.Text:null)));
+							st.SetAttribute("st", (x!=null?x.Text:null));
+							st.SetAttribute("attrName", (y!=null?y.Text:null));
+							st.SetAttribute("expr", translateAction((expr!=null?expr.Text:null)));

}

@@ -1940,7 +1940,7 @@ public partial class ActionTranslator : Lexer
StringTemplate st = template("actionStringConstructor");
string action = (a!=null?a.Text:null);
action = action.Substring( 1, action.Length - 2 ); // stuff inside {...}
-							st.setAttribute("stringExpr", translateAction(action));
+							st.SetAttribute("stringExpr", translateAction(action));

}

diff --git a/Antlr3/Grammars/ActionTranslator.g3 b/Antlr3/Grammars/ActionTranslator.g3
index 41c32e2..e8b7970 100644
--- a/Antlr3/Grammars/ActionTranslator.g3
+++ b/Antlr3/Grammars/ActionTranslator.g3
@@ -102,9 +102,9 @@ SET_ENCLOSING_RULE_SCOPE_ATTR
{
st = template("ruleSetPropertyRef_"+$y.text);
grammar.referenceRuleLabelPredefinedAttribute($x.text);
-					st.setAttribute("scope", $x.text);
-					st.setAttribute("attr", $y.text);
-					st.setAttribute("expr", translateAction($expr.text));
+					st.SetAttribute("scope", $x.text);
+					st.SetAttribute("attr", $y.text);
+					st.SetAttribute("expr", translateAction($expr.text));
}
else
{
@@ -127,15 +127,15 @@ SET_ENCLOSING_RULE_SCOPE_ATTR
else if ( scope.isParameterScope )
{
st = template("parameterSetAttributeRef");
-				st.setAttribute("attr", scope.getAttribute($y.text));
-				st.setAttribute("expr", translateAction($expr.text));
+				st.SetAttribute("attr", scope.getAttribute($y.text));
+				st.SetAttribute("expr", translateAction($expr.text));
}
else
{ // must be return value
st = template("returnSetAttributeRef");
-				st.setAttribute("ruleDescriptor", enclosingRule);
-				st.setAttribute("attr", scope.getAttribute($y.text));
-				st.setAttribute("expr", translateAction($expr.text));
+				st.SetAttribute("ruleDescriptor", enclosingRule);
+				st.SetAttribute("attr", scope.getAttribute($y.text));
+				st.SetAttribute("expr", translateAction($expr.text));
}
}
;
@@ -158,8 +158,8 @@ ENCLOSING_RULE_SCOPE_ATTR
{
st = template("rulePropertyRef_"+$y.text);
grammar.referenceRuleLabelPredefinedAttribute($x.text);
-				st.setAttribute("scope", $x.text);
-				st.setAttribute("attr", $y.text);
+				st.SetAttribute("scope", $x.text);
+				st.SetAttribute("attr", $y.text);
}
else if ( scope.isPredefinedLexerRuleScope )
{
@@ -172,13 +172,13 @@ ENCLOSING_RULE_SCOPE_ATTR
else if ( scope.isParameterScope )
{
st = template("parameterAttributeRef");
-				st.setAttribute("attr", scope.getAttribute($y.text));
+				st.SetAttribute("attr", scope.getAttribute($y.text));
}
else
{ // must be return value
st = template("returnAttributeRef");
-				st.setAttribute("ruleDescriptor", enclosingRule);
-				st.setAttribute("attr", scope.getAttribute($y.text));
+				st.SetAttribute("ruleDescriptor", enclosingRule);
+				st.SetAttribute("attr", scope.getAttribute($y.text));
}
}
;
@@ -229,8 +229,8 @@ TOKEN_SCOPE_ATTR
}
}
StringTemplate st = template("tokenLabelPropertyRef_"+$y.text);
-			st.setAttribute("scope", label);
-			st.setAttribute("attr", AttributeScope.tokenScope.getAttribute($y.text));
+			st.SetAttribute("scope", label);
+			st.SetAttribute("attr", AttributeScope.tokenScope.getAttribute($y.text));
}
;

@@ -313,15 +313,15 @@ RULE_SCOPE_ATTR
{
st = template("ruleLabelPropertyRef_"+$y.text);
grammar.referenceRuleLabelPredefinedAttribute(refdRuleName);
-				st.setAttribute("scope", label);
-				st.setAttribute("attr", $y.text);
+				st.SetAttribute("scope", label);
+				st.SetAttribute("attr", $y.text);
}
else if ( scope.isPredefinedLexerRuleScope )
{
st = template("lexerRuleLabelPropertyRef_"+$y.text);
grammar.referenceRuleLabelPredefinedAttribute(refdRuleName);
-				st.setAttribute("scope", label);
-				st.setAttribute("attr", $y.text);
+				st.SetAttribute("scope", label);
+				st.SetAttribute("attr", $y.text);
}
else if ( scope.isParameterScope )
{
@@ -330,9 +330,9 @@ RULE_SCOPE_ATTR
else
{
st = template("ruleLabelRef");
-				st.setAttribute("referencedRule", refdRule);
-				st.setAttribute("scope", label);
-				st.setAttribute("attr", scope.getAttribute($y.text));
+				st.SetAttribute("referencedRule", refdRule);
+				st.SetAttribute("scope", label);
+				st.SetAttribute("attr", scope.getAttribute($y.text));
}
}
;
@@ -357,7 +357,7 @@ LABEL_REF
{
st = template("tokenLabelRef");
}
-			st.setAttribute("label", $ID.text);
+			st.SetAttribute("label", $ID.text);
}
;

@@ -378,7 +378,7 @@ ISOLATED_TOKEN_REF
else
{
StringTemplate st = template("tokenLabelRef");
-				st.setAttribute("label", label);
+				st.SetAttribute("label", label);
}
}
;
@@ -402,7 +402,7 @@ ISOLATED_LEXER_RULE_REF
else
{
StringTemplate st = template("lexerRuleLabel");
-				st.setAttribute("label", label);
+				st.SetAttribute("label", label);
}
}
;
@@ -432,9 +432,9 @@ SET_LOCAL_ATTR
{
st = template("ruleSetPropertyRef_"+$ID.text);
grammar.referenceRuleLabelPredefinedAttribute(enclosingRule.name);
-					st.setAttribute("scope", enclosingRule.name);
-					st.setAttribute("attr", $ID.text);
-					st.setAttribute("expr", translateAction($expr.text));
+					st.SetAttribute("scope", enclosingRule.name);
+					st.SetAttribute("attr", $ID.text);
+					st.SetAttribute("expr", translateAction($expr.text));
}
else
{
@@ -448,15 +448,15 @@ SET_LOCAL_ATTR
else if ( scope.isParameterScope )
{
st = template("parameterSetAttributeRef");
-				st.setAttribute("attr", scope.getAttribute($ID.text));
-				st.setAttribute("expr", translateAction($expr.text));
+				st.SetAttribute("attr", scope.getAttribute($ID.text));
+				st.SetAttribute("expr", translateAction($expr.text));
}
else
{
st = template("returnSetAttributeRef");
-				st.setAttribute("ruleDescriptor", enclosingRule);
-				st.setAttribute("attr", scope.getAttribute($ID.text));
-				st.setAttribute("expr", translateAction($expr.text));
+				st.SetAttribute("ruleDescriptor", enclosingRule);
+				st.SetAttribute("attr", scope.getAttribute($ID.text));
+				st.SetAttribute("expr", translateAction($expr.text));
}
}
;
@@ -470,25 +470,25 @@ LOCAL_ATTR
{
st = template("rulePropertyRef_"+$ID.text);
grammar.referenceRuleLabelPredefinedAttribute(enclosingRule.name);
-				st.setAttribute("scope", enclosingRule.name);
-				st.setAttribute("attr", $ID.text);
+				st.SetAttribute("scope", enclosingRule.name);
+				st.SetAttribute("attr", $ID.text);
}
else if ( scope.isPredefinedLexerRuleScope )
{
st = template("lexerRulePropertyRef_"+$ID.text);
-				st.setAttribute("scope", enclosingRule.name);
-				st.setAttribute("attr", $ID.text);
+				st.SetAttribute("scope", enclosingRule.name);
+				st.SetAttribute("attr", $ID.text);
}
else if ( scope.isParameterScope )
{
st = template("parameterAttributeRef");
-				st.setAttribute("attr", scope.getAttribute($ID.text));
+				st.SetAttribute("attr", scope.getAttribute($ID.text));
}
else
{
st = template("returnAttributeRef");
-				st.setAttribute("ruleDescriptor", enclosingRule);
-				st.setAttribute("attr", scope.getAttribute($ID.text));
+				st.SetAttribute("ruleDescriptor", enclosingRule);
+				st.SetAttribute("attr", scope.getAttribute($ID.text));
}
}
;
@@ -515,9 +515,9 @@ SET_DYNAMIC_SCOPE_ATTR
if ( scope!=null )
{
StringTemplate st = template("scopeSetAttributeRef");
-				st.setAttribute("scope", $x.text);
-				st.setAttribute("attr",  scope.getAttribute($y.text));
-				st.setAttribute("expr",  translateAction($expr.text));
+				st.SetAttribute("scope", $x.text);
+				st.SetAttribute("attr",  scope.getAttribute($y.text));
+				st.SetAttribute("expr",  translateAction($expr.text));
}
else
{
@@ -536,8 +536,8 @@ DYNAMIC_SCOPE_ATTR
if ( scope!=null )
{
StringTemplate st = template("scopeAttributeRef");
-				st.setAttribute("scope", $x.text);
-				st.setAttribute("attr",  scope.getAttribute($y.text));
+				st.SetAttribute("scope", $x.text);
+				st.SetAttribute("attr",  scope.getAttribute($y.text));
}
else
{
@@ -570,9 +570,9 @@ DYNAMIC_NEGATIVE_INDEXED_SCOPE_ATTR
// {JSystem.@out.println("found \$scope[-...]::attr");}
{
StringTemplate st = template("scopeAttributeRef");
-			st.setAttribute("scope",    $x.text);
-			st.setAttribute("attr",     resolveDynamicScope($x.text).getAttribute($y.text));
-			st.setAttribute("negIndex", $expr.text);
+			st.SetAttribute("scope",    $x.text);
+			st.SetAttribute("attr",     resolveDynamicScope($x.text).getAttribute($y.text));
+			st.SetAttribute("negIndex", $expr.text);
}
;

@@ -581,9 +581,9 @@ DYNAMIC_ABSOLUTE_INDEXED_SCOPE_ATTR
// {JSystem.@out.println("found \$scope[...]::attr");}
{
StringTemplate st = template("scopeAttributeRef");
-			st.setAttribute("scope", $x.text);
-			st.setAttribute("attr",  resolveDynamicScope($x.text).getAttribute($y.text));
-			st.setAttribute("index", $expr.text);
+			st.SetAttribute("scope", $x.text);
+			st.SetAttribute("attr",  resolveDynamicScope($x.text).getAttribute($y.text));
+			st.SetAttribute("index", $expr.text);
}
;

@@ -602,7 +602,7 @@ ISOLATED_DYNAMIC_SCOPE
// {JSystem.@out.println("found isolated \$scope where scope is a dynamic scope");}
{
StringTemplate st = template("isolatedDynamicScopeRef");
-			st.setAttribute("scope", $ID.text);
+			st.SetAttribute("scope", $ID.text);
}
;

@@ -659,9 +659,9 @@ SET_EXPR_ATTRIBUTE
StringTemplate st = template("actionSetAttribute");
string action = $a.text;
action = action.Substring( 1, action.Length - 2 ); // stuff inside {...}
-			st.setAttribute("st", translateAction(action));
-			st.setAttribute("attrName", $ID.text);
-			st.setAttribute("expr", translateAction($expr.text));
+			st.SetAttribute("st", translateAction(action));
+			st.SetAttribute("attrName", $ID.text);
+			st.SetAttribute("expr", translateAction($expr.text));
}
;

@@ -674,9 +674,9 @@ SET_ATTRIBUTE
// {JSystem.@out.println("found \%x.y = z;");}
{
StringTemplate st = template("actionSetAttribute");
-			st.setAttribute("st", $x.text);
-			st.setAttribute("attrName", $y.text);
-			st.setAttribute("expr", translateAction($expr.text));
+			st.SetAttribute("st", $x.text);
+			st.SetAttribute("attrName", $y.text);
+			st.SetAttribute("expr", translateAction($expr.text));
}
;

@@ -694,7 +694,7 @@ TEMPLATE_EXPR
StringTemplate st = template("actionStringConstructor");
string action = $a.text;
action = action.Substring( 1, action.Length - 2 ); // stuff inside {...}
-			st.setAttribute("stringExpr", translateAction(action));
+			st.SetAttribute("stringExpr", translateAction(action));
}
;

diff --git a/Antlr3/Grammars/ActionTranslatorHelper.cs b/Antlr3/Grammars/ActionTranslatorHelper.cs
index c25fab9..e2cc475 100644
--- a/Antlr3/Grammars/ActionTranslatorHelper.cs
+++ b/Antlr3/Grammars/ActionTranslatorHelper.cs
@@ -188,7 +188,7 @@ namespace Antlr3.Grammars

protected StringTemplate template( string name )
{
-            StringTemplate st = generator.Templates.getInstanceOf( name );
+            StringTemplate st = generator.Templates.GetInstanceOf( name );
chunks.Add( st );
return st;
}
diff --git a/Antlr3/Grammars/CodeGenTreeWalker.cs b/Antlr3/Grammars/CodeGenTreeWalker.cs
index 60b6079..eb28560 100644
--- a/Antlr3/Grammars/CodeGenTreeWalker.cs
+++ b/Antlr3/Grammars/CodeGenTreeWalker.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\CodeGenTreeWalker.g3 2009-03-08 16:36:01
+// $ANTLR 3.1.2 Grammars\\CodeGenTreeWalker.g3 2009-03-16 17:47:49

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -201,9 +201,9 @@ public partial class CodeGenTreeWalker : TreeParser
this.headerFileST = headerFileST;
string superClass = (string)g.getOption("superClass");
outputOption = (string)g.getOption("output");
-				recognizerST.setAttribute("superClass", superClass);
+				recognizerST.SetAttribute("superClass", superClass);
if ( g.type!=Grammar.LEXER ) {
-					recognizerST.setAttribute("ASTLabelType", g.getOption("ASTLabelType"));
+					recognizerST.SetAttribute("ASTLabelType", g.getOption("ASTLabelType"));
}
if ( g.type==Grammar.TREE_PARSER && g.getOption("ASTLabelType")==null ) {
ErrorManager.grammarWarning(ErrorManager.MSG_MISSING_AST_TYPE_IN_TREE_GRAMMAR,
@@ -212,11 +212,11 @@ public partial class CodeGenTreeWalker : TreeParser
g.name);
}
if ( g.type!=Grammar.TREE_PARSER ) {
-					recognizerST.setAttribute("labelType", g.getOption("TokenLabelType"));
+					recognizerST.SetAttribute("labelType", g.getOption("TokenLabelType"));
}
-				recognizerST.setAttribute("numRules", grammar.Rules.Count);
-				outputFileST.setAttribute("numRules", grammar.Rules.Count);
-				headerFileST.setAttribute("numRules", grammar.Rules.Count);
+				recognizerST.SetAttribute("numRules", grammar.Rules.Count);
+				outputFileST.SetAttribute("numRules", grammar.Rules.Count);
+				headerFileST.SetAttribute("numRules", grammar.Rules.Count);
}

try
@@ -479,8 +479,8 @@ public partial class CodeGenTreeWalker : TreeParser
if ( state.backtracking == 0 )
{

-									outputFileST.setAttribute("docComment", (cmt!=null?cmt.Text:null));
-									headerFileST.setAttribute("docComment", (cmt!=null?cmt.Text:null));
+									outputFileST.SetAttribute("docComment", (cmt!=null?cmt.Text:null));
+									headerFileST.SetAttribute("docComment", (cmt!=null?cmt.Text:null));

}

@@ -492,11 +492,11 @@ public partial class CodeGenTreeWalker : TreeParser
if ( state.backtracking == 0 )
{

-							recognizerST.setAttribute("name", grammar.getRecognizerName());
-							outputFileST.setAttribute("name", grammar.getRecognizerName());
-							headerFileST.setAttribute("name", grammar.getRecognizerName());
-							recognizerST.setAttribute("scopes", grammar.GlobalScopes);
-							headerFileST.setAttribute("scopes", grammar.GlobalScopes);
+							recognizerST.SetAttribute("name", grammar.getRecognizerName());
+							outputFileST.SetAttribute("name", grammar.getRecognizerName());
+							headerFileST.SetAttribute("name", grammar.getRecognizerName());
+							recognizerST.SetAttribute("scopes", grammar.GlobalScopes);
+							headerFileST.SetAttribute("scopes", grammar.GlobalScopes);

}
// Grammars\\CodeGenTreeWalker.g3:155:3: ( ^( OPTIONS ( . )* ) )?
@@ -899,9 +899,9 @@ public partial class CodeGenTreeWalker : TreeParser

if ( (rST!=null?rST.code:default(StringTemplate)) != null )
{
-													recognizerST.setAttribute("rules", (rST!=null?rST.code:default(StringTemplate)));
-													outputFileST.setAttribute("rules", (rST!=null?rST.code:default(StringTemplate)));
-													headerFileST.setAttribute("rules", (rST!=null?rST.code:default(StringTemplate)));
+													recognizerST.SetAttribute("rules", (rST!=null?rST.code:default(StringTemplate)));
+													outputFileST.SetAttribute("rules", (rST!=null?rST.code:default(StringTemplate)));
+													headerFileST.SetAttribute("rules", (rST!=null?rST.code:default(StringTemplate)));
}

}
@@ -1328,7 +1328,7 @@ public partial class CodeGenTreeWalker : TreeParser
false);
description =
generator.target.getTargetStringLiteralFromString(description);
-								(b!=null?b.code:default(StringTemplate)).setAttribute("description", description);
+								(b!=null?b.code:default(StringTemplate)).SetAttribute("description", description);
// do not generate lexer rules in combined grammar
string stName = null;
if ( ruleDescr.isSynPred )
@@ -1354,12 +1354,12 @@ public partial class CodeGenTreeWalker : TreeParser
stName = "rule";
}
}
-								retval.code = templates.getInstanceOf(stName);
-								if ( retval.code.getName().Equals("rule") )
+								retval.code = templates.GetInstanceOf(stName);
+								if ( retval.code.GetName().Equals("rule") )
{
-									retval.code.setAttribute("emptyRule", grammar.isEmptyRule(block2));
+									retval.code.SetAttribute("emptyRule", grammar.isEmptyRule(block2));
}
-								retval.code.setAttribute("ruleDescriptor", ruleDescr);
+								retval.code.SetAttribute("ruleDescriptor", ruleDescr);
string memo = (string)grammar.getBlockOption(((GrammarAST)retval.start),"memoize");
if ( memo==null )
{
@@ -1368,7 +1368,7 @@ public partial class CodeGenTreeWalker : TreeParser
if ( memo!=null && memo.Equals("true") &&
(stName.Equals("rule")||stName.Equals("lexerRule")) )
{
-									retval.code.setAttribute("memoize", memo!=null && memo.Equals("true"));
+									retval.code.SetAttribute("memoize", memo!=null && memo.Equals("true"));
}

}
@@ -1409,24 +1409,24 @@ public partial class CodeGenTreeWalker : TreeParser
bool naked =
currentRuleName.Equals(Grammar.ARTIFICIAL_TOKENS_RULENAME) ||
((mod!=null?((GrammarAST)mod.start):null)!=null&&(mod!=null?((GrammarAST)mod.start):null).Text.Equals(Grammar.FRAGMENT_RULE_MODIFIER));
-									retval.code.setAttribute("nakedBlock", naked);
+									retval.code.SetAttribute("nakedBlock", naked);
}
else
{
description = grammar.grammarTreeToString(((GrammarAST)retval.start),false);
description = generator.target.getTargetStringLiteralFromString(description);
-									retval.code.setAttribute("description", description);
+									retval.code.SetAttribute("description", description);
}
Rule theRule = grammar.getRule(currentRuleName);
generator.translateActionAttributeReferencesForSingleScope(
theRule,
theRule.Actions
);
-								retval.code.setAttribute("ruleName", currentRuleName);
-								retval.code.setAttribute("block", (b!=null?b.code:default(StringTemplate)));
+								retval.code.SetAttribute("ruleName", currentRuleName);
+								retval.code.SetAttribute("block", (b!=null?b.code:default(StringTemplate)));
if ( initAction!=null )
{
-									retval.code.setAttribute("initAction", initAction);
+									retval.code.SetAttribute("initAction", initAction);
}
}

@@ -1743,19 +1743,19 @@ public partial class CodeGenTreeWalker : TreeParser
StringTemplate decision = null;
if ( dfa != null )
{
-					retval.code = templates.getInstanceOf(blockTemplateName);
+					retval.code = templates.GetInstanceOf(blockTemplateName);
decision = generator.genLookaheadDecision(recognizerST,dfa);
-					retval.code.setAttribute("decision", decision);
-					retval.code.setAttribute("decisionNumber", dfa.DecisionNumber);
-					retval.code.setAttribute("maxK",dfa.MaxLookaheadDepth);
-					retval.code.setAttribute("maxAlt",dfa.NumberOfAlts);
+					retval.code.SetAttribute("decision", decision);
+					retval.code.SetAttribute("decisionNumber", dfa.DecisionNumber);
+					retval.code.SetAttribute("maxK",dfa.MaxLookaheadDepth);
+					retval.code.SetAttribute("maxAlt",dfa.NumberOfAlts);
}
else
{
-					retval.code = templates.getInstanceOf(blockTemplateName+"SingleAlt");
+					retval.code = templates.GetInstanceOf(blockTemplateName+"SingleAlt");
}
-				retval.code.setAttribute("blockLevel", blockNestingLevel);
-				retval.code.setAttribute("enclosingBlockLevel", blockNestingLevel-1);
+				retval.code.SetAttribute("blockLevel", blockNestingLevel);
+				retval.code.SetAttribute("enclosingBlockLevel", blockNestingLevel-1);
altNum = 1;
if ( this.blockNestingLevel==RULE_BLOCK_NESTING_LEVEL ) {
this.outerAltNum=1;
@@ -1813,7 +1813,7 @@ public partial class CodeGenTreeWalker : TreeParser
if ( state.backtracking == 0 )
{

-								retval.code.setAttribute("alts",(setBlock1!=null?setBlock1.code:default(StringTemplate)));
+								retval.code.SetAttribute("alts",(setBlock1!=null?setBlock1.code:default(StringTemplate)));

}

@@ -1931,12 +1931,12 @@ public partial class CodeGenTreeWalker : TreeParser
(rew!=null?((GrammarAST)rew.start):null).GetChild(0).Type==ETC;
if ( (rew!=null?rew.code:default(StringTemplate))!=null && !etc )
{
-													(alt!=null?alt.code:default(StringTemplate)).setAttribute("rew", (rew!=null?rew.code:default(StringTemplate)));
+													(alt!=null?alt.code:default(StringTemplate)).SetAttribute("rew", (rew!=null?rew.code:default(StringTemplate)));
}
// add this alt to the list of alts for this block
-												retval.code.setAttribute("alts",(alt!=null?alt.code:default(StringTemplate)));
-												(alt!=null?alt.code:default(StringTemplate)).setAttribute("altNum", altNum);
-												(alt!=null?alt.code:default(StringTemplate)).setAttribute("outerAlt", blockNestingLevel==RULE_BLOCK_NESTING_LEVEL);
+												retval.code.SetAttribute("alts",(alt!=null?alt.code:default(StringTemplate)));
+												(alt!=null?alt.code:default(StringTemplate)).SetAttribute("altNum", altNum);
+												(alt!=null?alt.code:default(StringTemplate)).SetAttribute("outerAlt", blockNestingLevel==RULE_BLOCK_NESTING_LEVEL);
altNum++;

}
@@ -2069,26 +2069,26 @@ public partial class CodeGenTreeWalker : TreeParser
{
setcode = getTokenElementST("matchSet", "set", s, null, null);
}
-							setcode.setAttribute("elementIndex", i);
+							setcode.SetAttribute("elementIndex", i);
if ( grammar.type!=Grammar.LEXER )
{
generator.generateLocalFOLLOW(s,"set",currentRuleName,i);
}
-							setcode.setAttribute("s",
+							setcode.SetAttribute("s",
generator.genSetExpr(templates,s.SetValue,1,false));
-							StringTemplate altcode=templates.getInstanceOf("alt");
-							altcode.setAttribute("elements.{el,line,pos}",
+							StringTemplate altcode=templates.GetInstanceOf("alt");
+							altcode.SetAttribute("elements.{el,line,pos}",
setcode,
s.Line,
s.CharPositionInLine
);
-							altcode.setAttribute("altNum", 1);
-							altcode.setAttribute("outerAlt", blockNestingLevel==RULE_BLOCK_NESTING_LEVEL);
+							altcode.SetAttribute("altNum", 1);
+							altcode.SetAttribute("outerAlt", blockNestingLevel==RULE_BLOCK_NESTING_LEVEL);
if ( !currentAltHasASTRewrite && grammar.BuildAST )
{
-								altcode.setAttribute("autoAST", true);
+								altcode.SetAttribute("autoAST", true);
}
-							altcode.setAttribute("treeLevel", rewriteTreeNestingLevel);
+							altcode.SetAttribute("treeLevel", rewriteTreeNestingLevel);
retval.code = altcode;

}
@@ -2330,7 +2330,7 @@ public partial class CodeGenTreeWalker : TreeParser
{

List chunks = generator.translateAction(currentRuleName,ACTION2);
-							ruleST.setAttribute("exceptions.{decl,action}",(ARG_ACTION3!=null?ARG_ACTION3.Text:null),chunks);
+							ruleST.SetAttribute("exceptions.{decl,action}",(ARG_ACTION3!=null?ARG_ACTION3.Text:null),chunks);

}

@@ -2371,7 +2371,7 @@ public partial class CodeGenTreeWalker : TreeParser
{

List chunks = generator.translateAction(currentRuleName,ACTION4);
-							ruleST.setAttribute("finally",chunks);
+							ruleST.SetAttribute("finally",chunks);

}

@@ -2408,7 +2408,7 @@ public partial class CodeGenTreeWalker : TreeParser

if ( state.backtracking == 0 )
{
-				retval.code = templates.getInstanceOf("alt");
+				retval.code = templates.GetInstanceOf("alt");
/*
// TODO: can we use Rule.altsWithRewrites???
if ( blockNestingLevel==RULE_BLOCK_NESTING_LEVEL ) {
@@ -2432,11 +2432,11 @@ public partial class CodeGenTreeWalker : TreeParser
}
string description = grammar.grammarTreeToString(((GrammarAST)retval.start), false);
description = generator.target.getTargetStringLiteralFromString(description);
-				retval.code.setAttribute("description", description);
-				retval.code.setAttribute("treeLevel", rewriteTreeNestingLevel);
+				retval.code.SetAttribute("description", description);
+				retval.code.SetAttribute("treeLevel", rewriteTreeNestingLevel);
if ( !currentAltHasASTRewrite && grammar.BuildAST )
{
-					retval.code.setAttribute("autoAST", true);
+					retval.code.SetAttribute("autoAST", true);
}
}

@@ -2476,7 +2476,7 @@ public partial class CodeGenTreeWalker : TreeParser

if ( e!=null )
{
-												retval.code.setAttribute("elements.{el,line,pos}",
+												retval.code.SetAttribute("elements.{el,line,pos}",
(e!=null?e.code:default(StringTemplate)),
(e!=null?((GrammarAST)e.start):null).Line,
(e!=null?((GrammarAST)e.start):null).CharPositionInLine
@@ -2674,14 +2674,14 @@ public partial class CodeGenTreeWalker : TreeParser
if ( state.backtracking == 0 )
{

-								retval.code = templates.getInstanceOf("charRangeRef");
+								retval.code = templates.GetInstanceOf("charRangeRef");
string low = generator.target.getTargetCharLiteralFromANTLRCharLiteral(generator,(a!=null?a.Text:null));
string high = generator.target.getTargetCharLiteralFromANTLRCharLiteral(generator,(b!=null?b.Text:null));
-								retval.code.setAttribute("a", low);
-								retval.code.setAttribute("b", high);
+								retval.code.SetAttribute("a", low);
+								retval.code.SetAttribute("b", high);
if ( label!=null )
{
-									retval.code.setAttribute("label", label.Text);
+									retval.code.SetAttribute("label", label.Text);
}

}
@@ -2793,10 +2793,10 @@ public partial class CodeGenTreeWalker : TreeParser
if ( state.backtracking == 0 )
{

-								retval.code = templates.getInstanceOf("validateSemanticPredicate");
-								retval.code.setAttribute("pred", generator.translateAction(currentRuleName,sp));
+								retval.code = templates.GetInstanceOf("validateSemanticPredicate");
+								retval.code.SetAttribute("pred", generator.translateAction(currentRuleName,sp));
string description = generator.target.getTargetStringLiteralFromString((sp!=null?sp.Text:null));
-								retval.code.setAttribute("description", description);
+								retval.code.SetAttribute("description", description);

}

@@ -2974,8 +2974,8 @@ public partial class CodeGenTreeWalker : TreeParser
if ( state.backtracking == 0 )
{

-								retval.code = templates.getInstanceOf("execAction");
-								retval.code.setAttribute("action", generator.translateAction(currentRuleName,act));
+								retval.code = templates.GetInstanceOf("execAction");
+								retval.code.SetAttribute("action", generator.translateAction(currentRuleName,act));

}

@@ -2988,8 +2988,8 @@ public partial class CodeGenTreeWalker : TreeParser
if ( state.backtracking == 0 )
{

-								retval.code = templates.getInstanceOf("execForcedAction");
-								retval.code.setAttribute("action", generator.translateAction(currentRuleName,act2));
+								retval.code = templates.GetInstanceOf("execForcedAction");
+								retval.code.SetAttribute("action", generator.translateAction(currentRuleName,act2));

}

@@ -3196,9 +3196,9 @@ public partial class CodeGenTreeWalker : TreeParser
(GrammarAST)n.GetChild(0),
astSuffix,
labelText);
-							code.setAttribute("s",generator.genSetExpr(templates,elements,1,false));
+							code.SetAttribute("s",generator.genSetExpr(templates,elements,1,false));
int i = ((TokenWithIndex)n.Token).TokenIndex;
-							code.setAttribute("elementIndex", i);
+							code.SetAttribute("elementIndex", i);
if ( grammar.type!=Grammar.LEXER )
{
generator.generateLocalFOLLOW(n,"set",currentRuleName,i);
@@ -3379,7 +3379,7 @@ public partial class CodeGenTreeWalker : TreeParser

string description = grammar.grammarTreeToString(((GrammarAST)retval.start), false);
description = generator.target.getTargetStringLiteralFromString(description);
-							retval.code.setAttribute("description", description);
+							retval.code.SetAttribute("description", description);

}

@@ -3418,17 +3418,17 @@ public partial class CodeGenTreeWalker : TreeParser
GrammarAST rootSuffix = null;
if ( state.backtracking == 0 )
{
-				retval.code = templates.getInstanceOf("tree");
+				retval.code = templates.GetInstanceOf("tree");
NFAState afterDOWN = (NFAState)((GrammarAST)retval.start).NFATreeDownState.getTransition(0).target;
LookaheadSet s = grammar.LOOK(afterDOWN);
if ( s.member(Label.UP) ) {
// nullable child list if we can see the UP as the next token
// we need an "if ( input.LA(1)==Token.DOWN )" gate around
// the child list.
-					retval.code.setAttribute("nullableChildList", "true");
+					retval.code.SetAttribute("nullableChildList", "true");
}
-				retval.code.setAttribute("enclosingTreeLevel", rewriteTreeNestingLevel-1);
-				retval.code.setAttribute("treeLevel", rewriteTreeNestingLevel);
+				retval.code.SetAttribute("enclosingTreeLevel", rewriteTreeNestingLevel-1);
+				retval.code.SetAttribute("treeLevel", rewriteTreeNestingLevel);
Rule r = grammar.getRule(currentRuleName);
if ( grammar.BuildAST && !r.hasRewrite(outerAltNum) ) {
rootSuffix = new GrammarAST(ROOT,"ROOT");
@@ -3451,7 +3451,7 @@ public partial class CodeGenTreeWalker : TreeParser
if ( state.backtracking == 0 )
{

-								retval.code.setAttribute("root.{el,line,pos}",
+								retval.code.SetAttribute("root.{el,line,pos}",
(el!=null?el.code:default(StringTemplate)),
(el!=null?((GrammarAST)el.start):null).Line,
(el!=null?((GrammarAST)el.start):null).CharPositionInLine
@@ -3502,7 +3502,7 @@ public partial class CodeGenTreeWalker : TreeParser
if ( state.backtracking == 0 )
{

-											retval.code.setAttribute("actionsAfterRoot.{el,line,pos}",
+											retval.code.SetAttribute("actionsAfterRoot.{el,line,pos}",
(act!=null?act.code:default(StringTemplate)),
(act!=null?((GrammarAST)act.start):null).Line,
(act!=null?((GrammarAST)act.start):null).CharPositionInLine
@@ -3547,7 +3547,7 @@ public partial class CodeGenTreeWalker : TreeParser
if ( state.backtracking == 0 )
{

-										 retval.code.setAttribute("children.{el,line,pos}",
+										 retval.code.SetAttribute("children.{el,line,pos}",
(el!=null?el.code:default(StringTemplate)),
(el!=null?((GrammarAST)el.start):null).Line,
(el!=null?((GrammarAST)el.start):null).CharPositionInLine
@@ -3731,23 +3731,23 @@ public partial class CodeGenTreeWalker : TreeParser
labelText = null;
}
retval.code = getRuleElementST("ruleRef", (r!=null?r.Text:null), r, astSuffix, labelText);
-								retval.code.setAttribute("rule", rdef);
+								retval.code.SetAttribute("rule", rdef);
if ( scope!=null ) { // scoped rule ref
Grammar scopeG = grammar.composite.getGrammar(scope.Text);
-									retval.code.setAttribute("scope", scopeG);
+									retval.code.SetAttribute("scope", scopeG);
}
else if ( rdef.grammar != this.grammar ) { // nonlocal
// if rule definition is not in this grammar, it's nonlocal
IList<Grammar> rdefDelegates = rdef.grammar.getDelegates();
if ( rdefDelegates.Contains(this.grammar) ) {
-										retval.code.setAttribute("scope", rdef.grammar);
+										retval.code.SetAttribute("scope", rdef.grammar);
}
else {
// defining grammar is not a delegate, scope all the
// back to root, which has delegate methods for all
// rules.  Don't use scope if we are root.
if ( this.grammar != rdef.grammar.composite.delegateGrammarTreeRoot.grammar ) {
-											retval.code.setAttribute("scope",
+											retval.code.SetAttribute("scope",
rdef.grammar.composite.delegateGrammarTreeRoot.grammar);
}
}
@@ -3755,10 +3755,10 @@ public partial class CodeGenTreeWalker : TreeParser

if ( rarg!=null ) {
List args = generator.translateAction(currentRuleName,rarg);
-									retval.code.setAttribute("args", args);
+									retval.code.SetAttribute("args", args);
}
int i = ((TokenWithIndex)r.Token).TokenIndex;
-								retval.code.setAttribute("elementIndex", i);
+								retval.code.SetAttribute("elementIndex", i);
generator.generateLocalFOLLOW(r,(r!=null?r.Text:null),currentRuleName,i);
r.code = retval.code;

@@ -3813,14 +3813,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
if ( grammar.getTokenType((t!=null?t.Text:null))==Label.EOF )
{
-										retval.code = templates.getInstanceOf("lexerMatchEOF");
+										retval.code = templates.GetInstanceOf("lexerMatchEOF");
}
else
{
-										retval.code = templates.getInstanceOf("lexerRuleRef");
+										retval.code = templates.GetInstanceOf("lexerRuleRef");
if ( isListLabel(labelText) )
{
-											retval.code = templates.getInstanceOf("lexerRuleRefAndListLabel");
+											retval.code = templates.GetInstanceOf("lexerRuleRefAndListLabel");
}
string scopeName = null;
if ( scope!=null )
@@ -3828,40 +3828,40 @@ public partial class CodeGenTreeWalker : TreeParser
scopeName = scope.Text;
}
Rule rdef2 = grammar.getRule(scopeName, (t!=null?t.Text:null));
-										retval.code.setAttribute("rule", rdef2);
+										retval.code.SetAttribute("rule", rdef2);
if ( scope!=null )
{ // scoped rule ref
Grammar scopeG = grammar.composite.getGrammar(scope.Text);
-											retval.code.setAttribute("scope", scopeG);
+											retval.code.SetAttribute("scope", scopeG);
}
else if ( rdef2.grammar != this.grammar )
{ // nonlocal
// if rule definition is not in this grammar, it's nonlocal
-											retval.code.setAttribute("scope", rdef2.grammar);
+											retval.code.SetAttribute("scope", rdef2.grammar);
}
if ( targ!=null )
{
List args = generator.translateAction(currentRuleName,targ);
-											retval.code.setAttribute("args", args);
+											retval.code.SetAttribute("args", args);
}
}
int i = ((TokenWithIndex)t.Token).TokenIndex;
-									retval.code.setAttribute("elementIndex", i);
+									retval.code.SetAttribute("elementIndex", i);
if ( label!=null )
-										retval.code.setAttribute("label", labelText);
+										retval.code.SetAttribute("label", labelText);
}
else
{
retval.code = getTokenElementST("tokenRef", (t!=null?t.Text:null), t, astSuffix, labelText);
string tokenLabel =
generator.getTokenTypeAsTargetLabel(grammar.getTokenType(t.Text));
-									retval.code.setAttribute("token",tokenLabel);
+									retval.code.SetAttribute("token",tokenLabel);
if ( !currentAltHasASTRewrite && t.terminalOptions!=null )
{
-										retval.code.setAttribute("hetero",t.terminalOptions[Grammar.defaultTokenOption]);
+										retval.code.SetAttribute("hetero",t.terminalOptions[Grammar.defaultTokenOption]);
}
int i = ((TokenWithIndex)t.Token).TokenIndex;
-									retval.code.setAttribute("elementIndex", i);
+									retval.code.SetAttribute("elementIndex", i);
generator.generateLocalFOLLOW(t,tokenLabel,currentRuleName,i);
}
t.code = retval.code;
@@ -3879,23 +3879,23 @@ public partial class CodeGenTreeWalker : TreeParser

if ( grammar.type==Grammar.LEXER )
{
-									retval.code = templates.getInstanceOf("charRef");
-									retval.code.setAttribute("char",
+									retval.code = templates.GetInstanceOf("charRef");
+									retval.code.SetAttribute("char",
generator.target.getTargetCharLiteralFromANTLRCharLiteral(generator,(c!=null?c.Text:null)));
if ( label!=null )
{
-										retval.code.setAttribute("label", labelText);
+										retval.code.SetAttribute("label", labelText);
}
}
else { // else it's a token type reference
retval.code = getTokenElementST("tokenRef", "char_literal", c, astSuffix, labelText);
string tokenLabel = generator.getTokenTypeAsTargetLabel(grammar.getTokenType((c!=null?c.Text:null)));
-									retval.code.setAttribute("token",tokenLabel);
+									retval.code.SetAttribute("token",tokenLabel);
if ( c.terminalOptions!=null ) {
-										retval.code.setAttribute("hetero",c.terminalOptions[Grammar.defaultTokenOption]);
+										retval.code.SetAttribute("hetero",c.terminalOptions[Grammar.defaultTokenOption]);
}
int i = ((TokenWithIndex)c.Token).TokenIndex;
-									retval.code.setAttribute("elementIndex", i);
+									retval.code.SetAttribute("elementIndex", i);
generator.generateLocalFOLLOW(c,tokenLabel,currentRuleName,i);
}

@@ -3912,12 +3912,12 @@ public partial class CodeGenTreeWalker : TreeParser

if ( grammar.type==Grammar.LEXER )
{
-									retval.code = templates.getInstanceOf("lexerStringRef");
-									retval.code.setAttribute("string",
+									retval.code = templates.GetInstanceOf("lexerStringRef");
+									retval.code.SetAttribute("string",
generator.target.getTargetStringLiteralFromANTLRStringLiteral(generator,(s!=null?s.Text:null)));
if ( label!=null )
{
-										retval.code.setAttribute("label", labelText);
+										retval.code.SetAttribute("label", labelText);
}
}
else
@@ -3925,13 +3925,13 @@ public partial class CodeGenTreeWalker : TreeParser
retval.code = getTokenElementST("tokenRef", "string_literal", s, astSuffix, labelText);
string tokenLabel =
generator.getTokenTypeAsTargetLabel(grammar.getTokenType((s!=null?s.Text:null)));
-									retval.code.setAttribute("token",tokenLabel);
+									retval.code.SetAttribute("token",tokenLabel);
if ( s.terminalOptions!=null )
{
-										retval.code.setAttribute("hetero",s.terminalOptions[Grammar.defaultTokenOption]);
+										retval.code.SetAttribute("hetero",s.terminalOptions[Grammar.defaultTokenOption]);
}
int i = ((TokenWithIndex)s.Token).TokenIndex;
-									retval.code.setAttribute("elementIndex", i);
+									retval.code.SetAttribute("elementIndex", i);
generator.generateLocalFOLLOW(s,tokenLabel,currentRuleName,i);
}

@@ -3947,7 +3947,7 @@ public partial class CodeGenTreeWalker : TreeParser
{

retval.code = getWildcardST(w,astSuffix,labelText);
-								retval.code.setAttribute("elementIndex", ((TokenWithIndex)w.Token).TokenIndex);
+								retval.code.SetAttribute("elementIndex", ((TokenWithIndex)w.Token).TokenIndex);

}

@@ -4112,12 +4112,12 @@ public partial class CodeGenTreeWalker : TreeParser

code = getTokenElementST("matchSet", "set", s, astSuffix, labelText);
int i = ((TokenWithIndex)s.Token).TokenIndex;
-							code.setAttribute("elementIndex", i);
+							code.SetAttribute("elementIndex", i);
if ( grammar.type!=Grammar.LEXER )
{
generator.generateLocalFOLLOW(s,"set",currentRuleName,i);
}
-							code.setAttribute("s", generator.genSetExpr(templates,s.SetValue,1,false));
+							code.SetAttribute("s", generator.genSetExpr(templates,s.SetValue,1,false));

}

@@ -4250,14 +4250,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
if ( generator.grammar.BuildTemplate )
{
-						retval.code = templates.getInstanceOf("rewriteTemplate");
+						retval.code = templates.GetInstanceOf("rewriteTemplate");
}
else
{
-						retval.code = templates.getInstanceOf("rewriteCode");
-						retval.code.setAttribute("treeLevel", OUTER_REWRITE_NESTING_LEVEL);
-						retval.code.setAttribute("rewriteBlockLevel", OUTER_REWRITE_NESTING_LEVEL);
-						retval.code.setAttribute("referencedElementsDeep",
+						retval.code = templates.GetInstanceOf("rewriteCode");
+						retval.code.SetAttribute("treeLevel", OUTER_REWRITE_NESTING_LEVEL);
+						retval.code.SetAttribute("rewriteBlockLevel", OUTER_REWRITE_NESTING_LEVEL);
+						retval.code.SetAttribute("referencedElementsDeep",
getTokenTypesAsTargetLabels(((GrammarAST)retval.start).rewriteRefsDeep));
HashSet<string> tokenLabels =
grammar.getLabels(((GrammarAST)retval.start).rewriteRefsDeep, Grammar.TOKEN_LABEL);
@@ -4273,21 +4273,21 @@ public partial class CodeGenTreeWalker : TreeParser
grammar.getLabels(((GrammarAST)retval.start).rewriteRefsDeep, Grammar.WILDCARD_TREE_LIST_LABEL);
// just in case they ref r for "previous value", make a stream
// from retval.tree
-						StringTemplate retvalST = templates.getInstanceOf("prevRuleRootRef");
+						StringTemplate retvalST = templates.GetInstanceOf("prevRuleRootRef");
ruleLabels.Add(retvalST.ToString());
-						retval.code.setAttribute("referencedTokenLabels", tokenLabels);
-						retval.code.setAttribute("referencedTokenListLabels", tokenListLabels);
-						retval.code.setAttribute("referencedRuleLabels", ruleLabels);
-						retval.code.setAttribute("referencedRuleListLabels", ruleListLabels);
-						retval.code.setAttribute("referencedWildcardLabels", wildcardLabels);
-						retval.code.setAttribute("referencedWildcardListLabels", wildcardListLabels);
+						retval.code.SetAttribute("referencedTokenLabels", tokenLabels);
+						retval.code.SetAttribute("referencedTokenListLabels", tokenListLabels);
+						retval.code.SetAttribute("referencedRuleLabels", ruleLabels);
+						retval.code.SetAttribute("referencedRuleListLabels", ruleListLabels);
+						retval.code.SetAttribute("referencedWildcardLabels", wildcardLabels);
+						retval.code.SetAttribute("referencedWildcardListLabels", wildcardListLabels);
}
}
else
{
-						retval.code = templates.getInstanceOf("noRewrite");
-						retval.code.setAttribute("treeLevel", OUTER_REWRITE_NESTING_LEVEL);
-						retval.code.setAttribute("rewriteBlockLevel", OUTER_REWRITE_NESTING_LEVEL);
+						retval.code = templates.GetInstanceOf("noRewrite");
+						retval.code.SetAttribute("treeLevel", OUTER_REWRITE_NESTING_LEVEL);
+						retval.code.SetAttribute("rewriteBlockLevel", OUTER_REWRITE_NESTING_LEVEL);
}
}

@@ -4360,7 +4360,7 @@ public partial class CodeGenTreeWalker : TreeParser
string description =
grammar.grammarTreeToString(r,false);
description = generator.target.getTargetStringLiteralFromString(description);
-										retval.code.setAttribute("alts.{pred,alt,description}",
+										retval.code.SetAttribute("alts.{pred,alt,description}",
predChunks,
alt,
description);
@@ -4412,9 +4412,9 @@ public partial class CodeGenTreeWalker : TreeParser
StringTemplate save_currentBlockST = currentBlockST;
if ( state.backtracking == 0 )
{
-				code = templates.getInstanceOf(blockTemplateName);
+				code = templates.GetInstanceOf(blockTemplateName);
currentBlockST = code;
-				code.setAttribute("rewriteBlockLevel", rewriteBlockNestingLevel);
+				code.SetAttribute("rewriteBlockLevel", rewriteBlockNestingLevel);
}

try
@@ -4427,9 +4427,9 @@ public partial class CodeGenTreeWalker : TreeParser
if ( state.backtracking == 0 )
{

-								currentBlockST.setAttribute("referencedElementsDeep",
+								currentBlockST.SetAttribute("referencedElementsDeep",
getTokenTypesAsTargetLabels(BLOCK14.rewriteRefsDeep));
-								currentBlockST.setAttribute("referencedElements",
+								currentBlockST.SetAttribute("referencedElements",
getTokenTypesAsTargetLabels(BLOCK14.rewriteRefsShallow));

}
@@ -4446,7 +4446,7 @@ public partial class CodeGenTreeWalker : TreeParser
if ( state.backtracking == 0 )
{

-							code.setAttribute("alt", alt);
+							code.SetAttribute("alt", alt);

}

@@ -4591,7 +4591,7 @@ public partial class CodeGenTreeWalker : TreeParser

if ( state.backtracking == 0 )
{
-					code =templates.getInstanceOf("rewriteElementList");
+					code =templates.GetInstanceOf("rewriteElementList");
}

Match(input, TokenConstants.DOWN, null); if (state.failed) return code;
@@ -4644,7 +4644,7 @@ public partial class CodeGenTreeWalker : TreeParser
if (state.failed) return code;
if ( state.backtracking == 0 )
{
-								code.setAttribute("elements.{el,line,pos}",
+								code.SetAttribute("elements.{el,line,pos}",
(el!=null?el.code:default(StringTemplate)),
(el!=null?((GrammarAST)el.start):null).Line,
(el!=null?((GrammarAST)el.start):null).CharPositionInLine
@@ -4678,8 +4678,8 @@ public partial class CodeGenTreeWalker : TreeParser
Match(input,EPSILON,Follow._EPSILON_in_rewrite_alternative1827); if (state.failed) return code;
if ( state.backtracking == 0 )
{
-						code.setAttribute("elements.{el,line,pos}",
-														   templates.getInstanceOf("rewriteEmptyAlt"),
+						code.SetAttribute("elements.{el,line,pos}",
+														   templates.GetInstanceOf("rewriteEmptyAlt"),
a.Line,
a.CharPositionInLine
);
@@ -4928,7 +4928,7 @@ public partial class CodeGenTreeWalker : TreeParser

string description = grammar.grammarTreeToString(((GrammarAST)retval.start), false);
description = generator.target.getTargetStringLiteralFromString(description);
-								retval.code.setAttribute("description", description);
+								retval.code.SetAttribute("description", description);

}

@@ -4956,7 +4956,7 @@ public partial class CodeGenTreeWalker : TreeParser

string description = grammar.grammarTreeToString(((GrammarAST)retval.start), false);
description = generator.target.getTargetStringLiteralFromString(description);
-								retval.code.setAttribute("description", description);
+								retval.code.SetAttribute("description", description);

}

@@ -4984,7 +4984,7 @@ public partial class CodeGenTreeWalker : TreeParser

string description = grammar.grammarTreeToString(((GrammarAST)retval.start), false);
description = generator.target.getTargetStringLiteralFromString(description);
-								retval.code.setAttribute("description", description);
+								retval.code.SetAttribute("description", description);

}

@@ -5024,9 +5024,9 @@ public partial class CodeGenTreeWalker : TreeParser
rewriteTreeNestingLevel++;
if ( state.backtracking == 0 )
{
-				retval.code = templates.getInstanceOf("rewriteTree");
-				retval.code.setAttribute("treeLevel", rewriteTreeNestingLevel);
-				retval.code.setAttribute("enclosingTreeLevel", rewriteTreeNestingLevel-1);
+				retval.code = templates.GetInstanceOf("rewriteTree");
+				retval.code.SetAttribute("treeLevel", rewriteTreeNestingLevel);
+				retval.code.SetAttribute("enclosingTreeLevel", rewriteTreeNestingLevel-1);
}

try
@@ -5045,7 +5045,7 @@ public partial class CodeGenTreeWalker : TreeParser
if ( state.backtracking == 0 )
{

-								retval.code.setAttribute("root.{el,line,pos}",
+								retval.code.SetAttribute("root.{el,line,pos}",
(r!=null?r.code:default(StringTemplate)),
(r!=null?((GrammarAST)r.start):null).Line,
(r!=null?((GrammarAST)r.start):null).CharPositionInLine
@@ -5077,7 +5077,7 @@ public partial class CodeGenTreeWalker : TreeParser
if ( state.backtracking == 0 )
{

-										retval.code.setAttribute("children.{el,line,pos}",
+										retval.code.SetAttribute("children.{el,line,pos}",
(el!=null?el.code:default(StringTemplate)),
(el!=null?((GrammarAST)el.start):null).Line,
(el!=null?((GrammarAST)el.start):null).CharPositionInLine
@@ -5104,7 +5104,7 @@ public partial class CodeGenTreeWalker : TreeParser

string description = grammar.grammarTreeToString(((GrammarAST)retval.start), false);
description = generator.target.getTargetStringLiteralFromString(description);
-							retval.code.setAttribute("description", description);
+							retval.code.SetAttribute("description", description);

}

@@ -5196,8 +5196,8 @@ public partial class CodeGenTreeWalker : TreeParser
{
stName += "Root";
}
-								retval.code = templates.getInstanceOf(stName);
-								retval.code.setAttribute("rule", ruleRefName);
+								retval.code = templates.GetInstanceOf(stName);
+								retval.code.SetAttribute("rule", ruleRefName);
if ( grammar.getRule(ruleRefName)==null )
{
ErrorManager.grammarError(ErrorManager.MSG_UNDEFINED_RULE_REF,
@@ -5334,17 +5334,17 @@ public partial class CodeGenTreeWalker : TreeParser
{
stName += "Root";
}
-								retval.code = templates.getInstanceOf(stName);
-								retval.code.setAttribute("hetero", hetero);
+								retval.code = templates.GetInstanceOf(stName);
+								retval.code.SetAttribute("hetero", hetero);
if ( arg!=null )
{
List args = generator.translateAction(currentRuleName,arg);
-									retval.code.setAttribute("args", args);
+									retval.code.SetAttribute("args", args);
}
-								retval.code.setAttribute("elementIndex", ((TokenWithIndex)((GrammarAST)retval.start).Token).TokenIndex);
+								retval.code.SetAttribute("elementIndex", ((TokenWithIndex)((GrammarAST)retval.start).Token).TokenIndex);
int ttype = grammar.getTokenType(tokenName);
string tok = generator.getTokenTypeAsTargetLabel(ttype);
-								retval.code.setAttribute("token", tok);
+								retval.code.SetAttribute("token", tok);
if ( grammar.getTokenType(tokenName)==Label.INVALID )
{
ErrorManager.grammarError(ErrorManager.MSG_UNDEFINED_TOKEN_REF_IN_REWRITE,
@@ -5379,9 +5379,9 @@ public partial class CodeGenTreeWalker : TreeParser
((GrammarAST)(LABEL22)).Token,
labelName);
}
-									StringTemplate labelST = templates.getInstanceOf("prevRuleRootRef");
-									retval.code = templates.getInstanceOf("rewriteRuleLabelRef"+(isRoot?"Root":""));
-									retval.code.setAttribute("label", labelST);
+									StringTemplate labelST = templates.GetInstanceOf("prevRuleRootRef");
+									retval.code = templates.GetInstanceOf("rewriteRuleLabelRef"+(isRoot?"Root":""));
+									retval.code.SetAttribute("label", labelST);
}
else if ( pair==null )
{
@@ -5419,8 +5419,8 @@ public partial class CodeGenTreeWalker : TreeParser
{
stName += "Root";
}
-									retval.code = templates.getInstanceOf(stName);
-									retval.code.setAttribute("label", labelName);
+									retval.code = templates.GetInstanceOf(stName);
+									retval.code.SetAttribute("label", labelName);
}

}
@@ -5437,8 +5437,8 @@ public partial class CodeGenTreeWalker : TreeParser
// actions in rewrite rules yield a tree object
string actText = (ACTION23!=null?ACTION23.Text:null);
List chunks = generator.translateAction(currentRuleName,ACTION23);
-								retval.code = templates.getInstanceOf("rewriteNodeAction"+(isRoot?"Root":""));
-								retval.code.setAttribute("action", chunks);
+								retval.code = templates.GetInstanceOf("rewriteNodeAction"+(isRoot?"Root":""));
+								retval.code.SetAttribute("action", chunks);

}

@@ -5519,7 +5519,7 @@ public partial class CodeGenTreeWalker : TreeParser
Match(input, TokenConstants.UP, null); if (state.failed) return code;
if ( state.backtracking == 0 )
{
-					code =templates.getInstanceOf("rewriteEmptyTemplate");
+					code =templates.GetInstanceOf("rewriteEmptyTemplate");
}

}
@@ -5573,18 +5573,18 @@ public partial class CodeGenTreeWalker : TreeParser

if ( id!=null && (id!=null?id.Text:null).Equals("template") )
{
-											code = templates.getInstanceOf("rewriteInlineTemplate");
+											code = templates.GetInstanceOf("rewriteInlineTemplate");
}
else if ( id!=null )
{
-											code = templates.getInstanceOf("rewriteExternalTemplate");
-											code.setAttribute("name", (id!=null?id.Text:null));
+											code = templates.GetInstanceOf("rewriteExternalTemplate");
+											code.SetAttribute("name", (id!=null?id.Text:null));
}
else if ( ind!=null )
{ // must be %({expr})(args)
-										code = templates.getInstanceOf("rewriteIndirectTemplate");
+										code = templates.GetInstanceOf("rewriteIndirectTemplate");
List chunks=generator.translateAction(currentRuleName,ind);
-										code.setAttribute("expr", chunks);
+										code.SetAttribute("expr", chunks);
}

}
@@ -5623,7 +5623,7 @@ public partial class CodeGenTreeWalker : TreeParser
// broken up yet into trees.
a.outerAltNum = this.outerAltNum;
List chunks = generator.translateAction(currentRuleName,a);
-														code.setAttribute("args.{name,value}", (arg!=null?arg.Text:null), chunks);
+														code.SetAttribute("args.{name,value}", (arg!=null?arg.Text:null), chunks);

}

@@ -5668,7 +5668,7 @@ public partial class CodeGenTreeWalker : TreeParser
string sl = (DOUBLE_QUOTE_STRING_LITERAL24!=null?DOUBLE_QUOTE_STRING_LITERAL24.Text:null);
string t = sl.Substring( 1, sl.Length - 2 ); // strip quotes
t = generator.target.getTargetStringLiteralFromString(t);
-											code.setAttribute("template",t);
+											code.SetAttribute("template",t);

}

@@ -5684,7 +5684,7 @@ public partial class CodeGenTreeWalker : TreeParser
string sl = (DOUBLE_ANGLE_STRING_LITERAL25!=null?DOUBLE_ANGLE_STRING_LITERAL25.Text:null);
string t = sl.Substring( 2, sl.Length - 4 ); // strip double angle quotes
t = generator.target.getTargetStringLiteralFromString(t);
-											code.setAttribute("template",t);
+											code.SetAttribute("template",t);

}

@@ -5707,8 +5707,8 @@ public partial class CodeGenTreeWalker : TreeParser

// set alt num for same reason as ARGLIST above
act.outerAltNum = this.outerAltNum;
-								code =templates.getInstanceOf("rewriteAction");
-								code.setAttribute("action",
+								code =templates.GetInstanceOf("rewriteAction");
+								code.SetAttribute("action",
generator.translateAction(currentRuleName,act));

}
diff --git a/Antlr3/Grammars/CodeGenTreeWalker.g3 b/Antlr3/Grammars/CodeGenTreeWalker.g3
index 035b491..65cfc07 100644
--- a/Antlr3/Grammars/CodeGenTreeWalker.g3
+++ b/Antlr3/Grammars/CodeGenTreeWalker.g3
@@ -108,9 +108,9 @@ grammar_[Grammar g,
this.headerFileST = headerFileST;
string superClass = (string)g.getOption("superClass");
outputOption = (string)g.getOption("output");
-		recognizerST.setAttribute("superClass", superClass);
+		recognizerST.SetAttribute("superClass", superClass);
if ( g.type!=Grammar.LEXER ) {
-			recognizerST.setAttribute("ASTLabelType", g.getOption("ASTLabelType"));
+			recognizerST.SetAttribute("ASTLabelType", g.getOption("ASTLabelType"));
}
if ( g.type==Grammar.TREE_PARSER && g.getOption("ASTLabelType")==null ) {
ErrorManager.grammarWarning(ErrorManager.MSG_MISSING_AST_TYPE_IN_TREE_GRAMMAR,
@@ -119,11 +119,11 @@ grammar_[Grammar g,
g.name);
}
if ( g.type!=Grammar.TREE_PARSER ) {
-			recognizerST.setAttribute("labelType", g.getOption("TokenLabelType"));
+			recognizerST.SetAttribute("labelType", g.getOption("TokenLabelType"));
}
-		$recognizerST.setAttribute("numRules", grammar.Rules.Count);
-		$outputFileST.setAttribute("numRules", grammar.Rules.Count);
-		$headerFileST.setAttribute("numRules", grammar.Rules.Count);
+		$recognizerST.SetAttribute("numRules", grammar.Rules.Count);
+		$outputFileST.SetAttribute("numRules", grammar.Rules.Count);
+		$headerFileST.SetAttribute("numRules", grammar.Rules.Count);
}
}
:	(	^( LEXER_GRAMMAR grammarSpec )
@@ -141,16 +141,16 @@ grammarSpec
:   name=ID
(	cmt=DOC_COMMENT
{
-				outputFileST.setAttribute("docComment", $cmt.text);
-				headerFileST.setAttribute("docComment", $cmt.text);
+				outputFileST.SetAttribute("docComment", $cmt.text);
+				headerFileST.SetAttribute("docComment", $cmt.text);
}
)?
{
-			recognizerST.setAttribute("name", grammar.getRecognizerName());
-			outputFileST.setAttribute("name", grammar.getRecognizerName());
-			headerFileST.setAttribute("name", grammar.getRecognizerName());
-			recognizerST.setAttribute("scopes", grammar.GlobalScopes);
-			headerFileST.setAttribute("scopes", grammar.GlobalScopes);
+			recognizerST.SetAttribute("name", grammar.getRecognizerName());
+			outputFileST.SetAttribute("name", grammar.getRecognizerName());
+			headerFileST.SetAttribute("name", grammar.getRecognizerName());
+			recognizerST.SetAttribute("scopes", grammar.GlobalScopes);
+			headerFileST.SetAttribute("scopes", grammar.GlobalScopes);
}
( ^(OPTIONS .*) )?
( ^(IMPORT .*) )?
@@ -172,9 +172,9 @@ rules[StringTemplate recognizerST]
{
if ( $rST.code != null )
{
-						recognizerST.setAttribute("rules", $rST.code);
-						outputFileST.setAttribute("rules", $rST.code);
-						headerFileST.setAttribute("rules", $rST.code);
+						recognizerST.SetAttribute("rules", $rST.code);
+						outputFileST.SetAttribute("rules", $rST.code);
+						headerFileST.SetAttribute("rules", $rST.code);
}
}
|	^(RULE .*)
@@ -229,7 +229,7 @@ rule returns [StringTemplate code=null]
false);
description =
generator.target.getTargetStringLiteralFromString(description);
-				$b.code.setAttribute("description", description);
+				$b.code.SetAttribute("description", description);
// do not generate lexer rules in combined grammar
string stName = null;
if ( ruleDescr.isSynPred )
@@ -255,12 +255,12 @@ rule returns [StringTemplate code=null]
stName = "rule";
}
}
-				$code = templates.getInstanceOf(stName);
-				if ( $code.getName().Equals("rule") )
+				$code = templates.GetInstanceOf(stName);
+				if ( $code.GetName().Equals("rule") )
{
-					$code.setAttribute("emptyRule", grammar.isEmptyRule(block2));
+					$code.SetAttribute("emptyRule", grammar.isEmptyRule(block2));
}
-				$code.setAttribute("ruleDescriptor", ruleDescr);
+				$code.SetAttribute("ruleDescriptor", ruleDescr);
string memo = (string)grammar.getBlockOption($start,"memoize");
if ( memo==null )
{
@@ -269,7 +269,7 @@ rule returns [StringTemplate code=null]
if ( memo!=null && memo.Equals("true") &&
(stName.Equals("rule")||stName.Equals("lexerRule")) )
{
-					$code.setAttribute("memoize", memo!=null && memo.Equals("true"));
+					$code.SetAttribute("memoize", memo!=null && memo.Equals("true"));
}
}

@@ -284,24 +284,24 @@ rule returns [StringTemplate code=null]
bool naked =
currentRuleName.Equals(Grammar.ARTIFICIAL_TOKENS_RULENAME) ||
($mod.start!=null&&$mod.start.Text.Equals(Grammar.FRAGMENT_RULE_MODIFIER));
-					$code.setAttribute("nakedBlock", naked);
+					$code.SetAttribute("nakedBlock", naked);
}
else
{
description = grammar.grammarTreeToString($start,false);
description = generator.target.getTargetStringLiteralFromString(description);
-					$code.setAttribute("description", description);
+					$code.SetAttribute("description", description);
}
Rule theRule = grammar.getRule(currentRuleName);
generator.translateActionAttributeReferencesForSingleScope(
theRule,
theRule.Actions
);
-				$code.setAttribute("ruleName", currentRuleName);
-				$code.setAttribute("block", $b.code);
+				$code.SetAttribute("ruleName", currentRuleName);
+				$code.SetAttribute("block", $b.code);
if ( initAction!=null )
{
-					$code.setAttribute("initAction", initAction);
+					$code.SetAttribute("initAction", initAction);
}
}
}
@@ -336,19 +336,19 @@ options { k=1; }
StringTemplate decision = null;
if ( $dfa != null )
{
-			$code = templates.getInstanceOf($blockTemplateName);
+			$code = templates.GetInstanceOf($blockTemplateName);
decision = generator.genLookaheadDecision(recognizerST,$dfa);
-			$code.setAttribute("decision", decision);
-			$code.setAttribute("decisionNumber", $dfa.DecisionNumber);
-			$code.setAttribute("maxK",$dfa.MaxLookaheadDepth);
-			$code.setAttribute("maxAlt",$dfa.NumberOfAlts);
+			$code.SetAttribute("decision", decision);
+			$code.SetAttribute("decisionNumber", $dfa.DecisionNumber);
+			$code.SetAttribute("maxK",$dfa.MaxLookaheadDepth);
+			$code.SetAttribute("maxAlt",$dfa.NumberOfAlts);
}
else
{
-			$code = templates.getInstanceOf($blockTemplateName+"SingleAlt");
+			$code = templates.GetInstanceOf($blockTemplateName+"SingleAlt");
}
-		$code.setAttribute("blockLevel", blockNestingLevel);
-		$code.setAttribute("enclosingBlockLevel", blockNestingLevel-1);
+		$code.SetAttribute("blockLevel", blockNestingLevel);
+		$code.SetAttribute("enclosingBlockLevel", blockNestingLevel-1);
altNum = 1;
if ( this.blockNestingLevel==RULE_BLOCK_NESTING_LEVEL ) {
this.outerAltNum=1;
@@ -357,7 +357,7 @@ options { k=1; }
}
:	{$start.SetValue!=null}? => setBlock
{
-			$code.setAttribute("alts",$setBlock.code);
+			$code.SetAttribute("alts",$setBlock.code);
}

|	^(  BLOCK
@@ -377,12 +377,12 @@ options { k=1; }
$rew.start.GetChild(0).Type==ETC;
if ( $rew.code!=null && !etc )
{
-						$alt.code.setAttribute("rew", $rew.code);
+						$alt.code.SetAttribute("rew", $rew.code);
}
// add this alt to the list of alts for this block
-					$code.setAttribute("alts",$alt.code);
-					$alt.code.setAttribute("altNum", altNum);
-					$alt.code.setAttribute("outerAlt", blockNestingLevel==RULE_BLOCK_NESTING_LEVEL);
+					$code.SetAttribute("alts",$alt.code);
+					$alt.code.SetAttribute("altNum", altNum);
+					$alt.code.SetAttribute("outerAlt", blockNestingLevel==RULE_BLOCK_NESTING_LEVEL);
altNum++;
}
)+
@@ -419,26 +419,26 @@ setBlock returns [StringTemplate code=null]
{
setcode = getTokenElementST("matchSet", "set", $s, null, null);
}
-			setcode.setAttribute("elementIndex", i);
+			setcode.SetAttribute("elementIndex", i);
if ( grammar.type!=Grammar.LEXER )
{
generator.generateLocalFOLLOW($s,"set",currentRuleName,i);
}
-			setcode.setAttribute("s",
+			setcode.SetAttribute("s",
generator.genSetExpr(templates,$s.SetValue,1,false));
-			StringTemplate altcode=templates.getInstanceOf("alt");
-			altcode.setAttribute("elements.{el,line,pos}",
+			StringTemplate altcode=templates.GetInstanceOf("alt");
+			altcode.SetAttribute("elements.{el,line,pos}",
setcode,
$s.Line,
$s.CharPositionInLine
);
-			altcode.setAttribute("altNum", 1);
-			altcode.setAttribute("outerAlt", blockNestingLevel==RULE_BLOCK_NESTING_LEVEL);
+			altcode.SetAttribute("altNum", 1);
+			altcode.SetAttribute("outerAlt", blockNestingLevel==RULE_BLOCK_NESTING_LEVEL);
if ( !currentAltHasASTRewrite && grammar.BuildAST )
{
-				altcode.setAttribute("autoAST", true);
+				altcode.SetAttribute("autoAST", true);
}
-			altcode.setAttribute("treeLevel", rewriteTreeNestingLevel);
+			altcode.SetAttribute("treeLevel", rewriteTreeNestingLevel);
$code = altcode;
}
;
@@ -456,7 +456,7 @@ exceptionHandler[StringTemplate ruleST]
:	^('catch' ARG_ACTION ACTION)
{
List chunks = generator.translateAction(currentRuleName,$ACTION);
-			$ruleST.setAttribute("exceptions.{decl,action}",$ARG_ACTION.text,chunks);
+			$ruleST.SetAttribute("exceptions.{decl,action}",$ARG_ACTION.text,chunks);
}
;

@@ -464,7 +464,7 @@ finallyClause[StringTemplate ruleST]
:	^('finally' ACTION)
{
List chunks = generator.translateAction(currentRuleName,$ACTION);
-			$ruleST.setAttribute("finally",chunks);
+			$ruleST.SetAttribute("finally",chunks);
}
;

@@ -473,7 +473,7 @@ alternative returns [StringTemplate code]
{
if ( state.backtracking == 0 )
{
-		$code = templates.getInstanceOf("alt");
+		$code = templates.GetInstanceOf("alt");
/*
// TODO: can we use Rule.altsWithRewrites???
if ( blockNestingLevel==RULE_BLOCK_NESTING_LEVEL ) {
@@ -497,11 +497,11 @@ alternative returns [StringTemplate code]
}
string description = grammar.grammarTreeToString($start, false);
description = generator.target.getTargetStringLiteralFromString(description);
-		$code.setAttribute("description", description);
-		$code.setAttribute("treeLevel", rewriteTreeNestingLevel);
+		$code.SetAttribute("description", description);
+		$code.SetAttribute("treeLevel", rewriteTreeNestingLevel);
if ( !currentAltHasASTRewrite && grammar.BuildAST )
{
-			$code.setAttribute("autoAST", true);
+			$code.SetAttribute("autoAST", true);
}
}
}
@@ -511,7 +511,7 @@ alternative returns [StringTemplate code]
{
if ( e!=null )
{
-						$code.setAttribute("elements.{el,line,pos}",
+						$code.SetAttribute("elements.{el,line,pos}",
$e.code,
$e.start.Line,
$e.start.CharPositionInLine
@@ -547,14 +547,14 @@ options { k=1; }

|	^(CHAR_RANGE a=CHAR_LITERAL b=CHAR_LITERAL)
{
-			$code = templates.getInstanceOf("charRangeRef");
+			$code = templates.GetInstanceOf("charRangeRef");
string low = generator.target.getTargetCharLiteralFromANTLRCharLiteral(generator,$a.text);
string high = generator.target.getTargetCharLiteralFromANTLRCharLiteral(generator,$b.text);
-			$code.setAttribute("a", low);
-			$code.setAttribute("b", high);
+			$code.SetAttribute("a", low);
+			$code.SetAttribute("b", high);
if ( label!=null )
{
-				$code.setAttribute("label", $label.Text);
+				$code.SetAttribute("label", $label.Text);
}
}

@@ -572,10 +572,10 @@ options { k=1; }

|   (sp=SEMPRED|sp=GATED_SEMPRED)
{
-			$code = templates.getInstanceOf("validateSemanticPredicate");
-			$code.setAttribute("pred", generator.translateAction(currentRuleName,$sp));
+			$code = templates.GetInstanceOf("validateSemanticPredicate");
+			$code.SetAttribute("pred", generator.translateAction(currentRuleName,$sp));
string description = generator.target.getTargetStringLiteralFromString($sp.text);
-			$code.setAttribute("description", description);
+			$code.SetAttribute("description", description);
}

|	SYN_SEMPRED // used only in lookahead; don't generate validating pred
@@ -590,13 +590,13 @@ options { k=1; }
element_action returns [StringTemplate code=null]
:	act=ACTION
{
-			$code = templates.getInstanceOf("execAction");
-			$code.setAttribute("action", generator.translateAction(currentRuleName,$act));
+			$code = templates.GetInstanceOf("execAction");
+			$code.SetAttribute("action", generator.translateAction(currentRuleName,$act));
}
|	act2=FORCED_ACTION
{
-			$code = templates.getInstanceOf("execForcedAction");
-			$code.setAttribute("action", generator.translateAction(currentRuleName,$act2));
+			$code = templates.GetInstanceOf("execForcedAction");
+			$code.SetAttribute("action", generator.translateAction(currentRuleName,$act2));
}
;

@@ -653,9 +653,9 @@ notElement[GrammarAST n, GrammarAST label, GrammarAST astSuffix] returns [String
(GrammarAST)$n.GetChild(0),
astSuffix,
labelText);
-			$code.setAttribute("s",generator.genSetExpr(templates,elements,1,false));
+			$code.SetAttribute("s",generator.genSetExpr(templates,elements,1,false));
int i = ((TokenWithIndex)n.Token).TokenIndex;
-			$code.setAttribute("elementIndex", i);
+			$code.SetAttribute("elementIndex", i);
if ( grammar.type!=Grammar.LEXER )
{
generator.generateLocalFOLLOW(n,"set",currentRuleName,i);
@@ -686,7 +686,7 @@ ebnf returns [StringTemplate code=null]
{
string description = grammar.grammarTreeToString($start, false);
description = generator.target.getTargetStringLiteralFromString(description);
-			$code.setAttribute("description", description);
+			$code.SetAttribute("description", description);
}
;

@@ -697,17 +697,17 @@ tree_ returns [StringTemplate code]
GrammarAST rootSuffix = null;
if ( state.backtracking == 0 )
{
-		$code = templates.getInstanceOf("tree");
+		$code = templates.GetInstanceOf("tree");
NFAState afterDOWN = (NFAState)$start.NFATreeDownState.getTransition(0).target;
LookaheadSet s = grammar.LOOK(afterDOWN);
if ( s.member(Label.UP) ) {
// nullable child list if we can see the UP as the next token
// we need an "if ( input.LA(1)==Token.DOWN )" gate around
// the child list.
-			$code.setAttribute("nullableChildList", "true");
+			$code.SetAttribute("nullableChildList", "true");
}
-		$code.setAttribute("enclosingTreeLevel", rewriteTreeNestingLevel-1);
-		$code.setAttribute("treeLevel", rewriteTreeNestingLevel);
+		$code.SetAttribute("enclosingTreeLevel", rewriteTreeNestingLevel-1);
+		$code.SetAttribute("treeLevel", rewriteTreeNestingLevel);
Rule r = grammar.getRule(currentRuleName);
if ( grammar.BuildAST && !r.hasRewrite(outerAltNum) ) {
rootSuffix = new GrammarAST(ROOT,"ROOT");
@@ -717,7 +717,7 @@ tree_ returns [StringTemplate code]
:	^(	TREE_BEGIN
el=element[null,rootSuffix]
{
-				$code.setAttribute("root.{el,line,pos}",
+				$code.SetAttribute("root.{el,line,pos}",
$el.code,
$el.start.Line,
$el.start.CharPositionInLine
@@ -729,7 +729,7 @@ tree_ returns [StringTemplate code]
(	(element_action) =>
act=element_action
{
-					$code.setAttribute("actionsAfterRoot.{el,line,pos}",
+					$code.SetAttribute("actionsAfterRoot.{el,line,pos}",
$act.code,
$act.start.Line,
$act.start.CharPositionInLine
@@ -738,7 +738,7 @@ tree_ returns [StringTemplate code]
)*
(	 el=element[null,null]
{
-				 $code.setAttribute("children.{el,line,pos}",
+				 $code.SetAttribute("children.{el,line,pos}",
$el.code,
$el.start.Line,
$el.start.CharPositionInLine
@@ -790,23 +790,23 @@ atom[GrammarAST scope, GrammarAST label, GrammarAST astSuffix]
labelText = null;
}
$code = getRuleElementST("ruleRef", $r.text, $r, astSuffix, labelText);
-			$code.setAttribute("rule", rdef);
+			$code.SetAttribute("rule", rdef);
if ( scope!=null ) { // scoped rule ref
Grammar scopeG = grammar.composite.getGrammar(scope.Text);
-				$code.setAttribute("scope", scopeG);
+				$code.SetAttribute("scope", scopeG);
}
else if ( rdef.grammar != this.grammar ) { // nonlocal
// if rule definition is not in this grammar, it's nonlocal
IList<Grammar> rdefDelegates = rdef.grammar.getDelegates();
if ( rdefDelegates.Contains(this.grammar) ) {
-					$code.setAttribute("scope", rdef.grammar);
+					$code.SetAttribute("scope", rdef.grammar);
}
else {
// defining grammar is not a delegate, scope all the
// back to root, which has delegate methods for all
// rules.  Don't use scope if we are root.
if ( this.grammar != rdef.grammar.composite.delegateGrammarTreeRoot.grammar ) {
-						$code.setAttribute("scope",
+						$code.SetAttribute("scope",
rdef.grammar.composite.delegateGrammarTreeRoot.grammar);
}
}
@@ -814,10 +814,10 @@ atom[GrammarAST scope, GrammarAST label, GrammarAST astSuffix]

if ( $rarg!=null ) {
List args = generator.translateAction(currentRuleName,$rarg);
-				$code.setAttribute("args", args);
+				$code.SetAttribute("args", args);
}
int i = ((TokenWithIndex)r.Token).TokenIndex;
-			$code.setAttribute("elementIndex", i);
+			$code.SetAttribute("elementIndex", i);
generator.generateLocalFOLLOW($r,$r.text,currentRuleName,i);
$r.code = $code;
}
@@ -837,14 +837,14 @@ atom[GrammarAST scope, GrammarAST label, GrammarAST astSuffix]
{
if ( grammar.getTokenType($t.text)==Label.EOF )
{
-					$code = templates.getInstanceOf("lexerMatchEOF");
+					$code = templates.GetInstanceOf("lexerMatchEOF");
}
else
{
-					$code = templates.getInstanceOf("lexerRuleRef");
+					$code = templates.GetInstanceOf("lexerRuleRef");
if ( isListLabel(labelText) )
{
-						$code = templates.getInstanceOf("lexerRuleRefAndListLabel");
+						$code = templates.GetInstanceOf("lexerRuleRefAndListLabel");
}
string scopeName = null;
if ( scope!=null )
@@ -852,40 +852,40 @@ atom[GrammarAST scope, GrammarAST label, GrammarAST astSuffix]
scopeName = scope.Text;
}
Rule rdef2 = grammar.getRule(scopeName, $t.text);
-					$code.setAttribute("rule", rdef2);
+					$code.SetAttribute("rule", rdef2);
if ( scope!=null )
{ // scoped rule ref
Grammar scopeG = grammar.composite.getGrammar(scope.Text);
-						$code.setAttribute("scope", scopeG);
+						$code.SetAttribute("scope", scopeG);
}
else if ( rdef2.grammar != this.grammar )
{ // nonlocal
// if rule definition is not in this grammar, it's nonlocal
-						$code.setAttribute("scope", rdef2.grammar);
+						$code.SetAttribute("scope", rdef2.grammar);
}
if ( $targ!=null )
{
List args = generator.translateAction(currentRuleName,$targ);
-						$code.setAttribute("args", args);
+						$code.SetAttribute("args", args);
}
}
int i = ((TokenWithIndex)$t.Token).TokenIndex;
-				$code.setAttribute("elementIndex", i);
+				$code.SetAttribute("elementIndex", i);
if ( label!=null )
-					$code.setAttribute("label", labelText);
+					$code.SetAttribute("label", labelText);
}
else
{
$code = getTokenElementST("tokenRef", $t.text, $t, astSuffix, labelText);
string tokenLabel =
generator.getTokenTypeAsTargetLabel(grammar.getTokenType(t.Text));
-				$code.setAttribute("token",tokenLabel);
+				$code.SetAttribute("token",tokenLabel);
if ( !currentAltHasASTRewrite && $t.terminalOptions!=null )
{
-					$code.setAttribute("hetero",$t.terminalOptions[Grammar.defaultTokenOption]);
+					$code.SetAttribute("hetero",$t.terminalOptions[Grammar.defaultTokenOption]);
}
int i = ((TokenWithIndex)$t.Token).TokenIndex;
-				$code.setAttribute("elementIndex", i);
+				$code.SetAttribute("elementIndex", i);
generator.generateLocalFOLLOW($t,tokenLabel,currentRuleName,i);
}
$t.code = $code;
@@ -895,23 +895,23 @@ atom[GrammarAST scope, GrammarAST label, GrammarAST astSuffix]
{
if ( grammar.type==Grammar.LEXER )
{
-				$code = templates.getInstanceOf("charRef");
-				$code.setAttribute("char",
+				$code = templates.GetInstanceOf("charRef");
+				$code.SetAttribute("char",
generator.target.getTargetCharLiteralFromANTLRCharLiteral(generator,$c.text));
if ( label!=null )
{
-					$code.setAttribute("label", labelText);
+					$code.SetAttribute("label", labelText);
}
}
else { // else it's a token type reference
$code = getTokenElementST("tokenRef", "char_literal", $c, astSuffix, labelText);
string tokenLabel = generator.getTokenTypeAsTargetLabel(grammar.getTokenType($c.text));
-				$code.setAttribute("token",tokenLabel);
+				$code.SetAttribute("token",tokenLabel);
if ( $c.terminalOptions!=null ) {
-					$code.setAttribute("hetero",$c.terminalOptions[Grammar.defaultTokenOption]);
+					$code.SetAttribute("hetero",$c.terminalOptions[Grammar.defaultTokenOption]);
}
int i = ((TokenWithIndex)$c.Token).TokenIndex;
-				$code.setAttribute("elementIndex", i);
+				$code.SetAttribute("elementIndex", i);
generator.generateLocalFOLLOW($c,tokenLabel,currentRuleName,i);
}
}
@@ -920,12 +920,12 @@ atom[GrammarAST scope, GrammarAST label, GrammarAST astSuffix]
{
if ( grammar.type==Grammar.LEXER )
{
-				$code = templates.getInstanceOf("lexerStringRef");
-				$code.setAttribute("string",
+				$code = templates.GetInstanceOf("lexerStringRef");
+				$code.SetAttribute("string",
generator.target.getTargetStringLiteralFromANTLRStringLiteral(generator,$s.text));
if ( label!=null )
{
-					$code.setAttribute("label", labelText);
+					$code.SetAttribute("label", labelText);
}
}
else
@@ -933,13 +933,13 @@ atom[GrammarAST scope, GrammarAST label, GrammarAST astSuffix]
$code = getTokenElementST("tokenRef", "string_literal", $s, astSuffix, labelText);
string tokenLabel =
generator.getTokenTypeAsTargetLabel(grammar.getTokenType($s.text));
-				$code.setAttribute("token",tokenLabel);
+				$code.SetAttribute("token",tokenLabel);
if ( $s.terminalOptions!=null )
{
-					$code.setAttribute("hetero",$s.terminalOptions[Grammar.defaultTokenOption]);
+					$code.SetAttribute("hetero",$s.terminalOptions[Grammar.defaultTokenOption]);
}
int i = ((TokenWithIndex)$s.Token).TokenIndex;
-				$code.setAttribute("elementIndex", i);
+				$code.SetAttribute("elementIndex", i);
generator.generateLocalFOLLOW($s,tokenLabel,currentRuleName,i);
}
}
@@ -947,7 +947,7 @@ atom[GrammarAST scope, GrammarAST label, GrammarAST astSuffix]
|	w=WILDCARD
{
$code = getWildcardST($w,astSuffix,labelText);
-			$code.setAttribute("elementIndex", ((TokenWithIndex)$w.Token).TokenIndex);
+			$code.SetAttribute("elementIndex", ((TokenWithIndex)$w.Token).TokenIndex);
}

|	^(DOT ID a=atom[$ID, label, astSuffix]) // scope override on rule or token
@@ -975,12 +975,12 @@ set[GrammarAST label, GrammarAST astSuffix] returns [StringTemplate code=null]
{
$code = getTokenElementST("matchSet", "set", $s, astSuffix, labelText);
int i = ((TokenWithIndex)$s.Token).TokenIndex;
-			$code.setAttribute("elementIndex", i);
+			$code.SetAttribute("elementIndex", i);
if ( grammar.type!=Grammar.LEXER )
{
generator.generateLocalFOLLOW($s,"set",currentRuleName,i);
}
-			$code.setAttribute("s", generator.genSetExpr(templates,$s.SetValue,1,false));
+			$code.SetAttribute("s", generator.genSetExpr(templates,$s.SetValue,1,false));
}
;

@@ -1002,14 +1002,14 @@ rewrite returns [StringTemplate code=null]
{
if ( generator.grammar.BuildTemplate )
{
-				$code = templates.getInstanceOf("rewriteTemplate");
+				$code = templates.GetInstanceOf("rewriteTemplate");
}
else
{
-				$code = templates.getInstanceOf("rewriteCode");
-				$code.setAttribute("treeLevel", OUTER_REWRITE_NESTING_LEVEL);
-				$code.setAttribute("rewriteBlockLevel", OUTER_REWRITE_NESTING_LEVEL);
-				$code.setAttribute("referencedElementsDeep",
+				$code = templates.GetInstanceOf("rewriteCode");
+				$code.SetAttribute("treeLevel", OUTER_REWRITE_NESTING_LEVEL);
+				$code.SetAttribute("rewriteBlockLevel", OUTER_REWRITE_NESTING_LEVEL);
+				$code.SetAttribute("referencedElementsDeep",
getTokenTypesAsTargetLabels($start.rewriteRefsDeep));
HashSet<string> tokenLabels =
grammar.getLabels($start.rewriteRefsDeep, Grammar.TOKEN_LABEL);
@@ -1025,21 +1025,21 @@ rewrite returns [StringTemplate code=null]
grammar.getLabels($start.rewriteRefsDeep, Grammar.WILDCARD_TREE_LIST_LABEL);
// just in case they ref $r for "previous value", make a stream
// from retval.tree
-				StringTemplate retvalST = templates.getInstanceOf("prevRuleRootRef");
+				StringTemplate retvalST = templates.GetInstanceOf("prevRuleRootRef");
ruleLabels.Add(retvalST.ToString());
-				$code.setAttribute("referencedTokenLabels", tokenLabels);
-				$code.setAttribute("referencedTokenListLabels", tokenListLabels);
-				$code.setAttribute("referencedRuleLabels", ruleLabels);
-				$code.setAttribute("referencedRuleListLabels", ruleListLabels);
-				$code.setAttribute("referencedWildcardLabels", wildcardLabels);
-				$code.setAttribute("referencedWildcardListLabels", wildcardListLabels);
+				$code.SetAttribute("referencedTokenLabels", tokenLabels);
+				$code.SetAttribute("referencedTokenListLabels", tokenListLabels);
+				$code.SetAttribute("referencedRuleLabels", ruleLabels);
+				$code.SetAttribute("referencedRuleListLabels", ruleListLabels);
+				$code.SetAttribute("referencedWildcardLabels", wildcardLabels);
+				$code.SetAttribute("referencedWildcardListLabels", wildcardListLabels);
}
}
else
{
-				$code = templates.getInstanceOf("noRewrite");
-				$code.setAttribute("treeLevel", OUTER_REWRITE_NESTING_LEVEL);
-				$code.setAttribute("rewriteBlockLevel", OUTER_REWRITE_NESTING_LEVEL);
+				$code = templates.GetInstanceOf("noRewrite");
+				$code.SetAttribute("treeLevel", OUTER_REWRITE_NESTING_LEVEL);
+				$code.SetAttribute("rewriteBlockLevel", OUTER_REWRITE_NESTING_LEVEL);
}
}
}
@@ -1057,7 +1057,7 @@ rewrite returns [StringTemplate code=null]
string description =
grammar.grammarTreeToString($r,false);
description = generator.target.getTargetStringLiteralFromString(description);
-				$code.setAttribute("alts.{pred,alt,description}",
+				$code.SetAttribute("alts.{pred,alt,description}",
predChunks,
alt,
description);
@@ -1073,33 +1073,33 @@ rewrite_block[string blockTemplateName] returns [StringTemplate code=null]
StringTemplate save_currentBlockST = currentBlockST;
if ( state.backtracking == 0 )
{
-		$code = templates.getInstanceOf(blockTemplateName);
+		$code = templates.GetInstanceOf(blockTemplateName);
currentBlockST = $code;
-		$code.setAttribute("rewriteBlockLevel", rewriteBlockNestingLevel);
+		$code.SetAttribute("rewriteBlockLevel", rewriteBlockNestingLevel);
}
}
:	^(	BLOCK
{
-				currentBlockST.setAttribute("referencedElementsDeep",
+				currentBlockST.SetAttribute("referencedElementsDeep",
getTokenTypesAsTargetLabels($BLOCK.rewriteRefsDeep));
-				currentBlockST.setAttribute("referencedElements",
+				currentBlockST.SetAttribute("referencedElements",
getTokenTypesAsTargetLabels($BLOCK.rewriteRefsShallow));
}
alt=rewrite_alternative
EOB
)
{
-			$code.setAttribute("alt", $alt.code);
+			$code.SetAttribute("alt", $alt.code);
}
;
finally { rewriteBlockNestingLevel--; currentBlockST = save_currentBlockST; }

rewrite_alternative returns [StringTemplate code=null]
:	{generator.grammar.BuildAST}?
-		^(	a=ALT {$code=templates.getInstanceOf("rewriteElementList");}
+		^(	a=ALT {$code=templates.GetInstanceOf("rewriteElementList");}
(	(
el=rewrite_element
-					{$code.setAttribute("elements.{el,line,pos}",
+					{$code.SetAttribute("elements.{el,line,pos}",
$el.code,
$el.start.Line,
$el.start.CharPositionInLine
@@ -1107,8 +1107,8 @@ rewrite_alternative returns [StringTemplate code=null]
}
)+
|	EPSILON
-				{$code.setAttribute("elements.{el,line,pos}",
-								   templates.getInstanceOf("rewriteEmptyAlt"),
+				{$code.SetAttribute("elements.{el,line,pos}",
+								   templates.GetInstanceOf("rewriteEmptyAlt"),
$a.Line,
$a.CharPositionInLine
);
@@ -1144,21 +1144,21 @@ rewrite_ebnf returns [StringTemplate code=null]
{
string description = grammar.grammarTreeToString($start, false);
description = generator.target.getTargetStringLiteralFromString(description);
-			$code.setAttribute("description", description);
+			$code.SetAttribute("description", description);
}
|	^( CLOSURE rewrite_block["rewriteClosureBlock"] )
{ $code = $rewrite_block.code; }
{
string description = grammar.grammarTreeToString($start, false);
description = generator.target.getTargetStringLiteralFromString(description);
-			$code.setAttribute("description", description);
+			$code.SetAttribute("description", description);
}
|	^( POSITIVE_CLOSURE rewrite_block["rewritePositiveClosureBlock"] )
{ $code = $rewrite_block.code; }
{
string description = grammar.grammarTreeToString($start, false);
description = generator.target.getTargetStringLiteralFromString(description);
-			$code.setAttribute("description", description);
+			$code.SetAttribute("description", description);
}
;

@@ -1168,15 +1168,15 @@ rewrite_tree returns [StringTemplate code]
rewriteTreeNestingLevel++;
if ( state.backtracking == 0 )
{
-		$code = templates.getInstanceOf("rewriteTree");
-		$code.setAttribute("treeLevel", rewriteTreeNestingLevel);
-		$code.setAttribute("enclosingTreeLevel", rewriteTreeNestingLevel-1);
+		$code = templates.GetInstanceOf("rewriteTree");
+		$code.SetAttribute("treeLevel", rewriteTreeNestingLevel);
+		$code.SetAttribute("enclosingTreeLevel", rewriteTreeNestingLevel-1);
}
}
:	^(	TREE_BEGIN
r=rewrite_atom[true]
{
-				$code.setAttribute("root.{el,line,pos}",
+				$code.SetAttribute("root.{el,line,pos}",
$r.code,
$r.start.Line,
$r.start.CharPositionInLine
@@ -1185,7 +1185,7 @@ rewrite_tree returns [StringTemplate code]
(
el=rewrite_element
{
-				$code.setAttribute("children.{el,line,pos}",
+				$code.SetAttribute("children.{el,line,pos}",
$el.code,
$el.start.Line,
$el.start.CharPositionInLine
@@ -1196,7 +1196,7 @@ rewrite_tree returns [StringTemplate code]
{
string description = grammar.grammarTreeToString($start, false);
description = generator.target.getTargetStringLiteralFromString(description);
-			$code.setAttribute("description", description);
+			$code.SetAttribute("description", description);
}
;
finally { rewriteTreeNestingLevel--; }
@@ -1210,8 +1210,8 @@ rewrite_atom[bool isRoot] returns [StringTemplate code=null]
{
stName += "Root";
}
-			$code = templates.getInstanceOf(stName);
-			$code.setAttribute("rule", ruleRefName);
+			$code = templates.GetInstanceOf(stName);
+			$code.SetAttribute("rule", ruleRefName);
if ( grammar.getRule(ruleRefName)==null )
{
ErrorManager.grammarError(ErrorManager.MSG_UNDEFINED_RULE_REF,
@@ -1264,17 +1264,17 @@ rewrite_atom[bool isRoot] returns [StringTemplate code=null]
{
stName += "Root";
}
-			$code = templates.getInstanceOf(stName);
-			$code.setAttribute("hetero", hetero);
+			$code = templates.GetInstanceOf(stName);
+			$code.SetAttribute("hetero", hetero);
if ( $arg!=null )
{
List args = generator.translateAction(currentRuleName,$arg);
-				$code.setAttribute("args", args);
+				$code.SetAttribute("args", args);
}
-			$code.setAttribute("elementIndex", ((TokenWithIndex)$start.Token).TokenIndex);
+			$code.SetAttribute("elementIndex", ((TokenWithIndex)$start.Token).TokenIndex);
int ttype = grammar.getTokenType(tokenName);
string tok = generator.getTokenTypeAsTargetLabel(ttype);
-			$code.setAttribute("token", tok);
+			$code.SetAttribute("token", tok);
if ( grammar.getTokenType(tokenName)==Label.INVALID )
{
ErrorManager.grammarError(ErrorManager.MSG_UNDEFINED_TOKEN_REF_IN_REWRITE,
@@ -1301,9 +1301,9 @@ rewrite_atom[bool isRoot] returns [StringTemplate code=null]
((GrammarAST)($LABEL)).Token,
labelName);
}
-				StringTemplate labelST = templates.getInstanceOf("prevRuleRootRef");
-				$code = templates.getInstanceOf("rewriteRuleLabelRef"+(isRoot?"Root":""));
-				$code.setAttribute("label", labelST);
+				StringTemplate labelST = templates.GetInstanceOf("prevRuleRootRef");
+				$code = templates.GetInstanceOf("rewriteRuleLabelRef"+(isRoot?"Root":""));
+				$code.SetAttribute("label", labelST);
}
else if ( pair==null )
{
@@ -1341,8 +1341,8 @@ rewrite_atom[bool isRoot] returns [StringTemplate code=null]
{
stName += "Root";
}
-				$code = templates.getInstanceOf(stName);
-				$code.setAttribute("label", labelName);
+				$code = templates.GetInstanceOf(stName);
+				$code.SetAttribute("label", labelName);
}
}

@@ -1351,30 +1351,30 @@ rewrite_atom[bool isRoot] returns [StringTemplate code=null]
// actions in rewrite rules yield a tree object
string actText = $ACTION.text;
List chunks = generator.translateAction(currentRuleName,$ACTION);
-			$code = templates.getInstanceOf("rewriteNodeAction"+(isRoot?"Root":""));
-			$code.setAttribute("action", chunks);
+			$code = templates.GetInstanceOf("rewriteNodeAction"+(isRoot?"Root":""));
+			$code.SetAttribute("action", chunks);
}
;

public
rewrite_template returns [StringTemplate code=null]
-	:	^( ALT EPSILON EOA ) {$code=templates.getInstanceOf("rewriteEmptyTemplate");}
+	:	^( ALT EPSILON EOA ) {$code=templates.GetInstanceOf("rewriteEmptyTemplate");}
|	^(	TEMPLATE (id=ID|ind=ACTION)
{
if ( $id!=null && $id.text.Equals("template") )
{
-						$code = templates.getInstanceOf("rewriteInlineTemplate");
+						$code = templates.GetInstanceOf("rewriteInlineTemplate");
}
else if ( $id!=null )
{
-						$code = templates.getInstanceOf("rewriteExternalTemplate");
-						$code.setAttribute("name", $id.text);
+						$code = templates.GetInstanceOf("rewriteExternalTemplate");
+						$code.SetAttribute("name", $id.text);
}
else if ( $ind!=null )
{ // must be \%({expr})(args)
-					$code = templates.getInstanceOf("rewriteIndirectTemplate");
+					$code = templates.GetInstanceOf("rewriteIndirectTemplate");
List chunks=generator.translateAction(currentRuleName,$ind);
-					$code.setAttribute("expr", chunks);
+					$code.SetAttribute("expr", chunks);
}
}
^(	ARGLIST
@@ -1385,7 +1385,7 @@ rewrite_template returns [StringTemplate code=null]
// broken up yet into trees.
$a.outerAltNum = this.outerAltNum;
List chunks = generator.translateAction(currentRuleName,$a);
-						$code.setAttribute("args.{name,value}", $arg.text, chunks);
+						$code.SetAttribute("args.{name,value}", $arg.text, chunks);
}
)
)*
@@ -1395,14 +1395,14 @@ rewrite_template returns [StringTemplate code=null]
string sl = $DOUBLE_QUOTE_STRING_LITERAL.text;
string t = sl.Substring( 1, sl.Length - 2 ); // strip quotes
t = generator.target.getTargetStringLiteralFromString(t);
-					$code.setAttribute("template",t);
+					$code.SetAttribute("template",t);
}
|	DOUBLE_ANGLE_STRING_LITERAL
{
string sl = $DOUBLE_ANGLE_STRING_LITERAL.text;
string t = sl.Substring( 2, sl.Length - 4 ); // strip double angle quotes
t = generator.target.getTargetStringLiteralFromString(t);
-					$code.setAttribute("template",t);
+					$code.SetAttribute("template",t);
}
)?
)
@@ -1411,8 +1411,8 @@ rewrite_template returns [StringTemplate code=null]
{
// set alt num for same reason as ARGLIST above
$act.outerAltNum = this.outerAltNum;
-			$code=templates.getInstanceOf("rewriteAction");
-			$code.setAttribute("action",
+			$code=templates.GetInstanceOf("rewriteAction");
+			$code.SetAttribute("action",
generator.translateAction(currentRuleName,$act));
}
;
diff --git a/Antlr3/Grammars/CodeGenTreeWalkerHelper.cs b/Antlr3/Grammars/CodeGenTreeWalkerHelper.cs
index 7139487..4310b07 100644
--- a/Antlr3/Grammars/CodeGenTreeWalkerHelper.cs
+++ b/Antlr3/Grammars/CodeGenTreeWalkerHelper.cs
@@ -130,10 +130,10 @@ namespace Antlr3.Grammars
CommonToken labelTok = new CommonToken( ANTLRParser.ID, label );
grammar.defineRuleRefLabel( currentRuleName, labelTok, elementAST );
}
-            StringTemplate elementST = templates.getInstanceOf( name );
+            StringTemplate elementST = templates.GetInstanceOf( name );
if ( label != null )
{
-                elementST.setAttribute( "label", label );
+                elementST.SetAttribute( "label", label );
}
return elementST;
}
@@ -171,14 +171,14 @@ namespace Antlr3.Grammars
}

StringTemplate elementST = null;
-            if ( tryUnchecked && templates.isDefined( name + "Unchecked" + suffix ) )
-                elementST = templates.getInstanceOf( name + "Unchecked" + suffix );
+            if ( tryUnchecked && templates.IsDefined( name + "Unchecked" + suffix ) )
+                elementST = templates.GetInstanceOf( name + "Unchecked" + suffix );
if ( elementST == null )
-                elementST = templates.getInstanceOf( name + suffix );
+                elementST = templates.GetInstanceOf( name + suffix );

if ( label != null )
{
-                elementST.setAttribute( "label", label );
+                elementST.SetAttribute( "label", label );
}
return elementST;
}
diff --git a/Antlr3/Tool/BuildDependencyGenerator.cs b/Antlr3/Tool/BuildDependencyGenerator.cs
index a8074b9..4b32476 100644
--- a/Antlr3/Tool/BuildDependencyGenerator.cs
+++ b/Antlr3/Tool/BuildDependencyGenerator.cs
@@ -143,10 +143,10 @@ namespace Antlr3.Tool
files.Add( new FileInfo( System.IO.Path.Combine( tool.OutputDirectory, generator.VocabFileName ) ) );
// are we generating a .h file?
StringTemplate headerExtST = null;
-            StringTemplate extST = generator.Templates.getInstanceOf( "codeFileExtension" );
-            if ( generator.Templates.isDefined( "headerFile" ) )
+            StringTemplate extST = generator.Templates.GetInstanceOf( "codeFileExtension" );
+            if ( generator.Templates.IsDefined( "headerFile" ) )
{
-                headerExtST = generator.Templates.getInstanceOf( "headerFileExtension" );
+                headerExtST = generator.Templates.GetInstanceOf( "headerFileExtension" );
string suffix = Grammar.grammarTypeToFileNameSuffix[grammar.type];
string fileName = grammar.name + suffix + headerExtST.ToString();
files.Add( new FileInfo( System.IO.Path.Combine( outputDir.FullName, fileName ) ) );
@@ -239,10 +239,10 @@ namespace Antlr3.Tool
public virtual StringTemplate getDependencies()
{
loadDependencyTemplates();
-            StringTemplate dependenciesST = templates.getInstanceOf( "dependencies" );
-            dependenciesST.setAttribute( "in", getDependenciesFileList() );
-            dependenciesST.setAttribute( "out", getGeneratedFileList() );
-            dependenciesST.setAttribute( "grammarFileName", grammar.fileName );
+            StringTemplate dependenciesST = templates.GetInstanceOf( "dependencies" );
+            dependenciesST.SetAttribute( "in", getDependenciesFileList() );
+            dependenciesST.SetAttribute( "out", getGeneratedFileList() );
+            dependenciesST.SetAttribute( "grammarFileName", grammar.fileName );
return dependenciesST;
}

diff --git a/Antlr3/Tool/DOTGenerator.cs b/Antlr3/Tool/DOTGenerator.cs
index ef2c253..9cd136a 100644
--- a/Antlr3/Tool/DOTGenerator.cs
+++ b/Antlr3/Tool/DOTGenerator.cs
@@ -104,21 +104,21 @@ namespace Antlr3.Tool
markedStates = new HashSet<object>();
if ( startState is DFAState )
{
-                dot = stlib.getInstanceOf( "org/antlr/tool/templates/dot/dfa" );
-                dot.setAttribute( "startState",
+                dot = stlib.GetInstanceOf( "org/antlr/tool/templates/dot/dfa" );
+                dot.SetAttribute( "startState",
startState.stateNumber );
-                dot.setAttribute( "useBox",
+                dot.SetAttribute( "useBox",
Tool.internalOption_ShowNFAConfigsInDFA );
walkCreatingDFADOT( dot, (DFAState)startState );
}
else
{
-                dot = stlib.getInstanceOf( "org/antlr/tool/templates/dot/nfa" );
-                dot.setAttribute( "startState",
+                dot = stlib.GetInstanceOf( "org/antlr/tool/templates/dot/nfa" );
+                dot.SetAttribute( "startState",
startState.stateNumber );
walkRuleNFACreatingDOT( dot, startState );
}
-            dot.setAttribute( "rankdir", rankdir );
+            dot.SetAttribute( "rankdir", rankdir );
return dot.ToString();
}

@@ -155,14 +155,14 @@ namespace Antlr3.Tool
StringTemplate st;
if ( s.IsAcceptState )
{
-                st = stlib.getInstanceOf( "org/antlr/tool/templates/dot/stopstate" );
+                st = stlib.GetInstanceOf( "org/antlr/tool/templates/dot/stopstate" );
}
else
{
-                st = stlib.getInstanceOf( "org/antlr/tool/templates/dot/state" );
+                st = stlib.GetInstanceOf( "org/antlr/tool/templates/dot/state" );
}
-            st.setAttribute( "name", getStateLabel( s ) );
-            dot.setAttribute( "states", st );
+            st.SetAttribute( "name", getStateLabel( s ) );
+            dot.SetAttribute( "states", st );

// make a DOT edge for each transition
for ( int i = 0; i < s.NumberOfTransitions; i++ )
@@ -180,12 +180,12 @@ namespace Antlr3.Tool
continue; // don't generate nodes for terminal states
}
}
-                st = stlib.getInstanceOf( "org/antlr/tool/templates/dot/edge" );
-                st.setAttribute( "label", getEdgeLabel( edge ) );
-                st.setAttribute( "src", getStateLabel( s ) );
-                st.setAttribute( "target", getStateLabel( edge.target ) );
-                st.setAttribute( "arrowhead", arrowhead );
-                dot.setAttribute( "edges", st );
+                st = stlib.GetInstanceOf( "org/antlr/tool/templates/dot/edge" );
+                st.SetAttribute( "label", getEdgeLabel( edge ) );
+                st.SetAttribute( "src", getStateLabel( s ) );
+                st.SetAttribute( "target", getStateLabel( edge.target ) );
+                st.SetAttribute( "arrowhead", arrowhead );
+                dot.SetAttribute( "edges", st );
walkCreatingDFADOT( dot, (DFAState)edge.target ); // keep walkin'
}
}
@@ -210,14 +210,14 @@ namespace Antlr3.Tool
StringTemplate stateST;
if ( s.IsAcceptState )
{
-                stateST = stlib.getInstanceOf( "org/antlr/tool/templates/dot/stopstate" );
+                stateST = stlib.GetInstanceOf( "org/antlr/tool/templates/dot/stopstate" );
}
else
{
-                stateST = stlib.getInstanceOf( "org/antlr/tool/templates/dot/state" );
+                stateST = stlib.GetInstanceOf( "org/antlr/tool/templates/dot/state" );
}
-            stateST.setAttribute( "name", getStateLabel( s ) );
-            dot.setAttribute( "states", stateST );
+            stateST.SetAttribute( "name", getStateLabel( s ) );
+            dot.SetAttribute( "states", stateST );

if ( s.IsAcceptState )
{
@@ -231,11 +231,11 @@ namespace Antlr3.Tool
GrammarAST n = ( (NFAState)s ).associatedASTNode;
if ( n != null && n.Type != ANTLRParser.EOB )
{
-                    StringTemplate rankST = stlib.getInstanceOf( "org/antlr/tool/templates/dot/decision-rank" );
+                    StringTemplate rankST = stlib.GetInstanceOf( "org/antlr/tool/templates/dot/decision-rank" );
NFAState alt = (NFAState)s;
while ( alt != null )
{
-                        rankST.setAttribute( "states", getStateLabel( alt ) );
+                        rankST.SetAttribute( "states", getStateLabel( alt ) );
if ( alt.transition[1] != null )
{
alt = (NFAState)alt.transition[1].target;
@@ -245,7 +245,7 @@ namespace Antlr3.Tool
alt = null;
}
}
-                    dot.setAttribute( "decisionRanks", rankST );
+                    dot.SetAttribute( "decisionRanks", rankST );
}
}

@@ -258,39 +258,39 @@ namespace Antlr3.Tool
{
RuleClosureTransition rr = ( (RuleClosureTransition)edge );
// don't jump to other rules, but display edge to follow node
-                    edgeST = stlib.getInstanceOf( "org/antlr/tool/templates/dot/edge" );
+                    edgeST = stlib.GetInstanceOf( "org/antlr/tool/templates/dot/edge" );
if ( rr.rule.grammar != grammar )
{
-                        edgeST.setAttribute( "label", "<" + rr.rule.grammar.name + "." + rr.rule.name + ">" );
+                        edgeST.SetAttribute( "label", "<" + rr.rule.grammar.name + "." + rr.rule.name + ">" );
}
else
{
-                        edgeST.setAttribute( "label", "<" + rr.rule.name + ">" );
+                        edgeST.SetAttribute( "label", "<" + rr.rule.name + ">" );
}
-                    edgeST.setAttribute( "src", getStateLabel( s ) );
-                    edgeST.setAttribute( "target", getStateLabel( rr.followState ) );
-                    edgeST.setAttribute( "arrowhead", arrowhead );
-                    dot.setAttribute( "edges", edgeST );
+                    edgeST.SetAttribute( "src", getStateLabel( s ) );
+                    edgeST.SetAttribute( "target", getStateLabel( rr.followState ) );
+                    edgeST.SetAttribute( "arrowhead", arrowhead );
+                    dot.SetAttribute( "edges", edgeST );
walkRuleNFACreatingDOT( dot, rr.followState );
continue;
}
if ( edge.IsAction )
{
-                    edgeST = stlib.getInstanceOf( "org/antlr/tool/templates/dot/action-edge" );
+                    edgeST = stlib.GetInstanceOf( "org/antlr/tool/templates/dot/action-edge" );
}
else if ( edge.IsEpsilon )
{
-                    edgeST = stlib.getInstanceOf( "org/antlr/tool/templates/dot/epsilon-edge" );
+                    edgeST = stlib.GetInstanceOf( "org/antlr/tool/templates/dot/epsilon-edge" );
}
else
{
-                    edgeST = stlib.getInstanceOf( "org/antlr/tool/templates/dot/edge" );
+                    edgeST = stlib.GetInstanceOf( "org/antlr/tool/templates/dot/edge" );
}
-                edgeST.setAttribute( "label", getEdgeLabel( edge ) );
-                edgeST.setAttribute( "src", getStateLabel( s ) );
-                edgeST.setAttribute( "target", getStateLabel( edge.target ) );
-                edgeST.setAttribute( "arrowhead", arrowhead );
-                dot.setAttribute( "edges", edgeST );
+                edgeST.SetAttribute( "label", getEdgeLabel( edge ) );
+                edgeST.SetAttribute( "src", getStateLabel( s ) );
+                edgeST.SetAttribute( "target", getStateLabel( edge.target ) );
+                edgeST.SetAttribute( "arrowhead", arrowhead );
+                dot.SetAttribute( "edges", edgeST );
walkRuleNFACreatingDOT( dot, edge.target ); // keep walkin'
}
}
diff --git a/Antlr3/Tool/ErrorManager.cs b/Antlr3/Tool/ErrorManager.cs
index 594465c..7597853 100644
--- a/Antlr3/Tool/ErrorManager.cs
+++ b/Antlr3/Tool/ErrorManager.cs
@@ -331,7 +331,7 @@ namespace Antlr3.Tool

class InitSTListener : IStringTemplateErrorListener
{
-            public virtual void error( String s, Exception e )
+            public virtual void Error( String s, Exception e )
{
Console.Error.WriteLine( "ErrorManager init error: " + s );
if ( e != null )
@@ -344,11 +344,11 @@ namespace Antlr3.Tool
}
*/
}
-            public virtual void warning( String s )
+            public virtual void Warning( String s )
{
Console.Error.WriteLine( "ErrorManager init warning: " + s );
}
-            public virtual void debug( String s )
+            public virtual void Debug( String s )
{
}
}
@@ -378,10 +378,10 @@ namespace Antlr3.Tool

class BlankSTListener : IStringTemplateErrorListener
{
-            public virtual void error( string msg, Exception e )
+            public virtual void Error( string msg, Exception e )
{
}
-            public virtual void warning( string msg )
+            public virtual void Warning( string msg )
{
}
}
@@ -400,7 +400,7 @@ namespace Antlr3.Tool

class DefaultSTListener : IStringTemplateErrorListener
{
-            public virtual void error( String s, Exception e )
+            public virtual void Error( String s, Exception e )
{
if ( e is TargetInvocationException )
{
@@ -408,11 +408,11 @@ namespace Antlr3.Tool
}
ErrorManager.error( ErrorManager.MSG_INTERNAL_ERROR, s, e );
}
-            public virtual void warning( String s )
+            public virtual void Warning( String s )
{
ErrorManager.warning( ErrorManager.MSG_INTERNAL_WARNING, s );
}
-            public virtual void debug( String s )
+            public virtual void Debug( String s )
{
}
}
@@ -673,17 +673,17 @@ namespace Antlr3.Tool
public static StringTemplate getMessage( int msgID )
{
String msgName = idToMessageTemplateName[msgID];
-            return messages.getInstanceOf( msgName );
+            return messages.GetInstanceOf( msgName );
}
public static String getMessageType( int msgID )
{
if ( getErrorState().warningMsgIDs.member( msgID ) )
{
-                return messages.getInstanceOf( "warning" ).ToString();
+                return messages.GetInstanceOf( "warning" ).ToString();
}
else if ( getErrorState().errorMsgIDs.member( msgID ) )
{
-                return messages.getInstanceOf( "error" ).ToString();
+                return messages.GetInstanceOf( "error" ).ToString();
}
assertTrue( false, "Assertion failed! Message ID " + msgID + " created but is not present in errorMsgIDs or warningMsgIDs." );
return "";
@@ -694,19 +694,19 @@ namespace Antlr3.Tool
*/
public static StringTemplate getLocationFormat()
{
-            return format.getInstanceOf( "location" );
+            return format.GetInstanceOf( "location" );
}
public static StringTemplate getReportFormat()
{
-            return format.getInstanceOf( "report" );
+            return format.GetInstanceOf( "report" );
}
public static StringTemplate getMessageFormat()
{
-            return format.getInstanceOf( "message" );
+            return format.GetInstanceOf( "message" );
}
public static bool formatWantsSingleLineMessage()
{
-            return format.getInstanceOf( "wantsSingleLineMessage" ).ToString().Equals( "true" );
+            return format.GetInstanceOf( "wantsSingleLineMessage" ).ToString().Equals( "true" );
}

public static IANTLRErrorListener getErrorListener()
@@ -1062,7 +1062,7 @@ namespace Antlr3.Tool
fieldName.Substring( "MSG_".Length );
if ( fieldName.StartsWith( "MSG_" ) )
{
-                    if ( !messages.isDefined( templateName ) )
+                    if ( !messages.IsDefined( templateName ) )
{
Console.Out.WriteLine( "Message " + templateName + " in locale " +
locale + " not found" );
@@ -1071,12 +1071,12 @@ namespace Antlr3.Tool
}
}
// check for special templates
-            if ( !messages.isDefined( "warning" ) )
+            if ( !messages.IsDefined( "warning" ) )
{
Console.Error.WriteLine( "Message template 'warning' not found in locale " + locale );
ok = false;
}
-            if ( !messages.isDefined( "error" ) )
+            if ( !messages.IsDefined( "error" ) )
{
Console.Error.WriteLine( "Message template 'error' not found in locale " + locale );
ok = false;
@@ -1088,17 +1088,17 @@ namespace Antlr3.Tool
static bool verifyFormat()
{
bool ok = true;
-            if ( !format.isDefined( "location" ) )
+            if ( !format.IsDefined( "location" ) )
{
Console.Error.WriteLine( "Format template 'location' not found in " + formatName );
ok = false;
}
-            if ( !format.isDefined( "message" ) )
+            if ( !format.IsDefined( "message" ) )
{
Console.Error.WriteLine( "Format template 'message' not found in " + formatName );
ok = false;
}
-            if ( !format.isDefined( "report" ) )
+            if ( !format.IsDefined( "report" ) )
{
Console.Error.WriteLine( "Format template 'report' not found in " + formatName );
ok = false;
@@ -1117,7 +1117,7 @@ namespace Antlr3.Tool
static void rawError( String msg, Exception e )
{
rawError( msg );
-            e.printStackTrace( Console.Error );
+            e.PrintStackTrace( Console.Error );
}

/** I *think* this will allow Tool subclasses to exit gracefully
diff --git a/Antlr3/Tool/Grammar.cs b/Antlr3/Tool/Grammar.cs
index 70824d0..499d3d1 100644
--- a/Antlr3/Tool/Grammar.cs
+++ b/Antlr3/Tool/Grammar.cs
@@ -471,20 +471,31 @@ namespace Antlr3.Tool
*  as it's a lexer grammar.  A bit odd, but autogenerated.  Can tweak
*  later if we want.
*/
-        protected StringTemplate lexerGrammarST =
-            new StringTemplate(
-                "lexer grammar <name>;\n" +
-                "<if(options)>" +
-                "options {\n" +
-                "  <options:{<it.name>=<it.value>;<\\n>}>\n" +
-                "}<\\n>\n" +
-                "<endif>\n" +
-                "<if(imports)>import <imports; separator=\", \">;<endif>\n" +
-                "<actionNames,actions:{n,a|@<n> {<a>}\n}>\n" +
-                "<literals:{<it.ruleName> : <it.literal> ;\n}>\n" +
-                "<rules>",
-                typeof( AngleBracketTemplateLexer )
-            );
+        StringTemplate lexerGrammarST;
+        protected StringTemplate LexerGrammarST
+        {
+            get
+            {
+                if ( lexerGrammarST == null )
+                {
+                    lexerGrammarST = new StringTemplate(
+                        "lexer grammar <name>;\n" +
+                        "<if(options)>" +
+                        "options {\n" +
+                        "  <options:{<it.name>=<it.value>;<\\n>}>\n" +
+                        "}<\\n>\n" +
+                        "<endif>\n" +
+                        "<if(imports)>import <imports; separator=\", \">;<endif>\n" +
+                        "<actionNames,actions:{n,a|@<n> {<a>}\n}>\n" +
+                        "<literals:{<it.ruleName> : <it.literal> ;\n}>\n" +
+                        "<rules>",
+                        typeof( AngleBracketTemplateLexer )
+                        );
+                }
+
+                return lexerGrammarST;
+            }
+        }

/** What file name holds this grammar? */
protected internal string fileName;
@@ -1150,19 +1161,19 @@ namespace Antlr3.Tool
*/
public virtual string getLexerGrammar()
{
-            if ( lexerGrammarST.getAttribute( "literals" ) == null &&
-                 lexerGrammarST.getAttribute( "rules" ) == null )
+            if ( LexerGrammarST.GetAttribute( "literals" ) == null &&
+                 LexerGrammarST.GetAttribute( "rules" ) == null )
{
// if no rules, return nothing
return null;
}
-            lexerGrammarST.setAttribute( "name", name );
+            LexerGrammarST.SetAttribute( "name", name );
// if there are any actions set for lexer, pass them in
if ( actions.get( "lexer" ) != null )
{
-                lexerGrammarST.setAttribute( "actionNames",
+                LexerGrammarST.SetAttribute( "actionNames",
( (IDictionary)actions.get( "lexer" ) ).Keys );
-                lexerGrammarST.setAttribute( "actions",
+                LexerGrammarST.SetAttribute( "actions",
( (IDictionary)actions.get( "lexer" ) ).Values );
}
// make sure generated grammar has the same options
@@ -1174,11 +1185,11 @@ namespace Antlr3.Tool
if ( !doNotCopyOptionsToLexer.Contains( optionName ) )
{
object value = option.Value;
-                        lexerGrammarST.setAttribute( "options.{name,value}", optionName, value );
+                        LexerGrammarST.SetAttribute( "options.{name,value}", optionName, value );
}
}
}
-            return lexerGrammarST.ToString();
+            return LexerGrammarST.ToString();
}

[System.Obsolete]
@@ -1256,12 +1267,12 @@ namespace Antlr3.Tool
for ( int i = 0; i < ruleNames.Count; i++ )
{
string rname = (string)ruleNames[i];
-                matchTokenRuleST.setAttribute( "rules", rname );
+                matchTokenRuleST.SetAttribute( "rules", rname );
}
for ( int i = 0; i < delegateNames.Count; i++ )
{
string dname = (string)delegateNames[i];
-                matchTokenRuleST.setAttribute( "rules", dname + ".Tokens" );
+                matchTokenRuleST.SetAttribute( "rules", dname + ".Tokens" );
}
//JSystem.@out.println("tokens rule: "+matchTokenRuleST.toString());

@@ -2105,7 +2116,7 @@ namespace Antlr3.Tool
// now put the rule into the lexer grammar template
if ( IsRoot )
{ // don't build lexers for delegates
-                lexerGrammarST.setAttribute( "rules", ruleText );
+                LexerGrammarST.SetAttribute( "rules", ruleText );
}
// track this lexer rule's name
composite.lexerRules.Add( ruleToken.Text );
@@ -2121,7 +2132,7 @@ namespace Antlr3.Tool
if ( IsRoot )
{ // don't build lexers for delegates
//JSystem.@out.println("defineLexerRuleForAliasedStringLiteral: "+literal+" "+tokenType);
-                lexerGrammarST.setAttribute( "literals.{ruleName,type,literal}",
+                LexerGrammarST.SetAttribute( "literals.{ruleName,type,literal}",
tokenID,
tokenType,
literal );
@@ -2139,7 +2150,7 @@ namespace Antlr3.Tool
// tell implicit lexer to define a rule to match the literal
if ( IsRoot )
{ // don't build lexers for delegates
-                lexerGrammarST.setAttribute( "literals.{ruleName,type,literal}",
+                LexerGrammarST.SetAttribute( "literals.{ruleName,type,literal}",
tokenID,
tokenType,
literal );
@@ -2832,7 +2843,7 @@ namespace Antlr3.Tool
{
// ooops, we wasted some effort; tell lexer to read it in
// later
-                        lexerGrammarST.setAttribute( "imports", grammarName );
+                        LexerGrammarST.SetAttribute( "imports", grammarName );
// but, this parser grammar will need the vocab
// so add to composite anyway so we suck in the tokens later
}
diff --git a/Antlr3/Tool/GrammarAnalysisAbortedMessage.cs b/Antlr3/Tool/GrammarAnalysisAbortedMessage.cs
index f83ec94..c80369b 100644
--- a/Antlr3/Tool/GrammarAnalysisAbortedMessage.cs
+++ b/Antlr3/Tool/GrammarAnalysisAbortedMessage.cs
@@ -59,7 +59,7 @@ namespace Antlr3.Tool
file = fileName;
}
StringTemplate st = getMessageTemplate();
-            st.setAttribute( "enclosingRule",
+            st.SetAttribute( "enclosingRule",
probe.dfa.NFADecisionStartState.enclosingRule.name );

return base.ToString( st );
diff --git a/Antlr3/Tool/GrammarDanglingStateMessage.cs b/Antlr3/Tool/GrammarDanglingStateMessage.cs
index 3614c4c..aa2d9f6 100644
--- a/Antlr3/Tool/GrammarDanglingStateMessage.cs
+++ b/Antlr3/Tool/GrammarDanglingStateMessage.cs
@@ -72,8 +72,8 @@ namespace Antlr3.Tool
alts.addAll( problemState.AltSet );
alts.Sort();
//Collections.sort(alts);
-            st.setAttribute( "danglingAlts", alts );
-            st.setAttribute( "input", input );
+            st.SetAttribute( "danglingAlts", alts );
+            st.SetAttribute( "input", input );

return base.ToString( st );
}
diff --git a/Antlr3/Tool/GrammarInsufficientPredicatesMessage.cs b/Antlr3/Tool/GrammarInsufficientPredicatesMessage.cs
index 5439b50..0a138a9 100644
--- a/Antlr3/Tool/GrammarInsufficientPredicatesMessage.cs
+++ b/Antlr3/Tool/GrammarInsufficientPredicatesMessage.cs
@@ -84,13 +84,13 @@ namespace Antlr3.Tool
System.out.println("tokens=\n"+tokens);
*/
}
-            st.setAttribute( "altToLocations", altToLocationsWithStringKey );
+            st.SetAttribute( "altToLocations", altToLocationsWithStringKey );

var sampleInputLabels = problemState.dfa.probe.getSampleNonDeterministicInputSequence( problemState );
string input = problemState.dfa.probe.getInputSequenceDisplay( sampleInputLabels );
-            st.setAttribute( "upon", input );
+            st.SetAttribute( "upon", input );

-            st.setAttribute( "hasPredicateBlockedByAction", problemState.dfa.hasPredicateBlockedByAction );
+            st.SetAttribute( "hasPredicateBlockedByAction", problemState.dfa.hasPredicateBlockedByAction );

return base.ToString( st );
}
diff --git a/Antlr3/Tool/GrammarNonDeterminismMessage.cs b/Antlr3/Tool/GrammarNonDeterminismMessage.cs
index c8be261..48ba68b 100644
--- a/Antlr3/Tool/GrammarNonDeterminismMessage.cs
+++ b/Antlr3/Tool/GrammarNonDeterminismMessage.cs
@@ -77,7 +77,7 @@ namespace Antlr3.Tool
// Now fill template with information about problemState
var labels = probe.getSampleNonDeterministicInputSequence( problemState );
String input = probe.getInputSequenceDisplay( labels );
-            st.setAttribute( "input", input );
+            st.SetAttribute( "input", input );

if ( probe.dfa.IsTokensRuleDecision )
{
@@ -91,12 +91,12 @@ namespace Antlr3.Tool
probe.dfa.nfa.grammar.getRuleStartState( tokenName );
line = ruleStart.associatedASTNode.Line;
charPositionInLine = ruleStart.associatedASTNode.CharPositionInLine;
-                    st.setAttribute( "disabled", tokenName );
+                    st.SetAttribute( "disabled", tokenName );
}
}
else
{
-                st.setAttribute( "disabled", probe.getDisabledAlternatives( problemState ) );
+                st.SetAttribute( "disabled", probe.getDisabledAlternatives( problemState ) );
}

IList nondetAlts = probe.getNonDeterministicAltsForState( problemState );
@@ -119,7 +119,7 @@ namespace Antlr3.Tool
probe.getNFAPathStatesForAlt( firstAlt,
tracePathAlt,
labels );
-                        st.setAttribute( "paths.{alt,states}",
+                        st.SetAttribute( "paths.{alt,states}",
displayAltI, path );
}
else
@@ -129,16 +129,16 @@ namespace Antlr3.Tool
// alts are token rules, convert to the names instead of numbers
String tokenName =
probe.getTokenNameForTokensRuleAlt( (int)displayAltI );
-                            st.setAttribute( "conflictingTokens", tokenName );
+                            st.SetAttribute( "conflictingTokens", tokenName );
}
else
{
-                            st.setAttribute( "conflictingAlts", displayAltI );
+                            st.SetAttribute( "conflictingAlts", displayAltI );
}
}
}
}
-            st.setAttribute( "hasPredicateBlockedByAction", problemState.dfa.hasPredicateBlockedByAction );
+            st.SetAttribute( "hasPredicateBlockedByAction", problemState.dfa.hasPredicateBlockedByAction );
return base.ToString( st );
}

diff --git a/Antlr3/Tool/GrammarSemanticsMessage.cs b/Antlr3/Tool/GrammarSemanticsMessage.cs
index 3ea4f3b..be875d2 100644
--- a/Antlr3/Tool/GrammarSemanticsMessage.cs
+++ b/Antlr3/Tool/GrammarSemanticsMessage.cs
@@ -88,11 +88,11 @@ namespace Antlr3.Tool
StringTemplate st = getMessageTemplate();
if ( arg != null )
{
-                st.setAttribute( "arg", arg );
+                st.SetAttribute( "arg", arg );
}
if ( arg2 != null )
{
-                st.setAttribute( "arg2", arg2 );
+                st.SetAttribute( "arg2", arg2 );
}
return base.ToString( st );
}
diff --git a/Antlr3/Tool/GrammarSyntaxMessage.cs b/Antlr3/Tool/GrammarSyntaxMessage.cs
index 46cb1c4..4bce309 100644
--- a/Antlr3/Tool/GrammarSyntaxMessage.cs
+++ b/Antlr3/Tool/GrammarSyntaxMessage.cs
@@ -86,7 +86,7 @@ namespace Antlr3.Tool
StringTemplate st = getMessageTemplate();
if ( arg != null )
{
-                st.setAttribute( "arg", arg );
+                st.SetAttribute( "arg", arg );
}
return base.ToString( st );
}
diff --git a/Antlr3/Tool/GrammarUnreachableAltsMessage.cs b/Antlr3/Tool/GrammarUnreachableAltsMessage.cs
index adceb42..1a727db 100644
--- a/Antlr3/Tool/GrammarUnreachableAltsMessage.cs
+++ b/Antlr3/Tool/GrammarUnreachableAltsMessage.cs
@@ -85,13 +85,13 @@ namespace Antlr3.Tool
NFAState ruleStart = probe.dfa.nfa.grammar.getRuleStartState( tokenName );
line = ruleStart.associatedASTNode.Line;
charPositionInLine = ruleStart.associatedASTNode.CharPositionInLine;
-                    st.setAttribute( "tokens", tokenName );
+                    st.SetAttribute( "tokens", tokenName );
}
}
else
{
// regular alt numbers, show the alts
-                st.setAttribute( "alts", alts );
+                st.SetAttribute( "alts", alts );
}

return base.ToString( st );
diff --git a/Antlr3/Tool/LeftRecursionCyclesMessage.cs b/Antlr3/Tool/LeftRecursionCyclesMessage.cs
index af28c82..9c6da06 100644
--- a/Antlr3/Tool/LeftRecursionCyclesMessage.cs
+++ b/Antlr3/Tool/LeftRecursionCyclesMessage.cs
@@ -55,7 +55,7 @@ namespace Antlr3.Tool
public override String ToString()
{
StringTemplate st = getMessageTemplate();
-            st.setAttribute( "listOfCycles", cycles );
+            st.SetAttribute( "listOfCycles", cycles );
return base.ToString( st );
}
}
diff --git a/Antlr3/Tool/Message.cs b/Antlr3/Tool/Message.cs
index de90b9d..b6d338f 100644
--- a/Antlr3/Tool/Message.cs
+++ b/Antlr3/Tool/Message.cs
@@ -99,7 +99,7 @@ namespace Antlr3.Tool
*/
public virtual StringTemplate getMessageTemplate()
{
-            return msgST.getInstanceOf();
+            return msgST.GetInstanceOf();
}

/** Return a new template instance for the location part of a Message.
@@ -107,7 +107,7 @@ namespace Antlr3.Tool
*/
public virtual StringTemplate getLocationTemplate()
{
-            return locationST.getInstanceOf();
+            return locationST.GetInstanceOf();
}

public virtual string ToString( StringTemplate messageST )
@@ -119,29 +119,29 @@ namespace Antlr3.Tool
bool locationValid = false;
if ( line != -1 )
{
-                locationST.setAttribute( "line", line );
+                locationST.SetAttribute( "line", line );
locationValid = true;
}
if ( charPositionInLine != -1 )
{
-                locationST.setAttribute( "column", charPositionInLine + 1 );
+                locationST.SetAttribute( "column", charPositionInLine + 1 );
locationValid = true;
}
if ( file != null )
{
-                locationST.setAttribute( "file", file );
+                locationST.SetAttribute( "file", file );
locationValid = true;
}

-            messageFormatST.setAttribute( "id", msgID );
-            messageFormatST.setAttribute( "text", messageST );
+            messageFormatST.SetAttribute( "id", msgID );
+            messageFormatST.SetAttribute( "text", messageST );

if ( locationValid )
{
-                reportST.setAttribute( "location", locationST );
+                reportST.SetAttribute( "location", locationST );
}
-            reportST.setAttribute( "message", messageFormatST );
-            reportST.setAttribute( "type", ErrorManager.getMessageType( msgID ) );
+            reportST.SetAttribute( "message", messageFormatST );
+            reportST.SetAttribute( "type", ErrorManager.getMessageType( msgID ) );

return reportST.ToString();
}
diff --git a/Antlr3/Tool/NonRegularDecisionMessage.cs b/Antlr3/Tool/NonRegularDecisionMessage.cs
index 2ab88cc..eace20b 100644
--- a/Antlr3/Tool/NonRegularDecisionMessage.cs
+++ b/Antlr3/Tool/NonRegularDecisionMessage.cs
@@ -65,12 +65,12 @@ namespace Antlr3.Tool

StringTemplate st = getMessageTemplate();
String ruleName = probe.dfa.NFADecisionStartState.enclosingRule.name;
-            st.setAttribute( "ruleName", ruleName );
+            st.SetAttribute( "ruleName", ruleName );
List<int> sortedAlts = new List<int>();
sortedAlts.addAll( altsWithRecursion );
sortedAlts.Sort();
//Collections.sort(sortedAlts); // make sure it's 1, 2, ...
-            st.setAttribute( "alts", sortedAlts );
+            st.SetAttribute( "alts", sortedAlts );

return base.ToString( st );
}
diff --git a/Antlr3/Tool/RecursionOverflowMessage.cs b/Antlr3/Tool/RecursionOverflowMessage.cs
index f507bc5..4f3ab81 100644
--- a/Antlr3/Tool/RecursionOverflowMessage.cs
+++ b/Antlr3/Tool/RecursionOverflowMessage.cs
@@ -75,13 +75,13 @@ namespace Antlr3.Tool
}

StringTemplate st = getMessageTemplate();
-            st.setAttribute( "targetRules", targetRules );
-            st.setAttribute( "alt", alt );
-            st.setAttribute( "callSiteStates", callSiteStates );
+            st.SetAttribute( "targetRules", targetRules );
+            st.SetAttribute( "alt", alt );
+            st.SetAttribute( "callSiteStates", callSiteStates );

var labels = probe.getSampleNonDeterministicInputSequence( sampleBadState );
String input = probe.getInputSequenceDisplay( labels );
-            st.setAttribute( "input", input );
+            st.SetAttribute( "input", input );

return base.ToString( st );
}
diff --git a/Antlr3/Tool/Rule.cs b/Antlr3/Tool/Rule.cs
index 164e8ea..1bf573a 100644
--- a/Antlr3/Tool/Rule.cs
+++ b/Antlr3/Tool/Rule.cs
@@ -585,7 +585,7 @@ namespace Antlr3.Tool
}
string labelName = null;
string existingLabelName =
-                (string)uniqueRefAST.code.getAttribute( "label" );
+                (string)uniqueRefAST.code.GetAttribute( "label" );
// reuse any label or list label if it exists
if ( existingLabelName != null )
{
@@ -605,7 +605,7 @@ namespace Antlr3.Tool
{
grammar.defineRuleRefLabel( name, label, uniqueRefAST );
}
-                uniqueRefAST.code.setAttribute( "label", labelName );
+                uniqueRefAST.code.SetAttribute( "label", labelName );
}
return labelName;
}
diff --git a/Antlr3/Tool/ToolMessage.cs b/Antlr3/Tool/ToolMessage.cs
index 18c4062..1414262 100644
--- a/Antlr3/Tool/ToolMessage.cs
+++ b/Antlr3/Tool/ToolMessage.cs
@@ -77,16 +77,16 @@ namespace Antlr3.Tool
StringTemplate st = getMessageTemplate();
if ( arg != null )
{
-                st.setAttribute( "arg", arg );
+                st.SetAttribute( "arg", arg );
}
if ( arg2 != null )
{
-                st.setAttribute( "arg2", arg2 );
+                st.SetAttribute( "arg2", arg2 );
}
if ( e != null )
{
-                st.setAttribute( "exception", e );
-                st.setAttribute( "stackTrace", e.getStackTrace() );
+                st.SetAttribute( "exception", e );
+                st.SetAttribute( "stackTrace", e.getStackTrace() );
}
return base.ToString( st );
}

