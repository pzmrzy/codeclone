commit 996e13301cf6585bceb33fc009f2e653d32696ba
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Fri Oct 23 07:34:07 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Fri Oct 23 07:34:07 2009 -0800

C# Port:
* Keep track of files generated during the build (required for full MSBuild support)
* Small changes to dynamic resource resolution (required for full MSBuild support)

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6256]

diff --git a/Antlr3/AntlrTool.cs b/Antlr3/AntlrTool.cs
index 35d1353..6a48a0d 100644
--- a/Antlr3/AntlrTool.cs
+++ b/Antlr3/AntlrTool.cs
@@ -57,6 +57,7 @@ namespace Antlr3
public const string UninitializedDir = "<unset-dir>";

private IList<string> grammarFileNames = new List<string>();
+        private List<string> generatedFiles = new List<string>();
private bool generate_NFA_dot = false;
private bool generate_DFA_dot = false;
private string outputDirectory = ".";
@@ -115,14 +116,41 @@ namespace Antlr3
}

public AntlrTool()
+            : this(Path.GetDirectoryName(typeof(CodeGenerator).Assembly.Location))
{
}

+        public AntlrTool(string toolPathRoot)
+        {
+            ToolPathRoot = toolPathRoot;
+            TargetsDirectory = Path.Combine(toolPathRoot, @"Targets");
+            TemplatesDirectory = Path.Combine(toolPathRoot, @"Codegen\Templates");
+        }
+
public AntlrTool( string[] args )
+            : this()
{
ProcessArgs( args );
}

+        public static string ToolPathRoot
+        {
+            get;
+            set;
+        }
+
+        public string TargetsDirectory
+        {
+            get;
+            set;
+        }
+
+        public string TemplatesDirectory
+        {
+            get;
+            set;
+        }
+
public virtual void ProcessArgs( string[] args )
{
if ( verbose )
@@ -893,6 +921,7 @@ namespace Antlr3
if ( outputFile.Exists )
outputFile.Delete();

+            GeneratedFiles.Add(outputFile.FullName);
return new System.IO.StreamWriter( new System.IO.BufferedStream( outputFile.OpenWrite() ) );
}

@@ -1092,6 +1121,14 @@ namespace Antlr3
}
}

+        public IList<string> GeneratedFiles
+        {
+            get
+            {
+                return generatedFiles;
+            }
+        }
+
/**
* Indicates whether ANTLR has gnerated or will generate a description of
* all the NFAs in <a href="http://www.graphviz.org">Dot format</a>
diff --git a/Antlr3/Codegen/CodeGenerator.cs b/Antlr3/Codegen/CodeGenerator.cs
index 91dfed9..129e128 100644
--- a/Antlr3/Codegen/CodeGenerator.cs
+++ b/Antlr3/Codegen/CodeGenerator.cs
@@ -33,6 +33,7 @@
namespace Antlr3.Codegen
{
using System.Collections.Generic;
+    using System.Collections.ObjectModel;
using System.Linq;
using Antlr.Runtime.JavaExtensions;
using Antlr3.Analysis;
@@ -74,9 +75,11 @@ namespace Antlr3.Codegen
using Path = System.IO.Path;
using RecognitionException = Antlr.Runtime.RecognitionException;
using Rule = Antlr3.Tool.Rule;
+    using Stopwatch = System.Diagnostics.Stopwatch;
using StringTemplate = Antlr3.ST.StringTemplate;
using StringTemplateGroup = Antlr3.ST.StringTemplateGroup;
using TextWriter = System.IO.TextWriter;
+    using TimeSpan = System.TimeSpan;

/** ANTLR's code generator.
*
@@ -116,11 +119,6 @@ namespace Antlr3.Codegen
public static bool EmitTemplateDelimiters = false;
public static int MaxAcyclicDfaStatesInline = 10;

-        //public string classpathTemplateRootDirectoryName = "org/antlr/codegen/templates";
-        //public string classpathTemplateRootDirectoryName = "Antlr3.Codegen.Templates";
-        public string classpathTemplateRootDirectoryName =
-            Path.Combine( Path.GetDirectoryName( typeof( CodeGenerator ).Assembly.Location ), @"Codegen\Templates" );
-
/** Which grammar are we generating code for?  Each generator
*  is attached to a specific grammar.
*/
@@ -195,6 +193,7 @@ namespace Antlr3.Codegen
}

#region Properties
+
[CLSCompliant(false)]
public StringTemplateGroup BaseTemplates
{
@@ -203,6 +202,7 @@ namespace Antlr3.Codegen
return baseTemplates;
}
}
+
[CLSCompliant(false)]
public StringTemplate RecognizerST
{
@@ -211,6 +211,7 @@ namespace Antlr3.Codegen
return outputFileST;
}
}
+
[CLSCompliant(false)]
public StringTemplateGroup Templates
{
@@ -219,6 +220,7 @@ namespace Antlr3.Codegen
return templates;
}
}
+
public string VocabFileName
{
get
@@ -226,6 +228,7 @@ namespace Antlr3.Codegen
return GetVocabFileName();
}
}
+
[CLSCompliant(false)]
public bool Debug
{
@@ -238,6 +241,7 @@ namespace Antlr3.Codegen
debug = value;
}
}
+
[CLSCompliant(false)]
public bool Profile
{
@@ -255,6 +259,7 @@ namespace Antlr3.Codegen
}
}
}
+
[CLSCompliant(false)]
public bool Trace
{
@@ -267,6 +272,7 @@ namespace Antlr3.Codegen
trace = value;
}
}
+
#endregion

[MethodImpl( MethodImplOptions.Synchronized )]
@@ -276,9 +282,8 @@ namespace Antlr3.Codegen
{
// first try to load the target via a satellite DLL
string assembly = "Antlr3.Targets." + language + ".dll";
-                string path1 = System.IO.Path.Combine( System.IO.Path.GetDirectoryName( typeof( CodeGenerator ).Assembly.Location ), "Targets" );
-                string path2 = System.IO.Path.GetDirectoryName( typeof( CodeGenerator ).Assembly.Location );
-                string[] paths = { path1, path2 };
+                string path1 = tool.TargetsDirectory;
+                string[] paths = { path1 };

System.Reflection.Assembly targetAssembly = null;
System.Type targetType = null;
@@ -291,7 +296,7 @@ namespace Antlr3.Codegen
{
try
{
-                            targetAssembly = System.Reflection.Assembly.LoadFile( filename );
+                            targetAssembly = System.Reflection.Assembly.LoadFrom( filename );
targetType = targetAssembly.GetType( targetName, false );
}
catch
@@ -322,8 +327,8 @@ namespace Antlr3.Codegen
{
// get a group loader containing main templates dir and target subdir
string templateDirs =
-                classpathTemplateRootDirectoryName + ":" +
-                classpathTemplateRootDirectoryName + @"\" + language;
+                tool.TemplatesDirectory + ":" +
+                Path.Combine(tool.TemplatesDirectory, language);
//JSystem.@out.println("targets="+templateDirs.toString());
IStringTemplateGroupLoader loader =
new CommonGroupLoader( templateDirs,
@@ -1483,14 +1488,14 @@ namespace Antlr3.Codegen

public virtual void Write( StringTemplate code, string fileName )
{
-            DateTime start = DateTime.Now;
+            Stopwatch watch = Stopwatch.StartNew();
TextWriter w = tool.GetOutputFile( grammar, fileName );
// Write the output to a StringWriter
IStringTemplateWriter wr = templates.GetStringTemplateWriter( w );
wr.SetLineWidth( lineWidth );
code.Write( wr );
w.Close();
-            DateTime stop = DateTime.Now;
+            TimeSpan duration = watch.Elapsed;
//JSystem.@out.println("render time for "+fileName+": "+(int)(stop-start)+"ms");
}

diff --git a/Antlr3/Tool/DOTGenerator.cs b/Antlr3/Tool/DOTGenerator.cs
index a78effd..4054142 100644
--- a/Antlr3/Tool/DOTGenerator.cs
+++ b/Antlr3/Tool/DOTGenerator.cs
@@ -58,8 +58,7 @@ namespace Antlr3.Tool
public static StringTemplateGroup stlib =
new StringTemplateGroup( "toollib", typeof( AngleBracketTemplateLexer ) );

-        public string dfaTemplateDirectoryName =
-            Path.Combine( Path.GetDirectoryName( typeof( DOTGenerator ).Assembly.Location ), @"Tool\Templates\dot" );
+        public string dfaTemplateDirectoryName;

/** To prevent infinite recursion when walking state machines, record
*  which states we've visited.  Make a new set every time you start
@@ -73,6 +72,7 @@ namespace Antlr3.Tool
public DOTGenerator( Grammar grammar )
{
this.grammar = grammar;
+            this.dfaTemplateDirectoryName = Path.Combine(AntlrTool.ToolPathRoot, @"Tool\Templates\dot");
}

#region Properties
diff --git a/Antlr3/Tool/ErrorManager.cs b/Antlr3/Tool/ErrorManager.cs
index 0aeb6a2..ac3d01f 100644
--- a/Antlr3/Tool/ErrorManager.cs
+++ b/Antlr3/Tool/ErrorManager.cs
@@ -57,6 +57,7 @@ namespace Antlr3.Tool
using TargetInvocationException = System.Reflection.TargetInvocationException;
using Thread = System.Threading.Thread;
using Tool = Antlr3.AntlrTool;
+    using TraceListener = System.Diagnostics.TraceListener;

public static class ErrorManager
{
@@ -250,7 +251,13 @@ namespace Antlr3.Tool
*/
private static String[] idToMessageTemplateName = new String[MAX_MESSAGE_NUMBER + 1];

-        class DefaultErrorListener : IANTLRErrorListener
+        public static TraceListener ExternalListener
+        {
+            get;
+            set;
+        }
+
+        private class DefaultErrorListener : IANTLRErrorListener
{
public virtual void Info( String msg )
{
@@ -259,6 +266,9 @@ namespace Antlr3.Tool
msg = msg.replaceAll( "\n", " " );
}
Console.Error.WriteLine( msg );
+
+                if (ExternalListener != null)
+                    ExternalListener.WriteLine(msg);
}

public virtual void Error( Message msg )
@@ -269,6 +279,9 @@ namespace Antlr3.Tool
outputMsg = outputMsg.replaceAll( "\n", " " );
}
Console.Error.WriteLine( outputMsg );
+
+                if (ExternalListener != null)
+                    ExternalListener.WriteLine(outputMsg);
}

public virtual void Warning( Message msg )
@@ -279,6 +292,9 @@ namespace Antlr3.Tool
outputMsg = outputMsg.replaceAll( "\n", " " );
}
Console.Error.WriteLine( outputMsg );
+
+                if (ExternalListener != null)
+                    ExternalListener.WriteLine(outputMsg);
}

public virtual void Error( ToolMessage msg )
@@ -289,6 +305,9 @@ namespace Antlr3.Tool
outputMsg = outputMsg.replaceAll( "\n", " " );
}
Console.Error.WriteLine( outputMsg );
+
+                if (ExternalListener != null)
+                    ExternalListener.WriteLine(outputMsg);
}
}

@@ -393,7 +412,7 @@ namespace Antlr3.Tool
//String fileName = "org/antlr/tool/templates/messages/languages/"+language+".stg";
string fileName = @"Tool\Templates\messages\languages\" + language + ".stg";
string streamName = "Antlr3." + fileName.Replace( '\\', '.' );
-            fileName = System.IO.Path.Combine( System.IO.Path.GetDirectoryName( typeof( ErrorManager ).Assembly.Location ), fileName );
+            fileName = System.IO.Path.Combine(AntlrTool.ToolPathRoot, fileName);
//ClassLoader cl = Thread.currentThread().getContextClassLoader();
//InputStream @is = cl.getResourceAsStream(fileName);
System.IO.Stream @is;
@@ -456,7 +475,7 @@ namespace Antlr3.Tool
//String fileName = "org/antlr/tool/templates/messages/formats/"+formatName+".stg";
string fileName = @"Tool\Templates\messages\formats\" + formatName + ".stg";
string streamName = "Antlr3." + fileName.Replace( '\\', '.' );
-            fileName = System.IO.Path.Combine( System.IO.Path.GetDirectoryName( typeof( ErrorManager ).Assembly.Location ), fileName );
+            fileName = System.IO.Path.Combine(AntlrTool.ToolPathRoot, fileName);
//ClassLoader cl = Thread.currentThread().getContextClassLoader();
//InputStream is = cl.getResourceAsStream(fileName);
System.IO.Stream @is;
@@ -559,6 +578,11 @@ namespace Antlr3.Tool
threadToListenerMap.Remove( Thread.CurrentThread );
}

+        public static Tool GetTool()
+        {
+            return threadToToolMap[Thread.CurrentThread];
+        }
+
public static void SetTool( Tool tool )
{
threadToToolMap[Thread.CurrentThread] = tool;

