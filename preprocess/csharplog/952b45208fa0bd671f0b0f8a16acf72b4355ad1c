commit 952b45208fa0bd671f0b0f8a16acf72b4355ad1c
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Wed Feb 2 14:10:00 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Wed Feb 2 14:10:00 2011 -0800

(C# 3) Code cleanup
TemplateGroup.Debug an instance variable
Add a templateToken parameter to TemplateGroup.DefineRegion

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7598]

diff --git a/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs b/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs
index bc7c362..42373c2 100644
--- a/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs
+++ b/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs
@@ -40,8 +40,8 @@ namespace Antlr4.StringTemplate.Visualizer.Extensions
{
public static string ToListString(this IList list)
{
-            TemplateGroup group = new TemplateGroup('$', '$');
-            group.DefineTemplate("listTemplate", "list", "[$list:{x|$x$}; separator=\", \"$]");
+            TemplateGroup group = new TemplateGroup();
+            group.DefineTemplate("listTemplate", "[<list:{x|<x>}; separator=\", \">]", new string[] { "list" });
group.RegisterRenderer(typeof(IList), new CollectionRenderer());
Template st = group.GetInstanceOf("listTemplate");
st.Add("list", list);
diff --git a/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs b/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
index 9c247fa..5ff5bfa 100644
--- a/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
+++ b/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
@@ -46,12 +46,12 @@ namespace Antlr4.StringTemplate.Visualizer.Extensions

public static void Inspect(this DebugST template, int lineWidth)
{
-            Inspect(template, template.impl.nativeGroup.errMgr, CultureInfo.CurrentCulture, lineWidth);
+            Inspect(template, template.impl.nativeGroup.ErrorManager, CultureInfo.CurrentCulture, lineWidth);
}

public static void Inspect(this DebugST template, CultureInfo culture)
{
-            Inspect(template, template.impl.nativeGroup.errMgr, culture, AutoIndentWriter.NoWrap);
+            Inspect(template, template.impl.nativeGroup.ErrorManager, culture, AutoIndentWriter.NoWrap);
}

public static void Inspect(this DebugST template, ErrorManager errorManager, CultureInfo culture, int lineWidth)
diff --git a/Antlr4.StringTemplate/Compiler/CodeGenerator.g3 b/Antlr4.StringTemplate/Compiler/CodeGenerator.g3
index 13e9df3..a1b0d65 100644
--- a/Antlr4.StringTemplate/Compiler/CodeGenerator.g3
+++ b/Antlr4.StringTemplate/Compiler/CodeGenerator.g3
@@ -132,7 +132,7 @@ subtemplate returns [string name, int nargs]
{
CompiledTemplate sub = $template.impl;
sub.isAnonSubtemplate = true;
-			if ( TemplateGroup.debug ) {
+			if ( Group.Debug ) {
sub.ast = $SUBTEMPLATE;
sub.ast.SetUnknownTokenBoundaries();
sub.tokens = input.TokenStream;
diff --git a/Antlr4.StringTemplate/Compiler/CodeGenerator.g3.cs b/Antlr4.StringTemplate/Compiler/CodeGenerator.g3.cs
index a2ae986..ca8e8e0 100644
--- a/Antlr4.StringTemplate/Compiler/CodeGenerator.g3.cs
+++ b/Antlr4.StringTemplate/Compiler/CodeGenerator.g3.cs
@@ -45,18 +45,34 @@ namespace Antlr4.StringTemplate.Compiler
private readonly IToken templateToken;
/// <summary>Overall template text</summary>
private readonly string _template;
-        private readonly ErrorManager errMgr;
+        private readonly TemplateCompiler _compiler;
private CompiledTemplate outermostImpl;

-        public CodeGenerator(ITreeNodeStream input, ErrorManager errMgr, string name, string template, IToken templateToken)
+        public CodeGenerator(ITreeNodeStream input, TemplateCompiler compiler, string name, string template, IToken templateToken)
: this(input, new RecognizerSharedState())
{
-            this.errMgr = errMgr;
+            this._compiler = compiler;
this.outermostTemplateName = name;
this._template = template;
this.templateToken = templateToken;
}

+        public ErrorManager errMgr
+        {
+            get
+            {
+                return _compiler.ErrorManager;
+            }
+        }
+
+        public TemplateGroup Group
+        {
+            get
+            {
+                return _compiler.Group;
+            }
+        }
+
// convience funcs to hide offensive sending of emit messages to
// CompilationState temp data object.

diff --git a/Antlr4.StringTemplate/Compiler/CompiledTemplate.cs b/Antlr4.StringTemplate/Compiler/CompiledTemplate.cs
index cf7b0b5..9c1776e 100644
--- a/Antlr4.StringTemplate/Compiler/CompiledTemplate.cs
+++ b/Antlr4.StringTemplate/Compiler/CompiledTemplate.cs
@@ -180,7 +180,7 @@ namespace Antlr4.StringTemplate.Compiler
if (fa.DefaultValueToken != null)
{
string argSTname = fa.Name + "_default_value";
-                    TemplateCompiler c2 = new TemplateCompiler(group.errMgr, group.delimiterStartChar, group.delimiterStopChar);
+                    TemplateCompiler c2 = new TemplateCompiler(group);
string defArgTemplate = Utility.Strip(fa.DefaultValueToken.Text, 1);
fa.CompiledDefaultValue = c2.Compile(nativeGroup.FileName, argSTname, null, defArgTemplate, fa.DefaultValueToken);
fa.CompiledDefaultValue.name = argSTname;
diff --git a/Antlr4.StringTemplate/Compiler/Group.g3 b/Antlr4.StringTemplate/Compiler/Group.g3
index 66639b8..2a2e7d8 100644
--- a/Antlr4.StringTemplate/Compiler/Group.g3
+++ b/Antlr4.StringTemplate/Compiler/Group.g3
@@ -100,7 +100,7 @@ templateDef[string prefix]
template = string.Empty;
string msg = "missing template at '"+input.LT(1).Text+"'";
NoViableAltException e = new NoViableAltException(string.Empty, 0, 0, input);
-    	    _group.errMgr.GroupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
+    	    _group.ErrorManager.GroupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
}
)
{
@@ -148,10 +148,10 @@ dictDef
:	ID '::=' dict
{
if ( _group.RawGetDictionary($ID.text)!=null ) {
-			_group.errMgr.CompiletimeError(ErrorType.MAP_REDEFINITION, null, $ID);
+			_group.ErrorManager.CompiletimeError(ErrorType.MAP_REDEFINITION, null, $ID);
}
else if ( _group.RawGetTemplate($ID.text)!=null ) {
-			_group.errMgr.CompiletimeError(ErrorType.TEMPLATE_REDEFINITION_AS_MAP, null, $ID);
+			_group.ErrorManager.CompiletimeError(ErrorType.TEMPLATE_REDEFINITION_AS_MAP, null, $ID);
}
else {
_group.DefineDictionary($ID.text, $dict.mapping);
@@ -202,7 +202,7 @@ STRING
|	{
string msg = "\\n in string";
NoViableAltException e = new NoViableAltException(string.Empty, 0, 0, input);
-			group.errMgr.GroupLexerError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
+			group.ErrorManager.GroupLexerError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
}
'\n'
|	~('\\'|'"'|'\n')
@@ -225,7 +225,7 @@ ANONYMOUS_TEMPLATE
:	'{'
{
IToken templateToken = new CommonToken(input, ANONYMOUS_TEMPLATE, 0, CharIndex, CharIndex);
-		TemplateLexer lexer = new TemplateLexer(group.errMgr, input, templateToken, group.delimiterStartChar, group.delimiterStopChar);
+		TemplateLexer lexer = new TemplateLexer(group.ErrorManager, input, templateToken, group.delimiterStartChar, group.delimiterStopChar);
lexer.subtemplateDepth = 1;
IToken t = lexer.NextToken();
while ( lexer.subtemplateDepth>=1 || t.Type!=TemplateLexer.RCURLY )
@@ -234,7 +234,7 @@ ANONYMOUS_TEMPLATE
{
MismatchedTokenException e = new MismatchedTokenException('}', input);
string msg = "missing final '}' in {...} anonymous template";
-    			group.errMgr.GroupLexerError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
+    			group.ErrorManager.GroupLexerError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
break;
}
t = lexer.NextToken();
diff --git a/Antlr4.StringTemplate/Compiler/Group.g3.lexer.cs b/Antlr4.StringTemplate/Compiler/Group.g3.lexer.cs
index 5727861..efaffc3 100644
--- a/Antlr4.StringTemplate/Compiler/Group.g3.lexer.cs
+++ b/Antlr4.StringTemplate/Compiler/Group.g3.lexer.cs
@@ -56,7 +56,7 @@ namespace Antlr4.StringTemplate.Compiler
msg = GetErrorMessage(e, TokenNames);
}

-            group.errMgr.GroupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
+            group.ErrorManager.GroupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
}

public override string SourceName
diff --git a/Antlr4.StringTemplate/Compiler/Group.g3.parser.cs b/Antlr4.StringTemplate/Compiler/Group.g3.parser.cs
index 49fdc1a..809bb5b 100644
--- a/Antlr4.StringTemplate/Compiler/Group.g3.parser.cs
+++ b/Antlr4.StringTemplate/Compiler/Group.g3.parser.cs
@@ -56,7 +56,7 @@ namespace Antlr4.StringTemplate.Compiler
public override void DisplayRecognitionError(string[] tokenNames, RecognitionException e)
{
string msg = GetErrorMessage(e, tokenNames);
-            _group.errMgr.GroupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
+            _group.ErrorManager.GroupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
}

public override string SourceName
@@ -72,7 +72,7 @@ namespace Antlr4.StringTemplate.Compiler
public virtual void error(string msg)
{
NoViableAltException e = new NoViableAltException(string.Empty, 0, 0, input);
-            _group.errMgr.GroupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
+            _group.ErrorManager.GroupSyntaxError(ErrorType.SYNTAX_ERROR, SourceName, e, msg);
Recover(input, null);
}
}
diff --git a/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs b/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs
index 27547a4..b42f173 100644
--- a/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs
+++ b/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs
@@ -36,6 +36,7 @@ namespace Antlr4.StringTemplate.Compiler
using Antlr4.StringTemplate.Misc;
using Antlr.Runtime;
using Antlr.Runtime.Tree;
+    using ArgumentNullException = System.ArgumentNullException;

/** A compiler for a single template. */
public class TemplateCompiler
@@ -80,38 +81,46 @@ namespace Antlr4.StringTemplate.Compiler
/** Name subtemplates _sub1, _sub2, ... */
public static int subtemplateCount = 0;

-        /** The compiler needs to know how to delimit expressions.
-         *  The TemplateGroup normally passes in this information, but we
-         *  can set some defaults.
-         */
-        public char delimiterStartChar = '<'; // Use <expr> by default
-        public char delimiterStopChar = '>';
+        private readonly TemplateGroup _group;

-        public ErrorManager errMgr;
+        public TemplateCompiler(TemplateGroup group)
+        {
+            if (group == null)
+                throw new ArgumentNullException("group");
+
+            _group = group;
+        }

-        public TemplateCompiler()
-            : this(TemplateGroup.DefaultErrorManager)
+        public TemplateGroup Group
{
+            get
+            {
+                return _group;
+            }
}

-        public TemplateCompiler(ErrorManager errMgr)
-            : this(errMgr, '<', '>')
+        public ErrorManager ErrorManager
{
+            get
+            {
+                return _group.ErrorManager;
+            }
}

-        public TemplateCompiler(char delimiterStartChar, char delimiterStopChar)
-            : this(TemplateGroup.DefaultErrorManager, delimiterStartChar, delimiterStopChar)
+        public char DelimiterStartChar
{
+            get
+            {
+                return _group.delimiterStartChar;
+            }
}

-        /** To compile a template, we need to know what the
-         *  enclosing template is (if any) in case of regions.
-         */
-        public TemplateCompiler(ErrorManager errMgr, char delimiterStartChar, char delimiterStopChar)
+        public char DelimiterStopChar
{
-            this.errMgr = errMgr;
-            this.delimiterStartChar = delimiterStartChar;
-            this.delimiterStopChar = delimiterStopChar;
+            get
+            {
+                return _group.delimiterStopChar;
+            }
}

public virtual CompiledTemplate Compile(string template)
@@ -134,9 +143,9 @@ namespace Antlr4.StringTemplate.Compiler
{
ANTLRStringStream @is = new ANTLRStringStream(template);
@is.name = srcName != null ? srcName : name;
-            TemplateLexer lexer = new TemplateLexer(errMgr, @is, templateToken, delimiterStartChar, delimiterStopChar);
+            TemplateLexer lexer = new TemplateLexer(ErrorManager, @is, templateToken, DelimiterStartChar, DelimiterStopChar);
CommonTokenStream tokens = new CommonTokenStream(lexer);
-            TemplateParser p = new TemplateParser(tokens, errMgr, templateToken);
+            TemplateParser p = new TemplateParser(tokens, ErrorManager, templateToken);
TemplateParser.templateAndEOF_return r = null;
try
{
@@ -158,14 +167,14 @@ namespace Antlr4.StringTemplate.Compiler
//System.out.println(((CommonTree)r.getTree()).toStringTree());
CommonTreeNodeStream nodes = new CommonTreeNodeStream(r.Tree);
nodes.TokenStream = tokens;
-            CodeGenerator gen = new CodeGenerator(nodes, errMgr, name, template, templateToken);
+            CodeGenerator gen = new CodeGenerator(nodes, this, name, template, templateToken);

CompiledTemplate impl2 = null;
try
{
impl2 = gen.template(name, args);
// only save tree/token stream when debugging
-                if (TemplateGroup.debug)
+                if (Group.Debug)
{
impl2.ast = (CommonTree)r.Tree;
impl2.ast.SetUnknownTokenBoundaries();
@@ -174,7 +183,7 @@ namespace Antlr4.StringTemplate.Compiler
}
catch (RecognitionException re)
{
-                errMgr.InternalError(null, "bad tree structure", re);
+                ErrorManager.InternalError(null, "bad tree structure", re);
}

return impl2;
@@ -203,29 +212,29 @@ namespace Antlr4.StringTemplate.Compiler
if (re.Token.Type == TemplateLexer.EOF_TYPE)
{
string msg = "premature EOF";
-                errMgr.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
+                ErrorManager.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
}
else if (re is NoViableAltException)
{
string msg = "'" + re.Token.Text + "' came as a complete surprise to me";
-                errMgr.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
+                ErrorManager.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
}
else if (tokens.Index == 0)
{
// couldn't parse anything
string msg = string.Format("this doesn't look like a template: \"{0}\"", tokens);
-                errMgr.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
+                ErrorManager.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
}
else if (tokens.LA(1) == TemplateLexer.LDELIM)
{
// couldn't parse expr
string msg = "doesn't look like an expression";
-                errMgr.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
+                ErrorManager.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
}
else
{
string msg = parser.GetErrorMessage(re, parser.TokenNames);
-                errMgr.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
+                ErrorManager.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
}

// we have reported the error, so just blast out
diff --git a/Antlr4.StringTemplate/Compiler/TestNewStuff.cs b/Antlr4.StringTemplate/Compiler/TestNewStuff.cs
index 23b4915..b15a035 100644
--- a/Antlr4.StringTemplate/Compiler/TestNewStuff.cs
+++ b/Antlr4.StringTemplate/Compiler/TestNewStuff.cs
@@ -40,7 +40,7 @@ namespace Antlr4.StringTemplate.Compiler
{
public static void main(string[] args)
{
-            TemplateCompiler c = new TemplateCompiler();
+            TemplateCompiler c = new TemplateCompiler(new TemplateGroup());

string template = File.ReadAllText(args[0]);
List<FormalArgument> a = new List<FormalArgument>();
diff --git a/Antlr4.StringTemplate/Debug/DebugTemplate.cs b/Antlr4.StringTemplate/Debug/DebugTemplate.cs
index 17fa6b7..3b1b8d0 100644
--- a/Antlr4.StringTemplate/Debug/DebugTemplate.cs
+++ b/Antlr4.StringTemplate/Debug/DebugTemplate.cs
@@ -66,7 +66,7 @@ namespace Antlr4.StringTemplate.Debug

public override void Add(string name, object value)
{
-            if (TemplateGroup.debug)
+            if (groupThatCreatedThisInstance.Debug)
addAttrEvents.Add(name, new AddAttributeEvent(name, value));

base.Add(name, value);
diff --git a/Antlr4.StringTemplate/Interpreter.cs b/Antlr4.StringTemplate/Interpreter.cs
index a585bde..61d2d62 100644
--- a/Antlr4.StringTemplate/Interpreter.cs
+++ b/Antlr4.StringTemplate/Interpreter.cs
@@ -113,12 +113,12 @@ namespace Antlr4.StringTemplate
private IDictionary<Template, List<InterpEvent>> debugInfo;

public Interpreter(TemplateGroup group)
-            : this(group, CultureInfo.CurrentCulture, group.errMgr)
+            : this(group, CultureInfo.CurrentCulture, group.ErrorManager)
{
}

public Interpreter(TemplateGroup group, CultureInfo culture)
-            : this(group, culture, group.errMgr)
+            : this(group, culture, group.ErrorManager)
{
}

@@ -132,7 +132,7 @@ namespace Antlr4.StringTemplate
this.group = group;
this.culture = culture;
this.errMgr = errMgr;
-            if (TemplateGroup.debug)
+            if (group.Debug)
{
events = new List<InterpEvent>();
executeTrace = new List<string>();
@@ -170,7 +170,7 @@ namespace Antlr4.StringTemplate
int ip = 0;
while (ip < self.impl.codeSize)
{
-                if (trace || TemplateGroup.debug)
+                if (trace || group.Debug)
Trace(self, ip);

Bytecode opcode = (Bytecode)code[ip];
@@ -492,7 +492,7 @@ namespace Antlr4.StringTemplate
}
prevOpcode = opcode;
}
-            if (TemplateGroup.debug)
+            if (group.Debug)
{
EvalTemplateEvent e = new EvalTemplateEvent((DebugST)self, Interval.FromBounds(start, @out.Index));
//System.out.println("eval template "+self+": "+e);
@@ -629,7 +629,7 @@ namespace Antlr4.StringTemplate
{
int start = @out.Index; // track char we're about to Write
int n = WriteObject(@out, self, o, null);
-            if (TemplateGroup.debug)
+            if (group.Debug)
{
Interval templateLocation = self.impl.sourceMap[current_ip];
EvalExprEvent e = new EvalExprEvent((DebugST)self, Interval.FromBounds(start, @out.Index), templateLocation);
@@ -669,7 +669,7 @@ namespace Antlr4.StringTemplate
@out.PopAnchorPoint();
}

-            if (TemplateGroup.debug)
+            if (group.Debug)
{
Interval templateLocation = self.impl.sourceMap[current_ip];
EvalExprEvent e = new EvalExprEvent((DebugST)self, Interval.FromBounds(start, @out.Index), templateLocation);
@@ -1330,7 +1330,7 @@ namespace Antlr4.StringTemplate
tr.Append(", sp=" + sp + ", nw=" + nwline);
string s = tr.ToString();

-            if (TemplateGroup.debug)
+            if (group.Debug)
executeTrace.Add(s);

if (trace)
diff --git a/Antlr4.StringTemplate/Template.cs b/Antlr4.StringTemplate/Template.cs
index ae13b66..51621dc 100644
--- a/Antlr4.StringTemplate/Template.cs
+++ b/Antlr4.StringTemplate/Template.cs
@@ -411,14 +411,14 @@ namespace Antlr4.StringTemplate

public virtual int Write(ITemplateWriter @out)
{
-            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, impl.nativeGroup.errMgr);
+            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, impl.nativeGroup.ErrorManager);
interp.SetDefaultArguments(this);
return interp.Execute(@out, this);
}

public virtual int Write(ITemplateWriter @out, CultureInfo locale)
{
-            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, locale, impl.nativeGroup.errMgr);
+            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, locale, impl.nativeGroup.ErrorManager);
interp.SetDefaultArguments(this);
return interp.Execute(@out, this);
}
diff --git a/Antlr4.StringTemplate/TemplateGroup.cs b/Antlr4.StringTemplate/TemplateGroup.cs
index ffaddc1..97ba882 100644
--- a/Antlr4.StringTemplate/TemplateGroup.cs
+++ b/Antlr4.StringTemplate/TemplateGroup.cs
@@ -62,23 +62,23 @@ namespace Antlr4.StringTemplate
public static readonly string DefaultKey = "default";

/** Load files using what encoding? */
-        public Encoding encoding;
+        private Encoding _encoding;

/** Every group can import templates/dictionaries from other groups.
*  The list must be synchronized (see ImportTemplates).
*/
-        protected List<TemplateGroup> imports;
+        private readonly List<TemplateGroup> imports = new List<TemplateGroup>();

public readonly char delimiterStartChar = '<'; // Use <expr> by default
public readonly char delimiterStopChar = '>';

/** Maps template name to StringTemplate object. synchronized. */
-        protected readonly IDictionary<string, CompiledTemplate> templates = new Dictionary<string, CompiledTemplate>();
+        private readonly Dictionary<string, CompiledTemplate> templates = new Dictionary<string, CompiledTemplate>();

/** Maps dict names to HashMap objects.  This is the list of dictionaries
*  defined by the user like typeInitMap ::= ["int":"0"]
*/
-        protected readonly IDictionary<string, IDictionary<string, object>> dictionaries = new Dictionary<string, IDictionary<string, object>>();
+        private readonly Dictionary<string, IDictionary<string, object>> dictionaries = new Dictionary<string, IDictionary<string, object>>();

/** A dictionary that allows people to register a renderer for
*  a particular kind of object for any template evaluated relative to this
@@ -127,12 +127,12 @@ namespace Antlr4.StringTemplate

public static readonly ErrorManager DefaultErrorManager = new ErrorManager();

-        public static bool debug = false;
+        private bool _debug = false;

-        /** The errMgr for entire group; all compilations and executions.
+        /** The error manager for entire group; all compilations and executions.
*  This gets copied to parsers, walkers, and interpreters.
*/
-        public ErrorManager errMgr = TemplateGroup.DefaultErrorManager;
+        private ErrorManager _errorManager = TemplateGroup.DefaultErrorManager;

public TemplateGroup()
{
@@ -144,6 +144,53 @@ namespace Antlr4.StringTemplate
this.delimiterStopChar = delimiterStopChar;
}

+        public IEnumerable<CompiledTemplate> CompiledTemplates
+        {
+            get
+            {
+                return templates.Values;
+            }
+        }
+
+        public Encoding Encoding
+        {
+            get
+            {
+                return _encoding;
+            }
+
+            set
+            {
+                _encoding = value;
+            }
+        }
+
+        public ErrorManager ErrorManager
+        {
+            get
+            {
+                return _errorManager;
+            }
+
+            set
+            {
+                _errorManager = value;
+            }
+        }
+
+        public bool Debug
+        {
+            get
+            {
+                return _debug;
+            }
+
+            set
+            {
+                _debug = value;
+            }
+        }
+
/** The primary means of getting an instance of a template from this
*  group. Names must be absolute, fully-qualified names like a/b
*/
@@ -174,7 +221,7 @@ namespace Antlr4.StringTemplate
Template st = GetInstanceOf(name);
if (st == null)
{
-                errMgr.RuntimeError(enclosingInstance, ip, ErrorType.NO_SUCH_TEMPLATE, name);
+                ErrorManager.RuntimeError(enclosingInstance, ip, ErrorType.NO_SUCH_TEMPLATE, name);
st = CreateStringTemplate();
st.impl = new CompiledTemplate();
return st;
@@ -291,11 +338,11 @@ namespace Antlr4.StringTemplate
}

// for testing
-        public virtual CompiledTemplate DefineTemplate(string templateName, string template)
+        public virtual CompiledTemplate DefineTemplate(string name, string template)
{
try
{
-                CompiledTemplate impl = DefineTemplate(templateName, new CommonToken(GroupParser.ID, templateName), null, template, null);
+                CompiledTemplate impl = DefineTemplate(name, new CommonToken(GroupParser.ID, name), null, template, null);
return impl;
}
catch (TemplateException)
@@ -307,11 +354,10 @@ namespace Antlr4.StringTemplate
}

// for testing
-        public virtual CompiledTemplate DefineTemplate(string name, string argsS, string template)
+        public virtual CompiledTemplate DefineTemplate(string name, string template, string[] arguments)
{
-            string[] args = argsS.Split(',');
List<FormalArgument> a = new List<FormalArgument>();
-            foreach (string arg in args)
+            foreach (string arg in arguments)
a.Add(new FormalArgument(arg));

return DefineTemplate(name, new CommonToken(GroupParser.ID, name), a, template, null);
@@ -349,7 +395,7 @@ namespace Antlr4.StringTemplate
templates.TryGetValue(target, out targetCode);
if (targetCode == null)
{
-                errMgr.CompiletimeError(ErrorType.ALIAS_TARGET_UNDEFINED, null, aliasT, alias, target);
+                ErrorManager.CompiletimeError(ErrorType.ALIAS_TARGET_UNDEFINED, null, aliasT, alias, target);
return null;
}

@@ -357,9 +403,7 @@ namespace Antlr4.StringTemplate
return targetCode;
}

-        public virtual CompiledTemplate DefineRegion(string enclosingTemplateName,
-                                       IToken regionT,
-                                       string template)
+        public virtual CompiledTemplate DefineRegion(string enclosingTemplateName, IToken regionT, string template, IToken templateToken)
{
string name = regionT.Text;
template = Utility.TrimOneStartingNewline(template);
@@ -369,7 +413,7 @@ namespace Antlr4.StringTemplate

if (LookupTemplate(mangled) == null)
{
-                errMgr.CompiletimeError(ErrorType.NO_SUCH_REGION, null, regionT, enclosingTemplateName, name);
+                ErrorManager.CompiletimeError(ErrorType.NO_SUCH_REGION, null, regionT, enclosingTemplateName, name);
return new CompiledTemplate();
}

@@ -393,7 +437,7 @@ namespace Antlr4.StringTemplate
{
if (regionSurroundingTemplateName != null)
{
-                    DefineRegion(regionSurroundingTemplateName, nameToken, template);
+                    DefineRegion(regionSurroundingTemplateName, nameToken, template, templateToken);
}
else
{
@@ -415,17 +459,17 @@ namespace Antlr4.StringTemplate
{
if (!prev.isRegion)
{
-                    errMgr.CompiletimeError(ErrorType.TEMPLATE_REDEFINITION, null, defT);
+                    ErrorManager.CompiletimeError(ErrorType.TEMPLATE_REDEFINITION, null, defT);
return;
}
if (prev.isRegion && prev.regionDefType == Template.RegionType.Embedded)
{
-                    errMgr.CompiletimeError(ErrorType.EMBEDDED_REGION_REDEFINITION, null, defT, GetUnmangledTemplateName(name));
+                    ErrorManager.CompiletimeError(ErrorType.EMBEDDED_REGION_REDEFINITION, null, defT, GetUnmangledTemplateName(name));
return;
}
else if (prev.isRegion && prev.regionDefType == Template.RegionType.Explicit)
{
-                    errMgr.CompiletimeError(ErrorType.REGION_REDEFINITION, null, defT, GetUnmangledTemplateName(name));
+                    ErrorManager.CompiletimeError(ErrorType.REGION_REDEFINITION, null, defT, GetUnmangledTemplateName(name));
return;
}
}
@@ -446,7 +490,7 @@ namespace Antlr4.StringTemplate
IToken templateToken) // for error location
{
//System.out.println("TemplateGroup.Compile: "+enclosingTemplateName);
-            Compiler.TemplateCompiler c = new Compiler.TemplateCompiler(errMgr, delimiterStartChar, delimiterStopChar);
+            TemplateCompiler c = new TemplateCompiler(this);
CompiledTemplate code = c.Compile(srcName, name, args, template, templateToken);
code.nativeGroup = this;
code.template = template;
@@ -481,9 +525,6 @@ namespace Antlr4.StringTemplate
if (g == null)
return;

-            if (imports == null)
-                imports = new List<TemplateGroup>();
-
imports.Add(g);
}

@@ -525,7 +566,7 @@ namespace Antlr4.StringTemplate
try
{
Uri f = new Uri(fileName);
-                ANTLRReaderStream fs = new ANTLRReaderStream(new System.IO.StreamReader(f.LocalPath, encoding ?? Encoding.UTF8));
+                ANTLRReaderStream fs = new ANTLRReaderStream(new System.IO.StreamReader(f.LocalPath, Encoding ?? Encoding.UTF8));
GroupLexer lexer = new GroupLexer(fs);
fs.name = fileName;
CommonTokenStream tokens = new CommonTokenStream(lexer);
@@ -534,7 +575,7 @@ namespace Antlr4.StringTemplate
}
catch (Exception e)
{
-                errMgr.IOError(null, ErrorType.CANT_LOAD_GROUP_FILE, e, fileName);
+                ErrorManager.IOError(null, ErrorType.CANT_LOAD_GROUP_FILE, e, fileName);
}
}

@@ -600,7 +641,7 @@ namespace Antlr4.StringTemplate
public virtual Template CreateStringTemplate()
{
// TODO: try making a mem pool?
-            if (debug)
+            if (Debug)
return new DebugST();

return new Template();
@@ -608,7 +649,7 @@ namespace Antlr4.StringTemplate

public virtual Template CreateStringTemplate(Template proto)
{
-            if (debug)
+            if (Debug)
return new DebugST(proto);

return new Template(proto);
@@ -638,7 +679,7 @@ namespace Antlr4.StringTemplate
public virtual string Show()
{
StringBuilder buf = new StringBuilder();
-            if (imports != null)
+            if (imports != null && imports.Count > 0)
buf.Append(" : " + imports);

foreach (string n in templates.Keys)
@@ -668,12 +709,12 @@ namespace Antlr4.StringTemplate
{
get
{
-                return errMgr.Listener;
+                return ErrorManager.Listener;
}

set
{
-                errMgr = new ErrorManager(value);
+                ErrorManager = new ErrorManager(value);
}
}
}
diff --git a/Antlr4.StringTemplate/TemplateGroupDirectory.cs b/Antlr4.StringTemplate/TemplateGroupDirectory.cs
index 39e2b75..a6b4cf1 100644
--- a/Antlr4.StringTemplate/TemplateGroupDirectory.cs
+++ b/Antlr4.StringTemplate/TemplateGroupDirectory.cs
@@ -94,7 +94,7 @@ namespace Antlr4.StringTemplate
}
catch (Exception e)
{
-                errMgr.InternalError(null, "can't Load group dir " + dirName, e);
+                ErrorManager.InternalError(null, "can't Load group dir " + dirName, e);
}
}

@@ -106,14 +106,14 @@ namespace Antlr4.StringTemplate
public TemplateGroupDirectory(string dirName, Encoding encoding, char delimiterStartChar, char delimiterStopChar)
: this(dirName, delimiterStartChar, delimiterStopChar)
{
-            this.encoding = encoding;
+            this.Encoding = encoding;
}

public TemplateGroupDirectory(Uri root, Encoding encoding, char delimiterStartChar, char delimiterStopChar)
: base(delimiterStartChar, delimiterStopChar)
{
this.root = root;
-            this.encoding = encoding;
+            this.Encoding = encoding;
}

/** Load a template from dir or group file.  Group file is given
@@ -134,7 +134,7 @@ namespace Antlr4.StringTemplate
}
catch (UriFormatException e)
{
-                errMgr.InternalError(null, "bad URL: " + Path.Combine(root.LocalPath, parent) + ".stg", e);
+                ErrorManager.InternalError(null, "bad URL: " + Path.Combine(root.LocalPath, parent) + ".stg", e);
return null;
}

@@ -170,9 +170,7 @@ namespace Antlr4.StringTemplate

LoadGroupFile(parent, Path.Combine(root.LocalPath, parent) + ".stg");

-            CompiledTemplate template;
-            templates.TryGetValue(name, out template);
-            return template;
+            return RawGetTemplate(name);
}

/** Load full path name .st file relative to root by prefix */
@@ -190,14 +188,14 @@ namespace Antlr4.StringTemplate
}
catch (UriFormatException me)
{
-                errMgr.RuntimeError(null, 0, ErrorType.INVALID_TEMPLATE_NAME, me, Path.Combine(root.LocalPath, fileName));
+                ErrorManager.RuntimeError(null, 0, ErrorType.INVALID_TEMPLATE_NAME, me, Path.Combine(root.LocalPath, fileName));
return null;
}

ANTLRReaderStream fs = null;
try
{
-                fs = new ANTLRReaderStream(new StreamReader(f.LocalPath, encoding ?? Encoding.UTF8));
+                fs = new ANTLRReaderStream(new StreamReader(f.LocalPath, Encoding ?? Encoding.UTF8));
}
catch (IOException)
{
@@ -217,12 +215,10 @@ namespace Antlr4.StringTemplate
}
catch (RecognitionException re)
{
-                errMgr.GroupSyntaxError(ErrorType.SYNTAX_ERROR, Path.GetFileName(f.LocalPath), re, re.Message);
+                ErrorManager.GroupSyntaxError(ErrorType.SYNTAX_ERROR, Path.GetFileName(f.LocalPath), re, re.Message);
}

-            CompiledTemplate template;
-            templates.TryGetValue(templateName, out template);
-            return template;
+            return RawGetTemplate(templateName);
}

public override string Name
diff --git a/Antlr4.StringTemplate/TemplateGroupFile.cs b/Antlr4.StringTemplate/TemplateGroupFile.cs
index f0f1674..0b88d0b 100644
--- a/Antlr4.StringTemplate/TemplateGroupFile.cs
+++ b/Antlr4.StringTemplate/TemplateGroupFile.cs
@@ -94,7 +94,7 @@ namespace Antlr4.StringTemplate
}
catch (Exception e)
{
-                errMgr.InternalError(null, "can't Load group file " + fileName, e);
+                ErrorManager.InternalError(null, "can't Load group file " + fileName, e);
}

this.fileName = fileName;
@@ -108,14 +108,14 @@ namespace Antlr4.StringTemplate
public TemplateGroupFile(string fullyQualifiedFileName, Encoding encoding, char delimiterStartChar, char delimiterStopChar)
: this(fullyQualifiedFileName, delimiterStartChar, delimiterStopChar)
{
-            this.encoding = encoding;
+            this.Encoding = encoding;
}

public TemplateGroupFile(Uri url, Encoding encoding, char delimiterStartChar, char delimiterStopChar)
: base(delimiterStartChar, delimiterStopChar)
{
this.url = url;
-            this.encoding = encoding;
+            this.Encoding = encoding;
}

public override bool IsDefined(string name)
@@ -137,9 +137,7 @@ namespace Antlr4.StringTemplate
if (!alreadyLoaded)
Load();

-            CompiledTemplate template;
-            templates.TryGetValue(name, out template);
-            return template;
+            return RawGetTemplate(name);
}

public override void Load()
diff --git a/Antlr4.Test.StringTemplate/BaseTest.cs b/Antlr4.Test.StringTemplate/BaseTest.cs
index 71f1812..9ff9253 100644
--- a/Antlr4.Test.StringTemplate/BaseTest.cs
+++ b/Antlr4.Test.StringTemplate/BaseTest.cs
@@ -65,8 +65,8 @@ namespace Antlr4.Test.StringTemplate
protected virtual void setUpImpl()
{
TemplateGroup.defaultGroup = new TemplateGroup();
+            TemplateGroup.defaultGroup.Debug = false;
TemplateCompiler.subtemplateCount = 0;
-            TemplateGroup.debug = false;

// new output dir for each test
tmpdir = Path.GetFullPath(Path.Combine(Path.GetTempPath(), "st4-" + currentTimeMillis()));
diff --git a/Antlr4.Test.StringTemplate/Extensions/ListExtensions.cs b/Antlr4.Test.StringTemplate/Extensions/ListExtensions.cs
index 90324fd..9d83af9 100644
--- a/Antlr4.Test.StringTemplate/Extensions/ListExtensions.cs
+++ b/Antlr4.Test.StringTemplate/Extensions/ListExtensions.cs
@@ -32,20 +32,16 @@

namespace Antlr4.Test.StringTemplate.Extensions
{
-    using System;
-    using System.Collections.Generic;
-    using System.Linq;
-    using System.Text;
using Antlr4.StringTemplate;
-    using IList = System.Collections.IList;
using CultureInfo = System.Globalization.CultureInfo;
+    using IList = System.Collections.IList;

internal static class ListExtensions
{
public static string ToListString(this IList list)
{
-            TemplateGroup group = new TemplateGroup('$', '$');
-            group.DefineTemplate("listTemplate", "list", "[$list:{x|$x$}; separator=\", \"$]");
+            TemplateGroup group = new TemplateGroup();
+            group.DefineTemplate("listTemplate", "[<list:{x|<x>}; separator=\", \">]", new string[] { "list" });
group.RegisterRenderer(typeof(IList), new CollectionRenderer());
Template st = group.GetInstanceOf("listTemplate");
st.Add("list", list);
diff --git a/Antlr4.Test.StringTemplate/TestCompiler.cs b/Antlr4.Test.StringTemplate/TestCompiler.cs
index 4f6e9a8..0eddb95 100644
--- a/Antlr4.Test.StringTemplate/TestCompiler.cs
+++ b/Antlr4.Test.StringTemplate/TestCompiler.cs
@@ -51,7 +51,7 @@ namespace Antlr4.Test.StringTemplate
public void TestAttr()
{
string template = "hi <name>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, " +
"Write, " +
@@ -68,7 +68,7 @@ namespace Antlr4.Test.StringTemplate
public void TestInclude()
{
string template = "hi <foo()>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, Write, new 1 0, Write";
string asmResult = code.GetInstructions();
@@ -82,7 +82,7 @@ namespace Antlr4.Test.StringTemplate
public void TestSuperInclude()
{
string template = "<super.foo()>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"super_new 0 0, Write";
code.Dump();
@@ -97,7 +97,7 @@ namespace Antlr4.Test.StringTemplate
public void TestSuperIncludeWithArgs()
{
string template = "<super.foo(a,{b})>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_attr 0, new 1 0, super_new 2 2, Write";
string asmResult = code.GetInstructions();
@@ -111,7 +111,7 @@ namespace Antlr4.Test.StringTemplate
public void TestSuperIncludeWithNamedArgs()
{
string template = "<super.foo(x=a,y={b})>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"args, load_attr 0, store_arg 1, new 2 0, store_arg 3, super_new_box_args 4, Write";
string asmResult = code.GetInstructions();
@@ -125,7 +125,7 @@ namespace Antlr4.Test.StringTemplate
public void TestIncludeWithArgs()
{
string template = "hi <foo(a,b)>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, Write, load_attr 1, load_attr 2, new 3 2, Write";
string asmResult = code.GetInstructions();
@@ -139,7 +139,7 @@ namespace Antlr4.Test.StringTemplate
public void TestAnonIncludeArgs()
{
string template = "<({ a, b | <a><b>})>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"new 0 0, tostr, Write";
string asmResult = code.GetInstructions();
@@ -154,7 +154,10 @@ namespace Antlr4.Test.StringTemplate
{
ITemplateErrorListener errors = new ErrorBuffer();
string template = "<a:{foo}>";
-            CompiledTemplate code = new TemplateCompiler(new ErrorManager(errors)).Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()
+            {
+                ErrorManager = new ErrorManager(errors)
+            }).Compile(template);
string expected = "1:3: anonymous template has 0 arg(s) but mapped across 1 value(s)" + newline;
Assert.AreEqual(expected, errors.ToString());
}
@@ -164,7 +167,10 @@ namespace Antlr4.Test.StringTemplate
{
ITemplateErrorListener errors = new ErrorBuffer();
string template = "<a,b:{x|foo}>";
-            CompiledTemplate code = new TemplateCompiler(new ErrorManager(errors)).Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()
+            {
+                ErrorManager = new ErrorManager(errors)
+            }).Compile(template);
string expected = "1:5: anonymous template has 1 arg(s) but mapped across 2 value(s)" + newline;
Assert.AreEqual(expected, errors.ToString());
}
@@ -174,7 +180,10 @@ namespace Antlr4.Test.StringTemplate
{
ITemplateErrorListener errors = new ErrorBuffer();
string template = "<a:{x|foo},{bar}>";
-            CompiledTemplate code = new TemplateCompiler(new ErrorManager(errors)).Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()
+            {
+                ErrorManager = new ErrorManager(errors)
+            }).Compile(template);
string expected = "1:11: anonymous template has 0 arg(s) but mapped across 1 value(s)" + newline;
Assert.AreEqual(expected, errors.ToString());
}
@@ -183,7 +192,7 @@ namespace Antlr4.Test.StringTemplate
public void TestIndirectIncludeWitArgs()
{
string template = "hi <(foo)(a,b)>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, Write, load_attr 1, tostr, load_attr 2, load_attr 3, new_ind 2, Write";
string asmResult = code.GetInstructions();
@@ -197,7 +206,7 @@ namespace Antlr4.Test.StringTemplate
public void TestProp()
{
string template = "hi <a.b>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, Write, load_attr 1, load_prop 2, Write";
string asmResult = code.GetInstructions();
@@ -211,7 +220,7 @@ namespace Antlr4.Test.StringTemplate
public void TestProp2()
{
string template = "<u.id>: <u.name>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_attr 0, load_prop 1, Write, load_str 2, Write, " +
"load_attr 0, load_prop 3, Write";
@@ -226,7 +235,7 @@ namespace Antlr4.Test.StringTemplate
public void TestMap()
{
string template = "<name:bold()>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_attr 0, null, new 1 1, map, Write";
string asmResult = code.GetInstructions();
@@ -240,7 +249,7 @@ namespace Antlr4.Test.StringTemplate
public void TestMapAsOption()
{
string template = "<a; wrap=name:bold()>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_attr 0, options, load_attr 1, null, new 2 1, map, " +
"store_option 4, write_opt";
@@ -255,7 +264,7 @@ namespace Antlr4.Test.StringTemplate
public void TestMapArg()
{
string template = "<name:bold(x)>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_attr 0, null, load_attr 1, new 2 2, map, Write";
string asmResult = code.GetInstructions();
@@ -269,7 +278,7 @@ namespace Antlr4.Test.StringTemplate
public void TestIndirectMapArg()
{
string template = "<name:(t)(x)>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_attr 0, load_attr 1, tostr, null, load_attr 2, new_ind 2, map, Write";
string asmResult = code.GetInstructions();
@@ -283,7 +292,7 @@ namespace Antlr4.Test.StringTemplate
public void TestRepeatedMap()
{
string template = "<name:bold():italics()>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_attr 0, null, new 1 1, map, null, new 2 1, map, Write";
string asmResult = code.GetInstructions();
@@ -297,7 +306,7 @@ namespace Antlr4.Test.StringTemplate
public void TestRepeatedMapArg()
{
string template = "<name:bold(x):italics(x,y)>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_attr 0, null, load_attr 1, new 2 2, map, " +
"null, load_attr 1, load_attr 3, new 4 3, map, Write";
@@ -312,7 +321,7 @@ namespace Antlr4.Test.StringTemplate
public void TestRotMap()
{
string template = "<name:bold(),italics()>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_attr 0, null, new 1 1, null, new 2 1, rot_map 2, Write";
string asmResult = code.GetInstructions();
@@ -326,7 +335,7 @@ namespace Antlr4.Test.StringTemplate
public void TestRotMapArg()
{
string template = "<name:bold(x),italics()>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_attr 0, null, load_attr 1, new 2 2, null, new 3 1, rot_map 2, Write";
string asmResult = code.GetInstructions();
@@ -340,7 +349,7 @@ namespace Antlr4.Test.StringTemplate
public void TestZipMap()
{
string template = "<names,phones:bold()>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_attr 0, load_attr 1, null, null, new 2 2, zip_map 2, Write";
string asmResult = code.GetInstructions();
@@ -354,7 +363,7 @@ namespace Antlr4.Test.StringTemplate
public void TestZipMapArg()
{
string template = "<names,phones:bold(x)>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_attr 0, load_attr 1, null, null, load_attr 2, new 3 3, zip_map 2, Write";
string asmResult = code.GetInstructions();
@@ -368,7 +377,7 @@ namespace Antlr4.Test.StringTemplate
public void TestAnonMap()
{
string template = "<name:{n | <n>}>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_attr 0, null, new 1 1, map, Write";
string asmResult = code.GetInstructions();
@@ -382,7 +391,7 @@ namespace Antlr4.Test.StringTemplate
public void TestAnonZipMap()
{
string template = "<a,b:{x,y | <x><y>}>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_attr 0, load_attr 1, null, null, new 2 2, zip_map 2, Write";
string asmResult = code.GetInstructions();
@@ -396,7 +405,7 @@ namespace Antlr4.Test.StringTemplate
public void TestIf()
{
string template = "go: <if(name)>hi, foo<endif>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, Write, load_attr 1, brf 14, load_str 2, Write";
string asmResult = code.GetInstructions();
@@ -410,7 +419,7 @@ namespace Antlr4.Test.StringTemplate
public void TestIfElse()
{
string template = "go: <if(name)>hi, foo<else>bye<endif>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, " +
"Write, " +
@@ -432,7 +441,7 @@ namespace Antlr4.Test.StringTemplate
public void TestElseIf()
{
string template = "go: <if(name)>hi, foo<elseif(user)>a user<endif>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, " +
"Write, " +
@@ -456,7 +465,7 @@ namespace Antlr4.Test.StringTemplate
public void TestElseIfElse()
{
string template = "go: <if(name)>hi, foo<elseif(user)>a user<else>bye<endif>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, " +
"Write, " +
@@ -483,7 +492,7 @@ namespace Antlr4.Test.StringTemplate
public void TestOption()
{
string template = "hi <name; separator=\"x\">";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, Write, load_attr 1, options, load_str 2, store_option 3, write_opt";
string asmResult = code.GetInstructions();
@@ -497,7 +506,7 @@ namespace Antlr4.Test.StringTemplate
public void TestOptionAsTemplate()
{
string template = "hi <name; separator={, }>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, Write, load_attr 1, options, new 2 0, store_option 3, write_opt";
string asmResult = code.GetInstructions();
@@ -511,7 +520,7 @@ namespace Antlr4.Test.StringTemplate
public void TestOptions()
{
string template = "hi <name; anchor, wrap=foo(), separator=\", \">";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, " +
"Write, " +
@@ -536,7 +545,7 @@ namespace Antlr4.Test.StringTemplate
public void TestEmptyList()
{
string template = "<[]>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected = "list, Write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
@@ -549,7 +558,7 @@ namespace Antlr4.Test.StringTemplate
public void TestList()
{
string template = "<[a,b]>";
-            CompiledTemplate code = new TemplateCompiler().Compile(template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected = "list, load_attr 0, Add, load_attr 1, Add, Write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
@@ -563,7 +572,7 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<@r>foo<@end>";
// compile as if in root dir and in template 'a'
-            CompiledTemplate code = new TemplateCompiler('<', '>').Compile("a", template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup('<', '>')).Compile("a", template);
string asmExpected =
"new 0 0, Write";
string asmResult = code.GetInstructions();
@@ -578,7 +587,7 @@ namespace Antlr4.Test.StringTemplate
{
string template = "x:<@r()>";
// compile as if in root dir and in template 'a'
-            CompiledTemplate code = new TemplateCompiler('<', '>').Compile("a", template);
+            CompiledTemplate code = new TemplateCompiler(new TemplateGroup('<', '>')).Compile("a", template);
string asmExpected =
"load_str 0, Write, new 1 0, Write";
string asmResult = code.GetInstructions();
diff --git a/Antlr4.Test.StringTemplate/TestCoreBasics.cs b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
index 8f56b83..edf69a2 100644
--- a/Antlr4.Test.StringTemplate/TestCoreBasics.cs
+++ b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
@@ -44,6 +44,24 @@ namespace Antlr4.Test.StringTemplate
public class TestCoreBasics : BaseTest
{
[TestMethod]
+        public void TestLargeFile()
+        {
+            for (int i = 0; i < 100; i++)
+            {
+                TemplateGroupFile group = new TemplateGroupFile(@"C:\dev\stringtemplate_main\antlrcs\main\ST4LargeTest.stg");
+                group.Load();
+            }
+
+            System.Diagnostics.Stopwatch timer = System.Diagnostics.Stopwatch.StartNew();
+            for (int i = 0; i < 100; i++)
+            {
+                TemplateGroupFile group = new TemplateGroupFile(@"C:\dev\stringtemplate_main\antlrcs\main\ST4LargeTest.stg");
+                group.Load();
+            }
+            System.Console.WriteLine(timer.ElapsedMilliseconds);
+        }
+
+        [TestMethod]
public void TestNullAttr()
{
string template = "hi <name>!";
@@ -269,7 +287,7 @@ namespace Antlr4.Test.StringTemplate
{
string template = "Load <box(\"arg\")>;";
Template st = new Template(template);
-            st.impl.nativeGroup.DefineTemplate("box", "x", "kewl <x> daddy");
+            st.impl.nativeGroup.DefineTemplate("box", "kewl <x> daddy", new string[] { "x" });
st.impl.Dump();
st.Add("name", "Ter");
string expected = "Load kewl arg daddy;";
@@ -282,7 +300,7 @@ namespace Antlr4.Test.StringTemplate
{
string template = "Load <box(\"arg\", foo())>;";
Template st = new Template(template);
-            st.impl.nativeGroup.DefineTemplate("box", "x,y", "kewl <x> <y> daddy");
+            st.impl.nativeGroup.DefineTemplate("box", "kewl <x> <y> daddy", new string[] { "x", "y" });
st.impl.nativeGroup.DefineTemplate("foo", "blech");
st.Add("name", "Ter");
string expected = "Load kewl arg blech daddy;";
@@ -295,8 +313,8 @@ namespace Antlr4.Test.StringTemplate
{
string template = "Load <box(foo(\"arg\"))>;";
Template st = new Template(template);
-            st.impl.nativeGroup.DefineTemplate("box", "y", "kewl <y> daddy");
-            st.impl.nativeGroup.DefineTemplate("foo", "x", "blech <x>");
+            st.impl.nativeGroup.DefineTemplate("box", "kewl <y> daddy", new string[] { "y" });
+            st.impl.nativeGroup.DefineTemplate("foo", "blech <x>", new string[] { "x" });
st.Add("name", "Ter");
string expected = "Load kewl blech arg daddy;";
string result = st.Render();
@@ -307,8 +325,8 @@ namespace Antlr4.Test.StringTemplate
public void TestDefineTemplate()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("inc", "x", "<x>+1");
-            group.DefineTemplate("test", "name", "hi <name>!");
+            group.DefineTemplate("inc", "<x>+1", new string[] { "x" });
+            group.DefineTemplate("test", "hi <name>!", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -323,8 +341,8 @@ namespace Antlr4.Test.StringTemplate
public void TestMap()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("inc", "x", "[<x>]");
-            group.DefineTemplate("test", "name", "hi <name:inc()>!");
+            group.DefineTemplate("inc", "[<x>]", new string[] { "x" });
+            group.DefineTemplate("test", "hi <name:inc()>!", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -339,8 +357,8 @@ namespace Antlr4.Test.StringTemplate
public void TestIndirectMap()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("inc", "x", "[<x>]");
-            group.DefineTemplate("test", "t,name", "<name:(t)()>!");
+            group.DefineTemplate("inc", "[<x>]", new string[] { "x" });
+            group.DefineTemplate("test", "<name:(t)()>!", new string[] { "t", "name" });
Template st = group.GetInstanceOf("test");
st.Add("t", "inc");
st.Add("name", "Ter");
@@ -374,7 +392,7 @@ namespace Antlr4.Test.StringTemplate
public void TestParallelMap()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "names,phones", "hi <names,phones:{n,p | <n>:<p>;}>");
+            group.DefineTemplate("test", "hi <names,phones:{n,p | <n>:<p>;}>", new string[] { "names", "phones" });
Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
@@ -392,7 +410,7 @@ namespace Antlr4.Test.StringTemplate
public void TestParallelMapWith3Versus2Elements()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "names,phones", "hi <names,phones:{n,p | <n>:<p>;}>");
+            group.DefineTemplate("test", "hi <names,phones:{n,p | <n>:<p>;}>", new string[] { "names", "phones" });
Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
@@ -409,9 +427,8 @@ namespace Antlr4.Test.StringTemplate
public void TestParallelMapThenMap()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("bold", "x", "[<x>]");
-            group.DefineTemplate("test", "names,phones",
-                                 "hi <names,phones:{n,p | <n>:<p>;}:bold()>");
+            group.DefineTemplate("bold", "[<x>]", new string[] { "x" });
+            group.DefineTemplate("test", "hi <names,phones:{n,p | <n>:<p>;}:bold()>", new string[] { "names", "phones" });
Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
@@ -428,9 +445,8 @@ namespace Antlr4.Test.StringTemplate
public void TestMapThenParallelMap()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("bold", "x", "[<x>]");
-            group.DefineTemplate("test", "names,phones",
-                                 "hi <[names:bold()],phones:{n,p | <n>:<p>;}>");
+            group.DefineTemplate("bold", "[<x>]", new string[] { "x" });
+            group.DefineTemplate("test", "hi <[names:bold()],phones:{n,p | <n>:<p>;}>", new string[] { "names", "phones" });
Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
@@ -447,8 +463,8 @@ namespace Antlr4.Test.StringTemplate
public void TestMapIndexes()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("inc", "x,i", "<i>:<x>");
-            group.DefineTemplate("test", "name", "<name:{n|<inc(n,i)>}; separator=\", \">");
+            group.DefineTemplate("inc", "<i>:<x>", new string[] { "x", "i" });
+            group.DefineTemplate("test", "<name:{n|<inc(n,i)>}; separator=\", \">", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -464,7 +480,7 @@ namespace Antlr4.Test.StringTemplate
public void TestMapIndexes2()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "<name:{n | <i>:<n>}; separator=\", \">");
+            group.DefineTemplate("test", "<name:{n | <i>:<n>}; separator=\", \">", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -480,8 +496,8 @@ namespace Antlr4.Test.StringTemplate
public void TestMapSingleValue()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("a", "x", "[<x>]");
-            group.DefineTemplate("test", "name", "hi <name:a()>!");
+            group.DefineTemplate("a", "[<x>]", new string[] { "x" });
+            group.DefineTemplate("test", "hi <name:a()>!", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
string expected = "hi [Ter]!";
@@ -493,8 +509,8 @@ namespace Antlr4.Test.StringTemplate
public void TestMapNullValue()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("a", "x", "[<x>]");
-            group.DefineTemplate("test", "name", "hi <name:a()>!");
+            group.DefineTemplate("a", "[<x>]", new string[] { "x" });
+            group.DefineTemplate("test", "hi <name:a()>!", new string[] { "name" });
Template st = group.GetInstanceOf("test");
string expected = "hi !";
string result = st.Render();
@@ -505,7 +521,7 @@ namespace Antlr4.Test.StringTemplate
public void TestMapNullValueInList()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "<name; separator=\", \">");
+            group.DefineTemplate("test", "<name; separator=\", \">", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -521,9 +537,9 @@ namespace Antlr4.Test.StringTemplate
public void TestRepeatedMap()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("a", "x", "[<x>]");
-            group.DefineTemplate("b", "x", "(<x>)");
-            group.DefineTemplate("test", "name", "hi <name:a():b()>!");
+            group.DefineTemplate("a", "[<x>]", new string[] { "x" });
+            group.DefineTemplate("b", "(<x>)", new string[] { "x" });
+            group.DefineTemplate("test", "hi <name:a():b()>!", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -538,9 +554,9 @@ namespace Antlr4.Test.StringTemplate
public void TestRoundRobinMap()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("a", "x", "[<x>]");
-            group.DefineTemplate("b", "x", "(<x>)");
-            group.DefineTemplate("test", "name", "hi <name:a(),b()>!");
+            group.DefineTemplate("a", "[<x>]", new string[] { "x" });
+            group.DefineTemplate("b", "(<x>)", new string[] { "x" });
+            group.DefineTemplate("test", "hi <name:a(),b()>!", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -835,7 +851,7 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparator()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "names", "<names:{n | case <n>}; separator=\", \">");
+            group.DefineTemplate("test", "<names:{n | case <n>}; separator=\", \">", new string[] { "names" });
Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
@@ -849,7 +865,7 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparatorInList()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "names", "<names:{n | case <n>}; separator=\", \">");
+            group.DefineTemplate("test", "<names:{n | case <n>}; separator=\", \">", new string[] { "names" });
Template st = group.GetInstanceOf("test");
st.Add("names", new List<string>() { "Ter", "Tom" });
string expected =
diff --git a/Antlr4.Test.StringTemplate/TestDebugEvents.cs b/Antlr4.Test.StringTemplate/TestDebugEvents.cs
index 21a2b2a..057b8cb 100644
--- a/Antlr4.Test.StringTemplate/TestDebugEvents.cs
+++ b/Antlr4.Test.StringTemplate/TestDebugEvents.cs
@@ -51,7 +51,7 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            TemplateGroup.debug = true;
+            group.Debug = true;
DebugST st = (DebugST)group.GetInstanceOf("t");
List<InterpEvent> events = st.GetEvents();
string expected =
@@ -69,7 +69,7 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            TemplateGroup.debug = true;
+            group.Debug = true;
DebugST st = (DebugST)group.GetInstanceOf("t");
List<InterpEvent> events = st.GetEvents();
string expected =
@@ -89,7 +89,7 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            TemplateGroup.debug = true;
+            group.Debug = true;
DebugST st = (DebugST)group.GetInstanceOf("t");
List<InterpEvent> events = st.GetEvents();
string expected =
diff --git a/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs b/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
index d677a61..fb460eb 100644
--- a/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
+++ b/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
@@ -53,7 +53,7 @@ namespace Antlr4.Test.StringTemplate
public void TestParallelMap()
{
TemplateGroup group = new TemplateGroup('$', '$');
-            group.DefineTemplate("test", "names,phones", "hi $names,phones:{n,p | $n$:$p$;}$");
+            group.DefineTemplate("test", "hi $names,phones:{n,p | $n$:$p$;}$", new string[] { "names", "phones" });
Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
diff --git a/Antlr4.Test.StringTemplate/TestIndirectionAndEarlyEval.cs b/Antlr4.Test.StringTemplate/TestIndirectionAndEarlyEval.cs
index e641da1..f887a1c 100644
--- a/Antlr4.Test.StringTemplate/TestIndirectionAndEarlyEval.cs
+++ b/Antlr4.Test.StringTemplate/TestIndirectionAndEarlyEval.cs
@@ -56,7 +56,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.DefineTemplate("foo", "bar");
string template = "<(name)()>";
-            group.DefineTemplate("test", "name", template);
+            group.DefineTemplate("test", template, new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "foo");
string expected = "bar";
@@ -68,9 +68,9 @@ namespace Antlr4.Test.StringTemplate
public void TestIndirectTemplateIncludeWithArgs()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("foo", "x,y", "<x><y>");
+            group.DefineTemplate("foo", "<x><y>", new string[] { "x", "y" });
string template = "<(name)({1},{2})>";
-            group.DefineTemplate("test", "name", template);
+            group.DefineTemplate("test", template, new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "foo");
string expected = "12";
@@ -85,7 +85,7 @@ namespace Antlr4.Test.StringTemplate
group.DefineTemplate("foo", "bar");
group.DefineTemplate("tname", "foo");
string template = "<(tname())()>";
-            group.DefineTemplate("test", "name", template);
+            group.DefineTemplate("test", template, new string[] { "name" });
Template st = group.GetInstanceOf("test");
string expected = "bar";
string result = st.Render();
@@ -108,8 +108,8 @@ namespace Antlr4.Test.StringTemplate
public void TestIndirectMap()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("a", "x", "[<x>]");
-            group.DefineTemplate("test", "names,templateName", "hi <names:(templateName)()>!");
+            group.DefineTemplate("a", "[<x>]", new string[] { "x" });
+            group.DefineTemplate("test", "hi <names:(templateName)()>!", new string[] { "names", "templateName" });
Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
diff --git a/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs b/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
index aab84d2..55d5e03 100644
--- a/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
+++ b/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
@@ -214,7 +214,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
group.Listener = errors;
-            TemplateGroup.debug = true;
+            group.Debug = true;
Template st = group.GetInstanceOf("t");
st.Render();
string expected = "context [t u] 1:1 attribute x isn't defined" + newline;
diff --git a/Antlr4.Test.StringTemplate/TestNullAndEmptyValues.cs b/Antlr4.Test.StringTemplate/TestNullAndEmptyValues.cs
index fb3c645..6935cbb 100644
--- a/Antlr4.Test.StringTemplate/TestNullAndEmptyValues.cs
+++ b/Antlr4.Test.StringTemplate/TestNullAndEmptyValues.cs
@@ -43,7 +43,7 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparatorWithNullFirstValue()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "hi <name; separator=\", \">!");
+            group.DefineTemplate("test", "hi <name; separator=\", \">!", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", null); // null is added to list, but ignored in iteration
st.Add("name", "Tom");
@@ -57,8 +57,8 @@ namespace Antlr4.Test.StringTemplate
public void TestTemplateAppliedToNullIsEmpty()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "<name:t()>");
-            group.DefineTemplate("t", "x", "<x>");
+            group.DefineTemplate("test", "<name:t()>", new string[] { "name" });
+            group.DefineTemplate("t", "<x>", new string[] { "x" });
Template st = group.GetInstanceOf("test");
st.Add("name", null); // null is added to list, but ignored in iteration
string expected = "";
@@ -70,8 +70,8 @@ namespace Antlr4.Test.StringTemplate
public void TestTemplateAppliedToMissingValueIsEmpty()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "<name:t()>");
-            group.DefineTemplate("t", "x", "<x>");
+            group.DefineTemplate("test", "<name:t()>", new string[] { "name" });
+            group.DefineTemplate("t", "<x>", new string[] { "x" });
Template st = group.GetInstanceOf("test");
string expected = "";
string result = st.Render();
@@ -82,7 +82,7 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparatorWithNull2ndValue()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "hi <name; separator=\", \">!");
+            group.DefineTemplate("test", "hi <name; separator=\", \">!", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", null);
@@ -96,7 +96,7 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparatorWithNullLastValue()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "hi <name; separator=\", \">!");
+            group.DefineTemplate("test", "hi <name; separator=\", \">!", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -110,7 +110,7 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparatorWithTwoNullValuesInRow()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "hi <name; separator=\", \">!");
+            group.DefineTemplate("test", "hi <name; separator=\", \">!", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -126,7 +126,7 @@ namespace Antlr4.Test.StringTemplate
public void TestTwoNullValues()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "hi <name; null=\"x\">!");
+            group.DefineTemplate("test", "hi <name; null=\"x\">!", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", null);
st.Add("name", null);
@@ -139,7 +139,7 @@ namespace Antlr4.Test.StringTemplate
public void TestNullListItemNotCountedForIteratorIndex()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "<name:{n | <i>:<n>}>");
+            group.DefineTemplate("test", "<name:{n | <i>:<n>}>", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", null);
@@ -154,10 +154,10 @@ namespace Antlr4.Test.StringTemplate
public void TestSizeZeroButNonNullListGetsNoOutput()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "users",
+            group.DefineTemplate("test",
"begin\n" +
"<users>\n" +
-                "end\n");
+                "end\n", new string[] { "users" });
Template t = group.GetInstanceOf("test");
t.Add("users", null);
string expecting = "begin" + newline + "end";
@@ -169,10 +169,10 @@ namespace Antlr4.Test.StringTemplate
public void TestNullListGetsNoOutput()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "users",
+            group.DefineTemplate("test",
"begin\n" +
"<users:{u | name: <u>}; separator=\", \">\n" +
-                "end\n");
+                "end\n", new string[] { "users" });
Template t = group.GetInstanceOf("test");
string expecting = "begin" + newline + "end";
string result = t.Render();
@@ -183,10 +183,10 @@ namespace Antlr4.Test.StringTemplate
public void TestEmptyListGetsNoOutput()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "users",
+            group.DefineTemplate("test",
"begin\n" +
"<users:{u | name: <u>}; separator=\", \">\n" +
-                "end\n");
+                "end\n", new string[] { "users" });
Template t = group.GetInstanceOf("test");
t.Add("users", new List<string>());
string expecting = "begin" + newline + "end";
@@ -198,7 +198,7 @@ namespace Antlr4.Test.StringTemplate
public void TestMissingDictionaryValue()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "m", "<m.foo>");
+            group.DefineTemplate("test", "<m.foo>", new string[] { "m" });
Template t = group.GetInstanceOf("test");
t.Add("m", new Dictionary<string, string>());
string expecting = "";
@@ -210,7 +210,7 @@ namespace Antlr4.Test.StringTemplate
public void TestMissingDictionaryValue2()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "m", "<if(m.foo)>[<m.foo>]<endif>");
+            group.DefineTemplate("test", "<if(m.foo)>[<m.foo>]<endif>", new string[] { "m" });
Template t = group.GetInstanceOf("test");
t.Add("m", new Dictionary<string, string>());
string expecting = "";
@@ -222,7 +222,7 @@ namespace Antlr4.Test.StringTemplate
public void TestMissingDictionaryValue3()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "m", "<if(m.foo)>[<m.foo>]<endif>");
+            group.DefineTemplate("test", "<if(m.foo)>[<m.foo>]<endif>", new string[] { "m" });
Template t = group.GetInstanceOf("test");
t.Add("m", new Dictionary<string, string>() { { "foo", null } });
string expecting = "";
diff --git a/Antlr4.Test.StringTemplate/TestOptions.cs b/Antlr4.Test.StringTemplate/TestOptions.cs
index 76ba51b..9f7c58a 100644
--- a/Antlr4.Test.StringTemplate/TestOptions.cs
+++ b/Antlr4.Test.StringTemplate/TestOptions.cs
@@ -45,7 +45,7 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparator()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "hi <name; separator=\", \">!");
+            group.DefineTemplate("test", "hi <name; separator=\", \">!", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -59,8 +59,8 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparatorWithSpaces()
{
TemplateGroup group = new TemplateGroup();
-            TemplateGroup.debug = true;
-            group.DefineTemplate("test", "name", "hi <name; separator= \", \">!");
+            group.Debug = true;
+            group.DefineTemplate("test", "hi <name; separator= \", \">!", new string[] { "name" });
Template st = group.GetInstanceOf("test");
Console.WriteLine(st.impl.ast.ToStringTree());
st.Add("name", "Ter");
@@ -75,7 +75,7 @@ namespace Antlr4.Test.StringTemplate
public void TestAttrSeparator()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name,sep", "hi <name; separator=sep>!");
+            group.DefineTemplate("test", "hi <name; separator=sep>!", new string[] { "name", "sep" });
Template st = group.GetInstanceOf("test");
st.Add("sep", ", ");
st.Add("name", "Ter");
@@ -91,7 +91,7 @@ namespace Antlr4.Test.StringTemplate
{
TemplateGroup group = new TemplateGroup();
group.DefineTemplate("foo", "|");
-            group.DefineTemplate("test", "name,sep", "hi <name; separator=foo()>!");
+            group.DefineTemplate("test", "hi <name; separator=foo()>!", new string[] { "name", "sep" });
Template st = group.GetInstanceOf("test");
st.Add("sep", ", ");
st.Add("name", "Ter");
@@ -106,7 +106,7 @@ namespace Antlr4.Test.StringTemplate
public void TestSubtemplateSeparator()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name,sep", "hi <name; separator={<sep> _}>!");
+            group.DefineTemplate("test", "hi <name; separator={<sep> _}>!", new string[] { "name", "sep" });
Template st = group.GetInstanceOf("test");
st.Add("sep", ",");
st.Add("name", "Ter");
@@ -121,7 +121,7 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparatorWithNullFirstValueAndNullOption()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "hi <name; null=\"n/a\", separator=\", \">!");
+            group.DefineTemplate("test", "hi <name; null=\"n/a\", separator=\", \">!", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", null);
st.Add("name", "Tom");
@@ -135,7 +135,7 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparatorWithNull2ndValueAndNullOption()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "hi <name; null=\"n/a\", separator=\", \">!");
+            group.DefineTemplate("test", "hi <name; null=\"n/a\", separator=\", \">!", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.impl.Dump();
st.Add("name", "Ter");
@@ -150,7 +150,7 @@ namespace Antlr4.Test.StringTemplate
public void TestNullValueAndNullOption()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "<name; null=\"n/a\">");
+            group.DefineTemplate("test", "<name; null=\"n/a\">", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", null);
string expected = "n/a";
@@ -162,7 +162,7 @@ namespace Antlr4.Test.StringTemplate
public void TestListApplyWithNullValueAndNullOption()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "<name:{n | <n>}; null=\"n/a\">");
+            group.DefineTemplate("test", "<name:{n | <n>}; null=\"n/a\">", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", null);
@@ -179,7 +179,7 @@ namespace Antlr4.Test.StringTemplate
// the value.  This verifies that null not blank comes out of first apply
// since we don't get [null].
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "<name:{n | <n>}:{n | [<n>]}; null=\"n/a\">");
+            group.DefineTemplate("test", "<name:{n | <n>}:{n | [<n>]}; null=\"n/a\">", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", null);
@@ -193,7 +193,7 @@ namespace Antlr4.Test.StringTemplate
public void TestMissingValueAndNullOption()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "name", "<name; null=\"n/a\">");
+            group.DefineTemplate("test", "<name; null=\"n/a\">", new string[] { "name" });
Template st = group.GetInstanceOf("test");
string expected = "n/a";
string result = st.Render();
@@ -205,7 +205,7 @@ namespace Antlr4.Test.StringTemplate
{
TemplateGroup group = new TemplateGroup();
group.DefineTemplate("foo", "<zippo>");
-            group.DefineTemplate("test", "zippo", "<foo(); null=\"n/a\">");
+            group.DefineTemplate("test", "<foo(); null=\"n/a\">", new string[] { "zippo" });
Template st = group.GetInstanceOf("test");
st.Add("zippo", null);
string expected = "";
@@ -219,7 +219,7 @@ namespace Antlr4.Test.StringTemplate
ErrorBuffer errors = new ErrorBuffer();
TemplateGroup group = new TemplateGroup();
group.Listener = errors;
-            group.DefineTemplate("test", "name", "<name; bad=\"ugly\">");
+            group.DefineTemplate("test", "<name; bad=\"ugly\">", new string[] { "name" });
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
string expected = "Ter";
diff --git a/Antlr4.Test.StringTemplate/TestSubtemplates.cs b/Antlr4.Test.StringTemplate/TestSubtemplates.cs
index 79ee7a4..fc2b15b 100644
--- a/Antlr4.Test.StringTemplate/TestSubtemplates.cs
+++ b/Antlr4.Test.StringTemplate/TestSubtemplates.cs
@@ -44,7 +44,7 @@ namespace Antlr4.Test.StringTemplate
public void TestSimpleIteration()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "names", "<names:{n|<n>}>!");
+            group.DefineTemplate("test", "<names:{n|<n>}>!", new string[] { "names" });
Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
@@ -58,7 +58,7 @@ namespace Antlr4.Test.StringTemplate
public void TestMapIterationIsByKeys()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "emails", "<emails:{n|<n>}>!");
+            group.DefineTemplate("test", "<emails:{n|<n>}>!", new string[] { "emails" });
Template st = group.GetInstanceOf("test");
IDictionary<string, string> emails = new Dictionary<string, string>();
emails["parrt"] = "Ter";
@@ -74,7 +74,7 @@ namespace Antlr4.Test.StringTemplate
public void TestSimpleIterationWithArg()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "names", "<names:{n | <n>}>!");
+            group.DefineTemplate("test", "<names:{n | <n>}>!", new string[] { "names" });
Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
@@ -88,7 +88,7 @@ namespace Antlr4.Test.StringTemplate
public void TestNestedIterationWithArg()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "users", "<users:{u | <u.id:{id | <id>=}><u.name>}>!");
+            group.DefineTemplate("test", "<users:{u | <u.id:{id | <id>=}><u.name>}>!", new string[] { "users" });
Template st = group.GetInstanceOf("test");
st.Add("users", new TestCoreBasics.User(1, "parrt"));
st.Add("users", new TestCoreBasics.User(2, "tombu"));
@@ -207,13 +207,13 @@ namespace Antlr4.Test.StringTemplate
ErrorBuffer errors = new ErrorBuffer();
TemplateGroup innerGroup = new TemplateGroup();
innerGroup.Listener = errors;
-            innerGroup.DefineTemplate("test", "m", "<m:samegroup()>");
-            innerGroup.DefineTemplate("samegroup", "x", "hi ");
+            innerGroup.DefineTemplate("test", "<m:samegroup()>", new string[] { "m" });
+            innerGroup.DefineTemplate("samegroup", "hi ", new string[] { "x" });
Template st = innerGroup.GetInstanceOf("test");
st.Add("m", new int[] { 1, 2, 3 });

TemplateGroup outerGroup = new TemplateGroup();
-            outerGroup.DefineTemplate("errorMessage", "x", "<x>");
+            outerGroup.DefineTemplate("errorMessage", "<x>", new string[] { "x" });
Template outerST = outerGroup.GetInstanceOf("errorMessage");
outerST.Add("x", st);

@@ -231,13 +231,13 @@ namespace Antlr4.Test.StringTemplate
ErrorBuffer errors = new ErrorBuffer();
TemplateGroup innerGroup = new TemplateGroup();
innerGroup.Listener = errors;
-            innerGroup.DefineTemplate("test", "m", "<m:samegroup()>");
-            innerGroup.DefineTemplate("samegroup", "x", "hi ");
+            innerGroup.DefineTemplate("test", "<m:samegroup()>", new string[] { "m" });
+            innerGroup.DefineTemplate("samegroup", "hi ", new string[] { "x" });
Template st = innerGroup.GetInstanceOf("test");
st.Add("m", 10);

TemplateGroup outerGroup = new TemplateGroup();
-            outerGroup.DefineTemplate("errorMessage", "x", "<x>");
+            outerGroup.DefineTemplate("errorMessage", "<x>", new string[] { "x" });
Template outerST = outerGroup.GetInstanceOf("errorMessage");
outerST.Add("x", st);

@@ -260,7 +260,7 @@ namespace Antlr4.Test.StringTemplate

TemplateGroup outerGroup = new TemplateGroup();
outerGroup.Listener = errors;
-            outerGroup.DefineTemplate("errorMessage", "x", "<x>");
+            outerGroup.DefineTemplate("errorMessage", "<x>", new string[] { "x" });
outerGroup.DefineTemplate("bob", "outer"); // should not be visible to test() in innerGroup
Template outerST = outerGroup.GetInstanceOf("errorMessage");
outerST.Add("x", st);
diff --git a/Antlr4.Test.StringTemplate/TestVisualizer.cs b/Antlr4.Test.StringTemplate/TestVisualizer.cs
index 37a6d78..23a6bc4 100644
--- a/Antlr4.Test.StringTemplate/TestVisualizer.cs
+++ b/Antlr4.Test.StringTemplate/TestVisualizer.cs
@@ -61,7 +61,7 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            TemplateGroup.debug = true;
+            group.Debug = true;
DebugST st = (DebugST)group.GetInstanceOf("method");
st.impl.Dump();
st.Add("type", "float");
@@ -93,7 +93,7 @@ namespace Antlr4.Test.StringTemplate

private void Inspect(DebugST template, CultureInfo culture)
{
-            Inspect(template, template.impl.nativeGroup.errMgr, culture, AutoIndentWriter.NoWrap);
+            Inspect(template, template.impl.nativeGroup.ErrorManager, culture, AutoIndentWriter.NoWrap);
}

private void Inspect(DebugST template, ErrorManager errorManager, CultureInfo culture, int lineWidth)
diff --git a/Antlr4.Test.StringTemplate/TestWhitespace.cs b/Antlr4.Test.StringTemplate/TestWhitespace.cs
index 06e77de..61362fe 100644
--- a/Antlr4.Test.StringTemplate/TestWhitespace.cs
+++ b/Antlr4.Test.StringTemplate/TestWhitespace.cs
@@ -44,7 +44,7 @@ namespace Antlr4.Test.StringTemplate
public void TestTrimmedSubtemplates()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "names", "<names:{n | <n>}>!");
+            group.DefineTemplate("test", "<names:{n | <n>}>!", new string[] { "names" });
Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
@@ -59,7 +59,7 @@ namespace Antlr4.Test.StringTemplate
{
TemplateGroup group = new TemplateGroup();
group.DefineTemplate("test", "[<foo({ foo })>]");
-            group.DefineTemplate("foo", "x", "<x>");
+            group.DefineTemplate("foo", "<x>", new string[] { "x" });
Template st = group.GetInstanceOf("test");
string expected = "[ foo ]";
string result = st.Render();
@@ -70,7 +70,7 @@ namespace Antlr4.Test.StringTemplate
public void TestTrimmedSubtemplatesArgs()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "names", "<names:{x|  foo }>");
+            group.DefineTemplate("test", "<names:{x|  foo }>", new string[] { "names" });
Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
@@ -84,7 +84,7 @@ namespace Antlr4.Test.StringTemplate
public void TestTrimJustOneWSInSubtemplates()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "names", "<names:{n |  <n> }>!");
+            group.DefineTemplate("test", "<names:{n |  <n> }>!", new string[] { "names" });
Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
@@ -98,8 +98,8 @@ namespace Antlr4.Test.StringTemplate
public void TestTrimNewlineInSubtemplates()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "names", "<names:{n |\n" +
-                                         "<n>}>!");
+            group.DefineTemplate("test", "<names:{n |\n" +
+                                         "<n>}>!", new string[] { "names" });
Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
@@ -113,9 +113,9 @@ namespace Antlr4.Test.StringTemplate
public void TestLeaveNewlineOnEndInSubtemplates()
{
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "names", "<names:{n |\n" +
+            group.DefineTemplate("test", "<names:{n |\n" +
"<n>\n" +
-                                         "}>!");
+                                         "}>!", new string[] { "names" });
Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
@@ -130,9 +130,9 @@ namespace Antlr4.Test.StringTemplate
{
// fails since it counts indent from outer too
TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("test", "names", "  <names:{n |\n" +
+            group.DefineTemplate("test", "  <names:{n |\n" +
"    <n>\n" +
-                                         "  }>!");
+                                         "  }>!", new string[] { "names" });
Template st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");

