commit 3f9307f7cc7588c0b91ecd8a9ae4f2e8dd7a716a
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Mar 23 15:23:37 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Mar 23 15:23:37 2009 -0800

C# Port:
* .NET naming of several constants

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 5968]

diff --git a/Antlr3.StringTemplate/Language/Action.g3 b/Antlr3.StringTemplate/Language/Action.g3
index caa040b..cba93fd 100644
--- a/Antlr3.StringTemplate/Language/Action.g3
+++ b/Antlr3.StringTemplate/Language/Action.g3
@@ -458,7 +458,7 @@ DOTDOTDOT	: '...' ;

WS
:	(' '|'\t'|'\r'|'\n')+
-		{$channel = HIDDEN;}
+		{$channel = Hidden;}
;

fragment
diff --git a/Antlr3.StringTemplate/Language/ActionEvaluator.cs b/Antlr3.StringTemplate/Language/ActionEvaluator.cs
index 44a8426..cdb3515 100644
--- a/Antlr3.StringTemplate/Language/ActionEvaluator.cs
+++ b/Antlr3.StringTemplate/Language/ActionEvaluator.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\ActionEvaluator.g3 2009-03-20 14:32:39
+// $ANTLR 3.1.2 Language\\ActionEvaluator.g3 2009-03-23 17:52:08

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -240,7 +240,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,PLUS,Follow._PLUS_in_expr79);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._expr_in_expr83);
a=expr();

@@ -253,7 +253,7 @@ public partial class ActionEvaluator : TreeParser

value = chunk.Add(a,b);

-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -322,14 +322,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_expr131);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._expr_in_expr135);
e=expr();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

StringWriter buf = new StringWriter();
IStringTemplateWriter sw = self.Group.GetStringTemplateWriter(buf);
@@ -377,7 +377,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,LIST,Follow._LIST_in_list167);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Language\\ActionEvaluator.g3:123:4: ( expr | NOTHING )+
int cnt2=0;
for ( ; ; )
@@ -440,7 +440,7 @@ public partial class ActionEvaluator : TreeParser



-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);
value = new Cat(elements);

}
@@ -482,7 +482,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,INCLUDE,Follow._INCLUDE_in_templateInclude229);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Language\\ActionEvaluator.g3:148:4: (id= ID a1= . | ^( VALUE n= expr a2= . ) )
int alt3=2;
int LA3_0 = input.LA(1);
@@ -518,7 +518,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_templateInclude262);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._expr_in_templateInclude266);
n=expr();

@@ -527,7 +527,7 @@ public partial class ActionEvaluator : TreeParser
a2=(StringTemplateAST)input.LT(1);
MatchAny(input);

-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);
if (n!=null) {name=n.ToString();} args=a2;

}
@@ -536,7 +536,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

if ( name!=null )
{
@@ -601,7 +601,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,APPLY,Follow._APPLY_in_templateApplication316);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._expr_in_templateApplication320);
a=expr();

@@ -649,7 +649,7 @@ public partial class ActionEvaluator : TreeParser

value = chunk.ApplyListOfAlternatingTemplates(self,a,templatesToApply);

-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -658,7 +658,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,MULTI_APPLY,Follow._MULTI_APPLY_in_templateApplication345);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
// Language\\ActionEvaluator.g3:177:19: (a= expr )+
int cnt5=0;
for ( ; ; )
@@ -710,7 +710,7 @@ public partial class ActionEvaluator : TreeParser
anon.StringTemplate);


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -746,7 +746,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,FUNCTION,Follow._FUNCTION_in_function390);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Language\\ActionEvaluator.g3:191:4: ( 'first' a= singleFunctionArg | 'rest' a= singleFunctionArg | 'last' a= singleFunctionArg | 'length' a= singleFunctionArg | 'strip' a= singleFunctionArg | 'trunc' a= singleFunctionArg )
int alt7=6;
switch ( input.LA(1) )
@@ -873,7 +873,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -907,7 +907,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,SINGLEVALUEARG,Follow._SINGLEVALUEARG_in_singleFunctionArg499);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
PushFollow(Follow._expr_in_singleFunctionArg501);
expr8=expr();

@@ -915,7 +915,7 @@ public partial class ActionEvaluator : TreeParser

value = expr8;

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -953,7 +953,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,TEMPLATE,Follow._TEMPLATE_in_template524);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Language\\ActionEvaluator.g3:211:4: ( ID args= . |anon= ANONYMOUS_TEMPLATE | ^( VALUE n= expr args2= . ) )
int alt8=3;
switch ( input.LA(1) )
@@ -1021,7 +1021,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_template568);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._expr_in_template572);
n=expr();

@@ -1044,7 +1044,7 @@ public partial class ActionEvaluator : TreeParser
}


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -1052,7 +1052,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -1118,14 +1118,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,NOT,Follow._NOT_in_ifCondition625);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._ifAtom_in_ifCondition629);
a=ifAtom();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);
value = !chunk.TestAttributeTrue(a);

}
@@ -1247,7 +1247,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,DOT,Follow._DOT_in_attribute671);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._expr_in_attribute675);
obj=expr();

@@ -1286,14 +1286,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_attribute714);

-					Match(input, TokenConstants.DOWN, null);
+					Match(input, TokenConstants.Down, null);
PushFollow(Follow._expr_in_attribute718);
e=expr();

state._fsp--;


-					Match(input, TokenConstants.UP, null);
+					Match(input, TokenConstants.Up, null);
if (e!=null) {propName=e;}

}
@@ -1302,7 +1302,7 @@ public partial class ActionEvaluator : TreeParser
}


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);
value = chunk.GetObjectProperty(self,obj,propName);

}
@@ -1409,9 +1409,9 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,ARGS,Follow._ARGS_in_argList808);

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null);
+					Match(input, TokenConstants.Down, null);
// Language\\ActionEvaluator.g3:319:12: ( argumentAssignment[$embedded,$argumentContext] )*
for ( ; ; )
{
@@ -1448,7 +1448,7 @@ public partial class ActionEvaluator : TreeParser



-					Match(input, TokenConstants.UP, null);
+					Match(input, TokenConstants.Up, null);
}

}
@@ -1493,14 +1493,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,SINGLEVALUEARG,Follow._SINGLEVALUEARG_in_singleTemplateArg836);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
PushFollow(Follow._expr_in_singleTemplateArg840);
e=expr();

state._fsp--;


-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

if ( e!=null )
{
@@ -1588,7 +1588,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_argumentAssignment860);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
arg=(StringTemplateAST)Match(input,ID,Follow._ID_in_argumentAssignment864);
PushFollow(Follow._expr_in_argumentAssignment866);
expr11=expr();
@@ -1596,7 +1596,7 @@ public partial class ActionEvaluator : TreeParser
state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

if ( expr11 != null )
{
@@ -1749,14 +1749,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,NOT,Follow._NOT_in_ifConditionCompiled940);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._ifAtomCompiled_in_ifConditionCompiled942);
ifAtomCompiled(gen);

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

#if COMPILE_EXPRESSIONS
EmitNot(gen);
@@ -1834,14 +1834,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,NOT,Follow._NOT_in_ifConditionFunctional975);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._ifAtomFunctional_in_ifConditionFunctional977);
ifAtomFunctional14=ifAtomFunctional();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

#if COMPILE_EXPRESSIONS
func = (chunk,self,writer) => !(ifAtomFunctional14(chunk,self,writer));
@@ -2008,7 +2008,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,PLUS,Follow._PLUS_in_exprCompiled1031);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._exprCompiled_in_exprCompiled1033);
exprCompiled(gen);

@@ -2020,7 +2020,7 @@ public partial class ActionEvaluator : TreeParser
state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

#if COMPILE_EXPRESSIONS
EmitAdd(gen);
@@ -2089,14 +2089,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_exprCompiled1078);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._exprCompiled_in_exprCompiled1080);
exprCompiled(gen);

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

#if COMPILE_EXPRESSIONS
EmitWriteToString(gen);
@@ -2197,7 +2197,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,PLUS,Follow._PLUS_in_exprFunctional1102);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._exprFunctional_in_exprFunctional1106);
a=exprFunctional();

@@ -2209,7 +2209,7 @@ public partial class ActionEvaluator : TreeParser
state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

#if COMPILE_EXPRESSIONS
func = (chunk,self,writer) => chunk.Add(a(chunk,self,writer),b(chunk,self,writer));
@@ -2303,14 +2303,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_exprFunctional1166);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._exprFunctional_in_exprFunctional1170);
a=exprFunctional();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

#if COMPILE_EXPRESSIONS
func = (chunk,self,writer) =>
@@ -2380,7 +2380,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,APPLY,Follow._APPLY_in_templateApplicationCompiled1194);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._expr_in_templateApplicationCompiled1198);
a=expr();

@@ -2432,7 +2432,7 @@ public partial class ActionEvaluator : TreeParser
#endif


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2441,7 +2441,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,MULTI_APPLY,Follow._MULTI_APPLY_in_templateApplicationCompiled1227);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
// Language\\ActionEvaluator.g3:527:19: ( exprCompiled[$gen] )+
int cnt20=0;
for ( ; ; )
@@ -2490,7 +2490,7 @@ public partial class ActionEvaluator : TreeParser
#endif


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2553,7 +2553,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,APPLY,Follow._APPLY_in_templateApplicationFunctional1299);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._exprFunctional_in_templateApplicationFunctional1303);
a=exprFunctional();

@@ -2613,7 +2613,7 @@ public partial class ActionEvaluator : TreeParser
#endif


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2622,7 +2622,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,MULTI_APPLY,Follow._MULTI_APPLY_in_templateApplicationFunctional1328);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
// Language\\ActionEvaluator.g3:569:4: (a= exprFunctional )+
int cnt23=0;
for ( ; ; )
@@ -2682,7 +2682,7 @@ public partial class ActionEvaluator : TreeParser
#endif


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2757,7 +2757,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,DOT,Follow._DOT_in_attributeCompiled1379);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._exprCompiled_in_attributeCompiled1381);
exprCompiled(gen);

@@ -2800,14 +2800,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_attributeCompiled1405);

-					Match(input, TokenConstants.DOWN, null);
+					Match(input, TokenConstants.Down, null);
PushFollow(Follow._exprCompiled_in_attributeCompiled1407);
exprCompiled(gen);

state._fsp--;


-					Match(input, TokenConstants.UP, null);
+					Match(input, TokenConstants.Up, null);

}
break;
@@ -2820,7 +2820,7 @@ public partial class ActionEvaluator : TreeParser
#endif


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2948,7 +2948,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,DOT,Follow._DOT_in_attributeFunctional1482);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._exprFunctional_in_attributeFunctional1486);
a=exprFunctional();

@@ -2992,14 +2992,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_attributeFunctional1509);

-					Match(input, TokenConstants.DOWN, null);
+					Match(input, TokenConstants.Down, null);
PushFollow(Follow._exprFunctional_in_attributeFunctional1513);
b=exprFunctional();

state._fsp--;


-					Match(input, TokenConstants.UP, null);
+					Match(input, TokenConstants.Up, null);

#if COMPILE_EXPRESSIONS
func = (chunk,self,writer) => chunk.GetObjectProperty( self, a(chunk,self,writer), b(chunk,self,writer) );
@@ -3012,7 +3012,7 @@ public partial class ActionEvaluator : TreeParser
}


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -3110,7 +3110,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,INCLUDE,Follow._INCLUDE_in_templateIncludeCompiled1585);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Language\\ActionEvaluator.g3:702:4: ( ID args= . | ^( VALUE exprCompiled[$gen] args= . ) )
int alt29=2;
int LA29_0 = input.LA(1);
@@ -3150,7 +3150,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_templateIncludeCompiled1611);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._exprCompiled_in_templateIncludeCompiled1613);
exprCompiled(gen);

@@ -3159,7 +3159,7 @@ public partial class ActionEvaluator : TreeParser
args=(StringTemplateAST)input.LT(1);
MatchAny(input);

-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -3167,7 +3167,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

#if COMPILE_EXPRESSIONS
EmitTemplateInclude( gen, args );
@@ -3208,7 +3208,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,INCLUDE,Follow._INCLUDE_in_templateIncludeFunctional1650);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Language\\ActionEvaluator.g3:720:4: ( ID args= . | ^( VALUE exprFunctional args= . ) )
int alt30=2;
int LA30_0 = input.LA(1);
@@ -3243,7 +3243,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_templateIncludeFunctional1670);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._exprFunctional_in_templateIncludeFunctional1672);
exprFunctional30=exprFunctional();

@@ -3252,7 +3252,7 @@ public partial class ActionEvaluator : TreeParser
args=(StringTemplateAST)input.LT(1);
MatchAny(input);

-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -3260,7 +3260,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

#if COMPILE_EXPRESSIONS
if ( ID29 != null )
@@ -3324,7 +3324,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,FUNCTION,Follow._FUNCTION_in_functionCompiled1705);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Language\\ActionEvaluator.g3:763:4: ( 'first' singleFunctionArgCompiled[$gen] | 'rest' singleFunctionArgCompiled[$gen] | 'last' singleFunctionArgCompiled[$gen] | 'length' singleFunctionArgCompiled[$gen] | 'strip' singleFunctionArgCompiled[$gen] | 'trunc' singleFunctionArgCompiled[$gen] )
int alt31=6;
switch ( input.LA(1) )
@@ -3475,7 +3475,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -3509,7 +3509,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,FUNCTION,Follow._FUNCTION_in_functionFunctional1832);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Language\\ActionEvaluator.g3:805:4: ( 'first' a= singleFunctionArgFunctional | 'rest' a= singleFunctionArgFunctional | 'last' a= singleFunctionArgFunctional | 'length' a= singleFunctionArgFunctional | 'strip' a= singleFunctionArgFunctional | 'trunc' a= singleFunctionArgFunctional )
int alt32=6;
switch ( input.LA(1) )
@@ -3660,7 +3660,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -3689,7 +3689,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,LIST,Follow._LIST_in_listCompiled1962);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Language\\ActionEvaluator.g3:847:4: ( exprCompiled[$gen] | NOTHING )+
int cnt33=0;
for ( ; ; )
@@ -3742,7 +3742,7 @@ public partial class ActionEvaluator : TreeParser



-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);
throw new System.NotImplementedException();

}
@@ -3780,7 +3780,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,LIST,Follow._LIST_in_listFunctional2013);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Language\\ActionEvaluator.g3:860:4: ( exprFunctional | NOTHING )+
int cnt34=0;
for ( ; ; )
@@ -3844,7 +3844,7 @@ public partial class ActionEvaluator : TreeParser



-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

#if COMPILE_EXPRESSIONS
func = (chunk,self,writer) =>
@@ -3883,14 +3883,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,SINGLEVALUEARG,Follow._SINGLEVALUEARG_in_singleFunctionArgCompiled2067);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
PushFollow(Follow._exprCompiled_in_singleFunctionArgCompiled2069);
exprCompiled(gen);

state._fsp--;


-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -3924,7 +3924,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,SINGLEVALUEARG,Follow._SINGLEVALUEARG_in_singleFunctionArgFunctional2089);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
PushFollow(Follow._exprFunctional_in_singleFunctionArgFunctional2091);
exprFunctional32=exprFunctional();

@@ -3932,7 +3932,7 @@ public partial class ActionEvaluator : TreeParser

func = exprFunctional32;

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -3970,7 +3970,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,TEMPLATE,Follow._TEMPLATE_in_templateFunctional2114);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Language\\ActionEvaluator.g3:901:4: ( ID args= . |anon= ANONYMOUS_TEMPLATE | ^( VALUE n= expr args2= . ) )
int alt35=3;
switch ( input.LA(1) )
@@ -4052,7 +4052,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_templateFunctional2158);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._expr_in_templateFunctional2162);
n=expr();

@@ -4082,7 +4082,7 @@ public partial class ActionEvaluator : TreeParser
#endif


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -4090,7 +4090,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

diff --git a/Antlr3.StringTemplate/Language/ActionLexer.cs b/Antlr3.StringTemplate/Language/ActionLexer.cs
index 475d6ab..8670b84 100644
--- a/Antlr3.StringTemplate/Language/ActionLexer.cs
+++ b/Antlr3.StringTemplate/Language/ActionLexer.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\Action.g3 2009-03-16 19:22:22
+// $ANTLR 3.1.2 Language\\Action.g3 2009-03-23 17:53:11

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -113,7 +113,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = CONDITIONAL;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:42:15: ( 'if' )
// Language\\Action.g3:42:15: 'if'
{
@@ -137,7 +137,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = ELSEIF;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:43:10: ( 'elseif' )
// Language\\Action.g3:43:10: 'elseif'
{
@@ -161,7 +161,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = FIRST;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:44:9: ( 'first' )
// Language\\Action.g3:44:9: 'first'
{
@@ -185,7 +185,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = LAST;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:45:8: ( 'last' )
// Language\\Action.g3:45:8: 'last'
{
@@ -209,7 +209,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = LENGTH;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:46:10: ( 'length' )
// Language\\Action.g3:46:10: 'length'
{
@@ -233,7 +233,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = REST;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:47:8: ( 'rest' )
// Language\\Action.g3:47:8: 'rest'
{
@@ -257,7 +257,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = STRIP;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:48:9: ( 'strip' )
// Language\\Action.g3:48:9: 'strip'
{
@@ -281,7 +281,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = SUPER;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:49:9: ( 'super' )
// Language\\Action.g3:49:9: 'super'
{
@@ -305,7 +305,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = TRUNC;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:50:9: ( 'trunc' )
// Language\\Action.g3:50:9: 'trunc'
{
@@ -329,7 +329,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = ID;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:335:4: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '/' )* )
// Language\\Action.g3:335:4: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '/' )*
{
@@ -395,7 +395,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = INT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:339:4: ( ( '0' .. '9' )+ )
// Language\\Action.g3:339:4: ( '0' .. '9' )+
{
@@ -455,7 +455,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = STRING;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
int ch;


@@ -543,7 +543,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = ANONYMOUS_TEMPLATE;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken ESC_CHAR1=null;
int ch;

@@ -658,7 +658,7 @@ public partial class ActionLexer : Lexer
{
int ESC_CHAR1Start300 = GetCharIndex();
mESC_CHAR(out uc, false); if (state.failed) return ;
-					ESC_CHAR1 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ESC_CHAR1Start300, GetCharIndex()-1);
+					ESC_CHAR1 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ESC_CHAR1Start300, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append( (ESC_CHAR1!=null?ESC_CHAR1.Text:null) );
@@ -759,7 +759,7 @@ public partial class ActionLexer : Lexer

int aStart368 = GetCharIndex();
mID(); if (state.failed) return ;
-			a = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, aStart368, GetCharIndex()-1);
+			a = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, aStart368, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
args.Add((a!=null?a.Text:null));
@@ -837,7 +837,7 @@ public partial class ActionLexer : Lexer

int a2Start390 = GetCharIndex();
mID(); if (state.failed) return ;
-					a2 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, a2Start390, GetCharIndex()-1);
+					a2 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, a2Start390, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
args.Add((a2!=null?a2.Text:null));
@@ -947,7 +947,7 @@ public partial class ActionLexer : Lexer
{
int ESC_CHAR2Start460 = GetCharIndex();
mESC_CHAR(out uc, false); if (state.failed) return ;
-					ESC_CHAR2 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ESC_CHAR2Start460, GetCharIndex()-1);
+					ESC_CHAR2 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ESC_CHAR2Start460, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((ESC_CHAR2!=null?ESC_CHAR2.Text:null));
@@ -1145,7 +1145,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = LBRACK;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:446:11: ( '[' )
// Language\\Action.g3:446:11: '['
{
@@ -1168,7 +1168,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = RBRACK;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:447:11: ( ']' )
// Language\\Action.g3:447:11: ']'
{
@@ -1191,7 +1191,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = LPAREN;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:448:11: ( '(' )
// Language\\Action.g3:448:11: '('
{
@@ -1214,7 +1214,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = RPAREN;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:449:11: ( ')' )
// Language\\Action.g3:449:11: ')'
{
@@ -1237,7 +1237,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = COMMA;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:450:10: ( ',' )
// Language\\Action.g3:450:10: ','
{
@@ -1260,7 +1260,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = DOT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:451:9: ( '.' )
// Language\\Action.g3:451:9: '.'
{
@@ -1283,7 +1283,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = ASSIGN;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:452:11: ( '=' )
// Language\\Action.g3:452:11: '='
{
@@ -1306,7 +1306,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = COLON;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:453:10: ( ':' )
// Language\\Action.g3:453:10: ':'
{
@@ -1329,7 +1329,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = PLUS;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:454:9: ( '+' )
// Language\\Action.g3:454:9: '+'
{
@@ -1352,7 +1352,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = SEMI;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:455:9: ( ';' )
// Language\\Action.g3:455:9: ';'
{
@@ -1375,7 +1375,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = NOT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:456:9: ( '!' )
// Language\\Action.g3:456:9: '!'
{
@@ -1398,7 +1398,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = DOTDOTDOT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:457:13: ( '...' )
// Language\\Action.g3:457:13: '...'
{
@@ -1422,7 +1422,7 @@ public partial class ActionLexer : Lexer
try
{
int _type = WS;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Action.g3:460:4: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
// Language\\Action.g3:460:4: ( ' ' | '\\t' | '\\r' | '\\n' )+
{
@@ -1466,7 +1466,7 @@ public partial class ActionLexer : Lexer

if ( state.backtracking == 0 )
{
-				_channel = HIDDEN;
+				_channel = Hidden;
}

}
diff --git a/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.cs b/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.cs
index 1cacbc5..db48cec 100644
--- a/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.cs
+++ b/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\AngleBracketTemplateLexer.g3 2009-03-16 20:58:36
+// $ANTLR 3.1.2 Language\\AngleBracketTemplateLexer.g3 2009-03-23 17:53:05

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -94,7 +94,7 @@ public partial class AngleBracketTemplateLexer : Lexer
try
{
int _type = NEWLINE;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\AngleBracketTemplateLexer.g3:80:4: ( ( '\\r' )? '\\n' )
// Language\\AngleBracketTemplateLexer.g3:80:4: ( '\\r' )? '\\n'
{
@@ -141,7 +141,7 @@ public partial class AngleBracketTemplateLexer : Lexer
try
{
int _type = ACTION;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken exp=null;
int ch;

@@ -262,7 +262,7 @@ public partial class AngleBracketTemplateLexer : Lexer
mCOMMENT(); if (state.failed) return ;
if ( state.backtracking == 0 )
{
-					_channel = HIDDEN;
+					_channel = Hidden;
}

}
@@ -359,7 +359,7 @@ public partial class AngleBracketTemplateLexer : Lexer
Match('('); if (state.failed) return ;
int expStart171 = GetCharIndex();
mIF_EXPR(); if (state.failed) return ;
-					exp = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, expStart171, GetCharIndex()-1);
+					exp = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, expStart171, GetCharIndex()-1);
Match(")>"); if (state.failed) return ;

// Language\\AngleBracketTemplateLexer.g3:110:4: ( ( '\\r' )? '\\n' )?
@@ -452,7 +452,7 @@ public partial class AngleBracketTemplateLexer : Lexer
Match('('); if (state.failed) return ;
int expStart220 = GetCharIndex();
mIF_EXPR(); if (state.failed) return ;
-					exp = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, expStart220, GetCharIndex()-1);
+					exp = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, expStart220, GetCharIndex()-1);
Match(")>"); if (state.failed) return ;

// Language\\AngleBracketTemplateLexer.g3:117:4: ( ( '\\r' )? '\\n' )?
@@ -1180,7 +1180,7 @@ public partial class AngleBracketTemplateLexer : Lexer
try
{
int _type = LITERAL;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken ind=null;
int ch;

@@ -1311,7 +1311,7 @@ public partial class AngleBracketTemplateLexer : Lexer
{
int indStart686 = GetCharIndex();
mINDENT(); if (state.failed) return ;
-					ind = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, indStart686, GetCharIndex()-1);
+					ind = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, indStart686, GetCharIndex()-1);
if ( state.backtracking == 0 )
{

@@ -1368,7 +1368,7 @@ public partial class AngleBracketTemplateLexer : Lexer
Text = builder.ToString();
if ( Text.Length == 0 )
{
-								_channel = HIDDEN;
+								_channel = Hidden;
}

}
@@ -1489,7 +1489,7 @@ public partial class AngleBracketTemplateLexer : Lexer
{
int ESC1Start766 = GetCharIndex();
mESC(); if (state.failed) return ;
-					ESC1 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ESC1Start766, GetCharIndex()-1);
+					ESC1 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ESC1Start766, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((ESC1!=null?ESC1.Text:null));
@@ -1502,7 +1502,7 @@ public partial class AngleBracketTemplateLexer : Lexer
{
int stStart784 = GetCharIndex();
mSUBTEMPLATE(); if (state.failed) return ;
-					st = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, stStart784, GetCharIndex()-1);
+					st = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, stStart784, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((st!=null?st.Text:null));
@@ -1600,7 +1600,7 @@ public partial class AngleBracketTemplateLexer : Lexer
{
int stStart850 = GetCharIndex();
mSUBTEMPLATE(); if (state.failed) return ;
-						st = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, stStart850, GetCharIndex()-1);
+						st = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, stStart850, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((st!=null?st.Text:null));
@@ -1733,7 +1733,7 @@ public partial class AngleBracketTemplateLexer : Lexer
{
int ESC2Start943 = GetCharIndex();
mESC(); if (state.failed) return ;
-						ESC2 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ESC2Start943, GetCharIndex()-1);
+						ESC2 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ESC2Start943, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((ESC2!=null?ESC2.Text:null));
@@ -2121,16 +2121,16 @@ public partial class AngleBracketTemplateLexer : Lexer
Match('u'); if (state.failed) return ;
int aStart1191 = GetCharIndex();
mHEX(); if (state.failed) return ;
-				a = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, aStart1191, GetCharIndex()-1);
+				a = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, aStart1191, GetCharIndex()-1);
int bStart1195 = GetCharIndex();
mHEX(); if (state.failed) return ;
-				b = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, bStart1195, GetCharIndex()-1);
+				b = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, bStart1195, GetCharIndex()-1);
int cStart1199 = GetCharIndex();
mHEX(); if (state.failed) return ;
-				c = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, cStart1199, GetCharIndex()-1);
+				c = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, cStart1199, GetCharIndex()-1);
int dStart1203 = GetCharIndex();
mHEX(); if (state.failed) return ;
-				d = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, dStart1203, GetCharIndex()-1);
+				d = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, dStart1203, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
uc = (char)int.Parse((a!=null?a.Text:null)+(b!=null?b.Text:null)+(c!=null?c.Text:null)+(d!=null?d.Text:null), System.Globalization.NumberStyles.AllowHexSpecifier);
diff --git a/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.g3 b/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.g3
index 1480965..de538be 100644
--- a/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.g3
+++ b/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.g3
@@ -103,7 +103,7 @@ options { k = 1; }
Text = buf.ToString();
$type = LITERAL;
}
-	|	('<!') => COMMENT {$channel = HIDDEN;}
+	|	('<!') => COMMENT {$channel = Hidden;}
|	(	options { k = 1; } :
('<if') =>
'<if' (' ')* '(' exp=IF_EXPR ')>'
@@ -216,7 +216,7 @@ LITERAL
Text = builder.ToString();
if ( $text.Length == 0 )
{
-				$channel = HIDDEN;
+				$channel = Hidden;
}
} // pure indent?
;
diff --git a/Antlr3.StringTemplate/Language/Group.g3 b/Antlr3.StringTemplate/Language/Group.g3
index 40f1151..15a64aa 100644
--- a/Antlr3.StringTemplate/Language/Group.g3
+++ b/Antlr3.StringTemplate/Language/Group.g3
@@ -348,13 +348,13 @@ OPTIONAL : '?' ;
SL_COMMENT
:	'//'
(~('\n'|'\r'))* (('\r')? '\n')?
-		{ $channel = HIDDEN; }
+		{ $channel = Hidden; }
;

// multiple-line comments
ML_COMMENT
:	'/*' .* '*/'
-		{ $channel = HIDDEN; }
+		{ $channel = Hidden; }
;

// Whitespace -- ignored
@@ -363,5 +363,5 @@ WS  :   (   ' '
|   '\f'
|   ('\r')? '\n'
)+
-        { $channel = HIDDEN; }
+        { $channel = Hidden; }
;
diff --git a/Antlr3.StringTemplate/Language/GroupLexer.cs b/Antlr3.StringTemplate/Language/GroupLexer.cs
index afc1618..0fed145 100644
--- a/Antlr3.StringTemplate/Language/GroupLexer.cs
+++ b/Antlr3.StringTemplate/Language/GroupLexer.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\Group.g3 2009-03-16 20:26:39
+// $ANTLR 3.1.2 Language\\Group.g3 2009-03-23 18:22:46

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -96,7 +96,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = KWDEFAULT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:42:13: ( 'default' )
// Language\\Group.g3:42:13: 'default'
{
@@ -120,7 +120,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = KWGROUP;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:43:11: ( 'group' )
// Language\\Group.g3:43:11: 'group'
{
@@ -144,7 +144,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = KWIMPLEMENTS;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:44:16: ( 'implements' )
// Language\\Group.g3:44:16: 'implements'
{
@@ -168,7 +168,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = ID;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:290:4: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | '_' )* )
// Language\\Group.g3:290:4: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | '_' )*
{
@@ -233,7 +233,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = STRING;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
int ch;


@@ -351,7 +351,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = BIGSTRING;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:312:4: ( '<<' ( '\\\\>' | '\\\\' ~ '>' | '>' ~ '>' |~ ( '\\\\' | '>' ) )* '>>' )
// Language\\Group.g3:312:4: '<<' ( '\\\\>' | '\\\\' ~ '>' | '>' ~ '>' |~ ( '\\\\' | '>' ) )* '>>'
{
@@ -465,7 +465,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = ANONYMOUS_TEMPLATE;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:320:4: ( '{' ( '\\\\}' | '\\\\' ~ '}' |~ ( '\\\\' | '}' ) )* '}' )
// Language\\Group.g3:320:4: '{' ( '\\\\}' | '\\\\' ~ '}' |~ ( '\\\\' | '}' ) )* '}'
{
@@ -557,7 +557,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = AT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:332:6: ( '@' )
// Language\\Group.g3:332:6: '@'
{
@@ -580,7 +580,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = LPAREN;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:333:9: ( '(' )
// Language\\Group.g3:333:9: '('
{
@@ -603,7 +603,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = RPAREN;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:334:9: ( ')' )
// Language\\Group.g3:334:9: ')'
{
@@ -626,7 +626,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = LBRACK;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:335:9: ( '[' )
// Language\\Group.g3:335:9: '['
{
@@ -649,7 +649,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = RBRACK;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:336:9: ( ']' )
// Language\\Group.g3:336:9: ']'
{
@@ -672,7 +672,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = COMMA;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:337:9: ( ',' )
// Language\\Group.g3:337:9: ','
{
@@ -695,7 +695,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = DOT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:338:7: ( '.' )
// Language\\Group.g3:338:7: '.'
{
@@ -718,7 +718,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = DEFINED_TO_BE;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:339:17: ( '::=' )
// Language\\Group.g3:339:17: '::='
{
@@ -742,7 +742,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = SEMI;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:340:9: ( ';' )
// Language\\Group.g3:340:9: ';'
{
@@ -765,7 +765,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = COLON;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:341:9: ( ':' )
// Language\\Group.g3:341:9: ':'
{
@@ -788,7 +788,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = STAR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:342:9: ( '*' )
// Language\\Group.g3:342:9: '*'
{
@@ -811,7 +811,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = PLUS;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:343:9: ( '+' )
// Language\\Group.g3:343:9: '+'
{
@@ -834,7 +834,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = ASSIGN;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:344:11: ( '=' )
// Language\\Group.g3:344:11: '='
{
@@ -857,7 +857,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = OPTIONAL;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:345:12: ( '?' )
// Language\\Group.g3:345:12: '?'
{
@@ -880,7 +880,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = SL_COMMENT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:349:4: ( '//' (~ ( '\\n' | '\\r' ) )* ( ( '\\r' )? '\\n' )? )
// Language\\Group.g3:349:4: '//' (~ ( '\\n' | '\\r' ) )* ( ( '\\r' )? '\\n' )?
{
@@ -958,7 +958,7 @@ public partial class GroupLexer : Lexer

}

-			 _channel = HIDDEN;
+			 _channel = Hidden;

}

@@ -977,7 +977,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = ML_COMMENT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:356:4: ( '/*' ( . )* '*/' )
// Language\\Group.g3:356:4: '/*' ( . )* '*/'
{
@@ -1031,7 +1031,7 @@ public partial class GroupLexer : Lexer

Match("*/");

-			 _channel = HIDDEN;
+			 _channel = Hidden;

}

@@ -1050,7 +1050,7 @@ public partial class GroupLexer : Lexer
try
{
int _type = WS;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Group.g3:361:9: ( ( ' ' | '\\t' | '\\f' | ( '\\r' )? '\\n' )+ )
// Language\\Group.g3:361:9: ( ' ' | '\\t' | '\\f' | ( '\\r' )? '\\n' )+
{
@@ -1149,7 +1149,7 @@ public partial class GroupLexer : Lexer
;


-			 _channel = HIDDEN;
+			 _channel = Hidden;

}

diff --git a/Antlr3.StringTemplate/Language/Interface.g3 b/Antlr3.StringTemplate/Language/Interface.g3
index 8348345..2fc0340 100644
--- a/Antlr3.StringTemplate/Language/Interface.g3
+++ b/Antlr3.StringTemplate/Language/Interface.g3
@@ -166,12 +166,12 @@ COLON	:	':';
SL_COMMENT
:	'//'
(~('\n'|'\r'))* (('\r')? '\n')?
-		{ $channel = HIDDEN; }
+		{ $channel = Hidden; }
;

ML_COMMENT
:	'/*' .* '*/'
-		{ $channel = HIDDEN; }
+		{ $channel = Hidden; }
;

WS
@@ -180,5 +180,5 @@ WS
|	'\f'
|	('\r')? '\n'
)+
-		{ $channel = HIDDEN; }
+		{ $channel = Hidden; }
;
diff --git a/Antlr3.StringTemplate/Language/InterfaceLexer.cs b/Antlr3.StringTemplate/Language/InterfaceLexer.cs
index 41e4e56..f465c34 100644
--- a/Antlr3.StringTemplate/Language/InterfaceLexer.cs
+++ b/Antlr3.StringTemplate/Language/InterfaceLexer.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\Interface.g3 2009-03-16 18:25:15
+// $ANTLR 3.1.2 Language\\Interface.g3 2009-03-23 17:53:08

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -83,7 +83,7 @@ public partial class InterfaceLexer : Lexer
try
{
int _type = INTERFACE;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Interface.g3:42:13: ( 'interface' )
// Language\\Interface.g3:42:13: 'interface'
{
@@ -107,7 +107,7 @@ public partial class InterfaceLexer : Lexer
try
{
int _type = OPTIONAL;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Interface.g3:43:12: ( 'optional' )
// Language\\Interface.g3:43:12: 'optional'
{
@@ -131,7 +131,7 @@ public partial class InterfaceLexer : Lexer
try
{
int _type = ID;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Interface.g3:156:6: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | '_' )* )
// Language\\Interface.g3:156:6: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | '_' )*
{
@@ -196,7 +196,7 @@ public partial class InterfaceLexer : Lexer
try
{
int _type = LPAREN;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Interface.g3:159:10: ( '(' )
// Language\\Interface.g3:159:10: '('
{
@@ -219,7 +219,7 @@ public partial class InterfaceLexer : Lexer
try
{
int _type = RPAREN;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Interface.g3:160:10: ( ')' )
// Language\\Interface.g3:160:10: ')'
{
@@ -242,7 +242,7 @@ public partial class InterfaceLexer : Lexer
try
{
int _type = COMMA;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Interface.g3:161:9: ( ',' )
// Language\\Interface.g3:161:9: ','
{
@@ -265,7 +265,7 @@ public partial class InterfaceLexer : Lexer
try
{
int _type = SEMI;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Interface.g3:162:8: ( ';' )
// Language\\Interface.g3:162:8: ';'
{
@@ -288,7 +288,7 @@ public partial class InterfaceLexer : Lexer
try
{
int _type = COLON;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Interface.g3:163:9: ( ':' )
// Language\\Interface.g3:163:9: ':'
{
@@ -311,7 +311,7 @@ public partial class InterfaceLexer : Lexer
try
{
int _type = SL_COMMENT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Interface.g3:167:4: ( '//' (~ ( '\\n' | '\\r' ) )* ( ( '\\r' )? '\\n' )? )
// Language\\Interface.g3:167:4: '//' (~ ( '\\n' | '\\r' ) )* ( ( '\\r' )? '\\n' )?
{
@@ -389,7 +389,7 @@ public partial class InterfaceLexer : Lexer

}

-			 _channel = HIDDEN;
+			 _channel = Hidden;

}

@@ -408,7 +408,7 @@ public partial class InterfaceLexer : Lexer
try
{
int _type = ML_COMMENT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Interface.g3:173:4: ( '/*' ( . )* '*/' )
// Language\\Interface.g3:173:4: '/*' ( . )* '*/'
{
@@ -462,7 +462,7 @@ public partial class InterfaceLexer : Lexer

Match("*/");

-			 _channel = HIDDEN;
+			 _channel = Hidden;

}

@@ -481,7 +481,7 @@ public partial class InterfaceLexer : Lexer
try
{
int _type = WS;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Interface.g3:178:4: ( ( ' ' | '\\t' | '\\f' | ( '\\r' )? '\\n' )+ )
// Language\\Interface.g3:178:4: ( ' ' | '\\t' | '\\f' | ( '\\r' )? '\\n' )+
{
@@ -580,7 +580,7 @@ public partial class InterfaceLexer : Lexer
;


-			 _channel = HIDDEN;
+			 _channel = Hidden;

}

diff --git a/Antlr3.StringTemplate/Language/Template.g3 b/Antlr3.StringTemplate/Language/Template.g3
index 89f4cac..d223d2a 100644
--- a/Antlr3.StringTemplate/Language/Template.g3
+++ b/Antlr3.StringTemplate/Language/Template.g3
@@ -286,7 +286,7 @@ ACTION
$type = LITERAL;
}
|	('$!') => COMMENT
-			{ $channel = HIDDEN; }
+			{ $channel = Hidden; }
|	(	('$if' (' '|'(')) =>
'$if' (' ')* '(' exp=IF_EXPR ')$'
{
@@ -393,7 +393,7 @@ LITERAL
|	ch=~('$'|'\r'|'\n'|'\\'|' '|'\t') {builder.Append((char)$ch);}
)+
{Text = builder.ToString();}
-		{if ($text.Length==0) {$channel = HIDDEN;}} // pure indent?
+		{if ($text.Length==0) {$channel = Hidden;}} // pure indent?
;

fragment
diff --git a/Antlr3.StringTemplate/Language/TemplateLexer.cs b/Antlr3.StringTemplate/Language/TemplateLexer.cs
index f077fdf..54ec8ca 100644
--- a/Antlr3.StringTemplate/Language/TemplateLexer.cs
+++ b/Antlr3.StringTemplate/Language/TemplateLexer.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\Template.g3 2009-03-16 21:10:52
+// $ANTLR 3.1.2 Language\\Template.g3 2009-03-23 18:21:53

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -206,7 +206,7 @@ public partial class TemplateLexer : Lexer
try
{
int _type = NEWLINE;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Language\\Template.g3:266:4: ( ( '\\r' )? '\\n' )
// Language\\Template.g3:266:4: ( '\\r' )? '\\n'
{
@@ -253,7 +253,7 @@ public partial class TemplateLexer : Lexer
try
{
int _type = ACTION;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken exp=null;
int ch;

@@ -370,7 +370,7 @@ public partial class TemplateLexer : Lexer
mCOMMENT(); if (state.failed) return ;
if ( state.backtracking == 0 )
{
-					 _channel = HIDDEN;
+					 _channel = Hidden;
}

}
@@ -467,7 +467,7 @@ public partial class TemplateLexer : Lexer
Match('('); if (state.failed) return ;
int expStart206 = GetCharIndex();
mIF_EXPR(); if (state.failed) return ;
-					exp = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, expStart206, GetCharIndex()-1);
+					exp = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, expStart206, GetCharIndex()-1);
Match(")$"); if (state.failed) return ;

if ( state.backtracking == 0 )
@@ -560,7 +560,7 @@ public partial class TemplateLexer : Lexer
Match('('); if (state.failed) return ;
int expStart265 = GetCharIndex();
mIF_EXPR(); if (state.failed) return ;
-					exp = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, expStart265, GetCharIndex()-1);
+					exp = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, expStart265, GetCharIndex()-1);
Match(")$"); if (state.failed) return ;

if ( state.backtracking == 0 )
@@ -1291,7 +1291,7 @@ public partial class TemplateLexer : Lexer
try
{
int _type = LITERAL;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken ind=null;
int ch;

@@ -1401,7 +1401,7 @@ public partial class TemplateLexer : Lexer
{
int indStart759 = GetCharIndex();
mINDENT(); if (state.failed) return ;
-					ind = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, indStart759, GetCharIndex()-1);
+					ind = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, indStart759, GetCharIndex()-1);
if ( state.backtracking == 0 )
{

@@ -1459,7 +1459,7 @@ public partial class TemplateLexer : Lexer
}
if ( state.backtracking == 0 )
{
-				if (Text.Length==0) {_channel = HIDDEN;}
+				if (Text.Length==0) {_channel = Hidden;}
}

}
@@ -1522,7 +1522,7 @@ public partial class TemplateLexer : Lexer
{
int ESC1Start821 = GetCharIndex();
mESC(); if (state.failed) return ;
-					ESC1 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ESC1Start821, GetCharIndex()-1);
+					ESC1 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ESC1Start821, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((ESC1!=null?ESC1.Text:null));
@@ -1535,7 +1535,7 @@ public partial class TemplateLexer : Lexer
{
int stStart837 = GetCharIndex();
mSUBTEMPLATE(); if (state.failed) return ;
-					st = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, stStart837, GetCharIndex()-1);
+					st = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, stStart837, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((st!=null?st.Text:null));
@@ -1633,7 +1633,7 @@ public partial class TemplateLexer : Lexer
{
int stStart895 = GetCharIndex();
mSUBTEMPLATE(); if (state.failed) return ;
-						st = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, stStart895, GetCharIndex()-1);
+						st = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, stStart895, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((st!=null?st.Text:null));
@@ -1766,7 +1766,7 @@ public partial class TemplateLexer : Lexer
{
int ESC2Start981 = GetCharIndex();
mESC(); if (state.failed) return ;
-						ESC2 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ESC2Start981, GetCharIndex()-1);
+						ESC2 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ESC2Start981, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((ESC2!=null?ESC2.Text:null));
@@ -2225,16 +2225,16 @@ public partial class TemplateLexer : Lexer

int aStart1192 = GetCharIndex();
mHEX(); if (state.failed) return ;
-				a = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, aStart1192, GetCharIndex()-1);
+				a = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, aStart1192, GetCharIndex()-1);
int bStart1196 = GetCharIndex();
mHEX(); if (state.failed) return ;
-				b = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, bStart1196, GetCharIndex()-1);
+				b = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, bStart1196, GetCharIndex()-1);
int cStart1200 = GetCharIndex();
mHEX(); if (state.failed) return ;
-				c = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, cStart1200, GetCharIndex()-1);
+				c = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, cStart1200, GetCharIndex()-1);
int dStart1204 = GetCharIndex();
mHEX(); if (state.failed) return ;
-				d = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, dStart1204, GetCharIndex()-1);
+				d = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, dStart1204, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
uc = (char)int.Parse((a!=null?a.Text:null)+(b!=null?b.Text:null)+(c!=null?c.Text:null)+(d!=null?d.Text:null), System.Globalization.NumberStyles.AllowHexSpecifier);
diff --git a/Antlr3.Test/TestTreeNodeStream.cs b/Antlr3.Test/TestTreeNodeStream.cs
index 22daa61..a464959 100644
--- a/Antlr3.Test/TestTreeNodeStream.cs
+++ b/Antlr3.Test/TestTreeNodeStream.cs
@@ -172,16 +172,16 @@ namespace AntlrUnitTests

ITreeNodeStream stream = newStream( t );
assertEquals( 101, ( (ITree)stream.LT( 1 ) ).Type );
-            assertEquals( TokenConstants.DOWN, ( (ITree)stream.LT( 2 ) ).Type );
+            assertEquals( TokenConstants.Down, ( (ITree)stream.LT( 2 ) ).Type );
assertEquals( 102, ( (ITree)stream.LT( 3 ) ).Type );
-            assertEquals( TokenConstants.DOWN, ( (ITree)stream.LT( 4 ) ).Type );
+            assertEquals( TokenConstants.Down, ( (ITree)stream.LT( 4 ) ).Type );
assertEquals( 103, ( (ITree)stream.LT( 5 ) ).Type );
-            assertEquals( TokenConstants.UP, ( (ITree)stream.LT( 6 ) ).Type );
+            assertEquals( TokenConstants.Up, ( (ITree)stream.LT( 6 ) ).Type );
assertEquals( 104, ( (ITree)stream.LT( 7 ) ).Type );
-            assertEquals( TokenConstants.UP, ( (ITree)stream.LT( 8 ) ).Type );
-            assertEquals( TokenConstants.EOF, ( (ITree)stream.LT( 9 ) ).Type );
+            assertEquals( TokenConstants.Up, ( (ITree)stream.LT( 8 ) ).Type );
+            assertEquals( TokenConstants.Eof, ( (ITree)stream.LT( 9 ) ).Type );
// check way ahead
-            assertEquals( TokenConstants.EOF, ( (ITree)stream.LT( 100 ) ).Type );
+            assertEquals( TokenConstants.Eof, ( (ITree)stream.LT( 100 ) ).Type );
}

[TestMethod]
@@ -206,8 +206,8 @@ namespace AntlrUnitTests
stream.LT( 1 );
stream.Consume();
}
-            assertEquals( TokenConstants.EOF, ( (ITree)stream.LT( 1 ) ).Type );
-            assertEquals( TokenConstants.UP, ( (ITree)stream.LT( -1 ) ).Type );
+            assertEquals( TokenConstants.Eof, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenConstants.Up, ( (ITree)stream.LT( -1 ) ).Type );
stream.Rewind( m );      // REWIND

// consume til end again :)
@@ -216,8 +216,8 @@ namespace AntlrUnitTests
stream.LT( 1 );
stream.Consume();
}
-            assertEquals( TokenConstants.EOF, ( (ITree)stream.LT( 1 ) ).Type );
-            assertEquals( TokenConstants.UP, ( (ITree)stream.LT( -1 ) ).Type );
+            assertEquals( TokenConstants.Eof, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenConstants.Up, ( (ITree)stream.LT( -1 ) ).Type );
}

[TestMethod]
@@ -252,19 +252,19 @@ namespace AntlrUnitTests

assertEquals( 107, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenConstants.UP, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenConstants.Up, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenConstants.UP, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenConstants.Up, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
assertEquals( 104, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
// now we're past rewind position
assertEquals( 105, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenConstants.UP, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenConstants.Up, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenConstants.EOF, ( (ITree)stream.LT( 1 ) ).Type );
-            assertEquals( TokenConstants.UP, ( (ITree)stream.LT( -1 ) ).Type );
+            assertEquals( TokenConstants.Eof, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenConstants.Up, ( (ITree)stream.LT( -1 ) ).Type );
}

[TestMethod]
@@ -294,17 +294,17 @@ namespace AntlrUnitTests
stream.Rewind( m2 );      // REWIND to 102
assertEquals( 102, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenConstants.DOWN, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenConstants.Down, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
// stop at 103 and rewind to start
stream.Rewind( m ); // REWIND to 101
assertEquals( 101, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenConstants.DOWN, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenConstants.Down, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
assertEquals( 102, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenConstants.DOWN, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenConstants.Down, ( (ITree)stream.LT( 1 ) ).Type );
}

[TestMethod]
@@ -337,9 +337,9 @@ namespace AntlrUnitTests
StringBuilder buf = new StringBuilder();
object o = nodes.LT( 1 );
int type = adaptor.GetType( o );
-            while ( o != null && type != TokenConstants.EOF )
+            while ( o != null && type != TokenConstants.Eof )
{
-                if ( !( type == TokenConstants.DOWN || type == TokenConstants.UP ) )
+                if ( !( type == TokenConstants.Down || type == TokenConstants.Up ) )
{
buf.Append( " " );
buf.Append( type );
diff --git a/Antlr3/Analysis/Label.cs b/Antlr3/Analysis/Label.cs
index 57f8649..d7cd096 100644
--- a/Antlr3/Analysis/Label.cs
+++ b/Antlr3/Analysis/Label.cs
@@ -4,7 +4,7 @@
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -111,14 +111,14 @@ namespace Antlr3.Analysis
*  this issue.
*/
public const int EOR_TOKEN_TYPE =
-            TokenConstants.EOR_TOKEN_TYPE;
+            TokenConstants.EorTokenType;

-        public const int DOWN = TokenConstants.DOWN;
-        public const int UP = TokenConstants.UP;
+        public const int DOWN = TokenConstants.Down;
+        public const int UP = TokenConstants.Up;

/** tokens and char range overlap; tokens are MIN_TOKEN_TYPE..n */
public const int MIN_TOKEN_TYPE =
-            TokenConstants.MIN_TOKEN_TYPE;
+            TokenConstants.MinTokenType;

/** The wildcard '.' char atom implies all valid characters==UNICODE */
//public static final IntSet ALLCHAR = IntervalSet.of(MIN_CHAR_VALUE,MAX_CHAR_VALUE);
@@ -255,7 +255,7 @@ namespace Antlr3.Analysis
label = SET;
if ( a.IsAtom )
{
-                    labelSet.add( a.Atom );
+                    labelSet.Add( a.Atom );
}
else if ( a.IsSet )
{
@@ -271,7 +271,7 @@ namespace Antlr3.Analysis
{
if ( a.IsAtom )
{
-                    labelSet.add( a.Atom );
+                    labelSet.Add( a.Atom );
}
else if ( a.IsSet )
{
diff --git a/Antlr3/Analysis/NFAConversionThread.cs b/Antlr3/Analysis/NFAConversionThread.cs
index d8f2020..405961a 100644
--- a/Antlr3/Analysis/NFAConversionThread.cs
+++ b/Antlr3/Analysis/NFAConversionThread.cs
@@ -4,7 +4,7 @@
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -66,7 +66,7 @@ namespace Antlr3.Analysis
// now wait for others to finish
try
{
-                barrier.waitForRelease();
+                barrier.WaitForRelease();
}
catch ( OperationCanceledException e )
{
diff --git a/Antlr3/Analysis/NFAtoDFAConverter.cs b/Antlr3/Analysis/NFAtoDFAConverter.cs
index 1c2b0d3..97712bf 100644
--- a/Antlr3/Analysis/NFAtoDFAConverter.cs
+++ b/Antlr3/Analysis/NFAtoDFAConverter.cs
@@ -4,7 +4,7 @@
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -683,7 +683,7 @@ namespace Antlr3.Analysis
// that the decision's lookahead language is non-regular; terminate
if ( depth == 1 && d.dfa.UserMaxLookahead == 0 )
{ // k=* only
-                    d.dfa.recursiveAltSet.add( alt ); // indicate that this alt is recursive
+                    d.dfa.recursiveAltSet.Add( alt ); // indicate that this alt is recursive
if ( d.dfa.recursiveAltSet.size() > 1 )
{
//JSystem.@out.println("recursive alts: "+d.dfa.recursiveAltSet.toString());
@@ -1487,7 +1487,7 @@ namespace Antlr3.Analysis
{
// if there are n-1 predicates for n nondeterministic alts, can fix
BitSet ndSet = BitSet.of( nondeterministicAlts );
-                BitSet predSet = BitSet.of( altToPredMap );
+                BitSet predSet = BitSet.of( altToPredMap.Keys );
int nakedAlt = ndSet.subtract( predSet ).getSingleElement();
SemanticContext nakedAltPred = null;
if ( nakedAlt == max( nondeterministicAlts ) )
diff --git a/Antlr3/Grammars/ANTLR.g3 b/Antlr3/Grammars/ANTLR.g3
index c70463e..f2158ab 100644
--- a/Antlr3/Grammars/ANTLR.g3
+++ b/Antlr3/Grammars/ANTLR.g3
@@ -823,14 +823,14 @@ WS
|	'\t'
|	('\r')? '\n'
)
-		{ $channel = HIDDEN; }
+		{ $channel = Hidden; }
;

COMMENT
:	( SL_COMMENT | ML_COMMENT[ref $type] )
{
if ( $type != DOC_COMMENT )
-				$channel = HIDDEN;
+				$channel = Hidden;
}
;

diff --git a/Antlr3/Grammars/ANTLRLexer.cs b/Antlr3/Grammars/ANTLRLexer.cs
index 4ddf983..90b5db1 100644
--- a/Antlr3/Grammars/ANTLRLexer.cs
+++ b/Antlr3/Grammars/ANTLRLexer.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\ANTLR.g3 2009-03-16 19:03:27
+// $ANTLR 3.1.2 Grammars\\ANTLR.g3 2009-03-23 17:53:58

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -173,7 +173,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = CATCH;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:46:9: ( 'catch' )
// Grammars\\ANTLR.g3:46:9: 'catch'
{
@@ -197,7 +197,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = FINALLY;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:47:11: ( 'finally' )
// Grammars\\ANTLR.g3:47:11: 'finally'
{
@@ -221,7 +221,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = FRAGMENT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:48:12: ( 'fragment' )
// Grammars\\ANTLR.g3:48:12: 'fragment'
{
@@ -245,7 +245,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = GRAMMAR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:49:11: ( 'grammar' )
// Grammars\\ANTLR.g3:49:11: 'grammar'
{
@@ -269,7 +269,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = IMPORT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:50:10: ( 'import' )
// Grammars\\ANTLR.g3:50:10: 'import'
{
@@ -293,7 +293,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = LEXER;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:51:9: ( 'lexer' )
// Grammars\\ANTLR.g3:51:9: 'lexer'
{
@@ -317,7 +317,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = PARSER;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:52:10: ( 'parser' )
// Grammars\\ANTLR.g3:52:10: 'parser'
{
@@ -341,7 +341,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = PRIVATE;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:53:11: ( 'private' )
// Grammars\\ANTLR.g3:53:11: 'private'
{
@@ -365,7 +365,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = PROTECTED;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:54:13: ( 'protected' )
// Grammars\\ANTLR.g3:54:13: 'protected'
{
@@ -389,7 +389,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = PUBLIC;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:55:10: ( 'public' )
// Grammars\\ANTLR.g3:55:10: 'public'
{
@@ -413,7 +413,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = RETURNS;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:56:11: ( 'returns' )
// Grammars\\ANTLR.g3:56:11: 'returns'
{
@@ -437,7 +437,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = SCOPE;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:57:9: ( 'scope' )
// Grammars\\ANTLR.g3:57:9: 'scope'
{
@@ -461,7 +461,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = THROWS;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:58:10: ( 'throws' )
// Grammars\\ANTLR.g3:58:10: 'throws'
{
@@ -485,7 +485,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = TREE;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:59:8: ( 'tree' )
// Grammars\\ANTLR.g3:59:8: 'tree'
{
@@ -585,7 +585,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = WS;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:822:4: ( ( ' ' | '\\t' | ( '\\r' )? '\\n' ) )
// Grammars\\ANTLR.g3:822:4: ( ' ' | '\\t' | ( '\\r' )? '\\n' )
{
@@ -666,7 +666,7 @@ public partial class ANTLRLexer : Lexer

if ( state.backtracking == 0 )
{
-				 _channel = HIDDEN;
+				 _channel = Hidden;
}

}
@@ -686,7 +686,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = COMMENT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:830:4: ( ( SL_COMMENT | ML_COMMENT[ref $type] ) )
// Grammars\\ANTLR.g3:830:4: ( SL_COMMENT | ML_COMMENT[ref $type] )
{
@@ -744,7 +744,7 @@ public partial class ANTLRLexer : Lexer
{

if ( _type != DOC_COMMENT )
-								_channel = HIDDEN;
+								_channel = Hidden;

}

@@ -993,7 +993,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = OPEN_ELEMENT_OPTION;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:854:4: ( '<' )
// Grammars\\ANTLR.g3:854:4: '<'
{
@@ -1016,7 +1016,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = CLOSE_ELEMENT_OPTION;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:858:4: ( '>' )
// Grammars\\ANTLR.g3:858:4: '>'
{
@@ -1039,7 +1039,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = AMPERSAND;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:861:13: ( '@' )
// Grammars\\ANTLR.g3:861:13: '@'
{
@@ -1062,7 +1062,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = COMMA;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:863:9: ( ',' )
// Grammars\\ANTLR.g3:863:9: ','
{
@@ -1085,7 +1085,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = QUESTION;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:865:12: ( '?' )
// Grammars\\ANTLR.g3:865:12: '?'
{
@@ -1108,7 +1108,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = TREE_BEGIN;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:867:14: ( '^(' )
// Grammars\\ANTLR.g3:867:14: '^('
{
@@ -1132,7 +1132,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = LPAREN;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:869:9: ( '(' )
// Grammars\\ANTLR.g3:869:9: '('
{
@@ -1155,7 +1155,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = RPAREN;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:871:9: ( ')' )
// Grammars\\ANTLR.g3:871:9: ')'
{
@@ -1178,7 +1178,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = COLON;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:873:9: ( ':' )
// Grammars\\ANTLR.g3:873:9: ':'
{
@@ -1201,7 +1201,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = STAR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:875:7: ( '*' )
// Grammars\\ANTLR.g3:875:7: '*'
{
@@ -1224,7 +1224,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = PLUS;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:877:7: ( '+' )
// Grammars\\ANTLR.g3:877:7: '+'
{
@@ -1247,7 +1247,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = ASSIGN;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:879:10: ( '=' )
// Grammars\\ANTLR.g3:879:10: '='
{
@@ -1270,7 +1270,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = PLUS_ASSIGN;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:881:15: ( '+=' )
// Grammars\\ANTLR.g3:881:15: '+='
{
@@ -1294,7 +1294,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = IMPLIES;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:883:11: ( '=>' )
// Grammars\\ANTLR.g3:883:11: '=>'
{
@@ -1318,7 +1318,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = REWRITE;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:885:11: ( '->' )
// Grammars\\ANTLR.g3:885:11: '->'
{
@@ -1342,7 +1342,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = SEMI;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:887:7: ( ';' )
// Grammars\\ANTLR.g3:887:7: ';'
{
@@ -1365,7 +1365,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = ROOT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:889:8: ( '^' )
// Grammars\\ANTLR.g3:889:8: '^'
{
@@ -1392,7 +1392,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = BANG;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:891:8: ( '!' )
// Grammars\\ANTLR.g3:891:8: '!'
{
@@ -1419,7 +1419,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = OR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:893:6: ( '|' )
// Grammars\\ANTLR.g3:893:6: '|'
{
@@ -1442,7 +1442,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = WILDCARD;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:895:12: ( '.' )
// Grammars\\ANTLR.g3:895:12: '.'
{
@@ -1465,7 +1465,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = ETC;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:897:7: ( '...' )
// Grammars\\ANTLR.g3:897:7: '...'
{
@@ -1489,7 +1489,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = RANGE;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:899:9: ( '..' )
// Grammars\\ANTLR.g3:899:9: '..'
{
@@ -1513,7 +1513,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = NOT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:901:7: ( '~' )
// Grammars\\ANTLR.g3:901:7: '~'
{
@@ -1536,7 +1536,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = RCURLY;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:903:9: ( '}' )
// Grammars\\ANTLR.g3:903:9: '}'
{
@@ -1559,7 +1559,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = DOLLAR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:905:10: ( '$' )
// Grammars\\ANTLR.g3:905:10: '$'
{
@@ -1582,7 +1582,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = STRAY_BRACKET;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:908:4: ( ']' )
// Grammars\\ANTLR.g3:908:4: ']'
{
@@ -1616,7 +1616,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = CHAR_LITERAL;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:920:4: ( '\\'' ( ESC |~ ( '\\\\' | '\\'' ) )* '\\'' )
// Grammars\\ANTLR.g3:920:4: '\\'' ( ESC |~ ( '\\\\' | '\\'' ) )* '\\''
{
@@ -1693,7 +1693,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = DOUBLE_QUOTE_STRING_LITERAL;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
int c;


@@ -1815,7 +1815,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = DOUBLE_ANGLE_STRING_LITERAL;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:951:4: ( '<<' ( . )* '>>' )
// Grammars\\ANTLR.g3:951:4: '<<' ( . )* '>>'
{
@@ -1973,7 +1973,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = INT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:985:4: ( ( '0' .. '9' )+ )
// Grammars\\ANTLR.g3:985:4: ( '0' .. '9' )+
{
@@ -2033,7 +2033,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = ARG_ACTION;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;

string text_ = string.Empty;

@@ -2144,7 +2144,7 @@ public partial class ANTLRLexer : Lexer
{
int ACTION_STRING_LITERAL1Start857 = GetCharIndex();
mACTION_STRING_LITERAL(); if (state.failed) return ;
-					ACTION_STRING_LITERAL1 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ACTION_STRING_LITERAL1Start857, GetCharIndex()-1);
+					ACTION_STRING_LITERAL1 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ACTION_STRING_LITERAL1Start857, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((ACTION_STRING_LITERAL1!=null?ACTION_STRING_LITERAL1.Text:null));
@@ -2157,7 +2157,7 @@ public partial class ANTLRLexer : Lexer
{
int ACTION_CHAR_LITERAL2Start865 = GetCharIndex();
mACTION_CHAR_LITERAL(); if (state.failed) return ;
-					ACTION_CHAR_LITERAL2 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ACTION_CHAR_LITERAL2Start865, GetCharIndex()-1);
+					ACTION_CHAR_LITERAL2 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ACTION_CHAR_LITERAL2Start865, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((ACTION_CHAR_LITERAL2!=null?ACTION_CHAR_LITERAL2.Text:null));
@@ -2210,7 +2210,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = ACTION;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;

int actionLine = Line;
int actionColumn = CharPositionInLine;
@@ -2596,7 +2596,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = TOKEN_REF;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:1077:4: ( 'A' .. 'Z' ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
// Grammars\\ANTLR.g3:1077:4: 'A' .. 'Z' ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
{
@@ -2651,7 +2651,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = TOKENS;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:1083:4: ( 'tokens' WS_LOOP '{' )
// Grammars\\ANTLR.g3:1083:4: 'tokens' WS_LOOP '{'
{
@@ -2677,7 +2677,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = OPTIONS;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ANTLR.g3:1087:4: ( 'options' WS_LOOP '{' )
// Grammars\\ANTLR.g3:1087:4: 'options' WS_LOOP '{'
{
@@ -2703,7 +2703,7 @@ public partial class ANTLRLexer : Lexer
try
{
int _type = RULE_REF;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;

int t=0;

@@ -2869,11 +2869,11 @@ public partial class ANTLRLexer : Lexer
Match(' '); if (state.failed) return ;
int fileStart1270 = GetCharIndex();
mACTION_STRING_LITERAL(); if (state.failed) return ;
-			file = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, fileStart1270, GetCharIndex()-1);
+			file = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, fileStart1270, GetCharIndex()-1);
Match(' '); if (state.failed) return ;
int lineStart1276 = GetCharIndex();
mINT(); if (state.failed) return ;
-			line = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, lineStart1276, GetCharIndex()-1);
+			line = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, lineStart1276, GetCharIndex()-1);
if ( state.backtracking == 0 )
{

diff --git a/Antlr3/Grammars/ANTLRParserHelper.cs b/Antlr3/Grammars/ANTLRParserHelper.cs
index b2e29ee..c5a098b 100644
--- a/Antlr3/Grammars/ANTLRParserHelper.cs
+++ b/Antlr3/Grammars/ANTLRParserHelper.cs
@@ -62,7 +62,7 @@ namespace Antlr3.Grammars
//System.out.println("start: "+start+", stop: "+stop);
if ( stop == null ||
( stop.TokenIndex < start.TokenIndex &&
-                      stop.Type != TokenConstants.EOF ) )
+                      stop.Type != TokenConstants.Eof ) )
{
// sometimes resync does not consume a token (when LT(1) is
// in follow set.  So, stop will be 1 to left to start. adjust.
@@ -94,7 +94,7 @@ namespace Antlr3.Grammars
{
int i = ( (IToken)start ).TokenIndex;
int j = ( (IToken)stop ).TokenIndex;
-                        if ( ( (IToken)stop ).Type == TokenConstants.EOF )
+                        if ( ( (IToken)stop ).Type == TokenConstants.Eof )
{
j = ( (ITokenStream)input ).Size();
}
@@ -121,7 +121,7 @@ namespace Antlr3.Grammars
{
get
{
-                    return TokenConstants.INVALID_TOKEN_TYPE;
+                    return TokenConstants.InvalidTokenType;
}
set
{
diff --git a/Antlr3/Grammars/ANTLRTreePrinter.cs b/Antlr3/Grammars/ANTLRTreePrinter.cs
index 2255d8c..bd44dd7 100644
--- a/Antlr3/Grammars/ANTLRTreePrinter.cs
+++ b/Antlr3/Grammars/ANTLRTreePrinter.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\ANTLRTreePrinter.g3 2009-03-20 14:32:48
+// $ANTLR 3.1.2 Grammars\\ANTLRTreePrinter.g3 2009-03-23 17:53:59

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -396,14 +396,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,LEXER_GRAMMAR,Follow._LEXER_GRAMMAR_in_grammar_127);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._grammarSpec_in_grammar_129);
grammarSpec("lexer ");

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -412,14 +412,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,PARSER_GRAMMAR,Follow._PARSER_GRAMMAR_in_grammar_139);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._grammarSpec_in_grammar_141);
grammarSpec("parser ");

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -428,14 +428,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,TREE_GRAMMAR,Follow._TREE_GRAMMAR_in_grammar_151);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._grammarSpec_in_grammar_153);
grammarSpec("tree ");

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -444,14 +444,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,COMBINED_GRAMMAR,Follow._COMBINED_GRAMMAR_in_grammar_163);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._grammarSpec_in_grammar_165);
grammarSpec("");

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -482,7 +482,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_attrScope181);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
Match(input,ID,Follow._ID_in_attrScope183);
// Grammars\\ANTLRTreePrinter.g3:115:18: ( ruleAction )*
for ( ; ; )
@@ -521,7 +521,7 @@ public partial class ANTLRTreePrinter : TreeParser

Match(input,ACTION,Follow._ACTION_in_attrScope188);

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -814,7 +814,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_action293);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
id1=(GrammarAST)Match(input,ID,Follow._ID_in_action297);
// Grammars\\ANTLRTreePrinter.g3:140:4: (id2= ID a1= ACTION |a2= ACTION )
int alt11=2;
@@ -857,7 +857,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

if ( showActions )
{
@@ -894,7 +894,7 @@ public partial class ANTLRTreePrinter : TreeParser

@out(" options {");

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:156:4: ( option )+
int cnt12=0;
for ( ; ; )
@@ -938,7 +938,7 @@ public partial class ANTLRTreePrinter : TreeParser

@out("} ");

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -969,7 +969,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_option391);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
id=(GrammarAST)Match(input,ID,Follow._ID_in_option395);
@out((id!=null?id.Text:null)+"=");
PushFollow(Follow._optionValue_in_option399);
@@ -978,7 +978,7 @@ public partial class ANTLRTreePrinter : TreeParser
state._fsp--;


-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -1100,7 +1100,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,IMPORT,Follow._IMPORT_in_delegateGrammars484);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:186:16: ( ^( ASSIGN ID ID ) | ID )+
int cnt14=0;
for ( ; ; )
@@ -1125,11 +1125,11 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_delegateGrammars489);

-					Match(input, TokenConstants.DOWN, null);
+					Match(input, TokenConstants.Down, null);
Match(input,ID,Follow._ID_in_delegateGrammars491);
Match(input,ID,Follow._ID_in_delegateGrammars493);

-					Match(input, TokenConstants.UP, null);
+					Match(input, TokenConstants.Up, null);

}
break;
@@ -1155,7 +1155,7 @@ public partial class ANTLRTreePrinter : TreeParser



-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -1184,7 +1184,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,TOKENS,Follow._TOKENS_in_tokensSpec516);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:190:14: ( tokenSpec )+
int cnt15=0;
for ( ; ; )
@@ -1226,7 +1226,7 @@ public partial class ANTLRTreePrinter : TreeParser



-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -1282,7 +1282,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_tokenSpec543);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
Match(input,TOKEN_REF,Follow._TOKEN_REF_in_tokenSpec545);
if ( input.LA(1)==CHAR_LITERAL||input.LA(1)==STRING_LITERAL )
{
@@ -1296,7 +1296,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -1398,7 +1398,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,RULE,Follow._RULE_in_rule582);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
id=(GrammarAST)Match(input,ID,Follow._ID_in_rule586);
// Grammars\\ANTLRTreePrinter.g3:204:4: ( modifier )?
int alt18=2;
@@ -1427,9 +1427,9 @@ public partial class ANTLRTreePrinter : TreeParser
@out((id!=null?id.Text:null));
Match(input,ARG,Follow._ARG_in_rule605);

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:206:10: (arg= ARG_ACTION )?
int alt19=2;
int LA19_0 = input.LA(1);
@@ -1452,13 +1452,13 @@ public partial class ANTLRTreePrinter : TreeParser
}


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);
}
Match(input,RET,Follow._RET_in_rule623);

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:207:10: (ret= ARG_ACTION )?
int alt20=2;
int LA20_0 = input.LA(1);
@@ -1481,7 +1481,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);
}
// Grammars\\ANTLRTreePrinter.g3:208:4: ( throwsSpec )?
int alt21=2;
@@ -1627,7 +1627,7 @@ public partial class ANTLRTreePrinter : TreeParser
Match(input,EOR,Follow._EOR_in_rule698);
@out(";\n");

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -1659,11 +1659,11 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_ruleAction716);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
id=(GrammarAST)Match(input,ID,Follow._ID_in_ruleAction720);
a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_ruleAction724);

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);
if ( showActions ) @out("@"+(id!=null?id.Text:null)+"{"+(a!=null?a.Text:null)+"}");

}
@@ -1737,7 +1737,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,THROWS,Follow._THROWS_in_throwsSpec773);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:238:15: ( ID )+
int cnt26=0;
for ( ; ; )
@@ -1775,7 +1775,7 @@ public partial class ANTLRTreePrinter : TreeParser



-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -1804,9 +1804,9 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_ruleScopeSpec790);

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:242:15: ( ruleAction )*
for ( ; ; )
{
@@ -1894,7 +1894,7 @@ public partial class ANTLRTreePrinter : TreeParser



-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);
}

}
@@ -1948,7 +1948,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:265:4: ( optionsSpec )?
int alt30=2;
int LA30_0 = input.LA(1);
@@ -2028,7 +2028,7 @@ public partial class ANTLRTreePrinter : TreeParser
Match(input,EOB,Follow._EOB_in_block865);
if ( forceParens||numAlts>1 ) @out(")");

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -2057,7 +2057,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,ALT,Follow._ALT_in_alternative887);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:272:11: ( element )+
int cnt32=0;
for ( ; ; )
@@ -2100,7 +2100,7 @@ public partial class ANTLRTreePrinter : TreeParser

Match(input,EOA,Follow._EOA_in_alternative894);

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -2252,11 +2252,11 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,CATCH,Follow._CATCH_in_exceptionHandler934);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
Match(input,ARG_ACTION,Follow._ARG_ACTION_in_exceptionHandler936);
Match(input,ACTION,Follow._ACTION_in_exceptionHandler938);

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -2285,10 +2285,10 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,FINALLY,Follow._FINALLY_in_finallyClause951);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
Match(input,ACTION,Follow._ACTION_in_finallyClause953);

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -2322,7 +2322,7 @@ public partial class ANTLRTreePrinter : TreeParser

@out(" ->");

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:290:4: ( SEMPRED )?
int alt36=2;
int LA36_0 = input.LA(1);
@@ -2420,7 +2420,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -2456,7 +2456,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,TEMPLATE,Follow._TEMPLATE_in_rewrite_template1038);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:302:4: (id= ID |ind= ACTION )
int alt38=2;
int LA38_0 = input.LA(1);
@@ -2500,9 +2500,9 @@ public partial class ANTLRTreePrinter : TreeParser

@out("(");

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:307:5: ( ^( ARG arg= ID a= ACTION ) )*
for ( ; ; )
{
@@ -2522,13 +2522,13 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,ARG,Follow._ARG_in_rewrite_template1088);

-						Match(input, TokenConstants.DOWN, null);
+						Match(input, TokenConstants.Down, null);
arg=(GrammarAST)Match(input,ID,Follow._ID_in_rewrite_template1092);
@out((arg!=null?arg.Text:null)+"=");
a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_rewrite_template1104);
@out((a!=null?a.Text:null));

-						Match(input, TokenConstants.UP, null);
+						Match(input, TokenConstants.Up, null);

}
break;
@@ -2544,7 +2544,7 @@ public partial class ANTLRTreePrinter : TreeParser

@out(")");

-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);
}
// Grammars\\ANTLRTreePrinter.g3:313:4: ( DOUBLE_QUOTE_STRING_LITERAL | DOUBLE_ANGLE_STRING_LITERAL )?
int alt40=3;
@@ -2580,7 +2580,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -2791,14 +2791,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,ROOT,Follow._ROOT_in_element1187);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._element_in_element1189);
element();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2807,14 +2807,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,BANG,Follow._BANG_in_element1196);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._element_in_element1198);
element();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2836,14 +2836,14 @@ public partial class ANTLRTreePrinter : TreeParser

@out("~");

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._element_in_element1214);
element();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2852,7 +2852,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,RANGE,Follow._RANGE_in_element1221);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._atom_in_element1223);
atom();

@@ -2865,7 +2865,7 @@ public partial class ANTLRTreePrinter : TreeParser
state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2874,7 +2874,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_element1234);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._atom_in_element1236);
atom();

@@ -2887,7 +2887,7 @@ public partial class ANTLRTreePrinter : TreeParser
state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2896,7 +2896,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_element1247);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
id=(GrammarAST)Match(input,ID,Follow._ID_in_element1251);
@out((id!=null?id.Text:null)+"=");
PushFollow(Follow._element_in_element1255);
@@ -2905,7 +2905,7 @@ public partial class ANTLRTreePrinter : TreeParser
state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2914,7 +2914,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_element1262);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
id2=(GrammarAST)Match(input,ID,Follow._ID_in_element1266);
@out((id2!=null?id2.Text:null)+"+=");
PushFollow(Follow._element_in_element1270);
@@ -2923,7 +2923,7 @@ public partial class ANTLRTreePrinter : TreeParser
state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2954,14 +2954,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,SYNPRED,Follow._SYNPRED_in_element1288);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._block_in_element1290);
block(true);

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);
@out("=>");

}
@@ -3019,9 +3019,9 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,BACKTRACK_SEMPRED,Follow._BACKTRACK_SEMPRED_in_element1343);

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null);
+					Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:357:24: ( . )*
for ( ; ; )
{
@@ -3058,7 +3058,7 @@ public partial class ANTLRTreePrinter : TreeParser



-					Match(input, TokenConstants.UP, null);
+					Match(input, TokenConstants.Up, null);
}

}
@@ -3154,14 +3154,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,OPTIONAL,Follow._OPTIONAL_in_ebnf1385);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._block_in_ebnf1387);
block(true);

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);
@out("? ");

}
@@ -3171,14 +3171,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,CLOSURE,Follow._CLOSURE_in_ebnf1399);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._block_in_ebnf1401);
block(true);

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);
@out("* ");

}
@@ -3188,14 +3188,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_ebnf1414);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._block_in_ebnf1416);
block(true);

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);
@out("+ ");

}
@@ -3229,7 +3229,7 @@ public partial class ANTLRTreePrinter : TreeParser

@out(" ^(");

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
PushFollow(Follow._element_in_tree_1437);
element();

@@ -3272,7 +3272,7 @@ public partial class ANTLRTreePrinter : TreeParser

@out(") ");

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -3390,9 +3390,9 @@ public partial class ANTLRTreePrinter : TreeParser

@out(((GrammarAST)retval.start).ToString());

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null);
+						Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:381:5: (rarg= ARG_ACTION )?
int alt46=2;
int LA46_0 = input.LA(1);
@@ -3439,7 +3439,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-						Match(input, TokenConstants.UP, null);
+						Match(input, TokenConstants.Up, null);
}

}
@@ -3451,9 +3451,9 @@ public partial class ANTLRTreePrinter : TreeParser

@out(((GrammarAST)retval.start).ToString());

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null);
+						Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:385:5: (targ= ARG_ACTION )?
int alt48=2;
int LA48_0 = input.LA(1);
@@ -3500,7 +3500,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-						Match(input, TokenConstants.UP, null);
+						Match(input, TokenConstants.Up, null);
}

}
@@ -3512,9 +3512,9 @@ public partial class ANTLRTreePrinter : TreeParser

@out(((GrammarAST)retval.start).ToString());

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null);
+						Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:389:5: ( ast_suffix )?
int alt50=2;
int LA50_0 = input.LA(1);
@@ -3540,7 +3540,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-						Match(input, TokenConstants.UP, null);
+						Match(input, TokenConstants.Up, null);
}

}
@@ -3552,9 +3552,9 @@ public partial class ANTLRTreePrinter : TreeParser

@out(((GrammarAST)retval.start).ToString());

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null);
+						Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:392:5: ( ast_suffix )?
int alt51=2;
int LA51_0 = input.LA(1);
@@ -3580,7 +3580,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-						Match(input, TokenConstants.UP, null);
+						Match(input, TokenConstants.Up, null);
}

}
@@ -3592,9 +3592,9 @@ public partial class ANTLRTreePrinter : TreeParser

@out(((GrammarAST)retval.start).ToString());

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null);
+						Match(input, TokenConstants.Down, null);
// Grammars\\ANTLRTreePrinter.g3:395:5: ( ast_suffix )?
int alt52=2;
int LA52_0 = input.LA(1);
@@ -3620,7 +3620,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-						Match(input, TokenConstants.UP, null);
+						Match(input, TokenConstants.Up, null);
}

}
@@ -3645,7 +3645,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,DOT,Follow._DOT_in_atom1631);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
ID6=(GrammarAST)Match(input,ID,Follow._ID_in_atom1633);
@out((ID6!=null?ID6.Text:null)+".");
PushFollow(Follow._atom_in_atom1637);
@@ -3654,7 +3654,7 @@ public partial class ANTLRTreePrinter : TreeParser
state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
diff --git a/Antlr3/Grammars/ActionAnalysisLexer.cs b/Antlr3/Grammars/ActionAnalysisLexer.cs
index 3bc0bbc..784c87d 100644
--- a/Antlr3/Grammars/ActionAnalysisLexer.cs
+++ b/Antlr3/Grammars/ActionAnalysisLexer.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\ActionAnalysisLexer.g3 2009-03-07 08:57:34
+// $ANTLR 3.1.2 Grammars\\ActionAnalysisLexer.g3 2009-03-23 17:53:56

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -84,12 +84,12 @@ public partial class ActionAnalysisLexer : Lexer
{
for ( ; ;)
{
-			if ( input.LA(1)==CharStreamConstants.EOF )
+			if ( input.LA(1)==CharStreamConstants.Eof )
{
-				return TokenConstants.EOF_TOKEN;
+				return TokenConstants.EofToken;
}
state.token = null;
-			state.channel = TokenConstants.DEFAULT_CHANNEL;
+			state.channel = TokenConstants.DefaultChannel;
state.tokenStartCharIndex = input.Index;
state.tokenStartCharPositionInLine = input.CharPositionInLine;
state.tokenStartLine = input.Line;
@@ -140,7 +140,7 @@ public partial class ActionAnalysisLexer : Lexer
try
{
int _type = X_Y;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken x=null;
IToken y=null;

@@ -150,11 +150,11 @@ public partial class ActionAnalysisLexer : Lexer
Match('$'); if (state.failed) return ;
int xStart57 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, xStart57, GetCharIndex()-1);
+			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart57, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart63 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, yStart63, GetCharIndex()-1);
+			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart63, GetCharIndex()-1);
if ( !((enclosingRule!=null)) )
{
if (state.backtracking>0) {state.failed=true; return ;}
@@ -219,7 +219,7 @@ public partial class ActionAnalysisLexer : Lexer
try
{
int _type = X;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken ID1=null;

// Grammars\\ActionAnalysisLexer.g3:135:4: ( '$' ID {...}?)
@@ -228,7 +228,7 @@ public partial class ActionAnalysisLexer : Lexer
Match('$'); if (state.failed) return ;
int ID1Start84 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID1 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ID1Start84, GetCharIndex()-1);
+			ID1 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID1Start84, GetCharIndex()-1);
if ( !((enclosingRule!=null && enclosingRule.getRuleLabel((ID1!=null?ID1.Text:null))!=null)) )
{
if (state.backtracking>0) {state.failed=true; return ;}
@@ -259,7 +259,7 @@ public partial class ActionAnalysisLexer : Lexer
try
{
int _type = Y;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken ID2=null;

// Grammars\\ActionAnalysisLexer.g3:144:4: ( '$' ID {...}?)
@@ -268,7 +268,7 @@ public partial class ActionAnalysisLexer : Lexer
Match('$'); if (state.failed) return ;
int ID2Start106 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID2 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ID2Start106, GetCharIndex()-1);
+			ID2 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID2Start106, GetCharIndex()-1);
if ( !((enclosingRule!=null && enclosingRule.getLocalAttributeScope((ID2!=null?ID2.Text:null))!=null)) )
{
if (state.backtracking>0) {state.failed=true; return ;}
diff --git a/Antlr3/Grammars/ActionAnalysisLexerHelper.cs b/Antlr3/Grammars/ActionAnalysisLexerHelper.cs
index 7cf2240..5f88792 100644
--- a/Antlr3/Grammars/ActionAnalysisLexerHelper.cs
+++ b/Antlr3/Grammars/ActionAnalysisLexerHelper.cs
@@ -4,7 +4,7 @@
* All rights reserved.
*
* Grammar conversion to ANTLR v3 and C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -58,7 +58,7 @@ namespace Antlr3.Grammars
do
{
t = NextToken();
-            } while ( t.Type != TokenConstants.EOF );
+            } while ( t.Type != TokenConstants.Eof );
}
}
}
diff --git a/Antlr3/Grammars/ActionTranslator.cs b/Antlr3/Grammars/ActionTranslator.cs
index fce14f7..7ab5050 100644
--- a/Antlr3/Grammars/ActionTranslator.cs
+++ b/Antlr3/Grammars/ActionTranslator.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\ActionTranslator.g3 2009-03-16 17:44:10
+// $ANTLR 3.1.2 Grammars\\ActionTranslator.g3 2009-03-23 17:53:53

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -108,12 +108,12 @@ public partial class ActionTranslator : Lexer
{
for ( ; ;)
{
-			if ( input.LA(1)==CharStreamConstants.EOF )
+			if ( input.LA(1)==CharStreamConstants.Eof )
{
-				return TokenConstants.EOF_TOKEN;
+				return TokenConstants.EofToken;
}
state.token = null;
-			state.channel = TokenConstants.DEFAULT_CHANNEL;
+			state.channel = TokenConstants.DefaultChannel;
state.tokenStartCharIndex = input.Index;
state.tokenStartCharPositionInLine = input.CharPositionInLine;
state.tokenStartLine = input.Line;
@@ -164,7 +164,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = SET_ENCLOSING_RULE_SCOPE_ATTR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken x=null;
IToken y=null;
IToken expr=null;
@@ -175,11 +175,11 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart60 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, xStart60, GetCharIndex()-1);
+			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart60, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart66 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, yStart66, GetCharIndex()-1);
+			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart66, GetCharIndex()-1);
// Grammars\\ActionTranslator.g3:91:22: ( WS )?
int alt1=2;
int LA1_0 = input.LA(1);
@@ -203,7 +203,7 @@ public partial class ActionTranslator : Lexer
Match('='); if (state.failed) return ;
int exprStart75 = GetCharIndex();
mATTR_VALUE_EXPR(); if (state.failed) return ;
-			expr = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, exprStart75, GetCharIndex()-1);
+			expr = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, exprStart75, GetCharIndex()-1);
Match(';'); if (state.failed) return ;
if ( !((enclosingRule!=null &&
(x!=null?x.Text:null).Equals(enclosingRule.name) &&
@@ -278,7 +278,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = ENCLOSING_RULE_SCOPE_ATTR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken x=null;
IToken y=null;

@@ -288,11 +288,11 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart107 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, xStart107, GetCharIndex()-1);
+			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart107, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart113 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, yStart113, GetCharIndex()-1);
+			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart113, GetCharIndex()-1);
if ( !((enclosingRule!=null &&
(x!=null?x.Text:null).Equals(enclosingRule.name) &&
enclosingRule.getLocalAttributeScope((y!=null?y.Text:null))!=null)) )
@@ -358,7 +358,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = SET_TOKEN_SCOPE_ATTR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken x=null;
IToken y=null;

@@ -368,11 +368,11 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart139 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, xStart139, GetCharIndex()-1);
+			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart139, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart145 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, yStart145, GetCharIndex()-1);
+			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart145, GetCharIndex()-1);
// Grammars\\ActionTranslator.g3:188:22: ( WS )?
int alt2=2;
int LA2_0 = input.LA(1);
@@ -430,7 +430,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = TOKEN_SCOPE_ATTR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken x=null;
IToken y=null;

@@ -440,11 +440,11 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart184 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, xStart184, GetCharIndex()-1);
+			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart184, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart190 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, yStart190, GetCharIndex()-1);
+			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart190, GetCharIndex()-1);
if ( !((enclosingRule!=null &&
(enclosingRule.getTokenLabel((x!=null?x.Text:null))!=null||
isTokenRefInAlt((x!=null?x.Text:null))) &&
@@ -497,7 +497,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = SET_RULE_SCOPE_ATTR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken x=null;
IToken y=null;

@@ -511,11 +511,11 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart221 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, xStart221, GetCharIndex()-1);
+			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart221, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart227 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, yStart227, GetCharIndex()-1);
+			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart227, GetCharIndex()-1);
// Grammars\\ActionTranslator.g3:248:22: ( WS )?
int alt3=2;
int LA3_0 = input.LA(1);
@@ -587,7 +587,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = RULE_SCOPE_ATTR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken x=null;
IToken y=null;

@@ -601,11 +601,11 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart280 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, xStart280, GetCharIndex()-1);
+			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart280, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart286 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, yStart286, GetCharIndex()-1);
+			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart286, GetCharIndex()-1);
if ( !((enclosingRule!=null)) )
{
if (state.backtracking>0) {state.failed=true; return ;}
@@ -693,7 +693,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = LABEL_REF;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken ID1=null;

// Grammars\\ActionTranslator.g3:343:4: ( '$' ID {...}?)
@@ -702,7 +702,7 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int ID1Start328 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID1 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ID1Start328, GetCharIndex()-1);
+			ID1 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID1Start328, GetCharIndex()-1);
if ( !((enclosingRule!=null &&
getElementLabel((ID1!=null?ID1.Text:null))!=null &&
enclosingRule.getRuleLabel((ID1!=null?ID1.Text:null))==null)) )
@@ -746,7 +746,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = ISOLATED_TOKEN_REF;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken ID2=null;

// Grammars\\ActionTranslator.g3:366:4: ( '$' ID {...}?)
@@ -755,7 +755,7 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int ID2Start352 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID2 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ID2Start352, GetCharIndex()-1);
+			ID2 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID2Start352, GetCharIndex()-1);
if ( !((grammar.type!=Grammar.LEXER && enclosingRule!=null && isTokenRefInAlt((ID2!=null?ID2.Text:null)))) )
{
if (state.backtracking>0) {state.failed=true; return ;}
@@ -798,7 +798,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = ISOLATED_LEXER_RULE_REF;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken ID3=null;

// Grammars\\ActionTranslator.g3:388:4: ( '$' ID {...}?)
@@ -807,7 +807,7 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int ID3Start376 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID3 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ID3Start376, GetCharIndex()-1);
+			ID3 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID3Start376, GetCharIndex()-1);
if ( !((grammar.type==Grammar.LEXER &&
enclosingRule!=null &&
isRuleRefInAlt((ID3!=null?ID3.Text:null)))) )
@@ -852,7 +852,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = SET_LOCAL_ATTR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken expr=null;
IToken ID4=null;

@@ -862,7 +862,7 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int ID4Start400 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID4 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ID4Start400, GetCharIndex()-1);
+			ID4 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID4Start400, GetCharIndex()-1);
// Grammars\\ActionTranslator.g3:422:11: ( WS )?
int alt4=2;
int LA4_0 = input.LA(1);
@@ -886,7 +886,7 @@ public partial class ActionTranslator : Lexer
Match('='); if (state.failed) return ;
int exprStart409 = GetCharIndex();
mATTR_VALUE_EXPR(); if (state.failed) return ;
-			expr = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, exprStart409, GetCharIndex()-1);
+			expr = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, exprStart409, GetCharIndex()-1);
Match(';'); if (state.failed) return ;
if ( !((enclosingRule!=null
&& enclosingRule.getLocalAttributeScope((ID4!=null?ID4.Text:null))!=null
@@ -952,7 +952,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = LOCAL_ATTR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken ID5=null;

// Grammars\\ActionTranslator.g3:464:4: ( '$' ID {...}?)
@@ -961,7 +961,7 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int ID5Start432 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID5 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ID5Start432, GetCharIndex()-1);
+			ID5 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID5Start432, GetCharIndex()-1);
if ( !((enclosingRule!=null && enclosingRule.getLocalAttributeScope((ID5!=null?ID5.Text:null))!=null)) )
{
if (state.backtracking>0) {state.failed=true; return ;}
@@ -1016,7 +1016,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = SET_DYNAMIC_SCOPE_ATTR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken x=null;
IToken y=null;
IToken expr=null;
@@ -1027,12 +1027,12 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart458 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, xStart458, GetCharIndex()-1);
+			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart458, GetCharIndex()-1);
Match("::"); if (state.failed) return ;

int yStart464 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, yStart464, GetCharIndex()-1);
+			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart464, GetCharIndex()-1);
// Grammars\\ActionTranslator.g3:509:23: ( WS )?
int alt5=2;
int LA5_0 = input.LA(1);
@@ -1056,7 +1056,7 @@ public partial class ActionTranslator : Lexer
Match('='); if (state.failed) return ;
int exprStart473 = GetCharIndex();
mATTR_VALUE_EXPR(); if (state.failed) return ;
-			expr = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, exprStart473, GetCharIndex()-1);
+			expr = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, exprStart473, GetCharIndex()-1);
Match(';'); if (state.failed) return ;
if ( !((resolveDynamicScope((x!=null?x.Text:null))!=null &&
resolveDynamicScope((x!=null?x.Text:null)).getAttribute((y!=null?y.Text:null))!=null)) )
@@ -1099,7 +1099,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = DYNAMIC_SCOPE_ATTR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken x=null;
IToken y=null;

@@ -1109,12 +1109,12 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart508 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, xStart508, GetCharIndex()-1);
+			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart508, GetCharIndex()-1);
Match("::"); if (state.failed) return ;

int yStart514 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, yStart514, GetCharIndex()-1);
+			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart514, GetCharIndex()-1);
if ( !((resolveDynamicScope((x!=null?x.Text:null))!=null &&
resolveDynamicScope((x!=null?x.Text:null)).getAttribute((y!=null?y.Text:null))!=null)) )
{
@@ -1155,7 +1155,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = ERROR_SCOPED_XY;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken x=null;
IToken y=null;

@@ -1165,12 +1165,12 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart548 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, xStart548, GetCharIndex()-1);
+			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart548, GetCharIndex()-1);
Match("::"); if (state.failed) return ;

int yStart554 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, yStart554, GetCharIndex()-1);
+			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart554, GetCharIndex()-1);
if ( state.backtracking==1 )
{

@@ -1198,7 +1198,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = DYNAMIC_NEGATIVE_INDEXED_SCOPE_ATTR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken x=null;
IToken expr=null;
IToken y=null;
@@ -1209,18 +1209,18 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart576 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, xStart576, GetCharIndex()-1);
+			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart576, GetCharIndex()-1);
Match('['); if (state.failed) return ;
Match('-'); if (state.failed) return ;
int exprStart584 = GetCharIndex();
mSCOPE_INDEX_EXPR(); if (state.failed) return ;
-			expr = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, exprStart584, GetCharIndex()-1);
+			expr = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, exprStart584, GetCharIndex()-1);
Match(']'); if (state.failed) return ;
Match("::"); if (state.failed) return ;

int yStart592 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, yStart592, GetCharIndex()-1);
+			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart592, GetCharIndex()-1);
if ( state.backtracking==1 )
{

@@ -1248,7 +1248,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = DYNAMIC_ABSOLUTE_INDEXED_SCOPE_ATTR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken x=null;
IToken expr=null;
IToken y=null;
@@ -1259,17 +1259,17 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart616 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, xStart616, GetCharIndex()-1);
+			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart616, GetCharIndex()-1);
Match('['); if (state.failed) return ;
int exprStart622 = GetCharIndex();
mSCOPE_INDEX_EXPR(); if (state.failed) return ;
-			expr = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, exprStart622, GetCharIndex()-1);
+			expr = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, exprStart622, GetCharIndex()-1);
Match(']'); if (state.failed) return ;
Match("::"); if (state.failed) return ;

int yStart630 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, yStart630, GetCharIndex()-1);
+			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart630, GetCharIndex()-1);
if ( state.backtracking==1 )
{

@@ -1353,7 +1353,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = ISOLATED_DYNAMIC_SCOPE;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken ID6=null;

// Grammars\\ActionTranslator.g3:601:4: ( '$' ID {...}?)
@@ -1362,7 +1362,7 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int ID6Start673 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID6 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ID6Start673, GetCharIndex()-1);
+			ID6 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID6Start673, GetCharIndex()-1);
if ( !((resolveDynamicScope((ID6!=null?ID6.Text:null))!=null)) )
{
if (state.backtracking>0) {state.failed=true; return ;}
@@ -1393,7 +1393,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = TEMPLATE_INSTANCE;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ActionTranslator.g3:614:4: ( '%' ID '(' ( ( WS )? ARG ( ',' ( WS )? ARG )* ( WS )? )? ')' )
// Grammars\\ActionTranslator.g3:614:4: '%' ID '(' ( ( WS )? ARG ( ',' ( WS )? ARG )* ( WS )? )? ')'
{
@@ -1551,7 +1551,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = INDIRECT_TEMPLATE_INSTANCE;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ActionTranslator.g3:637:4: ( '%' '(' ACTION ')' '(' ( ( WS )? ARG ( ',' ( WS )? ARG )* ( WS )? )? ')' )
// Grammars\\ActionTranslator.g3:637:4: '%' '(' ACTION ')' '(' ( ( WS )? ARG ( ',' ( WS )? ARG )* ( WS )? )? ')'
{
@@ -1724,7 +1724,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = SET_EXPR_ATTRIBUTE;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken a=null;
IToken expr=null;
IToken ID7=null;
@@ -1735,11 +1735,11 @@ public partial class ActionTranslator : Lexer
Match('%'); if (state.failed) return ;
int aStart823 = GetCharIndex();
mACTION(); if (state.failed) return ;
-			a = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, aStart823, GetCharIndex()-1);
+			a = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, aStart823, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int ID7Start827 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID7 = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, ID7Start827, GetCharIndex()-1);
+			ID7 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID7Start827, GetCharIndex()-1);
// Grammars\\ActionTranslator.g3:656:24: ( WS )?
int alt17=2;
int LA17_0 = input.LA(1);
@@ -1763,7 +1763,7 @@ public partial class ActionTranslator : Lexer
Match('='); if (state.failed) return ;
int exprStart836 = GetCharIndex();
mATTR_VALUE_EXPR(); if (state.failed) return ;
-			expr = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, exprStart836, GetCharIndex()-1);
+			expr = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, exprStart836, GetCharIndex()-1);
Match(';'); if (state.failed) return ;
if ( state.backtracking==1 )
{
@@ -1794,7 +1794,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = SET_ATTRIBUTE;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken x=null;
IToken y=null;
IToken expr=null;
@@ -1805,11 +1805,11 @@ public partial class ActionTranslator : Lexer
Match('%'); if (state.failed) return ;
int xStart863 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, xStart863, GetCharIndex()-1);
+			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart863, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart869 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, yStart869, GetCharIndex()-1);
+			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart869, GetCharIndex()-1);
// Grammars\\ActionTranslator.g3:673:22: ( WS )?
int alt18=2;
int LA18_0 = input.LA(1);
@@ -1833,7 +1833,7 @@ public partial class ActionTranslator : Lexer
Match('='); if (state.failed) return ;
int exprStart878 = GetCharIndex();
mATTR_VALUE_EXPR(); if (state.failed) return ;
-			expr = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, exprStart878, GetCharIndex()-1);
+			expr = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, exprStart878, GetCharIndex()-1);
Match(';'); if (state.failed) return ;
if ( state.backtracking==1 )
{
@@ -1924,7 +1924,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = TEMPLATE_EXPR;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken a=null;

// Grammars\\ActionTranslator.g3:691:4: ( '%' a= ACTION )
@@ -1933,7 +1933,7 @@ public partial class ActionTranslator : Lexer
Match('%'); if (state.failed) return ;
int aStart927 = GetCharIndex();
mACTION(); if (state.failed) return ;
-			a = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, aStart927, GetCharIndex()-1);
+			a = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, aStart927, GetCharIndex()-1);
if ( state.backtracking==1 )
{

@@ -2016,7 +2016,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = ESC;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ActionTranslator.g3:707:4: ( '\\\\' '$' | '\\\\' '%' | '\\\\' ~ ( '$' | '%' ) )
int alt21=3;
int LA21_0 = input.LA(1);
@@ -2108,7 +2108,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = ERROR_XY;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken x=null;
IToken y=null;

@@ -2118,11 +2118,11 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart1016 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, xStart1016, GetCharIndex()-1);
+			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart1016, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart1022 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, yStart1022, GetCharIndex()-1);
+			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart1022, GetCharIndex()-1);
if ( state.backtracking==1 )
{

@@ -2150,7 +2150,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = ERROR_X;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
IToken x=null;

// Grammars\\ActionTranslator.g3:723:4: ( '$' x= ID )
@@ -2159,7 +2159,7 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart1042 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, xStart1042, GetCharIndex()-1);
+			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart1042, GetCharIndex()-1);
if ( state.backtracking==1 )
{

@@ -2187,7 +2187,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = UNKNOWN_SYNTAX;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ActionTranslator.g3:733:4: ( '$' | '%' ( ID | '.' | '(' | ')' | ',' | '{' | '}' | '\"' )* )
int alt23=2;
int LA23_0 = input.LA(1);
@@ -2330,7 +2330,7 @@ public partial class ActionTranslator : Lexer
try
{
int _type = TEXT;
-			int _channel = DEFAULT_TOKEN_CHANNEL;
+			int _channel = DefaultTokenChannel;
// Grammars\\ActionTranslator.g3:749:4: ( (~ ( '$' | '%' | '\\\\' ) )+ )
// Grammars\\ActionTranslator.g3:749:4: (~ ( '$' | '%' | '\\\\' ) )+
{
diff --git a/Antlr3/Grammars/ActionTranslatorHelper.cs b/Antlr3/Grammars/ActionTranslatorHelper.cs
index e2cc475..ff8959b 100644
--- a/Antlr3/Grammars/ActionTranslatorHelper.cs
+++ b/Antlr3/Grammars/ActionTranslatorHelper.cs
@@ -4,7 +4,7 @@
* All rights reserved.
*
* Grammar conversion to ANTLR v3 and C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -93,7 +93,7 @@ namespace Antlr3.Grammars
do
{
t = NextToken();
-            } while ( t.Type != TokenConstants.EOF );
+            } while ( t.Type != TokenConstants.Eof );
return chunks;
}

diff --git a/Antlr3/Grammars/AssignTokenTypesWalker.cs b/Antlr3/Grammars/AssignTokenTypesWalker.cs
index 7de5b44..6a657a3 100644
--- a/Antlr3/Grammars/AssignTokenTypesWalker.cs
+++ b/Antlr3/Grammars/AssignTokenTypesWalker.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\AssignTokenTypesWalker.g3 2009-03-20 14:32:49
+// $ANTLR 3.1.2 Grammars\\AssignTokenTypesWalker.g3 2009-03-23 17:54:01

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -282,14 +282,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,LEXER_GRAMMAR,Follow._LEXER_GRAMMAR_in_grammar_68);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._grammarSpec_in_grammar_73);
grammarSpec();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -298,14 +298,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,PARSER_GRAMMAR,Follow._PARSER_GRAMMAR_in_grammar_83);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._grammarSpec_in_grammar_87);
grammarSpec();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -314,14 +314,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,TREE_GRAMMAR,Follow._TREE_GRAMMAR_in_grammar_97);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._grammarSpec_in_grammar_103);
grammarSpec();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -330,14 +330,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,COMBINED_GRAMMAR,Follow._COMBINED_GRAMMAR_in_grammar_113);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._grammarSpec_in_grammar_115);
grammarSpec();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -520,9 +520,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_grammarSpec178);

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null);
+						Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:159:17: ( . )*
for ( ; ; )
{
@@ -559,7 +559,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-						Match(input, TokenConstants.UP, null);
+						Match(input, TokenConstants.Up, null);
}

}
@@ -607,7 +607,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_attrScope203);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
Match(input,ID,Follow._ID_in_attrScope205);
// Grammars\\AssignTokenTypesWalker.g3:164:18: ( ^( AMPERSAND ( . )* ) )*
for ( ; ; )
@@ -628,9 +628,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_attrScope210);

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null);
+						Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:164:32: ( . )*
for ( ; ; )
{
@@ -667,7 +667,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-						Match(input, TokenConstants.UP, null);
+						Match(input, TokenConstants.Up, null);
}

}
@@ -684,7 +684,7 @@ public partial class AssignTokenTypesWalker : TreeParser

Match(input,ACTION,Follow._ACTION_in_attrScope219);

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -716,7 +716,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_optionsSpec238);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:168:15: ( option[$opts] )+
int cnt11=0;
for ( ; ; )
@@ -758,7 +758,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -790,7 +790,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_option260);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
ID1=(GrammarAST)Match(input,ID,Follow._ID_in_option262);
PushFollow(Follow._optionValue_in_option264);
optionValue2=optionValue();
@@ -798,7 +798,7 @@ public partial class AssignTokenTypesWalker : TreeParser
state._fsp--;


-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

string key = (ID1!=null?ID1.Text:null);
opts[key] = (optionValue2!=null?optionValue2.value:default(Object));
@@ -934,14 +934,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,CHARSET,Follow._CHARSET_in_charSet323);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
PushFollow(Follow._charSetElement_in_charSet325);
charSetElement();

state._fsp--;


-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -1006,11 +1006,11 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,OR,Follow._OR_in_charSetElement345);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_charSetElement347);
Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_charSetElement349);

-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -1019,11 +1019,11 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,RANGE,Follow._RANGE_in_charSetElement358);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_charSetElement360);
Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_charSetElement362);

-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -1054,7 +1054,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,IMPORT,Follow._IMPORT_in_delegateGrammars377);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:210:4: ( ^( ASSIGN ID ID ) | ID )+
int cnt14=0;
for ( ; ; )
@@ -1079,11 +1079,11 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_delegateGrammars385);

-					Match(input, TokenConstants.DOWN, null);
+					Match(input, TokenConstants.Down, null);
Match(input,ID,Follow._ID_in_delegateGrammars387);
Match(input,ID,Follow._ID_in_delegateGrammars389);

-					Match(input, TokenConstants.UP, null);
+					Match(input, TokenConstants.Up, null);

}
break;
@@ -1109,7 +1109,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -1138,7 +1138,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,TOKENS,Follow._TOKENS_in_tokensSpec420);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:217:14: ( tokenSpec )+
int cnt15=0;
for ( ; ; )
@@ -1180,7 +1180,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -1242,7 +1242,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_tokenSpec458);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
t2=(GrammarAST)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_tokenSpec465);
trackToken(t2);
// Grammars\\AssignTokenTypesWalker.g3:224:4: (s= STRING_LITERAL |c= CHAR_LITERAL )
@@ -1285,7 +1285,7 @@ public partial class AssignTokenTypesWalker : TreeParser
}


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -1386,7 +1386,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,RULE,Follow._RULE_in_rule531);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
id=(GrammarAST)Match(input,ID,Follow._ID_in_rule535);
currentRuleName=(id!=null?id.Text:null);
// Grammars\\AssignTokenTypesWalker.g3:236:4: (m= modifier )?
@@ -1415,9 +1415,9 @@ public partial class AssignTokenTypesWalker : TreeParser

Match(input,ARG,Follow._ARG_in_rule553);

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:237:10: ( ARG_ACTION )?
int alt20=2;
int LA20_0 = input.LA(1);
@@ -1439,13 +1439,13 @@ public partial class AssignTokenTypesWalker : TreeParser
}


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);
}
Match(input,RET,Follow._RET_in_rule565);

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:238:10: ( ARG_ACTION )?
int alt21=2;
int LA21_0 = input.LA(1);
@@ -1467,7 +1467,7 @@ public partial class AssignTokenTypesWalker : TreeParser
}


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);
}
// Grammars\\AssignTokenTypesWalker.g3:239:4: ( throwsSpec )?
int alt22=2;
@@ -1560,9 +1560,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_rule603);

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null);
+						Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:242:18: ( . )*
for ( ; ; )
{
@@ -1599,7 +1599,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-						Match(input, TokenConstants.UP, null);
+						Match(input, TokenConstants.Up, null);
}

}
@@ -1646,7 +1646,7 @@ public partial class AssignTokenTypesWalker : TreeParser
Match(input,EOR,Follow._EOR_in_rule630);
trackTokenRule(id,(m!=null?((GrammarAST)m.start):null),(b!=null?((GrammarAST)b.start):null));

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -1718,7 +1718,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,THROWS,Follow._THROWS_in_throwsSpec677);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:258:15: ( ID )+
int cnt28=0;
for ( ; ; )
@@ -1756,7 +1756,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -1785,9 +1785,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_ruleScopeSpec694);

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:262:15: ( ^( AMPERSAND ( . )* ) )*
for ( ; ; )
{
@@ -1807,9 +1807,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_ruleScopeSpec699);

-						if ( input.LA(1)==TokenConstants.DOWN )
+						if ( input.LA(1)==TokenConstants.Down )
{
-							Match(input, TokenConstants.DOWN, null);
+							Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:262:29: ( . )*
for ( ; ; )
{
@@ -1846,7 +1846,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-							Match(input, TokenConstants.UP, null);
+							Match(input, TokenConstants.Up, null);
}

}
@@ -1913,7 +1913,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);
}

}
@@ -1949,7 +1949,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,BLOCK,Follow._BLOCK_in_block733);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:267:4: ( optionsSpec )?
int alt33=2;
int LA33_0 = input.LA(1);
@@ -2021,7 +2021,7 @@ public partial class AssignTokenTypesWalker : TreeParser

Match(input,EOB,Follow._EOB_in_block758);

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -2050,7 +2050,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,ALT,Follow._ALT_in_alternative775);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:274:11: ( element )+
int cnt35=0;
for ( ; ; )
@@ -2093,7 +2093,7 @@ public partial class AssignTokenTypesWalker : TreeParser

Match(input,EOA,Follow._EOA_in_alternative782);

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -2245,11 +2245,11 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,CATCH,Follow._CATCH_in_exceptionHandler822);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
Match(input,ARG_ACTION,Follow._ARG_ACTION_in_exceptionHandler824);
Match(input,ACTION,Follow._ACTION_in_exceptionHandler826);

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -2278,10 +2278,10 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,FINALLY,Follow._FINALLY_in_finallyClause839);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
Match(input,ACTION,Follow._ACTION_in_finallyClause841);

-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -2327,9 +2327,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,REWRITE,Follow._REWRITE_in_rewrite856);

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null);
+						Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:291:16: ( . )*
for ( ; ; )
{
@@ -2366,7 +2366,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-						Match(input, TokenConstants.UP, null);
+						Match(input, TokenConstants.Up, null);
}

}
@@ -2521,14 +2521,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,ROOT,Follow._ROOT_in_element875);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._element_in_element877);
element();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2537,14 +2537,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,BANG,Follow._BANG_in_element884);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._element_in_element886);
element();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2564,14 +2564,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,NOT,Follow._NOT_in_element898);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._element_in_element900);
element();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2580,7 +2580,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,RANGE,Follow._RANGE_in_element907);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._atom_in_element909);
atom();

@@ -2592,7 +2592,7 @@ public partial class AssignTokenTypesWalker : TreeParser
state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2601,7 +2601,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_element918);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._atom_in_element920);
atom();

@@ -2613,7 +2613,7 @@ public partial class AssignTokenTypesWalker : TreeParser
state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2622,7 +2622,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_element929);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
Match(input,ID,Follow._ID_in_element931);
PushFollow(Follow._element_in_element933);
element();
@@ -2630,7 +2630,7 @@ public partial class AssignTokenTypesWalker : TreeParser
state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2639,7 +2639,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_element940);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
Match(input,ID,Follow._ID_in_element942);
PushFollow(Follow._element_in_element944);
element();
@@ -2647,7 +2647,7 @@ public partial class AssignTokenTypesWalker : TreeParser
state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2678,14 +2678,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,SYNPRED,Follow._SYNPRED_in_element962);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._block_in_element964);
block();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2722,9 +2722,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,BACKTRACK_SEMPRED,Follow._BACKTRACK_SEMPRED_in_element992);

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null);
+					Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:310:24: ( . )*
for ( ; ; )
{
@@ -2761,7 +2761,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-					Match(input, TokenConstants.UP, null);
+					Match(input, TokenConstants.Up, null);
}

}
@@ -2852,14 +2852,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,OPTIONAL,Follow._OPTIONAL_in_ebnf1024);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._block_in_ebnf1026);
block();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2868,14 +2868,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,CLOSURE,Follow._CLOSURE_in_ebnf1035);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._block_in_ebnf1037);
block();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2884,14 +2884,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_ebnf1046);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
PushFollow(Follow._block_in_ebnf1048);
block();

state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
@@ -2922,7 +2922,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_tree_1062);

-			Match(input, TokenConstants.DOWN, null);
+			Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:323:17: ( element )+
int cnt44=0;
for ( ; ; )
@@ -2964,7 +2964,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-			Match(input, TokenConstants.UP, null);
+			Match(input, TokenConstants.Up, null);

}

@@ -3041,9 +3041,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,RULE_REF,Follow._RULE_REF_in_atom1079);

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null);
+					Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:327:16: ( ARG_ACTION )?
int alt45=2;
int LA45_0 = input.LA(1);
@@ -3065,7 +3065,7 @@ public partial class AssignTokenTypesWalker : TreeParser
}


-					Match(input, TokenConstants.UP, null);
+					Match(input, TokenConstants.Up, null);
}

}
@@ -3075,9 +3075,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
t=(GrammarAST)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_atom1095);

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null);
+					Match(input, TokenConstants.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:328:19: ( ARG_ACTION )?
int alt46=2;
int LA46_0 = input.LA(1);
@@ -3099,7 +3099,7 @@ public partial class AssignTokenTypesWalker : TreeParser
}


-					Match(input, TokenConstants.UP, null);
+					Match(input, TokenConstants.Up, null);
}
trackToken(t);

@@ -3133,7 +3133,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,DOT,Follow._DOT_in_atom1136);

-				Match(input, TokenConstants.DOWN, null);
+				Match(input, TokenConstants.Down, null);
Match(input,ID,Follow._ID_in_atom1138);
PushFollow(Follow._atom_in_atom1140);
atom();
@@ -3141,7 +3141,7 @@ public partial class AssignTokenTypesWalker : TreeParser
state._fsp--;


-				Match(input, TokenConstants.UP, null);
+				Match(input, TokenConstants.Up, null);

}
break;
diff --git a/Antlr3/Grammars/CodeGenTreeWalker.cs b/Antlr3/Grammars/CodeGenTreeWalker.cs
index 372c66b..8661fd1 100644
--- a/Antlr3/Grammars/CodeGenTreeWalker.cs
+++ b/Antlr3/Grammars/CodeGenTreeWalker.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\CodeGenTreeWalker.g3 2009-03-20 14:32:43
+// $ANTLR 3.1.2 Grammars\\CodeGenTreeWalker.g3 2009-03-23 17:53:55

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -264,14 +264,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,LEXER_GRAMMAR,Follow._LEXER_GRAMMAR_in_grammar_66); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
PushFollow(Follow._grammarSpec_in_grammar_68);
grammarSpec();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -280,14 +280,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,PARSER_GRAMMAR,Follow._PARSER_GRAMMAR_in_grammar_78); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
PushFollow(Follow._grammarSpec_in_grammar_80);
grammarSpec();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -296,14 +296,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,TREE_GRAMMAR,Follow._TREE_GRAMMAR_in_grammar_90); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
PushFollow(Follow._grammarSpec_in_grammar_92);
grammarSpec();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -312,14 +312,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,COMBINED_GRAMMAR,Follow._COMBINED_GRAMMAR_in_grammar_102); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
PushFollow(Follow._grammarSpec_in_grammar_104);
grammarSpec();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -354,7 +354,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_attrScope123); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
Match(input,ID,Follow._ID_in_attrScope125); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:137:18: ( ^( AMPERSAND ( . )* ) )*
for ( ; ; )
@@ -375,9 +375,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_attrScope130); if (state.failed) return ;

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+						Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:137:32: ( . )*
for ( ; ; )
{
@@ -414,7 +414,7 @@ public partial class CodeGenTreeWalker : TreeParser



-						Match(input, TokenConstants.UP, null); if (state.failed) return ;
+						Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -431,7 +431,7 @@ public partial class CodeGenTreeWalker : TreeParser

Match(input,ACTION,Follow._ACTION_in_attrScope139); if (state.failed) return ;

-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;

}

@@ -514,9 +514,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_grammarSpec185); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+					Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:155:15: ( . )*
for ( ; ; )
{
@@ -553,7 +553,7 @@ public partial class CodeGenTreeWalker : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return ;
+					Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -576,9 +576,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,IMPORT,Follow._IMPORT_in_grammarSpec199); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+					Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:156:14: ( . )*
for ( ; ; )
{
@@ -615,7 +615,7 @@ public partial class CodeGenTreeWalker : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return ;
+					Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -638,9 +638,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,TOKENS,Follow._TOKENS_in_grammarSpec213); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+					Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:157:14: ( . )*
for ( ; ; )
{
@@ -677,7 +677,7 @@ public partial class CodeGenTreeWalker : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return ;
+					Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -739,9 +739,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_grammarSpec234); if (state.failed) return ;

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+						Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:159:17: ( . )*
for ( ; ; )
{
@@ -778,7 +778,7 @@ public partial class CodeGenTreeWalker : TreeParser



-						Match(input, TokenConstants.UP, null); if (state.failed) return ;
+						Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -913,9 +913,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,RULE,Follow._RULE_in_rules304); if (state.failed) return ;

-						if ( input.LA(1)==TokenConstants.DOWN )
+						if ( input.LA(1)==TokenConstants.Down )
{
-							Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+							Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:180:13: ( . )*
for ( ; ; )
{
@@ -952,7 +952,7 @@ public partial class CodeGenTreeWalker : TreeParser



-							Match(input, TokenConstants.UP, null); if (state.failed) return ;
+							Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -1046,7 +1046,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,RULE,Follow._RULE_in_rule345); if (state.failed) return retval;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
id=(GrammarAST)Match(input,ID,Follow._ID_in_rule349); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
@@ -1078,9 +1078,9 @@ public partial class CodeGenTreeWalker : TreeParser

Match(input,ARG,Follow._ARG_in_rule370); if (state.failed) return retval;

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:219:10: ( ARG_ACTION )?
int alt18=2;
int LA18_0 = input.LA(1);
@@ -1102,13 +1102,13 @@ public partial class CodeGenTreeWalker : TreeParser
}


-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}
Match(input,RET,Follow._RET_in_rule382); if (state.failed) return retval;

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:220:10: ( ARG_ACTION )?
int alt19=2;
int LA19_0 = input.LA(1);
@@ -1130,7 +1130,7 @@ public partial class CodeGenTreeWalker : TreeParser
}


-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}
// Grammars\\CodeGenTreeWalker.g3:221:4: ( throwsSpec )?
int alt20=2;
@@ -1171,9 +1171,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_rule404); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:222:16: ( . )*
for ( ; ; )
{
@@ -1210,7 +1210,7 @@ public partial class CodeGenTreeWalker : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}

}
@@ -1261,9 +1261,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_rule427); if (state.failed) return retval;

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+						Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:224:18: ( . )*
for ( ; ; )
{
@@ -1300,7 +1300,7 @@ public partial class CodeGenTreeWalker : TreeParser



-						Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+						Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}

}
@@ -1398,7 +1398,7 @@ public partial class CodeGenTreeWalker : TreeParser

Match(input,EOR,Follow._EOR_in_rule462); if (state.failed) return retval;

-			Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -1504,7 +1504,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,THROWS,Follow._THROWS_in_throwsSpec512); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:319:15: ( ID )+
int cnt27=0;
for ( ; ; )
@@ -1543,7 +1543,7 @@ public partial class CodeGenTreeWalker : TreeParser



-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;

}

@@ -1572,9 +1572,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_ruleScopeSpec529); if (state.failed) return ;

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:323:15: ( ^( AMPERSAND ( . )* ) )*
for ( ; ; )
{
@@ -1594,9 +1594,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_ruleScopeSpec534); if (state.failed) return ;

-						if ( input.LA(1)==TokenConstants.DOWN )
+						if ( input.LA(1)==TokenConstants.Down )
{
-							Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+							Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:323:29: ( . )*
for ( ; ; )
{
@@ -1633,7 +1633,7 @@ public partial class CodeGenTreeWalker : TreeParser



-							Match(input, TokenConstants.UP, null); if (state.failed) return ;
+							Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -1700,7 +1700,7 @@ public partial class CodeGenTreeWalker : TreeParser



-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -1824,7 +1824,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,BLOCK,Follow._BLOCK_in_block604); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:364:4: ( ^( OPTIONS ( . )* ) )?
int alt33=2;
int LA33_0 = input.LA(1);
@@ -1840,9 +1840,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_block612); if (state.failed) return retval;

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+						Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:364:16: ( . )*
for ( ; ; )
{
@@ -1879,7 +1879,7 @@ public partial class CodeGenTreeWalker : TreeParser



-						Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+						Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}

}
@@ -1960,7 +1960,7 @@ public partial class CodeGenTreeWalker : TreeParser

Match(input,EOB,Follow._EOB_in_block650); if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -2016,9 +2016,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
s=(GrammarAST)Match(input,BLOCK,Follow._BLOCK_in_setBlock682); if (state.failed) return retval;

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:411:14: ( . )*
for ( ; ; )
{
@@ -2055,7 +2055,7 @@ public partial class CodeGenTreeWalker : TreeParser



-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -2120,7 +2120,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,ALT,Follow._ALT_in_setAlternative702); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:447:10: ( setElement )+
int cnt37=0;
for ( ; ; )
@@ -2164,7 +2164,7 @@ public partial class CodeGenTreeWalker : TreeParser

Match(input,EOA,Follow._EOA_in_setAlternative707); if (state.failed) return ;

-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;

}

@@ -2321,11 +2321,11 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,CATCH,Follow._CATCH_in_exceptionHandler751); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
ARG_ACTION3=(GrammarAST)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_exceptionHandler753); if (state.failed) return ;
ACTION2=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_exceptionHandler755); if (state.failed) return ;

-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{

@@ -2363,10 +2363,10 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,FINALLY,Follow._FINALLY_in_finallyClause773); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
ACTION4=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_finallyClause775); if (state.failed) return ;

-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{

@@ -2447,7 +2447,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
a=(GrammarAST)Match(input,ALT,Follow._ALT_in_alternative804); if (state.failed) return retval;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:509:4: (e= element[null,null] )+
int cnt41=0;
for ( ; ; )
@@ -2504,7 +2504,7 @@ public partial class CodeGenTreeWalker : TreeParser

Match(input,EOA,Follow._EOA_in_alternative835); if (state.failed) return retval;

-			Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}

@@ -2564,14 +2564,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
ROOT5=(GrammarAST)Match(input,ROOT,Follow._ROOT_in_element870); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_element874);
e=element(label, ROOT5);

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = (e!=null?e.code:default(StringTemplate));
@@ -2584,14 +2584,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
BANG6=(GrammarAST)Match(input,BANG,Follow._BANG_in_element887); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_element891);
e=element(label, BANG6);

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = (e!=null?e.code:default(StringTemplate));
@@ -2604,14 +2604,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
n=(GrammarAST)Match(input,NOT,Follow._NOT_in_element907); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._notElement_in_element909);
notElement7=notElement(n, label, astSuffix);

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = notElement7;
@@ -2624,7 +2624,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_element924); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
alabel=(GrammarAST)Match(input,ID,Follow._ID_in_element928); if (state.failed) return retval;
PushFollow(Follow._element_in_element932);
e=element(alabel, astSuffix);
@@ -2632,7 +2632,7 @@ public partial class CodeGenTreeWalker : TreeParser
state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = (e!=null?e.code:default(StringTemplate));
@@ -2645,7 +2645,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_element947); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
label2=(GrammarAST)Match(input,ID,Follow._ID_in_element951); if (state.failed) return retval;
PushFollow(Follow._element_in_element955);
e=element(label2, astSuffix);
@@ -2653,7 +2653,7 @@ public partial class CodeGenTreeWalker : TreeParser
state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = (e!=null?e.code:default(StringTemplate));
@@ -2666,11 +2666,11 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_element969); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
a=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_element973); if (state.failed) return retval;
b=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_element977); if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -2814,9 +2814,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,SYNPRED,Follow._SYNPRED_in_element1075); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:583:14: ( . )*
for ( ; ; )
{
@@ -2853,7 +2853,7 @@ public partial class CodeGenTreeWalker : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}

}
@@ -2863,9 +2863,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,BACKTRACK_SEMPRED,Follow._BACKTRACK_SEMPRED_in_element1086); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:585:24: ( . )*
for ( ; ; )
{
@@ -2902,7 +2902,7 @@ public partial class CodeGenTreeWalker : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}

}
@@ -3134,9 +3134,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
assign_st=(GrammarAST)Match(input,BLOCK,Follow._BLOCK_in_notElement1195); if (state.failed) return code;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return code;
+					Match(input, TokenConstants.Down, null); if (state.failed) return code;
// Grammars\\CodeGenTreeWalker.g3:644:23: ( . )*
for ( ; ; )
{
@@ -3173,7 +3173,7 @@ public partial class CodeGenTreeWalker : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return code;
+					Match(input, TokenConstants.Up, null); if (state.failed) return code;
}
if ( state.backtracking == 0 )
{
@@ -3308,14 +3308,14 @@ public partial class CodeGenTreeWalker : TreeParser
}
Match(input,OPTIONAL,Follow._OPTIONAL_in_ebnf1260); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._block_in_ebnf1264);
blk=block("optionalBlock", dfa);

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = (blk!=null?blk.code:default(StringTemplate));
@@ -3332,14 +3332,14 @@ public partial class CodeGenTreeWalker : TreeParser
}
Match(input,CLOSURE,Follow._CLOSURE_in_ebnf1285); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._block_in_ebnf1289);
blk=block("closureBlock", dfa);

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = (blk!=null?blk.code:default(StringTemplate));
@@ -3356,14 +3356,14 @@ public partial class CodeGenTreeWalker : TreeParser
}
Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_ebnf1310); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._block_in_ebnf1314);
blk=block("positiveClosureBlock", dfa);

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = (blk!=null?blk.code:default(StringTemplate));
@@ -3442,7 +3442,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_tree_1352); if (state.failed) return retval;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_tree_1359);
el=element(null, rootSuffix);

@@ -3568,7 +3568,7 @@ public partial class CodeGenTreeWalker : TreeParser



-			Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}

@@ -3691,9 +3691,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
r=(GrammarAST)Match(input,RULE_REF,Follow._RULE_REF_in_atom1469); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:780:20: (rarg= ARG_ACTION )?
int alt52=2;
int LA52_0 = input.LA(1);
@@ -3715,7 +3715,7 @@ public partial class CodeGenTreeWalker : TreeParser
}


-					Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -3771,9 +3771,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
t=(GrammarAST)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_atom1492); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:825:19: (targ= ARG_ACTION )?
int alt53=2;
int LA53_0 = input.LA(1);
@@ -3795,7 +3795,7 @@ public partial class CodeGenTreeWalker : TreeParser
}


-					Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -3958,7 +3958,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,DOT,Follow._DOT_in_atom1549); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
ID12=(GrammarAST)Match(input,ID,Follow._ID_in_atom1551); if (state.failed) return retval;
PushFollow(Follow._atom_in_atom1555);
a=atom(ID12, label, astSuffix);
@@ -3966,7 +3966,7 @@ public partial class CodeGenTreeWalker : TreeParser
state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = (a!=null?a.code:default(StringTemplate));
@@ -4066,9 +4066,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
s=(GrammarAST)Match(input,BLOCK,Follow._BLOCK_in_set1613); if (state.failed) return code;

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null); if (state.failed) return code;
+				Match(input, TokenConstants.Down, null); if (state.failed) return code;
// Grammars\\CodeGenTreeWalker.g3:974:14: ( . )*
for ( ; ; )
{
@@ -4105,7 +4105,7 @@ public partial class CodeGenTreeWalker : TreeParser



-				Match(input, TokenConstants.UP, null); if (state.failed) return code;
+				Match(input, TokenConstants.Up, null); if (state.failed) return code;
}
if ( state.backtracking == 0 )
{
@@ -4204,11 +4204,11 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_setElement1649); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_setElement1651); if (state.failed) return ;
Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_setElement1653); if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -4319,7 +4319,7 @@ public partial class CodeGenTreeWalker : TreeParser
}
r=(GrammarAST)Match(input,REWRITE,Follow._REWRITE_in_rewrite1690); if (state.failed) return retval;

-					Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:1048:17: (pred= SEMPRED )?
int alt57=2;
int LA57_0 = input.LA(1);
@@ -4346,7 +4346,7 @@ public partial class CodeGenTreeWalker : TreeParser
state._fsp--;
if (state.failed) return retval;

-					Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -4434,7 +4434,7 @@ public partial class CodeGenTreeWalker : TreeParser

}

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return code;
+			Match(input, TokenConstants.Down, null); if (state.failed) return code;
PushFollow(Follow._rewrite_alternative_in_rewrite_block1748);
alt=rewrite_alternative();

@@ -4442,7 +4442,7 @@ public partial class CodeGenTreeWalker : TreeParser
if (state.failed) return code;
Match(input,EOB,Follow._EOB_in_rewrite_block1753); if (state.failed) return code;

-			Match(input, TokenConstants.UP, null); if (state.failed) return code;
+			Match(input, TokenConstants.Up, null); if (state.failed) return code;
if ( state.backtracking == 0 )
{

@@ -4594,7 +4594,7 @@ public partial class CodeGenTreeWalker : TreeParser
code =templates.GetInstanceOf("rewriteElementList");
}

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return code;
+				Match(input, TokenConstants.Down, null); if (state.failed) return code;
// Grammars\\CodeGenTreeWalker.g3:1100:4: ( (el= rewrite_element )+ | EPSILON )
int alt60=2;
int LA60_0 = input.LA(1);
@@ -4693,7 +4693,7 @@ public partial class CodeGenTreeWalker : TreeParser

Match(input,EOA,Follow._EOA_in_rewrite_alternative1843); if (state.failed) return code;

-				Match(input, TokenConstants.UP, null); if (state.failed) return code;
+				Match(input, TokenConstants.Up, null); if (state.failed) return code;

}
break;
@@ -4911,14 +4911,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,OPTIONAL,Follow._OPTIONAL_in_rewrite_ebnf1929); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._rewrite_block_in_rewrite_ebnf1931);
rewrite_block19=rewrite_block("rewriteOptionalBlock");

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = rewrite_block19;
@@ -4939,14 +4939,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,CLOSURE,Follow._CLOSURE_in_rewrite_ebnf1949); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._rewrite_block_in_rewrite_ebnf1951);
rewrite_block20=rewrite_block("rewriteClosureBlock");

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = rewrite_block20;
@@ -4967,14 +4967,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_rewrite_ebnf1969); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._rewrite_block_in_rewrite_ebnf1971);
rewrite_block21=rewrite_block("rewritePositiveClosureBlock");

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = rewrite_block21;
@@ -5036,7 +5036,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_rewrite_tree2004); if (state.failed) return retval;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._rewrite_atom_in_rewrite_tree2011);
r=rewrite_atom(true);

@@ -5098,7 +5098,7 @@ public partial class CodeGenTreeWalker : TreeParser



-			Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -5266,9 +5266,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
tk=(GrammarAST)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_rewrite_atom2093); if (state.failed) return retval;

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+						Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:1243:20: (arg= ARG_ACTION )?
int alt65=2;
int LA65_0 = input.LA(1);
@@ -5290,7 +5290,7 @@ public partial class CodeGenTreeWalker : TreeParser
}


-						Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+						Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}

}
@@ -5512,11 +5512,11 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,ALT,Follow._ALT_in_rewrite_template2164); if (state.failed) return code;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return code;
+				Match(input, TokenConstants.Down, null); if (state.failed) return code;
Match(input,EPSILON,Follow._EPSILON_in_rewrite_template2166); if (state.failed) return code;
Match(input,EOA,Follow._EOA_in_rewrite_template2168); if (state.failed) return code;

-				Match(input, TokenConstants.UP, null); if (state.failed) return code;
+				Match(input, TokenConstants.Up, null); if (state.failed) return code;
if ( state.backtracking == 0 )
{
code =templates.GetInstanceOf("rewriteEmptyTemplate");
@@ -5529,7 +5529,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,TEMPLATE,Follow._TEMPLATE_in_rewrite_template2179); if (state.failed) return code;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return code;
+				Match(input, TokenConstants.Down, null); if (state.failed) return code;
// Grammars\\CodeGenTreeWalker.g3:1362:16: (id= ID |ind= ACTION )
int alt68=2;
int LA68_0 = input.LA(1);
@@ -5590,9 +5590,9 @@ public partial class CodeGenTreeWalker : TreeParser
}
Match(input,ARGLIST,Follow._ARGLIST_in_rewrite_template2201); if (state.failed) return code;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return code;
+					Match(input, TokenConstants.Down, null); if (state.failed) return code;
// Grammars\\CodeGenTreeWalker.g3:1381:5: ( ^( ARG arg= ID a= ACTION ) )*
for ( ; ; )
{
@@ -5612,7 +5612,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,ARG,Follow._ARG_in_rewrite_template2211); if (state.failed) return code;

-							Match(input, TokenConstants.DOWN, null); if (state.failed) return code;
+							Match(input, TokenConstants.Down, null); if (state.failed) return code;
arg=(GrammarAST)Match(input,ID,Follow._ID_in_rewrite_template2215); if (state.failed) return code;
a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_rewrite_template2219); if (state.failed) return code;
if ( state.backtracking == 0 )
@@ -5627,7 +5627,7 @@ public partial class CodeGenTreeWalker : TreeParser

}

-							Match(input, TokenConstants.UP, null); if (state.failed) return code;
+							Match(input, TokenConstants.Up, null); if (state.failed) return code;

}
break;
@@ -5642,7 +5642,7 @@ public partial class CodeGenTreeWalker : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return code;
+					Match(input, TokenConstants.Up, null); if (state.failed) return code;
}
// Grammars\\CodeGenTreeWalker.g3:1393:4: ( DOUBLE_QUOTE_STRING_LITERAL | DOUBLE_ANGLE_STRING_LITERAL )?
int alt70=3;
@@ -5694,7 +5694,7 @@ public partial class CodeGenTreeWalker : TreeParser
}


-				Match(input, TokenConstants.UP, null); if (state.failed) return code;
+				Match(input, TokenConstants.Up, null); if (state.failed) return code;

}
break;
diff --git a/Antlr3/Grammars/DefineGrammarItemsWalker.cs b/Antlr3/Grammars/DefineGrammarItemsWalker.cs
index daa8c2a..4ce36da 100644
--- a/Antlr3/Grammars/DefineGrammarItemsWalker.cs
+++ b/Antlr3/Grammars/DefineGrammarItemsWalker.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\DefineGrammarItemsWalker.g3 2009-03-20 14:32:51
+// $ANTLR 3.1.2 Grammars\\DefineGrammarItemsWalker.g3 2009-03-23 17:54:02

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -254,14 +254,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
grammar.type = Grammar.LEXER;
}

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._grammarSpec_in_grammar_83);
grammarSpec();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -275,14 +275,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
grammar.type = Grammar.PARSER;
}

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._grammarSpec_in_grammar_97);
grammarSpec();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -296,14 +296,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
grammar.type = Grammar.TREE_PARSER;
}

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._grammarSpec_in_grammar_111);
grammarSpec();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -317,14 +317,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
grammar.type = Grammar.COMBINED;
}

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._grammarSpec_in_grammar_125);
grammarSpec();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -369,7 +369,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_attrScope150); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
name=(GrammarAST)Match(input,ID,Follow._ID_in_attrScope154); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:113:23: ( attrScopeAction )*
for ( ; ; )
@@ -408,7 +408,7 @@ public partial class DefineGrammarItemsWalker : TreeParser

attrs=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_attrScope161); if (state.failed) return ;

-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{

@@ -452,11 +452,11 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_attrScopeAction179); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
ID1=(GrammarAST)Match(input,ID,Follow._ID_in_attrScopeAction181); if (state.failed) return ;
ACTION2=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_attrScopeAction183); if (state.failed) return ;

-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{

@@ -754,7 +754,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
amp=(GrammarAST)Match(input,AMPERSAND,Follow._AMPERSAND_in_action286); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
id1=(GrammarAST)Match(input,ID,Follow._ID_in_action290); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:152:4: (id2= ID a1= ACTION |a2= ACTION )
int alt10=2;
@@ -804,7 +804,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}


-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{

@@ -839,9 +839,9 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_optionsSpec353); if (state.failed) return ;

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:164:14: ( . )*
for ( ; ; )
{
@@ -878,7 +878,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -908,7 +908,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,IMPORT,Follow._IMPORT_in_delegateGrammars370); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:168:16: ( ^( ASSIGN ID ID ) | ID )+
int cnt12=0;
for ( ; ; )
@@ -933,11 +933,11 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_delegateGrammars375); if (state.failed) return ;

-					Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+					Match(input, TokenConstants.Down, null); if (state.failed) return ;
Match(input,ID,Follow._ID_in_delegateGrammars377); if (state.failed) return ;
Match(input,ID,Follow._ID_in_delegateGrammars379); if (state.failed) return ;

-					Match(input, TokenConstants.UP, null); if (state.failed) return ;
+					Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -964,7 +964,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;

}

@@ -993,7 +993,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,TOKENS,Follow._TOKENS_in_tokensSpec402); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:172:14: ( tokenSpec )+
int cnt13=0;
for ( ; ; )
@@ -1036,7 +1036,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;

}

@@ -1095,7 +1095,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_tokenSpec431); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
Match(input,TOKEN_REF,Follow._TOKEN_REF_in_tokenSpec436); if (state.failed) return ;
if ( input.LA(1)==CHAR_LITERAL||input.LA(1)==STRING_LITERAL )
{
@@ -1110,7 +1110,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}


-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -1227,7 +1227,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
RULE3=(GrammarAST)Match(input,RULE,Follow._RULE_in_rule491); if (state.failed) return retval;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
id=(GrammarAST)Match(input,ID,Follow._ID_in_rule495); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
@@ -1259,9 +1259,9 @@ public partial class DefineGrammarItemsWalker : TreeParser

Match(input,ARG,Follow._ARG_in_rule512); if (state.failed) return retval;

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\DefineGrammarItemsWalker.g3:198:11: (args= ARG_ACTION )?
int alt17=2;
int LA17_0 = input.LA(1);
@@ -1283,13 +1283,13 @@ public partial class DefineGrammarItemsWalker : TreeParser
}


-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}
Match(input,RET,Follow._RET_in_rule528); if (state.failed) return retval;

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\DefineGrammarItemsWalker.g3:199:11: (ret= ARG_ACTION )?
int alt18=2;
int LA18_0 = input.LA(1);
@@ -1311,7 +1311,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}


-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}
// Grammars\\DefineGrammarItemsWalker.g3:200:4: ( throwsSpec )?
int alt19=2;
@@ -1496,7 +1496,7 @@ public partial class DefineGrammarItemsWalker : TreeParser

}

-			Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}

@@ -1529,11 +1529,11 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
amp=(GrammarAST)Match(input,AMPERSAND,Follow._AMPERSAND_in_ruleAction625); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
id=(GrammarAST)Match(input,ID,Follow._ID_in_ruleAction629); if (state.failed) return ;
a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_ruleAction633); if (state.failed) return ;

-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{
if (r!=null) r.defineNamedAction(amp,id,a);
@@ -1622,7 +1622,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,THROWS,Follow._THROWS_in_throwsSpec693); if (state.failed) return exceptions;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return exceptions;
+			Match(input, TokenConstants.Down, null); if (state.failed) return exceptions;
// Grammars\\DefineGrammarItemsWalker.g3:266:15: ( ID )+
int cnt24=0;
for ( ; ; )
@@ -1665,7 +1665,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-			Match(input, TokenConstants.UP, null); if (state.failed) return exceptions;
+			Match(input, TokenConstants.Up, null); if (state.failed) return exceptions;

}

@@ -1702,9 +1702,9 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_ruleScopeSpec726); if (state.failed) return ;

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:276:4: ( ( attrScopeAction )* attrs= ACTION )?
int alt26=2;
int LA26_0 = input.LA(1);
@@ -1817,7 +1817,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -1861,7 +1861,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,BLOCK,Follow._BLOCK_in_block793); if (state.failed) return retval;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\DefineGrammarItemsWalker.g3:311:4: ( optionsSpec )?
int alt28=2;
int LA28_0 = input.LA(1);
@@ -1973,7 +1973,7 @@ public partial class DefineGrammarItemsWalker : TreeParser

Match(input,EOB,Follow._EOB_in_block835); if (state.failed) return retval;

-			Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}

@@ -2007,11 +2007,11 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
amp=(GrammarAST)Match(input,AMPERSAND,Follow._AMPERSAND_in_blockAction859); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
id=(GrammarAST)Match(input,ID,Follow._ID_in_blockAction863); if (state.failed) return ;
a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_blockAction867); if (state.failed) return ;

-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;

}

@@ -2067,7 +2067,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,ALT,Follow._ALT_in_alternative888); if (state.failed) return retval;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\DefineGrammarItemsWalker.g3:352:11: ( element )+
int cnt31=0;
for ( ; ; )
@@ -2111,7 +2111,7 @@ public partial class DefineGrammarItemsWalker : TreeParser

Match(input,EOA,Follow._EOA_in_alternative895); if (state.failed) return retval;

-			Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}

@@ -2267,11 +2267,11 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,CATCH,Follow._CATCH_in_exceptionHandler937); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
Match(input,ARG_ACTION,Follow._ARG_ACTION_in_exceptionHandler939); if (state.failed) return ;
ACTION7=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_exceptionHandler941); if (state.failed) return ;

-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{
trackInlineAction(ACTION7);
@@ -2306,10 +2306,10 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,FINALLY,Follow._FINALLY_in_finallyClause959); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
ACTION8=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_finallyClause961); if (state.failed) return ;

-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{
trackInlineAction(ACTION8);
@@ -2362,14 +2362,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,ROOT,Follow._ROOT_in_element978); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_element980);
element();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -2378,14 +2378,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,BANG,Follow._BANG_in_element989); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_element991);
element();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -2405,14 +2405,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,NOT,Follow._NOT_in_element1008); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_element1010);
element();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -2421,7 +2421,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,RANGE,Follow._RANGE_in_element1019); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._atom_in_element1021);
atom(null);

@@ -2433,7 +2433,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -2442,7 +2442,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_element1034); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._atom_in_element1036);
atom(null);

@@ -2454,7 +2454,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -2463,7 +2463,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_element1048); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
id=(GrammarAST)Match(input,ID,Follow._ID_in_element1052); if (state.failed) return retval;
PushFollow(Follow._element_in_element1056);
el=element();
@@ -2471,7 +2471,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -2502,7 +2502,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_element1069); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
id2=(GrammarAST)Match(input,ID,Follow._ID_in_element1073); if (state.failed) return retval;
PushFollow(Follow._element_in_element1077);
a2=element();
@@ -2532,7 +2532,7 @@ public partial class DefineGrammarItemsWalker : TreeParser

}

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -2563,14 +2563,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,SYNPRED,Follow._SYNPRED_in_element1110); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._block_in_element1112);
block();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -2628,9 +2628,9 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,BACKTRACK_SEMPRED,Follow._BACKTRACK_SEMPRED_in_element1166); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\DefineGrammarItemsWalker.g3:435:26: ( . )*
for ( ; ; )
{
@@ -2667,7 +2667,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}

}
@@ -2748,14 +2748,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,OPTIONAL,Follow._OPTIONAL_in_ebnf1219); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
PushFollow(Follow._block_in_ebnf1221);
block();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -2764,14 +2764,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,CLOSURE,Follow._CLOSURE_in_ebnf1230); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
PushFollow(Follow._block_in_ebnf1232);
block();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -2780,14 +2780,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_ebnf1241); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
PushFollow(Follow._block_in_ebnf1243);
block();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -2848,14 +2848,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,CLOSURE,Follow._CLOSURE_in_dotLoop1262); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._dotBlock_in_dotLoop1264);
dotBlock();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -2864,14 +2864,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_dotLoop1274); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._dotBlock_in_dotLoop1276);
dotBlock();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -2921,17 +2921,17 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,BLOCK,Follow._BLOCK_in_dotBlock1299); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
Match(input,ALT,Follow._ALT_in_dotBlock1303); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
Match(input,WILDCARD,Follow._WILDCARD_in_dotBlock1305); if (state.failed) return ;
Match(input,EOA,Follow._EOA_in_dotBlock1307); if (state.failed) return ;

-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;
Match(input,EOB,Follow._EOB_in_dotBlock1311); if (state.failed) return ;

-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;

}

@@ -2960,7 +2960,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_tree_1325); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:477:17: ( element )+
int cnt39=0;
for ( ; ; )
@@ -3003,7 +3003,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;

}

@@ -3085,9 +3085,9 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
rr=(GrammarAST)Match(input,RULE_REF,Follow._RULE_REF_in_atom1345); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+					Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:481:19: (rarg= ARG_ACTION )?
int alt40=2;
int LA40_0 = input.LA(1);
@@ -3109,7 +3109,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}


-					Match(input, TokenConstants.UP, null); if (state.failed) return ;
+					Match(input, TokenConstants.Up, null); if (state.failed) return ;
}
if ( state.backtracking == 0 )
{
@@ -3130,9 +3130,9 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
t=(GrammarAST)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_atom1367); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+					Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:490:19: (targ= ARG_ACTION )?
int alt41=2;
int LA41_0 = input.LA(1);
@@ -3154,7 +3154,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}


-					Match(input, TokenConstants.UP, null); if (state.failed) return ;
+					Match(input, TokenConstants.Up, null); if (state.failed) return ;
}
if ( state.backtracking == 0 )
{
@@ -3225,7 +3225,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,DOT,Follow._DOT_in_atom1415); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
ID11=(GrammarAST)Match(input,ID,Follow._ID_in_atom1417); if (state.failed) return ;
PushFollow(Follow._atom_in_atom1419);
atom(ID11);
@@ -3233,7 +3233,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -3335,7 +3335,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,REWRITE,Follow._REWRITE_in_rewrite1461); if (state.failed) return retval;

-					Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\DefineGrammarItemsWalker.g3:544:15: (pred= SEMPRED )?
int alt43=2;
int LA43_0 = input.LA(1);
@@ -3362,7 +3362,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
state._fsp--;
if (state.failed) return retval;

-					Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -3430,7 +3430,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,BLOCK,Follow._BLOCK_in_rewrite_block1505); if (state.failed) return retval;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._rewrite_alternative_in_rewrite_block1507);
rewrite_alternative();

@@ -3438,7 +3438,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
if (state.failed) return retval;
Match(input,EOB,Follow._EOB_in_rewrite_block1509); if (state.failed) return retval;

-			Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -3580,7 +3580,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}
a=(GrammarAST)Match(input,ALT,Follow._ALT_in_rewrite_alternative1541); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:583:36: ( ( rewrite_element )+ | EPSILON )
int alt46=2;
int LA46_0 = input.LA(1);
@@ -3661,7 +3661,7 @@ public partial class DefineGrammarItemsWalker : TreeParser

Match(input,EOA,Follow._EOA_in_rewrite_alternative1558); if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -3842,14 +3842,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,OPTIONAL,Follow._OPTIONAL_in_rewrite_ebnf1611); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
PushFollow(Follow._rewrite_block_in_rewrite_ebnf1613);
rewrite_block();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -3858,14 +3858,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,CLOSURE,Follow._CLOSURE_in_rewrite_ebnf1622); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
PushFollow(Follow._rewrite_block_in_rewrite_ebnf1624);
rewrite_block();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -3874,14 +3874,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_rewrite_ebnf1633); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
PushFollow(Follow._rewrite_block_in_rewrite_ebnf1635);
rewrite_block();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -3912,7 +3912,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_rewrite_tree1652); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
PushFollow(Follow._rewrite_atom_in_rewrite_tree1654);
rewrite_atom();

@@ -3954,7 +3954,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;

}

@@ -4094,9 +4094,9 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,TOKEN_REF,Follow._TOKEN_REF_in_rewrite_atom1689); if (state.failed) return retval;

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+						Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\DefineGrammarItemsWalker.g3:633:5: ( ARG_ACTION )?
int alt51=2;
int LA51_0 = input.LA(1);
@@ -4125,7 +4125,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}


-						Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+						Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}

}
@@ -4234,11 +4234,11 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,ALT,Follow._ALT_in_rewrite_template1759); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
Match(input,EPSILON,Follow._EPSILON_in_rewrite_template1761); if (state.failed) return ;
Match(input,EOA,Follow._EOA_in_rewrite_template1763); if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -4247,7 +4247,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,TEMPLATE,Follow._TEMPLATE_in_rewrite_template1772); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:653:16: (id= ID |ind= ACTION )
int alt54=2;
int LA54_0 = input.LA(1);
@@ -4288,9 +4288,9 @@ public partial class DefineGrammarItemsWalker : TreeParser

Match(input,ARGLIST,Follow._ARGLIST_in_rewrite_template1789); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+					Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:655:5: ( ^( ARG arg= ID a= ACTION ) )*
for ( ; ; )
{
@@ -4310,11 +4310,11 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,ARG,Follow._ARG_in_rewrite_template1799); if (state.failed) return ;

-							Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+							Match(input, TokenConstants.Down, null); if (state.failed) return ;
arg=(GrammarAST)Match(input,ID,Follow._ID_in_rewrite_template1803); if (state.failed) return ;
a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_rewrite_template1807); if (state.failed) return ;

-							Match(input, TokenConstants.UP, null); if (state.failed) return ;
+							Match(input, TokenConstants.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{

@@ -4336,7 +4336,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return ;
+					Match(input, TokenConstants.Up, null); if (state.failed) return ;
}
if ( state.backtracking == 0 )
{
@@ -4380,7 +4380,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}


-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
diff --git a/Antlr3/Grammars/TreeToNFAConverter.cs b/Antlr3/Grammars/TreeToNFAConverter.cs
index 69f1812..816240c 100644
--- a/Antlr3/Grammars/TreeToNFAConverter.cs
+++ b/Antlr3/Grammars/TreeToNFAConverter.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\TreeToNFAConverter.g3 2009-03-20 14:32:52
+// $ANTLR 3.1.2 Grammars\\TreeToNFAConverter.g3 2009-03-23 17:54:04

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -228,14 +228,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,LEXER_GRAMMAR,Follow._LEXER_GRAMMAR_in_grammar_67); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
PushFollow(Follow._grammarSpec_in_grammar_69);
grammarSpec();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -244,14 +244,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,PARSER_GRAMMAR,Follow._PARSER_GRAMMAR_in_grammar_79); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
PushFollow(Follow._grammarSpec_in_grammar_81);
grammarSpec();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -260,14 +260,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,TREE_GRAMMAR,Follow._TREE_GRAMMAR_in_grammar_91); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
PushFollow(Follow._grammarSpec_in_grammar_93);
grammarSpec();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -276,14 +276,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,COMBINED_GRAMMAR,Follow._COMBINED_GRAMMAR_in_grammar_103); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
PushFollow(Follow._grammarSpec_in_grammar_105);
grammarSpec();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -324,7 +324,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_attrScope124); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
Match(input,ID,Follow._ID_in_attrScope126); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:101:18: ( ^( AMPERSAND ( . )* ) )*
for ( ; ; )
@@ -345,9 +345,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_attrScope131); if (state.failed) return ;

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+						Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:101:32: ( . )*
for ( ; ; )
{
@@ -384,7 +384,7 @@ public partial class TreeToNFAConverter : TreeParser



-						Match(input, TokenConstants.UP, null); if (state.failed) return ;
+						Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -401,7 +401,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,ACTION,Follow._ACTION_in_attrScope140); if (state.failed) return ;

-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;

}

@@ -466,9 +466,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_grammarSpec169); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+					Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:107:15: ( . )*
for ( ; ; )
{
@@ -505,7 +505,7 @@ public partial class TreeToNFAConverter : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return ;
+					Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -528,9 +528,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,IMPORT,Follow._IMPORT_in_grammarSpec183); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+					Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:108:14: ( . )*
for ( ; ; )
{
@@ -567,7 +567,7 @@ public partial class TreeToNFAConverter : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return ;
+					Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -590,9 +590,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,TOKENS,Follow._TOKENS_in_grammarSpec197); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+					Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:109:14: ( . )*
for ( ; ; )
{
@@ -629,7 +629,7 @@ public partial class TreeToNFAConverter : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return ;
+					Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -691,9 +691,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_grammarSpec218); if (state.failed) return ;

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+						Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:111:17: ( . )*
for ( ; ; )
{
@@ -730,7 +730,7 @@ public partial class TreeToNFAConverter : TreeParser



-						Match(input, TokenConstants.UP, null); if (state.failed) return ;
+						Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -854,7 +854,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,RULE,Follow._RULE_in_rule255); if (state.failed) return retval;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
id=(GrammarAST)Match(input,ID,Follow._ID_in_rule259); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
@@ -889,9 +889,9 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,ARG,Follow._ARG_in_rule278); if (state.failed) return retval;

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:126:10: ( ARG_ACTION )?
int alt16=2;
int LA16_0 = input.LA(1);
@@ -913,13 +913,13 @@ public partial class TreeToNFAConverter : TreeParser
}


-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}
Match(input,RET,Follow._RET_in_rule290); if (state.failed) return retval;

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:127:10: ( ARG_ACTION )?
int alt17=2;
int LA17_0 = input.LA(1);
@@ -941,7 +941,7 @@ public partial class TreeToNFAConverter : TreeParser
}


-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}
// Grammars\\TreeToNFAConverter.g3:128:4: ( throwsSpec )?
int alt18=2;
@@ -982,9 +982,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_rule312); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:129:16: ( . )*
for ( ; ; )
{
@@ -1021,7 +1021,7 @@ public partial class TreeToNFAConverter : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}

}
@@ -1072,9 +1072,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_rule337); if (state.failed) return retval;

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+						Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:131:18: ( . )*
for ( ; ; )
{
@@ -1111,7 +1111,7 @@ public partial class TreeToNFAConverter : TreeParser



-						Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+						Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}

}
@@ -1192,7 +1192,7 @@ public partial class TreeToNFAConverter : TreeParser

}

-			Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}

@@ -1259,7 +1259,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,THROWS,Follow._THROWS_in_throwsSpec411); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:178:15: ( ID )+
int cnt25=0;
for ( ; ; )
@@ -1298,7 +1298,7 @@ public partial class TreeToNFAConverter : TreeParser



-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;

}

@@ -1327,9 +1327,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_ruleScopeSpec428); if (state.failed) return ;

-			if ( input.LA(1)==TokenConstants.DOWN )
+			if ( input.LA(1)==TokenConstants.Down )
{
-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:182:15: ( ^( AMPERSAND ( . )* ) )*
for ( ; ; )
{
@@ -1349,9 +1349,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_ruleScopeSpec433); if (state.failed) return ;

-						if ( input.LA(1)==TokenConstants.DOWN )
+						if ( input.LA(1)==TokenConstants.Down )
{
-							Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+							Match(input, TokenConstants.Down, null); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:182:29: ( . )*
for ( ; ; )
{
@@ -1388,7 +1388,7 @@ public partial class TreeToNFAConverter : TreeParser



-							Match(input, TokenConstants.UP, null); if (state.failed) return ;
+							Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -1455,7 +1455,7 @@ public partial class TreeToNFAConverter : TreeParser



-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;
}

}
@@ -1556,7 +1556,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,BLOCK,Follow._BLOCK_in_block490); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:197:13: ( ^( OPTIONS ( . )* ) )?
int alt31=2;
int LA31_0 = input.LA(1);
@@ -1572,9 +1572,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_block495); if (state.failed) return retval;

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+						Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:197:25: ( . )*
for ( ; ; )
{
@@ -1611,7 +1611,7 @@ public partial class TreeToNFAConverter : TreeParser



-						Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+						Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}

}
@@ -1677,7 +1677,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,EOB,Follow._EOB_in_block536); if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.g = factory.build_AlternativeBlock(alts);
@@ -1718,7 +1718,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,ALT,Follow._ALT_in_alternative565); if (state.failed) return g;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return g;
+			Match(input, TokenConstants.Down, null); if (state.failed) return g;
// Grammars\\TreeToNFAConverter.g3:214:11: (e= element )+
int cnt34=0;
for ( ; ; )
@@ -1766,7 +1766,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,EOA,Follow._EOA_in_alternative577); if (state.failed) return g;

-			Match(input, TokenConstants.UP, null); if (state.failed) return g;
+			Match(input, TokenConstants.Up, null); if (state.failed) return g;
if ( state.backtracking == 0 )
{

@@ -1931,11 +1931,11 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,CATCH,Follow._CATCH_in_exceptionHandler624); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
Match(input,ARG_ACTION,Follow._ARG_ACTION_in_exceptionHandler626); if (state.failed) return ;
Match(input,ACTION,Follow._ACTION_in_exceptionHandler628); if (state.failed) return ;

-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;

}

@@ -1964,10 +1964,10 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,FINALLY,Follow._FINALLY_in_finallyClause644); if (state.failed) return ;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+			Match(input, TokenConstants.Down, null); if (state.failed) return ;
Match(input,ACTION,Follow._ACTION_in_finallyClause646); if (state.failed) return ;

-			Match(input, TokenConstants.UP, null); if (state.failed) return ;
+			Match(input, TokenConstants.Up, null); if (state.failed) return ;

}

@@ -2029,9 +2029,9 @@ public partial class TreeToNFAConverter : TreeParser
}
Match(input,REWRITE,Follow._REWRITE_in_rewrite669); if (state.failed) return retval;

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+						Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:247:14: ( . )*
for ( ; ; )
{
@@ -2068,7 +2068,7 @@ public partial class TreeToNFAConverter : TreeParser



-						Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+						Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}

}
@@ -2138,7 +2138,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,ROOT,Follow._ROOT_in_element696); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_element700);
e=element();

@@ -2149,7 +2149,7 @@ public partial class TreeToNFAConverter : TreeParser
retval.g = (e!=null?e.g:default(StateCluster));
}

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -2158,7 +2158,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,BANG,Follow._BANG_in_element711); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_element715);
e=element();

@@ -2169,7 +2169,7 @@ public partial class TreeToNFAConverter : TreeParser
retval.g = (e!=null?e.g:default(StateCluster));
}

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -2178,7 +2178,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_element724); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
Match(input,ID,Follow._ID_in_element726); if (state.failed) return retval;
PushFollow(Follow._element_in_element730);
e=element();
@@ -2190,7 +2190,7 @@ public partial class TreeToNFAConverter : TreeParser
retval.g = (e!=null?e.g:default(StateCluster));
}

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -2199,7 +2199,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_element739); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
Match(input,ID,Follow._ID_in_element741); if (state.failed) return retval;
PushFollow(Follow._element_in_element745);
e=element();
@@ -2211,7 +2211,7 @@ public partial class TreeToNFAConverter : TreeParser
retval.g = (e!=null?e.g:default(StateCluster));
}

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -2220,7 +2220,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,RANGE,Follow._RANGE_in_element756); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._atom_in_element760);
a=atom(null);

@@ -2232,7 +2232,7 @@ public partial class TreeToNFAConverter : TreeParser
state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.g = factory.build_Range(grammar.getTokenType((a!=null?(input.TokenStream.ToString(
@@ -2250,11 +2250,11 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_element779); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
c1=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_element783); if (state.failed) return retval;
c2=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_element787); if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -2316,14 +2316,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,SYNPRED,Follow._SYNPRED_in_element828); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._block_in_element830);
block();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -2376,9 +2376,9 @@ public partial class TreeToNFAConverter : TreeParser
{
bpred=(GrammarAST)Match(input,BACKTRACK_SEMPRED,Follow._BACKTRACK_SEMPRED_in_element882); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:273:32: ( . )*
for ( ; ; )
{
@@ -2415,7 +2415,7 @@ public partial class TreeToNFAConverter : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -2587,14 +2587,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,OPTIONAL,Follow._OPTIONAL_in_ebnf953); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._block_in_ebnf957);
b=block();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -2622,14 +2622,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,CLOSURE,Follow._CLOSURE_in_ebnf970); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._block_in_ebnf974);
b=block();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -2661,14 +2661,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_ebnf987); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._block_in_ebnf991);
b=block();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -2733,7 +2733,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_tree_1019); if (state.failed) return retval;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_tree_1026);
e=element();

@@ -2802,7 +2802,7 @@ public partial class TreeToNFAConverter : TreeParser

}

-			Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}

@@ -2876,7 +2876,7 @@ public partial class TreeToNFAConverter : TreeParser
{
n=(GrammarAST)Match(input,NOT,Follow._NOT_in_atom_or_notatom1083); if (state.failed) return g;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return g;
+				Match(input, TokenConstants.Down, null); if (state.failed) return g;
// Grammars\\TreeToNFAConverter.g3:389:4: (c= CHAR_LITERAL (ast1= ast_suffix )? |t= TOKEN_REF (ast3= ast_suffix )? | set )
int alt46=3;
switch ( input.LA(1) )
@@ -3074,7 +3074,7 @@ public partial class TreeToNFAConverter : TreeParser
n.followingNFAState = g.right;
}

-				Match(input, TokenConstants.UP, null); if (state.failed) return g;
+				Match(input, TokenConstants.Up, null); if (state.failed) return g;

}
break;
@@ -3167,9 +3167,9 @@ public partial class TreeToNFAConverter : TreeParser
{
r=(GrammarAST)Match(input,RULE_REF,Follow._RULE_REF_in_atom1176); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:471:18: (rarg= ARG_ACTION )?
int alt48=2;
int LA48_0 = input.LA(1);
@@ -3215,7 +3215,7 @@ public partial class TreeToNFAConverter : TreeParser
}


-					Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -3244,9 +3244,9 @@ public partial class TreeToNFAConverter : TreeParser
{
t=(GrammarAST)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_atom1206); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:489:20: (targ= ARG_ACTION )?
int alt50=2;
int LA50_0 = input.LA(1);
@@ -3292,7 +3292,7 @@ public partial class TreeToNFAConverter : TreeParser
}


-					Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -3324,9 +3324,9 @@ public partial class TreeToNFAConverter : TreeParser
{
c=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_atom1237); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:510:23: (as3= ast_suffix )?
int alt52=2;
int LA52_0 = input.LA(1);
@@ -3352,7 +3352,7 @@ public partial class TreeToNFAConverter : TreeParser
}


-					Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -3376,9 +3376,9 @@ public partial class TreeToNFAConverter : TreeParser
{
s=(GrammarAST)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_atom1261); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:523:25: (as4= ast_suffix )?
int alt53=2;
int LA53_0 = input.LA(1);
@@ -3404,7 +3404,7 @@ public partial class TreeToNFAConverter : TreeParser
}


-					Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -3428,9 +3428,9 @@ public partial class TreeToNFAConverter : TreeParser
{
w=(GrammarAST)Match(input,WILDCARD,Follow._WILDCARD_in_atom1285); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:536:18: (as5= ast_suffix )?
int alt54=2;
int LA54_0 = input.LA(1);
@@ -3456,7 +3456,7 @@ public partial class TreeToNFAConverter : TreeParser
}


-					Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -3480,7 +3480,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,DOT,Follow._DOT_in_atom1307); if (state.failed) return retval;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
scope_=(GrammarAST)Match(input,ID,Follow._ID_in_atom1311); if (state.failed) return retval;
PushFollow(Follow._atom_in_atom1315);
a=atom((scope_!=null?scope_.Text:null));
@@ -3492,7 +3492,7 @@ public partial class TreeToNFAConverter : TreeParser
retval.g = (a!=null?a.g:default(StateCluster));
}

-				Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+				Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -3575,7 +3575,7 @@ public partial class TreeToNFAConverter : TreeParser
{
b=(GrammarAST)Match(input,BLOCK,Follow._BLOCK_in_set1361); if (state.failed) return retval;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:565:6: ( ^( ALT ( ^( BACKTRACK_SEMPRED ( . )* ) )? setElement[elements] EOA ) )+
int cnt58=0;
for ( ; ; )
@@ -3596,7 +3596,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,ALT,Follow._ALT_in_set1370); if (state.failed) return retval;

-					Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:565:13: ( ^( BACKTRACK_SEMPRED ( . )* ) )?
int alt57=2;
int LA57_0 = input.LA(1);
@@ -3612,9 +3612,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,BACKTRACK_SEMPRED,Follow._BACKTRACK_SEMPRED_in_set1375); if (state.failed) return retval;

-						if ( input.LA(1)==TokenConstants.DOWN )
+						if ( input.LA(1)==TokenConstants.Down )
{
-							Match(input, TokenConstants.DOWN, null); if (state.failed) return retval;
+							Match(input, TokenConstants.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:565:35: ( . )*
for ( ; ; )
{
@@ -3651,7 +3651,7 @@ public partial class TreeToNFAConverter : TreeParser



-							Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+							Match(input, TokenConstants.Up, null); if (state.failed) return retval;
}

}
@@ -3666,7 +3666,7 @@ public partial class TreeToNFAConverter : TreeParser
if (state.failed) return retval;
Match(input,EOA,Follow._EOA_in_set1387); if (state.failed) return retval;

-					Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+					Match(input, TokenConstants.Up, null); if (state.failed) return retval;

}
break;
@@ -3687,7 +3687,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,EOB,Follow._EOB_in_set1397); if (state.failed) return retval;

-			Match(input, TokenConstants.UP, null); if (state.failed) return retval;
+			Match(input, TokenConstants.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -3732,7 +3732,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,RULE,Follow._RULE_in_setRule1431); if (state.failed) return elements;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return elements;
+			Match(input, TokenConstants.Down, null); if (state.failed) return elements;
id=(GrammarAST)Match(input,ID,Follow._ID_in_setRule1435); if (state.failed) return elements;
// Grammars\\TreeToNFAConverter.g3:581:18: ( modifier )?
int alt59=2;
@@ -3775,9 +3775,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_setRule1449); if (state.failed) return elements;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return elements;
+					Match(input, TokenConstants.Down, null); if (state.failed) return elements;
// Grammars\\TreeToNFAConverter.g3:581:50: ( . )*
for ( ; ; )
{
@@ -3814,7 +3814,7 @@ public partial class TreeToNFAConverter : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return elements;
+					Match(input, TokenConstants.Up, null); if (state.failed) return elements;
}

}
@@ -3865,9 +3865,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_setRule1471); if (state.failed) return elements;

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null); if (state.failed) return elements;
+						Match(input, TokenConstants.Down, null); if (state.failed) return elements;
// Grammars\\TreeToNFAConverter.g3:582:18: ( . )*
for ( ; ; )
{
@@ -3904,7 +3904,7 @@ public partial class TreeToNFAConverter : TreeParser



-						Match(input, TokenConstants.UP, null); if (state.failed) return elements;
+						Match(input, TokenConstants.Up, null); if (state.failed) return elements;
}

}
@@ -3921,7 +3921,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,BLOCK,Follow._BLOCK_in_setRule1485); if (state.failed) return elements;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return elements;
+			Match(input, TokenConstants.Down, null); if (state.failed) return elements;
// Grammars\\TreeToNFAConverter.g3:583:13: ( ^( OPTIONS ( . )* ) )?
int alt66=2;
int LA66_0 = input.LA(1);
@@ -3937,9 +3937,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_setRule1490); if (state.failed) return elements;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return elements;
+					Match(input, TokenConstants.Down, null); if (state.failed) return elements;
// Grammars\\TreeToNFAConverter.g3:583:25: ( . )*
for ( ; ; )
{
@@ -3976,7 +3976,7 @@ public partial class TreeToNFAConverter : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return elements;
+					Match(input, TokenConstants.Up, null); if (state.failed) return elements;
}

}
@@ -4004,7 +4004,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,ALT,Follow._ALT_in_setRule1508); if (state.failed) return elements;

-					Match(input, TokenConstants.DOWN, null); if (state.failed) return elements;
+					Match(input, TokenConstants.Down, null); if (state.failed) return elements;
// Grammars\\TreeToNFAConverter.g3:584:15: ( BACKTRACK_SEMPRED )?
int alt67=2;
int LA67_0 = input.LA(1);
@@ -4032,7 +4032,7 @@ public partial class TreeToNFAConverter : TreeParser
if (state.failed) return elements;
Match(input,EOA,Follow._EOA_in_setRule1518); if (state.failed) return elements;

-					Match(input, TokenConstants.UP, null); if (state.failed) return elements;
+					Match(input, TokenConstants.Up, null); if (state.failed) return elements;

}
break;
@@ -4053,7 +4053,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,EOB,Follow._EOB_in_setRule1530); if (state.failed) return elements;

-			Match(input, TokenConstants.UP, null); if (state.failed) return elements;
+			Match(input, TokenConstants.Up, null); if (state.failed) return elements;
// Grammars\\TreeToNFAConverter.g3:587:4: ( exceptionGroup )?
int alt69=2;
int LA69_0 = input.LA(1);
@@ -4080,7 +4080,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,EOR,Follow._EOR_in_setRule1549); if (state.failed) return elements;

-			Match(input, TokenConstants.UP, null); if (state.failed) return elements;
+			Match(input, TokenConstants.Up, null); if (state.failed) return elements;

}

@@ -4257,11 +4257,11 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_setElement1611); if (state.failed) return ;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
c1=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_setElement1615); if (state.failed) return ;
c2=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_setElement1619); if (state.failed) return ;

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{

@@ -4304,7 +4304,7 @@ public partial class TreeToNFAConverter : TreeParser
ns=new IntervalSet();
}

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return ;
+				Match(input, TokenConstants.Down, null); if (state.failed) return ;
PushFollow(Follow._setElement_in_setElement1651);
setElement(ns);

@@ -4318,7 +4318,7 @@ public partial class TreeToNFAConverter : TreeParser

}

-				Match(input, TokenConstants.UP, null); if (state.failed) return ;
+				Match(input, TokenConstants.Up, null); if (state.failed) return ;

}
break;
@@ -4357,7 +4357,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,BLOCK,Follow._BLOCK_in_testBlockAsSet1696); if (state.failed) return alts;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return alts;
+			Match(input, TokenConstants.Down, null); if (state.failed) return alts;
// Grammars\\TreeToNFAConverter.g3:705:4: ( ^( ALT ( BACKTRACK_SEMPRED )? testSetElement EOA ) )+
int cnt72=0;
for ( ; ; )
@@ -4378,7 +4378,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,ALT,Follow._ALT_in_testBlockAsSet1704); if (state.failed) return alts;

-					Match(input, TokenConstants.DOWN, null); if (state.failed) return alts;
+					Match(input, TokenConstants.Down, null); if (state.failed) return alts;
// Grammars\\TreeToNFAConverter.g3:705:12: ( BACKTRACK_SEMPRED )?
int alt71=2;
int LA71_0 = input.LA(1);
@@ -4407,7 +4407,7 @@ public partial class TreeToNFAConverter : TreeParser
alts += testSetElement10;
Match(input,EOA,Follow._EOA_in_testBlockAsSet1715); if (state.failed) return alts;

-					Match(input, TokenConstants.UP, null); if (state.failed) return alts;
+					Match(input, TokenConstants.Up, null); if (state.failed) return alts;

}
break;
@@ -4428,7 +4428,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,EOB,Follow._EOB_in_testBlockAsSet1727); if (state.failed) return alts;

-			Match(input, TokenConstants.UP, null); if (state.failed) return alts;
+			Match(input, TokenConstants.Up, null); if (state.failed) return alts;

}

@@ -4466,7 +4466,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,RULE,Follow._RULE_in_testSetRule1762); if (state.failed) return alts;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return alts;
+			Match(input, TokenConstants.Down, null); if (state.failed) return alts;
id=(GrammarAST)Match(input,ID,Follow._ID_in_testSetRule1766); if (state.failed) return alts;
// Grammars\\TreeToNFAConverter.g3:718:18: ( modifier )?
int alt73=2;
@@ -4509,9 +4509,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_testSetRule1780); if (state.failed) return alts;

-				if ( input.LA(1)==TokenConstants.DOWN )
+				if ( input.LA(1)==TokenConstants.Down )
{
-					Match(input, TokenConstants.DOWN, null); if (state.failed) return alts;
+					Match(input, TokenConstants.Down, null); if (state.failed) return alts;
// Grammars\\TreeToNFAConverter.g3:718:50: ( . )*
for ( ; ; )
{
@@ -4548,7 +4548,7 @@ public partial class TreeToNFAConverter : TreeParser



-					Match(input, TokenConstants.UP, null); if (state.failed) return alts;
+					Match(input, TokenConstants.Up, null); if (state.failed) return alts;
}

}
@@ -4599,9 +4599,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_testSetRule1802); if (state.failed) return alts;

-					if ( input.LA(1)==TokenConstants.DOWN )
+					if ( input.LA(1)==TokenConstants.Down )
{
-						Match(input, TokenConstants.DOWN, null); if (state.failed) return alts;
+						Match(input, TokenConstants.Down, null); if (state.failed) return alts;
// Grammars\\TreeToNFAConverter.g3:719:18: ( . )*
for ( ; ; )
{
@@ -4638,7 +4638,7 @@ public partial class TreeToNFAConverter : TreeParser



-						Match(input, TokenConstants.UP, null); if (state.failed) return alts;
+						Match(input, TokenConstants.Up, null); if (state.failed) return alts;
}

}
@@ -4655,7 +4655,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,BLOCK,Follow._BLOCK_in_testSetRule1816); if (state.failed) return alts;

-			Match(input, TokenConstants.DOWN, null); if (state.failed) return alts;
+			Match(input, TokenConstants.Down, null); if (state.failed) return alts;
// Grammars\\TreeToNFAConverter.g3:721:5: ( ^( ALT ( BACKTRACK_SEMPRED )? testSetElement EOA ) )+
int cnt80=0;
for ( ; ; )
@@ -4676,7 +4676,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,ALT,Follow._ALT_in_testSetRule1825); if (state.failed) return alts;

-					Match(input, TokenConstants.DOWN, null); if (state.failed) return alts;
+					Match(input, TokenConstants.Down, null); if (state.failed) return alts;
// Grammars\\TreeToNFAConverter.g3:721:13: ( BACKTRACK_SEMPRED )?
int alt79=2;
int LA79_0 = input.LA(1);
@@ -4705,7 +4705,7 @@ public partial class TreeToNFAConverter : TreeParser
alts += testSetElement11;
Match(input,EOA,Follow._EOA_in_testSetRule1836); if (state.failed) return alts;

-					Match(input, TokenConstants.UP, null); if (state.failed) return alts;
+					Match(input, TokenConstants.Up, null); if (state.failed) return alts;

}
break;
@@ -4726,7 +4726,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,EOB,Follow._EOB_in_testSetRule1850); if (state.failed) return alts;

-			Match(input, TokenConstants.UP, null); if (state.failed) return alts;
+			Match(input, TokenConstants.Up, null); if (state.failed) return alts;
// Grammars\\TreeToNFAConverter.g3:725:4: ( exceptionGroup )?
int alt81=2;
int LA81_0 = input.LA(1);
@@ -4753,7 +4753,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,EOR,Follow._EOR_in_testSetRule1868); if (state.failed) return alts;

-			Match(input, TokenConstants.UP, null); if (state.failed) return alts;
+			Match(input, TokenConstants.Up, null); if (state.failed) return alts;

}

@@ -4869,11 +4869,11 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_testSetElement1930); if (state.failed) return alts;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return alts;
+				Match(input, TokenConstants.Down, null); if (state.failed) return alts;
c1=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_testSetElement1934); if (state.failed) return alts;
c2=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_testSetElement1938); if (state.failed) return alts;

-				Match(input, TokenConstants.UP, null); if (state.failed) return alts;
+				Match(input, TokenConstants.Up, null); if (state.failed) return alts;
alts = IntervalSet.of( Grammar.getCharValueFromGrammarCharLiteral((c1!=null?c1.Text:null)), Grammar.getCharValueFromGrammarCharLiteral((c2!=null?c2.Text:null)) ).size();

}
@@ -4895,14 +4895,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,NOT,Follow._NOT_in_testSetElement1963); if (state.failed) return alts;

-				Match(input, TokenConstants.DOWN, null); if (state.failed) return alts;
+				Match(input, TokenConstants.Down, null); if (state.failed) return alts;
PushFollow(Follow._testSetElement_in_testSetElement1967);
tse=testSetElement();

state._fsp--;
if (state.failed) return alts;

-				Match(input, TokenConstants.UP, null); if (state.failed) return alts;
+				Match(input, TokenConstants.Up, null); if (state.failed) return alts;
alts = grammar.TokenTypes.size() - tse;

}
diff --git a/Antlr3/Misc/Barrier.cs b/Antlr3/Misc/Barrier.cs
index 16ea4e9..6150eee 100644
--- a/Antlr3/Misc/Barrier.cs
+++ b/Antlr3/Misc/Barrier.cs
@@ -4,7 +4,7 @@
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -32,6 +32,8 @@

namespace Antlr3.Misc
{
+    using MethodImpl = System.Runtime.CompilerServices.MethodImplAttribute;
+    using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;

/**A very simple barrier wait.  Once a thread has requested a
* wait on the barrier with waitForRelease, it cannot fool the
@@ -48,39 +50,39 @@ namespace Antlr3.Misc
threshold = t;
}

-        public /*synchronized*/ void waitForRelease()
+        [MethodImpl( MethodImplOptions.Synchronized )]
+        public void WaitForRelease()
{
-            throw new System.NotImplementedException( "synchronized and confusing ??" );
-#if false
count++;
// The final thread to reach barrier resets barrier and
// releases all threads
if ( count == threshold )
{
// notify blocked threads that threshold has been reached
-                action(); // perform the requested operation
-                notifyAll();
+                Action(); // perform the requested operation
+                NotifyAll();
}
else
+            {
while ( count < threshold )
{
-                    wait();
+                    Wait();
}
-#endif
+            }
}

-        private void wait()
+        private void Wait()
{
throw new System.NotImplementedException();
}

-        private void notifyAll()
+        private void NotifyAll()
{
throw new System.NotImplementedException();
}

/** What to do when everyone reaches barrier */
-        public void action()
+        public virtual void Action()
{
}
}
diff --git a/Antlr3/Misc/BitSet.cs b/Antlr3/Misc/BitSet.cs
index d793e9c..8b869af 100644
--- a/Antlr3/Misc/BitSet.cs
+++ b/Antlr3/Misc/BitSet.cs
@@ -4,7 +4,7 @@
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -65,29 +65,29 @@ namespace Antlr3.Misc
*/
public class BitSet : IIntSet, ICloneable
{
-        protected const int BITS = 64;    // number of bits / long
-        protected const int LOG_BITS = 6; // 2^6 == 64
+        const int Bits = 64;    // number of bits / long
+        const int LogBits = 6; // 2^6 == 64

/* We will often need to do a mod operator (i mod nbits).  Its
* turns out that, for powers of two, this mod operation is
* same as (i & (nbits-1)).  Since mod is slow, we use a
* precomputed mod mask to do the mod instead.
*/
-        protected const int MOD_MASK = BITS - 1;
+        const int ModMask = Bits - 1;

/** The actual data bits */
-        protected ulong[] bits;
+        ulong[] _bits;

/** Construct a bitset of size one word (64 bits) */
-        public BitSet() :
-            this( BITS )
+        public BitSet()
+            : this( Bits )
{
}

/** Construction from a static array of longs */
-        public BitSet( ulong[] bits_ )
+        public BitSet( ulong[] bits )
{
-            bits = bits_;
+            _bits = bits;
}

/** Construct a bitset given the size
@@ -95,7 +95,7 @@ namespace Antlr3.Misc
*/
public BitSet( int nbits )
{
-            bits = new ulong[( ( nbits - 1 ) >> LOG_BITS ) + 1];
+            _bits = new ulong[( ( nbits - 1 ) >> LogBits ) + 1];
}

#region Properties
@@ -130,17 +130,17 @@ namespace Antlr3.Misc
#endregion

/** or this element into this set (grow as necessary to accommodate) */
-        public virtual void add( int el )
+        public virtual void Add( int el )
{
-            //JSystem.@out.println("add("+el+")");
+            //System.Console.Out.WriteLine( "add(" + el + ")" );
int n = wordNumber( el );
-            //JSystem.@out.println("word number is "+n);
-            //JSystem.@out.println("bits.length "+bits.length);
-            if ( n >= bits.Length )
+            //System.Console.Out.WriteLine( "word number is " + n );
+            //System.Console.Out.WriteLine( "bits.length " + _bits.Length );
+            if ( n >= _bits.Length )
{
growToInclude( el );
}
-            bits[n] |= bitMask( el );
+            _bits[n] |= bitMask( el );
}

public virtual void addAll( IIntSet set )
@@ -175,7 +175,7 @@ namespace Antlr3.Misc
for ( int i = 0; i < elements.Length; i++ )
{
int e = elements[i];
-                add( e );
+                Add( e );
}
}

@@ -192,19 +192,8 @@ namespace Antlr3.Misc
throw new ArgumentException();
}
int eI = (int)o;
-                add( eI );
-            }
-            /*
-            int n = elements.size();
-            for (int i = 0; i < n; i++) {
-                Object o = elements.get(i);
-                if ( !(o instanceof Integer) ) {
-                    throw new IllegalArgumentException();
-                }
-                Integer eI = (Integer)o;
-                add(eI.intValue());
+                Add( eI );
}
-             */
}

public virtual IIntSet and( IIntSet a )
@@ -216,71 +205,56 @@ namespace Antlr3.Misc

public virtual void andInPlace( BitSet a )
{
-            int min = Math.Min( bits.Length, a.bits.Length );
+            int min = Math.Min( _bits.Length, a._bits.Length );
for ( int i = min - 1; i >= 0; i-- )
{
-                bits[i] &= a.bits[i];
+                _bits[i] &= a._bits[i];
}
// clear all bits in this not present in a (if this bigger than a).
-            for ( int i = min; i < bits.Length; i++ )
+            for ( int i = min; i < _bits.Length; i++ )
{
-                bits[i] = 0;
+                _bits[i] = 0;
}
}

private static ulong bitMask( int bitNumber )
{
-            int bitPosition = bitNumber & MOD_MASK; // bitNumber mod BITS
+            int bitPosition = bitNumber & ModMask; // bitNumber mod BITS
return 1UL << bitPosition;
}

public virtual void clear()
{
-            for ( int i = bits.Length - 1; i >= 0; i-- )
+            for ( int i = _bits.Length - 1; i >= 0; i-- )
{
-                bits[i] = 0;
+                _bits[i] = 0;
}
}

public virtual void clear( int el )
{
int n = wordNumber( el );
-            if ( n >= bits.Length )
+            if ( n >= _bits.Length )
{	// grow as necessary to accommodate
growToInclude( el );
}
-            bits[n] &= ~bitMask( el );
+            _bits[n] &= ~bitMask( el );
}

public virtual object Clone()
{
-            return new BitSet( (ulong[])bits.Clone() );
-        }
-        //public Object clone()
-        //{
-        //    BitSet s;
-        //    try
-        //    {
-        //        s = (BitSet)base.clone();
-        //        s.bits = new long[bits.Length];
-        //        JSystem.arraycopy( bits, 0, s.bits, 0, bits.Length );
-        //    }
-        //    catch ( CloneNotSupportedException e )
-        //    {
-        //        throw new InternalError();
-        //    }
-        //    return s;
-        //}
+            return new BitSet( (ulong[])_bits.Clone() );
+        }

public virtual int size()
{
int deg = 0;
-            for ( int i = bits.Length - 1; i >= 0; i-- )
+            for ( int i = _bits.Length - 1; i >= 0; i-- )
{
-                ulong word = bits[i];
+                ulong word = _bits[i];
if ( word != 0L )
{
-                    for ( int bit = BITS - 1; bit >= 0; bit-- )
+                    for ( int bit = Bits - 1; bit >= 0; bit-- )
{
if ( ( word & ( 1UL << bit ) ) != 0 )
{
@@ -306,12 +280,12 @@ namespace Antlr3.Misc

BitSet otherSet = (BitSet)other;

-            int n = Math.Min( this.bits.Length, otherSet.bits.Length );
+            int n = Math.Min( this._bits.Length, otherSet._bits.Length );

// for any bits in common, compare
for ( int i = 0; i < n; i++ )
{
-                if ( this.bits[i] != otherSet.bits[i] )
+                if ( this._bits[i] != otherSet._bits[i] )
{
return false;
}
@@ -319,21 +293,21 @@ namespace Antlr3.Misc

// make sure any extra bits are off

-            if ( this.bits.Length > n )
+            if ( this._bits.Length > n )
{
-                for ( int i = n + 1; i < this.bits.Length; i++ )
+                for ( int i = n + 1; i < this._bits.Length; i++ )
{
-                    if ( this.bits[i] != 0 )
+                    if ( this._bits[i] != 0 )
{
return false;
}
}
}
-            else if ( otherSet.bits.Length > n )
+            else if ( otherSet._bits.Length > n )
{
-                for ( int i = n + 1; i < otherSet.bits.Length; i++ )
+                for ( int i = n + 1; i < otherSet._bits.Length; i++ )
{
-                    if ( otherSet.bits[i] != 0 )
+                    if ( otherSet._bits[i] != 0 )
{
return false;
}
@@ -349,18 +323,18 @@ namespace Antlr3.Misc
*/
public virtual void growToInclude( int bit )
{
-            int newSize = Math.Max( bits.Length << 1, numWordsToHold( bit ) );
+            int newSize = Math.Max( _bits.Length << 1, numWordsToHold( bit ) );
ulong[] newbits = new ulong[newSize];
-            Array.Copy( bits, newbits, bits.Length );
-            bits = newbits;
+            Array.Copy( _bits, newbits, _bits.Length );
+            _bits = newbits;
}

public virtual bool member( int el )
{
int n = wordNumber( el );
-            if ( n >= bits.Length )
+            if ( n >= _bits.Length )
return false;
-            return ( bits[n] & bitMask( el ) ) != 0;
+            return ( _bits[n] & bitMask( el ) ) != 0;
}

/** Get the first element you find and return it.  Return Label.INVALID
@@ -368,7 +342,7 @@ namespace Antlr3.Misc
*/
public virtual int getSingleElement()
{
-            for ( int i = 0; i < ( bits.Length << LOG_BITS ); i++ )
+            for ( int i = 0; i < ( _bits.Length << LogBits ); i++ )
{
if ( member( i ) )
{
@@ -380,9 +354,9 @@ namespace Antlr3.Misc

public virtual bool isNil()
{
-            for ( int i = bits.Length - 1; i >= 0; i-- )
+            for ( int i = _bits.Length - 1; i >= 0; i-- )
{
-                if ( bits[i] != 0 )
+                if ( _bits[i] != 0 )
return false;
}
return true;
@@ -406,9 +380,9 @@ namespace Antlr3.Misc

public virtual void notInPlace()
{
-            for ( int i = bits.Length - 1; i >= 0; i-- )
+            for ( int i = _bits.Length - 1; i >= 0; i-- )
{
-                bits[i] = ~bits[i];
+                _bits[i] = ~_bits[i];
}
}

@@ -426,19 +400,19 @@ namespace Antlr3.Misc
for ( int i = minBit; i <= maxBit; i++ )
{
int n = wordNumber( i );
-                bits[n] ^= bitMask( i );
+                _bits[n] ^= bitMask( i );
}
}

private /*final*/ int numWordsToHold( int el )
{
-            return ( el >> LOG_BITS ) + 1;
+            return ( el >> LogBits ) + 1;
}

public static BitSet of( int el )
{
BitSet s = new BitSet( el + 1 );
-            s.add( el );
+            s.Add( el );
return s;
}

@@ -448,7 +422,7 @@ namespace Antlr3.Misc
BitSet s = new BitSet();
foreach ( int i in elements )
{
-                s.add( i );
+                s.Add( i );
}
return s;
}
@@ -493,7 +467,7 @@ namespace Antlr3.Misc
for ( int i = a; i <= b; i++ )
{
int n = wordNumber( i );
-                s.bits[n] |= bitMask( i );
+                s._bits[n] |= bitMask( i );
}
return s;
}
@@ -517,14 +491,14 @@ namespace Antlr3.Misc
return;
}
// If this is smaller than a, grow this first
-            if ( a.bits.Length > bits.Length )
+            if ( a._bits.Length > _bits.Length )
{
-                setSize( a.bits.Length );
+                setSize( a._bits.Length );
}
-            int min = Math.Min( bits.Length, a.bits.Length );
+            int min = Math.Min( _bits.Length, a._bits.Length );
for ( int i = min - 1; i >= 0; i-- )
{
-                bits[i] |= a.bits[i];
+                _bits[i] |= a._bits[i];
}
}

@@ -532,11 +506,11 @@ namespace Antlr3.Misc
public virtual void remove( int el )
{
int n = wordNumber( el );
-            if ( n >= bits.Length )
+            if ( n >= _bits.Length )
{
growToInclude( el );
}
-            bits[n] &= ~bitMask( el );
+            _bits[n] &= ~bitMask( el );
}

/**
@@ -546,14 +520,14 @@ namespace Antlr3.Misc
private void setSize( int nwords )
{
ulong[] newbits = new ulong[nwords];
-            int n = Math.Min( nwords, bits.Length );
-            Array.Copy( bits, newbits, n );
-            bits = newbits;
+            int n = Math.Min( nwords, _bits.Length );
+            Array.Copy( _bits, newbits, n );
+            _bits = newbits;
}

public virtual int numBits()
{
-            return bits.Length << LOG_BITS; // num words * bits per word
+            return _bits.Length << LogBits; // num words * bits per word
}

/** return how much space is being used by the bits array not
@@ -561,7 +535,7 @@ namespace Antlr3.Misc
*/
public virtual int lengthInLongWords()
{
-            return bits.Length;
+            return _bits.Length;
}

/**Is this contained within a? */
@@ -580,9 +554,9 @@ namespace Antlr3.Misc
if ( a == null )
return;
// for all words of 'a', turn off corresponding bits of 'this'
-            for ( int i = 0; i < bits.Length && i < a.bits.Length; i++ )
+            for ( int i = 0; i < _bits.Length && i < a._bits.Length; i++ )
{
-                bits[i] &= ~a.bits[i];
+                _bits[i] &= ~a._bits[i];
}
}

@@ -605,7 +579,7 @@ namespace Antlr3.Misc
{
int[] elems = new int[size()];
int en = 0;
-            for ( int i = 0; i < ( bits.Length << LOG_BITS ); i++ )
+            for ( int i = 0; i < ( _bits.Length << LogBits ); i++ )
{
if ( member( i ) )
{
@@ -617,7 +591,7 @@ namespace Antlr3.Misc

public virtual ulong[] toPackedArray()
{
-            return bits;
+            return _bits;
}

public override string ToString()
@@ -636,7 +610,7 @@ namespace Antlr3.Misc
bool havePrintedAnElement = false;
buf.Append( '{' );

-            for ( int i = 0; i < ( bits.Length << LOG_BITS ); i++ )
+            for ( int i = 0; i < ( _bits.Length << LogBits ); i++ )
{
if ( member( i ) )
{
@@ -672,7 +646,7 @@ namespace Antlr3.Misc
return ToString( null );
}
string str = "";
-            for ( int i = 0; i < ( bits.Length << LOG_BITS ); i++ )
+            for ( int i = 0; i < ( _bits.Length << LogBits ); i++ )
{
if ( member( i ) )
{
@@ -705,16 +679,16 @@ namespace Antlr3.Misc
public virtual string ToStringOfHalfWords()
{
StringBuilder s = new StringBuilder();
-            for ( int i = 0; i < bits.Length; i++ )
+            for ( int i = 0; i < _bits.Length; i++ )
{
if ( i != 0 )
s.Append( ", " );
-                ulong tmp = bits[i];
+                ulong tmp = _bits[i];
tmp &= 0xFFFFFFFFL;
s.Append( tmp );
s.Append( "UL" );
s.Append( ", " );
-                tmp = bits[i] >> 32;
+                tmp = _bits[i] >> 32;
tmp &= 0xFFFFFFFFL;
s.Append( tmp );
s.Append( "UL" );
@@ -729,11 +703,11 @@ namespace Antlr3.Misc
public virtual string ToStringOfWords()
{
StringBuilder s = new StringBuilder();
-            for ( int i = 0; i < bits.Length; i++ )
+            for ( int i = 0; i < _bits.Length; i++ )
{
if ( i != 0 )
s.Append( ", " );
-                s.Append( bits[i] );
+                s.Append( _bits[i] );
s.Append( "L" );
}
return s.ToString();
@@ -746,16 +720,11 @@ namespace Antlr3.Misc

private /*final*/ static int wordNumber( int bit )
{
-            return bit >> LOG_BITS; // bit / BITS
+            return bit >> LogBits; // bit / BITS
}

#region ICollection<int> Members

-        void ICollection<int>.Add( int item )
-        {
-            throw new System.NotImplementedException();
-        }
-
void ICollection<int>.Clear()
{
throw new System.NotImplementedException();
diff --git a/Antlr3/Misc/IntSet.cs b/Antlr3/Misc/IntSet.cs
index 70d92de..f7061de 100644
--- a/Antlr3/Misc/IntSet.cs
+++ b/Antlr3/Misc/IntSet.cs
@@ -4,7 +4,7 @@
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -47,9 +47,6 @@ namespace Antlr3.Misc
*/
public interface IIntSet : ICollection<int>
{
-        /** Add an element to the set */
-        void add( int el );
-
/** Add all elements from incoming set to this set.  Can limit
*  to set of its own type.
*/
diff --git a/Antlr3/Tool/DOTGenerator.cs b/Antlr3/Tool/DOTGenerator.cs
index 9cd136a..eb8a870 100644
--- a/Antlr3/Tool/DOTGenerator.cs
+++ b/Antlr3/Tool/DOTGenerator.cs
@@ -4,7 +4,7 @@
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -44,15 +44,14 @@ namespace Antlr3.Tool
using StringBuffer = System.Text.StringBuilder;
using StringTemplate = Antlr3.ST.StringTemplate;
using StringTemplateGroup = Antlr3.ST.StringTemplateGroup;
-    using Tool = Antlr3.AntlrTool;

/** The DOT (part of graphviz) generation aspect. */
public class DOTGenerator
{
-        internal bool STRIP_NONREDUCED_STATES = false;
+        internal bool StripNonreducedStates = false;

-        protected String arrowhead = "normal";
-        protected String rankdir = "LR";
+        protected string arrowhead = "normal";
+        protected string rankdir = "LR";

/** Library of output templates; use <attrname> format */
public static StringTemplateGroup stlib =
@@ -62,7 +61,7 @@ namespace Antlr3.Tool
*  which states we've visited.  Make a new set every time you start
*  walking in case you reuse this object.
*/
-        protected ICollection<object> markedStates = null;
+        protected ICollection<int> markedStates;

protected Grammar grammar;

@@ -77,14 +76,22 @@ namespace Antlr3.Tool
{
get
{
-                return getArrowheadType();
+                return arrowhead;
+            }
+            set
+            {
+                arrowhead = value;
}
}
public string RankDir
{
get
{
-                return getRankdir();
+                return rankdir;
+            }
+            set
+            {
+                rankdir = value;
}
}
#endregion
@@ -93,7 +100,7 @@ namespace Antlr3.Tool
*  will show the incoming state machine visually.  All nodes reachable
*  from startState will be included.
*/
-        public virtual String getDOT( State startState )
+        public virtual string getDOT( State startState )
{
if ( startState == null )
{
@@ -101,14 +108,14 @@ namespace Antlr3.Tool
}
// The output DOT graph for visualization
StringTemplate dot = null;
-            markedStates = new HashSet<object>();
+            markedStates = new HashSet<int>();
if ( startState is DFAState )
{
dot = stlib.GetInstanceOf( "org/antlr/tool/templates/dot/dfa" );
dot.SetAttribute( "startState",
startState.stateNumber );
dot.SetAttribute( "useBox",
-                                 Tool.internalOption_ShowNFAConfigsInDFA );
+                                 AntlrTool.internalOption_ShowNFAConfigsInDFA );
walkCreatingDFADOT( dot, (DFAState)startState );
}
else
@@ -122,20 +129,22 @@ namespace Antlr3.Tool
return dot.ToString();
}

+#if false
/** Return a String containing a DOT description that, when displayed,
*  will show the incoming state machine visually.  All nodes reachable
*  from startState will be included.
-        public String getRuleNFADOT(State startState) {
+         */
+        public string getRuleNFADOT( State startState )
+        {
// The output DOT graph for visualization
-            StringTemplate dot = stlib.getInstanceOf("org/antlr/tool/templates/dot/nfa");
+            StringTemplate dot = stlib.GetInstanceOf( "org/antlr/tool/templates/dot/nfa" );

-            markedStates = new HashSet();
-            dot.setAttribute("startState",
-                    Utils.integer(startState.stateNumber));
-            walkRuleNFACreatingDOT(dot, startState);
-            return dot.toString();
+            markedStates = new HashSet<object>();
+            dot.SetAttribute( "startState", startState.stateNumber );
+            walkRuleNFACreatingDOT( dot, startState );
+            return dot.ToString();
}
-         */
+#endif

/** Do a depth-first walk of the state machine graph and
*  fill a DOT description template.  Keep filling the
@@ -168,11 +177,9 @@ namespace Antlr3.Tool
for ( int i = 0; i < s.NumberOfTransitions; i++ )
{
Transition edge = (Transition)s.transition( i );
-                /*
-                System.out.println("dfa "+s.dfa.decisionNumber+
-                    " edge from s"+s.stateNumber+" ["+i+"] of "+s.getNumberOfTransitions());
-                */
-                if ( STRIP_NONREDUCED_STATES )
+                //Console.Out.WriteLine( "dfa " + s.dfa.decisionNumber + " edge from s"
+                //    + s.stateNumber + " [" + i + "] of " + s.NumberOfTransitions );
+                if ( StripNonreducedStates )
{
if ( edge.target is DFAState &&
( (DFAState)edge.target ).AcceptStateReachable != DFA.REACHABLE_YES )
@@ -199,12 +206,12 @@ namespace Antlr3.Tool
protected virtual void walkRuleNFACreatingDOT( StringTemplate dot,
State s )
{
-            if ( markedStates.Contains( s ) )
+            if ( markedStates.Contains( s.stateNumber ) )
{
return; // already visited this node
}

-            markedStates.Add( s ); // mark this node as completed.
+            markedStates.Add( s.stateNumber ); // mark this node as completed.

// first add this node
StringTemplate stateST;
@@ -339,9 +346,9 @@ namespace Antlr3.Tool
/** Fix edge strings so they print out in DOT properly;
*  generate any gated predicates on edge too.
*/
-        protected virtual String getEdgeLabel( Transition edge )
+        protected virtual string getEdgeLabel( Transition edge )
{
-            String label = edge.label.ToString( grammar );
+            string label = edge.label.ToString( grammar );
label = label.Replace( "\\", "\\\\" );
label = label.Replace( "\"", "\\\"" );
label = label.Replace( "\n", "\\\\n" );
@@ -358,7 +365,7 @@ namespace Antlr3.Tool
( (DFAState)target ).getGatedPredicatesInNFAConfigurations();
if ( preds != null )
{
-                    String predsStr = "";
+                    string predsStr = "";
predsStr = "&&{" +
preds.genExpr( grammar.generator,
grammar.generator.Templates, null ).ToString()
@@ -369,19 +376,19 @@ namespace Antlr3.Tool
return label;
}

-        protected virtual String getStateLabel( State s )
+        protected virtual string getStateLabel( State s )
{
if ( s == null )
{
return "null";
}
-            String stateLabel = s.stateNumber.ToString();
+            string stateLabel = s.stateNumber.ToString();
if ( s is DFAState )
{
StringBuffer buf = new StringBuffer( 250 );
buf.Append( 's' );
buf.Append( s.stateNumber );
-                if ( Tool.internalOption_ShowNFAConfigsInDFA )
+                if ( AntlrTool.internalOption_ShowNFAConfigsInDFA )
{
if ( s is DFAState )
{
@@ -464,25 +471,5 @@ namespace Antlr3.Tool
}
return '"' + stateLabel + '"';
}
-
-        public virtual String getArrowheadType()
-        {
-            return arrowhead;
-        }
-
-        public virtual void setArrowheadType( String arrowhead )
-        {
-            this.arrowhead = arrowhead;
-        }
-
-        public virtual String getRankdir()
-        {
-            return rankdir;
-        }
-
-        public virtual void setRankdir( String rankdir )
-        {
-            this.rankdir = rankdir;
-        }
}
}
diff --git a/Antlr3/Tool/ErrorManager.cs b/Antlr3/Tool/ErrorManager.cs
index 3ea7157..df35737 100644
--- a/Antlr3/Tool/ErrorManager.cs
+++ b/Antlr3/Tool/ErrorManager.cs
@@ -38,6 +38,7 @@ namespace Antlr3.Tool
using Antlr3.Misc;

using AngleBracketTemplateLexer = Antlr3.ST.Language.AngleBracketTemplateLexer;
+    using BitSet = Antlr3.Misc.BitSet;
using CultureInfo = System.Globalization.CultureInfo;
using DecisionProbe = Antlr3.Analysis.DecisionProbe;
using DFAState = Antlr3.Analysis.DFAState;
@@ -172,46 +173,42 @@ namespace Antlr3.Tool
public const int MAX_MESSAGE_NUMBER = 211;

/** Do not do perform analysis if one of these happens */
-        public static readonly BitSet ERRORS_FORCING_NO_ANALYSIS;
-        //public static readonly BitSet ERRORS_FORCING_NO_ANALYSIS = new BitSet() {
-        //    {
-        //        add(MSG_RULE_REDEFINITION);
-        //        add(MSG_UNDEFINED_RULE_REF);
-        //        add(MSG_LEFT_RECURSION_CYCLES);
-        //        add(MSG_REWRITE_OR_OP_WITH_NO_OUTPUT_OPTION);
-        //        add(MSG_NO_RULES);
-        //        add(MSG_NO_SUCH_GRAMMAR_SCOPE);
-        //        add(MSG_NO_SUCH_RULE_IN_SCOPE);
-        //        add(MSG_LEXER_RULES_NOT_ALLOWED);
-        //        // TODO: ...
-        //    }
-        //};
+        public static readonly BitSet ERRORS_FORCING_NO_ANALYSIS =
+            new BitSet()
+            {
+                MSG_CANNOT_CREATE_TARGET_GENERATOR,
+                MSG_RULE_REDEFINITION,
+                MSG_UNDEFINED_RULE_REF,
+                MSG_LEFT_RECURSION_CYCLES,
+                MSG_REWRITE_OR_OP_WITH_NO_OUTPUT_OPTION,
+                MSG_NO_RULES,
+                MSG_NO_SUCH_GRAMMAR_SCOPE,
+                MSG_NO_SUCH_RULE_IN_SCOPE,
+                MSG_LEXER_RULES_NOT_ALLOWED,
+                MSG_WILDCARD_AS_ROOT
+            };

/** Do not do code gen if one of these happens */
-        public static readonly BitSet ERRORS_FORCING_NO_CODEGEN;
-        //public static readonly BitSet ERRORS_FORCING_NO_CODEGEN = new BitSet() {
-        //    {
-        //        add(MSG_NONREGULAR_DECISION);
-        //        add(MSG_RECURSION_OVERLOW);
-        //        add(MSG_UNREACHABLE_ALTS);
-        //        add(MSG_FILE_AND_GRAMMAR_NAME_DIFFER);
-        //        add(MSG_INVALID_IMPORT);
-        //        add(MSG_AST_OP_WITH_NON_AST_OUTPUT_OPTION);
-        //        // TODO: ...
-        //    }
-        //};
+        public static readonly BitSet ERRORS_FORCING_NO_CODEGEN =
+            new BitSet()
+            {
+                MSG_NONREGULAR_DECISION,
+                MSG_RECURSION_OVERLOW,
+                MSG_UNREACHABLE_ALTS,
+                MSG_FILE_AND_GRAMMAR_NAME_DIFFER,
+                MSG_INVALID_IMPORT,
+                MSG_AST_OP_WITH_NON_AST_OUTPUT_OPTION
+            };

/** Only one error can be emitted for any entry in this table.
*  Map<String,Set> where the key is a method name like danglingState.
*  The set is whatever that method accepts or derives like a DFA.
*/
-        public static readonly IDictionary<string, ICollection<object>> emitSingleError;
-        //public static readonly Map emitSingleError = new HashMap() {
-        //    {
-        //        put("danglingState", new HashSet());
-        //    }
-        //};
-
+        public static readonly IDictionary<string, ICollection<object>> emitSingleError =
+            new Dictionary<string, ICollection<object>>()
+            {
+                { "danglingState", new HashSet<object>() }
+            };

/** Messages should be sensitive to the locale. */
private static CultureInfo locale;
@@ -437,36 +434,6 @@ namespace Antlr3.Tool

static ErrorManager()
{
-            ERRORS_FORCING_NO_ANALYSIS = new BitSet();
-            ERRORS_FORCING_NO_ANALYSIS.add( MSG_CANNOT_CREATE_TARGET_GENERATOR );
-            ERRORS_FORCING_NO_ANALYSIS.add( MSG_RULE_REDEFINITION );
-            ERRORS_FORCING_NO_ANALYSIS.add( MSG_UNDEFINED_RULE_REF );
-            ERRORS_FORCING_NO_ANALYSIS.add( MSG_LEFT_RECURSION_CYCLES );
-            ERRORS_FORCING_NO_ANALYSIS.add( MSG_REWRITE_OR_OP_WITH_NO_OUTPUT_OPTION );
-            ERRORS_FORCING_NO_ANALYSIS.add( MSG_NO_RULES );
-            ERRORS_FORCING_NO_ANALYSIS.add( MSG_NO_SUCH_GRAMMAR_SCOPE );
-            ERRORS_FORCING_NO_ANALYSIS.add( MSG_NO_SUCH_RULE_IN_SCOPE );
-            ERRORS_FORCING_NO_ANALYSIS.add( MSG_LEXER_RULES_NOT_ALLOWED );
-            ERRORS_FORCING_NO_ANALYSIS.add( MSG_WILDCARD_AS_ROOT );
-            // TODO: ...
-
-            /** Do not do code gen if one of these happens */
-            ERRORS_FORCING_NO_CODEGEN = new BitSet();
-            ERRORS_FORCING_NO_CODEGEN.add( MSG_NONREGULAR_DECISION );
-            ERRORS_FORCING_NO_CODEGEN.add( MSG_RECURSION_OVERLOW );
-            ERRORS_FORCING_NO_CODEGEN.add( MSG_UNREACHABLE_ALTS );
-            ERRORS_FORCING_NO_CODEGEN.add( MSG_FILE_AND_GRAMMAR_NAME_DIFFER );
-            ERRORS_FORCING_NO_CODEGEN.add( MSG_INVALID_IMPORT );
-            ERRORS_FORCING_NO_CODEGEN.add( MSG_AST_OP_WITH_NON_AST_OUTPUT_OPTION );
-            // TODO: ...
-
-            /** Only one error can be emitted for any entry in this table.
-             *  Map<String,Set> where the key is a method name like danglingState.
-             *  The set is whatever that method accepts or derives like a DFA.
-             */
-            emitSingleError = new Dictionary<string, ICollection<object>>();
-            emitSingleError["danglingState"] = new HashSet<object>();
-
initIdToMessageNameMapping();
// it is inefficient to set the default locale here if another
// piece of code is going to set the locale, but that would
@@ -754,42 +721,42 @@ namespace Antlr3.Tool
public static void error( int msgID )
{
getErrorState().errors++;
-            getErrorState().errorMsgIDs.add( msgID );
+            getErrorState().errorMsgIDs.Add( msgID );
getErrorListener().error( new ToolMessage( msgID ) );
}

public static void error( int msgID, Exception e )
{
getErrorState().errors++;
-            getErrorState().errorMsgIDs.add( msgID );
+            getErrorState().errorMsgIDs.Add( msgID );
getErrorListener().error( new ToolMessage( msgID, e ) );
}

public static void error( int msgID, Object arg )
{
getErrorState().errors++;
-            getErrorState().errorMsgIDs.add( msgID );
+            getErrorState().errorMsgIDs.Add( msgID );
getErrorListener().error( new ToolMessage( msgID, arg ) );
}

public static void error( int msgID, Object arg, Object arg2 )
{
getErrorState().errors++;
-            getErrorState().errorMsgIDs.add( msgID );
+            getErrorState().errorMsgIDs.Add( msgID );
getErrorListener().error( new ToolMessage( msgID, arg, arg2 ) );
}

public static void error( int msgID, Object arg, Exception e )
{
getErrorState().errors++;
-            getErrorState().errorMsgIDs.add( msgID );
+            getErrorState().errorMsgIDs.Add( msgID );
getErrorListener().error( new ToolMessage( msgID, arg, e ) );
}

public static void warning( int msgID, Object arg )
{
getErrorState().warnings++;
-            getErrorState().warningMsgIDs.add( msgID );
+            getErrorState().warningMsgIDs.Add( msgID );
getErrorListener().warning( new ToolMessage( msgID, arg ) );
}

@@ -798,7 +765,7 @@ namespace Antlr3.Tool
{
getErrorState().warnings++;
Message msg = new GrammarNonDeterminismMessage( probe, d );
-            getErrorState().warningMsgIDs.add( msg.msgID );
+            getErrorState().warningMsgIDs.Add( msg.msgID );
getErrorListener().warning( msg );
}

@@ -807,7 +774,7 @@ namespace Antlr3.Tool
{
getErrorState().errors++;
Message msg = new GrammarDanglingStateMessage( probe, d );
-            getErrorState().errorMsgIDs.add( msg.msgID );
+            getErrorState().errorMsgIDs.Add( msg.msgID );
ICollection<object> seen = (ICollection<object>)emitSingleError.get( "danglingState" );
if ( !seen.Contains( d.dfa.decisionNumber + "|" + d.AltSet ) )
{
@@ -821,7 +788,7 @@ namespace Antlr3.Tool
{
getErrorState().warnings++;
Message msg = new GrammarAnalysisAbortedMessage( probe );
-            getErrorState().warningMsgIDs.add( msg.msgID );
+            getErrorState().warningMsgIDs.Add( msg.msgID );
getErrorListener().warning( msg );
}

@@ -830,7 +797,7 @@ namespace Antlr3.Tool
{
getErrorState().errors++;
Message msg = new GrammarUnreachableAltsMessage( probe, alts );
-            getErrorState().errorMsgIDs.add( msg.msgID );
+            getErrorState().errorMsgIDs.Add( msg.msgID );
getErrorListener().error( msg );
}

@@ -840,7 +807,7 @@ namespace Antlr3.Tool
{
getErrorState().warnings++;
Message msg = new GrammarInsufficientPredicatesMessage( probe, d, altToUncoveredLocations );
-            getErrorState().warningMsgIDs.add( msg.msgID );
+            getErrorState().warningMsgIDs.Add( msg.msgID );
getErrorListener().warning( msg );
}

@@ -848,7 +815,7 @@ namespace Antlr3.Tool
{
getErrorState().errors++;
Message msg = new NonRegularDecisionMessage( probe, probe.NonDeterministicAlts );
-            getErrorState().errorMsgIDs.add( msg.msgID );
+            getErrorState().errorMsgIDs.Add( msg.msgID );
getErrorListener().error( msg );
}

@@ -861,7 +828,7 @@ namespace Antlr3.Tool
getErrorState().errors++;
Message msg = new RecursionOverflowMessage( probe, sampleBadState, alt,
targetRules, callSiteStates );
-            getErrorState().errorMsgIDs.add( msg.msgID );
+            getErrorState().errorMsgIDs.Add( msg.msgID );
getErrorListener().error( msg );
}

@@ -883,7 +850,7 @@ namespace Antlr3.Tool
{
getErrorState().errors++;
Message msg = new LeftRecursionCyclesMessage( cycles );
-            getErrorState().errorMsgIDs.add( msg.msgID );
+            getErrorState().errorMsgIDs.Add( msg.msgID );
getErrorListener().warning( msg );
}

@@ -895,7 +862,7 @@ namespace Antlr3.Tool
{
getErrorState().errors++;
Message msg = new GrammarSemanticsMessage( msgID, g, token, arg, arg2 );
-            getErrorState().errorMsgIDs.add( msgID );
+            getErrorState().errorMsgIDs.Add( msgID );
getErrorListener().error( msg );
}

@@ -922,7 +889,7 @@ namespace Antlr3.Tool
{
getErrorState().warnings++;
Message msg = new GrammarSemanticsMessage( msgID, g, token, arg, arg2 );
-            getErrorState().warningMsgIDs.add( msgID );
+            getErrorState().warningMsgIDs.Add( msgID );
getErrorListener().warning( msg );
}

@@ -948,7 +915,7 @@ namespace Antlr3.Tool
RecognitionException re )
{
getErrorState().errors++;
-            getErrorState().errorMsgIDs.add( msgID );
+            getErrorState().errorMsgIDs.Add( msgID );
getErrorListener().error(
new GrammarSyntaxMessage( msgID, grammar, token, arg, re )
);
diff --git a/Antlr3/Tool/Grammar.cs b/Antlr3/Tool/Grammar.cs
index 499d3d1..231bd2b 100644
--- a/Antlr3/Tool/Grammar.cs
+++ b/Antlr3/Tool/Grammar.cs
@@ -1532,7 +1532,7 @@ namespace Antlr3.Tool
// wait for these two threads to finish
try
{
-                    barrier.waitForRelease();
+                    barrier.WaitForRelease();
}
//catch ( InterruptedException e )
//{
@@ -1845,7 +1845,7 @@ namespace Antlr3.Tool
public virtual void defineToken( string text, int tokenType )
{
//JSystem.@out.println("defineToken("+text+", "+tokenType+")");
-            if ( composite.tokenIDToTypeMap.ContainsKey( text ) && composite.tokenIDToTypeMap[text] < TokenConstants.MIN_TOKEN_TYPE )
+            if ( composite.tokenIDToTypeMap.ContainsKey( text ) && composite.tokenIDToTypeMap[text] < TokenConstants.MinTokenType )
{
// already defined?  Must be predefined one like EOF;
// do nothing
diff --git a/Antlr3/Tool/GrammarAST.cs b/Antlr3/Tool/GrammarAST.cs
index 2fc4e54..7edfa36 100644
--- a/Antlr3/Tool/GrammarAST.cs
+++ b/Antlr3/Tool/GrammarAST.cs
@@ -442,8 +442,8 @@ namespace Antlr3.Tool
}

// used in enumerating the descendants of a node
-        static readonly GrammarAST DescendantDownNode = new GrammarAST( Antlr.Runtime.TokenConstants.DOWN, "DOWN" );
-        static readonly GrammarAST DescendantUpNode = new GrammarAST( Antlr.Runtime.TokenConstants.UP, "UP" );
+        static readonly GrammarAST DescendantDownNode = new GrammarAST( Antlr.Runtime.TokenConstants.Down, "DOWN" );
+        static readonly GrammarAST DescendantUpNode = new GrammarAST( Antlr.Runtime.TokenConstants.Up, "UP" );

public static IEnumerable<ITree> Descendants( ITree root )
{
diff --git a/Antlr3/Tool/Interpreter.cs b/Antlr3/Tool/Interpreter.cs
index 23f8cd4..25fbe50 100644
--- a/Antlr3/Tool/Interpreter.cs
+++ b/Antlr3/Tool/Interpreter.cs
@@ -4,7 +4,7 @@
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -81,7 +81,7 @@ namespace Antlr3.Tool
if ( !ruleName.Equals( Grammar.ARTIFICIAL_TOKENS_RULENAME ) )
{
int type = g.getTokenType( ruleName );
-                    int channel = TokenConstants.DEFAULT_CHANNEL;
+                    int channel = TokenConstants.DefaultChannel;
token = new CommonToken( (ICharStream)outer.input, type, channel, 0, 0 );
}
}
@@ -107,14 +107,14 @@ namespace Antlr3.Tool
{
return null;
}
-            if ( input.LA( 1 ) == CharStreamConstants.EOF )
+            if ( input.LA( 1 ) == CharStreamConstants.Eof )
{
-                return TokenConstants.EOF_TOKEN;
+                return TokenConstants.EofToken;
}
int start = input.Index;
int charPos = ( (ICharStream)input ).CharPositionInLine;
CommonToken token = null;
-            while ( input.LA( 1 ) != CharStreamConstants.EOF )
+            while ( input.LA( 1 ) != CharStreamConstants.Eof )
{
try
{
@@ -133,7 +133,7 @@ namespace Antlr3.Tool
int stop = input.Index - 1;
if ( token == null )
{
-                return TokenConstants.EOF_TOKEN;
+                return TokenConstants.EofToken;
}
token.Line = ( ( (ICharStream)input ).Line );
token.StartIndex = start;
diff --git a/bin/Bootstrap/Codegen/Templates/CSharp3/ASTTreeParser.stg b/bin/Bootstrap/Codegen/Templates/CSharp3/ASTTreeParser.stg
index cceba1c..a303cb3 100644
--- a/bin/Bootstrap/Codegen/Templates/CSharp3/ASTTreeParser.stg
+++ b/bin/Bootstrap/Codegen/Templates/CSharp3/ASTTreeParser.stg
@@ -86,15 +86,15 @@ if ( _first_<enclosingTreeLevel>==null ) _first_<enclosingTreeLevel> = <root.el.
<endif>
<actionsAfterRoot:element()>
<if(nullableChildList)>
-if ( input.LA(1)==TokenConstants.DOWN ) {
-    Match(input, TokenConstants.DOWN, null); <checkRuleBacktrackFailure()>
+if ( input.LA(1)==TokenConstants.Down ) {
+    Match(input, TokenConstants.Down, null); <checkRuleBacktrackFailure()>
<children:element()>
-    Match(input, TokenConstants.UP, null); <checkRuleBacktrackFailure()>
+    Match(input, TokenConstants.Up, null); <checkRuleBacktrackFailure()>
}
<else>
-Match(input, TokenConstants.DOWN, null); <checkRuleBacktrackFailure()>
+Match(input, TokenConstants.Down, null); <checkRuleBacktrackFailure()>
<children:element()>
-Match(input, TokenConstants.UP, null); <checkRuleBacktrackFailure()>
+Match(input, TokenConstants.Up, null); <checkRuleBacktrackFailure()>
<endif>
<if(!rewriteMode)>
adaptor.AddChild(root_<enclosingTreeLevel>, root_<treeLevel>);
diff --git a/bin/Bootstrap/Codegen/Templates/CSharp3/CSharp3.stg b/bin/Bootstrap/Codegen/Templates/CSharp3/CSharp3.stg
index dc98655..d37a5b6 100644
--- a/bin/Bootstrap/Codegen/Templates/CSharp3/CSharp3.stg
+++ b/bin/Bootstrap/Codegen/Templates/CSharp3/CSharp3.stg
@@ -159,12 +159,12 @@ public override IToken NextToken()
{
for ( ; ;)
{
-		if ( input.LA(1)==CharStreamConstants.EOF )
+		if ( input.LA(1)==CharStreamConstants.Eof )
{
-			return TokenConstants.EOF_TOKEN;
+			return TokenConstants.EofToken;
}
state.token = null;
-		state.channel = TokenConstants.DEFAULT_CHANNEL;
+		state.channel = TokenConstants.DefaultChannel;
state.tokenStartCharIndex = input.Index;
state.tokenStartCharPositionInLine = input.CharPositionInLine;
state.tokenStartLine = input.Line;
@@ -562,7 +562,7 @@ lexerRule(ruleName,nakedBlock,ruleDescriptor,block,memoize) ::= <<
<block><\n>
<else>
int _type = <ruleName>;
-		int _channel = DEFAULT_TOKEN_CHANNEL;
+		int _channel = DefaultTokenChannel;
<ruleMemoization(name=ruleName)>
<lexerRuleLabelDefs()>
<ruleDescriptor.actions.init>
@@ -840,7 +840,7 @@ lexerStringRef(string,label) ::= <<
<if(label)>
int <label>Start = GetCharIndex();
Match(<string>); <checkRuleBacktrackFailure()>
-<label> = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, <label>Start, GetCharIndex()-1);
+<label> = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, <label>Start, GetCharIndex()-1);
<else>
Match(<string>); <checkRuleBacktrackFailure()><\n>
<endif>
@@ -900,7 +900,7 @@ lexerRuleRef(rule,label,args,elementIndex,scope) ::= <<
<if(label)>
int <label>Start<elementIndex> = GetCharIndex();
<if(scope)><scope:delegateName()>.<endif>m<rule.name>(<args; separator=", ">); <checkRuleBacktrackFailure()>
-<label> = new CommonToken(input, TokenConstants.INVALID_TOKEN_TYPE, TokenConstants.DEFAULT_CHANNEL, <label>Start<elementIndex>, GetCharIndex()-1);
+<label> = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, <label>Start<elementIndex>, GetCharIndex()-1);
<else>
<if(scope)><scope:delegateName()>.<endif>m<rule.name>(<args; separator=", ">); <checkRuleBacktrackFailure()>
<endif>
@@ -916,10 +916,10 @@ lexerRuleRefAndListLabel(rule,label,args,elementIndex,scope) ::= <<
lexerMatchEOF(label,elementIndex) ::= <<
<if(label)>
int <label>Start<elementIndex> = GetCharIndex();
-Match(EOF); <checkRuleBacktrackFailure()>
-<labelType> <label> = new CommonToken(input, EOF, TokenConstants.DEFAULT_CHANNEL, <label>Start<elementIndex>, GetCharIndex()-1);
+Match(Eof); <checkRuleBacktrackFailure()>
+<labelType> <label> = new CommonToken(input, Eof, TokenConstants.DefaultChannel, <label>Start<elementIndex>, GetCharIndex()-1);
<else>
-Match(EOF); <checkRuleBacktrackFailure()>
+Match(Eof); <checkRuleBacktrackFailure()>
<endif>
>>

@@ -929,16 +929,16 @@ tree(root, actionsAfterRoot, children, nullableChildList,
<root:element()>
<actionsAfterRoot:element()>
<if(nullableChildList)>
-if ( input.LA(1)==TokenConstants.DOWN )
+if ( input.LA(1)==TokenConstants.Down )
{
-	Match(input, TokenConstants.DOWN, null); <checkRuleBacktrackFailure()>
+	Match(input, TokenConstants.Down, null); <checkRuleBacktrackFailure()>
<children:element()>
-	Match(input, TokenConstants.UP, null); <checkRuleBacktrackFailure()>
+	Match(input, TokenConstants.Up, null); <checkRuleBacktrackFailure()>
}
<else>
-Match(input, TokenConstants.DOWN, null); <checkRuleBacktrackFailure()>
+Match(input, TokenConstants.Down, null); <checkRuleBacktrackFailure()>
<children:element()>
-Match(input, TokenConstants.UP, null); <checkRuleBacktrackFailure()>
+Match(input, TokenConstants.Up, null); <checkRuleBacktrackFailure()>
<endif>
>>

diff --git a/bin/Bootstrap/Codegen/Templates/CSharp3/Dbg.stg b/bin/Bootstrap/Codegen/Templates/CSharp3/Dbg.stg
index 9f5f5d9..69219e0 100644
--- a/bin/Bootstrap/Codegen/Templates/CSharp3/Dbg.stg
+++ b/bin/Bootstrap/Codegen/Templates/CSharp3/Dbg.stg
@@ -88,7 +88,7 @@ ctorForRootGrammar() ::= <<
<! bug: can't use <@super.members()> cut-n-paste instead !>
<! Same except we add port number and profile stuff if root grammar !>
public <name>( <inputStreamType> input )
-	: this( input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState() )
+	: this( input, DebugEventSocketProxy.DefaultDebuggerPort, new RecognizerSharedState() )
{
}
public <name>( <inputStreamType> input, int port, RecognizerSharedState state )

