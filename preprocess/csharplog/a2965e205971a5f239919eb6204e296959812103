commit a2965e205971a5f239919eb6204e296959812103
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sun Nov 21 00:32:29 2010 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sun Nov 21 00:32:29 2010 -0800

(C# 3) Add an argument null check
Use Activator.CreateInstance instead of reflection
Use Expression instead of DynamicMethod

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7089]

diff --git a/Antlr3.StringTemplate/StringTemplateGroup.cs b/Antlr3.StringTemplate/StringTemplateGroup.cs
index 5ef50be..90574f8 100644
--- a/Antlr3.StringTemplate/StringTemplateGroup.cs
+++ b/Antlr3.StringTemplate/StringTemplateGroup.cs
@@ -58,6 +58,7 @@ namespace Antlr3.ST
using StringBuilder = System.Text.StringBuilder;
using TextReader = System.IO.TextReader;
using TextWriter = System.IO.TextWriter;
+    using System.Linq.Expressions;

/** <summary>
*  Manages a group of named mutually-referential StringTemplate objects.
@@ -476,15 +477,11 @@ namespace Antlr3.ST
Func<StringTemplate, TextReader, Antlr.Runtime.Lexer> result;
if ( !_ctors.TryGetValue( lexerType, out result ) )
{
-                ConstructorInfo ctor = lexerType.GetConstructor( new Type[] { typeof( StringTemplate ), typeof( TextReader ) } );
-
-                System.Reflection.Emit.DynamicMethod dm = new System.Reflection.Emit.DynamicMethod( lexerType.Name + "Ctor", typeof( Antlr.Runtime.Lexer ), new Type[] { typeof( StringTemplate ), typeof( TextReader ) } );
-                var gen = dm.GetILGenerator();
-                gen.Emit( System.Reflection.Emit.OpCodes.Ldarg_0 );
-                gen.Emit( System.Reflection.Emit.OpCodes.Ldarg_1 );
-                gen.Emit( System.Reflection.Emit.OpCodes.Newobj, ctor );
-                gen.Emit( System.Reflection.Emit.OpCodes.Ret );
-                result = (Func<StringTemplate, TextReader, Antlr.Runtime.Lexer>)dm.CreateDelegate( typeof( Func<StringTemplate, TextReader, Antlr.Runtime.Lexer> ) );
+                var template = Expression.Parameter(typeof(StringTemplate), "template");
+                var reader = Expression.Parameter(typeof(TextReader), "reader");
+                ConstructorInfo ctor = lexerType.GetConstructor(new Type[] { typeof(StringTemplate), typeof(TextReader) });
+                var expression = Expression.Lambda<Func<StringTemplate, TextReader, Antlr.Runtime.Lexer>>(Expression.New(ctor, template, reader), template, reader);
+                result = expression.Compile();
_ctors[lexerType] = result;
}

@@ -1138,9 +1135,7 @@ namespace Antlr3.ST
{
try
{
-                    ConstructorInfo ctor =
-                        _userSpecifiedWriter.GetConstructor( new Type[] { typeof( TextWriter ) } );
-                    stw = (IStringTemplateWriter)ctor.Invoke( new Object[] { w } );
+                    stw = (IStringTemplateWriter)Activator.CreateInstance(_userSpecifiedWriter, new object[] { typeof(TextWriter) });
}
catch ( Exception e )
{
diff --git a/Antlr3/Codegen/CodeGenerator.cs b/Antlr3/Codegen/CodeGenerator.cs
index 83a75fc..b36a10c 100644
--- a/Antlr3/Codegen/CodeGenerator.cs
+++ b/Antlr3/Codegen/CodeGenerator.cs
@@ -33,24 +33,24 @@
namespace Antlr3.Codegen
{
using System.Collections.Generic;
-    using System.Collections.ObjectModel;
using System.Linq;
using Antlr.Runtime.JavaExtensions;
using Antlr3.Analysis;
using Antlr3.Grammars;

+    using Activator = System.Activator;
using AngleBracketTemplateLexer = Antlr3.ST.Language.AngleBracketTemplateLexer;
using ANTLRLexer = Antlr3.Grammars.ANTLRLexer;
using ANTLRParser = Antlr3.Grammars.ANTLRParser;
using AntlrTool = Antlr3.AntlrTool;
using ArgumentException = System.ArgumentException;
+    using ArgumentNullException = System.ArgumentNullException;
using ArgumentOutOfRangeException = System.ArgumentOutOfRangeException;
using AttributeScope = Antlr3.Tool.AttributeScope;
using BitSet = Antlr3.Misc.BitSet;
using CLSCompliant = System.CLSCompliantAttribute;
using CommonGroupLoader = Antlr3.ST.CommonGroupLoader;
using CommonToken = Antlr.Runtime.CommonToken;
-    using DateTime = System.DateTime;
using DFA = Antlr3.Analysis.DFA;
using DFAOptimizer = Antlr3.Analysis.DFAOptimizer;
using DFAState = Antlr3.Analysis.DFAState;
@@ -59,7 +59,6 @@ namespace Antlr3.Codegen
using Grammar = Antlr3.Tool.Grammar;
using GrammarAST = Antlr3.Tool.GrammarAST;
using GrammarType = Antlr3.Tool.GrammarType;
-    using IDictionary = System.Collections.IDictionary;
using IIntSet = Antlr3.Misc.IIntSet;
using IList = System.Collections.IList;
using Interval = Antlr3.Misc.Interval;
@@ -158,7 +157,7 @@ namespace Antlr3.Codegen
/** A reference to the ANTLR tool so we can learn about output directories
*  and such.
*/
-        protected AntlrTool tool;
+        protected readonly AntlrTool tool;

/** Generate debugging event method calls */
protected bool debug;
@@ -190,6 +189,9 @@ namespace Antlr3.Codegen

public CodeGenerator( AntlrTool tool, Grammar grammar, string language )
{
+            if (tool == null)
+                throw new ArgumentNullException("tool");
+
this.tool = tool;
this.grammar = grammar;
this.language = language;
@@ -324,7 +326,7 @@ namespace Antlr3.Codegen
}
}

-                target = (Target)targetType.GetConstructor( new System.Type[0] ).Invoke( new object[0] );
+                target = (Target)Activator.CreateInstance(targetType);
_targets[language] = target;
}
}

