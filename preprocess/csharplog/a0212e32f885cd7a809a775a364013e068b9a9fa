commit a0212e32f885cd7a809a775a364013e068b9a9fa
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Fri Dec 11 10:29:26 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Fri Dec 11 10:29:26 2009 -0800

C# Port:
* Merge CL 6382

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6486]

diff --git a/Antlr3.Test/Antlr3.Test.csproj b/Antlr3.Test/Antlr3.Test.csproj
index b7e26eb..8b4fe85 100644
--- a/Antlr3.Test/Antlr3.Test.csproj
+++ b/Antlr3.Test/Antlr3.Test.csproj
@@ -54,12 +54,14 @@
<Compile Include="ST4\TestFunctions.cs" />
<Compile Include="ST4\TestGroups.cs" />
<Compile Include="ST4\TestGroupSyntax.cs" />
+    <Compile Include="ST4\TestImports.cs" />
<Compile Include="ST4\TestIndentation.cs" />
<Compile Include="ST4\TestIndirectionAndEarlyEvaluation.cs" />
<Compile Include="ST4\TestLexer.cs" />
<Compile Include="ST4\TestLists.cs" />
<Compile Include="ST4\TestNullAndEmptyValues.cs" />
<Compile Include="ST4\TestOptions.cs" />
+    <Compile Include="ST4\TestRegions.cs" />
<Compile Include="ST4\TestRenderers.cs" />
<Compile Include="ST4\TestSubtemplates.cs" />
<Compile Include="ST4\TestSyntaxErrors.cs" />
diff --git a/Antlr3.Test/ST4/StringTemplateTestBase.cs b/Antlr3.Test/ST4/StringTemplateTestBase.cs
index a730dcd..4eff855 100644
--- a/Antlr3.Test/ST4/StringTemplateTestBase.cs
+++ b/Antlr3.Test/ST4/StringTemplateTestBase.cs
@@ -30,6 +30,12 @@
TestContext = testContext;
}

+        [TestInitialize]
+        public void TestInitialize()
+        {
+            TemplateGroup.defaultGroup = new TemplateGroup();
+        }
+
public void WriteFile(string dir, string fileName, string content)
{
try
diff --git a/Antlr3.Test/ST4/TestCompiler.cs b/Antlr3.Test/ST4/TestCompiler.cs
index a327eba..0204e50 100644
--- a/Antlr3.Test/ST4/TestCompiler.cs
+++ b/Antlr3.Test/ST4/TestCompiler.cs
@@ -293,6 +293,36 @@
Assert.AreEqual(stringsExpected, stringsResult);
}

+        [TestMethod]
+        public void TestEmbeddedRegion()
+        {
+            string template = "<@r>foo<@end>";
+            // compile as if in root dir and in template 'a'
+            CompiledTemplate code = new Compiler("/", "a").Compile(template);
+            string asmExpected =
+                "new 0, write";
+            string asmResult = code.Instructions();
+            Assert.AreEqual(asmExpected, asmResult);
+            string stringsExpected = "[/region__a__r]";
+            string stringsResult = Arrays.toString(code.strings);
+            Assert.AreEqual(stringsExpected, stringsResult);
+        }
+
+        [TestMethod]
+        public void TestRegion()
+        {
+            string template = "x:<@r()>";
+            // compile as if in root dir and in template 'a'
+            CompiledTemplate code = new Compiler("/", "a").Compile(template);
+            string asmExpected =
+                "load_str 0, write, new 1, write";
+            string asmResult = code.Instructions();
+            Assert.AreEqual(asmExpected, asmResult);
+            string stringsExpected = "[x:, /region__a__r]";
+            string stringsResult = Arrays.toString(code.strings);
+            Assert.AreEqual(stringsExpected, stringsResult);
+        }
+
private static class Arrays
{
public static string toString(string[] array)
diff --git a/Antlr3.Test/ST4/TestCoreBasics.cs b/Antlr3.Test/ST4/TestCoreBasics.cs
index 9a7ba31..3f6992e 100644
--- a/Antlr3.Test/ST4/TestCoreBasics.cs
+++ b/Antlr3.Test/ST4/TestCoreBasics.cs
@@ -1,8 +1,8 @@
ï»¿namespace AntlrUnitTests.ST4
{
using Microsoft.VisualStudio.TestTools.UnitTesting;
-    using ArrayList = System.Collections.ArrayList;
using StringTemplate;
+    using ArrayList = System.Collections.ArrayList;
using StringWriter = System.IO.StringWriter;

[TestClass]
diff --git a/Antlr3.Test/ST4/TestGroups.cs b/Antlr3.Test/ST4/TestGroups.cs
index 555a099..43b96f7 100644
--- a/Antlr3.Test/ST4/TestGroups.cs
+++ b/Antlr3.Test/ST4/TestGroups.cs
@@ -216,165 +216,15 @@ namespace AntlrUnitTests.ST4
}

[TestMethod]
-        public void TestImportTemplate()
-        {
-            string dir1 = GetRandomDir();
-            string a = "a() ::= <<dir1 a>>\n";
-            string b = "b() ::= <<dir1 b>>\n";
-            WriteFile(dir1, "a.st", a);
-            WriteFile(dir1, "b.st", b);
-            string dir2 = GetRandomDir();
-            a = "a() ::= <<dir2 a>>\n";
-            WriteFile(dir2, "a.st", a);
-
-            TemplateGroup group1 = new TemplateGroupDirectory(dir1);
-            TemplateGroup group2 = new TemplateGroupDirectory(dir2);
-            group2.ImportTemplates(group1);
-            Template st = group2.GetInstanceOf("b");
-            string expected = "dir1 b";
-            string result = st.Render();
-            Assert.AreEqual(expected, result);
-
-            // do it again, but make a template ref imported template
-            st = group2.GetInstanceOf("a");
-            expected = " dir1 b ";
-            result = st.Render();
-            Assert.AreEqual(expected, result);
-        }
-
-        [TestMethod]
-        public void TestImportTemplateInGroupFileFromDir()
+        public void TestDupDef()
{
string dir = GetRandomDir();
-            string a = "a() ::= << <b()> >>\n";
-            WriteFile(dir, "x/a.st", a);
-
string groupFile =
-                "b() ::= \"group file b\"\n" +
-                "c() ::= \"group file c\"\n";
-            WriteFile(dir, "y/group.stg", groupFile);
-
-            TemplateGroup group1 = new TemplateGroupDirectory(Path.Combine(dir, "x"));
-            TemplateGroup group2 = new TemplateGroupFile(Path.Combine(Path.Combine(dir, "y"), "group.stg"));
-            group1.ImportTemplates(group2);
-            Template st = group1.GetInstanceOf("/a");
-            st.code.Dump();
-            string expected = " group file b ";
-            string result = st.Render();
-            Assert.AreEqual(expected, result);
-        }
-
-        [TestMethod]
-        public void TestImportTemplateInDirFromGroupFile()
-        {
-            string dir = GetRandomDir();
-            string a = "a() ::= <<dir1 a>>\n";
-            WriteFile(dir, "group/a.st", a);
-
-            string groupFile =
-                "b() ::= \"<a()>\"\n";
+                "b() ::= \"bar\"\n" +
+                "b() ::= \"duh\"\n";
WriteFile(dir, "group.stg", groupFile);
-
-            TemplateGroup group1 = new TemplateGroupDirectory(dir);
-            TemplateGroup group2 = new TemplateGroupFile(dir + "/group.stg");
-            group2.ImportTemplates(group1);
-            Template st = group2.GetInstanceOf("/group/b");
-            string expected = "dir1 a";
-            string result = st.Render();
-            Assert.AreEqual(expected, result);
-        }
-
-        [TestMethod]
-        public void TestImportTemplateInGroupFileFromGroupFile()
-        {
-            string dir = GetRandomDir();
-            string groupFile =
-                "a() ::= \"g1 a\"\n" +
-                "b() ::= \"<c()>\"\n";
-            WriteFile(dir, "x/group.stg", groupFile);
-
-            groupFile =
-                "b() ::= \"g2 b\"\n" +
-                "c() ::= \"g2 c\"\n";
-            WriteFile(dir, "y/group.stg", groupFile);
-
-            TemplateGroup group1 = new TemplateGroupFile(Path.Combine(Path.Combine(dir, "x"), "group.stg"));
-            TemplateGroup group2 = new TemplateGroupFile(Path.Combine(Path.Combine(dir, "y"), "group.stg"));
-            group1.ImportTemplates(group2);
-            Template st = group1.GetInstanceOf("/b");
-            string expected = "g2 c";
-            string result = st.Render();
-            Assert.AreEqual(expected, result);
-        }
-
-        [TestMethod]
-        public void TestImportTemplateFromSubdir()
-        {
-            // /randomdir/x/subdir/a and /randomdir/y/subdir/b
-            string dir = GetRandomDir();
-            string a = "a() ::= << <b()> >>\n";
-            string b = "b() ::= <<x/subdir/b>>\n";
-            WriteFile(dir, "x/subdir/a.st", a);
-            WriteFile(dir, "y/subdir/b.st", b);
-
-            TemplateGroup group1 = new TemplateGroupDirectory(dir + "/x");
-            TemplateGroup group2 = new TemplateGroupDirectory(dir + "/y");
-            group1.ImportTemplates(group2);
-            Template st = group1.GetInstanceOf("/subdir/a");
-            string expected = " x/subdir/b ";
-            string result = st.Render();
-            Assert.AreEqual(expected, result);
-        }
-
-        [TestMethod]
-        public void TestImportTemplateFromGroupFile()
-        {
-            // /randomdir/x/subdir/a and /randomdir/y/subdir.stg which has a and b
-            string dir = GetRandomDir();
-            string a = "a() ::= << <b()> >>\n"; // get b imported from subdir.stg
-            WriteFile(dir, "x/subdir/a.st", a);
-
-            string groupFile =
-                "a() ::= \"group file a\"\n" +
-                "b() ::= \"group file b\"\n";
-            WriteFile(dir, "y/subdir.stg", groupFile);
-
-            TemplateGroup group1 = new TemplateGroupDirectory(dir + "/x");
-            TemplateGroup group2 = new TemplateGroupDirectory(dir + "/y");
-            group1.ImportTemplates(group2);
-            Template st = group1.GetInstanceOf("/subdir/a");
-            string expected = " group file b ";
-            string result = st.Render();
-            Assert.AreEqual(expected, result);
-        }
-
-        [TestMethod]
-        public void testPolymorphicTemplateReference()
-        {
-            string dir1 = GetRandomDir();
-            string b = "b() ::= <<dir1 b>>\n";
-            WriteFile(dir1, "b.st", b);
-            string dir2 = GetRandomDir();
-            string a = "a() ::= << <b()> >>\n";
-            b = "b() ::= <<dir2 b>>\n";
-            WriteFile(dir2, "a.st", a);
-            WriteFile(dir2, "b.st", b);
-
-            TemplateGroup group1 = new TemplateGroupDirectory(dir1);
-            TemplateGroup group2 = new TemplateGroupDirectory(dir2);
-            group1.ImportTemplates(group2);
-
-            // normal lookup; a created from dir2 calls dir2.b
-            Template st = group2.GetInstanceOf("a");
-            string expected = " dir2 b ";
-            string result = st.Render();
-            Assert.AreEqual(expected, result);
-
-            // polymorphic lookup; a created from dir1 calls dir2.a which calls dir1.b
-            st = group1.GetInstanceOf("a");
-            expected = " dir1 b ";
-            result = st.Render();
-            Assert.AreEqual(expected, result);
+            TemplateGroup group = new TemplateGroupFile(dir + "/group.stg");
+            group.Load();
}
}
}
diff --git a/Antlr3.Test/ST4/TestImports.cs b/Antlr3.Test/ST4/TestImports.cs
new file mode 100644
index 0000000..c87156d
--- /dev/null
+++ b/Antlr3.Test/ST4/TestImports.cs
@@ -0,0 +1,203 @@
+ï»¿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2005-2008 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2008-2009 Sam Harwell
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace AntlrUnitTests.ST4
+{
+    using Microsoft.VisualStudio.TestTools.UnitTesting;
+    using StringTemplate;
+
+    [TestClass]
+    public class TestImports : StringTemplateTestBase
+    {
+        [TestMethod]
+        public void TestImportTemplate()
+        {
+            string dir1 = GetRandomDir();
+            string a = "a() ::= <<dir1 a>>\n";
+            string b = "b() ::= <<dir1 b>>\n";
+            WriteFile(dir1, "a.st", a);
+            WriteFile(dir1, "b.st", b);
+            string dir2 = GetRandomDir();
+            a = "a() ::= << <b()> >>\n";
+            WriteFile(dir2, "a.st", a);
+
+            TemplateGroup group1 = new TemplateGroupDirectory(dir1);
+            TemplateGroup group2 = new TemplateGroupDirectory(dir2);
+            group2.ImportTemplates(group1);
+            Template st = group2.GetInstanceOf("b");
+            string expected = "dir1 b";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+
+            // do it again, but make a template ref imported template
+            st = group2.GetInstanceOf("a");
+            expected = " dir1 b ";
+            result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestImportTemplateInGroupFileFromDir()
+        {
+            string dir = GetRandomDir();
+            string a = "a() ::= << <b()> >>\n";
+            WriteFile(dir, "x/a.st", a);
+
+            string groupFile =
+                "b() ::= \"group file b\"\n" +
+                "c() ::= \"group file c\"\n";
+            WriteFile(dir, "y/group.stg", groupFile);
+
+            TemplateGroup group1 = new TemplateGroupDirectory(dir + "/x");
+            TemplateGroup group2 = new TemplateGroupFile(dir + "/y/group.stg");
+            group1.ImportTemplates(group2);
+            Template st = group1.GetInstanceOf("/a");
+            st.code.Dump();
+            string expected = " group file b ";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestImportTemplateInDirFromGroupFile()
+        {
+            string dir = GetRandomDir();
+            string a = "a() ::= <<dir1 a>>\n";
+            WriteFile(dir, "group/a.st", a);
+
+            string groupFile =
+                "b() ::= \"<a()>\"\n";
+            WriteFile(dir, "group.stg", groupFile);
+
+            TemplateGroup group1 = new TemplateGroupDirectory(dir);
+            TemplateGroup group2 = new TemplateGroupFile(dir + "/group.stg");
+            group2.ImportTemplates(group1);
+            Template st = group2.GetInstanceOf("/group/b");
+            string expected = "dir1 a";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestImportTemplateInGroupFileFromGroupFile()
+        {
+            string dir = GetRandomDir();
+            string groupFile =
+                "a() ::= \"g1 a\"\n" +
+                "b() ::= \"<c()>\"\n";
+            WriteFile(dir, "x/group.stg", groupFile);
+
+            groupFile =
+                "b() ::= \"g2 b\"\n" +
+                "c() ::= \"g2 c\"\n";
+            WriteFile(dir, "y/group.stg", groupFile);
+
+            TemplateGroup group1 = new TemplateGroupFile(dir + "/x/group.stg");
+            TemplateGroup group2 = new TemplateGroupFile(dir + "/y/group.stg");
+            group1.ImportTemplates(group2);
+            Template st = group1.GetInstanceOf("/b");
+            string expected = "g2 c";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestImportTemplateFromSubdir()
+        {
+            // /randomdir/x/subdir/a and /randomdir/y/subdir/b
+            string dir = GetRandomDir();
+            string a = "a() ::= << <b()> >>\n";
+            string b = "b() ::= <<x/subdir/b>>\n";
+            WriteFile(dir, "x/subdir/a.st", a);
+            WriteFile(dir, "y/subdir/b.st", b);
+
+            TemplateGroup group1 = new TemplateGroupDirectory(dir + "/x");
+            TemplateGroup group2 = new TemplateGroupDirectory(dir + "/y");
+            group1.ImportTemplates(group2);
+            Template st = group1.GetInstanceOf("/subdir/a");
+            string expected = " x/subdir/b ";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestImportTemplateFromGroupFile()
+        {
+            // /randomdir/x/subdir/a and /randomdir/y/subdir.stg which has a and b
+            string dir = GetRandomDir();
+            string a = "a() ::= << <b()> >>\n"; // get b imported from subdir.stg
+            WriteFile(dir, "x/subdir/a.st", a);
+
+            string groupFile =
+                "a() ::= \"group file a\"\n" +
+                "b() ::= \"group file b\"\n";
+            WriteFile(dir, "y/subdir.stg", groupFile);
+
+            TemplateGroup group1 = new TemplateGroupDirectory(dir + "/x");
+            TemplateGroup group2 = new TemplateGroupDirectory(dir + "/y");
+            group1.ImportTemplates(group2);
+            Template st = group1.GetInstanceOf("/subdir/a");
+            string expected = " group file b ";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestPolymorphicTemplateReference()
+        {
+            string dir1 = GetRandomDir();
+            string b = "b() ::= <<dir1 b>>\n";
+            WriteFile(dir1, "b.st", b);
+            string dir2 = GetRandomDir();
+            string a = "a() ::= << <b()> >>\n";
+            b = "b() ::= <<dir2 b>>\n";
+            WriteFile(dir2, "a.st", a);
+            WriteFile(dir2, "b.st", b);
+
+            TemplateGroup group1 = new TemplateGroupDirectory(dir1);
+            TemplateGroup group2 = new TemplateGroupDirectory(dir2);
+            group1.ImportTemplates(group2);
+
+            // normal lookup; a created from dir2 calls dir2.b
+            Template st = group2.GetInstanceOf("a");
+            string expected = " dir2 b ";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+
+            // polymorphic lookup; a created from dir1 calls dir2.a which calls dir1.b
+            st = group1.GetInstanceOf("a");
+            expected = " dir1 b ";
+            result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+    }
+}
diff --git a/Antlr3.Test/ST4/TestLexer.cs b/Antlr3.Test/ST4/TestLexer.cs
index 14627e8..4e5d751 100644
--- a/Antlr3.Test/ST4/TestLexer.cs
+++ b/Antlr3.Test/ST4/TestLexer.cs
@@ -229,5 +229,26 @@ namespace AntlrUnitTests.ST4
"[@20,47:47='>',<RDELIM>,1:47]]";
CheckTokens(template, expected);
}
+
+        [TestMethod]
+        public void TestEmbeddedRegion()
+        {
+            string template = "<@r>foo<@end>";
+            string expected =
+                "[[@0,0:0='<',<LDELIM>,1:0], [@1,1:1='@',<AT>,1:1], [@2,2:2='r',<ID>,1:2], " +
+                "[@3,3:3='>',<RDELIM>,1:3], [@4,4:6='foo',<TEXT>,1:4], [@5,7:7='<',<LDELIM>,1:7], " +
+                "[@6,8:11='@end',<END>,1:8], [@7,12:12='>',<RDELIM>,1:12]]";
+            CheckTokens(template, expected);
+        }
+
+        [TestMethod]
+        public void TestRegion()
+        {
+            string template = "<@r()>";
+            string expected =
+                "[[@0,0:0='<',<LDELIM>,1:0], [@1,1:1='@',<AT>,1:1], [@2,2:2='r',<ID>,1:2], " +
+                 "[@3,3:3='(',<LPAREN>,1:3], [@4,4:4=')',<RPAREN>,1:4], [@5,5:5='>',<RDELIM>,1:5]]";
+            CheckTokens(template, expected);
+        }
}
}
diff --git a/Antlr3.Test/ST4/TestRegions.cs b/Antlr3.Test/ST4/TestRegions.cs
new file mode 100644
index 0000000..f1a404d
--- /dev/null
+++ b/Antlr3.Test/ST4/TestRegions.cs
@@ -0,0 +1,139 @@
+ï»¿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2005-2008 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2008-2009 Sam Harwell
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace AntlrUnitTests.ST4
+{
+    using Microsoft.VisualStudio.TestTools.UnitTesting;
+    using StringTemplate;
+
+    [TestClass]
+    public class TestRegions : StringTemplateTestBase
+    {
+        [TestMethod]
+        public void TestEmbeddedRegion()
+        {
+            string dir = GetRandomDir();
+            string groupFile =
+                "a() ::= <<\n" +
+                "[<@r>bar<@end>]\n" +
+                ">>\n";
+            WriteFile(dir, "group.stg", groupFile);
+            TemplateGroup group = new TemplateGroupFile(dir + "/group.stg");
+            Template st = group.GetInstanceOf("a");
+            string expected = "[bar]" + newline;
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestRegion()
+        {
+            string dir = GetRandomDir();
+            string groupFile =
+                "a() ::= <<\n" +
+                "[<@r()>]\n" +
+                ">>\n";
+            WriteFile(dir, "group.stg", groupFile);
+            TemplateGroup group = new TemplateGroupFile(dir + "/group.stg");
+            Template st = group.GetInstanceOf("a");
+            string expected = "[]" + newline;
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestDefineRegionInSubgroup()
+        {
+            string dir = GetRandomDir();
+            string g1 = "a() ::= <<[<@r()>]>>\n";
+            WriteFile(dir, "g1.stg", g1);
+            string g2 = "@a.r() ::= <<foo>>>\n";
+            WriteFile(dir, "g2.stg", g2);
+
+            TemplateGroup group1 = new TemplateGroupFile(dir + "/g1.stg");
+            TemplateGroup group2 = new TemplateGroupFile(dir + "/g2.stg");
+            group2.ImportTemplates(group1); // define r in g2
+            Template st = group2.GetInstanceOf("a");
+            string expected = "[foo]";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestDefineRegionInSubgroup2()
+        {
+            string dir = GetRandomDir();
+            string g1 = "a() ::= <<[<@r()>]>>\n";
+            WriteFile(dir, "g1.stg", g1);
+            string g2 = "@a.r() ::= <<foo>>>\n";
+            WriteFile(dir, "g2.stg", g2);
+
+            TemplateGroup group1 = new TemplateGroupFile(dir + "/g1.stg");
+            TemplateGroup group2 = new TemplateGroupFile(dir + "/g2.stg");
+            group1.ImportTemplates(group2); // opposite of previous; g1 imports g2
+            Template st = group1.GetInstanceOf("a");
+            string expected = "[]"; // @a.r implicitly defined in g1; can't see g2's
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestDefineRegionInSameGroup()
+        {
+            string dir = GetRandomDir();
+            string g = "a() ::= <<[<@r()>]>>\n" +
+                       "@a.r() ::= <<foo>>\n";
+            WriteFile(dir, "g.stg", g);
+
+            TemplateGroup group = new TemplateGroupFile(dir + "/g.stg");
+            Template st = group.GetInstanceOf("a");
+            string expected = "[foo]";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestCantDefineEmbeddedRegionAgain()
+        {
+            string dir = GetRandomDir();
+            string g = "a() ::= <<[<@r>foo<@end>]>>\n" +
+                       "@a.r() ::= <<bar>>\n"; // error; dup
+            WriteFile(dir, "g.stg", g);
+
+            TemplateGroup group = new TemplateGroupFile(dir + "/g.stg");
+            Template st = group.GetInstanceOf("a");
+            string expected = "[foo]";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+    }
+}
diff --git a/Antlr3.vsmdi b/Antlr3.vsmdi
index f518fa7..0aba7d8 100644
--- a/Antlr3.vsmdi
+++ b/Antlr3.vsmdi
@@ -317,24 +317,28 @@
<TestLink id="1420257e-df20-90c7-8863-110a9bb44f27" name="TestIndirectTemplateConstructor" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
+  <TestList name="Regions" id="28b56038-623a-47a8-adcb-f5e23303e4a0" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
+    <TestLinks>
+      <TestLink id="e89df356-dd33-4e72-2154-cb17f4df1052" name="TestRegion" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="16e5156b-1287-9e1a-e8f5-712e5018a318" name="TestDefineRegionInSubgroup" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e8458cbc-500b-ffc3-0c20-84e2b2b6015d" name="TestEmbeddedRegion" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="73854a85-e13b-1060-01e7-2a11a186eae4" name="TestDefineRegionInSubgroup2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="88be1391-90c6-ac68-66e7-86f9d490da8b" name="TestCantDefineEmbeddedRegionAgain" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e85e35b1-c23a-2875-7e2b-52e1d0d2c285" name="TestDefineRegionInSameGroup" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+    </TestLinks>
+  </TestList>
<TestList name="Groups" id="2b84a5ba-a6b2-44f6-842f-39aeaec2d3f0" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
-      <TestLink id="7b00b426-de9c-96ee-c01a-5fac492b9305" name="TestSimpleGroup" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="08e0d019-b06b-0380-a8b7-e7a0d2997e53" name="TestRefToAnotherTemplateInSameGroup" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="d12a6648-2bc5-99df-5126-bd7375cd095b" name="TestAbsoluteTemplateRef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c6270e4e-41cf-69d0-0dd6-ed68cdb24ff4" name="TestSubdir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="b6b3f33a-4c20-63d1-c250-ee552d1b90b7" name="TestImportTemplateInGroupFileFromGroupFile" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="6dc4520e-945b-e470-4947-6d60453e7be1" name="testPolymorphicTemplateReference" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="93ee4343-09bf-86f9-8535-9e18a7e13780" name="TestImportTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="c393b543-c4f8-80cf-21ea-682b87b460ec" name="TestGroupFileInDir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="abe7d041-f0a5-435e-7a11-f89e8b4428f2" name="TestGroupWithTwoTemplates" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="91232c3c-282a-b92f-715d-352b8c9b2366" name="TestDupDef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="fbc52c3e-b252-7a44-8373-828d34f8579f" name="TestSubSubdir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="79c131f1-4735-8a9b-7f59-e08ac05fd503" name="TestImportTemplateInDirFromGroupFile" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="abe7d041-f0a5-435e-7a11-f89e8b4428f2" name="TestGroupWithTwoTemplates" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c393b543-c4f8-80cf-21ea-682b87b460ec" name="TestGroupFileInDir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1b8ffefd-d094-896e-1275-b11bcf4ea1c2" name="TestGroupFileInSubDir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="bad5f17e-eb43-13b5-b03b-c9fb5a41e449" name="TestImportTemplateFromGroupFile" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="7b00b426-de9c-96ee-c01a-5fac492b9305" name="TestSimpleGroup" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="d12a6648-2bc5-99df-5126-bd7375cd095b" name="TestAbsoluteTemplateRef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="48162e6d-8cdc-6ad7-8a8a-9471ed22f7e5" name="TestRefToAnotherTemplateInSameSubdir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="57638d34-22fc-12e3-82f3-8979f1c85ade" name="TestImportTemplateFromSubdir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="61bba200-8549-30e6-977c-6321b41d8827" name="TestImportTemplateInGroupFileFromDir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="08e0d019-b06b-0380-a8b7-e7a0d2997e53" name="TestRefToAnotherTemplateInSameGroup" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
<TestList name="Rewrite templates" id="2dbc20ec-9234-470e-a9b4-82226d3db427" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
@@ -1138,22 +1142,24 @@
</TestList>
<TestList name="Lexer" id="d94a8f90-e882-4472-81f5-ca019d5f317a" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
-      <TestLink id="733f1229-ea44-9120-ed6f-547703b79408" name="TestEscDelimHasCorrectStartChar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="42ff96ce-221a-6a25-9573-f7364c635002" name="TestIFNot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="61e5e2c0-5a5b-f040-0d8e-29bcae8e6b60" name="TestEscDelim" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="97274738-e6bf-c112-d908-32af381101ad" name="TestNestedSubtemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="3228e069-2113-be85-bd6e-3101cc727cf1" name="TestSubtemplateMultiArgs" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="fb7a670e-b0ca-db8d-1606-2a9ecd2f3181" name="TestOneExpr" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="3c6f2d23-a92d-eb53-7154-b104ce59a37d" name="TestNestedList" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="f417fc2d-0d2f-6854-cd84-c693c0e375e0" name="TestString" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5be24e3f-84c9-b336-dc3b-e5a81cc167dd" name="TestSubtemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="cd85d6ca-b823-3c8e-38f0-e366d926fed9" name="TestELSEIF" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="6670043a-7e50-9ddf-9e32-6c5fa06f8586" name="TestEmbeddedRegion" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="733f1229-ea44-9120-ed6f-547703b79408" name="TestEscDelimHasCorrectStartChar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="bf3d9c8c-7b95-db95-789b-0a3afbfd0a47" name="TestEscChar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="61e5e2c0-5a5b-f040-0d8e-29bcae8e6b60" name="TestEscDelim" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="42ff96ce-221a-6a25-9573-f7364c635002" name="TestIFNot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="f417fc2d-0d2f-6854-cd84-c693c0e375e0" name="TestString" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4bbe312f-ac50-826a-e66d-d759e744bb6d" name="TestEscInString" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0730faae-effd-0ae9-fcf6-475f59e7e399" name="TestRegion" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8d9768e5-eaea-656b-65d1-3e5ba35390a5" name="TestIF" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="cd85d6ca-b823-3c8e-38f0-e366d926fed9" name="TestELSEIF" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="fb7a670e-b0ca-db8d-1606-2a9ecd2f3181" name="TestOneExpr" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="81888c57-9130-ac96-3334-97c96f969731" name="TestIFELSE" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="64bc2ada-1718-d826-5ffb-58cfb8dce9f2" name="TestSubtemplateNoArg" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="4bbe312f-ac50-826a-e66d-d759e744bb6d" name="TestEscInString" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6c9db0b3-20ff-5228-d3a5-79b88f9071be" name="TestOneExprSurrounded" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3228e069-2113-be85-bd6e-3101cc727cf1" name="TestSubtemplateMultiArgs" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3c6f2d23-a92d-eb53-7154-b104ce59a37d" name="TestNestedList" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="64bc2ada-1718-d826-5ffb-58cfb8dce9f2" name="TestSubtemplateNoArg" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
<TestList name="Trees" id="e433d4d6-0eb4-4104-bbda-10aa34646d26" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
@@ -1243,25 +1249,38 @@
<TestLink id="1420c77f-fd0d-92bf-6a3a-8baa44bb2654" name="TestMatchesLongestThenTestPred" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
+  <TestList name="Imports" id="ea4582d0-2200-470e-a48e-73c98104fa31" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
+    <TestLinks>
+      <TestLink id="8cf883f5-e042-bec5-3395-dfe103d89b4a" name="TestImportTemplateInGroupFileFromDir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="fa4d914e-4c01-564a-ddde-8399387c04e0" name="TestImportTemplateInDirFromGroupFile" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="eb3591bc-6cbe-d2fc-02aa-def7cda9ff6f" name="TestImportTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="8f585680-990b-9cef-e906-78976e7c4554" name="TestPolymorphicTemplateReference" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="2f35689b-e377-a93e-13f0-b793ee424a07" name="TestImportTemplateInGroupFileFromGroupFile" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3708740f-8c1e-264c-a5c3-1c292660817c" name="TestImportTemplateFromGroupFile" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="11bd79ad-f005-a74a-bfdb-9ee5c5641ed3" name="TestImportTemplateFromSubdir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+    </TestLinks>
+  </TestList>
<TestList name="Compiler" id="f5bf2859-0ef1-4095-bc29-976490130520" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
<TestLink id="dfa217c5-8264-c110-6902-3d610e7d56a6" name="TestIf" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="4bf82b4a-7fdd-16dd-af8e-a222d8d70f3e" name="TestList" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="9f2e0163-1b74-ffb3-e68f-f9747b285309" name="TestEmptyList" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="8946c55b-c1e0-c96e-ac51-85548fbb827d" name="TestInclude" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="da776a71-7f0d-c7dd-08f0-3408f7aa4581" name="TestAttr" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="443b3223-bf79-ac17-4f5d-a90f42ed3338" name="TestOptions" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="9effa1c5-13b4-a8c9-2cbc-4e3074d70731" name="TestMap" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="9a096c5c-0b99-b6f4-93f9-dd465271c689" name="TestOptionAsTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="6e74dc68-75cc-9c7b-4de9-5634ce71ee81" name="TestProp2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="14498d8c-2407-08a9-9b66-70910347394a" name="TestOption" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="79922e5e-365d-56ce-cffb-2fcd17b0d61e" name="TestRepeatedMap" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="911304b7-dbbb-c288-d13c-bf5eb31518e8" name="TestProp" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="818328ba-8a35-c3b5-4aa2-0fbf650141dd" name="TestElseIfElse" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="6e74dc68-75cc-9c7b-4de9-5634ce71ee81" name="TestProp2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="8946c55b-c1e0-c96e-ac51-85548fbb827d" name="TestInclude" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="443b3223-bf79-ac17-4f5d-a90f42ed3338" name="TestOptions" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="9f2e0163-1b74-ffb3-e68f-f9747b285309" name="TestEmptyList" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c7734617-286d-f5aa-4228-e3ab1d4b0b9f" name="TestAnonMap" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="90d74e3c-7a39-83b7-7fd3-38ad67a1948a" name="TestEmbeddedRegion" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4bf82b4a-7fdd-16dd-af8e-a222d8d70f3e" name="TestList" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="fc70abd4-500a-8b49-bce6-b65a3c1d6795" name="TestRotMap" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="da776a71-7f0d-c7dd-08f0-3408f7aa4581" name="TestAttr" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0d966e42-008a-ebd2-337c-efedd6aa64b6" name="TestIfElse" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="87b5393f-dd7c-c032-2c13-967cae28e3da" name="TestElseIf" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="79922e5e-365d-56ce-cffb-2fcd17b0d61e" name="TestRepeatedMap" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="14498d8c-2407-08a9-9b66-70910347394a" name="TestOption" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="9a096c5c-0b99-b6f4-93f9-dd465271c689" name="TestOptionAsTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="9effa1c5-13b4-a8c9-2cbc-4e3074d70731" name="TestMap" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="dc7f3543-fe02-2b96-ba8a-9b6c890a201b" name="TestRegion" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
<TestList name="StringTemplate" id="f5f852b3-d8bb-4b03-bbb1-b9184f36badc" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
diff --git a/StringTemplate4/BytecodeDisassembler.cs b/StringTemplate4/BytecodeDisassembler.cs
index 13d9178..68477f0 100644
--- a/StringTemplate4/BytecodeDisassembler.cs
+++ b/StringTemplate4/BytecodeDisassembler.cs
@@ -106,7 +106,7 @@ namespace StringTemplate
ip++;
if (I.n == 0)
{
-                buf.Append(string.Format("  "));
+                buf.Append("  ");
return ip;
}
List<string> operands = new List<string>();
diff --git a/StringTemplate4/Compiler.cs b/StringTemplate4/Compiler.cs
index 9f7d42c..44b477e 100644
--- a/StringTemplate4/Compiler.cs
+++ b/StringTemplate4/Compiler.cs
@@ -213,7 +213,7 @@ namespace StringTemplate

public string CompileAnonTemplate(string enclosingTemplateName,
ITokenStream input,
-                                          IList<IToken> ids,
+                                          IList<IToken> argIDs,
RecognizerSharedState state)
{
subtemplateCount++;
@@ -224,10 +224,10 @@ namespace StringTemplate
code.implicitlyDefinedTemplates = new List<CompiledTemplate>();
code.implicitlyDefinedTemplates.Add(sub);
sub.name = name;
-            if (ids != null)
+            if (argIDs != null)
{
sub.formalArguments = new Dictionary<string, FormalArgument>();
-                foreach (IToken arg in ids)
+                foreach (IToken arg in argIDs)
{
string argName = arg.Text;
sub.formalArguments[argName] = new FormalArgument(argName);
@@ -236,19 +236,37 @@ namespace StringTemplate
return name;
}

-        public void CompileRegion(string enclosingTemplateName,
-                                  string regionName,
-                                  ITokenStream input,
-                                  RecognizerSharedState state)
+        public string CompileRegion(string enclosingTemplateName,
+                                    string regionName,
+                                    ITokenStream input,
+                                    RecognizerSharedState state)
{
Compiler c = new Compiler(templatePathPrefix, enclosingTemplateName);
CompiledTemplate sub = c.Compile(input, state);
-            sub.name = regionName;
+            string fullName = templatePathPrefix + TemplateGroup.GetMangledRegionName(enclosingTemplateName, regionName);
+            sub.name = fullName;
if (code.implicitlyDefinedTemplates == null)
{
code.implicitlyDefinedTemplates = new List<CompiledTemplate>();
}
code.implicitlyDefinedTemplates.Add(sub);
+            return fullName;
+        }
+
+        public void DefineBlankRegion(string fullyQualifiedName)
+        {
+            // TODO: combine with CompileRegion
+            CompiledTemplate blank = new CompiledTemplate()
+            {
+                isRegion = true,
+                regionDefType = Template.RegionType.Implicit,
+                name = fullyQualifiedName
+            };
+
+            if (code.implicitlyDefinedTemplates == null)
+                code.implicitlyDefinedTemplates = new List<CompiledTemplate>();
+
+            code.implicitlyDefinedTemplates.Add(blank);
}

protected void EnsureCapacity()
diff --git a/StringTemplate4/Group.g3 b/StringTemplate4/Group.g3
index e144f3d..9f9e57e 100644
--- a/StringTemplate4/Group.g3
+++ b/StringTemplate4/Group.g3
@@ -74,25 +74,32 @@ public
templateDef[string prefix]
@init {
string template=null;
+    string fullName = null;
int n=0; // num char to strip from left, right of template def
}
-	:	(	'@' ID '.' region=ID
-		|	name=ID
+	:	(	'@' enclosing=ID '.' region=ID '(' ')'
+			{fullName = TemplateGroup.GetMangledRegionName($enclosing.text, $region.text);}
+		|	name=ID '(' formalArgs? ')' {fullName = $name.text;}
)
-	    '(' formalArgs? ')' '::='
-	    {IToken templateToken = input.LT(1);}
-	    (	STRING     {template=$STRING.text; n=1;}
-	    |	BIGSTRING  {template=$BIGSTRING.text; n=2;}
-	    )
-	    {
-	    template = Misc.Strip(template, n);
-   		if ( templateToken.Type==BIGSTRING ) {
-   			template = Misc.TrimOneStartingWS(template);
-   		}
+		'::='
+		{IToken templateToken = input.LT(1);}
+		(	STRING     {template=$STRING.text; n=1;}
+		|	BIGSTRING  {template=$BIGSTRING.text; n=2;}
+		)
+		{
+		template = Misc.Strip(template, n);
+		if ( templateToken.Type==BIGSTRING ) {
+			template = Misc.TrimOneStartingWS(template);
+		}
try {
-		    this._group.DefineTemplate(prefix, $name.text, $formalArgs.args, template);
-		    GroupLexer lexer = (GroupLexer)input.TokenSource;
-		    lexer._enclosingTemplateName = $name.text;
+			CompiledTemplate st = null;
+			if ($enclosing != null)
+				st = this._group.DefineRegion(prefix, $enclosing.text, $region.text, template);
+			else
+				st = this._group.DefineTemplate(prefix, $name.text, $formalArgs.args, template);
+
+			GroupLexer lexer = (GroupLexer)input.TokenSource;
+			lexer._enclosingTemplateName = fullName;
}
catch (TemplateRecognitionException e) {
RecognitionException re = (RecognitionException)e.InnerException;
diff --git a/StringTemplate4/ICodeGenerator.cs b/StringTemplate4/ICodeGenerator.cs
index 0e40d65..7b11bb4 100644
--- a/StringTemplate4/ICodeGenerator.cs
+++ b/StringTemplate4/ICodeGenerator.cs
@@ -61,6 +61,8 @@ namespace StringTemplate
IList<IToken> ids,
RecognizerSharedState state);

-        void CompileRegion(string enclosingTemplateName, string regionName, ITokenStream input, RecognizerSharedState state);
+        string CompileRegion(string enclosingTemplateName, string regionName, ITokenStream input, RecognizerSharedState state);
+
+        void DefineBlankRegion(string fullyQualifiedName);
}
}
diff --git a/StringTemplate4/TemplateGroup.cs b/StringTemplate4/TemplateGroup.cs
index c046b41..30d0578 100644
--- a/StringTemplate4/TemplateGroup.cs
+++ b/StringTemplate4/TemplateGroup.cs
@@ -44,6 +44,12 @@ namespace StringTemplate
using Type = System.Type;
using Antlr.Runtime;

+    /** A directory or directory tree of .st template files and/or group files.
+     *  Individual template files contain formal template definitions. In a sense,
+     *  it's like a single group file broken into multiple files, one for each template.
+     *  ST v3 had just the pure template inside, not the template name and header.
+     *  Name inside must match filename (minus suffix).
+     */
public class TemplateGroup
{
/** When we use key as a value in a dictionary, this is how we signify. */
@@ -131,6 +137,14 @@ namespace StringTemplate
}
}

+        public IDictionary<string, CompiledTemplate> Templates
+        {
+            get
+            {
+                return templates;
+            }
+        }
+
/** The primary means of getting an instance of a template from this
*  group. Must be absolute name like /a/b
*/
@@ -229,12 +243,10 @@ namespace StringTemplate
{
throw new ArgumentException("cannot have '.' in template names");
}
-            Compiler c = new Compiler(prefix, name);
-            CompiledTemplate code = c.Compile(template);
-            code.name = name;
+
+            CompiledTemplate code = Compile(prefix, name, template);
code.formalArguments = args;
-            code.nativeGroup = this;
-            templates[prefix + name] = code;
+            RawDefineTemplate(prefix + name, code);
if (args != null)
{ // compile any default args
foreach (string a in args.Keys)
@@ -247,36 +259,68 @@ namespace StringTemplate
}
}
}
+
// define any anonymous subtemplates
-            DefineAnonSubtemplates(code);
+            DefineImplicitlyDefinedTemplates(code);

return code;
}

-        protected virtual void DefineAnonSubtemplates(CompiledTemplate code)
+        public CompiledTemplate DefineRegion(string prefix,
+                                             string enclosingTemplateName,
+                                             string name,
+                                             string template)
+        {
+            CompiledTemplate code = Compile(prefix, name, template);
+            code.isRegion = true;
+            code.regionDefType = Template.RegionType.Explicit;
+            RawDefineTemplate(prefix + GetMangledRegionName(enclosingTemplateName, name), code);
+            return code;
+        }
+
+        protected void DefineImplicitlyDefinedTemplates(CompiledTemplate code)
{
if (code.implicitlyDefinedTemplates != null)
{
foreach (CompiledTemplate sub in code.implicitlyDefinedTemplates)
{
-                    templates[sub.name] = sub;
-                    DefineAnonSubtemplates(sub);
+                    RawDefineTemplate(sub.name, sub);
+                    DefineImplicitlyDefinedTemplates(sub);
}
}
}

-        /** Track all references to regions &lt;@foo&gt;...&lt;@end&gt; or &lt;@foo()&gt;.  */
-        public CompiledTemplate DefineRegionTemplate(string enclosingTemplateName,
-                                               string regionName,
-                                               string template,
-                                               Template.RegionType type)
+        protected void RawDefineTemplate(string name, CompiledTemplate code)
{
-            string mangledName =
-                GetMangledRegionName(enclosingTemplateName, regionName);
-            CompiledTemplate regionST = DefineTemplate(mangledName, template);
-            regionST.isRegion = true;
-            regionST.regionDefType = type;
-            return regionST;
+            CompiledTemplate prev;
+            if (templates.TryGetValue(name, out prev))
+            {
+                if (!prev.isRegion)
+                {
+                    listener.Error("redefinition of " + name);
+                    return;
+                }
+                if (prev.isRegion && prev.regionDefType == Template.RegionType.Embedded)
+                {
+                    listener.Error("can't redefine embedded region " + name);
+                    return;
+                }
+                else if (prev.isRegion && prev.regionDefType == Template.RegionType.Explicit)
+                {
+                    listener.Error("can't redefine region in same group: " + name);
+                    return;
+                }
+            }
+            templates[name] = code;
+        }
+
+        protected CompiledTemplate Compile(string prefix, string name, string template)
+        {
+            Compiler c = new Compiler(prefix, name);
+            CompiledTemplate code = c.Compile(template);
+            code.name = name;
+            code.nativeGroup = this;
+            return code;
}

/** The "foo" of t() ::= "&lt;@foo()&gt;" is mangled to "region#t#foo" */
@@ -382,7 +426,8 @@ namespace StringTemplate
Load();

StringBuilder buf = new StringBuilder();
-            //if ( supergroup!=null ) buf.append(" : "+supergroup);
+            if (imports != null)
+                buf.Append(" : " + imports);
foreach (string name in templates.Keys)
{
if (name.StartsWith("/_sub"))
diff --git a/StringTemplate4/TemplateGroupDirectory.cs b/StringTemplate4/TemplateGroupDirectory.cs
index e570570..5f5033a 100644
--- a/StringTemplate4/TemplateGroupDirectory.cs
+++ b/StringTemplate4/TemplateGroupDirectory.cs
@@ -84,7 +84,7 @@ namespace StringTemplate
protected void _Load(string prefix)
{
string dir = Path.Combine(fullyQualifiedRootDirName, prefix);
-            Console.WriteLine("load dir '" + prefix + "' under " + fullyQualifiedRootDirName);
+            //Console.WriteLine("load dir '" + prefix + "' under " + fullyQualifiedRootDirName);

foreach (var d in Directory.GetDirectories(dir))
{
@@ -104,7 +104,7 @@ namespace StringTemplate
{
// load from disk
string absoluteFileName = Path.Combine(Path.Combine(fullyQualifiedRootDirName, prefix), fileName);
-            Console.WriteLine("load " + absoluteFileName);
+            //Console.WriteLine("load " + absoluteFileName);
if (!File.Exists(absoluteFileName))
{
// TODO: add tolerance check here
diff --git a/StringTemplate4/TemplateParser.g3 b/StringTemplate4/TemplateParser.g3
index f5ca91f..8d9ab8d 100644
--- a/StringTemplate4/TemplateParser.g3
+++ b/StringTemplate4/TemplateParser.g3
@@ -61,6 +61,10 @@ template
text             {gen.Emit(Bytecode.INSTR_DEDENT);}
|	text
|   (i=INDENT {Indent($i.text);})? region
+							 {
+							 gen.Emit(Bytecode.INSTR_NEW, $region.name);
+							 gen.Emit(Bytecode.INSTR_WRITE);
+							 }
|	i=INDENT         {Indent($i.text);}
NEWLINE          {gen.Emit(Bytecode.INSTR_NEWLINE);}
{gen.Emit(Bytecode.INSTR_DEDENT);}
@@ -86,12 +90,16 @@ exprTag
RDELIM
;

-region // match $@foo$...$@end$
-	:	'@' ID
+region returns [string name] // match $@foo$...$@end$
+	:	LDELIM '@' ID RDELIM
{{ // force exec even when backtracking
+		if (state.backtracking == 0)
+			$name = gen.CompileRegion(_enclosingTemplateName, $ID.text, input, state);
+		else
+			$name = NoopGen.CompileRegion(_enclosingTemplateName, $ID.text, input, state);
gen.CompileRegion(_enclosingTemplateName, $ID.text, input, state);
}}
-		'@end'
+		LDELIM '@end' RDELIM
;

subtemplate returns [string name]
@@ -100,7 +108,10 @@ subtemplate returns [string name]
List<IToken> idTokens = null;
if ($ids != null)
idTokens = new List<IToken>($ids.Cast<IToken>());
-		$name = gen.CompileAnonTemplate(_enclosingTemplateName, input, idTokens, state);
+		if (state.backtracking == 0)
+			$name = gen.CompileAnonTemplate(_enclosingTemplateName, input, idTokens, state);
+		else
+			$name = NoopGen.CompileAnonTemplate(_enclosingTemplateName, input, idTokens, state);
}}
'}'
;
@@ -110,7 +121,7 @@ subtemplate returns [string name]
*  syntax errors upon '}' in rule templatee, we force '}' into FOLLOW set.
*  I hope to make ANTLR ignore FOLLOW set for (...)* in future.
*/
-addRcurlyToFollowOfTemplateRule : template '}' ;
+addTemplateEndTokensToFollowOfTemplateRule : template ('}' | LDELIM '@end') ;

ifOnMultiLines
@init {
@@ -274,6 +285,12 @@ options {k=2;} // prevent full LL(*) which fails, falling back on k=1; need k=2
:	{Compiler.funcs.ContainsKey(input.LT(1).Text)}?
ID '(' expr ')' {Func($ID);}
|	ID {gen.Emit(Bytecode.INSTR_NEW, PrefixedName($ID.text));} '(' args? ')'
+	|	'@' ID '(' ')'	// convert <@r()> to <region__enclosingTemplate__r()>
+		{
+		string mangled = TemplateGroup.GetMangledRegionName(_enclosingTemplateName, $ID.text);
+		gen.DefineBlankRegion(PrefixedName(mangled));
+		gen.Emit(Bytecode.INSTR_NEW, PrefixedName(mangled));
+		}
|	primary
;

@@ -301,11 +318,6 @@ templateRef
:	ID			{gen.Emit(Bytecode.INSTR_LOAD_STR, PrefixedName($ID.text));}
|	subtemplate {gen.Emit(Bytecode.INSTR_LOAD_STR, PrefixedName($subtemplate.name));}
|	'(' mapExpr ')' {gen.Emit(Bytecode.INSTR_TOSTR);}
-	|	'@' ID '(' ')'	// convert <@r()> to <region__enclosingTemplate__r()>
-		{
-		string mangled = TemplateGroup.GetMangledRegionName(_enclosingTemplateName, $ID.text);
-		gen.Emit(Bytecode.INSTR_LOAD_STR, PrefixedName(mangled));
-		}
;

list:	{gen.Emit(Bytecode.INSTR_LIST);} '[' listElement (',' listElement)* ']'
diff --git a/StringTemplate4/TemplateParserHelper.cs b/StringTemplate4/TemplateParserHelper.cs
index aa6f6bd..a0ac391 100644
--- a/StringTemplate4/TemplateParserHelper.cs
+++ b/StringTemplate4/TemplateParserHelper.cs
@@ -45,7 +45,8 @@ namespace StringTemplate
*/
private string _enclosingTemplateName;

-        ICodeGenerator gen = new CodeGenerator();
+        private static ICodeGenerator NoopGen = new CodeGenerator();
+        private ICodeGenerator gen = NoopGen;

public TemplateParser(ITokenStream input, ICodeGenerator gen, string enclosingTemplateName)
: this(input, new RecognizerSharedState(), gen, enclosingTemplateName)
@@ -129,6 +130,9 @@ namespace StringTemplate
gen.Emit(Bytecode.INSTR_INDENT, indent);
}

+        /// <summary>
+        /// used to parse w/o compilation side-effects
+        /// </summary>
private sealed class CodeGenerator : ICodeGenerator
{
public string TemplateReferencePrefix
@@ -167,7 +171,14 @@ namespace StringTemplate
return null;
}

-            public void CompileRegion(string enclosingTemplateName, string regionName, ITokenStream input, RecognizerSharedState state)
+            public string CompileRegion(string enclosingTemplateName, string regionName, ITokenStream input, RecognizerSharedState state)
+            {
+                Compiler c = new Compiler();
+                c.Compile(input, state);
+                return null;
+            }
+
+            public void DefineBlankRegion(string fullyQualifiedName)
{
}
}

