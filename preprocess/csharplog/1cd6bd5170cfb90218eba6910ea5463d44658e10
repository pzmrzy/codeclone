commit 1cd6bd5170cfb90218eba6910ea5463d44658e10
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sat Aug 6 09:39:39 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sat Aug 6 09:39:39 2011 -0800

(C# 3) Fix code generation for non-C# targets by adding the Target.UseBaseTemplatesForSynPredFragments property (default false, true for the C# targets)

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 9014]

diff --git a/Antlr3.Targets/Antlr3.Targets.CSharp2/CSharp2Target.cs b/Antlr3.Targets/Antlr3.Targets.CSharp2/CSharp2Target.cs
index cb35e72..70c61e1 100644
--- a/Antlr3.Targets/Antlr3.Targets.CSharp2/CSharp2Target.cs
+++ b/Antlr3.Targets/Antlr3.Targets.CSharp2/CSharp2Target.cs
@@ -69,6 +69,14 @@ namespace Antlr3.Targets
"enum", "namespace", "string",
};

+        public override bool UseBaseTemplatesForSynPredFragments
+        {
+            get
+            {
+                return false;
+            }
+        }
+
public override string EncodeIntAsCharEscape(int v)
{
return "\\x" + v.ToString("X");
diff --git a/Antlr3.Targets/Antlr3.Targets.CSharp3/CSharp3Target.cs b/Antlr3.Targets/Antlr3.Targets.CSharp3/CSharp3Target.cs
index e7c158b..c3ac06d 100644
--- a/Antlr3.Targets/Antlr3.Targets.CSharp3/CSharp3Target.cs
+++ b/Antlr3.Targets/Antlr3.Targets.CSharp3/CSharp3Target.cs
@@ -68,6 +68,14 @@ namespace Antlr3.Targets
"enum", "namespace", "string",
};

+        public override bool UseBaseTemplatesForSynPredFragments
+        {
+            get
+            {
+                return false;
+            }
+        }
+
public override string EncodeIntAsCharEscape( int v )
{
return "\\x" + v.ToString( "X" );
diff --git a/Antlr3/Codegen/Target.cs b/Antlr3/Codegen/Target.cs
index e4bb9ca..8caa9d3 100644
--- a/Antlr3/Codegen/Target.cs
+++ b/Antlr3/Codegen/Target.cs
@@ -92,6 +92,14 @@ namespace Antlr3.Codegen
targetCharValueEscape['"'] = "\\\"";
}

+        public virtual bool UseBaseTemplatesForSynPredFragments
+        {
+            get
+            {
+                return true;
+            }
+        }
+
protected internal virtual void GenRecognizerFile( AntlrTool tool,
CodeGenerator generator,
Grammar grammar,
diff --git a/Antlr3/Grammars/CodeGenTreeWalker.g3 b/Antlr3/Grammars/CodeGenTreeWalker.g3
index 4b441e0..889fc2e 100644
--- a/Antlr3/Grammars/CodeGenTreeWalker.g3
+++ b/Antlr3/Grammars/CodeGenTreeWalker.g3
@@ -121,6 +121,12 @@ Antlr3.Analysis.DFA dfa;
Rule ruleDescr;
string description;
HandleRuleInit($start, out initAction, out block2, out dfa, out ruleDescr, out description);
+
+// For syn preds, we don't want any AST code etc... in there.
+// Save old templates ptr and restore later.  Base templates include Dbg.
+TemplateGroup saveGroup = templates;
+if (ruleDescr.IsSynPred && generator.Target.UseBaseTemplatesForSynPredFragments)
+	templates = generator.BaseTemplates;
}
:	^(	RULE id=ID						{HandleRuleAfterId($id);}
(mod=modifier)?
@@ -137,6 +143,7 @@ HandleRuleInit($start, out initAction, out block2, out dfa, out ruleDescr, out d
)
{HandleRuleEnd($code, $start, initAction, description, $mod.start, $b.code);}
;
+finally { templates = saveGroup; }

modifier
:	'protected'

