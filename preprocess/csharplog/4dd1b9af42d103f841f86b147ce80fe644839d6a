commit 4dd1b9af42d103f841f86b147ce80fe644839d6a
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Jun 27 15:35:17 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Jun 27 15:35:17 2011 -0800

(C# 3) Merge CL8761 - empty alts with actions didn't have an epsilon dummy node

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8774]

diff --git a/Antlr3.Test/TestASTConstruction.cs b/Antlr3.Test/TestASTConstruction.cs
index 59e44d7..b3e2d0e 100644
--- a/Antlr3.Test/TestASTConstruction.cs
+++ b/Antlr3.Test/TestASTConstruction.cs
@@ -57,6 +57,18 @@ namespace AntlrUnitTests
}

[TestMethod]
+        public void TestEmptyAlt()
+        {
+            Grammar g = new Grammar(
+                    "parser grammar P;\n" +
+                    "a : ;");
+            string expecting =
+                "(rule a ARG RET scope (BLOCK (ALT epsilon <end-of-alt>) <end-of-block>) <end-of-rule>)";
+            string found = g.GetRule("a").Tree.ToStringTree();
+            Assert.AreEqual(expecting, found);
+        }
+
+        [TestMethod]
public void TestNakeRulePlusInLexer() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
diff --git a/Antlr3/Tool/GrammarAST.cs b/Antlr3/Tool/GrammarAST.cs
index 1fc275a..a3de077 100644
--- a/Antlr3/Tool/GrammarAST.cs
+++ b/Antlr3/Tool/GrammarAST.cs
@@ -62,10 +62,6 @@ namespace Antlr3.Tool
*/
public class GrammarAST : Antlr.Runtime.Tree.CommonTree
{
-        static int count = 0;
-
-        public int ID = ++count;
-
/** This AST node was created from what token? */
//public Token token = null;

@@ -516,6 +512,9 @@ namespace Antlr3.Tool

private static IEnumerable<GrammarAST> GetChildrenForDupTree( GrammarAST t )
{
+            bool isAlt = t.Type == ANTLRParser.ALT;
+            int count = 0;
+
for ( int i = 0; i < t.ChildCount; i++ )
{
GrammarAST child = (GrammarAST)t.GetChild( i );
@@ -526,11 +525,20 @@ namespace Antlr3.Tool
}
else if ( ttype == ANTLRParser.BANG || ttype == ANTLRParser.ROOT )
{
-                    foreach ( GrammarAST subchild in GetChildrenForDupTree( child ) )
+                    foreach (GrammarAST subchild in GetChildrenForDupTree(child))
+                    {
+                        count++;
yield return subchild;
+                    }
}
else
{
+                    if (isAlt && child.Type == ANTLRParser.EOA && count == 0)
+                    {
+                        yield return new GrammarAST(ANTLRParser.EPSILON, "epsilon");
+                    }
+
+                    count++;
yield return child;
}
}

