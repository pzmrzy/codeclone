commit d20949fa77014f032bb3ecf7e779997809e6240e
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Tue May 3 19:27:03 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Tue May 3 19:27:03 2011 -0800

(C# 3) Fix optional/required arguments position check
Add test for optional/required argument ordering

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8378]

diff --git a/Antlr4.StringTemplate/Compiler/Group.g3 b/Antlr4.StringTemplate/Compiler/Group.g3
index d33eda5..99bab50 100644
--- a/Antlr4.StringTemplate/Compiler/Group.g3
+++ b/Antlr4.StringTemplate/Compiler/Group.g3
@@ -129,15 +129,17 @@ templateDef[string prefix]
;

formalArgs returns[List<FormalArgument> args = new List<FormalArgument>()]
+scope {
+bool hasOptionalParameter;
+}
:	formalArg[$args] (',' formalArg[$args])*
|
;

formalArg[List<FormalArgument> args]
-@init{bool hasOptionalParameter = false;}
:	ID
-		(	'=' a=(STRING|ANONYMOUS_TEMPLATE|'true'|'false') {hasOptionalParameter = true;}
-		|	{if (hasOptionalParameter) _group.ErrorManager.GroupSyntaxError(ErrorType.REQUIRED_PARAMETER_AFTER_OPTIONAL, SourceName, input.LT(1));}
+		(	'=' a=(STRING|ANONYMOUS_TEMPLATE|'true'|'false') {$formalArgs::hasOptionalParameter = true;}
+		|	{if ($formalArgs::hasOptionalParameter) _group.ErrorManager.GroupSyntaxError(ErrorType.REQUIRED_PARAMETER_AFTER_OPTIONAL, SourceName, input.LT(1));}
)
{$args.Add(new FormalArgument($ID.text, $a));}
;
diff --git a/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs b/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
index a804e81..277df43 100644
--- a/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
+++ b/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
@@ -218,6 +218,24 @@ namespace Antlr4.Test.StringTemplate
}

[TestMethod]
+        public void TestDefaultArgsOutOfOrder()
+        {
+            string templates =
+                "foo(a={hi}, b) ::= << >>\n";
+            writeFile(tmpdir, "t.stg", templates);
+
+            TemplateGroupFile group = null;
+            ErrorBuffer errors = new ErrorBuffer();
+            group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
+            group.Listener = errors;
+            group.Load(); // force load
+            string expected =
+                "[t.stg 1:13: Optional parameters must appear after all required parameters]";
+            string result = errors.Errors.ToListString();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
public void TestErrorWithinTemplate()
{
string templates =

