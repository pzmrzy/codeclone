commit 065d744fc5a72c22f2b69aef4e512893d320cda5
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Thu Feb 10 15:57:57 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Thu Feb 10 15:57:57 2011 -0800

(C# 3) Unit tests

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7672]

diff --git a/Antlr4.Test.StringTemplate/TestCoreBasics.cs b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
index eff9d55..4ced521 100644
--- a/Antlr4.Test.StringTemplate/TestCoreBasics.cs
+++ b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
@@ -669,6 +669,34 @@ namespace Antlr4.Test.StringTemplate
}

[TestMethod]
+        public void TestParensInConditonal()
+        {
+            string template = "<if((a||b)&&(c||d))>works<endif>";
+            Template st = new Template(template);
+            st.Add("a", true);
+            st.Add("b", true);
+            st.Add("c", true);
+            st.Add("d", true);
+            string expected = "works";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestParensInConditonal2()
+        {
+            string template = "<if((!a||b)&&!(c||d))>broken<else>works<endif>";
+            Template st = new Template(template);
+            st.Add("a", true);
+            st.Add("b", true);
+            st.Add("c", true);
+            st.Add("d", true);
+            string expected = "works";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
public void TestTrueCondWithElse()
{
string template = "<if(name)>works<else>fail<endif>";
diff --git a/Antlr4.Test.StringTemplate/TestDictionaries.cs b/Antlr4.Test.StringTemplate/TestDictionaries.cs
index 86bb548..53301cf 100644
--- a/Antlr4.Test.StringTemplate/TestDictionaries.cs
+++ b/Antlr4.Test.StringTemplate/TestDictionaries.cs
@@ -37,6 +37,7 @@ namespace Antlr4.Test.StringTemplate
using System.Collections.Generic;
using Antlr4.StringTemplate.Misc;
using Antlr4.Test.StringTemplate.Extensions;
+    using Path = System.IO.Path;

[TestClass]
public class TestDictionaries : BaseTest
@@ -49,7 +50,7 @@ namespace Antlr4.Test.StringTemplate
"var(type,name) ::= \"<type> <name> = <typeInit.(type)>;\"" + newline
;
writeFile(tmpdir, "test.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "test.stg"));
Template st = group.GetInstanceOf("var");
st.Add("type", "int");
st.Add("name", "x");
@@ -66,7 +67,7 @@ namespace Antlr4.Test.StringTemplate
"var(type,w,name) ::= \"<type> <name> = <typeInit.(type)>;\"" + newline
;
writeFile(tmpdir, "test.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "test.stg"));
Template st = group.GetInstanceOf("var");
st.impl.Dump();
st.Add("w", "L");
@@ -86,7 +87,7 @@ namespace Antlr4.Test.StringTemplate
"var(type,w,name) ::= \"<type> <name> = <typeInit.(type)>;\"" + newline
;
writeFile(tmpdir, "test.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "test.stg"));
Template st = group.GetInstanceOf("var");
st.Add("w", "L");
st.Add("type", new Template("int"));
@@ -104,7 +105,7 @@ namespace Antlr4.Test.StringTemplate
"foo(m,k) ::= \"<m.(k)>\"" + newline
;
writeFile(tmpdir, "test.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "test.stg"));
Template st = group.GetInstanceOf("foo");
IDictionary<HashableUser, string> m = new Dictionary<HashableUser, string>();
m[new HashableUser(99, "parrt")] = "first";
@@ -125,7 +126,7 @@ namespace Antlr4.Test.StringTemplate
"var(type,w,name) ::= \"<type> <name> = <typeInit.(type)>;\"" + newline
;
writeFile(tmpdir, "test.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "test.stg"));
Template st = group.GetInstanceOf("var");
st.Add("w", "L");
st.Add("type", "double"); // double not in typeInit map
@@ -143,7 +144,7 @@ namespace Antlr4.Test.StringTemplate
"var(type,w,name) ::= \"<type> <name> = <typeInit.(type)>;\"" + newline
;
writeFile(tmpdir, "test.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "test.stg"));
Template st = group.GetInstanceOf("var");
st.Add("w", "L");
st.Add("type", null); // double not in typeInit map
@@ -161,7 +162,7 @@ namespace Antlr4.Test.StringTemplate
"var(typeInit,type,name) ::= \"<type> <name> = <typeInit.(type)>;\"" + newline
;
writeFile(tmpdir, "test.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "test.stg"));
Template st = group.GetInstanceOf("var");
st.Add("type", "int");
st.Add("name", "x");
@@ -178,7 +179,7 @@ namespace Antlr4.Test.StringTemplate
"var(type,name) ::= \"<type> <name> = <typeInit.(type)>;\"" + newline
;
writeFile(tmpdir, "test.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "test.stg"));
Template st = group.GetInstanceOf("var");
st.Add("type", "float");
st.Add("name", "x");
@@ -195,7 +196,7 @@ namespace Antlr4.Test.StringTemplate
"var(type,name) ::= \"<type> <name> = <typeInit.(type)>;\"" + newline
;
writeFile(tmpdir, "test.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "test.stg"));
Template st = group.GetInstanceOf("var");
st.Add("type", "UserRecord");
st.Add("name", "x");
@@ -212,7 +213,7 @@ namespace Antlr4.Test.StringTemplate
"var(type,name) ::= \"<type> <name> = <typeInit.(type)>;\"" + newline
;
writeFile(tmpdir, "test.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "test.stg"));
Template st = group.GetInstanceOf("var");
// missing or set to null: st.Add("type", null);
st.Add("name", "x");
@@ -230,7 +231,7 @@ namespace Antlr4.Test.StringTemplate
;
writeFile(tmpdir, "test.stg", templates);
ErrorBuffer errors = new ErrorBuffer();
-            TemplateGroupFile group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
+            TemplateGroupFile group = new TemplateGroupFile(Path.Combine(tmpdir, "test.stg"));
group.Listener = errors;
group.Load();
string expected = "[test.stg 1:33: missing value for key at ']']";
@@ -246,7 +247,7 @@ namespace Antlr4.Test.StringTemplate
"var(type,name) ::= \"<type> <name> = <typeInit.(type)>;\"" + newline
;
writeFile(tmpdir, "test.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "test.stg"));
Template st = group.GetInstanceOf("var");
st.Add("type", "UserRecord");
st.Add("name", "x");
@@ -266,7 +267,7 @@ namespace Antlr4.Test.StringTemplate
"var(type,name) ::= \"<type> <name> = <typeInit.(type)>;\"" + newline
;
writeFile(tmpdir, "test.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "test.stg"));
Template st = group.GetInstanceOf("var");
st.Add("type", "default");
st.Add("name", "x");
@@ -286,7 +287,7 @@ namespace Antlr4.Test.StringTemplate
"t() ::= << <map.(\"1\")> >>" + newline
;
writeFile(tmpdir, "test.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "test.stg"));
Template st = group.GetInstanceOf("t");
string expecting = " default ";
string result = st.Render();
@@ -302,7 +303,7 @@ namespace Antlr4.Test.StringTemplate
"var(type,name) ::= \"<type> <name> = <typeInit.(type)>;\"" + newline
;
writeFile(tmpdir, "test.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "test.stg"));
Template st = group.GetInstanceOf("intermediate");
st.Add("type", "int");
st.Add("name", "x");
@@ -320,7 +321,7 @@ namespace Antlr4.Test.StringTemplate
"var(type,name) ::= \"<type> <name> = <typeInit.(type)>;\"" + newline
;
writeFile(tmpdir, "test.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "test.stg"));
Template interm = group.GetInstanceOf("intermediate");
Template var = group.GetInstanceOf("var");
var.Add("type", "int");
@@ -330,5 +331,46 @@ namespace Antlr4.Test.StringTemplate
string result = interm.Render();
Assert.AreEqual(expecting, result);
}
+
+        [TestMethod]
+        public void TestAccessDictionaryFromAnonymousTemplate()
+        {
+            string dir = tmpdir;
+            string g =
+                "a() ::= <<[<[\"foo\",\"a\"]:{x|<if(values.(x))><x><endif>}>]>>\n" +
+                "values ::= [\n" +
+                "    \"a\":false,\n" +
+                "    default:true\n" +
+                "]\n";
+            writeFile(dir, "g.stg", g);
+
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(dir, "g.stg"));
+            Template st = group.GetInstanceOf("a");
+            string expected = "[foo]";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestAccessDictionaryFromAnonymousTemplateInRegion()
+        {
+            string dir = tmpdir;
+            string g =
+                "a() ::= <<[<@r()>]>>\n" +
+                "@a.r() ::= <<\n" +
+                "<[\"foo\",\"a\"]:{x|<if(values.(x))><x><endif>}>\n" +
+                ">>\n" +
+                "values ::= [\n" +
+                "    \"a\":false,\n" +
+                "    default:true\n" +
+                "]\n";
+            writeFile(dir, "g.stg", g);
+
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(dir, "g.stg"));
+            Template st = group.GetInstanceOf("a");
+            string expected = "[foo]";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
}
}
diff --git a/Antlr4.Test.StringTemplate/TestRegions.cs b/Antlr4.Test.StringTemplate/TestRegions.cs
index f1ec470..7162f1e 100644
--- a/Antlr4.Test.StringTemplate/TestRegions.cs
+++ b/Antlr4.Test.StringTemplate/TestRegions.cs
@@ -159,47 +159,6 @@ namespace Antlr4.Test.StringTemplate
}

[TestMethod]
-        public void TestAccessDictionaryFromAnonymousTemplate()
-        {
-            string dir = tmpdir;
-            string g =
-                "a() ::= <<[<[\"foo\",\"a\"]:{x|<if(values.(x))><x><endif>}>]>>\n" +
-                "values ::= [\n" +
-                "    \"a\":false,\n" +
-                "    default:true\n" +
-                "]\n";
-            writeFile(dir, "g.stg", g);
-
-            TemplateGroup group = new TemplateGroupFile(Path.Combine(dir, "g.stg"));
-            Template st = group.GetInstanceOf("a");
-            string expected = "[foo]";
-            string result = st.Render();
-            Assert.AreEqual(expected, result);
-        }
-
-        [TestMethod]
-        public void TestAccessDictionaryFromAnonymousTemplateInRegion()
-        {
-            string dir = tmpdir;
-            string g =
-                "a() ::= <<[<@r()>]>>\n" +
-                "@a.r() ::= <<\n" +
-                "<[\"foo\",\"a\"]:{x|<if(values.(x))><x><endif>}>\n" +
-                ">>\n" +
-                "values ::= [\n" +
-                "    \"a\":false,\n" +
-                "    default:true\n" +
-                "]\n";
-            writeFile(dir, "g.stg", g);
-
-            TemplateGroup group = new TemplateGroupFile(Path.Combine(dir, "g.stg"));
-            Template st = group.GetInstanceOf("a");
-            string expected = "[foo]";
-            string result = st.Render();
-            Assert.AreEqual(expected, result);
-        }
-
-        [TestMethod]
public void TestCantDefineEmbeddedRegionAgain()
{
string dir = tmpdir;
diff --git a/Antlr4.Test.StringTemplate/TestVisualizer.cs b/Antlr4.Test.StringTemplate/TestVisualizer.cs
index 2632e32..d0c90b0 100644
--- a/Antlr4.Test.StringTemplate/TestVisualizer.cs
+++ b/Antlr4.Test.StringTemplate/TestVisualizer.cs
@@ -85,5 +85,26 @@ namespace Antlr4.Test.StringTemplate

st.Visualize();
}
+
+        [TestMethod]
+        public void VisualizerTestShadowTemplates()
+        {
+            string templates =
+                "list(lines) ::= <<\n" +
+                "<lines:line(); separator=\"\\n\">\n" +
+                ">>\n" +
+                "line(text) ::= \"<text>\"\n";
+
+            writeFile(tmpdir, "t.stg", templates);
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
+            group.Debug = true;
+            DebugTemplate template = (DebugTemplate)group.GetInstanceOf("list");
+            DebugTemplate line = (DebugTemplate)group.GetInstanceOf("line");
+            line.Add("text", "x = 3");
+            template.Add("lines", line);
+            template.Add("lines", line);
+            template.Add("lines", line);
+            template.Visualize();
+        }
}
}

