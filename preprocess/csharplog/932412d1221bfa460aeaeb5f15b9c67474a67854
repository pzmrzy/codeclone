commit 932412d1221bfa460aeaeb5f15b9c67474a67854
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Jan 24 10:09:20 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Jan 24 10:09:20 2011 -0800

(C# 3) C# naming conventions

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7518]

diff --git a/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs b/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs
index bf0a443..5bc2487 100644
--- a/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs
+++ b/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs
@@ -44,8 +44,8 @@ namespace Antlr4.StringTemplate.Visualizer.Extensions
group.defineTemplate("listTemplate", "list", "[$list:{x|$x$}; separator=\", \"$]");
group.registerRenderer(typeof(IList), new CollectionRenderer());
Template st = group.getInstanceOf("listTemplate");
-            st.add("list", list);
-            return st.render();
+            st.Add("list", list);
+            return st.Render();
}

private class CollectionRenderer : IAttributeRenderer
diff --git a/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs b/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
index f2a1f0c..e176043 100644
--- a/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
+++ b/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
@@ -62,7 +62,7 @@ namespace Antlr4.StringTemplate.Visualizer.Extensions
ITemplateWriter wr = new AutoIndentWriter(@out);
wr.setLineWidth(lineWidth);
Interpreter interp = new Interpreter(template.groupThatCreatedThisInstance, culture);
-            interp.Execute(wr, template); // render and track events
+            interp.Execute(wr, template); // Render and track events
TemplateVisualizer visualizer = new TemplateVisualizer(errorManager, template, @out.ToString(), interp, interp.getExecutionTrace(), errors.Errors);
visualizer.Show();
}
diff --git a/Antlr4.StringTemplate.Visualizer/Properties/Resources.Designer.cs b/Antlr4.StringTemplate.Visualizer/Properties/Resources.Designer.cs
index 26b9956..f56c498 100644
--- a/Antlr4.StringTemplate.Visualizer/Properties/Resources.Designer.cs
+++ b/Antlr4.StringTemplate.Visualizer/Properties/Resources.Designer.cs
@@ -17,7 +17,7 @@ namespace Antlr4.StringTemplate.Visualizer.Properties {
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
-    // To add or remove a member, edit your .ResX file then rerun ResGen
+    // To Add or Remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs b/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
index d577708..fab0eff 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
+++ b/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
@@ -124,7 +124,7 @@ namespace Antlr4.StringTemplate.Visualizer

public override string ToString()
{
-            if (_template.isAnonSubtemplate())
+            if (_template.IsAnonymousSubtemplate())
return "{...}";

return string.Format("{0} @ {1}:{2}", _template, Path.GetFileName(_template.newSTEvent.getFileName()), _template.newSTEvent.getLine());
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
index 5f1bb1c..583183e 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
@@ -215,7 +215,7 @@ namespace Antlr4.StringTemplate.Visualizer
viewModel.Bytecode = currentTemplate.impl.disasm();
viewModel.Ast = currentTemplate.impl.ast;

-            SetSelectionPath(viewModel.TemplateCallHierarchy[0], currentTemplate.getEnclosingInstanceStack(true));
+            SetSelectionPath(viewModel.TemplateCallHierarchy[0], currentTemplate.GetEnclosingInstanceStack(true));

TemplateTextBox.Document = new FlowDocument(new Paragraph(new Run(currentTemplate.impl.template)
{
@@ -235,7 +235,7 @@ namespace Antlr4.StringTemplate.Visualizer
InterpEvent e = ViewModel.Visualizer.Interpreter.getEvents(currentTemplate.enclosingInstance)[i];
if (e is EvalTemplateEvent)
{
-                        if (currentTemplate.isAnonSubtemplate())
+                        if (currentTemplate.IsAnonymousSubtemplate())
Highlight(TemplateTextBox.Document, r);

Highlight(OutputTextBox.Document, new Interval(e.Start, e.Stop));
@@ -263,7 +263,7 @@ namespace Antlr4.StringTemplate.Visualizer

private void UpdateStack()
{
-            List<Template> stack = currentTemplate.getEnclosingInstanceStack(true);
+            List<Template> stack = currentTemplate.GetEnclosingInstanceStack(true);
ViewModel.Title = string.Format("STViz - [{0}]", string.Join(" ", stack.Select(i => i.ToString()).ToArray()));
}

@@ -274,7 +274,7 @@ namespace Antlr4.StringTemplate.Visualizer
return;

List<string> attributesList = new List<string>();
-            IDictionary<string, object> attributes = currentTemplate.getAttributes();
+            IDictionary<string, object> attributes = currentTemplate.GetAttributes();
if (attributes != null)
{
foreach (var attribute in attributes)
diff --git a/Antlr4.StringTemplate/AutoIndentWriter.cs b/Antlr4.StringTemplate/AutoIndentWriter.cs
index 274d68b..76fd0b5 100644
--- a/Antlr4.StringTemplate/AutoIndentWriter.cs
+++ b/Antlr4.StringTemplate/AutoIndentWriter.cs
@@ -78,7 +78,7 @@ namespace Antlr4.StringTemplate

/** Track char position in the line (later we can think about tabs).
*  Indexed from 0.  We want to keep charPosition <= lineWidth.
-         *  This is the position we are *about* to write not the position
+         *  This is the position we are *about* to Write not the position
*  last written to.
*/
protected int charPosition = 0;
@@ -148,7 +148,7 @@ namespace Antlr4.StringTemplate
if (c == '\n')
{
atStartOfLine = true;
-                    charPosition = -newline.Length; // set so the write below sets to 0
+                    charPosition = -newline.Length; // set so the Write below sets to 0
@out.Write(newline);
n += newline.Length;
charIndex += newline.Length;
@@ -212,7 +212,7 @@ namespace Antlr4.StringTemplate
// continue writing any chars out
}
else
-                    {  // write A or B part
+                    {  // Write A or B part
n++;
@out.Write(c);
charPosition++;
diff --git a/Antlr4.StringTemplate/Compiler/CompilationState.cs b/Antlr4.StringTemplate/Compiler/CompilationState.cs
index d1cb933..c0a7a65 100644
--- a/Antlr4.StringTemplate/Compiler/CompilationState.cs
+++ b/Antlr4.StringTemplate/Compiler/CompilationState.cs
@@ -49,7 +49,7 @@ namespace Antlr4.StringTemplate.Compiler
internal StringTable stringtable = new StringTable();

/** Track instruction location within code.instrs array; this is
-         *  next address to write to.  Byte-addressable memory.
+         *  next address to Write to.  Byte-addressable memory.
*/
internal int ip = 0;

diff --git a/Antlr4.StringTemplate/Compiler/CompiledTemplate.cs b/Antlr4.StringTemplate/Compiler/CompiledTemplate.cs
index e05cd8d..32bee3d 100644
--- a/Antlr4.StringTemplate/Compiler/CompiledTemplate.cs
+++ b/Antlr4.StringTemplate/Compiler/CompiledTemplate.cs
@@ -202,7 +202,7 @@ namespace Antlr4.StringTemplate.Compiler
}
}

-        /** Used by Template.add() to add args one by one w/o turning on full formal args definition signal */
+        /** Used by Template.Add() to Add args one by one w/o turning on full formal args definition signal */
public virtual void addArg(FormalArgument a)
{
if (formalArguments == null)
diff --git a/Antlr4.StringTemplate/Compiler/Instruction.cs b/Antlr4.StringTemplate/Compiler/Instruction.cs
index 9bcef79..c2faae0 100644
--- a/Antlr4.StringTemplate/Compiler/Instruction.cs
+++ b/Antlr4.StringTemplate/Compiler/Instruction.cs
@@ -37,7 +37,7 @@
instructions[(int)Bytecode.INSTR_NEW_BOX_ARGS] = new Instruction("new_box_args", OperandType.String);
instructions[(int)Bytecode.INSTR_SUPER_NEW] = new Instruction("super_new", OperandType.String, OperandType.Int);
instructions[(int)Bytecode.INSTR_SUPER_NEW_BOX_ARGS] = new Instruction("super_new_box_args", OperandType.String);
-            instructions[(int)Bytecode.INSTR_WRITE] = new Instruction("write");
+            instructions[(int)Bytecode.INSTR_WRITE] = new Instruction("Write");
instructions[(int)Bytecode.INSTR_WRITE_OPT] = new Instruction("write_opt");
instructions[(int)Bytecode.INSTR_MAP] = new Instruction("map");
instructions[(int)Bytecode.INSTR_ROT_MAP] = new Instruction("rot_map", OperandType.Int);
@@ -47,7 +47,7 @@
instructions[(int)Bytecode.INSTR_OPTIONS] = new Instruction("options");
instructions[(int)Bytecode.INSTR_ARGS] = new Instruction("args");
instructions[(int)Bytecode.INSTR_LIST] = new Instruction("list");
-            instructions[(int)Bytecode.INSTR_ADD] = new Instruction("add");
+            instructions[(int)Bytecode.INSTR_ADD] = new Instruction("Add");
instructions[(int)Bytecode.INSTR_TOSTR] = new Instruction("tostr");
instructions[(int)Bytecode.INSTR_FIRST] = new Instruction("first");
instructions[(int)Bytecode.INSTR_LAST] = new Instruction("last");
diff --git a/Antlr4.StringTemplate/Debug/ConstructionEvent.cs b/Antlr4.StringTemplate/Debug/ConstructionEvent.cs
index e3ec9c4..00bae39 100644
--- a/Antlr4.StringTemplate/Debug/ConstructionEvent.cs
+++ b/Antlr4.StringTemplate/Debug/ConstructionEvent.cs
@@ -60,7 +60,7 @@ namespace Antlr4.StringTemplate.Debug
foreach (StackFrame e in trace)
{
string name = e.ToString();
-                // TODO: remove special after testing
+                // TODO: Remove special after testing
if (name.IndexOf("main(") > 0)
return e;

diff --git a/Antlr4.StringTemplate/Debug/DebugTemplate.cs b/Antlr4.StringTemplate/Debug/DebugTemplate.cs
index 7bce9ad..d758b77 100644
--- a/Antlr4.StringTemplate/Debug/DebugTemplate.cs
+++ b/Antlr4.StringTemplate/Debug/DebugTemplate.cs
@@ -51,7 +51,7 @@ namespace Antlr4.StringTemplate.Debug
/** Record who made us? ConstructionEvent creates Exception to grab stack */
public ConstructionEvent newSTEvent = new ConstructionEvent();

-        /** Track construction-time add attribute "events"; used for Template user-level debugging */
+        /** Track construction-time Add attribute "events"; used for Template user-level debugging */
public MultiMap<string, AddAttributeEvent> addAttrEvents = new MultiMap<string, AddAttributeEvent>();

//public Interpreter interp; // set when we start interpreter in inspect()
@@ -64,12 +64,12 @@ namespace Antlr4.StringTemplate.Debug
{
}

-        public override void add(string name, object value)
+        public override void Add(string name, object value)
{
if (TemplateGroup.debug)
addAttrEvents.map(name, new AddAttributeEvent(name, value));

-            base.add(name, value);
+            base.Add(name, value);
}

// TESTING SUPPORT
@@ -95,7 +95,7 @@ namespace Antlr4.StringTemplate.Debug
ITemplateWriter wr = new AutoIndentWriter(@out);
wr.setLineWidth(lineWidth);
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, locale);
-            interp.Execute(wr, this); // render and track events
+            interp.Execute(wr, this); // Render and track events
return interp.getEvents();
}
}
diff --git a/Antlr4.StringTemplate/IAttributeRenderer.cs b/Antlr4.StringTemplate/IAttributeRenderer.cs
index ac57e0a..b1952b2 100644
--- a/Antlr4.StringTemplate/IAttributeRenderer.cs
+++ b/Antlr4.StringTemplate/IAttributeRenderer.cs
@@ -34,11 +34,11 @@ namespace Antlr4.StringTemplate
{
using CultureInfo = System.Globalization.CultureInfo;

-    /** This interface describes an object that knows how to format or otherwise
-     *  render an object appropriately.  There is one renderer registered per
+    /** This interface describes an object that knows how to Format or otherwise
+     *  Render an object appropriately.  There is one renderer registered per
*  group for a given Java type.
*
-     *  If the format string passed to the renderer is not recognized then simply
+     *  If the Format string passed to the renderer is not recognized then simply
*  call ToString().
*
*  formatString can be null but locale will at least be Locale.getDefault()
diff --git a/Antlr4.StringTemplate/ITemplateWriter.cs b/Antlr4.StringTemplate/ITemplateWriter.cs
index 01764e1..1c2ab81 100644
--- a/Antlr4.StringTemplate/ITemplateWriter.cs
+++ b/Antlr4.StringTemplate/ITemplateWriter.cs
@@ -34,7 +34,7 @@ namespace Antlr4.StringTemplate
{
/** Generic StringTemplate output writer filter.
*
-     *  Literals and the elements of expressions are emitted via write().
+     *  Literals and the elements of expressions are emitted via Write().
*  Separators are emitted via writeSeparator() because they must be
*  handled specially when wrapping lines (we don't want to wrap
*  in between an element and it's separator).
@@ -57,7 +57,7 @@ namespace Antlr4.StringTemplate
*/
int write(string str);

-        /** Same as write, but wrap lines using the indicated string as the
+        /** Same as Write, but wrap lines using the indicated string as the
*  wrap character (such as "\n").
*/
int write(string str, string wrap);
@@ -65,24 +65,24 @@ namespace Antlr4.StringTemplate
/** Because we evaluate Template instance by invoking exec() again, we
*  can't pass options in.  So the WRITE instruction of an applied
*  template (such as when we wrap in between template applications
-         *  like &lt;data:{v|[&lt;v&gt;]}; wrap&gt;) we need to write the wrap string
+         *  like &lt;data:{v|[&lt;v&gt;]}; wrap&gt;) we need to Write the wrap string
*  before calling exec().  We expose just like for the separator.
*  See Interpreter.writeObject where it checks for Template instance.
*  If POJO, writePOJO passes wrap to ITemplateWriter's
*
-         *     write(String str, String wrap)
+         *     Write(String str, String wrap)
*
*  method.  Can't pass to exec().
*/
int writeWrap(string wrap);

-        /** Write a separator.  Same as write() except that a \n cannot
+        /** Write a separator.  Same as Write() except that a \n cannot
*  be inserted before emitting a separator.
*/
int writeSeparator(string str);

/** Return the absolute char index into the output of the char
-         *  we're about to write.  Returns 0 if no char written yet.
+         *  we're about to Write.  Returns 0 if no char written yet.
*/
int index();
}
diff --git a/Antlr4.StringTemplate/Interpreter.cs b/Antlr4.StringTemplate/Interpreter.cs
index 0696c20..eca9651 100644
--- a/Antlr4.StringTemplate/Interpreter.cs
+++ b/Antlr4.StringTemplate/Interpreter.cs
@@ -66,7 +66,7 @@ namespace Antlr4.StringTemplate
*  These are used by STViz to pair up output chunks with the template
*  expressions that generate them.
*
-     *  We create a new interpreter for each Template.render(), DebugST.inspect, or
+     *  We create a new interpreter for each Template.Render(), DebugST.inspect, or
*  DebugST.getEvents() invocation.
*/
public class Interpreter
@@ -156,9 +156,9 @@ namespace Antlr4.StringTemplate

protected virtual int ExecuteImpl(ITemplateWriter @out, Template self)
{
-            int start = @out.index(); // track char we're about to write
+            int start = @out.index(); // track char we're about to Write
Bytecode prevOpcode = Bytecode.Invalid;
-            int n = 0; // how many char we write out
+            int n = 0; // how many char we Write out
int nargs;
int nameIndex;
int addr;
@@ -190,7 +190,7 @@ namespace Antlr4.StringTemplate
name = self.impl.strings[nameIndex];
try
{
-                        o = self.getAttribute(name);
+                        o = self.GetAttribute(name);
}
catch (TemplateNoSuchPropertyException)
{
@@ -305,7 +305,7 @@ namespace Antlr4.StringTemplate

case Bytecode.INSTR_WRITE_OPT:
options = (object[])operands[sp--]; // get options
-                    o = operands[sp--];                 // get option to write
+                    o = operands[sp--];                 // get option to Write
int n2 = writeObjectWithOptions(@out, self, o, options);
n += n2;
nwline += n2;
@@ -507,7 +507,7 @@ namespace Antlr4.StringTemplate
return n;
}

-        // TODO: refactor to remove dup'd code
+        // TODO: refactor to Remove dup'd code

internal virtual void super_new(Template self, string name, int nargs)
{
@@ -579,7 +579,7 @@ namespace Antlr4.StringTemplate

foreach (string argName in attrs.Keys)
{
-                // don't let it throw an exception in rawSetAttribute
+                // don't let it throw an exception in RawSetAttribute
if (!st.impl.formalArguments.Any(i => i.Name == argName))
{
errMgr.runTimeError(self, current_ip, ErrorType.NO_SUCH_ATTRIBUTE, argName);
@@ -587,7 +587,7 @@ namespace Antlr4.StringTemplate
}

object o = attrs[argName];
-                st.rawSetAttribute(argName, o);
+                st.RawSetAttribute(argName, o);
}
}

@@ -619,7 +619,7 @@ namespace Antlr4.StringTemplate
{
object o = operands[firstArg + i];
string argName = st.impl.formalArguments[i].Name;
-                st.rawSetAttribute(argName, o);
+                st.RawSetAttribute(argName, o);
}
}

@@ -628,7 +628,7 @@ namespace Antlr4.StringTemplate
*/
protected virtual int writeObjectNoOptions(ITemplateWriter @out, Template self, object o)
{
-            int start = @out.index(); // track char we're about to write
+            int start = @out.index(); // track char we're about to Write
int n = writeObject(@out, self, o, null);
if (TemplateGroup.debug)
{
@@ -654,8 +654,8 @@ namespace Antlr4.StringTemplate
protected virtual int writeObjectWithOptions(ITemplateWriter @out, Template self, object o,
object[] options)
{
-            int start = @out.index(); // track char we're about to write
-            // precompute all option values (render all the way to strings)
+            int start = @out.index(); // track char we're about to Write
+            // precompute all option values (Render all the way to strings)
string[] optionStrings = null;
if (options != null)
{
@@ -829,8 +829,8 @@ namespace Antlr4.StringTemplate
setFirstArgument(self, st, iterValue);
if (st.impl.isAnonSubtemplate)
{
-                        st.rawSetAttribute("i0", i0);
-                        st.rawSetAttribute("i", i);
+                        st.RawSetAttribute("i0", i0);
+                        st.RawSetAttribute("i", i);
}
mapped.Add(st);
i0++;
@@ -847,8 +847,8 @@ namespace Antlr4.StringTemplate
setFirstArgument(self, st, attr);
if (st.impl.isAnonSubtemplate)
{
-                        st.rawSetAttribute("i0", 0);
-                        st.rawSetAttribute("i", 1);
+                        st.RawSetAttribute("i0", 0);
+                        st.RawSetAttribute("i", 1);
}
operands[++sp] = st;
}
@@ -888,7 +888,7 @@ namespace Antlr4.StringTemplate
// todo: track formal args not names for efficient filling of locals
object[] formalArgumentNames = formalArguments.Select(i => i.Name).ToArray();
int nformalArgs = formalArgumentNames.Length;
-            if (prototype.isAnonSubtemplate())
+            if (prototype.IsAnonymousSubtemplate())
nformalArgs -= predefinedAnonSubtemplateAttributes.Count;

if (nformalArgs != numExprs)
@@ -910,8 +910,8 @@ namespace Antlr4.StringTemplate
// get a value for each attribute in list; put into Template instance
int numEmpty = 0;
Template embedded = group.createStringTemplate(prototype);
-                embedded.rawSetAttribute("i0", i2);
-                embedded.rawSetAttribute("i", i2 + 1);
+                embedded.RawSetAttribute("i0", i2);
+                embedded.RawSetAttribute("i", i2 + 1);
for (int a = 0; a < numExprs; a++)
{
Iterator it = (Iterator)exprs[a];
@@ -919,7 +919,7 @@ namespace Antlr4.StringTemplate
{
string argName = (string)formalArgumentNames[a];
object iteratedValue = it.next();
-                        embedded.rawSetAttribute(argName, iteratedValue);
+                        embedded.RawSetAttribute(argName, iteratedValue);
}
else
{
@@ -1054,7 +1054,7 @@ namespace Antlr4.StringTemplate
{
object o = it.next();
if (it.hasNext())
-                        a.Add(o); // only add if not last one
+                        a.Add(o); // only Add if not last one
}

return a;
@@ -1297,11 +1297,11 @@ namespace Antlr4.StringTemplate
string defArgTemplate = arg.DefaultValueToken.Text;
if (defArgTemplate.StartsWith("{<(") && defArgTemplate.EndsWith(")>}"))
{
-                        invokedST.rawSetAttribute(arg.Name, toString(invokedST, defaultArgST));
+                        invokedST.RawSetAttribute(arg.Name, toString(invokedST, defaultArgST));
}
else
{
-                        invokedST.rawSetAttribute(arg.Name, defaultArgST);
+                        invokedST.RawSetAttribute(arg.Name, defaultArgST);
}
}
}
@@ -1326,7 +1326,7 @@ namespace Antlr4.StringTemplate
}

tr.Append(" ], calls=");
-            tr.Append(self.getEnclosingInstanceStackString());
+            tr.Append(self.GetEnclosingInstanceStackString());
tr.Append(", sp=" + sp + ", nw=" + nwline);
string s = tr.ToString();

diff --git a/Antlr4.StringTemplate/Misc/TemplateDump.cs b/Antlr4.StringTemplate/Misc/TemplateDump.cs
index 2f357d6..f2ed223 100644
--- a/Antlr4.StringTemplate/Misc/TemplateDump.cs
+++ b/Antlr4.StringTemplate/Misc/TemplateDump.cs
@@ -71,9 +71,9 @@ namespace Antlr4.StringTemplate.Misc
StringBuilder buf = new StringBuilder();
buf.Append(getTemplateDeclaratorString() + ":");
n++;
-            if (self.getAttributes() != null)
+            if (self.GetAttributes() != null)
{
-                List<string> attrNames = new List<string>(self.getAttributes().Keys);
+                List<string> attrNames = new List<string>(self.GetAttributes().Keys);
attrNames.Sort(StringComparer.Ordinal);
string longestName = attrNames.OrderBy(i => i.Length).Last();
int w = longestName.Length;
@@ -85,7 +85,7 @@ namespace Antlr4.StringTemplate.Misc
buf.Append(string.Format("%-" + w + "s = ", name));
buf.Append(string.Format(string.Format("{{0,-{0}}} = ", w), name));
object value;
-                    self.getAttributes().TryGetValue(name, out value);
+                    self.GetAttributes().TryGetValue(name, out value);
buf.Append(getValueDebugString(value, n));
}
}
@@ -129,7 +129,7 @@ namespace Antlr4.StringTemplate.Misc
{
StringBuilder buf = new StringBuilder();
buf.Append("<");
-            buf.Append(self.getName());
+            buf.Append(self.Name());
buf.Append("(");
if (self.impl.formalArguments != null)
buf.Append(string.Join(",", self.impl.formalArguments.Select(i => i.Name).ToArray()));
diff --git a/Antlr4.StringTemplate/Misc/TemplateMessage.cs b/Antlr4.StringTemplate/Misc/TemplateMessage.cs
index 63d5c62..147867d 100644
--- a/Antlr4.StringTemplate/Misc/TemplateMessage.cs
+++ b/Antlr4.StringTemplate/Misc/TemplateMessage.cs
@@ -44,7 +44,7 @@ namespace Antlr4.StringTemplate.Misc
*/
public class TemplateMessage
{
-        /** if in debug mode, has created instance, add attr events and eval
+        /** if in debug mode, has created instance, Add attr events and eval
*  template events.
*/
private readonly Template self;
diff --git a/Antlr4.StringTemplate/Misc/TemplateModelAdaptor.cs b/Antlr4.StringTemplate/Misc/TemplateModelAdaptor.cs
index 352b354..23a1f55 100644
--- a/Antlr4.StringTemplate/Misc/TemplateModelAdaptor.cs
+++ b/Antlr4.StringTemplate/Misc/TemplateModelAdaptor.cs
@@ -37,7 +37,7 @@ namespace Antlr4.StringTemplate.Misc
public virtual object GetProperty(Template self, object o, object property, string propertyName)
{
Template st = (Template)o;
-            return st.getAttribute(propertyName);
+            return st.GetAttribute(propertyName);
}
}
}
diff --git a/Antlr4.StringTemplate/Misc/TemplateRuntimeMessage.cs b/Antlr4.StringTemplate/Misc/TemplateRuntimeMessage.cs
index 3ff5f82..3180345 100644
--- a/Antlr4.StringTemplate/Misc/TemplateRuntimeMessage.cs
+++ b/Antlr4.StringTemplate/Misc/TemplateRuntimeMessage.cs
@@ -109,7 +109,7 @@ namespace Antlr4.StringTemplate.Misc
if (Self != null)
{
buf.Append("context [");
-                buf.Append(Self.getEnclosingInstanceStackString());
+                buf.Append(Self.GetEnclosingInstanceStackString());
buf.Append("]");
}
if (loc != null)
diff --git a/Antlr4.StringTemplate/NumberRenderer.cs b/Antlr4.StringTemplate/NumberRenderer.cs
index 2edd226..a356598 100644
--- a/Antlr4.StringTemplate/NumberRenderer.cs
+++ b/Antlr4.StringTemplate/NumberRenderer.cs
@@ -35,13 +35,13 @@ namespace Antlr4.StringTemplate
using CultureInfo = System.Globalization.CultureInfo;

/** Works with Byte, Short, Integer, Long, and BigInteger as well as
-     *  Float, Double, and BigDecimal.  You pass in a format string suitable
+     *  Float, Double, and BigDecimal.  You pass in a Format string suitable
*  for Formatter object:
*
*  http://java.sun.com/j2se/1.5.0/docs/api/java/util/Formatter.html
*
*  For example, "%10d" emits a number as a decimal int padding to 10 char.
-     *  This can even do long to date conversions using the format string.
+     *  This can even do long to date conversions using the Format string.
*/
public class NumberRenderer : IAttributeRenderer
{
diff --git a/Antlr4.StringTemplate/StringRenderer.cs b/Antlr4.StringTemplate/StringRenderer.cs
index 9100378..b52ca27 100644
--- a/Antlr4.StringTemplate/StringRenderer.cs
+++ b/Antlr4.StringTemplate/StringRenderer.cs
@@ -36,12 +36,12 @@ namespace Antlr4.StringTemplate
using HttpUtility = System.Web.HttpUtility;
using SecurityElement = System.Security.SecurityElement;

-    /** This render knows to perform a few operations on String objects:
+    /** This Render knows to perform a few operations on String objects:
*  upper, lower, cap, url-encode, xml-encode.
*/
public class StringRenderer : IAttributeRenderer
{
-        // trim(s) and strlen(s) built-in funcs; these are format options
+        // trim(s) and strlen(s) built-in funcs; these are Format options
public virtual string ToString(object o, string formatString, CultureInfo locale)
{
string s = (string)o;
diff --git a/Antlr4.StringTemplate/Template.cs b/Antlr4.StringTemplate/Template.cs
index 5875c91..2190fca 100644
--- a/Antlr4.StringTemplate/Template.cs
+++ b/Antlr4.StringTemplate/Template.cs
@@ -54,7 +54,7 @@ namespace Antlr4.StringTemplate
*  the title attribute defined in the outermost page template.
*
*  To use templates, you create one (usually via TemplateGroup) and then inject
-     *  attributes using add(). To render its attacks, use render().
+     *  attributes using Add(). To Render its attacks, use Render().
*/
public class Template
{
@@ -72,9 +72,9 @@ namespace Antlr4.StringTemplate
/** The implementation for this template among all instances of same tmpelate . */
public CompiledTemplate impl;

-        /** Safe to simultaneously write via add, which is synchronized.  Reading
+        /** Safe to simultaneously Write via Add, which is synchronized.  Reading
*  during exec is, however, NOT synchronized.  So, not thread safe to
-         *  add attributes while it is being evaluated.  Initialized to EmptyAttribute
+         *  Add attributes while it is being evaluated.  Initialized to EmptyAttribute
*  to distinguish null from empty.
*/
protected internal object[] locals;
@@ -86,11 +86,11 @@ namespace Antlr4.StringTemplate
public Template enclosingInstance; // who's your daddy?

/** Created as instance of which group? We need this to init interpreter
-         *  via render.  So, we create st and then it needs to know which
+         *  via Render.  So, we create st and then it needs to know which
*  group created it for sake of polymorphism:
*
*  st = skin1.getInstanceOf("searchbox");
-         *  result = st.render(); // knows skin1 created it
+         *  result = st.Render(); // knows skin1 created it
*
*  Say we have a group, g1, with template t and import t and u templates from
*  another group, g2.  g1.getInstanceOf("u") finds u in g2 but remembers
@@ -165,11 +165,11 @@ namespace Antlr4.StringTemplate
*  attribute with that name, this method turns the attribute into an
*  AttributeList with both the previous and the new attribute as elements.
*  This method will never alter a List that you inject.  If you send
-         *  in a List and then inject a single value element, add() copies
+         *  in a List and then inject a single value element, Add() copies
*  original list and adds the new value.
*/
[MethodImpl(MethodImplOptions.Synchronized)]
-        public virtual void add(string name, object value)
+        public virtual void Add(string name, object value)
{
if (name == null)
return; // allow null value
@@ -217,11 +217,11 @@ namespace Antlr4.StringTemplate

// attribute will be multi-valued for sure now
// convert current attribute to list if not already
-            // copy-on-write semantics; copy a list injected by user to add new value
-            AttributeList multi = convertToAttributeList(curvalue);
+            // copy-on-Write semantics; copy a list injected by user to Add new value
+            AttributeList multi = ConvertToAttributeList(curvalue);
locals[arg.Index] = multi; // replace with list

-            // now, add incoming value to multi-valued attribute
+            // now, Add incoming value to multi-valued attribute
if (value is IList)
{
// flatten incoming list into existing list
@@ -237,8 +237,8 @@ namespace Antlr4.StringTemplate
}
}

-        /** Remove an attribute value entirely (can't remove attribute definitions). */
-        public virtual void remove(string name)
+        /** Remove an attribute value entirely (can't Remove attribute definitions). */
+        public virtual void Remove(string name)
{
if (impl.formalArguments == null)
{
@@ -256,10 +256,10 @@ namespace Antlr4.StringTemplate
}

/** Set this.locals attr value when you only know the name, not the index.
-         *  This is ultimately invoked by calling Template.add() from outside so toss
+         *  This is ultimately invoked by calling Template.Add() from outside so toss
*  an exception to notify them.
*/
-        protected internal virtual void rawSetAttribute(string name, object value)
+        protected internal virtual void RawSetAttribute(string name, object value)
{
if (impl.formalArguments == null)
throw new ArgumentException("no such attribute: " + name);
@@ -275,7 +275,7 @@ namespace Antlr4.StringTemplate
*  If not found, look for a map.  So attributes sent in to a template
*  override dictionary names.
*/
-        public virtual object getAttribute(string name)
+        public virtual object GetAttribute(string name)
{
Template p = this;
while (p != null)
@@ -300,7 +300,7 @@ namespace Antlr4.StringTemplate
throw new TemplateNoSuchPropertyException(name);
}

-        public virtual IDictionary<string, object> getAttributes()
+        public virtual IDictionary<string, object> GetAttributes()
{
if (impl.formalArguments == null)
return null;
@@ -318,13 +318,13 @@ namespace Antlr4.StringTemplate
return attributes;
}

-        protected static AttributeList convertToAttributeList(object curvalue)
+        protected static AttributeList ConvertToAttributeList(object curvalue)
{
AttributeList multi;
if (curvalue == null)
{
multi = new AttributeList(); // make list to hold multiple values
-                multi.Add(curvalue);                 // add previous single-valued attribute
+                multi.Add(curvalue);                 // Add previous single-valued attribute
}
else if (curvalue.GetType() == typeof(AttributeList))
{
@@ -348,10 +348,10 @@ namespace Antlr4.StringTemplate
}
else
{
-                // curvalue nonlist and we want to add an attribute
+                // curvalue nonlist and we want to Add an attribute
// must convert curvalue existing to list
multi = new AttributeList(); // make list to hold multiple values
-                multi.Add(curvalue);                 // add previous single-valued attribute
+                multi.Add(curvalue);                 // Add previous single-valued attribute
}
return multi;
}
@@ -360,23 +360,23 @@ namespace Antlr4.StringTemplate
*  a String of these instance names in order from topmost to lowest;
*  here that would be "[z y x]".
*/
-        public virtual string getEnclosingInstanceStackString()
+        public virtual string GetEnclosingInstanceStackString()
{
-            List<Template> templates = getEnclosingInstanceStack(true);
+            List<Template> templates = GetEnclosingInstanceStack(true);
StringBuilder buf = new StringBuilder();
int i = 0;
foreach (Template st in templates)
{
if (i > 0)
buf.Append(" ");
-                buf.Append(st.getName());
+                buf.Append(st.Name());
i++;
}

return buf.ToString();
}

-        public virtual List<Template> getEnclosingInstanceStack(bool topdown)
+        public virtual List<Template> GetEnclosingInstanceStack(bool topdown)
{
List<Template> stack = new List<Template>();
Template p = this;
@@ -392,65 +392,65 @@ namespace Antlr4.StringTemplate
return stack;
}

-        public virtual string getName()
+        public virtual string Name()
{
return impl.name;
}

-        public virtual bool isAnonSubtemplate()
+        public virtual bool IsAnonymousSubtemplate()
{
return impl.isAnonSubtemplate;
}

-        public virtual int write(ITemplateWriter @out)
+        public virtual int Write(ITemplateWriter @out)
{
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, impl.nativeGroup.errMgr);
interp.setDefaultArguments(this);
return interp.Execute(@out, this);
}

-        public virtual int write(ITemplateWriter @out, CultureInfo locale)
+        public virtual int Write(ITemplateWriter @out, CultureInfo locale)
{
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, locale, impl.nativeGroup.errMgr);
interp.setDefaultArguments(this);
return interp.Execute(@out, this);
}

-        public virtual int write(ITemplateWriter @out, ITemplateErrorListener listener)
+        public virtual int Write(ITemplateWriter @out, ITemplateErrorListener listener)
{
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, new ErrorManager(listener));
interp.setDefaultArguments(this);
return interp.Execute(@out, this);
}

-        public virtual int write(ITemplateWriter @out, CultureInfo locale, ITemplateErrorListener listener)
+        public virtual int Write(ITemplateWriter @out, CultureInfo locale, ITemplateErrorListener listener)
{
Interpreter interp = new Interpreter(groupThatCreatedThisInstance, locale, new ErrorManager(listener));
interp.setDefaultArguments(this);
return interp.Execute(@out, this);
}

-        public virtual string render()
+        public virtual string Render()
{
-            return render(CultureInfo.CurrentCulture);
+            return Render(CultureInfo.CurrentCulture);
}

-        public virtual string render(int lineWidth)
+        public virtual string Render(int lineWidth)
{
-            return render(CultureInfo.CurrentCulture, lineWidth);
+            return Render(CultureInfo.CurrentCulture, lineWidth);
}

-        public virtual string render(CultureInfo locale)
+        public virtual string Render(CultureInfo locale)
{
-            return render(locale, AutoIndentWriter.NoWrap);
+            return Render(locale, AutoIndentWriter.NoWrap);
}

-        public virtual string render(CultureInfo locale, int lineWidth)
+        public virtual string Render(CultureInfo locale, int lineWidth)
{
StringWriter @out = new StringWriter();
ITemplateWriter wr = new AutoIndentWriter(@out);
wr.setLineWidth(lineWidth);
-            write(wr, locale);
+            Write(wr, locale);
return @out.ToString();
}

@@ -462,15 +462,15 @@ namespace Antlr4.StringTemplate
return impl.name + "()";
}

-        // Template.format("name, phone | <name>:<phone>", n, p);
-        // Template.format("<%1>:<%2>", n, p);
-        // Template.format("<name>:<phone>", "name", x, "phone", y);
-        public static string format(string template, params object[] attributes)
+        // Template.Format("name, phone | <name>:<phone>", n, p);
+        // Template.Format("<%1>:<%2>", n, p);
+        // Template.Format("<name>:<phone>", "name", x, "phone", y);
+        public static string Format(string template, params object[] attributes)
{
-            return format(AutoIndentWriter.NoWrap, template, attributes);
+            return Format(AutoIndentWriter.NoWrap, template, attributes);
}

-        public static string format(int lineWidth, string template, params object[] attributes)
+        public static string Format(int lineWidth, string template, params object[] attributes)
{
template = Regex.Replace(template, "[0-9]+", @"arg\0");
Console.WriteLine(template);
@@ -479,10 +479,10 @@ namespace Antlr4.StringTemplate
int i = 1;
foreach (object a in attributes)
{
-                st.add("arg" + i, a);
+                st.Add("arg" + i, a);
i++;
}
-            return st.render(lineWidth);
+            return st.Render(lineWidth);
}
}
}
diff --git a/Antlr4.StringTemplate/TemplateGroup.cs b/Antlr4.StringTemplate/TemplateGroup.cs
index f9f4649..811eec1 100644
--- a/Antlr4.StringTemplate/TemplateGroup.cs
+++ b/Antlr4.StringTemplate/TemplateGroup.cs
@@ -539,13 +539,13 @@ namespace Antlr4.StringTemplate

/** Add an adaptor for a kind of object so Template knows how to pull properties
*  from them. Add adaptors in increasing order of specificity.  Template adds Object,
-         *  Map, and Template model adaptors for you first. Adaptors you add have
+         *  Map, and Template model adaptors for you first. Adaptors you Add have
*  priority over default adaptors.
*
*  If an adaptor for type T already exists, it is replaced by the adaptor arg.
*
*  This must invalidate cache entries, so set your adaptors up before
-         *  render()ing your templates for efficiency.
+         *  Render()ing your templates for efficiency.
*/
public virtual void registerModelAdaptor(Type attributeType, IModelAdaptor adaptor)
{
@@ -560,7 +560,7 @@ namespace Antlr4.StringTemplate
}

/** Register a renderer for all objects of a particular "kind" for all
-         *  templates evaluated relative to this group.  Use r to render if
+         *  templates evaluated relative to this group.  Use r to Render if
*  object in question is instanceof(attributeType).
*/
public virtual void registerRenderer(Type attributeType, IAttributeRenderer r)
diff --git a/Antlr4.Test.StringTemplate/BaseTest.cs b/Antlr4.Test.StringTemplate/BaseTest.cs
index 498ef44..71f1812 100644
--- a/Antlr4.Test.StringTemplate/BaseTest.cs
+++ b/Antlr4.Test.StringTemplate/BaseTest.cs
@@ -75,7 +75,7 @@ namespace Antlr4.Test.StringTemplate
[TestCleanup]
public void tearDown()
{
-            // remove tmpdir if no error. how?
+            // Remove tmpdir if no error. how?
if (TestContext != null && TestContext.CurrentTestOutcome == UnitTestOutcome.Passed)
eraseTempDir();
}
diff --git a/Antlr4.Test.StringTemplate/Extensions/ListExtensions.cs b/Antlr4.Test.StringTemplate/Extensions/ListExtensions.cs
index 7a220eb..fb876d1 100644
--- a/Antlr4.Test.StringTemplate/Extensions/ListExtensions.cs
+++ b/Antlr4.Test.StringTemplate/Extensions/ListExtensions.cs
@@ -48,8 +48,8 @@ namespace Antlr4.Test.StringTemplate.Extensions
group.defineTemplate("listTemplate", "list", "[$list:{x|$x$}; separator=\", \"$]");
group.registerRenderer(typeof(IList), new CollectionRenderer());
Template st = group.getInstanceOf("listTemplate");
-            st.add("list", list);
-            return st.render();
+            st.Add("list", list);
+            return st.Render();
}

private class CollectionRenderer : IAttributeRenderer
diff --git a/Antlr4.Test.StringTemplate/TestCompiler.cs b/Antlr4.Test.StringTemplate/TestCompiler.cs
index c5e68ec..7933450 100644
--- a/Antlr4.Test.StringTemplate/TestCompiler.cs
+++ b/Antlr4.Test.StringTemplate/TestCompiler.cs
@@ -54,9 +54,9 @@ namespace Antlr4.Test.StringTemplate
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
"load_str 0, " +
-                "write, " +
+                "Write, " +
"load_attr 1, " +
-                "write";
+                "Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name]";
@@ -70,7 +70,7 @@ namespace Antlr4.Test.StringTemplate
string template = "hi <foo()>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_str 0, write, new 1 0, write";
+                "load_str 0, Write, new 1 0, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , foo]";
@@ -84,7 +84,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<super.foo()>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "super_new 0 0, write";
+                "super_new 0 0, Write";
code.dump();
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
@@ -99,7 +99,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<super.foo(a,{b})>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_attr 0, new 1 0, super_new 2 2, write";
+                "load_attr 0, new 1 0, super_new 2 2, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[a, _sub1, foo]";
@@ -113,7 +113,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<super.foo(x=a,y={b})>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "args, load_attr 0, store_arg 1, new 2 0, store_arg 3, super_new_box_args 4, write";
+                "args, load_attr 0, store_arg 1, new 2 0, store_arg 3, super_new_box_args 4, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[a, x, _sub1, y, foo]";
@@ -127,7 +127,7 @@ namespace Antlr4.Test.StringTemplate
string template = "hi <foo(a,b)>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_str 0, write, load_attr 1, load_attr 2, new 3 2, write";
+                "load_str 0, Write, load_attr 1, load_attr 2, new 3 2, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , a, b, foo]";
@@ -141,7 +141,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<({ a, b | <a><b>})>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "new 0 0, tostr, write";
+                "new 0 0, tostr, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[_sub1]";
@@ -185,7 +185,7 @@ namespace Antlr4.Test.StringTemplate
string template = "hi <(foo)(a,b)>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_str 0, write, load_attr 1, tostr, load_attr 2, load_attr 3, new_ind 2, write";
+                "load_str 0, Write, load_attr 1, tostr, load_attr 2, load_attr 3, new_ind 2, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , foo, a, b]";
@@ -199,7 +199,7 @@ namespace Antlr4.Test.StringTemplate
string template = "hi <a.b>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_str 0, write, load_attr 1, load_prop 2, write";
+                "load_str 0, Write, load_attr 1, load_prop 2, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , a, b]";
@@ -213,8 +213,8 @@ namespace Antlr4.Test.StringTemplate
string template = "<u.id>: <u.name>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_attr 0, load_prop 1, write, load_str 2, write, " +
-                "load_attr 0, load_prop 3, write";
+                "load_attr 0, load_prop 1, Write, load_str 2, Write, " +
+                "load_attr 0, load_prop 3, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[u, id, : , name]";
@@ -228,7 +228,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<name:bold()>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_attr 0, null, new 1 1, map, write";
+                "load_attr 0, null, new 1 1, map, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, bold]";
@@ -257,7 +257,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<name:bold(x)>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_attr 0, null, load_attr 1, new 2 2, map, write";
+                "load_attr 0, null, load_attr 1, new 2 2, map, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, x, bold]";
@@ -271,7 +271,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<name:(t)(x)>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_attr 0, load_attr 1, tostr, null, load_attr 2, new_ind 2, map, write";
+                "load_attr 0, load_attr 1, tostr, null, load_attr 2, new_ind 2, map, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, t, x]";
@@ -285,7 +285,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<name:bold():italics()>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_attr 0, null, new 1 1, map, null, new 2 1, map, write";
+                "load_attr 0, null, new 1 1, map, null, new 2 1, map, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, bold, italics]";
@@ -300,7 +300,7 @@ namespace Antlr4.Test.StringTemplate
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
"load_attr 0, null, load_attr 1, new 2 2, map, " +
-                "null, load_attr 1, load_attr 3, new 4 3, map, write";
+                "null, load_attr 1, load_attr 3, new 4 3, map, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, x, bold, y, italics]";
@@ -314,7 +314,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<name:bold(),italics()>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_attr 0, null, new 1 1, null, new 2 1, rot_map 2, write";
+                "load_attr 0, null, new 1 1, null, new 2 1, rot_map 2, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, bold, italics]";
@@ -328,7 +328,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<name:bold(x),italics()>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_attr 0, null, load_attr 1, new 2 2, null, new 3 1, rot_map 2, write";
+                "load_attr 0, null, load_attr 1, new 2 2, null, new 3 1, rot_map 2, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, x, bold, italics]";
@@ -342,7 +342,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<names,phones:bold()>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_attr 0, load_attr 1, null, null, new 2 2, zip_map 2, write";
+                "load_attr 0, load_attr 1, null, null, new 2 2, zip_map 2, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[names, phones, bold]";
@@ -356,7 +356,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<names,phones:bold(x)>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_attr 0, load_attr 1, null, null, load_attr 2, new 3 3, zip_map 2, write";
+                "load_attr 0, load_attr 1, null, null, load_attr 2, new 3 3, zip_map 2, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[names, phones, x, bold]";
@@ -370,7 +370,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<name:{n | <n>}>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_attr 0, null, new 1 1, map, write";
+                "load_attr 0, null, new 1 1, map, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, _sub1]";
@@ -384,7 +384,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<a,b:{x,y | <x><y>}>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_attr 0, load_attr 1, null, null, new 2 2, zip_map 2, write";
+                "load_attr 0, load_attr 1, null, null, new 2 2, zip_map 2, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[a, b, _sub1]";
@@ -398,7 +398,7 @@ namespace Antlr4.Test.StringTemplate
string template = "go: <if(name)>hi, foo<endif>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_str 0, write, load_attr 1, brf 14, load_str 2, write";
+                "load_str 0, Write, load_attr 1, brf 14, load_str 2, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo]";
@@ -413,14 +413,14 @@ namespace Antlr4.Test.StringTemplate
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
"load_str 0, " +
-                "write, " +
+                "Write, " +
"load_attr 1, " +
"brf 17, " +
"load_str 2, " +
-                "write, " +
+                "Write, " +
"br 21, " +
"load_str 3, " +
-                "write";
+                "Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo, bye]";
@@ -435,16 +435,16 @@ namespace Antlr4.Test.StringTemplate
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
"load_str 0, " +
-                "write, " +
+                "Write, " +
"load_attr 1, " +
"brf 17, " +
"load_str 2, " +
-                "write, " +
+                "Write, " +
"br 27, " +
"load_attr 3, " +
"brf 27, " +
"load_str 4, " +
-                "write";
+                "Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo, user, a user]";
@@ -459,19 +459,19 @@ namespace Antlr4.Test.StringTemplate
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
"load_str 0, " +
-                "write, " +
+                "Write, " +
"load_attr 1, " +
"brf 17, " +
"load_str 2, " +
-                "write, " +
+                "Write, " +
"br 34, " +
"load_attr 3, " +
"brf 30, " +
"load_str 4, " +
-                "write, " +
+                "Write, " +
"br 34, " +
"load_str 5, " +
-                "write";
+                "Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo, user, a user, bye]";
@@ -485,7 +485,7 @@ namespace Antlr4.Test.StringTemplate
string template = "hi <name; separator=\"x\">";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_str 0, write, load_attr 1, options, load_str 2, store_option 3, write_opt";
+                "load_str 0, Write, load_attr 1, options, load_str 2, store_option 3, write_opt";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, x]";
@@ -499,7 +499,7 @@ namespace Antlr4.Test.StringTemplate
string template = "hi <name; separator={, }>";
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
-                "load_str 0, write, load_attr 1, options, new 2 0, store_option 3, write_opt";
+                "load_str 0, Write, load_attr 1, options, new 2 0, store_option 3, write_opt";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, _sub1]";
@@ -514,7 +514,7 @@ namespace Antlr4.Test.StringTemplate
CompiledTemplate code = new TemplateCompiler().compile(template);
string asmExpected =
"load_str 0, " +
-                "write, " +
+                "Write, " +
"load_attr 1, " +
"options, " +
"load_str 2, " +
@@ -537,7 +537,7 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<[]>";
CompiledTemplate code = new TemplateCompiler().compile(template);
-            string asmExpected = "list, write";
+            string asmExpected = "list, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[]";
@@ -550,7 +550,7 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<[a,b]>";
CompiledTemplate code = new TemplateCompiler().compile(template);
-            string asmExpected = "list, load_attr 0, add, load_attr 1, add, write";
+            string asmExpected = "list, load_attr 0, Add, load_attr 1, Add, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[a, b]";
@@ -565,7 +565,7 @@ namespace Antlr4.Test.StringTemplate
// compile as if in root dir and in template 'a'
CompiledTemplate code = new TemplateCompiler('<', '>').compile("a", template);
string asmExpected =
-                "new 0 0, write";
+                "new 0 0, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[region__a__r]";
@@ -580,7 +580,7 @@ namespace Antlr4.Test.StringTemplate
// compile as if in root dir and in template 'a'
CompiledTemplate code = new TemplateCompiler('<', '>').compile("a", template);
string asmExpected =
-                "load_str 0, write, new 1 0, write";
+                "load_str 0, Write, new 1 0, Write";
string asmResult = code.Instrs();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[x:, region__a__r]";
diff --git a/Antlr4.Test.StringTemplate/TestCoreBasics.cs b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
index a38d78f..da89b11 100644
--- a/Antlr4.Test.StringTemplate/TestCoreBasics.cs
+++ b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
@@ -49,7 +49,7 @@ namespace Antlr4.Test.StringTemplate
Template st = new Template(template);
string expected =
"hi !";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -58,9 +58,9 @@ namespace Antlr4.Test.StringTemplate
{
string template = "hi <name>!";
Template st = new Template(template);
-            st.add("name", "Ter");
+            st.Add("name", "Ter");
string expected = "hi Ter!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -77,7 +77,7 @@ namespace Antlr4.Test.StringTemplate
string result = null;
try
{
-                st.add("name", "Ter");
+                st.Add("name", "Ter");
}
catch (ArgumentException iae)
{
@@ -92,11 +92,11 @@ namespace Antlr4.Test.StringTemplate
{
string template = "hi <name>!";
Template st = new Template(template);
-            st.add("name", "Ter");
-            st.add("name", "Tom");
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
string expected =
"hi TerTom!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -106,11 +106,11 @@ namespace Antlr4.Test.StringTemplate
string template = "hi <name>!";
Template st = new Template(template);
List<string> names = new List<string>() { "Ter", "Tom" };
-            st.add("name", names);
-            st.add("name", "Sumana"); // shouldn't alter my version of names list!
+            st.Add("name", names);
+            st.Add("name", "Sumana"); // shouldn't alter my version of names list!
string expected =
"hi TerTomSumana!";  // Template sees 3 names
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);

Assert.IsTrue(names.Count == 2); // my names list is still just 2
@@ -122,11 +122,11 @@ namespace Antlr4.Test.StringTemplate
string template = "hi <name>!";
Template st = new Template(template);
string[] names = new string[] { "Ter", "Tom" };
-            st.add("name", names);
-            st.add("name", "Sumana"); // shouldn't alter my version of names list!
+            st.Add("name", names);
+            st.Add("name", "Sumana"); // shouldn't alter my version of names list!
string expected =
"hi TerTomSumana!";  // Template sees 3 names
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -135,9 +135,9 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<u.id>: <u.name>"; // checks field and method getter
Template st = new Template(template);
-            st.add("u", new User(1, "parrt"));
+            st.Add("u", new User(1, "parrt"));
string expected = "1: parrt";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -146,9 +146,9 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<foo.a>: <ick>"; // checks field and method getter
Template st = new Template(template);
-            st.add("foo", new Dictionary<string, string>() { { "a", "b" } });
+            st.Add("foo", new Dictionary<string, string>() { { "a", "b" } });
string expected = "b: ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -158,10 +158,10 @@ namespace Antlr4.Test.StringTemplate
string template = "<t.x>"; // get x attr of template t
Template st = new Template(template);
Template t = new Template("<x>");
-            t.add("x", "Ter");
-            st.add("t", t);
+            t.Add("x", "Ter");
+            st.Add("t", t);
string expected = "Ter";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -170,9 +170,9 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<t.isManager>"; // call isManager
Template st = new Template(template);
-            st.add("t", new User(32, "Ter"));
+            st.Add("t", new User(32, "Ter"));
string expected = true.ToString();
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -181,9 +181,9 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<t.hasParkingSpot>"; // call hasParkingSpot
Template st = new Template(template);
-            st.add("t", new User(32, "Ter"));
+            st.Add("t", new User(32, "Ter"));
string expected = true.ToString();
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -193,7 +193,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<u.id>: <u.name>";
Template st = new Template(template);
string expected = ": ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -205,9 +205,9 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.setListener(errors);
Template st = new Template(group, template);
-            st.add("u", new User(1, "parrt"));
+            st.Add("u", new User(1, "parrt"));
string expected = "";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
TemplateRuntimeMessage msg = (TemplateRuntimeMessage)errors.Errors[0];
TemplateNoSuchPropertyException e = (TemplateNoSuchPropertyException)msg.Cause;
@@ -222,10 +222,10 @@ namespace Antlr4.Test.StringTemplate
group.setListener(errors);
string template = "<u.(qqq)>";
Template st = new Template(group, template);
-            st.add("u", new User(1, "parrt"));
-            st.add("qqq", null);
+            st.Add("u", new User(1, "parrt"));
+            st.Add("qqq", null);
string expected = "";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
TemplateRuntimeMessage msg = (TemplateRuntimeMessage)errors.Errors[0];
TemplateNoSuchPropertyException e = (TemplateNoSuchPropertyException)msg.Cause;
@@ -240,10 +240,10 @@ namespace Antlr4.Test.StringTemplate
group.setListener(errors);
string template = "<u.(name)>";
Template st = new Template(group, template);
-            st.add("u", new User(1, "parrt"));
-            st.add("name", 100);
+            st.Add("u", new User(1, "parrt"));
+            st.Add("name", 100);
string expected = "";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
TemplateRuntimeMessage msg = (TemplateRuntimeMessage)errors.Errors[0];
TemplateNoSuchPropertyException e = (TemplateNoSuchPropertyException)msg.Cause;
@@ -259,7 +259,7 @@ namespace Antlr4.Test.StringTemplate
string expected =
"load kewl" + newline +
"daddy;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -270,9 +270,9 @@ namespace Antlr4.Test.StringTemplate
Template st = new Template(template);
st.impl.nativeGroup.defineTemplate("box", "x", "kewl <x> daddy");
st.impl.dump();
-            st.add("name", "Ter");
+            st.Add("name", "Ter");
string expected = "load kewl arg daddy;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -283,9 +283,9 @@ namespace Antlr4.Test.StringTemplate
Template st = new Template(template);
st.impl.nativeGroup.defineTemplate("box", "x,y", "kewl <x> <y> daddy");
st.impl.nativeGroup.defineTemplate("foo", "blech");
-            st.add("name", "Ter");
+            st.Add("name", "Ter");
string expected = "load kewl arg blech daddy;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -296,9 +296,9 @@ namespace Antlr4.Test.StringTemplate
Template st = new Template(template);
st.impl.nativeGroup.defineTemplate("box", "y", "kewl <y> daddy");
st.impl.nativeGroup.defineTemplate("foo", "x", "blech <x>");
-            st.add("name", "Ter");
+            st.Add("name", "Ter");
string expected = "load kewl blech arg daddy;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -309,12 +309,12 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("inc", "x", "<x>+1");
group.defineTemplate("test", "name", "hi <name>!");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
-            st.add("name", "Tom");
-            st.add("name", "Sumana");
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
+            st.Add("name", "Sumana");
string expected =
"hi TerTomSumana!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -325,12 +325,12 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("inc", "x", "[<x>]");
group.defineTemplate("test", "name", "hi <name:inc()>!");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
-            st.add("name", "Tom");
-            st.add("name", "Sumana");
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
+            st.Add("name", "Sumana");
string expected =
"hi [Ter][Tom][Sumana]!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -341,13 +341,13 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("inc", "x", "[<x>]");
group.defineTemplate("test", "t,name", "<name:(t)()>!");
Template st = group.getInstanceOf("test");
-            st.add("t", "inc");
-            st.add("name", "Ter");
-            st.add("name", "Tom");
-            st.add("name", "Sumana");
+            st.Add("t", "inc");
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
+            st.Add("name", "Sumana");
string expected =
"[Ter][Tom][Sumana]!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -361,11 +361,11 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
-            st.add("name", "Tom");
-            st.add("name", "Sumana");
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
+            st.Add("name", "Sumana");
string expected = "*Ter**Tom**Sumana*";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -375,15 +375,15 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "names,phones", "hi <names,phones:{n,p | <n>:<p>;}>");
Template st = group.getInstanceOf("test");
-            st.add("names", "Ter");
-            st.add("names", "Tom");
-            st.add("names", "Sumana");
-            st.add("phones", "x5001");
-            st.add("phones", "x5002");
-            st.add("phones", "x5003");
+            st.Add("names", "Ter");
+            st.Add("names", "Tom");
+            st.Add("names", "Sumana");
+            st.Add("phones", "x5001");
+            st.Add("phones", "x5002");
+            st.Add("phones", "x5003");
string expected =
"hi Ter:x5001;Tom:x5002;Sumana:x5003;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -393,14 +393,14 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "names,phones", "hi <names,phones:{n,p | <n>:<p>;}>");
Template st = group.getInstanceOf("test");
-            st.add("names", "Ter");
-            st.add("names", "Tom");
-            st.add("names", "Sumana");
-            st.add("phones", "x5001");
-            st.add("phones", "x5002");
+            st.Add("names", "Ter");
+            st.Add("names", "Tom");
+            st.Add("names", "Sumana");
+            st.Add("phones", "x5001");
+            st.Add("phones", "x5002");
string expected =
"hi Ter:x5001;Tom:x5002;Sumana:;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -412,14 +412,14 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("test", "names,phones",
"hi <names,phones:{n,p | <n>:<p>;}:bold()>");
Template st = group.getInstanceOf("test");
-            st.add("names", "Ter");
-            st.add("names", "Tom");
-            st.add("names", "Sumana");
-            st.add("phones", "x5001");
-            st.add("phones", "x5002");
+            st.Add("names", "Ter");
+            st.Add("names", "Tom");
+            st.Add("names", "Sumana");
+            st.Add("phones", "x5001");
+            st.Add("phones", "x5002");
string expected =
"hi [Ter:x5001;][Tom:x5002;][Sumana:;]";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -431,14 +431,14 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("test", "names,phones",
"hi <[names:bold()],phones:{n,p | <n>:<p>;}>");
Template st = group.getInstanceOf("test");
-            st.add("names", "Ter");
-            st.add("names", "Tom");
-            st.add("names", "Sumana");
-            st.add("phones", "x5001");
-            st.add("phones", "x5002");
+            st.Add("names", "Ter");
+            st.Add("names", "Tom");
+            st.Add("names", "Sumana");
+            st.Add("phones", "x5001");
+            st.Add("phones", "x5002");
string expected =
"hi [Ter]:x5001;[Tom]:x5002;[Sumana]:;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -449,13 +449,13 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("inc", "x,i", "<i>:<x>");
group.defineTemplate("test", "name", "<name:{n|<inc(n,i)>}; separator=\", \">");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
-            st.add("name", "Tom");
-            st.add("name", null); // don't count this one
-            st.add("name", "Sumana");
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
+            st.Add("name", null); // don't count this one
+            st.Add("name", "Sumana");
string expected =
"1:Ter, 2:Tom, 3:Sumana";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -465,13 +465,13 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "name", "<name:{n | <i>:<n>}; separator=\", \">");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
-            st.add("name", "Tom");
-            st.add("name", null); // don't count this one. still can't apply subtemplate to null value
-            st.add("name", "Sumana");
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
+            st.Add("name", null); // don't count this one. still can't apply subtemplate to null value
+            st.Add("name", "Sumana");
string expected =
"1:Ter, 2:Tom, 3:Sumana";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -482,9 +482,9 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("a", "x", "[<x>]");
group.defineTemplate("test", "name", "hi <name:a()>!");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
+            st.Add("name", "Ter");
string expected = "hi [Ter]!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -496,7 +496,7 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("test", "name", "hi <name:a()>!");
Template st = group.getInstanceOf("test");
string expected = "hi !";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -506,13 +506,13 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "name", "<name; separator=\", \">");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
-            st.add("name", "Tom");
-            st.add("name", null); // don't print this one
-            st.add("name", "Sumana");
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
+            st.Add("name", null); // don't print this one
+            st.Add("name", "Sumana");
string expected =
"Ter, Tom, Sumana";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -524,12 +524,12 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("b", "x", "(<x>)");
group.defineTemplate("test", "name", "hi <name:a():b()>!");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
-            st.add("name", "Tom");
-            st.add("name", "Sumana");
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
+            st.Add("name", "Sumana");
string expected =
"hi ([Ter])([Tom])([Sumana])!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -541,12 +541,12 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("b", "x", "(<x>)");
group.defineTemplate("test", "name", "hi <name:a(),b()>!");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
-            st.add("name", "Tom");
-            st.add("name", "Sumana");
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
+            st.Add("name", "Sumana");
string expected =
"hi [Ter](Tom)[Sumana]!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -555,9 +555,9 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<if(name)>works<endif>";
Template st = new Template(template);
-            st.add("name", "Ter");
+            st.Add("name", "Ter");
string expected = "works";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -566,9 +566,9 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<if(x)>fail<elseif(name)><endif>";
Template st = new Template(template);
-            st.add("name", "Ter");
+            st.Add("name", "Ter");
string expected = "";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -578,7 +578,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<if(!(x||y)&&!z)>works<endif>";
Template st = new Template(template);
string expected = "works";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -588,7 +588,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<if(name)>works<endif>";
Template st = new Template(template);
string expected = "";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -597,9 +597,9 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<if(name)>works<endif>";
Template st = new Template(template);
-            st.add("name", null);
+            st.Add("name", null);
string expected = "";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -620,7 +620,7 @@ namespace Antlr4.Test.StringTemplate
st.impl.dump();
string expected = "foo" + newline +
"bar";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -630,9 +630,9 @@ namespace Antlr4.Test.StringTemplate
string template =
"<if(x)>fail1<elseif(y)>fail2<elseif(z)>works<else>fail3<endif>";
Template st = new Template(template);
-            st.add("z", "blort");
+            st.Add("z", "blort");
string expected = "works";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -642,9 +642,9 @@ namespace Antlr4.Test.StringTemplate
string template =
"<if(x)><elseif(y)><elseif(z)>works<else><endif>";
Template st = new Template(template);
-            st.add("z", "blort");
+            st.Add("z", "blort");
string expected = "works";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -653,9 +653,9 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<if(!name)>works<endif>";
Template st = new Template(template);
-            st.add("name", "Ter");
+            st.Add("name", "Ter");
string expected = "";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -665,7 +665,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<if(!name)>works<endif>";
Template st = new Template(template);
string expected = "works";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -674,9 +674,9 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<if(name)>works<else>fail<endif>";
Template st = new Template(template);
-            st.add("name", "Ter");
+            st.Add("name", "Ter");
string expected = "works";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -686,7 +686,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<if(name)>fail<else>works<endif>";
Template st = new Template(template);
string expected = "works";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -695,9 +695,9 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<if(name)>fail<elseif(id)>works<else>fail<endif>";
Template st = new Template(template);
-            st.add("id", "2DF3DF");
+            st.Add("id", "2DF3DF");
string expected = "works";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -707,7 +707,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<if(name)>fail<elseif(id)>fail<endif>";
Template st = new Template(template);
string expected = "";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -717,7 +717,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<if(name)>fail<elseif(id)>fail<else>works<endif>";
Template st = new Template(template);
string expected = "works";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -726,9 +726,9 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<if(name||notThere)>works<else>fail<endif>";
Template st = new Template(template);
-            st.add("name", "Ter");
+            st.Add("name", "Ter");
string expected = "works";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -739,9 +739,9 @@ namespace Antlr4.Test.StringTemplate
Template st = new Template(template);
IDictionary<string, string> m = new Dictionary<string, string>();
m["name"] = "Ter";
-            st.add("m", m);
+            st.Add("m", m);
string expected = "works \\";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -750,9 +750,9 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<if(name&&notThere)>fail<else>works<endif>";
Template st = new Template(template);
-            st.add("name", "Ter");
+            st.Add("name", "Ter");
string expected = "works";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -761,9 +761,9 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<if(name&&!notThere)>works<else>fail<endif>";
Template st = new Template(template);
-            st.add("name", "Ter");
+            st.Add("name", "Ter");
string expected = "works";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -774,7 +774,7 @@ namespace Antlr4.Test.StringTemplate
"Foo <\\n><\\n><\\t> bar\n"
);
StringWriter sw = new StringWriter();
-            st.write(new AutoIndentWriter(sw, "\n")); // force \n as newline
+            st.Write(new AutoIndentWriter(sw, "\n")); // force \n as newline
string result = sw.ToString();
string expecting = "Foo \n\n\t bar\n";     // expect \n in output
Assert.AreEqual(expecting, result);
@@ -782,7 +782,7 @@ namespace Antlr4.Test.StringTemplate
st = new Template(
"Foo <\\n><\\t> bar" + newline);
sw = new StringWriter();
-            st.write(new AutoIndentWriter(sw, "\n")); // force \n as newline
+            st.Write(new AutoIndentWriter(sw, "\n")); // force \n as newline
expecting = "Foo \n\t bar\n";     // expect \n in output
result = sw.ToString();
Assert.AreEqual(expecting, result);
@@ -790,7 +790,7 @@ namespace Antlr4.Test.StringTemplate
st = new Template(
"Foo<\\ >bar<\\n>");
sw = new StringWriter();
-            st.write(new AutoIndentWriter(sw, "\n")); // force \n as newline
+            st.Write(new AutoIndentWriter(sw, "\n")); // force \n as newline
result = sw.ToString();
expecting = "Foo bar\n"; // forced \n
Assert.AreEqual(expecting, result);
@@ -803,19 +803,19 @@ namespace Antlr4.Test.StringTemplate
"Foo <\\uFEA5><\\n><\\u00C2> bar\n"
);
string expecting = "Foo \ufea5" + newline + "\u00C2 bar" + newline;
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);

st = new Template(
"Foo <\\uFEA5><\\n><\\u00C2> bar" + newline);
expecting = "Foo \ufea5" + newline + "\u00C2 bar" + newline;
-            result = st.render();
+            result = st.Render();
Assert.AreEqual(expecting, result);

st = new Template(
"Foo<\\ >bar<\\n>");
expecting = "Foo bar" + newline;
-            result = st.render();
+            result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -826,7 +826,7 @@ namespace Antlr4.Test.StringTemplate
Template st = new Template(template);
string expected =
"name" + newline;
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -836,11 +836,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "names", "<names:{n | case <n>}; separator=\", \">");
Template st = group.getInstanceOf("test");
-            st.add("names", "Ter");
-            st.add("names", "Tom");
+            st.Add("names", "Ter");
+            st.Add("names", "Tom");
string expected =
"case Ter, case Tom";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -850,10 +850,10 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "names", "<names:{n | case <n>}; separator=\", \">");
Template st = group.getInstanceOf("test");
-            st.add("names", new List<string>() { "Ter", "Tom" });
+            st.Add("names", new List<string>() { "Ter", "Tom" });
string expected =
"case Ter, case Tom";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

diff --git a/Antlr4.Test.StringTemplate/TestDictionaries.cs b/Antlr4.Test.StringTemplate/TestDictionaries.cs
index e60273c..a50a741 100644
--- a/Antlr4.Test.StringTemplate/TestDictionaries.cs
+++ b/Antlr4.Test.StringTemplate/TestDictionaries.cs
@@ -51,10 +51,10 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
Template st = group.getInstanceOf("var");
-            st.add("type", "int");
-            st.add("name", "x");
+            st.Add("type", "int");
+            st.Add("name", "x");
string expecting = "int x = 0;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -69,11 +69,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
Template st = group.getInstanceOf("var");
st.impl.dump();
-            st.add("w", "L");
-            st.add("type", "int");
-            st.add("name", "x");
+            st.Add("w", "L");
+            st.Add("type", "int");
+            st.Add("name", "x");
string expecting = "int x = 0L;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -88,11 +88,11 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
Template st = group.getInstanceOf("var");
-            st.add("w", "L");
-            st.add("type", new Template("int"));
-            st.add("name", "x");
+            st.Add("w", "L");
+            st.Add("type", new Template("int"));
+            st.Add("name", "x");
string expecting = "int x = 0L;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -110,10 +110,10 @@ namespace Antlr4.Test.StringTemplate
m[new HashableUser(99, "parrt")] = "first";
m[new HashableUser(172036, "tombu")] = "second";
m[new HashableUser(391, "sriram")] = "third";
-            st.add("m", m);
-            st.add("k", new HashableUser(172036, "tombu"));
+            st.Add("m", m);
+            st.Add("k", new HashableUser(172036, "tombu"));
string expecting = "second";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -127,11 +127,11 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
Template st = group.getInstanceOf("var");
-            st.add("w", "L");
-            st.add("type", "double"); // double not in typeInit map
-            st.add("name", "x");
+            st.Add("w", "L");
+            st.Add("type", "double"); // double not in typeInit map
+            st.Add("name", "x");
string expecting = "double x = ;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -145,11 +145,11 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
Template st = group.getInstanceOf("var");
-            st.add("w", "L");
-            st.add("type", null); // double not in typeInit map
-            st.add("name", "x");
+            st.Add("w", "L");
+            st.Add("type", null); // double not in typeInit map
+            st.Add("name", "x");
string expecting = " x = ;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -163,10 +163,10 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
Template st = group.getInstanceOf("var");
-            st.add("type", "int");
-            st.add("name", "x");
+            st.Add("type", "int");
+            st.Add("name", "x");
string expecting = "int x = ;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -180,10 +180,10 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
Template st = group.getInstanceOf("var");
-            st.add("type", "float");
-            st.add("name", "x");
+            st.Add("type", "float");
+            st.Add("name", "x");
string expecting = "float x = ;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -197,10 +197,10 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
Template st = group.getInstanceOf("var");
-            st.add("type", "UserRecord");
-            st.add("name", "x");
+            st.Add("type", "UserRecord");
+            st.Add("name", "x");
string expecting = "UserRecord x = null;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -214,10 +214,10 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
Template st = group.getInstanceOf("var");
-            // missing or set to null: st.add("type", null);
-            st.add("name", "x");
+            // missing or set to null: st.Add("type", null);
+            st.Add("name", "x");
string expecting = " x = null;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -248,10 +248,10 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
Template st = group.getInstanceOf("var");
-            st.add("type", "UserRecord");
-            st.add("name", "x");
+            st.Add("type", "UserRecord");
+            st.Add("name", "x");
string expecting = "UserRecord x = UserRecord;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -268,10 +268,10 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
Template st = group.getInstanceOf("var");
-            st.add("type", "default");
-            st.add("name", "x");
+            st.Add("type", "default");
+            st.Add("name", "x");
string expecting = "default x = foo;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -289,7 +289,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
Template st = group.getInstanceOf("t");
string expecting = " default ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -304,10 +304,10 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "test.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
Template st = group.getInstanceOf("intermediate");
-            st.add("type", "int");
-            st.add("name", "x");
+            st.Add("type", "int");
+            st.Add("name", "x");
string expecting = "int x = 0;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -323,11 +323,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "test.stg");
Template interm = group.getInstanceOf("intermediate");
Template var = group.getInstanceOf("var");
-            var.add("type", "int");
-            var.add("name", "x");
-            interm.add("stuff", var);
+            var.Add("type", "int");
+            var.Add("name", "x");
+            interm.Add("stuff", var);
string expecting = "int x = 0;";
-            string result = interm.render();
+            string result = interm.Render();
Assert.AreEqual(expecting, result);
}
}
diff --git a/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs b/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
index 77a8dbb..c0454b9 100644
--- a/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
+++ b/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
@@ -43,9 +43,9 @@ namespace Antlr4.Test.StringTemplate
{
string template = "hi $name$!";
Template st = new Template(template, '$', '$');
-            st.add("name", "Ter");
+            st.Add("name", "Ter");
string expected = "hi Ter!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -55,15 +55,15 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup('$', '$');
group.defineTemplate("test", "names,phones", "hi $names,phones:{n,p | $n$:$p$;}$");
Template st = group.getInstanceOf("test");
-            st.add("names", "Ter");
-            st.add("names", "Tom");
-            st.add("names", "Sumana");
-            st.add("phones", "x5001");
-            st.add("phones", "x5002");
-            st.add("phones", "x5003");
+            st.Add("names", "Ter");
+            st.Add("names", "Tom");
+            st.Add("names", "Sumana");
+            st.Add("phones", "x5001");
+            st.Add("phones", "x5002");
+            st.Add("phones", "x5003");
string expected =
"hi Ter:x5001;Tom:x5002;Sumana:x5003;";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -78,7 +78,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupDirectory(dir, '$', '$');
Template st = group.getInstanceOf("a");
string expected = " bar ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -94,9 +94,9 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg", '$', '$');
Template b = group.getInstanceOf("method");
-            b.add("name", "foo");
+            b.Add("name", "foo");
string expecting = "x=99; // foo";
-            string result = b.render();
+            string result = b.Render();
Assert.AreEqual(expecting, result);
}
}
diff --git a/Antlr4.Test.StringTemplate/TestFunctions.cs b/Antlr4.Test.StringTemplate/TestFunctions.cs
index 7e0ecb5..898eeca 100644
--- a/Antlr4.Test.StringTemplate/TestFunctions.cs
+++ b/Antlr4.Test.StringTemplate/TestFunctions.cs
@@ -45,9 +45,9 @@ namespace Antlr4.Test.StringTemplate
string template = "<first(names)>";
Template st = new Template(template);
List<string> names = new List<string>() { "Ter", "Tom" };
-            st.add("names", names);
+            st.Add("names", names);
string expected = "Ter";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -57,9 +57,9 @@ namespace Antlr4.Test.StringTemplate
string template = "<length(names)>";
Template st = new Template(template);
List<string> names = new List<string>() { "Ter", "Tom" };
-            st.add("names", names);
+            st.Add("names", names);
string expected = "2";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -69,9 +69,9 @@ namespace Antlr4.Test.StringTemplate
string template = "<length(names)>";
Template st = new Template(template);
List<string> names = new List<string>() { "Ter", null, "Tom", null };
-            st.add("names", names);
+            st.Add("names", names);
string expected = "4";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -81,11 +81,11 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<first(names)>"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("names", "Sriram");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("names", "Sriram");
string expecting = "Ter";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -94,11 +94,11 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<trunc(names); separator=\", \">"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("names", "Sriram");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("names", "Sriram");
string expecting = "Ter, Tom";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -107,11 +107,11 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<rest(names); separator=\", \">"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("names", "Sriram");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("names", "Sriram");
string expecting = "Tom, Sriram";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -120,9 +120,9 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<rest(names); separator=\", \">"
);
-            e.add("names", new List<string>());
+            e.Add("names", new List<string>());
string expecting = "";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -138,9 +138,9 @@ namespace Antlr4.Test.StringTemplate
List<string> names = new List<string>();
names.Add("Ter");
names.Add("Tom");
-            e.add("names", names);
+            e.Add("names", names);
string expecting = "Tom, Tom";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -149,11 +149,11 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<last(names)>"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("names", "Sriram");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("names", "Sriram");
string expecting = "Sriram";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -162,14 +162,14 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<strip(names); null=\"n/a\">"
);
-            e.add("names", null);
-            e.add("names", "Tom");
-            e.add("names", null);
-            e.add("names", null);
-            e.add("names", "Sriram");
-            e.add("names", null);
+            e.Add("names", null);
+            e.Add("names", "Tom");
+            e.Add("names", null);
+            e.Add("names", null);
+            e.Add("names", "Sriram");
+            e.Add("names", null);
string expecting = "TomSriram";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -178,14 +178,14 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<length(strip(names))>"
);
-            e.add("names", null);
-            e.add("names", "Tom");
-            e.add("names", null);
-            e.add("names", null);
-            e.add("names", "Sriram");
-            e.add("names", null);
+            e.Add("names", null);
+            e.Add("names", "Tom");
+            e.Add("names", null);
+            e.Add("names", null);
+            e.Add("names", "Sriram");
+            e.Add("names", null);
string expecting = "2";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -195,13 +195,13 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<[first(mine),rest(yours)]; separator=\", \">"
);
-            e.add("mine", "1");
-            e.add("mine", "2");
-            e.add("mine", "3");
-            e.add("yours", "a");
-            e.add("yours", "b");
+            e.Add("mine", "1");
+            e.Add("mine", "2");
+            e.Add("mine", "3");
+            e.Add("yours", "a");
+            e.Add("yours", "b");
string expecting = "1, b";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -211,12 +211,12 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<[mine,yours]; separator=\", \">"
);
-            e.add("mine", "1");
-            e.add("mine", "2");
-            e.add("mine", "3");
-            e.add("yours", "a");
+            e.Add("mine", "1");
+            e.Add("mine", "2");
+            e.Add("mine", "3");
+            e.Add("yours", "a");
string expecting = "1, 2, 3, a";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -232,12 +232,12 @@ namespace Antlr4.Test.StringTemplate
List<string> mine = new List<string>();
mine.Add("Ter");
mine.Add("Tom");
-            e.add("mine", mine);
+            e.Add("mine", mine);
List<string> yours = new List<string>();
yours.Add("Foo");
-            e.add("yours", yours);
+            e.Add("yours", yours);
string expecting = "TerTomFoo, TerTomFoo";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -250,12 +250,12 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<[x,mine,y,yours,z]; separator=\", \">"
);
-            e.add("mine", "1");
-            e.add("mine", "2");
-            e.add("mine", "3");
-            e.add("yours", "a");
+            e.Add("mine", "1");
+            e.Add("mine", "2");
+            e.Add("mine", "3");
+            e.Add("yours", "a");
string expecting = "1, 2, 3, a";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -264,11 +264,11 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<first(rest(names))>" // gets 2nd element
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("names", "Sriram");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("names", "Sriram");
string expecting = "Tom";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -277,9 +277,9 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<first(names)>"
);
-            e.add("names", "Ter");
+            e.Add("names", "Ter");
string expecting = "Ter";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -288,9 +288,9 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<last(names)>"
);
-            e.add("names", "Ter");
+            e.Add("names", "Ter");
string expecting = "Ter";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -299,9 +299,9 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<last(names)>"
);
-            e.add("names", new List<string>() { "Ter" });
+            e.Add("names", new List<string>() { "Ter" });
string expecting = "Ter";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -310,9 +310,9 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<rest(names)>"
);
-            e.add("names", "Ter");
+            e.Add("names", "Ter");
string expecting = "";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -321,9 +321,9 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<rest(names)>"
);
-            e.add("names", new List<string>() { "Ter" });
+            e.Add("names", new List<string>() { "Ter" });
string expecting = "";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -332,10 +332,10 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<rest(names)>, <rest(names)>" // gets 2nd element
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
string expecting = "Tom, Tom";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -344,10 +344,10 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<rest(names)>, <rest(names)>" // gets 2nd element
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
string expecting = "Tom, Tom";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -356,12 +356,12 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<first([names,phones])>"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("phones", "1");
-            e.add("phones", "2");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
string expecting = "Ter";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -373,16 +373,16 @@ namespace Antlr4.Test.StringTemplate
IDictionary<string, string> m1 = new Dictionary<string, string>();
IDictionary<string, string> m2 = new Dictionary<string, string>();
m1["Ter"] = "x5707";
-            e.add("maps", m1);
+            e.Add("maps", m1);
m2["Tom"] = "x5332";
-            e.add("maps", m2);
+            e.Add("maps", m2);
string expecting = "x5707";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());

List<IDictionary<string, string>> list = new List<IDictionary<string, string>>() { m1, m2 };
-            e.add("maps", list);
+            e.Add("maps", list);
expecting = "x5707";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -394,15 +394,15 @@ namespace Antlr4.Test.StringTemplate
IDictionary<string, string> m1 = new Dictionary<string, string>();
IDictionary<string, string> m2 = new Dictionary<string, string>();
m1["Ter"] = "x5707";
-            e.add("maps", m1);
+            e.Add("maps", m1);
m2["Tom"] = "x5332";
-            e.add("maps", m2);
+            e.Add("maps", m2);
string expecting = "Ter!";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
List<IDictionary<string, string>> list = new List<IDictionary<string, string>>() { m1, m2 };
-            e.add("maps", list);
+            e.Add("maps", list);
expecting = "Ter!";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -411,9 +411,9 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<trim(name)>"
);
-            e.add("name", " Ter  \n");
+            e.Add("name", " Ter  \n");
string expecting = "Ter";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -422,9 +422,9 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<strlen(name)>"
);
-            e.add("name", "012345");
+            e.Add("name", "012345");
string expecting = "6";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -433,11 +433,11 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<reverse(names); separator=\", \">"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("names", "Sriram");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("names", "Sriram");
string expecting = "Sriram, Tom, Ter";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}
}
}
diff --git a/Antlr4.Test.StringTemplate/TestGroups.cs b/Antlr4.Test.StringTemplate/TestGroups.cs
index 412c04d..ea10355 100644
--- a/Antlr4.Test.StringTemplate/TestGroups.cs
+++ b/Antlr4.Test.StringTemplate/TestGroups.cs
@@ -53,7 +53,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupDirectory(dir);
Template st = group.getInstanceOf("a");
string expected = "foo";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -73,7 +73,7 @@ namespace Antlr4.Test.StringTemplate
Template st1 = group.getInstanceOf("a");
Template st2 = group.getInstanceOf("b");
string expected = "foobar";
-            string result = st1.render() + st2.render();
+            string result = st1.Render() + st2.Render();
Assert.AreEqual(expected, result);
}

@@ -94,11 +94,11 @@ namespace Antlr4.Test.StringTemplate
Template st1 = group.getInstanceOf("a");
Template st2 = group.getInstanceOf("subdir/b");
string expected = "foobar";
-            string result = st1.render() + st2.render();
+            string result = st1.Render() + st2.Render();
Assert.AreEqual(expected, result);
st2 = group.getInstanceOf("subdir/b"); // should work with / in front too
expected = "bar";
-            result = st2.render();
+            result = st2.Render();
Assert.AreEqual(expected, result);
}

@@ -116,7 +116,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupDirectory(dir);
Template st = group.getInstanceOf("a");
string expected = " bar ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -139,7 +139,7 @@ namespace Antlr4.Test.StringTemplate
Template st2 = group.getInstanceOf("group/b");
Template st3 = group.getInstanceOf("group/c");
string expected = "foobarduh";
-            string result = st1.render() + st2.render() + st3.render();
+            string result = st1.Render() + st2.Render() + st3.Render();
Assert.AreEqual(expected, result);
}

@@ -160,7 +160,7 @@ namespace Antlr4.Test.StringTemplate
Template st1 = group.getInstanceOf("a");
Template st2 = group.getInstanceOf("sub1/sub2/b");
string expected = "foobar";
-            string result = st1.render() + st2.render();
+            string result = st1.Render() + st2.Render();
Assert.AreEqual(expected, result);
}

@@ -183,7 +183,7 @@ namespace Antlr4.Test.StringTemplate
Template st2 = group.getInstanceOf("subdir/group/b");
Template st3 = group.getInstanceOf("subdir/group/c");
string expected = "foobarduh";
-            string result = st1.render() + st2.render() + st3.render();
+            string result = st1.Render() + st2.Render() + st3.Render();
Assert.AreEqual(expected, result);
}

@@ -198,7 +198,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupDirectory(dir);
Template st = group.getInstanceOf("a");
string expected = " bar ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -215,7 +215,7 @@ namespace Antlr4.Test.StringTemplate
Template st = group.getInstanceOf("subdir/a");
st.impl.dump();
string expected = " bar ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -247,7 +247,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
Template st = group.getInstanceOf("b");
string expected = "bar";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -261,10 +261,10 @@ namespace Antlr4.Test.StringTemplate
writeFile(dir, "group.stg", groupFile);
TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
Template st = group.getInstanceOf("b");
-            st.add("x", 1);
-            st.add("y", 2);
+            st.Add("x", 1);
+            st.Add("y", 2);
string expected = "12";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -279,7 +279,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupDirectory(dir);
Template st = group.getInstanceOf("a");
string expected = " foo ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -295,9 +295,9 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
Template b = group.getInstanceOf("method");
-            b.add("name", "foo");
+            b.Add("name", "foo");
string expecting = "x=99; // foo";
-            string result = b.render();
+            string result = b.Render();
Assert.AreEqual(expecting, result);
}

@@ -310,9 +310,9 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
Template b = group.getInstanceOf("stat");
-            b.add("name", "foo");
+            b.Add("name", "foo");
string expecting = "x=99; // foo";
-            string result = b.render();
+            string result = b.Render();
Assert.AreEqual(expecting, result);
}

@@ -325,9 +325,9 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
Template b = group.getInstanceOf("stat");
-            b.add("name", "foo");
+            b.Add("name", "foo");
string expecting = "x=99; // foo";
-            string result = b.render();
+            string result = b.Render();
Assert.AreEqual(expecting, result);
}

@@ -355,9 +355,9 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
Template m = group.getInstanceOf("method");
-            m.add("fields", new Field());
+            m.Add("fields", new Field());
string expecting = "x=parrt; // parrt";
-            string result = m.render();
+            string result = m.Render();
Assert.AreEqual(expecting, result);
}

@@ -373,9 +373,9 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
Template m = group.getInstanceOf("method");
-            m.add("fields", new Field());
+            m.Add("fields", new Field());
string expecting = "x=parrt; // parrt";
-            string result = m.render();
+            string result = m.Render();
Assert.AreEqual(expecting, result);
}

@@ -392,9 +392,9 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
Template m = group.getInstanceOf("method");
-            m.add("fields", new Field());
+            m.Add("fields", new Field());
string expecting = "x=parrt; // parrt";
-            string result = m.render();
+            string result = m.Render();
Assert.AreEqual(expecting, result);
}

@@ -410,10 +410,10 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
Template b = group.getInstanceOf("method");
-            b.add("name", "foo");
-            b.add("size", "2");
+            b.Add("name", "foo");
+            b.Add("size", "2");
string expecting = "x=foo; // foo";
-            string result = b.render();
+            string result = b.Render();
//System.err.println("result='"+result+"'");
Assert.AreEqual(expecting, result);
}
@@ -430,10 +430,10 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
Template b = group.getInstanceOf("method");
-            b.add("name", "foo");
-            b.add("size", "2");
+            b.Add("name", "foo");
+            b.Add("size", "2");
string expecting = "x=[foo] ; // foo"; // won't see ' ' after '=' since it's an indent not simple string
-            string result = b.render();
+            string result = b.Render();
//System.err.println("result='"+result+"'");
Assert.AreEqual(expecting, result);
}
@@ -450,9 +450,9 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
Template b = group.getInstanceOf("method");
-            b.add("name", "foo");
+            b.Add("name", "foo");
string expecting = "x=34; // foo";
-            string result = b.render();
+            string result = b.Render();
Assert.AreEqual(expecting, result);
}

@@ -475,9 +475,9 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "group.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg");
Template a = group.getInstanceOf("A");
-            a.add("x", new Counter());
+            a.Add("x", new Counter());
string expecting = "0 1 2 0"; // trace must be false to get these numbers
-            string result = a.render();
+            string result = a.Render();
//System.err.println("result='"+result+"'");
Assert.AreEqual(expecting, result);
}
@@ -493,7 +493,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
Template st = group.getInstanceOf("g");
string expected = "ab";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -508,7 +508,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
Template st = group.getInstanceOf("g");
string expected = "ab";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -526,7 +526,7 @@ namespace Antlr4.Test.StringTemplate
ErrorBuffer errors = new ErrorBuffer();
group.setListener(errors);
Template st = group.getInstanceOf("g");
-            st.render();
+            st.Render();
string expected = "context [g] 1:1 attribute z isn't defined" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -599,7 +599,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupDirectory(dir);
Template st = group.getInstanceOf("a");
string expected = "foo";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -615,7 +615,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupDirectory(dir);
Template st = group.getInstanceOf("subdir/a");
string expected = " bar ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -635,7 +635,7 @@ namespace Antlr4.Test.StringTemplate
Template st1 = group.getInstanceOf("a");
Template st2 = group.getInstanceOf("group/c"); // invokes /a
string expected = " bar  bar ";
-            string result = st1.render() + st2.render();
+            string result = st1.Render() + st2.Render();
Assert.AreEqual(expected, result);
}

@@ -658,11 +658,11 @@ namespace Antlr4.Test.StringTemplate
int newHashCode = RuntimeHelpers.GetHashCode(st);
Assert.AreEqual(originalHashCode == newHashCode, false); // diff objects
string expected = "foo";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
st = group.getInstanceOf("b");
expected = "bar";
-            result = st.render();
+            result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -683,11 +683,11 @@ namespace Antlr4.Test.StringTemplate
int newHashCode = RuntimeHelpers.GetHashCode(st);
Assert.AreEqual(originalHashCode == newHashCode, false); // diff objects
string expected = "foo";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
st = group.getInstanceOf("b");
expected = "bar";
-            result = st.render();
+            result = st.Render();
Assert.AreEqual(expected, result);
}
}
diff --git a/Antlr4.Test.StringTemplate/TestImports.cs b/Antlr4.Test.StringTemplate/TestImports.cs
index ba1b0ba..38a1e39 100644
--- a/Antlr4.Test.StringTemplate/TestImports.cs
+++ b/Antlr4.Test.StringTemplate/TestImports.cs
@@ -57,13 +57,13 @@ namespace Antlr4.Test.StringTemplate
group2.importTemplates(group1);
Template st = group2.getInstanceOf("b");
string expected = "dir1 b";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);

// do it again, but make a template ref imported template
st = group2.getInstanceOf("a");
expected = " dir1 b ";
-            result = st.render();
+            result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -85,7 +85,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(dir1 + "/a.stg");
Template st = group.getInstanceOf("b"); // visible only if import worked
string expected = "dir2 b";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -106,7 +106,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group1 = new TemplateGroupFile(dir + "/group1.stg");
Template st = group1.getInstanceOf("c"); // should see c()
string expected = "g2 c";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -128,7 +128,7 @@ namespace Antlr4.Test.StringTemplate
Template st = group1.getInstanceOf("a");
st.impl.dump();
string expected = " group file b ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -151,7 +151,7 @@ namespace Antlr4.Test.StringTemplate
group1.importTemplates(group2);
Template st = group1.getInstanceOf("b");
string expected = "g2 c";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -170,7 +170,7 @@ namespace Antlr4.Test.StringTemplate
group1.importTemplates(group2);
Template st = group1.getInstanceOf("subdir/a");
string expected = " x's subdir/b ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -192,7 +192,7 @@ namespace Antlr4.Test.StringTemplate
group1.importTemplates(group2);
Template st = group1.getInstanceOf("subdir/a");
string expected = " group file: b ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -215,13 +215,13 @@ namespace Antlr4.Test.StringTemplate
// normal lookup; a created from dir2 calls dir2.b
Template st = group2.getInstanceOf("a");
string expected = " dir2 b ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);

// polymorphic lookup; a created from dir1 calls dir2.a which calls dir1.b
st = group1.getInstanceOf("a");
expected = " dir1 b ";
-            result = st.render();
+            result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -242,7 +242,7 @@ namespace Antlr4.Test.StringTemplate
group2.importTemplates(group1);
Template st = group2.getInstanceOf("a");
string expected = " [dir1 a] ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -272,13 +272,13 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(originalHashCode == newHashCode, false); // diff objects

string expected = " dir1 b ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);

st = group2.getInstanceOf("b");
int newHashCode2 = RuntimeHelpers.GetHashCode(st);
Assert.AreEqual(originalHashCode2 == newHashCode2, false); // diff objects
-            result = st.render();
+            result = st.Render();
expected = "dir1 b";
Assert.AreEqual(expected, result);
}
diff --git a/Antlr4.Test.StringTemplate/TestIndentation.cs b/Antlr4.Test.StringTemplate/TestIndentation.cs
index c30c0d7..00cf8ec 100644
--- a/Antlr4.Test.StringTemplate/TestIndentation.cs
+++ b/Antlr4.Test.StringTemplate/TestIndentation.cs
@@ -51,11 +51,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
Template t = group.getInstanceOf("list");
t.impl.dump();
-            t.add("a", "Terence");
-            t.add("b", "Jim");
+            t.Add("a", "Terence");
+            t.Add("b", "Jim");
string expecting =
"  TerenceJim";
-            Assert.AreEqual(expecting, t.render());
+            Assert.AreEqual(expecting, t.Render());
}

[TestMethod]
@@ -69,14 +69,14 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
Template t = group.getInstanceOf("list");
-            t.add("names", "Terence");
-            t.add("names", "Jim");
-            t.add("names", "Sriram");
+            t.Add("names", "Terence");
+            t.Add("names", "Jim");
+            t.Add("names", "Sriram");
string expecting =
"  Terence" + newline +
"  Jim" + newline +
"  Sriram";
-            Assert.AreEqual(expecting, t.render());
+            Assert.AreEqual(expecting, t.Render());
}

[TestMethod]
@@ -89,9 +89,9 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
Template t = group.getInstanceOf("list");
-            t.add("names", "Terence\nis\na\nmaniac");
-            t.add("names", "Jim");
-            t.add("names", "Sriram\nis\ncool");
+            t.Add("names", "Terence\nis\na\nmaniac");
+            t.Add("names", "Jim");
+            t.Add("names", "Sriram\nis\ncool");
string expecting =
"  Terence" + newline +
"  is" + newline +
@@ -101,7 +101,7 @@ namespace Antlr4.Test.StringTemplate
"  Sriram" + newline +
"  is" + newline +
"  cool";
-            Assert.AreEqual(expecting, t.render());
+            Assert.AreEqual(expecting, t.Render());
}

[TestMethod]
@@ -114,12 +114,12 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
Template t = group.getInstanceOf("list");
-            t.add("names", "Terence\n\nis a maniac");
+            t.Add("names", "Terence\n\nis a maniac");
string expecting =
"  Terence" + newline +
"" + newline + // no indent on blank line
"  is a maniac";
-            Assert.AreEqual(expecting, t.render());
+            Assert.AreEqual(expecting, t.Render());
}

[TestMethod]
@@ -134,16 +134,16 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
Template t = group.getInstanceOf("list");
-            t.add("names", "Terence");
-            t.add("names", "Jim");
-            t.add("names", "Sriram");
+            t.Add("names", "Terence");
+            t.Add("names", "Jim");
+            t.Add("names", "Sriram");
string expecting =
"Before:" + newline +
"  Terence" + newline +
"  Jim" + newline +
"  Sriram" + newline +
"after";
-            Assert.AreEqual(expecting, t.render());
+            Assert.AreEqual(expecting, t.Render());
}

[TestMethod]
@@ -165,22 +165,22 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
Template t = group.getInstanceOf("method");
-            t.add("name", "foo");
+            t.Add("name", "foo");
Template s1 = group.getInstanceOf("assign");
-            s1.add("lhs", "x");
-            s1.add("expr", "0");
+            s1.Add("lhs", "x");
+            s1.Add("expr", "0");
Template s2 = group.getInstanceOf("ifstat");
-            s2.add("expr", "x>0");
+            s2.Add("expr", "x>0");
Template s2a = group.getInstanceOf("assign");
-            s2a.add("lhs", "y");
-            s2a.add("expr", "x+y");
+            s2a.Add("lhs", "y");
+            s2a.Add("expr", "x+y");
Template s2b = group.getInstanceOf("assign");
-            s2b.add("lhs", "z");
-            s2b.add("expr", "4");
-            s2.add("stats", s2a);
-            s2.add("stats", s2b);
-            t.add("stats", s1);
-            t.add("stats", s2);
+            s2b.Add("lhs", "z");
+            s2b.Add("expr", "4");
+            s2.Add("stats", s2a);
+            s2.Add("stats", s2b);
+            t.Add("stats", s1);
+            t.Add("stats", s2);
string expecting =
"void foo() {" + newline +
"\tx=0;" + newline +
@@ -189,7 +189,7 @@ namespace Antlr4.Test.StringTemplate
"\t  z=4;" + newline +
"\t}" + newline +
"}";
-            Assert.AreEqual(expecting, t.render());
+            Assert.AreEqual(expecting, t.Render());
}

[TestMethod]
@@ -199,12 +199,12 @@ namespace Antlr4.Test.StringTemplate
"begin" + newline +
"    <if(x)>foo<endif>" + newline +
"end" + newline);
-            t.add("x", "x");
+            t.Add("x", "x");
string expecting =
"begin" + newline +
"    foo" + newline +
"end" + newline;
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -223,7 +223,7 @@ namespace Antlr4.Test.StringTemplate
"begin" + newline +
"   bar" + newline +
"end" + newline;
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -238,12 +238,12 @@ namespace Antlr4.Test.StringTemplate
"   <y>" + newline +
"   <endif>" + newline +
"end" + newline);
-            t.add("y", "y");
+            t.Add("y", "y");
string expecting =
"begin" + newline +
"   y" + newline +
"end" + newline;
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -258,12 +258,12 @@ namespace Antlr4.Test.StringTemplate
"     <y>" + newline +
"   <endif>" + newline +
"end" + newline);
-            t.add("y", "y");
+            t.Add("y", "y");
string expecting =
"begin" + newline +
"     y" + newline +
"end" + newline;
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -282,13 +282,13 @@ namespace Antlr4.Test.StringTemplate
"      <endif>" + newline +
"   <endif>" + newline +
"end" + newline);
-            t.add("x", "x");
-            t.add("y", "y");
+            t.Add("x", "x");
+            t.Add("y", "y");
string expecting =
"begin" + newline +
"      foo" + newline +
"end" + newline; // no indent
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -303,10 +303,10 @@ namespace Antlr4.Test.StringTemplate
"   <y>" + newline +
"   <endif>" + newline +
"}>" + newline);
-            t.add("names", "Ter");
-            t.add("y", "y");
+            t.Add("names", "Ter");
+            t.Add("y", "y");
string expecting = "   y" + newline + newline;
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}
}
diff --git a/Antlr4.Test.StringTemplate/TestIndirectionAndEarlyEval.cs b/Antlr4.Test.StringTemplate/TestIndirectionAndEarlyEval.cs
index d3706e9..d305501 100644
--- a/Antlr4.Test.StringTemplate/TestIndirectionAndEarlyEval.cs
+++ b/Antlr4.Test.StringTemplate/TestIndirectionAndEarlyEval.cs
@@ -44,9 +44,9 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<(name)>";
Template st = new Template(template);
-            st.add("name", "Ter");
+            st.Add("name", "Ter");
string expected = "Ter";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -58,9 +58,9 @@ namespace Antlr4.Test.StringTemplate
string template = "<(name)()>";
group.defineTemplate("test", "name", template);
Template st = group.getInstanceOf("test");
-            st.add("name", "foo");
+            st.Add("name", "foo");
string expected = "bar";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -72,9 +72,9 @@ namespace Antlr4.Test.StringTemplate
string template = "<(name)({1},{2})>";
group.defineTemplate("test", "name", template);
Template st = group.getInstanceOf("test");
-            st.add("name", "foo");
+            st.Add("name", "foo");
string expected = "12";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -88,7 +88,7 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("test", "name", template);
Template st = group.getInstanceOf("test");
string expected = "bar";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -97,10 +97,10 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<u.(propname)>: <u.name>";
Template st = new Template(template);
-            st.add("u", new TestCoreBasics.User(1, "parrt"));
-            st.add("propname", "id");
+            st.Add("u", new TestCoreBasics.User(1, "parrt"));
+            st.Add("propname", "id");
string expected = "1: parrt";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -111,13 +111,13 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("a", "x", "[<x>]");
group.defineTemplate("test", "names,templateName", "hi <names:(templateName)()>!");
Template st = group.getInstanceOf("test");
-            st.add("names", "Ter");
-            st.add("names", "Tom");
-            st.add("names", "Sumana");
-            st.add("templateName", "a");
+            st.Add("names", "Ter");
+            st.Add("names", "Tom");
+            st.Add("names", "Sumana");
+            st.Add("templateName", "a");
string expected =
"hi [Ter][Tom][Sumana]!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -128,10 +128,10 @@ namespace Antlr4.Test.StringTemplate
Template st = new Template(template);
IDictionary<int, string> m = new Dictionary<int, string>();
m[36] = "foo";
-            st.add("m", m);
-            st.add("intkey", 36);
+            st.Add("m", m);
+            st.Add("intkey", 36);
string expected = "foo";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}
}
diff --git a/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs b/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
index b402d83..5561ca0 100644
--- a/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
+++ b/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
@@ -74,7 +74,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
Template st = group.getInstanceOf("t");
-            st.render();
+            st.Render();
string expected = "context [t] 1:0 no such template: foo" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -98,7 +98,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group2 = new TemplateGroupFile(tmpdir + "/" + "t2.stg");
group.importTemplates(group2);
Template st = group.getInstanceOf("t");
-            st.render();
+            st.Render();
string expected = "context [t] 1:1 no such template: super.t" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -116,8 +116,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
Template st = group.getInstanceOf("t");
-            st.add("u", new User(32, "parrt"));
-            st.render();
+            st.Add("u", new User(32, "parrt"));
+            st.Render();
string expected = "";
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -135,8 +135,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
Template st = group.getInstanceOf("t");
-            st.add("u", new UserHiddenName("parrt"));
-            st.render();
+            st.Add("u", new UserHiddenName("parrt"));
+            st.Render();
string expected = "";
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -154,8 +154,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
Template st = group.getInstanceOf("t");
-            st.add("u", new UserHiddenNameField("parrt"));
-            st.render();
+            st.Add("u", new UserHiddenNameField("parrt"));
+            st.Render();
string expected = "";
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -174,7 +174,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
Template st = group.getInstanceOf("t");
-            st.render();
+            st.Render();
string expected = "context [t] 1:1 passed 1 arg(s) to template u with 2 declared arg(s)" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -194,7 +194,7 @@ namespace Antlr4.Test.StringTemplate
group.setListener(errors);
Template st = group.getInstanceOf("t");
string expected = "9";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);

expected = "context [t] 1:5 passed 1 arg(s) to template u with 2 declared arg(s)" + newline;
@@ -216,7 +216,7 @@ namespace Antlr4.Test.StringTemplate
group.setListener(errors);
TemplateGroup.debug = true;
Template st = group.getInstanceOf("t");
-            st.render();
+            st.Render();
string expected = "context [t u] 1:1 attribute x isn't defined" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
@@ -231,19 +231,19 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(group,
"<names,phones,salaries:{n,p | <n>@<p>}; separator=\", \">"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("phones", "1");
-            e.add("phones", "2");
-            e.add("salaries", "big");
-            e.render();
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
+            e.Add("salaries", "big");
+            e.Render();
string errorExpecting =
"1:23: anonymous template has 2 arg(s) but mapped across 3 value(s)" + newline +
"context [anonymous] 1:23 passed 3 arg(s) to template _sub1 with 2 declared arg(s)" + newline +
"context [anonymous] 1:1 iterating through 3 values in zip map but template has 2 declared arguments" + newline;
Assert.AreEqual(errorExpecting, errors.ToString());
string expecting = "Ter@1, Tom@2";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -253,8 +253,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.setListener(errors);
Template e = new Template(group, "<trim(s)>");
-            e.add("s", 34);
-            e.render(); // generate the error
+            e.Add("s", 34);
+            e.Render(); // generate the error
string errorExpecting = "context [anonymous] 1:1 function trim expects a string not System.Int32" + newline;
Assert.AreEqual(errorExpecting, errors.ToString());
}
@@ -266,8 +266,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.setListener(errors);
Template e = new Template(group, "<strlen(s)>");
-            e.add("s", 34);
-            e.render(); // generate the error
+            e.Add("s", 34);
+            e.Render(); // generate the error
string errorExpecting = "context [anonymous] 1:1 function strlen expects a string not System.Int32" + newline;
Assert.AreEqual(errorExpecting, errors.ToString());
}
diff --git a/Antlr4.Test.StringTemplate/TestLineWrap.cs b/Antlr4.Test.StringTemplate/TestLineWrap.cs
index cdb710d..ca6b2f8 100644
--- a/Antlr4.Test.StringTemplate/TestLineWrap.cs
+++ b/Antlr4.Test.StringTemplate/TestLineWrap.cs
@@ -51,7 +51,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

Template a = group.getInstanceOf("array");
-            a.add("values",
+            a.Add("values",
new int[] {3,9,20,2,1,4,6,32,5,6,77,888,2,1,6,32,5,6,77,
4,9,20,2,1,4,63,9,20,2,1,4,6,32,5,6,77,6,32,5,6,77,
3,9,20,2,1,4,6,32,5,6,77,888,1,6,32,5});
@@ -64,7 +64,7 @@ namespace Antlr4.Test.StringTemplate
StringWriter sw = new StringWriter();
ITemplateWriter stw = new AutoIndentWriter(sw, "\n"); // force \n as newline
stw.setLineWidth(40);
-            a.write(stw);
+            a.Write(stw);
string result = sw.ToString();
Assert.AreEqual(expecting, result);
}
@@ -78,7 +78,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

Template a = group.getInstanceOf("array");
-            a.add("values",
+            a.Add("values",
new int[] {3,9,20,2,1,4,6,32,5,6,77,888,2,1,6,32,5,6,77,
4,9,20,2,1,4,63,9,20,2,1,4,6,32,5,6,77,6,32,5,6,77,
3,9,20,2,1,4,6,32,5,6,77,888,1,6,32,5});
@@ -88,7 +88,7 @@ namespace Antlr4.Test.StringTemplate
"            63,9,20,2,1,4,6,32,5,6,77,6," + Environment.NewLine +
"            32,5,6,77,3,9,20,2,1,4,6,32," + Environment.NewLine +
"            5,6,77,888,1,6,32,5 };";
-            Assert.AreEqual(expecting, a.render(40));
+            Assert.AreEqual(expecting, a.Render(40));
}

[TestMethod]
@@ -101,18 +101,18 @@ namespace Antlr4.Test.StringTemplate

Template x = new Template("<\\n>{ <stuff; anchor, separator=\",\\n\"> }<\\n>");
x.groupThatCreatedThisInstance = group;
-            x.add("stuff", "1");
-            x.add("stuff", "2");
-            x.add("stuff", "3");
+            x.Add("stuff", "1");
+            x.Add("stuff", "2");
+            x.Add("stuff", "3");
Template a = group.getInstanceOf("array");
-            a.add("values", new List<object>() { "a", x, "b" });
+            a.Add("values", new List<object>() { "a", x, "b" });
string expecting =
"{ a, " + Environment.NewLine +
"  { 1," + Environment.NewLine +
"    2," + Environment.NewLine +
"    3 }" + Environment.NewLine +
"  , b }";
-            Assert.AreEqual(expecting, a.render(40));
+            Assert.AreEqual(expecting, a.Render(40));
}

[TestMethod]
@@ -124,12 +124,12 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

Template a = group.getInstanceOf("func");
-            a.add("args",
+            a.Add("args",
new string[] { "a", "b", "c", "d", "e", "f" });
string expecting =
"       FUNCTION line( a,b,c,d," + Environment.NewLine +
"      ce,f )";
-            Assert.AreEqual(expecting, a.render(30));
+            Assert.AreEqual(expecting, a.Render(30));
}

[TestMethod]
@@ -141,7 +141,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

Template a = group.getInstanceOf("array");
-            a.add("values",
+            a.Add("values",
new int[] {3,9,20,2,1,4,6,32,5,6,77,888,2,1,6,32,5,6,77,
4,9,20,2,1,4,63,9,20,2,1,4,6});
string expecting =
@@ -150,7 +150,7 @@ namespace Antlr4.Test.StringTemplate
"            1,6,32,5,6,77,4,9," + Environment.NewLine +
"            20,2,1,4,63,9,20,2," + Environment.NewLine +
"            1,4,6 };";
-            Assert.AreEqual(expecting, a.render(30));
+            Assert.AreEqual(expecting, a.Render(30));
}

[TestMethod]
@@ -162,12 +162,12 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

Template a = group.getInstanceOf("duh");
-            a.add("chars", new string[] { "a", "b", "c", "d", "e" });
+            a.Add("chars", new string[] { "a", "b", "c", "d", "e" });
// lineWidth==3 implies that we can have 3 characters at most
string expecting =
"abc" + Environment.NewLine +
"de";
-            Assert.AreEqual(expecting, a.render(3));
+            Assert.AreEqual(expecting, a.Render(3));
}

[TestMethod]
@@ -179,12 +179,12 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

Template a = group.getInstanceOf("duh");
-            a.add("chars", new string[] { "a", "b", "\n", "d", "e" });
+            a.Add("chars", new string[] { "a", "b", "\n", "d", "e" });
// don't do \n if it's last element anyway
string expecting =
"ab" + Environment.NewLine +
"de";
-            Assert.AreEqual(expecting, a.render(3));
+            Assert.AreEqual(expecting, a.Render(3));
}

[TestMethod]
@@ -196,7 +196,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

Template a = group.getInstanceOf("duh");
-            a.add("chars", new string[] { "a", "b", "c", "\n", "d", "e" });
+            a.Add("chars", new string[] { "a", "b", "c", "\n", "d", "e" });
// Once we wrap, we must dump chars as we see them.  A newline right
// after a wrap is just an "unfortunate" event.  People will expect
// a newline if it's in the data.
@@ -204,7 +204,7 @@ namespace Antlr4.Test.StringTemplate
"abc" + Environment.NewLine +
"" + Environment.NewLine +
"de";
-            Assert.AreEqual(expecting, a.render(3));
+            Assert.AreEqual(expecting, a.Render(3));
}

[TestMethod]
@@ -216,12 +216,12 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

Template a = group.getInstanceOf("duh");
-            a.add("data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
+            a.Add("data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
string expecting =
"!123" + Environment.NewLine +
"4567" + Environment.NewLine +
"89!";
-            Assert.AreEqual(expecting, a.render(4));
+            Assert.AreEqual(expecting, a.Render(4));
}

[TestMethod]
@@ -233,12 +233,12 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

Template a = group.getInstanceOf("duh");
-            a.add("data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
+            a.Add("data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
string expecting =
"![1][2][3]" + Environment.NewLine + // width=9 is the 3 char; don't break til after ]
"[4][5][6]" + Environment.NewLine +
"[7][8][9]!";
-            Assert.AreEqual(expecting, a.render(9));
+            Assert.AreEqual(expecting, a.Render(9));
}

[TestMethod]
@@ -250,12 +250,12 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

Template a = group.getInstanceOf("duh");
-            a.add("data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
+            a.Add("data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
string expecting =
"![1][2][3]" + Environment.NewLine +
" [4][5][6]" + Environment.NewLine +
" [7][8][9]!";
-            Assert.AreEqual(expecting, a.render(9));
+            Assert.AreEqual(expecting, a.Render(9));
}

[TestMethod]
@@ -269,15 +269,15 @@ namespace Antlr4.Test.StringTemplate

Template t = group.getInstanceOf("top");
Template s = group.getInstanceOf("str");
-            s.add("data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
-            t.add("s", s);
+            s.Add("data", new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
+            t.Add("s", s);
string expecting =
"  ![1][2]!+" + Environment.NewLine +
"  ![3][4]!+" + Environment.NewLine +
"  ![5][6]!+" + Environment.NewLine +
"  ![7][8]!+" + Environment.NewLine +
"  ![9]!.";
-            Assert.AreEqual(expecting, t.render(9));
+            Assert.AreEqual(expecting, t.Render(9));
}

[TestMethod]
@@ -289,7 +289,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

Template a = group.getInstanceOf("duh");
-            a.add("chars", new string[] { "a", "b", "c", "d", "e" });
+            a.Add("chars", new string[] { "a", "b", "c", "d", "e" });
//
string expecting =
"    a" + Environment.NewLine +
@@ -297,7 +297,7 @@ namespace Antlr4.Test.StringTemplate
"    c" + Environment.NewLine +
"    d" + Environment.NewLine +
"    e";
-            Assert.AreEqual(expecting, a.render(2));
+            Assert.AreEqual(expecting, a.Render(2));
}

[TestMethod]
@@ -309,14 +309,14 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

Template a = group.getInstanceOf("duh");
-            a.add("chars", new string[] { "a", "b", "c", "d", "e" });
+            a.Add("chars", new string[] { "a", "b", "c", "d", "e" });
//
string expecting =
"    ab" + Environment.NewLine +
"    cd" + Environment.NewLine +
"    e";
// width=4 spaces + 2 char.
-            Assert.AreEqual(expecting, a.render(6));
+            Assert.AreEqual(expecting, a.Render(6));
}

[TestMethod]
@@ -330,14 +330,14 @@ namespace Antlr4.Test.StringTemplate

Template top = group.getInstanceOf("top");
Template duh = group.getInstanceOf("duh");
-            duh.add("chars", new string[] { "a", "b", "c", "d", "e" });
-            top.add("d", duh);
+            duh.Add("chars", new string[] { "a", "b", "c", "d", "e" });
+            top.Add("d", duh);
string expecting =
"    ab" + Environment.NewLine +
"    cd" + Environment.NewLine +
"    e!";
// width=4 spaces + 2 char.
-            Assert.AreEqual(expecting, top.render(6));
+            Assert.AreEqual(expecting, top.Render(6));
}

[TestMethod]
@@ -351,14 +351,14 @@ namespace Antlr4.Test.StringTemplate

Template top = group.getInstanceOf("top");
Template duh = group.getInstanceOf("duh");
-            duh.add("chars", new string[] { "a", "b", "c", "d", "e" });
-            top.add("d", duh);
+            duh.Add("chars", new string[] { "a", "b", "c", "d", "e" });
+            top.Add("d", duh);
//
string expecting =
"  x: ab" + Environment.NewLine +
"     cd" + Environment.NewLine +
"     e!";
-            Assert.AreEqual(expecting, top.render(7));
+            Assert.AreEqual(expecting, top.Render(7));
}

[TestMethod]
@@ -370,14 +370,14 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

Template a = group.getInstanceOf("m");
-            a.add("args",
+            a.Add("args",
new string[] { "a", "b", "c" });
-            a.add("body", "i=3;");
+            a.Add("body", "i=3;");
// make it wrap because of ") throws Ick { " literal
int n = "[TestMethod] public voidfoo(a, b, c".Length;
string expecting =
"[TestMethod] public voidfoo(a, b, c) throws Ick { i=3; }";
-            Assert.AreEqual(expecting, a.render(n));
+            Assert.AreEqual(expecting, a.Render(n));
}

[TestMethod]
@@ -389,12 +389,12 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));

Template m = group.getInstanceOf("m");
-            m.add("body", "i=3;");
+            m.Add("body", "i=3;");
// make it wrap because of ") throws Ick { " literal
string expecting =
"{ " + Environment.NewLine +
"  i=3; }";
-            Assert.AreEqual(expecting, m.render(2));
+            Assert.AreEqual(expecting, m.Render(2));
}

[TestMethod]
@@ -408,12 +408,12 @@ namespace Antlr4.Test.StringTemplate

Template top = group.getInstanceOf("top");
Template a = group.getInstanceOf("array");
-            a.add("values",
+            a.Add("values",
new int[] {3,9,20,2,1,4,6,32,5,6,77,888,2,1,6,32,5,6,77,
4,9,20,2,1,4,63,9,20,2,1,4,6,32,5,6,77,6,32,5,6,77,
3,9,20,2,1,4,6,32,5,6,77,888,1,6,32,5});
-            top.add("arrays", a);
-            top.add("arrays", a); // add twice
+            top.Add("arrays", a);
+            top.Add("arrays", a); // Add twice
string expecting =
"Arrays: int[] a = { 3,9,20,2,1,4,6,32,5," + Environment.NewLine +
"                    6,77,888,2,1,6,32,5," + Environment.NewLine +
@@ -428,7 +428,7 @@ namespace Antlr4.Test.StringTemplate
"            32,5,6,77,3,9,20,2,1,4,6,32," + Environment.NewLine +
"            5,6,77,888,1,6,32,5 };" + Environment.NewLine +
"done";
-            Assert.AreEqual(expecting, top.render(40));
+            Assert.AreEqual(expecting, top.Render(40));
}
}
}
diff --git a/Antlr4.Test.StringTemplate/TestLists.cs b/Antlr4.Test.StringTemplate/TestLists.cs
index d4787ca..1167eb4 100644
--- a/Antlr4.Test.StringTemplate/TestLists.cs
+++ b/Antlr4.Test.StringTemplate/TestLists.cs
@@ -44,12 +44,12 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<[names,phones]>"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("phones", "1");
-            e.add("phones", "2");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
string expecting = "TerTom12";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -59,7 +59,7 @@ namespace Antlr4.Test.StringTemplate
"<[\"Ter\",,\"Jesse\"]:{n | <i>:<n>}; separator=\", \", null={foo}>"
);
string expecting = "1:Ter, foo, 2:Jesse";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -69,7 +69,7 @@ namespace Antlr4.Test.StringTemplate
"<[,\"Ter\",\"Jesse\"]:{n | <i>:<n>}; separator=\", \", null={foo}>"
);
string expecting = "foo, 1:Ter, 2:Jesse";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -78,12 +78,12 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<length([names,phones])>"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("phones", "1");
-            e.add("phones", "2");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
string expecting = "4";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -92,12 +92,12 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<[names,phones]; separator=\", \">"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("phones", "1");
-            e.add("phones", "2");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
string expecting = "Ter, Tom, 1, 2";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -106,12 +106,12 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<[names,phones]:{a|<a>.}>"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("phones", "1");
-            e.add("phones", "2");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
string expecting = "Ter.Tom.1.2.";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -120,14 +120,14 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<[names,phones,salaries]; separator=\", \">"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("phones", "1");
-            e.add("phones", "2");
-            e.add("salaries", "big");
-            e.add("salaries", "huge");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
+            e.Add("salaries", "big");
+            e.Add("salaries", "huge");
string expecting = "Ter, Tom, 1, 2, big, huge";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -136,12 +136,12 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<[names:{n|<n>!},phones]; separator=\", \">"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("phones", "1");
-            e.add("phones", "2");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
string expecting = "Ter!, Tom!, 1, 2";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -150,12 +150,12 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<[{<if(names)>doh<endif>},phones]; separator=\", \">"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("phones", "1");
-            e.add("phones", "2");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
string expecting = "doh, 1, 2";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -166,10 +166,10 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<[no,go]; null=\"foo\", separator=\", \">"
);
-            e.add("phones", "1");
-            e.add("phones", "2");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
string expecting = "foo, foo";  // only one since template application gives nothing
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -178,10 +178,10 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<[names:{n|<n>!},\"foo\"]:{a|x}; separator=\", \">"
);
-            e.add("phones", "1");
-            e.add("phones", "2");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
string expecting = "x";  // only one since template application gives nothing
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -190,12 +190,12 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<[names, [\"foo\",\"bar\"]:{x | <x>!},phones]; separator=\", \">"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("phones", "1");
-            e.add("phones", "2");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
string expecting = "Ter, Tom, foo!, bar!, 1, 2";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -208,12 +208,12 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
Template e = group.getInstanceOf("test");
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("phones", "1");
-            e.add("phones", "2");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
string expecting = "*Ter**Tom**1**2*";
-            string result = e.render();
+            string result = e.Render();
Assert.AreEqual(expecting, result);
}
}
diff --git a/Antlr4.Test.StringTemplate/TestModelAdaptors.cs b/Antlr4.Test.StringTemplate/TestModelAdaptors.cs
index 0b5bc83..48858a2 100644
--- a/Antlr4.Test.StringTemplate/TestModelAdaptors.cs
+++ b/Antlr4.Test.StringTemplate/TestModelAdaptors.cs
@@ -93,9 +93,9 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(tmpdir + "/foo.stg");
group.registerModelAdaptor(typeof(User), new UserAdaptor());
Template st = group.getInstanceOf("foo");
-            st.add("x", new User(100, "parrt"));
+            st.Add("x", new User(100, "parrt"));
string expecting = "100: parrt";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -110,9 +110,9 @@ namespace Antlr4.Test.StringTemplate
group.setListener(errors);
group.registerModelAdaptor(typeof(User), new UserAdaptor());
Template st = group.getInstanceOf("foo");
-            st.add("x", new User(100, "parrt"));
+            st.Add("x", new User(100, "parrt"));
string expecting = "";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);

TemplateRuntimeMessage msg = (TemplateRuntimeMessage)errors.Errors[0];
@@ -129,9 +129,9 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(tmpdir + "/foo.stg");
group.registerModelAdaptor(typeof(User), new UserAdaptor());
Template st = group.getInstanceOf("foo");
-            st.add("x", new SuperUser(100, "parrt")); // create subclass of User
+            st.Add("x", new SuperUser(100, "parrt")); // create subclass of User
string expecting = "100: super parrt";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -149,9 +149,9 @@ namespace Antlr4.Test.StringTemplate
group.registerModelAdaptor(typeof(User), new UserAdaptorConst());
// cache should be reset so we see new adaptor
Template st = group.getInstanceOf("foo");
-            st.add("x", new User(100, "parrt"));
+            st.Add("x", new User(100, "parrt"));
string expecting = "const id value: const name value"; // sees UserAdaptorConst
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -165,15 +165,15 @@ namespace Antlr4.Test.StringTemplate
group.registerModelAdaptor(typeof(User), new UserAdaptor());
group.registerModelAdaptor(typeof(SuperUser), new UserAdaptorConst()); // most specific
Template st = group.getInstanceOf("foo");
-            st.add("x", new User(100, "parrt"));
+            st.Add("x", new User(100, "parrt"));
string expecting = "100: parrt";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);

-            st.remove("x");
-            st.add("x", new SuperUser(100, "parrt"));
+            st.Remove("x");
+            st.Add("x", new SuperUser(100, "parrt"));
expecting = "const id value: const name value"; // sees UserAdaptorConst
-            result = st.render();
+            result = st.Render();
Assert.AreEqual(expecting, result);
}
}
diff --git a/Antlr4.Test.StringTemplate/TestNullAndEmptyValues.cs b/Antlr4.Test.StringTemplate/TestNullAndEmptyValues.cs
index 0ec8068..a49a2ca 100644
--- a/Antlr4.Test.StringTemplate/TestNullAndEmptyValues.cs
+++ b/Antlr4.Test.StringTemplate/TestNullAndEmptyValues.cs
@@ -45,11 +45,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "name", "hi <name; separator=\", \">!");
Template st = group.getInstanceOf("test");
-            st.add("name", null); // null is added to list, but ignored in iteration
-            st.add("name", "Tom");
-            st.add("name", "Sumana");
+            st.Add("name", null); // null is added to list, but ignored in iteration
+            st.Add("name", "Tom");
+            st.Add("name", "Sumana");
string expected = "hi Tom, Sumana!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -60,9 +60,9 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("test", "name", "<name:t()>");
group.defineTemplate("t", "x", "<x>");
Template st = group.getInstanceOf("test");
-            st.add("name", null); // null is added to list, but ignored in iteration
+            st.Add("name", null); // null is added to list, but ignored in iteration
string expected = "";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -74,7 +74,7 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("t", "x", "<x>");
Template st = group.getInstanceOf("test");
string expected = "";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -84,11 +84,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "name", "hi <name; separator=\", \">!");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
-            st.add("name", null);
-            st.add("name", "Sumana");
+            st.Add("name", "Ter");
+            st.Add("name", null);
+            st.Add("name", "Sumana");
string expected = "hi Ter, Sumana!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -98,11 +98,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "name", "hi <name; separator=\", \">!");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
-            st.add("name", "Tom");
-            st.add("name", null);
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
+            st.Add("name", null);
string expected = "hi Ter, Tom!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -112,13 +112,13 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "name", "hi <name; separator=\", \">!");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
-            st.add("name", "Tom");
-            st.add("name", null);
-            st.add("name", null);
-            st.add("name", "Sri");
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
+            st.Add("name", null);
+            st.Add("name", null);
+            st.Add("name", "Sri");
string expected = "hi Ter, Tom, Sri!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -128,10 +128,10 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "name", "hi <name; null=\"x\">!");
Template st = group.getInstanceOf("test");
-            st.add("name", null);
-            st.add("name", null);
+            st.Add("name", null);
+            st.Add("name", null);
string expected = "hi xx!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -141,12 +141,12 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "name", "<name:{n | <i>:<n>}>");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
-            st.add("name", null);
-            st.add("name", null);
-            st.add("name", "Jesse");
+            st.Add("name", "Ter");
+            st.Add("name", null);
+            st.Add("name", null);
+            st.Add("name", "Jesse");
string expected = "1:Ter2:Jesse";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -159,9 +159,9 @@ namespace Antlr4.Test.StringTemplate
"<users>\n" +
"end\n");
Template t = group.getInstanceOf("test");
-            t.add("users", null);
+            t.Add("users", null);
string expecting = "begin" + newline + "end";
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -175,7 +175,7 @@ namespace Antlr4.Test.StringTemplate
"end\n");
Template t = group.getInstanceOf("test");
string expecting = "begin" + newline + "end";
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -188,9 +188,9 @@ namespace Antlr4.Test.StringTemplate
"<users:{u | name: <u>}; separator=\", \">\n" +
"end\n");
Template t = group.getInstanceOf("test");
-            t.add("users", new List<string>());
+            t.Add("users", new List<string>());
string expecting = "begin" + newline + "end";
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -200,9 +200,9 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "m", "<m.foo>");
Template t = group.getInstanceOf("test");
-            t.add("m", new Dictionary<string, string>());
+            t.Add("m", new Dictionary<string, string>());
string expecting = "";
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -212,9 +212,9 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "m", "<if(m.foo)>[<m.foo>]<endif>");
Template t = group.getInstanceOf("test");
-            t.add("m", new Dictionary<string, string>());
+            t.Add("m", new Dictionary<string, string>());
string expecting = "";
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -224,9 +224,9 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "m", "<if(m.foo)>[<m.foo>]<endif>");
Template t = group.getInstanceOf("test");
-            t.add("m", new Dictionary<string, string>() { { "foo", null } });
+            t.Add("m", new Dictionary<string, string>() { { "foo", null } });
string expecting = "";
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}
}
diff --git a/Antlr4.Test.StringTemplate/TestOptions.cs b/Antlr4.Test.StringTemplate/TestOptions.cs
index 90bc5ea..31cdf0b 100644
--- a/Antlr4.Test.StringTemplate/TestOptions.cs
+++ b/Antlr4.Test.StringTemplate/TestOptions.cs
@@ -46,11 +46,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "name", "hi <name; separator=\", \">!");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
-            st.add("name", "Tom");
-            st.add("name", "Sumana");
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
+            st.Add("name", "Sumana");
string expected = "hi Ter, Tom, Sumana!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -60,12 +60,12 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "name,sep", "hi <name; separator=sep>!");
Template st = group.getInstanceOf("test");
-            st.add("sep", ", ");
-            st.add("name", "Ter");
-            st.add("name", "Tom");
-            st.add("name", "Sumana");
+            st.Add("sep", ", ");
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
+            st.Add("name", "Sumana");
string expected = "hi Ter, Tom, Sumana!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -76,12 +76,12 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("foo", "|");
group.defineTemplate("test", "name,sep", "hi <name; separator=foo()>!");
Template st = group.getInstanceOf("test");
-            st.add("sep", ", ");
-            st.add("name", "Ter");
-            st.add("name", "Tom");
-            st.add("name", "Sumana");
+            st.Add("sep", ", ");
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
+            st.Add("name", "Sumana");
string expected = "hi Ter|Tom|Sumana!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -91,12 +91,12 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "name,sep", "hi <name; separator={<sep> _}>!");
Template st = group.getInstanceOf("test");
-            st.add("sep", ",");
-            st.add("name", "Ter");
-            st.add("name", "Tom");
-            st.add("name", "Sumana");
+            st.Add("sep", ",");
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
+            st.Add("name", "Sumana");
string expected = "hi Ter, _Tom, _Sumana!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -106,11 +106,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "name", "hi <name; null=\"n/a\", separator=\", \">!");
Template st = group.getInstanceOf("test");
-            st.add("name", null);
-            st.add("name", "Tom");
-            st.add("name", "Sumana");
+            st.Add("name", null);
+            st.Add("name", "Tom");
+            st.Add("name", "Sumana");
string expected = "hi n/a, Tom, Sumana!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -121,11 +121,11 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("test", "name", "hi <name; null=\"n/a\", separator=\", \">!");
Template st = group.getInstanceOf("test");
st.impl.dump();
-            st.add("name", "Ter");
-            st.add("name", null);
-            st.add("name", "Sumana");
+            st.Add("name", "Ter");
+            st.Add("name", null);
+            st.Add("name", "Sumana");
string expected = "hi Ter, n/a, Sumana!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -135,9 +135,9 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "name", "<name; null=\"n/a\">");
Template st = group.getInstanceOf("test");
-            st.add("name", null);
+            st.Add("name", null);
string expected = "n/a";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -147,11 +147,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "name", "<name:{n | <n>}; null=\"n/a\">");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
-            st.add("name", null);
-            st.add("name", "Sumana");
+            st.Add("name", "Ter");
+            st.Add("name", null);
+            st.Add("name", "Sumana");
string expected = "Tern/aSumana";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -164,11 +164,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "name", "<name:{n | <n>}:{n | [<n>]}; null=\"n/a\">");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
-            st.add("name", null);
-            st.add("name", "Sumana");
+            st.Add("name", "Ter");
+            st.Add("name", null);
+            st.Add("name", "Sumana");
string expected = "[Ter]n/a[Sumana]";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -179,7 +179,7 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("test", "name", "<name; null=\"n/a\">");
Template st = group.getInstanceOf("test");
string expected = "n/a";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -190,9 +190,9 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("foo", "<zippo>");
group.defineTemplate("test", "zippo", "<foo(); null=\"n/a\">");
Template st = group.getInstanceOf("test");
-            st.add("zippo", null);
+            st.Add("zippo", null);
string expected = "";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -204,9 +204,9 @@ namespace Antlr4.Test.StringTemplate
group.setListener(errors);
group.defineTemplate("test", "name", "<name; bad=\"ugly\">");
Template st = group.getInstanceOf("test");
-            st.add("name", "Ter");
+            st.Add("name", "Ter");
string expected = "Ter";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
expected = "[test 1:7: no such option: bad]";
Assert.AreEqual(expected, errors.Errors.ToListString());
diff --git a/Antlr4.Test.StringTemplate/TestRegions.cs b/Antlr4.Test.StringTemplate/TestRegions.cs
index 600fdb5..6f06186 100644
--- a/Antlr4.Test.StringTemplate/TestRegions.cs
+++ b/Antlr4.Test.StringTemplate/TestRegions.cs
@@ -51,7 +51,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(dir + "/group.stg");
Template st = group.getInstanceOf("a");
string expected = "[bar]";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -67,7 +67,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(dir + "/group.stg");
Template st = group.getInstanceOf("a");
string expected = "[]";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -85,7 +85,7 @@ namespace Antlr4.Test.StringTemplate
group2.importTemplates(group1); // define r in g2
Template st = group2.getInstanceOf("a");
string expected = "[foo]";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -103,7 +103,7 @@ namespace Antlr4.Test.StringTemplate
group2.importTemplates(group1); // define r in g2
Template st = group2.getInstanceOf("a");
string expected = "[(foo)]";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -121,7 +121,7 @@ namespace Antlr4.Test.StringTemplate
group1.importTemplates(group2); // opposite of previous; g1 imports g2
Template st = group1.getInstanceOf("a");
string expected = "[]"; // @a.r implicitly defined in g1; can't see g2's
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -136,7 +136,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(dir + "/g.stg");
Template st = group.getInstanceOf("a");
string expected = "[foo]";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -176,7 +176,7 @@ namespace Antlr4.Test.StringTemplate
subGroup.importTemplates(group);

Template st = subGroup.getInstanceOf("a");
-            string result = st.render();
+            string result = st.Render();
string expecting = "XAfooBY";
Assert.AreEqual(expecting, result);
}
@@ -218,7 +218,7 @@ namespace Antlr4.Test.StringTemplate

Template st = subSubGroup.getInstanceOf("a");

-            string result = st.render();
+            string result = st.Render();
string expecting = "Xfoo23Y";
Assert.AreEqual(expecting, result);
}
@@ -239,7 +239,7 @@ namespace Antlr4.Test.StringTemplate
subGroup.importTemplates(group);

Template st = subGroup.getInstanceOf("a");
-            string result = st.render();
+            string result = st.Render();
string expecting = "XAfooY";
Assert.AreEqual(expecting, result);
}
@@ -258,7 +258,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroupFile group = new TemplateGroupFile(dir + "/g.stg");
group.setListener(errors);
Template st = group.getInstanceOf("a");
-            st.render();
+            st.Render();
string result = errors.ToString();
string expecting = "g.stg 3:3: template a doesn't have a region called q" + newline;
Assert.AreEqual(expecting, result);
@@ -283,7 +283,7 @@ namespace Antlr4.Test.StringTemplate
subGroup.importTemplates(group);

Template st = subGroup.getInstanceOf("a");
-            string result = st.render();
+            string result = st.Render();
string expecting = "XABY";
Assert.AreEqual(expecting, result);
}
diff --git a/Antlr4.Test.StringTemplate/TestRenderers.cs b/Antlr4.Test.StringTemplate/TestRenderers.cs
index d0ddf46..1de26f4 100644
--- a/Antlr4.Test.StringTemplate/TestRenderers.cs
+++ b/Antlr4.Test.StringTemplate/TestRenderers.cs
@@ -36,6 +36,7 @@ namespace Antlr4.Test.StringTemplate
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CultureInfo = System.Globalization.CultureInfo;
using System.Collections.Generic;
+    using Path = System.IO.Path;

[TestClass]
public class TestRenderers : BaseTest
@@ -141,12 +142,12 @@ namespace Antlr4.Test.StringTemplate
"foo(x) ::= << <x; format=\"{0,6}\"> >>\n";

writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.registerRenderer(typeof(string), new StringRenderer());
Template st = group.getInstanceOf("foo");
-            st.add("x", "hi");
+            st.Add("x", "hi");
string expecting = "     hi ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -159,11 +160,11 @@ namespace Antlr4.Test.StringTemplate
group.registerRenderer(typeof(string), new StringRenderer());
Template st = new Template(template);
st.groupThatCreatedThisInstance = group;
-            st.add("names", "ter");
-            st.add("names", "tom");
-            st.add("names", "sriram");
+            st.Add("names", "ter");
+            st.Add("names", "tom");
+            st.Add("names", "sriram");
string expecting = "The names: TERTOMSRIRAM";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -176,11 +177,11 @@ namespace Antlr4.Test.StringTemplate
group.registerRenderer(typeof(string), new StringRenderer());
Template st = new Template(template);
st.groupThatCreatedThisInstance = group;
-            st.add("names", "ter");
-            st.add("names", "tom");
-            st.add("names", "sriram");
+            st.Add("names", "ter");
+            st.Add("names", "tom");
+            st.Add("names", "sriram");
string expecting = "The names: TER and TOM and SRIRAM";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -197,9 +198,9 @@ namespace Antlr4.Test.StringTemplate
names.Add("ter");
names.Add(null);
names.Add("sriram");
-            st.add("names", names);
+            st.Add("names", names);
string expecting = "The names: TER and N/A and SRIRAM";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -214,10 +215,10 @@ namespace Antlr4.Test.StringTemplate
group.registerRenderer(typeof(int), new NumberRenderer());
group.registerRenderer(typeof(double), new NumberRenderer());
Template st = group.getInstanceOf("foo");
-            st.add("x", -2100);
-            st.add("y", 3.14159);
+            st.Add("x", -2100);
+            st.Add("y", 3.14159);
string expecting = " -2100 3.142 ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -231,11 +232,11 @@ namespace Antlr4.Test.StringTemplate
group.registerRenderer(typeof(int), new NumberRenderer());
group.registerRenderer(typeof(double), new NumberRenderer());
Template st = group.getInstanceOf("numberThing");
-            st.add("x", -2100);
-            st.add("y", 3.14159);
-            st.add("z", "hi");
+            st.Add("x", -2100);
+            st.Add("y", 3.14159);
+            st.Add("z", "hi");
string expecting = "numbers: -2100, 3.14159; hi";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expecting, result);
}

@@ -250,11 +251,11 @@ namespace Antlr4.Test.StringTemplate
group.registerRenderer(typeof(int), new NumberRenderer());
group.registerRenderer(typeof(double), new NumberRenderer());
Template st = group.getInstanceOf("foo");
-            st.add("x", -2100);
-            st.add("y", 3.14159);
+            st.Add("x", -2100);
+            st.Add("y", 3.14159);
// Polish uses '?' (ASCII 160) for ',' and ',' for '.'
string expecting = " -2?100 3,142 "; // ?-            string result = st.render(new CultureInfo("pl"));
+            string result = st.Render(new CultureInfo("pl"));
Assert.AreEqual(expecting, result);
}
}
diff --git a/Antlr4.Test.StringTemplate/TestScopes.cs b/Antlr4.Test.StringTemplate/TestScopes.cs
index 4619a62..e66e9ae 100644
--- a/Antlr4.Test.StringTemplate/TestScopes.cs
+++ b/Antlr4.Test.StringTemplate/TestScopes.cs
@@ -50,9 +50,9 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
Template st = group.getInstanceOf("t");
-            st.add("x", "x");
-            st.add("y", "y");
-            string result = st.render();
+            st.Add("x", "x");
+            st.Add("y", "y");
+            string result = st.Render();

string expectedError = "";
Assert.AreEqual(expectedError, errors.ToString());
@@ -72,7 +72,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
Template st = group.getInstanceOf("t");
-            string result = st.render();
+            string result = st.Render();

string expectedError = "context [t] 1:1 passed 0 arg(s) to template u with 1 declared arg(s)" + newline;
Assert.AreEqual(expectedError, errors.ToString());
@@ -88,7 +88,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
Template st = group.getInstanceOf("t");
-            string result = st.render();
+            string result = st.Render();

string expectedError = "context [t] 1:1 attribute x isn't defined" + newline;
Assert.AreEqual(expectedError, errors.ToString());
@@ -105,9 +105,9 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
Template st = group.getInstanceOf("t");
-            st.add("x", "x");
-            st.add("y", "y");
-            string result = st.render();
+            st.Add("x", "x");
+            st.Add("y", "y");
+            string result = st.Render();

string expectedError = "";
Assert.AreEqual(expectedError, errors.ToString());
@@ -128,8 +128,8 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
group.setListener(errors);
Template st = group.getInstanceOf("t");
-            st.add("names", "Ter");
-            string result = st.render();
+            st.Add("names", "Ter");
+            string result = st.Render();
group.getInstanceOf("u").impl.dump();

string expectedError = "t.stg 2:11: attribute i isn't defined" + newline;
diff --git a/Antlr4.Test.StringTemplate/TestSubtemplates.cs b/Antlr4.Test.StringTemplate/TestSubtemplates.cs
index 8191591..a83ec7a 100644
--- a/Antlr4.Test.StringTemplate/TestSubtemplates.cs
+++ b/Antlr4.Test.StringTemplate/TestSubtemplates.cs
@@ -46,11 +46,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "names", "<names:{n|<n>}>!");
Template st = group.getInstanceOf("test");
-            st.add("names", "Ter");
-            st.add("names", "Tom");
-            st.add("names", "Sumana");
+            st.Add("names", "Ter");
+            st.Add("names", "Tom");
+            st.Add("names", "Sumana");
string expected = "TerTomSumana!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -64,9 +64,9 @@ namespace Antlr4.Test.StringTemplate
emails["parrt"] = "Ter";
emails["tombu"] = "Tom";
emails["dmose"] = "Dan";
-            st.add("emails", emails);
+            st.Add("emails", emails);
string expected = "parrttombudmose!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -76,11 +76,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "names", "<names:{n | <n>}>!");
Template st = group.getInstanceOf("test");
-            st.add("names", "Ter");
-            st.add("names", "Tom");
-            st.add("names", "Sumana");
+            st.Add("names", "Ter");
+            st.Add("names", "Tom");
+            st.Add("names", "Sumana");
string expected = "TerTomSumana!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -90,11 +90,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "users", "<users:{u | <u.id:{id | <id>=}><u.name>}>!");
Template st = group.getInstanceOf("test");
-            st.add("users", new TestCoreBasics.User(1, "parrt"));
-            st.add("users", new TestCoreBasics.User(2, "tombu"));
-            st.add("users", new TestCoreBasics.User(3, "sri"));
+            st.Add("users", new TestCoreBasics.User(1, "parrt"));
+            st.Add("users", new TestCoreBasics.User(2, "tombu"));
+            st.Add("users", new TestCoreBasics.User(3, "sri"));
string expected = "1=parrt2=tombu3=sri!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -104,14 +104,14 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<names,phones,salaries:{n,p,s | <n>@<p>: <s>\n}>"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("phones", "1");
-            e.add("phones", "2");
-            e.add("salaries", "big");
-            e.add("salaries", "huge");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
+            e.Add("salaries", "big");
+            e.Add("salaries", "huge");
string expecting = "Ter@1: big" + newline + "Tom@2: huge" + newline;
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -120,17 +120,17 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<names,phones,salaries:{n,p,s | <n>@<p>: <s>\n}>"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("names", "Sriram");
-            e.add("phones", new List<string>() { "1", null, "3" });
-            e.add("salaries", "big");
-            e.add("salaries", "huge");
-            e.add("salaries", "enormous");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("names", "Sriram");
+            e.Add("phones", new List<string>() { "1", null, "3" });
+            e.Add("salaries", "big");
+            e.Add("salaries", "huge");
+            e.Add("salaries", "enormous");
string expecting = "Ter@1: big" + newline +
"Tom@: huge" + newline +
"Sriram@3: enormous" + newline;
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -139,16 +139,16 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<names,phones,salaries:{n,p,s | <i0>. <n>@<p>: <s>\n}>"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("phones", "1");
-            e.add("phones", "2");
-            e.add("salaries", "big");
-            e.add("salaries", "huge");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
+            e.Add("salaries", "big");
+            e.Add("salaries", "huge");
string expecting =
"0. Ter@1: big" + newline +
"1. Tom@2: huge" + newline;
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -157,14 +157,14 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<names,phones,salaries:{n,p,s | <n>@<p>: <s>}; separator=\", \">"
);
-            e.add("names", "Ter");
-            e.add("names", "Tom");
-            e.add("names", "Sriram");
-            e.add("phones", "1");
-            e.add("phones", "2");
-            e.add("salaries", "big");
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("names", "Sriram");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
+            e.Add("salaries", "big");
string expecting = "Ter@1: big, Tom@2: , Sriram@: ";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -173,11 +173,11 @@ namespace Antlr4.Test.StringTemplate
Template e = new Template(
"<names,phones,salaries:{n,p,s | <n>@<p>: <s>}; separator=\", \">"
);
-            e.add("names", "Ter");
-            e.add("phones", "1");
-            e.add("salaries", "big");
+            e.Add("names", "Ter");
+            e.Add("phones", "1");
+            e.Add("salaries", "big");
string expecting = "Ter@1: big";
-            Assert.AreEqual(expecting, e.render());
+            Assert.AreEqual(expecting, e.Render());
}

[TestMethod]
@@ -191,14 +191,14 @@ namespace Antlr4.Test.StringTemplate

TemplateGroup group = new TemplateGroupFile(tmpdir + "/g.stg");
Template p = group.getInstanceOf("page");
-            p.add("names", "Ter");
-            p.add("names", "Tom");
-            p.add("names", "Sriram");
-            p.add("phones", "1");
-            p.add("phones", "2");
-            p.add("salaries", "big");
+            p.Add("names", "Ter");
+            p.Add("names", "Tom");
+            p.Add("names", "Sriram");
+            p.Add("phones", "1");
+            p.Add("phones", "2");
+            p.Add("salaries", "big");
string expecting = " Ter@1: big, Tom@2: n/a, Sriram@n/a: n/a ";
-            Assert.AreEqual(expecting, p.render());
+            Assert.AreEqual(expecting, p.Render());
}

[TestMethod]
@@ -210,15 +210,15 @@ namespace Antlr4.Test.StringTemplate
innerGroup.defineTemplate("test", "m", "<m:samegroup()>");
innerGroup.defineTemplate("samegroup", "x", "hi ");
Template st = innerGroup.getInstanceOf("test");
-            st.add("m", new int[] { 1, 2, 3 });
+            st.Add("m", new int[] { 1, 2, 3 });

TemplateGroup outerGroup = new TemplateGroup();
outerGroup.defineTemplate("errorMessage", "x", "<x>");
Template outerST = outerGroup.getInstanceOf("errorMessage");
-            outerST.add("x", st);
+            outerST.Add("x", st);

string expected = "hi hi hi ";
-            string result = outerST.render();
+            string result = outerST.Render();

Assert.AreEqual(errors.Errors.Count, 0); // ignores no such prop errors

@@ -234,15 +234,15 @@ namespace Antlr4.Test.StringTemplate
innerGroup.defineTemplate("test", "m", "<m:samegroup()>");
innerGroup.defineTemplate("samegroup", "x", "hi ");
Template st = innerGroup.getInstanceOf("test");
-            st.add("m", 10);
+            st.Add("m", 10);

TemplateGroup outerGroup = new TemplateGroup();
outerGroup.defineTemplate("errorMessage", "x", "<x>");
Template outerST = outerGroup.getInstanceOf("errorMessage");
-            outerST.add("x", st);
+            outerST.Add("x", st);

string expected = "hi ";
-            string result = outerST.render();
+            string result = outerST.Render();

Assert.AreEqual(errors.Errors.Count, 0); // ignores no such prop errors

@@ -263,10 +263,10 @@ namespace Antlr4.Test.StringTemplate
outerGroup.defineTemplate("errorMessage", "x", "<x>");
outerGroup.defineTemplate("bob", "outer"); // should not be visible to test() in innerGroup
Template outerST = outerGroup.getInstanceOf("errorMessage");
-            outerST.add("x", st);
+            outerST.Add("x", st);

string expected = "inner";
-            string result = outerST.render();
+            string result = outerST.Render();

Assert.AreEqual(errors.Errors.Count, 0); // ignores no such prop errors

diff --git a/Antlr4.Test.StringTemplate/TestVisualizer.cs b/Antlr4.Test.StringTemplate/TestVisualizer.cs
index 70bbb46..757ad00 100644
--- a/Antlr4.Test.StringTemplate/TestVisualizer.cs
+++ b/Antlr4.Test.StringTemplate/TestVisualizer.cs
@@ -67,26 +67,26 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup.debug = true;
DebugST st = (DebugST)group.getInstanceOf("method");
st.impl.dump();
-            st.add("type", "float");
-            st.add("name", "foo");
-            st.add("locals", 3);
-            st.add("args", new String[] { "x", "y", "z" });
+            st.Add("type", "float");
+            st.Add("name", "foo");
+            st.Add("locals", 3);
+            st.Add("args", new String[] { "x", "y", "z" });
Template s1 = group.getInstanceOf("assign");
Template paren = group.getInstanceOf("paren");
-            paren.add("x", "x");
-            s1.add("a", paren);
-            s1.add("b", "y");
+            paren.Add("x", "x");
+            s1.Add("a", paren);
+            s1.Add("b", "y");
Template s2 = group.getInstanceOf("assign");
-            s2.add("a", "y");
-            s2.add("b", "z");
+            s2.Add("a", "y");
+            s2.Add("b", "z");
Template s3 = group.getInstanceOf("return");
-            s3.add("x", "3.14159");
-            st.add("stats", s1);
-            st.add("stats", s2);
-            st.add("stats", s3);
+            s3.Add("x", "3.14159");
+            st.Add("stats", s1);
+            st.Add("stats", s2);
+            st.Add("stats", s3);

Inspect(st);
-            //st.render();
+            //st.Render();
}

private void Inspect(DebugST template)
@@ -107,7 +107,7 @@ namespace Antlr4.Test.StringTemplate
ITemplateWriter wr = new AutoIndentWriter(@out);
wr.setLineWidth(lineWidth);
Interpreter interp = new Interpreter(template.groupThatCreatedThisInstance, culture);
-            interp.Execute(wr, template); // render and track events
+            interp.Execute(wr, template); // Render and track events
TemplateVisualizer visualizer = new TemplateVisualizer(errorManager, template, @out.ToString(), interp, interp.getExecutionTrace(), errors.Errors);
visualizer.Show();
}
diff --git a/Antlr4.Test.StringTemplate/TestWhitespace.cs b/Antlr4.Test.StringTemplate/TestWhitespace.cs
index 0fe8d58..5efe895 100644
--- a/Antlr4.Test.StringTemplate/TestWhitespace.cs
+++ b/Antlr4.Test.StringTemplate/TestWhitespace.cs
@@ -46,11 +46,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "names", "<names:{n | <n>}>!");
Template st = group.getInstanceOf("test");
-            st.add("names", "Ter");
-            st.add("names", "Tom");
-            st.add("names", "Sumana");
+            st.Add("names", "Ter");
+            st.Add("names", "Tom");
+            st.Add("names", "Sumana");
string expected = "TerTomSumana!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -62,7 +62,7 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("foo", "x", "<x>");
Template st = group.getInstanceOf("test");
string expected = "[ foo ]";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -72,11 +72,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "names", "<names:{x|  foo }>");
Template st = group.getInstanceOf("test");
-            st.add("names", "Ter");
-            st.add("names", "Tom");
-            st.add("names", "Sumana");
+            st.Add("names", "Ter");
+            st.Add("names", "Tom");
+            st.Add("names", "Sumana");
string expected = " foo  foo  foo ";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -86,11 +86,11 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroup();
group.defineTemplate("test", "names", "<names:{n |  <n> }>!");
Template st = group.getInstanceOf("test");
-            st.add("names", "Ter");
-            st.add("names", "Tom");
-            st.add("names", "Sumana");
+            st.Add("names", "Ter");
+            st.Add("names", "Tom");
+            st.Add("names", "Sumana");
string expected = " Ter  Tom  Sumana !";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -101,11 +101,11 @@ namespace Antlr4.Test.StringTemplate
group.defineTemplate("test", "names", "<names:{n |\n" +
"<n>}>!");
Template st = group.getInstanceOf("test");
-            st.add("names", "Ter");
-            st.add("names", "Tom");
-            st.add("names", "Sumana");
+            st.Add("names", "Ter");
+            st.Add("names", "Tom");
+            st.Add("names", "Sumana");
string expected = "TerTomSumana!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -117,11 +117,11 @@ namespace Antlr4.Test.StringTemplate
"<n>\n" +
"}>!");
Template st = group.getInstanceOf("test");
-            st.add("names", "Ter");
-            st.add("names", "Tom");
-            st.add("names", "Sumana");
+            st.Add("names", "Ter");
+            st.Add("names", "Tom");
+            st.Add("names", "Sumana");
string expected = "Ter" + newline + "Tom" + newline + "Sumana" + newline + "!";
-            string result = st.render();
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

@@ -134,15 +134,15 @@ namespace Antlr4.Test.StringTemplate
"    <n>\n" +
"  }>!");
Template st = group.getInstanceOf("test");
-            st.add("names", "Ter");
-            st.add("names", "Tom");
-            st.add("names", "Sumana");
+            st.Add("names", "Ter");
+            st.Add("names", "Tom");
+            st.Add("names", "Sumana");
string expected =
"    Ter" + newline +
"    Tom" + newline +
"    Sumana" + newline +
"!";
-            string result = st.render();
+            string result = st.Render();
st.impl.dump();
Assert.AreEqual(expected, result);
}
@@ -154,7 +154,7 @@ namespace Antlr4.Test.StringTemplate
"<users>\n" +
"end\n");
string expecting = "end" + newline;
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -166,7 +166,7 @@ namespace Antlr4.Test.StringTemplate
"    \n" +
"end\n");
string expecting = "begin" + newline + newline + "end" + newline;
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -178,7 +178,7 @@ namespace Antlr4.Test.StringTemplate
"\n" +
"end\n");
string expecting = "begin" + newline + newline + "end" + newline;
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -192,7 +192,7 @@ namespace Antlr4.Test.StringTemplate
"<users>\n" +
"end\n");
string expecting = "begin" + Environment.NewLine + "end" + newline;
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -206,7 +206,7 @@ namespace Antlr4.Test.StringTemplate
"	<users>\n" +
"end\n");
string expecting = "begin" + newline + "end" + newline;
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -219,7 +219,7 @@ namespace Antlr4.Test.StringTemplate
"	<users><users>\n" +
"end\n");
string expecting = "begin" + newline + "end" + newline;
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -231,7 +231,7 @@ namespace Antlr4.Test.StringTemplate
"<if(x)><endif>\n" +
"end\n");
string expecting = "begin" + newline + "end" + newline;
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -243,7 +243,7 @@ namespace Antlr4.Test.StringTemplate
"    <if(x)><endif>\n" +
"end\n");
string expecting = "begin" + newline + "end" + newline;
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -255,7 +255,7 @@ namespace Antlr4.Test.StringTemplate
"<if(users)><else><endif>\n" +
"end\n");
string expecting = "begin" + newline + "end" + newline;
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -271,7 +271,7 @@ namespace Antlr4.Test.StringTemplate
"<endif>\n" +
"end\n");
string expecting = "begin" + newline + "bar" + newline + "end" + newline;
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -288,9 +288,9 @@ namespace Antlr4.Test.StringTemplate
"<endif>\n" +
"<endif>\n" +
"end\n");
-            t.add("x", "x");
+            t.Add("x", "x");
string expecting = "begin" + newline + "bar" + newline + "end" + newline;
-            string result = t.render();
+            string result = t.Render();
Assert.AreEqual(expecting, result);
}

@@ -302,7 +302,7 @@ namespace Antlr4.Test.StringTemplate
"  \t  bar" + newline
);
StringWriter sw = new StringWriter();
-            st.write(new AutoIndentWriter(sw, "\n")); // force \n as newline
+            st.Write(new AutoIndentWriter(sw, "\n")); // force \n as newline
string result = sw.ToString();
string expecting = "Foo bar\n";     // expect \n in output
Assert.AreEqual(expecting, result);
@@ -316,7 +316,7 @@ namespace Antlr4.Test.StringTemplate
"  \t  bar" + newline
);
StringWriter sw = new StringWriter();
-            st.write(new AutoIndentWriter(sw, "\n")); // force \n as newline
+            st.Write(new AutoIndentWriter(sw, "\n")); // force \n as newline
string result = sw.ToString();
string expecting = "Foo bar\n";
Assert.AreEqual(expecting, result);
@@ -330,7 +330,7 @@ namespace Antlr4.Test.StringTemplate
"bar\n"
);
StringWriter sw = new StringWriter();
-            st.write(new AutoIndentWriter(sw, "\n")); // force \n as newline
+            st.Write(new AutoIndentWriter(sw, "\n")); // force \n as newline
string result = sw.ToString();
string expecting = "Foo bar\n";
Assert.AreEqual(expecting, result);
@@ -344,7 +344,7 @@ namespace Antlr4.Test.StringTemplate
"Bar\n"
);
StringWriter sw = new StringWriter();
-            st.write(new AutoIndentWriter(sw, "\n")); // force \n as newline
+            st.Write(new AutoIndentWriter(sw, "\n")); // force \n as newline
string result = sw.ToString();
string expecting = "Foo\nBar\n";     // expect \n in output
Assert.AreEqual(expecting, result);
@@ -358,7 +358,7 @@ namespace Antlr4.Test.StringTemplate
"Bar\n"
);
StringWriter sw = new StringWriter();
-            st.write(new AutoIndentWriter(sw, "\r\n")); // force \r\n as newline
+            st.Write(new AutoIndentWriter(sw, "\r\n")); // force \r\n as newline
string result = sw.ToString();
string expecting = "Foo\r\nBar\r\n";     // expect \r\n in output
Assert.AreEqual(expecting, result);
@@ -371,9 +371,9 @@ namespace Antlr4.Test.StringTemplate
"Foo\r\n" +
"<name>\n"
);
-            st.add("name", "a\nb\r\nc");
+            st.Add("name", "a\nb\r\nc");
StringWriter sw = new StringWriter();
-            st.write(new AutoIndentWriter(sw, "\n")); // force \n as newline
+            st.Write(new AutoIndentWriter(sw, "\n")); // force \n as newline
string result = sw.ToString();
string expecting = "Foo\na\nb\nc\n";     // expect \n in output
Assert.AreEqual(expecting, result);

