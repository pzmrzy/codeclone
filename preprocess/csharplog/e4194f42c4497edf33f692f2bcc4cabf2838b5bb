commit e4194f42c4497edf33f692f2bcc4cabf2838b5bb
Author:     Sam Harwell <sam@tunnelvisionlabs.com>
AuthorDate: Fri Aug 9 23:42:33 2013 -0500
Commit:     Sam Harwell <sam@tunnelvisionlabs.com>
CommitDate: Fri Aug 9 23:56:54 2013 -0500

Fix support for static methods, properties, and fields (fixes #13)

diff --git a/Antlr4.StringTemplate/Misc/ObjectModelAdaptor.cs b/Antlr4.StringTemplate/Misc/ObjectModelAdaptor.cs
index f55c509..b00d906 100644
--- a/Antlr4.StringTemplate/Misc/ObjectModelAdaptor.cs
+++ b/Antlr4.StringTemplate/Misc/ObjectModelAdaptor.cs
@@ -174,11 +174,10 @@ namespace Antlr4.StringTemplate.Misc
private static System.Func<object, object> BuildAccessor(MethodInfo method)
{
ParameterExpression obj = Expression.Parameter(typeof(object), "obj");
+            UnaryExpression instance = !method.IsStatic ? Expression.Convert(obj, method.DeclaringType) : null;
Expression<System.Func<object, object>> expr = Expression.Lambda<System.Func<object, object>>(
Expression.Convert(
-                    Expression.Call(
-                        Expression.Convert(obj, method.DeclaringType),
-                        method),
+                    Expression.Call(instance, method),
typeof(object)),
obj);

@@ -191,12 +190,10 @@ namespace Antlr4.StringTemplate.Misc
private static System.Func<object, object> BuildAccessor(MethodInfo method, string argument)
{
ParameterExpression obj = Expression.Parameter(typeof(object), "obj");
+            UnaryExpression instance = !method.IsStatic ? Expression.Convert(obj, method.DeclaringType) : null;
Expression<System.Func<object, object>> expr = Expression.Lambda<System.Func<object, object>>(
Expression.Convert(
-                    Expression.Call(
-                        Expression.Convert(obj, method.DeclaringType),
-                        method,
-                        Expression.Constant(argument)),
+                    Expression.Call(instance, method, Expression.Constant(argument)),
typeof(object)),
obj);

@@ -206,11 +203,10 @@ namespace Antlr4.StringTemplate.Misc
private static System.Func<object, object> BuildAccessor(FieldInfo field)
{
ParameterExpression obj = Expression.Parameter(typeof(object), "obj");
+            UnaryExpression instance = !field.IsStatic ? Expression.Convert(obj, field.DeclaringType) : null;
Expression<System.Func<object, object>> expr = Expression.Lambda<System.Func<object, object>>(
Expression.Convert(
-                    Expression.Field(
-                        Expression.Convert(obj, field.DeclaringType),
-                        field),
+                    Expression.Field(instance, field),
typeof(object)),
obj);

diff --git a/Antlr4.Test.StringTemplate/BaseTest.cs b/Antlr4.Test.StringTemplate/BaseTest.cs
index b16f1f1..af35420 100644
--- a/Antlr4.Test.StringTemplate/BaseTest.cs
+++ b/Antlr4.Test.StringTemplate/BaseTest.cs
@@ -142,6 +142,7 @@ namespace Antlr4.Test.StringTemplate
{
public int id;
public string name;
+            public static string StaticField = "field_value";

public User(int id, string name)
{
@@ -172,6 +173,19 @@ namespace Antlr4.Test.StringTemplate
return name;
}
}
+
+            public static string GetStaticMethod()
+            {
+                return "method_result";
+            }
+
+            public static string StaticProperty
+            {
+                get
+                {
+                    return "property_result";
+                }
+            }
}

public class HashableUser : User
diff --git a/Antlr4.Test.StringTemplate/TestCoreBasics.cs b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
index 04bde44..225c6fd 100644
--- a/Antlr4.Test.StringTemplate/TestCoreBasics.cs
+++ b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
@@ -210,6 +210,42 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

+        [TestMethod]
+        [TestCategory(TestCategories.ST4)]
+        public void TestStaticMethod()
+        {
+            string template = "<t.StaticMethod>";
+            Template st = new Template(template);
+            st.Add("t", new User(32, "Ter"));
+            string expected = "method_result";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        [TestCategory(TestCategories.ST4)]
+        public void TestStaticProperty()
+        {
+            string template = "<t.StaticProperty>";
+            Template st = new Template(template);
+            st.Add("t", new User(32, "Ter"));
+            string expected = "property_result";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        [TestCategory(TestCategories.ST4)]
+        public void TestStaticField()
+        {
+            string template = "<t.StaticField>";
+            Template st = new Template(template);
+            st.Add("t", new User(32, "Ter"));
+            string expected = "field_value";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
[TestMethod][TestCategory(TestCategories.ST4)]
public void TestNullAttrProp()
{

