commit 15ab0921c6f692923d655308d5a56b1872237375
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Thu Dec 10 20:59:22 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Thu Dec 10 20:59:22 2009 -0800

C# Port:
* Merge CL6347

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6477]

diff --git a/Antlr3.Test/Antlr3.Test.csproj b/Antlr3.Test/Antlr3.Test.csproj
index 0797975..b7e26eb 100644
--- a/Antlr3.Test/Antlr3.Test.csproj
+++ b/Antlr3.Test/Antlr3.Test.csproj
@@ -60,6 +60,7 @@
<Compile Include="ST4\TestLists.cs" />
<Compile Include="ST4\TestNullAndEmptyValues.cs" />
<Compile Include="ST4\TestOptions.cs" />
+    <Compile Include="ST4\TestRenderers.cs" />
<Compile Include="ST4\TestSubtemplates.cs" />
<Compile Include="ST4\TestSyntaxErrors.cs" />
<Compile Include="ST4\TestWhitespace.cs" />
diff --git a/Antlr3.Test/ST4/TestRenderers.cs b/Antlr3.Test/ST4/TestRenderers.cs
new file mode 100644
index 0000000..e21a357
--- /dev/null
+++ b/Antlr3.Test/ST4/TestRenderers.cs
@@ -0,0 +1,184 @@
+ï»¿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2005-2008 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2008-2009 Sam Harwell
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace AntlrUnitTests.ST4
+{
+    using Microsoft.VisualStudio.TestTools.UnitTesting;
+    using StringTemplate;
+    using ArrayList = System.Collections.ArrayList;
+    using DateTime = System.DateTime;
+    using IList = System.Collections.IList;
+
+    [TestClass]
+    public class TestRenderers : StringTemplateTestBase
+    {
+        public class DateRenderer : IAttributeRenderer
+        {
+            public string ToString(object o)
+            {
+                DateTime dateTime = (DateTime)o;
+                return dateTime.ToString("yyyy.MM.dd");
+            }
+
+            public string ToString(object o, string formatString)
+            {
+                return ToString(o);
+            }
+        }
+
+        public class DateRenderer2 : IAttributeRenderer
+        {
+            public string ToString(object o)
+            {
+                DateTime dateTime = (DateTime)o;
+                return dateTime.ToString("yyyy/MM/dd");
+            }
+
+            public string ToString(object o, string formatString)
+            {
+                return ToString(o);
+            }
+        }
+
+        public class DateRenderer3 : IAttributeRenderer
+        {
+            public string ToString(object o)
+            {
+                DateTime dateTime = (DateTime)o;
+                return dateTime.ToString("yyyy/MM/dd");
+            }
+
+            public string ToString(object o, string formatString)
+            {
+                DateTime dateTime = (DateTime)o;
+                return dateTime.ToString(formatString);
+            }
+        }
+
+        public class StringRenderer : IAttributeRenderer
+        {
+            public string ToString(object o)
+            {
+                return (string)o;
+            }
+
+            public string ToString(object o, string formatString)
+            {
+                if (formatString.Equals("upper"))
+                {
+                    return ((string)o).ToUpperInvariant();
+                }
+                return ToString(o);
+            }
+        }
+
+        [TestMethod]
+        public void TestRendererForGroup()
+        {
+            string templates =
+                    "dateThing(created) ::= \"date: <created>\"\n";
+            WriteFile(tmpdir, "t.stg", templates);
+            TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
+            group.RegisterRenderer(typeof(DateTime), new DateRenderer());
+            Template st = group.GetInstanceOf("dateThing");
+            st.Add("created", new DateTime(2005, 7, 5));
+            string expecting = "date: 2005.07.05";
+            string result = st.Render();
+            Assert.AreEqual(expecting, result);
+        }
+
+        [TestMethod]
+        public void TestRendererWithFormat()
+        {
+            string templates =
+                    "dateThing(created) ::= << date: <created; format=\"yyyy.MM.dd\"> >>\n";
+            WriteFile(tmpdir, "t.stg", templates);
+            TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
+            group.RegisterRenderer(typeof(DateTime), new DateRenderer3());
+            Template st = group.GetInstanceOf("dateThing");
+            st.Add("created", new DateTime(2005, 7, 5));
+            string expecting = " date: 2005.07.05 ";
+            string result = st.Render();
+            Assert.AreEqual(expecting, result);
+        }
+
+        [TestMethod]
+        public void TestRendererWithFormatAndList()
+        {
+            string template =
+                    "The names: <names; format=\"upper\">";
+            TemplateGroup group = new TemplateGroup();
+            group.RegisterRenderer(typeof(string), new StringRenderer());
+            Template st = new Template(group, template);
+            st.Add("names", "ter");
+            st.Add("names", "tom");
+            st.Add("names", "sriram");
+            string expecting = "The names: TERTOMSRIRAM";
+            string result = st.Render();
+            Assert.AreEqual(expecting, result);
+        }
+
+        [TestMethod]
+        public void TestRendererWithFormatAndSeparator()
+        {
+            string template =
+                    "The names: <names; separator=\" and \", format=\"upper\">";
+            TemplateGroup group = new TemplateGroup();
+            group.RegisterRenderer(typeof(string), new StringRenderer());
+            Template st = new Template(group, template);
+            st.Add("names", "ter");
+            st.Add("names", "tom");
+            st.Add("names", "sriram");
+            string expecting = "The names: TER and TOM and SRIRAM";
+            string result = st.Render();
+            Assert.AreEqual(expecting, result);
+        }
+
+        [TestMethod]
+        public void TestRendererWithFormatAndSeparatorAndNull()
+        {
+            string template =
+                    "The names: <names; separator=\" and \", null=\"n/a\", format=\"upper\">";
+            TemplateGroup group = new TemplateGroup();
+            group.RegisterRenderer(typeof(string), new StringRenderer());
+            Template st = new Template(group, template);
+            IList names = new ArrayList();
+            names.Add("ter");
+            names.Add(null);
+            names.Add("sriram");
+            st.Add("names", names);
+            string expecting = "The names: TER and N/A and SRIRAM";
+            string result = st.Render();
+            Assert.AreEqual(expecting, result);
+        }
+    }
+}
diff --git a/Antlr3.vsmdi b/Antlr3.vsmdi
index 78d017f..6d9067e 100644
--- a/Antlr3.vsmdi
+++ b/Antlr3.vsmdi
@@ -315,18 +315,18 @@
<TestLink id="08e0d019-b06b-0380-a8b7-e7a0d2997e53" name="TestRefToAnotherTemplateInSameGroup" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d12a6648-2bc5-99df-5126-bd7375cd095b" name="TestAbsoluteTemplateRef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c6270e4e-41cf-69d0-0dd6-ed68cdb24ff4" name="TestSubdir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="6dc4520e-945b-e470-4947-6d60453e7be1" name="testPolymorphicTemplateReference" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b6b3f33a-4c20-63d1-c250-ee552d1b90b7" name="TestImportTemplateInGroupFileFromGroupFile" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="6dc4520e-945b-e470-4947-6d60453e7be1" name="testPolymorphicTemplateReference" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="93ee4343-09bf-86f9-8535-9e18a7e13780" name="TestImportTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c393b543-c4f8-80cf-21ea-682b87b460ec" name="TestGroupFileInDir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="abe7d041-f0a5-435e-7a11-f89e8b4428f2" name="TestGroupWithTwoTemplates" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="fbc52c3e-b252-7a44-8373-828d34f8579f" name="TestSubSubdir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="93ee4343-09bf-86f9-8535-9e18a7e13780" name="TestImportTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="79c131f1-4735-8a9b-7f59-e08ac05fd503" name="TestImportTemplateInDirFromGroupFile" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1b8ffefd-d094-896e-1275-b11bcf4ea1c2" name="TestGroupFileInSubDir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="bad5f17e-eb43-13b5-b03b-c9fb5a41e449" name="TestImportTemplateFromGroupFile" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="48162e6d-8cdc-6ad7-8a8a-9471ed22f7e5" name="TestRefToAnotherTemplateInSameSubdir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="57638d34-22fc-12e3-82f3-8979f1c85ade" name="TestImportTemplateFromSubdir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="61bba200-8549-30e6-977c-6321b41d8827" name="TestImportTemplateInGroupFileFromDir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="1b8ffefd-d094-896e-1275-b11bcf4ea1c2" name="TestGroupFileInSubDir" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
<TestList name="Rewrite templates" id="2dbc20ec-9234-470e-a9b4-82226d3db427" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
@@ -474,6 +474,15 @@
<TestLink id="b787001e-8995-a6c7-5f16-454c6f44f2b3" name="TestListAsTemplateArgument" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
+  <TestList name="Renderers" id="67a2d196-65c0-4971-b559-0e9f67f75ff3" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
+    <TestLinks>
+      <TestLink id="3ffc0e12-5b88-bc34-a25c-b2d6f3224187" name="TestRendererWithFormatAndSeparator" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ea4372e3-c98a-6401-a78d-2fdc9fee4b89" name="TestRendererWithFormatAndSeparatorAndNull" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="7df55a29-26d5-c356-0622-bb9529509a8d" name="TestRendererWithFormat" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="110e4cb5-58da-9909-2cb0-58c8e2cd2120" name="TestRendererForGroup" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="68b63446-2e96-13b1-538e-a41b7651a4e8" name="TestRendererWithFormatAndList" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+    </TestLinks>
+  </TestList>
<TestList name="Null and Empty Values" id="6f9712eb-43ef-4a76-8810-256978946e66" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
<TestLink id="8b6a6d38-1fa2-3748-aec2-783f256e7923" name="TestSeparatorWithTwoNullValuesInRow" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
diff --git a/StringTemplate4/Interpreter.cs b/StringTemplate4/Interpreter.cs
index dde73f7..3f565c1 100644
--- a/StringTemplate4/Interpreter.cs
+++ b/StringTemplate4/Interpreter.cs
@@ -192,7 +192,7 @@ namespace StringTemplate
break;
case Bytecode.INSTR_WRITE:
o = operands[sp--];
-                    nw = WriteObject(@out, self, o, null);
+                    nw = WriteObject(@out, self, o, (string[])null);
n += nw;
break;
case Bytecode.INSTR_WRITE_OPT:
@@ -362,11 +362,11 @@ namespace StringTemplate
{
try
{
-                        n = @out.Write(options[OPTION_NULL]);
+                        n = WritePlainObject(@out, options[OPTION_NULL], options);
}
catch (IOException)
{
-                        Console.Error.WriteLine("can't write " + o);
+                        Console.Error.WriteLine("can't write null option " + options[OPTION_NULL]);
}
}
return n;
@@ -383,7 +383,7 @@ namespace StringTemplate
if (o is Iterator)
n = WriteIterator(@out, self, o, options);
else
-                    n = @out.Write(o.ToString());
+                    n = WritePlainObject(@out, o, options);
}
catch (IOException)
{
@@ -422,6 +422,27 @@ namespace StringTemplate
return n;
}

+        protected int WritePlainObject(ITemplateWriter @out, object o, string[] options)
+        {
+            string formatString = null;
+            if (options != null)
+                formatString = options[OPTION_FORMAT];
+            IAttributeRenderer r = group.GetAttributeRenderer(o.GetType());
+            string v = null;
+            if (r != null)
+            {
+                if (formatString != null)
+                    v = r.ToString(o, formatString);
+                else
+                    v = r.ToString(o);
+            }
+            else
+            {
+                v = o.ToString();
+            }
+            return @out.Write(v);
+        }
+
protected void Map(Template self, object attr, string name)
{
Rot_map(self, attr, new List<string>() { name });
diff --git a/StringTemplate4/TemplateGroup.cs b/StringTemplate4/TemplateGroup.cs
index 531d2f9..aaac3f0 100644
--- a/StringTemplate4/TemplateGroup.cs
+++ b/StringTemplate4/TemplateGroup.cs
@@ -41,6 +41,7 @@ namespace StringTemplate
using Exception = System.Exception;
using Path = System.IO.Path;
using StringBuilder = System.Text.StringBuilder;
+    using Type = System.Type;
using Antlr.Runtime;

public class TemplateGroup
@@ -71,7 +72,7 @@ namespace StringTemplate

public static readonly ITemplateErrorListener DefaultErrorListener = new DefaultErrorListenerImpl();

-        public string fullyQualifiedRootDirName; // if we're root
+        public string fullyQualifiedRootDirName;

/** Load files using what encoding? */
public Encoding encoding;
@@ -96,6 +97,16 @@ namespace StringTemplate
protected internal IDictionary<string, IDictionary<string, object>> dictionaries =
new Dictionary<string, IDictionary<string, object>>();

+        /** A dictionary that allows people to register a renderer for
+         *  a particular kind of object for any template evaluated relative to this
+         *  group.  For example, a date should be formatted differently depending
+         *  on the locale.  You can set Date.class to an object whose
+         *  toString(Object) method properly formats a Date attribute
+         *  according to locale.  Or you can have a different renderer object
+         *  for each locale.
+         */
+        protected IDictionary<Type, IAttributeRenderer> renderers;
+
protected bool alreadyLoaded = false;

/** Where to report errors.  All string templates in this group
@@ -299,6 +310,29 @@ namespace StringTemplate
}
}

+        /** Register a renderer for all objects of a particular type for all
+         *  templates evaluated relative to this group.
+         */
+        public void RegisterRenderer(Type attributeType, IAttributeRenderer r)
+        {
+            if (renderers == null)
+                renderers = new Dictionary<Type, IAttributeRenderer>();
+
+            renderers[attributeType] = r;
+        }
+
+        public IAttributeRenderer GetAttributeRenderer(Type attributeType)
+        {
+            if (renderers == null)
+                return null;
+
+            IAttributeRenderer renderer;
+            if (!renderers.TryGetValue(attributeType, out renderer))
+                return null;
+
+            return renderer;
+        }
+
/// <summary>
/// StringTemplate object factory; each group can have its own.
/// </summary>
diff --git a/StringTemplate4/TemplateGroupFile.cs b/StringTemplate4/TemplateGroupFile.cs
index 366100c..7f0ab8b 100644
--- a/StringTemplate4/TemplateGroupFile.cs
+++ b/StringTemplate4/TemplateGroupFile.cs
@@ -50,7 +50,8 @@ namespace StringTemplate
throw new ArgumentException("Group file names must end in .stg: " + fullyQualifiedFileName);
}

-            this.fullyQualifiedRootDirName = Path.GetFullPath(Path.GetDirectoryName(fullyQualifiedFileName));
+            string absoluteFileName = Path.GetFullPath(fullyQualifiedFileName);
+            this.fullyQualifiedRootDirName = Path.GetDirectoryName(absoluteFileName);
this.fileName = Path.GetFileName(fullyQualifiedFileName);
}


