commit 557c3adbc37a6a3d246b635457bc9439b64454b8
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sat Mar 19 15:55:16 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sat Mar 19 15:55:16 2011 -0800

(C# 3) Merge CL7821

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7869]

diff --git a/Antlr4.StringTemplate/Debug/DebugTemplate.cs b/Antlr4.StringTemplate/Debug/DebugTemplate.cs
index 5ebdc8e..b52377b 100644
--- a/Antlr4.StringTemplate/Debug/DebugTemplate.cs
+++ b/Antlr4.StringTemplate/Debug/DebugTemplate.cs
@@ -81,12 +81,12 @@ namespace Antlr4.StringTemplate.Debug
return new DebugTemplate(this, true, shadowEnclosingInstance);
}

-        public override void Add(string name, object value)
+        public override Template Add(string name, object value)
{
if (groupThatCreatedThisInstance.Debug)
addAttrEvents.Add(name, new AddAttributeEvent(name, value));

-            base.Add(name, value);
+            return base.Add(name, value);
}

// TESTING SUPPORT
diff --git a/Antlr4.StringTemplate/Template.cs b/Antlr4.StringTemplate/Template.cs
index 41b7e82..c46a2c1 100644
--- a/Antlr4.StringTemplate/Template.cs
+++ b/Antlr4.StringTemplate/Template.cs
@@ -193,12 +193,14 @@ namespace Antlr4.StringTemplate
*  This method will never alter a List that you inject.  If you send
*  in a List and then inject a single value element, Add() copies
*  original list and adds the new value.
+         *
+         *  Return self so we can chain.  t.add("x", 1).add("y", "hi");
*/
[MethodImpl(MethodImplOptions.Synchronized)]
-        public virtual void Add(string name, object value)
+        public virtual Template Add(string name, object value)
{
if (name == null)
-                return; // allow null value
+                return this; // allow null value

if (name.IndexOf('.') >= 0)
{
@@ -235,7 +237,7 @@ namespace Antlr4.StringTemplate
{
// new attribute
locals[arg.Index] = value;
-                return;
+                return this;
}

// attribute will be multi-valued for sure now
@@ -255,6 +257,8 @@ namespace Antlr4.StringTemplate
{
multi.Add(value);
}
+
+            return this;
}

/** Remove an attribute value entirely (can't Remove attribute definitions). */
diff --git a/Antlr4.Test.StringTemplate/TestCoreBasics.cs b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
index 4ced521..558fe64 100644
--- a/Antlr4.Test.StringTemplate/TestCoreBasics.cs
+++ b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
@@ -66,6 +66,17 @@ namespace Antlr4.Test.StringTemplate
}

[TestMethod]
+        public void TestChainAttr()
+        {
+            string template = "<x>:<names>!";
+            Template st = new Template(template);
+            st.Add("names", "Ter").Add("names", "Tom").Add("x", 1);
+            string expected = "1:TerTom!";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
public void TestSetUnknownAttr()
{
string templates =

