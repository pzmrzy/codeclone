commit ef1d3146a432f1902412f4c3f56067f992a7e3b9
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Wed Jan 20 13:19:04 2010 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Wed Jan 20 13:19:04 2010 -0800

C# Port:
* Merge CL6435

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6579]

diff --git a/Antlr3.Test/ST4/TestRuntimeErrors.cs b/Antlr3.Test/ST4/TestRuntimeErrors.cs
index e5cfc32..005b69f 100644
--- a/Antlr3.Test/ST4/TestRuntimeErrors.cs
+++ b/Antlr3.Test/ST4/TestRuntimeErrors.cs
@@ -86,7 +86,7 @@ namespace AntlrUnitTests.ST4
STGroup group = new STGroupFile(Path.Combine(tmpdir, "t.stg"));
ST st = group.GetInstanceOf("t");
st.Render();
-            String expected = "no such template: foo in context t" + newline;
+            String expected = "context [t] 1:0 no such template: foo" + newline;
String result = errors.ToString();
Assert.AreEqual(expected, result);
}
@@ -110,7 +110,7 @@ namespace AntlrUnitTests.ST4
group.ImportTemplates(group2);
ST st = group.GetInstanceOf("t");
st.Render();
-            String expected = "no such template: super.t in context t" + newline;
+            String expected = "context [t] 1:1 no such template: super.t" + newline;
String result = errors.ToString();
Assert.AreEqual(expected, result);
}
@@ -186,9 +186,45 @@ namespace AntlrUnitTests.ST4
STGroup group = new STGroupFile(Path.Combine(tmpdir, "t.stg"));
ST st = group.GetInstanceOf("t");
st.Render();
-            string expected = "expecting single arg in template reference u() (not 2) in context t" + newline;
+            string expected = "context [t] 1:3 expecting single arg in template reference u() (not 2 args)" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
}
+
+        [TestMethod]
+        public void TestParallelAttributeIterationWithMismatchArgListSizes()
+        {
+            ErrorBuffer errors = new ErrorBuffer();
+            ErrorManager.ErrorListener = errors;
+            Template e = new Template(
+                    "<names,phones,salaries:{n,p | <n>@<p>}; separator=\", \">"
+                );
+            e.Add("names", "Ter");
+            e.Add("names", "Tom");
+            e.Add("phones", "1");
+            e.Add("phones", "2");
+            e.Add("salaries", "big");
+            e.Render();
+            string errorExpecting = "context [anonymous] 1:1 iterating through 3 arguments but parallel map has 2 formal arguments" + newline;
+            Assert.AreEqual(errorExpecting, errors.ToString());
+            string expecting = "Ter@1, Tom@2";
+            Assert.AreEqual(expecting, e.Render());
+        }
+
+        [TestMethod]
+        public void TestParallelAttributeIterationWithMissingArgs()
+        {
+            ErrorBuffer errors = new ErrorBuffer();
+            ErrorManager.ErrorListener = errors;
+            Template e = new Template(
+                    "<names,phones,salaries:{<n>@<p>}; separator=\", \">"
+                );
+            e.Add("names", "Tom");
+            e.Add("phones", "2");
+            e.Add("salaries", "big");
+            e.Render(); // generate the error
+            string errorExpecting = "context [anonymous] 1:1 missing argument definitions" + newline;
+            Assert.AreEqual(errorExpecting, errors.ToString());
+        }
}
}
diff --git a/Antlr3.Test/ST4/TestSubtemplates.cs b/Antlr3.Test/ST4/TestSubtemplates.cs
index 51012e8..419001b 100644
--- a/Antlr3.Test/ST4/TestSubtemplates.cs
+++ b/Antlr3.Test/ST4/TestSubtemplates.cs
@@ -194,42 +194,6 @@ namespace AntlrUnitTests.ST4
}

[TestMethod]
-        public void TestParallelAttributeIterationWithMismatchArgListSizes()
-        {
-            ErrorBuffer errors = new ErrorBuffer();
-            ErrorManager.ErrorListener = errors;
-            ST e = new ST(
-                    "<names,phones,salaries:{n,p | <n>@<p>}; separator=\", \">"
-                );
-            e.Add("names", "Ter");
-            e.Add("names", "Tom");
-            e.Add("phones", "1");
-            e.Add("phones", "2");
-            e.Add("salaries", "big");
-            e.Render();
-            String errorExpecting = "iterating through 3 arguments but parallel map has 2 formal arguments in context anonymous" + newline;
-            Assert.AreEqual(errorExpecting, errors.ToString());
-            String expecting = "Ter@1, Tom@2";
-            Assert.AreEqual(expecting, e.Render());
-        }
-
-        [TestMethod]
-        public void TestParallelAttributeIterationWithMissingArgs()
-        {
-            ErrorBuffer errors = new ErrorBuffer();
-            ErrorManager.ErrorListener = errors;
-            ST e = new ST(
-                    "<names,phones,salaries:{<n>@<p>}; separator=\", \">"
-                );
-            e.Add("names", "Tom");
-            e.Add("phones", "2");
-            e.Add("salaries", "big");
-            e.Render(); // generate the error
-            String errorExpecting = "missing argument definitions in context anonymous" + newline;
-            Assert.AreEqual(errorExpecting, errors.ToString());
-        }
-
-        [TestMethod]
public void TestParallelAttributeIterationWithDifferentSizesTemplateRefInsideToo()
{
String templates =
diff --git a/Antlr3.vsmdi b/Antlr3.vsmdi
index 7e2c261..38d1de9 100644
--- a/Antlr3.vsmdi
+++ b/Antlr3.vsmdi
@@ -762,12 +762,14 @@
</TestList>
<TestList name="Runtime Errors" id="85574747-5efc-491e-bbfb-7051dc2e7261" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
-      <TestLink id="b57929fb-5d73-8a82-7afe-c98de47b60e7" name="TestMissingEmbeddedTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="ed357d13-e7b2-12a8-d367-2b477f5d4da1" name="TestNoPropertyNotError" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="199270e2-749c-b8ab-24b7-9c7b650dac1f" name="TestSoleArg" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6a517b77-7ea2-da7e-e203-6e9340d38f04" name="TestHiddenPropertyNotError" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="b81f02f0-235c-f927-cba6-4f7ec7cc26c4" name="TestHiddenFieldNotError" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="b57929fb-5d73-8a82-7afe-c98de47b60e7" name="TestMissingEmbeddedTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="d321253b-e20d-2abb-d187-8a1187f2f10f" name="TestParallelAttributeIterationWithMismatchArgListSizes" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e04a252b-ed72-e5b2-a243-751d00c8beeb" name="TestMissingSuperTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="199270e2-749c-b8ab-24b7-9c7b650dac1f" name="TestSoleArg" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="b81f02f0-235c-f927-cba6-4f7ec7cc26c4" name="TestHiddenFieldNotError" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ed357d13-e7b2-12a8-d367-2b477f5d4da1" name="TestNoPropertyNotError" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1933f795-d15c-aebb-1fc1-f6c851a512eb" name="TestParallelAttributeIterationWithMissingArgs" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
<TestList name="Interpreted lexing" id="8863002f-5b85-4a70-b1bf-bf68c57c9fee" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
@@ -1089,19 +1091,17 @@
</TestList>
<TestList name="Subtemplates" id="c068d150-8506-4339-a463-a78bf2ce4e9e" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
-      <TestLink id="98435153-120c-d5f8-c5c3-7c229b17639f" name="Test_it_NotDefinedWithArgSingleValue" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="25ecc632-3ec4-c493-36d3-b270b93765b2" name="TestParallelAttributeIterationWithSingletons" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="e37b3466-3288-275a-1ecf-3cde29206683" name="TestParallelAttributeIterationWithMismatchArgListSizes" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="8c55bd03-7032-f048-2784-e4eb80de5c55" name="TestParallelAttributeIterationWithDifferentSizesTemplateRefInsideToo" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="0b486139-d3ff-8228-19e0-a8fcc54d4007" name="TestParallelAttributeIterationWithMissingArgs" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="e8cbc8aa-efbe-461f-1b88-3f9dc79fb8b9" name="Test_it_NotDefinedWithArg" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="4e9041c6-1ce0-5802-a42c-1b68c5c4925f" name="TestNestedIterationWithArg" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="970648e6-20c1-4cfe-423d-83bd585c7ce6" name="TestParallelAttributeIterationWithNullValue" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="900db937-5cdd-5d73-2d02-05c8eaa7a382" name="TestParallelAttributeIterationHasI" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="57e5b3f6-5e68-3c76-fa1a-1cc002b8a54d" name="TestSimpleIteration" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="ac3832dd-1288-c921-ff33-004b53b05024" name="TestParallelAttributeIteration" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="8c55bd03-7032-f048-2784-e4eb80de5c55" name="TestParallelAttributeIterationWithDifferentSizesTemplateRefInsideToo" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b25c8397-f34d-b0f1-b715-34e915aa4501" name="TestParallelAttributeIterationWithDifferentSizes" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="fe2e15cd-0628-da35-0597-0bba9a39812b" name="TestSimpleIterationWithArg" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="900db937-5cdd-5d73-2d02-05c8eaa7a382" name="TestParallelAttributeIterationHasI" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4e9041c6-1ce0-5802-a42c-1b68c5c4925f" name="TestNestedIterationWithArg" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="98435153-120c-d5f8-c5c3-7c229b17639f" name="Test_it_NotDefinedWithArgSingleValue" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ac3832dd-1288-c921-ff33-004b53b05024" name="TestParallelAttributeIteration" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e8cbc8aa-efbe-461f-1b88-3f9dc79fb8b9" name="Test_it_NotDefinedWithArg" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="25ecc632-3ec4-c493-36d3-b270b93765b2" name="TestParallelAttributeIterationWithSingletons" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="57e5b3f6-5e68-3c76-fa1a-1cc002b8a54d" name="TestSimpleIteration" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
<TestList name="Tree grammar rewrite AST" id="c07b8a15-6914-4452-992f-7741e4abfb96" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
diff --git a/StringTemplate4/Compiler/TemplateParser.g3 b/StringTemplate4/Compiler/TemplateParser.g3
index fbe1885..62515da 100644
--- a/StringTemplate4/Compiler/TemplateParser.g3
+++ b/StringTemplate4/Compiler/TemplateParser.g3
@@ -47,17 +47,18 @@ templateAndEOF
:	template EOF
;

-// TODO: remove backtracking
public
template
:	element*
;

element
-options {backtrack=true; k=2;}
-	:	i=INDENT         {Indent($i.text);}
-		ifOnOneLine      {gen.Emit(Bytecode.INSTR_DEDENT);}
-	|	i=INDENT ifOnMultiLines
+	:	(	// TODO: remove backtracking
+			options {backtrack=true; k=2;}
+		:	i=INDENT         {Indent($i.text);}
+			ifOnOneLine      {gen.Emit(Bytecode.INSTR_DEDENT);}
+		|	i=INDENT ifOnMultiLines
+		)
|	ifOnMultiLines
|	i=INDENT       	 {Indent($i.text);}
exprTag          {gen.Emit(Bytecode.INSTR_DEDENT);}
diff --git a/StringTemplate4/Compiler/TemplateParserHelper.cs b/StringTemplate4/Compiler/TemplateParserHelper.cs
index cb8e21c..47ff50e 100644
--- a/StringTemplate4/Compiler/TemplateParserHelper.cs
+++ b/StringTemplate4/Compiler/TemplateParserHelper.cs
@@ -62,10 +62,6 @@ namespace StringTemplate.Compiler
this.gen = gen;
this._enclosingTemplateName = enclosingTemplateName;
}
-        protected override object RecoverFromMismatchedToken(IIntStream input, int ttype, BitSet follow)
-        {
-            throw new MismatchedTokenException(ttype, input);
-        }

public TemplateName PrefixedName(TemplateName t)
{
@@ -130,6 +126,11 @@ namespace StringTemplate.Compiler
gen.Emit(Bytecode.INSTR_INDENT, indent);
}

+        protected override object RecoverFromMismatchedToken(IIntStream input, int ttype, BitSet follow)
+        {
+            throw new MismatchedTokenException(ttype, input);
+        }
+
/// <summary>
/// used to parse w/o compilation side-effects
/// </summary>
diff --git a/StringTemplate4/Coordinate.cs b/StringTemplate4/Coordinate.cs
new file mode 100644
index 0000000..91e39c8
--- /dev/null
+++ b/StringTemplate4/Coordinate.cs
@@ -0,0 +1,84 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2005-2008 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2008-2009 Sam Harwell
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace StringTemplate
+{
+    public struct Coordinate
+    {
+        public Coordinate(int line, int charPosition)
+            : this()
+        {
+            this.Line = line;
+            this.CharPosition = charPosition;
+        }
+
+        public int Line
+        {
+            get;
+            private set;
+        }
+
+        public int CharPosition
+        {
+            get;
+            private set;
+        }
+
+        public static bool operator ==(Coordinate x, Coordinate y)
+        {
+            return x.Line == y.Line && x.CharPosition == y.CharPosition;
+        }
+
+        public static bool operator !=(Coordinate x, Coordinate y)
+        {
+            return !(x == y);
+        }
+
+        public override bool Equals(object obj)
+        {
+            if (!(obj is Coordinate))
+                return false;
+
+            return this == (Coordinate)obj;
+        }
+
+        public override int GetHashCode()
+        {
+            return Line ^ CharPosition;
+        }
+
+        public override string ToString()
+        {
+            return Line.ToString() + ":" + CharPosition.ToString();
+        }
+    }
+}
diff --git a/StringTemplate4/ErrorManager.cs b/StringTemplate4/ErrorManager.cs
index b736acf..904b7f9 100644
--- a/StringTemplate4/ErrorManager.cs
+++ b/StringTemplate4/ErrorManager.cs
@@ -96,24 +96,24 @@ namespace StringTemplate
ErrorListener.CompileTimeError(new TemplateMessage(error, null, null, arg1, arg2));
}

-        public static void RuntimeError(Template template, ErrorType error)
+        public static void RuntimeError(Template template, int ip, ErrorType error)
{
-            ErrorListener.RuntimeError(new TemplateMessage(error, template));
+            ErrorListener.RuntimeError(new TemplateRuntimeMessage(error, ip, template));
}

-        public static void RuntimeError(Template template, ErrorType error, object arg)
+        public static void RuntimeError(Template template, int ip, ErrorType error, object arg)
{
-            ErrorListener.RuntimeError(new TemplateMessage(error, template, null, arg));
+            ErrorListener.RuntimeError(new TemplateRuntimeMessage(error, ip, template, null, arg));
}

-        public static void RuntimeError(Template template, ErrorType error, Exception source, object arg)
+        public static void RuntimeError(Template template, int ip, ErrorType error, Exception source, object arg)
{
-            ErrorListener.RuntimeError(new TemplateMessage(error, template, source, arg));
+            ErrorListener.RuntimeError(new TemplateRuntimeMessage(error, ip, template, source, arg));
}

-        public static void RuntimeError(Template template, ErrorType error, object arg1, object arg2)
+        public static void RuntimeError(Template template, int ip, ErrorType error, object arg1, object arg2)
{
-            ErrorListener.RuntimeError(new TemplateMessage(error, template, null, arg1, arg2));
+            ErrorListener.RuntimeError(new TemplateRuntimeMessage(error, ip, template, null, arg1, arg2));
}

public static void IOError(Template template, ErrorType error, Exception source)
diff --git a/StringTemplate4/ErrorType.cs b/StringTemplate4/ErrorType.cs
index 2c7130f..162d1e0 100644
--- a/StringTemplate4/ErrorType.cs
+++ b/StringTemplate4/ErrorType.cs
@@ -38,7 +38,7 @@ namespace StringTemplate
public static readonly ErrorType NoSuchTemplate = new ErrorType("no such template: {0}");
public static readonly ErrorType NoImportedTemplate = new ErrorType("no such template: super.{0}");
//public static readonly ErrorType NoSuchProperty = new ErrorType("{0} doesn't have a {1} property");
-        public static readonly ErrorType ExpectingSingleArgument = new ErrorType("expecting single arg in template reference {0} (not {1})");
+        public static readonly ErrorType ExpectingSingleArgument = new ErrorType("expecting single arg in template reference {0} (not {1} args)");
public static readonly ErrorType MissingFormalArguments = new ErrorType("missing argument definitions");
public static readonly ErrorType ArgumentCountMismatch = new ErrorType("iterating through {0} arguments but parallel map has {1} formal arguments");
public static readonly ErrorType ExpectingString = new ErrorType("function {0} expects a string not {1}");
diff --git a/StringTemplate4/Interpreter.cs b/StringTemplate4/Interpreter.cs
index 6470f17..3d8babe 100644
--- a/StringTemplate4/Interpreter.cs
+++ b/StringTemplate4/Interpreter.cs
@@ -76,6 +76,7 @@ namespace StringTemplate
/** Operand stack, grows upwards */
object[] operands = new object[DEFAULT_OPERAND_STACK_SIZE];
int sp = -1;  // stack pointer register
+        int current_ip = 0;
int nw = 0;   // how many char written on this template line so far? ("number written" register)

/** Exec st with respect to this group. Once set in Template.toString(),
@@ -134,6 +135,7 @@ namespace StringTemplate
if (trace)
Trace(self, ip);
short opcode = code[ip];
+                current_ip = ip;
ip++; //jump to next instruction or first byte of operand
switch (opcode)
{
@@ -172,20 +174,20 @@ namespace StringTemplate
nameIndex = GetShort(code, ip);
ip += 2;
name = self.code.strings[nameIndex];
-                    st = group.GetEmbeddedInstanceOf(self, new TemplateName(name));
+                    st = group.GetEmbeddedInstanceOf(self, ip, new TemplateName(name));
if (st == null)
{
-                        ErrorManager.RuntimeError(self, ErrorType.NoSuchTemplate, new TemplateName(name).Name);
+                        ErrorManager.RuntimeError(self, current_ip, ErrorType.NoSuchTemplate, new TemplateName(name).Name);
st = Template.Blank;
}
operands[++sp] = st;
break;
case Bytecode.INSTR_NEW_IND:
name = (string)operands[sp--];
-                    st = group.GetEmbeddedInstanceOf(self, new TemplateName(name));
+                    st = group.GetEmbeddedInstanceOf(self, ip, new TemplateName(name));
if (st == null)
{
-                        ErrorManager.RuntimeError(self, ErrorType.NoSuchTemplate, new TemplateName(name).Name);
+                        ErrorManager.RuntimeError(self, current_ip, ErrorType.NoSuchTemplate, new TemplateName(name).Name);
st = Template.Blank;
}
operands[++sp] = st;
@@ -197,7 +199,7 @@ namespace StringTemplate
CompiledTemplate imported = group.LookupImportedTemplate(new TemplateName(name));
if (imported == null)
{
-                        ErrorManager.RuntimeError(self, ErrorType.NoImportedTemplate, new TemplateName(name).Name);
+                        ErrorManager.RuntimeError(self, current_ip, ErrorType.NoImportedTemplate, new TemplateName(name).Name);
operands[++sp] = Template.Blank;
break;
}
@@ -226,7 +228,7 @@ namespace StringTemplate
}
if (nargs != 1)
{
-                        ErrorManager.RuntimeError(self, ErrorType.ExpectingSingleArgument, st, nargs);
+                        ErrorManager.RuntimeError(self, current_ip, ErrorType.ExpectingSingleArgument, st, nargs);
}
else
{
@@ -330,7 +332,7 @@ namespace StringTemplate
}
else
{
-                        ErrorManager.RuntimeError(self, ErrorType.ExpectingString, "trim", o);
+                        ErrorManager.RuntimeError(self, current_ip, ErrorType.ExpectingString, "trim", o);
operands[++sp] = o;
}
break;
@@ -345,7 +347,7 @@ namespace StringTemplate
}
else
{
-                        ErrorManager.RuntimeError(self, ErrorType.ExpectingString, "strlen", o);
+                        ErrorManager.RuntimeError(self, current_ip, ErrorType.ExpectingString, "strlen", o);
operands[++sp] = 0;
}
break;
@@ -599,7 +601,7 @@ namespace StringTemplate
int templateIndex = ti % templates.Count; // rotate through
ti++;
TemplateName name = templates[templateIndex];
-                    Template st = group.GetEmbeddedInstanceOf(self, name);
+                    Template st = group.GetEmbeddedInstanceOf(self, current_ip, name);
SetSoleArgument(st, iterValue);
st.RawSetAttribute("i0", i0);
st.RawSetAttribute("i", i);
@@ -642,14 +644,14 @@ namespace StringTemplate
var formalArguments = code.formalArguments;
if (formalArguments == null || formalArguments.Count == 0)
{
-                ErrorManager.RuntimeError(self, ErrorType.MissingFormalArguments);
+                ErrorManager.RuntimeError(self, current_ip, ErrorType.MissingFormalArguments);
return null;
}

object[] formalArgumentNames = formalArguments.Keys.ToArray();
if (formalArgumentNames.Length != numAttributes)
{
-                ErrorManager.RuntimeError(self, ErrorType.ArgumentCountMismatch, numAttributes, formalArgumentNames.Length);
+                ErrorManager.RuntimeError(self, current_ip, ErrorType.ArgumentCountMismatch, numAttributes, formalArgumentNames.Length);
// truncate arg list to match smaller size
int shorterSize = Math.Min(formalArgumentNames.Length, numAttributes);
numAttributes = shorterSize;
@@ -669,7 +671,7 @@ namespace StringTemplate
{
// get a value for each attribute in list; put into Template instance
int numEmpty = 0;
-                    Template embedded = group.GetEmbeddedInstanceOf(self, template);
+                    Template embedded = group.GetEmbeddedInstanceOf(self, current_ip, template);
embedded.RawSetAttribute("i0", i);
embedded.RawSetAttribute("i", i + 1);
for (int a = 0; a < numAttributes; a++)
diff --git a/StringTemplate4/Misc.cs b/StringTemplate4/Misc.cs
index cc2e5d0..00a593f 100644
--- a/StringTemplate4/Misc.cs
+++ b/StringTemplate4/Misc.cs
@@ -77,5 +77,32 @@ namespace StringTemplate
s = s.Replace("\t", @"\\t");
return s;
}
+
+        /// <summary>
+        /// Given index into string, compute the line and char position in line
+        /// </summary>
+        public static Coordinate GetLineCharPosition(string s, int index)
+        {
+            int line = 1;
+            int charPos = 0;
+            int p = 0;
+            while (p < index)
+            {
+                // don't care about s[index] itself; count before
+                if (s[p] == '\n')
+                {
+                    line++;
+                    charPos = 0;
+                }
+                else
+                {
+                    charPos++;
+                }
+
+                p++;
+            }
+
+            return new Coordinate(line, charPos);
+        }
}
}
diff --git a/StringTemplate4/StringTemplate4.csproj b/StringTemplate4/StringTemplate4.csproj
index b388825..5a2dce0 100644
--- a/StringTemplate4/StringTemplate4.csproj
+++ b/StringTemplate4/StringTemplate4.csproj
@@ -58,6 +58,7 @@
<Compile Include="Compiler\TemplateException.cs" />
<Compile Include="Compiler\TemplateLexer.cs" />
<Compile Include="Compiler\TemplateRecognitionException.cs" />
+    <Compile Include="Coordinate.cs" />
<Compile Include="DateTimeRenderer.cs" />
<Compile Include="Debug\AddAttributeEvent.cs" />
<Compile Include="Debug\ConstructionEvent.cs" />
@@ -91,6 +92,7 @@
</Compile>
<Compile Include="TemplateMessage.cs" />
<Compile Include="TemplateName.cs" />
+    <Compile Include="TemplateRuntimeMessage.cs" />
</ItemGroup>
<ItemGroup>
<None Include="..\Antlr3\Key.snk">
diff --git a/StringTemplate4/TemplateGroup.cs b/StringTemplate4/TemplateGroup.cs
index b1dc26b..072e086 100644
--- a/StringTemplate4/TemplateGroup.cs
+++ b/StringTemplate4/TemplateGroup.cs
@@ -148,12 +148,12 @@ namespace StringTemplate
return null;
}

-        public virtual Template GetEmbeddedInstanceOf(Template enclosingInstance, TemplateName name)
+        public virtual Template GetEmbeddedInstanceOf(Template enclosingInstance, int ip, TemplateName name)
{
Template st = GetInstanceOf(name);
if (st == null)
{
-                ErrorManager.RuntimeError(enclosingInstance, ErrorType.NoSuchTemplate, name.Name);
+                ErrorManager.RuntimeError(enclosingInstance, ip, ErrorType.NoSuchTemplate, name.Name);
return Template.Blank;
}
st.enclosingInstance = enclosingInstance;
@@ -375,14 +375,24 @@ namespace StringTemplate
{
string absoluteFileName = Path.Combine(fullyQualifiedRootDirName, fileName);
//Console.WriteLine("load group file " + absoluteFileName);
+            GroupParser parser = null;
try
{
ANTLRFileStream fs = new ANTLRFileStream(absoluteFileName, encoding);
GroupLexer lexer = new GroupLexer(fs);
-                UnbufferedTokenStream tokens = new UnbufferedTokenStream(lexer);
-                GroupParser parser = new GroupParser(tokens);
+                CommonTokenStream tokens = new CommonTokenStream(lexer);
+                parser = new GroupParser(tokens);
parser.group(this, prefix);
}
+#if false
+            catch (RecognitionException e)
+            {
+                if (e.Token.Type == TemplateLexer.EOF_TYPE)
+                    ErrorManager.SyntaxError(ErrorType.SyntaxError, e, "premature EOF", absoluteFileName);
+                else
+                    ErrorManager.SyntaxError(ErrorType.SyntaxError, e, absoluteFileName);
+            }
+#endif
catch (Exception e)
{
if (ErrorManager.IsCriticalException(e))
diff --git a/StringTemplate4/TemplateMessage.cs b/StringTemplate4/TemplateMessage.cs
index 97374e0..620ba4f 100644
--- a/StringTemplate4/TemplateMessage.cs
+++ b/StringTemplate4/TemplateMessage.cs
@@ -96,13 +96,6 @@ namespace StringTemplate
public override string ToString()
{
StringBuilder builder = new StringBuilder(Message);
-
-            if (Template != null)
-            {
-                builder.Append(" in context ");
-                builder.Append(Template.GetEnclosingInstanceStackString());
-            }
-
builder.AppendLine();

if (Source != null)
diff --git a/StringTemplate4/TemplateRuntimeMessage.cs b/StringTemplate4/TemplateRuntimeMessage.cs
new file mode 100644
index 0000000..5308e41
--- /dev/null
+++ b/StringTemplate4/TemplateRuntimeMessage.cs
@@ -0,0 +1,100 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2005-2008 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2008-2009 Sam Harwell
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace StringTemplate
+{
+    using StringTemplate.Compiler;
+    using Exception = System.Exception;
+    using StringBuilder = System.Text.StringBuilder;
+
+    public class TemplateRuntimeMessage : TemplateMessage
+    {
+        /** Where error occurred in bytecode memory */
+        private int ip;
+
+        public TemplateRuntimeMessage(ErrorType error, int ip)
+            : this(error, ip, null)
+        {
+        }
+
+        public TemplateRuntimeMessage(ErrorType error, int ip, Template template)
+            : this(error, ip, template, null)
+        {
+        }
+
+        public TemplateRuntimeMessage(ErrorType error, int ip, Template template, Exception source)
+            : this(error, ip, template, source, null)
+        {
+        }
+
+        public TemplateRuntimeMessage(ErrorType error, int ip, Template template, Exception source, object arg)
+            : this(error, ip, template, source, arg, null)
+        {
+        }
+
+        public TemplateRuntimeMessage(ErrorType error, int ip, Template template, Exception source, object arg, object arg2)
+            : base(error, template, source, arg, arg2)
+        {
+            this.ip = ip;
+        }
+
+        /** Given an ip (code location), get it's range in source template then
+         *  return it's template line:col.
+         */
+        public string GetSourceLocation()
+        {
+            Interval I = Template.code.sourceMap[ip];
+            if (I == null)
+                return null;
+            // get left edge and get line/col
+            int i = I.A;
+            Coordinate loc = Misc.GetLineCharPosition(Template.code.template, i);
+            return loc.ToString();
+        }
+
+        public override string ToString()
+        {
+            StringBuilder buf = new StringBuilder();
+            string loc = GetSourceLocation();
+            if (Template != null)
+            {
+                buf.Append("context [");
+                buf.Append(Template.GetEnclosingInstanceStackString());
+                buf.Append("]");
+            }
+            if (loc != null)
+                buf.Append(" " + loc);
+            buf.Append(" " + base.ToString());
+            return buf.ToString();
+        }
+    }
+}

