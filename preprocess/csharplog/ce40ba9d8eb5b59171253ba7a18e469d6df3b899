commit ce40ba9d8eb5b59171253ba7a18e469d6df3b899
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Apr 4 13:28:07 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Apr 4 13:28:07 2011 -0800

(C# 3) Place properties before methods

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8059]

diff --git a/Antlr3/Analysis/SemanticContext.cs b/Antlr3/Analysis/SemanticContext.cs
index 9fdb6ed..cf7744d 100644
--- a/Antlr3/Analysis/SemanticContext.cs
+++ b/Antlr3/Analysis/SemanticContext.cs
@@ -179,6 +179,38 @@ namespace Antlr3.Analysis
}
}

+            public override SemanticContext GatedPredicateContext
+            {
+                get
+                {
+                    if (_gated)
+                        return this;
+
+                    return null;
+                }
+            }
+
+            public override bool HasUserSemanticPredicate
+            {
+                get
+                {
+                    // user-specified sempred
+                    return _predicateAST != null &&
+                           (_predicateAST.Type == ANTLRParser.GATED_SEMPRED ||
+                             _predicateAST.Type == ANTLRParser.SEMPRED);
+                }
+            }
+
+            public override bool IsSyntacticPredicate
+            {
+                get
+                {
+                    return _predicateAST != null &&
+                        (_predicateAST.Type == ANTLRParser.SYN_SEMPRED ||
+                          _predicateAST.Type == ANTLRParser.BACKTRACK_SEMPRED);
+                }
+            }
+
/** Two predicates are the same if they are literally the same
*  text rather than same node in the grammar's AST.
*  Or, if they have the same constant value, return equal.
@@ -254,38 +286,6 @@ namespace Antlr3.Analysis
return eST;
}

-            public override SemanticContext GatedPredicateContext
-            {
-                get
-                {
-                    if (_gated)
-                        return this;
-
-                    return null;
-                }
-            }
-
-            public override bool HasUserSemanticPredicate
-            {
-                get
-                {
-                    // user-specified sempred
-                    return _predicateAST != null &&
-                           (_predicateAST.Type == ANTLRParser.GATED_SEMPRED ||
-                             _predicateAST.Type == ANTLRParser.SEMPRED);
-                }
-            }
-
-            public override bool IsSyntacticPredicate
-            {
-                get
-                {
-                    return _predicateAST != null &&
-                        (_predicateAST.Type == ANTLRParser.SYN_SEMPRED ||
-                          _predicateAST.Type == ANTLRParser.BACKTRACK_SEMPRED);
-                }
-            }
-
public override void TrackUseOfSyntacticPredicates(Grammar g)
{
if (_synpred)
@@ -310,14 +310,6 @@ namespace Antlr3.Analysis
{
}

-            public override StringTemplate GenExpr(CodeGenerator generator, StringTemplateGroup templates, DFA dfa)
-            {
-                if (templates != null)
-                    return templates.GetInstanceOf("true");
-
-                return new StringTemplate("true");
-            }
-
public override bool HasUserSemanticPredicate
{
get
@@ -326,6 +318,14 @@ namespace Antlr3.Analysis
}
}

+            public override StringTemplate GenExpr(CodeGenerator generator, StringTemplateGroup templates, DFA dfa)
+            {
+                if (templates != null)
+                    return templates.GetInstanceOf("true");
+
+                return new StringTemplate("true");
+            }
+
public override string ToString()
{
return "true"; // not used for code gen, just DOT and print outs
@@ -341,14 +341,6 @@ namespace Antlr3.Analysis
{
}

-            public override StringTemplate GenExpr(CodeGenerator generator, StringTemplateGroup templates, DFA dfa)
-            {
-                if (templates != null)
-                    return templates.GetInstanceOf("false");
-
-                return new StringTemplate("false");
-            }
-
public override bool HasUserSemanticPredicate
{
get
@@ -357,6 +349,14 @@ namespace Antlr3.Analysis
}
}

+            public override StringTemplate GenExpr(CodeGenerator generator, StringTemplateGroup templates, DFA dfa)
+            {
+                if (templates != null)
+                    return templates.GetInstanceOf("false");
+
+                return new StringTemplate("false");
+            }
+
public override string ToString()
{
return "false"; // not used for code gen, just DOT and print outs
@@ -606,18 +606,6 @@ namespace Antlr3.Analysis
this.ctx = ctx;
}

-            public override StringTemplate GenExpr(CodeGenerator generator, StringTemplateGroup templates, DFA dfa)
-            {
-                StringTemplate eST = null;
-                if (templates != null)
-                    eST = templates.GetInstanceOf("notPredicate");
-                else
-                    eST = new StringTemplate("?!($pred$)");
-
-                eST.SetAttribute("pred", ctx.GenExpr(generator, templates, dfa));
-                return eST;
-            }
-
public override SemanticContext GatedPredicateContext
{
get
@@ -646,6 +634,18 @@ namespace Antlr3.Analysis
}
}

+            public override StringTemplate GenExpr(CodeGenerator generator, StringTemplateGroup templates, DFA dfa)
+            {
+                StringTemplate eST = null;
+                if (templates != null)
+                    eST = templates.GetInstanceOf("notPredicate");
+                else
+                    eST = new StringTemplate("?!($pred$)");
+
+                eST.SetAttribute("pred", ctx.GenExpr(generator, templates, dfa));
+                return eST;
+            }
+
public override void TrackUseOfSyntacticPredicates(Grammar g)
{
ctx.TrackUseOfSyntacticPredicates(g);

