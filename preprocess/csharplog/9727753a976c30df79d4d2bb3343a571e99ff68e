commit 9727753a976c30df79d4d2bb3343a571e99ff68e
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Wed Jan 20 17:35:08 2010 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Wed Jan 20 17:35:08 2010 -0800

C# Port:
* Merge CL6472

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6587]

diff --git a/Antlr3.Test/ST4/TestCompiler.cs b/Antlr3.Test/ST4/TestCompiler.cs
index e6ddb61..21ab411 100644
--- a/Antlr3.Test/ST4/TestCompiler.cs
+++ b/Antlr3.Test/ST4/TestCompiler.cs
@@ -71,7 +71,7 @@
[TestMethod]
public void TestMap()
{
-            string template = "hi <name:bold>";
+            string template = "hi <name:bold()>";
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, write, load_attr 1, load_str 2, map, write";
@@ -85,7 +85,7 @@
[TestMethod]
public void TestRepeatedMap()
{
-            string template = "hi <name:bold:italics>";
+            string template = "hi <name:bold():italics()>";
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, " +
@@ -106,7 +106,7 @@
[TestMethod]
public void TestRotMap()
{
-            string template = "hi <name:bold,italics>";
+            string template = "hi <name:bold(),italics()>";
CompiledTemplate code = new TemplateCompiler().Compile(template);
string asmExpected =
"load_str 0, write, load_attr 1, load_str 2, load_str 3, rot_map 2, write";
diff --git a/Antlr3.Test/ST4/TestCoreBasics.cs b/Antlr3.Test/ST4/TestCoreBasics.cs
index 76cf5b3..b6154f8 100644
--- a/Antlr3.Test/ST4/TestCoreBasics.cs
+++ b/Antlr3.Test/ST4/TestCoreBasics.cs
@@ -4,6 +4,7 @@
using StringTemplate;
using ArrayList = System.Collections.ArrayList;
using StringWriter = System.IO.StringWriter;
+    using Path = System.IO.Path;

[TestClass]
public class TestCoreBasics : StringTemplateTestBase
@@ -173,7 +174,7 @@
{
TemplateGroup group = new TemplateGroup();
group.DefineTemplate(new TemplateName("inc"), "[<it>]");
-            group.DefineTemplate(new TemplateName("test"), "hi <name:inc>!");
+            group.DefineTemplate(new TemplateName("test"), "hi <name:inc()>!");
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -185,6 +186,24 @@
}

[TestMethod]
+        public void TestMapWithExprAsTemplateName()
+        {
+            string templates =
+                "d ::= [\"foo\":\"bold\"]\n" +
+                "test() ::= \"<name:(d.foo)()>\"\n" +
+                "bold() ::= <<*<it>*>>\n";
+            WriteFile(tmpdir, "t.stg", templates);
+            var group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
+            var st = group.GetInstanceOf("test");
+            st.Add("name", "Ter");
+            st.Add("name", "Tom");
+            st.Add("name", "Sumana");
+            string expected = "*Ter**Tom**Sumana*";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
public void TestParallelMap()
{
TemplateGroup group = new TemplateGroup();
@@ -224,7 +243,7 @@
{
TemplateGroup group = new TemplateGroup();
group.DefineTemplate(new TemplateName("inc"), "<i>:<it>");
-            group.DefineTemplate(new TemplateName("test"), "<name:inc; separator=\", \">");
+            group.DefineTemplate(new TemplateName("test"), "<name:inc(); separator=\", \">");
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -241,7 +260,7 @@
{
TemplateGroup group = new TemplateGroup();
group.DefineTemplate(new TemplateName("a"), "[<it>]");
-            group.DefineTemplate(new TemplateName("test"), "hi <name:a>!");
+            group.DefineTemplate(new TemplateName("test"), "hi <name:a()>!");
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
string expected = "hi [Ter]!";
@@ -255,7 +274,7 @@
TemplateGroup group = new TemplateGroup();
group.DefineTemplate(new TemplateName("a"), "[<it>]");
group.DefineTemplate(new TemplateName("b"), "(<it>)");
-            group.DefineTemplate(new TemplateName("test"), "hi <name:a:b>!");
+            group.DefineTemplate(new TemplateName("test"), "hi <name:a():b()>!");
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
@@ -272,7 +291,7 @@
TemplateGroup group = new TemplateGroup();
group.DefineTemplate(new TemplateName("a"), "[<it>]");
group.DefineTemplate(new TemplateName("b"), "(<it>)");
-            group.DefineTemplate(new TemplateName("test"), "hi <name:a,b>!");
+            group.DefineTemplate(new TemplateName("test"), "hi <name:a(),b()>!");
Template st = group.GetInstanceOf("test");
st.Add("name", "Ter");
st.Add("name", "Tom");
diff --git a/Antlr3.Test/ST4/TestGroupSyntaxErrors.cs b/Antlr3.Test/ST4/TestGroupSyntaxErrors.cs
index 2fce7e9..0b0432e 100644
--- a/Antlr3.Test/ST4/TestGroupSyntaxErrors.cs
+++ b/Antlr3.Test/ST4/TestGroupSyntaxErrors.cs
@@ -77,6 +77,23 @@ namespace AntlrUnitTests.ST4
}

[TestMethod]
+        public void TestNewlineInString()
+        {
+            String templates =
+                "foo() ::= \"\nfoo\"\n";
+            WriteFile(tmpdir, "t.stg", templates);
+
+            STGroup group = null;
+            var errors = new ErrorBuffer();
+            group = new STGroupFile(tmpdir + "/" + "t.stg");
+            ErrorManager.ErrorListener = errors;
+            group.Load(); // force load
+            String expected = "t.stg 1:11: \\n in string" + newline;
+            String result = errors.ToString();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
public void TestParen2()
{
String templates =
@@ -162,5 +179,73 @@ namespace AntlrUnitTests.ST4
String result = errors.ToString();
Assert.AreEqual(expected, result);
}
+
+        [TestMethod]
+        public void TestMap()
+        {
+            String templates =
+                "d ::= []\n";
+            WriteFile(tmpdir, "t.stg", templates);
+
+            STGroup group = null;
+            ErrorBuffer errors = new ErrorBuffer();
+            group = new STGroupFile(tmpdir + "/" + "t.stg");
+            ErrorManager.ErrorListener = errors;
+            group.Load(); // force load
+            String expected = "t.stg 1:7: missing dictionary entry at ']'" + newline;
+            String result = errors.ToString();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestMap2()
+        {
+            String templates =
+                "d ::= [\"k\":]\n";
+            WriteFile(tmpdir, "t.stg", templates);
+
+            STGroup group = null;
+            ErrorBuffer errors = new ErrorBuffer();
+            group = new STGroupFile(tmpdir + "/" + "t.stg");
+            ErrorManager.ErrorListener = errors;
+            group.Load(); // force load
+            String expected = "t.stg 1:11: missing value for key at ']'" + newline;
+            String result = errors.ToString();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestMap3()
+        {
+            String templates =
+                "d ::= [\"k\":{dfkj}}]\n"; // extra }
+            WriteFile(tmpdir, "t.stg", templates);
+
+            STGroup group = null;
+            ErrorBuffer errors = new ErrorBuffer();
+            group = new STGroupFile(tmpdir + "/" + "t.stg");
+            ErrorManager.ErrorListener = errors;
+            group.Load(); // force load
+            String expected = "t.stg 1:17: invalid character '}'" + newline;
+            String result = errors.ToString();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestUnterminatedString()
+        {
+            String templates =
+                "f() ::= \""; // extra }
+            WriteFile(tmpdir, "t.stg", templates);
+
+            STGroup group = null;
+            ErrorBuffer errors = new ErrorBuffer();
+            group = new STGroupFile(tmpdir + "/" + "t.stg");
+            ErrorManager.ErrorListener = errors;
+            group.Load(); // force load
+            String expected = "t.stg 1:9: unterminated string, t.stg 1:9: missing template at '<EOF>'" + newline;
+            String result = errors.ToString();
+            Assert.AreEqual(expected, result);
+        }
}
}
diff --git a/Antlr3.Test/ST4/TestGroups.cs b/Antlr3.Test/ST4/TestGroups.cs
index acf75f5..087d705 100644
--- a/Antlr3.Test/ST4/TestGroups.cs
+++ b/Antlr3.Test/ST4/TestGroups.cs
@@ -333,7 +333,7 @@ namespace AntlrUnitTests.ST4
{
String templates =
"method(fields) ::= <<" + newline +
-                    "<fields:{f | <f:stat>}>" + newline +  // THIS SHOULD BE ERROR; >1 arg?
+                    "<fields:{f | <f:stat()>}>" + newline +  // THIS SHOULD BE ERROR; >1 arg?
">>" + newline +
"stat(f,value={<f.name>}) ::= \"x=<value>; // <f.name>\"" + newline
;
diff --git a/Antlr3.Test/ST4/TestIndirectionAndEarlyEvaluation.cs b/Antlr3.Test/ST4/TestIndirectionAndEarlyEvaluation.cs
index 05a0379..6dc54e8 100644
--- a/Antlr3.Test/ST4/TestIndirectionAndEarlyEvaluation.cs
+++ b/Antlr3.Test/ST4/TestIndirectionAndEarlyEvaluation.cs
@@ -98,7 +98,7 @@ namespace AntlrUnitTests.ST4
{
STGroup group = new STGroup();
group.DefineTemplate(new TemplateName("a"), "[<it>]");
-            group.DefineTemplate(new TemplateName("test"), "hi <names:(templateName)>!");
+            group.DefineTemplate(new TemplateName("test"), "hi <names:(templateName)()>!");
ST st = group.GetInstanceOf("test");
st.Add("names", "Ter");
st.Add("names", "Tom");
diff --git a/Antlr3.Test/ST4/TestRenderers.cs b/Antlr3.Test/ST4/TestRenderers.cs
index dc39b00..3ae725b 100644
--- a/Antlr3.Test/ST4/TestRenderers.cs
+++ b/Antlr3.Test/ST4/TestRenderers.cs
@@ -38,6 +38,7 @@ namespace AntlrUnitTests.ST4
using CultureInfo = System.Globalization.CultureInfo;
using DateTime = System.DateTime;
using IList = System.Collections.IList;
+    using Path = System.IO.Path;

[TestClass]
public class TestRenderers : StringTemplateTestBase
@@ -48,7 +49,7 @@ namespace AntlrUnitTests.ST4
string templates =
"dateThing(created) ::= \"datetime: <created>\"\n";
WriteFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.RegisterRenderer(typeof(DateTime), new DateTimeRenderer());
Template st = group.GetInstanceOf("dateThing");
st.Add("created", new DateTime(2005, 7, 5));
@@ -63,7 +64,7 @@ namespace AntlrUnitTests.ST4
string templates =
"dateThing(created) ::= << date: <created; format=\"yyyy.MM.dd\"> >>\n";
WriteFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.RegisterRenderer(typeof(DateTime), new DateTimeRenderer());
Template st = group.GetInstanceOf("dateThing");
st.Add("created", new DateTime(2005, 7, 5));
@@ -78,7 +79,7 @@ namespace AntlrUnitTests.ST4
string templates =
"dateThing(created) ::= << datetime: <created; format=\"short\"> >>\n";
WriteFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.RegisterRenderer(typeof(DateTime), new DateTimeRenderer());
Template st = group.GetInstanceOf("dateThing");
st.Add("created", new DateTime(2005, 7, 5));
@@ -93,7 +94,7 @@ namespace AntlrUnitTests.ST4
string templates =
"dateThing(created) ::= << datetime: <created; format=\"full\"> >>\n";
WriteFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.RegisterRenderer(typeof(DateTime), new DateTimeRenderer());
Template st = group.GetInstanceOf("dateThing");
st.Add("created", new DateTime(2005, 7, 5));
@@ -109,7 +110,7 @@ namespace AntlrUnitTests.ST4
"dateThing(created) ::= << date: <created; format=\"date:medium\"> >>\n";

WriteFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.RegisterRenderer(typeof(DateTime), new DateTimeRenderer());
Template st = group.GetInstanceOf("dateThing");
st.Add("created", new DateTime(2005, 7, 5));
@@ -125,7 +126,7 @@ namespace AntlrUnitTests.ST4
"dateThing(created) ::= << time: <created; format=\"time:medium\"> >>\n";

WriteFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.RegisterRenderer(typeof(DateTime), new DateTimeRenderer());
Template st = group.GetInstanceOf("dateThing");
st.Add("created", new DateTime(2005, 7, 5));
@@ -141,7 +142,7 @@ namespace AntlrUnitTests.ST4
"foo(x) ::= << <x; format=\"%6s\"> >>\n";

WriteFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.RegisterRenderer(typeof(string), new StringRenderer());
Template st = group.GetInstanceOf("foo");
st.Add("x", "hi");
@@ -157,7 +158,7 @@ namespace AntlrUnitTests.ST4
"foo(x,y) ::= << <x; format=\"F0\"> <y; format=\"0.000\"> >>\n";

WriteFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.RegisterRenderer(typeof(int), new NumberRenderer());
group.RegisterRenderer(typeof(double), new NumberRenderer());
Template st = group.GetInstanceOf("foo");
@@ -175,7 +176,7 @@ namespace AntlrUnitTests.ST4
"foo(x,y) ::= << <x; format=\"N0\"> <y; format=\"0.000\"> >>\n";

WriteFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.RegisterRenderer(typeof(int), new NumberRenderer());
group.RegisterRenderer(typeof(double), new NumberRenderer());
Template st = group.GetInstanceOf("foo");
diff --git a/Antlr3.Test/ST4/TestSyntaxErrors.cs b/Antlr3.Test/ST4/TestSyntaxErrors.cs
index 58d7ef4..5bcacf6 100644
--- a/Antlr3.Test/ST4/TestSyntaxErrors.cs
+++ b/Antlr3.Test/ST4/TestSyntaxErrors.cs
@@ -55,7 +55,7 @@ namespace AntlrUnitTests.ST4
catch (TemplateException se)
{
RecognitionException re = (RecognitionException)se.InnerException;
-                result = new TemplateCompileTimeMessage(ErrorType.SyntaxError, re.Token, se, se.Message).ToString();
+                result = new TemplateCompileTimeMessage(ErrorType.SyntaxError, re.Token, re, se.Message).ToString();
}
string expected = "1:0: this doesn't look like a template: \" <> \"";
Assert.AreEqual(expected, result);
@@ -74,7 +74,7 @@ namespace AntlrUnitTests.ST4
catch (TemplateException se)
{
RecognitionException re = (RecognitionException)se.InnerException;
-                result = new TemplateCompileTimeMessage(ErrorType.SyntaxError, re.Token, se, se.Message).ToString();
+                result = new TemplateCompileTimeMessage(ErrorType.SyntaxError, re.Token, re, se.Message).ToString();
}
String expected = "1:3: doesn't look like an expression";
Assert.AreEqual(expected, result);
@@ -93,7 +93,7 @@ namespace AntlrUnitTests.ST4
catch (TemplateException se)
{
RecognitionException re = (RecognitionException)se.InnerException;
-                result = new TemplateCompileTimeMessage(ErrorType.SyntaxError, re.Token, se, se.Message).ToString();
+                result = new TemplateCompileTimeMessage(ErrorType.SyntaxError, re.Token, re, se.Message).ToString();
}
string expected = "1:4: invalid character: *";
Assert.AreEqual(expected, result);
@@ -127,7 +127,7 @@ namespace AntlrUnitTests.ST4
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
ErrorManager.ErrorListener = errors;
group.Load(); // force load
-            String expected = "1:14: doesn't look like an expression" + newline;
+            String expected = "t.stg 1:15: \\n in string, 1:14: doesn't look like an expression" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
}
diff --git a/Antlr3.vsmdi b/Antlr3.vsmdi
index b680b22..829e5f9 100644
--- a/Antlr3.vsmdi
+++ b/Antlr3.vsmdi
@@ -392,7 +392,7 @@
<TestLink id="0a2b816e-1f0c-6dbe-3f06-831fa6b17792" name="TestAttrIsArray" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="12d223ea-db40-f1ea-3f8c-c7a683fed984" name="TestDefineTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0038a163-7465-af4e-7fc8-8b89065aac81" name="TestFalseCondWithElse" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="eef4dbce-cb52-f4c0-ceff-00a7047ee3bb" name="TestRoundRobinMap" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4fb407b3-0764-f58a-055f-684342c289d7" name="TestInclude" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d15cf9f0-6a4e-499e-a489-5797893efe0d" name="TestFalseCond" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="dc00a846-0057-f22e-2d03-f69b1293af62" name="TestTrueCond" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="71a8fed5-11ff-82a7-c6aa-b70060fef1ab" name="TestIncludeWithSingleUnnamedArg" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
@@ -401,6 +401,7 @@
<TestLink id="8adb04c9-ab67-006c-6b70-9673218304e1" name="TestOr" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="553bef5a-e178-690f-81f7-ce7fea0277d3" name="TestAttr" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="506433e4-9eaf-6f54-bacc-67b578522de9" name="TestMapSingleValue" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c9c0b022-1d9a-91ad-5d11-03b895ec3155" name="TestMapWithExprAsTemplateName" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6efea163-32e2-ebed-d674-a333bc0a0b8e" name="TestIncludeWithArg" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="61cf097e-e7dd-eaa7-349a-9bc73dc5986b" name="TestIncludeWithArg2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="04452d95-204e-0962-68e8-7332ff985fc7" name="TestElseIf" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
@@ -408,7 +409,7 @@
<TestLink id="3b9f0a90-6020-0ea4-6de3-3b3fcf2b8c47" name="TestIncludeWithNestedArgs" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="325dd9bd-89a2-db20-de62-6cb3a7c602a3" name="TestElseIfAllExprFalse" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="185817fd-5818-8eee-5712-571bd9dada8d" name="TestParallelMap" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="4fb407b3-0764-f58a-055f-684342c289d7" name="TestInclude" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="eef4dbce-cb52-f4c0-ceff-00a7047ee3bb" name="TestRoundRobinMap" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e93abbf8-dd37-49c0-8bc8-430b78d4ab74" name="TestUnicodeLiterals" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="035d62d1-8c9e-2c14-bb45-b6e9f46036f6" name="TestNotTrueCond" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
@@ -1716,12 +1717,17 @@
<TestList name="Group Syntax Errors" id="f85c7118-4bbf-42c3-8c45-43ef033ac318" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
<TestLink id="bb0fce02-d6d8-2260-6770-f34c63698434" name="TestParen" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="08426416-c67b-84c4-7e30-9cc93a73941f" name="TestParen2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="1def5b4f-4872-3101-d89e-937d5c5d35f3" name="TestMissingTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b5179ee1-20cd-0672-fd27-7e21ecbc39fd" name="TestArg2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1def5b4f-4872-3101-d89e-937d5c5d35f3" name="TestMissingTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="01c21d43-16e1-c6c1-a155-9d173c507e41" name="TestErrorWithinTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="b1a29e60-757e-1d6b-9558-e0ff181c0451" name="TestArg3" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c9340f65-e6a1-5679-cd68-4ac3e7c01c66" name="TestNewlineInString" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="421711f4-6cec-28f1-347f-582e8709a59b" name="TestMap3" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e9b77e45-ffbc-76e7-dfe8-e45456445fbb" name="TestArg" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="37aecd61-44a0-864d-50c1-e067cdbeb578" name="TestUnterminatedString" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="08426416-c67b-84c4-7e30-9cc93a73941f" name="TestParen2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="75f38cb5-efd5-a41c-4198-63146e6b8891" name="TestMap2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="d2bd9da3-81da-e469-5343-77e8e0f9830b" name="TestMap" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="b1a29e60-757e-1d6b-9558-e0ff181c0451" name="TestArg3" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
<TestList name="Indentation" id="fa3ee5f4-25ee-4cb9-9918-3b1f7ab8acb2" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
diff --git a/StringTemplate4/BlankTemplate.cs b/StringTemplate4/BlankTemplate.cs
index 914b1f5..d0448db 100644
--- a/StringTemplate4/BlankTemplate.cs
+++ b/StringTemplate4/BlankTemplate.cs
@@ -50,6 +50,14 @@ namespace StringTemplate
{
}

+        public string Name
+        {
+            get
+            {
+                return "blank";
+            }
+        }
+
public override void Add(string name, object value)
{
}
diff --git a/StringTemplate4/Compiler/Group.g3 b/StringTemplate4/Compiler/Group.g3
index d7e44b7..1be1c1a 100644
--- a/StringTemplate4/Compiler/Group.g3
+++ b/StringTemplate4/Compiler/Group.g3
@@ -59,7 +59,10 @@ def[TemplateName prefix]
;
catch[RecognitionException re]
{
-	sync("garbled template definition starting at '" + input.LT(1).Text + "'");
+	// kill at least current token; it's garbage.
+	// pretend we already saw an error here
+	state.lastErrorIndex = input.Index;
+	Error("garbled template definition starting at '" + input.LT(1).Text + "'");
}

public
@@ -86,8 +89,11 @@ templateDef[TemplateName prefix]
)
{
template = Misc.Strip(template, n);
-		if ( templateToken.Type==BIGSTRING ) {
-			template = Misc.TrimOneStartingWS(template);
+		bool removedNewline = false;
+		if (templateToken.Type == BIGSTRING && template[0] == '\n')
+		{
+			removedNewline = true;
+			template = Misc.TrimOneStartingNewline(template);
}
try {
if ($enclosing != null)
@@ -98,8 +104,15 @@ templateDef[TemplateName prefix]
catch (TemplateException e)
{
RecognitionException re = (RecognitionException)e.InnerException;
-			re.Token.CharPositionInLine = re.CharPositionInLine + templateToken.CharPositionInLine + n;
-			re.Token.Line = re.Line + templateToken.Line - 1;
+			if (removedNewline)
+			{
+				re.Line += templateToken.Line;
+			}
+			else
+			{
+				re.Token.CharPositionInLine = re.CharPositionInLine + templateToken.CharPositionInLine + n;
+				re.Token.Line = re.Line + templateToken.Line - 1;
+			}
ErrorManager.SyntaxError(ErrorType.SyntaxError, re, e.Message);
}
}
@@ -153,7 +166,11 @@ dictPairs[IDictionary<string, object> mapping]
(',' keyValuePair[mapping])* (',' defaultValuePair[mapping])?
|	defaultValuePair[mapping]
;
-
+catch[RecognitionException re]
+{
+	Error("missing dictionary entry at '" + input.LT(1).Text + "'");
+}
+
defaultValuePair[IDictionary<string,object> mapping]
:	'default' ':' keyValue {mapping[TemplateGroup.DEFAULT_KEY] = $keyValue.value;}
;
@@ -170,33 +187,27 @@ keyValue returns [object value]
{$value = TemplateGroup.DICT_KEY;}
|						{$value = null;}
;
-
-sync[string msg]
-@init
+catch[RecognitionException re]
{
-	// Consume any garbled tokens that come before the next statement
-	// or the end of the block.
-	int mark = input.Index;
-	IToken t = input.LT(1);
-	Recover(input, null);
-	if (input.Index != mark)
-	{
-		// we consumed bad tokens
-		NoViableAltException e = new NoViableAltException("", 0, 0, input);
-		e.Token = t;
-		ErrorManager.SyntaxError(ErrorType.SyntaxError, e, msg, SourceName);
-		Recover(input, null);
-	}
+	Error("missing value for key at '" + input.LT(1).Text + "'");
}
-	:	// Deliberately match nothing, causing this rule always to be
-		// entered.
-	;

ID	:	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'-'|'_')*
;

STRING
-	:	'"' ( '\\' '"' | '\\' ~'"' | ~('\\'|'"') )* '"'
+	:	'"'
+		(	'\\' '"'
+		|	'\\' ~'"'
+		|	{
+			string msg = "\\n in string";
+			NoViableAltException e = new NoViableAltException("", 0, 0, input);
+			ErrorManager.SyntaxError(ErrorType.SyntaxError, e, msg, SourceName);
+			}
+			'\n'
+		|	~('\\'|'"'|'\n')
+		)*
+		'"'
;

BIGSTRING
diff --git a/StringTemplate4/Compiler/GroupLexerHelper.cs b/StringTemplate4/Compiler/GroupLexerHelper.cs
index eba507d..9381851 100644
--- a/StringTemplate4/Compiler/GroupLexerHelper.cs
+++ b/StringTemplate4/Compiler/GroupLexerHelper.cs
@@ -32,8 +32,38 @@

namespace StringTemplate.Compiler
{
+    using Path = System.IO.Path;
+    using Antlr.Runtime;
+
partial class GroupLexer
{
protected internal TemplateGroup _group;
+
+        public override string SourceName
+        {
+            get
+            {
+                string fullFileName = base.SourceName;
+                return Path.GetFileName(fullFileName);
+            }
+        }
+
+        public override void ReportError(RecognitionException e)
+        {
+            string msg = null;
+            if (e is NoViableAltException)
+            {
+                msg = "invalid character '" + (char)input.LA(1) + "'";
+            }
+            else if (e is MismatchedTokenException && ((MismatchedTokenException)e).expecting == '"')
+            {
+                msg = "unterminated string";
+            }
+            else
+            {
+                msg = GetErrorMessage(e, TokenNames);
+            }
+            ErrorManager.SyntaxError(ErrorType.SyntaxError, e, msg, SourceName);
+        }
}
}
diff --git a/StringTemplate4/Compiler/GroupParserHelper.cs b/StringTemplate4/Compiler/GroupParserHelper.cs
index 7495825..1e2b4de 100644
--- a/StringTemplate4/Compiler/GroupParserHelper.cs
+++ b/StringTemplate4/Compiler/GroupParserHelper.cs
@@ -54,5 +54,12 @@ namespace StringTemplate.Compiler
string message = GetErrorMessage(e, tokenNames);
ErrorManager.SyntaxError(ErrorType.SyntaxError, e, message, SourceName);
}
+
+        public void Error(string msg)
+        {
+            NoViableAltException e = new NoViableAltException("", 0, 0, input);
+            ErrorManager.SyntaxError(ErrorType.SyntaxError, e, msg, SourceName);
+            Recover(input, null);
+        }
}
}
diff --git a/StringTemplate4/Compiler/TemplateLexer.cs b/StringTemplate4/Compiler/TemplateLexer.cs
index 774dc32..7576329 100644
--- a/StringTemplate4/Compiler/TemplateLexer.cs
+++ b/StringTemplate4/Compiler/TemplateLexer.cs
@@ -332,12 +332,12 @@ namespace StringTemplate.Compiler
return id;
}
RecognitionException re = new NoViableAltException("", 0, 0, input);
+                    re.Line = startLine;
+                    re.CharPositionInLine = startCharPositionInLine;
if (c == EOF)
{
-                        re.Token = NewToken(EOF);
throw new TemplateException("EOF inside ST expression", re);
}
-                    re.Token = NewToken(TokenTypes.Invalid);
throw new TemplateException("invalid character: " + c, re);
}
}
diff --git a/StringTemplate4/Compiler/TemplateParser.g3 b/StringTemplate4/Compiler/TemplateParser.g3
index 62515da..ec71d23 100644
--- a/StringTemplate4/Compiler/TemplateParser.g3
+++ b/StringTemplate4/Compiler/TemplateParser.g3
@@ -328,16 +328,22 @@ arg :	ID '=' exprNoComma {gen.Emit(Bytecode.INSTR_STORE_ATTR, $ID.text, $ID.Star
|	elip='...'		   {gen.Emit(Bytecode.INSTR_SET_PASS_THRU);}
;

+/**
+expr:template()      apply template to expr
+expr:{arg | ...}     apply subtemplate to expr
+expr:(e)()           convert e to a string template name and apply to expr
+*/
templateRef
-	:	ID			{
-					var prefixed = PrefixedName(new TemplateName($ID.text));
-					gen.Emit(Bytecode.INSTR_LOAD_STR, prefixed != null ? prefixed.FullName : null, $ID.StartIndex, $ID.StopIndex);
-					}
+	:	ID '(' ')'
+		{
+			var prefixed = PrefixedName(new TemplateName($ID.text));
+			gen.Emit(Bytecode.INSTR_LOAD_STR, prefixed != null ? prefixed.FullName : null, $ID.StartIndex, $ID.StopIndex);
+		}
|	subtemplate {
var prefixed = PrefixedName($subtemplate.name);
gen.Emit(Bytecode.INSTR_LOAD_STR, prefixed != null ? prefixed.FullName : null, $subtemplate.start.StartIndex, $subtemplate.start.StopIndex);
}
-	|	lp='(' mapExpr rp=')' {gen.Emit(Bytecode.INSTR_TOSTR, $lp.StartIndex, $rp.StartIndex);}
+	|	lp='(' mapExpr rp=')' '(' ')' {gen.Emit(Bytecode.INSTR_TOSTR, $lp.StartIndex, $rp.StartIndex);}
;

list:	{gen.Emit(Bytecode.INSTR_LIST);} '[' listElement (',' listElement)* ']'
diff --git a/StringTemplate4/ErrorManager.cs b/StringTemplate4/ErrorManager.cs
index 1073fad..dce64fd 100644
--- a/StringTemplate4/ErrorManager.cs
+++ b/StringTemplate4/ErrorManager.cs
@@ -166,10 +166,12 @@ namespace StringTemplate
{
public void CompileTimeError(TemplateMessage message)
{
+                Console.Error.WriteLine(message);
}

public void RuntimeError(TemplateMessage message)
{
+                Console.Error.WriteLine(message);
}

public void IOError(TemplateMessage message)
diff --git a/StringTemplate4/Interpreter.cs b/StringTemplate4/Interpreter.cs
index f96f6d4..97b7288 100644
--- a/StringTemplate4/Interpreter.cs
+++ b/StringTemplate4/Interpreter.cs
@@ -618,10 +618,17 @@ namespace StringTemplate
else
{ // if only single value, just apply first template to attribute
Template st = group.GetInstanceOf(templates[0]);
-                SetSoleArgument(st, attr);
-                st.RawSetAttribute("i0", 0);
-                st.RawSetAttribute("i", 1);
-                operands[++sp] = st;
+                if (st != null)
+                {
+                    SetSoleArgument(st, attr);
+                    st.RawSetAttribute("i0", 0);
+                    st.RawSetAttribute("i", 1);
+                    operands[++sp] = st;
+                }
+                else
+                {
+                    operands[++sp] = Template.Blank;
+                }
//            map(self, attr, templates.get(1));
}
}
diff --git a/StringTemplate4/Misc.cs b/StringTemplate4/Misc.cs
index 00a593f..5b0eaf4 100644
--- a/StringTemplate4/Misc.cs
+++ b/StringTemplate4/Misc.cs
@@ -50,20 +50,16 @@ namespace StringTemplate
return s.Substring(n, s.Length - 2 * n);
}

-        public static string TrimOneStartingWS(string s)
+        public static string TrimOneStartingNewline(string s)
{
if (s == null)
throw new ArgumentNullException("s");

-            // strip newline from front and back, but just one
+            // strip newline from front but just one
if (s.StartsWith("\r\n"))
s = s.Substring(2);
else if (s.StartsWith("\n"))
s = s.Substring(1);
-            /*
-            if ( s.endsWith("\r\n") ) s = s.substring(0,s.length()-2);
-            else if ( s.endsWith("\n") ) s = s.substring(0,s.length()-1);
-             */
return s;
}

diff --git a/StringTemplate4/TemplateCompileTimeMessage.cs b/StringTemplate4/TemplateCompileTimeMessage.cs
index 5910ab3..aabec63 100644
--- a/StringTemplate4/TemplateCompileTimeMessage.cs
+++ b/StringTemplate4/TemplateCompileTimeMessage.cs
@@ -59,16 +59,14 @@ namespace StringTemplate
public TemplateCompileTimeMessage(ErrorType error, IToken token, Exception innerException, string message, object arg)
: base(error, null, innerException, arg)
{
-            if (token == null)
-                throw new ArgumentNullException("token");
-
this._token = token;
this._message = message;
}

public override string ToString()
{
-            string header = _token.Line + ":" + _token.CharPositionInLine;
+            RecognitionException re = (RecognitionException)Source;
+            string header = re.Line + ":" + re.CharPositionInLine;
if (Argument1 == null)
return string.Format(ErrorType.MessageFormat, header + ": " + _message);


