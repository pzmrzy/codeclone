commit 45379c0cc67ae338a31649d50c7d5e75adf0471f
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Wed Mar 30 07:46:28 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Wed Mar 30 07:46:28 2011 -0800

(C# 3) Fix unit tests
Update java target unit testing to antlr-runtime-3.3.jar and stringtemplate-3.2.1.jar

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7982]

diff --git a/Antlr3.Test/BaseTest.cs b/Antlr3.Test/BaseTest.cs
index dca75d4..e612ea1 100644
--- a/Antlr3.Test/BaseTest.cs
+++ b/Antlr3.Test/BaseTest.cs
@@ -64,9 +64,9 @@ namespace AntlrUnitTests
{
public readonly string jikes = null;
public static readonly string pathSep = System.IO.Path.PathSeparator.ToString();
-        public readonly string RuntimeJar = Path.Combine( Environment.CurrentDirectory, @"..\..\antlr-3.1.1-runtime.jar" );
+        public readonly string RuntimeJar = Path.Combine( Environment.CurrentDirectory, @"..\..\antlr-runtime-3.3.jar" );
public readonly string Runtime2Jar = Path.Combine( Environment.CurrentDirectory, @"..\..\antlr-2.7.7.jar" );
-        public readonly string StringTemplateJar = Path.Combine( Environment.CurrentDirectory, @"..\..\stringtemplate-3.1b1.jar" );
+        public readonly string StringTemplateJar = Path.Combine( Environment.CurrentDirectory, @"..\..\stringtemplate-3.2.1.jar" );

private static string javaHome;

@@ -291,6 +291,7 @@ namespace AntlrUnitTests
classpathOption = "-bootclasspath";
}

+            string inputFile = Path.Combine(tmpdir, fileName);
string[] args = new string[]
{
/*compiler,*/
@@ -298,7 +299,7 @@ namespace AntlrUnitTests
tmpdir,
classpathOption,
tmpdir+pathSep+ClassPath,
-                    tmpdir+"/"+fileName
+                    inputFile
};
string cmdLine = compiler + " -d " + tmpdir + " " + classpathOption + " " + '"'+tmpdir + pathSep + ClassPath+'"' + " " + fileName;
//System.out.println("compile: "+cmdLine);
@@ -317,8 +318,8 @@ namespace AntlrUnitTests
//Process process =
//    Runtime.getRuntime().exec( args, null, outputDir );

-                StreamVacuum stdout = new StreamVacuum( process.StandardOutput );
-                StreamVacuum stderr = new StreamVacuum( process.StandardError );
+                StreamVacuum stdout = new StreamVacuum( process.StandardOutput, inputFile );
+                StreamVacuum stderr = new StreamVacuum( process.StandardError, inputFile );
stdout.start();
stderr.start();
process.WaitForExit();
@@ -584,10 +585,11 @@ namespace AntlrUnitTests
{
try
{
+                string inputFile = Path.GetFullPath(Path.Combine(tmpdir, "input"));
string[] args = new string[] {
-				/*"java",*/ "-classpath", tmpdir+pathSep+ClassPath,
-				"Test", System.IO.Path.GetFullPath( System.IO.Path.Combine( tmpdir, "input") )
-			};
+                        /*"java",*/ "-classpath", tmpdir+pathSep+ClassPath,
+                        "Test", inputFile
+                    };
//String cmdLine = "java -classpath " + CLASSPATH + pathSep + tmpdir + " Test " + Path.GetFullPath( Path.Combine( tmpdir, "input" ) );
//System.out.println("execParser: "+cmdLine);

@@ -602,8 +604,8 @@ namespace AntlrUnitTests

//Process process =
//    Runtime.getRuntime().exec( args, null, new File( tmpdir ) );
-                StreamVacuum stdoutVacuum = new StreamVacuum(process.StandardOutput);
-                StreamVacuum stderrVacuum = new StreamVacuum(process.StandardError);
+                StreamVacuum stdoutVacuum = new StreamVacuum(process.StandardOutput, inputFile);
+                StreamVacuum stderrVacuum = new StreamVacuum(process.StandardError, inputFile);
stdoutVacuum.start();
stderrVacuum.start();
process.WaitForExit();
@@ -685,7 +687,7 @@ namespace AntlrUnitTests
System.out.println(equeue.infos);
System.out.println(equeue.warnings);
System.out.println(equeue.errors);
-                    assertTrue("number of errors mismatch", n, equeue.errors.size());
+                    Assert.IsTrue("number of errors mismatch", n, equeue.errors.size());
*/
Message foundMsg = null;
for ( int i = 0; i < equeue.errors.Count; i++ )
@@ -738,15 +740,15 @@ namespace AntlrUnitTests
foundMsg = m;
}
}
-            assertTrue( "no error; " + expectedMessage.msgID + " expected", equeue.errors.Count > 0 );
-            assertTrue( "too many errors; " + equeue.errors, equeue.errors.Count <= 1 );
-            assertNotNull( "couldn't find expected error: " + expectedMessage.msgID, foundMsg );
+            Assert.IsTrue(equeue.errors.Count > 0, "no error; " + expectedMessage.msgID + " expected");
+            Assert.IsTrue(equeue.errors.Count <= 1, "too many errors; " + equeue.errors);
+            Assert.IsNotNull(foundMsg, "couldn't find expected error: " + expectedMessage.msgID);
/*
-            assertTrue("error is not a GrammarSemanticsMessage",
+            Assert.IsTrue("error is not a GrammarSemanticsMessage",
foundMsg instanceof GrammarSemanticsMessage);
*/
-            assertEquals( expectedMessage.arg, foundMsg.arg );
-            assertEquals( expectedMessage.arg2, foundMsg.arg2 );
+            Assert.AreEqual( expectedMessage.arg, foundMsg.arg );
+            Assert.AreEqual( expectedMessage.arg2, foundMsg.arg2 );
ErrorManager.ResetErrorState(); // wack errors for next test
}

@@ -755,9 +757,11 @@ namespace AntlrUnitTests
StringBuilder buf = new StringBuilder();
System.IO.TextReader @in;
System.Threading.Thread sucker;
-            public StreamVacuum( System.IO.StreamReader @in )
+            string inputFile;
+            public StreamVacuum( System.IO.StreamReader @in, string inputFile )
{
this.@in = @in;
+                this.inputFile = inputFile;
}
public void start()
{
@@ -771,6 +775,9 @@ namespace AntlrUnitTests
string line = @in.ReadLine();
while ( line != null )
{
+                        if (line.StartsWith(inputFile))
+                            line = line.Substring(inputFile.Length + 1);
+
buf.AppendLine( line );
//buf.append( '\n' );
line = @in.ReadLine();
@@ -1149,51 +1156,6 @@ namespace AntlrUnitTests
return nset.ToElementString();
}

-        protected static void assertEquals<T>( T expecting, T found )
-        {
-            Assert.AreEqual( expecting, found );
-        }
-
-        protected static void assertEquals<T>( string message, T expecting, T found )
-        {
-            Assert.AreEqual( expecting, found, message );
-        }
-
-        protected static void assertFalse( string message, bool condition )
-        {
-            Assert.IsFalse( condition, message );
-        }
-
-        protected static void assertTrue( bool condition )
-        {
-            Assert.IsTrue( condition );
-        }
-
-        protected static void assertTrue( string message, bool condition )
-        {
-            Assert.IsTrue( condition, message );
-        }
-
-        protected static void assertNotNull( object value )
-        {
-            Assert.IsNotNull( value );
-        }
-
-        protected static void assertNotNull( string message, object value )
-        {
-            Assert.IsNotNull( value, message );
-        }
-
-        protected static void assertNull( object value )
-        {
-            Assert.IsNull( value );
-        }
-
-        protected static void assertNull( string message, object value )
-        {
-            Assert.IsNull( value, message );
-        }
-
public class FilteringTokenStream : CommonTokenStream
{
private HashSet<int> _hide = new HashSet<int>();
diff --git a/Antlr3.Test/StringTemplateTests.cs b/Antlr3.Test/StringTemplateTests.cs
index dc3a057..24144cb 100644
--- a/Antlr3.Test/StringTemplateTests.cs
+++ b/Antlr3.Test/StringTemplateTests.cs
@@ -1536,7 +1536,7 @@ namespace AntlrUnitTests
//a.SetAttribute("name", "Terence");
b.SetAttribute( "name", "Terence" );
string expecting = "<b>Terence Parr</b>";
-            //assertEquals(a.toString(), expecting);
+            //Assert.AreEqual(a.toString(), expecting);
Assert.AreEqual( b.ToString(), expecting );
}

@@ -1550,7 +1550,7 @@ namespace AntlrUnitTests
//a.SetAttribute("name", "Terence");
b.SetAttribute( "name", "Terence" );
string expecting = "<b>Terence Parr</b>";
-            //assertEquals(expecting, a.toString());
+            //Assert.AreEqual(expecting, a.toString());
Assert.AreEqual( expecting, b.ToString() );
}

@@ -1564,7 +1564,7 @@ namespace AntlrUnitTests
//a.SetAttribute("name", "Terence");
b.SetAttribute( "name", "Terence" );
string expecting = "<b>Terence Parr=</b>";
-            //assertEquals(expecting, a.toString());
+            //Assert.AreEqual(expecting, a.toString());
Assert.AreEqual( expecting, b.ToString() );
}

@@ -1971,7 +1971,7 @@ namespace AntlrUnitTests
[TestMethod]
public void TestObjectPropertyReference()
{
-            //assertEquals(expecting, t.toString());
+            //Assert.AreEqual(expecting, t.toString());
StringTemplateGroup group =
new StringTemplateGroup( "dummy", "." );
StringTemplate t =
diff --git a/Antlr3.Test/TestASTConstruction.cs b/Antlr3.Test/TestASTConstruction.cs
index 5f5f67d..8608726 100644
--- a/Antlr3.Test/TestASTConstruction.cs
+++ b/Antlr3.Test/TestASTConstruction.cs
@@ -53,7 +53,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT A <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -65,7 +65,7 @@ namespace AntlrUnitTests
string expecting =
"(rule A ARG RET scope (BLOCK (ALT (+ (BLOCK (ALT B <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "A" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -77,7 +77,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (+ (BLOCK (ALT b <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -89,7 +89,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (+ (BLOCK (ALT b <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -101,7 +101,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (? (BLOCK (ALT b <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -113,7 +113,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (? (BLOCK (ALT b <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -125,7 +125,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (* (BLOCK (ALT b <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -137,7 +137,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (* (BLOCK (ALT b <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -148,7 +148,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (* (BLOCK (ALT 'a' <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -159,7 +159,7 @@ namespace AntlrUnitTests
string expecting =
"(rule B ARG RET scope (BLOCK (ALT (* (BLOCK (ALT 'b' <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "B" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -170,7 +170,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (* (BLOCK (ALT 'while' <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -181,7 +181,7 @@ namespace AntlrUnitTests
string expecting =
"(rule B ARG RET scope (BLOCK (ALT (* (BLOCK (ALT 'while' <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "B" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -192,7 +192,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (+ (BLOCK (ALT 'a' <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -203,7 +203,7 @@ namespace AntlrUnitTests
string expecting =
"(rule B ARG RET scope (BLOCK (ALT (+ (BLOCK (ALT 'b' <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "B" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -214,7 +214,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (? (BLOCK (ALT 'a' <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -225,7 +225,7 @@ namespace AntlrUnitTests
string expecting =
"(rule B ARG RET scope (BLOCK (ALT (? (BLOCK (ALT 'b' <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "B" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -236,7 +236,7 @@ namespace AntlrUnitTests
string expecting =
"(rule ID ARG RET scope (BLOCK (ALT (+ (BLOCK (ALT (.. 'a' 'z') <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "ID" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -247,7 +247,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (= x ID) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -258,7 +258,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (? (BLOCK (ALT (= x ID) <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -269,7 +269,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (* (BLOCK (ALT (= x ID) <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -281,7 +281,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (= x b) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -292,7 +292,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (= x (BLOCK (ALT A <end-of-alt>) (ALT B <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -303,7 +303,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (= x (~ (BLOCK (ALT A <end-of-alt>) (ALT B <end-of-alt>) <end-of-block>))) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -314,7 +314,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (+= x (~ (BLOCK (ALT A <end-of-alt>) (ALT B <end-of-alt>) <end-of-block>))) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -325,7 +325,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (+ (BLOCK (ALT (+= x (~ (BLOCK (ALT A <end-of-alt>) (ALT B <end-of-alt>) <end-of-block>))) <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -337,7 +337,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (+ (BLOCK (ALT (= x b) <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -348,7 +348,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (* (BLOCK (ALT (+= x ID) <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -359,7 +359,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (* (BLOCK (ALT (+= x 'int') <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -372,7 +372,7 @@ namespace AntlrUnitTests
string expecting =
"(rule a ARG RET scope (BLOCK (ALT (+ (BLOCK (ALT (+= x b) <end-of-alt>) <end-of-block>)) <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "a" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -384,7 +384,7 @@ namespace AntlrUnitTests
string expecting =
"(rule synpred1_Expr ARG RET scope (BLOCK (ALT '*' <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "synpred1_Expr" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -396,7 +396,7 @@ namespace AntlrUnitTests
string expecting =
"(rule synpred1_Expr ARG RET scope (BLOCK (ALT blort 'x' <end-of-alt>) <end-of-block>) <end-of-rule>)";
string found = g.GetRule( "synpred1_Expr" ).tree.ToStringTree();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

}
diff --git a/Antlr3.Test/TestAttributes.cs b/Antlr3.Test/TestAttributes.cs
index 6ab003e..a844e0f 100644
--- a/Antlr3.Test/TestAttributes.cs
+++ b/Antlr3.Test/TestAttributes.cs
@@ -78,7 +78,7 @@ namespace AntlrUnitTests
StringTemplate actionST = new StringTemplate( templates, "<action>" );
actionST.SetAttribute( "action", rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -105,7 +105,7 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -132,9 +132,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -159,9 +159,9 @@ namespace AntlrUnitTests
ActionTranslator translator = new ActionTranslator( generator, "a",
new CommonToken( ANTLRParser.ACTION, action ), 1 );
string rawTranslation = translator.Translate();
-            assertEquals( expecting, rawTranslation );
+            Assert.AreEqual( expecting, rawTranslation );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -182,15 +182,15 @@ namespace AntlrUnitTests
Rule r = g.GetRule( "a" );
AttributeScope parameters = r.parameterScope;
var attrs = parameters.Attributes;
-            assertEquals( "attribute mismatch", "String[] ick", attrs.ElementAt( 0 ).Decl.ToString() );
-            assertEquals( "parameter name mismatch", "ick", attrs.ElementAt( 0 ).Name );
-            assertEquals( "declarator mismatch", "String[]", attrs.ElementAt( 0 ).Type );
+            Assert.AreEqual("String[] ick", attrs.ElementAt(0).Decl.ToString(), "attribute mismatch");
+            Assert.AreEqual("ick", attrs.ElementAt(0).Name, "parameter name mismatch");
+            Assert.AreEqual("String[]", attrs.ElementAt(0).Type, "declarator mismatch");

-            assertEquals( "attribute mismatch", "int i", attrs.ElementAt( 1 ).Decl.ToString() );
-            assertEquals( "parameter name mismatch", "i", attrs.ElementAt( 1 ).Name );
-            assertEquals( "declarator mismatch", "int", attrs.ElementAt( 1 ).Type );
+            Assert.AreEqual("int i", attrs.ElementAt(1).Decl.ToString(), "attribute mismatch");
+            Assert.AreEqual("i", attrs.ElementAt(1).Name, "parameter name mismatch");
+            Assert.AreEqual("int", attrs.ElementAt(1).Type, "declarator mismatch");

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -214,7 +214,7 @@ namespace AntlrUnitTests
ActionTranslator translator = new ActionTranslator( generator, "a",
new CommonToken( ANTLRParser.ACTION, action ), 1 );
string rawTranslation = translator.Translate();
-            assertEquals( expecting, rawTranslation );
+            Assert.AreEqual( expecting, rawTranslation );

//IList<String> expectArgs = new List<String>() {
//    {add("34");}
@@ -235,10 +235,10 @@ namespace AntlrUnitTests
} );

List<string> actualArgs = CodeGenerator.GetListOfArgumentsFromAction( action, ',' );
-            //assertEquals( "args mismatch", expectArgs, actualArgs );
-            assertTrue( "args mismatch", expectArgs.SequenceEqual( actualArgs ) );
+            //Assert.AreEqual( "args mismatch", expectArgs, actualArgs );
+            Assert.IsTrue(expectArgs.SequenceEqual(actualArgs), "args mismatch");

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -262,9 +262,9 @@ namespace AntlrUnitTests
ActionTranslator translator = new ActionTranslator( generator, "a",
new CommonToken( ANTLRParser.ACTION, action ), 1 );
string rawTranslation = translator.Translate();
-            assertEquals( expecting, rawTranslation );
+            Assert.AreEqual( expecting, rawTranslation );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -289,9 +289,9 @@ namespace AntlrUnitTests
new CommonToken( ANTLRParser.ACTION, action ), 1 );
string rawTranslation =
translator.Translate();
-            assertEquals( expecting, rawTranslation );
+            Assert.AreEqual( expecting, rawTranslation );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -309,9 +309,9 @@ namespace AntlrUnitTests
Grammar g = new Grammar( grammar );
Rule ra = g.GetRule( "a" );
var attrs = ra.parameterScope.Attributes;
-            assertEquals( "attribute mismatch", "HashMap<String,String> foo", attrs.ElementAt( 0 ).Decl.ToString() );
-            assertEquals( "parameter name mismatch", "foo", attrs.ElementAt( 0 ).Name );
-            assertEquals( "declarator mismatch", "HashMap<String,String>", attrs.ElementAt( 0 ).Type );
+            Assert.AreEqual("HashMap<String,String> foo", attrs.ElementAt(0).Decl.ToString(), "attribute mismatch");
+            Assert.AreEqual("foo", attrs.ElementAt(0).Name, "parameter name mismatch");
+            Assert.AreEqual("HashMap<String,String>", attrs.ElementAt(0).Type, "declarator mismatch");

AntlrTool antlr = newTool();
CodeGenerator generator = new CodeGenerator( antlr, g, "Java" );
@@ -325,9 +325,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -346,17 +346,17 @@ namespace AntlrUnitTests
Rule ra = g.GetRule( "a" );
var attrs = ra.parameterScope.Attributes;

-            assertEquals( "attribute mismatch", "HashMap<String,String> foo", attrs.ElementAt( 0 ).Decl.ToString().Trim() );
-            assertEquals( "parameter name mismatch", "foo", attrs.ElementAt( 0 ).Name );
-            assertEquals( "declarator mismatch", "HashMap<String,String>", attrs.ElementAt( 0 ).Type );
+            Assert.AreEqual("HashMap<String,String> foo", attrs.ElementAt(0).Decl.ToString().Trim(), "attribute mismatch");
+            Assert.AreEqual("foo", attrs.ElementAt(0).Name, "parameter name mismatch");
+            Assert.AreEqual("HashMap<String,String>", attrs.ElementAt(0).Type, "declarator mismatch");

-            assertEquals( "attribute mismatch", "int x", attrs.ElementAt( 1 ).Decl.ToString().Trim() );
-            assertEquals( "parameter name mismatch", "x", attrs.ElementAt( 1 ).Name );
-            assertEquals( "declarator mismatch", "int", attrs.ElementAt( 1 ).Type );
+            Assert.AreEqual("int x", attrs.ElementAt(1).Decl.ToString().Trim(), "attribute mismatch");
+            Assert.AreEqual("x", attrs.ElementAt(1).Name, "parameter name mismatch");
+            Assert.AreEqual("int", attrs.ElementAt(1).Type, "declarator mismatch");

-            assertEquals( "attribute mismatch", "List<String> duh", attrs.ElementAt( 2 ).Decl.ToString().Trim() );
-            assertEquals( "parameter name mismatch", "duh", attrs.ElementAt( 2 ).Name );
-            assertEquals( "declarator mismatch", "List<String>", attrs.ElementAt( 2 ).Type );
+            Assert.AreEqual("List<String> duh", attrs.ElementAt(2).Decl.ToString().Trim(), "attribute mismatch");
+            Assert.AreEqual("duh", attrs.ElementAt(2).Name, "parameter name mismatch");
+            Assert.AreEqual("List<String>", attrs.ElementAt(2).Type, "declarator mismatch");

AntlrTool antlr = newTool();
CodeGenerator generator = new CodeGenerator( antlr, g, "Java" );
@@ -370,9 +370,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -385,11 +385,11 @@ namespace AntlrUnitTests
Grammar g = new Grammar( grammar );
Rule ra = g.GetRule( "a" );
var attrs = ra.returnScope.Attributes;
-            assertEquals( "attribute mismatch", "HashMap<String,String> foo", attrs.ElementAt( 0 ).Decl.ToString() );
-            assertEquals( "parameter name mismatch", "foo", attrs.ElementAt( 0 ).Name );
-            assertEquals( "declarator mismatch", "HashMap<String,String>", attrs.ElementAt( 0 ).Type );
+            Assert.AreEqual("HashMap<String,String> foo", attrs.ElementAt(0).Decl.ToString(), "attribute mismatch");
+            Assert.AreEqual("foo", attrs.ElementAt(0).Name, "parameter name mismatch");
+            Assert.AreEqual("HashMap<String,String>", attrs.ElementAt(0).Type, "declarator mismatch");

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -419,9 +419,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

/** $x.start refs are checked during translation not before so ANTLR misses
@@ -453,9 +453,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -471,12 +471,18 @@ namespace AntlrUnitTests
ErrorManager.SetErrorListener( equeue );
Grammar g = new Grammar(
"parser grammar t;\n" +
-                "a : x=b {" + action + "} ;\n" +
+                "a : x=b {###" + action + "!!!} ;\n" +
"b : B ;\n" );
AntlrTool antlr = newTool();
CodeGenerator generator = new CodeGenerator( antlr, g, "Java" );
g.CodeGenerator = generator;
generator.GenRecognizer(); // forces load of templates
+            StringTemplate codeST = generator.RecognizerST;
+            string code = codeST.ToString();
+            string found = code.Substring(code.IndexOf("###") + 3, code.IndexOf("!!!") - code.IndexOf("###") - 3);
+            Assert.AreEqual(expecting, found);
+
+#if false
ActionTranslator translator = new ActionTranslator( generator, "a",
new CommonToken( ANTLRParser.ACTION, action ), 1 );
string rawTranslation =
@@ -484,10 +490,12 @@ namespace AntlrUnitTests
StringTemplateGroup templates =
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
-            string found = actionST.ToString();
-            assertEquals( expecting, found );
+            string code = actionST.ToString();
+            string found = code.Substring(code.IndexOf("###") + 3, code.IndexOf("!!!") - code.IndexOf("###") - 2);
+            Assert.AreEqual( expecting, found );
+#endif

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -513,7 +521,7 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

int expectedMsgID = ErrorManager.MSG_UNKNOWN_SIMPLE_ATTRIBUTE;
object expectedArg = "x";
@@ -549,9 +557,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -581,9 +589,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -610,9 +618,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

/* regression test for ANTLR-46 */
@@ -654,11 +662,11 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-                assertEquals( expecting, found );
+                Assert.AreEqual( expecting, found );
action = action2;
expecting = expecting2;
} while ( i++ < 1 );
-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -683,7 +691,7 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

int expectedMsgID = ErrorManager.MSG_UNKNOWN_SIMPLE_ATTRIBUTE;
object expectedArg = "x";
@@ -717,9 +725,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -748,9 +756,9 @@ namespace AntlrUnitTests
int startIndex = code.IndexOf("###") + 3;
int endIndex = code.IndexOf("!!!");
string found = code.Substring( startIndex, endIndex - startIndex );
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -767,7 +775,7 @@ namespace AntlrUnitTests
generator.GenRecognizer();

// error(132): <string>:2:9: reference $a is ambiguous; rule a is enclosing rule and referenced in the production
-            assertEquals( "unexpected errors: " + equeue, 1, equeue.errors.Count );
+            Assert.AreEqual(1, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -796,9 +804,9 @@ namespace AntlrUnitTests
int startIndex = code.IndexOf("###") + 3;
int endIndex = code.IndexOf("!!!");
string found = code.Substring( startIndex, endIndex - startIndex );
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -825,9 +833,9 @@ namespace AntlrUnitTests
int startIndex = code.IndexOf("###") + 3;
int endIndex = code.IndexOf("!!!");
string found = code.Substring(startIndex, endIndex - startIndex);
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -854,7 +862,7 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

int expectedMsgID = ErrorManager.MSG_INVALID_RULE_PARAMETER_REF;
object expectedArg = "a";
@@ -889,7 +897,7 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

int expectedMsgID = ErrorManager.MSG_INVALID_RULE_SCOPE_ATTRIBUTE_REF;
object expectedArg = "a";
@@ -923,7 +931,7 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

int expectedMsgID = ErrorManager.MSG_UNKNOWN_RULE_ATTRIBUTE;
object expectedArg = "a";
@@ -1011,7 +1019,7 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

int expectedMsgID = ErrorManager.MSG_ATTRIBUTE_REF_NOT_IN_RULE;
object expectedArg = "x";
@@ -1042,7 +1050,7 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

int expectedMsgID = ErrorManager.MSG_ATTRIBUTE_REF_NOT_IN_RULE;
object expectedArg = "x";
@@ -1082,9 +1090,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1105,7 +1113,7 @@ namespace AntlrUnitTests
ActionTranslator translator = new ActionTranslator( generator, "a",
new CommonToken( ANTLRParser.ACTION, action ), 1 );

-            assertEquals( "unexpected errors: " + equeue, 2, equeue.errors.Count );
+            Assert.AreEqual(2, equeue.errors.Count, "unexpected errors: " + equeue);

int expectedMsgID = ErrorManager.MSG_UNKNOWN_DYNAMIC_SCOPE;
object expectedArg = "Symbols";
@@ -1143,9 +1151,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1175,9 +1183,9 @@ namespace AntlrUnitTests
translator.Translate();
StringTemplateGroup templates =
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
-            assertEquals( expecting, rawTranslation );
+            Assert.AreEqual( expecting, rawTranslation );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1207,9 +1215,9 @@ namespace AntlrUnitTests
translator.Translate();
StringTemplateGroup templates =
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
-            assertEquals( expecting, rawTranslation );
+            Assert.AreEqual( expecting, rawTranslation );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1240,9 +1248,9 @@ namespace AntlrUnitTests
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();

-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1276,9 +1284,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1309,9 +1317,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1341,9 +1349,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1372,9 +1380,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1432,9 +1440,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1464,9 +1472,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1500,9 +1508,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1533,9 +1541,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1561,9 +1569,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1589,9 +1597,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1617,9 +1625,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1695,9 +1703,9 @@ namespace AntlrUnitTests
new StringTemplateGroup(".", typeof(AngleBracketTemplateLexer));
StringTemplate actionST = new StringTemplate(templates, rawTranslation);
String found = actionST.ToString();
-                assertEquals(expecting, found);
+                Assert.AreEqual(expecting, found);

-                assertEquals("unexpected errors: "+equeue, 0, equeue.errors.size());
+                Assert.AreEqual("unexpected errors: "+equeue, 0, equeue.errors.size());
}

[TestMethod] public void TestFullyQualifiedRefToListLabelInCurrentRule()
@@ -1724,9 +1732,9 @@ namespace AntlrUnitTests
new StringTemplateGroup(".", typeof(AngleBracketTemplateLexer));
StringTemplate actionST = new StringTemplate(templates, rawTranslation);
String found = actionST.ToString();
-            assertEquals(expecting, found);
+            Assert.AreEqual(expecting, found);

-            assertEquals("unexpected errors: "+equeue, 0, equeue.errors.size());
+            Assert.AreEqual("unexpected errors: "+equeue, 0, equeue.errors.size());
}
*/
[TestMethod]
@@ -1753,9 +1761,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1783,9 +1791,9 @@ namespace AntlrUnitTests
int startIndex = code.IndexOf("###") + 3;
int endIndex = code.IndexOf("!!!");
string found = code.Substring(startIndex, endIndex - startIndex);
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1815,9 +1823,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1844,9 +1852,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1859,23 +1867,18 @@ namespace AntlrUnitTests
Grammar g = new Grammar(
"parser grammar t;\n" +
"options {output=template;}\n" +
-                "a : {" + action + "}\n" +
+                "a : {###" + action + "!!!}\n" +
"  ;\n" );
AntlrTool antlr = newTool();
CodeGenerator generator = new CodeGenerator( antlr, g, "Java" );
g.CodeGenerator = generator;
generator.GenRecognizer(); // forces load of templates
-            ActionTranslator translator = new ActionTranslator( generator, "a",
-                                                                         new CommonToken( ANTLRParser.ACTION, action ), 1 );
-            string rawTranslation =
-                translator.Translate();
-            StringTemplateGroup templates =
-                new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
-            StringTemplate actionST = new StringTemplate( templates, rawTranslation );
-            string found = actionST.ToString();
-            assertEquals( expecting, found );
+            StringTemplate codeST = generator.RecognizerST;
+            string code = codeST.ToString();
+            string found = code.Substring(code.IndexOf("###") + 3, code.IndexOf("!!!") - code.IndexOf("###") - 3);
+            Assert.AreEqual(expecting, found);

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1900,9 +1903,9 @@ namespace AntlrUnitTests
int startIndex = code.IndexOf("###") + 3;
int endIndex = code.IndexOf("!!!");
string found = code.Substring(startIndex, endIndex - startIndex);
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1933,9 +1936,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
translator = new ActionTranslator( generator,
"a",
new CommonToken( ANTLRParser.ACTION, action2 ), 2 );
@@ -1946,9 +1949,9 @@ namespace AntlrUnitTests
actionST = new StringTemplate( templates, rawTranslation );
found = actionST.ToString();

-            assertEquals( expecting2, found );
+            Assert.AreEqual( expecting2, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -1962,8 +1965,8 @@ namespace AntlrUnitTests
ErrorManager.SetErrorListener( equeue );
Grammar g = new Grammar(
"grammar t;\n" +
-                "a : b {" + action + "}\n" +
-                "  | c {" + action2 + "}\n" +
+                "a : b {###" + action + "!!!}\n" +
+                "  | c {^^^" + action2 + "&&&}\n" +
"  ;\n" +
"b : 'a';\n" +
"c : '0';\n" );
@@ -1971,30 +1974,14 @@ namespace AntlrUnitTests
CodeGenerator generator = new CodeGenerator( antlr, g, "Java" );
g.CodeGenerator = generator;
generator.GenRecognizer(); // forces load of templates
-            ActionTranslator translator = new ActionTranslator( generator, "a",
-                                                                         new CommonToken( ANTLRParser.ACTION, action ), 1 );
-            string rawTranslation =
-                translator.Translate();
-            StringTemplateGroup templates =
-                new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
-            StringTemplate actionST = new StringTemplate( templates, rawTranslation );
-            string found = actionST.ToString();
-            assertEquals( expecting, found );
-
-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
-            translator = new ActionTranslator( generator,
-                                                   "a",
-                                                   new CommonToken( ANTLRParser.ACTION, action2 ), 2 );
-            rawTranslation =
-                translator.Translate();
-            templates =
-                new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
-            actionST = new StringTemplate( templates, rawTranslation );
-            found = actionST.ToString();
-
-            assertEquals( expecting2, found );
+            StringTemplate codeST = generator.RecognizerST;
+            string code = codeST.ToString();
+            string found = code.Substring(code.IndexOf("###") + 3, code.IndexOf("!!!") - code.IndexOf("###") - 3);
+            Assert.AreEqual(expecting, found);
+            found = code.Substring(code.IndexOf("^^^") + 3, code.IndexOf("&&&") - code.IndexOf("^^^") - 3);
+            Assert.AreEqual(expecting2, found);

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2025,7 +2012,7 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

int expectedMsgID = ErrorManager.MSG_UNKNOWN_DYNAMIC_SCOPE_ATTRIBUTE;
object expectedArg = "a";
@@ -2063,7 +2050,7 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

int expectedMsgID = ErrorManager.MSG_UNKNOWN_DYNAMIC_SCOPE_ATTRIBUTE;
object expectedArg = "Symbols";
@@ -2101,7 +2088,7 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

int expectedMsgID = ErrorManager.MSG_UNKNOWN_SIMPLE_ATTRIBUTE;
object expectedArg = "n";
@@ -2205,9 +2192,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2235,9 +2222,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2265,9 +2252,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2295,9 +2282,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2327,9 +2314,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2354,9 +2341,9 @@ namespace AntlrUnitTests
int startIndex = code.IndexOf("###") + 3;
int endIndex = code.IndexOf("!!!");
string found = code.Substring(startIndex, endIndex - startIndex);
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2381,9 +2368,9 @@ namespace AntlrUnitTests
int startIndex = code.IndexOf("###") + 3;
int endIndex = code.IndexOf("!!!");
string found = code.Substring(startIndex, endIndex - startIndex);
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2409,9 +2396,9 @@ namespace AntlrUnitTests
int startIndex = code.IndexOf("###") + 3;
int endIndex = code.IndexOf("!!!");
string found = code.Substring(startIndex, endIndex - startIndex);
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2439,9 +2426,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2469,9 +2456,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2500,7 +2487,7 @@ namespace AntlrUnitTests

[TestMethod]
public void TestRuleLabelOnTwoDifferentRulesAST() /*throws Exception*/ {
-            Assert.Inconclusive( "I broke this test while trying to fix return values on another test..." );
+            //Assert.Inconclusive( "I broke this test while trying to fix return values on another test..." );
string grammar =
"grammar T;\n" +
"options {output=AST;}\n" +
@@ -2511,12 +2498,12 @@ namespace AntlrUnitTests
string expecting = "[a, b]" + NewLine + "a b" + NewLine;
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"s", "a b", false );
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
public void TestRuleLabelOnTwoDifferentRulesTemplate() /*throws Exception*/ {
-            Assert.Inconclusive( "I broke this test while trying to fix return values on another test..." );
+            //Assert.Inconclusive( "I broke this test while trying to fix return values on another test..." );
string grammar =
"grammar T;\n" +
"options {output=template;}\n" +
@@ -2527,7 +2514,7 @@ namespace AntlrUnitTests
string expecting = "[hi, mom]" + NewLine;
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"s", "a b", false );
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -2582,16 +2569,16 @@ namespace AntlrUnitTests
"grammar t;\n" +
"a : r ;\n" +
"r returns [int x=0] : 'a' {$x = 4;} ;\n" );
-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);

Rule r = g.GetRule( "r" );
AttributeScope retScope = r.returnScope;
var parameters = retScope.Attributes;
-            assertNotNull( "missing return action", parameters );
-            assertEquals( 1, parameters.Count );
+            Assert.IsNotNull(parameters, "missing return action");
+            Assert.AreEqual( 1, parameters.Count );
string found = parameters.ElementAt( 0 ).ToString();
string expecting = "int x=0";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -2602,16 +2589,16 @@ namespace AntlrUnitTests
"grammar t;\n" +
"a : r ;\n" +
"r returns [int x=0, int y, String s=new String(\"foo\")] : 'a' {$x = 4;} ;\n" );
-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);

Rule r = g.GetRule( "r" );
AttributeScope retScope = r.returnScope;
var parameters = retScope.Attributes;
-            assertNotNull( "missing return action", parameters );
-            assertEquals( 3, parameters.Count );
-            assertEquals( "int x=0", parameters.ElementAt( 0 ).ToString() );
-            assertEquals( "int y", parameters.ElementAt( 1 ).ToString() );
-            assertEquals( "String s=new String(\"foo\")", parameters.ElementAt( 2 ).ToString() );
+            Assert.IsNotNull(parameters, "missing return action");
+            Assert.AreEqual( 3, parameters.Count );
+            Assert.AreEqual( "int x=0", parameters.ElementAt( 0 ).ToString() );
+            Assert.AreEqual( "int y", parameters.ElementAt( 1 ).ToString() );
+            Assert.AreEqual( "String s=new String(\"foo\")", parameters.ElementAt( 2 ).ToString() );
}

[TestMethod]
@@ -2622,16 +2609,16 @@ namespace AntlrUnitTests
"grammar t;\n" +
"a : r ;\n" +
"r returns [int (*x)()=NULL] : 'a' ;\n" );
-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);

Rule r = g.GetRule( "r" );
AttributeScope retScope = r.returnScope;
var parameters = retScope.Attributes;
-            assertNotNull( "missing return action", parameters );
-            assertEquals( 1, parameters.Count );
+            Assert.IsNotNull(parameters, "missing return action");
+            Assert.AreEqual( 1, parameters.Count );
string found = parameters.ElementAt( 0 ).ToString();
string expecting = "int (*)() x=NULL";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -2725,9 +2712,9 @@ namespace AntlrUnitTests
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();

-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2755,9 +2742,9 @@ namespace AntlrUnitTests
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();

-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2785,9 +2772,9 @@ namespace AntlrUnitTests
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();

-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2803,7 +2790,7 @@ namespace AntlrUnitTests
g.CodeGenerator = generator;
generator.GenRecognizer(); // forces load of templates

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2818,7 +2805,7 @@ namespace AntlrUnitTests
CodeGenerator generator = new CodeGenerator( antlr, g, "Java" );
g.CodeGenerator = generator;
generator.GenRecognizer(); // forces load of templates
-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2833,7 +2820,7 @@ namespace AntlrUnitTests
CodeGenerator generator = new CodeGenerator( antlr, g, "Java" );
g.CodeGenerator = generator;
generator.GenRecognizer(); // forces load of templates
-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2848,7 +2835,7 @@ namespace AntlrUnitTests
CodeGenerator generator = new CodeGenerator( antlr, g, "Java" );
g.CodeGenerator = generator;
generator.GenRecognizer(); // forces load of templates
-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2898,9 +2885,9 @@ namespace AntlrUnitTests
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();

-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2928,9 +2915,9 @@ namespace AntlrUnitTests
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();

-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -2957,9 +2944,9 @@ namespace AntlrUnitTests
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();

-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -3059,9 +3046,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -3089,7 +3076,7 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -3166,9 +3153,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -3195,9 +3182,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -3224,9 +3211,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -3295,7 +3282,7 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -3362,7 +3349,7 @@ namespace AntlrUnitTests
[TestMethod]
public void TestAssignToTreeNodeAttribute() /*throws Exception*/ {
string action = "$tree.scope = localScope;";
-            string expecting = "(()retval.tree).scope = localScope;";
+            string expecting = "((Object)retval.tree).scope = localScope;";
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
Grammar g = new Grammar(
@@ -3373,7 +3360,7 @@ namespace AntlrUnitTests
"   Scope localScope=null;\n" +
"}\n" +
"@after {\n" +
-                "   $tree.scope = localScope;\n" +
+                "   ###$tree.scope = localScope;!!!\n" +
"}\n" +
"   : 'a' -> ^('a')\n" +
";" );
@@ -3381,17 +3368,10 @@ namespace AntlrUnitTests
CodeGenerator generator = new CodeGenerator( antlr, g, "Java" );
g.CodeGenerator = generator;
generator.GenRecognizer(); // forces load of templates
-            ActionTranslator translator = new ActionTranslator( generator,
-                                                                         "rule",
-                                                                         new CommonToken( ANTLRParser.ACTION, action ), 1 );
-            string rawTranslation =
-                translator.Translate();
-            StringTemplateGroup templates =
-                new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
-            StringTemplate actionST = new StringTemplate( templates, rawTranslation );
-            string found = actionST.ToString();
-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
-            assertEquals( expecting, found );
+            StringTemplate codeST = generator.RecognizerST;
+            string code = codeST.ToString();
+            string found = code.Substring(code.IndexOf("###") + 3, code.IndexOf("!!!") - code.IndexOf("###") - 3);
+            Assert.AreEqual(expecting, found);
}

[TestMethod]
@@ -3420,8 +3400,8 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
-            assertEquals( expecting, found );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -3465,13 +3445,13 @@ namespace AntlrUnitTests
}
}
}
-            assertFalse( "action translator used scopeSetAttributeRef template in comparison!", foundScopeSetAttributeRef );
+            Assert.IsFalse(foundScopeSetAttributeRef, "action translator used scopeSetAttributeRef template in comparison!");
StringTemplateGroup templates =
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
-            assertEquals( expecting, found );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -3499,7 +3479,7 @@ namespace AntlrUnitTests
int startIndex = code.IndexOf("###") + 3;
int endIndex = code.IndexOf("!!!");
string found = code.Substring(startIndex, endIndex - startIndex);
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

int expectedMsgID = ErrorManager.MSG_UNKNOWN_RULE_ATTRIBUTE;
object expectedArg = "a";
@@ -3535,9 +3515,9 @@ namespace AntlrUnitTests
int startIndex = code.IndexOf("###") + 3;
int endIndex = code.IndexOf("!!!");
string found = code.Substring(startIndex, endIndex - startIndex);
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -3567,9 +3547,9 @@ namespace AntlrUnitTests
new StringTemplateGroup( ".", typeof( AngleBracketTemplateLexer ) );
StringTemplate actionST = new StringTemplate( templates, rawTranslation );
string found = actionST.ToString();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -3613,12 +3593,11 @@ namespace AntlrUnitTests
foundMsg = m;
}
}
-            assertTrue( "no error; " + expectedMessage.msgID + " expected", equeue.errors.Count > 0 );
-            assertNotNull( "couldn't find expected error: " + expectedMessage.msgID + " in " + equeue, foundMsg );
-            assertTrue( "error is not a GrammarSemanticsMessage",
-                       foundMsg is GrammarSemanticsMessage );
-            assertEquals( expectedMessage.arg, foundMsg.arg );
-            assertEquals( expectedMessage.arg2, foundMsg.arg2 );
+            Assert.IsTrue(equeue.errors.Count > 0, "no error; " + expectedMessage.msgID + " expected");
+            Assert.IsNotNull(foundMsg, "couldn't find expected error: " + expectedMessage.msgID + " in " + equeue);
+            Assert.IsTrue(foundMsg is GrammarSemanticsMessage, "error is not a GrammarSemanticsMessage");
+            Assert.AreEqual( expectedMessage.arg, foundMsg.arg );
+            Assert.AreEqual( expectedMessage.arg2, foundMsg.arg2 );
}

/** Allow checking for multiple errors in one test */
@@ -3648,7 +3627,7 @@ namespace AntlrUnitTests
}
for ( int i = 0; i < equeue.errors.Count; i++ )
{
-                assertTrue( "unexpected error:" + equeue.errors[i], ( (Boolean)messageExpected[i] ) );
+                Assert.IsTrue( ( (Boolean)messageExpected[i] ), "unexpected error:" + equeue.errors[i] );
}
}
}
diff --git a/Antlr3.Test/TestAutoAST.cs b/Antlr3.Test/TestAutoAST.cs
index 9ce39d0..66b5baa 100644
--- a/Antlr3.Test/TestAutoAST.cs
+++ b/Antlr3.Test/TestAutoAST.cs
@@ -50,7 +50,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "abc 34", debug );
-            assertEquals( "abc 34" + NewLine, found );
+            Assert.AreEqual( "abc 34" + NewLine, found );
}

[TestMethod]
@@ -64,7 +64,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "abc 34", debug );
-            assertEquals( "abc 34" + NewLine, found );
+            Assert.AreEqual( "abc 34" + NewLine, found );
}

[TestMethod]
@@ -78,7 +78,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "abc 34", debug );
-            assertEquals( "(abc 34)" + NewLine, found );
+            Assert.AreEqual( "(abc 34)" + NewLine, found );
}

[TestMethod]
@@ -92,7 +92,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "34 abc", debug );
-            assertEquals( "(abc 34)" + NewLine, found );
+            Assert.AreEqual( "(abc 34)" + NewLine, found );
}

[TestMethod]
@@ -106,7 +106,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34 dag 4532", debug );
-            assertEquals( "abc 4532" + NewLine, found );
+            Assert.AreEqual( "abc 4532" + NewLine, found );
}

[TestMethod]
@@ -120,7 +120,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a 1 b", debug );
-            assertEquals( "(b a 1)" + NewLine, found );
+            Assert.AreEqual( "(b a 1)" + NewLine, found );
}

[TestMethod]
@@ -134,7 +134,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "void foo;", debug );
-            assertEquals( "(void foo ;)" + NewLine, found );
+            Assert.AreEqual( "(void foo ;)" + NewLine, found );
}

[TestMethod]
@@ -148,7 +148,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "void foo;", debug );
-            assertEquals( "(void foo ;)" + NewLine, found );
+            Assert.AreEqual( "(void foo ;)" + NewLine, found );
}

[TestMethod]
@@ -162,7 +162,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "void foo;", debug );
-            assertEquals( "(foo void ;)" + NewLine, found );
+            Assert.AreEqual( "(foo void ;)" + NewLine, found );
}

[TestMethod]
@@ -176,7 +176,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "void foo;", debug );
-            assertEquals( "(foo void ;)" + NewLine, found );
+            Assert.AreEqual( "(foo void ;)" + NewLine, found );
}

[TestMethod]
@@ -190,7 +190,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "void foo;", debug );
-            assertEquals( "(foo void ;)" + NewLine, found );
+            Assert.AreEqual( "(foo void ;)" + NewLine, found );
}

[TestMethod]
@@ -205,7 +205,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "void foo;", debug );
-            assertEquals( "void ;" + NewLine, found );
+            Assert.AreEqual( "void ;" + NewLine, found );
}

[TestMethod]
@@ -219,7 +219,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a 34 c", debug );
-            assertEquals( "(34 a c)" + NewLine, found );
+            Assert.AreEqual( "(34 a c)" + NewLine, found );
}

[TestMethod]
@@ -233,7 +233,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a 34 c", debug );
-            assertEquals( "(c (34 a))" + NewLine, found );
+            Assert.AreEqual( "(c (34 a))" + NewLine, found );
}

[TestMethod]
@@ -247,7 +247,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a 34 * b 9 * c", debug );
-            assertEquals( "(* (* (a 34) b 9) c)" + NewLine, found );
+            Assert.AreEqual( "(* (* (a 34) b 9) c)" + NewLine, found );
}

[TestMethod]
@@ -261,7 +261,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "void a b;", debug );
-            assertEquals( "void a b ;" + NewLine, found );
+            Assert.AreEqual( "void a b ;" + NewLine, found );
}

[TestMethod]
@@ -276,7 +276,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "int a", debug );
-            assertEquals( "int a" + NewLine, found );
+            Assert.AreEqual( "int a" + NewLine, found );
}

[TestMethod]
@@ -291,7 +291,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "int a", debug );
-            assertEquals( "(int a)" + NewLine, found );
+            Assert.AreEqual( "(int a)" + NewLine, found );
}

[TestMethod]
@@ -306,7 +306,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "int a", debug );
-            assertEquals( "(int a)" + NewLine, found );
+            Assert.AreEqual( "(int a)" + NewLine, found );
}

[TestMethod]
@@ -321,7 +321,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "int a", debug );
-            assertEquals( "(int a)" + NewLine, found );
+            Assert.AreEqual( "(int a)" + NewLine, found );
}

[TestMethod]
@@ -335,7 +335,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a+b+c+d", debug );
-            assertEquals( "(+ (+ (+ a b) c) d)" + NewLine, found );
+            Assert.AreEqual( "(+ (+ (+ a b) c) d)" + NewLine, found );
}

[TestMethod]
@@ -350,7 +350,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a+b+c-d", debug );
-            assertEquals( "(- (+ (+ a b) c) d)" + NewLine, found );
+            Assert.AreEqual( "(- (+ (+ a b) c) d)" + NewLine, found );
}

[TestMethod]
@@ -366,7 +366,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"s", "3 exp 4 exp 5", debug );
-            assertEquals( "(exp 3 (exp 4 5))" + NewLine, found );
+            Assert.AreEqual( "(exp 3 (exp 4 5))" + NewLine, found );
}

[TestMethod]
@@ -380,7 +380,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc", debug );
-            assertEquals( "abc" + NewLine, found );
+            Assert.AreEqual( "abc" + NewLine, found );
}

[TestMethod]
@@ -394,7 +394,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "+abc", debug );
-            assertEquals( "(+ abc)" + NewLine, found );
+            Assert.AreEqual( "(+ abc)" + NewLine, found );
}

[TestMethod]
@@ -409,7 +409,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "+abc", debug );
-            assertEquals( "(+ abc)" + NewLine, found );
+            Assert.AreEqual( "(+ abc)" + NewLine, found );
}

[TestMethod]
@@ -423,7 +423,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a+b-c", debug );
-            assertEquals( "(- (+ a b) c)" + NewLine, found );
+            Assert.AreEqual( "(- (+ a b) c)" + NewLine, found );
}

[TestMethod]
@@ -437,7 +437,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "34+2", debug );
-            assertEquals( "34 + 2" + NewLine, found );
+            Assert.AreEqual( "34 + 2" + NewLine, found );
}

[TestMethod]
@@ -451,7 +451,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "34+2", debug );
-            assertEquals( "34 + 2" + NewLine, found );
+            Assert.AreEqual( "34 + 2" + NewLine, found );
}

[TestMethod]
@@ -465,7 +465,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "34+2", debug );
-            assertEquals( "34 + 2" + NewLine, found );
+            Assert.AreEqual( "34 + 2" + NewLine, found );
}

[TestMethod]
@@ -479,7 +479,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "34 55", debug );
-            assertEquals( "(34 55)" + NewLine, found );
+            Assert.AreEqual( "(34 55)" + NewLine, found );
}

[TestMethod]
@@ -493,7 +493,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "34 55", debug );
-            assertEquals( "(34 55)" + NewLine, found );
+            Assert.AreEqual( "(34 55)" + NewLine, found );
}

[TestMethod]
@@ -507,7 +507,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "34 55", debug );
-            assertEquals( "(34 55)" + NewLine, found );
+            Assert.AreEqual( "(34 55)" + NewLine, found );
}

[TestMethod]
@@ -522,7 +522,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "3+4+5", debug );
-            assertEquals( "(+ (+ 3 4) 5)" + NewLine, found );
+            Assert.AreEqual( "(+ (+ 3 4) 5)" + NewLine, found );
}

[TestMethod]
@@ -537,7 +537,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
-            assertEquals( "2nd id=b;a b" + NewLine, found );
+            Assert.AreEqual( "2nd id=b;a b" + NewLine, found );
}

[TestMethod]
@@ -552,7 +552,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
-            assertEquals( "2nd id=b;(b a)" + NewLine, found );
+            Assert.AreEqual( "2nd id=b;(b a)" + NewLine, found );
}

[TestMethod]
@@ -569,7 +569,7 @@ namespace AntlrUnitTests
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
string expecting = "id list=[[@0,0:0='a',<4>,1:0], [@2,2:2='b',<4>,1:2]];a b" + NewLine;
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -586,7 +586,7 @@ namespace AntlrUnitTests
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
string expecting = "id list=[[@0,0:0='a',<4>,1:0], [@2,2:2='b',<4>,1:2]];(a b)" + NewLine;
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -600,7 +600,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "a" + NewLine, found );
+            Assert.AreEqual( "a" + NewLine, found );
}

[TestMethod]
@@ -614,7 +614,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "", found );
+            Assert.AreEqual( "", found );
}

[TestMethod]
@@ -631,7 +631,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
-            assertEquals( "2nd x=b;a b" + NewLine, found );
+            Assert.AreEqual( "2nd x=b;a b" + NewLine, found );
}

[TestMethod]
@@ -647,7 +647,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
-            assertEquals( "x=(b a);(b a)" + NewLine, found );
+            Assert.AreEqual( "x=(b a);(b a)" + NewLine, found );
}

[TestMethod]
@@ -663,7 +663,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
-            assertEquals( "1st x=a;b" + NewLine, found );
+            Assert.AreEqual( "1st x=a;b" + NewLine, found );
}

[TestMethod]
@@ -680,7 +680,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b b c c d", debug );
-            assertEquals( "a b b c c d" + NewLine, found );
+            Assert.AreEqual( "a b b c c d" + NewLine, found );
}

[TestMethod]
@@ -695,7 +695,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "abc 34", debug );
-            assertEquals( "34" + NewLine + "abc 34" + NewLine, found );
+            Assert.AreEqual( "34" + NewLine + "abc 34" + NewLine, found );
}

[TestMethod]
@@ -709,7 +709,7 @@ namespace AntlrUnitTests
"WS: (' ' | '\\n' | '\\t')+ {$channel = HIDDEN;};\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"r", "abc 34 d", debug );
-            assertEquals( "abc 34 d" + NewLine, found );
+            Assert.AreEqual( "abc 34 d" + NewLine, found );
}

[TestMethod]
@@ -724,8 +724,8 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"decl", "int 34 x=1;", debug );
-            assertEquals( "line 1:4 extraneous input '34' expecting ID" + NewLine, this.stderrDuringParse );
-            assertEquals( "(int x 1)" + NewLine, found ); // tree gets correct x and 1 tokens
+            Assert.AreEqual( "line 1:4 extraneous input '34' expecting ID" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "(int x 1)" + NewLine, found ); // tree gets correct x and 1 tokens
}

[TestMethod]
@@ -741,8 +741,8 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"decl", "int =1;", debug );
-            assertEquals( "line 1:4 missing ID at '='" + NewLine, this.stderrDuringParse );
-            assertEquals( "(int <missing ID> 1)" + NewLine, found ); // tree gets invented ID token
+            Assert.AreEqual( "line 1:4 missing ID at '='" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "(int <missing ID> 1)" + NewLine, found ); // tree gets invented ID token
}

[TestMethod]
@@ -758,8 +758,8 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"decl", "x=1;", debug );
-            assertEquals( "line 1:0 mismatched input 'x' expecting set null" + NewLine, this.stderrDuringParse );
-            assertEquals( "(<error: x> x 1)" + NewLine, found ); // tree gets invented ID token
+            Assert.AreEqual( "line 1:0 mismatched input 'x' expecting set null" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "(<error: x> x 1)" + NewLine, found ); // tree gets invented ID token
}

[TestMethod]
@@ -773,8 +773,8 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "abc", debug );
-            assertEquals( "line 0:-1 missing INT at '<EOF>'" + NewLine, this.stderrDuringParse );
-            assertEquals( "abc <missing INT>" + NewLine, found );
+            Assert.AreEqual( "line 1:3 missing INT at '<EOF>'" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "abc <missing INT>" + NewLine, found );
}

[TestMethod]
@@ -789,8 +789,8 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "abc", debug );
-            assertEquals( "line 0:-1 mismatched input '<EOF>' expecting INT" + NewLine, this.stderrDuringParse );
-            assertEquals( "<mismatched token: [@-1,0:0='<no text>',<-1>,0:-1], resync=abc>" + NewLine, found );
+            Assert.AreEqual( "line 1:3 mismatched input '<EOF>' expecting INT" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "<mismatched token: [@1,3:3='<EOF>',<-1>,1:3], resync=abc>" + NewLine, found );
}

[TestMethod]
@@ -806,8 +806,8 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "abc ick 34", debug );
-            assertEquals( "line 1:4 extraneous input 'ick' expecting INT" + NewLine, this.stderrDuringParse );
-            assertEquals( "abc 34" + NewLine, found );
+            Assert.AreEqual( "line 1:4 extraneous input 'ick' expecting INT" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "abc 34" + NewLine, found );
}

[TestMethod]
@@ -821,8 +821,8 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "34", debug );
-            assertEquals( "line 1:0 missing ID at '34'" + NewLine, this.stderrDuringParse );
-            assertEquals( "<missing ID> 34" + NewLine, found );
+            Assert.AreEqual( "line 1:0 missing ID at '34'" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "<missing ID> 34" + NewLine, found );
}

[TestMethod]
@@ -841,8 +841,8 @@ namespace AntlrUnitTests
// finds an error at the first token, 34, and re-syncs.
// re-synchronizing does not consume a token because 34 follows
// ref to rule b (start of c). It then matches 34 in c.
-            assertEquals( "line 1:0 missing ID at '34'" + NewLine, this.stderrDuringParse );
-            assertEquals( "<missing ID> 34" + NewLine, found );
+            Assert.AreEqual( "line 1:0 missing ID at '34'" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "<missing ID> 34" + NewLine, found );
}

[TestMethod]
@@ -859,8 +859,8 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "*", debug );
-            assertEquals( "line 1:0 no viable alternative at input '*'" + NewLine, this.stderrDuringParse );
-            assertEquals( "<unexpected: [@0,0:0='*',<6>,1:0], resync=*>" + NewLine, found );
+            Assert.AreEqual( "line 1:0 no viable alternative at input '*'" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "<unexpected: [@0,0:0='*',<6>,1:0], resync=*>" + NewLine, found );
}


@@ -875,7 +875,7 @@ namespace AntlrUnitTests
"INT : '0'..'9'+;\n" +
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer", "a", "abc 34", debug );
-            assertEquals( NewLine, found );
+            Assert.AreEqual( NewLine, found );
}

}
diff --git a/Antlr3.Test/TestBufferedTreeNodeStream.cs b/Antlr3.Test/TestBufferedTreeNodeStream.cs
index b348489..c091f83 100644
--- a/Antlr3.Test/TestBufferedTreeNodeStream.cs
+++ b/Antlr3.Test/TestBufferedTreeNodeStream.cs
@@ -76,11 +76,11 @@ namespace AntlrUnitTests
stream.Consume(); // consume DN
stream.Consume(); // consume 102
stream.Seek( 7 );   // seek to 107
-            assertEquals( 107, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( 107, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume(); // consume 107
stream.Consume(); // consume UP
stream.Consume(); // consume UP
-            assertEquals( 104, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( 104, ( (ITree)stream.LT( 1 ) ).Type );
}
}
}
diff --git a/Antlr3.Test/TestCharDFAConversion.cs b/Antlr3.Test/TestCharDFAConversion.cs
index 869bd0c..4cf3209 100644
--- a/Antlr3.Test/TestCharDFAConversion.cs
+++ b/Antlr3.Test/TestCharDFAConversion.cs
@@ -60,10 +60,10 @@ namespace AntlrUnitTests
"A : 'a'..'z' '@' | 'k' '$' ;" );
g.CreateLookaheadDFAs();
string expecting =
-                ".s0-'k'->.s1\n" +
-                ".s0-{'a'..'j', 'l'..'z'}->:s2=>1\n" +
-                ".s1-'$'->:s3=>2\n" +
-                ".s1-'@'->:s2=>1\n";
+                ".s0-'k'->.s1" + NewLine +
+                ".s0-{'a'..'j', 'l'..'z'}->:s2=>1" + NewLine +
+                ".s1-'$'->:s3=>2" + NewLine +
+                ".s1-'@'->:s2=>1" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -77,11 +77,11 @@ namespace AntlrUnitTests
g.CreateLookaheadDFAs();
// must break up a..z into {'a'..'j', 'l'..'o', 'q'..'z'}
string expecting =
-                ".s0-'9'->:s3=>2\n" +
-                ".s0-{'a'..'j', 'l'..'o', 'q'..'z'}->:s2=>1\n" +
-                ".s0-{'k', 'p'}->.s1\n" +
-                ".s1-'$'->:s3=>2\n" +
-                ".s1-'@'->:s2=>1\n";
+                ".s0-'9'->:s3=>2" + NewLine +
+                ".s0-{'a'..'j', 'l'..'o', 'q'..'z'}->:s2=>1" + NewLine +
+                ".s0-{'k', 'p'}->.s1" + NewLine +
+                ".s1-'$'->:s3=>2" + NewLine +
+                ".s1-'@'->:s2=>1" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -96,10 +96,10 @@ namespace AntlrUnitTests
// must break up a..z into {'a'..'j', 'l'..'o', 'q'..'z'} and 0..9
// into 0..8
string expecting =
-                ".s0-{'0'..'8', 'a'..'j', 'l'..'o', 'q'..'z'}->:s2=>1\n" +
-                ".s0-{'9', 'k', 'p'}->.s1\n" +
-                ".s1-'$'->:s3=>2\n" +
-                ".s1-'@'->:s2=>1\n";
+                ".s0-{'0'..'8', 'a'..'j', 'l'..'o', 'q'..'z'}->:s2=>1" + NewLine +
+                ".s0-{'9', 'k', 'p'}->.s1" + NewLine +
+                ".s1-'$'->:s3=>2" + NewLine +
+                ".s1-'@'->:s2=>1" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -113,10 +113,10 @@ namespace AntlrUnitTests
// must break up a..z into {'a'..'j', 'l'..'o', 'q'..'z'} and 0..9
// into 0..8
string expecting =
-                ".s0-{'0'..'8', 'a'..'j', 'l'..'o', 'q'..'z'}->:s3=>2\n" +
-                ".s0-{'9', 'k', 'p'}->.s1\n" +
-                ".s1-'$'->:s2=>1\n" +
-                ".s1-'@'->:s3=>2\n";
+                ".s0-{'0'..'8', 'a'..'j', 'l'..'o', 'q'..'z'}->:s3=>2" + NewLine +
+                ".s0-{'9', 'k', 'p'}->.s1" + NewLine +
+                ".s1-'$'->:s2=>1" + NewLine +
+                ".s1-'@'->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -133,17 +133,17 @@ namespace AntlrUnitTests
// must break up a..z into {'a'..'j', 'l'..'o', 'q'..'z'} and 0..9
// into 0..8
string expecting =
-                ".s0-'0'..'8'->:s8=>5\n" +
-                ".s0-'9'->.s6\n" +
-                ".s0-'k'->.s1\n" +
-                ".s0-'p'->.s4\n" +
-                ".s0-{'a'..'j', 'l'..'o', 'q'..'z'}->:s2=>1\n" +
-                ".s1-'$'->:s3=>2\n" +
-                ".s1-'@'->:s2=>1\n" +
-                ".s4-'$'->:s5=>4\n" +
-                ".s4-'@'->:s2=>1\n" +
-                ".s6-'$'->:s7=>3\n" +
-                ".s6-'@'->:s8=>5\n";
+                ".s0-'0'..'8'->:s8=>5" + NewLine +
+                ".s0-'9'->.s6" + NewLine +
+                ".s0-'k'->.s1" + NewLine +
+                ".s0-'p'->.s4" + NewLine +
+                ".s0-{'a'..'j', 'l'..'o', 'q'..'z'}->:s2=>1" + NewLine +
+                ".s1-'$'->:s3=>2" + NewLine +
+                ".s1-'@'->:s2=>1" + NewLine +
+                ".s4-'$'->:s5=>4" + NewLine +
+                ".s4-'@'->:s2=>1" + NewLine +
+                ".s6-'$'->:s7=>3" + NewLine +
+                ".s6-'@'->:s8=>5" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -154,16 +154,16 @@ namespace AntlrUnitTests
"IF : 'if' ;\n" + // choose this over ID
"ID : ('a'..'z')+ ;\n" );
string expecting =
-                ".s0-'a'..'z'->:s2=>1\n" +
-                ".s0-<EOT>->:s1=>2\n";
+                ".s0-'a'..'z'->:s2=>1" + NewLine +
+                ".s0-<EOT>->:s1=>2" + NewLine;
checkDecision( g, 1, expecting, null );
expecting =
-                ".s0-'i'->.s1\n" +
-                ".s0-{'a'..'h', 'j'..'z'}->:s4=>2\n" +
-                ".s1-'f'->.s2\n" +
-                ".s1-<EOT>->:s4=>2\n" +
-                ".s2-'a'..'z'->:s4=>2\n" +
-                ".s2-<EOT>->:s3=>1\n";
+                ".s0-'i'->.s1" + NewLine +
+                ".s0-{'a'..'h', 'j'..'z'}->:s4=>2" + NewLine +
+                ".s1-'f'->.s2" + NewLine +
+                ".s1-<EOT>->:s4=>2" + NewLine +
+                ".s2-'a'..'z'->:s4=>2" + NewLine +
+                ".s2-<EOT>->:s3=>1" + NewLine;
checkDecision( g, 2, expecting, null );
}

@@ -174,21 +174,19 @@ namespace AntlrUnitTests
"A : 'a' ;\n" +
"B : 'a' ;\n" ); // can't reach this
string expecting =
-                ".s0-'a'->.s1\n" +
-                ".s1-<EOT>->:s2=>1\n";
+                ".s0-'a'->.s1" + NewLine +
+                ".s1-<EOT>->:s2=>1" + NewLine;

ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );

checkDecision( g, 1, expecting, new int[] { 2 } );

-            assertEquals( "unexpected number of expected problems",
-                        1, equeue.size() );
+            Assert.AreEqual(1, equeue.size(), "unexpected number of expected problems");
Message msg = (Message)equeue.errors[0];
-            assertTrue( "warning must be an unreachable alt",
-                        msg is GrammarUnreachableAltsMessage );
+            Assert.IsTrue( msg is GrammarUnreachableAltsMessage, "warning must be an unreachable alt" );
GrammarUnreachableAltsMessage u = (GrammarUnreachableAltsMessage)msg;
-            assertEquals( "[2]", u.alts.ToElementString() );
+            Assert.AreEqual( "[2]", u.alts.ToElementString() );

}

@@ -199,12 +197,12 @@ namespace AntlrUnitTests
"A : (~'r')+ ;\n" +
"B : (~'s')+ ;\n" );
string expecting =
-                ".s0-'r'->:s3=>2\n" +
-                ".s0-'s'->:s2=>1\n" +
-                ".s0-{'\\u0000'..'q', 't'..'\\uFFFF'}->.s1\n" +
-                ".s1-'r'->:s3=>2\n" +
-                ".s1-<EOT>->:s2=>1\n" +
-                ".s1-{'\\u0000'..'q', 't'..'\\uFFFF'}->.s1\n";
+                ".s0-'r'->:s3=>2" + NewLine +
+                ".s0-'s'->:s2=>1" + NewLine +
+                ".s0-{'\\u0000'..'q', 't'..'\\uFFFF'}->.s1" + NewLine +
+                ".s1-'r'->:s3=>2" + NewLine +
+                ".s1-<EOT>->:s2=>1" + NewLine +
+                ".s1-{'\\u0000'..'q', 't'..'\\uFFFF'}->.s1" + NewLine;
checkDecision( g, 3, expecting, null );
}

@@ -215,12 +213,12 @@ namespace AntlrUnitTests
"A : (~'r')+ ;\n" +
"B : (~'t')+ ;\n" );
string expecting =
-                ".s0-'r'->:s3=>2\n" +
-                ".s0-'t'->:s2=>1\n" +
-                ".s0-{'\\u0000'..'q', 's', 'u'..'\\uFFFF'}->.s1\n" +
-                ".s1-'r'->:s3=>2\n" +
-                ".s1-<EOT>->:s2=>1\n" +
-                ".s1-{'\\u0000'..'q', 's', 'u'..'\\uFFFF'}->.s1\n";
+                ".s0-'r'->:s3=>2" + NewLine +
+                ".s0-'t'->:s2=>1" + NewLine +
+                ".s0-{'\\u0000'..'q', 's', 'u'..'\\uFFFF'}->.s1" + NewLine +
+                ".s1-'r'->:s3=>2" + NewLine +
+                ".s1-<EOT>->:s2=>1" + NewLine +
+                ".s1-{'\\u0000'..'q', 's', 'u'..'\\uFFFF'}->.s1" + NewLine;
checkDecision( g, 3, expecting, null );
}

@@ -230,8 +228,8 @@ namespace AntlrUnitTests
"lexer grammar t;\n" +
"A : 'x'* ~'x'+ ;\n" );
string expecting =
-                ".s0-'x'->:s1=>1\n" +
-                ".s0-{'\\u0000'..'w', 'y'..'\\uFFFF'}->:s2=>2\n";
+                ".s0-'x'->:s1=>1" + NewLine +
+                ".s0-{'\\u0000'..'w', 'y'..'\\uFFFF'}->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null );

// The optimizer yanks out all exit branches from EBNF blocks
@@ -242,8 +240,8 @@ namespace AntlrUnitTests
FASerializer serializer = new FASerializer( g );
DFA dfa = g.GetLookaheadDFA( 1 );
string result = serializer.Serialize( dfa.startState );
-            expecting = ".s0-'x'->:s1=>1\n";
-            assertEquals( expecting, result );
+            expecting = ".s0-'x'->:s1=>1" + NewLine;
+            Assert.AreEqual( expecting, result );
}

// N O N G R E E D Y
@@ -254,10 +252,10 @@ namespace AntlrUnitTests
"lexer grammar t;\n" +
"CMT : '/*' ( options {greedy=false;} : . )* '*/' ;" );
string expecting =
-                ".s0-'*'->.s1\n" +
-                ".s0-{'\\u0000'..')', '+'..'\\uFFFF'}->:s3=>1\n" +
-                ".s1-'/'->:s2=>2\n" +
-                ".s1-{'\\u0000'..'.', '0'..'\\uFFFF'}->:s3=>1\n";
+                ".s0-'*'->.s1" + NewLine +
+                ".s0-{'\\u0000'..')', '+'..'\\uFFFF'}->:s3=>1" + NewLine +
+                ".s1-'/'->:s2=>2" + NewLine +
+                ".s1-{'\\u0000'..'.', '0'..'\\uFFFF'}->:s3=>1" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -267,8 +265,8 @@ namespace AntlrUnitTests
"lexer grammar t;\n" +
"SLCMT : '//' ( options {greedy=false;} : . )* '\n' ;" );
string expecting =
-                ".s0-'\\n'->:s1=>2\n" +
-                ".s0-{'\\u0000'..'\\t', '\\u000B'..'\\uFFFF'}->:s2=>1\n";
+                ".s0-'\\n'->:s1=>2" + NewLine +
+                ".s0-{'\\u0000'..'\\t', '\\u000B'..'\\uFFFF'}->:s2=>1" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -278,8 +276,8 @@ namespace AntlrUnitTests
"lexer grammar t;\n" +
"SLCMT : '//' .* '\n' ;" );
string expecting =
-                ".s0-'\\n'->:s1=>2\n" +
-                ".s0-{'\\u0000'..'\\t', '\\u000B'..'\\uFFFF'}->:s2=>1\n";
+                ".s0-'\\n'->:s1=>2" + NewLine +
+                ".s0-{'\\u0000'..'\\t', '\\u000B'..'\\uFFFF'}->:s2=>1" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -291,8 +289,8 @@ namespace AntlrUnitTests
"lexer grammar t;\n" +
"SLCMT : '//' ( options {greedy=false;} : . )+ '\n' ;" );
string expecting =
-                ".s0-'\\n'->:s1=>2\n" +
-                ".s0-{'\\u0000'..'\\t', '\\u000B'..'\\uFFFF'}->:s2=>1\n";
+                ".s0-'\\n'->:s1=>2" + NewLine +
+                ".s0-{'\\u0000'..'\\t', '\\u000B'..'\\uFFFF'}->:s2=>1" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -302,8 +300,8 @@ namespace AntlrUnitTests
"lexer grammar t;\n" +
"SLCMT : '//' .+ '\n' ;" );
string expecting =
-                ".s0-'\\n'->:s1=>2\n" +
-                ".s0-{'\\u0000'..'\\t', '\\u000B'..'\\uFFFF'}->:s2=>1\n";
+                ".s0-'\\n'->:s1=>2" + NewLine +
+                ".s0-{'\\u0000'..'\\t', '\\u000B'..'\\uFFFF'}->:s2=>1" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -313,8 +311,8 @@ namespace AntlrUnitTests
"lexer grammar t;\n" +
"SLCMT : '//' (.)+ '\n' ;" );
string expecting =
-                ".s0-'\\n'->:s1=>2\n" +
-                ".s0-{'\\u0000'..'\\t', '\\u000B'..'\\uFFFF'}->:s2=>1\n";
+                ".s0-'\\n'->:s1=>2" + NewLine +
+                ".s0-{'\\u0000'..'\\t', '\\u000B'..'\\uFFFF'}->:s2=>1" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -324,10 +322,10 @@ namespace AntlrUnitTests
"lexer grammar t;\n" +
"DUH : (options {greedy=false;}:'x'|'y')* 'xy' ;" );
string expecting =
-                ".s0-'x'->.s1\n" +
-                ".s0-'y'->:s4=>2\n" +
-                ".s1-'x'->:s3=>1\n" +
-                ".s1-'y'->:s2=>3\n";
+                ".s0-'x'->.s1" + NewLine +
+                ".s0-'y'->:s4=>2" + NewLine +
+                ".s1-'x'->:s3=>1" + NewLine +
+                ".s1-'y'->:s2=>3" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -337,12 +335,12 @@ namespace AntlrUnitTests
"lexer grammar t;\n" +
"DUH : ('x'|'y')* 'xy' ;" );
string expecting =
-                ".s0-'x'->.s1\n" +
-                ".s0-'y'->:s4=>1\n" +
-                ".s1-'x'->:s4=>1\n" +
-                ".s1-'y'->.s2\n" +
-                ".s2-'x'..'y'->:s4=>1\n" +
-                ".s2-<EOT>->:s3=>2\n";
+                ".s0-'x'->.s1" + NewLine +
+                ".s0-'y'->:s4=>1" + NewLine +
+                ".s1-'x'->:s4=>1" + NewLine +
+                ".s1-'y'->.s2" + NewLine +
+                ".s2-'x'..'y'->:s4=>1" + NewLine +
+                ".s2-<EOT>->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -354,11 +352,11 @@ namespace AntlrUnitTests
"STRING : '\"' (options {greedy=false;}: '\\\\\"' | .)* '\"' ;\n"
);
string expecting =
-                ".s0-'\"'->:s1=>3\n" +
-                    ".s0-'\\\\'->.s2\n" +
-                    ".s0-{'\\u0000'..'!', '#'..'[', ']'..'\\uFFFF'}->:s4=>2\n" +
-                    ".s2-'\"'->:s3=>1\n" +
-                    ".s2-{'\\u0000'..'!', '#'..'\\uFFFF'}->:s4=>2\n";
+                ".s0-'\"'->:s1=>3" + NewLine +
+                    ".s0-'\\\\'->.s2" + NewLine +
+                    ".s0-{'\\u0000'..'!', '#'..'[', ']'..'\\uFFFF'}->:s4=>2" + NewLine +
+                    ".s2-'\"'->:s3=>1" + NewLine +
+                    ".s2-{'\\u0000'..'!', '#'..'\\uFFFF'}->:s4=>2" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -368,20 +366,18 @@ namespace AntlrUnitTests
"lexer grammar t;\n" +
"DUH : (options {greedy=false;}:'x')+ ;" ); // loop never matched
string expecting =
-                ":s0=>2\n";
+                ":s0=>2" + NewLine;

ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );

checkDecision( g, 1, expecting, new int[] { 1 } );

-            assertEquals( "unexpected number of expected problems",
-                        1, equeue.size() );
+            Assert.AreEqual(1, equeue.size(), "unexpected number of expected problems");
Message msg = (Message)equeue.errors[0];
-            assertTrue( "warning must be an unreachable alt",
-                       msg is GrammarUnreachableAltsMessage );
+            Assert.IsTrue(msg is GrammarUnreachableAltsMessage, "warning must be an unreachable alt");
GrammarUnreachableAltsMessage u = (GrammarUnreachableAltsMessage)msg;
-            assertEquals( "[1]", u.alts.ToElementString() );
+            Assert.AreEqual( "[1]", u.alts.ToElementString() );
}

[TestMethod]
@@ -401,10 +397,10 @@ namespace AntlrUnitTests
"ESC     :       '\\\\' . ;" );
g.CreateLookaheadDFAs();
string expecting =
-                ".s0-'\\\\'->:s2=>2\n" +
-                ".s0-'{'->:s1=>1\n" +
-                ".s0-'}'->:s4=>4\n" +
-                ".s0-{'\\u0000'..'[', ']'..'z', '|', '~'..'\\uFFFF'}->:s3=>3\n";
+                ".s0-'\\\\'->:s2=>2" + NewLine +
+                ".s0-'{'->:s1=>1" + NewLine +
+                ".s0-'}'->:s4=>4" + NewLine +
+                ".s0-{'\\u0000'..'[', ']'..'z', '|', '~'..'\\uFFFF'}->:s3=>3" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -426,16 +422,16 @@ namespace AntlrUnitTests
"ESC     :       '\\\\' . ;" );
g.CreateLookaheadDFAs();
string expecting =
-                ".s0-'\\\\'->.s3\n" +
-                ".s0-'{'->:s2=>1\n" +
-                ".s0-'}'->:s1=>4\n" +
-                ".s0-{'\\u0000'..'[', ']'..'z', '|', '~'..'\\uFFFF'}->:s5=>3\n" +
-                ".s3-'\\\\'->:s8=>2\n" +
-                ".s3-'{'->:s7=>2\n" +
-                ".s3-'}'->.s4\n" +
-                ".s3-{'\\u0000'..'[', ']'..'z', '|', '~'..'\\uFFFF'}->:s6=>2\n" +
-                ".s4-'\\u0000'..'\\uFFFF'->:s6=>2\n" +
-                ".s4-<EOT>->:s5=>3\n";
+                ".s0-'\\\\'->.s3" + NewLine +
+                ".s0-'{'->:s2=>1" + NewLine +
+                ".s0-'}'->:s1=>4" + NewLine +
+                ".s0-{'\\u0000'..'[', ']'..'z', '|', '~'..'\\uFFFF'}->:s5=>3" + NewLine +
+                ".s3-'\\\\'->:s8=>2" + NewLine +
+                ".s3-'{'->:s7=>2" + NewLine +
+                ".s3-'}'->.s4" + NewLine +
+                ".s3-{'\\u0000'..'[', ']'..'z', '|', '~'..'\\uFFFF'}->:s6=>2" + NewLine +
+                ".s4-'\\u0000'..'\\uFFFF'->:s6=>2" + NewLine +
+                ".s4-<EOT>->:s5=>3" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -447,8 +443,8 @@ namespace AntlrUnitTests
"fragment B : 'a' ;\n" );
g.CreateLookaheadDFAs();
string expecting =
-                ".s0-'a'->:s1=>1\n" +
-                ".s0-{'\\u0000'..'`', 'b'..'\\uFFFF'}->:s2=>2\n";
+                ".s0-'a'->:s1=>1" + NewLine +
+                ".s0-{'\\u0000'..'`', 'b'..'\\uFFFF'}->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -460,8 +456,8 @@ namespace AntlrUnitTests
"fragment B : 'a'|'b' ;\n" );
g.CreateLookaheadDFAs();
string expecting =
-                ".s0-'a'..'b'->:s1=>1\n" +
-                ".s0-{'\\u0000'..'`', 'c'..'\\uFFFF'}->:s2=>2\n";
+                ".s0-'a'..'b'->:s1=>1" + NewLine +
+                ".s0-{'\\u0000'..'`', 'c'..'\\uFFFF'}->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -473,8 +469,8 @@ namespace AntlrUnitTests
"B : 'a' ;\n" );
g.CreateLookaheadDFAs();
string expecting =
-                ".s0-'a'->:s1=>1\n" +
-                ".s0-{'\\u0000'..'`', 'b'..'\\uFFFF'}->:s2=>2\n";
+                ".s0-'a'->:s1=>1" + NewLine +
+                ".s0-{'\\u0000'..'`', 'b'..'\\uFFFF'}->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -486,8 +482,8 @@ namespace AntlrUnitTests
"fragment B : 'a'|'b'|'c'..'e'|C ;\n" +
"fragment C : 'f' ;\n" ); // has to seen from B to C
string expecting =
-                ".s0-'a'..'f'->:s1=>1\n" +
-                ".s0-{'\\u0000'..'`', 'g'..'\\uFFFF'}->:s2=>2\n";
+                ".s0-'a'..'f'->:s1=>1" + NewLine +
+                ".s0-{'\\u0000'..'`', 'g'..'\\uFFFF'}->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -500,10 +496,10 @@ namespace AntlrUnitTests
"B : 'b' ;\n" +
"C : ~'x'{;} ;" ); // force Tokens to not collapse T|C
string expecting =
-                ".s0-'b'->:s3=>2\n" +
-                ".s0-'x'->:s2=>1\n" +
-                ".s0-{'\\u0000'..'a', 'c'..'w', 'y'..'\\uFFFF'}->.s1\n" +
-                ".s1-<EOT>->:s2=>1\n";
+                ".s0-'b'->:s3=>2" + NewLine +
+                ".s0-'x'->:s2=>1" + NewLine +
+                ".s0-{'\\u0000'..'a', 'c'..'w', 'y'..'\\uFFFF'}->.s1" + NewLine +
+                ".s1-<EOT>->:s2=>1" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -514,8 +510,8 @@ namespace AntlrUnitTests
"T : ~'x' ;\n" +
"S : 'x' (T | 'x') ;\n" );
string expecting =
-                ".s0-'x'->:s2=>2\n" +
-                ".s0-{'\\u0000'..'w', 'y'..'\\uFFFF'}->:s1=>1\n";
+                ".s0-'x'->:s2=>2" + NewLine +
+                ".s0-{'\\u0000'..'w', 'y'..'\\uFFFF'}->:s1=>1" + NewLine;
checkDecision( g, 1, expecting, null );
}

@@ -529,8 +525,8 @@ namespace AntlrUnitTests
"IDENT:    'a'+;\n" );
// basically, Tokens rule should not do set compression test
string expecting =
-                ".s0-'<'->:s1=>1\n" +
-                ".s0-'a'->:s2=>2\n";
+                ".s0-'<'->:s1=>1" + NewLine +
+                ".s0-'a'->:s2=>2" + NewLine;
checkDecision( g, 4, expecting, null ); // 4 is Tokens rule
}

@@ -562,7 +558,7 @@ namespace AntlrUnitTests
}

DFA dfa = g.GetLookaheadDFA( decision );
-            assertNotNull( "unknown decision #" + decision, dfa );
+            Assert.IsNotNull(dfa, "unknown decision #" + decision);
FASerializer serializer = new FASerializer( g );
string result = serializer.Serialize( dfa.startState );
//System.out.print(result);
@@ -576,17 +572,16 @@ namespace AntlrUnitTests
{
Console.Error.WriteLine( "nondeterministic alts (should be empty): " + ( (IList)nonDetAlts ).ToElementString() );
}
-                assertEquals( "unreachable alts mismatch", 0, nonDetAlts != null ? nonDetAlts.Count : 0 );
+                Assert.AreEqual(0, nonDetAlts != null ? nonDetAlts.Count : 0, "unreachable alts mismatch");
}
else
{
for ( int i = 0; i < expectingUnreachableAlts.Length; i++ )
{
-                    assertTrue( "unreachable alts mismatch",
-                               nonDetAlts != null ? nonDetAlts.Contains( expectingUnreachableAlts[i] ) : false );
+                    Assert.IsTrue(nonDetAlts != null ? nonDetAlts.Contains(expectingUnreachableAlts[i]) : false, "unreachable alts mismatch");
}
}
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

}
diff --git a/Antlr3.Test/TestCompositeGrammars.cs b/Antlr3.Test/TestCompositeGrammars.cs
index 6eaa17b..bbb3671 100644
--- a/Antlr3.Test/TestCompositeGrammars.cs
+++ b/Antlr3.Test/TestCompositeGrammars.cs
@@ -51,7 +51,7 @@ namespace AntlrUnitTests
"parser grammar S;\n" +
"a : B . C ;\n"; // not qualified ID
Grammar g = new Grammar( grammar );
-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -69,7 +69,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {skip();} ;\n";
string found = execParser( "M.g", master, "MParser", "MLexer",
"s", "b", debug );
-            assertEquals( "S.a" + NewLine, found );
+            Assert.AreEqual( "S.a" + NewLine, found );
}

[TestMethod]
@@ -90,7 +90,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {skip();} ;\n";
string found = execParser( "M.g", master, "MParser", "MLexer",
"s", "b", debug );
-            assertEquals( "S.a1000" + NewLine, found );
+            Assert.AreEqual( "S.a1000" + NewLine, found );
}

[TestMethod]
@@ -111,7 +111,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {skip();} ;\n";
string found = execParser( "M.g", master, "MParser", "MLexer",
"s", "b", debug );
-            assertEquals( "S.ab" + NewLine, found );
+            Assert.AreEqual( "S.ab" + NewLine, found );
}

[TestMethod]
@@ -131,7 +131,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {skip();} ;\n";
string found = execParser( "M.g", master, "MParser", "MLexer",
"s", "b", debug );
-            assertEquals( "foo" + NewLine, found );
+            Assert.AreEqual( "foo" + NewLine, found );
}

[TestMethod]
@@ -154,7 +154,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {skip();} ;\n";
string found = execParser( "M.g", master, "MParser", "MLexer",
"s", "b", debug );
-            assertEquals( "S.a" + NewLine, found );
+            Assert.AreEqual( "S.a" + NewLine, found );
}

[TestMethod]
@@ -192,7 +192,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {skip();} ;\n";
string found = execParser( "M.g", master, "MParser", "MLexer",
"s", "aa", debug );
-            assertEquals( "S.x" + NewLine +
+            Assert.AreEqual( "S.x" + NewLine +
"T.y" + NewLine, found );
}

@@ -233,13 +233,13 @@ namespace AntlrUnitTests
string expectedStringLiteralToTypeMap = "{}";
string expectedTypeToTokenList = "[A, B, C, WS]";

-            assertEquals( expectedTokenIDToTypeMap,
+            Assert.AreEqual( expectedTokenIDToTypeMap,
realElements( g.composite.tokenIDToTypeMap ).ToElementString() );
-            assertEquals( expectedStringLiteralToTypeMap, g.composite.stringLiteralToTypeMap.ToElementString() );
-            assertEquals( expectedTypeToTokenList,
+            Assert.AreEqual( expectedStringLiteralToTypeMap, g.composite.stringLiteralToTypeMap.ToElementString() );
+            Assert.AreEqual( expectedTypeToTokenList,
realElements( g.composite.typeToTokenList ).ToElementString() );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -269,14 +269,13 @@ namespace AntlrUnitTests
g.ParseAndBuildAST();
g.composite.AssignTokenTypes();

-            assertEquals( "unexpected errors: " + equeue, 1, equeue.errors.Count );
+            Assert.AreEqual(1, equeue.errors.Count, "unexpected errors: " + equeue);
string expectedError = "error(161): " + tmpdir.ToString().replaceFirst( "\\-[0-9]+", "" ) + "/M.g:2:8: combined grammar M cannot import combined grammar S";
-            assertEquals( "unexpected errors: " + equeue, expectedError, equeue.errors[0].ToString().replaceFirst( "\\-[0-9]+", "" ) );
+            Assert.AreEqual(expectedError, equeue.errors[0].ToString().replaceFirst("\\-[0-9]+", ""), "unexpected errors: " + equeue);
}

[TestMethod]
public void TestSameStringTwoNames() /*throws Exception*/ {
-            Assert.Inconclusive( "May be failing on just my port..." );
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
string slave =
@@ -305,14 +304,14 @@ namespace AntlrUnitTests
g.ParseAndBuildAST();
g.composite.AssignTokenTypes();

-            string expectedTokenIDToTypeMap = "[A=4, WS=6, X=5]";
+            string expectedTokenIDToTypeMap = "[A=4, WS=5, X=6]";
string expectedStringLiteralToTypeMap = "{'a'=4}";
-            string expectedTypeToTokenList = "[A, X, WS]";
+            string expectedTypeToTokenList = "[A, WS, X]";

-            assertEquals( expectedTokenIDToTypeMap,
+            Assert.AreEqual( expectedTokenIDToTypeMap,
realElements( g.composite.tokenIDToTypeMap ).ToElementString() );
-            assertEquals( expectedStringLiteralToTypeMap, g.composite.stringLiteralToTypeMap.ToString() );
-            assertEquals( expectedTypeToTokenList,
+            Assert.AreEqual( expectedStringLiteralToTypeMap, g.composite.stringLiteralToTypeMap.ToElementString() );
+            Assert.AreEqual( expectedTypeToTokenList,
realElements( g.composite.typeToTokenList ).ToElementString() );

object expectedArg = "X='a'";
@@ -322,16 +321,15 @@ namespace AntlrUnitTests
new GrammarSemanticsMessage( expectedMsgID, g, null, expectedArg, expectedArg2 );
checkGrammarSemanticsError( equeue, expectedMessage );

-            assertEquals( "unexpected errors: " + equeue, 1, equeue.errors.Count );
+            Assert.AreEqual(1, equeue.errors.Count, "unexpected errors: " + equeue);

string expectedError =
"error(158): T.g:2:10: cannot alias X='a'; string already assigned to A";
-            assertEquals( expectedError, equeue.errors[0].ToString() );
+            Assert.AreEqual( expectedError, equeue.errors[0].ToString() );
}

[TestMethod]
public void TestSameNameTwoStrings() /*throws Exception*/ {
-            Assert.Inconclusive( "May be failing on just my port..." );
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
string slave =
@@ -363,10 +361,10 @@ namespace AntlrUnitTests
string expectedStringLiteralToTypeMap = "{'a'=4, 'x'=6}";
string expectedTypeToTokenList = "[A, WS, T__6]";

-            assertEquals( expectedTokenIDToTypeMap,
+            Assert.AreEqual( expectedTokenIDToTypeMap,
realElements( g.composite.tokenIDToTypeMap ).ToElementString() );
-            assertEquals( expectedStringLiteralToTypeMap, sortMapToString( g.composite.stringLiteralToTypeMap ) );
-            assertEquals( expectedTypeToTokenList,
+            Assert.AreEqual( expectedStringLiteralToTypeMap, sortMapToString( g.composite.stringLiteralToTypeMap ) );
+            Assert.AreEqual( expectedTypeToTokenList,
realElements( g.composite.typeToTokenList ).ToElementString() );

object expectedArg = "A='x'";
@@ -376,11 +374,11 @@ namespace AntlrUnitTests
new GrammarSemanticsMessage( expectedMsgID, g, null, expectedArg, expectedArg2 );
checkGrammarSemanticsError( equeue, expectedMessage );

-            assertEquals( "unexpected errors: " + equeue, 1, equeue.errors.Count );
+            Assert.AreEqual(1, equeue.errors.Count, "unexpected errors: " + equeue);

string expectedError =
"error(159): T.g:2:10: cannot alias A='x'; token name already assigned to 'a'";
-            assertEquals( expectedError, equeue.errors[0].ToString() );
+            Assert.AreEqual( expectedError, equeue.errors[0].ToString() );
}

[TestMethod]
@@ -414,17 +412,16 @@ namespace AntlrUnitTests
new GrammarSemanticsMessage( expectedMsgID, g, null, expectedArg );
checkGrammarSemanticsWarning( equeue, expectedMessage );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
-            assertEquals( "unexpected errors: " + equeue, 1, equeue.warnings.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
+            Assert.AreEqual(1, equeue.warnings.Count, "unexpected errors: " + equeue);

string expectedError =
"warning(160): S.g:2:10: tokenVocab option ignored in imported grammar S";
-            assertEquals( expectedError, equeue.warnings[0].ToString() );
+            Assert.AreEqual( expectedError, equeue.warnings[0].ToString() );
}

[TestMethod]
public void TestImportedTokenVocabWorksInRoot() /*throws Exception*/ {
-            Assert.Inconclusive( "May be failing on just my port..." );
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
string slave =
@@ -456,13 +453,13 @@ namespace AntlrUnitTests
string expectedStringLiteralToTypeMap = "{'a'=100}";
string expectedTypeToTokenList = "[A, 'a', WS]";

-            assertEquals( expectedTokenIDToTypeMap,
+            Assert.AreEqual( expectedTokenIDToTypeMap,
realElements( g.composite.tokenIDToTypeMap ).ToElementString() );
-            assertEquals( expectedStringLiteralToTypeMap, g.composite.stringLiteralToTypeMap.ToString() );
-            assertEquals( expectedTypeToTokenList,
+            Assert.AreEqual( expectedStringLiteralToTypeMap, g.composite.stringLiteralToTypeMap.ToElementString() );
+            Assert.AreEqual( expectedTypeToTokenList,
realElements( g.composite.typeToTokenList ).ToElementString() );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -489,7 +486,7 @@ namespace AntlrUnitTests
g.composite.AssignTokenTypes();

// whole bunch of errors from bad S.g file
-            assertEquals( "unexpected errors: " + equeue, 5, equeue.errors.Count );
+            Assert.AreEqual(5, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -516,7 +513,7 @@ namespace AntlrUnitTests
g.composite.AssignTokenTypes();

// whole bunch of errors from bad S.g file
-            assertEquals( "unexpected errors: " + equeue, 3, equeue.errors.Count );
+            Assert.AreEqual(3, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -534,7 +531,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {skip();} ;\n";
string found = execParser( "M.g", master, "MParser", "MLexer",
"a", "c", debug );
-            assertEquals( "S.a" + NewLine, found );
+            Assert.AreEqual( "S.a" + NewLine, found );
}

[TestMethod]
@@ -560,7 +557,7 @@ namespace AntlrUnitTests
// for float to work in decl, type must be overridden
string found = execParser( "Java.g", master, "JavaParser", "JavaLexer",
"prog", "float x = 3;", debug );
-            assertEquals( "JavaDecl: floatx=3;" + NewLine, found );
+            Assert.AreEqual( "JavaDecl: floatx=3;" + NewLine, found );
}

// LEXER INHERITANCE
@@ -579,7 +576,7 @@ namespace AntlrUnitTests
"B : 'b' ;\n" +
"WS : (' '|'\\n') {skip();} ;\n";
string found = execLexer( "M.g", master, "M", "abc", debug );
-            assertEquals( "S.A"+NewLine+"abc"+NewLine, found );
+            Assert.AreEqual( "S.A"+NewLine+"abc"+NewLine, found );
}

[TestMethod]
@@ -596,7 +593,7 @@ namespace AntlrUnitTests
"A : 'a' B {System.out.println(\"M.A\");} ;\n" +
"WS : (' '|'\\n') {skip();} ;\n";
string found = execLexer( "M.g", master, "M", "ab", debug );
-            assertEquals( "S.B" + NewLine +
+            Assert.AreEqual( "S.B" + NewLine +
"M.A" + NewLine +
"ab" + NewLine, found );
}
@@ -631,16 +628,16 @@ namespace AntlrUnitTests

// predict only alts from M not S
string expectingDFA =
-                ".s0-'a'->.s1\n" +
-                ".s0-{'\\n', ' '}->:s3=>2\n" +
-                ".s1-<EOT>->:s2=>1\n";
+                ".s0-'a'->.s1" + NewLine +
+                ".s0-{'\\n', ' '}->:s3=>2" + NewLine +
+                ".s1-<EOT>->:s2=>1" + NewLine;
Antlr3.Analysis.DFA dfa = g.GetLookaheadDFA( 1 );
FASerializer serializer = new FASerializer( g );
string result = serializer.Serialize( dfa.startState );
-            assertEquals( expectingDFA, result );
+            Assert.AreEqual( expectingDFA, result );

// must not be a "unreachable alt: Tokens" error
-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -666,12 +663,12 @@ namespace AntlrUnitTests
composite.SetDelegationRoot( g );
g.ParseAndBuildAST();

-            assertEquals( "unexpected errors: " + equeue, 1, equeue.errors.Count );
-            assertEquals( "unexpected errors: " + equeue, 0, equeue.warnings.Count );
+            Assert.AreEqual(1, equeue.errors.Count, "unexpected errors: " + equeue);
+            Assert.AreEqual(0, equeue.warnings.Count, "unexpected errors: " + equeue);

string expectedError =
"error(161): " + tmpdir.ToString().replaceFirst( "\\-[0-9]+", "" ) + "\\M.g:2:8: tree grammar M cannot import lexer grammar S";
-            assertEquals( expectedError, equeue.errors[0].ToString().replaceFirst( "\\-[0-9]+", "" ) );
+            Assert.AreEqual( expectedError, equeue.errors[0].ToString().replaceFirst( "\\-[0-9]+", "" ) );
}

[TestMethod]
@@ -696,7 +693,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {skip();} ;\n";
string found = execParser( "M.g", master, "MParser", "MLexer",
"start", "ax", debug );
-            assertEquals( "S.a1" + NewLine, found );
+            Assert.AreEqual( "S.a1" + NewLine, found );
}

[TestMethod]
@@ -717,10 +714,10 @@ namespace AntlrUnitTests
string found = execParser( "M.g", master, "MParser", "MLexer",
"a", "abc", debug );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
-            assertEquals( "unexpected warnings: " + equeue, 0, equeue.warnings.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
+            Assert.AreEqual(0, equeue.warnings.Count, "unexpected warnings: " + equeue);

-            assertEquals( "S.A" + NewLine + "M.a" + NewLine, found );
+            Assert.AreEqual( "S.A" + NewLine + "M.a" + NewLine, found );
}

[TestMethod]
@@ -742,11 +739,11 @@ namespace AntlrUnitTests

rawGenerateAndBuildRecognizer( "M.g", master, "MParser", "MLexer", debug );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
-            assertEquals( "unexpected warnings: " + equeue, 1, equeue.warnings.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
+            Assert.AreEqual(1, equeue.warnings.Count, "unexpected warnings: " + equeue);
string expectedError =
"warning(105): " + tmpdir.ToString().replaceFirst( "\\-[0-9]+", "" ) + "\\M.g:3:5: no lexer rule corresponding to token: ABC";
-            assertEquals( expectedError, equeue.warnings[0].ToString().replaceFirst( "\\-[0-9]+", "" ) );
+            Assert.AreEqual( expectedError, equeue.warnings[0].ToString().replaceFirst( "\\-[0-9]+", "" ) );
}

/** Make sure that M can import S that imports T. */
@@ -779,22 +776,22 @@ namespace AntlrUnitTests
g.composite.AssignTokenTypes();
g.composite.DefineGrammarSymbols();

-            string expectedTokenIDToTypeMap = "[M=6, S=5, T=4]";
+            string expectedTokenIDToTypeMap = "[M=4, S=5, T=6]";
string expectedStringLiteralToTypeMap = "{}";
-            string expectedTypeToTokenList = "[T, S, M]";
+            string expectedTypeToTokenList = "[M, S, T]";

-            assertEquals( expectedTokenIDToTypeMap,
+            Assert.AreEqual( expectedTokenIDToTypeMap,
realElements( g.composite.tokenIDToTypeMap ).ToElementString() );
-            assertEquals( expectedStringLiteralToTypeMap, g.composite.stringLiteralToTypeMap.ToElementString() );
-            assertEquals( expectedTypeToTokenList,
+            Assert.AreEqual( expectedStringLiteralToTypeMap, g.composite.stringLiteralToTypeMap.ToElementString() );
+            Assert.AreEqual( expectedTypeToTokenList,
realElements( g.composite.typeToTokenList ).ToElementString() );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);

bool ok =
rawGenerateAndBuildRecognizer( "M.g", master, "MParser", null, false );
bool expecting = true; // should be ok
-            assertEquals( expecting, ok );
+            Assert.AreEqual( expecting, ok );
}

[TestMethod]
@@ -843,22 +840,22 @@ namespace AntlrUnitTests
g.composite.AssignTokenTypes();
g.composite.DefineGrammarSymbols();

-            string expectedTokenIDToTypeMap = "[A=8, B=6, C=7, M=9, S=5, T=4]";
+            string expectedTokenIDToTypeMap = "[A=4, B=5, C=6, M=7, S=8, T=9]";
string expectedStringLiteralToTypeMap = "{}";
-            string expectedTypeToTokenList = "[T, S, B, C, A, M]";
+            string expectedTypeToTokenList = "[A, B, C, M, S, T]";

-            assertEquals( expectedTokenIDToTypeMap,
+            Assert.AreEqual( expectedTokenIDToTypeMap,
realElements( g.composite.tokenIDToTypeMap ).ToElementString() );
-            assertEquals( expectedStringLiteralToTypeMap, g.composite.stringLiteralToTypeMap.ToElementString() );
-            assertEquals( expectedTypeToTokenList,
+            Assert.AreEqual( expectedStringLiteralToTypeMap, g.composite.stringLiteralToTypeMap.ToElementString() );
+            Assert.AreEqual( expectedTypeToTokenList,
realElements( g.composite.typeToTokenList ).ToElementString() );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);

bool ok =
rawGenerateAndBuildRecognizer( "M.g", master, "MParser", null, false );
bool expecting = true; // should be ok
-            assertEquals( expecting, ok );
+            Assert.AreEqual( expecting, ok );
}

[TestMethod]
@@ -890,17 +887,17 @@ namespace AntlrUnitTests
g.composite.AssignTokenTypes();
g.composite.DefineGrammarSymbols();

-            string expectedTokenIDToTypeMap = "[M=6, S=5, T=4]";
+            string expectedTokenIDToTypeMap = "[M=4, S=5, T=6]";
string expectedStringLiteralToTypeMap = "{}";
-            string expectedTypeToTokenList = "[T, S, M]";
+            string expectedTypeToTokenList = "[M, S, T]";

-            assertEquals( expectedTokenIDToTypeMap,
+            Assert.AreEqual( expectedTokenIDToTypeMap,
realElements( g.composite.tokenIDToTypeMap ).ToElementString() );
-            assertEquals( expectedStringLiteralToTypeMap, g.composite.stringLiteralToTypeMap.ToElementString() );
-            assertEquals( expectedTypeToTokenList,
+            Assert.AreEqual( expectedStringLiteralToTypeMap, g.composite.stringLiteralToTypeMap.ToElementString() );
+            Assert.AreEqual( expectedTypeToTokenList,
realElements( g.composite.typeToTokenList ).ToElementString() );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -959,7 +956,7 @@ namespace AntlrUnitTests
bool ok =
rawGenerateAndBuildRecognizer("G3.g", G3str, "G3Parser", null, false);
bool expecting = true; // should be ok
-            assertEquals(expecting, ok);
+            Assert.AreEqual(expecting, ok);
}

[TestMethod]
diff --git a/Antlr3.Test/TestDFAConversion.cs b/Antlr3.Test/TestDFAConversion.cs
index 48ac9fb..7c7f972 100644
--- a/Antlr3.Test/TestDFAConversion.cs
+++ b/Antlr3.Test/TestDFAConversion.cs
@@ -58,8 +58,8 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : A C | B;" );
string expecting =
-                ".s0-A->:s1=>1\n" +
-                ".s0-B->:s2=>2\n";
+                ".s0-A->:s1=>1" + NewLine +
+                ".s0-B->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -69,9 +69,9 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : A B | A C;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-B->:s2=>1\n" +
-                ".s1-C->:s3=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-B->:s2=>1" + NewLine +
+                ".s1-C->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -82,9 +82,9 @@ namespace AntlrUnitTests
"options {k=2;}\n" +
"a : A B | A C;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-B->:s2=>1\n" +
-                ".s1-C->:s3=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-B->:s2=>1" + NewLine +
+                ".s1-C->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -95,7 +95,7 @@ namespace AntlrUnitTests
"options {k=1;}\n" +
"a : A B | A C;" );
string expecting =
-                ".s0-A->:s1=>1\n";
+                ".s0-A->:s1=>1" + NewLine;
int[] unreachableAlts = new int[] { 2 };
int[] nonDetAlts = new int[] { 1, 2 };
string ambigInput = "A";
@@ -146,18 +146,18 @@ namespace AntlrUnitTests
"s : (a Y)=> a Y | A A A A A X ;\n" + // force recursion past m=4
"a : A a | Q;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s0-Q&&{synpred1_t}?->:s11=>1\n" +
-                ".s1-A->.s2\n" +
-                ".s1-Q&&{synpred1_t}?->:s10=>1\n" +
-                ".s2-A->.s3\n" +
-                ".s2-Q&&{synpred1_t}?->:s9=>1\n" +
-                ".s3-A->.s4\n" +
-                ".s3-Q&&{synpred1_t}?->:s8=>1\n" +
-                ".s4-A->.s5\n" +
-                ".s4-Q&&{synpred1_t}?->:s6=>1\n" +
-                ".s5-{synpred1_t}?->:s6=>1\n" +
-                ".s5-{true}?->:s7=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s0-Q&&{synpred1_t}?->:s11=>1" + NewLine +
+                ".s1-A->.s2" + NewLine +
+                ".s1-Q&&{synpred1_t}?->:s10=>1" + NewLine +
+                ".s2-A->.s3" + NewLine +
+                ".s2-Q&&{synpred1_t}?->:s9=>1" + NewLine +
+                ".s3-A->.s4" + NewLine +
+                ".s3-Q&&{synpred1_t}?->:s8=>1" + NewLine +
+                ".s4-A->.s5" + NewLine +
+                ".s4-Q&&{synpred1_t}?->:s6=>1" + NewLine +
+                ".s5-{synpred1_t}?->:s6=>1" + NewLine +
+                ".s5-{true}?->:s7=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -175,19 +175,19 @@ namespace AntlrUnitTests
"s : (a Y)=> a Y | A A A A A X | Z;\n" + // force recursion past m=4
"a : A a | Q;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s0-Q&&{synpred1_t}?->:s11=>1\n" +
-                ".s0-Z->:s12=>3\n" +
-                ".s1-A->.s2\n" +
-                ".s1-Q&&{synpred1_t}?->:s10=>1\n" +
-                ".s2-A->.s3\n" +
-                ".s2-Q&&{synpred1_t}?->:s9=>1\n" +
-                ".s3-A->.s4\n" +
-                ".s3-Q&&{synpred1_t}?->:s8=>1\n" +
-                ".s4-A->.s5\n" +
-                ".s4-Q&&{synpred1_t}?->:s6=>1\n" +
-                ".s5-{synpred1_t}?->:s6=>1\n" +
-                ".s5-{true}?->:s7=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s0-Q&&{synpred1_t}?->:s11=>1" + NewLine +
+                ".s0-Z->:s12=>3" + NewLine +
+                ".s1-A->.s2" + NewLine +
+                ".s1-Q&&{synpred1_t}?->:s10=>1" + NewLine +
+                ".s2-A->.s3" + NewLine +
+                ".s2-Q&&{synpred1_t}?->:s9=>1" + NewLine +
+                ".s3-A->.s4" + NewLine +
+                ".s3-Q&&{synpred1_t}?->:s8=>1" + NewLine +
+                ".s4-A->.s5" + NewLine +
+                ".s4-Q&&{synpred1_t}?->:s6=>1" + NewLine +
+                ".s5-{synpred1_t}?->:s6=>1" + NewLine +
+                ".s5-{true}?->:s7=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -222,12 +222,12 @@ namespace AntlrUnitTests
"    | B\n" +
"    ;" );
string expecting =
-                ".s0-B->.s4\n" +
-                ".s0-L->.s1\n" +
-                ".s1-{synpred1_t}?->:s2=>1\n" +
-                ".s1-{true}?->:s3=>2\n" +
-                ".s4-{synpred1_t}?->:s2=>1\n" +
-                ".s4-{true}?->:s3=>2\n";
+                ".s0-B->.s4" + NewLine +
+                ".s0-L->.s1" + NewLine +
+                ".s1-{synpred1_t}?->:s2=>1" + NewLine +
+                ".s1-{true}?->:s3=>2" + NewLine +
+                ".s4-{synpred1_t}?->:s2=>1" + NewLine +
+                ".s4-{true}?->:s3=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -247,10 +247,10 @@ namespace AntlrUnitTests
"	 | (C)=> X" +
"    ;\n");
string expecting =
-                ".s0-X->.s1\n" +
-                ".s1-{synpred1_t}?->:s2=>1\n" +
-                ".s1-{synpred2_t}?->:s4=>3\n" +
-                ".s1-{true}?->:s3=>2\n";
+                ".s0-X->.s1" + NewLine +
+                ".s1-{synpred1_t}?->:s2=>1" + NewLine +
+                ".s1-{synpred2_t}?->:s4=>3" + NewLine +
+                ".s1-{true}?->:s3=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -271,10 +271,10 @@ namespace AntlrUnitTests
"	 | (C)=> X" +
"    ;\n");
string expecting =
-                ".s0-X->.s1\n" +
-                ".s1-{synpred1_t}?->:s2=>1\n" +  // gen code should have this as (A)=>
-                ".s1-{synpred2_t}?->:s3=>2\n" + // gen code should have this as (X)=>
-                ".s1-{synpred3_t}?->:s4=>3\n"; // gen code should have this as (C)=>
+                ".s0-X->.s1" + NewLine +
+                ".s1-{synpred1_t}?->:s2=>1" + NewLine +  // gen code should have this as (A)=>
+                ".s1-{synpred2_t}?->:s3=>2" + NewLine + // gen code should have this as (X)=>
+                ".s1-{synpred3_t}?->:s4=>3" + NewLine; // gen code should have this as (C)=>
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -295,12 +295,12 @@ namespace AntlrUnitTests
"    | B\n" +
"    ;" );
string expecting =
-                ".s0-B->.s4\n" +
-                ".s0-L->.s1\n" +
-                ".s1-{p}?->:s2=>1\n" +
-                ".s1-{true}?->:s3=>2\n" +
-                ".s4-{p}?->:s2=>1\n" +
-                ".s4-{true}?->:s3=>2\n";
+                ".s0-B->.s4" + NewLine +
+                ".s0-L->.s1" + NewLine +
+                ".s1-{p}?->:s2=>1" + NewLine +
+                ".s1-{true}?->:s3=>2" + NewLine +
+                ".s4-{p}?->:s2=>1" + NewLine +
+                ".s4-{true}?->:s3=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -323,12 +323,12 @@ namespace AntlrUnitTests
"    | B\n" +
"    ;" );
string expecting =
-                ".s0-B->.s4\n" +
-                ".s0-L->.s1\n" +
-                ".s1-{p}?->:s2=>1\n" +
-                ".s1-{true}?->:s3=>2\n" +
-                ".s4-{p}?->:s2=>1\n" +
-                ".s4-{true}?->:s3=>2\n";
+                ".s0-B->.s4" + NewLine +
+                ".s0-L->.s1" + NewLine +
+                ".s1-{p}?->:s2=>1" + NewLine +
+                ".s1-{true}?->:s3=>2" + NewLine +
+                ".s4-{p}?->:s2=>1" + NewLine +
+                ".s4-{true}?->:s3=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -351,16 +351,16 @@ namespace AntlrUnitTests
"    | B\n" +
"    ;" );
string expecting =
-                ".s0-B->.s6\n" +
-                ".s0-L->.s1\n" +
-                ".s1-B->.s5\n" +
-                ".s1-L->.s2\n" +
-                ".s2-{p}?->:s3=>1\n" +
-                ".s2-{true}?->:s4=>2\n" +
-                ".s5-{p}?->:s3=>1\n" +
-                ".s5-{true}?->:s4=>2\n" +
-                ".s6-X->:s3=>1\n" +
-                ".s6-Y->:s4=>2\n";
+                ".s0-B->.s6" + NewLine +
+                ".s0-L->.s1" + NewLine +
+                ".s1-B->.s5" + NewLine +
+                ".s1-L->.s2" + NewLine +
+                ".s2-{p}?->:s3=>1" + NewLine +
+                ".s2-{true}?->:s4=>2" + NewLine +
+                ".s5-{p}?->:s3=>1" + NewLine +
+                ".s5-{true}?->:s4=>2" + NewLine +
+                ".s6-X->:s3=>1" + NewLine +
+                ".s6-Y->:s4=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -391,10 +391,10 @@ namespace AntlrUnitTests
"    :     expr COMMA expr\n" +
"    ;" );
string expecting =
-                ".s0-ID->.s1\n" +
-                ".s0-{FLOAT, INT}->:s3=>2\n" +
-                ".s1-{synpred1_t}?->:s2=>1\n" +
-                ".s1-{true}?->:s3=>2\n";
+                ".s0-ID->.s1" + NewLine +
+                ".s0-{FLOAT, INT}->:s3=>2" + NewLine +
+                ".s1-{synpred1_t}?->:s2=>1" + NewLine +
+                ".s1-{true}?->:s3=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -425,10 +425,10 @@ namespace AntlrUnitTests
"    :     expr COMMA expr\n" +
"    ;" );
string expecting =
-                ".s0-ID->.s1\n" +
-                ".s0-{FLOAT, INT}->:s3=>2\n" +
-                ".s1-{synpred1_t}?->:s2=>1\n" +
-                ".s1-{true}?->:s3=>2\n";
+                ".s0-ID->.s1" + NewLine +
+                ".s0-{FLOAT, INT}->:s3=>2" + NewLine +
+                ".s1-{synpred1_t}?->:s2=>1" + NewLine +
+                ".s1-{true}?->:s3=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -460,11 +460,11 @@ namespace AntlrUnitTests
"    :     expr COMMA expr\n" +
"    ;" );
string expecting =
-                ".s0-ID->.s1\n" +
-                ".s0-{FLOAT, INT}->:s4=>2\n" +
-                ".s1-L->.s2\n" +
-                ".s2-{synpred1_t}?->:s3=>1\n" +
-                ".s2-{true}?->:s4=>2\n";
+                ".s0-ID->.s1" + NewLine +
+                ".s0-{FLOAT, INT}->:s4=>2" + NewLine +
+                ".s1-L->.s2" + NewLine +
+                ".s2-{synpred1_t}?->:s3=>1" + NewLine +
+                ".s2-{true}?->:s4=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -486,12 +486,12 @@ namespace AntlrUnitTests
"  |     'x'\n" +
"  ;\n" );
string expecting =
-                ".s0-'('->.s1\n" +
-                ".s0-'x'->.s4\n" +
-                ".s1-{synpred1_t}?->:s2=>1\n" +
-                ".s1-{true}?->:s3=>2\n" +
-                ".s4-{synpred1_t}?->:s2=>1\n" +
-                ".s4-{true}?->:s3=>2\n";
+                ".s0-'('->.s1" + NewLine +
+                ".s0-'x'->.s4" + NewLine +
+                ".s1-{synpred1_t}?->:s2=>1" + NewLine +
+                ".s1-{true}?->:s3=>2" + NewLine +
+                ".s4-{synpred1_t}?->:s2=>1" + NewLine +
+                ".s4-{true}?->:s3=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -514,12 +514,12 @@ namespace AntlrUnitTests
"  |     'x'\n" +
"  ;\n" );
string expecting =
-                ".s0-'('->.s1\n" +
-                ".s0-'x'->.s4\n" +
-                ".s1-{synpred1_t}?->:s2=>1\n" +
-                ".s1-{true}?->:s3=>2\n" +
-                ".s4-{synpred1_t}?->:s2=>1\n" +
-                ".s4-{true}?->:s3=>2\n";
+                ".s0-'('->.s1" + NewLine +
+                ".s0-'x'->.s4" + NewLine +
+                ".s1-{synpred1_t}?->:s2=>1" + NewLine +
+                ".s1-{true}?->:s3=>2" + NewLine +
+                ".s4-{synpred1_t}?->:s2=>1" + NewLine +
+                ".s4-{true}?->:s3=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -541,12 +541,12 @@ namespace AntlrUnitTests
"    | B\n" +
"    ;" );
string expecting =
-                ".s0-B->.s4\n" +
-                ".s0-L->.s1\n" +
-                ".s1-{synpred1_t}?->:s2=>1\n" +
-                ".s1-{true}?->:s3=>2\n" +
-                ".s4-{synpred1_t}?->:s2=>1\n" +
-                ".s4-{true}?->:s3=>2\n";
+                ".s0-B->.s4" + NewLine +
+                ".s0-L->.s1" + NewLine +
+                ".s1-{synpred1_t}?->:s2=>1" + NewLine +
+                ".s1-{true}?->:s3=>2" + NewLine +
+                ".s4-{synpred1_t}?->:s2=>1" + NewLine +
+                ".s4-{true}?->:s3=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -564,9 +564,9 @@ namespace AntlrUnitTests
"a : P a P | P;" );
// nondeterministic from left edge
string expecting =
-                ".s0-P->.s1\n" +
-                ".s1-EOF->:s3=>2\n" +
-                ".s1-P->:s2=>1\n";
+                ".s0-P->.s1" + NewLine +
+                ".s1-EOF->:s3=>2" + NewLine +
+                ".s1-P->:s2=>1" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = new int[] { 1, 2 };
string ambigInput = "P P";
@@ -595,12 +595,11 @@ namespace AntlrUnitTests
expectedRules.Add( "a" );
expectedRules.Add( "b" );

-            assertTrue( expectedRules.SequenceEqual( ruleNames( leftRecursive ) ) );
+            Assert.IsTrue( expectedRules.SequenceEqual( ruleNames( leftRecursive ) ) );

Assert.AreEqual(1, equeue.errors.Count);
Message msg = equeue.errors[0];
-            assertTrue( "expecting left recursion cycles; found " + msg.GetType().Name,
-                        msg is LeftRecursionCyclesMessage );
+            Assert.IsTrue(msg is LeftRecursionCyclesMessage, "expecting left recursion cycles; found " + msg.GetType().Name);
LeftRecursionCyclesMessage cyclesMsg = (LeftRecursionCyclesMessage)msg;

// cycle of [a, b]
@@ -608,7 +607,7 @@ namespace AntlrUnitTests
var expecting = new HashSet<string>(); //{{add("a"); add("b");}};
expecting.Add( "a" );
expecting.Add( "b" );
-            assertTrue( expecting.SequenceEqual( ruleNames2( result ) ) );
+            Assert.IsTrue( expecting.SequenceEqual( ruleNames2( result ) ) );
}

[TestMethod]
@@ -630,12 +629,11 @@ namespace AntlrUnitTests
var expectedRules = new HashSet<string>();
expectedRules.Add( "a" );
expectedRules.Add( "b" );
-            assertTrue( expectedRules.SequenceEqual( ruleNames( leftRecursive ) ) );
+            Assert.IsTrue( expectedRules.SequenceEqual( ruleNames( leftRecursive ) ) );

Assert.AreEqual(1, equeue.errors.Count);
Message msg = equeue.errors[0];
-            assertTrue("expecting left recursion cycles; found " + msg.GetType().Name,
-                        msg is LeftRecursionCyclesMessage );
+            Assert.IsTrue(msg is LeftRecursionCyclesMessage, "expecting left recursion cycles; found " + msg.GetType().Name);
LeftRecursionCyclesMessage cyclesMsg = (LeftRecursionCyclesMessage)msg;

// cycle of [a, b]
@@ -645,7 +643,7 @@ namespace AntlrUnitTests
expecting.Add( "a" );
expecting.Add( "b" );

-            assertTrue( expecting.SequenceEqual( ruleNames2( result ) ) );
+            Assert.IsTrue( expecting.SequenceEqual( ruleNames2( result ) ) );
}

[TestMethod]
@@ -666,19 +664,18 @@ namespace AntlrUnitTests
var leftRecursive = g.GetLeftRecursiveRules();
var expectedRules = new HashSet<string>() { "a", "b", "d", "e" };

-            assertTrue( expectedRules.SequenceEqual( ruleNames( leftRecursive ) ) );
+            Assert.IsTrue( expectedRules.SequenceEqual( ruleNames( leftRecursive ) ) );

Assert.AreEqual(1, equeue.errors.Count);
Message msg = equeue.errors[0];
-            assertTrue("expecting left recursion cycles; found " + msg.GetType().Name,
-                        msg is LeftRecursionCyclesMessage );
+            Assert.IsTrue(msg is LeftRecursionCyclesMessage, "expecting left recursion cycles; found " + msg.GetType().Name);
LeftRecursionCyclesMessage cyclesMsg = (LeftRecursionCyclesMessage)msg;

// cycle of [a, b]
ICollection result = cyclesMsg.cycles;
var expecting = new HashSet<string>() { "a", "b", "d", "e" };

-            assertTrue( expecting.SequenceEqual( ruleNames2( result ) ) );
+            Assert.IsTrue( expecting.SequenceEqual( ruleNames2( result ) ) );
}

[TestMethod]
@@ -688,8 +685,8 @@ namespace AntlrUnitTests
"s : IF s (E s)? | B;\n" +
"slist: s SEMI ;" );
string expecting =
-                ".s0-E->:s1=>1\n" +
-                ".s0-SEMI->:s2=>2\n";
+                ".s0-E->:s1=>1" + NewLine +
+                ".s0-SEMI->:s2=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = new int[] { 1, 2 };
string ambigInput = "E";
@@ -698,8 +695,8 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, unreachableAlts,
nonDetAlts, ambigInput, danglingAlts, numWarnings );
expecting =
-                ".s0-B->:s2=>2\n" +
-                ".s0-IF->:s1=>1\n";
+                ".s0-B->:s2=>2" + NewLine +
+                ".s0-IF->:s1=>1" + NewLine;
checkDecision( g, 2, expecting, null, null, null, null, 0 );
}

@@ -713,8 +710,8 @@ namespace AntlrUnitTests
"s : IF s el | B;\n" +
"el: (E s)? ;\n" );
string expecting =
-                ".s0-E->:s1=>1\n" +
-                ".s0-SEMI->:s2=>2\n";
+                ".s0-E->:s1=>1" + NewLine +
+                ".s0-SEMI->:s2=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = new int[] { 1, 2 };
string ambigInput = "E";
@@ -723,8 +720,8 @@ namespace AntlrUnitTests
checkDecision( g, 2, expecting, unreachableAlts,
nonDetAlts, ambigInput, danglingAlts, numWarnings );
expecting =
-                ".s0-B->:s2=>2\n" +
-                ".s0-IF->:s1=>1\n";
+                ".s0-B->:s2=>2" + NewLine +
+                ".s0-IF->:s1=>1" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -739,10 +736,10 @@ namespace AntlrUnitTests
"b : X\n" +
"  ;\n" );
string expecting =
-                ".s0-C->:s4=>3\n" +
-                ".s0-X->.s1\n" +
-                ".s1-A->:s2=>1\n" +
-                ".s1-B->:s3=>2\n";
+                ".s0-C->:s4=>3" + NewLine +
+                ".s0-X->.s1" + NewLine +
+                ".s1-A->:s2=>1" + NewLine +
+                ".s1-B->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -758,17 +755,17 @@ namespace AntlrUnitTests
"  ;\n" +
"c : C ;\n" );
string expecting =
-                ".s0-C->.s1\n" +
-                ".s1-B->.s2\n" +
-                ".s1-X->:s3=>1\n" +
-                ".s1-Y->:s4=>2\n" +
-                ".s2-X->:s3=>1\n" +
-                ".s2-Y->:s4=>2\n";
+                ".s0-C->.s1" + NewLine +
+                ".s1-B->.s2" + NewLine +
+                ".s1-X->:s3=>1" + NewLine +
+                ".s1-Y->:s4=>2" + NewLine +
+                ".s2-X->:s3=>1" + NewLine +
+                ".s2-Y->:s4=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
expecting =
-                ".s0-C->.s1\n" +
-                ".s1-B->:s2=>1\n" +
-                ".s1-X..Y->:s3=>2\n";
+                ".s0-C->.s1" + NewLine +
+                ".s1-B->:s2=>1" + NewLine +
+                ".s1-X..Y->:s3=>2" + NewLine;
checkDecision( g, 2, expecting, null, null, null, null, 0 );
}

@@ -779,9 +776,9 @@ namespace AntlrUnitTests
"s : a ;\n" +
"a : A a | A B;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-A->:s3=>1\n" +
-                ".s1-B->:s2=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-A->:s3=>1" + NewLine +
+                ".s1-B->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -792,8 +789,8 @@ namespace AntlrUnitTests
"s : a ;\n" +
"a : A a | ;" );
string expecting =
-                ".s0-A->:s1=>1\n" +
-                ".s0-EOF->:s2=>2\n";
+                ".s0-A->:s1=>1" + NewLine +
+                ".s0-EOF->:s2=>2" + NewLine;
int[] unreachableAlts = null; // without
int[] nonDetAlts = null;
string ambigInput = null;
@@ -818,8 +815,7 @@ namespace AntlrUnitTests
generator.GenRecognizer();

Message msg = (Message)equeue.warnings[0];
-            assertTrue( "expecting no start rules; found " + msg.GetType().Name,
-                       msg is GrammarSemanticsMessage );
+            Assert.IsTrue(msg is GrammarSemanticsMessage, "expecting no start rules; found " + msg.GetType().Name);
}

[TestMethod]
@@ -829,9 +825,9 @@ namespace AntlrUnitTests
"s : a ;\n" +
"a : A a | A ;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-A->:s2=>1\n" +
-                ".s1-EOF->:s3=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-A->:s2=>1" + NewLine +
+                ".s1-EOF->:s3=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -851,7 +847,7 @@ namespace AntlrUnitTests
//Set expectedRules = new HashSet() {{add("a");}};
var expectedRules = new HashSet<string>();
expectedRules.Add( "a" );
-            assertTrue( expectedRules.SequenceEqual( ruleNames( leftRecursive ) ) );
+            Assert.IsTrue( expectedRules.SequenceEqual( ruleNames( leftRecursive ) ) );
}

[TestMethod]
@@ -868,7 +864,7 @@ namespace AntlrUnitTests
expectedRules.Add( "a" );
expectedRules.Add( "b" );
expectedRules.Add( "c" );
-            assertTrue( expectedRules.SequenceEqual( ruleNames( leftRecursive ) ) );
+            Assert.IsTrue( expectedRules.SequenceEqual( ruleNames( leftRecursive ) ) );
}

[TestMethod]
@@ -890,7 +886,7 @@ namespace AntlrUnitTests
expectedRules.Add( "c" );
expectedRules.Add( "x" );
expectedRules.Add( "y" );
-            assertTrue( expectedRules.SequenceEqual( ruleNames( leftRecursive ) ) );
+            Assert.IsTrue( expectedRules.SequenceEqual( ruleNames( leftRecursive ) ) );
}

[TestMethod]
@@ -903,7 +899,7 @@ namespace AntlrUnitTests
// forever inside of a rule if there was an epsilon loop.
var leftRecursive = g.GetLeftRecursiveRules();
var expectedRules = new HashSet<Rule>();
-            assertTrue( expectedRules.SequenceEqual( leftRecursive ) );
+            Assert.IsTrue( expectedRules.SequenceEqual( leftRecursive ) );
}

// L O O P S
@@ -914,8 +910,8 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : ( A )* ;" );
string expecting =
-                ".s0-A->:s1=>1\n" +
-                ".s0-EOF->:s2=>2\n";
+                ".s0-A->:s1=>1" + NewLine +
+                ".s0-EOF->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -925,8 +921,8 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : ( A | B | C )* ;" );
string expecting =
-                ".s0-A..C->:s1=>1\n" +
-                ".s0-EOF->:s2=>2\n";
+                ".s0-A..C->:s1=>1" + NewLine +
+                ".s0-EOF->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -936,8 +932,8 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : ( A )+ ;" );
string expecting =
-                ".s0-A->:s1=>1\n" +
-                ".s0-EOF->:s2=>2\n";
+                ".s0-A->:s1=>1" + NewLine +
+                ".s0-EOF->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 ); // loopback decision
}

@@ -948,8 +944,8 @@ namespace AntlrUnitTests
"a : (options {greedy=false;}:A)+ ;\n" );
// should look the same as A+ since no ambiguity
string expecting =
-                ".s0-A->:s1=>1\n" +
-                ".s0-EOF->:s2=>2\n";
+                ".s0-A->:s1=>1" + NewLine +
+                ".s0-EOF->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -960,7 +956,7 @@ namespace AntlrUnitTests
"a : (options {greedy=false;}:A)+ A+ ;\n" );
// should look the same as A+ since no ambiguity
string expecting =
-                ".s0-A->:s1=>2\n"; // always chooses to exit
+                ".s0-A->:s1=>2" + NewLine; // always chooses to exit
int[] unreachableAlts = new int[] { 1 };
int[] nonDetAlts = new int[] { 1, 2 };
string ambigInput = "A";
@@ -977,7 +973,7 @@ namespace AntlrUnitTests
"a : (options {greedy=true;}:A)+ A+ ;\n" );
// should look the same as A+ since no ambiguity
string expecting =
-                ".s0-A->:s1=>1\n"; // always chooses to enter loop upon A
+                ".s0-A->:s1=>1" + NewLine; // always chooses to enter loop upon A
// turns off 1 of warnings. A can never exit loop now
int[] unreachableAlts = new int[] { 2 };
int[] nonDetAlts = null;
@@ -994,8 +990,8 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : ( A | B | C )+ ;" );
string expecting =
-                ".s0-A..C->:s1=>1\n" +
-                ".s0-EOF->:s2=>2\n";
+                ".s0-A..C->:s1=>1" + NewLine +
+                ".s0-EOF->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -1005,8 +1001,8 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : ( A )? B ;" );
string expecting =
-                ".s0-A->:s1=>1\n" +
-                ".s0-B->:s2=>2\n";
+                ".s0-A->:s1=>1" + NewLine +
+                ".s0-B->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 ); // loopback decision
}

@@ -1016,8 +1012,8 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : ( A | B | C )? Z ;" );
string expecting =
-                ".s0-A..C->:s1=>1\n" +
-                ".s0-Z->:s2=>2\n";
+                ".s0-A..C->:s1=>1" + NewLine +
+                ".s0-Z->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 ); // loopback decision
}

@@ -1029,20 +1025,20 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : (A)* B | (A)* C;" );
string expecting =
-                ".s0-A->:s1=>1\n" +
-                ".s0-B->:s2=>2\n";
+                ".s0-A->:s1=>1" + NewLine +
+                ".s0-B->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 ); // loopback
expecting =
-                ".s0-A->:s1=>1\n" +
-                ".s0-C->:s2=>2\n";
+                ".s0-A->:s1=>1" + NewLine +
+                ".s0-C->:s2=>2" + NewLine;
checkDecision( g, 2, expecting, null, null, null, null, 0 ); // loopback
expecting =
-                ".s0-A->.s1\n" +
-                ".s0-B->:s2=>1\n" +
-                ".s0-C->:s3=>2\n" +
-                ".s1-A->.s1\n" +
-                ".s1-B->:s2=>1\n" +
-                ".s1-C->:s3=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s0-B->:s2=>1" + NewLine +
+                ".s0-C->:s3=>2" + NewLine +
+                ".s1-A->.s1" + NewLine +
+                ".s1-B->:s2=>1" + NewLine +
+                ".s1-C->:s3=>2" + NewLine;
checkDecision( g, 3, expecting, null, null, null, null, 0 ); // rule block
}

@@ -1052,19 +1048,19 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : (A)* B | (A)+ C;" );
string expecting =
-                ".s0-A->:s1=>1\n" +
-                ".s0-B->:s2=>2\n";
+                ".s0-A->:s1=>1" + NewLine +
+                ".s0-B->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 ); // loopback
expecting =
-                ".s0-A->:s1=>1\n" +
-                ".s0-C->:s2=>2\n";
+                ".s0-A->:s1=>1" + NewLine +
+                ".s0-C->:s2=>2" + NewLine;
checkDecision( g, 2, expecting, null, null, null, null, 0 ); // loopback
expecting =
-                ".s0-A->.s1\n" +
-                ".s0-B->:s2=>1\n" +
-                ".s1-A->.s1\n" +
-                ".s1-B->:s2=>1\n" +
-                ".s1-C->:s3=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s0-B->:s2=>1" + NewLine +
+                ".s1-A->.s1" + NewLine +
+                ".s1-B->:s2=>1" + NewLine +
+                ".s1-C->:s3=>2" + NewLine;
checkDecision( g, 3, expecting, null, null, null, null, 0 ); // rule block
}

@@ -1075,19 +1071,19 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : (A|B)* X | (A)+ Y;" );
string expecting =
-                ".s0-A..B->:s1=>1\n" +
-                ".s0-X->:s2=>2\n";
+                ".s0-A..B->:s1=>1" + NewLine +
+                ".s0-X->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 ); // loopback (A|B)*
expecting =
-                ".s0-A->:s1=>1\n" +
-                ".s0-Y->:s2=>2\n";
+                ".s0-A->:s1=>1" + NewLine +
+                ".s0-Y->:s2=>2" + NewLine;
checkDecision( g, 2, expecting, null, null, null, null, 0 ); // loopback (A)+
expecting =
-                ".s0-A->.s1\n" +
-                ".s0-B..X->:s2=>1\n" +
-                ".s1-A->.s1\n" +
-                ".s1-B..X->:s2=>1\n" +
-                ".s1-Y->:s3=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s0-B..X->:s2=>1" + NewLine +
+                ".s1-A->.s1" + NewLine +
+                ".s1-B..X->:s2=>1" + NewLine +
+                ".s1-Y->:s3=>2" + NewLine;
checkDecision( g, 3, expecting, null, null, null, null, 0 ); // rule
}

@@ -1097,10 +1093,10 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : (A|B)+ B;" );
string expecting =
-                ".s0-A->:s3=>1\n" +
-                ".s0-B->.s1\n" +
-                ".s1-A..B->:s3=>1\n" +
-                ".s1-EOF->:s2=>2\n"; // sees A|B as a set
+                ".s0-A->:s3=>1" + NewLine +
+                ".s0-B->.s1" + NewLine +
+                ".s1-A..B->:s3=>1" + NewLine +
+                ".s1-EOF->:s2=>2" + NewLine; // sees A|B as a set
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -1110,10 +1106,10 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : (A|B)? B;" );
string expecting =
-                ".s0-A->:s2=>1\n" +
-                ".s0-B->.s1\n" +
-                ".s1-B->:s2=>1\n" +
-                ".s1-EOF->:s3=>2\n";
+                ".s0-A->:s2=>1" + NewLine +
+                ".s0-B->.s1" + NewLine +
+                ".s1-B->:s2=>1" + NewLine +
+                ".s1-EOF->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -1125,8 +1121,8 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : A C | A C;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-C->:s2=>1\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-C->:s2=>1" + NewLine;
int[] unreachableAlts = new int[] { 2 };
int[] nonDetAlts = new int[] { 1, 2 };
string ambigInput = "A C";
@@ -1142,8 +1138,8 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : A B | A B;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-B->:s2=>1\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-B->:s2=>1" + NewLine;
int[] unreachableAlts = new int[] { 2 };
int[] nonDetAlts = new int[] { 1, 2 };
string ambigInput = "A B";
@@ -1159,10 +1155,10 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : A B | A C | A B | Z;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s0-Z->:s4=>4\n" +
-                ".s1-B->:s2=>1\n" +
-                ".s1-C->:s3=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s0-Z->:s4=>4" + NewLine +
+                ".s1-B->:s2=>1" + NewLine +
+                ".s1-C->:s3=>2" + NewLine;
int[] unreachableAlts = new int[] { 3 };
int[] nonDetAlts = new int[] { 1, 3 };
string ambigInput = "A B";
@@ -1174,7 +1170,7 @@ namespace AntlrUnitTests

[TestMethod]
public void TestIndirectIFThenElseStyleAmbig() /*throws Exception*/ {
-            Assert.Inconclusive( "May be failing on just my port..." );
+            //Assert.Inconclusive( "May be failing on just my port..." );
// the (c)+ loopback is ambig because it could match "CASE"
// by entering the loop or by falling out and ignoring (s)*
// back falling back into (cg)* loop which stats over and
@@ -1190,8 +1186,8 @@ namespace AntlrUnitTests
"cg : (c)+ (stat)* ;\n" +
"c : CASE E ;\n" );
string expecting =
-                ".s0-CASE->:s2=>1\n" +
-                ".s0-LCURLY..E->:s1=>2\n";
+                ".s0-CASE->:s2=>1" + NewLine +
+                ".s0-E..RCURLY->:s1=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = new int[] { 1, 2 };
string ambigInput = "CASE";
@@ -1210,8 +1206,8 @@ namespace AntlrUnitTests
"a : ~(A | B | C) | C {;} ;\n" +
"b : X Y Z ;" );
string expecting =
-                ".s0-C->:s2=>2\n" +
-                ".s0-X..Z->:s1=>1\n";
+                ".s0-C->:s2=>2" + NewLine +
+                ".s0-X..Z->:s1=>1" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -1222,8 +1218,8 @@ namespace AntlrUnitTests
"a : ~C | C {;} ;\n" +
"b : X Y Z ;" );
string expecting =
-                ".s0-C->:s2=>2\n" +
-                ".s0-X..Z->:s1=>1\n";
+                ".s0-C->:s2=>2" + NewLine +
+                ".s0-X..Z->:s1=>1" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -1233,8 +1229,8 @@ namespace AntlrUnitTests
"lexer grammar t;\n" +
"A : ~'x' | 'x' {;} ;\n" );
string expecting =
-                ".s0-'x'->:s2=>2\n" +
-                ".s0-{'\\u0000'..'w', 'y'..'\\uFFFF'}->:s1=>1\n";
+                ".s0-'x'->:s2=>2" + NewLine +
+                ".s0-{'\\u0000'..'w', 'y'..'\\uFFFF'}->:s1=>1" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -1245,8 +1241,8 @@ namespace AntlrUnitTests
"A : ~(' '|'\t'|'x'|'y') | 'x';\n" + // collapse into single set
"B : 'y' ;" );
string expecting =
-                ".s0-'y'->:s2=>2\n" +
-                ".s0-{'\\u0000'..'\\b', '\\n'..'\\u001F', '!'..'x', 'z'..'\\uFFFF'}->:s1=>1\n";
+                ".s0-'y'->:s2=>2" + NewLine +
+                ".s0-{'\\u0000'..'\\b', '\\n'..'\\u001F', '!'..'x', 'z'..'\\uFFFF'}->:s1=>1" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -1256,8 +1252,8 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : (A | B {foo}) | C;" );
string expecting =
-                ".s0-A->:s1=>1\n" +
-                ".s0-B->:s2=>2\n";
+                ".s0-A->:s1=>1" + NewLine +
+                ".s0-B->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -1269,7 +1265,7 @@ namespace AntlrUnitTests
);
string expecting = // still looks like block
"(grammar t (rule a ARG RET scope (BLOCK (ALT A <end-of-alt>) (ALT B <end-of-alt>) (ALT C <end-of-alt>) <end-of-block>) <end-of-rule>))";
-            assertEquals( expecting, g.Tree.ToStringTree() );
+            Assert.AreEqual( expecting, g.Tree.ToStringTree() );
}

[TestMethod]
@@ -1280,8 +1276,8 @@ namespace AntlrUnitTests
"B : 'b';\n"
);
string expecting =
-                ".s0-'a'->:s1=>1\n" +
-                ".s0-'b'->:s2=>2\n";
+                ".s0-'a'->:s1=>1" + NewLine +
+                ".s0-'b'->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -1294,8 +1290,8 @@ namespace AntlrUnitTests
"  | A\n" +
"  ;" );
string expecting =
-                ".s0-A->:s1=>1\n" +
-                ".s0-B->:s2=>1\n"; // not optimized because states are nondet
+                ".s0-A->:s1=>1" + NewLine +
+                ".s0-B->:s2=>1" + NewLine; // not optimized because states are nondet
int[] unreachableAlts = new int[] { 2, 3 };
int[] nonDetAlts = new int[] { 1, 2, 3 };
string ambigInput = "A";
@@ -1332,8 +1328,8 @@ namespace AntlrUnitTests
"type : I | F;" );
// nondeterministic from left edge; no stop state
string expecting =
-                ".s0-F..I->.s1\n" +
-                ".s1-ID->:s2=>1\n";
+                ".s0-F..I->.s1" + NewLine +
+                ".s1-ID->:s2=>1" + NewLine;
int[] unreachableAlts = new int[] { 2, 3, 4 };
int[] nonDetAlts = new int[] { 1, 2, 3, 4 };
string ambigInput = "F..I ID";
@@ -1345,7 +1341,7 @@ namespace AntlrUnitTests

[TestMethod]
public void TestFollowReturnsToLoopReenteringSameRule() /*throws Exception*/ {
-            Assert.Inconclusive( "May be failing on just my port..." );
+            //Assert.Inconclusive( "May be failing on just my port..." );
// D07 can be matched in the (...)? or fall out of esc back into (..)*
// loop in sl.  Note that D07 is matched by ~(R|SLASH).  No good
// way to write that grammar I guess
@@ -1355,9 +1351,9 @@ namespace AntlrUnitTests
"\n" +
"esc : SLASH ( N | D03 (D07)? ) ;" );
string expecting =
-                ".s0-R->:s3=>3\n" +
-                ".s0-SLASH->:s1=>1\n" +
-                ".s0-{L, N..D07}->:s2=>2\n";
+                ".s0-D03..N->:s2=>2" + NewLine +
+                ".s0-R->:s3=>3" + NewLine +
+                ".s0-SLASH->:s1=>1" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = new int[] { 1, 2 };
string ambigInput = "D07";
@@ -1377,9 +1373,9 @@ namespace AntlrUnitTests
"    ;\n"
);
string expecting =
-                ".s0-'0'->.s1\n" +
-                ".s1-'.'->:s3=>1\n" +
-                ".s1-<EOT>->:s2=>2\n";
+                ".s0-'0'->.s1" + NewLine +
+                ".s1-'.'->:s3=>1" + NewLine +
+                ".s1-<EOT>->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -1398,11 +1394,11 @@ namespace AntlrUnitTests
"b   :   ID\n" +
"    ;\n" );
string expecting =
-                ".s0-ID->:s5=>3\n" +
-                ".s0-L->.s1\n" +
-                ".s1-ID->.s2\n" +
-                ".s1-L->:s4=>2\n" +
-                ".s2-R->:s3=>1\n";
+                ".s0-ID->:s5=>3" + NewLine +
+                ".s0-L->.s1" + NewLine +
+                ".s1-ID->.s2" + NewLine +
+                ".s1-L->:s4=>2" + NewLine +
+                ".s2-R->:s3=>1" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = new int[] { 1, 2 };
string ambigInput = "L ID R";
@@ -1433,11 +1429,11 @@ namespace AntlrUnitTests
"    |   L a R\n" +
"    ;" );
string expecting =
-                ".s0-ID->:s4=>2\n" +
-                ".s0-L->.s1\n" +
-                ".s1-ID->.s2\n" +
-                ".s1-L->:s4=>2\n" +
-                ".s2-R->:s3=>1\n";
+                ".s0-ID->:s4=>2" + NewLine +
+                ".s0-L->.s1" + NewLine +
+                ".s1-ID->.s2" + NewLine +
+                ".s1-L->:s4=>2" + NewLine +
+                ".s2-R->:s3=>1" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = new int[] { 1, 2 };
string ambigInput = "L ID R";
@@ -1470,8 +1466,8 @@ namespace AntlrUnitTests
"s : A block EOF ;\n" +
"block : L .* R ;" );
string expecting =
-                ".s0-A..L->:s2=>1\n" +
-                ".s0-R->:s1=>2\n";
+                ".s0-A..L->:s2=>1" + NewLine +
+                ".s0-R->:s1=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -1488,8 +1484,8 @@ namespace AntlrUnitTests
"s : A block EOF ;\n" +
"block : L .+ R ;" );
string expecting =
-                ".s0-A..L->:s2=>1\n" +
-                ".s0-R->:s1=>2\n";
+                ".s0-A..L->:s2=>1" + NewLine +
+                ".s0-R->:s1=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -1507,8 +1503,8 @@ namespace AntlrUnitTests
"    | Y\n" +
"    ;\n" );
string expecting =
-                ".s0-X&&{synpred1_t}?->:s1=>1\n" + // does not hoist; it gates edges
-                ".s0-Y->:s2=>2\n";
+                ".s0-X&&{synpred1_t}?->:s1=>1" + NewLine + // does not hoist; it gates edges
+                ".s0-Y->:s2=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -1520,7 +1516,7 @@ namespace AntlrUnitTests
HashSet<string> preds = g.synPredNamesUsedInDFA;
HashSet<string> expectedPreds = new HashSet<string>(); //{{add("synpred1_t");}};
expectedPreds.Add( "synpred1_t" );
-            assertTrue( "predicate names not recorded properly in grammar", expectedPreds.SequenceEqual( preds ) );
+            Assert.IsTrue(expectedPreds.SequenceEqual(preds), "predicate names not recorded properly in grammar");
}

[TestMethod]
@@ -1532,9 +1528,9 @@ namespace AntlrUnitTests
"    | X\n" +
"    ;\n");
string expecting =
-                ".s0-X->.s1\n" +
-                ".s1-{synpred1_t}?->:s2=>1\n" + // hoists into decision
-            ".s1-{true}?->:s3=>2\n";
+                ".s0-X->.s1" + NewLine +
+                ".s1-{synpred1_t}?->:s2=>1" + NewLine + // hoists into decision
+            ".s1-{true}?->:s3=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -1557,10 +1553,10 @@ namespace AntlrUnitTests
"    | X\n" +
"    ;\n");
string expecting =
-                ".s0-X->.s1\n" +
-                ".s0-Y&&{synpred1_t}?->:s2=>1\n" +
-                ".s1-{synpred1_t}?->:s2=>1\n" +
-                    ".s1-{true}?->:s3=>2\n";
+                ".s0-X->.s1" + NewLine +
+                ".s0-Y&&{synpred1_t}?->:s2=>1" + NewLine +
+                ".s1-{synpred1_t}?->:s2=>1" + NewLine +
+                    ".s1-{true}?->:s3=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -1572,7 +1568,7 @@ namespace AntlrUnitTests
HashSet<string> preds = g.synPredNamesUsedInDFA;
HashSet<string> expectedPreds = new HashSet<string>(); //{{add("synpred1_t");}};
expectedPreds.Add("synpred1_t");
-            assertTrue("predicate names not recorded properly in grammar", expectedPreds.SequenceEqual(preds));
+            Assert.IsTrue(expectedPreds.SequenceEqual(preds), "predicate names not recorded properly in grammar");
}

[TestMethod]
@@ -1583,8 +1579,8 @@ namespace AntlrUnitTests
"s : IF s (options {greedy=true;} : E s)? | B;\n" +
"slist: s SEMI ;");
string expecting =
-                ".s0-E->:s1=>1\n" +
-                ".s0-SEMI->:s2=>2\n";
+                ".s0-E->:s1=>1" + NewLine +
+                ".s0-SEMI->:s2=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -1593,8 +1589,8 @@ namespace AntlrUnitTests
checkDecision(g, 1, expecting, unreachableAlts,
nonDetAlts, ambigInput, danglingAlts, numWarnings);
expecting =
-                ".s0-B->:s2=>2\n" +
-                ".s0-IF->:s1=>1\n";
+                ".s0-B->:s2=>2" + NewLine +
+                ".s0-IF->:s1=>1" + NewLine;
checkDecision(g, 2, expecting, null, null, null, null, 0);
}

@@ -1635,8 +1631,8 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : A+ X | A+ Y ;" );
string expecting =
-                ".s0-A->:s1=>1\n" +
-                ".s0-X->:s2=>2\n";
+                ".s0-A->:s1=>1" + NewLine +
+                ".s0-X->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

@@ -1665,13 +1661,13 @@ namespace AntlrUnitTests
g.CreateLookaheadDFAs( false );
}
NonRegularDecisionMessage msg = getNonRegularDecisionMessage( equeue.errors );
-            assertTrue( "expected fatal non-LL(*) msg", msg != null );
+            Assert.IsNotNull(msg, "expected fatal non-LL(*) msg");
List<int> alts = new List<int>();
alts.AddRange( msg.altsWithRecursion );
alts.Sort();
//Collections.sort( alts );
-            //assertEquals( expectedBadAlts, alts );
-            assertTrue( expectedBadAlts.SequenceEqual( alts ) );
+            //Assert.AreEqual( expectedBadAlts, alts );
+            Assert.IsTrue( expectedBadAlts.SequenceEqual( alts ) );
}

protected void assertRecursionOverflow( Grammar g,
@@ -1689,10 +1685,9 @@ namespace AntlrUnitTests
g.CreateLookaheadDFAs( false );
}
RecursionOverflowMessage msg = getRecursionOverflowMessage( equeue.errors );
-            assertTrue( "missing expected recursion overflow msg" + msg, msg != null );
-            assertEquals( "target rules mismatch",
-                         expectedTargetRules.ToElementString(), msg.targetRules.ToList().ToElementString() );
-            assertEquals( "mismatched alt", expectedAlt, msg.alt );
+            Assert.IsNotNull(msg, "missing expected recursion overflow msg" + msg);
+            Assert.AreEqual(expectedTargetRules.ToElementString(), msg.targetRules.ToList().ToElementString(), "target rules mismatch");
+            Assert.AreEqual(expectedAlt, msg.alt, "mismatched alt");
}

[TestMethod]
@@ -1702,9 +1697,9 @@ namespace AntlrUnitTests
"tree grammar t;\n" +
"a : A B | A . ;\n" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-A->:s3=>2\n" +
-                ".s1-B->:s2=>1\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-A->:s3=>2" + NewLine +
+                ".s1-B->:s2=>1" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = new int[] { 1, 2 };
string ambigInput = null;
@@ -1721,14 +1716,14 @@ namespace AntlrUnitTests
"tree grammar t;\n" +
"a : ^(A X Y) | ^(A . .) ;\n" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-DOWN->.s2\n" +
-                ".s2-X->.s3\n" +
-                ".s2-{A, Y}->:s6=>2\n" +
-                ".s3-Y->.s4\n" +
-                ".s3-{DOWN, A..X}->:s6=>2\n" +
-                ".s4-DOWN->:s6=>2\n" +
-                ".s4-UP->:s5=>1\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-DOWN->.s2" + NewLine +
+                ".s2-X->.s3" + NewLine +
+                ".s2-{A, Y}->:s6=>2" + NewLine +
+                ".s3-Y->.s4" + NewLine +
+                ".s3-{DOWN, A..X}->:s6=>2" + NewLine +
+                ".s4-DOWN->:s6=>2" + NewLine +
+                ".s4-UP->:s5=>1" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = new int[] { 1, 2 };
string ambigInput = null;
@@ -1766,11 +1761,10 @@ namespace AntlrUnitTests
Console.Error.WriteLine( "Warnings issued: " + equeue );
}

-            assertEquals( "unexpected number of expected problems",
-                       expectingNumWarnings, equeue.size() );
+            Assert.AreEqual(expectingNumWarnings, equeue.size(), "unexpected number of expected problems");

DFA dfa = g.GetLookaheadDFA( decision );
-            assertNotNull( "no DFA for decision " + decision, dfa );
+            Assert.IsNotNull( dfa, "no DFA for decision " + decision );
FASerializer serializer = new FASerializer( g );
string result = serializer.Serialize( dfa.startState );

@@ -1783,12 +1777,11 @@ namespace AntlrUnitTests
s.AddAll( expectingUnreachableAlts );
BitSet s2 = new BitSet();
s2.AddAll( unreachableAlts );
-                assertEquals( "unreachable alts mismatch", s, s2 );
+                Assert.AreEqual(s, s2, "unreachable alts mismatch");
}
else
{
-                assertEquals( "number of unreachable alts", 0,
-                             unreachableAlts != null ? unreachableAlts.Count : 0 );
+                Assert.AreEqual(0, unreachableAlts != null ? unreachableAlts.Count : 0, "number of unreachable alts");
}

// check conflicting input
@@ -1796,14 +1789,13 @@ namespace AntlrUnitTests
{
// first, find nondet message
Message msg = (Message)equeue.warnings[0];
-                assertTrue( "expecting nondeterminism; found " + msg.GetType().Name,
-                            msg is GrammarNonDeterminismMessage );
+                Assert.IsTrue(msg is GrammarNonDeterminismMessage, "expecting nondeterminism; found " + msg.GetType().Name);
GrammarNonDeterminismMessage nondetMsg =
getNonDeterminismMessage( equeue.warnings );
var labels =
nondetMsg.probe.GetSampleNonDeterministicInputSequence( nondetMsg.problemState );
string input = nondetMsg.probe.GetInputSequenceDisplay( labels );
-                assertEquals( expectingAmbigInput, input );
+                Assert.AreEqual( expectingAmbigInput, input );
}

// check nondet alts
@@ -1831,20 +1823,18 @@ namespace AntlrUnitTests
s.AddAll( expectingNonDetAlts );
BitSet s2 = new BitSet();
s2.AddAll( nonDetAlts );
-                assertEquals( "nondet alts mismatch", s, s2 );
-                assertTrue( "found no nondet alts; expecting: " +
-                            str( expectingNonDetAlts ),
-                            nondetMsg != null || recMsg != null );
+                Assert.AreEqual(s, s2, "nondet alts mismatch");
+                Assert.IsTrue(nondetMsg != null || recMsg != null, "found no nondet alts; expecting: " + str(expectingNonDetAlts));
}
else
{
// not expecting any nondet alts, make sure there are none
GrammarNonDeterminismMessage nondetMsg =
getNonDeterminismMessage( equeue.warnings );
-                assertNull( "found nondet alts, but expecting none", nondetMsg );
+                Assert.IsNull(nondetMsg, "found nondet alts, but expecting none");
}

-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

protected GrammarNonDeterminismMessage getNonDeterminismMessage( IList warnings )
diff --git a/Antlr3.Test/TestDFAMatching.cs b/Antlr3.Test/TestDFAMatching.cs
index 19aea83..be4158a 100644
--- a/Antlr3.Test/TestDFAMatching.cs
+++ b/Antlr3.Test/TestDFAMatching.cs
@@ -109,7 +109,7 @@ namespace AntlrUnitTests
//throws Exception
{
ANTLRStringStream stream = new ANTLRStringStream( input );
-            assertEquals( dfa.Predict( stream ), expected );
+            Assert.AreEqual( dfa.Predict( stream ), expected );
}

}
diff --git a/Antlr3.Test/TestHeteroAST.cs b/Antlr3.Test/TestHeteroAST.cs
index 7a04b32..4d43896 100644
--- a/Antlr3.Test/TestHeteroAST.cs
+++ b/Antlr3.Test/TestHeteroAST.cs
@@ -57,7 +57,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "a<V>" + NewLine, found );
+            Assert.AreEqual( "a<V>" + NewLine, found );
}

[TestMethod]
@@ -71,7 +71,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser("T.g", grammar, "TParser", "TLexer",
"a", "a", debug);
-            assertEquals("a\n", found);
+            Assert.AreEqual("a" + NewLine, found);
}

[TestMethod]
@@ -89,7 +89,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "a<V>" + NewLine, found );
+            Assert.AreEqual( "a<V>" + NewLine, found );
}

[TestMethod]
@@ -107,7 +107,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "a<V>" + NewLine, found );
+            Assert.AreEqual( "a<V>" + NewLine, found );
}

[TestMethod]
@@ -125,7 +125,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "a<V>" + NewLine, found );
+            Assert.AreEqual( "a<V>" + NewLine, found );
}

[TestMethod]
@@ -143,7 +143,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "a<V>" + NewLine, found );
+            Assert.AreEqual( "a<V>" + NewLine, found );
}

[TestMethod]
@@ -161,7 +161,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "a<V>" + NewLine, found );
+            Assert.AreEqual( "a<V>" + NewLine, found );
}

[TestMethod]
@@ -179,7 +179,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "begin", debug );
-            assertEquals( "begin<V>" + NewLine, found );
+            Assert.AreEqual( "begin<V>" + NewLine, found );
}

[TestMethod]
@@ -197,7 +197,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "begin", debug );
-            assertEquals( "begin<V>" + NewLine, found );
+            Assert.AreEqual( "begin<V>" + NewLine, found );
}

// PARSERS -- REWRITE AST
@@ -217,7 +217,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "a<V>" + NewLine, found );
+            Assert.AreEqual( "a<V>" + NewLine, found );
}

[TestMethod]
@@ -240,7 +240,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "<V>;421930 a<V>;9900" + NewLine, found );
+            Assert.AreEqual( "<V>;421930 a<V>;9900" + NewLine, found );
}

[TestMethod]
@@ -259,7 +259,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a 2", debug );
-            assertEquals( "(a<V> 2)" + NewLine, found );
+            Assert.AreEqual( "(a<V> 2)" + NewLine, found );
}

[TestMethod]
@@ -277,7 +277,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "begin", debug );
-            assertEquals( "begin<V>" + NewLine, found );
+            Assert.AreEqual( "begin<V>" + NewLine, found );
}

[TestMethod]
@@ -296,7 +296,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "begin 2", debug );
-            assertEquals( "(begin<V> 2)" + NewLine, found );
+            Assert.AreEqual( "(begin<V> 2)" + NewLine, found );
}

[TestMethod]
@@ -322,7 +322,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a,b,c", debug );
-            assertEquals( "(LIST<W> a<V> b<V> c<V>)" + NewLine, found );
+            Assert.AreEqual( "(LIST<W> a<V> b<V> c<V>)" + NewLine, found );
}

[TestMethod]
@@ -345,7 +345,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "int a, b, c;", debug );
-            assertEquals( "(int<V> a) (int<V> b) (int<V> c)" + NewLine, found );
+            Assert.AreEqual( "(int<V> a) (int<V> b) (int<V> c)" + NewLine, found );
}

// TREE PARSERS -- REWRITE AST
@@ -378,7 +378,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc 34" );
-            assertEquals( "34<V> abc<W>" + NewLine, found );
+            Assert.AreEqual( "34<V> abc<W>" + NewLine, found );
}

[TestMethod]
@@ -409,7 +409,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc 34" );
-            assertEquals( "(34<V> abc<W>)" + NewLine, found );
+            Assert.AreEqual( "(34<V> abc<W>)" + NewLine, found );
}

[TestMethod]
@@ -437,7 +437,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc" );
-            assertEquals( "ROOT<V> abc" + NewLine, found );
+            Assert.AreEqual( "ROOT<V> abc" + NewLine, found );
}

[TestMethod]
@@ -466,7 +466,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc" );
-            assertEquals( "ROOT<V>;42 abc" + NewLine, found );
+            Assert.AreEqual( "ROOT<V>;42 abc" + NewLine, found );
}

[TestMethod]
@@ -494,7 +494,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc" );
-            assertEquals( "(ROOT<V> abc)" + NewLine, found );
+            Assert.AreEqual( "(ROOT<V> abc)" + NewLine, found );
}

[TestMethod]
@@ -523,7 +523,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc" );
-            assertEquals( "ROOT<V>@1" + NewLine, found ); // at line 1; shows copy of ID's stuff
+            Assert.AreEqual( "ROOT<V>@1" + NewLine, found ); // at line 1; shows copy of ID's stuff
}

[TestMethod]
@@ -551,7 +551,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc;" );
-            assertEquals( "abc<V> ;<V>" + NewLine, found );
+            Assert.AreEqual( "abc<V> ;<V>" + NewLine, found );
}

}
diff --git a/Antlr3.Test/TestInterpretedLexing.cs b/Antlr3.Test/TestInterpretedLexing.cs
index 631adc9..8bb2379 100644
--- a/Antlr3.Test/TestInterpretedLexing.cs
+++ b/Antlr3.Test/TestInterpretedLexing.cs
@@ -91,10 +91,10 @@ namespace AntlrUnitTests
Interpreter engine = new Interpreter( g, new ANTLRStringStream( "a" ) );
engine = new Interpreter( g, new ANTLRStringStream( "b" ) );
IToken result = engine.Scan( "A" );
-            assertEquals( result.Type, Atype );
+            Assert.AreEqual( result.Type, Atype );
engine = new Interpreter( g, new ANTLRStringStream( "c" ) );
result = engine.Scan( "A" );
-            assertEquals( result.Type, Atype );
+            Assert.AreEqual( result.Type, Atype );
}

[TestMethod]
@@ -106,7 +106,7 @@ namespace AntlrUnitTests
int Atype = g.GetTokenType( "A" );
Interpreter engine = new Interpreter( g, new ANTLRStringStream( "abc" ) ); // should ignore the x
IToken result = engine.Scan( "A" );
-            assertEquals( result.Type, Atype );
+            Assert.AreEqual( result.Type, Atype );
}

[TestMethod]
@@ -118,10 +118,10 @@ namespace AntlrUnitTests
int INTtype = g.GetTokenType( "INT" );
Interpreter engine = new Interpreter( g, new ANTLRStringStream( "12x" ) ); // should ignore the x
IToken result = engine.Scan( "INT" );
-            assertEquals( result.Type, INTtype );
+            Assert.AreEqual( result.Type, INTtype );
engine = new Interpreter( g, new ANTLRStringStream( "1234" ) );
result = engine.Scan( "INT" );
-            assertEquals( result.Type, INTtype );
+            Assert.AreEqual( result.Type, INTtype );
}

[TestMethod]
@@ -134,22 +134,22 @@ namespace AntlrUnitTests
IToken result = engine.Scan( "A" );
engine = new Interpreter( g, new ANTLRStringStream( "a" ) );
result = engine.Scan( "A" );
-            assertEquals( result.Type, Atype );
+            Assert.AreEqual( result.Type, Atype );
engine = new Interpreter( g, new ANTLRStringStream( "1234" ) );
result = engine.Scan( "A" );
-            assertEquals( result.Type, Atype );
+            Assert.AreEqual( result.Type, Atype );
engine = new Interpreter( g, new ANTLRStringStream( "aaa" ) );
result = engine.Scan( "A" );
-            assertEquals( result.Type, Atype );
+            Assert.AreEqual( result.Type, Atype );
engine = new Interpreter( g, new ANTLRStringStream( "aaaa9" ) );
result = engine.Scan( "A" );
-            assertEquals( result.Type, Atype );
+            Assert.AreEqual( result.Type, Atype );
engine = new Interpreter( g, new ANTLRStringStream( "b" ) );
result = engine.Scan( "A" );
-            assertEquals( result.Type, Atype );
+            Assert.AreEqual( result.Type, Atype );
engine = new Interpreter( g, new ANTLRStringStream( "baa" ) );
result = engine.Scan( "A" );
-            assertEquals( result.Type, Atype );
+            Assert.AreEqual( result.Type, Atype );
}

[TestMethod]
diff --git a/Antlr3.Test/TestInterpretedParsing.cs b/Antlr3.Test/TestInterpretedParsing.cs
index 5fd5786..c6912e3 100644
--- a/Antlr3.Test/TestInterpretedParsing.cs
+++ b/Antlr3.Test/TestInterpretedParsing.cs
@@ -76,13 +76,13 @@ namespace AntlrUnitTests
string result = t.ToStringTree();
string expecting =
"(<grammar p> (prog while x { (assign i = (expr 1) ;) (assign y = (expr 3.42) ;) (assign z = (expr y) ;) } <EOF>))";
-            assertEquals(expecting, result);
+            Assert.AreEqual(expecting, result);
}

[TestMethod]
public void TestMismatchedTokenError()
{
-            Assert.Inconclusive("May be failing on just my port...");
+            //Assert.Inconclusive("May be failing on just my port...");
Grammar pg = new Grammar(
"parser grammar p;\n" +
"prog : WHILE ID LCURLY (assign)* RCURLY;\n" +
@@ -113,14 +113,14 @@ namespace AntlrUnitTests
ParseTree t = parseEngine.Parse("prog");
string result = t.ToStringTree();
string expecting =
-                "(<grammar p> (prog while x { (assign i = (expr 1) MismatchedTokenException(5!=9))))";
-            assertEquals(expecting, result);
+                "(<grammar p> (prog while x { (assign i = (expr 1) MismatchedTokenException(6!=10))))";
+            Assert.AreEqual(expecting, result);
}

[TestMethod]
public void TestMismatchedSetError()
{
-            Assert.Inconclusive("May be failing on just my port...");
+            //Assert.Inconclusive("May be failing on just my port...");
Grammar pg = new Grammar(
"parser grammar p;\n" +
"prog : WHILE ID LCURLY (assign)* RCURLY;\n" +
@@ -151,14 +151,14 @@ namespace AntlrUnitTests
ParseTree t = parseEngine.Parse("prog");
string result = t.ToStringTree();
string expecting =
-                "(<grammar p> (prog while x { (assign i = (expr MismatchedSetException(9!={5,10,11})))))";
-            assertEquals(expecting, result);
+                "(<grammar p> (prog while x { (assign i = (expr MismatchedSetException(10!={5,6,7})))))";
+            Assert.AreEqual(expecting, result);
}

[TestMethod]
public void TestNoViableAltError()
{
-            Assert.Inconclusive("May be failing on just my port...");
+            //Assert.Inconclusive("May be failing on just my port...");
Grammar pg = new Grammar(
"parser grammar p;\n" +
"prog : WHILE ID LCURLY (assign)* RCURLY;\n" +
@@ -189,8 +189,8 @@ namespace AntlrUnitTests
ParseTree t = parseEngine.Parse("prog");
string result = t.ToStringTree();
string expecting =
-                "(<grammar p> (prog while x { (assign i = (expr NoViableAltException(9@[4:1: expr : ( INT | FLOAT | ID );])))))";
-            assertEquals(expecting, result);
+                "(<grammar p> (prog while x { (assign i = (expr NoViableAltException(10@[4:1: expr : ( INT | FLOAT | ID );])))))";
+            Assert.AreEqual(expecting, result);
}
}
}
diff --git a/Antlr3.Test/TestIntervalSet.cs b/Antlr3.Test/TestIntervalSet.cs
index 5b29652..df174ce 100644
--- a/Antlr3.Test/TestIntervalSet.cs
+++ b/Antlr3.Test/TestIntervalSet.cs
@@ -54,7 +54,7 @@ namespace AntlrUnitTests
public void TestSingleElement() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 99 );
string expecting = "99";
-            assertEquals( s.ToString(), expecting );
+            Assert.AreEqual( s.ToString(), expecting );
}

[TestMethod]
@@ -64,7 +64,7 @@ namespace AntlrUnitTests
s.Add( 'z' );
s.Add( '\uFFF0' );
string expecting = "{1, 122, 65520}";
-            assertEquals( s.ToString(), expecting );
+            Assert.AreEqual( s.ToString(), expecting );
}

[TestMethod]
@@ -74,7 +74,7 @@ namespace AntlrUnitTests
s.Add( 'a', 'z' );
s.Add( '0', '9' );
string expecting = "{1, 48..57, 97..122}";
-            assertEquals( s.ToString(), expecting );
+            Assert.AreEqual( s.ToString(), expecting );
}

[TestMethod]
@@ -83,7 +83,7 @@ namespace AntlrUnitTests
IntervalSet s2 = IntervalSet.Of( 13, 15 );
string expecting = "13..15";
string result = ( s.And( s2 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -92,7 +92,7 @@ namespace AntlrUnitTests
IntervalSet s2 = IntervalSet.Of( 'd' );
string expecting = "100";
string result = ( s.And( s2 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -101,7 +101,7 @@ namespace AntlrUnitTests
IntervalSet s2 = IntervalSet.Of( '0', '9' );
string expecting = "{}";
string result = ( s.And( s2 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -110,7 +110,7 @@ namespace AntlrUnitTests
IntervalSet s2 = IntervalSet.Of( 'd' );
string expecting = "{}";
string result = ( s.And( s2 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -120,7 +120,7 @@ namespace AntlrUnitTests
IntervalSet s = IntervalSet.Of( 50, 50 );
string expecting = "{1..49, 51..1000, 2000..3000}";
string result = ( s.Complement( vocabulary ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -131,7 +131,7 @@ namespace AntlrUnitTests
s.Add( 250, 300 );
string expecting = "{1..4, 6..49, 61..249, 301..1000}";
string result = ( s.Complement( vocabulary ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -140,7 +140,7 @@ namespace AntlrUnitTests
IntervalSet s = IntervalSet.Of( 1, 1000 );
string expecting = "{}";
string result = ( s.Complement( vocabulary ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -149,7 +149,7 @@ namespace AntlrUnitTests
IntervalSet s = IntervalSet.Of( 1 );
string expecting = "2";
string result = ( s.Complement( vocabulary ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -163,7 +163,7 @@ namespace AntlrUnitTests
s.Add( 10000 ); // this is outside range of vocab and should be ignored
string expecting = "{1..2, 4..49, 61..249, 1000..2000, 9999}";
string result = ( s.Complement( vocabulary ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -172,7 +172,7 @@ namespace AntlrUnitTests
IntervalSet s2 = IntervalSet.Of( 12, 15 );
string expecting = "{10..11, 16..20}";
string result = ( s.Subtract( s2 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -181,12 +181,12 @@ namespace AntlrUnitTests
IntervalSet s2 = IntervalSet.Of( 5, 11 );
string expecting = "12..20";
string result = ( s.Subtract( s2 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );

IntervalSet s3 = IntervalSet.Of( 5, 10 );
expecting = "11..20";
result = ( s.Subtract( s3 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -195,12 +195,12 @@ namespace AntlrUnitTests
IntervalSet s2 = IntervalSet.Of( 15, 25 );
string expecting = "10..14";
string result = ( s.Subtract( s2 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );

IntervalSet s3 = IntervalSet.Of( 20, 25 );
expecting = "10..19";
result = ( s.Subtract( s3 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -209,7 +209,7 @@ namespace AntlrUnitTests
IntervalSet s2 = IntervalSet.Of( 1, 25 );
string expecting = "{}";
string result = ( s.Subtract( s2 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -220,12 +220,12 @@ namespace AntlrUnitTests
IntervalSet s2 = IntervalSet.Of( 5, 55 ); // covers one and touches 2nd range
string expecting = "56..60";
string result = ( s.Subtract( s2 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );

IntervalSet s3 = IntervalSet.Of( 15, 55 ); // touches both
expecting = "{10..14, 56..60}";
result = ( s.Subtract( s3 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

/** The following was broken:
@@ -239,7 +239,7 @@ namespace AntlrUnitTests
s2.Add( 117, 200 );
string expecting = "116";
string result = ( s.Subtract( s2 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -248,12 +248,12 @@ namespace AntlrUnitTests
IntervalSet s2 = IntervalSet.Of( 10, 20 );
Boolean expecting = true;
Boolean result = s.Equals( s2 );
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );

IntervalSet s3 = IntervalSet.Of( 15, 55 );
expecting = false;
result = s.Equals( s3 );
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -266,13 +266,13 @@ namespace AntlrUnitTests
s2.Add( 499, 501 );
Boolean expecting = true;
Boolean result = s.Equals( s2 );
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );

IntervalSet s3 = IntervalSet.Of( 10, 20 );
s3.Add( 2 );
expecting = false;
result = s.Equals( s3 );
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -282,20 +282,20 @@ namespace AntlrUnitTests
s2.Add( 10, 20 );
string expecting = "{}"; // 15 - {1..5, 10..20} = {}
string result = s.Subtract( s2 ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
public void TestMembership() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 15, 15 );
s.Add( 50, 60 );
-            assertTrue( !s.Contains( 0 ) );
-            assertTrue( !s.Contains( 20 ) );
-            assertTrue( !s.Contains( 100 ) );
-            assertTrue( s.Contains( 15 ) );
-            assertTrue( s.Contains( 55 ) );
-            assertTrue( s.Contains( 50 ) );
-            assertTrue( s.Contains( 60 ) );
+            Assert.IsTrue( !s.Contains( 0 ) );
+            Assert.IsTrue( !s.Contains( 20 ) );
+            Assert.IsTrue( !s.Contains( 100 ) );
+            Assert.IsTrue( s.Contains( 15 ) );
+            Assert.IsTrue( s.Contains( 55 ) );
+            Assert.IsTrue( s.Contains( 50 ) );
+            Assert.IsTrue( s.Contains( 60 ) );
}

// {2,15,18} & 10..20
@@ -307,7 +307,7 @@ namespace AntlrUnitTests
s2.Add( 18 );
string expecting = "{15, 18}";
string result = ( s.And( s2 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -318,7 +318,7 @@ namespace AntlrUnitTests
s2.Add( 18 );
string expecting = "{15, 18}";
string result = ( s2.And( s ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -328,7 +328,7 @@ namespace AntlrUnitTests
IntervalSet s2 = IntervalSet.Of( 100, 102 );
string expecting = "102";
string result = ( s.Complement( s2 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -337,7 +337,7 @@ namespace AntlrUnitTests
IntervalSet s2 = IntervalSet.Of( 100, 102 );
string expecting = "102";
string result = ( s.Complement( s2 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -346,7 +346,7 @@ namespace AntlrUnitTests
s.Add( 99, Label.MAX_CHAR_VALUE );
string expecting = "97..98";
string result = ( s.Complement( 1, Label.MAX_CHAR_VALUE ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -357,7 +357,7 @@ namespace AntlrUnitTests
s.Add( 43, 65534 );
string expecting = "0..65534";
string result = s.ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -367,7 +367,7 @@ namespace AntlrUnitTests
s.Add( 0, 41 );
string expecting = "0..65534";
string result = s.ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -380,7 +380,7 @@ namespace AntlrUnitTests
s.Add( 11, 41 );
string expecting = "0..65534";
string result = s.ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -390,7 +390,7 @@ namespace AntlrUnitTests
s.Add( 5, 25 ); // overlaps two!
string expecting = "1..30";
string result = s.ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -400,7 +400,7 @@ namespace AntlrUnitTests
s.Add( 5, 19 );
string expecting = "32";
string result = s.Count.ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

[TestMethod]
@@ -412,7 +412,7 @@ namespace AntlrUnitTests
IList foo = new List<object>();
//String result = String.valueOf( s.toList() );
string result = "[" + string.Join( ", ", s.ToArray().Select( i => i.ToString() ).ToArray() ) + "]";
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

/** The following was broken:
@@ -429,7 +429,7 @@ namespace AntlrUnitTests
s2.Add( 's', 200 );
string expecting = "{0..113, 115, 117..200}";
string result = ( s.And( s2 ) ).ToString();
-            assertEquals( result, expecting );
+            Assert.AreEqual( result, expecting );
}

}
diff --git a/Antlr3.Test/TestJavaCodeGeneration.cs b/Antlr3.Test/TestJavaCodeGeneration.cs
index 1c733c5..bfb018f 100644
--- a/Antlr3.Test/TestJavaCodeGeneration.cs
+++ b/Antlr3.Test/TestJavaCodeGeneration.cs
@@ -56,7 +56,7 @@ namespace AntlrUnitTests
rawGenerateAndBuildRecognizer(
"T.g", grammar, "TParser", null, false );
bool expecting = true; // should be ok
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -71,7 +71,7 @@ namespace AntlrUnitTests
rawGenerateAndBuildRecognizer(
"T.g", grammar, null, "T", false );
bool expecting = true; // should be ok
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -85,7 +85,7 @@ namespace AntlrUnitTests
"  ; \n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "x", false );
-            assertEquals( "x" + NewLine, found );
+            Assert.AreEqual( "x" + NewLine, found );
}

[TestMethod]
@@ -99,7 +99,7 @@ namespace AntlrUnitTests
"  ; \n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "x", false );
-            assertEquals( "x" + NewLine, found );
+            Assert.AreEqual( "x" + NewLine, found );
}

[TestMethod]
@@ -113,7 +113,7 @@ namespace AntlrUnitTests
"  ; \n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "x", false );
-            assertEquals( "x" + NewLine, found );
+            Assert.AreEqual( "x" + NewLine, found );
}

[TestMethod]
@@ -126,7 +126,7 @@ namespace AntlrUnitTests
rawGenerateAndBuildRecognizer(
"T.g", grammar, "TParser", "TLexer", false );
bool expecting = true; // should be ok
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -143,7 +143,7 @@ namespace AntlrUnitTests
rawGenerateAndBuildRecognizer(
"T.g", grammar, null, "T", false );
bool expecting = true; // should be ok
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
diff --git a/Antlr3.Test/TestLexer.cs b/Antlr3.Test/TestLexer.cs
index d4bcf85..d85387c 100644
--- a/Antlr3.Test/TestLexer.cs
+++ b/Antlr3.Test/TestLexer.cs
@@ -61,7 +61,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;";
string found = execParser( "P.g", grammar, "PParser", "PLexer",
"a", "\\t", debug );
-            assertEquals( "\t" + NewLine, found );
+            Assert.AreEqual( "\t" + NewLine, found );
}

[TestMethod]
@@ -76,7 +76,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;";
string found = execParser( "P.g", grammar, "PParser", "PLexer",
"a", "-34", debug );
-            assertEquals( "-34" + NewLine, found );
+            Assert.AreEqual( "-34" + NewLine, found );
}

[TestMethod]
@@ -91,7 +91,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;";
string found = execParser( "P.g", grammar, "PParser", "PLexer",
"a", "- 34", debug );
-            assertEquals( "- 34, channel=0" + NewLine, found );
+            Assert.AreEqual( "- 34, channel=0" + NewLine, found );
}

[TestMethod]
@@ -105,7 +105,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;";
string found = execParser( "P.g", grammar, "PParser", "PLexer",
"a", "-34", debug );
-            assertEquals( "-34" + NewLine, found );
+            Assert.AreEqual( "-34" + NewLine, found );
}

[TestMethod]
@@ -120,7 +120,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;";
string found = execParser( "P.g", grammar, "PParser", "PLexer",
"a", "-34", debug );
-            assertEquals( "-34" + NewLine, found );
+            Assert.AreEqual( "-34" + NewLine, found );
}

[TestMethod]
@@ -135,7 +135,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;";
string found = execParser( "P.g", grammar, "PParser", "PLexer",
"a", "3.14159", debug );
-            assertEquals( "3.14159" + NewLine, found );
+            Assert.AreEqual( "3.14159" + NewLine, found );
}

[TestMethod]
@@ -149,7 +149,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;";
string found = execParser( "P.g", grammar, "PParser", "PLexer",
"a", "hi 342", debug );
-            assertEquals( "342" + NewLine, found );
+            Assert.AreEqual( "342" + NewLine, found );
}

[TestMethod]
@@ -162,7 +162,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;";
string found = execParser( "P.g", grammar, "PParser", "PLexer",
"a", "342", debug );
-            assertEquals( "342" + NewLine, found );
+            Assert.AreEqual( "342" + NewLine, found );
}

[TestMethod]
@@ -175,7 +175,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;";
string found = execParser( "P.g", grammar, "PParser", "PLexer",
"a", "33 297", debug );
-            assertEquals( " 33 297" + NewLine, found );
+            Assert.AreEqual( " 33 297" + NewLine, found );
}

[TestMethod]
@@ -188,7 +188,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;";
string found = execParser( "P.g", grammar, "PParser", "PLexer",
"a", "33 297", debug );
-            assertEquals( " 33 297" + NewLine, found );
+            Assert.AreEqual( " 33 297" + NewLine, found );
}

[TestMethod]
@@ -200,7 +200,7 @@ namespace AntlrUnitTests
"B : x='a' {System.out.println((char)$x);} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "a" + NewLine, found );
+            Assert.AreEqual( "a" + NewLine, found );
}

[TestMethod]
@@ -213,7 +213,7 @@ namespace AntlrUnitTests
rawGenerateAndBuildRecognizer(
"T.g", grammar, null, "T", false );
bool expecting = true; // should be ok
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -227,7 +227,7 @@ namespace AntlrUnitTests
rawGenerateAndBuildRecognizer(
"T.g", grammar, null, "T", false );
bool expecting = true; // should be ok
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -241,7 +241,7 @@ namespace AntlrUnitTests
rawGenerateAndBuildRecognizer(
"T.g", grammar, null, "T", false );
bool expecting = true; // should be ok
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -259,7 +259,7 @@ namespace AntlrUnitTests
rawGenerateAndBuildRecognizer(
"T.g", grammar, null, "T", false );
bool expecting = true; // should be ok
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -281,7 +281,7 @@ namespace AntlrUnitTests
int m = code.IndexOf( "match(\"" );
string found = code.Substring( m, expecting.Length );

-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}
}
}
diff --git a/Antlr3.Test/TestMessages.cs b/Antlr3.Test/TestMessages.cs
index 81c1a85..1c72b2d 100644
--- a/Antlr3.Test/TestMessages.cs
+++ b/Antlr3.Test/TestMessages.cs
@@ -80,7 +80,7 @@ namespace AntlrUnitTests
GrammarSemanticsMessage expectedMessage =
new GrammarSemanticsMessage( expectedMsgID, g, null, expectedArg, expectedArg2 );
string expectedMessageString = expectedMessage.ToString();
-            assertEquals( expectedMessageString, expectedMessage.ToString() );
+            Assert.AreEqual( expectedMessageString, expectedMessage.ToString() );
}
}
}
diff --git a/Antlr3.Test/TestNFAConstruction.cs b/Antlr3.Test/TestNFAConstruction.cs
index 7674f48..82ad087 100644
--- a/Antlr3.Test/TestNFAConstruction.cs
+++ b/Antlr3.Test/TestNFAConstruction.cs
@@ -53,11 +53,11 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : A;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2-A->.s3\n" +
-                ".s3->:s4\n" +
-                ":s4-EOF->.s5\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2-A->.s3" + NewLine +
+                ".s3->:s4" + NewLine +
+                ":s4-EOF->.s5" + NewLine;
checkRule( g, "a", expecting );
}

@@ -67,12 +67,12 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : A B ;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2-A->.s3\n" +
-                ".s3-B->.s4\n" +
-                ".s4->:s5\n" +
-                ":s5-EOF->.s6\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2-A->.s3" + NewLine +
+                ".s3-B->.s4" + NewLine +
+                ".s4->:s5" + NewLine +
+                ":s5-EOF->.s6" + NewLine;
checkRule( g, "a", expecting );
}

@@ -86,17 +86,17 @@ namespace AntlrUnitTests
(6)--Ep-->(7)--B-->(8)--------|
*/
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s1->.s7\n" +
-                ".s10->.s4\n" +
-                ".s2-A->.s3\n" +
-                ".s3->.s4\n" +
-                ".s4->:s5\n" +
-                ".s7->.s8\n" +
-                ".s8-B->.s9\n" +
-                ".s9-{}->.s10\n" +
-                ":s5-EOF->.s6\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s1->.s7" + NewLine +
+                ".s10->.s4" + NewLine +
+                ".s2-A->.s3" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4->:s5" + NewLine +
+                ".s7->.s8" + NewLine +
+                ".s8-B->.s9" + NewLine +
+                ".s9-{}->.s10" + NewLine +
+                ":s5-EOF->.s6" + NewLine;
checkRule( g, "a", expecting );
}

@@ -107,19 +107,19 @@ namespace AntlrUnitTests
"A : ('a'..'c' 'h' | 'q' 'j'..'l') ;"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s10-'q'->.s11\n" +
-                ".s11-'j'..'l'->.s12\n" +
-                ".s12->.s6\n" +
-                ".s2->.s3\n" +
-                ".s2->.s9\n" +
-                ".s3-'a'..'c'->.s4\n" +
-                ".s4-'h'->.s5\n" +
-                ".s5->.s6\n" +
-                ".s6->:s7\n" +
-                ".s9->.s10\n" +
-                ":s7-<EOT>->.s8\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s10-'q'->.s11" + NewLine +
+                ".s11-'j'..'l'->.s12" + NewLine +
+                ".s12->.s6" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s2->.s9" + NewLine +
+                ".s3-'a'..'c'->.s4" + NewLine +
+                ".s4-'h'->.s5" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->:s7" + NewLine +
+                ".s9->.s10" + NewLine +
+                ":s7-<EOT>->.s8" + NewLine;
checkRule( g, "A", expecting );
}

@@ -130,11 +130,11 @@ namespace AntlrUnitTests
"A : 'a'..'c' ;"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2-'a'..'c'->.s3\n" +
-                ".s3->:s4\n" +
-                ":s4-<EOT>->.s5\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2-'a'..'c'->.s3" + NewLine +
+                ".s3->:s4" + NewLine +
+                ":s4-<EOT>->.s5" + NewLine;
checkRule( g, "A", expecting );
}

@@ -145,11 +145,11 @@ namespace AntlrUnitTests
"a : A|'b' ;"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2-A..'b'->.s3\n" +
-                ".s3->:s4\n" +
-                ":s4-EOF->.s5\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2-A..'b'->.s3" + NewLine +
+                ".s3->:s4" + NewLine +
+                ":s4-EOF->.s5" + NewLine;
checkRule( g, "a", expecting );
}

@@ -159,18 +159,18 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : A B | C D;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s1->.s8\n" +
-                ".s10-D->.s11\n" +
-                ".s11->.s5\n" +
-                ".s2-A->.s3\n" +
-                ".s3-B->.s4\n" +
-                ".s4->.s5\n" +
-                ".s5->:s6\n" +
-                ".s8->.s9\n" +
-                ".s9-C->.s10\n" +
-                ":s6-EOF->.s7\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s1->.s8" + NewLine +
+                ".s10-D->.s11" + NewLine +
+                ".s11->.s5" + NewLine +
+                ".s2-A->.s3" + NewLine +
+                ".s3-B->.s4" + NewLine +
+                ".s4->.s5" + NewLine +
+                ".s5->:s6" + NewLine +
+                ".s8->.s9" + NewLine +
+                ".s9-C->.s10" + NewLine +
+                ":s6-EOF->.s7" + NewLine;
checkRule( g, "a", expecting );
}

@@ -181,17 +181,17 @@ namespace AntlrUnitTests
"a : b A ;\n" +
"b : B ;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s3->.s4\n" +
-                ".s4->.s5\n" +
-                ".s5-B->.s6\n" +
-                ".s6->:s7\n" +
-                ".s8-A->.s9\n" +
-                ".s9->:s10\n" +
-                ":s10-EOF->.s11\n" +
-                ":s7->.s8\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4->.s5" + NewLine +
+                ".s5-B->.s6" + NewLine +
+                ".s6->:s7" + NewLine +
+                ".s8-A->.s9" + NewLine +
+                ".s9->:s10" + NewLine +
+                ":s10-EOF->.s11" + NewLine +
+                ":s7->.s8" + NewLine;
checkRule( g, "a", expecting );
}

@@ -203,22 +203,22 @@ namespace AntlrUnitTests
"b : B ;\n" +
"c : b C;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s12->.s13\n" +
-                ".s13-C->.s14\n" +
-                ".s14->:s15\n" +
-                ".s2->.s3\n" +
-                ".s3->.s4\n" +
-                ".s4->.s5\n" +
-                ".s5-B->.s6\n" +
-                ".s6->:s7\n" +
-                ".s8-A->.s9\n" +
-                ".s9->:s10\n" +
-                ":s10-EOF->.s11\n" +
-                ":s15-EOF->.s16\n" +
-                ":s7->.s12\n" +
-                ":s7->.s8\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s12->.s13" + NewLine +
+                ".s13-C->.s14" + NewLine +
+                ".s14->:s15" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4->.s5" + NewLine +
+                ".s5-B->.s6" + NewLine +
+                ".s6->:s7" + NewLine +
+                ".s8-A->.s9" + NewLine +
+                ".s9->:s10" + NewLine +
+                ":s10-EOF->.s11" + NewLine +
+                ":s15-EOF->.s16" + NewLine +
+                ":s7->.s12" + NewLine +
+                ":s7->.s8" + NewLine;
checkRule( g, "a", expecting );
}

@@ -232,16 +232,16 @@ namespace AntlrUnitTests
(6)--Ep-->(7)--Ep-->(8)-------|
*/
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s1->.s7\n" +
-                ".s2-A->.s3\n" +
-                ".s3->.s4\n" +
-                ".s4->:s5\n" +
-                ".s7->.s8\n" +
-                ".s8->.s9\n" +
-                ".s9->.s4\n" +
-                ":s5-EOF->.s6\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s1->.s7" + NewLine +
+                ".s2-A->.s3" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4->:s5" + NewLine +
+                ".s7->.s8" + NewLine +
+                ".s8->.s9" + NewLine +
+                ".s9->.s4" + NewLine +
+                ":s5-EOF->.s6" + NewLine;
checkRule( g, "a", expecting );
}

@@ -251,15 +251,15 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : (A)?;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s2->.s8\n" +
-                ".s3-A->.s4\n" +
-                ".s4->.s5\n" +
-                ".s5->:s6\n" +
-                ".s8->.s5\n" +
-                ":s6-EOF->.s7\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s2->.s8" + NewLine +
+                ".s3-A->.s4" + NewLine +
+                ".s4->.s5" + NewLine +
+                ".s5->:s6" + NewLine +
+                ".s8->.s5" + NewLine +
+                ":s6-EOF->.s7" + NewLine;
checkRule( g, "a", expecting );
}

@@ -269,15 +269,15 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : A?;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s2->.s8\n" +
-                ".s3-A->.s4\n" +
-                ".s4->.s5\n" +
-                ".s5->:s6\n" +
-                ".s8->.s5\n" +
-                ":s6-EOF->.s7\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s2->.s8" + NewLine +
+                ".s3-A->.s4" + NewLine +
+                ".s4->.s5" + NewLine +
+                ".s5->:s6" + NewLine +
+                ".s8->.s5" + NewLine +
+                ":s6-EOF->.s7" + NewLine;
checkRule( g, "a", expecting );
}

@@ -300,15 +300,15 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : (A)+;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s3->.s4\n" +
-                ".s4-A->.s5\n" +
-                ".s5->.s3\n" +
-                ".s5->.s6\n" +
-                ".s6->:s7\n" +
-                ":s7-EOF->.s8\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-A->.s5" + NewLine +
+                ".s5->.s3" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->:s7" + NewLine +
+                ":s7-EOF->.s8" + NewLine;
checkRule( g, "a", expecting );
}

@@ -318,15 +318,15 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : A+;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s3->.s4\n" +
-                ".s4-A->.s5\n" +
-                ".s5->.s3\n" +
-                ".s5->.s6\n" +
-                ".s6->:s7\n" +
-                ":s7-EOF->.s8\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-A->.s5" + NewLine +
+                ".s5->.s3" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->:s7" + NewLine +
+                ":s7-EOF->.s8" + NewLine;
checkRule( g, "a", expecting );
}

@@ -336,15 +336,15 @@ namespace AntlrUnitTests
"lexer grammar t;\n" +
"A : (options {greedy=false;}:'0'..'9')+ ;\n" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s3->.s4\n" +
-                ".s4-'0'..'9'->.s5\n" +
-                ".s5->.s3\n" +
-                ".s5->.s6\n" +
-                ".s6->:s7\n" +
-                ":s7-<EOT>->.s8\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-'0'..'9'->.s5" + NewLine +
+                ".s5->.s3" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->:s7" + NewLine +
+                ":s7-<EOT>->.s8" + NewLine;
checkRule( g, "A", expecting );
}

@@ -354,21 +354,21 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : (A | B{action})+ ;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s10->.s11\n" +
-                ".s11-B->.s12\n" +
-                ".s12-{}->.s13\n" +
-                ".s13->.s6\n" +
-                ".s2->.s3\n" +
-                ".s3->.s10\n" +
-                ".s3->.s4\n" +
-                ".s4-A->.s5\n" +
-                ".s5->.s6\n" +
-                ".s6->.s3\n" +
-                ".s6->.s7\n" +
-                ".s7->:s8\n" +
-                ":s8-EOF->.s9\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s10->.s11" + NewLine +
+                ".s11-B->.s12" + NewLine +
+                ".s12-{}->.s13" + NewLine +
+                ".s13->.s6" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s10" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-A->.s5" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->.s3" + NewLine +
+                ".s6->.s7" + NewLine +
+                ".s7->:s8" + NewLine +
+                ":s8-EOF->.s9" + NewLine;
checkRule( g, "a", expecting );
}

@@ -378,24 +378,24 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : (A | B | )+ ;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s10->.s11\n" +
-                ".s10->.s13\n" +
-                ".s11-B->.s12\n" +
-                ".s12->.s6\n" +
-                ".s13->.s14\n" +
-                ".s14->.s15\n" +
-                ".s15->.s6\n" +
-                ".s2->.s3\n" +
-                ".s3->.s10\n" +
-                ".s3->.s4\n" +
-                ".s4-A->.s5\n" +
-                ".s5->.s6\n" +
-                ".s6->.s3\n" +
-                ".s6->.s7\n" +
-                ".s7->:s8\n" +
-                ":s8-EOF->.s9\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s10->.s11" + NewLine +
+                ".s10->.s13" + NewLine +
+                ".s11-B->.s12" + NewLine +
+                ".s12->.s6" + NewLine +
+                ".s13->.s14" + NewLine +
+                ".s14->.s15" + NewLine +
+                ".s15->.s6" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s10" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-A->.s5" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->.s3" + NewLine +
+                ".s6->.s7" + NewLine +
+                ".s7->:s8" + NewLine +
+                ":s8-EOF->.s9" + NewLine;
checkRule( g, "a", expecting );
}

@@ -405,17 +405,17 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : (A)*;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s2->.s9\n" +
-                ".s3->.s4\n" +
-                ".s4-A->.s5\n" +
-                ".s5->.s3\n" +
-                ".s5->.s6\n" +
-                ".s6->:s7\n" +
-                ".s9->.s6\n" +
-                ":s7-EOF->.s8\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s2->.s9" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-A->.s5" + NewLine +
+                ".s5->.s3" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->:s7" + NewLine +
+                ".s9->.s6" + NewLine +
+                ":s7-EOF->.s8" + NewLine;
checkRule( g, "a", expecting );
}

@@ -425,24 +425,24 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : (A*)*;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s10->:s11\n" +
-                ".s13->.s8\n" +
-                ".s14->.s10\n" +
-                ".s2->.s14\n" +
-                ".s2->.s3\n" +
-                ".s3->.s4\n" +
-                ".s4->.s13\n" +
-                ".s4->.s5\n" +
-                ".s5->.s6\n" +
-                ".s6-A->.s7\n" +
-                ".s7->.s5\n" +
-                ".s7->.s8\n" +
-                ".s8->.s9\n" +
-                ".s9->.s10\n" +
-                ".s9->.s3\n" +
-                ":s11-EOF->.s12\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s10->:s11" + NewLine +
+                ".s13->.s8" + NewLine +
+                ".s14->.s10" + NewLine +
+                ".s2->.s14" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4->.s13" + NewLine +
+                ".s4->.s5" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6-A->.s7" + NewLine +
+                ".s7->.s5" + NewLine +
+                ".s7->.s8" + NewLine +
+                ".s8->.s9" + NewLine +
+                ".s9->.s10" + NewLine +
+                ".s9->.s3" + NewLine +
+                ":s11-EOF->.s12" + NewLine;
checkRule( g, "a", expecting );
}

@@ -452,22 +452,22 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : (A+)*;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s10->:s11\n" +
-                ".s13->.s10\n" +
-                ".s2->.s13\n" +
-                ".s2->.s3\n" +
-                ".s3->.s4\n" +
-                ".s4->.s5\n" +
-                ".s5->.s6\n" +
-                ".s6-A->.s7\n" +
-                ".s7->.s5\n" +
-                ".s7->.s8\n" +
-                ".s8->.s9\n" +
-                ".s9->.s10\n" +
-                ".s9->.s3\n" +
-                ":s11-EOF->.s12\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s10->:s11" + NewLine +
+                ".s13->.s10" + NewLine +
+                ".s2->.s13" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4->.s5" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6-A->.s7" + NewLine +
+                ".s7->.s5" + NewLine +
+                ".s7->.s8" + NewLine +
+                ".s8->.s9" + NewLine +
+                ".s9->.s10" + NewLine +
+                ".s9->.s3" + NewLine +
+                ":s11-EOF->.s12" + NewLine;
checkRule( g, "a", expecting );
}

@@ -477,22 +477,22 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : (A*)+;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s10->:s11\n" +
-                ".s13->.s8\n" +
-                ".s2->.s3\n" +
-                ".s3->.s4\n" +
-                ".s4->.s13\n" +
-                ".s4->.s5\n" +
-                ".s5->.s6\n" +
-                ".s6-A->.s7\n" +
-                ".s7->.s5\n" +
-                ".s7->.s8\n" +
-                ".s8->.s9\n" +
-                ".s9->.s10\n" +
-                ".s9->.s3\n" +
-                ":s11-EOF->.s12\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s10->:s11" + NewLine +
+                ".s13->.s8" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4->.s13" + NewLine +
+                ".s4->.s5" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6-A->.s7" + NewLine +
+                ".s7->.s5" + NewLine +
+                ".s7->.s8" + NewLine +
+                ".s8->.s9" + NewLine +
+                ".s9->.s10" + NewLine +
+                ".s9->.s3" + NewLine +
+                ":s11-EOF->.s12" + NewLine;
checkRule( g, "a", expecting );
}

@@ -502,17 +502,17 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : A*;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s2->.s9\n" +
-                ".s3->.s4\n" +
-                ".s4-A->.s5\n" +
-                ".s5->.s3\n" +
-                ".s5->.s6\n" +
-                ".s6->:s7\n" +
-                ".s9->.s6\n" +
-                ":s7-EOF->.s8\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s2->.s9" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-A->.s5" + NewLine +
+                ".s5->.s3" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->:s7" + NewLine +
+                ".s9->.s6" + NewLine +
+                ":s7-EOF->.s8" + NewLine;
checkRule( g, "a", expecting );
}

@@ -522,23 +522,23 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : (A | B{action})* ;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s10->.s11\n" +
-                ".s11-B->.s12\n" +
-                ".s12-{}->.s13\n" +
-                ".s13->.s6\n" +
-                ".s14->.s7\n" +
-                ".s2->.s14\n" +
-                ".s2->.s3\n" +
-                ".s3->.s10\n" +
-                ".s3->.s4\n" +
-                ".s4-A->.s5\n" +
-                ".s5->.s6\n" +
-                ".s6->.s3\n" +
-                ".s6->.s7\n" +
-                ".s7->:s8\n" +
-                ":s8-EOF->.s9\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s10->.s11" + NewLine +
+                ".s11-B->.s12" + NewLine +
+                ".s12-{}->.s13" + NewLine +
+                ".s13->.s6" + NewLine +
+                ".s14->.s7" + NewLine +
+                ".s2->.s14" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s10" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-A->.s5" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->.s3" + NewLine +
+                ".s6->.s7" + NewLine +
+                ".s7->:s8" + NewLine +
+                ":s8-EOF->.s9" + NewLine;
checkRule( g, "a", expecting );
}

@@ -548,15 +548,15 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : ( A | B )? ;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s2->.s8\n" +
-                ".s3-A..B->.s4\n" +
-                ".s4->.s5\n" +
-                ".s5->:s6\n" +
-                ".s8->.s5\n" +
-                ":s6-EOF->.s7\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s2->.s8" + NewLine +
+                ".s3-A..B->.s4" + NewLine +
+                ".s4->.s5" + NewLine +
+                ".s5->:s6" + NewLine +
+                ".s8->.s5" + NewLine +
+                ":s6-EOF->.s7" + NewLine;
checkRule( g, "a", expecting );
}

@@ -566,18 +566,18 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : {p1}? A | {p2}? B ;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s1->.s8\n" +
-                ".s10-B->.s11\n" +
-                ".s11->.s5\n" +
-                ".s2-{p1}?->.s3\n" +
-                ".s3-A->.s4\n" +
-                ".s4->.s5\n" +
-                ".s5->:s6\n" +
-                ".s8->.s9\n" +
-                ".s9-{p2}?->.s10\n" +
-                ":s6-EOF->.s7\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s1->.s8" + NewLine +
+                ".s10-B->.s11" + NewLine +
+                ".s11->.s5" + NewLine +
+                ".s2-{p1}?->.s3" + NewLine +
+                ".s3-A->.s4" + NewLine +
+                ".s4->.s5" + NewLine +
+                ".s5->:s6" + NewLine +
+                ".s8->.s9" + NewLine +
+                ".s9-{p2}?->.s10" + NewLine +
+                ":s6-EOF->.s7" + NewLine;
checkRule( g, "a", expecting );
}

@@ -588,30 +588,30 @@ namespace AntlrUnitTests
"a : {p1}? {p1a}? A | {p2}? B | {p3} b;\n" +
"b : {p4}? B ;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s1->.s9\n" +
-                ".s10-{p2}?->.s11\n" +
-                ".s11-B->.s12\n" +
-                ".s12->.s6\n" +
-                ".s13->.s14\n" +
-                ".s14-{}->.s15\n" +
-                ".s15->.s16\n" +
-                ".s16->.s17\n" +
-                ".s17->.s18\n" +
-                ".s18-{p4}?->.s19\n" +
-                ".s19-B->.s20\n" +
-                ".s2-{p1}?->.s3\n" +
-                ".s20->:s21\n" +
-                ".s22->.s6\n" +
-                ".s3-{p1a}?->.s4\n" +
-                ".s4-A->.s5\n" +
-                ".s5->.s6\n" +
-                ".s6->:s7\n" +
-                ".s9->.s10\n" +
-                ".s9->.s13\n" +
-                ":s21->.s22\n" +
-                ":s7-EOF->.s8\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s1->.s9" + NewLine +
+                ".s10-{p2}?->.s11" + NewLine +
+                ".s11-B->.s12" + NewLine +
+                ".s12->.s6" + NewLine +
+                ".s13->.s14" + NewLine +
+                ".s14-{}->.s15" + NewLine +
+                ".s15->.s16" + NewLine +
+                ".s16->.s17" + NewLine +
+                ".s17->.s18" + NewLine +
+                ".s18-{p4}?->.s19" + NewLine +
+                ".s19-B->.s20" + NewLine +
+                ".s2-{p1}?->.s3" + NewLine +
+                ".s20->:s21" + NewLine +
+                ".s22->.s6" + NewLine +
+                ".s3-{p1a}?->.s4" + NewLine +
+                ".s4-A->.s5" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->:s7" + NewLine +
+                ".s9->.s10" + NewLine +
+                ".s9->.s13" + NewLine +
+                ":s21->.s22" + NewLine +
+                ":s7-EOF->.s8" + NewLine;
checkRule( g, "a", expecting );
}

@@ -625,64 +625,64 @@ namespace AntlrUnitTests
"d : ( A | B )* ;\n" +
"e : ( A | B )? ;" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s3->.s4\n" +
-                ".s4-A..B->.s5\n" +
-                ".s5->.s3\n" +
-                ".s5->.s6\n" +
-                ".s6->:s7\n" +
-                ":s7-EOF->.s8\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-A..B->.s5" + NewLine +
+                ".s5->.s3" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->:s7" + NewLine +
+                ":s7-EOF->.s8" + NewLine;
checkRule( g, "a", expecting );
expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s10->.s11\n" +
-                ".s11-B->.s12\n" +
-                ".s12-{}->.s13\n" +
-                ".s13->.s6\n" +
-                ".s2->.s3\n" +
-                ".s3->.s10\n" +
-                ".s3->.s4\n" +
-                ".s4-A->.s5\n" +
-                ".s5->.s6\n" +
-                ".s6->.s3\n" +
-                ".s6->.s7\n" +
-                ".s7->:s8\n" +
-                ":s8-EOF->.s9\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s10->.s11" + NewLine +
+                ".s11-B->.s12" + NewLine +
+                ".s12-{}->.s13" + NewLine +
+                ".s13->.s6" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s10" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-A->.s5" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->.s3" + NewLine +
+                ".s6->.s7" + NewLine +
+                ".s7->:s8" + NewLine +
+                ":s8-EOF->.s9" + NewLine;
checkRule( g, "b", expecting );
expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2-A..B->.s3\n" +
-                ".s3-A..B->.s4\n" +
-                ".s4->:s5\n" +
-                ":s5-EOF->.s6\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2-A..B->.s3" + NewLine +
+                ".s3-A..B->.s4" + NewLine +
+                ".s4->:s5" + NewLine +
+                ":s5-EOF->.s6" + NewLine;
checkRule( g, "c", expecting );
expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s2->.s9\n" +
-                ".s3->.s4\n" +
-                ".s4-A..B->.s5\n" +
-                ".s5->.s3\n" +
-                ".s5->.s6\n" +
-                ".s6->:s7\n" +
-                ".s9->.s6\n" +
-                ":s7-EOF->.s8\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s2->.s9" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-A..B->.s5" + NewLine +
+                ".s5->.s3" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->:s7" + NewLine +
+                ".s9->.s6" + NewLine +
+                ":s7-EOF->.s8" + NewLine;
checkRule( g, "d", expecting );
expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s2->.s8\n" +
-                ".s3-A..B->.s4\n" +
-                ".s4->.s5\n" +
-                ".s5->:s6\n" +
-                ".s8->.s5\n" +
-                ":s6-EOF->.s7\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s2->.s8" + NewLine +
+                ".s3-A..B->.s4" + NewLine +
+                ".s4->.s5" + NewLine +
+                ".s5->:s6" + NewLine +
+                ".s8->.s5" + NewLine +
+                ":s6-EOF->.s7" + NewLine;
checkRule( g, "e", expecting );
}

@@ -693,17 +693,17 @@ namespace AntlrUnitTests
"tokens { A; B; C; }\n" +
"a : ~A ;\n" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2-B..C->.s3\n" +
-                ".s3->:s4\n" +
-                ":s4-EOF->.s5\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2-B..C->.s3" + NewLine +
+                ".s3->:s4" + NewLine +
+                ":s4-EOF->.s5" + NewLine;
checkRule( g, "a", expecting );

string expectingGrammarStr =
"1:8: parser grammar P;\n" +
"a : ~ A ;";
-            assertEquals( expectingGrammarStr, g.ToString() );
+            Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

[TestMethod]
@@ -713,17 +713,17 @@ namespace AntlrUnitTests
"tokens { A; B; C; }\n" +
"a : ~(A) ;\n" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2-B..C->.s3\n" +
-                ".s3->:s4\n" +
-                ":s4-EOF->.s5\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2-B..C->.s3" + NewLine +
+                ".s3->:s4" + NewLine +
+                ":s4-EOF->.s5" + NewLine;
checkRule( g, "a", expecting );

string expectingGrammarStr =
"1:8: parser grammar P;\n" +
"a : ~ ( A ) ;";
-            assertEquals( expectingGrammarStr, g.ToString() );
+            Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

[TestMethod]
@@ -732,18 +732,18 @@ namespace AntlrUnitTests
"lexer grammar P;\n" +
"A : ~'3' ;\n" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2-{'\\u0000'..'2', '4'..'\\uFFFF'}->.s3\n" +
-                ".s3->:s4\n" +
-                ":s4-<EOT>->.s5\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2-{'\\u0000'..'2', '4'..'\\uFFFF'}->.s3" + NewLine +
+                ".s3->:s4" + NewLine +
+                ":s4-<EOT>->.s5" + NewLine;
checkRule( g, "A", expecting );

string expectingGrammarStr =
"1:7: lexer grammar P;\n" +
"A : ~ '3' ;\n" +
"Tokens : A ;";
-            assertEquals( expectingGrammarStr, g.ToString() );
+            Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

[TestMethod]
@@ -752,18 +752,18 @@ namespace AntlrUnitTests
"lexer grammar P;\n" +
"A : ~('3'|'b') ;\n" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2-{'\\u0000'..'2', '4'..'a', 'c'..'\\uFFFF'}->.s3\n" +
-                ".s3->:s4\n" +
-                ":s4-<EOT>->.s5\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2-{'\\u0000'..'2', '4'..'a', 'c'..'\\uFFFF'}->.s3" + NewLine +
+                ".s3->:s4" + NewLine +
+                ":s4-<EOT>->.s5" + NewLine;
checkRule( g, "A", expecting );

string expectingGrammarStr =
"1:7: lexer grammar P;\n" +
"A : ~ ( '3' | 'b' ) ;\n" +
"Tokens : A ;";
-            assertEquals( expectingGrammarStr, g.ToString() );
+            Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

[TestMethod]
@@ -772,24 +772,24 @@ namespace AntlrUnitTests
"lexer grammar P;\n" +
"A : ~('3')* ;\n" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s2->.s9\n" +
-                ".s3->.s4\n" +
-                ".s4-{'\\u0000'..'2', '4'..'\\uFFFF'}->.s5\n" +
-                ".s5->.s3\n" +
-                ".s5->.s6\n" +
-                ".s6->:s7\n" +
-                ".s9->.s6\n" +
-                ":s7-<EOT>->.s8\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s2->.s9" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-{'\\u0000'..'2', '4'..'\\uFFFF'}->.s5" + NewLine +
+                ".s5->.s3" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->:s7" + NewLine +
+                ".s9->.s6" + NewLine +
+                ":s7-<EOT>->.s8" + NewLine;
checkRule( g, "A", expecting );

string expectingGrammarStr =
"1:7: lexer grammar P;\n" +
"A : (~ ( '3' ) )* ;\n" +
"Tokens : A ;";
-            assertEquals( expectingGrammarStr, g.ToString() );
+            Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

[TestMethod]
@@ -798,24 +798,24 @@ namespace AntlrUnitTests
"lexer grammar P;\n" +
"A : ~('3'|'b')* ;\n" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s2->.s9\n" +
-                ".s3->.s4\n" +
-                ".s4-{'\\u0000'..'2', '4'..'a', 'c'..'\\uFFFF'}->.s5\n" +
-                ".s5->.s3\n" +
-                ".s5->.s6\n" +
-                ".s6->:s7\n" +
-                ".s9->.s6\n" +
-                ":s7-<EOT>->.s8\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s2->.s9" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-{'\\u0000'..'2', '4'..'a', 'c'..'\\uFFFF'}->.s5" + NewLine +
+                ".s5->.s3" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->:s7" + NewLine +
+                ".s9->.s6" + NewLine +
+                ":s7-<EOT>->.s8" + NewLine;
checkRule( g, "A", expecting );

string expectingGrammarStr =
"1:7: lexer grammar P;\n" +
"A : (~ ( '3' | 'b' ) )* ;\n" +
"Tokens : A ;";
-            assertEquals( expectingGrammarStr, g.ToString() );
+            Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

[TestMethod]
@@ -830,7 +830,7 @@ namespace AntlrUnitTests
"" + NewLine +
"// $ANTLR src \"<string>\" 2" + NewLine +
"A : '{' ~('}')* '}';";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -840,17 +840,17 @@ namespace AntlrUnitTests
"tokens { A; B; C; }\n" +
"a : t=~A ;\n" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2-B..C->.s3\n" +
-                ".s3->:s4\n" +
-                ":s4-EOF->.s5\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2-B..C->.s3" + NewLine +
+                ".s3->:s4" + NewLine +
+                ":s4-EOF->.s5" + NewLine;
checkRule( g, "a", expecting );

string expectingGrammarStr =
"1:8: parser grammar P;\n" +
"a : t=~ A ;";
-            assertEquals( expectingGrammarStr, g.ToString() );
+            Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

[TestMethod]
@@ -859,18 +859,18 @@ namespace AntlrUnitTests
"lexer grammar P;\n" +
"A : t=~'3' ;\n" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2-{'\\u0000'..'2', '4'..'\\uFFFF'}->.s3\n" +
-                ".s3->:s4\n" +
-                ":s4-<EOT>->.s5\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2-{'\\u0000'..'2', '4'..'\\uFFFF'}->.s3" + NewLine +
+                ".s3->:s4" + NewLine +
+                ":s4-<EOT>->.s5" + NewLine;
checkRule( g, "A", expecting );

string expectingGrammarStr =
"1:7: lexer grammar P;\n" +
"A : t=~ '3' ;\n" +
"Tokens : A ;";
-            assertEquals( expectingGrammarStr, g.ToString() );
+            Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

[TestMethod]
@@ -879,18 +879,18 @@ namespace AntlrUnitTests
"lexer grammar P;\n" +
"A : t=~('3'|'b') ;\n" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2-{'\\u0000'..'2', '4'..'a', 'c'..'\\uFFFF'}->.s3\n" +
-                ".s3->:s4\n" +
-                ":s4-<EOT>->.s5\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2-{'\\u0000'..'2', '4'..'a', 'c'..'\\uFFFF'}->.s3" + NewLine +
+                ".s3->:s4" + NewLine +
+                ":s4-<EOT>->.s5" + NewLine;
checkRule( g, "A", expecting );

string expectingGrammarStr =
"1:7: lexer grammar P;\n" +
"A : t=~ ( '3' | 'b' ) ;\n" +
"Tokens : A ;";
-            assertEquals( expectingGrammarStr, g.ToString() );
+            Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

[TestMethod]
@@ -899,11 +899,11 @@ namespace AntlrUnitTests
"grammar P;\n" +
"a : '\\n';" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2-'\\n'->.s3\n" +
-                ".s3->:s4\n" +
-                ":s4-EOF->.s5\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2-'\\n'->.s3" + NewLine +
+                ".s3->:s4" + NewLine +
+                ":s4-EOF->.s5" + NewLine;
checkRule( g, "a", expecting );
}

@@ -913,11 +913,11 @@ namespace AntlrUnitTests
"grammar P;\n" +
"a : 'a\\nb\\u0030c\\'';" );
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2-'a\\nb\\u0030c\\''->.s3\n" +
-                ".s3->:s4\n" +
-                ":s4-EOF->.s5\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2-'a\\nb\\u0030c\\''->.s3" + NewLine +
+                ".s3->:s4" + NewLine +
+                ":s4-EOF->.s5" + NewLine;
checkRule( g, "a", expecting );
}

@@ -931,18 +931,18 @@ namespace AntlrUnitTests
"a : 'a'{;}|'b';"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s1->.s9\n" +
-                ".s10-'b'->.s11\n" +
-                ".s11->.s6\n" +
-                ".s2-{synpred1_t}?->.s3\n" +
-                ".s3-'a'->.s4\n" +
-                ".s4-{}->.s5\n" +
-                ".s5->.s6\n" +
-                ".s6->:s7\n" +
-                ".s9->.s10\n" +
-                ":s7-EOF->.s8\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s1->.s9" + NewLine +
+                ".s10-'b'->.s11" + NewLine +
+                ".s11->.s6" + NewLine +
+                ".s2-{synpred1_t}?->.s3" + NewLine +
+                ".s3-'a'->.s4" + NewLine +
+                ".s4-{}->.s5" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->:s7" + NewLine +
+                ".s9->.s10" + NewLine +
+                ":s7-EOF->.s8" + NewLine;
checkRule( g, "a", expecting );
}

@@ -954,11 +954,11 @@ namespace AntlrUnitTests
"a : 'a'|'b';"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2-'a'..'b'->.s3\n" +
-                ".s3->:s4\n" +
-                ":s4-EOF->.s5\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2-'a'..'b'->.s3" + NewLine +
+                ".s3->:s4" + NewLine +
+                ":s4-EOF->.s5" + NewLine;
checkRule( g, "a", expecting );
}

@@ -970,19 +970,19 @@ namespace AntlrUnitTests
"a : ('a'{;}|'b') ;"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s10->.s11\n" +
-                ".s11-'b'->.s12\n" +
-                ".s12->.s7\n" +
-                ".s2->.s10\n" +
-                ".s2->.s3\n" +
-                ".s3-{synpred1_t}?->.s4\n" +
-                ".s4-'a'->.s5\n" +
-                ".s5-{}->.s6\n" +
-                ".s6->.s7\n" +
-                ".s7->:s8\n" +
-                ":s8-EOF->.s9\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s10->.s11" + NewLine +
+                ".s11-'b'->.s12" + NewLine +
+                ".s12->.s7" + NewLine +
+                ".s2->.s10" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3-{synpred1_t}?->.s4" + NewLine +
+                ".s4-'a'->.s5" + NewLine +
+                ".s5-{}->.s6" + NewLine +
+                ".s6->.s7" + NewLine +
+                ".s7->:s8" + NewLine +
+                ":s8-EOF->.s9" + NewLine;
checkRule( g, "a", expecting );
}

@@ -994,11 +994,11 @@ namespace AntlrUnitTests
"a : ('a'|'b') ;"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2-'a'..'b'->.s3\n" +
-                ".s3->:s4\n" +
-                ":s4-EOF->.s5\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2-'a'..'b'->.s3" + NewLine +
+                ".s3->:s4" + NewLine +
+                ":s4-EOF->.s5" + NewLine;
checkRule( g, "a", expecting );
}

@@ -1010,25 +1010,25 @@ namespace AntlrUnitTests
"a : ('a'{;}|'b')* ;"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s12->.s13\n" +
-                ".s13-{synpred2_t}?->.s14\n" +
-                ".s14-'b'->.s15\n" +
-                ".s15->.s8\n" +
-                ".s16->.s9\n" +
-                ".s2->.s16\n" +
-                ".s2->.s3\n" +
-                ".s3->.s12\n" +
-                ".s3->.s4\n" +
-                ".s4-{synpred1_t}?->.s5\n" +
-                ".s5-'a'->.s6\n" +
-                ".s6-{}->.s7\n" +
-                ".s7->.s8\n" +
-                ".s8->.s3\n" +
-                ".s8->.s9\n" +
-                ".s9->:s10\n" +
-                ":s10-EOF->.s11\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s12->.s13" + NewLine +
+                ".s13-{synpred2_t}?->.s14" + NewLine +
+                ".s14-'b'->.s15" + NewLine +
+                ".s15->.s8" + NewLine +
+                ".s16->.s9" + NewLine +
+                ".s2->.s16" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s12" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-{synpred1_t}?->.s5" + NewLine +
+                ".s5-'a'->.s6" + NewLine +
+                ".s6-{}->.s7" + NewLine +
+                ".s7->.s8" + NewLine +
+                ".s8->.s3" + NewLine +
+                ".s8->.s9" + NewLine +
+                ".s9->:s10" + NewLine +
+                ":s10-EOF->.s11" + NewLine;
checkRule( g, "a", expecting );
}

@@ -1040,17 +1040,17 @@ namespace AntlrUnitTests
"a : ('a'|'b')* ;"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s2->.s9\n" +
-                ".s3->.s4\n" +
-                ".s4-'a'..'b'->.s5\n" +
-                ".s5->.s3\n" +
-                ".s5->.s6\n" +
-                ".s6->:s7\n" +
-                ".s9->.s6\n" +
-                ":s7-EOF->.s8\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s2->.s9" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-'a'..'b'->.s5" + NewLine +
+                ".s5->.s3" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->:s7" + NewLine +
+                ".s9->.s6" + NewLine +
+                ":s7-EOF->.s8" + NewLine;
checkRule( g, "a", expecting );
}

@@ -1062,25 +1062,25 @@ namespace AntlrUnitTests
"a : ('a'|'b'{;})* ;"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s11->.s12\n" +
-                ".s12-{synpred2_t}?->.s13\n" +
-                ".s13-'b'->.s14\n" +
-                ".s14-{}->.s15\n" +
-                ".s15->.s7\n" +
-                ".s16->.s8\n" +
-                ".s2->.s16\n" +
-                ".s2->.s3\n" +
-                ".s3->.s11\n" +
-                ".s3->.s4\n" +
-                ".s4-{synpred1_t}?->.s5\n" +
-                ".s5-'a'->.s6\n" +
-                ".s6->.s7\n" +
-                ".s7->.s3\n" +
-                ".s7->.s8\n" +
-                ".s8->:s9\n" +
-                ":s9-EOF->.s10\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s11->.s12" + NewLine +
+                ".s12-{synpred2_t}?->.s13" + NewLine +
+                ".s13-'b'->.s14" + NewLine +
+                ".s14-{}->.s15" + NewLine +
+                ".s15->.s7" + NewLine +
+                ".s16->.s8" + NewLine +
+                ".s2->.s16" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s11" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-{synpred1_t}?->.s5" + NewLine +
+                ".s5-'a'->.s6" + NewLine +
+                ".s6->.s7" + NewLine +
+                ".s7->.s3" + NewLine +
+                ".s7->.s8" + NewLine +
+                ".s8->:s9" + NewLine +
+                ":s9-EOF->.s10" + NewLine;
checkRule( g, "a", expecting );
}

@@ -1092,18 +1092,18 @@ namespace AntlrUnitTests
"a : ('a')* ;"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s10->.s7\n" +
-                ".s2->.s10\n" +
-                ".s2->.s3\n" +
-                ".s3->.s4\n" +
-                ".s4-{synpred1_t}?->.s5\n" +
-                ".s5-'a'->.s6\n" +
-                ".s6->.s3\n" +
-                ".s6->.s7\n" +
-                ".s7->:s8\n" +
-                ":s8-EOF->.s9\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s10->.s7" + NewLine +
+                ".s2->.s10" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-{synpred1_t}?->.s5" + NewLine +
+                ".s5-'a'->.s6" + NewLine +
+                ".s6->.s3" + NewLine +
+                ".s6->.s7" + NewLine +
+                ".s7->:s8" + NewLine +
+                ":s8-EOF->.s9" + NewLine;
checkRule( g, "a", expecting );
}

@@ -1115,23 +1115,23 @@ namespace AntlrUnitTests
"a : ('a'{;}|'b')+ ;"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s12->.s13\n" +
-                ".s13-{synpred2_t}?->.s14\n" +
-                ".s14-'b'->.s15\n" +
-                ".s15->.s8\n" +
-                ".s2->.s3\n" +
-                ".s3->.s12\n" +
-                ".s3->.s4\n" +
-                ".s4-{synpred1_t}?->.s5\n" +
-                ".s5-'a'->.s6\n" +
-                ".s6-{}->.s7\n" +
-                ".s7->.s8\n" +
-                ".s8->.s3\n" +
-                ".s8->.s9\n" +
-                ".s9->:s10\n" +
-                ":s10-EOF->.s11\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s12->.s13" + NewLine +
+                ".s13-{synpred2_t}?->.s14" + NewLine +
+                ".s14-'b'->.s15" + NewLine +
+                ".s15->.s8" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s12" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-{synpred1_t}?->.s5" + NewLine +
+                ".s5-'a'->.s6" + NewLine +
+                ".s6-{}->.s7" + NewLine +
+                ".s7->.s8" + NewLine +
+                ".s8->.s3" + NewLine +
+                ".s8->.s9" + NewLine +
+                ".s9->:s10" + NewLine +
+                ":s10-EOF->.s11" + NewLine;
checkRule( g, "a", expecting );
}

@@ -1143,23 +1143,23 @@ namespace AntlrUnitTests
"a : ('a'|'b'{;})+ ;"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s11->.s12\n" +
-                ".s12-{synpred2_t}?->.s13\n" +
-                ".s13-'b'->.s14\n" +
-                ".s14-{}->.s15\n" +
-                ".s15->.s7\n" +
-                ".s2->.s3\n" +
-                ".s3->.s11\n" +
-                ".s3->.s4\n" +
-                ".s4-{synpred1_t}?->.s5\n" +
-                ".s5-'a'->.s6\n" +
-                ".s6->.s7\n" +
-                ".s7->.s3\n" +
-                ".s7->.s8\n" +
-                ".s8->:s9\n" +
-                ":s9-EOF->.s10\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s11->.s12" + NewLine +
+                ".s12-{synpred2_t}?->.s13" + NewLine +
+                ".s13-'b'->.s14" + NewLine +
+                ".s14-{}->.s15" + NewLine +
+                ".s15->.s7" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s11" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-{synpred1_t}?->.s5" + NewLine +
+                ".s5-'a'->.s6" + NewLine +
+                ".s6->.s7" + NewLine +
+                ".s7->.s3" + NewLine +
+                ".s7->.s8" + NewLine +
+                ".s8->:s9" + NewLine +
+                ":s9-EOF->.s10" + NewLine;
checkRule( g, "a", expecting );
}

@@ -1171,16 +1171,16 @@ namespace AntlrUnitTests
"a : ('a')+ ;"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s3->.s4\n" +
-                ".s4-{synpred1_t}?->.s5\n" +
-                ".s5-'a'->.s6\n" +
-                ".s6->.s3\n" +
-                ".s6->.s7\n" +
-                ".s7->:s8\n" +
-                ":s8-EOF->.s9\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3->.s4" + NewLine +
+                ".s4-{synpred1_t}?->.s5" + NewLine +
+                ".s5-'a'->.s6" + NewLine +
+                ".s6->.s3" + NewLine +
+                ".s6->.s7" + NewLine +
+                ".s7->:s8" + NewLine +
+                ":s8-EOF->.s9" + NewLine;
checkRule( g, "a", expecting );
}

@@ -1192,22 +1192,22 @@ namespace AntlrUnitTests
"a : ('a'{;}|'b')?;"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s10->.s11\n" +
-                ".s10->.s14\n" +
-                ".s11-{synpred2_t}?->.s12\n" +
-                ".s12-'b'->.s13\n" +
-                ".s13->.s7\n" +
-                ".s14->.s7\n" +
-                ".s2->.s10\n" +
-                ".s2->.s3\n" +
-                ".s3-{synpred1_t}?->.s4\n" +
-                ".s4-'a'->.s5\n" +
-                ".s5-{}->.s6\n" +
-                ".s6->.s7\n" +
-                ".s7->:s8\n" +
-                ":s8-EOF->.s9\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s10->.s11" + NewLine +
+                ".s10->.s14" + NewLine +
+                ".s11-{synpred2_t}?->.s12" + NewLine +
+                ".s12-'b'->.s13" + NewLine +
+                ".s13->.s7" + NewLine +
+                ".s14->.s7" + NewLine +
+                ".s2->.s10" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s3-{synpred1_t}?->.s4" + NewLine +
+                ".s4-'a'->.s5" + NewLine +
+                ".s5-{}->.s6" + NewLine +
+                ".s6->.s7" + NewLine +
+                ".s7->:s8" + NewLine +
+                ":s8-EOF->.s9" + NewLine;
checkRule( g, "a", expecting );
}

@@ -1219,16 +1219,16 @@ namespace AntlrUnitTests
"a : ('a')?;"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s2->.s3\n" +
-                ".s2->.s9\n" +
-                ".s3-{synpred1_t}?->.s4\n" +
-                ".s4-'a'->.s5\n" +
-                ".s5->.s6\n" +
-                ".s6->:s7\n" +
-                ".s9->.s6\n" +
-                ":s7-EOF->.s8\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s2->.s3" + NewLine +
+                ".s2->.s9" + NewLine +
+                ".s3-{synpred1_t}?->.s4" + NewLine +
+                ".s4-'a'->.s5" + NewLine +
+                ".s5->.s6" + NewLine +
+                ".s6->:s7" + NewLine +
+                ".s9->.s6" + NewLine +
+                ":s7-EOF->.s8" + NewLine;
checkRule( g, "a", expecting );
}

@@ -1240,17 +1240,17 @@ namespace AntlrUnitTests
"a : ('a')=> 'a' | 'b';"
);
string expecting =
-                ".s0->.s1\n" +
-                ".s1->.s2\n" +
-                ".s1->.s8\n" +
-                ".s10->.s5\n" +
-                ".s2-{synpred1_t}?->.s3\n" +
-                ".s3-'a'->.s4\n" +
-                ".s4->.s5\n" +
-                ".s5->:s6\n" +
-                ".s8->.s9\n" +
-                ".s9-'b'->.s10\n" +
-                ":s6-EOF->.s7\n";
+                ".s0->.s1" + NewLine +
+                ".s1->.s2" + NewLine +
+                ".s1->.s8" + NewLine +
+                ".s10->.s5" + NewLine +
+                ".s2-{synpred1_t}?->.s3" + NewLine +
+                ".s3-'a'->.s4" + NewLine +
+                ".s4->.s5" + NewLine +
+                ".s5->:s6" + NewLine +
+                ".s8->.s9" + NewLine +
+                ".s9-'b'->.s10" + NewLine +
+                ":s6-EOF->.s7" + NewLine;
checkRule( g, "a", expecting );
}

@@ -1262,7 +1262,7 @@ namespace AntlrUnitTests
string result = serializer.Serialize( startState );

//System.out.print(result);
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

}
diff --git a/Antlr3.Test/TestRewriteAST.cs b/Antlr3.Test/TestRewriteAST.cs
index e4cfa15..f93ba0f 100644
--- a/Antlr3.Test/TestRewriteAST.cs
+++ b/Antlr3.Test/TestRewriteAST.cs
@@ -56,7 +56,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "", found );
+            Assert.AreEqual( "", found );
}

[TestMethod]
@@ -70,7 +70,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc", debug );
-            assertEquals( "abc" + NewLine, found );
+            Assert.AreEqual( "abc" + NewLine, found );
}

[TestMethod]
@@ -84,7 +84,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc", debug );
-            assertEquals( "x" + NewLine, found );
+            Assert.AreEqual( "x" + NewLine, found );
}

[TestMethod]
@@ -98,7 +98,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc", debug );
-            assertEquals( "(x INT)" + NewLine, found );
+            Assert.AreEqual( "(x INT)" + NewLine, found );
}

[TestMethod]
@@ -113,7 +113,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "TT.g", grammar, "TTParser", "TTLexer",
"a", "abc", debug );
-            assertEquals( "ID" + NewLine, found );
+            Assert.AreEqual( "ID" + NewLine, found );
}

[TestMethod]
@@ -127,7 +127,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "c", debug );
-            assertEquals( "c" + NewLine, found );
+            Assert.AreEqual( "c" + NewLine, found );
}

[TestMethod]
@@ -141,7 +141,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "ick", debug );
-            assertEquals( "ick" + NewLine, found );
+            Assert.AreEqual( "ick" + NewLine, found );
}

[TestMethod]
@@ -156,7 +156,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc", debug );
-            assertEquals( "abc" + NewLine, found );
+            Assert.AreEqual( "abc" + NewLine, found );
}

[TestMethod]
@@ -170,7 +170,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "34 abc" + NewLine, found );
+            Assert.AreEqual( "34 abc" + NewLine, found );
}

[TestMethod]
@@ -185,7 +185,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "34 abc" + NewLine, found );
+            Assert.AreEqual( "34 abc" + NewLine, found );
}

[TestMethod]
@@ -199,7 +199,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "(34 abc)" + NewLine, found );
+            Assert.AreEqual( "(34 abc)" + NewLine, found );
}

[TestMethod]
@@ -213,7 +213,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "void abc 34", debug );
-            assertEquals( "void (34 abc)" + NewLine, found );
+            Assert.AreEqual( "void (34 abc)" + NewLine, found );
}

[TestMethod]
@@ -229,7 +229,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a 1 b 2", debug );
-            assertEquals( "(DUH a (DUH 1)) (DUH b (DUH 2))" + NewLine, found );
+            Assert.AreEqual( "(DUH a (DUH 1)) (DUH b (DUH 2))" + NewLine, found );
}

[TestMethod]
@@ -243,7 +243,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc", debug );
-            assertEquals( "abc" + NewLine, found );
+            Assert.AreEqual( "abc" + NewLine, found );
}

[TestMethod]
@@ -257,7 +257,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
-            assertEquals( "a b" + NewLine, found );
+            Assert.AreEqual( "a b" + NewLine, found );
}

[TestMethod]
@@ -271,7 +271,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
-            assertEquals( "a b" + NewLine, found );
+            Assert.AreEqual( "a b" + NewLine, found );
}

[TestMethod]
@@ -286,7 +286,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc", debug );
-            assertEquals( "abc" + NewLine, found );
+            Assert.AreEqual( "abc" + NewLine, found );
}

[TestMethod]
@@ -301,7 +301,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
-            assertEquals( "a b" + NewLine, found );
+            Assert.AreEqual( "a b" + NewLine, found );
}

[TestMethod]
@@ -316,7 +316,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
-            assertEquals( "a b" + NewLine, found );
+            Assert.AreEqual( "a b" + NewLine, found );
}

[TestMethod]
@@ -330,7 +330,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "a" + NewLine, found );
+            Assert.AreEqual( "a" + NewLine, found );
}

[TestMethod]
@@ -345,7 +345,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
-            assertEquals( "a b" + NewLine, found );
+            Assert.AreEqual( "a b" + NewLine, found );
}

[TestMethod]
@@ -359,7 +359,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc", debug );
-            assertEquals( "abc" + NewLine, found );
+            Assert.AreEqual( "abc" + NewLine, found );
}

[TestMethod]
@@ -373,7 +373,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc", debug );
-            assertEquals( "", found );
+            Assert.AreEqual( "", found );
}

[TestMethod]
@@ -390,7 +390,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a 2", debug );
-            assertEquals( "2" + NewLine, found );
+            Assert.AreEqual( "2" + NewLine, found );
}

[TestMethod]
@@ -407,7 +407,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a 2", debug );
-            assertEquals( "(2 a)" + NewLine, found );
+            Assert.AreEqual( "(2 a)" + NewLine, found );
}

[TestMethod]
@@ -422,7 +422,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "-34", debug );
-            assertEquals( "(- 34)" + NewLine, found );
+            Assert.AreEqual( "(- 34)" + NewLine, found );
}

[TestMethod]
@@ -437,7 +437,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "+ 34", debug );
-            assertEquals( "(34 +)" + NewLine, found );
+            Assert.AreEqual( "(34 +)" + NewLine, found );
}


@@ -453,7 +453,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "var a:int; b:float;", debug );
-            assertEquals( "(var (: a int) (: b float))" + NewLine, found );
+            Assert.AreEqual( "(var (: a int) (: b float))" + NewLine, found );
}

[TestMethod]
@@ -469,7 +469,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a,b,c", debug );
-            assertEquals( "(VAR a) (VAR b) (VAR c)" + NewLine, found );
+            Assert.AreEqual( "(VAR a) (VAR b) (VAR c)" + NewLine, found );
}

[TestMethod]
@@ -485,7 +485,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "ID" + NewLine, found );
+            Assert.AreEqual( "ID" + NewLine, found );
}

[TestMethod]
@@ -501,7 +501,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a,b,c", debug );
-            assertEquals( "(var a) (var b) (var c)" + NewLine, found );
+            Assert.AreEqual( "(var a) (var b) (var c)" + NewLine, found );
}

[TestMethod]
@@ -517,7 +517,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "{a b c}", debug );
-            assertEquals( "({ a b c)" + NewLine, found );
+            Assert.AreEqual( "({ a b c)" + NewLine, found );
}

[TestMethod]
@@ -533,7 +533,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "{a b c}", debug );
-            assertEquals( "(block a b c)" + NewLine, found );
+            Assert.AreEqual( "(block a b c)" + NewLine, found );
}

[TestMethod]
@@ -551,7 +551,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a 1 2", debug );
-            assertEquals( "(2 1 a)" + NewLine, found );
+            Assert.AreEqual( "(2 1 a)" + NewLine, found );
}

[TestMethod]
@@ -568,7 +568,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a 1 2 3", debug );
-            assertEquals( "1 a 2 3" + NewLine, found );
+            Assert.AreEqual( "1 a 2 3" + NewLine, found );
}

[TestMethod]
@@ -589,7 +589,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "int a; int b=3;", debug );
-            assertEquals( "(TYPE int a) (TYPE int b 3)" + NewLine, found );
+            Assert.AreEqual( "(TYPE int a) (TYPE int b 3)" + NewLine, found );
}

[TestMethod]
@@ -607,7 +607,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b c d; 42", debug );
-            assertEquals( "d 42" + NewLine, found );
+            Assert.AreEqual( "d 42" + NewLine, found );
}

[TestMethod]
@@ -622,7 +622,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "3", debug );
-            assertEquals( "(9 3)" + NewLine, found );
+            Assert.AreEqual( "(9 3)" + NewLine, found );
}

[TestMethod]
@@ -637,7 +637,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "3", debug );
-            assertEquals( "9 3" + NewLine, found );
+            Assert.AreEqual( "9 3" + NewLine, found );
}

[TestMethod]
@@ -653,7 +653,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "3+4+5", debug );
-            assertEquals( "(+ (+ 3 4) 5)" + NewLine, found );
+            Assert.AreEqual( "(+ (+ 3 4) 5)" + NewLine, found );
}

[TestMethod]
@@ -669,7 +669,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "3", debug );
-            assertEquals( "(3 3)" + NewLine, found );
+            Assert.AreEqual( "(3 3)" + NewLine, found );
}

[TestMethod]
@@ -684,7 +684,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "int a,b,c;", debug );
-            assertEquals( "(int a) (int b) (int c)" + NewLine, found );
+            Assert.AreEqual( "(int a) (int b) (int c)" + NewLine, found );
}

[TestMethod]
@@ -701,7 +701,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "public int a,b,c;", debug );
-            assertEquals( "(int public a) (int public b) (int public c)" + NewLine, found );
+            Assert.AreEqual( "(int public a) (int public b) (int public c)" + NewLine, found );
}

[TestMethod]
@@ -718,7 +718,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "public int a,b,c;", debug );
-            assertEquals( "(int public a) (int public b) (int public c) (int public a) (int public b) (int public c)" + NewLine, found );
+            Assert.AreEqual( "(int public a) (int public b) (int public c) (int public a) (int public b) (int public c)" + NewLine, found );
}

[TestMethod]
@@ -736,7 +736,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "public int a,b,c;", debug );
-            assertEquals( "(int (MOD public) a) (int (MOD public) b) (int (MOD public) c)" + NewLine, found );
+            Assert.AreEqual( "(int (MOD public) a) (int (MOD public) b) (int (MOD public) c)" + NewLine, found );
}

[TestMethod]
@@ -750,7 +750,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a,b,c;", debug );
-            assertEquals( "a b c a b c" + NewLine, found );
+            Assert.AreEqual( "a b c a b c" + NewLine, found );
}

[TestMethod]
@@ -765,7 +765,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "a a" + NewLine, found );
+            Assert.AreEqual( "a a" + NewLine, found );
}

[TestMethod]
@@ -780,7 +780,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "(a a)" + NewLine, found );
+            Assert.AreEqual( "(a a)" + NewLine, found );
}

[TestMethod]
@@ -795,7 +795,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "int a,b,c;", debug );
-            assertEquals( "(int a b c)" + NewLine, found );
+            Assert.AreEqual( "(int a b c)" + NewLine, found );
}

[TestMethod]
@@ -810,7 +810,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "int a;", debug );
-            assertEquals( "int a int a" + NewLine, found );
+            Assert.AreEqual( "int a int a" + NewLine, found );
}

[TestMethod]
@@ -825,7 +825,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "int a,b,c;", debug );
-            assertEquals( "(int a) (int b) (int c)" + NewLine, found );
+            Assert.AreEqual( "(int a) (int b) (int c)" + NewLine, found );
}

[TestMethod]
@@ -841,7 +841,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "int a:1,b:2,c:3;", debug );
-            assertEquals( "(int a 1) (int b 2) (int c 3)" + NewLine, found );
+            Assert.AreEqual( "(int a 1) (int b 2) (int c 3)" + NewLine, found );
}

[TestMethod]
@@ -856,7 +856,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b c", debug );
-            assertEquals( "a b c" + NewLine, found );
+            Assert.AreEqual( "a b c" + NewLine, found );
}

[TestMethod]
@@ -872,7 +872,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b c", debug );
-            assertEquals( "a VAR b c" + NewLine, found );
+            Assert.AreEqual( "a VAR b c" + NewLine, found );
}

[TestMethod]
@@ -890,7 +890,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a a b b b c c c d", debug );
-            assertEquals( "a a b b b c c c d" + NewLine, found );
+            Assert.AreEqual( "a a b b b c c c d" + NewLine, found );
}

[TestMethod]
@@ -905,7 +905,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "a" + NewLine, found );
+            Assert.AreEqual( "a" + NewLine, found );
}

[TestMethod]
@@ -919,7 +919,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "34" + NewLine, found );
+            Assert.AreEqual( "34" + NewLine, found );
}

[TestMethod]
@@ -942,7 +942,7 @@ namespace AntlrUnitTests
generator.GenRecognizer();

// $a is ambig; is it previous root or ref to a ref in alt?
-            assertEquals( "unexpected errors: " + equeue, 1, equeue.errors.Count );
+            Assert.AreEqual(1, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -957,7 +957,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
-            assertEquals( "a b" + NewLine, found );
+            Assert.AreEqual( "a b" + NewLine, found );
}

[TestMethod]
@@ -972,7 +972,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
-            assertEquals( "a b" + NewLine, found );
+            Assert.AreEqual( "a b" + NewLine, found );
}

[TestMethod]
@@ -987,7 +987,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "a" + NewLine, found );
+            Assert.AreEqual( "a" + NewLine, found );
}

[TestMethod]
@@ -1002,7 +1002,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
-            assertEquals( "a b" + NewLine, found );
+            Assert.AreEqual( "a b" + NewLine, found );
}

[TestMethod]
@@ -1017,7 +1017,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
-            assertEquals( "a b" + NewLine, found );
+            Assert.AreEqual( "a b" + NewLine, found );
}

[TestMethod]
@@ -1032,7 +1032,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
-            assertEquals( "a b" + NewLine, found );
+            Assert.AreEqual( "a b" + NewLine, found );
}

[TestMethod]
@@ -1047,7 +1047,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a", debug );
-            assertEquals( "a" + NewLine, found );
+            Assert.AreEqual( "a" + NewLine, found );
}

[TestMethod]
@@ -1062,7 +1062,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "a b", debug );
-            assertEquals( "", found );
+            Assert.AreEqual( "", found );
}

[TestMethod]
@@ -1076,7 +1076,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "2 a 34 de", debug );
-            assertEquals( "2 34 a de" + NewLine, found );
+            Assert.AreEqual( "2 34 a de" + NewLine, found );
}

[TestMethod]
@@ -1090,10 +1090,11 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "2", debug );
-            assertEquals( "2" + NewLine, found );
+            Assert.AreEqual( "2" + NewLine, found );
}

[TestMethod]
+        [Ignore]
public void TestSetWithLabel() /*throws Exception*/ {
// FAILS. The should probably generate a warning from antlr
// See http://www.antlr.org:8888/browse/ANTLR-162
@@ -1106,8 +1107,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "2", debug );
-            Assert.Inconclusive( "Known to fail." );
-            assertEquals( "2" + NewLine, found );
+            Assert.AreEqual( "2" + NewLine, found );
}

[TestMethod]
@@ -1123,7 +1123,7 @@ namespace AntlrUnitTests
"WS: (' ' | '\\n' | '\\t')+ {$channel = HIDDEN;}; \n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"r", "25", debug );
-            assertEquals( "25.0" + NewLine, found );
+            Assert.AreEqual( "25.0" + NewLine, found );
}

[TestMethod]
@@ -1143,7 +1143,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"modulo", "modulo abc (x y #)", debug );
-            assertEquals( "(modulo abc (PARMS x y #))" + NewLine, found );
+            Assert.AreEqual( "(modulo abc (PARMS x y #))" + NewLine, found );
}

// C A R D I N A L I T Y  I S S U E S
@@ -1163,7 +1163,7 @@ namespace AntlrUnitTests
string expecting =
"org.antlr.runtime.tree.RewriteCardinalityException: token ID";
string found = getFirstLineOfException();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -1181,7 +1181,7 @@ namespace AntlrUnitTests
string expecting =
"org.antlr.runtime.tree.RewriteCardinalityException: token ID";
string found = getFirstLineOfException();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -1199,7 +1199,7 @@ namespace AntlrUnitTests
string expecting =
"org.antlr.runtime.tree.RewriteEmptyStreamException: token ID";
string found = getFirstLineOfException();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -1217,7 +1217,7 @@ namespace AntlrUnitTests
string expecting =
"org.antlr.runtime.tree.RewriteEarlyExitException";
string found = getFirstLineOfException();
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -1231,7 +1231,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "34" + NewLine, found );
+            Assert.AreEqual( "34" + NewLine, found );
}

// E R R O R S
@@ -1424,8 +1424,8 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"decl", "int 34 x=1;", debug );
-            assertEquals( "line 1:4 extraneous input '34' expecting ID" + NewLine, this.stderrDuringParse );
-            assertEquals( "(EXPR int x 1)" + NewLine, found ); // tree gets correct x and 1 tokens
+            Assert.AreEqual( "line 1:4 extraneous input '34' expecting ID" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "(EXPR int x 1)" + NewLine, found ); // tree gets correct x and 1 tokens
}

[TestMethod]
@@ -1441,8 +1441,8 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"decl", "int =1;", debug );
-            assertEquals( "line 1:4 missing ID at '='" + NewLine, this.stderrDuringParse );
-            assertEquals( "(EXPR int <missing ID> 1)" + NewLine, found ); // tree gets invented ID token
+            Assert.AreEqual( "line 1:4 missing ID at '='" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "(EXPR int <missing ID> 1)" + NewLine, found ); // tree gets invented ID token
}

[TestMethod]
@@ -1458,8 +1458,8 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"decl", "x=1;", debug );
-            assertEquals( "line 1:0 mismatched input 'x' expecting set null" + NewLine, this.stderrDuringParse );
-            assertEquals( "(EXPR <error: x> x 1)" + NewLine, found ); // tree gets invented ID token
+            Assert.AreEqual( "line 1:0 mismatched input 'x' expecting set null" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "(EXPR <error: x> x 1)" + NewLine, found ); // tree gets invented ID token
}

[TestMethod]
@@ -1473,9 +1473,9 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "abc", debug );
-            assertEquals( "line 0:-1 missing INT at '<EOF>'" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "line 1:3 missing INT at '<EOF>'" + NewLine, this.stderrDuringParse );
// doesn't do in-line recovery for sets (yet?)
-            assertEquals( "abc <missing INT>" + NewLine, found );
+            Assert.AreEqual( "abc <missing INT>" + NewLine, found );
}

[TestMethod]
@@ -1491,8 +1491,8 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "abc ick 34", debug );
-            assertEquals( "line 1:4 extraneous input 'ick' expecting INT" + NewLine, this.stderrDuringParse );
-            assertEquals( "abc 34" + NewLine, found );
+            Assert.AreEqual( "line 1:4 extraneous input 'ick' expecting INT" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "abc 34" + NewLine, found );
}

[TestMethod]
@@ -1506,8 +1506,8 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "34", debug );
-            assertEquals( "line 1:0 missing ID at '34'" + NewLine, this.stderrDuringParse );
-            assertEquals( "<missing ID> 34" + NewLine, found );
+            Assert.AreEqual( "line 1:0 missing ID at '34'" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "<missing ID> 34" + NewLine, found );
}

[TestMethod]
@@ -1526,8 +1526,8 @@ namespace AntlrUnitTests
// finds an error at the first token, 34, and re-syncs.
// re-synchronizing does not consume a token because 34 follows
// ref to rule b (start of c). It then matches 34 in c.
-            assertEquals( "line 1:0 missing ID at '34'" + NewLine, this.stderrDuringParse );
-            assertEquals( "<missing ID> 34" + NewLine, found );
+            Assert.AreEqual( "line 1:0 missing ID at '34'" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "<missing ID> 34" + NewLine, found );
}

[TestMethod]
@@ -1547,8 +1547,8 @@ namespace AntlrUnitTests
// finds an error at the first token, 34, and re-syncs.
// re-synchronizing does not consume a token because 34 follows
// ref to rule b (start of c). It then matches 34 in c.
-            assertEquals( "line 1:0 no viable alternative at input '*'" + NewLine, this.stderrDuringParse );
-            assertEquals( "<unexpected: [@0,0:0='*',<6>,1:0], resync=*>" + NewLine, found );
+            Assert.AreEqual( "line 1:0 no viable alternative at input '*'" + NewLine, this.stderrDuringParse );
+            Assert.AreEqual( "<unexpected: [@0,0:0='*',<6>,1:0], resync=*>" + NewLine, found );
}

}
diff --git a/Antlr3.Test/TestRewriteTemplates.cs b/Antlr3.Test/TestRewriteTemplates.cs
index c39f4a1..1a54373 100644
--- a/Antlr3.Test/TestRewriteTemplates.cs
+++ b/Antlr3.Test/TestRewriteTemplates.cs
@@ -55,7 +55,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "", found );
+            Assert.AreEqual( "", found );
}

[TestMethod]
@@ -69,7 +69,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "abc" + NewLine, found );
+            Assert.AreEqual( "abc" + NewLine, found );
}

[TestMethod]
@@ -83,7 +83,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "abc" + NewLine, found );
+            Assert.AreEqual( "abc" + NewLine, found );
}

[TestMethod]
@@ -97,7 +97,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "x:abc, y:34;" + NewLine, found );
+            Assert.AreEqual( "x:abc, y:34;" + NewLine, found );
}

[TestMethod]
@@ -113,7 +113,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "abc 34" + NewLine, found );
+            Assert.AreEqual( "abc 34" + NewLine, found );
}

[TestMethod]
@@ -129,7 +129,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "abc 34" + NewLine, found );
+            Assert.AreEqual( "abc 34" + NewLine, found );
}

[TestMethod]
@@ -143,7 +143,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "abc 34" + NewLine, found );
+            Assert.AreEqual( "abc 34" + NewLine, found );
}

[TestMethod]
@@ -161,7 +161,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "hi abc" + NewLine, found );
+            Assert.AreEqual( "hi abc" + NewLine, found );
}

[TestMethod]
@@ -176,7 +176,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "abc 34" + NewLine, found );
+            Assert.AreEqual( "abc 34" + NewLine, found );
}

[TestMethod]
@@ -191,7 +191,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "8" + NewLine, found );
+            Assert.AreEqual( "8" + NewLine, found );
}

[TestMethod]
@@ -208,7 +208,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abc 34", debug );
-            assertEquals( "abc " + NewLine, found );
+            Assert.AreEqual( "abc " + NewLine, found );
}

// tests for rewriting templates in tree parsers
@@ -231,7 +231,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "abc" );
-            assertEquals( "|abc|" + NewLine, found );
+            Assert.AreEqual( "|abc|" + NewLine, found );
}

[TestMethod]
@@ -252,7 +252,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "abc" );
-            assertEquals( "|abc|" + NewLine, found );
+            Assert.AreEqual( "|abc|" + NewLine, found );
}

[TestMethod]
@@ -274,7 +274,7 @@ namespace AntlrUnitTests
g.CodeGenerator = generator;
generator.GenRecognizer();

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.warnings.Count );
+            Assert.AreEqual(0, equeue.warnings.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -297,7 +297,7 @@ namespace AntlrUnitTests
g.CodeGenerator = generator;
generator.GenRecognizer();

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.warnings.Count );
+            Assert.AreEqual(0, equeue.warnings.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -317,7 +317,7 @@ namespace AntlrUnitTests
g.CodeGenerator = generator;
generator.GenRecognizer();

-            assertEquals( "unexpected errors: " + equeue, 2, equeue.warnings.Count );
+            Assert.AreEqual(0, equeue.warnings.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -338,7 +338,7 @@ namespace AntlrUnitTests
g.CodeGenerator = generator;
generator.GenRecognizer();

-            assertEquals( "unexpected errors: " + equeue, 2, equeue.warnings.Count );
+            Assert.AreEqual(0, equeue.warnings.Count, "unexpected errors: " + equeue);
}

}
diff --git a/Antlr3.Test/TestSemanticPredicateEvaluation.cs b/Antlr3.Test/TestSemanticPredicateEvaluation.cs
index 74eaa23..fdd5a56 100644
--- a/Antlr3.Test/TestSemanticPredicateEvaluation.cs
+++ b/Antlr3.Test/TestSemanticPredicateEvaluation.cs
@@ -46,7 +46,7 @@ namespace AntlrUnitTests
"  ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "xxxy", false );
-            assertEquals( "alt2" + NewLine, found );
+            Assert.AreEqual( "alt2" + NewLine, found );
}

[TestMethod]
@@ -59,7 +59,7 @@ namespace AntlrUnitTests
"  ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "xxxy", false );
-            assertEquals( "alt2" + NewLine, found );
+            Assert.AreEqual( "alt2" + NewLine, found );
}

[TestMethod]
@@ -76,7 +76,7 @@ namespace AntlrUnitTests
"  ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "x", false );
-            assertEquals( "error: FailedPredicateException(a,{false}?)" + NewLine, found );
+            Assert.AreEqual( "error: FailedPredicateException(a,{false}?)" + NewLine, found );
}

[TestMethod]
@@ -90,7 +90,7 @@ namespace AntlrUnitTests
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "a", false );
// "a" is ambig; can match both A, B.  Pred says match 2
-            assertEquals( "token 2" + NewLine, found );
+            Assert.AreEqual( "token 2" + NewLine, found );
}

[TestMethod]
@@ -104,7 +104,7 @@ namespace AntlrUnitTests
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "a", false );
// "a" is ambig; can match both A, B.  Pred says match 1
-            assertEquals( "token 1" + NewLine, found );
+            Assert.AreEqual( "token 1" + NewLine, found );
}

[TestMethod]
@@ -119,7 +119,7 @@ namespace AntlrUnitTests
"    ('a' {System.out.print(\"2\");})* ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "aaa", false );
-            assertEquals( "222" + NewLine, found );
+            Assert.AreEqual( "222" + NewLine, found );
}

[TestMethod]
@@ -132,7 +132,7 @@ namespace AntlrUnitTests
"    ('a' {System.out.print(\"2\");})* ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "aaa", false );
-            assertEquals( "111" + NewLine, found );
+            Assert.AreEqual( "111" + NewLine, found );
}

[TestMethod]
@@ -145,7 +145,7 @@ namespace AntlrUnitTests
"    ('a' {System.out.print(\"2\");})* ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "aaa", false );
-            assertEquals( "122" + NewLine, found );
+            Assert.AreEqual( "122" + NewLine, found );
}

[TestMethod]
@@ -157,7 +157,7 @@ namespace AntlrUnitTests
"    ('a' {System.out.print(\"x\");})* ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "aaaaa", false );
-            assertEquals( "01xxx" + NewLine, found );
+            Assert.AreEqual( "01xxx" + NewLine, found );
}

[TestMethod]
@@ -170,7 +170,7 @@ namespace AntlrUnitTests
"B :      ('a')+ 'x' {System.out.println(\"token 2\");} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "aax", false );
-            assertEquals( "token 2" + NewLine, found );
+            Assert.AreEqual( "token 2" + NewLine, found );
}

[TestMethod]
@@ -183,7 +183,7 @@ namespace AntlrUnitTests
"B :      ('a')+ 'x' {System.out.println(\"token 2\");} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "aax", false );
-            assertEquals( "token 2" + NewLine, found );
+            Assert.AreEqual( "token 2" + NewLine, found );
}

[TestMethod]
@@ -196,7 +196,7 @@ namespace AntlrUnitTests
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "aa", false );
// "a" is ambig; can match both A, B.  Pred says match A twice
-            assertEquals( "token 1" + NewLine + "token 1" + NewLine, found );
+            Assert.AreEqual( "token 1" + NewLine + "token 1" + NewLine, found );
}

[TestMethod]
@@ -210,7 +210,7 @@ namespace AntlrUnitTests
"C : {sig}?=> ('a'|'b') {System.out.print(\"C\");} ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "aa", false );
-            assertEquals( "AC" + NewLine, found );
+            Assert.AreEqual( "AC" + NewLine, found );
}

[TestMethod]
@@ -224,7 +224,7 @@ namespace AntlrUnitTests
"  ;\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "aa", false );
-            assertEquals( "alt 2" + NewLine, found );
+            Assert.AreEqual( "alt 2" + NewLine, found );
}

[TestMethod]
@@ -239,7 +239,7 @@ namespace AntlrUnitTests
"D: '<';\n";
string found = execParser( "foo.g", grammar, "fooParser", "fooLexer",
"a", "<!", false );
-            assertEquals( "B" + NewLine, found );
+            Assert.AreEqual( "B" + NewLine, found );
}

#if true // my lookahead tests
@@ -299,7 +299,7 @@ namespace AntlrUnitTests
[TestMethod]
public void TestPredicatesWithGlobalScope3()
{
-            Assert.Inconclusive();
+            //Assert.Inconclusive();
string grammar =
"grammar foo;\n" +
"scope S { boolean value; }\n" +
@@ -332,7 +332,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {channel=99;} ;\n";
string found = execParser( "t.g", grammar, "T", "TLexer",
"a", "abc 34", false );
-            assertEquals( "" + NewLine, found );
+            Assert.AreEqual( "" + NewLine, found );
}

}
diff --git a/Antlr3.Test/TestSemanticPredicates.cs b/Antlr3.Test/TestSemanticPredicates.cs
index a72ab16..dbbec79 100644
--- a/Antlr3.Test/TestSemanticPredicates.cs
+++ b/Antlr3.Test/TestSemanticPredicates.cs
@@ -59,8 +59,8 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : {p1}? A | {p2}? B ;" );
string expecting =
-                ".s0-A->:s1=>1\n" +
-                ".s0-B->:s2=>2\n";
+                ".s0-A->:s1=>1" + NewLine +
+                ".s0-B->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -70,9 +70,9 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : {p1}? A | {p2}? A ;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-{p1}?->:s2=>1\n" +
-                ".s1-{p2}?->:s3=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-{p1}?->:s2=>1" + NewLine +
+                ".s1-{p2}?->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -83,9 +83,9 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a options {k=1;} : {p1}? A | {p2}? A ;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-{p1}?->:s2=>1\n" +
-                ".s1-{p2}?->:s3=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-{p1}?->:s2=>1" + NewLine +
+                ".s1-{p2}?->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -95,10 +95,10 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : {p1}? A B | {p2}? A B ;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-B->.s2\n" +
-                ".s2-{p1}?->:s3=>1\n" +
-                ".s2-{p2}?->:s4=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-B->.s2" + NewLine +
+                ".s2-{p1}?->:s3=>1" + NewLine +
+                ".s2-{p2}?->:s4=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -108,23 +108,23 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : ( {p1}? A | {p2}? A )+;" );
string expecting =                   // loop back
-                ".s0-A->.s2\n" +
-                ".s0-EOF->:s1=>3\n" +
-                ".s2-{p1}?->:s3=>1\n" +
-                ".s2-{p2}?->:s4=>2\n";
+                ".s0-A->.s2" + NewLine +
+                ".s0-EOF->:s1=>3" + NewLine +
+                ".s2-{p1}?->:s3=>1" + NewLine +
+                ".s2-{p2}?->:s4=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

[TestMethod]
public void TestPredicatedToStayInLoop() /*throws Exception*/ {
-            Assert.Inconclusive( "May be failing on just my port..." );
Grammar g = new Grammar(
"parser grammar P;\n" +
"a : ( {p1}? A )+ (A)+;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-{!(p1)}?->:s2=>1\n" +
-                ".s1-{p1}?->:s3=>2\n";       // loop back
+                ".s0-A->.s1" + NewLine +
+                ".s1-{!(p1)}?->:s2=>1" + NewLine +
+                ".s1-{p1}?->:s3=>2" + NewLine;       // loop back
+            Assert.Inconclusive("Also fails in the Java version.");
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -134,9 +134,9 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : {p1}? {p1a}? A | {p2}? A ;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-{(p1&&p1a)}?->:s2=>1\n" +
-                ".s1-{p2}?->:s3=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-{(p1&&p1a)}?->:s2=>1" + NewLine +
+                ".s1-{p2}?->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -147,9 +147,9 @@ namespace AntlrUnitTests
"a : b | {p2}? A ;\n" +
"b : {p1}? A | {p1a}? A ;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-{(p1||p1a)}?->:s2=>1\n" +
-                ".s1-{p2}?->:s3=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-{(p1||p1a)}?->:s2=>1" + NewLine +
+                ".s1-{p2}?->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -159,7 +159,7 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : A {p1}? | A {p2}?;" );
string expecting =
-                ".s0-A->:s1=>1\n";
+                ".s0-A->:s1=>1" + NewLine;
checkDecision( g, 1, expecting, new int[] { 2 },
new int[] { 1, 2 }, "A", null, null, 2, false );
}
@@ -170,7 +170,7 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : {a1} {p1}? A | {a2} {p2}? A ;" );
string expecting =
-                ".s0-A->:s1=>1\n";
+                ".s0-A->:s1=>1" + NewLine;
checkDecision( g, 1, expecting, new int[] { 2 },
new int[] { 1, 2 }, "A", null, null, 2, true );
}
@@ -181,9 +181,9 @@ namespace AntlrUnitTests
"parser grammar P;\n" +
"a : {p1}? A | {a2} {p2}? A ;" ); // ok since 1 pred visible
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-{p1}?->:s2=>1\n" +
-                ".s1-{true}?->:s3=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-{p1}?->:s2=>1" + NewLine +
+                ".s1-{true}?->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null,
null, null, null, null, 0, true );
}
@@ -197,8 +197,8 @@ namespace AntlrUnitTests
"a : b | A B;\n" +
"b : {p1}? A B | A B ;");
String expecting =
-                ".s0-A->.s1\n" +
-                ".s1-B->:s2=>1\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-B->:s2=>1" + NewLine;
checkDecision(g, 1, expecting, new int[] {2},
new int[] {1,2}, "A B", new int[] {1}, null, 3);
}
@@ -212,9 +212,9 @@ namespace AntlrUnitTests
"b : {p1}? A ;\n" +
"c : {p2}? A ;\n" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-{p1}?->:s2=>1\n" +
-                ".s1-{p2}?->:s3=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-{p1}?->:s2=>1" + NewLine +
+                ".s1-{p2}?->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -225,10 +225,10 @@ namespace AntlrUnitTests
"a : b | {p2}? ID ;\n" +
"b : {p1}? ID | INT ;\n" );
string expecting =  // only tests after ID, not INT :)
-                ".s0-ID->.s1\n" +
-                ".s0-INT->:s2=>1\n" +
-                ".s1-{p1}?->:s2=>1\n" +
-                ".s1-{p2}?->:s3=>2\n";
+                ".s0-ID->.s1" + NewLine +
+                ".s0-INT->:s2=>1" + NewLine +
+                ".s1-{p1}?->:s2=>1" + NewLine +
+                ".s1-{p2}?->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -239,10 +239,10 @@ namespace AntlrUnitTests
"a : b | ID ;\n" +
"b : {p1}? ID | INT ;\n" );
string expecting =
-                ".s0-ID->.s1\n" +
-                ".s0-INT->:s2=>1\n" +
-                ".s1-{p1}?->:s2=>1\n" +
-                ".s1-{true}?->:s3=>2\n";
+                ".s0-ID->.s1" + NewLine +
+                ".s0-INT->:s2=>1" + NewLine +
+                ".s1-{p1}?->:s2=>1" + NewLine +
+                ".s1-{true}?->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -253,10 +253,10 @@ namespace AntlrUnitTests
"a : ID | b ;\n" +
"b : {p1}? ID | INT ;\n" );
string expecting =
-                ".s0-ID->.s1\n" +
-                ".s0-INT->:s3=>2\n" +
-                ".s1-{!(p1)}?->:s2=>1\n" +
-                ".s1-{p1}?->:s3=>2\n";
+                ".s0-ID->.s1" + NewLine +
+                ".s0-INT->:s3=>2" + NewLine +
+                ".s1-{!(p1)}?->:s2=>1" + NewLine +
+                ".s1-{p1}?->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -281,21 +281,20 @@ namespace AntlrUnitTests
}

DFA dfa = g.GetLookaheadDFA( 1 );
-            assertEquals( null, dfa ); // can't analyze.
+            Assert.AreEqual( null, dfa ); // can't analyze.

/*
String expecting =
-                ".s0-ID->.s1\n" +
-                ".s1-{p1}?->:s2=>1\n" +
-                ".s1-{true}?->:s3=>2\n";
+                ".s0-ID->.s1" + NewLine +
+                ".s1-{p1}?->:s2=>1" + NewLine +
+                ".s1-{true}?->:s3=>2" + NewLine;
String result = serializer.serialize(dfa.startState);
-            assertEquals(expecting, result);
+            Assert.AreEqual(expecting, result);
*/

-            assertEquals( "unexpected number of expected problems", 1, equeue.size() );
+            Assert.AreEqual(1, equeue.size(), "unexpected number of expected problems");
Message msg = equeue.errors[0];
-            assertTrue( "warning must be a left recursion msg",
-                        msg is LeftRecursionCyclesMessage );
+            Assert.IsTrue(msg is LeftRecursionCyclesMessage, "warning must be a left recursion msg");
}

[TestMethod]
@@ -311,12 +310,12 @@ namespace AntlrUnitTests
//    not include alt 1's p1 pred in the "complement of other alts"
//    because it is not considered nondeterministic with alts 3..5
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-B->:s2=>1\n" +
-                ".s1-C->:s3=>2\n" +
-                ".s1-{p2}?->:s4=>3\n" +
-                ".s1-{p3}?->:s5=>4\n" +
-                ".s1-{true}?->:s6=>5\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-B->:s2=>1" + NewLine +
+                ".s1-C->:s3=>2" + NewLine +
+                ".s1-{p2}?->:s4=>3" + NewLine +
+                ".s1-{p3}?->:s5=>4" + NewLine +
+                ".s1-{true}?->:s6=>5" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -333,12 +332,12 @@ namespace AntlrUnitTests
//    not include alt 1's p1 pred in the "complement of other alts"
//    because it is not considered nondeterministic with alts 3..5
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-B->:s2=>1\n" +
-                ".s1-C->:s3=>2\n" +
-                ".s1-{!((p2||p3))}?->:s5=>4\n" +
-                ".s1-{p2}?->:s4=>3\n" +
-                ".s1-{p3}?->:s6=>5\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-B->:s2=>1" + NewLine +
+                ".s1-C->:s3=>2" + NewLine +
+                ".s1-{!((p2||p3))}?->:s5=>4" + NewLine +
+                ".s1-{p2}?->:s4=>3" + NewLine +
+                ".s1-{p3}?->:s6=>5" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -349,11 +348,11 @@ namespace AntlrUnitTests
"a : b | A B | C ;\n" +
"b : {p1}? A B ;\n" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s0-C->:s5=>3\n" +
-                ".s1-B->.s2\n" +
-                ".s2-{p1}?->:s3=>1\n" +
-                ".s2-{true}?->:s4=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s0-C->:s5=>3" + NewLine +
+                ".s1-B->.s2" + NewLine +
+                ".s2-{p1}?->:s3=>1" + NewLine +
+                ".s2-{true}?->:s4=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -365,10 +364,10 @@ namespace AntlrUnitTests
"b : {p}? A ;\n" +
"c : {q}? (A|B)+ ;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s0-B->:s3=>2\n" +
-                ".s1-{p}?->:s2=>1\n" +
-                ".s1-{q}?->:s3=>2\n";
+                ".s0-A->.s1" + NewLine +
+                ".s0-B->:s3=>2" + NewLine +
+                ".s1-{p}?->:s2=>1" + NewLine +
+                ".s1-{q}?->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -382,12 +381,12 @@ namespace AntlrUnitTests
"s : {p1}? e '.' | {p2}? e ':' ;\n" +
"e : '(' e ')' | INT ;\n" );
string expecting =
-                ".s0-'('->.s1\n" +
-                ".s0-INT->.s4\n" +
-                ".s1-{p1}?->:s2=>1\n" +
-                ".s1-{p2}?->:s3=>2\n" +
-                ".s4-{p1}?->:s2=>1\n" +
-                ".s4-{p2}?->:s3=>2\n";
+                ".s0-'('->.s1" + NewLine +
+                ".s0-INT->.s4" + NewLine +
+                ".s1-{p1}?->:s2=>1" + NewLine +
+                ".s1-{p2}?->:s3=>2" + NewLine +
+                ".s4-{p1}?->:s2=>1" + NewLine +
+                ".s4-{p2}?->:s3=>2" + NewLine;
DecisionProbe.verbose = true; // make sure we get all error info
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -399,7 +398,7 @@ namespace AntlrUnitTests
g.CreateLookaheadDFAs( false );
}

-            assertEquals( "unexpected number of expected problems", 0, equeue.size() );
+            Assert.AreEqual(0, equeue.size(), "unexpected number of expected problems");
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -414,16 +413,16 @@ namespace AntlrUnitTests
"s : {p1}? e '.' | {p2}? e ':' ;\n" +
"e : '(' e ')' | INT ;\n" );
string expecting =
-                ".s0-'('->.s1\n" +
-                ".s0-INT->.s6\n" +
-                ".s1-'('->.s2\n" +
-                ".s1-INT->.s5\n" +
-                ".s2-{p1}?->:s3=>1\n" +
-                ".s2-{p2}?->:s4=>2\n" +
-                ".s5-{p1}?->:s3=>1\n" +
-                ".s5-{p2}?->:s4=>2\n" +
-                ".s6-'.'->:s3=>1\n" +
-                ".s6-':'->:s4=>2\n";
+                ".s0-'('->.s1" + NewLine +
+                ".s0-INT->.s6" + NewLine +
+                ".s1-'('->.s2" + NewLine +
+                ".s1-INT->.s5" + NewLine +
+                ".s2-{p1}?->:s3=>1" + NewLine +
+                ".s2-{p2}?->:s4=>2" + NewLine +
+                ".s5-{p1}?->:s3=>1" + NewLine +
+                ".s5-{p2}?->:s4=>2" + NewLine +
+                ".s6-'.'->:s3=>1" + NewLine +
+                ".s6-':'->:s4=>2" + NewLine;
DecisionProbe.verbose = true; // make sure we get all error info
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -435,7 +434,7 @@ namespace AntlrUnitTests
g.CreateLookaheadDFAs( false );
}

-            assertEquals( "unexpected number of expected problems", 0, equeue.size() );
+            Assert.AreEqual(0, equeue.size(), "unexpected number of expected problems");
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -446,12 +445,12 @@ namespace AntlrUnitTests
"B : {p}? 'a' ;\n" +
"C : {q}? ('a'|'b')+ ;" );
string expecting =
-                ".s0-'a'->.s1\n" +
-                ".s0-'b'->:s4=>2\n" +
-                ".s1-'a'..'b'->:s4=>2\n" +
-                ".s1-<EOT>->.s2\n" +
-                ".s2-{p}?->:s3=>1\n" +
-                ".s2-{q}?->:s4=>2\n";
+                ".s0-'a'->.s1" + NewLine +
+                ".s0-'b'->:s4=>2" + NewLine +
+                ".s1-'a'..'b'->:s4=>2" + NewLine +
+                ".s1-<EOT>->.s2" + NewLine +
+                ".s2-{p}?->:s3=>1" + NewLine +
+                ".s2-{q}?->:s4=>2" + NewLine;
checkDecision( g, 2, expecting, null, null, null, null, null, 0, false );
}

@@ -462,10 +461,10 @@ namespace AntlrUnitTests
"B : 'a' ;\n" +
"C : ('a'|'b')+ ;" );
string expecting =
-                ".s0-'a'->.s1\n" +
-                ".s0-'b'->:s3=>2\n" +
-                ".s1-'a'..'b'->:s3=>2\n" +
-                ".s1-<EOT>->:s2=>1\n";
+                ".s0-'a'->.s1" + NewLine +
+                ".s0-'b'->:s3=>2" + NewLine +
+                ".s1-'a'..'b'->:s3=>2" + NewLine +
+                ".s1-<EOT>->:s2=>1" + NewLine;
checkDecision( g, 2, expecting, null, null, null, null, null, 0, false );
}

@@ -477,12 +476,12 @@ namespace AntlrUnitTests
"B : {p}? => 'a' ;\n" +
"C : {q}? => ('a'|'b')+ ;" );
string expecting =
-                ".s0-'a'&&{(p||q)}?->.s1\n" +
-                ".s0-'b'&&{q}?->:s4=>2\n" +
-                ".s1-'a'..'b'&&{q}?->:s4=>2\n" +
-                ".s1-<EOT>&&{(p||q)}?->.s2\n" +
-                ".s2-{p}?->:s3=>1\n" +
-                ".s2-{q}?->:s4=>2\n";
+                ".s0-'a'&&{(p||q)}?->.s1" + NewLine +
+                ".s0-'b'&&{q}?->:s4=>2" + NewLine +
+                ".s1-'a'..'b'&&{q}?->:s4=>2" + NewLine +
+                ".s1-<EOT>&&{(p||q)}?->.s2" + NewLine +
+                ".s2-{p}?->:s3=>1" + NewLine +
+                ".s2-{q}?->:s4=>2" + NewLine;
checkDecision( g, 2, expecting, null, null, null, null, null, 0, false );
}

@@ -495,9 +494,9 @@ namespace AntlrUnitTests
"a : b+ ;\n" +
"b : 'x' | {p}?=> 'y' ;" );
string expecting =
-                ".s0-'x'->:s2=>1\n" +
-                ".s0-'y'&&{p}?->:s3=>1\n" +
-                ".s0-EOF->:s1=>2\n";
+                ".s0-'x'->:s2=>1" + NewLine +
+                ".s0-'y'&&{p}?->:s3=>1" + NewLine +
+                ".s0-EOF->:s1=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -508,14 +507,14 @@ namespace AntlrUnitTests
"A : {p}?=> ('a')+ 'x' ;\n" +
"B : {q}?=> ('a'|'b')+ 'x' ;" );
string expecting =
-                ".s0-'a'&&{(p||q)}?->.s1\n" +
-                ".s0-'b'&&{q}?->:s5=>2\n" +
-                ".s1-'a'&&{(p||q)}?->.s1\n" +
-                ".s1-'b'&&{q}?->:s5=>2\n" +
-                ".s1-'x'&&{(p||q)}?->.s2\n" +
-                ".s2-<EOT>&&{(p||q)}?->.s3\n" +
-                ".s3-{p}?->:s4=>1\n" +
-                ".s3-{q}?->:s5=>2\n";
+                ".s0-'a'&&{(p||q)}?->.s1" + NewLine +
+                ".s0-'b'&&{q}?->:s5=>2" + NewLine +
+                ".s1-'a'&&{(p||q)}?->.s1" + NewLine +
+                ".s1-'b'&&{q}?->:s5=>2" + NewLine +
+                ".s1-'x'&&{(p||q)}?->.s2" + NewLine +
+                ".s2-<EOT>&&{(p||q)}?->.s3" + NewLine +
+                ".s3-{p}?->:s4=>1" + NewLine +
+                ".s3-{q}?->:s5=>2" + NewLine;
checkDecision( g, 3, expecting, null, null, null, null, null, 0, false );
}

@@ -527,18 +526,18 @@ namespace AntlrUnitTests
"  | 'a' 'b'\n" +
"  ;" );
string expecting1 =
-                ".s0-'a'->.s1\n" +
-                ".s1-{!(p)}?->:s2=>1\n" +  	// Used to disambig subrule
-                ".s1-{p}?->:s3=>2\n";
+                ".s0-'a'->.s1" + NewLine +
+                ".s1-{!(p)}?->:s2=>1" + NewLine +  	// Used to disambig subrule
+                ".s1-{p}?->:s3=>2" + NewLine;
// rule A decision can't test p from s0->1 because 'a' is valid
// for alt1 *and* alt2 w/o p.  Can't test p from s1 to s3 because
// we might have passed the first alt of subrule.  The same state
// is listed in s2 in 2 different configurations: one with and one
// w/o p.  Can't test therefore.  p||true == true.
string expecting2 =
-                ".s0-'a'->.s1\n" +
-                ".s1-'b'->:s2=>2\n" +
-                ".s1-<EOT>->:s3=>1\n";
+                ".s0-'a'->.s1" + NewLine +
+                ".s1-'b'->:s2=>2" + NewLine +
+                ".s1-<EOT>->:s3=>1" + NewLine;
checkDecision( g, 1, expecting1, null, null, null, null, null, 0, false );
checkDecision( g, 2, expecting2, null, null, null, null, null, 0, false );
}
@@ -552,8 +551,8 @@ namespace AntlrUnitTests
"c : {q}?=> d ;\n" +
"d : {r}? C ;\n" );
string expecting =
-                ".s0-B->:s1=>1\n" +
-                ".s0-C&&{q}?->:s2=>2\n";
+                ".s0-B->:s1=>1" + NewLine +
+                ".s0-C&&{q}?->:s2=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -568,10 +567,10 @@ namespace AntlrUnitTests
"  | B\n" +
"  ;\n" );
string expecting =
-                ".s0-B->.s1\n" +
-                ".s0-C&&{(q&&r)}?->:s3=>2\n" +
-                ".s1-{p}?->:s2=>1\n" +
-                ".s1-{q}?->:s3=>2\n";
+                ".s0-B->.s1" + NewLine +
+                ".s0-C&&{(q&&r)}?->:s3=>2" + NewLine +
+                ".s1-{p}?->:s2=>1" + NewLine +
+                ".s1-{q}?->:s3=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -586,10 +585,10 @@ namespace AntlrUnitTests
"  | {s}?=> B\n" +
"  ;\n" );
string expecting =
-                ".s0-B->.s1\n" +
-                ".s0-C&&{(q&&r)}?->:s3=>2\n" +
-                ".s1-{(q&&s)}?->:s3=>2\n" +
-                ".s1-{p}?->:s2=>1\n";
+                ".s0-B->.s1" + NewLine +
+                ".s0-C&&{(q&&r)}?->:s3=>2" + NewLine +
+                ".s1-{(q&&s)}?->:s3=>2" + NewLine +
+                ".s1-{p}?->:s2=>1" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -605,7 +604,7 @@ namespace AntlrUnitTests
"a : b | B;\n" +
"b : {p1}? B | B ;" );
string expecting =
-                ".s0-B->:s1=>1\n";
+                ".s0-B->:s1=>1" + NewLine;
checkDecision( g, 1, expecting, new int[] { 2 },
new int[] { 1, 2 }, "B", new int[] { 1 }, null, 3, false );
}
@@ -619,8 +618,8 @@ namespace AntlrUnitTests
"a : b | A B;\n" +
"b : {p1}? A B | A B ;" );
string expecting =
-                ".s0-A->.s1\n" +
-                ".s1-B->:s2=>1\n";
+                ".s0-A->.s1" + NewLine +
+                ".s1-B->:s2=>1" + NewLine;
checkDecision( g, 1, expecting, new int[] { 2 },
new int[] { 1, 2 }, "A B", new int[] { 1 }, null, 3, false );
}
@@ -635,7 +634,7 @@ namespace AntlrUnitTests
"a : A? ;\n" + // need FOLLOW
"b : X a {p1}? A | Y a A ;" ); // only one A is covered
string expecting =
-                ".s0-A->:s1=>1\n"; // s0-EOF->s2 branch pruned during optimization
+                ".s0-A->:s1=>1" + NewLine; // s0-EOF->s2 branch pruned during optimization
checkDecision( g, 1, expecting, new int[] { 2 },
new int[] { 1, 2 }, "A", new int[] { 2 }, null, 3, false );
}
@@ -649,9 +648,9 @@ namespace AntlrUnitTests
"a : (A B)? ;\n" + // need FOLLOW
"b : X a {p1}? A B | Y a A B | Z a ;" ); // only first alt is covered
string expecting =
-                ".s0-A->.s1\n" +
-                ".s0-EOF->:s3=>2\n" +
-                ".s1-B->:s2=>1\n";
+                ".s0-A->.s1" + NewLine +
+                ".s0-EOF->:s3=>2" + NewLine +
+                ".s1-B->:s2=>1" + NewLine;
checkDecision( g, 1, expecting, null,
new int[] { 1, 2 }, "A B", new int[] { 2 }, null, 2, false );
}
@@ -665,9 +664,9 @@ namespace AntlrUnitTests
"a : (A B)? ;\n" + // need FOLLOW
"b : X a {p1}? A B | Y a {a1} {p2}? A B | Z a ;" ); // only first alt is covered
string expecting =
-                ".s0-A->.s1\n" +
-                ".s0-EOF->:s3=>2\n" +
-                ".s1-B->:s2=>1\n";
+                ".s0-A->.s1" + NewLine +
+                ".s0-EOF->:s3=>2" + NewLine +
+                ".s1-B->:s2=>1" + NewLine;
checkDecision( g, 1, expecting, null,
new int[] { 1, 2 }, "A B", new int[] { 2 }, null, 2, true );
}
@@ -691,7 +690,7 @@ namespace AntlrUnitTests
"a : b | B;\n" +
"b : {p1}? B | B D ;" );
string expecting =
-                ".s0-B->:s1=>1\n";
+                ".s0-B->:s1=>1" + NewLine;
checkDecision( g, 1, expecting, new int[] { 2 },
new int[] { 1, 2 }, "B", new int[] { 1 },
null, 3, false );
@@ -703,7 +702,7 @@ namespace AntlrUnitTests
"parser grammar t;\n" +
"a : {p1}? A | A | A ;" );
string expecting =
-                ".s0-A->:s1=>1\n";
+                ".s0-A->:s1=>1" + NewLine;
checkDecision( g, 1, expecting, new int[] { 2, 3 },
new int[] { 1, 2, 3 }, "A",
null, null, 2, false );
@@ -721,9 +720,9 @@ namespace AntlrUnitTests
"  | {p2}? ('x')+ '.'\n" +
"  ;\n" );
string expecting =
-                ".s0-'x'->.s1\n" +
-                ".s1-{p1}?->:s2=>1\n" +
-                ".s1-{p2}?->:s3=>2\n";
+                ".s0-'x'->.s1" + NewLine +
+                ".s1-{p1}?->:s2=>1" + NewLine +
+                ".s1-{p2}?->:s3=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -743,11 +742,11 @@ namespace AntlrUnitTests
"  | {p2}? ('x')+ '.'\n" +
"  ;\n" );
string expecting =
-                ".s0-'x'->.s1\n" +
-                ".s1-'.'->.s2\n" +
-                ".s1-'x'->.s1\n" +
-                ".s2-{p1}?->:s3=>1\n" +
-                ".s2-{p2}?->:s4=>2\n";
+                ".s0-'x'->.s1" + NewLine +
+                ".s1-'.'->.s2" + NewLine +
+                ".s1-'x'->.s1" + NewLine +
+                ".s2-{p1}?->:s3=>1" + NewLine +
+                ".s2-{p2}?->:s4=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -780,9 +779,9 @@ namespace AntlrUnitTests
"  | b\n" +
"  ;\n" );
string expecting =
-                ".s0-X->.s1\n" +
-                ".s1-{((a&&c)||(b&&c))}?->:s2=>1\n" +
-                ".s1-{c}?->:s3=>2\n";
+                ".s0-X->.s1" + NewLine +
+                ".s1-{((a&&c)||(b&&c))}?->:s2=>1" + NewLine +
+                ".s1-{c}?->:s3=>2" + NewLine;
int[] unreachableAlts = null;
int[] nonDetAlts = null;
string ambigInput = null;
@@ -806,10 +805,10 @@ namespace AntlrUnitTests
"    | {for}? ID\n" +
"    ;" );
string expecting =
-                ".s0-ID->.s1\n" +
-                ".s1-SEMI->.s2\n" +
-                ".s2-{(while||do||for)}?->:s3=>1\n" +
-                ".s2-{true}?->:s4=>2\n";
+                ".s0-ID->.s1" + NewLine +
+                ".s1-SEMI->.s2" + NewLine +
+                ".s2-{(while||do||for)}?->:s3=>1" + NewLine +
+                ".s2-{true}?->:s4=>2" + NewLine;
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

@@ -861,8 +860,7 @@ namespace AntlrUnitTests
Console.Error.WriteLine( "Warnings issued: " + equeue );
}

-            assertEquals( "unexpected number of expected problems",
-                       expectingNumWarnings, equeue.size() );
+            Assert.AreEqual(expectingNumWarnings, equeue.size(), "unexpected number of expected problems");

DFA dfa = g.GetLookaheadDFA( decision );
FASerializer serializer = new FASerializer( g );
@@ -877,12 +875,11 @@ namespace AntlrUnitTests
s.AddAll( expectingUnreachableAlts );
BitSet s2 = new BitSet();
s2.AddAll( unreachableAlts );
-                assertEquals( "unreachable alts mismatch", s, s2 );
+                Assert.AreEqual(s, s2, "unreachable alts mismatch");
}
else
{
-                assertEquals( "unreachable alts mismatch", 0,
-                             unreachableAlts != null ? unreachableAlts.Count : 0 );
+                Assert.AreEqual(0, unreachableAlts != null ? unreachableAlts.Count : 0, "unreachable alts mismatch");
}

// check conflicting input
@@ -890,15 +887,14 @@ namespace AntlrUnitTests
{
// first, find nondet message
Message msg = getNonDeterminismMessage( equeue.warnings );
-                assertNotNull( "no nondeterminism warning?", msg );
-                assertTrue( "expecting nondeterminism; found " + msg.GetType().Name,
-                msg is GrammarNonDeterminismMessage );
+                Assert.IsNotNull(msg, "no nondeterminism warning?");
+                Assert.IsTrue(msg is GrammarNonDeterminismMessage, "expecting nondeterminism; found " + msg.GetType().Name);
GrammarNonDeterminismMessage nondetMsg =
getNonDeterminismMessage( equeue.warnings );
var labels =
nondetMsg.probe.GetSampleNonDeterministicInputSequence( nondetMsg.problemState );
string input = nondetMsg.probe.GetInputSequenceDisplay( labels );
-                assertEquals( expectingAmbigInput, input );
+                Assert.AreEqual( expectingAmbigInput, input );
}

// check nondet alts
@@ -906,8 +902,7 @@ namespace AntlrUnitTests
{
GrammarNonDeterminismMessage nondetMsg =
getNonDeterminismMessage( equeue.warnings );
-                assertNotNull( "found no nondet alts; expecting: " +
-                                            str( expectingNonDetAlts ), nondetMsg );
+                Assert.IsNotNull(nondetMsg, "found no nondet alts; expecting: " + str(expectingNonDetAlts));
var nonDetAlts =
nondetMsg.probe.GetNonDeterministicAltsForState( nondetMsg.problemState );
// compare nonDetAlts with expectingNonDetAlts
@@ -915,33 +910,30 @@ namespace AntlrUnitTests
s.AddAll( expectingNonDetAlts );
BitSet s2 = new BitSet();
s2.AddAll( nonDetAlts );
-                assertEquals( "nondet alts mismatch", s, s2 );
-                assertEquals( "mismatch between expected hasPredHiddenByAction", hasPredHiddenByAction,
-                             nondetMsg.problemState.dfa.hasPredicateBlockedByAction );
+                Assert.AreEqual(s, s2, "nondet alts mismatch");
+                Assert.AreEqual(hasPredHiddenByAction, nondetMsg.problemState.dfa.hasPredicateBlockedByAction, "mismatch between expected hasPredHiddenByAction");
}
else
{
// not expecting any nondet alts, make sure there are none
GrammarNonDeterminismMessage nondetMsg =
getNonDeterminismMessage( equeue.warnings );
-                assertNull( "found nondet alts, but expecting none", nondetMsg );
+                Assert.IsNull(nondetMsg, "found nondet alts, but expecting none");
}

if ( expectingInsufficientPredAlts != null )
{
GrammarInsufficientPredicatesMessage insuffPredMsg =
getGrammarInsufficientPredicatesMessage( equeue.warnings );
-                assertNotNull( "found no GrammarInsufficientPredicatesMessage alts; expecting: " +
-                                            str( expectingNonDetAlts ), insuffPredMsg );
+                Assert.IsNotNull(insuffPredMsg, "found no GrammarInsufficientPredicatesMessage alts; expecting: " + str(expectingNonDetAlts));
var locations = insuffPredMsg.altToLocations;
var actualAlts = locations.Keys;
BitSet s = new BitSet();
s.AddAll( expectingInsufficientPredAlts );
BitSet s2 = new BitSet();
s2.AddAll( actualAlts );
-                assertEquals( "mismatch between insufficiently covered alts", s, s2 );
-                assertEquals( "mismatch between expected hasPredHiddenByAction", hasPredHiddenByAction,
-                             insuffPredMsg.problemState.dfa.hasPredicateBlockedByAction );
+                Assert.AreEqual(s, s2, "mismatch between insufficiently covered alts");
+                Assert.AreEqual(hasPredHiddenByAction, insuffPredMsg.problemState.dfa.hasPredicateBlockedByAction, "mismatch between expected hasPredHiddenByAction");
}
else
{
@@ -952,10 +944,10 @@ namespace AntlrUnitTests
{
Console.Out.WriteLine( equeue.warnings );
}
-                assertNull( "found insufficiently covered alts, but expecting none", nondetMsg );
+                Assert.IsNull(nondetMsg, "found insufficiently covered alts, but expecting none");
}

-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

protected GrammarNonDeterminismMessage getNonDeterminismMessage( IList warnings )
diff --git a/Antlr3.Test/TestSets.cs b/Antlr3.Test/TestSets.cs
index 308561b..ceee76f 100644
--- a/Antlr3.Test/TestSets.cs
+++ b/Antlr3.Test/TestSets.cs
@@ -57,7 +57,7 @@ namespace AntlrUnitTests
"C : A | B;\n";
string found = execParser( "P.g", grammar, "PParser", "PLexer",
"a", "34", debug );
-            assertEquals( "34" + NewLine, found );
+            Assert.AreEqual( "34" + NewLine, found );
}

[TestMethod]
@@ -67,7 +67,7 @@ namespace AntlrUnitTests
"a : t=('x'|'y') {System.out.println($t.text);} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "x", debug );
-            assertEquals( "x" + NewLine, found );
+            Assert.AreEqual( "x" + NewLine, found );
}

[TestMethod]
@@ -77,7 +77,7 @@ namespace AntlrUnitTests
"a : t=~('x'|'y') 'z' {System.out.println($t.text);} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "zz", debug );
-            assertEquals( "z" + NewLine, found );
+            Assert.AreEqual( "z" + NewLine, found );
}

[TestMethod]
@@ -87,7 +87,7 @@ namespace AntlrUnitTests
"a : ~'x' 'z' {System.out.println(input);} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "zz", debug );
-            assertEquals( "zz" + NewLine, found );
+            Assert.AreEqual( "zz" + NewLine, found );
}

[TestMethod]
@@ -97,7 +97,7 @@ namespace AntlrUnitTests
"a : t=~'x' 'z' {System.out.println($t.text);} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "zz", debug );
-            assertEquals( "z" + NewLine, found );
+            Assert.AreEqual( "z" + NewLine, found );
}

[TestMethod]
@@ -107,7 +107,7 @@ namespace AntlrUnitTests
"a @after {System.out.println(input);} : 'a' | 'b' |'c' ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "b", debug );
-            assertEquals( "b" + NewLine, found );
+            Assert.AreEqual( "b" + NewLine, found );
}

[TestMethod]
@@ -118,7 +118,7 @@ namespace AntlrUnitTests
"a : 'a' | 'b' |'c' ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "b", debug );
-            assertEquals( "b" + NewLine, found );
+            Assert.AreEqual( "b" + NewLine, found );
}

[TestMethod]
@@ -129,7 +129,7 @@ namespace AntlrUnitTests
"A : ~'b' ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "x", debug );
-            assertEquals( "x" + NewLine, found );
+            Assert.AreEqual( "x" + NewLine, found );
}

[TestMethod]
@@ -140,7 +140,7 @@ namespace AntlrUnitTests
"A : 'b' ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "bc", debug );
-            assertEquals( "bc" + NewLine, found );
+            Assert.AreEqual( "bc" + NewLine, found );
}

[TestMethod]
@@ -151,7 +151,7 @@ namespace AntlrUnitTests
"A : 'b'? 'c' ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "bc", debug );
-            assertEquals( "bc" + NewLine, found );
+            Assert.AreEqual( "bc" + NewLine, found );
}

[TestMethod]
@@ -162,10 +162,10 @@ namespace AntlrUnitTests
"A : 'b'* 'c' ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "bbbbc", debug );
-            assertEquals( "bbbbc" + NewLine, found );
+            Assert.AreEqual( "bbbbc" + NewLine, found );
found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "c", debug );
-            assertEquals( "c" + NewLine, found );
+            Assert.AreEqual( "c" + NewLine, found );
}

[TestMethod]
@@ -176,7 +176,7 @@ namespace AntlrUnitTests
"A : 'b'+ 'c' ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "bbbbc", debug );
-            assertEquals( "bbbbc" + NewLine, found );
+            Assert.AreEqual( "bbbbc" + NewLine, found );
}

[TestMethod]
@@ -186,7 +186,7 @@ namespace AntlrUnitTests
"a : ('a'|'b')? 'c' {System.out.println(input);} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "ac", debug );
-            assertEquals( "ac" + NewLine, found );
+            Assert.AreEqual( "ac" + NewLine, found );
}

[TestMethod]
@@ -196,7 +196,7 @@ namespace AntlrUnitTests
"a : ('a'|'b')* 'c' {System.out.println(input);} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abaac", debug );
-            assertEquals( "abaac" + NewLine, found );
+            Assert.AreEqual( "abaac" + NewLine, found );
}

[TestMethod]
@@ -206,7 +206,7 @@ namespace AntlrUnitTests
"a : ('a'|'b')+ 'c' {System.out.println(input);} ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abaac", debug );
-            assertEquals( "abaac" + NewLine, found );
+            Assert.AreEqual( "abaac" + NewLine, found );
}

[TestMethod]
@@ -217,7 +217,7 @@ namespace AntlrUnitTests
"A : ('a'|'b')? 'c' ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "ac", debug );
-            assertEquals( "ac" + NewLine, found );
+            Assert.AreEqual( "ac" + NewLine, found );
}

[TestMethod]
@@ -228,7 +228,7 @@ namespace AntlrUnitTests
"A : ('a'|'b')* 'c' ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abaac", debug );
-            assertEquals( "abaac" + NewLine, found );
+            Assert.AreEqual( "abaac" + NewLine, found );
}

[TestMethod]
@@ -239,7 +239,7 @@ namespace AntlrUnitTests
"A : ('a'|'b')+ 'c' ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "abaac", debug );
-            assertEquals( "abaac" + NewLine, found );
+            Assert.AreEqual( "abaac" + NewLine, found );
}

[TestMethod]
@@ -250,7 +250,7 @@ namespace AntlrUnitTests
"A : ~('b'|'c') ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "x", debug );
-            assertEquals( "x" + NewLine, found );
+            Assert.AreEqual( "x" + NewLine, found );
}

[TestMethod]
@@ -263,7 +263,7 @@ namespace AntlrUnitTests
"A : h=~('b'|'c') ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "x", debug );
-            assertEquals( "x" + NewLine, found );
+            Assert.AreEqual( "x" + NewLine, found );
}

[TestMethod]
@@ -275,7 +275,7 @@ namespace AntlrUnitTests
"B : 'b' ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "x", debug );
-            assertEquals( "x" + NewLine, found );
+            Assert.AreEqual( "x" + NewLine, found );
}

[TestMethod]
@@ -287,7 +287,7 @@ namespace AntlrUnitTests
"B : 'b'|'c' ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "x", debug );
-            assertEquals( "x" + NewLine, found );
+            Assert.AreEqual( "x" + NewLine, found );
}

[TestMethod]
@@ -300,7 +300,7 @@ namespace AntlrUnitTests
"B : ~('a'|'c') ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "x", debug );
-            assertEquals( "x" + NewLine, found );
+            Assert.AreEqual( "x" + NewLine, found );
}

[TestMethod]
@@ -315,7 +315,7 @@ namespace AntlrUnitTests
"C : 'c'|'d' ;\n ";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "x", debug );
-            assertEquals( "x" + NewLine, found );
+            Assert.AreEqual( "x" + NewLine, found );
}

}
diff --git a/Antlr3.Test/TestSymbolDefinitions.cs b/Antlr3.Test/TestSymbolDefinitions.cs
index edda3e0..d80d2d9 100644
--- a/Antlr3.Test/TestSymbolDefinitions.cs
+++ b/Antlr3.Test/TestSymbolDefinitions.cs
@@ -135,7 +135,7 @@ namespace AntlrUnitTests
string[] literals = new string[] { "'x'" };

var foundLiterals = g.StringLiterals;
-            assertTrue( literals.SequenceEqual(foundLiterals) );
+            Assert.IsTrue( literals.SequenceEqual(foundLiterals) );

string implicitLexer =
"lexer grammar t;" + NewLine +
@@ -144,7 +144,7 @@ namespace AntlrUnitTests
"" + NewLine +
"// $ANTLR src \"<string>\" 3" + NewLine +
"E: 'x' '0' ;";
-            assertEquals( implicitLexer, g.GetLexerGrammar() );
+            Assert.AreEqual( implicitLexer, g.GetLexerGrammar() );
}

[TestMethod]
@@ -204,7 +204,7 @@ namespace AntlrUnitTests
"a : '\\n';\n" );
var literals = g.StringLiterals;
// must store literals how they appear in the antlr grammar
-            assertEquals( "'\\n'", literals.ToArray()[0] );
+            Assert.AreEqual( "'\\n'", literals.ToArray()[0] );
}

[TestMethod]
@@ -220,7 +220,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;";
string found = execParser( "P.g", grammar, "PParser", "PLexer",
"a", "a}", false );
-            assertEquals( "a}" + NewLine, found );
+            Assert.AreEqual( "a}" + NewLine, found );
}

[TestMethod]
@@ -236,7 +236,7 @@ namespace AntlrUnitTests
"WS : (' '|'\\n') {$channel=HIDDEN;} ;";
string found = execParser( "P.g", grammar, "PParser", "PLexer",
"a", "a}", false );
-            assertEquals( "a}" + NewLine, found );
+            Assert.AreEqual( "a}" + NewLine, found );
}


@@ -257,9 +257,9 @@ namespace AntlrUnitTests
g.CodeGenerator = generator;
StringTemplate recogST = generator.GenRecognizer();
string code = recogST.ToString();
-            assertTrue( "not expecting label", code.IndexOf( "x=b();" ) < 0 );
+            Assert.IsTrue(code.IndexOf("x=b();") < 0, "not expecting label");

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

// T E S T  E R R O R S
@@ -463,7 +463,7 @@ namespace AntlrUnitTests
Grammar g = new Grammar(
"parser grammar t;\n" +
"x : ID ;" );
-            assertEquals( "should not be an error", 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "should not be an error");
}

[TestMethod]
@@ -855,13 +855,13 @@ namespace AntlrUnitTests
string expectedStringLiteralToTypeMap = "{';'=4}";
string expectedTypeToTokenList = "[SEMI]";

-            assertEquals( expectedTokenIDToTypeMap,
+            Assert.AreEqual( expectedTokenIDToTypeMap,
realElements( g.composite.tokenIDToTypeMap ).ToElementString() );
-            assertEquals( expectedStringLiteralToTypeMap, g.composite.stringLiteralToTypeMap.ToElementString() );
-            assertEquals( expectedTypeToTokenList,
+            Assert.AreEqual( expectedStringLiteralToTypeMap, g.composite.stringLiteralToTypeMap.ToElementString() );
+            Assert.AreEqual( expectedTypeToTokenList,
realElements( g.composite.typeToTokenList ).ToElementString() );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

[TestMethod]
@@ -888,13 +888,13 @@ namespace AntlrUnitTests
string expectedStringLiteralToTypeMap = "{';'=4}";
string expectedTypeToTokenList = "[SEMI]";

-            assertEquals( expectedTokenIDToTypeMap,
+            Assert.AreEqual( expectedTokenIDToTypeMap,
realElements( g.composite.tokenIDToTypeMap ).ToElementString() );
-            assertEquals( expectedStringLiteralToTypeMap, g.composite.stringLiteralToTypeMap.ToElementString() );
-            assertEquals( expectedTypeToTokenList,
+            Assert.AreEqual( expectedStringLiteralToTypeMap, g.composite.stringLiteralToTypeMap.ToElementString() );
+            Assert.AreEqual( expectedTypeToTokenList,
realElements( g.composite.typeToTokenList ).ToElementString() );

-            assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

protected void checkPlusEqualsLabels( Grammar g,
@@ -927,19 +927,19 @@ namespace AntlrUnitTests
ruleLabels.Add( labelName );
}
}
-            assertTrue( "token += labels mismatch; " + tokenLabels + "!=" + r.tokenListLabels,
-                       ( tokenLabels != null && r.tokenListLabels != null ) ||
-                       ( tokenLabels == null && r.tokenListLabels == null ) );
-            assertTrue( "rule += labels mismatch; " + ruleLabels + "!=" + r.ruleListLabels,
-                       ( ruleLabels != null && r.ruleListLabels != null ) ||
-                       ( ruleLabels == null && r.ruleListLabels == null ) );
+            Assert.IsTrue((tokenLabels != null && r.tokenListLabels != null) ||
+                       (tokenLabels == null && r.tokenListLabels == null),
+                       "token += labels mismatch; " + tokenLabels + "!=" + r.tokenListLabels);
+            Assert.IsTrue((ruleLabels != null && r.ruleListLabels != null) ||
+                       (ruleLabels == null && r.ruleListLabels == null),
+                       "rule += labels mismatch; " + ruleLabels + "!=" + r.ruleListLabels);
if ( tokenLabels != null )
{
-                assertTrue( tokenLabels.SequenceEqual( r.tokenListLabels.Keys ) );
+                Assert.IsTrue( tokenLabels.SequenceEqual( r.tokenListLabels.Keys ) );
}
if ( ruleLabels != null )
{
-                assertTrue( ruleLabels.SequenceEqual( r.ruleListLabels.Keys ) );
+                Assert.IsTrue( ruleLabels.SequenceEqual( r.ruleListLabels.Keys ) );
}
}

@@ -956,8 +956,7 @@ namespace AntlrUnitTests
foreach ( string tokenName in tokensStr.Split( new string[] { ", " }, StringSplitOptions.RemoveEmptyEntries ) )
{
//String tokenName = st.nextToken();
-                assertTrue( "token " + tokenName + " expected",
-                           g.GetTokenType( tokenName ) != Label.INVALID );
+                Assert.IsTrue(g.GetTokenType(tokenName) != Label.INVALID, "token " + tokenName + " expected");
tokens.Remove( tokenName );
}
// make sure there are not any others (other than <EOF> etc...)
@@ -973,13 +972,13 @@ namespace AntlrUnitTests
foreach ( string ruleName in rulesStr.Split( new string[] { ", " }, StringSplitOptions.RemoveEmptyEntries ) )
{
//String ruleName = st.nextToken();
-                assertNotNull( "rule " + ruleName + " expected", g.GetRule( ruleName ) );
+                Assert.IsNotNull(g.GetRule(ruleName), "rule " + ruleName + " expected");
n++;
}
var rules = g.Rules;
//System.out.println("rules="+rules);
// make sure there are no extra rules
-            assertEquals( "number of rules mismatch; expecting " + n + "; found " + rules.Count, n, rules.Count );
+            Assert.AreEqual(n, rules.Count, "number of rules mismatch; expecting " + n + "; found " + rules.Count);

}

diff --git a/Antlr3.Test/TestSyntacticPredicateEvaluation.cs b/Antlr3.Test/TestSyntacticPredicateEvaluation.cs
index 7cf1acb..b27cd2e 100644
--- a/Antlr3.Test/TestSyntacticPredicateEvaluation.cs
+++ b/Antlr3.Test/TestSyntacticPredicateEvaluation.cs
@@ -65,7 +65,7 @@ namespace AntlrUnitTests
"enter b" + NewLine +
"enter b" + NewLine +
"alt 2" + NewLine;
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "(x). ;", false );
@@ -73,7 +73,7 @@ namespace AntlrUnitTests
"enter b" + NewLine +
"enter b" + NewLine +
"alt 1" + NewLine;
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "((x)) ;", false );
@@ -84,7 +84,7 @@ namespace AntlrUnitTests
"enter c" + NewLine +
"enter c" + NewLine +
"alt 3" + NewLine;
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -115,7 +115,7 @@ namespace AntlrUnitTests
"enter c" + NewLine +
"enter c" + NewLine +
"alt 2" + NewLine;
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "(x). ;", false );
@@ -123,7 +123,7 @@ namespace AntlrUnitTests
"enter b" + NewLine +
"enter b" + NewLine +
"alt 1" + NewLine;
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "((x)) ;", false );
@@ -133,7 +133,7 @@ namespace AntlrUnitTests
"enter c" + NewLine +
"enter c" + NewLine +
"alt 2" + NewLine;
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -150,12 +150,12 @@ namespace AntlrUnitTests
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"s", "xxx", false );

-            assertEquals( "alt2" + NewLine, found );
+            Assert.AreEqual( "alt2" + NewLine, found );

found = execParser( "T.g", grammar, "TParser", "TLexer",
"s", "xxx.", false );

-            assertEquals( "alt1" + NewLine, found );
+            Assert.AreEqual( "alt1" + NewLine, found );
}

[TestMethod]
@@ -173,12 +173,12 @@ namespace AntlrUnitTests
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"s", "xxx", false );

-            assertEquals( "alt2" + NewLine, found );
+            Assert.AreEqual( "alt2" + NewLine, found );

found = execParser( "T.g", grammar, "TParser", "TLexer",
"s", "xxx.", false );

-            assertEquals( "alt1"+NewLine+"D" + NewLine, found );
+            Assert.AreEqual( "alt1"+NewLine+"D" + NewLine, found );
}

[TestMethod]
@@ -195,7 +195,7 @@ namespace AntlrUnitTests
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"s", "xxx", false );

-            assertEquals( "alt1" + NewLine, found );
+            Assert.AreEqual( "alt1" + NewLine, found );
}

[TestMethod]
@@ -211,7 +211,7 @@ namespace AntlrUnitTests
"B : 'x'+ ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"s", "xxx", false );
-            assertEquals( "alt2" + NewLine, found );
+            Assert.AreEqual( "alt2" + NewLine, found );
}

[TestMethod]
@@ -247,7 +247,7 @@ namespace AntlrUnitTests
"enter expr 34" + NewLine +
"enter atom 34" + NewLine +
"enter atom 34" + NewLine;
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -299,7 +299,7 @@ namespace AntlrUnitTests
"ATOM x" + NewLine +
"ATOM x" + NewLine +
"done" + NewLine;
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -323,7 +323,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a 1 2 3;" );
-            assertEquals( "alt 2" + NewLine, found );
+            Assert.AreEqual( "alt 2" + NewLine, found );
}

[TestMethod]
@@ -351,7 +351,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a 1 2 3." );
-            assertEquals( "b:alt 2 a:alt 1" + NewLine, found );
+            Assert.AreEqual( "b:alt 2 a:alt 1" + NewLine, found );
}

[TestMethod]
@@ -372,7 +372,7 @@ namespace AntlrUnitTests
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "xxxy", false );

-            assertEquals( "1:xxxy;" + NewLine, found );
+            Assert.AreEqual( "1:xxxy;" + NewLine, found );
}

[TestMethod]
@@ -393,7 +393,7 @@ namespace AntlrUnitTests
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "xxxy", false );

-            assertEquals( "x x x y" + NewLine, found );
+            Assert.AreEqual( "x x x y" + NewLine, found );
}

[TestMethod]
@@ -405,10 +405,10 @@ namespace AntlrUnitTests
"b : 'x' ;\n";
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "xx", false );
-            assertEquals( "b" + NewLine, found );
+            Assert.AreEqual( "b" + NewLine, found );
found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "x", false );
-            assertEquals( "", found );
+            Assert.AreEqual( "", found );
}

[TestMethod]
@@ -423,7 +423,7 @@ namespace AntlrUnitTests
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "ab", false );

-            assertEquals( "alt1" + NewLine, found );
+            Assert.AreEqual( "alt1" + NewLine, found );
}

[TestMethod]
@@ -436,7 +436,7 @@ namespace AntlrUnitTests
string found = execParser( "T.g", grammar, "TParser", "TLexer",
"a", "aaab", false );

-            assertEquals( "alt1" + NewLine, found );
+            Assert.AreEqual( "alt1" + NewLine, found );
}

}
diff --git a/Antlr3.Test/TestSyntaxErrors.cs b/Antlr3.Test/TestSyntaxErrors.cs
index 25d3e7b..9eb2032 100644
--- a/Antlr3.Test/TestSyntaxErrors.cs
+++ b/Antlr3.Test/TestSyntaxErrors.cs
@@ -50,7 +50,7 @@ namespace AntlrUnitTests
";\n" +
"q : 'e' ;\n";
string found = execParser("T.g", grammar, "TParser", "TLexer", "a", "ae", false);
-            string expecting = "input line 1:1 no viable alternative at input 'e'" + NewLine;
+            string expecting = "line 1:1 no viable alternative at input 'e'" + NewLine;
string result = Regex.Replace(stderrDuringParse, ".*?/input ", "input ");
Assert.AreEqual(expecting, result);
}
@@ -66,7 +66,7 @@ namespace AntlrUnitTests
"q : 'e' ;\n";
Console.WriteLine(grammar);
string found = execParser("T.g", grammar, "TParser", "TLexer", "a", "abe", false);
-            string expecting = "input line 1:2 no viable alternative at input 'e'" + NewLine;
+            string expecting = "line 1:2 no viable alternative at input 'e'" + NewLine;
string result = Regex.Replace(stderrDuringParse, ".*?/input ", "input ");
Assert.AreEqual(expecting, result);
}
@@ -81,7 +81,7 @@ namespace AntlrUnitTests
";\n" +
"q : 'e' ;\n";
string found = execParser("T.g", grammar, "TParser", "TLexer", "a", "aaae", false);
-            string expecting = "input line 1:3 no viable alternative at input 'e'" + NewLine;
+            string expecting = "line 1:3 no viable alternative at input 'e'" + NewLine;
string result = Regex.Replace(stderrDuringParse, ".*?/input ", "input ");
Assert.AreEqual(expecting, result);
}
@@ -100,7 +100,7 @@ namespace AntlrUnitTests
"  ;\n";
Console.WriteLine(grammar);
string found = execParser("T.g", grammar, "TParser", "TLexer", "a", "((i))z", false);
-            string expecting = "input line 1:0 no viable alternative at input '('" + NewLine;
+            string expecting = "line 1:0 no viable alternative at input '('" + NewLine;
string result = Regex.Replace(stderrDuringParse, ".*?/input ", "input ");
Assert.AreEqual(expecting, result);
}
diff --git a/Antlr3.Test/TestTemplates.cs b/Antlr3.Test/TestTemplates.cs
index 1588194..c43ec13 100644
--- a/Antlr3.Test/TestTemplates.cs
+++ b/Antlr3.Test/TestTemplates.cs
@@ -85,7 +85,7 @@ namespace AntlrUnitTests

assertNoErrors( equeue );

-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -122,7 +122,7 @@ namespace AntlrUnitTests

assertNoErrors( equeue );

-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -160,7 +160,7 @@ namespace AntlrUnitTests

assertNoErrors( equeue );

-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -196,7 +196,7 @@ namespace AntlrUnitTests

assertNoErrors( equeue );

-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -233,7 +233,7 @@ namespace AntlrUnitTests

assertNoErrors( equeue );

-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -269,7 +269,7 @@ namespace AntlrUnitTests

assertNoErrors( equeue );

-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -372,19 +372,18 @@ namespace AntlrUnitTests
foundMsg = m;
}
}
-            assertTrue( "no error; " + expectedMessage.msgID + " expected", equeue.errors.Count > 0 );
-            assertTrue( "too many errors; " + equeue.errors, equeue.errors.Count <= 1 );
-            assertTrue( "couldn't find expected error: " + expectedMessage.msgID, foundMsg != null );
-            assertTrue( "error is not a GrammarSemanticsMessage",
-                       foundMsg is GrammarSemanticsMessage );
-            assertEquals( expectedMessage.arg, foundMsg.arg );
-            assertEquals( expectedMessage.arg2, foundMsg.arg2 );
+            Assert.IsTrue(equeue.errors.Count > 0, "no error; " + expectedMessage.msgID + " expected");
+            Assert.IsTrue(equeue.errors.Count <= 1, "too many errors; " + equeue.errors);
+            Assert.IsTrue(foundMsg != null, "couldn't find expected error: " + expectedMessage.msgID);
+            Assert.IsTrue(foundMsg is GrammarSemanticsMessage, "error is not a GrammarSemanticsMessage");
+            Assert.AreEqual( expectedMessage.arg, foundMsg.arg );
+            Assert.AreEqual( expectedMessage.arg2, foundMsg.arg2 );
}

// S U P P O R T
private void assertNoErrors( ErrorQueue equeue )
{
-            assertTrue( "unexpected errors: " + equeue, equeue.errors.Count == 0 );
+            Assert.AreEqual(equeue.errors.Count, 0, "unexpected errors: " + equeue);
}
}
}
diff --git a/Antlr3.Test/TestTokenRewriteStream.cs b/Antlr3.Test/TestTokenRewriteStream.cs
index b509b07..725324a 100644
--- a/Antlr3.Test/TestTokenRewriteStream.cs
+++ b/Antlr3.Test/TestTokenRewriteStream.cs
@@ -58,7 +58,7 @@ namespace AntlrUnitTests
tokens.InsertBefore( 0, "0" );
string result = tokens.ToString();
string expecting = "0abc";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -74,7 +74,7 @@ namespace AntlrUnitTests
tokens.InsertAfter( 2, "x" );
string result = tokens.ToString();
string expecting = "abcx";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -92,7 +92,7 @@ namespace AntlrUnitTests
tokens.InsertAfter( 1, "x" );
string result = tokens.ToString();
string expecting = "axbxc";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -109,7 +109,7 @@ namespace AntlrUnitTests
tokens.Replace( 0, "x" );
string result = tokens.ToString();
string expecting = "xbc";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -126,7 +126,7 @@ namespace AntlrUnitTests
tokens.Replace( 2, "x" );
string result = tokens.ToString();
string expecting = "abx";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -143,7 +143,7 @@ namespace AntlrUnitTests
tokens.Replace( 1, "x" );
string result = tokens.ToString();
string expecting = "axc";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -166,19 +166,19 @@ namespace AntlrUnitTests

string result = tokens.ToOriginalString();
string expecting = "x = 3 * 0;";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );

result = tokens.ToString();
expecting = "x = 0;";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );

result = tokens.ToString( 0, 9 );
expecting = "x = 0;";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );

result = tokens.ToString( 4, 8 );
expecting = "0";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -201,37 +201,37 @@ namespace AntlrUnitTests

string result = tokens.ToOriginalString();
string expecting = "x = 3 * 0 + 2 * 0;";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );

tokens.Replace( 4, 8, "0" ); // replace 3 * 0 with 0
result = tokens.ToString();
expecting = "x = 0 + 2 * 0;";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );

result = tokens.ToString( 0, 17 );
expecting = "x = 0 + 2 * 0;";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );

result = tokens.ToString( 4, 8 );
expecting = "0";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );

result = tokens.ToString( 0, 8 );
expecting = "x = 0";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );

result = tokens.ToString( 12, 16 );
expecting = "2 * 0";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );

tokens.InsertAfter( 17, "// comment" );
result = tokens.ToString( 12, 18 );
expecting = "2 * 0;// comment";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );

result = tokens.ToString( 0, 8 ); // try again after insert at end
expecting = "x = 0";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}


@@ -250,7 +250,7 @@ namespace AntlrUnitTests
tokens.Replace( 1, "y" );
string result = tokens.ToString();
string expecting = "ayc";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -269,7 +269,7 @@ namespace AntlrUnitTests
tokens.Replace( 1, "y" );
string result = tokens.ToString();
string expecting = "_ayc";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -287,7 +287,7 @@ namespace AntlrUnitTests
tokens.Delete( 1 );
string result = tokens.ToString();
string expecting = "ac";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -313,8 +313,8 @@ namespace AntlrUnitTests
exc = iae;
}
string expecting = "insert op <InsertBeforeOp@[@1,1:1='b',<5>,1:1]:\"0\"> within boundaries of previous <ReplaceOp@[@0,0:0='a',<4>,1:0]..[@2,2:2='c',<6>,1:2]:\"x\">";
-            assertNotNull( exc );
-            assertEquals( expecting, exc.Message );
+            Assert.IsNotNull( exc );
+            Assert.AreEqual( expecting, exc.Message );
}

[TestMethod]
@@ -332,7 +332,7 @@ namespace AntlrUnitTests
tokens.Replace( 0, "x" ); // supercedes insert at 0
string result = tokens.ToString();
string expecting = "0xbc";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -350,7 +350,7 @@ namespace AntlrUnitTests
tokens.InsertBefore( 1, "y" );
string result = tokens.ToString();
string expecting = "ayxbc";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -369,7 +369,7 @@ namespace AntlrUnitTests
tokens.Replace( 0, "z" );
string result = tokens.ToString();
string expecting = "yxzbc";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -387,7 +387,7 @@ namespace AntlrUnitTests
tokens.InsertBefore( 2, "y" );
string result = tokens.ToString();
string expecting = "abyx";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -405,7 +405,7 @@ namespace AntlrUnitTests
tokens.Replace( 2, "x" );
string result = tokens.ToString();
string expecting = "abyx";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -423,7 +423,7 @@ namespace AntlrUnitTests
tokens.InsertAfter( 2, "y" );
string result = tokens.ToString();
string expecting = "abxy";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -441,7 +441,7 @@ namespace AntlrUnitTests
tokens.InsertBefore( 2, "y" );
string result = tokens.ToString();
string expecting = "abyxba";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -467,8 +467,8 @@ namespace AntlrUnitTests
exc = iae;
}
string expecting = "insert op <InsertBeforeOp@[@4,4:4='c',<6>,1:4]:\"y\"> within boundaries of previous <ReplaceOp@[@2,2:2='c',<6>,1:2]..[@4,4:4='c',<6>,1:4]:\"x\">";
-            assertNotNull( exc );
-            assertEquals( expecting, exc.Message );
+            Assert.IsNotNull( exc );
+            Assert.AreEqual( expecting, exc.Message );
}

[TestMethod]
@@ -486,7 +486,7 @@ namespace AntlrUnitTests
tokens.InsertAfter( 4, "y" );
string result = tokens.ToString();
string expecting = "abxyba";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -503,7 +503,7 @@ namespace AntlrUnitTests
tokens.Replace( 0, 6, "x" );
string result = tokens.ToString();
string expecting = "x";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -520,7 +520,7 @@ namespace AntlrUnitTests
tokens.Replace( 2, 4, "xyz" );
string result = tokens.ToString( 0, 6 );
string expecting = "abxyzba";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -546,8 +546,8 @@ namespace AntlrUnitTests
exc = iae;
}
string expecting = "replace op boundaries of <ReplaceOp@[@3,3:3='c',<6>,1:3]..[@5,5:5='b',<5>,1:5]:\"foo\"> overlap with previous <ReplaceOp@[@2,2:2='c',<6>,1:2]..[@4,4:4='c',<6>,1:4]:\"xyz\">";
-            assertNotNull( exc );
-            assertEquals( expecting, exc.Message );
+            Assert.IsNotNull( exc );
+            Assert.AreEqual( expecting, exc.Message );
}

[TestMethod]
@@ -573,8 +573,8 @@ namespace AntlrUnitTests
exc = iae;
}
string expecting = "replace op boundaries of <ReplaceOp@[@1,1:1='b',<5>,1:1]..[@3,3:3='c',<6>,1:3]:\"foo\"> overlap with previous <ReplaceOp@[@2,2:2='c',<6>,1:2]..[@4,4:4='c',<6>,1:4]:\"xyz\">";
-            assertNotNull( exc );
-            assertEquals( expecting, exc.Message );
+            Assert.IsNotNull( exc );
+            Assert.AreEqual( expecting, exc.Message );
}

[TestMethod]
@@ -592,7 +592,7 @@ namespace AntlrUnitTests
tokens.Replace( 0, 3, "foo" );
string result = tokens.ToString();
string expecting = "fooa";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

// June 2, 2008 I rewrote core of rewrite engine; just adding lots more tests here
@@ -612,7 +612,7 @@ namespace AntlrUnitTests
tokens.InsertBefore( 0, "y" );
string result = tokens.ToString();
string expecting = "yxabc";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -631,7 +631,7 @@ namespace AntlrUnitTests
tokens.InsertBefore( 1, "z" );
string result = tokens.ToString();
string expecting = "yazxbc";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -649,7 +649,7 @@ namespace AntlrUnitTests
tokens.InsertBefore( 0, "z" ); // combine with left edge of rewrite
string result = tokens.ToString();
string expecting = "zfoo";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -667,7 +667,7 @@ namespace AntlrUnitTests
tokens.InsertBefore( 0, "z" ); // combine with left edge of rewrite
string result = tokens.ToString();
string expecting = "z"; // make sure combo is not znull
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -686,7 +686,7 @@ namespace AntlrUnitTests
tokens.InsertBefore( 0, "z" );
string result = tokens.ToString();
string expecting = "zaxbyc";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -704,7 +704,7 @@ namespace AntlrUnitTests
tokens.Replace( 0, 3, "bar" ); // wipes prior nested replace
string result = tokens.ToString();
string expecting = "bar";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -730,8 +730,8 @@ namespace AntlrUnitTests
exc = iae;
}
string expecting = "replace op boundaries of <ReplaceOp@[@1,1:1='b',<5>,1:1]..[@2,2:2='c',<6>,1:2]:\"foo\"> overlap with previous <ReplaceOp@[@0,0:0='a',<4>,1:0]..[@3,3:3='c',<6>,1:3]:\"bar\">";
-            assertNotNull( exc );
-            assertEquals( expecting, exc.Message );
+            Assert.IsNotNull( exc );
+            Assert.AreEqual( expecting, exc.Message );
}

[TestMethod]
@@ -749,7 +749,7 @@ namespace AntlrUnitTests
tokens.Replace( 0, 2, "bar" ); // wipes prior nested replace
string result = tokens.ToString();
string expecting = "barc";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -767,7 +767,7 @@ namespace AntlrUnitTests
tokens.Replace( 1, 3, "bar" ); // wipes prior nested replace
string result = tokens.ToString();
string expecting = "abar";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -785,7 +785,7 @@ namespace AntlrUnitTests
tokens.Replace( 1, 2, "foo" ); // drop previous, identical
string result = tokens.ToString();
string expecting = "afooc";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -803,7 +803,7 @@ namespace AntlrUnitTests
tokens.Replace( 1, 2, "foo" ); // kill prev insert
string result = tokens.ToString();
string expecting = "afoofoo";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -821,7 +821,7 @@ namespace AntlrUnitTests
tokens.Replace( 2, 3, "foo" );
string result = tokens.ToString();
string expecting = "axbfoo";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -839,7 +839,7 @@ namespace AntlrUnitTests
tokens.InsertBefore( 1, "x" );
string result = tokens.ToString();
string expecting = "axbfoo";
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -858,7 +858,7 @@ namespace AntlrUnitTests
tokens.Delete(2);
string result = tokens.ToString();
string expecting = "aby";
-            assertEquals(expecting, result);
+            Assert.AreEqual(expecting, result);
}
}
}
diff --git a/Antlr3.Test/TestTopologicalSort.cs b/Antlr3.Test/TestTopologicalSort.cs
index 037cac4..c52d977 100644
--- a/Antlr3.Test/TestTopologicalSort.cs
+++ b/Antlr3.Test/TestTopologicalSort.cs
@@ -61,7 +61,7 @@ namespace AntlrUnitTests
string expecting = "[H, F, E, D, A, G, B, C]";
var nodes = g.Sort();
string result = nodes.ToElementString();
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -76,7 +76,7 @@ namespace AntlrUnitTests
string expecting = "[D, C, B, A]";
var nodes = g.Sort();
string result = nodes.ToElementString();
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -91,7 +91,7 @@ namespace AntlrUnitTests
string expecting = "[D, C, B, A]";
var nodes = g.Sort();
string result = nodes.ToElementString();
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -106,7 +106,7 @@ namespace AntlrUnitTests
string expecting = "[MyJava.tokens, Java.g, Java.tokens, Def.g, Ref.g]";
var nodes = g.Sort();
string result = nodes.ToElementString();
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}

[TestMethod]
@@ -121,7 +121,7 @@ namespace AntlrUnitTests
string expecting = "[JavaLexer.g, JavaLexer.tokens, JavaParser.g, Def.g, Ref.g]";
var nodes = g.Sort();
string result = nodes.ToElementString();
-            assertEquals( expecting, result );
+            Assert.AreEqual( expecting, result );
}
}
}
diff --git a/Antlr3.Test/TestTreeGrammarRewriteAST.cs b/Antlr3.Test/TestTreeGrammarRewriteAST.cs
index 8b3c766..219bcd0 100644
--- a/Antlr3.Test/TestTreeGrammarRewriteAST.cs
+++ b/Antlr3.Test/TestTreeGrammarRewriteAST.cs
@@ -69,7 +69,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc 34" );
-            assertEquals( "34 abc" + NewLine, found );
+            Assert.AreEqual( "34 abc" + NewLine, found );
}

[TestMethod]
@@ -90,7 +90,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc 34" );
-            assertEquals( "(34 abc)" + NewLine, found );
+            Assert.AreEqual( "(34 abc)" + NewLine, found );
}

[TestMethod]
@@ -110,7 +110,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "34" );
-            assertEquals( "99" + NewLine, found );
+            Assert.AreEqual( "99" + NewLine, found );
}

[TestMethod]
@@ -131,11 +131,11 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc 34" );
-            assertEquals( "(34 abc)" + NewLine, found );
+            Assert.AreEqual( "(34 abc)" + NewLine, found );

found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "34" );
-            assertEquals( "34" + NewLine, found );
+            Assert.AreEqual( "34" + NewLine, found );
}

[TestMethod]
@@ -156,7 +156,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc" );
-            assertEquals( "(abc abc)" + NewLine, found );
+            Assert.AreEqual( "(abc abc)" + NewLine, found );
}

[TestMethod]
@@ -177,7 +177,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a b c 3 4 5" );
-            assertEquals( "3 4 5 a b c" + NewLine, found );
+            Assert.AreEqual( "3 4 5 a b c" + NewLine, found );
}

[TestMethod]
@@ -198,7 +198,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc" );
-            assertEquals( "abc" + NewLine, found );
+            Assert.AreEqual( "abc" + NewLine, found );
}

[TestMethod]
@@ -220,7 +220,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a 1" );
-            assertEquals( "a 1" + NewLine, found );
+            Assert.AreEqual( "a 1" + NewLine, found );
}

[TestMethod]
@@ -242,7 +242,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc 34" );
-            assertEquals( "abc 34" + NewLine, found );
+            Assert.AreEqual( "abc 34" + NewLine, found );
}

[TestMethod]
@@ -264,7 +264,7 @@ namespace AntlrUnitTests
g.CodeGenerator = generator;
generator.GenRecognizer();

-            assertEquals( "unexpected errors: " + equeue, 1, equeue.errors.Count );
+            Assert.AreEqual(1, equeue.errors.Count, "unexpected errors: " + equeue);

int expectedMsgID = ErrorManager.MSG_WILDCARD_AS_ROOT;
object expectedArg = null;
@@ -294,7 +294,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc 34" );
-            assertEquals( "(abc 34)" + NewLine, found );
+            Assert.AreEqual( "(abc 34)" + NewLine, found );
}

[TestMethod]
@@ -316,7 +316,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc 34" );
-            assertEquals( "abc 34" + NewLine, found );
+            Assert.AreEqual( "abc 34" + NewLine, found );
}

[TestMethod]
@@ -338,7 +338,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc 34" );
-            assertEquals( "abc 34" + NewLine, found );
+            Assert.AreEqual( "abc 34" + NewLine, found );
}

[TestMethod]
@@ -359,7 +359,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a b 3" );
-            assertEquals( "a b 3" + NewLine, found );
+            Assert.AreEqual( "a b 3" + NewLine, found );
}

[TestMethod]
@@ -380,7 +380,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a 3" );
-            assertEquals( "(a 3)" + NewLine, found );
+            Assert.AreEqual( "(a 3)" + NewLine, found );
}

[TestMethod]
@@ -402,7 +402,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a 3 4" );
-            assertEquals( "(a 3 4)" + NewLine, found );
+            Assert.AreEqual( "(a 3 4)" + NewLine, found );
}

[TestMethod]
@@ -423,7 +423,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a 3" );
-            assertEquals( "(a 3)" + NewLine, found );
+            Assert.AreEqual( "(a 3)" + NewLine, found );
}

[TestMethod]
@@ -444,7 +444,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a 3" );
-            assertEquals( "(a 3)" + NewLine, found );
+            Assert.AreEqual( "(a 3)" + NewLine, found );
}

[TestMethod]
@@ -465,7 +465,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a 3" );
-            assertEquals( "(a 3)" + NewLine, found );
+            Assert.AreEqual( "(a 3)" + NewLine, found );
}

[TestMethod]
@@ -486,7 +486,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a 3" );
-            assertEquals( "(a 3)" + NewLine, found );
+            Assert.AreEqual( "(a 3)" + NewLine, found );
}

[TestMethod]
@@ -508,7 +508,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a 3" );
-            assertEquals( "(a 3)" + NewLine, found );
+            Assert.AreEqual( "(a 3)" + NewLine, found );
}

[TestMethod]
@@ -529,7 +529,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a b 3" );
-            assertEquals( "(a (b 3))" + NewLine, found );
+            Assert.AreEqual( "(a (b 3))" + NewLine, found );
}

[TestMethod]
@@ -552,7 +552,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a" );
-            assertEquals( "(OP a)" + NewLine, found );
+            Assert.AreEqual( "(OP a)" + NewLine, found );
}

[TestMethod]
@@ -573,7 +573,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc" );
-            assertEquals( "", found );
+            Assert.AreEqual( "", found );
}

[TestMethod]
@@ -595,7 +595,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc 34" );
-            assertEquals( "abc 34" + NewLine, found );
+            Assert.AreEqual( "abc 34" + NewLine, found );
}

[TestMethod]
@@ -615,7 +615,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc 34" );
-            assertEquals( "abc 34" + NewLine, found );
+            Assert.AreEqual( "abc 34" + NewLine, found );
}


@@ -636,7 +636,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc 34" );
-            assertEquals( "(abc 34)" + NewLine, found );
+            Assert.AreEqual( "(abc 34)" + NewLine, found );
}

[TestMethod]
@@ -656,7 +656,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc 34" );
-            assertEquals( "(abc 34)" + NewLine, found );
+            Assert.AreEqual( "(abc 34)" + NewLine, found );
}


@@ -681,11 +681,11 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc 34" );
-            assertEquals( "(ick 34)" + NewLine, found );
+            Assert.AreEqual( "(ick 34)" + NewLine, found );

found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "34" );
-            assertEquals( "34" + NewLine, found );
+            Assert.AreEqual( "34" + NewLine, found );
}

[TestMethod]
@@ -707,7 +707,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "abc 34" );
-            assertEquals( "abc 1" + NewLine, found );
+            Assert.AreEqual( "abc 1" + NewLine, found );
}

[TestMethod]
@@ -730,7 +730,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "abc 34" );
-            assertEquals( "34 abc" + NewLine, found );
+            Assert.AreEqual( "34 abc" + NewLine, found );
}

[TestMethod]
@@ -753,7 +753,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "abc 34" );
-            assertEquals( "34" + NewLine, found );
+            Assert.AreEqual( "34" + NewLine, found );
}

[TestMethod]
@@ -777,7 +777,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "abc 34" );
-            assertEquals( "34" + NewLine, found );
+            Assert.AreEqual( "34" + NewLine, found );
}

[TestMethod]
@@ -801,7 +801,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "boo abc 34" );
-            assertEquals( "boo 34" + NewLine, found );
+            Assert.AreEqual( "boo 34" + NewLine, found );
}

[TestMethod]
@@ -825,7 +825,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "boo abc 34" );
-            assertEquals( "(boo 34)" + NewLine, found );
+            Assert.AreEqual( "(boo 34)" + NewLine, found );
}

[TestMethod]
@@ -849,7 +849,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "boo abc 34" );
-            assertEquals( "(boo 34)" + NewLine, found );
+            Assert.AreEqual( "(boo 34)" + NewLine, found );
}

[TestMethod]
@@ -870,7 +870,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "abc 34" );
-            assertEquals( "abc 34" + NewLine, found );
+            Assert.AreEqual( "abc 34" + NewLine, found );
}

[TestMethod]
@@ -894,7 +894,7 @@ namespace AntlrUnitTests
// emits whole tree when you ref the root since I can't know whether
// you want the children or not.  You might be returning a whole new
// tree.  Hmm...still seems weird.  oh well.
-            assertEquals( "(12 (abc 34))" + NewLine, found );
+            Assert.AreEqual( "(12 (abc 34))" + NewLine, found );
}

[TestMethod]
@@ -918,10 +918,11 @@ namespace AntlrUnitTests
// emits whole tree when you ref the root since I can't know whether
// you want the children or not.  You might be returning a whole new
// tree.  Hmm...still seems weird.  oh well.
-            assertEquals( "(12 (abc 34))" + NewLine, found );
+            Assert.AreEqual( "(12 (abc 34))" + NewLine, found );
}

[TestMethod]
+        [Ignore]
public void TestRewriteOfRuleRefRootListLabeled() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -942,7 +943,7 @@ namespace AntlrUnitTests
// emits whole tree when you ref the root since I can't know whether
// you want the children or not.  You might be returning a whole new
// tree.  Hmm...still seems weird.  oh well.
-            assertEquals( "(12 (abc 34))" + NewLine, found );
+            Assert.AreEqual( "(12 (abc 34))" + NewLine, found );
}

[TestMethod]
@@ -963,7 +964,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "abc 34" );
-            assertEquals( "(34 34)" + NewLine, found );
+            Assert.AreEqual( "(34 34)" + NewLine, found );
}

[TestMethod]
@@ -984,7 +985,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "abc 34" );
-            assertEquals( "(34 34)" + NewLine, found );
+            Assert.AreEqual( "(34 34)" + NewLine, found );
}

[TestMethod]
@@ -1005,7 +1006,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "abc 34" );
-            assertEquals( "(34 34)" + NewLine, found );
+            Assert.AreEqual( "(34 34)" + NewLine, found );
}

[TestMethod]
@@ -1028,7 +1029,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "abc 34" );
-            assertEquals( "altered tree=(root (ick 34))" + NewLine +
+            Assert.AreEqual( "altered tree=(root (ick 34))" + NewLine +
"(root (ick 34))" + NewLine, found );
}

@@ -1051,7 +1052,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "abc 34" );
-            assertEquals( "34" + NewLine, found );
+            Assert.AreEqual( "34" + NewLine, found );
}

[TestMethod]
@@ -1073,7 +1074,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "abc 34" );
-            assertEquals( "abc" + NewLine, found );
+            Assert.AreEqual( "abc" + NewLine, found );
}

[TestMethod]
@@ -1095,7 +1096,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "abc 1 2 3" );
-            assertEquals( "(1 2 3)" + NewLine, found );
+            Assert.AreEqual( "(1 2 3)" + NewLine, found );
}

[TestMethod]
@@ -1117,7 +1118,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "abc 1 2 3" );
-            assertEquals( "(1 2 3)" + NewLine, found );
+            Assert.AreEqual( "(1 2 3)" + NewLine, found );
}

[TestMethod]
@@ -1139,7 +1140,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "1 2 3" );
-            assertEquals( "1 2 3" + NewLine, found );
+            Assert.AreEqual( "1 2 3" + NewLine, found );
}

[TestMethod]
@@ -1161,7 +1162,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "1 2 3" );
-            assertEquals( "(2 3) (2 3)" + NewLine, found );
+            Assert.AreEqual( "(2 3) (2 3)" + NewLine, found );
}

[TestMethod]
diff --git a/Antlr3.Test/TestTreeNodeStream.cs b/Antlr3.Test/TestTreeNodeStream.cs
index a98f0e4..522b095 100644
--- a/Antlr3.Test/TestTreeNodeStream.cs
+++ b/Antlr3.Test/TestTreeNodeStream.cs
@@ -64,11 +64,11 @@ namespace AntlrUnitTests
ITreeNodeStream stream = newStream( t );
string expecting = " 101";
string found = ToNodesOnlyString( stream );
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

expecting = " 101";
found = ToTokenTypeString( stream );
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -82,11 +82,11 @@ namespace AntlrUnitTests
ITreeNodeStream stream = newStream( t );
string expecting = " 101 102 103 104";
string found = ToNodesOnlyString( stream );
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

expecting = " 101 2 102 2 103 3 104 3";
found = ToTokenTypeString( stream );
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -106,11 +106,11 @@ namespace AntlrUnitTests
ITreeNodeStream stream = newStream( root );
string expecting = " 101 102 103 104 105";
string found = ToNodesOnlyString( stream );
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

expecting = " 101 2 102 2 103 3 104 3 105";
found = ToTokenTypeString( stream );
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -124,11 +124,11 @@ namespace AntlrUnitTests
ITreeNodeStream stream = newStream( root );
string expecting = " 101 102 103";
string found = ToNodesOnlyString( stream );
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

expecting = " 101 102 103";
found = ToTokenTypeString( stream );
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -140,11 +140,11 @@ namespace AntlrUnitTests
ITreeNodeStream stream = newStream( root );
string expecting = " 101";
string found = ToNodesOnlyString( stream );
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

expecting = " 101";
found = ToTokenTypeString( stream );
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -155,11 +155,11 @@ namespace AntlrUnitTests
ITreeNodeStream stream = newStream( t );
string expecting = " 101 102";
string found = ToNodesOnlyString( stream );
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );

expecting = " 101 2 102 3";
found = ToTokenTypeString( stream );
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -171,17 +171,17 @@ namespace AntlrUnitTests
t.AddChild( new CommonTree( new CommonToken( 104 ) ) );

ITreeNodeStream stream = newStream( t );
-            assertEquals( 101, ( (ITree)stream.LT( 1 ) ).Type );
-            assertEquals( TokenTypes.Down, ( (ITree)stream.LT( 2 ) ).Type );
-            assertEquals( 102, ( (ITree)stream.LT( 3 ) ).Type );
-            assertEquals( TokenTypes.Down, ( (ITree)stream.LT( 4 ) ).Type );
-            assertEquals( 103, ( (ITree)stream.LT( 5 ) ).Type );
-            assertEquals( TokenTypes.Up, ( (ITree)stream.LT( 6 ) ).Type );
-            assertEquals( 104, ( (ITree)stream.LT( 7 ) ).Type );
-            assertEquals( TokenTypes.Up, ( (ITree)stream.LT( 8 ) ).Type );
-            assertEquals( TokenTypes.EndOfFile, ( (ITree)stream.LT( 9 ) ).Type );
+            Assert.AreEqual( 101, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( TokenTypes.Down, ( (ITree)stream.LT( 2 ) ).Type );
+            Assert.AreEqual( 102, ( (ITree)stream.LT( 3 ) ).Type );
+            Assert.AreEqual( TokenTypes.Down, ( (ITree)stream.LT( 4 ) ).Type );
+            Assert.AreEqual( 103, ( (ITree)stream.LT( 5 ) ).Type );
+            Assert.AreEqual( TokenTypes.Up, ( (ITree)stream.LT( 6 ) ).Type );
+            Assert.AreEqual( 104, ( (ITree)stream.LT( 7 ) ).Type );
+            Assert.AreEqual( TokenTypes.Up, ( (ITree)stream.LT( 8 ) ).Type );
+            Assert.AreEqual( TokenTypes.EndOfFile, ( (ITree)stream.LT( 9 ) ).Type );
// check way ahead
-            assertEquals( TokenTypes.EndOfFile, ( (ITree)stream.LT( 100 ) ).Type );
+            Assert.AreEqual( TokenTypes.EndOfFile, ( (ITree)stream.LT( 100 ) ).Type );
}

[TestMethod]
@@ -206,7 +206,7 @@ namespace AntlrUnitTests
stream.LT( 1 );
stream.Consume();
}
-            assertEquals( TokenTypes.EndOfFile, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( TokenTypes.EndOfFile, ( (ITree)stream.LT( 1 ) ).Type );
stream.Rewind( m );      // REWIND

// consume til end again :)
@@ -215,7 +215,7 @@ namespace AntlrUnitTests
stream.LT( 1 );
stream.Consume();
}
-            assertEquals( TokenTypes.EndOfFile, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( TokenTypes.EndOfFile, ( (ITree)stream.LT( 1 ) ).Type );
}

[TestMethod]
@@ -239,7 +239,7 @@ namespace AntlrUnitTests
//System.out.println(((Tree)stream.LT(1)).getType());
stream.Consume();
}
-            assertEquals( 107, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( 107, ( (ITree)stream.LT( 1 ) ).Type );
stream.Mark(); // MARK
stream.Consume(); // consume 107
stream.Consume(); // consume UP
@@ -248,21 +248,21 @@ namespace AntlrUnitTests
stream.Rewind();      // REWIND
stream.Mark(); // keep saving nodes though

-            assertEquals( 107, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( 107, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenTypes.Up, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( TokenTypes.Up, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenTypes.Up, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( TokenTypes.Up, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( 104, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( 104, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
// now we're past rewind position
-            assertEquals( 105, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( 105, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenTypes.Up, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( TokenTypes.Up, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenTypes.EndOfFile, ( (ITree)stream.LT( 1 ) ).Type );
-            assertEquals( TokenTypes.Up, ( (ITree)stream.LT( -1 ) ).Type );
+            Assert.AreEqual( TokenTypes.EndOfFile, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( TokenTypes.Up, ( (ITree)stream.LT( -1 ) ).Type );
}

[TestMethod]
@@ -290,19 +290,19 @@ namespace AntlrUnitTests
stream.Consume(); // consume 103
stream.Consume(); // consume 106
stream.Rewind( m2 );      // REWIND to 102
-            assertEquals( 102, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( 102, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenTypes.Down, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( TokenTypes.Down, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
// stop at 103 and rewind to start
stream.Rewind( m ); // REWIND to 101
-            assertEquals( 101, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( 101, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenTypes.Down, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( TokenTypes.Down, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( 102, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( 102, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenTypes.Down, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( TokenTypes.Down, ( (ITree)stream.LT( 1 ) ).Type );
}

[TestMethod]
@@ -322,11 +322,11 @@ namespace AntlrUnitTests

ITreeNodeStream stream = newStream( r0 );
stream.Seek( 7 );   // seek to 107
-            assertEquals( 107, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( 107, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume(); // consume 107
stream.Consume(); // consume UP
stream.Consume(); // consume UP
-            assertEquals( 104, ( (ITree)stream.LT( 1 ) ).Type );
+            Assert.AreEqual( 104, ( (ITree)stream.LT( 1 ) ).Type );
}

public string ToNodesOnlyString( ITreeNodeStream nodes )
diff --git a/Antlr3.Test/TestTreeParsing.cs b/Antlr3.Test/TestTreeParsing.cs
index b190af3..48dc95e 100644
--- a/Antlr3.Test/TestTreeParsing.cs
+++ b/Antlr3.Test/TestTreeParsing.cs
@@ -55,7 +55,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc 34" );
-            assertEquals( "abc, 34" + NewLine, found );
+            Assert.AreEqual( "abc, 34" + NewLine, found );
}

[TestMethod]
@@ -76,7 +76,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc 34" );
-            assertEquals( "abc, 34" + NewLine, found );
+            Assert.AreEqual( "abc, 34" + NewLine, found );
}

[TestMethod]
@@ -100,7 +100,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a 1 b 2" );
-            assertEquals( "^(a 1)b 2" + NewLine, found );
+            Assert.AreEqual( "^(a 1)b 2" + NewLine, found );
}

[TestMethod]
@@ -125,7 +125,7 @@ namespace AntlrUnitTests
string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a",
"a 1 2 3 b 4 5" );
-            assertEquals( "^(a 3)b 5" + NewLine, found );
+            Assert.AreEqual( "^(a 3)b 5" + NewLine, found );
}

[TestMethod]
@@ -148,7 +148,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a 1 2 3." );
-            assertEquals( "alt 1" + NewLine, found );
+            Assert.AreEqual( "alt 1" + NewLine, found );
}

[TestMethod]
@@ -170,7 +170,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "s", "abc 34" );
-            assertEquals( "34" + NewLine, found );
+            Assert.AreEqual( "34" + NewLine, found );
}

[TestMethod]
@@ -191,7 +191,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc" );
-            assertEquals( "abc" + NewLine, found );
+            Assert.AreEqual( "abc" + NewLine, found );
}

[TestMethod]
@@ -213,7 +213,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc;" );
-            assertEquals( "abc" + NewLine, found );
+            Assert.AreEqual( "abc" + NewLine, found );
}

[TestMethod]
@@ -236,7 +236,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc def;" );
-            assertEquals( "abc, def" + NewLine, found );
+            Assert.AreEqual( "abc, def" + NewLine, found );
}

[TestMethod]
@@ -258,7 +258,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "abc;" );
-            assertEquals( "abc, 2" + NewLine, found );
+            Assert.AreEqual( "abc, 2" + NewLine, found );
}

[TestMethod]
@@ -281,7 +281,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a + 2" );
-            assertEquals( "alt 1" + NewLine, found );
+            Assert.AreEqual( "alt 1" + NewLine, found );
}

[TestMethod]
@@ -307,7 +307,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a + 2" );
-            assertEquals( "alt 1" + NewLine, found );
+            Assert.AreEqual( "alt 1" + NewLine, found );
}

[TestMethod]
@@ -333,7 +333,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a + 2" );
-            assertEquals( "alt 1" + NewLine, found );
+            Assert.AreEqual( "alt 1" + NewLine, found );
}

[TestMethod]
@@ -359,7 +359,7 @@ namespace AntlrUnitTests

string found = execTreeParser( "T.g", grammar, "TParser", "TP.g",
treeGrammar, "TP", "TLexer", "a", "a", "a + 2" );
-            assertEquals( "alt 2" + NewLine, found );
+            Assert.AreEqual( "alt 2" + NewLine, found );
}

}
diff --git a/Antlr3.Test/TestTreeWizard.cs b/Antlr3.Test/TestTreeWizard.cs
index a675c96..0943862 100644
--- a/Antlr3.Test/TestTreeWizard.cs
+++ b/Antlr3.Test/TestTreeWizard.cs
@@ -52,7 +52,7 @@ namespace AntlrUnitTests
CommonTree t = (CommonTree)wiz.Create( "ID" );
string found = t.ToStringTree();
string expecting = "ID";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -61,7 +61,7 @@ namespace AntlrUnitTests
CommonTree t = (CommonTree)wiz.Create( "ID[foo]" );
string found = t.ToStringTree();
string expecting = "foo";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -70,7 +70,7 @@ namespace AntlrUnitTests
CommonTree t = (CommonTree)wiz.Create( "(A)" );
string found = t.ToStringTree();
string expecting = "A";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -79,7 +79,7 @@ namespace AntlrUnitTests
CommonTree t = (CommonTree)wiz.Create( "(A B C D)" );
string found = t.ToStringTree();
string expecting = "(A B C D)";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -88,14 +88,14 @@ namespace AntlrUnitTests
CommonTree t = (CommonTree)wiz.Create( "(nil A B C)" );
string found = t.ToStringTree();
string expecting = "A B C";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
public void TestInvalidListTree() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "A B C" );
-            assertTrue( t == null );
+            Assert.IsTrue( t == null );
}

[TestMethod]
@@ -104,7 +104,7 @@ namespace AntlrUnitTests
CommonTree t = (CommonTree)wiz.Create( "(A (B C) (B D) E)" );
string found = t.ToStringTree();
string expecting = "(A (B C) (B D) E)";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -114,7 +114,7 @@ namespace AntlrUnitTests
var m = wiz.Index( t );
string found = m.ToElementString();
string expecting = "{10=[ID]}";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -124,7 +124,7 @@ namespace AntlrUnitTests
var m = wiz.Index( t );
string found = sortMapToString( m );
string expecting = "{5=[A], 6=[B], 7=[C], 8=[D]}";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -134,7 +134,7 @@ namespace AntlrUnitTests
var m = wiz.Index( t );
string found = sortMapToString( m );
string expecting = "{5=[A, A], 6=[B, B, B], 7=[C], 8=[D, D]}";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

class testNoRepeatsVisit_TreeWizard_Visitor : TreeWizard.Visitor
@@ -160,7 +160,7 @@ namespace AntlrUnitTests
wiz.Visit( t, wiz.GetTokenType( "B" ), new testNoRepeatsVisit_TreeWizard_Visitor( elements ) );
string found = elements.ToElementString();
string expecting = "[B]";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -172,7 +172,7 @@ namespace AntlrUnitTests
new testNoRepeatsVisit_TreeWizard_Visitor( elements ) );
string found = elements.ToElementString();
string expecting = "[C]";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -184,7 +184,7 @@ namespace AntlrUnitTests
new testNoRepeatsVisit_TreeWizard_Visitor( elements ) );
string found = elements.ToElementString();
string expecting = "[B, B, B]";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -196,7 +196,7 @@ namespace AntlrUnitTests
new testNoRepeatsVisit_TreeWizard_Visitor( elements ) );
string found = elements.ToElementString();
string expecting = "[A, A]";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

class testRepeatsVisitWithContext_TreeWizard_Visitor : TreeWizard.Visitor
@@ -229,7 +229,7 @@ namespace AntlrUnitTests
new testRepeatsVisitWithContext_TreeWizard_Visitor( elements ) );
string found = elements.ToElementString();
string expecting = "[B@A[0], B@A[1], B@A[2]]";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -241,7 +241,7 @@ namespace AntlrUnitTests
new testRepeatsVisitWithContext_TreeWizard_Visitor( elements ) );
string found = elements.ToElementString();
string expecting = "[A@nil[0], A@A[1]]";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -253,7 +253,7 @@ namespace AntlrUnitTests
new testNoRepeatsVisit_TreeWizard_Visitor( elements ) );
string found = elements.ToElementString();
string expecting = "[A]"; // shouldn't match overall root, just (A B)
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -265,7 +265,7 @@ namespace AntlrUnitTests
new testRepeatsVisitWithContext_TreeWizard_Visitor( elements ) );
string found = elements.ToElementString();
string expecting = "[A@A[2], A@D[0]]"; // shouldn't match overall root, just (A B)
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

class testVisitPatternMultipleWithLabels_TreeWizard_Visitor : TreeWizard.IContextVisitor
@@ -295,7 +295,7 @@ namespace AntlrUnitTests
new testVisitPatternMultipleWithLabels_TreeWizard_Visitor( elements ) );
string found = elements.ToElementString();
string expecting = "[foo@A[2]foo&bar, big@D[0]big&dog]";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

[TestMethod]
@@ -303,7 +303,7 @@ namespace AntlrUnitTests
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B C)" );
bool valid = wiz.Parse( t, "(A B C)" );
-            assertTrue( valid );
+            Assert.IsTrue( valid );
}

[TestMethod]
@@ -311,7 +311,7 @@ namespace AntlrUnitTests
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "A" );
bool valid = wiz.Parse( t, "A" );
-            assertTrue( valid );
+            Assert.IsTrue( valid );
}

[TestMethod]
@@ -319,7 +319,7 @@ namespace AntlrUnitTests
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(nil A B C)" );
bool valid = wiz.Parse( t, "(nil A B C)" );
-            assertTrue( valid );
+            Assert.IsTrue( valid );
}

[TestMethod]
@@ -327,7 +327,7 @@ namespace AntlrUnitTests
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B C)" );
bool valid = wiz.Parse( t, "(A . .)" );
-            assertTrue( valid );
+            Assert.IsTrue( valid );
}

[TestMethod]
@@ -337,7 +337,7 @@ namespace AntlrUnitTests
// C pattern has no text arg so despite [bar] in t, no need
// to match text--check structure only.
bool valid = wiz.Parse( t, "(A B[foo] C)" );
-            assertTrue( valid );
+            Assert.IsTrue( valid );
}

[TestMethod]
@@ -356,7 +356,7 @@ namespace AntlrUnitTests
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B C)" );
bool valid = wiz.Parse( t, "(A[foo] B C)" );
-            assertTrue( !valid ); // fails
+            Assert.IsTrue( !valid ); // fails
}

[TestMethod]
@@ -365,10 +365,10 @@ namespace AntlrUnitTests
CommonTree t = (CommonTree)wiz.Create( "(A B C)" );
IDictionary<string, object> labels = new Dictionary<string, object>();
bool valid = wiz.Parse( t, "(%a:A %b:B %c:C)", labels );
-            assertTrue( valid );
-            assertEquals( "A", labels.get( "a" ).ToString() );
-            assertEquals( "B", labels.get( "b" ).ToString() );
-            assertEquals( "C", labels.get( "c" ).ToString() );
+            Assert.IsTrue( valid );
+            Assert.AreEqual( "A", labels.get( "a" ).ToString() );
+            Assert.AreEqual( "B", labels.get( "b" ).ToString() );
+            Assert.AreEqual( "C", labels.get( "c" ).ToString() );
}

[TestMethod]
@@ -377,9 +377,9 @@ namespace AntlrUnitTests
CommonTree t = (CommonTree)wiz.Create( "(A B C)" );
var labels = new Dictionary<string, object>();
bool valid = wiz.Parse( t, "(A %b:. %c:.)", labels );
-            assertTrue( valid );
-            assertEquals( "B", labels.get( "b" ).ToString() );
-            assertEquals( "C", labels.get( "c" ).ToString() );
+            Assert.IsTrue( valid );
+            Assert.AreEqual( "B", labels.get( "b" ).ToString() );
+            Assert.AreEqual( "C", labels.get( "c" ).ToString() );
}

[TestMethod]
@@ -388,10 +388,10 @@ namespace AntlrUnitTests
CommonTree t = (CommonTree)wiz.Create( "(A B[foo] C)" );
var labels = new Dictionary<string, object>();
bool valid = wiz.Parse( t, "(%a:A %b:B[foo] %c:C)", labels );
-            assertTrue( valid );
-            assertEquals( "A", labels.get( "a" ).ToString() );
-            assertEquals( "foo", labels.get( "b" ).ToString() );
-            assertEquals( "C", labels.get( "c" ).ToString() );
+            Assert.IsTrue( valid );
+            Assert.AreEqual( "A", labels.get( "a" ).ToString() );
+            Assert.AreEqual( "foo", labels.get( "b" ).ToString() );
+            Assert.AreEqual( "C", labels.get( "c" ).ToString() );
}

[TestMethod]
@@ -400,12 +400,12 @@ namespace AntlrUnitTests
CommonTree t = (CommonTree)wiz.Create( "(A (B C) (D E))" );
var labels = new Dictionary<string, object>();
bool valid = wiz.Parse( t, "(%a:A (%b:B %c:C) (%d:D %e:E) )", labels );
-            assertTrue( valid );
-            assertEquals( "A", labels.get( "a" ).ToString() );
-            assertEquals( "B", labels.get( "b" ).ToString() );
-            assertEquals( "C", labels.get( "c" ).ToString() );
-            assertEquals( "D", labels.get( "d" ).ToString() );
-            assertEquals( "E", labels.get( "e" ).ToString() );
+            Assert.IsTrue( valid );
+            Assert.AreEqual( "A", labels.get( "a" ).ToString() );
+            Assert.AreEqual( "B", labels.get( "b" ).ToString() );
+            Assert.AreEqual( "C", labels.get( "c" ).ToString() );
+            Assert.AreEqual( "D", labels.get( "d" ).ToString() );
+            Assert.AreEqual( "E", labels.get( "e" ).ToString() );
}

[TestMethod]
@@ -414,7 +414,7 @@ namespace AntlrUnitTests
CommonTree t1 = (CommonTree)wiz.Create( "(A B C)" );
CommonTree t2 = (CommonTree)wiz.Create( "(A B C)" );
bool same = TreeWizard.Equals( t1, t2, adaptor );
-            assertTrue( same );
+            Assert.IsTrue( same );
}

[TestMethod]
@@ -423,7 +423,7 @@ namespace AntlrUnitTests
CommonTree t1 = (CommonTree)wiz.Create( "(A B[foo] C)" );
CommonTree t2 = (CommonTree)wiz.Create( "(A B[foo] C)" );
bool same = TreeWizard.Equals( t1, t2, adaptor );
-            assertTrue( same );
+            Assert.IsTrue( same );
}

[TestMethod]
@@ -432,7 +432,7 @@ namespace AntlrUnitTests
CommonTree t1 = (CommonTree)wiz.Create( "(A B[foo] C)" );
CommonTree t2 = (CommonTree)wiz.Create( "(A B C)" );
bool same = TreeWizard.Equals( t1, t2, adaptor );
-            assertTrue( !same );
+            Assert.IsTrue( !same );
}

[TestMethod]
@@ -443,7 +443,7 @@ namespace AntlrUnitTests
IList elements = subtrees;
string found = elements.ToElementString();
string expecting = "[foo, big]";
-            assertEquals( expecting, found );
+            Assert.AreEqual( expecting, found );
}

}
diff --git a/Antlr3.Test/TestTrees.cs b/Antlr3.Test/TestTrees.cs
index d5cde17..b859c1b 100644
--- a/Antlr3.Test/TestTrees.cs
+++ b/Antlr3.Test/TestTrees.cs
@@ -72,8 +72,8 @@ namespace AntlrUnitTests
[TestMethod]
public void TestSingleNode() /*throws Exception*/ {
CommonTree t = new CommonTree( new CommonToken( 101 ) );
-            assertNull( t.Parent );
-            assertEquals( -1, t.ChildIndex );
+            Assert.IsNull( t.Parent );
+            Assert.AreEqual( -1, t.ChildIndex );
}

[TestMethod]
@@ -83,10 +83,10 @@ namespace AntlrUnitTests
CommonTree u = new V( new CommonToken( 102, "102" ) );
adaptor.AddChild( root_0, t );
adaptor.AddChild( root_0, u );
-            assertNull( root_0.Parent );
-            assertEquals( -1, root_0.ChildIndex );
-            assertEquals( 0, t.ChildIndex );
-            assertEquals( 1, u.ChildIndex );
+            Assert.IsNull( root_0.Parent );
+            Assert.AreEqual( -1, root_0.ChildIndex );
+            Assert.AreEqual( 0, t.ChildIndex );
+            Assert.AreEqual( 1, u.ChildIndex );
}

[TestMethod]
@@ -97,8 +97,8 @@ namespace AntlrUnitTests
r0.GetChild( 0 ).AddChild( new CommonTree( new CommonToken( 103 ) ) );
r0.AddChild( new CommonTree( new CommonToken( 104 ) ) );

-            assertNull( r0.Parent );
-            assertEquals( -1, r0.ChildIndex );
+            Assert.IsNull( r0.Parent );
+            Assert.AreEqual( -1, r0.ChildIndex );
}

[TestMethod]
@@ -110,14 +110,14 @@ namespace AntlrUnitTests
r0.AddChild( c1 = new CommonTree( new CommonToken( 102 ) ) );
r0.AddChild( c2 = new CommonTree( new CommonToken( 103 ) ) );

-            assertNull( r0.Parent );
-            assertEquals( -1, r0.ChildIndex );
-            assertEquals( r0, c0.Parent );
-            assertEquals( 0, c0.ChildIndex );
-            assertEquals( r0, c1.Parent );
-            assertEquals( 1, c1.ChildIndex );
-            assertEquals( r0, c2.Parent );
-            assertEquals( 2, c2.ChildIndex );
+            Assert.IsNull( r0.Parent );
+            Assert.AreEqual( -1, r0.ChildIndex );
+            Assert.AreEqual( r0, c0.Parent );
+            Assert.AreEqual( 0, c0.ChildIndex );
+            Assert.AreEqual( r0, c1.Parent );
+            Assert.AreEqual( 1, c1.ChildIndex );
+            Assert.AreEqual( r0, c2.Parent );
+            Assert.AreEqual( 2, c2.ChildIndex );
}

[TestMethod]
@@ -135,15 +135,15 @@ namespace AntlrUnitTests

root.AddChild( r0 );

-            assertNull( root.Parent );
-            assertEquals( -1, root.ChildIndex );
+            Assert.IsNull( root.Parent );
+            Assert.AreEqual( -1, root.ChildIndex );
// check children of root all point at root
-            assertEquals( root, c0.Parent );
-            assertEquals( 0, c0.ChildIndex );
-            assertEquals( root, c0.Parent );
-            assertEquals( 1, c1.ChildIndex );
-            assertEquals( root, c0.Parent );
-            assertEquals( 2, c2.ChildIndex );
+            Assert.AreEqual( root, c0.Parent );
+            Assert.AreEqual( 0, c0.ChildIndex );
+            Assert.AreEqual( root, c0.Parent );
+            Assert.AreEqual( 1, c1.ChildIndex );
+            Assert.AreEqual( root, c0.Parent );
+            Assert.AreEqual( 2, c2.ChildIndex );
}

[TestMethod]
@@ -162,15 +162,15 @@ namespace AntlrUnitTests

root.AddChild( r0 );

-            assertNull( root.Parent );
-            assertEquals( -1, root.ChildIndex );
+            Assert.IsNull( root.Parent );
+            Assert.AreEqual( -1, root.ChildIndex );
// check children of root all point at root
-            assertEquals( root, c0.Parent );
-            assertEquals( 1, c0.ChildIndex );
-            assertEquals( root, c0.Parent );
-            assertEquals( 2, c1.ChildIndex );
-            assertEquals( root, c0.Parent );
-            assertEquals( 3, c2.ChildIndex );
+            Assert.AreEqual( root, c0.Parent );
+            Assert.AreEqual( 1, c0.ChildIndex );
+            Assert.AreEqual( root, c0.Parent );
+            Assert.AreEqual( 2, c1.ChildIndex );
+            Assert.AreEqual( root, c0.Parent );
+            Assert.AreEqual( 3, c2.ChildIndex );
}

[TestMethod]
@@ -188,8 +188,8 @@ namespace AntlrUnitTests

CommonTree dup = (CommonTree)( new CommonTreeAdaptor() ).DupTree( r0 );

-            assertNull( dup.Parent );
-            assertEquals( -1, dup.ChildIndex );
+            Assert.IsNull( dup.Parent );
+            Assert.AreEqual( -1, dup.ChildIndex );
dup.SanityCheckParentAndChildIndexes();
}

@@ -282,7 +282,7 @@ namespace AntlrUnitTests
{
error = true;
}
-            assertTrue( error );
+            Assert.IsTrue( error );
}

[TestMethod]
@@ -295,7 +295,7 @@ namespace AntlrUnitTests
CommonTree newChild = new CommonTree( new CommonToken( 99, "c" ) );
t.ReplaceChildren( 0, 0, newChild );
string expecting = "(a c)";
-            assertEquals( expecting, t.ToStringTree() );
+            Assert.AreEqual( expecting, t.ToStringTree() );
t.SanityCheckParentAndChildIndexes();
}

@@ -309,7 +309,7 @@ namespace AntlrUnitTests
CommonTree newChild = new CommonTree( new CommonToken( 99, "x" ) );
t.ReplaceChildren( 1, 1, newChild );
string expecting = "(a b x d)";
-            assertEquals( expecting, t.ToStringTree() );
+            Assert.AreEqual( expecting, t.ToStringTree() );
t.SanityCheckParentAndChildIndexes();
}

@@ -323,7 +323,7 @@ namespace AntlrUnitTests
CommonTree newChild = new CommonTree( new CommonToken( 99, "x" ) );
t.ReplaceChildren( 0, 0, newChild );
string expecting = "(a x c d)";
-            assertEquals( expecting, t.ToStringTree() );
+            Assert.AreEqual( expecting, t.ToStringTree() );
t.SanityCheckParentAndChildIndexes();
}

@@ -337,7 +337,7 @@ namespace AntlrUnitTests
CommonTree newChild = new CommonTree( new CommonToken( 99, "x" ) );
t.ReplaceChildren( 2, 2, newChild );
string expecting = "(a b c x)";
-            assertEquals( expecting, t.ToStringTree() );
+            Assert.AreEqual( expecting, t.ToStringTree() );
t.SanityCheckParentAndChildIndexes();
}

@@ -354,7 +354,7 @@ namespace AntlrUnitTests

t.ReplaceChildren( 0, 0, newChildren );
string expecting = "(a x y c d)";
-            assertEquals( expecting, t.ToStringTree() );
+            Assert.AreEqual( expecting, t.ToStringTree() );
t.SanityCheckParentAndChildIndexes();
}

@@ -371,7 +371,7 @@ namespace AntlrUnitTests

t.ReplaceChildren( 2, 2, newChildren );
string expecting = "(a b c x y)";
-            assertEquals( expecting, t.ToStringTree() );
+            Assert.AreEqual( expecting, t.ToStringTree() );
t.SanityCheckParentAndChildIndexes();
}

@@ -388,7 +388,7 @@ namespace AntlrUnitTests

t.ReplaceChildren( 1, 1, newChildren );
string expecting = "(a b x y d)";
-            assertEquals( expecting, t.ToStringTree() );
+            Assert.AreEqual( expecting, t.ToStringTree() );
t.SanityCheckParentAndChildIndexes();
}

@@ -403,7 +403,7 @@ namespace AntlrUnitTests

t.ReplaceChildren( 0, 1, newChild );
string expecting = "(a x d)";
-            assertEquals( expecting, t.ToStringTree() );
+            Assert.AreEqual( expecting, t.ToStringTree() );
t.SanityCheckParentAndChildIndexes();
}

@@ -418,7 +418,7 @@ namespace AntlrUnitTests

t.ReplaceChildren( 1, 2, newChild );
string expecting = "(a b x)";
-            assertEquals( expecting, t.ToStringTree() );
+            Assert.AreEqual( expecting, t.ToStringTree() );
t.SanityCheckParentAndChildIndexes();
}

@@ -433,7 +433,7 @@ namespace AntlrUnitTests

t.ReplaceChildren( 0, 2, newChild );
string expecting = "(a x)";
-            assertEquals( expecting, t.ToStringTree() );
+            Assert.AreEqual( expecting, t.ToStringTree() );
t.SanityCheckParentAndChildIndexes();
}

@@ -450,7 +450,7 @@ namespace AntlrUnitTests

t.ReplaceChildren( 0, 2, newChildren );
string expecting = "(a x y)";
-            assertEquals( expecting, t.ToStringTree() );
+            Assert.AreEqual( expecting, t.ToStringTree() );
t.SanityCheckParentAndChildIndexes();
}
}
diff --git a/Antlr3.vsmdi b/Antlr3.vsmdi
index b384250..4771b88 100644
--- a/Antlr3.vsmdi
+++ b/Antlr3.vsmdi
@@ -13,7 +13,7 @@
<TestLink id="6d13f8df-d97d-c0ff-9b3d-548742c283ff" name="TestDefaultValueTemplateWithArg" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Tree parsing" id="06545df4-3577-43fa-8733-dd19464eea3a" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Tree parsing" id="06545df4-3577-43fa-8733-dd19464eea3a" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="55c346ef-612d-8413-657d-693660fb2a3c" name="TestSimpleTree" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0fc07c70-5c2a-245a-d31f-cf8592f0e292" name="TestWildcardLookahead" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -31,7 +31,7 @@
<TestLink id="b73e7175-f13b-534b-06b4-26336439f7c5" name="TestCyclicDFALookahead" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Attributes" id="07ad9dce-6f06-4a3e-9993-335618220390" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Attributes" id="07ad9dce-6f06-4a3e-9993-335618220390" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="ce065251-8e59-a3b9-c090-9af7e103e602" name="TestIllegalAssignRuleRefAttr" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ee262b7a-62a2-b1cc-8f20-17b842762e9e" name="TestRuleLabelWithoutOutputOption" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -80,6 +80,7 @@
<TestLink id="6ff630fe-471b-1536-7c65-c65a8c14521b" name="TestComplicatedArgParsing" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ff7cdb50-c091-ed77-5631-9fb1b049524c" name="TestGlobalAttributeScopeInit" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ca04a830-2849-8c36-ae47-7945a43d789d" name="TestImplicitRuleLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0f1a1e1e-8dda-a034-784a-af3e2e13d0b3" name="TestWildcardCharListLabelInLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f1d6d129-9542-8ac7-fca4-a49614328fee" name="TestRefToTextAttributeForCurrentRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="92d6c8d9-19fb-e1d2-0e9a-1a2c4a0d160c" name="TestReuseExistingLabelWithImplicitRuleLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0e155c62-c572-76b5-0abb-b7454002dc1e" name="TestRuleAndTokenLabelTypeMismatch" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -94,7 +95,6 @@
<TestLink id="94671953-950e-6057-d6ca-42d4568f18e5" name="TestIndexedGlobalScope" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d801861a-966c-7b55-708a-da4421e15c8f" name="TestLabelOnRuleRefInLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="687b7e58-1308-3df2-a761-5c496de428c2" name="TestUnqualifiedRuleScopeAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="e458144a-1cd4-b609-39cf-bc71dc63c22b" name="TestAssignToTreeNodeAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="30632428-f8ed-ff94-b6ee-be4907458afd" name="TestTreeRuleStopAttributeIsInvalid" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="fb75906b-6eae-4345-f005-c7f9160bf8bb" name="TestTypeOfGuardedAttributeRefIsCorrect" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5984ea78-5258-4396-45cf-9de6a0438c90" name="TestTokenLabelTreeProperty" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -108,7 +108,7 @@
<TestLink id="f23f8074-19f4-2ce9-135b-e2dbde060c5a" name="TestIsolatedDynamicRuleScopeRef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b1b17d2b-4cec-0cba-bb5c-4ac119f64f32" name="TestReturnValues" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0fdd88c8-32f0-f87d-c646-98fc24fe2e06" name="TestArguments" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="0f1a1e1e-8dda-a034-784a-af3e2e13d0b3" name="TestWildcardCharListLabelInLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="2aa3876d-2889-5c32-cb02-ebc25ab16b25" name="TestMissingArgsOnTokenInLexerRuleOfCombined" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f196fc11-403c-f100-630c-199c70c8c0f8" name="TestSharedGlobalScope" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6467a4bb-3343-6d53-2348-61e817b14504" name="TestDynamicRuleScopeRefInSubrule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="09561d11-434c-0454-26f5-8877f37309ab" name="TestDoNotTranslateScopeAttributeCompare" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -137,7 +137,7 @@
<TestLink id="99a29765-198c-43b6-fcff-5af85b1fe370" name="TestDynamicScopeRefOkEvenThoughRuleRefExists" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="79684b5b-11b6-3f30-3386-b4b05817bef2" name="TestRefToTemplateAttributeForCurrentRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7a58be1d-b12a-7e8f-8e6f-3759ede37f4f" name="TestReuseExistingListLabelWithImplicitRuleLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="2aa3876d-2889-5c32-cb02-ebc25ab16b25" name="TestMissingArgsOnTokenInLexerRuleOfCombined" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e458144a-1cd4-b609-39cf-bc71dc63c22b" name="TestAssignToTreeNodeAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d73b0cee-4949-b36f-e9ea-204c49cb2bdb" name="TestBracketArgParsing" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="69adff13-fafc-28b5-45b7-51da4a2e6671" name="TestCharLabelInLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e262e6ec-d9d0-65db-e3e4-e346f822dcb4" name="TestNonDynamicAttributeOutsideRule2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -155,7 +155,7 @@
<TestLink id="d7134ea0-b130-07c7-dbeb-c85de83a9046" name="TestRuleLabelFromMultipleAlts" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Semantic predicate evaluation" id="07d341dc-3861-4c94-9185-2e515634243d" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Semantic predicate evaluation" id="07d341dc-3861-4c94-9185-2e515634243d" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="b587d1bc-09b4-9f0c-717f-728bbf974613" name="TestLexerPredsInCyclicDFA2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2a146c5f-f7bb-97ab-62e5-b7540bc16024" name="TestLexerPredInExitBranch3" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -178,7 +178,7 @@
<TestLink id="8e297d7c-0ac7-d3c5-245a-b0a4ab2157ff" name="TestPredicatesOnEOTTarget" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="NFA construction" id="080e174f-fb4c-436a-b43b-b25c77a99b6e" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="NFA construction" id="080e174f-fb4c-436a-b43b-b25c77a99b6e" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="34f73c15-4735-2347-c5d9-cf1640242481" name="TestSetsInCombinedGrammarSentToLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="fecbef7f-c983-da9b-d236-597a74a0780b" name="TestNakedAoptional" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -265,7 +265,7 @@
<TestLink id="03e212d1-2630-2b0a-03be-9115cbbe6c91" name="TestIndirectProp" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Interval set" id="1b23ecf0-f2dd-483e-a626-2cc253d102a2" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Interval set" id="1b23ecf0-f2dd-483e-a626-2cc253d102a2" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="84ac057a-c148-ba85-b555-2b7f926ffb9d" name="TestComplement3" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="612fef56-57cd-7e3a-17ce-e3adccad0a8e" name="TestNotSetEdgeElement" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -287,15 +287,15 @@
<TestLink id="17b95254-fa03-5537-7545-66b081675eb2" name="TestSubtractOfRangeSpanningMultipleRanges" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d4052d0c-88cc-4ae9-4007-6659d94752dc" name="TestNotSetFragmentedVocabulary" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="428928b6-3b85-6632-066b-a82edfe8ddcc" name="TestComplement2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="3a357f71-820d-f52a-12ca-dedfe782472d" name="TestSingleElementMinusDisjointSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a7e11c3a-b9be-0987-f4a2-b745e7f0ae5e" name="TestNotEqualSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7e59816f-6683-cbd7-c002-1b50dc019cc4" name="TestNotRIntersectionNotT" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3a357f71-820d-f52a-12ca-dedfe782472d" name="TestSingleElementMinusDisjointSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e0608145-ea2b-ba2f-e6ab-c04d498cb9e1" name="TestMergeWithDoubleOverlap" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d907a6bc-b977-f2f2-d3a0-5bd8a813540f" name="TestSubtractOfOverlappingRangeFromLeft" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1259d149-baeb-31a1-8878-bc1cd5d3e143" name="TestMergeOfRangesAndSingleValuesReverse" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6ade85c7-0650-f85d-1298-bbda9859090f" name="TestNotSingleElement" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f685c607-f43d-c45c-186c-f00aa5291023" name="TestRangeAndIsolatedElement" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b049948a-e1d8-e762-c6a8-5a36d2f15740" name="TestSimpleEquals" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="a7e11c3a-b9be-0987-f4a2-b745e7f0ae5e" name="TestNotEqualSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8c4b83c3-e81d-99a9-55a0-92442277e2c4" name="TestSubtractOfOverlappingRangeFromRight" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a1b8a772-1d8a-0766-fd41-f5c3c18fafc3" name="TestMembership" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f233a225-7ee9-f08a-8ab3-a53b04adb172" name="TestMixedRangesAndElements" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -303,7 +303,7 @@
<TestLink id="bad5f4f4-42d5-78e0-8c75-60d1ec57766b" name="TestEmptyIntersection" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Java code generation" id="1d2d6741-19a6-4148-a0ab-04631362f521" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Java code generation" id="1d2d6741-19a6-4148-a0ab-04631362f521" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="709e302c-4ca7-0411-13ac-61b25bda2bbf" name="TestLabeledSetsInLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="fc65f32a-f622-72ad-f549-8cf17f0a56cf" name="TestDoubleQuoteEscape" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -323,7 +323,7 @@
<TestLink id="abdf4531-2dc7-f5a5-8ca9-0e32908b1ce7" name="TestParallelMap" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Templates" id="24fbf8dd-7c87-4dac-ab4d-7fbcb52b5177" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Templates" id="24fbf8dd-7c87-4dac-ab4d-7fbcb52b5177" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="c60bf111-c68e-a2f1-9208-f0ae4e3e80dd" name="TestTemplateConstructorNoArgs" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="4d529b0e-5db6-2938-e99b-37c648da4008" name="TestStringConstructor" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -338,25 +338,63 @@
</TestList>
<TestList name="Regions" id="28b56038-623a-47a8-adcb-f5e23303e4a0" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
-      <TestLink id="876d7948-6933-f9b3-50b4-64fcaa2a90c4" name="TestDefineRegionInSubgroupThatRefsSuper" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="ebe10f2b-e552-998c-a739-7c9cd0bf88ac" name="TestRegionOverrideRefSuperRegion" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="06ae96f5-1358-bcbc-8cad-67123751d37d" name="TestRegion" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="25c79e77-a9dc-f77a-c3de-c85280cc9f3a" name="TestRegionOverrideRefSuperRegion3Levels" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="fb99ea63-735d-3db2-e0dd-f0bde0dbc102" name="TestIndentBeforeRegionIsIgnored" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="0b09b3e4-fab0-d6b3-22ba-f73ce6919550" name="TestRegionOverrideStripsNewlines" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="3b975616-c6e9-f9a3-5992-22d3a0c18e20" name="TestEmbeddedRegion" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4a2ef1f8-0766-2359-a702-584caa73db20" name="TestEmbeddedRegionOnOneLine" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="62229bd7-8afc-5de8-aef1-83e219e7f10d" name="TestDefineRegionInSubgroup2" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="b3719e0d-6078-741b-09e2-1747ac351a3f" name="TestCantDefineEmbeddedRegionAgainInTemplate" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a287f385-a0e1-a876-5742-1a0d5d8942c6" name="TestSuperRegionRefMissingOk" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5a579f7d-489b-39b2-ae73-8d0002da22d3" name="TestUnknownRegionDefError" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="162a1b20-76d3-f55d-5e9d-8674677e8fc3" name="TestRegionOverrideRefSuperImplicitRegion" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="62229bd7-8afc-5de8-aef1-83e219e7f10d" name="TestDefineRegionInSubgroup2" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="db36848d-942b-93a5-f9d3-6d04413df643" name="TestDefineRegionInSameGroup" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ebe10f2b-e552-998c-a739-7c9cd0bf88ac" name="TestRegionOverrideRefSuperRegion" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="67214068-43a8-c38e-ba44-18f6f60c3ce9" name="TestCantDefineEmbeddedRegionAgain" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="a287f385-a0e1-a876-5742-1a0d5d8942c6" name="TestSuperRegionRefMissingOk" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="384dc7ba-9280-cbf5-ac09-c71cfa196140" name="TestAnonymousTemplateInRegion" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="698ea97a-7d8d-bc8d-ee4c-ea7cb5ed4d94" name="TestEmbeddedRegionTagsOnSeparateLines" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="06ae96f5-1358-bcbc-8cad-67123751d37d" name="TestRegion" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0b09b3e4-fab0-d6b3-22ba-f73ce6919550" name="TestRegionOverrideStripsNewlines" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="db36848d-942b-93a5-f9d3-6d04413df643" name="TestDefineRegionInSameGroup" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3b975616-c6e9-f9a3-5992-22d3a0c18e20" name="TestEmbeddedRegion" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1c9664f9-ae08-933c-a574-13a6700cadeb" name="TestMissingRegionName" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="876d7948-6933-f9b3-50b4-64fcaa2a90c4" name="TestDefineRegionInSubgroupThatRefsSuper" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="9ee02534-0ce6-cb83-de5d-91557fd3473c" name="TestDefineRegionInSubgroup" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="25c79e77-a9dc-f77a-c3de-c85280cc9f3a" name="TestRegionOverrideRefSuperRegion3Levels" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+    </TestLinks>
+  </TestList>
+  <TestList name="Composite grammars (debug)" id="2ada6d1e-6244-497e-8ad5-c2bde5f0e853" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
+    <TestLinks>
+      <TestLink id="52fc8f68-72da-ff77-4aad-d3c2e21694ce" name="TestDelegatorInvokesDelegateRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="273f731f-ce16-96fe-9d3c-5982f4ad0154" name="TestImportedTokenVocabWorksInRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="bfeea3f8-de25-c192-852d-170da8bc7654" name="TestSameNameTwoStrings" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="af5fa59f-0b67-15b9-3b36-793e71b32203" name="TestSyntaxErrorsInImportsNotThrownOut2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="134e4aeb-2a0f-d2be-a4b3-eafb18c16d84" name="TestDelegatesSeeSameTokenType2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="2d57b91c-6a2c-490e-f685-d49ed23ad969" name="TestRulesVisibleThroughMultilevelImport" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ea659a94-2550-7f6c-ca15-dcf5c9dc911e" name="TestCombinedImportsCombined" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0e89816e-e1be-3478-4cd9-3de8991f672d" name="TestKeywordVSIDGivesNoWarning" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3bf904e6-453f-8c56-8e7d-8b1a7e2f2cdc" name="TestSyntaxErrorsInImportsNotThrownOut" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="8d7caad9-b54a-5f34-ef36-6b319b3ca6b6" name="TestLexerDelegatorRuleOverridesDelegate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="329b7d95-af93-adfa-8c8e-2acc67a774e0" name="TestWildcardStillWorks" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="772a5a0f-9029-9542-4c8e-1554c794502c" name="TestLexerDelegatorInvokesDelegateRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="de813bcc-a795-05a9-a606-7cbf3f446adf" name="TestDelegatorInvokesFirstVersionOfDelegateRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="45980559-a8c7-6ad1-f1aa-b8b45c9e203f" name="TestDelegatorRuleOverridesLookaheadInDelegate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="36266704-895d-37f0-edd5-54b61f23ff4e" name="TestHeadersPropogatedCorrectlyToImportedGrammars" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3e7ac0ac-0e92-b157-b6aa-985597815d05" name="TestSyntacticPredicateRulesAreNotInherited" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="9575a24d-3c27-c7e5-7910-a3dee9593a79" name="TestImportedTokenVocabIgnoredWithWarning" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="bdb13678-8c93-7b02-6d39-ba3cad30fca9" name="TestLexerDelegatorRuleOverridesDelegateLeavingNoRules" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="35e05920-a60c-bb56-f00e-1a5356527447" name="TestNestedComposite" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="97ebf76d-9b4b-cea6-a5f4-1059fcb86f05" name="TestInvalidImportMechanism" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="2d312d6d-1d4e-77ed-a1b0-cce694038a88" name="TestDelegatorAccessesDelegateMembers" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="b413f450-0b82-4a72-2ac8-4d2163e1ff7f" name="Test3LevelImport" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="8ff4c0ac-ed55-b423-5d91-ca90a327a300" name="TestSameStringTwoNames" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="5064fcac-d8c8-ad3d-4425-8ba12b77597d" name="TestDelegatorRuleOverridesDelegate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="96697ada-7923-bfc4-a478-d665c7eb4fdd" name="TestWarningForUndefinedToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="26de823a-a520-2430-98aa-cb1c16c495d0" name="TestDelegatorInvokesDelegateRuleWithReturnStruct" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e2f3d1a4-a086-1dfb-d036-2f9cea16d263" name="TestDelegatesSeeSameTokenType" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a9b8670c-2318-2091-74df-74d35e7b27bd" name="TestDelegatorInvokesDelegateRuleWithArgs" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="9eb5880e-9fab-a96f-295e-f67a5d9134ea" name="TestBigTreeOfImports" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
<TestList name="Groups" id="2b84a5ba-a6b2-44f6-842f-39aeaec2d3f0" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
+      <TestLink id="b60c228a-f6cf-8fb5-c3a9-f06beabf8f36" name="TestAbsoluteTemplateRef" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b193eb9c-f8f3-1298-bf2a-04b24dcfa838" name="TestUnloadingSimpleGroup" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="3fe112f9-0438-abba-e231-8d76ccf42e74" name="TestDefaultArgumentSeesVarFromDynamicScoping" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="dbe69f7f-857d-583e-8140-42fdf183e98a" name="TestUnknownNamedArg" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -383,7 +421,7 @@
<TestLink id="0489fc69-3aa7-b476-554e-8e03ec1f5cba" name="TestMissingNamedArg" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1bd39f71-8a63-aec6-f180-b96f0c783a3a" name="TestGroupFileInSubDir" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5a7df036-0519-c2c9-49f0-661f66c9fea1" name="TestSimpleDefaultArg" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="b60c228a-f6cf-8fb5-c3a9-f06beabf8f36" name="TestAbsoluteTemplateRef" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e571632d-ab13-0147-5480-11c082c84179" name="TestSimpleGroupFromString" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="99838de3-d6ce-91a5-d939-099c3fb1ccaf" name="TestSubtemplateAsDefaultArgSeesOtherArgs" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e735caa4-da14-e5d0-5171-208913050c27" name="TestGroupFileInDir" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2677217d-adc3-c3b5-0a8e-2574f5dfcdf2" name="TestNamedArgsNotAllowInIndirectInclude" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -396,7 +434,7 @@
<TestLink id="96ed82d0-17b7-094e-aa88-fe9301826a59" name="TestDefaultArgumentAsTemplate" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Rewrite templates" id="2dbc20ec-9234-470e-a9b4-82226d3db427" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Rewrite templates" id="2dbc20ec-9234-470e-a9b4-82226d3db427" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="623fe805-fbf3-d4f6-9fea-d4d52aeb8aa0" name="TestReturnValueWithTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e6942f33-23dd-e498-ea66-dfbe16277aa3" name="TestRewriteRuleAndRewriteModeRefRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -419,6 +457,7 @@
</TestList>
<TestList name="Core Basics" id="2e1da8fe-83a7-4296-bc23-58eb3520b0be" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
+      <TestLink id="2d00e12e-f716-c605-81db-da3388fc90b9" name="TestNullIndirectProp" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7b0fd268-314e-5be0-7eff-d92eaebb90c6" name="TestIncludeWithNestedArgs" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="520977ca-8a29-706a-3798-7d2863ed0097" name="TestMapNullValue" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="094b0199-3afa-8be5-5fe8-e601904462ef" name="TestParensInConditonal" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -427,17 +466,17 @@
<TestLink id="d6d52174-641b-8498-089d-e2951048c262" name="TestFalseCond2" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="30e0ab98-0f8b-d513-664d-0a1fc62c206e" name="TestElseIf3" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="9f389b5f-db6c-8658-c4f4-f43dc083febf" name="TestAnd" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="142cf9a1-ce41-ca5e-da0c-335dd3892b39" name="TestIndirectMap" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="9a01a61f-33aa-5873-612f-aa48eea09684" name="TestEarlyEvalIndent" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="dc506636-27b5-9520-f244-4ede4c831b05" name="TestParallelMap" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c0681276-4adc-ec27-b3ff-e34124f02ca4" name="TestProp" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="12b0b7ac-e7af-4283-db3d-284c0fb752db" name="TestTrueCondWithElse" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7f212bba-c9ae-5d79-34cd-32d657e66d83" name="TestFalseCond" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ab80f441-5fcf-1567-45aa-ee02ae0b5c26" name="TestAttr" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="0e53c936-f082-d17e-6ed4-8b51c69eaa3d" name="TestSeparator" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="f1c473ae-9f41-7774-1d33-4167a44a00af" name="Playing" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="89cc4c2e-d4f2-242a-8b7b-33258c3357d6" name="TestIncludeWithArg" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="dbfbc5b8-c63d-84f4-7b7f-c07ade428530" name="TestAttrIsList" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c4d49a3f-33fb-69c3-10be-21c094ed6aa4" name="TestMapSingleValue" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="1ce1637f-8543-e298-c530-034b3be54018" name="TestRoundRobinMap" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0e53c936-f082-d17e-6ed4-8b51c69eaa3d" name="TestSeparator" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7c508012-9f4d-0966-5a84-8680b983eae6" name="TestUnicodeLiterals" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="da96fe4c-d9d7-546c-a29c-102acb8663ca" name="TestMap" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f3995d30-ef52-34c6-bc1c-dfe5a09ac80c" name="TestBooleanISProp" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -446,7 +485,6 @@
<TestLink id="1b3203c1-f285-a7ac-ff63-9b9f66b372c2" name="TestOr" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b15c5ab5-e655-8239-d3d6-4cb1b4e5e372" name="TestIncludeWithArg2" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ede948a3-e2a9-b54d-ec9b-9143d5b4e768" name="TestAttrIsArray" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="73e5bfdc-e52b-45a7-ef16-850ea87fe073" name="TestParensInConditonal2" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="86101b85-12fe-e1c5-1b55-4d32b1b86d0f" name="TestNullAttr" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="9bbb7367-ca96-ae4b-608a-48ad500a23d8" name="TestPropConvertsToString" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b57227cd-7058-8606-cace-4dc05fe4cf7b" name="TestMapWithExprAsTemplateName" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -457,10 +495,9 @@
<TestLink id="3f3324d5-94aa-9841-6f88-b4b06936dde7" name="TestSeparatorInList" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f1302103-2533-2c0d-09d9-e3ee0e81b8d1" name="TestMapIndexes" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="29cffafa-1559-ddaa-3234-a1bbdef7e30a" name="TestDefineTemplate" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="0e254e5a-d5b5-f592-e0ec-b46645e29932" name="TestAndNot" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b7a9790d-fdb9-4b43-a401-d33d9736aabe" name="TestFalseCondWithFormalArgs" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="743ca4e9-6bbc-312f-a51b-6fa3e0139a37" name="TestElseIf" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="2d00e12e-f716-c605-81db-da3388fc90b9" name="TestNullIndirectProp" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1ce1637f-8543-e298-c530-034b3be54018" name="TestRoundRobinMap" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="880e6a14-850b-9bbd-4755-4cf934748f0f" name="TestSubtemplateExpr" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8f639ed8-45a5-983a-3607-61d1bea8a74e" name="TestSetUnknownAttr" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6fd78b97-13e1-6a1d-aea1-beaac3b6cccb" name="TestParallelMapWith3Versus2Elements" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -470,15 +507,16 @@
<TestLink id="b4d6101b-c5ca-aa8c-22b5-b89937aa76da" name="TestElseIfNoElseAllFalse" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="31ac465f-8146-f96f-dad2-20ae147895a0" name="TestNotFalseCond" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="bccb2808-0328-2742-e9b1-3b2c42c02583" name="TestElseIfAllExprFalse" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="142cf9a1-ce41-ca5e-da0c-335dd3892b39" name="TestIndirectMap" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7f2e0b55-7261-b12d-dd1d-d2bede674ca6" name="TestMapThenParallelMap" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7174b6e2-103b-1dcc-b155-5636d9fb8932" name="TestFalseCondWithElse" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="72d3ca00-ed45-1a39-804f-17a0d259820b" name="TestCondParens" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b43cff6a-8473-4b7e-7c8f-a0b11da91a64" name="TestNoSuchProp" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="9a01a61f-33aa-5873-612f-aa48eea09684" name="TestEarlyEvalIndent" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="73e5bfdc-e52b-45a7-ef16-850ea87fe073" name="TestParensInConditonal2" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2d405e3c-baf7-15fa-3e87-ea3d2e589692" name="TestMapIndexes2" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="bd3615b8-9530-875b-9112-894e3a10a1ca" name="TestNullAttrProp" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="f1c473ae-9f41-7774-1d33-4167a44a00af" name="Playing" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="683a799a-4b97-ac38-f1b8-1e89f5e002f6" name="TestMapNullValueInList" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0e254e5a-d5b5-f592-e0ec-b46645e29932" name="TestAndNot" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2f9daab6-7e50-9a1b-0cd4-29d51b482808" name="TestTrueCond" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="36a5f3aa-da13-60e9-c6ae-35531d86c3fb" name="TestPropWithNoAttr" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
@@ -490,7 +528,101 @@
<TestLink id="ba1960f4-0797-9355-bd13-69b0505fa131" name="TestString" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="DFA matching" id="3c885cce-ffa3-4ee4-baa8-8a9c03a14e0e" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Rewrite AST (debug)" id="346a8a2c-064c-47ac-8eed-1b0046b4d8cb" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
+    <TestLinks>
+      <TestLink id="7857862d-9a43-2d1c-dd0d-904efc705e14" name="TestAmbiguousRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="fd347c27-a362-ca5a-8036-e852a926c820" name="TestSingleTokenToNewNodeRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="bede80f3-496a-3b38-1f4b-664ac9ba79c1" name="TestSingleTokenToNewNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="82920115-e015-0345-5452-adf0bc124fcc" name="TestExtraTokenGivesErrorNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ae30f48f-d40b-c5d9-75fb-c114ce376d49" name="TestOptionalSingleToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0c990c66-65e9-82a5-14ff-b56f923ba38a" name="TestOptional5" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="98081cb1-05ea-1eb4-5600-e916be78c0f7" name="TestUnknownCharLiteralToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="5ecb9055-9eaa-86aa-35f1-553077e51a8d" name="TestSingleTokenToNewNode2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="fcb25079-58e2-4ef4-ee5a-05ff4a69f5db" name="TestNestedRewriteShutsOffAutoAST" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1f8080ec-d766-000d-972c-9a3f409fa73f" name="TestUnknownLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="37b79dc1-9287-2cba-94eb-36c88c3b42bd" name="TestPositiveClosureSingleToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="84a87915-98eb-6bbf-6b7b-b61da948c990" name="TestSinglePredicateF" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3bb3e67f-c290-8482-d0cf-01c78e9d1e38" name="TestReorderTokenAndRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="5b322bdc-71cc-b016-1c8f-74ba06230476" name="TestRuleListLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="460c4c11-091e-2420-46e7-170ca5834969" name="TestTokenCopyInLoopAgainstTwoOthers" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3beb764e-e728-50ba-bed5-b6cf08556cad" name="TestSplitListWithLabels" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ed453689-c09a-9ab4-61b3-4ce47dfaeb98" name="TestRewriteAction" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="6a37fb6a-2a32-d6cf-1eaf-4cdbec6e263e" name="TestReorderTokens" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="04e78e36-48aa-aede-bfed-0f4d5b8063d7" name="TestRewriteActions2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="35215ae4-c62f-f432-b651-8325c7c333e8" name="TestMultiplePredicate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="9fb2327a-4589-1667-f4f3-de9a947fd89a" name="TestUnknownStringLiteralToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="bc95967d-e1eb-3d55-8052-3bdd9047ddba" name="TestMissingIDInSimpleDecl" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0cc91817-368c-7107-abba-628e2f1629c1" name="TestNestedTrees" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e8cfafc3-7739-65fb-9159-a8a94a98af47" name="TestNoViableAltGivesErrorNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="dc625ef1-0968-b8ad-52b0-4a3530192914" name="TestSingleStringLiteral" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="30486235-65b9-ab7d-123a-c8b61a3bd3f1" name="TestSubruleWithRewrite" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="35e2eb83-d68d-15e4-81a8-356a5e08c5ad" name="TestComplicatedMelange" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="b8d42357-5ac2-83f0-4ebb-b0107808f554" name="TestRewriteActions" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="97559d3c-9a3b-1bf3-32bf-54f7648dff6b" name="TestExtraTokenInSimpleDecl" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="7f0a53f6-ddc7-dc91-4ea9-bd48ce85079c" name="TestTokenUnreferencedOnLeftButDefined" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e00426ce-08d2-e367-c00b-b06f17af3ecd" name="TestSet2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="6afde1ba-b38b-f4c0-bf78-3385b7c7d68d" name="TestImaginaryTokenNoCopyFromTokenSetText" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3e698da2-06f3-2a1e-5185-ce65c0f5e84d" name="TestUnknownToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="30166479-87b1-ddd4-8583-297bb943a24f" name="TestQueueingOfTokens" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3a88874e-be48-4573-cc60-4b7c81ede244" name="TestTokenCopyInLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0a4c263f-e3eb-630e-5f7d-10ffad464018" name="TestCopySemanticsForRules3" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4f9e0ede-eaf0-fcfd-0601-887f32fb1568" name="TestCardinality3" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="323af6a7-75f4-b387-7dee-8b507ae4c811" name="TestCardinality2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="f39116c5-6eb8-677d-324f-8b482d640d2b" name="TestClosureSingleToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="2e3573ce-c26d-560a-89aa-c061887d2a08" name="TestMissingFirstTokenGivesErrorNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="d039ca5e-94a0-4174-d1aa-c173bd85ec2d" name="TestUnknownRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="866529c4-385d-f79c-c78e-8e8242273e6d" name="TestTokenTreeAfterOtherStuff" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="7ca75d93-051c-7cf5-caed-67cf0bda4d61" name="TestCopySemanticsForRules2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="5e3375ff-42ab-5548-2d4a-2f8b5f8382a8" name="TestOptionalSingleRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="796d8fa4-419e-1de0-a16d-52092f388a55" name="TestWeirdRuleRef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c91fffb9-6615-e7bd-323a-b760f9d22a34" name="TestSetWithLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="6106dfaa-0332-832c-71f6-25ba3573b2b3" name="TestImaginaryTokenCopy" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="61b7c40c-9dc0-5579-a9d0-4882def2087f" name="TestMultiplePredicateTrees" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="523ddced-521c-7a31-cba7-862a7f819131" name="TestSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="9de22233-776d-a520-e3c9-7e1a84018324" name="TestLoopCardinality" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="af9974bf-d101-9d5b-d242-cbb3a5b4b6b2" name="TestOptionalLabelNoListLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ed77ae62-7ffe-ceee-6057-e5c3427dd2a5" name="TestRefToOldValue" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a32af91c-4cf6-cbbd-1c7e-41845130b727" name="TestClosureSingleRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0d030739-8675-ce2e-2ec8-fada0cac5ffe" name="TestCopySemanticsForRules4" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e05c5c51-5086-a0b0-02a4-4d0b10bbd2c1" name="TestImaginaryTokenCopySetText" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="80252a52-b62a-0023-da4b-f5519eb668f0" name="TestSingleRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="b8819c04-1611-174a-36e0-ec14aa8b7837" name="TestCopyRuleLabel2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="74357f94-98fd-896d-8f80-543a51d66483" name="TestCopyOfTokens" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="714406ca-3931-e3d9-22ad-f3eb816934ea" name="TestOptionalSubruleWithoutRealElements" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="901f3c81-8d34-24e1-f94f-a08a6af87c77" name="TestRuleLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="973a0eee-da25-3113-ad26-6021c5368b0d" name="TestSingleCharLiteral" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="f76fdc55-3739-eaf7-536c-63e97fde8445" name="TestSingleToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="d1beafee-4ad0-bd60-b305-b15d60a44185" name="TestSimpleTree2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="39e3cbda-d47a-abb1-a7cb-612eba7d19d8" name="TestMissingSetInSimpleDecl" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="f1f8423b-2123-4440-bf5c-80824a1b44db" name="TestCardinality" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="61753578-dce5-1177-9b00-cd623fd92071" name="TestListRefdOneAtATime" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ec277023-06b5-1d2a-f915-7ecd112ee20e" name="TestArbitraryExprType" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="43a6a359-5e16-5dfb-1a98-11b57b401006" name="TestMixedRewriteAndAutoAST" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="cf1258b3-3a60-68aa-6035-17b573e1334c" name="TestCopySemanticsForRules" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a8b83965-c405-f4a5-84be-cdf548fb83c6" name="TestMissingTokenGivesErrorNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3582d83d-a69b-84ac-ecad-f121372d449f" name="TestOptional3" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="7fab74b6-f2fd-2c4a-9a25-ee5d00438ce7" name="TestKnownRuleButNotInLHS" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="15e141f7-ecc7-f9d5-e765-588aea0b6eee" name="TestCopyRuleLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="b002177c-81bc-0ce0-2eee-5fe82d716257" name="TestCopySemanticsLists" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="53c79a60-c15c-838f-0d2b-81f3a3b58aec" name="TestSinglePredicateT" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1ad08732-f75c-f65e-851f-71ef58ac066d" name="TestMissingFirstTokenGivesErrorNode2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="434bd688-9e67-6452-d352-e74a8e4c5735" name="TestNestedTokenTreeWithOuterLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c93b182a-6d23-b528-7f97-bf7aac3087a2" name="TestSimpleTree" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="81601cfc-9a7f-075b-01b1-d00d315dd663" name="TestOptional2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="69e4a450-87ac-a536-f463-ec9603eb234a" name="TestTokenTree" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="28640569-5c37-1a2f-dbf6-907593a0c608" name="TestRuleListLabel2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c5ce6d9f-17c9-5da1-ffa3-3b9236c8f601" name="TestOptional" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e789d5b3-2af8-162e-3614-991740bdf4cc" name="TestPositiveClosureSingleRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="78f3f11e-2e39-1b96-b215-a475fb4ef529" name="TestDelete" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="9717ed6d-9d6f-a516-4626-ab38385b8b1e" name="TestWildcard" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ea161450-2989-f48a-4536-f82f0e67fda9" name="TestSubruleWithRewrite2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ef942676-e2aa-9c63-b7bd-6c408b43e82f" name="TestClosureOfLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="fa501354-cbf8-dbeb-8baa-a858c9785d0b" name="TestImaginaryTokenNoCopyFromToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0cf120f0-959e-ef10-9d1d-55b5ffc7acc7" name="TestCopySemanticsForRules3Double" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1e1160be-3802-1a8c-b9fa-a26f4d81a29c" name="TestOptional4" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+    </TestLinks>
+  </TestList>
+  <TestList name="DFA matching" id="3c885cce-ffa3-4ee4-baa8-8a9c03a14e0e" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="89888be8-82ff-a00d-96d6-51bd06a222e6" name="TestFiniteCommonLeftPrefixes" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b18812a5-f955-9c33-6dce-4f85d055ca4a" name="TestSets" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -498,7 +630,7 @@
<TestLink id="ce60fa3d-c350-a12f-5aa6-43189e37b763" name="TestSimpleLoops" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Messages" id="3feb70ac-993d-4494-8e38-182e280ff9f1" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Messages" id="3feb70ac-993d-4494-8e38-182e280ff9f1" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="8510a7f7-a3a3-0adc-49c2-b321d86206d2" name="TestMessageStringificationIsConsistent" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
@@ -536,7 +668,7 @@
<TestLink id="a9dbd676-1017-ae9f-0ef8-65c66accfa25" name="TestIncomingLists" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Hetero AST" id="449a1f1e-8ee4-4c11-8653-061078124292" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Hetero AST" id="449a1f1e-8ee4-4c11-8653-061078124292" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="99f64a94-43fd-7928-f19a-a36588617d6f" name="TestStringRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d8770320-df8a-7728-8444-591d80e028e3" name="TestTreeParserAutoHeteroAST" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -552,6 +684,7 @@
<TestLink id="1abaf7ba-8d56-44d5-4c20-24e9462648c6" name="TestRewriteTokenRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2e215840-bbd9-aad5-ec58-a6ed0532a5c7" name="TestRewriteToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e337cc32-9b85-e188-9389-eed2c7875843" name="TestRewriteStringRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1503d11a-802c-156c-a87f-f29d601b5aad" name="TestTokenCommonTree" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="57fae555-de73-78d5-dcd1-a9338e9d6223" name="TestRewriteRuleResults" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="dc6e94b9-1ed0-556a-ec6e-d722c8e3ac47" name="TestTreeParserRewriteTree" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="df4a697e-7e88-98c5-9ae8-d3691b60e141" name="TestTreeParserRewriteImaginaryRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -597,6 +730,7 @@
<TestLink id="6b51385e-ce85-d68e-7f14-feb0509f1ed5" name="TestStringRendererWithPrintfFormat" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
+  <TestList name="ANTLR 3" id="6d9b4d0f-553b-40f9-9d17-de844333034e" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6" />
<TestList name="Null and Empty Values" id="6f9712eb-43ef-4a76-8810-256978946e66" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
<TestLink id="8ba621e8-293b-a998-801c-72c36f389d6f" name="TestMissingDictionaryValue3" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -617,7 +751,7 @@
<TestLink id="923f1fcb-961d-e3db-d2c6-bf232a92ed48" name="TestMissingDictionaryValue2" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="DFA conversion" id="700cc8dd-23d3-4b5a-a523-d9fbf43ecde2" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="DFA conversion" id="700cc8dd-23d3-4b5a-a523-d9fbf43ecde2" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="7703e98a-7f08-cce7-3ab6-4035547494d9" name="TestAorBorCStar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ff009252-a909-8550-bb44-381b94f3eff9" name="TestComplement" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -635,7 +769,6 @@
<TestLink id="75e1aaf6-0436-e38d-6afb-4f2c09cabfd4" name="TestSelfRecursionAmbigAlts" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e581affe-d7e5-47eb-da26-9a157d223eeb" name="TestAutoBacktrackResolvesRecursion" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="46ceefad-be1e-171c-7b9f-e47d0e84c62d" name="TestResolveLL1ByChoosingFirst" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="62e542c9-e845-77a4-9077-24431cfae7d3" name="TestAStarBOrAPlusC" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ee436ac9-fc2b-22b4-846f-122533a0001a" name="TestifThenElse" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="23a6aad4-28d2-be53-eb00-c7c76b93e112" name="TestOptionalAltAndBypass" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8033fac3-3583-af76-afd4-1ff21810e9b5" name="TestComplementCharSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -668,7 +801,7 @@
<TestLink id="5beeba3b-b5c2-3d9e-58d5-87c49488857d" name="TestRuleAltsSetCollapse" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8928c090-a789-0cd3-792c-b830b4ad062b" name="TestCyclicTableCreation" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0518282f-decd-077c-8f35-b1b5f61b29b8" name="TestAutoBacktrackAndPredMissingInMiddle" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="dfeb59c3-0e3e-be7e-6d66-1a67121d35b1" name="TestimmediateTailRecursion" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="dfed7aab-953a-e13f-d75f-11da8f5ae988" name="TestA" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0a925845-bf8d-519a-0cb8-9bc97323e8d1" name="TestRecursionOverflow" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="18f58e86-d1b6-84b1-f34b-aa712b4aab33" name="TestIndirectRecursionLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7f8a3f66-a6a2-8865-c471-fcd4fcb3c8f2" name="TestIndirectIFThenElseStyleAmbig" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -678,31 +811,32 @@
<TestLink id="a1f895b3-e4f8-36dc-4ad8-7e8b64260fab" name="TestWildcardStarK1AndNonGreedyByDefaultInParser" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7689bc04-7779-600e-ba02-26af3ce74e54" name="TestAPlusNonGreedyWhenDeterministic" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="183fb531-edb9-5400-e918-a6d3ac0325e5" name="TestHoistedGatedSynPred2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="1ef4f102-6799-5065-34bc-c7457bcebd8e" name="TestNoSetCollapseWithActions" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="701a2463-c022-694d-f6d5-fe40cec43e2e" name="TestRecursionOverflowWithPredOk2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5d3cf669-47dd-b2ed-aaac-f404b5f8f527" name="TestAStar_immediateTailRecursion" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="311a27f5-cf3e-dec3-2d3e-e0b52a0623ab" name="TestSynPredResolvesRecursionInLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="98c0d731-d794-2eaa-a0d1-a993346c42c6" name="TestNoStartRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c808ada3-7835-86cf-b1ff-180655b1407a" name="TestifThenElseChecksStackSuffixConflict" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2a53561f-0627-67ec-9a09-4336347f893f" name="TestIndirectRecursionAmbigAlts" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="aa4f9903-4993-babe-cc63-73d07d6ede2d" name="TestAOptional" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="dfed7aab-953a-e13f-d75f-11da8f5ae988" name="TestA" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="4dd47e1f-663f-2e2f-fc1c-87a76ea37a56" name="TestAorBorCPlus" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="69aeab9e-5d26-f785-e805-562ec73df1d4" name="TestAPlusGreedyWhenNonDeterministic" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="62e542c9-e845-77a4-9077-24431cfae7d3" name="TestAStarBOrAPlusC" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="60205fa1-6256-3a2b-f714-7aad8a626967" name="TestSynPredResolvesRecursion4" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="afe0c7ed-8849-a156-6221-104d90fd5cbd" name="TestWildcardInTreeGrammar2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="79eeb074-0a28-2f1e-217f-9f2e5f591a3f" name="TestSynPredResolvesRecursion" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c31ba203-5df6-30fd-8744-01de7f779e16" name="TestResolveLL2MixAlt" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="69aeab9e-5d26-f785-e805-562ec73df1d4" name="TestAPlusGreedyWhenNonDeterministic" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1ef4f102-6799-5065-34bc-c7457bcebd8e" name="TestNoSetCollapseWithActions" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0b225cb5-9685-9071-95ac-6c2cc2209bd5" name="TestAPlusNonGreedyWhenNonDeterministic" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5c3aeff9-e1e0-bdcc-0734-9e7055d135e0" name="TestMultipleAltsSameSequenceCollision" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a5e14519-fd5f-797b-ad31-de6f8c7e78a0" name="TestAOrBPlusOrAPlus" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="eddf4857-faf6-597c-8ede-709fb6488d18" name="TestCycleInsideRuleDoesNotForceInfiniteRecursion" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="c808ada3-7835-86cf-b1ff-180655b1407a" name="TestifThenElseChecksStackSuffixConflict" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6f97fafd-9e15-3815-ca83-2519640808b2" name="TestIndirectRecursionLoop3" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="dfeb59c3-0e3e-be7e-6d66-1a67121d35b1" name="TestimmediateTailRecursion" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4dd47e1f-663f-2e2f-fc1c-87a76ea37a56" name="TestAorBorCPlus" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2bb21a9c-5d10-1a29-8b4b-32393a753df7" name="TestComplementToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b001abc1-5a7e-24ae-58a4-036a1abbcd86" name="TestIndirectRecursionLoop2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Syntactic predicate evaluation" id="70dd9298-1df2-4244-97b6-099a0a976dee" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Syntactic predicate evaluation" id="70dd9298-1df2-4244-97b6-099a0a976dee" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="158ebd86-cab7-9e24-e863-d5f7415e3eed" name="TestOptionalBlockWithSynPred" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="9166656c-3743-ee33-d181-d6a13c85ba2a" name="TesTLexerWithPredLongerThanAlt" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -721,7 +855,7 @@
<TestLink id="56c5869e-f51e-102f-500f-0fbb899011bc" name="TesTLexerPred" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Buffered Tree Node Stream" id="717ef273-fa6a-41e0-9bf9-b430f5cd4df1" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Buffered Tree Node Stream" id="717ef273-fa6a-41e0-9bf9-b430f5cd4df1" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="0d016d3b-5e1c-e8fe-81b1-b703fa0816f8" name="Test4Nodes" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8a29597d-42fe-2324-b708-a98fa021e45c" name="TestMarkRewindNested" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -737,10 +871,10 @@
<TestLink id="07073a3c-36a1-7ee5-65f3-18bbe29eb340" name="TestAoverB" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="AST Construction" id="764e067f-f13a-4639-a809-4201d71686df" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="AST Construction" id="764e067f-f13a-4639-a809-4201d71686df" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="42ee802c-bf3b-12f2-a9d3-51e97461b0fb" name="TestNotSetLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="d0333260-41c7-f0e5-2719-6297678d4f24" name="TestRulePlus" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3cae375f-e1ab-1fe4-f003-5adb685b3867" name="TestSetLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="81eae235-afc8-8b1f-fcdb-4e726823a20f" name="TestRuleStar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="9b41dd13-052f-2e59-e66f-821e0a452113" name="TestCharStar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2b5d7346-ba46-766b-9363-0d4aa8dab9c6" name="TestRuleLabelOfPositiveClosure" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -751,10 +885,10 @@
<TestLink id="81702789-0dba-9df6-4dcb-60725817a807" name="TestLabelOfClosure" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="11a7e3be-a950-6b0a-b2d2-0eeb6bd021c8" name="TestLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="48e35718-ee20-2954-00e9-71051af24314" name="TestRuleOptional" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="03a27340-b660-a9f8-79ab-c4faf3ccc7ea" name="TestLabelOfOptional" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4186d952-8c16-f6ea-ba4c-eb865d02cd59" name="TestNakedRuleStar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0e5820f5-d9fd-6503-7860-3caa04ea4605" name="TestNakeRulePlusInLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f0e07070-4297-fd26-1fd0-a6bb192efe36" name="TestNotSetListLabelInLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="3cae375f-e1ab-1fe4-f003-5adb685b3867" name="TestSetLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="d0333260-41c7-f0e5-2719-6297678d4f24" name="TestRulePlus" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="69c6ec4b-7bcf-cedb-7b3a-1f1f037ec466" name="TestListLabelOfClosure" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a3e2063f-a7f2-b40d-09c1-2412d9a9f873" name="TestCharPlus" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="66f3f55b-f2b5-08ba-87a3-d2191da398fb" name="TestNakedRuleOptional" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -762,8 +896,8 @@
<TestLink id="bc64f436-9a8e-9d79-d611-f2a5e06df976" name="TestRuleLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="cf0d0b24-62e0-fd5b-99cc-acc24fbd8206" name="TestNotSetListLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="131dcf10-fc5e-79c8-ac27-ef5201f765b4" name="TestRootTokenInStarLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="03a27340-b660-a9f8-79ab-c4faf3ccc7ea" name="TestLabelOfOptional" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="30052d1c-0313-6b61-6ada-f31115ae96c1" name="TestStringStar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="4186d952-8c16-f6ea-ba4c-eb865d02cd59" name="TestNakedRuleStar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="3605dee9-18d9-adba-a536-0772cf1cead0" name="TestCharPlusInLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="93aa457d-701e-2bf3-f504-35452f10ea2e" name="TestListLabelOfClosure2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d3ed9255-494d-8019-c904-0cbea539e565" name="TestNakedRulePlus" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -772,7 +906,7 @@
<TestLink id="2f246613-0273-b7b2-df7c-6c8f569742fe" name="TestCharOptional" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Auto AST" id="7c25c66c-4f25-4791-9634-78cd087c2efb" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Auto AST" id="7c25c66c-4f25-4791-9634-78cd087c2efb" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="f5082326-7318-c00c-5b82-cb0d5b27a963" name="TestMissingSetInSimpleDecl" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f5c49295-2f78-f3d9-7eab-9adf00066de2" name="TestExtraTokenInSimpleDecl" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -831,7 +965,7 @@
<TestLink id="4ba378ff-8d06-63d9-4c32-ff2f8e57825e" name="TestWildcard" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Lexer" id="7d50fd9f-8e61-4406-ad41-5191c259678f" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Lexer" id="7d50fd9f-8e61-4406-ad41-5191c259678f" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="4bcedd80-7e5f-f275-f866-6bc1e37e1d99" name="TestIsolatedEOTEdge" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f5084e66-75d5-b6d6-63e7-7308ad6f38a8" name="TestWeCanSetType" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -866,15 +1000,16 @@
<TestLink id="a8400536-b318-34ff-fb5e-65216d673b7a" name="TestSoleArgUsingApplySyntax" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Syntax Errors" id="8574b040-8928-4c86-9ff6-9e1ba4561605" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Syntax Errors" id="8574b040-8928-4c86-9ff6-9e1ba4561605" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="1e931e0c-a0b2-9b4e-a311-00e5c5bdda08" name="TestLL2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a6522a82-07bd-0837-6b84-ee3cb84955e1" name="TestSynPred" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="95cd4a65-41c3-8a6b-0da5-94e4f962b6ab" name="TestLL1ErrorInfo" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ea3ff6a9-c744-372a-72a8-6d9f6dbdacb2" name="TestLL3" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7843afd0-b0ce-9e28-841a-5bdeb9287422" name="TestLLStar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="a6522a82-07bd-0837-6b84-ee3cb84955e1" name="TestSynPred" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Interpreted lexing" id="8863002f-5b85-4a70-b1bf-bf68c57c9fee" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Interpreted lexing" id="8863002f-5b85-4a70-b1bf-bf68c57c9fee" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="13f36ad3-33de-62d4-e805-f3ac6be93277" name="TestMultAltLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f079e286-7caf-d291-0970-90989b4c10e7" name="TestSimpleLoops" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -887,7 +1022,7 @@
<TestList name="Lists of Tests" id="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
<RunConfiguration id="ffdb4029-8f84-4bbb-9829-cc1e67c5715e" name="AntlrTestConfig" storage="antlrtestconfig.testrunconfig" type="Microsoft.VisualStudio.TestTools.Common.TestRunConfiguration, Microsoft.VisualStudio.QualityTools.Common, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestList>
-  <TestList name="Token rewrite stream" id="94e6f38e-08b6-447a-8730-ed245d8fed16" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Token rewrite stream" id="94e6f38e-08b6-447a-8730-ed245d8fed16" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="1cdb6ed9-b4d1-3832-6de0-d05ed66298d0" name="TestReplaceSubsetThenFetch" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="39d420bd-6703-58e6-9124-9a14fcf5a9a7" name="TestCombineInserts" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -902,44 +1037,44 @@
<TestLink id="df3790e1-acf0-fae8-dafb-f0d3d33b973b" name="TestCombineInsertOnLeftWithDelete" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5dd707cf-246f-728d-0afd-a5b2bdf3d5ae" name="TestLeaveAloneDisjointInsert2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8fb1ab67-da6c-6717-4786-3278a990fec6" name="TestCombine3Inserts" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="9480275e-433d-d326-f9de-99ee519011ef" name="TestInsertThenReplaceSameIndex" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e22bf43e-c090-9175-e78e-778cdc7f23f1" name="TestReplaceMiddleIndex" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="adf6b564-cb34-a22e-a88b-938a1ce224be" name="TestReplaceRangeThenInsertAtLeftEdge" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="33880a5b-f866-e66b-a315-2ec51c53864b" name="TestReplaceThenDeleteMiddleIndex" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f383e78d-f701-d8d1-4d84-fbce6ae40d42" name="TestReplaceThenInsertBeforeLastIndex" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="b7cf787b-115a-8699-c933-31a38e6c91c1" name="TestReplaceRangeThenInsertAfterRightEdge" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="302d4893-660a-dd12-e447-9235d249be04" name="TestInsertInPriorReplace" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b6e8c75b-9aad-7bd2-e5ee-46653ab5e2c9" name="TestReplaceThenInsertAfterLastIndex" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="044db98f-ee20-a701-a00d-498fe5fedc5c" name="TestReplaceThenReplaceSuperset" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="677dc0d5-e9db-02ad-42fd-74d436fc0fd8" name="TestCombineInsertOnLeftWithReplace" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="943d8236-f957-47ec-70b2-2ea8058c1292" name="TestDropIdenticalReplace" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="b7cf787b-115a-8699-c933-31a38e6c91c1" name="TestReplaceRangeThenInsertAfterRightEdge" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c0fcb8db-ff62-386b-547e-0bc5db32e32c" name="TestReplaceSingleMiddleThenOverlappingSuperset" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7e4b7be5-9cb1-4c43-4774-c9ca0583531d" name="TestOverlappingReplace" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5b0e61c7-b963-f818-e1d4-3db6281e109c" name="Test2ReplaceMiddleIndex1InsertBefore" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="43b678a4-c8a2-6855-f991-1c1bf33829d5" name="TestInsertBeforeTokenThenDeleteThatToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e2efdb18-9782-f299-de07-f27a3d80ae40" name="TestReplaceThenReplaceLowerIndexedSuperset" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="cf90ed88-7491-1f73-3b5d-ec1cafdfd880" name="TestInsertBeforeIndex0" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="2b8ae639-6713-0b7f-fb3b-b7ce8093b6be" name="TestToStringStartStop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="677dc0d5-e9db-02ad-42fd-74d436fc0fd8" name="TestCombineInsertOnLeftWithReplace" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="9480275e-433d-d326-f9de-99ee519011ef" name="TestInsertThenReplaceSameIndex" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6594c2b5-2f47-3efa-454d-3171807a8f8a" name="TestOverlappingReplace3" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e04eeae3-fe2e-7a7f-8dc4-0663a67acf62" name="TestReplaceAll" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="c0fcb8db-ff62-386b-547e-0bc5db32e32c" name="TestReplaceSingleMiddleThenOverlappingSuperset" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="2b8ae639-6713-0b7f-fb3b-b7ce8093b6be" name="TestToStringStartStop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c6f03e2e-e6f2-0942-afb0-d0e2a036454f" name="Test2InsertMiddleIndex" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b1c0c59c-f5c6-3866-d5bc-b90ee79b3d6c" name="TestReplaceLastIndex" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2add5f23-928d-46bb-7248-e17fed0b1a84" name="TestInsertThenReplaceLastIndex" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b0c67250-30fb-f7e6-df28-d6526bb68e26" name="TestOverlappingReplace4" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1551b702-140f-35bd-0d56-fc7d7a254228" name="TestDisjointInserts" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="43b678a4-c8a2-6855-f991-1c1bf33829d5" name="TestInsertBeforeTokenThenDeleteThatToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="cf90ed88-7491-1f73-3b5d-ec1cafdfd880" name="TestInsertBeforeIndex0" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1c7cad7b-74c8-d951-b38c-cac8100a4b96" name="TestInsertAfterLastIndex" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0215450b-87b5-20c1-1d91-9fc2939bff32" name="TestToStringStartStop2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Composite grammars" id="97360533-ccdc-4595-85bd-cc148ff2edac" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Composite grammars" id="97360533-ccdc-4595-85bd-cc148ff2edac" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="df94ec3c-ed68-c1e9-77d7-c1ef39336e68" name="TestDelegatesSeeSameTokenType" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="78e8c4d6-43d4-a789-a2b4-0180399a2364" name="TestHeadersPropogatedCorrectlyToImportedGrammars" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="634a1109-c072-4c05-aeb6-fd3458e3e202" name="TestDelegatorInvokesDelegateRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0e1a5f62-e1ac-1311-2886-5abf9f331d72" name="TestDelegatorRuleOverridesLookaheadInDelegate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e3f344aa-e045-42d0-1fc4-070d19a3e181" name="TestWildcardStillWorks" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="de8190c6-8ae0-bb32-c9f4-1d6eff755c3a" name="TestSameStringTwoNames" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ae6c1866-8adb-25eb-3d0d-0c5225c92a3c" name="TestSameNameTwoStrings" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0676d9e0-ffcd-2e3a-7790-9d7e0f230c93" name="TestDelegatorInvokesFirstVersionOfDelegateRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="6ab05b4c-8f93-245d-0c11-47bbdd0dd367" name="TestLexerDelegatorRuleOverridesDelegate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b16f21fe-eeed-0c6d-e5cd-00a2b29d54c0" name="TestNestedComposite" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="64cad709-25f2-9292-9809-887ad4b68141" name="TestInvalidImportMechanism" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a62ee3d7-653a-f618-edd4-c5e7327a0804" name="Test3LevelImport" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -951,20 +1086,20 @@
<TestLink id="381bf3c6-c4d2-243a-055e-23fd8fcfe591" name="TestKeywordVSIDGivesNoWarning" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="bbb71a38-26c0-44eb-036b-b98258c0612a" name="TestDelegatorRuleOverridesDelegate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ad947ca1-6eb1-15e3-78ba-925d2cb6aede" name="TestSyntacticPredicateRulesAreNotInherited" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="634a1109-c072-4c05-aeb6-fd3458e3e202" name="TestDelegatorInvokesDelegateRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="78e8c4d6-43d4-a789-a2b4-0180399a2364" name="TestHeadersPropogatedCorrectlyToImportedGrammars" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="9a64ceb8-6f58-8bac-4864-c8417db468f1" name="TestRulesVisibleThroughMultilevelImport" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d1de139d-16b0-2127-f6ee-ffb79ed0c9a9" name="TestBigTreeOfImports" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8ad9a872-f0c2-a6c6-ccd6-06d6707915db" name="TestSyntaxErrorsInImportsNotThrownOut2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="87ee5593-3b21-0b5a-3dc0-fefd37df0dfa" name="TestDelegatorInvokesDelegateRuleWithReturnStruct" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6e9d5c2c-7dd8-5ab8-b459-65e5104746ae" name="TestCombinedImportsCombined" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="0e1a5f62-e1ac-1311-2886-5abf9f331d72" name="TestDelegatorRuleOverridesLookaheadInDelegate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="6ab05b4c-8f93-245d-0c11-47bbdd0dd367" name="TestLexerDelegatorRuleOverridesDelegate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="072dcd79-2f55-7f6b-e345-d0f969306fb6" name="TestImportedTokenVocabIgnoredWithWarning" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d0682c80-5f55-3b94-d06d-8320a7de1fd7" name="TestImportedTokenVocabWorksInRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ed06e8a9-f390-8d48-f132-4a9590891d07" name="TestSyntaxErrorsInImportsNotThrownOut" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8a23848b-6909-e708-f9b1-8b9dd8b3de7b" name="TestDelegatorInvokesDelegateRuleWithArgs" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Symbol definitions" id="a1b187ef-bf1e-415e-96b9-6ae2d0ac2945" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Symbol definitions" id="a1b187ef-bf1e-415e-96b9-6ae2d0ac2945" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="0af33246-8dc3-44dd-8016-12b9e12ff183" name="TestCombinedGrammarWithRefToLiteralButNoTokenIDRef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7cb5cd15-b69c-ea52-e582-eb816d2ed269" name="TestLabelAndArgConflict" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -973,6 +1108,7 @@
<TestLink id="75dc7fd1-b0d9-7623-0dfe-5fd4be0f3f65" name="TestTokenVocabStringUsedInLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5410ed41-76ff-defe-4d60-90958a97cef6" name="TestRuleScopeArgConflict" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="44dce9c3-486f-326a-2da5-fb2584465e5d" name="TestParserSimpleTokens" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4c69f589-7b40-8d67-825e-2fb43a942cce" name="TestTokenVocabStringUsedInCombined" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1995e60e-dd3c-a17b-4405-c01d06b96968" name="TestEmptyNotToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="87ad1257-ca09-73d6-30f0-cb08f647b691" name="TestLabelRuleScopeConflict" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="594ff8ed-c425-5198-0de9-d3349596d82d" name="TestTokenRuleScopeConflict" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -980,14 +1116,13 @@
<TestLink id="5791e1c5-698e-f671-c6f5-417412819082" name="TestRuleRedefinition" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f2ea7651-7b5d-9385-80bf-05347d449a66" name="TestTokenScopeConflict" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="faa68846-742a-bcc2-b3f2-dda8c648a4ed" name="TestTokenInTokensSectionAndTokenRuleDef2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="4c69f589-7b40-8d67-825e-2fb43a942cce" name="TestTokenVocabStringUsedInCombined" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="7a2df488-436b-c11b-25da-c5c0a7624938" name="TestEmptyNotChar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e13c8c6f-18d5-e0f5-0634-99882beeb548" name="TestTokenLabelScopeConflict" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1d3389d5-7121-5284-75cf-36584b94d25f" name="TestLabelAndParameterConflict" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="fc81d99d-fce2-aade-e97c-3b5713041806" name="TestLexerRuleRedefinition" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6e78c6fd-e2e5-a048-b42c-79b0fc4faa0c" name="TestParserRuleInLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c0ea8642-0d28-e98f-7160-2713661b84c7" name="TestCharLiteralInParserTokensSection" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="59e29067-420a-ebfb-89e5-6219f07bebc2" name="TestUndefinedToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="7a2df488-436b-c11b-25da-c5c0a7624938" name="TestEmptyNotChar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="fc81d99d-fce2-aade-e97c-3b5713041806" name="TestLexerRuleRedefinition" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8fb83455-277a-dcab-e32e-0d1849746d46" name="TestLiteralInParserAndLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="df34efc4-ac05-3d4c-49fa-9633012ab94a" name="TestBadRuleOption" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="335f70e1-1bde-22b2-9b11-69cc8c0f2412" name="TestUndefinedRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1026,19 +1161,18 @@
<TestLink id="ca459126-6c86-5013-0304-6a5b06a18e47" name="TestSeesMostSpecificAdaptor" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Char DFA conversion" id="a5edd101-e97e-4629-90b7-10d1107f3625" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Char DFA conversion" id="a5edd101-e97e-4629-90b7-10d1107f3625" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="39cef987-8ab8-8b8a-44db-775896423051" name="TestNonGreedyWildcardPlus" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="bee6b7ed-7f24-8f24-d9e3-cdb29d1aebaa" name="TestAdjacentNotCharLoops" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="69ad0dec-4c28-397f-c092-80124d776df5" name="TestDisjointSetCollidingWithTwoRangesCharsFirst" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="6e823067-79cf-45cb-2a54-29d37e73ab96" name="TestNonAdjacentNotCharLoops" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e5e12a7f-5d78-d660-5ddd-ce7d6c78e1c7" name="TestSimpleRangeVersusChar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8c5603ce-b204-76b5-9e4a-13f1e85be28f" name="TestNonGreedyByDefaultWildcardStar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5309eae3-d92c-9b86-4ec7-e5850cd6da24" name="TestNonGreedyWildcardStar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ff44422c-b919-fd23-61d2-8a1020aeeed9" name="TestNotSetWithRuleInLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d736f2ca-339f-7739-dccb-fecb79cd53b7" name="TestNotSetFragmentInLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f065ab64-412d-2c47-da48-5dd0da750c2b" name="TestNotFragmentInLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="e2b382a9-ee95-8f04-1ba8-98ce733e0b0c" name="TestNonWildcardEOTMakesItWorkWithoutNonGreedyOption" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="6e823067-79cf-45cb-2a54-29d37e73ab96" name="TestNonAdjacentNotCharLoops" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="20ed6c03-5998-2188-b3d0-65f3531fbb4d" name="TestDisjointSetCollidingWithTwoRanges" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a8127e05-3b3b-fd7c-3a02-ad7b6330b338" name="TestSynPredInLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5c3b7ac1-97bd-aed1-4dd5-f97119c47101" name="TestDisjointSetCollidingWithTwoRangesAsSeparateAlts" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1052,6 +1186,7 @@
<TestLink id="81c29b70-e3ca-26f0-584d-8874fbe16b17" name="TestRecursive2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b077ff73-889c-c188-7d46-64fd8118fff4" name="TestSetCallsRuleWithNot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="9a8336ff-a90c-7a8b-d64b-199a27b522a8" name="TestLoopsWithOptimizedOutExitBranches" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e2b382a9-ee95-8f04-1ba8-98ce733e0b0c" name="TestNonWildcardEOTMakesItWorkWithoutNonGreedyOption" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c7498de1-197f-58f4-db3b-395dcb7da6f2" name="TestNonWildcardNonGreedy" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0e192582-e307-a73b-5e39-16c233964ed5" name="TestIdenticalRules" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ce926da4-9d6d-850d-f921-eaf3c6240535" name="TestKeywordVersusID" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1061,27 +1196,30 @@
</TestList>
<TestList name="Dictionaries" id="a632ce5b-b7d6-4365-a864-80ed4c1d7e14" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
-      <TestLink id="a3789ece-ce65-28f3-b1ac-e74230bc7930" name="TestDictViaEnclosingTemplates2" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="878fc109-bb80-c5ce-3629-a5647cf93437" name="TestAccessDictionaryFromAnonymousTemplate" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="9c36f98e-f7bf-8015-eea8-cbb1383dfde1" name="TestDictNullKeyGetsDefaultValue" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c5528ac2-ce1e-5208-756a-05dd52099cb3" name="TestDictWithoutIteration2" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="25c61497-80be-24aa-4ea5-f51d4c4ea9f0" name="TestDictDefaultIsDefaultString" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e2a91304-7c34-d91a-b60f-a9d654766010" name="TestDictEmptyValueAndAngleBracketStrings" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f8536bba-7477-6938-c358-c98027864715" name="TestDictHiddenByFormalArg" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="878fc109-bb80-c5ce-3629-a5647cf93437" name="TestAccessDictionaryFromAnonymousTemplate" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="61b0fbb0-5315-2e65-7d1a-bae7e46a29e4" name="TestDictKeyLookupAsNonToStringableObject" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="4c46fd30-be5b-916f-a2f2-692113cd8ed7" name="TestDictEmptyDefaultValue" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="9c36f98e-f7bf-8015-eea8-cbb1383dfde1" name="TestDictNullKeyGetsDefaultValue" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="a8874d9f-c1d4-dfde-96ba-b9075c33ccce" name="TestAccessDictionaryFromAnonymousTemplateInRegion" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="1b4c5dbf-e52e-e408-0445-43347d2c1783" name="TestDictViaEnclosingTemplates" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="89d65634-6290-c2c3-cd88-90f3ecfbb816" name="TestDictDefaultStringAsKey" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="2b2eeb9c-098b-6f3b-3e60-81a9f5c0c94c" name="TestDict" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a437a42b-cc4f-84b8-ef2a-0abef69f5f14" name="TestDictMissingDefaultValueIsEmpty" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a3789ece-ce65-28f3-b1ac-e74230bc7930" name="TestDictViaEnclosingTemplates2" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6318d331-1a36-74c3-9bc8-172250542e29" name="TestDictValuesAreTemplates" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="25c61497-80be-24aa-4ea5-f51d4c4ea9f0" name="TestDictDefaultIsDefaultString" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="61b0fbb0-5315-2e65-7d1a-bae7e46a29e4" name="TestDictKeyLookupAsNonToStringableObject" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0da5a91a-c81b-d63f-b08e-499dda16665b" name="TestDictWithoutIteration" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="d4798ff1-7fe3-2057-27e5-53da5edd0802" name="TestDictDefaultValueIsKey" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="dfd95782-8f66-adb8-7c53-1118342b0d3b" name="TestDictKeyLookupViaTemplate" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="a437a42b-cc4f-84b8-ef2a-0abef69f5f14" name="TestDictMissingDefaultValueIsEmpty" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1b4c5dbf-e52e-e408-0445-43347d2c1783" name="TestDictViaEnclosingTemplates" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="862cd537-a495-fcdc-20ae-03bf2c8cf8bd" name="TestDictDefaultValue" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8a5ef243-99f2-9c48-373a-afd09bd6d14e" name="TestDictMissingDefaultValueIsEmptyForNullKey" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="d4798ff1-7fe3-2057-27e5-53da5edd0802" name="TestDictDefaultValueIsKey" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="2b2eeb9c-098b-6f3b-3e60-81a9f5c0c94c" name="TestDict" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a8874d9f-c1d4-dfde-96ba-b9075c33ccce" name="TestAccessDictionaryFromAnonymousTemplateInRegion" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="2a977ce8-35df-16fa-8029-6e0e86ec6d97" name="TestDictWithoutIteration3" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Rewrite AST" id="b537d8a4-a63f-42fc-bd02-ac25d6cfc7ae" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Rewrite AST" id="b537d8a4-a63f-42fc-bd02-ac25d6cfc7ae" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="0bc04928-13d1-d054-15b1-efcc815e5239" name="TestOptional2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e9e8726d-7437-a7fe-dee5-5028b747e72b" name="TestOptionalSingleToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1094,6 +1232,7 @@
<TestLink id="b312a247-3291-840a-5edf-af3a27b50a73" name="TestSubruleWithRewrite2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6d45d762-aeb3-96b0-002f-fb9b59c5532e" name="TestMissingIDInSimpleDecl" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="476ec1fa-abd5-1bcf-7ca7-8cb0ae0ad144" name="TestRewriteAction" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ee4649ce-bf2d-68db-270f-45a71dccc4b2" name="TestSingleStringLiteral" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5d5f825a-f3d7-225b-a4f0-b85d524724e9" name="TestCopySemanticsForRules2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="857ddd22-57ce-6e66-a077-faec7497852c" name="TestClosureSingleToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1b5ede6f-fd98-d547-9498-530cb8789300" name="TestTokenTreeAfterOtherStuff" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1104,11 +1243,9 @@
<TestLink id="82895fda-ce95-f456-bc20-febc1cba80a7" name="TestReorderTokenAndRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="3fe4cff9-1097-6e87-2b18-11535b7b851f" name="TestImaginaryTokenNoCopyFromToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="57ca6532-1e01-4c43-2aea-d17c0a6de645" name="TestTokenCopyInLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="572e4233-f335-1071-afce-2306aa33bf4b" name="TestOptional5" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8f45812a-b8ef-e89e-7ef0-3180b747316a" name="TestSetWithLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a0b06a29-11ee-01bd-4521-68afa6ba9053" name="TestCardinality3" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="96d93b0b-a18d-4b4b-a40e-5eb31f9240b5" name="TestSinglePredicateF" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="368b6d6b-fea0-d43f-b3ff-34483d088dcb" name="TestReorderTokens" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="17748ed9-358e-3c48-2069-99ad841a4c29" name="TestNestedTrees" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="feca4f95-f56d-b4fd-e8a6-df606faa178d" name="TestExtraTokenInSimpleDecl" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="063b66d3-bbe6-816c-ca21-f045061dc6da" name="TestRuleListLabel2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1123,14 +1260,13 @@
<TestLink id="acf088eb-6a12-9008-1514-b8816224c1c6" name="TestImaginaryTokenNoCopyFromTokenSetText" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1d7b5fc6-f7bc-df5a-20b2-0cc98c542a6a" name="TestCopyRuleLabel2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2c3d5793-71f1-7b39-ec64-bf2291fb3ca2" name="TestSinglePredicateT" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="ee4649ce-bf2d-68db-270f-45a71dccc4b2" name="TestSingleStringLiteral" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="572e4233-f335-1071-afce-2306aa33bf4b" name="TestOptional5" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f5e5d4c7-c1ed-a819-0889-4c638a68b17c" name="TestUnknownCharLiteralToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="4d4c0ea7-2d9b-530d-db7f-e5e8231f07be" name="TestOptionalLabelNoListLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7eba73a2-cc5d-0d49-72ae-bb4eef62b703" name="TestListRefdOneAtATime" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2d6359d3-2e2a-f555-7566-314ac105ccdb" name="TestCopyRuleLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0f15a718-3179-1a09-32e2-c5bb4bb0640f" name="TestSet2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="198e2211-9e6a-2f17-0d6e-a6bbd90fffef" name="TestSubruleWithRewrite" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="72e97114-1bce-1d9a-3901-19383c55f673" name="TestRuleLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7ffe2a03-63a4-7994-8c19-7c9af9e9e0b3" name="TestDelete" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ba5a442a-e396-9687-3865-aa18e8064cfc" name="TestMissingFirstTokenGivesErrorNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="806158af-06bb-0d28-b2bf-6c149877f69b" name="TestMissingSetInSimpleDecl" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1140,12 +1276,13 @@
<TestLink id="ae6c450f-f718-a92b-37c1-e58e8842a7a2" name="TestRewriteActions" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7d6dc7bb-9004-b704-f205-2cf1c76fecd8" name="TestWildcard" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ab8aaf90-e024-d554-9ff3-73d61030a409" name="TestArbitraryExprType" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="fddab8c2-484f-c47d-c2fb-0b4b1567501f" name="TestExtraTokenGivesErrorNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="46ce5be4-0348-894a-ff95-a328886fd613" name="TestUnknownStringLiteralToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="3e76c486-0907-4e8a-ecb5-bba2a14ea1bd" name="TestUnknownToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f150f22b-e714-d2f0-142f-0b71fd2c6d50" name="TestImaginaryTokenCopySetText" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8500293f-e267-686d-8c38-6996400d1eda" name="TestUnknownRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ade10af2-759e-67fd-0acc-1896442fcdf7" name="TestMixedRewriteAndAutoAST" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="fddab8c2-484f-c47d-c2fb-0b4b1567501f" name="TestExtraTokenGivesErrorNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="f11cfef9-a58e-b143-6622-d5c40769ab8f" name="TestRefToOldValue" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="654f1794-0b29-a0bd-4d64-17b02a37d0bb" name="TestNestedTokenTreeWithOuterLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="88521875-d40a-be46-8b3a-0119332f40b0" name="TestMultiplePredicate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0cefdbe3-6105-dde6-a3ba-987c659fcf8e" name="TestSingleTokenToNewNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1162,14 +1299,15 @@
<TestLink id="62f016da-54cc-65bc-ca8c-b3f31f8694f1" name="TestCopySemanticsForRules3" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="42de20fe-25fc-a6e1-f684-df0a24639f06" name="TestUnknownLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e4f349cd-226c-3554-4210-3f511597794b" name="TestMultiplePredicateTrees" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="e0ac3e59-5b4d-a0e0-48e0-a4b7471b7851" name="TestTokenTree" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="368b6d6b-fea0-d43f-b3ff-34483d088dcb" name="TestReorderTokens" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="4ca90232-5601-42f6-040d-58e08b395818" name="TestSingleTokenToNewNode2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0321667a-a58b-db7c-8851-1cbf357302e3" name="TestNestedRewriteShutsOffAutoAST" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6f15726e-a357-db41-c91d-e1a21f20171c" name="TestSimpleTree2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="74af9fea-3e9c-1448-3e3f-a91c7436b6f7" name="TestCopyOfTokens" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="96ec71cd-5bbc-d917-ddeb-c1271ea2a8d3" name="TestOptional4" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f7b0381d-867f-76d2-4b03-ede361cc24ca" name="TestRuleListLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="f11cfef9-a58e-b143-6622-d5c40769ab8f" name="TestRefToOldValue" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="72e97114-1bce-1d9a-3901-19383c55f673" name="TestRuleLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e0ac3e59-5b4d-a0e0-48e0-a4b7471b7851" name="TestTokenTree" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0c0490e7-79ea-05f5-fcdd-62532b6948a0" name="TestQueueingOfTokens" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="3238964a-c7ea-e3fa-e811-525a14562835" name="TestWeirdRuleRef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8afa5764-c131-e06e-fc61-e9598c884ae5" name="TestRewriteActions2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1178,6 +1316,7 @@
<TestList name="Syntax Errors" id="b620fded-8956-44fd-8767-9bbd98497410" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
<TestLink id="34d05066-d85c-81fb-3ac5-b8c2c8280a48" name="TestRotPar" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c67ac5ff-7984-15b4-cc14-1e2fa130fb77" name="TestIt" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="09c60eeb-0bdc-4121-7919-43d18e26beca" name="TestWeirdChar" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="4c580231-39c8-8daf-d955-6dff6e002c5b" name="TestEOFInExpr" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="77c59b88-8af9-c1cf-7325-cbde144f0c97" name="TestValidButOutOfPlaceCharOnDifferentLine" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1216,10 +1355,10 @@
<TestLink id="96acbec6-0c7b-580a-076c-a15161832711" name="TestLineWrapForAnonTemplate" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="CommonTokenStream" id="bed680d9-8938-431e-9808-232e0ac0c3ae" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="CommonTokenStream" id="bed680d9-8938-431e-9808-232e0ac0c3ae" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
-      <TestLink id="9882555d-3442-eb13-71d5-3739b39b6aad" name="TestCompleteBufferAfterConsuming" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f120ba49-070d-ac51-17b6-4c8692ebc54c" name="Test2ndToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="9882555d-3442-eb13-71d5-3739b39b6aad" name="TestCompleteBufferAfterConsuming" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e34b7227-602a-3f2c-50ff-3eaff6d7fac0" name="TestCompleteBuffer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0920e9ad-4bf7-404f-e875-2ece187fe5cc" name="TestFirstToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="01c39dd3-5455-0ca1-b735-ee9165d36d01" name="TestOffChannel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1244,7 +1383,7 @@
<TestLink id="ba35adee-1588-4ff2-ccfa-7185155acff7" name="TestEvalSTFromAnotherGroup" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Tree grammar rewrite AST" id="c07b8a15-6914-4452-992f-7741e4abfb96" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Tree grammar rewrite AST" id="c07b8a15-6914-4452-992f-7741e4abfb96" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="99feedcf-fa24-a2b4-dd99-244596dbde33" name="TestSetMatchNoRewriteLevel2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="07d05edc-57ba-b38e-2da6-c5d2b24c70bb" name="TestNonImaginaryWithCtor" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1260,7 +1399,7 @@
<TestLink id="52be505f-42c4-7f06-8b6d-43d7d6a7c1cc" name="TestNoWildcardAsRootError" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1bb28603-4db4-33ab-eae9-28979f7b9d8d" name="TestRewriteModeWithPredicatedRewrites" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c283e34d-e2b1-36ce-e2bc-9ef508eb98c0" name="TestRewriteOfRuleRefRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="1a4f72f1-1138-08b7-70f9-931cd2f5f0d4" name="TestRewriteModeChainRuleFlatTree" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="40309d89-7d64-931d-745c-6791cfb32f27" name="TestRewriteOfRuleRefChild" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d59ff183-8c21-380e-7527-c4c078f4a302" name="TestAutoDupTreeWithRuleRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7bcc0760-ed78-d3f0-6858-7c3c840a26d6" name="TestRewriteModeChainRuleTree4" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f82f0497-3a42-2c25-55ad-9b1d76605084" name="TestRewriteModeChainRuleTree5" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1272,13 +1411,13 @@
<TestLink id="b066248a-6384-48ae-c7eb-55a23c9faaae" name="TestAutoDupTreeWithLabels" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d05e2e9a-3390-81de-21f6-765ead7a2062" name="TestAutoDupMultiple" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="fb169782-827f-a5fe-2a40-d18465c4b3aa" name="TestAutoDupTreeWithRuleRootAndLabels" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1a4f72f1-1138-08b7-70f9-931cd2f5f0d4" name="TestRewriteModeChainRuleFlatTree" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2961f91d-b978-3af6-b6f9-b8059a6b56a1" name="TestAutoDupTreeWithListLabels" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0ac7347a-b97a-8ee3-b80a-e33ed5f01535" name="TestRewriteOfRuleRefRootListLabeled" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5d7fe4f7-94cc-e1d8-032f-264a19d197e1" name="TestWildcardListLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="bc5337f4-fb93-8bef-c68e-31379041b9aa" name="TestWildcardSingleNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="38786531-fd5e-c5f4-784c-0ead4a91b24d" name="TestSetOptionalMatchNoRewrite" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b15326b1-6591-4f3f-6e28-ee73d94955eb" name="TestRewriteOfRuleRef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="724b1eb7-2b63-ef93-5e09-07a91d26cebf" name="TestLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="dfe5ae59-d631-0267-c563-bebfbe07b801" name="TestAutoWildcard" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="70cc366b-9c92-c180-2684-fb9de483290f" name="TestAutoWildcard2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="19e99140-2e77-373a-ec43-2752220e4e1a" name="TestWildcardUnlabeledSingleNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1286,6 +1425,7 @@
<TestLink id="c08156e0-15df-c11a-933b-20ddd8aae279" name="TestWildcardGrabsSubtree" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d3cc2096-7e8e-adce-39bc-a28a2cbc94e6" name="TestSetMatchNoRewrite" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0b123cb4-9696-a957-9f6a-58cc6fef6709" name="TestRewriteModeChainRuleTree3" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="724b1eb7-2b63-ef93-5e09-07a91d26cebf" name="TestLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="44f7708f-1695-6d03-4c6a-76dd21cdeda6" name="TestAutoDupTree2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="515d7169-66c7-90c9-a087-a5c2440c9cd0" name="TestAutoDup" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7692c591-f0ed-6677-37ee-1a72705b8e8f" name="TestAvoidDup" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1293,13 +1433,12 @@
<TestLink id="f2834348-cbab-3089-f00c-3270e070b516" name="TestRewriteOfRuleRefLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="4a287924-26bc-be65-2ff5-235cfbdba7a0" name="TestWildcardGrabsSubtree2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="40702160-3c1e-b447-c52c-58cccf0cd9bd" name="TestRewriteModeFlatTree" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="40309d89-7d64-931d-745c-6791cfb32f27" name="TestRewriteOfRuleRefChild" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="42e46fc0-3af0-c19c-0daa-1c2dc7affcc3" name="TestFlatList" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a3a10277-f576-6aa2-a542-4c248eb67dcc" name="TestCombinedRewriteAndAuto" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="db8db0d2-b01c-9760-3c47-4ced7bbcbb85" name="TestSimpleTree" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Topological sort" id="c42745c3-fd6a-4a55-86cb-da58ce9f1f07" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Topological sort" id="c42745c3-fd6a-4a55-86cb-da58ce9f1f07" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="442b3a28-5eae-9981-cb6d-f78795f7f533" name="TestParserLexerCombo" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f1f976fa-5fca-bd50-4ab9-b4a48776c2c3" name="TestFairlyLargeGraph" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1308,7 +1447,7 @@
<TestLink id="b8a07cfe-81ab-4c5f-3ba5-724c82689194" name="TestSimpleTokenDependence" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="FastQueue" id="cbefbc15-ff84-4892-9c3f-42773c74900f" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="FastQueue" id="cbefbc15-ff84-4892-9c3f-42773c74900f" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="0911fbc0-a30e-a173-3df8-c100584b4f9c" name="TestQueueThenRemoveOneByOne" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="95115011-85da-85d2-a439-b0d856c1545a" name="TestGetFromEmptyQueue" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1320,31 +1459,35 @@
</TestList>
<TestList name="Whitespace" id="ce1b32d4-8e36-45d0-92e0-3ba2037155db" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
-      <TestLink id="a56efbeb-147f-8a17-a53e-2f051c69bb22" name="TestNewlineNormalizationInTemplateString" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="fc038c29-aeaa-1304-1163-ca460b5f856b" name="TestTrimmedSubtemplatesNoArgs" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="5c5cec61-7c49-f809-d2fb-3c94a34a2250" name="TestEmptyExprAsFirstLineGetsNoOutput" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="518f077a-01a0-859c-bad4-6d9cc4dc16c6" name="TestTrimJustOneWSInSubtemplates" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="722dd057-8dff-88de-0503-d387477ef592" name="TestNestedIFOnMultipleLines" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="da44ec84-3231-5e31-7962-48e7ae5967c4" name="TestEmptyLineWithIndent" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="d43522e6-c8fb-2d8d-f633-59397527244d" name="TestTrimmedSubtemplates" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="02ef4ada-1c34-45fc-8299-2c45d1af8e17" name="TestTrimmedSubtemplatesArgs" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="f9ab50d9-60b6-99a6-e5f8-befae2fb0cdf" name="TestSizeZeroOnLineWithMultipleExpr" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="65f0ce63-e1c3-17e8-dc8f-3060bd34287c" name="TestSizeZeroOnLineByItselfGetsNoOutput" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="381b9f68-4786-86e4-bd9c-aec96ff93f1a" name="TestIFElseExpr" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="455413a0-af02-59bc-bc41-43e60d3f5f2a" name="TestCommentOnlyLineGivesNoOutput" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e4491404-b86a-bfe4-4e30-f3a73681be70" name="TestEndifNotOnLineAlone" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0ca8b7d9-2b9b-8c08-c39e-a8049d033e83" name="TestIFOnMultipleLines" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="65f0ce63-e1c3-17e8-dc8f-3060bd34287c" name="TestSizeZeroOnLineByItselfGetsNoOutput" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="3b435148-b47a-ded9-ad30-c384adacb8b0" name="TestLineBreak2" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="62f7b058-a127-bd85-bc8d-3e7c29ca7799" name="TestSizeZeroOnLineWithIndentGetsNoOutput" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="02ef4ada-1c34-45fc-8299-2c45d1af8e17" name="TestTrimmedSubtemplatesArgs" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="722dd057-8dff-88de-0503-d387477ef592" name="TestNestedIFOnMultipleLines" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3f7da25c-ae27-6bcb-c592-7723a7c52a06" name="TestNullIterationLineGivesNoOutput" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6753404b-e7d9-9259-1d80-4d46a2fff330" name="TestTrimNewlineInSubtemplates" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="4dea8820-cb56-aaa7-1b7f-62ef923e6fb3" name="TestEmptyLine" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3b435148-b47a-ded9-ad30-c384adacb8b0" name="TestLineBreak2" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a56efbeb-147f-8a17-a53e-2f051c69bb22" name="TestNewlineNormalizationInTemplateString" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e3902c5f-d176-2c95-4f6c-528562dc9268" name="TestEmptyIterationLineGivesNoOutput" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="964da835-06ef-6830-d1a6-13ddd7ec58ae" name="TestIfElseifOnMultipleLines" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d8c5b2a5-acc2-03f1-a439-a5d612999144" name="TestIndentedIFExpr" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="3e730bac-3553-4968-86b8-a261d95a9690" name="TestLineBreak" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="e6d78fab-cdbc-0532-f489-1d5cff2ed90d" name="TestLineBreakNoWhiteSpace" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a12ca9c8-7b16-f42c-fc00-8a0e86317cd9" name="TestNewlineNormalizationInTemplateStringPC" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="f3ecfcdd-54fc-eae5-3a0e-5f91915d74ca" name="TestTabBeforeEndInSubtemplates" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="5c5cec61-7c49-f809-d2fb-3c94a34a2250" name="TestEmptyExprAsFirstLineGetsNoOutput" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="d43522e6-c8fb-2d8d-f633-59397527244d" name="TestTrimmedSubtemplates" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="bcde37da-23f9-163e-ca6a-5ecf50ee9f01" name="TestCommentOnlyLineGivesNoOutput2" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="455413a0-af02-59bc-bc41-43e60d3f5f2a" name="TestCommentOnlyLineGivesNoOutput" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="577f5745-e9b8-cc96-174b-b0f7e7434c11" name="TestLeaveNewlineOnEndInSubtemplates" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3e730bac-3553-4968-86b8-a261d95a9690" name="TestLineBreak" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="62f7b058-a127-bd85-bc8d-3e7c29ca7799" name="TestSizeZeroOnLineWithIndentGetsNoOutput" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="fc038c29-aeaa-1304-1163-ca460b5f856b" name="TestTrimmedSubtemplatesNoArgs" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="50435d35-e6fc-faf5-7506-803336700c31" name="TestNewlineNormalizationInAttribute" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="f3ecfcdd-54fc-eae5-3a0e-5f91915d74ca" name="TestTabBeforeEndInSubtemplates" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="f9ab50d9-60b6-99a6-e5f8-befae2fb0cdf" name="TestSizeZeroOnLineWithMultipleExpr" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4dea8820-cb56-aaa7-1b7f-62ef923e6fb3" name="TestEmptyLine" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="da44ec84-3231-5e31-7962-48e7ae5967c4" name="TestEmptyLineWithIndent" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e6d78fab-cdbc-0532-f489-1d5cff2ed90d" name="TestLineBreakNoWhiteSpace" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="577f5745-e9b8-cc96-174b-b0f7e7434c11" name="TestLeaveNewlineOnEndInSubtemplates" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="518f077a-01a0-859c-bad4-6d9cc4dc16c6" name="TestTrimJustOneWSInSubtemplates" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="db4b37e8-d877-e2a7-2c45-0cace2881c27" name="TestIFExpr" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
@@ -1371,7 +1514,19 @@
<TestLink id="32ed68b2-0a7c-31df-cf15-d83df71fdebc" name="TestEscChar" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Trees" id="e433d4d6-0eb4-4104-bbda-10aa34646d26" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Left recursion" id="dc478f6e-19a8-4b21-89da-3c3306991750" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
+    <TestLinks>
+      <TestLink id="eee2048c-e712-8031-fc91-d3a9ee0a7be2" name="TestDeclarationsUsingASTOperators" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="cabe23b6-ecd3-134b-91a9-9c8df69ef5c2" name="TestTernaryExpr" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="686d3212-9d0a-48ae-bfeb-581194e5de99" name="TestJavaExpressions" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="f3700d78-fbfa-67b2-2895-c836ac398264" name="TestExpressionsUsingRewriteOperators" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c11db404-0204-b4af-a017-8275e1b73ab6" name="TestSimple" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1e7df2e2-331f-25ab-d96e-ca12379d0d85" name="TestDeclarationsUsingRewriteOperators" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="f0ae997e-33c1-421f-30f6-2b0903b2c6d8" name="TestExpressionAssociativity" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="402f6660-6d1d-1099-68a2-c7982b84dc0f" name="TestExpressionsUsingASTOperators" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+    </TestLinks>
+  </TestList>
+  <TestList name="Trees" id="e433d4d6-0eb4-4104-bbda-10aa34646d26" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="7c44cecb-5184-24d7-66b8-c2971b235732" name="TestReplaceAllWithTwo" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="dd601a6c-7b3a-da68-3457-0931ffa9eade" name="TestReplaceAtRight" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1399,6 +1554,65 @@
<TestLink id="795b6e51-4b14-5360-15f0-a99827152fb4" name="TestBecomeRoot2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
+  <TestList name="Auto AST (debug)" id="e7936c2e-d089-417e-9afd-32c37a99a613" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
+    <TestLinks>
+      <TestLink id="36f63629-151a-f71d-2c78-fa571bd6c122" name="TestNotSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a97f72e4-0264-a2e6-0213-e1272b01abee" name="TestSimpleRootAtOuterLevelReverse" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="66f0b4bf-e2a1-d758-5fca-e017e09fdfd4" name="TestRootThenRootInLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="d348ef9a-617e-cea3-7cd6-fee5cad13efa" name="TestTokenListLabelReuse" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="472b811c-bcd0-672e-7964-4eecdad3120d" name="TestWildcardRootWithListLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="80997189-96e1-639f-d8d3-13d55cd453e3" name="TestTokenListLabelReuse2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ac4cb899-f6ab-c67e-859f-cf54a8c95f7a" name="TestWildcard" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="b0575f9e-5017-970e-88fd-63ae4ad51ab6" name="TestBang" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="83acd885-fe51-47ea-738e-0108fb86d835" name="TestSetRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ae594bef-e73d-8987-303c-52749707c383" name="TestSetAsRuleRootInLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="506ccc29-2c68-a535-ab65-7029ef1481be" name="TestRootRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="2142bbbd-898b-5547-9cb6-18a69e39605a" name="TestExtraTokenGivesErrorNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e99e104e-7868-76d0-0166-b59e37494b15" name="TestNotSetWithLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="10ed047a-471f-7f25-d389-869022049d2a" name="TestNotSetRootWithListLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="753c5d13-1f4d-d30c-ea8e-aab03426cd80" name="TestMissingTokenGivesErrorNodeInInvokedRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="316f7c78-3785-8a03-ec06-b8ebe15cd669" name="TestTokenListLabelBang" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="db9f2bff-a212-719c-4029-c6851ebc7575" name="TestExtraTokenInSimpleDecl" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="f2f3bdf3-3b17-d34c-947f-943099c2d506" name="TestMissingIDInSimpleDecl" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="6e1af978-f767-70fa-3322-aa63409bb699" name="TestSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4253d33e-cfd6-4e30-464b-06edf221f2b6" name="TestTailRecursion" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="552addb1-5461-ff2e-2361-05bfa89798a6" name="TestWildcardRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="33f4ab67-c9d5-0037-85b0-67314117fbd9" name="TestRuleRootInLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="d307fad8-f0bf-1988-9f08-884ff5da0aed" name="TestNotSetRuleRootInLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="5fd0590e-c5b2-77a3-ba52-c24f89857718" name="TestTokenList" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="33240429-0b35-814f-d291-b3824f0eeb53" name="TestNestedSubrule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1310f29f-6f2b-6ac5-4c4f-dd1cbe469a61" name="TestMissingFirstTokenGivesErrorNode2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="8228b0bf-9187-5be4-1685-7acb8555dff2" name="TestOptionalThenRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a96d9a1f-6511-e4af-cc8b-d54e073a50af" name="TestInvokeRule" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="b4bdee49-9ffc-a66c-7452-8140c4a50846" name="TestSetLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="862d55c4-4ab7-9a20-7f44-795b248d9a2f" name="TestNotSetRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="b50d0abe-b3ab-fa96-b9d8-41cf0c0157ec" name="TestRuleListLabelRuleRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="91c60740-9c01-8d26-7a20-592e1517586d" name="TestWildcardRootWithLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="57eac9fe-45a9-278a-79b3-e4de65124dbb" name="TestLabeledStringRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="6285979f-0fda-3c01-5dbf-1708fca9b73d" name="TestTokenLabelReuse" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="508bb54b-4f95-2790-3bae-2a122fb99c18" name="TestInvokeRuleAsRootWithListLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="cd85c037-9455-4d7a-3983-34f46839c349" name="TestNoViableAltGivesErrorNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="b1687026-c9cd-8240-0125-c48ab20f420f" name="TestMissingTokenGivesErrorNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4d07761c-3890-8156-f6ea-3269a1d3d20c" name="TestTokenLabelReuse2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="12af927b-2160-8445-d13e-deb1cc678621" name="TestRuleListLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="fe828985-23d8-3211-2cb9-b011447a682f" name="TestRootRoot2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ea7939ea-06de-ac31-a959-dd830e6a5573" name="TestMissingSetInSimpleDecl" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="f10911aa-c12d-862d-326f-c8e86e247a64" name="TestComplicatedMelange" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="dcfce0d1-02bf-0da2-6fa4-a34b08781535" name="TestRuleListLabelBang" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="2f26a21b-39b9-f3ab-5eae-14c26ef6711d" name="TestTokenListInSingleAltBlock" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="840ae36e-7712-1f93-10b4-94711fc649fb" name="TestWildcardBangWithListLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="fdecd360-7e42-bb92-f750-4adf3c4538fd" name="TestInvokeRuleAsRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="8bd77650-4dd6-ab59-ea7d-a75bd29e384b" name="TestNotSetWithListLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="fb17cdae-8d68-359a-c4d6-07cc2484283c" name="TestRuleInvocationRuleRootInLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3b18c550-33fc-2674-176d-ce9e6cf55421" name="TestNotSetRootWithLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="40411c28-836f-1908-3d85-30f2a83a01db" name="TestSimpleRootAtOuterLevel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="11ae280f-c1fc-508e-b0b4-f649808af21b" name="TestTokenListLabelRuleRoot" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="382cf18e-0996-fdbe-c792-8f95d0707acf" name="TestSetRootWithLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0616c7e5-171c-e1c7-a977-22e930b66e87" name="TestInvokeRuleAsRootWithLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="dd8aa6ef-a99d-29ee-ef8c-e768cc75b3ed" name="TestMissingFirstTokenGivesErrorNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="d0fe291e-7b13-50c2-ba90-974a745a77c7" name="TestReturnValueWithAST" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+    </TestLinks>
+  </TestList>
<TestList name="Options" id="e8c24227-14f9-46c8-bd97-aa5f76c4897b" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
<TestLink id="9529c260-1459-bdde-3053-87774287b74f" name="TestNullValueAndNullOption" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1416,11 +1630,10 @@
<TestLink id="694108ad-307f-1c27-6ac1-d9f3d0b7fa47" name="TestSeparatorWithNull2ndValueAndNullOption" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Semantic predicates" id="e9bca924-69b5-47ed-b2d1-6bf19252b829" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Semantic predicates" id="e9bca924-69b5-47ed-b2d1-6bf19252b829" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="aa4b592f-abc8-b749-eb82-d66598e809c9" name="TestIgnoresHoistingDepthGreaterThanZero" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="19743391-7589-ae9b-5aa7-57bfe34f0973" name="TestPredsUsedAfterK2FailsNoRecursionOverflow" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="55748c54-32c2-b1a0-d7ec-a9adac245c16" name="TestOrPredicates" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="dff20587-615d-e394-3b98-e9371cf23f1f" name="TestIgnorePredFromLL2AltPredUnionNeeded" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e363d875-c5ee-387d-7809-5be03d084ba0" name="TestPredicatedLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="40466cc3-4581-209d-ae3a-fc7990e7934a" name="TestGatedPredDoesNotForceAllToBeGated" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1429,7 +1642,6 @@
<TestLink id="8de9ad84-8e8e-4fb9-8406-75d605a8b70b" name="TestIncompleteSemanticHoistedContext2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="30438ef2-938f-5058-2078-490f2f95a1f2" name="TestLL_1_Pred" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="3de4032c-ece2-f149-4cae-32b3203513d8" name="TestLexerMatchesLongestMinusPred" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="e6c1572b-40db-9193-e10e-8ec99945e098" name="TestIncompleteSemanticHoistedContextInFOLLOWk2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6985d64b-a39f-dcf9-9970-460cdedc1243" name="TestUniquePredicateOR" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="9a6361f9-2981-7edc-8710-d32f3879af0f" name="TestLL_2_Pred" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="bf0d267b-e412-df0c-e549-da20aa8a09d4" name="TestIgnorePredFromLL2AltLastAltIsDefaultTrue" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1444,16 +1656,18 @@
<TestLink id="46f7afe0-8783-cddd-dd29-f7d420c9822c" name="TestIncompleteSemanticHoistedContextInFOLLOWDueToHiddenPred" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="69138466-9b81-764a-4631-1cd5529249c5" name="TestLexerMatchesLongestThenTestPred" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="382c26ed-819f-d427-bfca-18dbf401e615" name="TestIncompleteSemanticHoistedContextk2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="002f817d-58f4-5cdf-14ed-e3934a936372" name="TestPredWithK1" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="e6c1572b-40db-9193-e10e-8ec99945e098" name="TestIncompleteSemanticHoistedContextInFOLLOWk2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1e6cdbc9-09d4-7273-b8ac-1da0b121aebb" name="TestGatedPredInCyclicDFA" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d87e5abf-f971-d8b1-4053-e9785b4cd4f9" name="TestLeftRecursivePred" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="d295b48c-2f64-9a17-ea68-e7c4c2988b79" name="TestAndPredicates" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8d340762-ab00-fe9a-db5b-22dc31fa83fc" name="TestGatedPred" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c69f5e6f-f537-72a7-f47b-98b671f947cd" name="TestLL_1_Pred_forced_k_1" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e1131b72-3715-e4f1-83e4-20e09a9fd2f1" name="TestGatedPredHoistsAndCanBeInStopState" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="df34d692-ece3-46c5-1f86-2fdb70e82622" name="TestHoist2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="002f817d-58f4-5cdf-14ed-e3934a936372" name="TestPredWithK1" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="bbe55f07-401e-0eff-60b6-977996758bf9" name="TestSemanticContextPreventsEarlyTerminationOfClosure" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b06bc3bd-377e-c4f4-2c3a-1401985b5b4f" name="TestIncompleteSemanticHoistedContext" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="d295b48c-2f64-9a17-ea68-e7c4c2988b79" name="TestAndPredicates" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="55748c54-32c2-b1a0-d7ec-a9adac245c16" name="TestOrPredicates" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a4e3adb9-9095-bb00-cd76-c4382dad475c" name="TestORGatedPred" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ae4ade20-6a95-59ea-d8a7-9df2870df720" name="TestIgnoresPredsHiddenByActionsOneAlt" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="836c3c14-7d1c-c0b9-63dc-425e6be9a543" name="TestIgnoresPredsHiddenByActions" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1516,12 +1730,11 @@
<TestLink id="e7e9c8bb-5462-fcf8-9bb1-274f6b122500" name="TestInclude" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="StringTemplate" id="f5f852b3-d8bb-4b03-bbb1-b9184f36badc" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="StringTemplate 3" id="f5f852b3-d8bb-4b03-bbb1-b9184f36badc" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
<TestLinks>
<TestLink id="0e40fe7a-160c-53ac-e4d2-629b58a77794" name="TestNoDotsInAttributeNames" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5857e209-7452-7f2f-bf58-aad9a0a21c4a" name="TestElseIfClauseAngleBrackets" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="a476faff-8e37-cb1d-5a02-b60d5df51626" name="TestFirstOp" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="9ee8a781-7ff5-a372-91de-15801fd31576" name="TestNestedIndent" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="bd744a9a-9c7a-60c1-66b2-c2138c55aad8" name="TestDefaultArgumentAsTemplate2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0cca0749-d905-b00d-edb6-7414545e579e" name="TestMultiLevelInheritance" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e32880cf-0ed3-afc2-1de3-06d97ea18279" name="TestEmptyIteratedValueGetsSeparator" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a9c71eca-2007-73da-d1b5-ba0847ad8b3c" name="TestChangingAttrValueRepeatedTemplateApplicationToVector" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1531,11 +1744,9 @@
<TestLink id="c4e35019-44a4-8027-12b1-b029dc7b726f" name="TestElseIfClauseAndElse" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b555c6a5-546c-25e8-e3ae-aac466add421" name="TestReUseOfRestResult" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="4444e888-11e5-18dd-ca7f-dd500680a28a" name="TestCannotFindInterfaceFile" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="d3242c5a-ecff-32f6-9420-0f38cfed35b5" name="TestDeliberateRecursiveTemplateApplication" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0d313f6e-6d2d-7d3b-f776-e0a45d71cbb7" name="TestUnicodeLiterals" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="51643f13-8f84-493e-703e-2b8887edf319" name="TestIFCondWithParensDollarDelimsTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a46646c2-93fc-8a96-960a-4b726279e182" name="TestEmptyListNoIteratorGetsNoOutput" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="2a6a36fb-2e47-23de-8c49-ddf948e4cb10" name="TestRepeatedApplicationOfTemplateToSingleValuedAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e6e18a17-daf3-a1ba-64e5-339b3b2de911" name="TestLineBreakNoWhiteSpaceDollar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1192c9df-1c93-10b5-f05a-fe1d8206d7e2" name="TestRegionRefWithDefInConditional" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d4959251-9d72-f88f-6142-0085686cab54" name="TestComplicatedSeparatorExpr" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1543,7 +1754,6 @@
<TestLink id="149c6f4d-d751-5fe1-1039-0aa44cec3b26" name="TestMissingEndRegionError" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="27e7e7e9-12ae-b8a9-efbf-9a21ad900341" name="TestMapViaEnclosingTemplates2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c2f33561-6e25-32d6-ce55-3af54a96997a" name="TestStripOpOfListWithNulls" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="c4c9fb8b-d75f-a3f1-6807-113648432512" name="TestComplicatedIndirectTemplateApplication" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="04c9f0ea-2cbb-5c67-1375-23cec5b98d87" name="TestSuperReferenceInIfClause" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="483db2c4-b830-2542-59d4-3edcc4a01f3f" name="TestTemplateArgumentEvaluatedInSurroundingContext" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="af0c6ab6-f1d1-bf9c-4144-3936b3b46b30" name="TestHashMapPropertyFetch" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1553,26 +1763,26 @@
<TestLink id="9d913d03-4d17-cade-7892-d9660ab1fe52" name="TestArgumentContext" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="67c65aad-667c-e9ee-d234-91b8f641af44" name="TestRendererWithFormatAndSeparatorAndNull" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b004928a-6dd8-8f0d-44e5-5d8ada3205b7" name="TestLineBreakNoWhiteSpace" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="cee342a7-b038-5ed3-900f-6c49761ad185" name="TestAngleBracketsNoGroup" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="adf88771-bf7b-c919-057a-b50c2687593d" name="TestLineBreak2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c97bb1fe-5c48-983f-8519-b7ca437ae7a8" name="TestSimpleIndentOfAttributeList" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="fbb9f06e-4ed4-6f5a-123e-60b0c1bcbd9b" name="TestImmediateTemplateAsAttributeLoop" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="443e83b2-f67c-b678-33fa-68df8822fe43" name="TestEscapeEscape" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b3be3fe3-488c-8c74-397e-bfd1571f0f84" name="TestElseClause" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="70e55fc7-1a2f-4259-6af4-a2bd53f12aa1" name="TestImplicitRegionRedefError" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a569e026-43cb-0948-8053-6dbdb46f9c28" name="TestDefaultArgumentImplicitlySet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f5735b8b-fe94-0781-d293-2f93b1db9b72" name="TestApplyTemplateWithSingleFormalArgs" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5869adb1-b072-82ce-52fb-1b13c2935211" name="TestFortranLineWrap" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e0f6648c-8c62-43aa-95ba-8a36755dcc34" name="TestEmbeddedRegionRefWithNewlinesAngleBrackets" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="3a2c2890-7cee-c526-5ec2-f857df1a5959" name="TestParallelAttributeIterationWithSingletons" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="77dd6188-175c-cb70-edf0-29b0f0e0d092" name="TestLineWrapWithDiffAnchor" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="2e7c7cdb-9905-d568-bbd2-ef215f849489" name="TestApplyTemplateToSingleValuedAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5ef6e900-d281-e909-9452-583abb04d15e" name="TestIndentBetweenLeftJustifiedLiterals" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="70b3ed25-62a0-1804-70ec-247ad34e0078" name="TestSizeZeroOnLineByItselfGetsNoOutput" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b29aecbd-473b-51c8-a42d-26ba15632c4e" name="TestUndefinedDefaultAttributeReference" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="cc61811d-b9ae-2e07-0a62-e55662d0e2a0" name="TestMultipleRefsToListAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4f472302-32bf-ea13-3c13-0d767d36f1d1" name="TestRepeatedRestOp" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="919c992f-9b4e-a30f-47cf-c60b2071ccd5" name="TestLengthOp" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e4fb9edf-432a-9c5d-c6db-e272ecc4255f" name="TestSingleValuedAttributes" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="4460f2ff-81f1-53d5-7521-3715705174e1" name="TestArgEvaluationContext" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ab6d943d-7382-f7c2-3ddc-2d26ba9d9405" name="TestCatListAndSingleAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6a77e947-a01d-4dc2-af73-73e6b3b48477" name="TestApplyAnonymousTemplateToAggregateAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f1a6a0f1-900f-d420-dd46-9729b5c2381c" name="TestIndex0VarWithMultipleExprs" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="bf6b2f46-3908-961f-e5e7-3517a59063e7" name="TestArgumentsAsTemplatesDefaultDelimiters" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1584,9 +1794,9 @@
<TestLink id="47c8b938-dae1-ae21-09f3-ce047342a082" name="TestIncomingListsAreNotModified2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="256b263e-8c2c-034e-6ebc-08a73e488af1" name="TestNullValueInListNoNullOption" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="32dd044c-12f4-c9ce-8d91-9058c24886b8" name="TestAnonTemplateArgs2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="c4c84799-6f36-2c1c-5a30-4327eda77e4b" name="TestLineWrapCharAfterWrapIsNewline" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="9a0b0dd3-6e05-78af-3650-ed05964de683" name="TestParallelAttributeIterationWithDifferentSizes" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a981d7a7-cc3b-2290-49ff-089b51174505" name="TestMapViaEnclosingTemplates" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a446aafa-acca-edbd-8f20-5b7a14a41c56" name="TestMissingEndDelimiter" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5f67f7cf-a999-fbc5-b515-62278e984002" name="TestApplyAnonymousTemplateToArrayAndMapProperty" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="4b179b23-fe3a-f60e-6eed-ebc6dfebb9e1" name="TestAnonymousTemplateAccessToEnclosingAttributes" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="9678c103-5000-a8ee-6f10-e4c2e79713b8" name="TestNullListGetsNoOutput" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1612,11 +1822,12 @@
<TestLink id="0b470a08-80a8-c680-aca5-1d03d8ca0582" name="TestInterfaceFileFormat" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f2dd8fa5-3bcc-b702-8245-50dd958f50ae" name="TestNewlineNormalizationInTemplateStringPC" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2c507847-8169-53fb-1357-f4a85afa74a9" name="TestNullOptionHasEmptyNullValue" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="dcaa0fea-0222-0465-d575-35a6109e1aed" name="TestReUseOfCat" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f7c7b455-75f9-a11e-0f76-b6058ac8e452" name="TestSingleExprTemplateArgument" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="14f693ae-6c1f-7535-1a1b-91403b3b80a8" name="TestSuperRegionRefError" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="43b6155b-695f-15eb-ed3a-ae06eac53b93" name="TestGroupFileFormat" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1751873f-8ce2-a033-c222-89cc58156464" name="TestTemplateRedef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="c021b968-b9a5-cac6-78a9-f9d437703abf" name="TestNullIndirectTemplateApplication" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c4c9fb8b-d75f-a3f1-6807-113648432512" name="TestComplicatedIndirectTemplateApplication" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ce0f83ae-b6ca-e5bf-e7a7-86ea1c6bcdf1" name="TestCat2Attributes" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5d8e1c40-859f-debc-b37e-8b81d09badda" name="TestNullOptionSingleNullValue" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f8aba869-af5d-23c5-a9e2-c0ec9c630f4b" name="TestMap" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1626,7 +1837,6 @@
<TestLink id="8ff45b62-6c96-985c-4755-cc81d673d79a" name="TestOverrideThroughConditional" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1aba3dcf-8f20-4d77-d34d-08751792b3e5" name="TestCat3Attributes" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5e1ccf03-3f15-8bc4-f85b-cadc5b044a49" name="TestFirstWithCatAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="dec05f46-1133-5e06-afcc-54727d2de8fa" name="TestAnonTemplateWithArgHasNoITArg" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="96b0f408-1310-1766-b8df-e8633d03edca" name="TestDoNotUseDefaultArgument" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="243a05c4-8989-433b-8f28-757fa684d625" name="TestExpressionAsRHSOfAssignment" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="4775aa30-de07-fbec-a539-34281b6a4696" name="TestSingleExprTemplateArgumentInApply" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1636,8 +1846,9 @@
<TestLink id="a970d0e7-1b59-9997-fcb8-10677ac4ce45" name="TestStringCatenationOpOnArgWithEqualsInString" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8dc95758-39d5-4081-72bd-d3706e472666" name="TestSizeZeroButNonNullListGetsNoOutput" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ef3969bd-8c2f-1ba3-66fa-a2a4837cc834" name="TestMapDefaultValue" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4b6bcdf0-9bff-e7e6-9ece-943feb13cebe" name="TestRendererForST" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="4bb829e0-d03e-a757-d584-b444bff03543" name="TestRegionRefAngleBrackets" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="4f472302-32bf-ea13-3c13-0d767d36f1d1" name="TestRepeatedRestOp" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c0113798-3953-f36a-8afe-801c24cae17b" name="Test3LevelSuperRef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="3e65262d-4c3d-7d51-d2be-ca2ece434589" name="TestStringLiteralAsAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="aded18b6-aeae-edc9-3abb-3dc63b448595" name="TestLengthOpOfListWithNulls" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8ce7fd07-d4e3-1e43-6a12-fd49d7668086" name="TestMapValuesAreTemplates" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1649,9 +1860,10 @@
<TestLink id="e0e8a0f2-9f19-4b59-3cd1-e94ec3c31088" name="TestNullValueInListWithTemplateApply" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="4d3bf45c-3b92-4b79-bd5e-e37be6694fc7" name="TestNullIndirectTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="fc342ba6-ff8c-1baa-9121-fe8e63b11b10" name="TestMissingEndRegionErrorAngleBrackets" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="964dcd2f-b572-3c4e-4b54-0576c281c4ce" name="TestCombinedOp" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ee95beeb-c729-40a7-3527-db3303487b72" name="TestApplyAnonymousTemplateToMapAndSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="250b81e1-0f27-15dc-9699-41b3e8fef9d7" name="TestAnonTemplateOnLeftOfApply" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="dcaa0fea-0222-0465-d575-35a6109e1aed" name="TestReUseOfCat" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="21d28793-27eb-a41c-c494-21caa0a80527" name="TestAlternatingTemplateApplication" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c9c5b11a-7a30-077c-e712-8773a1ad20dd" name="TestNestedOp" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="428abed9-a441-4412-265c-3dc3517ba6e4" name="TestUndefinedArgumentAssignmentInApply" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="4b4f34bf-7676-70ac-9131-6c5ece69ae77" name="TestLengthOpOfStrippedListWithNullsFrontAndBack" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1666,19 +1878,19 @@
<TestLink id="37116ca3-8f6d-e51d-0d43-c93310de4dba" name="TestLineWrap" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a89031af-01c2-2f51-5b31-f990ca048bdc" name="TestCatWithIFAsElement" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a922fbdf-9eb6-d0b2-ac7c-abdb0c788068" name="TestMissingInheritedAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="c259730c-3aef-8d4f-1829-abbcfdd2927b" name="TestOverriddenRenderer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="35a1504e-e452-5273-839f-5a6a51fc0887" name="TestEscapesOutsideExpressions" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="15503b07-90e5-150e-1fac-f5b7efba0b65" name="TestSubtemplatesAnchorToo" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="097c5d6f-a5d2-79a3-1fa5-1efabee363c0" name="TestIFBoolean" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="f6052295-fc31-35d3-176c-2f8e2dfda847" name="TestRegionOverrideRefSuperRegion3Levels" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="2a6a36fb-2e47-23de-8c49-ddf948e4cb10" name="TestRepeatedApplicationOfTemplateToSingleValuedAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="63916867-335d-1261-05b2-a6d63ab3883a" name="TestMissingInterfaceTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2b9f7786-8950-cbf9-3c9e-c92a92fa8035" name="TestDefaultArgumentAsTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="631b91f4-26cf-e556-330c-f90615535fd4" name="TestListAsTemplateArgument" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="4d39d3a0-dfb1-4738-8822-426318270f74" name="TestDefaultArgumentManuallySet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a8441696-c95e-89b1-20c3-9c7941149f03" name="TestCatListAndEmptyAttributes" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c669ee0c-f106-2f02-eff4-87c41738c4fc" name="TestCharLiterals" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6676345c-c826-a7c5-c536-f00419b30e33" name="TestRegionRefWithImplicitDefInConditional" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5be7d853-a933-a454-e09d-b2b8770569fa" name="TestNewlineNormalizationInTemplateString" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6cc5e0c3-84f5-a0a6-8081-0db7a6c6dff1" name="TestNonNullButEmptyIteratorTestsFalse" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="ab6d943d-7382-f7c2-3ddc-2d26ba9d9405" name="TestCatListAndSingleAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4460f2ff-81f1-53d5-7521-3715705174e1" name="TestArgEvaluationContext" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="eef8e6a4-cee6-ebc9-4cfc-195a925d7910" name="TestEmbeddedComments" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="928ab338-fb07-90c1-8f11-3f60fc826e67" name="TestNestedIF" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e5022a58-86aa-7910-5fae-f58e974e663c" name="TestRegionOverride" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1691,12 +1903,12 @@
<TestLink id="83c1f357-60c6-665c-5e75-d48f971ffe05" name="TestChangingAttrValueTemplateApplicationToVector" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ad2d0887-2e56-8843-9595-92cf8f6dd276" name="TestLineWrapForAnonTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="3ca99b12-a84a-950f-6502-05ae73c658be" name="TestInvokeIndirectTemplateWithSingleFormalArgs" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="3507b32b-85bd-7340-a16d-e949e52fa290" name="TestIndentBeyondLineWidth" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1d70c2d6-3982-5823-3adc-87dc117f917f" name="TestLengthOpNull" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="61b5db70-d8cc-1470-b37c-ea660c46e9c4" name="TestLineBreakDollar2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f23b09cd-4550-eedd-6d44-fef66a588383" name="TestParallelAttributeIterationWithNullValue" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a2e481eb-2d75-8952-c787-604eed023296" name="TestTemplateParameterDecls" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="197a6bc7-8a27-ba13-89be-3ac61a9c5112" name="TestIndentOfMultipleBlankLines" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4881272a-52d7-0980-7f58-244e944a35ab" name="TestLineWrapEdgeCase" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f9a345d7-799f-d72f-8154-2af80d30a62d" name="TestExprInParens" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0ab5d1f3-1a48-15ce-f7ec-09892d91aa78" name="TestLineWrapInNestedExpr" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="74402ff1-4349-e950-e5e5-5f83780b10ff" name="TestMapKeysWithIntegerType" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1704,31 +1916,32 @@
<TestLink id="2fcc3c7e-67c5-ce2f-55f3-479dae04182e" name="TestLineBreak" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ca6958f1-c4a9-f425-5ffd-d007df4873f9" name="TestLineWrapForAnonTemplateAnchored" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="02128320-6ac5-4e22-6fa1-d6f3da55ae40" name="TestEmbeddedCommentsAngleBracketed" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0b904660-91db-cf1b-e6a9-25138fff3570" name="TestComplicatedInheritance" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="266706f8-c10d-098a-1819-7c98baeca8ca" name="TestFirstWithListOfMaps" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d5356540-edc4-7ff8-30d5-cf49b1db2f6c" name="TestMapDefaultIsDefaultString" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="0b904660-91db-cf1b-e6a9-25138fff3570" name="TestComplicatedInheritance" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="afdd665a-7b19-fb41-14cc-ca2e56cb7e2a" name="TestLengthOpOfStrippedListWithNulls" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a055bddb-4395-9d9f-7175-f7c79c93931c" name="TestDefaultArgsWhenNotInvoked" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="67f65178-38cb-28d1-331e-c666d434a3a7" name="TestSizeZeroOnLineWithIndentGetsNoOutput" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6d8bc4c1-abd1-515d-cd43-2dc489eb7e67" name="TestNullOptionSingleNullValueInList" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d23e20b4-74ca-7088-68de-8516a694f6a2" name="TestNullSingleValueWithTemplateApply" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="964dcd2f-b572-3c4e-4b54-0576c281c4ce" name="TestCombinedOp" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="c0113798-3953-f36a-8afe-801c24cae17b" name="Test3LevelSuperRef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1429e05c-8f33-8acb-543c-3b54e356fb21" name="TestAngleBracketsWithGroupFile" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c259730c-3aef-8d4f-1829-abbcfdd2927b" name="TestOverriddenRenderer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d06266d0-7733-e1ee-d987-7286bc49f686" name="TestRestWithOneAttributeOp" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1ad0248b-14c8-e974-0ebd-3f14d84b44bf" name="TestGroupSatisfiesSingleInterface" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1316fede-446f-0add-4fb8-b9e968752433" name="TestTemplateAlias" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8819bef6-80b4-55a8-ae24-9d8598bfb1bb" name="TestUndefinedAttributeReference" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="b33492b7-2c96-5fe1-49ae-0cd5a946a058" name="TestCatWithNestedTemplateApplicationAsElement" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a476faff-8e37-cb1d-5a02-b60d5df51626" name="TestFirstOp" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="73271f08-f68e-51b9-dbb3-0807a70a031f" name="TestTruncOp" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d0901ffa-9fae-84d5-36e2-e3cdc4153535" name="TestDefaultArgumentImplicitlySet2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="97921ecd-863e-5aa2-03ab-8c637a327788" name="TestNestedAnonymousTemplates" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="97be06d7-a77a-ab06-46cc-c421bcff632e" name="TestDefaultArgumentInParensToEvalEarly" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8dec30e2-8893-cd6c-d0f8-4796be2169b5" name="TestEmbeddedRegionRedefError" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="4b6bcdf0-9bff-e7e6-9ece-943feb13cebe" name="TestRendererForST" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c021b968-b9a5-cac6-78a9-f9d437703abf" name="TestNullIndirectTemplateApplication" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0419b0ae-66ac-ef6b-71d7-80b472446750" name="TestParenthesizedExpression" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7a920609-3def-0da1-6b02-d5418e3257c0" name="TestLastOp" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="943804f7-7dc8-ea47-471e-2cc814862d4c" name="TestCollectionAttributes" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="92102684-25a7-a225-7d8f-f68cff24f10c" name="TestHashMapPropertyFetchEmbeddedStringTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="2574e754-8a62-a696-5a41-91cfa1331ca7" name="TestApplyTemplateToSingleValuedAttributeWithDefaultAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="9ee8a781-7ff5-a372-91de-15801fd31576" name="TestNestedIndent" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7e0bc3e2-04bb-5d7d-ef47-7b94689b1dc6" name="TestNullValueInListWithTemplateApplyNullFirstValue" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1fdeebe9-53e0-103a-b4d4-9c73da34fac4" name="TestEmptyListGetsNoOutput" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="48cacd73-7a54-a727-f0e3-a0e316f991a6" name="TestLazyEvalOfSuperInApplySuperTemplateRef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1737,10 +1950,9 @@
<TestLink id="20989214-9031-a9f8-60d8-2a4b5a07715a" name="TestEscapeEscapeNestedAngle" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="11a84016-83c2-f9a3-4f54-23f2d7aea8dc" name="TestNullTemplateToMultiValuedApplication" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2d0da3dd-8a0a-676e-5a7f-b3d5746d2d5b" name="TestIndex0Var" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="b7331a9f-474b-5e41-e936-33df48846e1e" name="TestRepeatedApplicationOfTemplateToMultiValuedAttributeWithSeparator" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="f6052295-fc31-35d3-176c-2f8e2dfda847" name="TestRegionOverrideRefSuperRegion3Levels" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2b3eaace-a9b2-0537-1caa-911c9386dae9" name="TestPassThroughAttributes2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="1429e05c-8f33-8acb-543c-3b54e356fb21" name="TestAngleBracketsWithGroupFile" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="ee0f7ff9-3d7a-c304-0e2b-32a134dd1223" name="TestParallelAttributeIterationWithDifferentSizesTemplateRefInsideToo" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1d53a0a8-3cfb-d55e-db56-9902e36c01e4" name="TestMissingOptionalInterfaceTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5b45445b-7207-a01f-9573-31ac431dabff" name="TestIndirectTemplateWithArgsApplication" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8cb85f0d-3414-e336-6106-ce55664eae10" name="TestRestOp" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="9c81357e-089d-1b9b-5958-5a6d0376b008" name="TestNewlineNormalizationInAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1752,7 +1964,7 @@
<TestLink id="4105c938-02b3-7318-a132-697817798eb9" name="TestEmptyGroupTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="3e1641b4-06ac-ae2b-2551-abbbc095af98" name="TestFindTemplateInCLASSPATH" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="aaa39864-e027-7e59-3b03-672d32119a9a" name="TestMultipleAdditions" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="8fee7b2a-9264-fc2b-054a-7a02d1e78372" name="TestPassThroughAttributes" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="2574e754-8a62-a696-5a41-91cfa1331ca7" name="TestApplyTemplateToSingleValuedAttributeWithDefaultAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1b59210a-f614-837c-21b4-c22a81dbb203" name="TestLineWrapForAnonTemplateComplicatedWrap" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8b569889-e592-e96c-14c2-0a1a23a3efc1" name="TestMapHiddenByFormalArg" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c3c59071-877a-34e3-c436-4006b05c73c6" name="TestIFTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1765,7 +1977,7 @@
<TestLink id="ab496999-28ef-76c1-46c8-55d48c735bfa" name="TestEmbeddedRegionRefAngleBrackets" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a0924cba-d4f2-5d96-8d6b-5a414cdfcefa" name="TestWhiteSpaceAtEndOfTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="212391ae-3588-2620-c372-28b9f4535a4a" name="TestNoGroupLoader" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="13ebfc90-2464-9f8f-1a22-2f86d3463083" name="TestDefaultArgument2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="dec05f46-1133-5e06-afcc-54727d2de8fa" name="TestAnonTemplateWithArgHasNoITArg" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="738cbe6c-bf93-b177-0249-9d11a0dc1f51" name="TestLineBreakDollar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="fce7c8b6-1453-40f6-a2d9-b980f947a5a7" name="TestApplyTemplateNameExpression" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="57834834-e7dd-eb16-499e-1c24d2c0de6a" name="TestEscapedTemplateDelimiters" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1773,47 +1985,47 @@
<TestLink id="b54469aa-62ce-0a0a-4a2e-ba93b6652d9b" name="TestMismatchedInterfaceTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="2ba3eb7f-26c5-991b-01af-f244ebf57a70" name="TestRecursion" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="10ea1f1c-f002-3ca7-3ad8-1bb0bbc62c8e" name="TestLineWrapWithNormalizedNewlines" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="a1493dcb-6617-e844-560b-f9032cf95b61" name="TestApplySuperTemplateRef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ee0f7ff9-3d7a-c304-0e2b-32a134dd1223" name="TestParallelAttributeIterationWithDifferentSizesTemplateRefInsideToo" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6333032c-25d9-4497-f015-5d9ecd3d81ae" name="TestEmbeddedRendererSeesEnclosing" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f4b13414-9c10-2fca-dcf3-bbc9e547c4ed" name="TestLineWrapLastCharIsNewline" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="8fee7b2a-9264-fc2b-054a-7a02d1e78372" name="TestPassThroughAttributes" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0a4bb10a-a089-201b-d895-3f320c471b11" name="TestMapKeyLookupViaTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1e34e569-da63-f98a-279d-eb62f8336713" name="TestArgumentsAsTemplates" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e4ca4742-742a-ce8f-80d2-3c7d4718b07d" name="TestOverrideInheritance" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b3aab89d-19f2-2d07-2c0e-8cb27868e8fb" name="TestRegionRefWithDefAngleBrackets" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="d8f8ad81-26c4-6434-ada1-ee281d9b70ef" name="TestComputedPropertyName" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="bd744a9a-9c7a-60c1-66b2-c2138c55aad8" name="TestDefaultArgumentAsTemplate2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="1dc8b826-d5dc-df42-f3a5-38d33f122cbf" name="TestMapMissingDefaultValueIsEmpty" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="15503b07-90e5-150e-1fac-f5b7efba0b65" name="TestSubtemplatesAnchorToo" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="d3242c5a-ecff-32f6-9420-0f38cfed35b5" name="TestDeliberateRecursiveTemplateApplication" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c4c84799-6f36-2c1c-5a30-4327eda77e4b" name="TestLineWrapCharAfterWrapIsNewline" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b9d92187-f0a3-5c71-f6f2-1259ffe5e6f9" name="TestIncomingArraysAreOk" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="7fa290c3-80e6-fb1e-a971-93acc401075a" name="TestMissingIteratedConditionalValueGetsNoSeparator2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="925dc2de-f248-47b6-dbbc-75397ea5f2e7" name="TestAnonTemplateArgs" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="691feccd-341a-f324-6e65-df6d1eb32123" name="TestParallelAttributeIterationWithMissingArgs" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="be90ab80-fd0b-3923-540d-be7c9b70da1e" name="TestDateTimeFormatting" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5c36232e-2025-f9bc-2d25-0664b178b9ac" name="TestNestedIndentedExpr" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="57deddf3-95b9-1eb3-6923-0662ccd362af" name="TestIndentOfMultilineAttributes" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="3b65d607-cbcc-5f74-b144-7cd384697e40" name="TestBackslash" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="a446aafa-acca-edbd-8f20-5b7a14a41c56" name="TestMissingEndDelimiter" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="70e55fc7-1a2f-4259-6af4-a2bd53f12aa1" name="TestImplicitRegionRedefError" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="071e78bf-f23e-6bf9-cd8f-8c0b821be6b6" name="TestEmptyExprAsFirstLineGetsNoOutput" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="4a32f30a-220a-7343-4046-fee4a1ce7006" name="TestCatWithTemplateApplicationAsElement" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="13ebfc90-2464-9f8f-1a22-2f86d3463083" name="TestDefaultArgument2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="10bc0ffc-5548-6be4-fb76-aad2b8bf320b" name="TestMapDefaultStringAsKey" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="21d28793-27eb-a41c-c494-21caa0a80527" name="TestAlternatingTemplateApplication" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="3507b32b-85bd-7340-a16d-e949e52fa290" name="TestIndentBeyondLineWidth" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b8e0cb54-9199-5afe-4e00-071d76e71c46" name="TestLengthOpWithSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="3a69f99a-2dbb-423c-bd05-5baecad4c50a" name="TestRendererWithFormatAndSeparator" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="afdd665a-7b19-fb41-14cc-ca2e56cb7e2a" name="TestLengthOpOfStrippedListWithNulls" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="b7331a9f-474b-5e41-e936-33df48846e1e" name="TestRepeatedApplicationOfTemplateToMultiValuedAttributeWithSeparator" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="c5ae5510-0c02-7e11-d466-51c1cedd1bfd" name="TestDoNotInheritAttributesThroughFormalArgs" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="3d078d2f-efb6-5fac-9cdd-f7cd385ad5c0" name="TestRestWithLengthOneListAttributeOp" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a4cbd45c-445a-93d1-bd0d-d6a9404b3ab3" name="TestParallelAttributeIteration" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="11d12ffd-a7ed-e580-16c5-10d7a8f995af" name="TestFirstWithOneAttributeOp" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="757fc18c-d65c-dfdb-0237-3ea49e801835" name="TestListLiteralWithEmptyElements" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="a8441696-c95e-89b1-20c3-9c7941149f03" name="TestCatListAndEmptyAttributes" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="7fa290c3-80e6-fb1e-a971-93acc401075a" name="TestMissingIteratedConditionalValueGetsNoSeparator2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6b489eb6-c3da-e2aa-17c2-9396643c89ee" name="TestLengthOpWithMap" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="cee342a7-b038-5ed3-900f-6c49761ad185" name="TestAngleBracketsNoGroup" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4d39d3a0-dfb1-4738-8822-426318270f74" name="TestDefaultArgumentManuallySet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="54230e0c-daa3-7059-3a21-abeb80009840" name="TestSimpleInheritance" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="ae855ebd-043e-eadd-9108-e9bdcc6f21aa" name="TestElseIfClause2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="465c3cad-256e-7d9c-6257-8d38b3a07251" name="TestIndexVar" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="edda67dd-9e59-58d5-c255-291ed7e8364c" name="TestMapDefaultValueIsKey" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5053bace-5b38-aeb5-6ed7-11e60ebcfb3e" name="TestIndexVarWithMultipleExprs" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="95ecf7c0-820b-953a-88bc-b4b1707f8a1a" name="TestApplyAnonymousTemplateToMultiValuedAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="b33492b7-2c96-5fe1-49ae-0cd5a946a058" name="TestCatWithNestedTemplateApplicationAsElement" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="9baa2cc2-3507-0c5b-8255-37f2bf5bedae" name="TestIncomingLists" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ac731860-1873-3d56-dd2c-d379a9dd6b31" name="TestStripOpOfListOfListsWithNulls" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6e7e1492-2c92-9f42-fd6e-cb014f7ea9b2" name="TestBackslash2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1824,32 +2036,33 @@
<TestLink id="0f61ae2a-8f5a-0eb4-74ee-f3e51bd21a6f" name="TestGroupExtendsSuperGroupWithAngleBrackets" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="3e2634b3-762f-f3e3-790c-62536df0939d" name="TestMissingIteratedDoubleConditionalValueGetsNoSeparator" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="46c85b35-3efc-91c6-f122-92c3e7d3fcea" name="TestEmbeddedRegionRef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="4881272a-52d7-0980-7f58-244e944a35ab" name="TestLineWrapEdgeCase" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="2e7c7cdb-9905-d568-bbd2-ef215f849489" name="TestApplyTemplateToSingleValuedAttribute" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1dc8b826-d5dc-df42-f3a5-38d33f122cbf" name="TestMapMissingDefaultValueIsEmpty" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="147d2f91-a897-aee1-809e-1c35dccc6709" name="TestLineDoesNotWrapDueToLiteral" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a1493dcb-6617-e844-560b-f9032cf95b61" name="TestApplySuperTemplateRef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0a3162b0-40b8-0b94-bd7e-6e5de38e0317" name="TestIFCondWithParensTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="da61aa5a-5cce-16bb-ea63-d8517ae40fe8" name="TestDefaultArgument" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="38ff7db0-94cb-604a-3371-f405b9b058b2" name="TestRendererWithFormat" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="25280a52-1aac-d2b7-c101-624db74c912f" name="TestParallelAttributeIterationHasI" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="59a0974c-a88d-2c43-a7ea-cf26fb29c7bf" name="TestIteratedConditionalWithEmptyElseValueGetsSeparator" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="1d53a0a8-3cfb-d55e-db56-9902e36c01e4" name="TestMissingOptionalInterfaceTemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ae855ebd-043e-eadd-9108-e9bdcc6f21aa" name="TestElseIfClause2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="13856f52-70e4-a8ac-61e2-a5548f2da699" name="TestTemplateApplicationAsRHSOfAssignment" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6fe66374-8f72-d284-d1ba-1178e9910605" name="TestLengthOpPrimitive" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="454d0876-4cf3-f774-b65b-911e499fd00a" name="TestMapKeys" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Sets" id="f79900aa-8296-4e3b-8fcb-0d69c0ab01ee" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Sets" id="f79900aa-8296-4e3b-8fcb-0d69c0ab01ee" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
+      <TestLink id="8aafe02d-fbdc-32b2-c9b1-93c8932292ed" name="TestNotCharSetWithLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a4ac2110-5b31-753c-8e40-ae750f8d2f4f" name="TestStarLexerSingleElement" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="1d750629-fe45-78bf-97b4-4e0e32b2bf3c" name="TestParserNotToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="b3490bf4-e870-c163-1704-2c774592a99f" name="TestParserNotSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="c92076c0-e69d-6be9-1df2-058567e8925f" name="TestParserSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="71d474b3-be8f-4b58-7c3a-f0191bafc113" name="TestParserNotTokenWithLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a73eab39-9ee1-043e-60db-995d87b66106" name="TestStarSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="da32805d-e7e2-0d4a-7c05-9225770df4ed" name="TestLexerStarSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="f77b6f5c-a957-9958-5f25-25ac814a1f64" name="TestRuleAsSetAST" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a4f89e69-1dd9-ba05-907f-1e44f8c788da" name="TestNotCharSetWithRuleRef4" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="efbf5a9d-3769-726d-f4e6-7891af402c2d" name="TestNotCharSetWithRuleRef" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="8aafe02d-fbdc-32b2-c9b1-93c8932292ed" name="TestNotCharSetWithLabel" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="eaeb28d0-36d6-64f2-56ae-e3b3107f0761" name="TestPlusLexerSingleElement" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="6609a6a3-2f70-97ef-4c29-828948f27799" name="TestSeqDoesNotBecomeSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="4ab21f0f-e91e-dae9-717c-040b0dadcde4" name="TestLexerPlusSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ac8aeabb-45b2-db4f-4d5c-bcdbc6afa946" name="TestLexerOptionalSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1858,10 +2071,11 @@
<TestLink id="2712d6fd-b726-437d-571d-9497b72ad2bd" name="TestRuleAsSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="3b84dbe5-305e-cd8a-43f8-61e44310d3a0" name="TestOptionalSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7b8fbe2a-a472-4c24-3ede-6143e2faf537" name="TestNotCharSetWithRuleRef3" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="eaeb28d0-36d6-64f2-56ae-e3b3107f0761" name="TestPlusLexerSingleElement" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="f28171ba-9fac-91a7-b650-9aad6e8d06ff" name="TestOptionalSingleElement" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c92076c0-e69d-6be9-1df2-058567e8925f" name="TestParserSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="715bab0d-ec41-0c51-9560-53e48cf3796f" name="TestNotCharSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="33283cd8-b0f2-f592-4ecb-c2d2135484bc" name="TestPlusSet" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="f28171ba-9fac-91a7-b650-9aad6e8d06ff" name="TestOptionalSingleElement" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="1d750629-fe45-78bf-97b4-4e0e32b2bf3c" name="TestParserNotToken" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="e5162a38-9174-73dd-822a-3dba5a43618d" name="TestNotCharSetWithRuleRef2" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
@@ -1884,7 +2098,7 @@
<TestLink id="86c98704-50b5-3807-363e-00fbf9fc3073" name="TestMap" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Tree iterator" id="f8f7db26-2297-46ff-8bc0-ad483455ecde" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Tree iterator" id="f8f7db26-2297-46ff-8bc0-ad483455ecde" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="9391019f-2a71-eea6-7d6d-290328da11ca" name="TestAB" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="0020b8ea-d044-5a8b-4deb-2a8b69b87cbb" name="TestABC" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1896,21 +2110,25 @@
</TestList>
<TestList name="Indentation" id="fa3ee5f4-25ee-4cb9-9918-3b1f7ab8acb2" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
-      <TestLink id="41e204ec-85ef-6b3f-23d1-afb278ad2509" name="TestNestedIndent" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="c1774cab-5100-a96b-4152-d5d5645020ac" name="TestNestedIFWithIndentOnMultipleLines" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="8f8c55f7-abab-7a32-57d0-553bd7e57bdc" name="TestIFWithIndentAndExprWithIndentOnMultipleLines" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="bcada4f6-0e2c-da03-8815-cd440300cd72" name="TestSimpleIndentOfAttributeList" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="ffa5b37f-e188-4a2d-d231-5e7f33daeed3" name="TestIFWithIndentAndExprOnMultipleLines" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5e0d693a-c4c6-dbe5-72f2-89a1a2d74459" name="TestIndentedIFWithValueExpr" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="23633592-7a39-f14e-9833-747b3502b134" name="TestIndentedIFWithElse2" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="61a5ff00-eba2-8ddb-ba9c-d141a5cc2db6" name="TestIndentedIFWithNewlineBeforeText" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="41e204ec-85ef-6b3f-23d1-afb278ad2509" name="TestNestedIndent" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="1190b3ab-bf3f-c318-cb68-490ed4f23ab8" name="TestIndentBetweenLeftJustifiedLiterals" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="4a14a4a8-ade4-0a6b-7c9b-0d0137aee7d5" name="TestIndentedIFWithEndifNextLine" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="17d87118-99db-a819-6e3e-8679e5f764c2" name="TestIFWithIndentOnMultipleLines" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="ffa5b37f-e188-4a2d-d231-5e7f33daeed3" name="TestIFWithIndentAndExprOnMultipleLines" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="dcb7e4b6-f489-a557-0c71-e21bd2d45c85" name="TestIndentOfMultipleBlankLines" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5565911a-dc6e-18d5-89b5-bee1e6e253ec" name="TestIndentOfMultilineAttributes" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="5e2968be-7468-9eb3-0540-92ffaf264769" name="TestIndentedIFWithElse" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="8f8c55f7-abab-7a32-57d0-553bd7e57bdc" name="TestIFWithIndentAndExprWithIndentOnMultipleLines" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="dcb7e4b6-f489-a557-0c71-e21bd2d45c85" name="TestIndentOfMultipleBlankLines" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="c1774cab-5100-a96b-4152-d5d5645020ac" name="TestNestedIFWithIndentOnMultipleLines" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="7b519244-38c5-0de0-7364-d89cd88807c3" name="TestIFInSubtemplate" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="bcada4f6-0e2c-da03-8815-cd440300cd72" name="TestSimpleIndentOfAttributeList" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="8b8eebc5-4672-2b2c-435a-cfa0b165d3f4" name="TestIndentInFrontOfTwoExpr" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Tree node stream" id="fa4c5fec-1f21-41c1-b3cd-ee93c59c2878" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Tree node stream" id="fa4c5fec-1f21-41c1-b3cd-ee93c59c2878" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="a7f6ea17-b702-e48b-aba7-079aef404569" name="TestMarkRewindInMiddle" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="452bb313-1729-fb5f-e42a-62a01c63bb73" name="TestList" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1925,7 +2143,7 @@
<TestLink id="ac3c51c9-b3f0-6d84-d0fa-0baae00f6476" name="TestListWithOneNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Interpreted parsing" id="fa740596-5ef5-4716-a448-10fb44b16585" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Interpreted parsing" id="fa740596-5ef5-4716-a448-10fb44b16585" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="3bfcf512-887e-e507-acba-00389876cb5a" name="TestMismatchedTokenError" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="a4df44f9-dc79-9670-b27d-b19ef20d8329" name="TestSimpleParse" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
@@ -1933,7 +2151,7 @@
<TestLink id="10aba033-7c50-b07b-a5ce-95f4d04daf90" name="TestNoViableAltError" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Tree wizard" id="fe6d0beb-460c-4ebd-b41f-2ff740558c22" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
+  <TestList name="Tree wizard" id="fe6d0beb-460c-4ebd-b41f-2ff740558c22" parentListId="6d9b4d0f-553b-40f9-9d17-de844333034e">
<TestLinks>
<TestLink id="8f6b87a4-3e39-356b-7434-910704210083" name="TestSingleNodeWithArg" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="9b6683f3-11fc-0177-76ea-b2bb995baa5a" name="TestParseSingleNode" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
diff --git a/TestResults/antlr-3.1.1-runtime.jar b/TestResults/antlr-3.1.1-runtime.jar
deleted file mode 100644
index d90a086..0000000
Binary files a/TestResults/antlr-3.1.1-runtime.jar and /dev/null differ
diff --git a/TestResults/antlr-runtime-3.3.jar b/TestResults/antlr-runtime-3.3.jar
new file mode 100644
index 0000000..c516cb3
Binary files /dev/null and b/TestResults/antlr-runtime-3.3.jar differ
diff --git a/TestResults/stringtemplate-3.1b1.jar b/TestResults/stringtemplate-3.1b1.jar
deleted file mode 100644
index 02433c0..0000000
Binary files a/TestResults/stringtemplate-3.1b1.jar and /dev/null differ
diff --git a/TestResults/stringtemplate-3.2.1.jar b/TestResults/stringtemplate-3.2.1.jar
new file mode 100644
index 0000000..d0e11b7
Binary files /dev/null and b/TestResults/stringtemplate-3.2.1.jar differ

