commit 56abc3b68a9f502898a9f14766063ca12366a873
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Dec 14 11:16:58 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Dec 14 11:16:58 2009 -0800

C# Port:
* Merge 6403

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6512]

diff --git a/Antlr3.Test/ST4/TestCompiler.cs b/Antlr3.Test/ST4/TestCompiler.cs
index 0204e50..ca81cd1 100644
--- a/Antlr3.Test/ST4/TestCompiler.cs
+++ b/Antlr3.Test/ST4/TestCompiler.cs
@@ -2,6 +2,7 @@
{
using Microsoft.VisualStudio.TestTools.UnitTesting;
using StringTemplate;
+    using Antlr.Runtime.JavaExtensions;

[TestClass]
public class TestCompiler : StringTemplateTestBase
@@ -19,13 +20,13 @@
CompiledTemplate code = new Compiler().Compile(template);
string asmExpected =
"load_str 0, " +
-                "write, " +
+                "write 0 2, " +
"load_attr 1, " +
-                "write";
+                "write 3 8";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -35,11 +36,11 @@
string template = "hi <foo()>";
CompiledTemplate code = new Compiler().Compile(template);
string asmExpected =
-                "load_str 0, write, new 1, write";
+                "load_str 0, write 0 2, new 1, write 3 9";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , /foo]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -49,11 +50,11 @@
string template = "hi <a.b>";
CompiledTemplate code = new Compiler().Compile(template);
string asmExpected =
-                "load_str 0, write, load_attr 1, load_prop 2, write";
+                "load_str 0, write 0 2, load_attr 1, load_prop 2, write 3 7";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , a, b]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -63,12 +64,12 @@
string template = "<u.id>: <u.name>";
CompiledTemplate code = new Compiler().Compile(template);
string asmExpected =
-                "load_attr 0, load_prop 1, write, load_str 2, write, " +
-                "load_attr 0, load_prop 3, write";
+                "load_attr 0, load_prop 1, write 0 5, load_str 2, write 6 7, " +
+                "load_attr 0, load_prop 3, write 8 15";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[u, id, : , name]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -78,11 +79,11 @@
string template = "hi <name:bold>";
CompiledTemplate code = new Compiler().Compile(template);
string asmExpected =
-                "load_str 0, write, load_attr 1, load_str 2, map, write";
+                "load_str 0, write 0 2, load_attr 1, load_str 2, map, write 3 13";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, /bold]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -93,17 +94,17 @@
CompiledTemplate code = new Compiler().Compile(template);
string asmExpected =
"load_str 0, " +
-                "write, " +
+                "write 0 2, " +
"load_attr 1, " +
"load_str 2, " +
"map, " +
"load_str 3, " +
"map, " +
-                "write";
+                "write 3 21";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, /bold, /italics]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -113,11 +114,11 @@
string template = "hi <name:bold,italics>";
CompiledTemplate code = new Compiler().Compile(template);
string asmExpected =
-                "load_str 0, write, load_attr 1, load_str 2, load_str 3, rot_map 2, write";
+                "load_str 0, write 0 2, load_attr 1, load_str 2, load_str 3, rot_map 2, write 3 21";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, /bold, /italics]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -127,11 +128,11 @@
string template = "hi <name:{n | <n>}>";
CompiledTemplate code = new Compiler().Compile(template);
string asmExpected =
-                "load_str 0, write, load_attr 1, load_str 2, map, write";
+                "load_str 0, write 0 2, load_attr 1, load_str 2, map, write 3 18";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, /_sub1]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -141,11 +142,11 @@
string template = "go: <if(name)>hi, foo<endif>";
CompiledTemplate code = new Compiler().Compile(template);
string asmExpected =
-                "load_str 0, write, load_attr 1, brf 14, load_str 2, write";
+                "load_str 0, write 0 3, load_attr 1, brf 22, load_str 2, write 14 20";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -156,18 +157,18 @@
CompiledTemplate code = new Compiler().Compile(template);
string asmExpected =
"load_str 0, " +
-                "write, " +
+                "write 0 3, " +
"load_attr 1, " +
-                "brf 17, " +
+                "brf 25, " +
"load_str 2, " +
-                "write, " +
-                "br 21, " +
+                "write 14 20, " +
+                "br 33, " +
"load_str 3, " +
-                "write";
+                "write 27 29";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo, bye]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -178,20 +179,20 @@
CompiledTemplate code = new Compiler().Compile(template);
string asmExpected =
"load_str 0, " +
-                "write, " +
+                "write 0 3, " +
"load_attr 1, " +
-                "brf 17, " +
+                "brf 25, " +
"load_str 2, " +
-                "write, " +
-                "br 27, " +
+                "write 14 20, " +
+                "br 39, " +
"load_attr 3, " +
-                "brf 27, " +
+                "brf 39, " +
"load_str 4, " +
-                "write";
+                "write 35 40";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo, user, a user]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -202,23 +203,23 @@
CompiledTemplate code = new Compiler().Compile(template);
string asmExpected =
"load_str 0, " +
-                "write, " +
+                "write 0 3, " +
"load_attr 1, " +
-                "brf 17, " +
+                "brf 25, " +
"load_str 2, " +
-                "write, " +
-                "br 34, " +
+                "write 14 20, " +
+                "br 50, " +
"load_attr 3, " +
-                "brf 30, " +
+                "brf 42, " +
"load_str 4, " +
-                "write, " +
-                "br 34, " +
+                "write 35 40, " +
+                "br 50, " +
"load_str 5, " +
-                "write";
+                "write 47 49";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo, user, a user, bye]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -228,11 +229,11 @@
string template = "hi <name; separator=\"x\">";
CompiledTemplate code = new Compiler().Compile(template);
string asmExpected =
-                "load_str 0, write, load_attr 1, options, load_str 2, store_option 3, write_opt";
+                "load_str 0, write 0 2, load_attr 1, options, load_str 2, store_option 3, write_opt 3 23";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, x]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -242,11 +243,11 @@
string template = "hi <name; separator={, }>";
CompiledTemplate code = new Compiler().Compile(template);
string asmExpected =
-                "load_str 0, write, load_attr 1, options, new 2, store_option 3, write_opt";
+                "load_str 0, write 0 2, load_attr 1, options, new 2, store_option 3, write_opt 3 24";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, /_sub1]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -256,12 +257,20 @@
string template = "hi <name; anchor, wrap=foo(), separator=\", \">";
CompiledTemplate code = new Compiler().Compile(template);
string asmExpected =
-                "load_str 0, write, load_attr 1, options, load_str 2, " +
-                "store_option 0, new 3, store_option 4, load_str 4, " +
-                "store_option 3, write_opt";
+                "load_str 0, " +
+                "write 0 2, " +
+                "load_attr 1, " +
+                "options, " +
+                "load_str 2, " +
+                "store_option 0, " +
+                "new 3, " +
+                "store_option 4, " +
+                "load_str 4, " +
+                "store_option 3, " +
+                "write_opt 3 44";
string stringsExpected = // the ", , ," is the ", " separator string
"[hi , name, true, /foo, , ]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
@@ -272,11 +281,11 @@
{
string template = "<[]>";
CompiledTemplate code = new Compiler().Compile(template);
-            string asmExpected = "list, write";
+            string asmExpected = "list, write 0 3";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -285,11 +294,11 @@
{
string template = "<[a,b]>";
CompiledTemplate code = new Compiler().Compile(template);
-            string asmExpected = "list, load_attr 0, add, load_attr 1, add, write";
+            string asmExpected = "list, load_attr 0, add, load_attr 1, add, write 0 6";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[a, b]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -300,11 +309,11 @@
// compile as if in root dir and in template 'a'
CompiledTemplate code = new Compiler("/", "a").Compile(template);
string asmExpected =
-                "new 0, write";
+                "new 0, write 0 12";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[/region__a__r]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}

@@ -315,20 +324,12 @@
// compile as if in root dir and in template 'a'
CompiledTemplate code = new Compiler("/", "a").Compile(template);
string asmExpected =
-                "load_str 0, write, new 1, write";
+                "load_str 0, write 0 1, new 1, write 2 7";
string asmResult = code.Instructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[x:, /region__a__r]";
-            string stringsResult = Arrays.toString(code.strings);
+            string stringsResult = code.strings.ToElementString();
Assert.AreEqual(stringsExpected, stringsResult);
}
-
-        private static class Arrays
-        {
-            public static string toString(string[] array)
-            {
-                return "[" + string.Join(", ", array) + "]";
-            }
-        }
}
}

