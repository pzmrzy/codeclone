commit 3692580a42b87430f1cb82cdfc6219e7af077cc5
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Jun 20 10:28:04 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Jun 20 10:28:04 2011 -0800

(C# 3) ST4 merges from CL8375 to CL8643

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8683]

diff --git a/Antlr4.StringTemplate/Interpreter.cs b/Antlr4.StringTemplate/Interpreter.cs
index c3a172c..fab55f7 100644
--- a/Antlr4.StringTemplate/Interpreter.cs
+++ b/Antlr4.StringTemplate/Interpreter.cs
@@ -611,6 +611,8 @@ namespace Antlr4.StringTemplate
CompiledTemplate c = group.LookupTemplate(templateName);
if (c == null)
return; // will get error later
+            if (c.FormalArguments == null)
+                return;

foreach (FormalArgument arg in c.FormalArguments)
{
@@ -1449,7 +1451,11 @@ namespace Antlr4.StringTemplate

if (arg.DefaultValueToken.Type == GroupParser.ANONYMOUS_TEMPLATE)
{
-                    Template defaultArgST = group.CreateStringTemplateInternally(arg.CompiledDefaultValue);
+                    CompiledTemplate code = arg.CompiledDefaultValue;
+                    if (code == null)
+                        code = new CompiledTemplate();
+
+                    Template defaultArgST = group.CreateStringTemplateInternally(code);
// default arg template must see other args so it's enclosing
// instance is the template we are invoking.
defaultArgST.Group = group;
diff --git a/Antlr4.StringTemplate/Template.cs b/Antlr4.StringTemplate/Template.cs
index e911f9a..5bf664b 100644
--- a/Antlr4.StringTemplate/Template.cs
+++ b/Antlr4.StringTemplate/Template.cs
@@ -130,11 +130,6 @@ namespace Antlr4.StringTemplate
}
}

-        public Template()
-            : this(TemplateGroup.defaultGroup, string.Empty)
-        {
-        }
-
/** Used by group creation routine, not by users */
internal Template(TemplateGroup group)
{
diff --git a/Antlr4.StringTemplate/TemplateGroup.cs b/Antlr4.StringTemplate/TemplateGroup.cs
index 5adfbdd..351f4c1 100644
--- a/Antlr4.StringTemplate/TemplateGroup.cs
+++ b/Antlr4.StringTemplate/TemplateGroup.cs
@@ -38,14 +38,17 @@ namespace Antlr4.StringTemplate
using System.Text;
using Antlr.Runtime;
using Antlr4.StringTemplate.Compiler;
+    using Antlr4.StringTemplate.Extensions;
using Antlr4.StringTemplate.Misc;

using ArgumentException = System.ArgumentException;
using ArgumentNullException = System.ArgumentNullException;
using Console = System.Console;
+    using Directory = System.IO.Directory;
using Environment = System.Environment;
using Exception = System.Exception;
using IDictionary = System.Collections.IDictionary;
+    using Path = System.IO.Path;
using StringBuilder = System.Text.StringBuilder;
using Type = System.Type;
using Uri = System.Uri;
@@ -646,7 +649,11 @@ namespace Antlr4.StringTemplate
// do nothing upon syntax error
if (fileName == null || fileName.Equals("<missing STRING>"))
return;
+
fileName = Utility.Strip(fileName, 1);
+            if (!string.IsNullOrEmpty(this.FileName) && Directory.Exists(Path.GetDirectoryName(this.FileName)))
+                fileName = Path.Combine(Path.GetDirectoryName(this.FileName), fileName);
+
TemplateGroup g = null;
if (fileName.EndsWith(".stg"))
{
@@ -656,6 +663,7 @@ namespace Antlr4.StringTemplate
{
g = new TemplateGroupDirectory(fileName, delimiterStartChar, delimiterStopChar);
}
+
ImportTemplates(g);
}

@@ -676,7 +684,11 @@ namespace Antlr4.StringTemplate
}
catch (Exception e)
{
-                ErrorManager.IOError(null, ErrorType.CANT_LOAD_GROUP_FILE, e, fileName);
+                e.PreserveStackTrace();
+                if (!e.IsCritical())
+                    ErrorManager.IOError(null, ErrorType.CANT_LOAD_GROUP_FILE, e, fileName);
+
+                throw;
}
}

diff --git a/Antlr4.StringTemplate/TemplateGroupDirectory.cs b/Antlr4.StringTemplate/TemplateGroupDirectory.cs
index 053c3d2..66711c8 100644
--- a/Antlr4.StringTemplate/TemplateGroupDirectory.cs
+++ b/Antlr4.StringTemplate/TemplateGroupDirectory.cs
@@ -122,6 +122,11 @@ namespace Antlr4.StringTemplate
protected override CompiledTemplate Load(string name)
{
string parent = Utility.GetPrefix(name);
+            if (string.IsNullOrEmpty(parent))
+            {
+                // no need to check for a group file as name has no parent
+                return LoadTemplateFile(string.Empty, name + ".st"); // load t.st file
+            }

if (Path.IsPathRooted(parent))
throw new ArgumentException();
diff --git a/Antlr4.StringTemplate/TemplateGroupFile.cs b/Antlr4.StringTemplate/TemplateGroupFile.cs
index ae69c22..64b5a8f 100644
--- a/Antlr4.StringTemplate/TemplateGroupFile.cs
+++ b/Antlr4.StringTemplate/TemplateGroupFile.cs
@@ -34,12 +34,21 @@ namespace Antlr4.StringTemplate
{
using System.Runtime.CompilerServices;
using Antlr4.StringTemplate.Compiler;
+    using Antlr4.StringTemplate.Extensions;
using ArgumentException = System.ArgumentException;
+    using ArgumentNullException = System.ArgumentNullException;
using Encoding = System.Text.Encoding;
using Exception = System.Exception;
using File = System.IO.File;
+    using FileStream = System.IO.FileStream;
+    using FileMode = System.IO.FileMode;
+    using FileAccess = System.IO.FileAccess;
+    using FileShare = System.IO.FileShare;
+    using FileNotFoundException = System.IO.FileNotFoundException;
using NotImplementedException = System.NotImplementedException;
using Path = System.IO.Path;
+    using Stream = System.IO.Stream;
+    using StringComparison = System.StringComparison;
using Uri = System.Uri;

/** The internal representation of a single group file (which must end in
@@ -61,42 +70,28 @@ namespace Antlr4.StringTemplate
public TemplateGroupFile(string fileName, char delimiterStartChar, char delimiterStopChar)
: base(delimiterStartChar, delimiterStopChar)
{
-            if (!fileName.EndsWith(".stg"))
-                throw new ArgumentException("Group file names must end in .stg: " + fileName);
+            if (fileName == null)
+                throw new ArgumentNullException("fileName");

try
{
-                //File f = new File(fileName);
-                if (File.Exists(fileName))
-                {
-                    _url = new Uri(fileName);
-                }
-                else
-                {
-                    throw new NotImplementedException();
-#if false
-                    // try in classpath
-                    ClassLoader cl = Thread.currentThread().getContextClassLoader();
-                    url = cl.getResource(fileName);
-                    if (url == null)
-                    {
-                        cl = this.GetType().getClassLoader();
-                        url = cl.getResource(fileName);
-                    }
-#endif
-                }
-
-                if (_url == null)
-                {
-                    throw new ArgumentException("No such group file: " + fileName);
-                }
+                if (!fileName.EndsWith(".stg"))
+                    throw new ArgumentException("Group file names must end in .stg: " + fileName);
+
+                if (!File.Exists(fileName))
+                    throw new FileNotFoundException(string.Format("No such group file: {0}", fileName));
+
+                this._url = new Uri(fileName);
+                this._fileName = fileName;
}
catch (Exception e)
{
-                ErrorManager.InternalError(null, "can't Load group file " + fileName, e);
-            }
+                e.PreserveStackTrace();
+                if (!e.IsCritical())
+                    ErrorManager.InternalError(null, "can't Load group file " + fileName, e);

-            this._fileName = fileName;
+                throw;
+            }
}

public TemplateGroupFile(string fullyQualifiedFileName, Encoding encoding)
@@ -113,8 +108,12 @@ namespace Antlr4.StringTemplate
public TemplateGroupFile(Uri url, Encoding encoding, char delimiterStartChar, char delimiterStopChar)
: base(delimiterStartChar, delimiterStopChar)
{
+            if (url == null)
+                throw new ArgumentNullException("url");
+
this._url = url;
this.Encoding = encoding;
+            this._fileName = _url.AbsolutePath;
}

public override bool IsDefined(string name)
@@ -144,10 +143,11 @@ namespace Antlr4.StringTemplate
if (_alreadyLoaded)
return;

-            _alreadyLoaded = true; // do before actual load to say we're doing it
+            // do before actual load to say we're doing it
// no prefix since this group file is the entire group, nothing lives
// beneath it.
-            LoadGroupFile(string.Empty, _url.ToString());
+            _alreadyLoaded = true;
+            LoadGroupFile(string.Empty, _url.LocalPath);
}

public override string Show()
diff --git a/Antlr4.Test.StringTemplate/TestCoreBasics.cs b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
index 1341563..8f5d951 100644
--- a/Antlr4.Test.StringTemplate/TestCoreBasics.cs
+++ b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
@@ -1013,6 +1013,34 @@ namespace Antlr4.Test.StringTemplate
}

[TestMethod]
+        public void TestEarlyEvalNoIndent()
+        {
+            string templates =
+                "t() ::= <<  abc>>\n" +
+                "main() ::= <<\n" +
+                "<t()>\n" +
+                "<(t())>\n" + // early eval ignores indents; mostly for simply strings
+                "  <t()>\n" +
+                "  <(t())>\n" +
+                ">>\n";
+
+            writeFile(tmpdir, "t.stg", templates);
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
+            Template st = group.GetInstanceOf("main");
+            StringWriter sw = new StringWriter();
+            NoIndentWriter w = new NoIndentWriter(sw);
+            st.Write(w);
+            string result = sw.ToString();
+            string expected =
+                "abc" + newline +
+                "abc" + newline +
+                "abc" + newline +
+                "abc";
+            Assert.AreEqual(expected, result);
+        }
+
+
+        [TestMethod]
public void TestArrayOfTemplates()
{
string template = "<foo>!";
diff --git a/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs b/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
index 9ff48e7..7bc8f10 100644
--- a/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
+++ b/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
@@ -72,13 +72,13 @@ namespace Antlr4.Test.StringTemplate
public void TestRefToAnotherTemplateInSameGroup()
{
string dir = tmpdir;
-            string a = "a() ::= << $b()$ >>\n";
+            string a = "a() ::= << <$b()$> >>\n";
string b = "b() ::= <<bar>>\n";
writeFile(dir, "a.st", a);
writeFile(dir, "b.st", b);
TemplateGroup group = new TemplateGroupDirectory(dir, '$', '$');
Template st = group.GetInstanceOf("a");
-            string expected = " bar ";
+            string expected = " <bar> ";
string result = st.Render();
Assert.AreEqual(expected, result);
}
diff --git a/Antlr4.Test.StringTemplate/TestGroups.cs b/Antlr4.Test.StringTemplate/TestGroups.cs
index e7e5874..3744e5a 100644
--- a/Antlr4.Test.StringTemplate/TestGroups.cs
+++ b/Antlr4.Test.StringTemplate/TestGroups.cs
@@ -520,6 +520,32 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

+        /**
+         * When the anonymous template specified as a default value for a formalArg
+         * contains a syntax error Template 4.0.2 emits a NullPointerException error
+         * (after the syntax error)
+         *
+         * @throws Exception
+         */
+        [TestMethod]
+        public void TestHandleBuggyDefaultArgument()
+        {
+            string templates = "main(a={(<\"\")>}) ::= \"\"";
+            writeFile(tmpdir, "t.stg", templates);
+
+            ErrorBuffer errors = new ErrorBuffer();
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
+            group.Listener = errors;
+
+            Template st = group.GetInstanceOf("main");
+            string s = st.Render();
+
+            // Check the errors. This contained an "NullPointerException" before
+            Assert.AreEqual(
+                    "t.stg 1:12: mismatched input ')' expecting RDELIM" + newline,
+                    errors.ToString());
+        }
+
private class Counter
{
int n = 0;
@@ -769,5 +795,39 @@ namespace Antlr4.Test.StringTemplate
result = st.Render();
Assert.AreEqual(expected, result);
}
+
+        [TestMethod]
+        public void TestGroupFileImport()
+        {
+            // /randomdir/group1.stg (a template) and /randomdir/group2.stg with b.
+            // group1 imports group2, a includes b
+            string dir = tmpdir;
+            string groupFile1 =
+                "import \"group2.stg\"\n" +
+                "a(x) ::= <<\n" +
+                "foo<b()>\n" +
+                ">>\n";
+            writeFile(dir, "group1.stg", groupFile1);
+            string groupFile2 =
+                "b() ::= \"bar\"\n";
+            writeFile(dir, "group2.stg", groupFile2);
+            TemplateGroup group1 = new TemplateGroupFile(Path.Combine(dir, "group1.stg"));
+
+            // Is the imported template b found?
+            Template stb = group1.GetInstanceOf("b");
+            Assert.AreEqual("bar", stb.Render());
+
+            // Is the include of b() resolved?
+            Template sta = group1.GetInstanceOf("a");
+            Assert.AreEqual("foobar", sta.Render());
+
+            // Are the correct "ThatCreatedThisInstance" groups assigned
+            Assert.AreEqual("group1", sta.Group.Name);
+            Assert.AreEqual("group1", stb.Group.Name);
+
+            // Are the correct (native) groups assigned for the templates
+            Assert.AreEqual("group1", sta.impl.NativeGroup.Name);
+            Assert.AreEqual("group2", stb.impl.NativeGroup.Name);
+        }
}
}
diff --git a/Antlr4.Test.StringTemplate/TestRenderers.cs b/Antlr4.Test.StringTemplate/TestRenderers.cs
index 9955530..d53e49a 100644
--- a/Antlr4.Test.StringTemplate/TestRenderers.cs
+++ b/Antlr4.Test.StringTemplate/TestRenderers.cs
@@ -205,6 +205,86 @@ namespace Antlr4.Test.StringTemplate
}

[TestMethod]
+        public void TestStringRendererWithFormat_cap()
+        {
+            string templates =
+                    "foo(x) ::= << <x; format=\"cap\"> >>\n";
+
+            writeFile(tmpdir, "t.stg", templates);
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
+            group.RegisterRenderer(typeof(string), new StringRenderer());
+            Template st = group.GetInstanceOf("foo");
+            st.Add("x", "hi");
+            string expecting = " Hi ";
+            string result = st.Render();
+            Assert.AreEqual(expecting, result);
+        }
+
+        [TestMethod]
+        public void TestStringRendererWithFormat_cap_emptyValue()
+        {
+            string templates =
+                    "foo(x) ::= << <x; format=\"cap\"> >>\n";
+
+            writeFile(tmpdir, "t.stg", templates);
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
+            group.RegisterRenderer(typeof(string), new StringRenderer());
+            Template st = group.GetInstanceOf("foo");
+            st.Add("x", "");
+            string expecting = " ";//FIXME: why not two spaces?
+            string result = st.Render();
+            Assert.AreEqual(expecting, result);
+        }
+
+        [TestMethod]
+        public void TestStringRendererWithFormat_url_encode()
+        {
+            string templates =
+                    "foo(x) ::= << <x; format=\"url-encode\"> >>\n";
+
+            writeFile(tmpdir, "t.stg", templates);
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
+            group.RegisterRenderer(typeof(string), new StringRenderer());
+            Template st = group.GetInstanceOf("foo");
+            st.Add("x", "a b");
+            string expecting = " a+b ";
+            string result = st.Render();
+            Assert.AreEqual(expecting, result);
+        }
+
+        [TestMethod]
+        public void TestStringRendererWithFormat_xml_encode()
+        {
+            string templates =
+                    "foo(x) ::= << <x; format=\"xml-encode\"> >>\n";
+
+            writeFile(tmpdir, "t.stg", templates);
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
+            group.RegisterRenderer(typeof(string), new StringRenderer());
+            Template st = group.GetInstanceOf("foo");
+            st.Add("x", "a<b> &\t\b");
+            string expecting = " a&lt;b&gt; &amp;\t&#8; ";
+            string result = st.Render();
+            Assert.AreEqual(expecting, result);
+        }
+
+        [TestMethod]
+        public void TestStringRendererWithFormat_xml_encode_null()
+        {
+            string templates =
+                    "foo(x) ::= << <x; format=\"xml-encode\"> >>\n";
+
+            writeFile(tmpdir, "t.stg", templates);
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
+            group.RegisterRenderer(typeof(string), new StringRenderer());
+            Template st = group.GetInstanceOf("foo");
+            st.Add("x", null);
+            string expecting = " ";
+            string result = st.Render();
+            Assert.AreEqual(expecting, result);
+        }
+
+        [TestMethod]
public void TestNumberRendererWithPrintfFormat()
{
//string templates = "foo(x,y) ::= << <x; format=\"%d\"> <y; format=\"%2.3f\"> >>\n";

