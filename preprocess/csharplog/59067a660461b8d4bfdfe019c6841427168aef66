commit 59067a660461b8d4bfdfe019c6841427168aef66
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sun Nov 28 14:09:23 2010 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sun Nov 28 14:09:23 2010 -0800

(C# 3) Merge CL7201

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7215]

diff --git a/Antlr3.Test/TestCompositeGrammars.cs b/Antlr3.Test/TestCompositeGrammars.cs
index 8e34645..6eaa17b 100644
--- a/Antlr3.Test/TestCompositeGrammars.cs
+++ b/Antlr3.Test/TestCompositeGrammars.cs
@@ -962,5 +962,25 @@ namespace AntlrUnitTests
assertEquals(expecting, ok);
}

+        [TestMethod]
+        public void TestHeadersPropogatedCorrectlyToImportedGrammars()
+        {
+            string slave =
+                "parser grammar S;\n" +
+                "a : B {System.out.print(\"S.a\");} ;\n";
+            mkdir(tmpdir);
+            writeFile(tmpdir, "S.g", slave);
+            string master =
+                "grammar M;\n" +
+                "import S;\n" +
+                "@header{package mypackage;}\n" +
+                "@lexer::header{package mypackage;}\n" +
+                "s : a ;\n" +
+                "B : 'b' ;" + // defines B from inherited token space
+                "WS : (' '|'\\n') {skip();} ;\n";
+            bool ok = antlr("M.g", "M.g", master, debug);
+            bool expecting = true; // should be ok
+            Assert.AreEqual(expecting, ok);
+        }
}
}
diff --git a/Antlr3/Codegen/CodeGenerator.cs b/Antlr3/Codegen/CodeGenerator.cs
index 3c04bc9..4e0c411 100644
--- a/Antlr3/Codegen/CodeGenerator.cs
+++ b/Antlr3/Codegen/CodeGenerator.cs
@@ -199,7 +199,7 @@ namespace Antlr3.Codegen

acyclicDFAGenerator = new ACyclicDFACodeGenerator( this );

-            LoadLanguageTarget( language );
+            target = LoadLanguageTarget( language, tool.TargetsDirectory );
}

#region Properties
@@ -285,16 +285,16 @@ namespace Antlr3.Codegen

#endregion

-        protected virtual void LoadLanguageTarget( string language )
+        public static Target LoadLanguageTarget( string language, string targetsDirectory )
{
lock (_targets)
{
+                Target target;
if (!_targets.TryGetValue(language, out target))
{
// first try to load the target via a satellite DLL
string assembly = "Antlr3.Targets." + language + ".dll";
-                    string path1 = tool.TargetsDirectory;
-                    string[] paths = { path1 };
+                    string[] paths = { targetsDirectory };

System.Reflection.Assembly targetAssembly = null;
System.Type targetType = null;
@@ -324,13 +324,15 @@ namespace Antlr3.Codegen
if (targetType == null)
{
ErrorManager.Error(ErrorManager.MSG_CANNOT_CREATE_TARGET_GENERATOR, targetName);
-                            return;
+                            return null;
}
}

target = (Target)Activator.CreateInstance(targetType);
_targets[language] = target;
}
+
+                return target;
}
}

diff --git a/Antlr3/Tool/Grammar.cs b/Antlr3/Tool/Grammar.cs
index 260a97e..61d1ef3 100644
--- a/Antlr3/Tool/Grammar.cs
+++ b/Antlr3/Tool/Grammar.cs
@@ -62,6 +62,7 @@ namespace Antlr3.Tool
using StringComparer = System.StringComparer;
using StringReader = System.IO.StringReader;
using StringTemplate = Antlr3.ST.StringTemplate;
+    using Target = Antlr3.Codegen.Target;
using TextReader = System.IO.TextReader;
using TextWriter = System.IO.TextWriter;
using TimeSpan = System.TimeSpan;
@@ -543,6 +544,9 @@ namespace Antlr3.Tool
/** Factored out the sanity checking code; delegate to it. */
internal GrammarSanity sanity;

+        /** Useful for asking questions about target during analysis */
+        private Target target;
+
/** Create a grammar from file name.  */
public Grammar( Tool tool, string fileName, CompositeGrammar composite )
{
@@ -562,6 +566,7 @@ namespace Antlr3.Tool
{
defaultRuleModifier = composite.delegateGrammarTreeRoot.grammar.DefaultRuleModifier;
}
+            target = CodeGenerator.LoadLanguageTarget((string)GetOption("language"), tool.TargetsDirectory);
}

/** Useful for when you are sure that you are not part of a composite
@@ -575,6 +580,8 @@ namespace Antlr3.Tool

builtFromString = true;
composite = new CompositeGrammar( this );
+            string targetsDirectory = Path.Combine(AntlrTool.ToolPathRoot, "Targets");
+            target = CodeGenerator.LoadLanguageTarget((string)GetOption("language"), targetsDirectory);
}

/** Used for testing; only useful on noncomposite grammars.*/
@@ -2004,9 +2011,13 @@ namespace Antlr3.Tool
if ( this == composite.RootGrammar && actionName.Equals( "header" ) )
{
IList<Grammar> allgrammars = composite.RootGrammar.GetDelegates();
-                foreach ( Grammar g in allgrammars )
+                foreach ( Grammar @delegate in allgrammars )
{
-                    g.DefineNamedAction( ampersandAST, scope, nameAST, actionAST );
+                    if (target.IsValidActionScope(@delegate.type, scope))
+                    {
+                        //System.out.println("propogate to "+delegate.name);
+                        @delegate.DefineNamedAction(ampersandAST, scope, nameAST, actionAST);
+                    }
}
}
}

