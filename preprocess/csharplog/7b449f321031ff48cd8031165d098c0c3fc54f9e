commit 7b449f321031ff48cd8031165d098c0c3fc54f9e
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Dec 14 01:43:27 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Dec 14 01:43:27 2009 -0800

C# Port:
* Rename Window1 to TemplateVisualizer

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6507]

diff --git a/STViz/TemplateVisualizer.xaml b/STViz/TemplateVisualizer.xaml
new file mode 100644
index 0000000..9316cc4
--- /dev/null
+++ b/STViz/TemplateVisualizer.xaml
@@ -0,0 +1,54 @@
+﻿<Window x:Class="STViz.Window1"
+    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
+    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
+    Title="StringTemplate Visualizer" Height="522" Width="591">
+
+    <Window.Resources>
+        <DataTemplate x:Key="AttributeListItemTemplate">
+            <TextBlock><TextBlock Text="{Binding Key}" /><Run> = </Run><TextBlock Text="{Binding Value}" /></TextBlock>
+        </DataTemplate>
+
+        <DataTemplate x:Key="TemplateStackListItemTemplate">
+            <TextBlock Text="{Binding Name}" />
+        </DataTemplate>
+
+        <HierarchicalDataTemplate x:Key="TemplateEventsItemTemplate" ItemsSource="{Binding Path=Template.DebugInfo.InterpreterEvents}">
+            <TextBlock Text="{Binding Template.Name}" />
+        </HierarchicalDataTemplate>
+    </Window.Resources>
+
+    <DockPanel>
+        <Menu Height="22" Name="menu1" VerticalAlignment="Top" DockPanel.Dock="Top">
+            <MenuItem Header="File">
+                <MenuItem Header="Save" />
+            </MenuItem>
+            <MenuItem Header="Edit">
+                <MenuItem Header="Copy" />
+            </MenuItem>
+        </Menu>
+        <Grid Name="grid1">
+            <RichTextBox Margin="204,6,6,171" Name="txtOutput" IsReadOnly="True" Height="285" Width="359" />
+            <ListBox Margin="6,0,0,6" Name="lstAttributes" DataContext="{Binding ElementName=templatesTree, Path=SelectedItem, Mode=OneWay}" ItemsSource="{Binding Path=Template.Attributes}" ItemTemplate="{StaticResource AttributeListItemTemplate}" Height="217" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="192" />
+            <TreeView Margin="6,6,0,229" Name="templatesTree" ItemsSource="{Binding}" ItemTemplate="{StaticResource TemplateEventsItemTemplate}" HorizontalAlignment="Left" Width="192" SelectedItemChanged="OnTemplatesTreeSelectedItemChanged" />
+            <TabControl Height="159" Margin="204,0,6,6" Name="tabControl1" VerticalAlignment="Bottom">
+                <TabItem Header="template" Name="tabItem1">
+                        <RichTextBox Name="txtTemplate" IsReadOnly="True" VerticalScrollBarVisibility="Auto" DataContextChanged="OnTextTemplateDataContextChanged">
+                            <RichTextBox.DataContext>
+                                <Binding ElementName="templatesTree" Path="SelectedItem" Mode="OneWay" />
+                                <!--<Binding ElementName="templatesTree" Path="SelectedValue" />-->
+                            </RichTextBox.DataContext>
+                            <!--<RichTextBox.>
+                    <Binding Path="CompiledTemplate.Template" Mode="OneWay"/>
+                </RichTextBox.Text>-->
+                        </RichTextBox>
+                </TabItem>
+                <TabItem Header="stack trace" >
+                    <ListBox Name="lstStack" DataContext="{Binding ElementName=templatesTree, Path=SelectedItem, Mode=OneWay}" ItemsSource="{Binding Path=Template.EnclosingInstanceStack}" ItemTemplate="{StaticResource TemplateStackListItemTemplate}" />
+                </TabItem>
+                <TabItem Header="bytecode">
+                    <TextBox DataContext="{Binding ElementName=templatesTree, Path=SelectedItem, Mode=OneWay}" Text="{Binding Mode=OneWay, Path=Template.CompiledTemplate.Disassembly}" IsReadOnly="True" VerticalScrollBarVisibility="Auto" />
+                </TabItem>
+            </TabControl>
+        </Grid>
+    </DockPanel>
+</Window>
diff --git a/STViz/TemplateVisualizer.xaml.cs b/STViz/TemplateVisualizer.xaml.cs
new file mode 100644
index 0000000..f768055
--- /dev/null
+++ b/STViz/TemplateVisualizer.xaml.cs
@@ -0,0 +1,141 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2005-2008 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2008-2009 Sam Harwell
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace STViz
+{
+    using System;
+    using System.Collections.Generic;
+    using System.Windows;
+    using StringTemplate;
+    using File = System.IO.File;
+    using Path = System.IO.Path;
+    using StringWriter = System.IO.StringWriter;
+    using System.Windows.Documents;
+    using System.Windows.Media;
+    using StringTemplate.Debug;
+
+    public partial class Window1 : Window
+    {
+        public Window1()
+        {
+            InitializeComponent();
+
+            string templates =
+                "method(type,name,args,stats) ::= <<\n" +
+                "public <type> <name>(<args:{a| int <a>}; separator=\", \">) {\n" +
+                "    <if(locals)>int locals[<locals>];<endif>\n" +
+                "    <stats;separator=\"\\n\">\n" +
+                "}\n" +
+                ">>\n" +
+                "assign(a,b) ::= \"<a> = <b>;\"\n" +
+                "return(x) ::= <<return <x>;>>\n" +
+                "paren(x) ::= \"(<x>)\"\n";
+
+            string tmpdir = Path.GetTempPath();
+            File.WriteAllText(Path.Combine(tmpdir, "t.stg"), templates);
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
+            group.Debug = true;
+            Template st = group.GetInstanceOf("method");
+            st.code.Dump();
+            st.Add("type", "float");
+            st.Add("name", "foo");
+            st.Add("locals", 3);
+            st.Add("args", new String[] { "x", "y", "z" });
+            Template s1 = group.GetInstanceOf("assign");
+            Template paren = group.GetInstanceOf("paren");
+            paren.Add("x", "x");
+            s1.Add("a", paren);
+            s1.Add("b", "y");
+            Template s2 = group.GetInstanceOf("assign");
+            s2.Add("a", "y");
+            s2.Add("b", "z");
+            Template s3 = group.GetInstanceOf("return");
+            s3.Add("x", "3.14159");
+            st.Add("stats", s1);
+            st.Add("stats", s2);
+            st.Add("stats", s3);
+
+            StringWriter sw = new StringWriter();
+            Interpreter interp = new Interpreter(group, new AutoIndentWriter(sw));
+            interp.Exec(st);
+            IList<InterpEvent> events = interp.Events;
+
+            string text = sw.ToString();
+            templatesTree.Items.Add(new RootEvent(st, 0, text.Length));
+            txtOutput.Document = new FlowDocument(new Paragraph(new Run(text)));
+        }
+
+        private void OnTextTemplateDataContextChanged(object sender, DependencyPropertyChangedEventArgs e)
+        {
+            txtTemplate.Document.Blocks.Clear();
+
+            InterpEvent templateEvent = e.NewValue as InterpEvent;
+            if (templateEvent == null)
+                return;
+
+            Template template = templateEvent.Template;
+            if (template != null)
+            {
+                txtTemplate.Document.Blocks.Add(new Paragraph(new Run(template.CompiledTemplate.Template)));
+                if (template.IsSubtemplate)
+                {
+                    Highlight(txtTemplate.Document, template.CompiledTemplate.embeddedStart, template.CompiledTemplate.embeddedStop - template.CompiledTemplate.embeddedStart + 1);
+                }
+            }
+        }
+
+        private static void Highlight(FlowDocument document, int start, int length)
+        {
+            var range = new TextRange(document.ContentStart, document.ContentEnd);
+            range.ClearAllProperties();
+            range = new TextRange(document.ContentStart.GetPositionAtOffset(start), document.ContentStart.GetPositionAtOffset(start + length));
+            range.ApplyPropertyValue(TextElement.BackgroundProperty, Brushes.LightGray);
+        }
+
+        private void OnTemplatesTreeSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
+        {
+            InterpEvent debugEvent = e.NewValue as InterpEvent;
+            if (debugEvent == null)
+                return;
+
+            Highlight(txtOutput.Document, debugEvent.Start, debugEvent.Stop - debugEvent.Start + 1);
+        }
+
+        private class RootEvent : InterpEvent
+        {
+            public RootEvent(Template template, int start, int stop)
+                : base(template, start, stop)
+            {
+            }
+        }
+    }
+}
diff --git a/STViz/Window1.xaml b/STViz/Window1.xaml
deleted file mode 100644
index 9316cc4..0000000
--- a/STViz/Window1.xaml
+++ /dev/null
@@ -1,54 +0,0 @@
-﻿<Window x:Class="STViz.Window1"
-    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
-    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
-    Title="StringTemplate Visualizer" Height="522" Width="591">
-
-    <Window.Resources>
-        <DataTemplate x:Key="AttributeListItemTemplate">
-            <TextBlock><TextBlock Text="{Binding Key}" /><Run> = </Run><TextBlock Text="{Binding Value}" /></TextBlock>
-        </DataTemplate>
-
-        <DataTemplate x:Key="TemplateStackListItemTemplate">
-            <TextBlock Text="{Binding Name}" />
-        </DataTemplate>
-
-        <HierarchicalDataTemplate x:Key="TemplateEventsItemTemplate" ItemsSource="{Binding Path=Template.DebugInfo.InterpreterEvents}">
-            <TextBlock Text="{Binding Template.Name}" />
-        </HierarchicalDataTemplate>
-    </Window.Resources>
-
-    <DockPanel>
-        <Menu Height="22" Name="menu1" VerticalAlignment="Top" DockPanel.Dock="Top">
-            <MenuItem Header="File">
-                <MenuItem Header="Save" />
-            </MenuItem>
-            <MenuItem Header="Edit">
-                <MenuItem Header="Copy" />
-            </MenuItem>
-        </Menu>
-        <Grid Name="grid1">
-            <RichTextBox Margin="204,6,6,171" Name="txtOutput" IsReadOnly="True" Height="285" Width="359" />
-            <ListBox Margin="6,0,0,6" Name="lstAttributes" DataContext="{Binding ElementName=templatesTree, Path=SelectedItem, Mode=OneWay}" ItemsSource="{Binding Path=Template.Attributes}" ItemTemplate="{StaticResource AttributeListItemTemplate}" Height="217" VerticalAlignment="Bottom" HorizontalAlignment="Left" Width="192" />
-            <TreeView Margin="6,6,0,229" Name="templatesTree" ItemsSource="{Binding}" ItemTemplate="{StaticResource TemplateEventsItemTemplate}" HorizontalAlignment="Left" Width="192" SelectedItemChanged="OnTemplatesTreeSelectedItemChanged" />
-            <TabControl Height="159" Margin="204,0,6,6" Name="tabControl1" VerticalAlignment="Bottom">
-                <TabItem Header="template" Name="tabItem1">
-                        <RichTextBox Name="txtTemplate" IsReadOnly="True" VerticalScrollBarVisibility="Auto" DataContextChanged="OnTextTemplateDataContextChanged">
-                            <RichTextBox.DataContext>
-                                <Binding ElementName="templatesTree" Path="SelectedItem" Mode="OneWay" />
-                                <!--<Binding ElementName="templatesTree" Path="SelectedValue" />-->
-                            </RichTextBox.DataContext>
-                            <!--<RichTextBox.>
-                    <Binding Path="CompiledTemplate.Template" Mode="OneWay"/>
-                </RichTextBox.Text>-->
-                        </RichTextBox>
-                </TabItem>
-                <TabItem Header="stack trace" >
-                    <ListBox Name="lstStack" DataContext="{Binding ElementName=templatesTree, Path=SelectedItem, Mode=OneWay}" ItemsSource="{Binding Path=Template.EnclosingInstanceStack}" ItemTemplate="{StaticResource TemplateStackListItemTemplate}" />
-                </TabItem>
-                <TabItem Header="bytecode">
-                    <TextBox DataContext="{Binding ElementName=templatesTree, Path=SelectedItem, Mode=OneWay}" Text="{Binding Mode=OneWay, Path=Template.CompiledTemplate.Disassembly}" IsReadOnly="True" VerticalScrollBarVisibility="Auto" />
-                </TabItem>
-            </TabControl>
-        </Grid>
-    </DockPanel>
-</Window>
diff --git a/STViz/Window1.xaml.cs b/STViz/Window1.xaml.cs
deleted file mode 100644
index f768055..0000000
--- a/STViz/Window1.xaml.cs
+++ /dev/null
@@ -1,141 +0,0 @@
-﻿/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
- * All rights reserved.
- *
- * Conversion to C#:
- * Copyright (c) 2008-2009 Sam Harwell
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- * 3. The name of the author may not be used to endorse or promote products
- *    derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
- * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
- * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
- * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-namespace STViz
-{
-    using System;
-    using System.Collections.Generic;
-    using System.Windows;
-    using StringTemplate;
-    using File = System.IO.File;
-    using Path = System.IO.Path;
-    using StringWriter = System.IO.StringWriter;
-    using System.Windows.Documents;
-    using System.Windows.Media;
-    using StringTemplate.Debug;
-
-    public partial class Window1 : Window
-    {
-        public Window1()
-        {
-            InitializeComponent();
-
-            string templates =
-                "method(type,name,args,stats) ::= <<\n" +
-                "public <type> <name>(<args:{a| int <a>}; separator=\", \">) {\n" +
-                "    <if(locals)>int locals[<locals>];<endif>\n" +
-                "    <stats;separator=\"\\n\">\n" +
-                "}\n" +
-                ">>\n" +
-                "assign(a,b) ::= \"<a> = <b>;\"\n" +
-                "return(x) ::= <<return <x>;>>\n" +
-                "paren(x) ::= \"(<x>)\"\n";
-
-            string tmpdir = Path.GetTempPath();
-            File.WriteAllText(Path.Combine(tmpdir, "t.stg"), templates);
-            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            group.Debug = true;
-            Template st = group.GetInstanceOf("method");
-            st.code.Dump();
-            st.Add("type", "float");
-            st.Add("name", "foo");
-            st.Add("locals", 3);
-            st.Add("args", new String[] { "x", "y", "z" });
-            Template s1 = group.GetInstanceOf("assign");
-            Template paren = group.GetInstanceOf("paren");
-            paren.Add("x", "x");
-            s1.Add("a", paren);
-            s1.Add("b", "y");
-            Template s2 = group.GetInstanceOf("assign");
-            s2.Add("a", "y");
-            s2.Add("b", "z");
-            Template s3 = group.GetInstanceOf("return");
-            s3.Add("x", "3.14159");
-            st.Add("stats", s1);
-            st.Add("stats", s2);
-            st.Add("stats", s3);
-
-            StringWriter sw = new StringWriter();
-            Interpreter interp = new Interpreter(group, new AutoIndentWriter(sw));
-            interp.Exec(st);
-            IList<InterpEvent> events = interp.Events;
-
-            string text = sw.ToString();
-            templatesTree.Items.Add(new RootEvent(st, 0, text.Length));
-            txtOutput.Document = new FlowDocument(new Paragraph(new Run(text)));
-        }
-
-        private void OnTextTemplateDataContextChanged(object sender, DependencyPropertyChangedEventArgs e)
-        {
-            txtTemplate.Document.Blocks.Clear();
-
-            InterpEvent templateEvent = e.NewValue as InterpEvent;
-            if (templateEvent == null)
-                return;
-
-            Template template = templateEvent.Template;
-            if (template != null)
-            {
-                txtTemplate.Document.Blocks.Add(new Paragraph(new Run(template.CompiledTemplate.Template)));
-                if (template.IsSubtemplate)
-                {
-                    Highlight(txtTemplate.Document, template.CompiledTemplate.embeddedStart, template.CompiledTemplate.embeddedStop - template.CompiledTemplate.embeddedStart + 1);
-                }
-            }
-        }
-
-        private static void Highlight(FlowDocument document, int start, int length)
-        {
-            var range = new TextRange(document.ContentStart, document.ContentEnd);
-            range.ClearAllProperties();
-            range = new TextRange(document.ContentStart.GetPositionAtOffset(start), document.ContentStart.GetPositionAtOffset(start + length));
-            range.ApplyPropertyValue(TextElement.BackgroundProperty, Brushes.LightGray);
-        }
-
-        private void OnTemplatesTreeSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
-        {
-            InterpEvent debugEvent = e.NewValue as InterpEvent;
-            if (debugEvent == null)
-                return;
-
-            Highlight(txtOutput.Document, debugEvent.Start, debugEvent.Stop - debugEvent.Start + 1);
-        }
-
-        private class RootEvent : InterpEvent
-        {
-            public RootEvent(Template template, int start, int stop)
-                : base(template, start, stop)
-            {
-            }
-        }
-    }
-}

