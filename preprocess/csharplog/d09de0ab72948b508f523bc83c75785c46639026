commit d09de0ab72948b508f523bc83c75785c46639026
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Wed Nov 11 22:44:12 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Wed Nov 11 22:44:12 2009 -0800

C# Port:
* Added an 'AntlrTokens' build action to the Antlr3.targets for MSBuild

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6346]

diff --git a/AntlrBuildTask/Antlr3.targets b/AntlrBuildTask/Antlr3.targets
index a9dedd7..211cf7f 100644
--- a/AntlrBuildTask/Antlr3.targets
+++ b/AntlrBuildTask/Antlr3.targets
@@ -80,6 +80,7 @@

<ItemGroup Condition="'$(BuildingInsideVisualStudio)'=='true'">
<AvailableItemName Include="Antlr3" />
+    <AvailableItemName Include="AntlrTokens" />
</ItemGroup>

<Target Name="AntlrCompileReadGeneratedFileList">
@@ -92,7 +93,7 @@
<Target Name="AntlrCompile"
DependsOnTargets="$(AntlrCompileDependsOn)"
Condition="'@(Antlr3)' != ''"
-          Inputs="@(Antlr3)"
+          Inputs="@(Antlr3);@(AntlrTokens)"
Outputs="@(AntlrOutputCodeFilesList);
$(IntermediateOutputPath)$(AntlrGenCodeFileNames);">

@@ -105,7 +106,8 @@
BuildTaskPath="$(AntlrBuildTaskLocation)"
OutputPath="$(IntermediateOutputPath)"
Language="$(Language)"
-      SourceCodeFiles="@(Antlr3)">
+      SourceCodeFiles="@(Antlr3)"
+      TokensFiles="@(AntlrTokens)">

<Output ItemName="AntlrGeneratedCodeFiles" TaskParameter="GeneratedCodeFiles" />
</AntlrClassGenerationTask>
diff --git a/AntlrBuildTask/AntlrClassGenerationTask.cs b/AntlrBuildTask/AntlrClassGenerationTask.cs
index d544510..2ec498f 100644
--- a/AntlrBuildTask/AntlrClassGenerationTask.cs
+++ b/AntlrBuildTask/AntlrClassGenerationTask.cs
@@ -37,6 +37,8 @@ namespace Antlr3.Build.Tasks
using System.Threading;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
+    using File = System.IO.File;
+    using Path = System.IO.Path;

public class AntlrClassGenerationTask
: Task
@@ -82,6 +84,12 @@ namespace Antlr3.Build.Tasks
set;
}

+        public ITaskItem[] TokensFiles
+        {
+            get;
+            set;
+        }
+
public string GeneratedSourceExtension
{
get;
@@ -188,6 +196,36 @@ namespace Antlr3.Build.Tasks
sourceCodeFiles.Add(taskItem.ItemSpec);
}

+            if (this.TokensFiles != null && this.TokensFiles.Length > 0)
+            {
+                HashSet<string> copied = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
+                foreach (ITaskItem taskItem in TokensFiles)
+                {
+                    string fileName = taskItem.ItemSpec;
+                    if (!File.Exists(fileName))
+                    {
+                        Log.LogError("The tokens file '{0}' does not exist.", fileName);
+                        continue;
+                    }
+
+                    string vocabName = Path.GetFileNameWithoutExtension(fileName);
+                    if (!copied.Add(vocabName))
+                    {
+                        Log.LogWarning("The tokens file '{0}' conflicts with another tokens file in the same project.", fileName);
+                        continue;
+                    }
+
+                    string target = Path.Combine(OutputPath, Path.GetFileName(fileName));
+                    if (!Path.GetExtension(target).Equals(".tokens", StringComparison.OrdinalIgnoreCase))
+                    {
+                        Log.LogError("The destination for the tokens file '{0}' did not have the correct extension '.tokens'.", target);
+                        continue;
+                    }
+
+                    File.Copy(fileName, target, true);
+                }
+            }
+
wrapper.AntlrToolPath = AntlrToolPath;
wrapper.SourceCodeFiles = sourceCodeFiles;
wrapper.Language = Language;

