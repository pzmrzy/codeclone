commit ccd16c1f06c0e2b08992ccd0f2fb71eeea3c1be6
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Wed Jan 20 11:16:54 2010 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Wed Jan 20 11:16:54 2010 -0800

C# Port:
* Input validation and code cleanup

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6572]

diff --git a/StringTemplate4/AutoIndentWriter.cs b/StringTemplate4/AutoIndentWriter.cs
index d491eb4..9a562b8 100644
--- a/StringTemplate4/AutoIndentWriter.cs
+++ b/StringTemplate4/AutoIndentWriter.cs
@@ -37,6 +37,8 @@ namespace StringTemplate
using Environment = System.Environment;
using StringBuilder = System.Text.StringBuilder;
using TextWriter = System.IO.TextWriter;
+    using InvalidOperationException = System.InvalidOperationException;
+    using ArgumentNullException = System.ArgumentNullException;

public class AutoIndentWriter : ITemplateWriter
{
@@ -45,7 +47,7 @@ namespace StringTemplate
/** stack of indents; use List as it's much faster than Stack. Grows
*  from 0..n-1.
*/
-        protected IList<string> indents = new List<string>();
+        protected readonly IList<string> indents = new List<string>();

/** Stack of integer anchors (char positions in line); avoid Integer
*  creation overhead.
@@ -54,9 +56,9 @@ namespace StringTemplate
protected int anchors_sp = -1;

/** \n or \r\n? */
-        protected string newline;
+        protected readonly string newline;

-        protected TextWriter @out = null;
+        protected readonly TextWriter @out = null;
protected bool atStartOfLine = true;

/** Track char position in the line (later we can think about tabs).
@@ -77,9 +79,12 @@ namespace StringTemplate

public AutoIndentWriter(TextWriter @out, string newline)
{
+            if (@out == null)
+                throw new ArgumentNullException("out");
+
this.@out = @out;
indents.Add(null); // s oftart with no indent
-            this.newline = newline;
+            this.newline = newline ?? Environment.NewLine;
}

public AutoIndentWriter(TextWriter @out)
@@ -107,6 +112,9 @@ namespace StringTemplate

public virtual string PopIndentation()
{
+            if (indents.Count == 0)
+                throw new InvalidOperationException();
+
var result = indents[indents.Count - 1];
indents.RemoveAt(indents.Count - 1);
return result;
@@ -116,9 +124,7 @@ namespace StringTemplate
{
if ((anchors_sp + 1) >= anchors.Length)
{
-                int[] a = new int[anchors.Length * 2];
-                Array.Copy(anchors, 0, a, 0, anchors.Length - 1);
-                anchors = a;
+                Array.Resize(ref anchors, anchors.Length * 2);
}
anchors_sp++;
anchors[anchors_sp] = charPosition;
@@ -126,6 +132,9 @@ namespace StringTemplate

public virtual void PopAnchorPoint()
{
+            if (anchors_sp == -1)
+                throw new InvalidOperationException();
+
anchors_sp--;
}

@@ -146,6 +155,9 @@ namespace StringTemplate
/** Write out a string literal or attribute expression or expression element.*/
public virtual int Write(string str)
{
+            if (str == null)
+                return 0;
+
int n = 0;
for (int i = 0; i < str.Length; i++)
{
diff --git a/StringTemplate4/Compiler/BytecodeDisassembler.cs b/StringTemplate4/Compiler/BytecodeDisassembler.cs
index 3d39df0..2f5cb75 100644
--- a/StringTemplate4/Compiler/BytecodeDisassembler.cs
+++ b/StringTemplate4/Compiler/BytecodeDisassembler.cs
@@ -34,19 +34,26 @@ namespace StringTemplate.Compiler
{
using System.Collections.Generic;
using ArgumentException = System.ArgumentException;
+    using ArgumentNullException = System.ArgumentNullException;
+    using ArgumentOutOfRangeException = System.ArgumentOutOfRangeException;
using StringBuilder = System.Text.StringBuilder;

public class BytecodeDisassembler
{
// TODO: make disassembler point at compiledST code?
-        byte[] code;
-        int codeSize;
-        protected object[] strings;
+        private readonly byte[] code;
+        private readonly int codeSize;
+        private readonly string[] strings;

public BytecodeDisassembler(byte[] code,
int codeSize,
string[] strings)
{
+            if (code == null)
+                throw new ArgumentNullException("code");
+            if (strings == null)
+                throw new ArgumentNullException("strings");
+
this.code = code;
this.codeSize = codeSize;
this.strings = strings;
@@ -88,6 +95,11 @@ namespace StringTemplate.Compiler

public virtual int DisassembleInstruction(StringBuilder buf, int ip)
{
+            if (buf == null)
+                throw new ArgumentNullException("buf");
+            if (ip < 0)
+                throw new ArgumentOutOfRangeException("ip");
+
int opcode = code[ip];
if (ip >= codeSize)
{
@@ -143,7 +155,7 @@ namespace StringTemplate.Compiler
buf.Append("#");
buf.Append(poolIndex);
string s = "<bad string index>";
-            if (poolIndex < strings.Length)
+            if (poolIndex > 0 && poolIndex < strings.Length)
{
if (strings[poolIndex] == null)
s = "null";
@@ -164,6 +176,13 @@ namespace StringTemplate.Compiler

public static int GetShort(byte[] memory, int index)
{
+            if (memory == null)
+                throw new ArgumentNullException("memory");
+            if (index < 0)
+                throw new ArgumentOutOfRangeException("index");
+            if (index + 1 >= memory.Length)
+                throw new ArgumentException();
+
int b1 = memory[index++] & 0xFF; // mask off sign-extended bits
int b2 = memory[index++] & 0xFF;
int word = b1 << (8 * 1) | b2;
diff --git a/StringTemplate4/Compiler/CompiledTemplate.cs b/StringTemplate4/Compiler/CompiledTemplate.cs
index 67abc8b..58a36db 100644
--- a/StringTemplate4/Compiler/CompiledTemplate.cs
+++ b/StringTemplate4/Compiler/CompiledTemplate.cs
@@ -109,6 +109,9 @@ namespace StringTemplate.Compiler
{
get
{
+                if (Name == null)
+                    return false;
+
return Name.FullName.StartsWith(TemplateName.TemplateDirectorySeparator + StringTemplate.Template.SubtemplatePrefix);
}
}
diff --git a/StringTemplate4/Debug/ConstructionEvent.cs b/StringTemplate4/Debug/ConstructionEvent.cs
index fc2c86b..dd7ad26 100644
--- a/StringTemplate4/Debug/ConstructionEvent.cs
+++ b/StringTemplate4/Debug/ConstructionEvent.cs
@@ -36,7 +36,7 @@ namespace StringTemplate

public class ConstructionEvent
{
-        private StackTrace stack;
+        private readonly StackTrace stack;

public ConstructionEvent()
{
@@ -47,7 +47,11 @@ namespace StringTemplate
{
get
{
-                return TemplateEntryPoint.GetFileName();
+                var entry = TemplateEntryPoint;
+                if (entry == null)
+                    return string.Empty;
+
+                return entry.GetFileName();
}
}

@@ -55,7 +59,11 @@ namespace StringTemplate
{
get
{
-                return TemplateEntryPoint.GetFileLineNumber();
+                var entry = TemplateEntryPoint;
+                if (entry == null)
+                    return 0;
+
+                return entry.GetFileLineNumber();
}
}

@@ -64,14 +72,23 @@ namespace StringTemplate
get
{
var frames = stack.GetFrames();
+                if (frames == null || frames.Length == 0)
+                    return null;
+
foreach (var frame in frames)
{
var method = frame.GetMethod();
+                    if (method == null)
+                        continue;

if (method.Name == "Main")
return frame;

-                    if (!method.DeclaringType.Namespace.StartsWith("StringTemplate"))
+                    var ns = method.DeclaringType.Namespace;
+                    if (ns == null)
+                        return frame;
+
+                    if (!ns.StartsWith("StringTemplate"))
return frame;
}

diff --git a/StringTemplate4/Debug/EvalExprEvent.cs b/StringTemplate4/Debug/EvalExprEvent.cs
index 43d5e51..4e5822a 100644
--- a/StringTemplate4/Debug/EvalExprEvent.cs
+++ b/StringTemplate4/Debug/EvalExprEvent.cs
@@ -32,6 +32,8 @@

namespace StringTemplate.Debug
{
+    using ArgumentNullException = System.ArgumentNullException;
+
public class EvalExprEvent : InterpEvent
{
int exprStart;
@@ -41,6 +43,9 @@ namespace StringTemplate.Debug
public EvalExprEvent(DebugTemplate self, int start, int stop, int exprStart, int exprStop)
: base(self, start, stop)
{
+            if (self == null)
+                throw new ArgumentNullException("self");
+
this.exprStart = exprStart;
this.exprStop = exprStop;
expr = self.code.template.Substring(exprStart, exprStop - exprStart + 1);
diff --git a/StringTemplate4/Debug/InterpEvent.cs b/StringTemplate4/Debug/InterpEvent.cs
index d748924..168d074 100644
--- a/StringTemplate4/Debug/InterpEvent.cs
+++ b/StringTemplate4/Debug/InterpEvent.cs
@@ -32,11 +32,19 @@

namespace StringTemplate.Debug
{
+    using ArgumentException = System.ArgumentException;
+    using ArgumentNullException = System.ArgumentNullException;
+
public class InterpEvent
{
-        public InterpEvent(DebugTemplate self, int start, int stop)
+        public InterpEvent(DebugTemplate template, int start, int stop)
{
-            this.Template = self;
+            if (template == null)
+                throw new ArgumentNullException("template");
+            if (start > stop)
+                throw new ArgumentException();
+
+            this.Template = template;
this.Start = start;
this.Stop = stop;
}
diff --git a/StringTemplate4/Misc.cs b/StringTemplate4/Misc.cs
index bdd6f43..cc2e5d0 100644
--- a/StringTemplate4/Misc.cs
+++ b/StringTemplate4/Misc.cs
@@ -32,15 +32,29 @@

namespace StringTemplate
{
+    using ArgumentException = System.ArgumentException;
+    using ArgumentNullException = System.ArgumentNullException;
+    using ArgumentOutOfRangeException = System.ArgumentOutOfRangeException;
+
internal static class Misc
{
public static string Strip(string s, int n)
{
+            if (s == null)
+                throw new ArgumentNullException("s");
+            if (n < 0)
+                throw new ArgumentOutOfRangeException("n");
+            if (s.Length - 2 * n < 0)
+                throw new ArgumentException();
+
return s.Substring(n, s.Length - 2 * n);
}

public static string TrimOneStartingWS(string s)
{
+            if (s == null)
+                throw new ArgumentNullException("s");
+
// strip newline from front and back, but just one
if (s.StartsWith("\r\n"))
s = s.Substring(2);
@@ -55,6 +69,9 @@ namespace StringTemplate

public static string ReplaceEscapes(string s)
{
+            if (s == null)
+                throw new ArgumentNullException("s");
+
s = s.Replace("\n", @"\\n");
s = s.Replace("\r", @"\\r");
s = s.Replace("\t", @"\\t");
diff --git a/StringTemplate4/NoIndentWriter.cs b/StringTemplate4/NoIndentWriter.cs
index 939a01d..7d73c1a 100644
--- a/StringTemplate4/NoIndentWriter.cs
+++ b/StringTemplate4/NoIndentWriter.cs
@@ -43,6 +43,9 @@ namespace StringTemplate

public override int Write(string str)
{
+            if (string.IsNullOrEmpty(str))
+                return 0;
+
@out.Write(str);
return str.Length;
}
diff --git a/StringTemplate4/Template.cs b/StringTemplate4/Template.cs
index 0724dc5..79a09f7 100644
--- a/StringTemplate4/Template.cs
+++ b/StringTemplate4/Template.cs
@@ -83,8 +83,8 @@ namespace StringTemplate
*/
public sealed class AttributeList : ArrayList
{
-            public AttributeList(int size)
-                : base(size)
+            public AttributeList(int capacity)
+                : base(capacity)
{
}

diff --git a/StringTemplate4/TemplateName.cs b/StringTemplate4/TemplateName.cs
index 98decfd..0d1e8bc 100644
--- a/StringTemplate4/TemplateName.cs
+++ b/StringTemplate4/TemplateName.cs
@@ -43,7 +43,7 @@ namespace StringTemplate

private static readonly Regex FullNameValidator = new Regex(@"^(?:[a-z_][a-z0-9_\-]*)?(?:/[a-z_][a-z0-9_\-]*)*$", RegexOptions.Compiled | RegexOptions.IgnoreCase);

-        private string _name;
+        private readonly string _name;

public TemplateName(string name)
{

