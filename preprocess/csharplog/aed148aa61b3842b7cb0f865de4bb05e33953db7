commit aed148aa61b3842b7cb0f865de4bb05e33953db7
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sat Apr 2 19:58:13 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sat Apr 2 19:58:13 2011 -0800

(C# 3) Add ExceptionExtensions

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8029]

diff --git a/Antlr4.StringTemplate/Antlr4.StringTemplate.csproj b/Antlr4.StringTemplate/Antlr4.StringTemplate.csproj
index b66fe54..d5aa45c 100644
--- a/Antlr4.StringTemplate/Antlr4.StringTemplate.csproj
+++ b/Antlr4.StringTemplate/Antlr4.StringTemplate.csproj
@@ -44,8 +44,10 @@
<Reference Include="System.Xml" />
</ItemGroup>
<ItemGroup>
+    <Compile Include="Extensions\ExceptionExtensions.cs" />
<Compile Include="IAttributeRenderer.cs" />
<Compile Include="AutoIndentWriter.cs" />
+    <Compile Include="TemplateGroupString.cs" />
<None Include="..\Antlr3\Key.snk">
<Link>Key.snk</Link>
</None>
@@ -136,12 +138,7 @@
<Name>Antlr3.Runtime</Name>
</ProjectReference>
</ItemGroup>
-  <PropertyGroup>
-    <!-- Folder containing AntlrBuildTask.dll -->
-    <AntlrBuildTaskPath>$(SolutionDir)bin\Bootstrap</AntlrBuildTaskPath>
-    <!-- Path to the ANTLR Tool itself. -->
-    <AntlrToolPath>$(SolutionDir)bin\Bootstrap\Antlr3.exe</AntlrToolPath>
-  </PropertyGroup>
+  <ItemGroup />
<PropertyGroup>
<SignAssembly>true</SignAssembly>
</PropertyGroup>
@@ -149,6 +146,12 @@
<AssemblyOriginatorKeyFile>..\Antlr3\Key.snk</AssemblyOriginatorKeyFile>
</PropertyGroup>
<Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+  <PropertyGroup>
+    <!-- Folder containing AntlrBuildTask.dll -->
+    <AntlrBuildTaskPath>$(ProjectDir)..\bin\Bootstrap</AntlrBuildTaskPath>
+    <!-- Path to the ANTLR Tool itself. -->
+    <AntlrToolPath>$(ProjectDir)..\bin\Bootstrap\Antlr3.exe</AntlrToolPath>
+  </PropertyGroup>
<Import Project="$(ProjectDir)..\bin\Bootstrap\Antlr3.targets" />
<!-- To modify your build process, add your task inside one of the targets below and uncomment it.
Other similar extension points exist, see Microsoft.Common.targets.
diff --git a/Antlr4.StringTemplate/Extensions/ExceptionExtensions.cs b/Antlr4.StringTemplate/Extensions/ExceptionExtensions.cs
new file mode 100644
index 0000000..3bb3b77
--- /dev/null
+++ b/Antlr4.StringTemplate/Extensions/ExceptionExtensions.cs
@@ -0,0 +1,69 @@
+ï»¿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2005-2008 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2010 Sam Harwell, Pixel Mine, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr4.StringTemplate.Extensions
+{
+    using System;
+    using BindingFlags = System.Reflection.BindingFlags;
+
+    public static class ExceptionExtensions
+    {
+        private static readonly Action<Exception> _internalPreserveStackTrace =
+            (Action<Exception>)Delegate.CreateDelegate(
+                typeof(Action<Exception>),
+                typeof(Exception).GetMethod(
+                    "InternalPreserveStackTrace",
+                    BindingFlags.Instance | BindingFlags.NonPublic));
+
+#pragma warning disable 618
+        public static bool IsCritical(this Exception e)
+        {
+            if (e is AccessViolationException
+                || e is StackOverflowException
+                || e is ExecutionEngineException
+                || e is OutOfMemoryException
+                || e is BadImageFormatException
+                || e is AppDomainUnloadedException)
+            {
+                return true;
+            }
+
+            return false;
+        }
+#pragma warning restore 618
+
+        public static void PreserveStackTrace(this Exception e)
+        {
+            _internalPreserveStackTrace(e);
+        }
+    }
+}

