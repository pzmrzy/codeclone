commit 09118d0a05e5f06627fc18d944638b5038e57865
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Tue Apr 26 20:10:41 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Tue Apr 26 20:10:41 2011 -0800

(C# 3) Tweaks for tests

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8316]

diff --git a/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs b/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs
index e28e8b8..8225166 100644
--- a/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs
+++ b/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs
@@ -227,7 +227,7 @@ namespace Antlr4.StringTemplate.Compiler
string msg = "premature EOF";
ErrorManager.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
}
-            else if (re is NoViableAltException)
+            else if (re is NoViableAltException || re is MismatchedTokenException)
{
string msg = "'" + re.Token.Text + "' came as a complete surprise to me";
ErrorManager.CompiletimeError(ErrorType.SYNTAX_ERROR, templateToken, re.Token, msg);
diff --git a/Antlr4.StringTemplate/TemplateGroup.cs b/Antlr4.StringTemplate/TemplateGroup.cs
index c35f17a..5dbb539 100644
--- a/Antlr4.StringTemplate/TemplateGroup.cs
+++ b/Antlr4.StringTemplate/TemplateGroup.cs
@@ -464,7 +464,7 @@ namespace Antlr4.StringTemplate

if (LookupTemplate(mangled) == null)
{
-                ErrorManager.CompiletimeError(ErrorType.NO_SUCH_REGION, templateToken, regionT, enclosingTemplateName, name);
+                ErrorManager.CompiletimeError(ErrorType.NO_SUCH_REGION, null, regionT, enclosingTemplateName, name);
return new CompiledTemplate();
}

diff --git a/Antlr4.Test.StringTemplate/TestCoreBasics.cs b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
index 67d9c73..1341563 100644
--- a/Antlr4.Test.StringTemplate/TestCoreBasics.cs
+++ b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
@@ -194,7 +194,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<t.isManager>"; // call isManager
Template st = new Template(template);
st.Add("t", new User(32, "Ter"));
-            string expected = true.ToString();
+            string expected = "true";
string result = st.Render();
Assert.AreEqual(expected, result);
}
@@ -205,7 +205,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<t.hasParkingSpot>"; // call hasParkingSpot
Template st = new Template(template);
st.Add("t", new User(32, "Ter"));
-            string expected = true.ToString();
+            string expected = "true";
string result = st.Render();
Assert.AreEqual(expected, result);
}
diff --git a/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs b/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
index cd43ab2..32f9f46 100644
--- a/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
+++ b/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
@@ -230,7 +230,8 @@ namespace Antlr4.Test.StringTemplate
group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.Listener = errors;
group.Load(); // force load
-            string expected = "[t.stg 1:15: 'b' came as a complete surprise to me]";
+            // TODO: The forced k=2 in TemplateParser results in a message for 'a' instead of 'b'.
+            string expected = "[t.stg 1:13: 'a' came as a complete surprise to me]";
string result = errors.Errors.ToListString();
Assert.AreEqual(expected, result);
}
diff --git a/Antlr4.Test.StringTemplate/TestGroups.cs b/Antlr4.Test.StringTemplate/TestGroups.cs
index 35b3412..e7e5874 100644
--- a/Antlr4.Test.StringTemplate/TestGroups.cs
+++ b/Antlr4.Test.StringTemplate/TestGroups.cs
@@ -327,7 +327,7 @@ namespace Antlr4.Test.StringTemplate
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "group.stg"));
Template b = group.GetInstanceOf("method");
b.Add("name", "foo");
-            string expecting = "foo; True False";
+            string expecting = "foo; true false";
string result = b.Render();
Assert.AreEqual(expecting, result);
}
@@ -555,7 +555,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "group.stg", groupFile);
TemplateGroupFile group = new TemplateGroupFile(Path.Combine(tmpdir, "group.stg"));
Template st = group.GetInstanceOf("g");
-            string expected = "Truea";
+            string expected = "truea";
string result = st.Render();
Assert.AreEqual(expected, result);
}
@@ -624,7 +624,7 @@ namespace Antlr4.Test.StringTemplate
ErrorBuffer errors = new ErrorBuffer();
group.Listener = errors;
group.Load();
-            string expected = "group.stg 2:18: mismatched input '{' expecting ID" + newline;
+            string expected = "group.stg 2:18: mismatched input '{' expecting ELLIPSIS" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
}
@@ -642,7 +642,8 @@ namespace Antlr4.Test.StringTemplate
ErrorBuffer errors = new ErrorBuffer();
group.Listener = errors;
group.Load();
-            string expected = "group.stg 2:22: '=' came as a complete surprise to me" + newline;
+            // TODO: this could be more informative about the incorrect use of named arguments
+            string expected = "group.stg 2:21: 'x' came as a complete surprise to me" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
}
diff --git a/Antlr4.Test.StringTemplate/TestScopes.cs b/Antlr4.Test.StringTemplate/TestScopes.cs
index c6c45c4..72090ac 100644
--- a/Antlr4.Test.StringTemplate/TestScopes.cs
+++ b/Antlr4.Test.StringTemplate/TestScopes.cs
@@ -133,7 +133,7 @@ namespace Antlr4.Test.StringTemplate
string result = st.Render();
group.GetInstanceOf("u").impl.Dump();

-            string expectedError = "t.stg 2:11: implicitly defined attribute i not visible" + newline;
+            string expectedError = "t.stg 2:11: implicitly-defined attribute i not visible" + newline;
Assert.AreEqual(expectedError, errors.ToString());

string expected = ":Ter";

