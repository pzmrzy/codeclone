commit bec4b55dca0145b1464f4a7d8a94fbdd09a8e2bd
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Mar 7 12:54:04 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Mar 7 12:54:04 2011 -0800

(C# 3) Merge CL7800 (Add TemplateGroupString)

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7823]

diff --git a/Antlr4.StringTemplate/Compiler/Group.g3 b/Antlr4.StringTemplate/Compiler/Group.g3
index 3a6ae57..329c2a5 100644
--- a/Antlr4.StringTemplate/Compiler/Group.g3
+++ b/Antlr4.StringTemplate/Compiler/Group.g3
@@ -61,7 +61,8 @@ group[TemplateGroup group, string prefix]
GroupLexer lexer = (GroupLexer)input.TokenSource;
this._group = lexer.group = $group;
}
-	:	(	'import' STRING {_group.ImportTemplates($STRING);}
+	:	oldStyleHeader?
+		(	'import' STRING {_group.ImportTemplates($STRING);}
|	'import' // common error: name not in string
{
MismatchedTokenException e = new MismatchedTokenException(STRING, input);
@@ -71,7 +72,13 @@ this._group = lexer.group = $group;
)*
def[prefix]+
;
-
+
+oldStyleHeader // ignore but lets us use this parser in AW for both v3 and v4
+    :   'group' ID ( ':' ID )?
+	    ( 'implements' ID (',' ID)* )?
+	    ';'
+	;
+
groupName returns [string name]
@init {StringBuilder buf = new StringBuilder();}
:	a=ID {buf.Append($a.text);} ('.' a=ID {buf.Append($a.text);})*
diff --git a/Antlr4.StringTemplate/TemplateGroupString.cs b/Antlr4.StringTemplate/TemplateGroupString.cs
new file mode 100644
index 0000000..9d3bdf0
--- /dev/null
+++ b/Antlr4.StringTemplate/TemplateGroupString.cs
@@ -0,0 +1,115 @@
+ï»¿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr4.StringTemplate
+{
+    using System.Collections.Generic;
+    using Antlr.Runtime;
+    using Antlr4.StringTemplate.Compiler;
+    using Antlr4.StringTemplate.Misc;
+    using Exception = System.Exception;
+
+    /** A group derived from a string not a file or dir. */
+    public class TemplateGroupString : TemplateGroup
+    {
+        private string sourceName;
+        private string text;
+        private bool alreadyLoaded = false;
+        private CommonTokenStream tokens; // keep around for tools that display ST files
+
+        public TemplateGroupString(string text)
+            : this("<string>", text, '<', '>')
+        {
+        }
+
+        public TemplateGroupString(string sourceName, string text)
+            : this(sourceName, text, '<', '>')
+        {
+        }
+
+        public TemplateGroupString(string sourceName, string text, char delimiterStartChar, char delimiterStopChar)
+            : base(delimiterStartChar, delimiterStopChar)
+        {
+            this.sourceName = sourceName;
+            this.text = text;
+        }
+
+        public override string FileName
+        {
+            get
+            {
+                return "<string>";
+            }
+        }
+
+        public override bool IsDefined(string name)
+        {
+            if (!alreadyLoaded)
+                Load();
+            return base.IsDefined(name);
+        }
+
+        public override void Load()
+        {
+            if (alreadyLoaded)
+                return;
+            GroupParser parser = null;
+            try
+            {
+                ANTLRStringStream fs = new ANTLRStringStream(text);
+                fs.name = sourceName;
+                GroupLexer lexer = new GroupLexer(fs);
+                CommonTokenStream tokens = new CommonTokenStream(lexer);
+                parser = new GroupParser(tokens);
+                // no prefix since this group file is the entire group, nothing lives
+                // beneath it.
+                parser.group(this, "");
+            }
+            catch (Exception e)
+            {
+                ErrorManager.IOError(null, ErrorType.CANT_LOAD_GROUP_FILE, e, "<string>");
+            }
+        }
+
+        public virtual IList<IToken> GetTokens()
+        {
+            return tokens.GetTokens();
+        }
+
+        protected override CompiledTemplate Load(string name)
+        {
+            if (!alreadyLoaded)
+                Load();
+            return RawGetTemplate(name);
+        }
+    }
+}
diff --git a/Antlr4.Test.StringTemplate/TestGroups.cs b/Antlr4.Test.StringTemplate/TestGroups.cs
index d2ddc7d..28850dd 100644
--- a/Antlr4.Test.StringTemplate/TestGroups.cs
+++ b/Antlr4.Test.StringTemplate/TestGroups.cs
@@ -58,6 +58,19 @@ namespace Antlr4.Test.StringTemplate
}

[TestMethod]
+        public void TestSimpleGroupFromString()
+        {
+            string g =
+                "a(x) ::= <<foo>>\n" +
+                "b() ::= <<bar>>\n";
+            TemplateGroup group = new TemplateGroupString(g);
+            Template st = group.GetInstanceOf("a");
+            string expected = "foo";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
public void TestGroupWithTwoTemplates()
{
string dir = tmpdir;

