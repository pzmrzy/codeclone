commit 28231140fb823158e9ac770db9a1bb99b11ecc72
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sun Apr 3 14:17:47 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sun Apr 3 14:17:47 2011 -0800

(C# 3) Merge CL8026

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8043]

diff --git a/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs b/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
index 7a52683..e9173e8 100644
--- a/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
+++ b/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
@@ -39,29 +39,29 @@ namespace Antlr4.StringTemplate.Visualizer.Extensions

public static class TemplateExtensions
{
-        public static TemplateVisualizer Visualize(this DebugTemplate template)
+        public static TemplateVisualizer Visualize(this Template template)
{
return Visualize(template, CultureInfo.CurrentCulture);
}

-        public static TemplateVisualizer Visualize(this DebugTemplate template, int lineWidth)
+        public static TemplateVisualizer Visualize(this Template template, int lineWidth)
{
return Visualize(template, template.impl.NativeGroup.ErrorManager, CultureInfo.CurrentCulture, lineWidth);
}

-        public static TemplateVisualizer Visualize(this DebugTemplate template, CultureInfo culture)
+        public static TemplateVisualizer Visualize(this Template template, CultureInfo culture)
{
return Visualize(template, template.impl.NativeGroup.ErrorManager, culture, AutoIndentWriter.NoWrap);
}

-        public static TemplateVisualizer Visualize(this DebugTemplate template, ErrorManager errorManager, CultureInfo culture, int lineWidth)
+        public static TemplateVisualizer Visualize(this Template template, ErrorManager errorManager, CultureInfo culture, int lineWidth)
{
ErrorBuffer errors = new ErrorBuffer();
template.impl.NativeGroup.Listener = errors;
StringWriter @out = new StringWriter();
ITemplateWriter wr = new AutoIndentWriter(@out);
wr.LineWidth = lineWidth;
-            Interpreter interp = new Interpreter(template.groupThatCreatedThisInstance, culture);
+            Interpreter interp = new Interpreter(template.groupThatCreatedThisInstance, culture, true);
interp.Execute(wr, template); // Render and track events
TemplateVisualizer visualizer = new TemplateVisualizer(errorManager, template, @out.ToString(), interp, interp.GetExecutionTrace(), errors.Errors);
visualizer.Show();
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs b/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
index 1b7cc16..702c825 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
+++ b/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
@@ -45,30 +45,38 @@ namespace Antlr4.StringTemplate.Visualizer
private static readonly PropertyChangedEventArgs IsSelectedPropertyChangedEventArgs = new PropertyChangedEventArgs("IsSelected");

private readonly Interpreter _interpreter;
-        private readonly DebugTemplate _template;
+        private readonly EvalTemplateEvent _event;
private List<TemplateCallHierarchyViewModel> _children;

private bool _isExpanded;
private bool _isSelected;

-        public TemplateCallHierarchyViewModel(Interpreter interpreter, DebugTemplate template)
+        public TemplateCallHierarchyViewModel(Interpreter interpreter, EvalTemplateEvent @event)
{
if (interpreter == null)
throw new ArgumentNullException("interpreter");
-            if (template == null)
-                throw new ArgumentNullException("template");
+            if (@event == null)
+                throw new ArgumentNullException("event");

this._interpreter = interpreter;
-            this._template = template;
+            this._event = @event;
}

public event PropertyChangedEventHandler PropertyChanged;

-        public DebugTemplate Template
+        public EvalTemplateEvent Event
{
get
{
-                return _template;
+                return _event;
+            }
+        }
+
+        public Template Template
+        {
+            get
+            {
+                return _event.Template;
}
}

@@ -114,8 +122,8 @@ namespace Antlr4.StringTemplate.Visualizer
if (_children == null)
{
_children = new List<TemplateCallHierarchyViewModel>();
-                    foreach (var @event in _interpreter.GetEvents(_template))
-                        _children.Add(new TemplateCallHierarchyViewModel(_interpreter, @event.Template));
+                    foreach (var @event in _interpreter.GetDebugState(_event.Template).ChildEvalTemplateEvents)
+                        _children.Add(new TemplateCallHierarchyViewModel(_interpreter, @event));
}

return _children;
@@ -124,10 +132,14 @@ namespace Antlr4.StringTemplate.Visualizer

public override string ToString()
{
-            if (_template.IsAnonymousSubtemplate)
+            Template template = _event.Template;
+            if (template.IsAnonymousSubtemplate)
return "{...}";

-            return string.Format("{0} @ {1}:{2}", _template, Path.GetFileName(_template.newSTEvent.GetFileName()), _template.newSTEvent.GetLine());
+            if (template.DebugState == null || template.DebugState.NewTemplateEvent == null)
+                return string.Format("{0}", template);
+
+            return string.Format("{0} @ {1}:{2}", template, Path.GetFileName(template.DebugState.NewTemplateEvent.GetFileName()), template.DebugState.NewTemplateEvent.GetLine());
}

protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizer.cs b/Antlr4.StringTemplate.Visualizer/TemplateVisualizer.cs
index 6cf5a2f..325fb21 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateVisualizer.cs
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizer.cs
@@ -41,13 +41,13 @@ namespace Antlr4.StringTemplate.Visualizer
public class TemplateVisualizer
{
private readonly ErrorManager _errorManager;
-        private readonly DebugTemplate _root;
+        private readonly Template _root;
private readonly string _output;
private readonly Interpreter _interpreter;
private readonly List<string> _trace;
private readonly ReadOnlyCollection<TemplateMessage> _errors;

-        public TemplateVisualizer(ErrorManager errorManager, DebugTemplate root, string output, Interpreter interpreter, List<string> trace, ReadOnlyCollection<TemplateMessage> errors)
+        public TemplateVisualizer(ErrorManager errorManager, Template root, string output, Interpreter interpreter, List<string> trace, ReadOnlyCollection<TemplateMessage> errors)
{
if (errorManager == null)
throw new ArgumentNullException("errorManager");
@@ -76,7 +76,7 @@ namespace Antlr4.StringTemplate.Visualizer
}
}

-        public DebugTemplate RootTemplate
+        public Template RootTemplate
{
get
{
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
index 9867ffe..913c0ad 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
@@ -50,7 +50,7 @@ namespace Antlr4.StringTemplate.Visualizer

public partial class TemplateVisualizerFrame : UserControl
{
-        private DebugTemplate currentTemplate;
+        private Template currentTemplate;

public TemplateVisualizerFrame()
{
@@ -97,7 +97,7 @@ namespace Antlr4.StringTemplate.Visualizer
if (runtimeMessage != null)
{
Interval interval = runtimeMessage.SourceInterval;
-                currentTemplate = (DebugTemplate)message.Self;
+                currentTemplate = message.Self;
UpdateCurrentTemplate();
Highlight(TemplateTextBox.Document, interval);
}
@@ -212,21 +212,54 @@ namespace Antlr4.StringTemplate.Visualizer
if (viewModel == null)
return;

+            // update all views according to current template
UpdateStack();
UpdateAttributes();
viewModel.Bytecode = currentTemplate.impl.Disassemble();
-            viewModel.Ast = currentTemplate.impl.ast;
-
-            SetSelectionPath(viewModel.TemplateCallHierarchy[0], currentTemplate.GetEnclosingInstanceStack(true));
-
TemplateTextBox.Document = new FlowDocument(new Paragraph(new Run(currentTemplate.impl.template)
{
FontFamily = new FontFamily("Consolas")
}));
+
+            #region new stuff
+
+            // update tree view of template hierarchy and select assoc. text substring
+
+            // compute path from root to currentST, create TreePath for tree widget
+            //		List<ST> pathST = currentST.getEnclosingInstanceStack(true);
+            ////		System.out.println("path="+pathST);
+            //		Object[] path = new Object[pathST.size()];
+            //		int j = 0;
+            //		for (ST s : pathST) path[j++] = new JTreeSTModel.Node(s, interp.getDebugState(s));
+            //		m.tree.setSelectionPath(new TreePath(path));
+
+            // highlight output text and, if {...} subtemplate, region in ST src
+            // get last event for currentST; it's the event that captures ST eval
+            List<InterpEvent> events = viewModel.Visualizer.Interpreter.GetDebugState(currentTemplate).Events;
+            EvalTemplateEvent e = (EvalTemplateEvent)events[events.Count - 1];
+            //m.output.moveCaretPosition(e.outputStartChar);
+            Highlight(OutputTextBox.Document, e.OutputInterval);
+            if (currentTemplate.IsAnonymousSubtemplate)
+            {
+                Interval r = currentTemplate.impl.TemplateRange;
+                //				System.out.println("currentST src range="+r);
+                //m.template.moveCaretPosition(r.a);
+                //TemplateTextBox.CaretPosition.
+                Highlight(TemplateTextBox.Document, r);
+            }
+
+            #endregion
+
+#if false
+            // update tree view of template hierarchy and select assoc. text substring
+            viewModel.Ast = currentTemplate.impl.ast;
+
+            SetSelectionPath(viewModel.TemplateCallHierarchy[0], currentTemplate.GetEnclosingInstanceStack(true));
+
Interval r = currentTemplate.impl.TemplateRange;
if (currentTemplate.EnclosingInstance != null)
{
-                int i = GetIndexOfChild((DebugTemplate)currentTemplate.EnclosingInstance, currentTemplate);
+                int i = GetIndexOfChild(currentTemplate.EnclosingInstance, currentTemplate);
if (i == -1)
{
Highlight(OutputTextBox.Document, null);
@@ -249,19 +282,19 @@ namespace Antlr4.StringTemplate.Visualizer
Highlight(OutputTextBox.Document, null);
Highlight(TemplateTextBox.Document, r);
}
+#endif
}

-        private int GetIndexOfChild(DebugTemplate parent, Template child)
+        private int GetIndexOfChild(EvalTemplateEvent parent, EvalTemplateEvent child)
{
if (parent == null)
throw new ArgumentNullException("parent");
if (child == null)
throw new ArgumentNullException("child");

-
TemplateCallHierarchyViewModel hierarchy = new TemplateCallHierarchyViewModel(ViewModel.Visualizer.Interpreter, parent);
List<TemplateCallHierarchyViewModel> children = hierarchy.Children;
-            return children.FindIndex(i => i.Template == child);
+            return children.FindIndex(i => i.Event == child);
}

private void UpdateStack()
@@ -287,10 +320,10 @@ namespace Antlr4.StringTemplate.Visualizer
if (valueList != null)
value = valueList.ToListString();

-                    if (currentTemplate.addAttrEvents != null)
+                    if (currentTemplate.DebugState != null && currentTemplate.DebugState.AddAttributeEvents != null)
{
List<AddAttributeEvent> events;
-                        currentTemplate.addAttrEvents.TryGetValue(attribute.Key, out events);
+                        currentTemplate.DebugState.AddAttributeEvents.TryGetValue(attribute.Key, out events);
StringBuilder locations = new StringBuilder();
int i = 0;
if (events != null)
@@ -305,7 +338,14 @@ namespace Antlr4.StringTemplate.Visualizer
}
}

-                        attributesList.Add(string.Format("{0} = {1} @ {2}", attribute.Key, value, locations));
+                        if (locations.Length > 0)
+                        {
+                            attributesList.Add(string.Format("{0} = {1} @ {2}", attribute.Key, value, locations));
+                        }
+                        else
+                        {
+                            attributesList.Add(string.Format("{0} = {1}", attribute.Key, value));
+                        }
}
else
{
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerViewModel.cs b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerViewModel.cs
index 45718c1..d4b7f1c 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerViewModel.cs
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerViewModel.cs
@@ -65,10 +65,11 @@ namespace Antlr4.StringTemplate.Visualizer

_visualizer = visualizer;
_allEvents = visualizer.Interpreter.GetEvents();
+            List<InterpEvent> events = visualizer.Interpreter.GetDebugState(visualizer.RootTemplate).Events;
_templateCallHierarchy =
new List<TemplateCallHierarchyViewModel>()
{
-                    new TemplateCallHierarchyViewModel(visualizer.Interpreter, visualizer.RootTemplate)
+                    new TemplateCallHierarchyViewModel(visualizer.Interpreter, (EvalTemplateEvent)events[events.Count - 1])
};
}

diff --git a/Antlr4.StringTemplate/Antlr4.StringTemplate.csproj b/Antlr4.StringTemplate/Antlr4.StringTemplate.csproj
index 6a42190..aa1994c 100644
--- a/Antlr4.StringTemplate/Antlr4.StringTemplate.csproj
+++ b/Antlr4.StringTemplate/Antlr4.StringTemplate.csproj
@@ -74,7 +74,7 @@
<Compile Include="Compiler\TestNewStuff.cs" />
<Compile Include="Debug\AddAttributeEvent.cs" />
<Compile Include="Debug\ConstructionEvent.cs" />
-    <Compile Include="Debug\DebugTemplate.cs" />
+    <None Include="Debug\DebugTemplate.cs" />
<Compile Include="Debug\EvalExprEvent.cs" />
<Compile Include="Debug\EvalTemplateEvent.cs" />
<Compile Include="Debug\InterpEvent.cs" />
diff --git a/Antlr4.StringTemplate/Compiler/CodeGenerator.g3 b/Antlr4.StringTemplate/Compiler/CodeGenerator.g3
index f8da1c8..e83634a 100644
--- a/Antlr4.StringTemplate/Compiler/CodeGenerator.g3
+++ b/Antlr4.StringTemplate/Compiler/CodeGenerator.g3
@@ -132,11 +132,9 @@ subtemplate returns [string name, int nargs]
CompiledTemplate sub = $template.impl;
sub.isAnonSubtemplate = true;
sub.templateDefStartToken = $SUBTEMPLATE.Token;
-			if ( Group.Debug ) {
-				sub.ast = $SUBTEMPLATE;
-				sub.ast.SetUnknownTokenBoundaries();
-				sub.tokens = input.TokenStream;
-			}
+			sub.ast = $SUBTEMPLATE;
+			sub.ast.SetUnknownTokenBoundaries();
+			sub.tokens = input.TokenStream;
outermostImpl.AddImplicitlyDefinedTemplate(sub);
}
)
diff --git a/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs b/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs
index 8e3f817..4e482c5 100644
--- a/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs
+++ b/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs
@@ -175,13 +175,9 @@ namespace Antlr4.StringTemplate.Compiler
impl2 = gen.template(name, args);
impl2.NativeGroup = Group;
impl2.template = template;
-                // only save tree/token stream when debugging
-                if (Group.Debug)
-                {
-                    impl2.ast = (CommonTree)r.Tree;
-                    impl2.ast.SetUnknownTokenBoundaries();
-                    impl2.tokens = tokens;
-                }
+                impl2.ast = r.Tree;
+                impl2.ast.SetUnknownTokenBoundaries();
+                impl2.tokens = tokens;
}
catch (RecognitionException re)
{
diff --git a/Antlr4.StringTemplate/Debug/ConstructionEvent.cs b/Antlr4.StringTemplate/Debug/ConstructionEvent.cs
index ba2ac42..21699be 100644
--- a/Antlr4.StringTemplate/Debug/ConstructionEvent.cs
+++ b/Antlr4.StringTemplate/Debug/ConstructionEvent.cs
@@ -63,6 +63,7 @@ namespace Antlr4.StringTemplate.Debug
if (!name.StartsWith("Antlr4.StringTemplate"))
return e;
}
+
return trace[0];
}
}
diff --git a/Antlr4.StringTemplate/Debug/EvalExprEvent.cs b/Antlr4.StringTemplate/Debug/EvalExprEvent.cs
index a4d56ca..2a97eb1 100644
--- a/Antlr4.StringTemplate/Debug/EvalExprEvent.cs
+++ b/Antlr4.StringTemplate/Debug/EvalExprEvent.cs
@@ -40,7 +40,7 @@ namespace Antlr4.StringTemplate.Debug
private readonly Interval _sourceInterval;
private readonly string expr = string.Empty;

-        public EvalExprEvent(DebugTemplate template, Interval outputInterval, Interval sourceInterval)
+        public EvalExprEvent(Template template, Interval outputInterval, Interval sourceInterval)
: base(template, outputInterval)
{
this._sourceInterval = sourceInterval;
diff --git a/Antlr4.StringTemplate/Debug/EvalTemplateEvent.cs b/Antlr4.StringTemplate/Debug/EvalTemplateEvent.cs
index e42042e..ed580a4 100644
--- a/Antlr4.StringTemplate/Debug/EvalTemplateEvent.cs
+++ b/Antlr4.StringTemplate/Debug/EvalTemplateEvent.cs
@@ -36,7 +36,7 @@ namespace Antlr4.StringTemplate.Debug

public class EvalTemplateEvent : InterpEvent
{
-        public EvalTemplateEvent(DebugTemplate template, Interval interval)
+        public EvalTemplateEvent(Template template, Interval interval)
: base(template, interval)
{
}
diff --git a/Antlr4.StringTemplate/Debug/IndentEvent.cs b/Antlr4.StringTemplate/Debug/IndentEvent.cs
index 52cd9eb..28cc453 100644
--- a/Antlr4.StringTemplate/Debug/IndentEvent.cs
+++ b/Antlr4.StringTemplate/Debug/IndentEvent.cs
@@ -36,7 +36,7 @@ namespace Antlr4.StringTemplate.Debug

public class IndentEvent : EvalExprEvent
{
-        public IndentEvent(DebugTemplate template, Interval outputInterval, Interval sourceInterval)
+        public IndentEvent(Template template, Interval outputInterval, Interval sourceInterval)
: base(template, outputInterval, sourceInterval)
{
}
diff --git a/Antlr4.StringTemplate/Debug/InterpEvent.cs b/Antlr4.StringTemplate/Debug/InterpEvent.cs
index a0734d1..e7ead07 100644
--- a/Antlr4.StringTemplate/Debug/InterpEvent.cs
+++ b/Antlr4.StringTemplate/Debug/InterpEvent.cs
@@ -37,11 +37,11 @@ namespace Antlr4.StringTemplate.Debug

public class InterpEvent
{
-        private readonly DebugTemplate _template;
+        private readonly Template _template;
// output location
private readonly Interval _interval;

-        public InterpEvent(DebugTemplate template, Interval interval)
+        public InterpEvent(Template template, Interval interval)
{
if (template == null)
throw new ArgumentNullException("template");
@@ -52,7 +52,7 @@ namespace Antlr4.StringTemplate.Debug
this._interval = interval;
}

-        public DebugTemplate Template
+        public Template Template
{
get
{
diff --git a/Antlr4.StringTemplate/Interpreter.cs b/Antlr4.StringTemplate/Interpreter.cs
index d5aeb8e..cae0ba7 100644
--- a/Antlr4.StringTemplate/Interpreter.cs
+++ b/Antlr4.StringTemplate/Interpreter.cs
@@ -103,40 +103,48 @@ namespace Antlr4.StringTemplate
private int current_ip = 0; // mirrors ip in exec(), but visible to all methods
private int nwline = 0;     // how many char written on this template LINE so far?

-        /** Track everything happening in interp if debug across all templates */
-        private List<InterpEvent> events;
-
-        /** If debug mode, track trace here */
+        /** If trace mode, track trace here */
// TODO: track the pieces not a string and track what it contributes to output
private List<string> executeTrace;

-        private IDictionary<Template, List<InterpEvent>> debugInfo;
+        /** Track events inside templates and in this.events */
+        private bool _debug;
+
+        /** Track everything happening in interp if debug across all templates.
+         *  The last event in this field is the EvalTemplateEvent for the root
+         *  template.
+         */
+        private List<InterpEvent> events;
+
+        /** Track interp events for every ST we exec */
+        protected IDictionary<Template, Template.InterpDebugState> debugStateMap;

-        public Interpreter(TemplateGroup group)
-            : this(group, CultureInfo.CurrentCulture, group.ErrorManager)
+        public Interpreter(TemplateGroup group, bool debug)
+            : this(group, CultureInfo.CurrentCulture, group.ErrorManager, debug)
{
}

-        public Interpreter(TemplateGroup group, CultureInfo culture)
-            : this(group, culture, group.ErrorManager)
+        public Interpreter(TemplateGroup group, CultureInfo culture, bool debug)
+            : this(group, culture, group.ErrorManager, debug)
{
}

-        public Interpreter(TemplateGroup group, ErrorManager errMgr)
-            : this(group, CultureInfo.CurrentCulture, errMgr)
+        public Interpreter(TemplateGroup group, ErrorManager errMgr, bool debug)
+            : this(group, CultureInfo.CurrentCulture, errMgr, debug)
{
}

-        public Interpreter(TemplateGroup group, CultureInfo culture, ErrorManager errMgr)
+        public Interpreter(TemplateGroup group, CultureInfo culture, ErrorManager errMgr, bool debug)
{
this.group = group;
this.culture = culture;
this.errMgr = errMgr;
-            if (group.Debug)
+            this._debug = debug;
+            if (debug)
{
events = new List<InterpEvent>();
+                debugStateMap = new Dictionary<Template, Template.InterpDebugState>();
executeTrace = new List<string>();
-                debugInfo = new Dictionary<Template, List<InterpEvent>>();
}
}

@@ -170,7 +178,7 @@ namespace Antlr4.StringTemplate
int ip = 0;
while (ip < self.impl.codeSize)
{
-                if (trace || group.Debug)
+                if (trace || _debug)
Trace(self, ip);

Bytecode opcode = (Bytecode)code[ip];
@@ -523,16 +531,10 @@ namespace Antlr4.StringTemplate
prevOpcode = opcode;
}

-            if (group.Debug && self is DebugTemplate)
+            if (_debug)
{
-                EvalTemplateEvent e = new EvalTemplateEvent((DebugTemplate)self, Interval.FromBounds(start, @out.Index));
-                //Console.WriteLine(e);
-                events.Add(e);
-                if (self.EnclosingInstance != null)
-                {
-                    DebugTemplate parent = (DebugTemplate)self.EnclosingInstance;
-                    GetEvents(parent).Add(e);
-                }
+                EvalTemplateEvent e = new EvalTemplateEvent(self, Interval.FromBounds(start, @out.Index));
+                TrackDebugEvent(self, e);
}
return n;
}
@@ -547,14 +549,15 @@ namespace Antlr4.StringTemplate
{
errMgr.RuntimeError(self, current_ip, ErrorType.NO_IMPORTED_TEMPLATE,
name);
-                st = self.groupThatCreatedThisInstance.CreateStringTemplate();
+                st = self.groupThatCreatedThisInstance.CreateStringTemplateInternally();
+                st.EnclosingInstance = self;
st.impl = new CompiledTemplate();
sp -= nargs;
operands[++sp] = st;
return;
}

-            st = imported.NativeGroup.CreateStringTemplate();
+            st = imported.NativeGroup.CreateStringTemplateInternally();
st.EnclosingInstance = self; // self invoked super.name()
st.groupThatCreatedThisInstance = group;
st.impl = imported;
@@ -572,13 +575,14 @@ namespace Antlr4.StringTemplate
if (imported == null)
{
errMgr.RuntimeError(self, current_ip, ErrorType.NO_IMPORTED_TEMPLATE, name);
-                st = self.groupThatCreatedThisInstance.CreateStringTemplate();
+                st = self.groupThatCreatedThisInstance.CreateStringTemplateInternally();
+                st.EnclosingInstance = self;
st.impl = new CompiledTemplate();
operands[++sp] = st;
return;
}

-            st = imported.NativeGroup.CreateStringTemplate();
+            st = imported.NativeGroup.CreateStringTemplateInternally();
st.EnclosingInstance = self; // self invoked super.name()
st.groupThatCreatedThisInstance = group;
st.impl = imported;
@@ -656,12 +660,11 @@ namespace Antlr4.StringTemplate
protected void Indent(ITemplateWriter @out, Template self, int strIndex)
{
string indent = self.impl.strings[strIndex];
-            if (group.Debug && self is DebugTemplate)
+            if (_debug)
{
int start = @out.Index; // track char we're about to write
-                EvalExprEvent e = new IndentEvent((DebugTemplate)self, new Interval(start, indent.Length), GetExpressionInterval(self));
-                //Console.WriteLine(e);
-                events.Add(e);
+                EvalExprEvent e = new IndentEvent(self, new Interval(start, indent.Length), GetExpressionInterval(self));
+                TrackDebugEvent(self, e);
}

@out.PushIndentation(indent);
@@ -674,13 +677,13 @@ namespace Antlr4.StringTemplate
{
int start = @out.Index; // track char we're about to Write
int n = WriteObject(@out, self, o, null);
-            if (group.Debug && self is DebugTemplate)
+            if (_debug)
{
Interval templateLocation = self.impl.sourceMap[current_ip];
-                EvalExprEvent e = new EvalExprEvent((DebugTemplate)self, Interval.FromBounds(start, @out.Index), templateLocation);
-                Console.WriteLine(e);
-                events.Add(e);
+                EvalExprEvent e = new EvalExprEvent(self, Interval.FromBounds(start, @out.Index), templateLocation);
+                TrackDebugEvent(self, e);
}
+
return n;
}

@@ -714,12 +717,11 @@ namespace Antlr4.StringTemplate
@out.PopAnchorPoint();
}

-            if (group.Debug && self is DebugTemplate)
+            if (_debug)
{
Interval templateLocation = self.impl.sourceMap[current_ip];
-                EvalExprEvent e = new EvalExprEvent((DebugTemplate)self, Interval.FromBounds(start, @out.Index), templateLocation);
-                Console.WriteLine(e);
-                events.Add(e);
+                EvalExprEvent e = new EvalExprEvent(self, Interval.FromBounds(start, @out.Index), templateLocation);
+                TrackDebugEvent(self, e);
}

return n;
@@ -864,7 +866,8 @@ namespace Antlr4.StringTemplate
{
// if only single value, just apply first template to sole value
Template proto = prototypes[0];
-                Template st = group.CreateStringTemplate(proto);
+                Template st = group.CreateStringTemplateInternally(proto);
+                st.EnclosingInstance = self;
if (st != null)
{
SetFirstArgument(self, st, attr);
@@ -901,7 +904,8 @@ namespace Antlr4.StringTemplate
int templateIndex = ti % prototypes.Count; // rotate through
ti++;
Template proto = prototypes[templateIndex];
-                Template st = group.CreateStringTemplate(proto);
+                Template st = group.CreateStringTemplateInternally(proto);
+                st.EnclosingInstance = self;
SetFirstArgument(self, st, iterValue);
if (st.impl.isAnonSubtemplate)
{
@@ -967,7 +971,8 @@ namespace Antlr4.StringTemplate
{
// get a value for each attribute in list; put into Template instance
int numEmpty = 0;
-                Template embedded = group.CreateStringTemplate(prototype);
+                Template embedded = group.CreateStringTemplateInternally(prototype);
+                embedded.EnclosingInstance = self;
embedded.RawSetAttribute("i0", i2);
embedded.RawSetAttribute("i", i2 + 1);
for (int a = 0; a < numExprs; a++)
@@ -1357,7 +1362,7 @@ namespace Antlr4.StringTemplate

if (arg.DefaultValueToken.Type == GroupParser.ANONYMOUS_TEMPLATE)
{
-                    Template defaultArgST = group.CreateStringTemplate();
+                    Template defaultArgST = group.CreateStringTemplateInternally();
// default arg template must see other args so it's enclosing
// instance is the template we are invoking.
defaultArgST.EnclosingInstance = invokedST;
@@ -1408,7 +1413,7 @@ namespace Antlr4.StringTemplate
tr.Append(", sp=" + sp + ", nw=" + nwline);
string s = tr.ToString();

-            if (group.Debug)
+            if (_debug)
executeTrace.Add(s);

if (trace)
@@ -1448,13 +1453,42 @@ namespace Antlr4.StringTemplate
return events;
}

-        public virtual List<InterpEvent> GetEvents(Template st)
+        /** For every event, we track in overall list and in self's
+         *  event list so that each template has a list of events used to
+         *  create it.  If EvalTemplateEvent, store in parent's
+         *  childEvalTemplateEvents list for STViz tree view.
+         */
+        protected void TrackDebugEvent(Template self, InterpEvent e)
+        {
+            //		System.out.println(e);
+            this.events.Add(e);
+            //		if ( self.debugState==null ) self.debugState = new ST.DebugState();
+            //		self.debugState.events.add(e);
+            GetDebugState(self).Events.Add(e);
+            if (e is EvalTemplateEvent)
+            {
+                //ST parent = getDebugState(self).interpEnclosingInstance;
+                Template parent = self.EnclosingInstance;
+                if (parent != null)
+                {
+                    // System.out.println("add eval "+e.self.getName()+" to children of "+parent.getName());
+                    //				if ( parent.debugState==null ) parent.debugState = new ST.DebugState();
+                    //				parent.debugState.childEvalTemplateEvents.add((EvalTemplateEvent)e);
+                    GetDebugState(parent).ChildEvalTemplateEvents.Add((EvalTemplateEvent)e);
+                }
+            }
+        }
+
+        public Template.InterpDebugState GetDebugState(Template st)
{
-            List<InterpEvent> events;
-            if (!debugInfo.TryGetValue(st, out events) || events == null)
-                debugInfo[st] = events = new List<InterpEvent>();
+            Template.InterpDebugState result;
+            if (!debugStateMap.TryGetValue(st, out result))
+            {
+                result = new Template.InterpDebugState();
+                debugStateMap[st] = result;
+            }

-            return events;
+            return result;
}

public virtual List<string> GetExecutionTrace()
diff --git a/Antlr4.StringTemplate/Misc/MapModelAdaptor.cs b/Antlr4.StringTemplate/Misc/MapModelAdaptor.cs
index 3dc268d..cff1932 100644
--- a/Antlr4.StringTemplate/Misc/MapModelAdaptor.cs
+++ b/Antlr4.StringTemplate/Misc/MapModelAdaptor.cs
@@ -60,6 +60,15 @@ namespace Antlr4.StringTemplate.Misc
value = property;
}

+            Template template = value as Template;
+            if (template != null)
+            {
+                // dup, don't alter existing template; it's a prototype
+                template = template.groupThatCreatedThisInstance.CreateStringTemplateInternally(template);
+                template.EnclosingInstance = self;
+                value = template;
+            }
+
return value;
}
}
diff --git a/Antlr4.StringTemplate/Template.cs b/Antlr4.StringTemplate/Template.cs
index 421b1bf..5dcc6ec 100644
--- a/Antlr4.StringTemplate/Template.cs
+++ b/Antlr4.StringTemplate/Template.cs
@@ -37,6 +37,7 @@ namespace Antlr4.StringTemplate
using System.Runtime.CompilerServices;
using System.Text.RegularExpressions;
using Antlr4.StringTemplate.Compiler;
+    using Antlr4.StringTemplate.Debug;
using Antlr4.StringTemplate.Misc;
using ArgumentException = System.ArgumentException;
using ArgumentNullException = System.ArgumentNullException;
@@ -105,6 +106,11 @@ namespace Antlr4.StringTemplate
*/
public TemplateGroup groupThatCreatedThisInstance;

+        /** If Interpreter.trackCreationEvents, track creation, add-attr events
+         *  for each object. Create this object on first use.
+         */
+        private TemplateDebugState _debugState;
+
/** Just an alias for ArrayList, but this way I can track whether a
*  list is something Template created or it's an incoming list.
*/
@@ -121,8 +127,14 @@ namespace Antlr4.StringTemplate
}

/** Used by group creation routine, not by users */
-        public Template()
+        internal Template(TemplateGroup group)
{
+            if (group.TrackCreationEvents)
+            {
+                if (_debugState == null)
+                    _debugState = new TemplateDebugState();
+                _debugState.NewTemplateEvent = new ConstructionEvent();
+            }
}

/** Used to make templates inline in code for simple things like SQL or log records.
@@ -152,7 +164,9 @@ namespace Antlr4.StringTemplate
impl.DefineImplicitlyDefinedTemplates(groupThatCreatedThisInstance);
}

-        /** Clone a prototype template for application in MAP operations; copy all fields */
+        /** Clone a prototype template for application in MAP operations; copy all fields
+         *  except DebugState.
+         */
public Template(Template prototype)
: this(prototype, false, prototype != null ? prototype.EnclosingInstance : null)
{
@@ -169,6 +183,19 @@ namespace Antlr4.StringTemplate
this.groupThatCreatedThisInstance = prototype.groupThatCreatedThisInstance;
}

+        public TemplateDebugState DebugState
+        {
+            get
+            {
+                return _debugState;
+            }
+
+            set
+            {
+                _debugState = value;
+            }
+        }
+
public Template EnclosingInstance
{
get
@@ -200,13 +227,20 @@ namespace Antlr4.StringTemplate
public virtual Template Add(string name, object value)
{
if (name == null)
-                return this; // allow null value
+                return this; // allow null value but not name

if (name.IndexOf('.') >= 0)
{
throw new ArgumentException("cannot have '.' in attribute names");
}

+            if (groupThatCreatedThisInstance.TrackCreationEvents)
+            {
+                if (_debugState == null)
+                    _debugState = new TemplateDebugState();
+                _debugState.AddAttributeEvents.Add(name, new AddAttributeEvent(name, value));
+            }
+
FormalArgument arg = null;
if (impl.hasFormalArgs)
{
@@ -293,7 +327,10 @@ namespace Antlr4.StringTemplate
int i = 0;
Aggregate aggr = new Aggregate();
foreach (string p in propNames)
-                aggr[p] = values[i++];
+            {
+                object value = values[i++];
+                aggr[p] = value;
+            }

Add(aggrName, aggr); // now add as usual
return this;
@@ -472,28 +509,28 @@ namespace Antlr4.StringTemplate

public virtual int Write(ITemplateWriter @out)
{
-            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, impl.NativeGroup.ErrorManager);
+            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, impl.NativeGroup.ErrorManager, false);
interp.SetDefaultArguments(this);
return interp.Execute(@out, this);
}

public virtual int Write(ITemplateWriter @out, CultureInfo culture)
{
-            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, culture, impl.NativeGroup.ErrorManager);
+            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, culture, impl.NativeGroup.ErrorManager, false);
interp.SetDefaultArguments(this);
return interp.Execute(@out, this);
}

public virtual int Write(ITemplateWriter @out, ITemplateErrorListener listener)
{
-            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, new ErrorManager(listener));
+            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, new ErrorManager(listener), false);
interp.SetDefaultArguments(this);
return interp.Execute(@out, this);
}

public virtual int Write(ITemplateWriter @out, CultureInfo culture, ITemplateErrorListener listener)
{
-            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, culture, new ErrorManager(listener));
+            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, culture, new ErrorManager(listener), false);
interp.SetDefaultArguments(this);
return interp.Execute(@out, this);
}
@@ -542,6 +579,43 @@ namespace Antlr4.StringTemplate
return @out.ToString();
}

+        // TESTING SUPPORT
+
+        public virtual List<InterpEvent> GetEvents()
+        {
+            return GetEvents(CultureInfo.CurrentCulture);
+        }
+
+        public virtual List<InterpEvent> GetEvents(int lineWidth)
+        {
+            return GetEvents(CultureInfo.CurrentCulture, lineWidth);
+        }
+
+        public virtual List<InterpEvent> GetEvents(ITemplateWriter writer)
+        {
+            return GetEvents(CultureInfo.CurrentCulture, writer);
+        }
+
+        public virtual List<InterpEvent> GetEvents(CultureInfo locale)
+        {
+            return GetEvents(locale, AutoIndentWriter.NoWrap);
+        }
+
+        public virtual List<InterpEvent> GetEvents(CultureInfo locale, int lineWidth)
+        {
+            StringWriter @out = new StringWriter();
+            ITemplateWriter wr = new AutoIndentWriter(@out);
+            wr.LineWidth = lineWidth;
+            return GetEvents(locale, wr);
+        }
+
+        public virtual List<InterpEvent> GetEvents(CultureInfo culture, ITemplateWriter writer)
+        {
+            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, culture, true);
+            interp.Execute(writer, this); // Render and track events
+            return interp.GetEvents();
+        }
+
public override string ToString()
{
if (impl == null)
@@ -576,5 +650,38 @@ namespace Antlr4.StringTemplate
}
return st.Render(lineWidth);
}
+
+        /** Events during template hierarchy construction (not evaluation) */
+        public class TemplateDebugState
+        {
+            /** Record who made us? ConstructionEvent creates Exception to grab stack */
+            public ConstructionEvent NewTemplateEvent;
+
+            /** Track construction-time add attribute "events"; used for ST user-level debugging */
+            public MultiMap<string, AddAttributeEvent> AddAttributeEvents = new MultiMap<string, AddAttributeEvent>();
+        }
+
+        /** Track all events that happen while evaluating this template */
+        public class InterpDebugState
+        {
+            /* Includes the EvalTemplateEvent for this template.  This
+            *  is a subset of Interpreter.events field. The final
+            *  EvalTemplateEvent is stored in 3 places:
+            *
+            *  	1. In enclosingInstance's childTemplateEvents
+            *  	2. In this event list
+            *  	3. In the overall event list
+            *
+            *  The root ST has the final EvalTemplateEvent in its list.
+            *
+            *  All events get added to the enclosingInstance's event list.
+            */
+            public List<InterpEvent> Events = new List<InterpEvent>();
+
+            /** All templates evaluated and embedded in this ST. Used
+             *  for tree view in STViz.
+             */
+            public List<EvalTemplateEvent> ChildEvalTemplateEvents = new List<EvalTemplateEvent>();
+        }
}
}
diff --git a/Antlr4.StringTemplate/TemplateGroup.cs b/Antlr4.StringTemplate/TemplateGroup.cs
index 4285dfb..65ff58c 100644
--- a/Antlr4.StringTemplate/TemplateGroup.cs
+++ b/Antlr4.StringTemplate/TemplateGroup.cs
@@ -119,6 +119,14 @@ namespace Antlr4.StringTemplate
{typeof(Aggregate), new AggregateModelAdaptor()},
};

+        /** Watch loading of groups and templates */
+        private bool _verbose = false;
+
+        /** For debugging with STViz. Records where in code an ST was created
+         *  and where code added attributes.
+         */
+        private bool _trackCreationEvents = false;
+
public static TemplateGroup defaultGroup = new TemplateGroup();

/** Used to indicate that the template doesn't exist.
@@ -128,8 +136,6 @@ namespace Antlr4.StringTemplate

public static readonly ErrorManager DefaultErrorManager = new ErrorManager();

-        private bool _debug = false;
-
/** The error manager for entire group; all compilations and executions.
*  This gets copied to parsers, walkers, and interpreters.
*/
@@ -179,16 +185,29 @@ namespace Antlr4.StringTemplate
}
}

-        public bool Debug
+        public bool Verbose
{
get
{
-                return _debug;
+                return _verbose;
}

set
{
-                _debug = value;
+                _verbose = value;
+            }
+        }
+
+        public bool TrackCreationEvents
+        {
+            get
+            {
+                return _trackCreationEvents;
+            }
+
+            set
+            {
+                _trackCreationEvents = value;
}
}

@@ -219,6 +238,11 @@ namespace Antlr4.StringTemplate

protected internal virtual Template GetEmbeddedInstanceOf(Template enclosingInstance, int ip, string name)
{
+            if (Verbose)
+            {
+                Console.WriteLine(string.Format("GetEmbeddedInstanceOf({0})", name));
+            }
+
Template st = GetInstanceOf(name);
if (st == null)
{
@@ -227,6 +251,14 @@ namespace Antlr4.StringTemplate
st.impl = new CompiledTemplate();
return st;
}
+
+            // this is only called internally. wack any debug ST create events
+            if (_trackCreationEvents)
+            {
+                // toss it out
+                st.DebugState.NewTemplateEvent = null;
+            }
+
st.EnclosingInstance = enclosingInstance;
return st;
}
@@ -243,7 +275,7 @@ namespace Antlr4.StringTemplate
{
template = Utility.Strip(templateToken.Text, 1);
}
-            Template st = CreateStringTemplate();
+            Template st = CreateStringTemplateInternally();
st.groupThatCreatedThisInstance = this;
st.impl = Compile(FileName, null, null, template, templateToken);
st.impl.hasFormalArgs = false;
@@ -647,19 +679,39 @@ namespace Antlr4.StringTemplate
/** StringTemplate object factory; each group can have its own. */
public virtual Template CreateStringTemplate()
{
-            // TODO: try making a mem pool?
-            if (Debug)
-                return new DebugTemplate();
+            return new Template(this);
+        }

-            return new Template();
+        public virtual Template CreateStringTemplate(Template prototype)
+        {
+            return new Template(prototype);
}

-        public virtual Template CreateStringTemplate(Template proto)
+        /** differentiate so we can avoid having creation events for regions,
+         *  map operations, and other "new ST" events used during interp.
+         */
+        public Template CreateStringTemplateInternally()
{
-            if (Debug)
-                return new DebugTemplate(proto);
+            Template template = CreateStringTemplate();
+            if (TrackCreationEvents && template.DebugState != null)
+            {
+                // toss it out
+                template.DebugState.NewTemplateEvent = null;
+            }

-            return new Template(proto);
+            return template;
+        }
+
+        public Template CreateStringTemplateInternally(Template prototype)
+        {
+            Template template = CreateStringTemplate(prototype);
+            if (TrackCreationEvents && template.DebugState != null)
+            {
+                // toss it out
+                template.DebugState.NewTemplateEvent = null;
+            }
+
+            return template;
}

public virtual string Name
diff --git a/Antlr4.Test.StringTemplate/BaseTest.cs b/Antlr4.Test.StringTemplate/BaseTest.cs
index 9ff9253..c558e92 100644
--- a/Antlr4.Test.StringTemplate/BaseTest.cs
+++ b/Antlr4.Test.StringTemplate/BaseTest.cs
@@ -65,7 +65,6 @@ namespace Antlr4.Test.StringTemplate
protected virtual void setUpImpl()
{
TemplateGroup.defaultGroup = new TemplateGroup();
-            TemplateGroup.defaultGroup.Debug = false;
TemplateCompiler.subtemplateCount = 0;

// new output dir for each test
diff --git a/Antlr4.Test.StringTemplate/TestDebugEvents.cs b/Antlr4.Test.StringTemplate/TestDebugEvents.cs
index e4a1e09..b35e10a 100644
--- a/Antlr4.Test.StringTemplate/TestDebugEvents.cs
+++ b/Antlr4.Test.StringTemplate/TestDebugEvents.cs
@@ -52,11 +52,10 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            group.Debug = true;
-            DebugTemplate st = (DebugTemplate)group.GetInstanceOf("t");
+            Template st = group.GetInstanceOf("t");
List<InterpEvent> events = st.GetEvents();
string expected =
-                "[EvalExprEvent{self=t(), output=[0..3), expr=foo}," +
+                "[EvalExprEvent{self=t(), expr='foo', source=[0..3), output=[0..3)}," +
" EvalTemplateEvent{self=t(), output=[0..3)}]";
string result = events.ToListString();
Assert.AreEqual(expected, result);
@@ -70,12 +69,12 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            group.Debug = true;
-            DebugTemplate st = (DebugTemplate)group.GetInstanceOf("t");
+            Template st = group.GetInstanceOf("t");
List<InterpEvent> events = st.GetEvents();
string expected =
-                "[EvalExprEvent{self=t(x), output=[0..0), expr=<x>}," +
-                " EvalExprEvent{self=t(x), output=[0..1), expr= }," +
+                "[IndentEvent{self=t(x), expr=' <x>', source=[0..4), output=[0..1)}," +
+                " EvalExprEvent{self=t(x), expr='<x>', source=[1..4), output=[0..0)}," +
+                " EvalExprEvent{self=t(x), expr=' ', source=[4..5), output=[0..1)}," +
" EvalTemplateEvent{self=t(x), output=[0..1)}]";
string result = events.ToListString();
Assert.AreEqual(expected, result);
@@ -90,16 +89,16 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            group.Debug = true;
-            DebugTemplate st = (DebugTemplate)group.GetInstanceOf("t");
+            Template st = group.GetInstanceOf("t");
List<InterpEvent> events = st.GetEvents();
string expected =
-                "[EvalExprEvent{self=t(x), output=[0..1), expr=[}," +
-                " EvalExprEvent{self=u(), output=[1..1), expr=<x>}," +
-                " EvalExprEvent{self=u(), output=[1..2), expr= }," +
+                "[EvalExprEvent{self=t(x), expr='[', source=[0..1), output=[0..1)}," +
+                " IndentEvent{self=u(), expr=' <x>', source=[0..4), output=[1..2)}," +
+                " EvalExprEvent{self=u(), expr='<x>', source=[1..4), output=[1..1)}," +
+                " EvalExprEvent{self=u(), expr=' ', source=[4..5), output=[1..2)}," +
" EvalTemplateEvent{self=u(), output=[1..2)}," +
-                " EvalExprEvent{self=t(x), output=[1..2), expr=<u()>}," +
-                " EvalExprEvent{self=t(x), output=[2..3), expr=]}," +
+                " EvalExprEvent{self=t(x), expr='<u()>', source=[1..6), output=[1..2)}," +
+                " EvalExprEvent{self=t(x), expr=']', source=[6..7), output=[2..3)}," +
" EvalTemplateEvent{self=t(x), output=[0..3)}]";
string result = events.ToListString();
Assert.AreEqual(expected, result);
@@ -111,8 +110,7 @@ namespace Antlr4.Test.StringTemplate
string templates = "t() ::= <<[<\\n>]>>\n";
//                            012 345
TemplateGroupString g = new TemplateGroupString(templates);
-            g.Debug = true;
-            DebugTemplate st = (DebugTemplate)g.GetInstanceOf("t");
+            Template st = g.GetInstanceOf("t");
st.impl.Dump();
StringWriter writer = new StringWriter();
List<InterpEvent> events = st.GetEvents(new AutoIndentWriter(writer, "\n"));
diff --git a/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs b/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
index 55d5e03..423ca22 100644
--- a/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
+++ b/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
@@ -214,7 +214,6 @@ namespace Antlr4.Test.StringTemplate
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
group.Listener = errors;
-            group.Debug = true;
Template st = group.GetInstanceOf("t");
st.Render();
string expected = "context [t u] 1:1 attribute x isn't defined" + newline;
diff --git a/Antlr4.Test.StringTemplate/TestOptions.cs b/Antlr4.Test.StringTemplate/TestOptions.cs
index 9f7c58a..de8a4a9 100644
--- a/Antlr4.Test.StringTemplate/TestOptions.cs
+++ b/Antlr4.Test.StringTemplate/TestOptions.cs
@@ -59,7 +59,6 @@ namespace Antlr4.Test.StringTemplate
public void TestSeparatorWithSpaces()
{
TemplateGroup group = new TemplateGroup();
-            group.Debug = true;
group.DefineTemplate("test", "hi <name; separator= \", \">!", new string[] { "name" });
Template st = group.GetInstanceOf("test");
Console.WriteLine(st.impl.ast.ToStringTree());
diff --git a/Antlr4.Test.StringTemplate/TestVisualizer.cs b/Antlr4.Test.StringTemplate/TestVisualizer.cs
index d0c90b0..925b17e 100644
--- a/Antlr4.Test.StringTemplate/TestVisualizer.cs
+++ b/Antlr4.Test.StringTemplate/TestVisualizer.cs
@@ -62,8 +62,8 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            group.Debug = true;
-            DebugTemplate st = (DebugTemplate)group.GetInstanceOf("method");
+            group.TrackCreationEvents = true;
+            Template st = group.GetInstanceOf("method");
st.impl.Dump();
st.Add("type", "float");
st.Add("name", "foo");
@@ -97,9 +97,9 @@ namespace Antlr4.Test.StringTemplate

writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            group.Debug = true;
-            DebugTemplate template = (DebugTemplate)group.GetInstanceOf("list");
-            DebugTemplate line = (DebugTemplate)group.GetInstanceOf("line");
+            group.TrackCreationEvents = true;
+            Template template = group.GetInstanceOf("list");
+            Template line = group.GetInstanceOf("line");
line.Add("text", "x = 3");
template.Add("lines", line);
template.Add("lines", line);

