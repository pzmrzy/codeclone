commit 12370cfd7de5aa7ec6e183851bbb68719d11f980
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Jan 24 12:35:50 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Jan 24 12:35:50 2011 -0800

(C# 3) Add type proxy support to ST4

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7520]

diff --git a/Antlr4.StringTemplate/Antlr4.StringTemplate.csproj b/Antlr4.StringTemplate/Antlr4.StringTemplate.csproj
index 71e60ed..b66fe54 100644
--- a/Antlr4.StringTemplate/Antlr4.StringTemplate.csproj
+++ b/Antlr4.StringTemplate/Antlr4.StringTemplate.csproj
@@ -51,6 +51,7 @@
</None>
<None Include="DateRenderer.cs" />
<Compile Include="Compiler\Instruction.cs" />
+    <Compile Include="ITypeProxyFactory.cs" />
<Compile Include="Misc\TypeRegistry`1.cs" />
<Compile Include="Compiler\OperandType.cs" />
<Compile Include="Properties\AssemblyInfo.cs" />
diff --git a/Antlr4.StringTemplate/ITypeProxyFactory.cs b/Antlr4.StringTemplate/ITypeProxyFactory.cs
new file mode 100644
index 0000000..3b173ab
--- /dev/null
+++ b/Antlr4.StringTemplate/ITypeProxyFactory.cs
@@ -0,0 +1,39 @@
+ï»¿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2003-2008 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2010 Sam Harwell, Pixel Mine, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr4.StringTemplate
+{
+    public interface ITypeProxyFactory
+    {
+        object CreateProxy(object obj);
+    }
+}
diff --git a/Antlr4.StringTemplate/Interpreter.cs b/Antlr4.StringTemplate/Interpreter.cs
index 508df04..cb12fe4 100644
--- a/Antlr4.StringTemplate/Interpreter.cs
+++ b/Antlr4.StringTemplate/Interpreter.cs
@@ -665,6 +665,7 @@ namespace Antlr4.StringTemplate
optionStrings[i] = ToString(self, options[i]);
}
}
+
if (options != null && options[(int)Option.Anchor] != null)
{
@out.PushAnchorPoint();
@@ -676,6 +677,7 @@ namespace Antlr4.StringTemplate
{
@out.PopAnchorPoint();
}
+
if (TemplateGroup.debug)
{
Interval templateLocation = self.impl.sourceMap[current_ip];
@@ -686,6 +688,7 @@ namespace Antlr4.StringTemplate
Console.WriteLine(e);
events.Add(e);
}
+
return n;
}

@@ -698,12 +701,15 @@ namespace Antlr4.StringTemplate
if (o == null)
{
if (options != null && options[(int)Option.Null] != null)
-                {
o = options[(int)Option.Null];
-                }
else
return 0;
}
+
+            ITypeProxyFactory proxyFactory = self.groupThatCreatedThisInstance.GetTypeProxyFactory(o.GetType());
+            if (proxyFactory != null)
+                o = proxyFactory.CreateProxy(o);
+
if (o is Template)
{
((Template)o).enclosingInstance = self;
@@ -738,6 +744,7 @@ namespace Antlr4.StringTemplate
errMgr.IOError(self, ErrorType.WRITE_IO_ERROR, ioe, o);
}
}
+
return n;
}

@@ -1259,6 +1266,10 @@ namespace Antlr4.StringTemplate

try
{
+                ITypeProxyFactory proxyFactory = self.groupThatCreatedThisInstance.GetTypeProxyFactory(o.GetType());
+                if (proxyFactory != null)
+                    o = proxyFactory.CreateProxy(o);
+
IModelAdaptor adap = self.groupThatCreatedThisInstance.GetModelAdaptor(o.GetType());
return adap.GetProperty(self, o, property, ToString(self, property));
}
diff --git a/Antlr4.StringTemplate/TemplateGroup.cs b/Antlr4.StringTemplate/TemplateGroup.cs
index 16c9cbf..33d0867 100644
--- a/Antlr4.StringTemplate/TemplateGroup.cs
+++ b/Antlr4.StringTemplate/TemplateGroup.cs
@@ -101,6 +101,8 @@ namespace Antlr4.StringTemplate
*/
protected TypeRegistry<IAttributeRenderer> renderers;

+        protected TypeRegistry<ITypeProxyFactory> _proxyFactories;
+
/** A dictionary that allows people to register a model adaptor for
*  a particular kind of object (subclass or implementation). Applies
*  for any template evaluated relative to this group.
@@ -579,6 +581,22 @@ namespace Antlr4.StringTemplate
return renderer;
}

+        public virtual void RegisterTypeProxyFactory(Type targetType, ITypeProxyFactory factory)
+        {
+            _proxyFactories = _proxyFactories ?? new TypeRegistry<ITypeProxyFactory>();
+            _proxyFactories[targetType] = factory;
+        }
+
+        public virtual ITypeProxyFactory GetTypeProxyFactory(Type targetType)
+        {
+            if (_proxyFactories == null)
+                return null;
+
+            ITypeProxyFactory factory;
+            _proxyFactories.TryGetValue(targetType, out factory);
+            return factory;
+        }
+
/** StringTemplate object factory; each group can have its own. */
public virtual Template CreateStringTemplate()
{

