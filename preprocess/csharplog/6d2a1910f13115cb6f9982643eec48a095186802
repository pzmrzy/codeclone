commit 6d2a1910f13115cb6f9982643eec48a095186802
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Apr 4 13:00:53 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Apr 4 13:00:53 2011 -0800

(C# 3) Extract CommutativePredicate as a common base of SemanticContext.OR and SemanticContext.AND

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8056]

diff --git a/Antlr3/Analysis/SemanticContext.cs b/Antlr3/Analysis/SemanticContext.cs
index c1f8735..3be4f11 100644
--- a/Antlr3/Analysis/SemanticContext.cs
+++ b/Antlr3/Analysis/SemanticContext.cs
@@ -33,14 +33,14 @@
namespace Antlr3.Analysis
{
using System.Collections.Generic;
-    using Antlr.Runtime.JavaExtensions;
+    using System.Linq;

using ANTLRParser = Antlr3.Grammars.ANTLRParser;
+    using ArgumentNullException = System.ArgumentNullException;
using CLSCompliant = System.CLSCompliantAttribute;
using CodeGenerator = Antlr3.Codegen.CodeGenerator;
using Grammar = Antlr3.Tool.Grammar;
using GrammarAST = Antlr3.Tool.GrammarAST;
-    using StringBuilder = System.Text.StringBuilder;
using StringTemplate = Antlr3.ST.StringTemplate;
using StringTemplateGroup = Antlr3.ST.StringTemplateGroup;

@@ -344,48 +344,56 @@ namespace Antlr3.Analysis
}
#endif

-        public class AND : SemanticContext
+        public abstract class CommutativePredicate : SemanticContext
{
-            SemanticContext _left;
-            SemanticContext _right;
+            private readonly HashSet<SemanticContext> _operands = new HashSet<SemanticContext>();

-            public AND( SemanticContext a, SemanticContext b )
+            protected CommutativePredicate(SemanticContext a, SemanticContext b)
{
-                this._left = a;
-                this._right = b;
+                if (a == null)
+                    throw new ArgumentNullException("a");
+                if (b == null)
+                    throw new ArgumentNullException("b");
+
+                if (a.GetType() == this.GetType())
+                    _operands.UnionWith(((CommutativePredicate)a).Operands);
+                else
+                    _operands.Add(a);
+
+                if (b.GetType() == this.GetType())
+                    _operands.UnionWith(((CommutativePredicate)b).Operands);
+                else
+                    _operands.Add(b);
}
-            public override StringTemplate GenExpr( CodeGenerator generator,
-                                          StringTemplateGroup templates,
-                                          DFA dfa )
+
+            public CommutativePredicate(IEnumerable<SemanticContext> contexts)
{
-                StringTemplate eST = null;
-                if ( templates != null )
-                {
-                    eST = templates.GetInstanceOf( "andPredicates" );
-                }
-                else
+                if (contexts == null)
+                    throw new ArgumentNullException("contexts");
+
+                foreach (var context in contexts)
{
-                    eST = new StringTemplate( "($left$&&$right$)" );
+                    CommutativePredicate commutative = context as CommutativePredicate;
+                    if (commutative != null && commutative.GetType() == this.GetType())
+                        _operands.UnionWith(commutative._operands);
+                    else if (context != null)
+                        _operands.Add(context);
}
-                eST.SetAttribute( "left", _left.GenExpr( generator, templates, dfa ) );
-                eST.SetAttribute( "right", _right.GenExpr( generator, templates, dfa ) );
-                return eST;
}
+
public override SemanticContext GatedPredicateContext
{
get
{
-                    SemanticContext gatedLeft = _left.GatedPredicateContext;
-                    SemanticContext gatedRight = _right.GatedPredicateContext;
-                    if ( gatedLeft == null )
-                    {
-                        return gatedRight;
-                    }
-                    if ( gatedRight == null )
+                    SemanticContext result = null;
+                    foreach (SemanticContext semctx in _operands)
{
-                        return gatedLeft;
+                        SemanticContext gatedPred = semctx.GatedPredicateContext;
+                        if (gatedPred != null)
+                            result = CombinePredicates(result, gatedPred);
}
-                    return new AND( gatedLeft, gatedRight );
+
+                    return result;
}
}

@@ -393,7 +401,7 @@ namespace Antlr3.Analysis
{
get
{
-                    return _left.HasUserSemanticPredicate || _right.HasUserSemanticPredicate;
+                    return _operands.Any(i => i.HasUserSemanticPredicate);
}
}

@@ -401,133 +409,127 @@ namespace Antlr3.Analysis
{
get
{
-                    return _left.IsSyntacticPredicate || _right.IsSyntacticPredicate;
+                    return _operands.Any(i => i.IsSyntacticPredicate);
}
}
-            public override void TrackUseOfSyntacticPredicates( Grammar g )
+
+            public ICollection<SemanticContext> Operands
+            {
+                get
+                {
+                    return _operands;
+                }
+            }
+
+            protected abstract string OperatorString
+            {
+                get;
+            }
+
+            public override void TrackUseOfSyntacticPredicates(Grammar g)
{
-                _left.TrackUseOfSyntacticPredicates( g );
-                _right.TrackUseOfSyntacticPredicates( g );
+                foreach (SemanticContext semctx in _operands)
+                    semctx.TrackUseOfSyntacticPredicates(g);
}
+
public override string ToString()
{
-                return "(" + _left + "&&" + _right + ")";
+                return string.Format("({0})", string.Join(OperatorString, _operands.Select(i => i.ToString()).ToArray()));
}
+
+            protected abstract SemanticContext CombinePredicates(SemanticContext a, SemanticContext b);
}

-        public class OR : SemanticContext
+        public class AND : CommutativePredicate
{
-            HashSet<object> _operands;
+            public AND(SemanticContext a, SemanticContext b)
+                : base(a, b)
+            {
+            }

-            public OR( SemanticContext a, SemanticContext b )
+            public AND(IEnumerable<SemanticContext> contexts)
+                : base(contexts)
{
-                _operands = new HashSet<object>();
-                if ( a is OR )
-                {
-                    _operands.addAll( ( (OR)a )._operands );
-                }
-                else if ( a != null )
-                {
-                    _operands.Add( a );
-                }
-                if ( b is OR )
-                {
-                    _operands.addAll( ( (OR)b )._operands );
-                }
-                else if ( b != null )
-                {
-                    _operands.Add( b );
-                }
}
-            public override StringTemplate GenExpr( CodeGenerator generator,
-                                          StringTemplateGroup templates,
-                                          DFA dfa )
+
+            protected override string OperatorString
{
-                StringTemplate eST = null;
-                if ( templates != null )
-                {
-                    eST = templates.GetInstanceOf( "orPredicates" );
-                }
-                else
-                {
-                    eST = new StringTemplate( "($first(operands)$$rest(operands):{o | ||$o$}$)" );
-                }
-                foreach ( SemanticContext semctx in _operands )
+                get
{
-                    eST.SetAttribute( "operands", semctx.GenExpr( generator, templates, dfa ) );
+                    return "&&";
}
-                return eST;
}
-            public override SemanticContext GatedPredicateContext
+
+            public override StringTemplate GenExpr(CodeGenerator generator, StringTemplateGroup templates, DFA dfa)
{
-                get
-                {
-                    SemanticContext result = null;
-                    foreach ( SemanticContext semctx in _operands )
-                    {
-                        SemanticContext gatedPred = semctx.GatedPredicateContext;
-                        if ( gatedPred != null )
+                StringTemplate result =
+                    Operands.Aggregate(default(StringTemplate),
+                        (template, operand) =>
{
-                            result = Or( result, gatedPred );
-                            // result = new OR(result, gatedPred);
-                        }
-                    }
-                    return result;
-                }
+                            if (template == null)
+                                return operand.GenExpr(generator, templates, dfa);
+
+                            StringTemplate eST = null;
+                            if (templates != null)
+                                eST = templates.GetInstanceOf("andPredicates");
+                            else
+                                eST = new StringTemplate("($left$&&$right$)");
+
+                            eST.SetAttribute("left", template);
+                            eST.SetAttribute("right", operand.GenExpr(generator, templates, dfa));
+                            return eST;
+                        });
+
+                return result;
}

-            public override bool HasUserSemanticPredicate
+            protected override SemanticContext CombinePredicates(SemanticContext a, SemanticContext b)
{
-                get
-                {
-                    for (Iterator it = _operands.iterator(); it.hasNext(); )
-                    {
-                        SemanticContext semctx = (SemanticContext)it.next();
-                        if (semctx.HasUserSemanticPredicate)
-                            return true;
-                    }
+                return And(a, b);
+            }
+        }

-                    return false;
-                }
+        public class OR : CommutativePredicate
+        {
+            public OR(SemanticContext a, SemanticContext b)
+                : base(a, b)
+            {
}

-            public override bool IsSyntacticPredicate
+            public OR(IEnumerable<SemanticContext> contexts)
+                : base(contexts)
+            {
+            }
+
+            protected override string OperatorString
{
get
{
-                    foreach ( SemanticContext semctx in _operands )
-                    {
-                        if ( semctx.IsSyntacticPredicate )
-                        {
-                            return true;
-                        }
-                    }
-                    return false;
+                    return "||";
}
}
-            public override void TrackUseOfSyntacticPredicates( Grammar g )
+
+            public override StringTemplate GenExpr(CodeGenerator generator,
+                                          StringTemplateGroup templates,
+                                          DFA dfa)
{
-                foreach ( SemanticContext semctx in _operands )
+                StringTemplate eST = null;
+                if (templates != null)
+                    eST = templates.GetInstanceOf("orPredicates");
+                else
+                    eST = new StringTemplate("($first(operands)$$rest(operands):{o | ||$o$}$)");
+
+                foreach (SemanticContext semctx in Operands)
{
-                    semctx.TrackUseOfSyntacticPredicates( g );
+                    eST.SetAttribute("operands", semctx.GenExpr(generator, templates, dfa));
}
+
+                return eST;
}
-            public override string ToString()
+
+            protected override SemanticContext CombinePredicates(SemanticContext a, SemanticContext b)
{
-                StringBuilder buf = new StringBuilder();
-                buf.Append( "(" );
-                int i = 0;
-                foreach ( SemanticContext semctx in _operands )
-                {
-                    if ( i > 0 )
-                    {
-                        buf.Append( "||" );
-                    }
-                    buf.Append( semctx.ToString() );
-                    i++;
-                }
-                buf.Append( ")" );
-                return buf.ToString();
+                return Or(a, b);
}
}


