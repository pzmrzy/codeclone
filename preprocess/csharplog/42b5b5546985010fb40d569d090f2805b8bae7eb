commit 42b5b5546985010fb40d569d090f2805b8bae7eb
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Tue Jan 25 14:01:57 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Tue Jan 25 14:01:57 2011 -0800

(C# 3) Use open-ended intervals with start/length instead of closed start/end

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7527]

diff --git a/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs b/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
index 63559aa..5258e12 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
+++ b/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
@@ -115,7 +115,7 @@ namespace Antlr4.StringTemplate.Visualizer
{
_children = new List<TemplateCallHierarchyViewModel>();
foreach (var @event in _interpreter.GetEvents(_template))
-                        _children.Add(new TemplateCallHierarchyViewModel(_interpreter, @event.Self));
+                        _children.Add(new TemplateCallHierarchyViewModel(_interpreter, @event.Template));
}

return _children;
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml
index 27df488..3af7ca0 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml
@@ -59,12 +59,12 @@
<ContentControl Content="{Binding}" />
</HierarchicalDataTemplate>
</TreeView.ItemTemplate>
-                <TreeView.Resources>
-                    <Style TargetType="{x:Type TreeViewItem}" x:Key="CallHierarchyTreeViewItemStyle">
+                <TreeView.ItemContainerStyle>
+                    <Style TargetType="{x:Type TreeViewItem}">
<Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
<Setter Property="IsSelected" Value="{Binding IsSelected}" />
</Style>
-                </TreeView.Resources>
+                </TreeView.ItemContainerStyle>
</TreeView>
<GridSplitter Width="5" Grid.Column="1" Grid.ColumnSpan="1" ResizeBehavior="PreviousAndNext" />
<RichTextBox Name="OutputTextBox" Grid.Column="2" Grid.ColumnSpan="1" SelectionChanged="HandleOutputTextBoxSelectionChanged" />
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
index 5e21d38..2ac73cf 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
@@ -129,7 +129,7 @@ namespace Antlr4.StringTemplate.Visualizer
if (a == null || b == null)
return;

-            Highlight(TemplateTextBox.Document, new Interval(a.StartIndex, b.StopIndex));
+            Highlight(TemplateTextBox.Document, Interval.FromBounds(a.StartIndex, b.StopIndex + 1));
}

private void HandleOutputTextBoxSelectionChanged(object sender, RoutedEventArgs e)
@@ -138,7 +138,7 @@ namespace Antlr4.StringTemplate.Visualizer
if (de == null)
currentTemplate = ViewModel.Visualizer.RootTemplate;
else
-                currentTemplate = de.Self;
+                currentTemplate = de.Template;
UpdateCurrentTemplate();
}

@@ -149,7 +149,7 @@ namespace Antlr4.StringTemplate.Visualizer

foreach (var e in events)
{
-                if (position >= e.Start && position <= e.Stop)
+                if (e.OutputInterval.Contains(position))
return e;
}

@@ -170,8 +170,8 @@ namespace Antlr4.StringTemplate.Visualizer
// highlight the new text
if (interval != null)
{
-                int startOffset = interval.A;
-                int endOffset = interval.B + 1;
+                int startOffset = interval.Start;
+                int endOffset = interval.End;
TextPointer highlightStart = document.GetPointerFromCharOffset(ref startOffset);
TextPointer highlightStop = document.GetPointerFromCharOffset(ref endOffset);
if (startOffset != 0 || endOffset != 0)
@@ -196,6 +196,8 @@ namespace Antlr4.StringTemplate.Visualizer
current = current.Children.FirstOrDefault(i => i.Template == template);
if (current == null)
return;
+
+                nodes.Add(current);
}

for (int i = 0; i < nodes.Count - 1; i++)
@@ -238,12 +240,13 @@ namespace Antlr4.StringTemplate.Visualizer
if (currentTemplate.IsAnonymousSubtemplate)
Highlight(TemplateTextBox.Document, r);

-                        Highlight(OutputTextBox.Document, new Interval(e.Start, e.Stop));
+                        Highlight(OutputTextBox.Document, e.OutputInterval);
}
}
}
else
{
+                Highlight(OutputTextBox.Document, null);
Highlight(TemplateTextBox.Document, r);
}
}
diff --git a/Antlr4.StringTemplate/Compiler/BytecodeDisassembler.cs b/Antlr4.StringTemplate/Compiler/BytecodeDisassembler.cs
index 9558f1e..b2e50a0 100644
--- a/Antlr4.StringTemplate/Compiler/BytecodeDisassembler.cs
+++ b/Antlr4.StringTemplate/Compiler/BytecodeDisassembler.cs
@@ -193,12 +193,12 @@ namespace Antlr4.StringTemplate.Compiler
{
StringBuilder buf = new StringBuilder();
int addr = 0;
-            foreach (Interval I in code.sourceMap)
+            foreach (Interval interval in code.sourceMap)
{
-                if (I != null)
+                if (interval != null)
{
-                    string chunk = code.template.Substring(I.A, I.B + 1 - I.A);
-                    buf.AppendLine(string.Format("{0:0000}: {1}\t\"{2}\"", addr, I, chunk));
+                    string chunk = code.template.Substring(interval.Start, interval.Length);
+                    buf.AppendLine(string.Format("{0:0000}: {1}\t\"{2}\"", addr, interval, chunk));
}
addr++;
}
diff --git a/Antlr4.StringTemplate/Compiler/CompilationState.cs b/Antlr4.StringTemplate/Compiler/CompilationState.cs
index 7857d6c..0df8c3c 100644
--- a/Antlr4.StringTemplate/Compiler/CompilationState.cs
+++ b/Antlr4.StringTemplate/Compiler/CompilationState.cs
@@ -127,7 +127,7 @@ namespace Antlr4.StringTemplate.Compiler
int p = tokens.Get(i).StartIndex;
int q = tokens.Get(j).StopIndex;
if (!(p < 0 || q < 0))
-                    impl.sourceMap[ip] = new Interval(p, q);
+                    impl.sourceMap[ip] = Interval.FromBounds(p, q + 1);
}
impl.instrs[ip++] = (byte)opcode;
}
diff --git a/Antlr4.StringTemplate/Compiler/CompiledTemplate.cs b/Antlr4.StringTemplate/Compiler/CompiledTemplate.cs
index daf8117..9e37b59 100644
--- a/Antlr4.StringTemplate/Compiler/CompiledTemplate.cs
+++ b/Antlr4.StringTemplate/Compiler/CompiledTemplate.cs
@@ -110,7 +110,7 @@ namespace Antlr4.StringTemplate.Compiler
get
{
Interval r = TemplateRange;
-                return template.Substring(r.A, r.B + 1 - r.A);
+                return template.Substring(r.Start, r.End - r.Start);
}
}

@@ -124,19 +124,19 @@ namespace Antlr4.StringTemplate.Compiler
Interval stop = null;
for (int i = sourceMap.Length - 1; i > 0; i--)
{
-                        Interval I = sourceMap[i];
-                        if (I != null)
+                        Interval interval = sourceMap[i];
+                        if (interval != null)
{
-                            stop = I;
+                            stop = interval;
break;
}
}

if (template != null)
-                        return new Interval(start.A, stop.B);
+                        return Interval.FromBounds(start.Start, stop.End);
}

-                return new Interval(0, template.Length - 1);
+                return new Interval(0, template.Length);
}
}

diff --git a/Antlr4.StringTemplate/Debug/EvalExprEvent.cs b/Antlr4.StringTemplate/Debug/EvalExprEvent.cs
index e071541..2b726df 100644
--- a/Antlr4.StringTemplate/Debug/EvalExprEvent.cs
+++ b/Antlr4.StringTemplate/Debug/EvalExprEvent.cs
@@ -32,37 +32,27 @@

namespace Antlr4.StringTemplate.Debug
{
+    using Antlr4.StringTemplate.Misc;
+
public class EvalExprEvent : InterpEvent
{
// template pattern location
-        private readonly int exprStart;
-        private readonly int exprStop;
+        private readonly Interval _sourceInterval;
private readonly string expr;

-        public EvalExprEvent(DebugST self, int start, int stop, int exprStart, int exprStop)
-            : base(self, start, stop)
+        public EvalExprEvent(DebugST template, Interval outputInterval, Interval sourceInterval)
+            : base(template, outputInterval)
{
-            this.exprStart = exprStart;
-            this.exprStop = exprStop;
-            if (exprStart >= 0 && exprStop >= 0)
-            {
-                expr = self.impl.template.Substring(exprStart, exprStop + 1 - exprStart);
-            }
-        }
-
-        public int ExprStart
-        {
-            get
-            {
-                return exprStart;
-            }
+            this._sourceInterval = sourceInterval;
+            if (_sourceInterval != null)
+                expr = template.impl.template.Substring(_sourceInterval.Start, _sourceInterval.Length);
}

-        public int ExprStop
+        public Interval SourceInterval
{
get
{
-                return exprStop;
+                return _sourceInterval;
}
}

@@ -76,13 +66,7 @@ namespace Antlr4.StringTemplate.Debug

public override string ToString()
{
-            return GetType().Name + "{" +
-                   "self=" + Self +
-                 //", attr=" + self.attributes +
-                   ", start=" + Start +
-                   ", stop=" + Stop +
-                   ", expr=" + expr +
-                   '}';
+            return string.Format("{0}{{self={1}, output={2}, expr={3}}}", GetType().Name, Template, OutputInterval, Expr);
}
}
}
diff --git a/Antlr4.StringTemplate/Debug/EvalTemplateEvent.cs b/Antlr4.StringTemplate/Debug/EvalTemplateEvent.cs
index 06d0dd5..a7e4e54 100644
--- a/Antlr4.StringTemplate/Debug/EvalTemplateEvent.cs
+++ b/Antlr4.StringTemplate/Debug/EvalTemplateEvent.cs
@@ -32,10 +32,12 @@

namespace Antlr4.StringTemplate.Debug
{
+    using Antlr4.StringTemplate.Misc;
+
public class EvalTemplateEvent : InterpEvent
{
-        public EvalTemplateEvent(DebugST self, int start, int stop)
-            : base(self, start, stop)
+        public EvalTemplateEvent(DebugST template, Interval interval)
+            : base(template, interval)
{
}
}
diff --git a/Antlr4.StringTemplate/Debug/InterpEvent.cs b/Antlr4.StringTemplate/Debug/InterpEvent.cs
index 1720e13..e487801 100644
--- a/Antlr4.StringTemplate/Debug/InterpEvent.cs
+++ b/Antlr4.StringTemplate/Debug/InterpEvent.cs
@@ -32,52 +32,45 @@

namespace Antlr4.StringTemplate.Debug
{
+    using Antlr4.StringTemplate.Misc;
+    using ArgumentNullException = System.ArgumentNullException;
+
public class InterpEvent
{
-        private readonly DebugST self;
+        private readonly DebugST _template;
// output location
-        private readonly int start;
-        private readonly int stop;
+        private readonly Interval _interval;

-        public InterpEvent(DebugST self, int start, int stop)
+        public InterpEvent(DebugST template, Interval interval)
{
-            this.self = self;
-            this.start = start;
-            this.stop = stop;
-        }
+            if (template == null)
+                throw new ArgumentNullException("template");
+            if (interval == null)
+                throw new ArgumentNullException("interval");

-        public DebugST Self
-        {
-            get
-            {
-                return self;
-            }
+            this._template = template;
+            this._interval = interval;
}

-        public int Start
+        public DebugST Template
{
get
{
-                return start;
+                return _template;
}
}

-        public int Stop
+        public Interval OutputInterval
{
get
{
-                return stop;
+                return _interval;
}
}

public override string ToString()
{
-            return GetType().Name + "{" +
-                   "self=" + self +
-                    //", attr=" + self.attributes +
-                   ", start=" + start +
-                   ", stop=" + stop +
-                   '}';
+            return string.Format("{0}{{self={1}, output={2}}}", GetType().Name, _template, OutputInterval);
}
}
}
diff --git a/Antlr4.StringTemplate/Interpreter.cs b/Antlr4.StringTemplate/Interpreter.cs
index cb12fe4..14ee1a1 100644
--- a/Antlr4.StringTemplate/Interpreter.cs
+++ b/Antlr4.StringTemplate/Interpreter.cs
@@ -494,8 +494,7 @@ namespace Antlr4.StringTemplate
}
if (TemplateGroup.debug)
{
-                int stop = @out.Index() - 1;
-                EvalTemplateEvent e = new EvalTemplateEvent((DebugST)self, start, stop);
+                EvalTemplateEvent e = new EvalTemplateEvent((DebugST)self, Interval.FromBounds(start, @out.Index()));
//System.out.println("eval template "+self+": "+e);
events.Add(e);
if (self.enclosingInstance != null)
@@ -633,15 +632,7 @@ namespace Antlr4.StringTemplate
if (TemplateGroup.debug)
{
Interval templateLocation = self.impl.sourceMap[current_ip];
-                int exprStart = -1;
-                int exprStop = -1;
-                if (templateLocation != null)
-                {
-                    exprStart = templateLocation.A;
-                    exprStop = templateLocation.B;
-                }
-
-                EvalExprEvent e = new EvalExprEvent((DebugST)self, start, @out.Index() - 1, exprStart, exprStop);
+                EvalExprEvent e = new EvalExprEvent((DebugST)self, Interval.FromBounds(start, @out.Index()), templateLocation);
Console.WriteLine(e);
events.Add(e);
}
@@ -681,10 +672,7 @@ namespace Antlr4.StringTemplate
if (TemplateGroup.debug)
{
Interval templateLocation = self.impl.sourceMap[current_ip];
-                int exprStart = templateLocation.A, exprStop = templateLocation.B;
-                EvalExprEvent e = new EvalExprEvent((DebugST)self,
-                                                    start, @out.Index() - 1,
-                                                    exprStart, exprStop);
+                EvalExprEvent e = new EvalExprEvent((DebugST)self, Interval.FromBounds(start, @out.Index()), templateLocation);
Console.WriteLine(e);
events.Add(e);
}
diff --git a/Antlr4.StringTemplate/Misc/Interval.cs b/Antlr4.StringTemplate/Misc/Interval.cs
index 49efd3e..c652cf3 100644
--- a/Antlr4.StringTemplate/Misc/Interval.cs
+++ b/Antlr4.StringTemplate/Misc/Interval.cs
@@ -33,41 +33,141 @@
namespace Antlr4.StringTemplate.Misc
{
using System.Diagnostics;
+    using ArgumentNullException = System.ArgumentNullException;
+    using ArgumentOutOfRangeException = System.ArgumentOutOfRangeException;

-    /** An inclusive interval a..b.  Used to track ranges in output and
-     *  template patterns (for debugging).
-     */
-    [DebuggerDisplay("[{_a}..{_b}]")]
+    /// <summary>
+    /// Represents a range.
+    /// </summary>
+    /// <remarks>
+    /// This structure represents an immutable integer interval that describes a range of values, from Start to End.
+    /// It is closed on the left and open on the right: [Start .. End). In the context of a Template it represents a
+    /// span of text, but the Interval structure itself is independent of any particular text.
+    /// </remarks>
+    [DebuggerDisplay("[{Start}..{End})")]
public sealed class Interval
{
-        private readonly int _a;
-        private readonly int _b;
+        private readonly int _start;
+        private readonly int _length;

-        public Interval(int a, int b)
+        /// <summary>
+        /// Initializes a new instance of an Interval with the given start point and length.
+        /// </summary>
+        /// <param name="start">The starting point of the interval.</param>
+        /// <param name="length">The length of the interval.</param>
+        /// <exception cref="System.ArgumentOutOfRangeException">
+        /// <paramref name="start"/> or <paramref name="length"/> is less than zero.
+        /// </exception>
+        public Interval(int start, int length)
{
-            this._a = a;
-            this._b = b;
+            if (start < 0)
+                throw new ArgumentOutOfRangeException("start");
+            if (length < 0)
+                throw new ArgumentOutOfRangeException("length");
+
+            this._start = start;
+            this._length = length;
+        }
+
+        /// <summary>
+        /// Gets the starting index of the span.
+        /// </summary>
+        /// <value>
+        /// The starting index of the span.
+        /// </value>
+        public int Start
+        {
+            get
+            {
+                return _start;
+            }
+        }
+
+        /// <summary>
+        /// Gets the end of the interval.
+        /// </summary>
+        /// <remarks>
+        /// The interval is open-ended on the right side, so that Start + Length = End.
+        /// </remarks>
+        public int End
+        {
+            get
+            {
+                return _start + _length;
+            }
}

-        public int A
+        /// <summary>
+        /// Gets the length of the interval, which is always non-negative.
+        /// </summary>
+        /// <value>
+        /// The length of the interval, which is always non-negative.
+        /// </value>
+        public int Length
{
get
{
-                return _a;
+                return _length;
}
}

-        public int B
+        /// <summary>
+        /// Determines whether or not this interval is empty.
+        /// </summary>
+        /// <value>
+        /// true if the length of the interval is zero, otherwise false.
+        /// </value>
+        public bool IsEmpty
{
get
{
-                return _b;
+                return _length == 0;
}
}

+        /// <summary>
+        /// Initializes a new instance of an Interval with the given start and end positions.
+        /// </summary>
+        /// <param name="start">The start position of the new interval.</param>
+        /// <param name="end">The end position of the new interval.</param>
+        /// <returns>The new interval.</returns>
+        /// <exception cref="System.ArgumentOutOfRangeException"><paramref name="start"/> is less than 0, or <paramref name="end"/> is less than <paramref name="start"/>.</exception>
+        public static Interval FromBounds(int start, int end)
+        {
+            if (start < 0)
+                throw new ArgumentOutOfRangeException("start");
+            if (end < 0)
+                throw new ArgumentOutOfRangeException("end");
+
+            return new Interval(start, end - start);
+        }
+
+        /// <summary>
+        /// Determines whether the position lies within the interval.
+        /// </summary>
+        /// <param name="position">The position to check.</param>
+        /// <returns>true if the position is greater than or equal to Start and less than End, otherwise false.</returns>
+        public bool Contains(int position)
+        {
+            return position >= Start && position < End;
+        }
+
+        /// <summary>
+        /// Determines whether the specified interval falls completely within this interval.
+        /// </summary>
+        /// <param name="interval">The interval to check.</param>
+        /// <returns>true if the specified interval falls completely within this interval, otherwise false.</returns>
+        public bool Contains(Interval interval)
+        {
+            if (interval == null)
+                throw new ArgumentNullException("interval");
+
+            return interval.Start >= this.Start && interval.End <= this.End;
+        }
+
public override string ToString()
{
-            return _a + ".." + _b;
+            return string.Format("[{0}..{1})", Start, End);
}
}
}
diff --git a/Antlr4.StringTemplate/Misc/TemplateRuntimeMessage.cs b/Antlr4.StringTemplate/Misc/TemplateRuntimeMessage.cs
index 90bc0e9..a65c41d 100644
--- a/Antlr4.StringTemplate/Misc/TemplateRuntimeMessage.cs
+++ b/Antlr4.StringTemplate/Misc/TemplateRuntimeMessage.cs
@@ -94,7 +94,7 @@ namespace Antlr4.StringTemplate.Misc
return null;

// get left edge and get line/col
-            int i = interval.A;
+            int i = interval.Start;
Coordinate loc = Utility.GetLineCharPosition(Self.impl.template, i);
return loc.ToString();
}
diff --git a/Antlr4.Test.StringTemplate/TestDebugEvents.cs b/Antlr4.Test.StringTemplate/TestDebugEvents.cs
index ba469d8..21a2b2a 100644
--- a/Antlr4.Test.StringTemplate/TestDebugEvents.cs
+++ b/Antlr4.Test.StringTemplate/TestDebugEvents.cs
@@ -38,6 +38,7 @@ namespace Antlr4.Test.StringTemplate
using Antlr4.StringTemplate.Debug;
using Antlr4.Test.StringTemplate.Extensions;
using System.Collections.Generic;
+    using Path = System.IO.Path;

[TestClass]
public class TestDebugEvents : BaseTest
@@ -49,13 +50,13 @@ namespace Antlr4.Test.StringTemplate
"t() ::= <<foo>>" + Environment.NewLine;

writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
TemplateGroup.debug = true;
DebugST st = (DebugST)group.GetInstanceOf("t");
List<InterpEvent> events = st.GetEvents();
string expected =
-                "[EvalExprEvent{self=t(), start=0, stop=2, expr=foo}," +
-                " EvalTemplateEvent{self=t(), start=0, stop=2}]";
+                "[EvalExprEvent{self=t(), output=[0..3), expr=foo}," +
+                " EvalTemplateEvent{self=t(), output=[0..3)}]";
string result = events.ToListString();
Assert.AreEqual(expected, result);
}
@@ -67,14 +68,14 @@ namespace Antlr4.Test.StringTemplate
"t(x) ::= << <x> >>" + Environment.NewLine;

writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
TemplateGroup.debug = true;
DebugST st = (DebugST)group.GetInstanceOf("t");
List<InterpEvent> events = st.GetEvents();
string expected =
-                "[EvalExprEvent{self=t(), start=0, stop=-1, expr=<x>}," +
-                " EvalExprEvent{self=t(), start=0, stop=0, expr= }," +
-                " EvalTemplateEvent{self=t(), start=0, stop=0}]";
+                "[EvalExprEvent{self=t(), output=[0..0), expr=<x>}," +
+                " EvalExprEvent{self=t(), output=[0..1), expr= }," +
+                " EvalTemplateEvent{self=t(), output=[0..1)}]";
string result = events.ToListString();
Assert.AreEqual(expected, result);
}
@@ -87,18 +88,18 @@ namespace Antlr4.Test.StringTemplate
"u() ::= << <x> >>\n";

writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
TemplateGroup.debug = true;
DebugST st = (DebugST)group.GetInstanceOf("t");
List<InterpEvent> events = st.GetEvents();
string expected =
-                "[EvalExprEvent{self=t(), start=0, stop=0, expr=[}," +
-                " EvalExprEvent{self=u(), start=1, stop=0, expr=<x>}," +
-                " EvalExprEvent{self=u(), start=1, stop=1, expr= }," +
-                " EvalTemplateEvent{self=u(), start=1, stop=1}," +
-                " EvalExprEvent{self=t(), start=1, stop=1, expr=<u()>}," +
-                " EvalExprEvent{self=t(), start=2, stop=2, expr=]}," +
-                " EvalTemplateEvent{self=t(), start=0, stop=2}]";
+                "[EvalExprEvent{self=t(), output=[0..1), expr=[}," +
+                " EvalExprEvent{self=u(), output=[1..1), expr=<x>}," +
+                " EvalExprEvent{self=u(), output=[1..2), expr= }," +
+                " EvalTemplateEvent{self=u(), output=[1..2)}," +
+                " EvalExprEvent{self=t(), output=[1..2), expr=<u()>}," +
+                " EvalExprEvent{self=t(), output=[2..3), expr=]}," +
+                " EvalTemplateEvent{self=t(), output=[0..3)}]";
string result = events.ToListString();
Assert.AreEqual(expected, result);
}

