commit 55c56e21c31a27e0c85a712c35d2896bc210d6ac
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Jan 24 09:31:06 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Jan 24 09:31:06 2011 -0800

(C# 3) New port of STViz

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7515]

diff --git a/Antlr3.sln b/Antlr3.sln
index 405cc96..60d26c9 100644
--- a/Antlr3.sln
+++ b/Antlr3.sln
@@ -68,12 +68,14 @@ Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Antlr4.StringTemplate", "An
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Antlr4.Test.StringTemplate", "Antlr4.Test.StringTemplate\Antlr4.Test.StringTemplate.csproj", "{1B70CBF4-B592-4A9C-B7B3-AD1A087F4B9C}"
EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Antlr4.StringTemplate.Visualizer", "Antlr4.StringTemplate.Visualizer\Antlr4.StringTemplate.Visualizer.csproj", "{DC0A9616-0B69-4A3B-ADC7-62FCA9207B98}"
+EndProject
Global
GlobalSection(TestCaseManagementSettings) = postSolution
CategoryFile = Antlr3.vsmdi
EndGlobalSection
GlobalSection(SourceCodeControl) = preSolution
-		SccNumberOfProjects = 23
+		SccNumberOfProjects = 24
SccProjectName0 = Perforce\u0020Project
SccLocalPath0 = ..\\..
SccProvider0 = MSSCCI:Perforce\u0020SCM
@@ -156,6 +158,9 @@ Global
SccProjectUniqueName22 = Antlr4.Test.StringTemplate\\Antlr4.Test.StringTemplate.csproj
SccLocalPath22 = ..\\..
SccProjectFilePathRelativizedFromConnection22 = antlrcs\\main\\Antlr4.Test.StringTemplate\\
+		SccProjectUniqueName23 = Antlr4.StringTemplate.Visualizer\\Antlr4.StringTemplate.Visualizer.csproj
+		SccLocalPath23 = ..\\..
+		SccProjectFilePathRelativizedFromConnection23 = antlrcs\\main\\Antlr4.StringTemplate.Visualizer\\
EndGlobalSection
GlobalSection(SolutionConfigurationPlatforms) = preSolution
Debug|Any CPU = Debug|Any CPU
@@ -249,6 +254,10 @@ Global
{1B70CBF4-B592-4A9C-B7B3-AD1A087F4B9C}.Debug|Any CPU.Build.0 = Debug|Any CPU
{1B70CBF4-B592-4A9C-B7B3-AD1A087F4B9C}.Release|Any CPU.ActiveCfg = Release|Any CPU
{1B70CBF4-B592-4A9C-B7B3-AD1A087F4B9C}.Release|Any CPU.Build.0 = Release|Any CPU
+		{DC0A9616-0B69-4A3B-ADC7-62FCA9207B98}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{DC0A9616-0B69-4A3B-ADC7-62FCA9207B98}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{DC0A9616-0B69-4A3B-ADC7-62FCA9207B98}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{DC0A9616-0B69-4A3B-ADC7-62FCA9207B98}.Release|Any CPU.Build.0 = Release|Any CPU
EndGlobalSection
GlobalSection(SolutionProperties) = preSolution
HideSolutionNode = FALSE
diff --git a/Antlr4.StringTemplate.Visualizer/Antlr4.StringTemplate.Visualizer.csproj b/Antlr4.StringTemplate.Visualizer/Antlr4.StringTemplate.Visualizer.csproj
new file mode 100644
index 0000000..d514f80
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/Antlr4.StringTemplate.Visualizer.csproj
@@ -0,0 +1,125 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProductVersion>8.0.30703</ProductVersion>
+    <SchemaVersion>2.0</SchemaVersion>
+    <ProjectGuid>{DC0A9616-0B69-4A3B-ADC7-62FCA9207B98}</ProjectGuid>
+    <OutputType>library</OutputType>
+    <AppDesignerFolder>Properties</AppDesignerFolder>
+    <RootNamespace>Antlr4.StringTemplate.Visualizer</RootNamespace>
+    <AssemblyName>Antlr4.StringTemplate.Visualizer</AssemblyName>
+    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
+    <TargetFrameworkProfile>
+    </TargetFrameworkProfile>
+    <FileAlignment>512</FileAlignment>
+    <ProjectTypeGuids>{60dc8134-eba5-43b8-bcc9-bb4bc16c2548};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
+    <WarningLevel>4</WarningLevel>
+    <SccProjectName>SAK</SccProjectName>
+    <SccLocalPath>SAK</SccLocalPath>
+    <SccAuxPath>SAK</SccAuxPath>
+    <SccProvider>SAK</SccProvider>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup>
+    <SignAssembly>true</SignAssembly>
+  </PropertyGroup>
+  <PropertyGroup>
+    <AssemblyOriginatorKeyFile>..\Antlr3\Key.snk</AssemblyOriginatorKeyFile>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Xml" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="WindowsBase" />
+    <Reference Include="PresentationCore" />
+    <Reference Include="PresentationFramework" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="Extensions\FlowDocumentExtensions.cs" />
+    <Compile Include="Extensions\ListExtensions.cs" />
+    <Compile Include="Extensions\TemplateExtensions.cs" />
+    <Compile Include="Properties\AssemblyInfo.cs">
+      <SubType>Code</SubType>
+    </Compile>
+    <Compile Include="Properties\Resources.Designer.cs">
+      <AutoGen>True</AutoGen>
+      <DesignTime>True</DesignTime>
+      <DependentUpon>Resources.resx</DependentUpon>
+    </Compile>
+    <Compile Include="Properties\Settings.Designer.cs">
+      <AutoGen>True</AutoGen>
+      <DependentUpon>Settings.settings</DependentUpon>
+      <DesignTimeSharedInput>True</DesignTimeSharedInput>
+    </Compile>
+    <Compile Include="TemplateCallHierarchyViewModel.cs" />
+    <Compile Include="TemplateVisualizer.cs" />
+    <Compile Include="TemplateVisualizerFrame.xaml.cs">
+      <DependentUpon>TemplateVisualizerFrame.xaml</DependentUpon>
+    </Compile>
+    <Compile Include="TemplateVisualizerViewModel.cs" />
+    <Compile Include="TemplateVisualizerWindow.xaml.cs">
+      <DependentUpon>TemplateVisualizerWindow.xaml</DependentUpon>
+    </Compile>
+    <EmbeddedResource Include="Properties\Resources.resx">
+      <Generator>ResXFileCodeGenerator</Generator>
+      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
+    </EmbeddedResource>
+    <None Include="..\Antlr3\Key.snk">
+      <Link>Key.snk</Link>
+    </None>
+    <None Include="Properties\Settings.settings">
+      <Generator>SettingsSingleFileGenerator</Generator>
+      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
+    </None>
+    <AppDesigner Include="Properties\" />
+  </ItemGroup>
+  <ItemGroup>
+    <Page Include="TemplateVisualizerFrame.xaml">
+      <SubType>Designer</SubType>
+      <Generator>MSBuild:Compile</Generator>
+    </Page>
+    <Page Include="TemplateVisualizerWindow.xaml">
+      <SubType>Designer</SubType>
+      <Generator>MSBuild:Compile</Generator>
+    </Page>
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="..\..\..\antlr\main\runtime\CSharp3\Sources\Antlr3.Runtime\Antlr3.Runtime.csproj">
+      <Project>{8FDC0A87-9005-4D5A-AB75-E55CEB575559}</Project>
+      <Name>Antlr3.Runtime</Name>
+    </ProjectReference>
+    <ProjectReference Include="..\Antlr4.StringTemplate\Antlr4.StringTemplate.csproj">
+      <Project>{DE9B7DA2-35DD-46CC-B768-DAEE3C298660}</Project>
+      <Name>Antlr4.StringTemplate</Name>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+  <!-- To modify your build process, add your task inside one of the targets below and uncomment it.
+       Other similar extension points exist, see Microsoft.Common.targets.
+  <Target Name="BeforeBuild">
+  </Target>
+  <Target Name="AfterBuild">
+  </Target>
+  -->
+</Project>
\ No newline at end of file
diff --git a/Antlr4.StringTemplate.Visualizer/Antlr4.StringTemplate.Visualizer.csproj.vspscc b/Antlr4.StringTemplate.Visualizer/Antlr4.StringTemplate.Visualizer.csproj.vspscc
new file mode 100644
index 0000000..9cffda4
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/Antlr4.StringTemplate.Visualizer.csproj.vspscc
@@ -0,0 +1,10 @@
+﻿""
+{
+"FILE_VERSION" = "9237"
+"ENLISTMENT_CHOICE" = "NEVER"
+"PROJECT_FILE_RELATIVE_PATH" = "relative:antlrcs\\main\\Antlr4.StringTemplate.Visualizer"
+"NUMBER_OF_EXCLUDED_FILES" = "0"
+"ORIGINAL_PROJECT_FILE_PATH" = ""
+"NUMBER_OF_NESTED_PROJECTS" = "0"
+"SOURCE_CONTROL_SETTINGS_PROVIDER" = "PROVIDER"
+}
diff --git a/Antlr4.StringTemplate.Visualizer/Extensions/FlowDocumentExtensions.cs b/Antlr4.StringTemplate.Visualizer/Extensions/FlowDocumentExtensions.cs
new file mode 100644
index 0000000..e191b9a
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/Extensions/FlowDocumentExtensions.cs
@@ -0,0 +1,352 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr4.StringTemplate.Visualizer.Extensions
+{
+    using System;
+    using System.Windows.Documents;
+
+    internal static class FlowDocumentExtensions
+    {
+        public static TextPointer GetPointerFromCharOffset(this FlowDocument document, ref int charOffset)
+        {
+            if (document == null)
+                throw new ArgumentNullException("document");
+
+            if (charOffset == 0)
+                return document.ContentStart;
+
+            return GetPointerFromCharOffset(document.ContentEnd, document.Blocks, ref charOffset);
+        }
+
+        public static int GetCharOffsetToPosition(this FlowDocument document, TextPointer position)
+        {
+            if (document == null)
+                throw new ArgumentNullException("document");
+            if (position == null)
+                throw new ArgumentNullException("position");
+
+            if (position.CompareTo(document.ContentStart) == 0)
+                return 0;
+
+            TextPointer result;
+            return GetCharOffsetToPosition(document.Blocks, position, out result);
+        }
+
+        private static TextPointer GetPointerFromCharOffset(TextPointer elementEnd, BlockCollection blockCollection, ref int charOffset)
+        {
+            foreach (var block in blockCollection)
+            {
+                TextPointer pointer = GetPointerFromCharOffset(block, ref charOffset);
+                if (charOffset == 0)
+                    return pointer;
+            }
+
+            return elementEnd;
+        }
+
+        private static TextPointer GetPointerFromCharOffset(TextPointer elementEnd, InlineCollection inlineCollection, ref int charOffset)
+        {
+            foreach (var inline in inlineCollection)
+            {
+                TextPointer pointer = GetPointerFromCharOffset(inline, ref charOffset);
+                if (charOffset == 0)
+                    return pointer;
+            }
+
+            return elementEnd;
+        }
+
+        private static TextPointer GetPointerFromCharOffset(TextPointer elementEnd, ListItemCollection listItemCollection, ref int charOffset)
+        {
+            foreach (var listItem in listItemCollection)
+            {
+                TextPointer pointer = GetPointerFromCharOffset(listItem, ref charOffset);
+                if (charOffset == 0)
+                    return pointer;
+            }
+
+            return elementEnd;
+        }
+
+        private static TextPointer GetPointerFromCharOffset(Block currentBlock, ref int charOffset)
+        {
+            Paragraph paragraph = currentBlock as Paragraph;
+            if (paragraph != null)
+                return GetPointerFromCharOffset(paragraph, ref charOffset);
+
+            List list = currentBlock as List;
+            if (list != null)
+                return GetPointerFromCharOffset(list, ref charOffset);
+
+            Table table = currentBlock as Table;
+            if (table != null)
+                return GetPointerFromCharOffset(table, ref charOffset);
+
+            Section section = currentBlock as Section;
+            if (section != null)
+                return GetPointerFromCharOffset(section, ref charOffset);
+
+            throw new ArgumentException();
+        }
+
+        private static TextPointer GetPointerFromCharOffset(List list, ref int charOffset)
+        {
+            return GetPointerFromCharOffset(list.ElementEnd, list.ListItems, ref charOffset);
+        }
+
+        private static TextPointer GetPointerFromCharOffset(ListItem listItem, ref int charOffset)
+        {
+            return GetPointerFromCharOffset(listItem.ElementEnd, listItem.Blocks, ref charOffset);
+        }
+
+        private static TextPointer GetPointerFromCharOffset(Paragraph paragraph, ref int charOffset)
+        {
+            return GetPointerFromCharOffset(paragraph.ElementEnd, paragraph.Inlines, ref charOffset);
+        }
+
+        private static TextPointer GetPointerFromCharOffset(Section section, ref int charOffset)
+        {
+            return GetPointerFromCharOffset(section.ElementEnd, section.Blocks, ref charOffset);
+        }
+
+        private static TextPointer GetPointerFromCharOffset(Table table, ref int charOffset)
+        {
+            throw new NotImplementedException();
+        }
+
+        private static TextPointer GetPointerFromCharOffset(Inline currentInline, ref int charOffset)
+        {
+            Run run = currentInline as Run;
+            if (run != null)
+                return GetPointerFromCharOffset(run, ref charOffset);
+
+            LineBreak lineBreak = currentInline as LineBreak;
+            if (lineBreak != null)
+                return GetPointerFromCharOffset(lineBreak, ref charOffset);
+
+            Span span = currentInline as Span;
+            if (span != null)
+                return GetPointerFromCharOffset(span, ref charOffset);
+
+            InlineUIContainer inlineUIContainer = currentInline as InlineUIContainer;
+            if (inlineUIContainer != null)
+                return GetPointerFromCharOffset(inlineUIContainer, ref charOffset);
+
+            AnchoredBlock anchoredBlock = currentInline as AnchoredBlock;
+            if (anchoredBlock != null)
+                return GetPointerFromCharOffset(anchoredBlock, ref charOffset);
+
+            throw new ArgumentException();
+        }
+
+        private static TextPointer GetPointerFromCharOffset(AnchoredBlock anchoredBlock, ref int charOffset)
+        {
+            return GetPointerFromCharOffset(anchoredBlock.ElementEnd, anchoredBlock.Blocks, ref charOffset);
+        }
+
+        private static TextPointer GetPointerFromCharOffset(InlineUIContainer inlineUIContainer, ref int charOffset)
+        {
+            return inlineUIContainer.ElementEnd;
+        }
+
+        private static TextPointer GetPointerFromCharOffset(LineBreak lineBreak, ref int charOffset)
+        {
+            return lineBreak.ElementEnd;
+        }
+
+        private static TextPointer GetPointerFromCharOffset(Run run, ref int charOffset)
+        {
+            if (run.Text.Length >= charOffset)
+            {
+                TextPointer pointer = run.ContentStart.GetPositionAtOffset(charOffset);
+                charOffset = 0;
+                return pointer;
+            }
+
+            charOffset -= run.Text.Length;
+            return run.ElementEnd;
+        }
+
+        private static TextPointer GetPointerFromCharOffset(Span span, ref int charOffset)
+        {
+            return GetPointerFromCharOffset(span.ElementEnd, span.Inlines, ref charOffset);
+        }
+
+        private static int GetCharOffsetToPosition(BlockCollection blockCollection, TextPointer position, out TextPointer result)
+        {
+            int offset = 0;
+            foreach (var block in blockCollection)
+            {
+                offset += GetCharOffsetToPosition(block, position, out result);
+                if (result == null || result.CompareTo(position) >= 0)
+                    return offset;
+            }
+
+            result = null;
+            return offset;
+        }
+
+        private static int GetCharOffsetToPosition(InlineCollection inlineCollection, TextPointer position, out TextPointer result)
+        {
+            int offset = 0;
+            foreach (var inline in inlineCollection)
+            {
+                offset += GetCharOffsetToPosition(inline, position, out result);
+                if (result == null || result.CompareTo(position) >= 0)
+                    return offset;
+            }
+
+            result = null;
+            return offset;
+        }
+
+        private static int GetCharOffsetToPosition(ListItemCollection listItemCollection, TextPointer position, out TextPointer result)
+        {
+            int offset = 0;
+            foreach (var listItem in listItemCollection)
+            {
+                offset += GetCharOffsetToPosition(listItem, position, out result);
+                if (result == null || result.CompareTo(position) >= 0)
+                    return offset;
+            }
+
+            result = null;
+            return offset;
+        }
+
+        private static int GetCharOffsetToPosition(Block currentBlock, TextPointer position, out TextPointer result)
+        {
+            Paragraph paragraph = currentBlock as Paragraph;
+            if (paragraph != null)
+                return GetCharOffsetToPosition(paragraph, position, out result);
+
+            List list = currentBlock as List;
+            if (list != null)
+                return GetCharOffsetToPosition(list, position, out result);
+
+            Table table = currentBlock as Table;
+            if (table != null)
+                return GetCharOffsetToPosition(table, position, out result);
+
+            Section section = currentBlock as Section;
+            if (section != null)
+                return GetCharOffsetToPosition(section, position, out result);
+
+            throw new ArgumentException();
+        }
+
+        private static int GetCharOffsetToPosition(List list, TextPointer position, out TextPointer result)
+        {
+            return GetCharOffsetToPosition(list.ListItems, position, out result);
+        }
+
+        private static int GetCharOffsetToPosition(ListItem listItem, TextPointer position, out TextPointer result)
+        {
+            return GetCharOffsetToPosition(listItem.Blocks, position, out result);
+        }
+
+        private static int GetCharOffsetToPosition(Paragraph paragraph, TextPointer position, out TextPointer result)
+        {
+            return GetCharOffsetToPosition(paragraph.Inlines, position, out result);
+        }
+
+        private static int GetCharOffsetToPosition(Section section, TextPointer position, out TextPointer result)
+        {
+            return GetCharOffsetToPosition(section.Blocks, position, out result);
+        }
+
+        private static int GetCharOffsetToPosition(Table table, TextPointer position, out TextPointer result)
+        {
+            throw new NotImplementedException();
+        }
+
+        private static int GetCharOffsetToPosition(Inline currentInline, TextPointer position, out TextPointer result)
+        {
+            Run run = currentInline as Run;
+            if (run != null)
+                return GetCharOffsetToPosition(run, position, out result);
+
+            LineBreak lineBreak = currentInline as LineBreak;
+            if (lineBreak != null)
+                return GetCharOffsetToPosition(lineBreak, position, out result);
+
+            Span span = currentInline as Span;
+            if (span != null)
+                return GetCharOffsetToPosition(span, position, out result);
+
+            InlineUIContainer inlineUIContainer = currentInline as InlineUIContainer;
+            if (inlineUIContainer != null)
+                return GetCharOffsetToPosition(inlineUIContainer, position, out result);
+
+            AnchoredBlock anchoredBlock = currentInline as AnchoredBlock;
+            if (anchoredBlock != null)
+                return GetCharOffsetToPosition(anchoredBlock, position, out result);
+
+            throw new ArgumentException();
+        }
+
+        private static int GetCharOffsetToPosition(AnchoredBlock anchoredBlock, TextPointer position, out TextPointer result)
+        {
+            return GetCharOffsetToPosition(anchoredBlock.Blocks, position, out result);
+        }
+
+        private static int GetCharOffsetToPosition(InlineUIContainer inlineUIContainer, TextPointer position, out TextPointer result)
+        {
+            result = inlineUIContainer.ElementEnd;
+            return 0;
+        }
+
+        private static int GetCharOffsetToPosition(LineBreak lineBreak, TextPointer position, out TextPointer result)
+        {
+            result = lineBreak.ElementEnd;
+            return 0;
+        }
+
+        private static int GetCharOffsetToPosition(Run run, TextPointer position, out TextPointer result)
+        {
+            if (run.ContentEnd.CompareTo(position) >= 0)
+            {
+                result = position;
+                return run.ContentStart.GetOffsetToPosition(position);
+            }
+
+            result = run.ElementEnd;
+            return run.Text.Length;
+        }
+
+        private static int GetCharOffsetToPosition(Span span, TextPointer position, out TextPointer result)
+        {
+            return GetCharOffsetToPosition(span.Inlines, position, out result);
+        }
+    }
+}
diff --git a/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs b/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs
new file mode 100644
index 0000000..0e81dd4
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs
@@ -0,0 +1,59 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr4.StringTemplate.Visualizer.Extensions
+{
+    using Antlr4.StringTemplate;
+    using CultureInfo = System.Globalization.CultureInfo;
+    using IList = System.Collections.IList;
+
+    internal static class ListExtensions
+    {
+        public static string ToListString(this IList list)
+        {
+            STGroup group = new STGroup('$', '$');
+            group.defineTemplate("listTemplate", "list", "[$list:{x|$x$}; separator=\", \"$]");
+            group.registerRenderer(typeof(IList), new CollectionRenderer());
+            ST st = group.getInstanceOf("listTemplate");
+            st.add("list", list);
+            return st.render();
+        }
+
+        private class CollectionRenderer : IAttributeRenderer
+        {
+            public string toString(object o, string formatString, CultureInfo culture)
+            {
+                return ((IList)o).ToListString();
+            }
+        }
+    }
+}
diff --git a/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs b/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
new file mode 100644
index 0000000..f17c6a0
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/Extensions/TemplateExtensions.cs
@@ -0,0 +1,70 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr4.StringTemplate.Visualizer.Extensions
+{
+    using Antlr4.StringTemplate.Debug;
+    using Antlr4.StringTemplate.Misc;
+    using CultureInfo = System.Globalization.CultureInfo;
+    using StringWriter = System.IO.StringWriter;
+
+    public static class TemplateExtensions
+    {
+        public static void Inspect(this DebugST template)
+        {
+            Inspect(template, CultureInfo.CurrentCulture);
+        }
+
+        public static void Inspect(this DebugST template, int lineWidth)
+        {
+            Inspect(template, template.impl.nativeGroup.errMgr, CultureInfo.CurrentCulture, lineWidth);
+        }
+
+        public static void Inspect(this DebugST template, CultureInfo culture)
+        {
+            Inspect(template, template.impl.nativeGroup.errMgr, culture, AutoIndentWriter.NO_WRAP);
+        }
+
+        public static void Inspect(this DebugST template, ErrorManager errorManager, CultureInfo culture, int lineWidth)
+        {
+            ErrorBuffer errors = new ErrorBuffer();
+            template.impl.nativeGroup.setListener(errors);
+            StringWriter @out = new StringWriter();
+            ITemplateWriter wr = new AutoIndentWriter(@out);
+            wr.setLineWidth(lineWidth);
+            Interpreter interp = new Interpreter(template.groupThatCreatedThisInstance, culture);
+            interp.Execute(wr, template); // render and track events
+            TemplateVisualizer visualizer = new TemplateVisualizer(errorManager, template, @out.ToString(), interp, interp.getExecutionTrace(), errors.Errors);
+            visualizer.Show();
+        }
+    }
+}
diff --git a/Antlr4.StringTemplate.Visualizer/Properties/AssemblyInfo.cs b/Antlr4.StringTemplate.Visualizer/Properties/AssemblyInfo.cs
new file mode 100644
index 0000000..9e0d842
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/Properties/AssemblyInfo.cs
@@ -0,0 +1,87 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+using System;
+using System.Reflection;
+using System.Runtime.InteropServices;
+using System.Windows;
+
+// General Information about an assembly is controlled through the following
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("Antlr4.StringTemplate.Visualizer")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("Tunnel Vision Laboratories, LLC")]
+[assembly: AssemblyProduct("Antlr4.StringTemplate.Visualizer")]
+[assembly: AssemblyCopyright("Copyright © Sam Harwell 2011")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+[assembly: CLSCompliant(false)]
+
+// Setting ComVisible to false makes the types in this assembly not visible
+// to COM components.  If you need to access a type in this assembly from
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+//In order to begin building localizable applications, set
+//<UICulture>CultureYouAreCodingWith</UICulture> in your .csproj file
+//inside a <PropertyGroup>.  For example, if you are using US english
+//in your source files, set the <UICulture> to en-US.  Then uncomment
+//the NeutralResourceLanguage attribute below.  Update the "en-US" in
+//the line below to match the UICulture setting in the project file.
+
+//[assembly: NeutralResourcesLanguage("en-US", UltimateResourceFallbackLocation.Satellite)]
+
+
+[assembly: ThemeInfo(
+    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
+    //(used if a resource is not found in the page,
+    // or application resource dictionaries)
+    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
+    //(used if a resource is not found in the page,
+    // app, or any theme specific resource dictionaries)
+)]
+
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/Antlr4.StringTemplate.Visualizer/Properties/Resources.Designer.cs b/Antlr4.StringTemplate.Visualizer/Properties/Resources.Designer.cs
new file mode 100644
index 0000000..26b9956
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/Properties/Resources.Designer.cs
@@ -0,0 +1,63 @@
+﻿//------------------------------------------------------------------------------
+// <auto-generated>
+//     This code was generated by a tool.
+//     Runtime Version:4.0.30319.1
+//
+//     Changes to this file may cause incorrect behavior and will be lost if
+//     the code is regenerated.
+// </auto-generated>
+//------------------------------------------------------------------------------
+
+namespace Antlr4.StringTemplate.Visualizer.Properties {
+    using System;
+
+
+    /// <summary>
+    ///   A strongly-typed resource class, for looking up localized strings, etc.
+    /// </summary>
+    // This class was auto-generated by the StronglyTypedResourceBuilder
+    // class via a tool like ResGen or Visual Studio.
+    // To add or remove a member, edit your .ResX file then rerun ResGen
+    // with the /str option, or rebuild your VS project.
+    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
+    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
+    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
+    internal class Resources {
+
+        private static global::System.Resources.ResourceManager resourceMan;
+
+        private static global::System.Globalization.CultureInfo resourceCulture;
+
+        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
+        internal Resources() {
+        }
+
+        /// <summary>
+        ///   Returns the cached ResourceManager instance used by this class.
+        /// </summary>
+        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
+        internal static global::System.Resources.ResourceManager ResourceManager {
+            get {
+                if (object.ReferenceEquals(resourceMan, null)) {
+                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Antlr4.StringTemplate.Visualizer.Properties.Resources", typeof(Resources).Assembly);
+                    resourceMan = temp;
+                }
+                return resourceMan;
+            }
+        }
+
+        /// <summary>
+        ///   Overrides the current thread's CurrentUICulture property for all
+        ///   resource lookups using this strongly typed resource class.
+        /// </summary>
+        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
+        internal static global::System.Globalization.CultureInfo Culture {
+            get {
+                return resourceCulture;
+            }
+            set {
+                resourceCulture = value;
+            }
+        }
+    }
+}
diff --git a/Antlr4.StringTemplate.Visualizer/Properties/Resources.resx b/Antlr4.StringTemplate.Visualizer/Properties/Resources.resx
new file mode 100644
index 0000000..af7dbeb
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/Properties/Resources.resx
@@ -0,0 +1,117 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<root>
+  <!--
+    Microsoft ResX Schema
+
+    Version 2.0
+
+    The primary goals of this format is to allow a simple XML format
+    that is mostly human readable. The generation and parsing of the
+    various data types are done through the TypeConverter classes
+    associated with the data types.
+
+    Example:
+
+    ... ado.net/XML headers & schema ...
+    <resheader name="resmimetype">text/microsoft-resx</resheader>
+    <resheader name="version">2.0</resheader>
+    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
+    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
+    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
+    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
+    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
+        <value>[base64 mime encoded serialized .NET Framework object]</value>
+    </data>
+    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
+        <comment>This is a comment</comment>
+    </data>
+
+    There are any number of "resheader" rows that contain simple
+    name/value pairs.
+
+    Each data row contains a name, and value. The row also contains a
+    type or mimetype. Type corresponds to a .NET class that support
+    text/value conversion through the TypeConverter architecture.
+    Classes that don't support this are serialized and stored with the
+    mimetype set.
+
+    The mimetype is used for serialized objects, and tells the
+    ResXResourceReader how to depersist the object. This is currently not
+    extensible. For a given mimetype the value must be set accordingly:
+
+    Note - application/x-microsoft.net.object.binary.base64 is the format
+    that the ResXResourceWriter will generate, however the reader can
+    read any of the formats listed below.
+
+    mimetype: application/x-microsoft.net.object.binary.base64
+    value   : The object must be serialized with
+            : System.Serialization.Formatters.Binary.BinaryFormatter
+            : and then encoded with base64 encoding.
+
+    mimetype: application/x-microsoft.net.object.soap.base64
+    value   : The object must be serialized with
+            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
+            : and then encoded with base64 encoding.
+
+    mimetype: application/x-microsoft.net.object.bytearray.base64
+    value   : The object must be serialized into a byte array
+            : using a System.ComponentModel.TypeConverter
+            : and then encoded with base64 encoding.
+    -->
+  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
+    <xsd:element name="root" msdata:IsDataSet="true">
+      <xsd:complexType>
+        <xsd:choice maxOccurs="unbounded">
+          <xsd:element name="metadata">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" />
+              <xsd:attribute name="type" type="xsd:string" />
+              <xsd:attribute name="mimetype" type="xsd:string" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="assembly">
+            <xsd:complexType>
+              <xsd:attribute name="alias" type="xsd:string" />
+              <xsd:attribute name="name" type="xsd:string" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="data">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
+              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
+              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="resheader">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" use="required" />
+            </xsd:complexType>
+          </xsd:element>
+        </xsd:choice>
+      </xsd:complexType>
+    </xsd:element>
+  </xsd:schema>
+  <resheader name="resmimetype">
+    <value>text/microsoft-resx</value>
+  </resheader>
+  <resheader name="version">
+    <value>2.0</value>
+  </resheader>
+  <resheader name="reader">
+    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+  <resheader name="writer">
+    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+</root>
\ No newline at end of file
diff --git a/Antlr4.StringTemplate.Visualizer/Properties/Settings.Designer.cs b/Antlr4.StringTemplate.Visualizer/Properties/Settings.Designer.cs
new file mode 100644
index 0000000..f3f13a8
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/Properties/Settings.Designer.cs
@@ -0,0 +1,26 @@
+﻿//------------------------------------------------------------------------------
+// <auto-generated>
+//     This code was generated by a tool.
+//     Runtime Version:4.0.30319.1
+//
+//     Changes to this file may cause incorrect behavior and will be lost if
+//     the code is regenerated.
+// </auto-generated>
+//------------------------------------------------------------------------------
+
+namespace Antlr4.StringTemplate.Visualizer.Properties {
+
+
+    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
+    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
+    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
+
+        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
+
+        public static Settings Default {
+            get {
+                return defaultInstance;
+            }
+        }
+    }
+}
diff --git a/Antlr4.StringTemplate.Visualizer/Properties/Settings.settings b/Antlr4.StringTemplate.Visualizer/Properties/Settings.settings
new file mode 100644
index 0000000..033d7a5
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/Properties/Settings.settings
@@ -0,0 +1,7 @@
+﻿<?xml version='1.0' encoding='utf-8'?>
+<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
+  <Profiles>
+    <Profile Name="(Default)" />
+  </Profiles>
+  <Settings />
+</SettingsFile>
\ No newline at end of file
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs b/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
new file mode 100644
index 0000000..be15eb8
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/TemplateCallHierarchyViewModel.cs
@@ -0,0 +1,134 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr4.StringTemplate.Visualizer
+{
+    using System.Collections.Generic;
+    using System.ComponentModel;
+    using System.Diagnostics;
+    using Antlr4.StringTemplate.Debug;
+    using Path = System.IO.Path;
+
+    public class TemplateCallHierarchyViewModel : INotifyPropertyChanged
+    {
+        private static readonly PropertyChangedEventArgs IsExpandedPropertyChangedEventArgs = new PropertyChangedEventArgs("IsExpanded");
+        private static readonly PropertyChangedEventArgs IsSelectedPropertyChangedEventArgs = new PropertyChangedEventArgs("IsSelected");
+
+        private Interpreter _interpreter;
+        private DebugST _template;
+        private List<TemplateCallHierarchyViewModel> _children;
+
+        private bool _isExpanded;
+        private bool _isSelected;
+
+        public TemplateCallHierarchyViewModel(Interpreter interpreter, DebugST template)
+        {
+            this._interpreter = interpreter;
+            this._template = template;
+        }
+
+        public event PropertyChangedEventHandler PropertyChanged;
+
+        public DebugST Template
+        {
+            get
+            {
+                return _template;
+            }
+        }
+
+        public bool IsExpanded
+        {
+            get
+            {
+                return _isExpanded;
+            }
+
+            set
+            {
+                if (_isExpanded == value)
+                    return;
+
+                _isExpanded = value;
+                OnPropertyChanged(IsExpandedPropertyChangedEventArgs);
+            }
+        }
+
+        public bool IsSelected
+        {
+            get
+            {
+                return _isSelected;
+            }
+
+            set
+            {
+                if (_isSelected == value)
+                    return;
+
+                _isSelected = value;
+                OnPropertyChanged(IsSelectedPropertyChangedEventArgs);
+            }
+        }
+
+        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
+        public List<TemplateCallHierarchyViewModel> Children
+        {
+            get
+            {
+                if (_children == null)
+                {
+                    _children = new List<TemplateCallHierarchyViewModel>();
+                    foreach (var @event in _interpreter.getEvents(_template))
+                        _children.Add(new TemplateCallHierarchyViewModel(_interpreter, @event.Self));
+                }
+
+                return _children;
+            }
+        }
+
+        public override string ToString()
+        {
+            if (_template.isAnonSubtemplate())
+                return "{...}";
+
+            return string.Format("{0} @ {1}:{2}", _template, Path.GetFileName(_template.newSTEvent.getFileName()), _template.newSTEvent.getLine());
+        }
+
+        protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
+        {
+            var t = PropertyChanged;
+            if (t != null)
+                t(this, e);
+        }
+    }
+}
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizer.cs b/Antlr4.StringTemplate.Visualizer/TemplateVisualizer.cs
new file mode 100644
index 0000000..e1d3475
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizer.cs
@@ -0,0 +1,113 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr4.StringTemplate.Visualizer
+{
+    using System.Collections.Generic;
+    using System.Collections.ObjectModel;
+    using Antlr4.StringTemplate.Debug;
+    using Antlr4.StringTemplate.Misc;
+
+    public class TemplateVisualizer
+    {
+        private ErrorManager _errorManager;
+        private DebugST _root;
+        private string _output;
+        private Interpreter _interpreter;
+        private List<string> _trace;
+        private ReadOnlyCollection<STMessage> _errors;
+
+        public TemplateVisualizer(ErrorManager errorManager, DebugST root, string output, Interpreter interpreter, List<string> trace, ReadOnlyCollection<STMessage> errors)
+        {
+            _errorManager = errorManager;
+            _root = root;
+            _output = output;
+            _interpreter = interpreter;
+            _trace = trace;
+            _errors = errors;
+        }
+
+        public ErrorManager ErrorManager
+        {
+            get
+            {
+                return _errorManager;
+            }
+        }
+
+        public DebugST RootTemplate
+        {
+            get
+            {
+                return _root;
+            }
+        }
+
+        public string Output
+        {
+            get
+            {
+                return _output;
+            }
+        }
+
+        public Interpreter Interpreter
+        {
+            get
+            {
+                return _interpreter;
+            }
+        }
+
+        public List<string> Trace
+        {
+            get
+            {
+                return _trace;
+            }
+        }
+
+        public ReadOnlyCollection<STMessage> Errors
+        {
+            get
+            {
+                return _errors;
+            }
+        }
+
+        public void Show()
+        {
+            TemplateVisualizerWindow window = new TemplateVisualizerWindow(this);
+            window.ShowDialog();
+        }
+    }
+}
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml
new file mode 100644
index 0000000..27df488
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml
@@ -0,0 +1,125 @@
+﻿<!--
+  [The "BSD licence"]
+  Copyright (c) 2011 Terence Parr
+  All rights reserved.
+
+  Conversion to C#:
+  Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+  All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions
+  are met:
+  1. Redistributions of source code must retain the above copyright
+     notice, this list of conditions and the following disclaimer.
+  2. Redistributions in binary form must reproduce the above copyright
+     notice, this list of conditions and the following disclaimer in the
+     documentation and/or other materials provided with the distribution.
+  3. The name of the author may not be used to endorse or promote products
+     derived from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ -->
+<UserControl x:Class="Antlr4.StringTemplate.Visualizer.TemplateVisualizerFrame"
+             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
+             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
+             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
+             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
+             mc:Ignorable="d"
+             d:DesignHeight="600" d:DesignWidth="800">
+    <Grid>
+        <Grid.RowDefinitions>
+            <RowDefinition />
+            <RowDefinition Height="Auto" />
+            <RowDefinition />
+            <RowDefinition Height="Auto" />
+            <RowDefinition />
+        </Grid.RowDefinitions>
+
+        <Grid Grid.Row="0" Grid.RowSpan="1">
+            <Grid.ColumnDefinitions>
+                <ColumnDefinition />
+                <ColumnDefinition Width="Auto" />
+                <ColumnDefinition />
+            </Grid.ColumnDefinitions>
+
+            <TreeView Name="CallHierarchyTreeView" Grid.Column="0" Grid.ColumnSpan="1" SelectedItemChanged="HandleCallHierarchyTreeViewSelectedItemChanged"
+                          ItemsSource="{Binding TemplateCallHierarchy}">
+                <TreeView.ItemTemplate>
+                    <HierarchicalDataTemplate ItemsSource="{Binding Children}">
+                        <ContentControl Content="{Binding}" />
+                    </HierarchicalDataTemplate>
+                </TreeView.ItemTemplate>
+                <TreeView.Resources>
+                    <Style TargetType="{x:Type TreeViewItem}" x:Key="CallHierarchyTreeViewItemStyle">
+                        <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
+                        <Setter Property="IsSelected" Value="{Binding IsSelected}" />
+                    </Style>
+                </TreeView.Resources>
+            </TreeView>
+            <GridSplitter Width="5" Grid.Column="1" Grid.ColumnSpan="1" ResizeBehavior="PreviousAndNext" />
+            <RichTextBox Name="OutputTextBox" Grid.Column="2" Grid.ColumnSpan="1" SelectionChanged="HandleOutputTextBoxSelectionChanged" />
+        </Grid>
+
+        <GridSplitter HorizontalAlignment="Stretch" Height="5" Grid.Row="1" Grid.RowSpan="1" ResizeDirection="Rows" ResizeBehavior="PreviousAndNext" />
+
+        <Grid Grid.Row="2" Grid.RowSpan="1">
+            <Grid.ColumnDefinitions>
+                <ColumnDefinition />
+                <ColumnDefinition Width="Auto" />
+                <ColumnDefinition />
+            </Grid.ColumnDefinitions>
+
+            <ListBox Name="AttributesListBox" Grid.Column="0" Grid.ColumnSpan="1" SelectionChanged="HandleAttributesListBoxSelectionChanged"
+                         ItemsSource="{Binding Attributes}" />
+            <GridSplitter Width="5" Grid.Column="1" Grid.ColumnSpan="1" ResizeBehavior="PreviousAndNext" />
+            <TabControl Grid.Column="2" Grid.ColumnSpan="1">
+                <TabItem Header="Template">
+                    <Grid>
+                        <Grid.ColumnDefinitions>
+                            <ColumnDefinition />
+                            <ColumnDefinition Width="Auto" />
+                            <ColumnDefinition />
+                        </Grid.ColumnDefinitions>
+                        <RichTextBox Grid.Column="0" Grid.ColumnSpan="1" Name="TemplateTextBox" />
+                        <GridSplitter Grid.Column="1" Grid.ColumnSpan="1" Width="5" ResizeBehavior="PreviousAndNext" />
+                        <TreeView Grid.Column="2" Grid.ColumnSpan="1" Name="AstTreeView" SelectedItemChanged="HandleAstTreeViewSelectedItemChanged"
+                                  ItemsSource="{Binding Ast.Children}">
+                            <TreeView.ItemTemplate>
+                                <HierarchicalDataTemplate ItemsSource="{Binding Children}">
+                                    <ContentControl Content="{Binding}" />
+                                </HierarchicalDataTemplate>
+                            </TreeView.ItemTemplate>
+                        </TreeView>
+                    </Grid>
+                </TabItem>
+                <TabItem Header="Bytecode">
+                    <Grid>
+                        <TextBox Name="BytecodeTextBox" Text="{Binding Bytecode}" />
+                    </Grid>
+                </TabItem>
+                <TabItem Header="Trace">
+                    <Grid>
+                        <ListBox Name="TraceListBox" ItemsSource="{Binding Trace}" />
+                    </Grid>
+                </TabItem>
+            </TabControl>
+        </Grid>
+
+        <GridSplitter HorizontalAlignment="Stretch" Height="5" Grid.Row="3" Grid.RowSpan="1" ResizeDirection="Rows" ResizeBehavior="PreviousAndNext" />
+
+        <!-- Errors -->
+        <ListBox Name="ErrorsListBox" MinHeight="50" Grid.Row="4" Grid.RowSpan="1"
+                 SelectionChanged="HandleErrorsListBoxSelectionChanged"
+                 ItemsSource="{Binding Errors}" />
+    </Grid>
+</UserControl>
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
new file mode 100644
index 0000000..0851279
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
@@ -0,0 +1,309 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr4.StringTemplate.Visualizer
+{
+    using System;
+    using System.Collections.Generic;
+    using System.Linq;
+    using System.Text;
+    using System.Windows;
+    using System.Windows.Controls;
+    using System.Windows.Documents;
+    using System.Windows.Media;
+    using Antlr.Runtime;
+    using Antlr.Runtime.Tree;
+    using Antlr4.StringTemplate.Debug;
+    using Antlr4.StringTemplate.Misc;
+    using Antlr4.StringTemplate.Visualizer.Extensions;
+    using IList = System.Collections.IList;
+    using Path = System.IO.Path;
+
+    public partial class TemplateVisualizerFrame : UserControl
+    {
+        private DebugST currentTemplate;
+
+        public TemplateVisualizerFrame()
+        {
+            InitializeComponent();
+        }
+
+        public TemplateVisualizerViewModel ViewModel
+        {
+            get
+            {
+                return DataContext as TemplateVisualizerViewModel;
+            }
+
+            set
+            {
+                DataContext = value;
+            }
+        }
+
+        protected override void OnPropertyChanged(DependencyPropertyChangedEventArgs e)
+        {
+            if (e.Property == DataContextProperty)
+            {
+                var viewModel = ViewModel;
+                if (viewModel == null)
+                    return;
+
+                currentTemplate = viewModel.Visualizer.RootTemplate;
+                OutputTextBox.Document = new FlowDocument(new Paragraph(new Run(viewModel.Output)
+                {
+                    FontFamily = new FontFamily("Consolas")
+                }));
+                UpdateCurrentTemplate();
+            }
+
+            base.OnPropertyChanged(e);
+        }
+
+        private void HandleErrorsListBoxSelectionChanged(object sender, SelectionChangedEventArgs e)
+        {
+            int minIndex = ErrorsListBox.SelectedIndex;
+            STMessage message = ErrorsListBox.SelectedItem as STMessage;
+            STRuntimeMessage runtimeMessage = message as STRuntimeMessage;
+            if (runtimeMessage != null)
+            {
+                Interval interval = runtimeMessage.SourceInterval;
+                currentTemplate = (DebugST)message.Self;
+                UpdateCurrentTemplate();
+                Highlight(TemplateTextBox.Document, interval);
+            }
+        }
+
+        private void HandleAttributesListBoxSelectionChanged(object sender, SelectionChangedEventArgs e)
+        {
+            // do nothing for now
+        }
+
+        private void HandleCallHierarchyTreeViewSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
+        {
+            TemplateCallHierarchyViewModel selected = CallHierarchyTreeView.SelectedItem as TemplateCallHierarchyViewModel;
+            if (selected != null)
+            {
+                currentTemplate = selected.Template;
+                UpdateCurrentTemplate();
+            }
+        }
+
+        private void HandleAstTreeViewSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
+        {
+            CommonTree node = AstTreeView.SelectedItem as CommonTree;
+            if (node == null)
+                return;
+
+            CommonToken a = (CommonToken)currentTemplate.impl.tokens.Get(node.TokenStartIndex);
+            CommonToken b = (CommonToken)currentTemplate.impl.tokens.Get(node.TokenStopIndex);
+            if (a == null || b == null)
+                return;
+
+            Highlight(TemplateTextBox.Document, new Interval(a.StartIndex, b.StopIndex));
+        }
+
+        private void HandleOutputTextBoxSelectionChanged(object sender, RoutedEventArgs e)
+        {
+            InterpEvent de = FindEventAtOutputLocation(ViewModel.AllEvents, OutputTextBox.Document.GetCharOffsetToPosition(OutputTextBox.CaretPosition));
+            if (de == null)
+                currentTemplate = ViewModel.Visualizer.RootTemplate;
+            else
+                currentTemplate = de.Self;
+            UpdateCurrentTemplate();
+        }
+
+        private static InterpEvent FindEventAtOutputLocation(List<InterpEvent> events, int position)
+        {
+            foreach (var e in events)
+            {
+                if (position >= e.Start && position <= e.Stop)
+                    return e;
+            }
+
+            return null;
+        }
+
+        private static void Highlight(FlowDocument document, Interval interval)
+        {
+            if (document == null)
+                throw new ArgumentNullException("document");
+
+            TextPointer contentStart = document.ContentStart;
+
+            // clear any existing highlight
+            TextRange documentRange = new TextRange(document.ContentStart, document.ContentEnd);
+            documentRange.ApplyPropertyValue(FlowDocument.BackgroundProperty, FlowDocument.BackgroundProperty.DefaultMetadata.DefaultValue);
+
+            // highlight the new text
+            if (interval != null)
+            {
+                int startOffset = interval.A;
+                int endOffset = interval.B + 1;
+                TextPointer highlightStart = document.GetPointerFromCharOffset(ref startOffset);
+                TextPointer highlightStop = document.GetPointerFromCharOffset(ref endOffset);
+                if (startOffset != 0 || endOffset != 0)
+                    return;
+
+                var textRange = new TextRange(highlightStart, highlightStop);
+                textRange.ApplyPropertyValue(FlowDocument.BackgroundProperty, Brushes.Yellow);
+            }
+        }
+
+        private static void SetSelectionPath(TemplateCallHierarchyViewModel treeView, ICollection<ST> selectionPath)
+        {
+            if (treeView == null || selectionPath.Count == 0 || treeView.Template != selectionPath.First())
+                return;
+
+            List<TemplateCallHierarchyViewModel> nodes = new List<TemplateCallHierarchyViewModel>();
+            nodes.Add(treeView);
+
+            TemplateCallHierarchyViewModel current = treeView;
+            foreach (var template in selectionPath.Skip(1))
+            {
+                current = current.Children.FirstOrDefault(i => i.Template == template);
+                if (current == null)
+                    return;
+            }
+
+            for (int i = 0; i < nodes.Count - 1; i++)
+                nodes[i].IsExpanded = true;
+
+            nodes[nodes.Count - 1].IsSelected = true;
+        }
+
+        private void UpdateCurrentTemplate()
+        {
+            var viewModel = ViewModel;
+            if (viewModel == null)
+                return;
+
+            UpdateStack();
+            UpdateAttributes();
+            viewModel.Bytecode = currentTemplate.impl.disasm();
+            viewModel.Ast = currentTemplate.impl.ast;
+
+            SetSelectionPath(viewModel.TemplateCallHierarchy[0], currentTemplate.getEnclosingInstanceStack(true));
+
+            TemplateTextBox.Document = new FlowDocument(new Paragraph(new Run(currentTemplate.impl.template)
+            {
+                FontFamily = new FontFamily("Consolas")
+            }));
+            Interval r = currentTemplate.impl.TemplateRange;
+            if (currentTemplate.enclosingInstance != null)
+            {
+                int i = GetIndexOfChild((DebugST)currentTemplate.enclosingInstance, currentTemplate);
+                if (i == -1)
+                {
+                    Highlight(OutputTextBox.Document, null);
+                    Highlight(TemplateTextBox.Document, r);
+                }
+                else
+                {
+                    InterpEvent e = ViewModel.Visualizer.Interpreter.getEvents(currentTemplate.enclosingInstance)[i];
+                    if (e is EvalTemplateEvent)
+                    {
+                        if (currentTemplate.isAnonSubtemplate())
+                            Highlight(TemplateTextBox.Document, r);
+
+                        Highlight(OutputTextBox.Document, new Interval(e.Start, e.Stop));
+                    }
+                }
+            }
+            else
+            {
+                Highlight(TemplateTextBox.Document, r);
+            }
+        }
+
+        private int GetIndexOfChild(DebugST parent, ST child)
+        {
+            TemplateCallHierarchyViewModel hierarchy = new TemplateCallHierarchyViewModel(ViewModel.Visualizer.Interpreter, parent);
+            List<TemplateCallHierarchyViewModel> children = hierarchy.Children;
+            return children.FindIndex(i => i.Template == child);
+        }
+
+        private void UpdateStack()
+        {
+            List<ST> stack = currentTemplate.getEnclosingInstanceStack(true);
+            ViewModel.Title = string.Format("STViz - [{0}]", string.Join(" ", stack.Select(i => i.ToString()).ToArray()));
+            //throw new NotImplementedException();
+        }
+
+        private void UpdateAttributes()
+        {
+            var viewModel = ViewModel;
+            if (viewModel == null)
+                return;
+
+            List<string> attributesList = new List<string>();
+            IDictionary<string, object> attributes = currentTemplate.getAttributes();
+            if (attributes != null)
+            {
+                foreach (var attribute in attributes)
+                {
+                    object value = attribute.Value;
+                    IList valueList = value as IList;
+                    if (valueList != null)
+                        value = valueList.ToListString();
+
+                    if (currentTemplate.addAttrEvents != null)
+                    {
+                        List<AddAttributeEvent> events;
+                        currentTemplate.addAttrEvents.TryGetValue(attribute.Key, out events);
+                        StringBuilder locations = new StringBuilder();
+                        int i = 0;
+                        if (events != null)
+                        {
+                            foreach (AddAttributeEvent ae in events)
+                            {
+                                if (i > 0)
+                                    locations.Append(", ");
+
+                                locations.AppendFormat("{0}:{1}", Path.GetFileName(ae.getFileName()), ae.getLine());
+                                i++;
+                            }
+                        }
+
+                        attributesList.Add(string.Format("{0} = {1} @ {2}", attribute.Key, value, locations));
+                    }
+                    else
+                    {
+                        attributesList.Add(string.Format("{0} = {1}", attribute.Key, value));
+                    }
+                }
+            }
+
+            viewModel.Attributes = attributesList;
+        }
+    }
+}
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerViewModel.cs b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerViewModel.cs
new file mode 100644
index 0000000..cab26d8
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerViewModel.cs
@@ -0,0 +1,208 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr4.StringTemplate.Visualizer
+{
+    using System;
+    using System.Collections.Generic;
+    using System.Collections.ObjectModel;
+    using System.ComponentModel;
+    using Antlr.Runtime;
+    using Antlr.Runtime.Tree;
+    using Antlr4.StringTemplate.Debug;
+    using Antlr4.StringTemplate.Misc;
+
+    public class TemplateVisualizerViewModel : INotifyPropertyChanged
+    {
+        private static readonly PropertyChangedEventArgs AstPropertyChangedEventArgs = new PropertyChangedEventArgs("Ast");
+        private static readonly PropertyChangedEventArgs BytecodePropertyChangedEventArgs = new PropertyChangedEventArgs("Bytecode");
+        private static readonly PropertyChangedEventArgs AttributesPropertyChangedEventArgs = new PropertyChangedEventArgs("Attributes");
+        private static readonly PropertyChangedEventArgs TitlePropertyChangedEventArgs = new PropertyChangedEventArgs("Title");
+
+        private TemplateVisualizer _visualizer;
+        private List<TemplateCallHierarchyViewModel> _templateCallHierarchy;
+        private List<InterpEvent> _allEvents;
+        private CommonTree _ast;
+        private string _title;
+        private string _bytecode;
+        private List<string> _attributes;
+
+        public event PropertyChangedEventHandler PropertyChanged;
+
+        public TemplateVisualizerViewModel(TemplateVisualizer visualizer)
+        {
+            if (visualizer == null)
+                throw new ArgumentNullException("visualizer");
+
+            _visualizer = visualizer;
+            _allEvents = visualizer.Interpreter.getEvents();
+            _templateCallHierarchy =
+                new List<TemplateCallHierarchyViewModel>()
+                {
+                    new TemplateCallHierarchyViewModel(visualizer.Interpreter, visualizer.RootTemplate)
+                };
+        }
+
+        public TemplateVisualizer Visualizer
+        {
+            get
+            {
+                return _visualizer;
+            }
+        }
+
+        public string Output
+        {
+            get
+            {
+                return _visualizer.Output;
+            }
+        }
+
+        public ReadOnlyCollection<STMessage> Errors
+        {
+            get
+            {
+                return Visualizer.Errors;
+            }
+        }
+
+        public List<InterpEvent> AllEvents
+        {
+            get
+            {
+                return _allEvents;
+            }
+        }
+
+        public List<TemplateCallHierarchyViewModel> TemplateCallHierarchy
+        {
+            get
+            {
+                return _templateCallHierarchy;
+            }
+        }
+
+        public CommonTree Ast
+        {
+            get
+            {
+                return _ast;
+            }
+
+            set
+            {
+                if (_ast != null && _ast.Children[0] == value)
+                    return;
+
+                if (value == null)
+                {
+                    _ast = null;
+                }
+                else
+                {
+                    _ast = new CommonTree();
+                    _ast.AddChild(new CommonTree(new CommonToken(TokenTypes.Invalid)));
+                    _ast.Children[0] = value;
+                }
+
+                OnPropertyChanged(AstPropertyChangedEventArgs);
+            }
+        }
+
+        public string Title
+        {
+            get
+            {
+                return _title;
+            }
+
+            set
+            {
+                if (_title == value)
+                    return;
+
+                _title = value;
+                OnPropertyChanged(TitlePropertyChangedEventArgs);
+            }
+        }
+
+        public string Bytecode
+        {
+            get
+            {
+                return _bytecode;
+            }
+
+            set
+            {
+                if (_bytecode == value)
+                    return;
+
+                _bytecode = value;
+                OnPropertyChanged(BytecodePropertyChangedEventArgs);
+            }
+        }
+
+        public List<string> Attributes
+        {
+            get
+            {
+                return _attributes;
+            }
+
+            set
+            {
+                if (_attributes == value)
+                    return;
+
+                _attributes = value;
+                OnPropertyChanged(AttributesPropertyChangedEventArgs);
+            }
+        }
+
+        public List<string> Trace
+        {
+            get
+            {
+                return _visualizer.Trace;
+            }
+        }
+
+        protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
+        {
+            var t = PropertyChanged;
+            if (t != null)
+                t(this, e);
+        }
+    }
+}
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerWindow.xaml b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerWindow.xaml
new file mode 100644
index 0000000..864fba7
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerWindow.xaml
@@ -0,0 +1,40 @@
+﻿<!--
+  [The "BSD licence"]
+  Copyright (c) 2011 Terence Parr
+  All rights reserved.
+
+  Conversion to C#:
+  Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+  All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions
+  are met:
+  1. Redistributions of source code must retain the above copyright
+     notice, this list of conditions and the following disclaimer.
+  2. Redistributions in binary form must reproduce the above copyright
+     notice, this list of conditions and the following disclaimer in the
+     documentation and/or other materials provided with the distribution.
+  3. The name of the author may not be used to endorse or promote products
+     derived from this software without specific prior written permission.
+
+  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ -->
+<Window x:Class="Antlr4.StringTemplate.Visualizer.TemplateVisualizerWindow"
+        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
+        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
+        xmlns:local="clr-namespace:Antlr4.StringTemplate.Visualizer"
+        Title="{Binding Title}" Height="600" Width="800">
+    <Grid>
+        <local:TemplateVisualizerFrame x:Name="TemplateVisualizerFrame" />
+    </Grid>
+</Window>
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerWindow.xaml.cs b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerWindow.xaml.cs
new file mode 100644
index 0000000..0747a2f
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerWindow.xaml.cs
@@ -0,0 +1,45 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr4.StringTemplate.Visualizer
+{
+    using System.Windows;
+
+    public partial class TemplateVisualizerWindow : Window
+    {
+        public TemplateVisualizerWindow(TemplateVisualizer visualizer)
+        {
+            InitializeComponent();
+            DataContext = new TemplateVisualizerViewModel(visualizer);
+        }
+    }
+}
diff --git a/Antlr4.StringTemplate/Debug/DebugTemplate.cs b/Antlr4.StringTemplate/Debug/DebugTemplate.cs
index 927f270..76e3644 100644
--- a/Antlr4.StringTemplate/Debug/DebugTemplate.cs
+++ b/Antlr4.StringTemplate/Debug/DebugTemplate.cs
@@ -72,38 +72,6 @@ namespace Antlr4.StringTemplate.Debug
base.add(name, value);
}

-        // LAUNCH A WINDOW TO INSPECT TEMPLATE HIERARCHY
-
-        public virtual List<InterpEvent> inspect()
-        {
-            return inspect(CultureInfo.CurrentCulture);
-        }
-
-        public virtual List<InterpEvent> inspect(int lineWidth)
-        {
-            return inspect(impl.nativeGroup.errMgr, CultureInfo.CurrentCulture, lineWidth);
-        }
-
-        public virtual List<InterpEvent> inspect(CultureInfo locale)
-        {
-            return inspect(impl.nativeGroup.errMgr, locale, AutoIndentWriter.NO_WRAP);
-        }
-
-        public virtual List<InterpEvent> inspect(ErrorManager errMgr, CultureInfo locale, int lineWidth)
-        {
-            ErrorBuffer errors = new ErrorBuffer();
-            impl.nativeGroup.setListener(errors);
-            StringWriter @out = new StringWriter();
-            ITemplateWriter wr = new AutoIndentWriter(@out);
-            wr.setLineWidth(lineWidth);
-            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, locale);
-            interp.Execute(wr, this); // render and track events
-#if false
-            new STViz(errMgr, this, @out.ToString(), interp, interp.getExecutionTrace(), errors.Errors);
-#endif
-            return interp.getEvents();
-        }
-
// TESTING SUPPORT

public virtual List<InterpEvent> getEvents()
diff --git a/Antlr4.StringTemplate/Misc/TemplateRuntimeMessage.cs b/Antlr4.StringTemplate/Misc/TemplateRuntimeMessage.cs
index 552a77f..7f6b360 100644
--- a/Antlr4.StringTemplate/Misc/TemplateRuntimeMessage.cs
+++ b/Antlr4.StringTemplate/Misc/TemplateRuntimeMessage.cs
@@ -73,6 +73,16 @@ namespace Antlr4.StringTemplate.Misc
this.ip = ip;
}

+        public Interval SourceInterval
+        {
+            get
+            {
+                if (ip < 0 || Self == null || Self.impl == null || Self.impl.sourceMap == null || ip >= Self.impl.sourceMap.Length)
+                    return null;
+
+                return Self.impl.sourceMap[ip];
+            }
+        }

/** Given an ip (code location), get it's range in source template then
*  return it's template line:col.
diff --git a/Antlr4.Test.StringTemplate/Antlr4.Test.StringTemplate.csproj b/Antlr4.Test.StringTemplate/Antlr4.Test.StringTemplate.csproj
index 4229041..f4cad7e 100644
--- a/Antlr4.Test.StringTemplate/Antlr4.Test.StringTemplate.csproj
+++ b/Antlr4.Test.StringTemplate/Antlr4.Test.StringTemplate.csproj
@@ -51,6 +51,7 @@
<ItemGroup>
<Compile Include="Extensions\ListExtensions.cs" />
<Compile Include="Properties\AssemblyInfo.cs" />
+    <Compile Include="TestVisualizer.cs" />
</ItemGroup>
<ItemGroup>
<Compile Include="BaseTest.cs" />
@@ -87,6 +88,10 @@
<Project>{8FDC0A87-9005-4D5A-AB75-E55CEB575559}</Project>
<Name>Antlr3.Runtime</Name>
</ProjectReference>
+    <ProjectReference Include="..\Antlr4.StringTemplate.Visualizer\Antlr4.StringTemplate.Visualizer.csproj">
+      <Project>{DC0A9616-0B69-4A3B-ADC7-62FCA9207B98}</Project>
+      <Name>Antlr4.StringTemplate.Visualizer</Name>
+    </ProjectReference>
<ProjectReference Include="..\Antlr4.StringTemplate\Antlr4.StringTemplate.csproj">
<Project>{DE9B7DA2-35DD-46CC-B768-DAEE3C298660}</Project>
<Name>Antlr4.StringTemplate</Name>
diff --git a/Antlr4.Test.StringTemplate/TestVisualizer.cs b/Antlr4.Test.StringTemplate/TestVisualizer.cs
new file mode 100644
index 0000000..d76ab9f
--- /dev/null
+++ b/Antlr4.Test.StringTemplate/TestVisualizer.cs
@@ -0,0 +1,115 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr4.Test.StringTemplate
+{
+    using System;
+    using System.Collections.Generic;
+    using System.Linq;
+    using System.Text;
+    using Microsoft.VisualStudio.TestTools.UnitTesting;
+    using Antlr4.StringTemplate;
+    using Antlr4.StringTemplate.Debug;
+    using CultureInfo = System.Globalization.CultureInfo;
+    using Antlr4.StringTemplate.Misc;
+    using StringWriter = System.IO.StringWriter;
+    using Antlr4.StringTemplate.Visualizer;
+    using Path = System.IO.Path;
+
+    [TestClass]
+    public class TestVisualizer : BaseTest
+    {
+        [TestMethod]
+        public void SimpleVisualizerTest()
+        {
+            string templates =
+                "method(type,name,locals,args,stats) ::= <<\n" +
+                "public <type> <ick()> <name>(<args:{a| int <a>}; separator=\", \">) {\n" +
+                "    <if(locals)>int locals[<locals>];<endif>\n" +
+                "    <stats;separator=\"\\n\">\n" +
+                "}\n" +
+                ">>\n" +
+                "assign(a,b) ::= \"<a> = <b>;\"\n" +
+                "return(x) ::= <<return <x>;>>\n" +
+                "paren(x) ::= \"(<x>)\"\n";
+
+            writeFile(tmpdir, "t.stg", templates);
+            STGroup group = new STGroupFile(Path.Combine(tmpdir, "t.stg"));
+            STGroup.debug = true;
+            DebugST st = (DebugST)group.getInstanceOf("method");
+            st.impl.dump();
+            st.add("type", "float");
+            st.add("name", "foo");
+            st.add("locals", 3);
+            st.add("args", new String[] { "x", "y", "z" });
+            ST s1 = group.getInstanceOf("assign");
+            ST paren = group.getInstanceOf("paren");
+            paren.add("x", "x");
+            s1.add("a", paren);
+            s1.add("b", "y");
+            ST s2 = group.getInstanceOf("assign");
+            s2.add("a", "y");
+            s2.add("b", "z");
+            ST s3 = group.getInstanceOf("return");
+            s3.add("x", "3.14159");
+            st.add("stats", s1);
+            st.add("stats", s2);
+            st.add("stats", s3);
+
+            Inspect(st);
+            //st.render();
+        }
+
+        private void Inspect(DebugST template)
+        {
+            Inspect(template, CultureInfo.CurrentCulture);
+        }
+
+        private void Inspect(DebugST template, CultureInfo culture)
+        {
+            Inspect(template, template.impl.nativeGroup.errMgr, culture, AutoIndentWriter.NO_WRAP);
+        }
+
+        private void Inspect(DebugST template, ErrorManager errorManager, CultureInfo culture, int lineWidth)
+        {
+            ErrorBuffer errors = new ErrorBuffer();
+            template.impl.nativeGroup.setListener(errors);
+            StringWriter @out = new StringWriter();
+            ITemplateWriter wr = new AutoIndentWriter(@out);
+            wr.setLineWidth(lineWidth);
+            Interpreter interp = new Interpreter(template.groupThatCreatedThisInstance, culture);
+            interp.Execute(wr, template); // render and track events
+            TemplateVisualizer visualizer = new TemplateVisualizer(errorManager, template, @out.ToString(), interp, interp.getExecutionTrace(), errors.Errors);
+            visualizer.Show();
+        }
+    }
+}

