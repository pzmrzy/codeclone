commit b923d2cc8ed44b1b5cc54f78348a6dcd81c7a58b
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sat Feb 26 22:04:06 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sat Feb 26 22:04:06 2011 -0800

(C# 3) Merge CL7780 (left recursion support round 2)

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7786]

diff --git a/Antlr3.Test/TestHeteroAST.cs b/Antlr3.Test/TestHeteroAST.cs
index 6188258..fdb911c 100644
--- a/Antlr3.Test/TestHeteroAST.cs
+++ b/Antlr3.Test/TestHeteroAST.cs
@@ -61,6 +61,20 @@ namespace AntlrUnitTests
}

[TestMethod]
+        public void TestTokenCommonTree()
+        {
+            string grammar =
+                "grammar T;\n" +
+                "options {output=AST;}\n" +
+                "a : ID<class=CommonTree> ;\n" +
+                "ID : 'a'..'z'+ ;\n" +
+                "WS : (' '|'\\n') {$channel=HIDDEN;} ;\n";
+            string found = execParser("T.g", grammar, "TParser", "TLexer",
+                        "a", "a", debug);
+            assertEquals("a\n", found);
+        }
+
+        [TestMethod]
public void TestTokenWithQualifiedType() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
diff --git a/Antlr3.Test/TestLeftRecursion.cs b/Antlr3.Test/TestLeftRecursion.cs
index 7e44782..3d15af3 100644
--- a/Antlr3.Test/TestLeftRecursion.cs
+++ b/Antlr3.Test/TestLeftRecursion.cs
@@ -303,7 +303,7 @@ namespace AntlrUnitTests
"    |   ('~'^|'!'^) e\n" +
"    |   e ('*'^|'/'^|'%'^) e\n" +
"    |   e ('+'^|'-'^) e\n" +
-                "    |   e ('<' '<' | '>' '>' '>' | '>' '>') e\n" +
+                "    |   e ('<'^ '<' | '>'^ '>' '>' | '>'^ '>') e\n" +
"    |   e ('<='^ | '>='^ | '>'^ | '<'^) e\n" +
"    |   e 'instanceof'^ e\n" +
"    |   e ('=='^ | '!='^) e\n" +
@@ -312,7 +312,7 @@ namespace AntlrUnitTests
"    |   e '|'^ e\n" +
"    |   e '&&'^ e\n" +
"    |   e '||'^ e\n" +
-                "//    |   e '?' e ':' e\n" +
+                "    |   e '?' e ':' e\n" +
"    |   e ('='<assoc=right>^\n" +
"          |'+='<assoc=right>^\n" +
"          |'-='<assoc=right>^\n" +
@@ -324,7 +324,6 @@ namespace AntlrUnitTests
"          |'>>='<assoc=right>^\n" +
"          |'>>>='<assoc=right>^\n" +
"          |'<<='<assoc=right>^\n" +
-                "          |'<<<='<assoc=right>^\n" +
"          |'%='<assoc=right>^) e\n" +
"    ;\n" +
"type: ID \n" +
@@ -355,6 +354,9 @@ namespace AntlrUnitTests
"a=b=c+d.e","(= a (= b (+ c (. d e))))",
"a|b&c",	"(| a (& b c))",
"(a|b)&c",	"(& (| a b) c)",
+                    "a > b",	"(> a b)",
+                    "a >> b",	"(> a b)",  // text is from one token
+                    "a < b",	"(< a b)",

"(T)x",							"(( T x)",
"new A().b",					"(. (new A () b)",
diff --git a/Antlr3/Codegen/CodeGenerator.cs b/Antlr3/Codegen/CodeGenerator.cs
index 8d1287b..5d9408e 100644
--- a/Antlr3/Codegen/CodeGenerator.cs
+++ b/Antlr3/Codegen/CodeGenerator.cs
@@ -116,7 +116,7 @@ namespace Antlr3.Codegen

public static readonly int DefaultMaxSwitchCaseLabels = 300;
public static readonly int DefaultMinSwitchAlts = 3;
-        public static readonly int DefaultMaxAcyclicDfaStatesInline = 50;
+        public static readonly int DefaultMaxAcyclicDfaStatesInline = 60;

public static int MaxSwitchCaseLabels = DefaultMaxSwitchCaseLabels;
public static int MinSwitchAlts = DefaultMinSwitchAlts;
diff --git a/Antlr3/Grammars/ANTLRTreePrinter.g3 b/Antlr3/Grammars/ANTLRTreePrinter.g3
index 1a988c4..24eaaaa 100644
--- a/Antlr3/Grammars/ANTLRTreePrinter.g3
+++ b/Antlr3/Grammars/ANTLRTreePrinter.g3
@@ -65,7 +65,8 @@ toString[Grammar g, bool showActions] returns [string s=null]
|	alternative
|	element
|	single_rewrite
-		|	EOR {s="EOR";}
+		|	rewrite
+		|	EOR //{s="EOR";}
)
{return Normalize(buf.ToString());}
;
@@ -258,7 +259,7 @@ int numAlts = CountAltsForBlock($start);
;

alternative
-	:	^( ALT (element)+ EOA )
+	:	^( ALT element* EOA )
;

exceptionGroup
@@ -274,6 +275,11 @@ finallyClause
:	^('finally' ACTION)
;

+rewrite
+	:	^(REWRITES single_rewrite+)
+	|
+	;
+
single_rewrite
:	^(	REWRITE {@out(" ->");}
(	SEMPRED {@out(" {"+$SEMPRED.text+"}?");}
@@ -305,14 +311,9 @@ rewrite_template
)
;

-rewrite
-	:	^(REWRITES (single_rewrite)*)
-	|
-	;
-
element
-	:	^(ROOT element)
-	|	^(BANG element)
+	:	^(ROOT element) {@out("^");}
+	|	^(BANG element) {@out("!");}
|	atom
|	^(NOT {@out("~");} element)
|	^(RANGE atom {@out("..");} atom)
diff --git a/Antlr3/Grammars/LeftRecursiveRuleWalker.g3 b/Antlr3/Grammars/LeftRecursiveRuleWalker.g3
index 6815451..42ab31d 100644
--- a/Antlr3/Grammars/LeftRecursiveRuleWalker.g3
+++ b/Antlr3/Grammars/LeftRecursiveRuleWalker.g3
@@ -149,20 +149,20 @@ if (rew.Type != REWRITES)
;

binary
-	:	^( ALT recurseNoLabel op=token recurse EOA ) {SetTokenPrec($op.t, outerAlt);}
+	:	^( ALT (^(BACKTRACK_SEMPRED .*))? recurseNoLabel op=token recurse EOA ) {SetTokenPrec($op.t, outerAlt);}
;

binaryMultipleOp
-	:	^( ALT recurseNoLabel ^( BLOCK ( ^( ALT op=token EOA {SetTokenPrec($op.t, outerAlt);} ) )+ EOB ) recurse EOA )
+	:	^( ALT (^(BACKTRACK_SEMPRED .*))? recurseNoLabel ^( BLOCK ( ^( ALT op=token EOA {SetTokenPrec($op.t, outerAlt);} ) )+ EOB ) recurse EOA )
;

ternary
-	:	^( ALT recurseNoLabel op=token recurse token recurse EOA ) {SetTokenPrec($op.t, outerAlt);}
+	:	^( ALT (^(BACKTRACK_SEMPRED .*))? recurseNoLabel op=token recurse token recurse EOA ) {SetTokenPrec($op.t, outerAlt);}
;

-prefix : ^( ALT {SetTokenPrec((GrammarAST)input.LT(2), outerAlt);} ({!((CommonTree)input.LT(1)).Text.Equals(ruleName)}? element)+ recurse EOA ) ;
+prefix : ^( ALT (^(BACKTRACK_SEMPRED .*))? {SetTokenPrec((GrammarAST)input.LT(1), outerAlt);} ({!((CommonTree)input.LT(1)).Text.Equals(ruleName)}? element)+ recurse EOA ) ;

-suffix : ^( ALT recurseNoLabel {SetTokenPrec((GrammarAST)input.LT(1), outerAlt);} element+  EOA ) ;
+suffix : ^( ALT (^(BACKTRACK_SEMPRED .*))? recurseNoLabel {SetTokenPrec((GrammarAST)input.LT(1), outerAlt);} element+  EOA ) ;

recurse
:	^(ASSIGN ID recurseNoLabel)
diff --git a/Antlr3/Tool/LeftRecursiveRuleAnalyzer.cs b/Antlr3/Tool/LeftRecursiveRuleAnalyzer.cs
index bc67283..2f67f3e 100644
--- a/Antlr3/Tool/LeftRecursiveRuleAnalyzer.cs
+++ b/Antlr3/Tool/LeftRecursiveRuleAnalyzer.cs
@@ -36,13 +36,15 @@ namespace Antlr3.Tool
using Antlr.Runtime.JavaExtensions;
using Antlr.Runtime.Tree;
using Antlr3.Codegen;
+    using Antlr3.Extensions;
using Antlr3.Grammars;
using Antlr3.ST;
using AngleBracketTemplateLexer = Antlr3.ST.Language.AngleBracketTemplateLexer;
using Console = System.Console;
+    using Exception = System.Exception;
+    using IStringTemplateGroupLoader = Antlr3.ST.IStringTemplateGroupLoader;
using StringBuilder = System.Text.StringBuilder;
using StringTemplateGroup = Antlr3.ST.StringTemplateGroup;
-    using StringTemplateGroupLoader = Antlr3.ST.IStringTemplateGroupLoader;

[System.CLSCompliant(false)]
public class LeftRecursiveRuleAnalyzer : LeftRecursiveRuleWalker
@@ -63,8 +65,11 @@ namespace Antlr3.Tool
public List<string> prefixAlts = new List<string>();
public List<string> otherAlts = new List<string>();

-        public StringTemplateGroup recRuleTemplates;
+        private static readonly SortedList<string, StringTemplateGroup> recRuleTemplatesCache =
+            new SortedList<string, StringTemplateGroup>();
+
public string language;
+        private StringTemplateGroup recRuleTemplates;

public IDictionary<int, ASSOC> altAssociativity = new Dictionary<int, ASSOC>();

@@ -76,23 +81,33 @@ namespace Antlr3.Tool
language = (string)g.GetOption("language");
generator = new CodeGenerator(g.tool, g, language);
generator.LoadTemplates(language);
-            LoadPrecRuleTemplates();
+            recRuleTemplates = LoadPrecRuleTemplates(g.Tool);
}

-        public void LoadPrecRuleTemplates()
+        private static StringTemplateGroup LoadPrecRuleTemplates(AntlrTool tool)
{
-            string templateDirs = g.Tool.TemplatesDirectory;
-            //+":" + Path.Combine(g.Tool.TemplatesDirectory);
-            StringTemplateGroupLoader loader = new CommonGroupLoader(templateDirs, ErrorManager.GetStringTemplateErrorListener());
-            StringTemplateGroup.RegisterGroupLoader(loader);
-            StringTemplateGroup.RegisterDefaultLexer(typeof(AngleBracketTemplateLexer));
-
-            recRuleTemplates = StringTemplateGroup.LoadGroup("LeftRecursiveRules");
-            if (recRuleTemplates == null)
+            string templateDirs = tool.TemplatesDirectory;
+            StringTemplateGroup group;
+            if (!recRuleTemplatesCache.TryGetValue(templateDirs, out group))
{
-                ErrorManager.Error(ErrorManager.MSG_MISSING_CODE_GEN_TEMPLATES, "PrecRules");
-                return;
+                //+":" + Path.Combine(g.Tool.TemplatesDirectory);
+                IStringTemplateGroupLoader loader = new CommonGroupLoader(templateDirs, ErrorManager.GetStringTemplateErrorListener());
+                StringTemplateGroup.RegisterGroupLoader(loader);
+                StringTemplateGroup.RegisterDefaultLexer(typeof(AngleBracketTemplateLexer));
+
+                group = StringTemplateGroup.LoadGroup("LeftRecursiveRules");
+                if (group != null)
+                {
+                    recRuleTemplatesCache[templateDirs] = group;
+                }
+                else
+                {
+                    ErrorManager.Error(ErrorManager.MSG_MISSING_CODE_GEN_TEMPLATES, "PrecRules");
+                    return null;
+                }
}
+
+            return group;
}

public override void SetTokenPrec(GrammarAST t, int alt)
@@ -137,6 +152,7 @@ namespace Antlr3.Tool
altTree = GrammarAST.DupTree(altTree);
rewriteTree = GrammarAST.DupTree(rewriteTree);

+            StripSynPred(altTree);
StripLeftRecursion(altTree);

// rewrite e to be e_[rec_arg]
@@ -163,6 +179,7 @@ namespace Antlr3.Tool
altTree = GrammarAST.DupTree(altTree);
rewriteTree = GrammarAST.DupTree(rewriteTree);

+            StripSynPred(altTree);
StripLeftRecursion(altTree);

int nextPrec = NextPrecedence(alt);
@@ -187,6 +204,8 @@ namespace Antlr3.Tool
altTree = GrammarAST.DupTree(altTree);
rewriteTree = GrammarAST.DupTree(rewriteTree);

+            StripSynPred(altTree);
+
int nextPrec = Precedence(alt);
// rewrite e to be e_[rec_arg]
StringTemplate refST = recRuleTemplates.GetInstanceOf("recRuleRef");
@@ -210,6 +229,7 @@ namespace Antlr3.Tool
{
altTree = GrammarAST.DupTree(altTree);
rewriteTree = GrammarAST.DupTree(rewriteTree);
+            StripSynPred(altTree);
StripLeftRecursion(altTree);
StringTemplate nameST = recRuleTemplates.GetInstanceOf("recRuleName");
nameST.SetAttribute("ruleName", ruleName);
@@ -225,6 +245,7 @@ namespace Antlr3.Tool
{
altTree = GrammarAST.DupTree(altTree);
rewriteTree = GrammarAST.DupTree(rewriteTree);
+            StripSynPred(altTree);
StripLeftRecursion(altTree);
string altText = Text(altTree);

@@ -318,17 +339,28 @@ namespace Antlr3.Tool
return t;
}

-        public void StripLeftRecursion(GrammarAST t)
+        public void StripSynPred(GrammarAST altAST)
{
-            GrammarAST rref = (GrammarAST)t.GetChild(0);
-            if (rref.Type == ANTLRParser.RULE_REF)
+            GrammarAST t = (GrammarAST)altAST.GetChild(0);
+            if (t.Type == ANTLRParser.BACKTRACK_SEMPRED ||
+                 t.Type == ANTLRParser.SYNPRED ||
+                 t.Type == ANTLRParser.SYN_SEMPRED)
+            {
+                altAST.DeleteChild(0);
+            }
+        }
+
+        public void StripLeftRecursion(GrammarAST altAST)
+        {
+            GrammarAST rref = (GrammarAST)altAST.GetChild(0);
+            if (rref.Type == ANTLRParser.RULE_REF && rref.Text.Equals(ruleName))
{
// remove rule ref
-                t.setFirstChild(t.GetChild(1));
+                altAST.DeleteChild(0);

// reset index so it prints properly
-                GrammarAST newFirstChild = (GrammarAST)t.GetChild(0);
-                t.TokenStartIndex = newFirstChild.TokenStartIndex;
+                GrammarAST newFirstChild = (GrammarAST)altAST.GetChild(0);
+                altAST.TokenStartIndex = newFirstChild.TokenStartIndex;
}
}

@@ -337,7 +369,20 @@ namespace Antlr3.Tool
if (t == null)
return null;

-            return ToOriginalString(g.tokenBuffer, t.TokenStartIndex, t.TokenStopIndex);
+            try
+            {
+                ITreeNodeStream input = new CommonTreeNodeStream(new ANTLRParser.grammar_Adaptor(null), t);
+                ANTLRTreePrinter printer = new ANTLRTreePrinter(input);
+                return printer.toString(grammar, true);
+            }
+            catch (Exception e)
+            {
+                if (e.IsCritical())
+                    throw;
+
+                ErrorManager.Error(ErrorManager.MSG_BAD_AST_STRUCTURE, e);
+                return null;
+            }
}

public int Precedence(int alt)
diff --git a/bin/Bootstrap/Antlr3.Runtime.Debug.dll b/bin/Bootstrap/Antlr3.Runtime.Debug.dll
index 67eed91..ca2293f 100644
Binary files a/bin/Bootstrap/Antlr3.Runtime.Debug.dll and b/bin/Bootstrap/Antlr3.Runtime.Debug.dll differ
diff --git a/bin/Bootstrap/Antlr3.Runtime.dll b/bin/Bootstrap/Antlr3.Runtime.dll
index 55f9671..0f60bd5 100644
Binary files a/bin/Bootstrap/Antlr3.Runtime.dll and b/bin/Bootstrap/Antlr3.Runtime.dll differ
diff --git a/bin/Bootstrap/Antlr3.StringTemplate.dll b/bin/Bootstrap/Antlr3.StringTemplate.dll
index ced3302..13e018e 100644
Binary files a/bin/Bootstrap/Antlr3.StringTemplate.dll and b/bin/Bootstrap/Antlr3.StringTemplate.dll differ
diff --git a/bin/Bootstrap/Antlr3.exe b/bin/Bootstrap/Antlr3.exe
index fab1275..c229b97 100755
Binary files a/bin/Bootstrap/Antlr3.exe and b/bin/Bootstrap/Antlr3.exe differ
diff --git a/bin/Bootstrap/AntlrBuildTask.dll b/bin/Bootstrap/AntlrBuildTask.dll
index 3a8f7dc..ef1a921 100644
Binary files a/bin/Bootstrap/AntlrBuildTask.dll and b/bin/Bootstrap/AntlrBuildTask.dll differ
diff --git a/bin/Bootstrap/Codegen/Templates/LeftRecursiveRules.stg b/bin/Bootstrap/Codegen/Templates/LeftRecursiveRules.stg
index 07c226e..6879530 100644
--- a/bin/Bootstrap/Codegen/Templates/LeftRecursiveRules.stg
+++ b/bin/Bootstrap/Codegen/Templates/LeftRecursiveRules.stg
@@ -39,8 +39,9 @@ recRuleName(ruleName) ::= "<ruleName>_"
recRule(ruleName, argDef, argName, alts, setResultAction, buildAST) ::= <<
<recRuleName(...)>[<argDef>]
:   <ruleName>_primary <if(buildAST)>{<setResultAction>}<endif>
-        (
-          ( <alts; separator="\n        | ">
+        ( options {backtrack=false;}
+        : ( options {backtrack=false;}
+          : <alts; separator="\n        | ">
)
)*
;
diff --git a/bin/Bootstrap/Targets/Antlr3.Targets.CSharp3.dll b/bin/Bootstrap/Targets/Antlr3.Targets.CSharp3.dll
index 7b3e68d..001c774 100644
Binary files a/bin/Bootstrap/Targets/Antlr3.Targets.CSharp3.dll and b/bin/Bootstrap/Targets/Antlr3.Targets.CSharp3.dll differ

