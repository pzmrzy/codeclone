commit 7c84b741bc4bb2265e1c438deb921cd5145bcfc1
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Thu Apr 7 11:54:50 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Thu Apr 7 11:54:50 2011 -0800

(C# 3) Add a sample composite grammar to the project to make sure it always builds properly

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8098]

diff --git a/Antlr3.Runtime.Test/Antlr3.Runtime.Test.csproj b/Antlr3.Runtime.Test/Antlr3.Runtime.Test.csproj
index 678a3d9..11206dc 100644
--- a/Antlr3.Runtime.Test/Antlr3.Runtime.Test.csproj
+++ b/Antlr3.Runtime.Test/Antlr3.Runtime.Test.csproj
@@ -44,6 +44,7 @@
<Reference Include="vjslib" />
</ItemGroup>
<ItemGroup>
+    <Compile Include="Composition\Program.cs" />
<Compile Include="Properties\AssemblyInfo.cs" />
</ItemGroup>
<ItemGroup>
@@ -169,6 +170,11 @@
<Antlr3 Include="SemanticPredicateReduction.g3">
<Generator>MSBuild:Compile</Generator>
</Antlr3>
+    <Antlr3 Include="Composition\Reduce.g3" />
+    <Antlr3 Include="Composition\Simplify.g3" />
+    <Antlr3 Include="Composition\VecMath.g3" />
+    <None Include="Composition\VecMath_Lexer.g3" />
+    <None Include="Composition\VecMath_Parser.g3" />
<None Include="TestExpressionFeatures.g3">
<Generator>MSBuild:Compile</Generator>
</None>
diff --git a/Antlr3.Runtime.Test/Composition/Program.cs b/Antlr3.Runtime.Test/Composition/Program.cs
new file mode 100644
index 0000000..ce89dc2
--- /dev/null
+++ b/Antlr3.Runtime.Test/Composition/Program.cs
@@ -0,0 +1,54 @@
+﻿namespace Antlr3.Runtime.Test.Composition
+{
+    using System;
+    using Antlr.Runtime;
+    using Antlr.Runtime.Tree;
+
+    internal class Program
+    {
+        private static void _Main(string[] args)
+        {
+            // input "x = 2*(3+3)"
+
+            ICharStream input;
+            if (args.Length > 0)
+            {
+                if (args[0].Equals("-i"))
+                {
+                    if (args.Length > 1)
+                    {
+                        input = new ANTLRFileStream(args[1]);
+                    }
+                    else
+                    {
+                        throw new Exception("No input file specified.");
+                    }
+                }
+                else
+                {
+                    input = new ANTLRStringStream(args[0]);
+                }
+            }
+            else
+            {
+                input = new ANTLRInputStream(Console.OpenStandardInput());
+            }
+
+            var lex = new VecMathLexer(input);
+            var tokens = new CommonTokenStream(lex);
+            var g = new VecMathParser(tokens);
+            VecMath_VecMath_Parser.prog_return r = g.prog();
+            CommonTree t = r.Tree;
+            Console.WriteLine("Original tree:   " + t.ToStringTree());
+
+            var simplify = new Simplify(new CommonTreeNodeStream(t));
+            t = (CommonTree)simplify.Downup(t);
+
+            var reduce = new Reduce(new CommonTreeNodeStream(t));
+            t = (CommonTree)reduce.Downup(t);
+
+            Console.WriteLine("Simplified tree: " + t.ToStringTree());
+            Console.ReadKey();
+        }
+    }
+}
diff --git a/Antlr3.Runtime.Test/Composition/Reduce.g3 b/Antlr3.Runtime.Test/Composition/Reduce.g3
new file mode 100644
index 0000000..0ed570b
--- /dev/null
+++ b/Antlr3.Runtime.Test/Composition/Reduce.g3
@@ -0,0 +1,26 @@
+﻿tree grammar Reduce;
+
+options
+{
+    tokenVocab=VecMath;
+    ASTLabelType=CommonTree;
+    output=AST;
+    filter=true;
+    language=CSharp3;
+}
+
+
+@members
+{
+   //public override IAstRuleReturnScope Topdown() { return topdown(); }
+   public override IAstRuleReturnScope Bottomup() { return bottomup(); }
+}
+
+
+/** Rewrite: x+x to be 2*x, 2*x to be x<<1, x<<n<<m to be x<<(n+m) */
+bottomup
+    :  ^(PLUS i=INT j=INT {$i.int==$j.int}?) -> ^(MULT["*"] INT["2"] $j)
+    |  ^(MULT x=INT {$x.int==2}? y=.)        -> ^(SHIFT["<<"] $y INT["1"])
+    |  ^(SHIFT ^(SHIFT e=. n=INT) m=INT)
+       -> ^(SHIFT["<<"] $e INT[($n.int+$m.int).ToString()])
+    ;
diff --git a/Antlr3.Runtime.Test/Composition/Simplify.g3 b/Antlr3.Runtime.Test/Composition/Simplify.g3
new file mode 100644
index 0000000..fd1fded
--- /dev/null
+++ b/Antlr3.Runtime.Test/Composition/Simplify.g3
@@ -0,0 +1,25 @@
+tree grammar Simplify;
+
+options {
+    tokenVocab=VecMath;
+    ASTLabelType=CommonTree;
+    output=AST;
+    language=CSharp3;
+    filter=true;
+    //rewrite=true;
+}
+
+@members
+{
+   public override IAstRuleReturnScope Topdown() { return topdown(); }
+   public override IAstRuleReturnScope Bottomup() { return bottomup(); }
+}
+
+
+topdown
+    :   ^( MULT INT ^(VEC (e+=.)+) ) -> ^(VEC ^(MULT INT $e)+)
+    ;
+
+bottomup
+    :  ^(MULT a=. b=INT {$b.int==0}?) -> $b // x*0 -> 0
+    ;
diff --git a/Antlr3.Runtime.Test/Composition/VecMath.g3 b/Antlr3.Runtime.Test/Composition/VecMath.g3
new file mode 100644
index 0000000..f61a7f8
--- /dev/null
+++ b/Antlr3.Runtime.Test/Composition/VecMath.g3
@@ -0,0 +1,22 @@
+grammar VecMath;
+
+options
+{
+   ASTLabelType=CommonTree;
+   output=AST;
+   language=CSharp3;
+}
+
+import VecMath_Lexer, VecMath_Parser;
+
+@lexer::namespace{Antlr3.Runtime.Test.Composition}
+@parser::namespace{Antlr3.Runtime.Test.Composition}
+
+public
+main
+   : prog
+   ;
+
+dummy
+   : 'DUMMY' // 1. If the parser or the composite grammar does not contain a token, no lexer is generated.
+   ;
diff --git a/Antlr3.Runtime.Test/Composition/VecMath_Lexer.g3 b/Antlr3.Runtime.Test/Composition/VecMath_Lexer.g3
new file mode 100644
index 0000000..fde3390
--- /dev/null
+++ b/Antlr3.Runtime.Test/Composition/VecMath_Lexer.g3
@@ -0,0 +1,17 @@
+lexer grammar VecMath_Lexer;
+
+
+PRINT        : 'print';
+ID           : 'a'..'z'+ ;
+INT          : '0'..'9'+ ;
+WS           : (' '|'\r'|'\n')+ {Skip();} ;
+PLUS         : '+';
+MINUS        : '-';
+MULT         : '*';
+EQUAL        : '=';
+DOT          : '.';
+OPEN_BRACE   : '(';
+OPEN_SQUARE  : '[';
+CLOSE_BRACE  : ')';
+CLOSE_SQUARE : ']';
+COMMA        : ',';
\ No newline at end of file
diff --git a/Antlr3.Runtime.Test/Composition/VecMath_Parser.g3 b/Antlr3.Runtime.Test/Composition/VecMath_Parser.g3
new file mode 100644
index 0000000..406ec13
--- /dev/null
+++ b/Antlr3.Runtime.Test/Composition/VecMath_Parser.g3
@@ -0,0 +1,35 @@
+parser grammar VecMath_Parser;
+
+options {
+    output=AST;
+}
+
+tokens {
+    SHIFT;
+    VEC;
+}
+
+public
+prog
+   : stat+ ;
+
+stat
+   : ID EQUAL expr -> ^( EQUAL ID expr )
+   | PRINT^ expr
+   ;
+
+expr
+   : multExpr ( PLUS^ multExpr )*
+   ;
+
+multExpr
+   : primary ( ( MULT^ | DOT^ ) primary )*
+   ;
+
+primary
+   :   INT
+   |   ID
+   |   OPEN_SQUARE expr ( COMMA expr )* CLOSE_SQUARE -> ^( VEC expr+ )
+   |   OPEN_BRACE expr CLOSE_BRACE             -> expr
+   ;
+

