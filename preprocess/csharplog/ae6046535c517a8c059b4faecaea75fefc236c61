commit ae6046535c517a8c059b4faecaea75fefc236c61
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sun May 15 13:25:41 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sun May 15 13:25:41 2011 -0800

(C# 3) Use Path.Combine

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8508]

diff --git a/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs b/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
index fb460eb..9ff48e7 100644
--- a/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
+++ b/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
@@ -34,6 +34,7 @@ namespace Antlr4.Test.StringTemplate
{
using Antlr4.StringTemplate;
using Microsoft.VisualStudio.TestTools.UnitTesting;
+    using Path = System.IO.Path;

[TestClass]
public class TestDollarDelimiters : BaseTest
@@ -92,7 +93,7 @@ namespace Antlr4.Test.StringTemplate
"stat(name,value=\"99\") ::= \"x=$value$; // $name$\"" + newline
;
writeFile(tmpdir, "group.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/group.stg", '$', '$');
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "group.stg"), '$', '$');
Template b = group.GetInstanceOf("method");
b.Add("name", "foo");
string expecting = "x=99; // foo";
diff --git a/Antlr4.Test.StringTemplate/TestFunctions.cs b/Antlr4.Test.StringTemplate/TestFunctions.cs
index e5afcac..5c5fa09 100644
--- a/Antlr4.Test.StringTemplate/TestFunctions.cs
+++ b/Antlr4.Test.StringTemplate/TestFunctions.cs
@@ -32,9 +32,10 @@

namespace Antlr4.Test.StringTemplate
{
+    using System.Collections.Generic;
using Antlr4.StringTemplate;
using Microsoft.VisualStudio.TestTools.UnitTesting;
-    using System.Collections.Generic;
+    using Path = System.IO.Path;

[TestClass]
public class TestFunctions : BaseTest
@@ -133,7 +134,7 @@ namespace Antlr4.Test.StringTemplate
"b(x) ::= \"<x>, <x>\"" + newline
;
writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
Template e = group.GetInstanceOf("a");
List<string> names = new List<string>();
names.Add("Ter");
@@ -227,7 +228,7 @@ namespace Antlr4.Test.StringTemplate
"b(x) ::= \"<x>, <x>\"" + newline
;
writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
Template e = group.GetInstanceOf("a");
List<string> mine = new List<string>();
mine.Add("Ter");
diff --git a/Antlr4.Test.StringTemplate/TestImports.cs b/Antlr4.Test.StringTemplate/TestImports.cs
index 3fb2ae2..4aed587 100644
--- a/Antlr4.Test.StringTemplate/TestImports.cs
+++ b/Antlr4.Test.StringTemplate/TestImports.cs
@@ -32,9 +32,9 @@

namespace Antlr4.Test.StringTemplate
{
+    using System.Runtime.CompilerServices;
using Antlr4.StringTemplate;
using Microsoft.VisualStudio.TestTools.UnitTesting;
-    using System.Runtime.CompilerServices;
using Path = System.IO.Path;

[TestClass]
@@ -70,8 +70,8 @@ namespace Antlr4.Test.StringTemplate
[TestMethod]
public void TestImportStatementWithDir()
{
-            string dir1 = tmpdir + "/dir1";
-            string dir2 = tmpdir + "/dir2";
+            string dir1 = Path.Combine(tmpdir, "dir1");
+            string dir2 = Path.Combine(tmpdir, "dir2");
string a =
"import \"" + dir2 + "\"\n" +
"a() ::= <<dir1 a>>\n";
@@ -82,7 +82,7 @@ namespace Antlr4.Test.StringTemplate
writeFile(dir2, "a.st", a);
writeFile(dir2, "b.st", b);

-            TemplateGroup group = new TemplateGroupFile(dir1 + "/a.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(dir1, "a.stg"));
Template st = group.GetInstanceOf("b"); // visible only if import worked
string expected = "dir2 b";
string result = st.Render();
@@ -103,7 +103,7 @@ namespace Antlr4.Test.StringTemplate
"c() ::= \"g2 c\"\n";
writeFile(dir, "group2.stg", groupFile);

-            TemplateGroup group1 = new TemplateGroupFile(dir + "/group1.stg");
+            TemplateGroup group1 = new TemplateGroupFile(Path.Combine(dir, "group1.stg"));
Template st = group1.GetInstanceOf("c"); // should see c()
string expected = "g2 c";
string result = st.Render();
@@ -120,10 +120,10 @@ namespace Antlr4.Test.StringTemplate
string groupFile =
"b() ::= \"group file b\"\n" +
"c() ::= \"group file c\"\n";
-            writeFile(dir, "y/group.stg", groupFile);
+            writeFile(dir, Path.Combine("y", "group.stg"), groupFile);

-            TemplateGroup group1 = new TemplateGroupDirectory(dir + "/x");
-            TemplateGroup group2 = new TemplateGroupFile(dir + "/y/group.stg");
+            TemplateGroup group1 = new TemplateGroupDirectory(Path.Combine(dir, "x"));
+            TemplateGroup group2 = new TemplateGroupFile(Path.Combine(dir, "y", "group.stg"));
group1.ImportTemplates(group2);
Template st = group1.GetInstanceOf("a");
st.impl.Dump();
@@ -139,15 +139,15 @@ namespace Antlr4.Test.StringTemplate
string groupFile =
"a() ::= \"g1 a\"\n" +
"b() ::= \"<c()>\"\n";
-            writeFile(dir, "x/group.stg", groupFile);
+            writeFile(dir, Path.Combine("x", "group.stg"), groupFile);

groupFile =
"b() ::= \"g2 b\"\n" +
"c() ::= \"g2 c\"\n";
-            writeFile(dir, "y/group.stg", groupFile);
+            writeFile(dir, Path.Combine("y", "group.stg"), groupFile);

-            TemplateGroup group1 = new TemplateGroupFile(dir + "/x/group.stg");
-            TemplateGroup group2 = new TemplateGroupFile(dir + "/y/group.stg");
+            TemplateGroup group1 = new TemplateGroupFile(Path.Combine(dir, "x", "group.stg"));
+            TemplateGroup group2 = new TemplateGroupFile(Path.Combine(dir, "y", "group.stg"));
group1.ImportTemplates(group2);
Template st = group1.GetInstanceOf("b");
string expected = "g2 c";
@@ -162,11 +162,11 @@ namespace Antlr4.Test.StringTemplate
string dir = tmpdir;
string a = "a() ::= << <subdir/b()> >>\n";
string b = "b() ::= <<x's subdir/b>>\n";
-            writeFile(dir, "x/subdir/a.st", a);
-            writeFile(dir, "y/subdir/b.st", b);
+            writeFile(dir, Path.Combine("x", "subdir", "a.st"), a);
+            writeFile(dir, Path.Combine("y", "subdir", "b.st"), b);

-            TemplateGroup group1 = new TemplateGroupDirectory(dir + "/x");
-            TemplateGroup group2 = new TemplateGroupDirectory(dir + "/y");
+            TemplateGroup group1 = new TemplateGroupDirectory(Path.Combine(dir, "x"));
+            TemplateGroup group2 = new TemplateGroupDirectory(Path.Combine(dir, "y"));
group1.ImportTemplates(group2);
Template st = group1.GetInstanceOf("subdir/a");
string expected = " x's subdir/b ";
@@ -180,15 +180,15 @@ namespace Antlr4.Test.StringTemplate
// /randomdir/x/subdir/a and /randomdir/y/subdir.stg which has a and b
string dir = tmpdir;
string a = "a() ::= << <subdir/b()> >>\n"; // get b imported from subdir.stg
-            writeFile(dir, "x/subdir/a.st", a);
+            writeFile(dir, Path.Combine("x", "subdir", "a.st"), a);

string groupFile =
"a() ::= \"group file: a\"\n" +
"b() ::= \"group file: b\"\n";
-            writeFile(dir, "y/subdir.stg", groupFile);
+            writeFile(dir, Path.Combine("y", "subdir.stg"), groupFile);

-            TemplateGroup group1 = new TemplateGroupDirectory(dir + "/x");
-            TemplateGroup group2 = new TemplateGroupDirectory(dir + "/y");
+            TemplateGroup group1 = new TemplateGroupDirectory(Path.Combine(dir, "x"));
+            TemplateGroup group2 = new TemplateGroupDirectory(Path.Combine(dir, "y"));
group1.ImportTemplates(group2);
Template st = group1.GetInstanceOf("subdir/a");
string expected = " group file: b ";
diff --git a/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs b/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
index 423ca22..878600c 100644
--- a/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
+++ b/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
@@ -33,9 +33,10 @@
namespace Antlr4.Test.StringTemplate
{
using Antlr4.StringTemplate;
-    using Microsoft.VisualStudio.TestTools.UnitTesting;
using Antlr4.StringTemplate.Misc;
+    using Microsoft.VisualStudio.TestTools.UnitTesting;
using Environment = System.Environment;
+    using Path = System.IO.Path;

[TestClass]
public class TestInterptimeErrors : BaseTest
@@ -71,7 +72,7 @@ namespace Antlr4.Test.StringTemplate
"t() ::= \"<foo()>\"" + Environment.NewLine;

writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.Listener = errors;
Template st = group.GetInstanceOf("t");
st.Render();
@@ -89,13 +90,13 @@ namespace Antlr4.Test.StringTemplate
"t() ::= \"<super.t()>\"" + Environment.NewLine;

writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.Listener = errors;
string templates2 =
"u() ::= \"blech\"" + Environment.NewLine;

writeFile(tmpdir, "t2.stg", templates2);
-            TemplateGroup group2 = new TemplateGroupFile(tmpdir + "/" + "t2.stg");
+            TemplateGroup group2 = new TemplateGroupFile(Path.Combine(tmpdir, "t2.stg"));
group.ImportTemplates(group2);
Template st = group.GetInstanceOf("t");
st.Render();
@@ -113,7 +114,7 @@ namespace Antlr4.Test.StringTemplate
"t(u) ::= \"<u.x>\"" + Environment.NewLine;

writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.Listener = errors;
Template st = group.GetInstanceOf("t");
st.Add("u", new User(32, "parrt"));
@@ -132,7 +133,7 @@ namespace Antlr4.Test.StringTemplate
"t(u) ::= \"<u.name>\"" + Environment.NewLine;

writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.Listener = errors;
Template st = group.GetInstanceOf("t");
st.Add("u", new UserHiddenName("parrt"));
@@ -151,7 +152,7 @@ namespace Antlr4.Test.StringTemplate
"t(u) ::= \"<u.name>\"" + Environment.NewLine;

writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.Listener = errors;
Template st = group.GetInstanceOf("t");
st.Add("u", new UserHiddenNameField("parrt"));
@@ -171,7 +172,7 @@ namespace Antlr4.Test.StringTemplate
"u(x,y) ::= \"<x>\"\n";

writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.Listener = errors;
Template st = group.GetInstanceOf("t");
st.Render();
@@ -190,7 +191,7 @@ namespace Antlr4.Test.StringTemplate
"u(x,y) ::= \"<x>\"\n";

writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.Listener = errors;
Template st = group.GetInstanceOf("t");
string expected = "9";
@@ -212,7 +213,7 @@ namespace Antlr4.Test.StringTemplate
"u() ::= \"<x>\"\n";

writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.Listener = errors;
Template st = group.GetInstanceOf("t");
st.Render();
diff --git a/Antlr4.Test.StringTemplate/TestLists.cs b/Antlr4.Test.StringTemplate/TestLists.cs
index 8ee97f6..715d9b7 100644
--- a/Antlr4.Test.StringTemplate/TestLists.cs
+++ b/Antlr4.Test.StringTemplate/TestLists.cs
@@ -34,6 +34,7 @@ namespace Antlr4.Test.StringTemplate
{
using Antlr4.StringTemplate;
using Microsoft.VisualStudio.TestTools.UnitTesting;
+    using Path = System.IO.Path;

[TestClass]
public class TestLists : BaseTest
@@ -206,7 +207,7 @@ namespace Antlr4.Test.StringTemplate
"foo(items) ::= \"<items:{a | *<a>*}>\"" + newline
;
writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/" + "t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
Template e = group.GetInstanceOf("test");
e.Add("names", "Ter");
e.Add("names", "Tom");
diff --git a/Antlr4.Test.StringTemplate/TestModelAdaptors.cs b/Antlr4.Test.StringTemplate/TestModelAdaptors.cs
index 96360d5..22b9a08 100644
--- a/Antlr4.Test.StringTemplate/TestModelAdaptors.cs
+++ b/Antlr4.Test.StringTemplate/TestModelAdaptors.cs
@@ -33,8 +33,9 @@
namespace Antlr4.Test.StringTemplate
{
using Antlr4.StringTemplate;
-    using Microsoft.VisualStudio.TestTools.UnitTesting;
using Antlr4.StringTemplate.Misc;
+    using Microsoft.VisualStudio.TestTools.UnitTesting;
+    using Path = System.IO.Path;

[TestClass]
public class TestModelAdaptors : BaseTest
@@ -90,7 +91,7 @@ namespace Antlr4.Test.StringTemplate
string templates =
"foo(x) ::= \"<x.id>: <x.name>\"\n";
writeFile(tmpdir, "foo.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/foo.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "foo.stg"));
group.RegisterModelAdaptor(typeof(User), new UserAdaptor());
Template st = group.GetInstanceOf("foo");
st.Add("x", new User(100, "parrt"));
@@ -106,7 +107,7 @@ namespace Antlr4.Test.StringTemplate
string templates =
"foo(x) ::= \"<x.qqq>\"\n";
writeFile(tmpdir, "foo.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/foo.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "foo.stg"));
group.Listener = errors;
group.RegisterModelAdaptor(typeof(User), new UserAdaptor());
Template st = group.GetInstanceOf("foo");
@@ -126,7 +127,7 @@ namespace Antlr4.Test.StringTemplate
string templates =
"foo(x) ::= \"<x.id>: <x.name>\"\n";
writeFile(tmpdir, "foo.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/foo.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "foo.stg"));
group.RegisterModelAdaptor(typeof(User), new UserAdaptor());
Template st = group.GetInstanceOf("foo");
st.Add("x", new SuperUser(100, "parrt")); // create subclass of User
@@ -141,7 +142,7 @@ namespace Antlr4.Test.StringTemplate
string templates =
"foo(x) ::= \"<x.id>: <x.name>\"\n";
writeFile(tmpdir, "foo.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/foo.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "foo.stg"));
group.RegisterModelAdaptor(typeof(User), new UserAdaptor());
group.GetModelAdaptor(typeof(User)); // get User, SuperUser into cache
group.GetModelAdaptor(typeof(SuperUser));
@@ -161,7 +162,7 @@ namespace Antlr4.Test.StringTemplate
string templates =
"foo(x) ::= \"<x.id>: <x.name>\"\n";
writeFile(tmpdir, "foo.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/foo.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "foo.stg"));
group.RegisterModelAdaptor(typeof(User), new UserAdaptor());
group.RegisterModelAdaptor(typeof(SuperUser), new UserAdaptorConst()); // most specific
Template st = group.GetInstanceOf("foo");
diff --git a/Antlr4.Test.StringTemplate/TestRenderers.cs b/Antlr4.Test.StringTemplate/TestRenderers.cs
index 8b52eba..9955530 100644
--- a/Antlr4.Test.StringTemplate/TestRenderers.cs
+++ b/Antlr4.Test.StringTemplate/TestRenderers.cs
@@ -32,10 +32,10 @@

namespace Antlr4.Test.StringTemplate
{
+    using System.Collections.Generic;
using Antlr4.StringTemplate;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CultureInfo = System.Globalization.CultureInfo;
-    using System.Collections.Generic;
using Path = System.IO.Path;

[TestClass]
@@ -48,7 +48,7 @@ namespace Antlr4.Test.StringTemplate
string templates =
"dateThing(created) ::= \"datetime: <created>\"\n";
writeFile(tmpdir, "t.stg", templates);
-            STGroup group = new STGroupFile(tmpdir + "/t.stg");
+            STGroup group = new STGroupFile(Path.Combine(tmpdir, "t.stg"));
group.registerRenderer(typeof(GregorianCalendar), new DateRenderer());
ST st = group.getInstanceOf("dateThing");
st.add("created", new GregorianCalendar(2005, 07 - 1, 05));
@@ -63,7 +63,7 @@ namespace Antlr4.Test.StringTemplate
string templates =
"dateThing(created) ::= << date: <created; format=\"yyyy.MM.dd\"> >>\n";
writeFile(tmpdir, "t.stg", templates);
-            STGroup group = new STGroupFile(tmpdir + "/t.stg");
+            STGroup group = new STGroupFile(Path.Combine(tmpdir, "t.stg"));
group.registerRenderer(typeof(GregorianCalendar), new DateRenderer());
ST st = group.getInstanceOf("dateThing");
st.add("created", new GregorianCalendar(2005, 07 - 1, 05));
@@ -78,7 +78,7 @@ namespace Antlr4.Test.StringTemplate
string templates =
"dateThing(created) ::= << datetime: <created; format=\"short\"> >>\n";
writeFile(tmpdir, "t.stg", templates);
-            STGroup group = new STGroupFile(tmpdir + "/t.stg");
+            STGroup group = new STGroupFile(Path.Combine(tmpdir, "t.stg"));
group.registerRenderer(typeof(GregorianCalendar), new DateRenderer());
ST st = group.getInstanceOf("dateThing");
st.add("created", new GregorianCalendar(2005, 07 - 1, 05));
@@ -93,7 +93,7 @@ namespace Antlr4.Test.StringTemplate
string templates =
"dateThing(created) ::= << datetime: <created; format=\"full\"> >>\n";
writeFile(tmpdir, "t.stg", templates);
-            STGroup group = new STGroupFile(tmpdir + "/t.stg");
+            STGroup group = new STGroupFile(Path.Combine(tmpdir, "t.stg"));
group.registerRenderer(typeof(GregorianCalendar), new DateRenderer());
ST st = group.getInstanceOf("dateThing");
st.add("created", new GregorianCalendar(2005, 07 - 1, 05));
@@ -109,7 +109,7 @@ namespace Antlr4.Test.StringTemplate
"dateThing(created) ::= << date: <created; format=\"date:medium\"> >>\n";

writeFile(tmpdir, "t.stg", templates);
-            STGroup group = new STGroupFile(tmpdir + "/t.stg");
+            STGroup group = new STGroupFile(Path.Combine(tmpdir, "t.stg"));
group.registerRenderer(typeof(GregorianCalendar), new DateRenderer());
ST st = group.getInstanceOf("dateThing");
st.add("created", new GregorianCalendar(2005, 07 - 1, 05));
@@ -125,7 +125,7 @@ namespace Antlr4.Test.StringTemplate
"dateThing(created) ::= << time: <created; format=\"time:medium\"> >>\n";

writeFile(tmpdir, "t.stg", templates);
-            STGroup group = new STGroupFile(tmpdir + "/t.stg");
+            STGroup group = new STGroupFile(Path.Combine(tmpdir, "t.stg"));
group.registerRenderer(typeof(GregorianCalendar), new DateRenderer());
ST st = group.getInstanceOf("dateThing");
st.add("created", new GregorianCalendar(2005, 07 - 1, 05));
@@ -211,7 +211,7 @@ namespace Antlr4.Test.StringTemplate
string templates = "foo(x,y) ::= << <x; format=\"{0}\"> <y; format=\"{0:0.000}\"> >>\n";

writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.RegisterRenderer(typeof(int), new NumberRenderer());
group.RegisterRenderer(typeof(double), new NumberRenderer());
Template st = group.GetInstanceOf("foo");
@@ -228,7 +228,7 @@ namespace Antlr4.Test.StringTemplate
string templates =
"numberThing(x,y,z) ::= \"numbers: <x>, <y>; <z>\"\n";
writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.RegisterRenderer(typeof(int), new NumberRenderer());
group.RegisterRenderer(typeof(double), new NumberRenderer());
Template st = group.GetInstanceOf("numberThing");
@@ -247,7 +247,7 @@ namespace Antlr4.Test.StringTemplate
string templates = "foo(x,y) ::= << <x; format=\"{0:#,#}\"> <y; format=\"{0:0.000}\"> >>\n";

writeFile(tmpdir, "t.stg", templates);
-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.RegisterRenderer(typeof(int), new NumberRenderer());
group.RegisterRenderer(typeof(double), new NumberRenderer());
Template st = group.GetInstanceOf("foo");
diff --git a/Antlr4.Test.StringTemplate/TestSubtemplates.cs b/Antlr4.Test.StringTemplate/TestSubtemplates.cs
index e182701..49659fd 100644
--- a/Antlr4.Test.StringTemplate/TestSubtemplates.cs
+++ b/Antlr4.Test.StringTemplate/TestSubtemplates.cs
@@ -210,7 +210,7 @@ namespace Antlr4.Test.StringTemplate
"value(x) ::= \"<if(!x)>n/a<else><x><endif>\"" + newline;
writeFile(tmpdir, "g.stg", templates);

-            TemplateGroup group = new TemplateGroupFile(tmpdir + "/g.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "g.stg"));
Template p = group.GetInstanceOf("page");
p.Add("names", "Ter");
p.Add("names", "Tom");

