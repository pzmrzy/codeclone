commit a239c2588fd4c1bbbe1156d304c565daaab5d79f
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Wed Feb 9 20:42:07 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Wed Feb 9 20:42:07 2011 -0800

(C# 3) Fix instruction strings

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7659]

diff --git a/Antlr4.StringTemplate/Compiler/Instruction.cs b/Antlr4.StringTemplate/Compiler/Instruction.cs
index b9f4e8d..3e1deb9 100644
--- a/Antlr4.StringTemplate/Compiler/Instruction.cs
+++ b/Antlr4.StringTemplate/Compiler/Instruction.cs
@@ -37,7 +37,7 @@
instructions[(int)Bytecode.INSTR_NEW_BOX_ARGS] = new Instruction("new_box_args", OperandType.String);
instructions[(int)Bytecode.INSTR_SUPER_NEW] = new Instruction("super_new", OperandType.String, OperandType.Int);
instructions[(int)Bytecode.INSTR_SUPER_NEW_BOX_ARGS] = new Instruction("super_new_box_args", OperandType.String);
-            instructions[(int)Bytecode.INSTR_WRITE] = new Instruction("Write");
+            instructions[(int)Bytecode.INSTR_WRITE] = new Instruction("write");
instructions[(int)Bytecode.INSTR_WRITE_OPT] = new Instruction("write_opt");
instructions[(int)Bytecode.INSTR_MAP] = new Instruction("map");
instructions[(int)Bytecode.INSTR_ROT_MAP] = new Instruction("rot_map", OperandType.Int);
@@ -47,7 +47,7 @@
instructions[(int)Bytecode.INSTR_OPTIONS] = new Instruction("options");
instructions[(int)Bytecode.INSTR_ARGS] = new Instruction("args");
instructions[(int)Bytecode.INSTR_LIST] = new Instruction("list");
-            instructions[(int)Bytecode.INSTR_ADD] = new Instruction("Add");
+            instructions[(int)Bytecode.INSTR_ADD] = new Instruction("add");
instructions[(int)Bytecode.INSTR_TOSTR] = new Instruction("tostr");
instructions[(int)Bytecode.INSTR_FIRST] = new Instruction("first");
instructions[(int)Bytecode.INSTR_LAST] = new Instruction("last");
diff --git a/Antlr4.Test.StringTemplate/TestCompiler.cs b/Antlr4.Test.StringTemplate/TestCompiler.cs
index 0eddb95..f1d37ea 100644
--- a/Antlr4.Test.StringTemplate/TestCompiler.cs
+++ b/Antlr4.Test.StringTemplate/TestCompiler.cs
@@ -54,9 +54,9 @@ namespace Antlr4.Test.StringTemplate
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, " +
-                "Write, " +
+                "write, " +
"load_attr 1, " +
-                "Write";
+                "write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name]";
@@ -70,7 +70,7 @@ namespace Antlr4.Test.StringTemplate
string template = "hi <foo()>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_str 0, Write, new 1 0, Write";
+                "load_str 0, write, new 1 0, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , foo]";
@@ -84,7 +84,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<super.foo()>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "super_new 0 0, Write";
+                "super_new 0 0, write";
code.Dump();
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
@@ -99,7 +99,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<super.foo(a,{b})>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_attr 0, new 1 0, super_new 2 2, Write";
+                "load_attr 0, new 1 0, super_new 2 2, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[a, _sub1, foo]";
@@ -113,7 +113,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<super.foo(x=a,y={b})>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "args, load_attr 0, store_arg 1, new 2 0, store_arg 3, super_new_box_args 4, Write";
+                "args, load_attr 0, store_arg 1, new 2 0, store_arg 3, super_new_box_args 4, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[a, x, _sub1, y, foo]";
@@ -127,7 +127,7 @@ namespace Antlr4.Test.StringTemplate
string template = "hi <foo(a,b)>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_str 0, Write, load_attr 1, load_attr 2, new 3 2, Write";
+                "load_str 0, write, load_attr 1, load_attr 2, new 3 2, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , a, b, foo]";
@@ -141,7 +141,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<({ a, b | <a><b>})>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "new 0 0, tostr, Write";
+                "new 0 0, tostr, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[_sub1]";
@@ -194,7 +194,7 @@ namespace Antlr4.Test.StringTemplate
string template = "hi <(foo)(a,b)>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_str 0, Write, load_attr 1, tostr, load_attr 2, load_attr 3, new_ind 2, Write";
+                "load_str 0, write, load_attr 1, tostr, load_attr 2, load_attr 3, new_ind 2, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , foo, a, b]";
@@ -208,7 +208,7 @@ namespace Antlr4.Test.StringTemplate
string template = "hi <a.b>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_str 0, Write, load_attr 1, load_prop 2, Write";
+                "load_str 0, write, load_attr 1, load_prop 2, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , a, b]";
@@ -222,8 +222,8 @@ namespace Antlr4.Test.StringTemplate
string template = "<u.id>: <u.name>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_attr 0, load_prop 1, Write, load_str 2, Write, " +
-                "load_attr 0, load_prop 3, Write";
+                "load_attr 0, load_prop 1, write, load_str 2, write, " +
+                "load_attr 0, load_prop 3, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[u, id, : , name]";
@@ -237,7 +237,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<name:bold()>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_attr 0, null, new 1 1, map, Write";
+                "load_attr 0, null, new 1 1, map, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, bold]";
@@ -266,7 +266,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<name:bold(x)>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_attr 0, null, load_attr 1, new 2 2, map, Write";
+                "load_attr 0, null, load_attr 1, new 2 2, map, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, x, bold]";
@@ -280,7 +280,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<name:(t)(x)>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_attr 0, load_attr 1, tostr, null, load_attr 2, new_ind 2, map, Write";
+                "load_attr 0, load_attr 1, tostr, null, load_attr 2, new_ind 2, map, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, t, x]";
@@ -294,7 +294,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<name:bold():italics()>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_attr 0, null, new 1 1, map, null, new 2 1, map, Write";
+                "load_attr 0, null, new 1 1, map, null, new 2 1, map, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, bold, italics]";
@@ -309,7 +309,7 @@ namespace Antlr4.Test.StringTemplate
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_attr 0, null, load_attr 1, new 2 2, map, " +
-                "null, load_attr 1, load_attr 3, new 4 3, map, Write";
+                "null, load_attr 1, load_attr 3, new 4 3, map, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, x, bold, y, italics]";
@@ -323,7 +323,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<name:bold(),italics()>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_attr 0, null, new 1 1, null, new 2 1, rot_map 2, Write";
+                "load_attr 0, null, new 1 1, null, new 2 1, rot_map 2, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, bold, italics]";
@@ -337,7 +337,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<name:bold(x),italics()>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_attr 0, null, load_attr 1, new 2 2, null, new 3 1, rot_map 2, Write";
+                "load_attr 0, null, load_attr 1, new 2 2, null, new 3 1, rot_map 2, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, x, bold, italics]";
@@ -351,7 +351,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<names,phones:bold()>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_attr 0, load_attr 1, null, null, new 2 2, zip_map 2, Write";
+                "load_attr 0, load_attr 1, null, null, new 2 2, zip_map 2, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[names, phones, bold]";
@@ -365,7 +365,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<names,phones:bold(x)>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_attr 0, load_attr 1, null, null, load_attr 2, new 3 3, zip_map 2, Write";
+                "load_attr 0, load_attr 1, null, null, load_attr 2, new 3 3, zip_map 2, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[names, phones, x, bold]";
@@ -379,7 +379,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<name:{n | <n>}>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_attr 0, null, new 1 1, map, Write";
+                "load_attr 0, null, new 1 1, map, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[name, _sub1]";
@@ -393,7 +393,7 @@ namespace Antlr4.Test.StringTemplate
string template = "<a,b:{x,y | <x><y>}>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_attr 0, load_attr 1, null, null, new 2 2, zip_map 2, Write";
+                "load_attr 0, load_attr 1, null, null, new 2 2, zip_map 2, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[a, b, _sub1]";
@@ -407,7 +407,7 @@ namespace Antlr4.Test.StringTemplate
string template = "go: <if(name)>hi, foo<endif>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_str 0, Write, load_attr 1, brf 14, load_str 2, Write";
+                "load_str 0, write, load_attr 1, brf 14, load_str 2, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo]";
@@ -422,14 +422,14 @@ namespace Antlr4.Test.StringTemplate
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, " +
-                "Write, " +
+                "write, " +
"load_attr 1, " +
"brf 17, " +
"load_str 2, " +
-                "Write, " +
+                "write, " +
"br 21, " +
"load_str 3, " +
-                "Write";
+                "write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo, bye]";
@@ -444,16 +444,16 @@ namespace Antlr4.Test.StringTemplate
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, " +
-                "Write, " +
+                "write, " +
"load_attr 1, " +
"brf 17, " +
"load_str 2, " +
-                "Write, " +
+                "write, " +
"br 27, " +
"load_attr 3, " +
"brf 27, " +
"load_str 4, " +
-                "Write";
+                "write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo, user, a user]";
@@ -468,19 +468,19 @@ namespace Antlr4.Test.StringTemplate
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, " +
-                "Write, " +
+                "write, " +
"load_attr 1, " +
"brf 17, " +
"load_str 2, " +
-                "Write, " +
+                "write, " +
"br 34, " +
"load_attr 3, " +
"brf 30, " +
"load_str 4, " +
-                "Write, " +
+                "write, " +
"br 34, " +
"load_str 5, " +
-                "Write";
+                "write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[go: , name, hi, foo, user, a user, bye]";
@@ -494,7 +494,7 @@ namespace Antlr4.Test.StringTemplate
string template = "hi <name; separator=\"x\">";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_str 0, Write, load_attr 1, options, load_str 2, store_option 3, write_opt";
+                "load_str 0, write, load_attr 1, options, load_str 2, store_option 3, write_opt";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, x]";
@@ -508,7 +508,7 @@ namespace Antlr4.Test.StringTemplate
string template = "hi <name; separator={, }>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
-                "load_str 0, Write, load_attr 1, options, new 2 0, store_option 3, write_opt";
+                "load_str 0, write, load_attr 1, options, new 2 0, store_option 3, write_opt";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[hi , name, _sub1]";
@@ -523,7 +523,7 @@ namespace Antlr4.Test.StringTemplate
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
string asmExpected =
"load_str 0, " +
-                "Write, " +
+                "write, " +
"load_attr 1, " +
"options, " +
"load_str 2, " +
@@ -546,7 +546,7 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<[]>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
-            string asmExpected = "list, Write";
+            string asmExpected = "list, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[]";
@@ -559,7 +559,7 @@ namespace Antlr4.Test.StringTemplate
{
string template = "<[a,b]>";
CompiledTemplate code = new TemplateCompiler(new TemplateGroup()).Compile(template);
-            string asmExpected = "list, load_attr 0, Add, load_attr 1, Add, Write";
+            string asmExpected = "list, load_attr 0, add, load_attr 1, add, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[a, b]";
@@ -574,7 +574,7 @@ namespace Antlr4.Test.StringTemplate
// compile as if in root dir and in template 'a'
CompiledTemplate code = new TemplateCompiler(new TemplateGroup('<', '>')).Compile("a", template);
string asmExpected =
-                "new 0 0, Write";
+                "new 0 0, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[region__a__r]";
@@ -589,7 +589,7 @@ namespace Antlr4.Test.StringTemplate
// compile as if in root dir and in template 'a'
CompiledTemplate code = new TemplateCompiler(new TemplateGroup('<', '>')).Compile("a", template);
string asmExpected =
-                "load_str 0, Write, new 1 0, Write";
+                "load_str 0, write, new 1 0, write";
string asmResult = code.GetInstructions();
Assert.AreEqual(asmExpected, asmResult);
string stringsExpected = "[x:, region__a__r]";

