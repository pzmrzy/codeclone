commit f3ec4f5ea26a43a73148ed8dfad4d92469fbc960
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Jan 31 14:56:35 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Jan 31 14:56:35 2011 -0800

(C# 3) Merge CL7535
Fix indentation of nested elements

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7584]

diff --git a/Antlr3.vsmdi b/Antlr3.vsmdi
index d0508b6..019f70c 100644
--- a/Antlr3.vsmdi
+++ b/Antlr3.vsmdi
@@ -338,18 +338,19 @@
</TestList>
<TestList name="Regions" id="28b56038-623a-47a8-adcb-f5e23303e4a0" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
<TestLinks>
-      <TestLink id="162a1b20-76d3-f55d-5e9d-8674677e8fc3" name="TestRegionOverrideRefSuperImplicitRegion" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="25c79e77-a9dc-f77a-c3de-c85280cc9f3a" name="TestRegionOverrideRefSuperRegion3Levels" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="876d7948-6933-f9b3-50b4-64fcaa2a90c4" name="TestDefineRegionInSubgroupThatRefsSuper" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="9ee02534-0ce6-cb83-de5d-91557fd3473c" name="TestDefineRegionInSubgroup" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="06ae96f5-1358-bcbc-8cad-67123751d37d" name="TestRegion" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="ebe10f2b-e552-998c-a739-7c9cd0bf88ac" name="TestRegionOverrideRefSuperRegion" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="a287f385-a0e1-a876-5742-1a0d5d8942c6" name="TestSuperRegionRefMissingOk" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="67214068-43a8-c38e-ba44-18f6f60c3ce9" name="TestCantDefineEmbeddedRegionAgain" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="06ae96f5-1358-bcbc-8cad-67123751d37d" name="TestRegion" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="fb99ea63-735d-3db2-e0dd-f0bde0dbc102" name="TestIndentBeforeRegionIsIgnored" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="9ee02534-0ce6-cb83-de5d-91557fd3473c" name="TestDefineRegionInSubgroup" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="5a579f7d-489b-39b2-ae73-8d0002da22d3" name="TestUnknownRegionDefError" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-      <TestLink id="db36848d-942b-93a5-f9d3-6d04413df643" name="TestDefineRegionInSameGroup" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="25c79e77-a9dc-f77a-c3de-c85280cc9f3a" name="TestRegionOverrideRefSuperRegion3Levels" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="62229bd7-8afc-5de8-aef1-83e219e7f10d" name="TestDefineRegionInSubgroup2" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="db36848d-942b-93a5-f9d3-6d04413df643" name="TestDefineRegionInSameGroup" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="67214068-43a8-c38e-ba44-18f6f60c3ce9" name="TestCantDefineEmbeddedRegionAgain" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="a287f385-a0e1-a876-5742-1a0d5d8942c6" name="TestSuperRegionRefMissingOk" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
<TestLink id="3b975616-c6e9-f9a3-5992-22d3a0c18e20" name="TestEmbeddedRegion" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="162a1b20-76d3-f55d-5e9d-8674677e8fc3" name="TestRegionOverrideRefSuperImplicitRegion" storage="antlr4.test.stringtemplate\bin\debug\antlr4.test.stringtemplate.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
<TestList name="Groups" id="2b84a5ba-a6b2-44f6-842f-39aeaec2d3f0" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
diff --git a/Antlr4.StringTemplate/Compiler/CodeGenerator.g3 b/Antlr4.StringTemplate/Compiler/CodeGenerator.g3
index 6d6becb..13e9df3 100644
--- a/Antlr4.StringTemplate/Compiler/CodeGenerator.g3
+++ b/Antlr4.StringTemplate/Compiler/CodeGenerator.g3
@@ -72,24 +72,33 @@ scope {
chunk
:	element*
;
-
+
element
-	:	^(INDENT {$template::state.Indent($INDENT.text);} element {$template::state.Emit(Bytecode.INSTR_DEDENT);})
-	|	ifstat
-	|	exprElement
+	:	^(INDENT {Indent($INDENT.text);} element {Dedent();})
+	|	compoundElement
+	|	singleElement
+	;
+
+singleElement
+	:	exprElement
|	TEXT
{
-		if ($TEXT.text.Length > 0) {
-			emit1($TEXT, Bytecode.INSTR_LOAD_STR, $TEXT.text);
-			emit($TEXT, Bytecode.INSTR_WRITE);
+		if ($TEXT.text.Length > 0)
+		{
+			emit1($TEXT,Bytecode.INSTR_LOAD_STR, $TEXT.text);
+			emit($TEXT,Bytecode.INSTR_WRITE);
}
}
+	|	NEWLINE {emit(Bytecode.INSTR_NEWLINE);}
+	;
+
+compoundElement
+	:	ifstat
|	region
{
emit2($region.start, Bytecode.INSTR_NEW, $region.name, 0);
emit($region.start, Bytecode.INSTR_WRITE);
}
-	|	NEWLINE {emit(Bytecode.INSTR_NEWLINE);}
;

exprElement
diff --git a/Antlr4.StringTemplate/Compiler/CodeGenerator.g3.cs b/Antlr4.StringTemplate/Compiler/CodeGenerator.g3.cs
index dcdc8b4..a2ae986 100644
--- a/Antlr4.StringTemplate/Compiler/CodeGenerator.g3.cs
+++ b/Antlr4.StringTemplate/Compiler/CodeGenerator.g3.cs
@@ -32,9 +32,10 @@

namespace Antlr4.StringTemplate.Compiler
{
+    using System.Collections.Generic;
using Antlr.Runtime;
-    using Antlr4.StringTemplate.Misc;
using Antlr.Runtime.Tree;
+    using Antlr4.StringTemplate.Misc;

partial class CodeGenerator
{
@@ -89,6 +90,24 @@ namespace Antlr4.StringTemplate.Compiler
template_stack.Peek().state.Emit(opAST, opcode);
}

+        private readonly Stack<string> _elementIndent = new Stack<string>(new string[] { string.Empty });
+
+        private void Indent(string text)
+        {
+            string strip = _elementIndent.Peek();
+            if (!string.IsNullOrEmpty(strip) && text.StartsWith(strip))
+                text = text.Substring(strip.Length);
+
+            template_stack.Peek().state.Indent(text);
+            _elementIndent.Push(_elementIndent.Peek() + text);
+        }
+
+        private void Dedent()
+        {
+            template_stack.Peek().state.Emit(Bytecode.INSTR_DEDENT);
+            _elementIndent.Pop();
+        }
+
public void insert(int addr, Bytecode opcode, string s)
{
template_stack.Peek().state.Insert(addr, opcode, s);
diff --git a/Antlr4.StringTemplate/Compiler/TemplateParser.g3 b/Antlr4.StringTemplate/Compiler/TemplateParser.g3
index 992d425..192c43e 100644
--- a/Antlr4.StringTemplate/Compiler/TemplateParser.g3
+++ b/Antlr4.StringTemplate/Compiler/TemplateParser.g3
@@ -80,7 +80,12 @@ exprTag
-> ^(EXPR[$LDELIM,"EXPR"] expr exprOptions?)
;

-region : LDELIM '@' ID RDELIM template LDELIM '@end' RDELIM -> ^(REGION ID template) ;
+region
+	:	LDELIM '@' ID RDELIM NEWLINE?
+		template
+		INDENT? LDELIM '@end' RDELIM NEWLINE?
+		-> ^(REGION ID template)
+	;

subtemplate
:	lc='{' (ids+= ID ( ',' ids+= ID )* '|' )? template INDENT? '}'
diff --git a/Antlr4.Test.StringTemplate/TestRegions.cs b/Antlr4.Test.StringTemplate/TestRegions.cs
index 1f5dc24..1e080a4 100644
--- a/Antlr4.Test.StringTemplate/TestRegions.cs
+++ b/Antlr4.Test.StringTemplate/TestRegions.cs
@@ -33,8 +33,9 @@
namespace Antlr4.Test.StringTemplate
{
using Antlr4.StringTemplate;
-    using Microsoft.VisualStudio.TestTools.UnitTesting;
using Antlr4.StringTemplate.Misc;
+    using Microsoft.VisualStudio.TestTools.UnitTesting;
+    using Path = System.IO.Path;

[TestClass]
public class TestRegions : BaseTest
@@ -48,7 +49,7 @@ namespace Antlr4.Test.StringTemplate
"[<@r>bar<@end>]\n" +
">>\n";
writeFile(dir, "group.stg", groupFile);
-            TemplateGroup group = new TemplateGroupFile(dir + "/group.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
Template st = group.GetInstanceOf("a");
string expected = "[bar]";
string result = st.Render();
@@ -64,7 +65,7 @@ namespace Antlr4.Test.StringTemplate
"[<@r()>]\n" +
">>\n";
writeFile(dir, "group.stg", groupFile);
-            TemplateGroup group = new TemplateGroupFile(dir + "/group.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
Template st = group.GetInstanceOf("a");
string expected = "[]";
string result = st.Render();
@@ -80,8 +81,8 @@ namespace Antlr4.Test.StringTemplate
string g2 = "@a.r() ::= <<foo>>\n";
writeFile(dir, "g2.stg", g2);

-            TemplateGroup group1 = new TemplateGroupFile(dir + "/g1.stg");
-            TemplateGroup group2 = new TemplateGroupFile(dir + "/g2.stg");
+            TemplateGroup group1 = new TemplateGroupFile(Path.Combine(dir, "g1.stg"));
+            TemplateGroup group2 = new TemplateGroupFile(Path.Combine(dir, "g2.stg"));
group2.ImportTemplates(group1); // define r in g2
Template st = group2.GetInstanceOf("a");
string expected = "[foo]";
@@ -98,8 +99,8 @@ namespace Antlr4.Test.StringTemplate
string g2 = "@a.r() ::= <<(<@super.r()>)>>\n";
writeFile(dir, "g2.stg", g2);

-            TemplateGroup group1 = new TemplateGroupFile(dir + "/g1.stg");
-            TemplateGroup group2 = new TemplateGroupFile(dir + "/g2.stg");
+            TemplateGroup group1 = new TemplateGroupFile(Path.Combine(dir, "g1.stg"));
+            TemplateGroup group2 = new TemplateGroupFile(Path.Combine(dir, "g2.stg"));
group2.ImportTemplates(group1); // define r in g2
Template st = group2.GetInstanceOf("a");
string expected = "[(foo)]";
@@ -116,8 +117,8 @@ namespace Antlr4.Test.StringTemplate
string g2 = "@a.r() ::= <<foo>>>\n";
writeFile(dir, "g2.stg", g2);

-            TemplateGroup group1 = new TemplateGroupFile(dir + "/g1.stg");
-            TemplateGroup group2 = new TemplateGroupFile(dir + "/g2.stg");
+            TemplateGroup group1 = new TemplateGroupFile(Path.Combine(dir, "g1.stg"));
+            TemplateGroup group2 = new TemplateGroupFile(Path.Combine(dir, "g2.stg"));
group1.ImportTemplates(group2); // opposite of previous; g1 imports g2
Template st = group1.GetInstanceOf("a");
string expected = "[]"; // @a.r implicitly defined in g1; can't see g2's
@@ -133,7 +134,7 @@ namespace Antlr4.Test.StringTemplate
"@a.r() ::= <<foo>>\n";
writeFile(dir, "g.stg", g);

-            TemplateGroup group = new TemplateGroupFile(dir + "/g.stg");
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(dir, "g.stg"));
Template st = group.GetInstanceOf("a");
string expected = "[foo]";
string result = st.Render();
@@ -148,7 +149,7 @@ namespace Antlr4.Test.StringTemplate
"@a.r() ::= <<bar>>\n"; // error; dup
writeFile(dir, "g.stg", g);

-            TemplateGroupFile group = new TemplateGroupFile(dir + "/g.stg");
+            TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "g.stg"));
ErrorBuffer errors = new ErrorBuffer();
group.Listener = errors;
group.Load();
@@ -157,6 +158,26 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

+        [TestMethod]
+        public void TestIndentBeforeRegionIsIgnored()
+        {
+            string dir = tmpdir;
+            string g = "a() ::= <<[\n" +
+                       "  <@r>\n" +
+                       "  foo\n" +
+                       "  <@end>\n" +
+                       "]>>\n";
+            writeFile(dir, "g.stg", g);
+
+            TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "g.stg"));
+            Template st = group.GetInstanceOf("a");
+            string expected = "[" + newline +
+                              "  foo" + newline +
+                              "]";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
//

[TestMethod]
@@ -167,7 +188,7 @@ namespace Antlr4.Test.StringTemplate
"a() ::= \"X<@r()>Y\"" +
"@a.r() ::= \"foo\"" + newline;
writeFile(dir, "g.stg", g);
-            TemplateGroupFile group = new TemplateGroupFile(dir + "/g.stg");
+            TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "g.stg"));

string sub =
"@a.r() ::= \"A<@super.r()>B\"" + newline;
@@ -202,7 +223,7 @@ namespace Antlr4.Test.StringTemplate
"a() ::= \"X<@r()>Y\"" +
"@a.r() ::= \"foo\"" + newline;
writeFile(dir, "g.stg", g);
-            TemplateGroupFile group = new TemplateGroupFile(dir + "/g.stg");
+            TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "g.stg"));

string sub =
"@a.r() ::= \"<@super.r()>2\"" + newline;
@@ -230,7 +251,7 @@ namespace Antlr4.Test.StringTemplate
string g =
"a() ::= \"X<@r>foo<@end>Y\"" + newline;
writeFile(dir, "g.stg", g);
-            TemplateGroupFile group = new TemplateGroupFile(dir + "/g.stg");
+            TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "g.stg"));

string sub =
"@a.r() ::= \"A<@super.r()>\"" + newline;
@@ -255,7 +276,7 @@ namespace Antlr4.Test.StringTemplate
"@a.q() ::= \"foo\"" + newline;
ITemplateErrorListener errors = new ErrorBuffer();
writeFile(dir, "g.stg", g);
-            TemplateGroupFile group = new TemplateGroupFile(dir + "/g.stg");
+            TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "g.stg"));
group.Listener = errors;
Template st = group.GetInstanceOf("a");
st.Render();
@@ -272,7 +293,7 @@ namespace Antlr4.Test.StringTemplate
"a() ::= \"X<@r()>Y\"" +
"@a.r() ::= \"foo\"" + newline;
writeFile(dir, "g.stg", g);
-            TemplateGroupFile group = new TemplateGroupFile(dir + "/g.stg");
+            TemplateGroupFile group = new TemplateGroupFile(Path.Combine(dir, "g.stg"));

string sub =
"@a.r() ::= \"A<@super.q()>B\"" + newline; // allow this; trap at runtime

