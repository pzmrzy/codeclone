commit c7601b3b7defd80fb71e6405d3a42a74e8d4fa35
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sun Dec 13 20:24:59 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sun Dec 13 20:24:59 2009 -0800

C# Port:
* Merge CL6388

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6498]

diff --git a/StringTemplate4/BytecodeDisassembler.cs b/StringTemplate4/BytecodeDisassembler.cs
index 68477f0..d67e6db 100644
--- a/StringTemplate4/BytecodeDisassembler.cs
+++ b/StringTemplate4/BytecodeDisassembler.cs
@@ -153,9 +153,7 @@ namespace StringTemplate
s = strings[poolIndex].ToString();
if (strings[poolIndex] is string)
{
-                        s = s.Replace("\n", "\\\\n");
-                        s = s.Replace("\r", "\\\\r");
-                        s = s.Replace("\t", "\\\\t");
+                        s = Misc.ReplaceEscapes(s);
s = '"' + s + '"';
}
}
@@ -182,9 +180,7 @@ namespace StringTemplate
if (o is string)
{
string s = (string)o;
-                    s = s.Replace("\n", "\\\\n");
-                    s = s.Replace("\r", "\\\\r");
-                    s = s.Replace("\t", "\\\\t");
+                    s = Misc.ReplaceEscapes(s);
buf.Append(string.Format("%04d: \"%s\"\n", addr, s));
}
else
diff --git a/StringTemplate4/FormalArgument.cs b/StringTemplate4/FormalArgument.cs
index 3734b58..321e3db 100644
--- a/StringTemplate4/FormalArgument.cs
+++ b/StringTemplate4/FormalArgument.cs
@@ -32,6 +32,8 @@

namespace StringTemplate
{
+    using Antlr.Runtime;
+
public class FormalArgument
{
// the following represent bit positions emulating a cardinality bitset.
@@ -56,7 +58,7 @@ namespace StringTemplate
//protected int cardinality = REQUIRED;

/** If they specified name="value", store the template here */
-        public string defaultValue;
+        public IToken defaultValueToken;
public CompiledTemplate compiledDefaultValue;

public FormalArgument(string name)
@@ -64,10 +66,10 @@ namespace StringTemplate
this.name = name;
}

-        public FormalArgument(string name, string defaultValue)
+        public FormalArgument(string name, IToken defaultValueToken)
{
this.name = name;
-            this.defaultValue = defaultValue;
+            this.defaultValueToken = defaultValueToken;
}

/*
@@ -84,7 +86,7 @@ namespace StringTemplate

public override int GetHashCode()
{
-            return name.GetHashCode() + defaultValue.GetHashCode();
+            return name.GetHashCode() + defaultValueToken.GetHashCode();
}

public override bool Equals(object o)
@@ -99,8 +101,8 @@ namespace StringTemplate
return false;
}
// only check if there is a default value; that's all
-            if ((this.defaultValue != null && other.defaultValue == null) ||
-                 (this.defaultValue == null && other.defaultValue != null))
+            if ((this.defaultValueToken != null && other.defaultValueToken == null) ||
+                 (this.defaultValueToken == null && other.defaultValueToken != null))
{
return false;
}
@@ -109,9 +111,9 @@ namespace StringTemplate

public override string ToString()
{
-            if (defaultValue != null)
+            if (defaultValueToken != null)
{
-                return name + "=" + defaultValue;
+                return name + "=" + defaultValueToken.Text;
}
return name;
}
diff --git a/StringTemplate4/Group.g3 b/StringTemplate4/Group.g3
index 4535882..4a77d4f 100644
--- a/StringTemplate4/Group.g3
+++ b/StringTemplate4/Group.g3
@@ -115,12 +115,11 @@ formalArgs returns[IDictionary<string,FormalArgument> args]
;

formalArg[IDictionary<string,FormalArgument> args]
-@init {string defvalue = null;}
:	ID
-		(	'=' STRING				{defvalue = $STRING.text;}
-		|	'=' ANONYMOUS_TEMPLATE	{defvalue = $ANONYMOUS_TEMPLATE.text;}
+		(	'=' a=STRING
+		|	'=' a=ANONYMOUS_TEMPLATE
)?
-		{$args[$ID.text] = new FormalArgument($ID.text, defvalue);}
+		{$args[$ID.text] = new FormalArgument($ID.text, $a);}
;

/*
@@ -163,13 +162,13 @@ defaultValuePair[IDictionary<string,object> mapping]
;

keyValuePair[IDictionary<string,object> mapping]
-	:	STRING ':' keyValue {mapping[Misc.Strip($STRING.text, 1)] = $keyValue.value;}
+	:	STRING ':' keyValue {mapping[Misc.ReplaceEscapes(Misc.Strip($STRING.text, 1))] = $keyValue.value;}
;

keyValue returns [object value]
:	BIGSTRING			{$value = new Template(Misc.Strip($BIGSTRING.text,2));}
|	ANONYMOUS_TEMPLATE	{$value = new Template(Misc.Strip($ANONYMOUS_TEMPLATE.text,1));}
-	|	STRING				{$value = Misc.Strip($STRING.text, 1);}
+	|	STRING				{$value = Misc.ReplaceEscapes(Misc.Strip($STRING.text, 1));}
|	{input.LT(1).Text.Equals("key")}?=> ID
{$value = TemplateGroup.DICT_KEY;}
|						{$value = null;}
diff --git a/StringTemplate4/Misc.cs b/StringTemplate4/Misc.cs
index c24aedb..bdd6f43 100644
--- a/StringTemplate4/Misc.cs
+++ b/StringTemplate4/Misc.cs
@@ -52,5 +52,13 @@ namespace StringTemplate
*/
return s;
}
+
+        public static string ReplaceEscapes(string s)
+        {
+            s = s.Replace("\n", @"\\n");
+            s = s.Replace("\r", @"\\r");
+            s = s.Replace("\t", @"\\t");
+            return s;
+        }
}
}
diff --git a/StringTemplate4/TemplateGroup.cs b/StringTemplate4/TemplateGroup.cs
index 1cf97f1..a90ff6d 100644
--- a/StringTemplate4/TemplateGroup.cs
+++ b/StringTemplate4/TemplateGroup.cs
@@ -254,7 +254,7 @@ namespace StringTemplate
foreach (string a in args.Keys)
{
FormalArgument fa = args[a];
-                    if (fa.defaultValue != null)
+                    if (fa.defaultValueToken != null)
{
Compiler c2 = new Compiler(prefix, name);
fa.compiledDefaultValue = c2.Compile(template);
diff --git a/StringTemplate4/TemplateLexer.cs b/StringTemplate4/TemplateLexer.cs
index 9486dcf..c716447 100644
--- a/StringTemplate4/TemplateLexer.cs
+++ b/StringTemplate4/TemplateLexer.cs
@@ -66,9 +66,7 @@ namespace StringTemplate
string txt = Text;
if (txt != null)
{
-                    txt = txt.Replace("\n", "\\\\n");
-                    txt = txt.Replace("\r", "\\\\r");
-                    txt = txt.Replace("\t", "\\\\t");
+                    txt = Misc.ReplaceEscapes(txt);
}
else
{

