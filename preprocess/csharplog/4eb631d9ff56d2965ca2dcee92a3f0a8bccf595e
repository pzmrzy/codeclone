commit 4eb631d9ff56d2965ca2dcee92a3f0a8bccf595e
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sun Apr 10 11:01:37 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sun Apr 10 11:01:37 2011 -0800

(C# 3) Use ErrorManager.Listener property instead of ErrorManager.listener field

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8122]

diff --git a/Antlr4.StringTemplate/Misc/ErrorManager.cs b/Antlr4.StringTemplate/Misc/ErrorManager.cs
index 4fe4966..937b49b 100644
--- a/Antlr4.StringTemplate/Misc/ErrorManager.cs
+++ b/Antlr4.StringTemplate/Misc/ErrorManager.cs
@@ -33,70 +33,51 @@
namespace Antlr4.StringTemplate.Misc
{
using Antlr.Runtime;
+    using ArgumentNullException = System.ArgumentNullException;
using Console = System.Console;
using Exception = System.Exception;
using Path = System.IO.Path;

public class ErrorManager
{
-        public static ITemplateErrorListener DEFAULT_ERROR_LISTENER = new DefaultErrorListener();
+        private static ITemplateErrorListener _defaultErrorListener = new ConsoleErrorListener();

-        private class DefaultErrorListener : ITemplateErrorListener
+        private readonly ITemplateErrorListener _listener;
+
+        public ErrorManager()
+            : this(DefaultErrorListener)
{
-            public virtual void CompiletimeError(TemplateMessage msg)
-            {
-                Console.Error.WriteLine(msg);
-            }
+        }

-            public virtual void RuntimeError(TemplateMessage msg)
-            {
-                if (msg.Error != ErrorType.NO_SUCH_PROPERTY)
-                { // ignore these
-                    Console.Error.WriteLine(msg);
-                }
-            }
+        public ErrorManager(ITemplateErrorListener listener)
+        {
+            if (listener == null)
+                throw new ArgumentNullException("listener");

-            public virtual void IOError(TemplateMessage msg)
-            {
-                Console.Error.WriteLine(msg);
-            }
+            this._listener = listener;
+        }

-            public virtual void InternalError(TemplateMessage msg)
+        public static ITemplateErrorListener DefaultErrorListener
+        {
+            get
{
-                Console.Error.WriteLine(msg);
-                // throw new Error("internal error", msg.cause);
+                return _defaultErrorListener;
}

-            public virtual void Error(string s)
+            set
{
-                Error(s, null);
-            }
+                if (value == null)
+                    throw new ArgumentNullException("value");

-            public virtual void Error(string s, Exception e)
-            {
-                Console.Error.WriteLine(s);
-                if (e != null)
-                    Console.Error.WriteLine(e.StackTrace);
+                _defaultErrorListener = value;
}
}

-        private readonly ITemplateErrorListener listener;
-
-        public ErrorManager()
-            : this(DEFAULT_ERROR_LISTENER)
-        {
-        }
-
-        public ErrorManager(ITemplateErrorListener listener)
-        {
-            this.listener = listener;
-        }
-
public ITemplateErrorListener Listener
{
get
{
-                return listener;
+                return _listener;
}
}

@@ -106,7 +87,7 @@ namespace Antlr4.StringTemplate.Misc
if (srcName != null)
srcName = Path.GetFileName(srcName);

-            listener.CompiletimeError(new TemplateCompiletimeMessage(error, srcName, templateToken, t, null, t.Text));
+            Listener.CompiletimeError(new TemplateCompiletimeMessage(error, srcName, templateToken, t, null, t.Text));
}

public virtual void LexerError(string srcName, string msg, IToken templateToken, RecognitionException e)
@@ -114,7 +95,7 @@ namespace Antlr4.StringTemplate.Misc
if (srcName != null)
srcName = Path.GetFileName(srcName);

-            listener.CompiletimeError(new TemplateLexerMessage(srcName, msg, templateToken, e));
+            Listener.CompiletimeError(new TemplateLexerMessage(srcName, msg, templateToken, e));
}

public virtual void CompiletimeError(ErrorType error, IToken templateToken, IToken t, object arg)
@@ -123,7 +104,7 @@ namespace Antlr4.StringTemplate.Misc
if (srcName != null)
srcName = Path.GetFileName(srcName);

-            listener.CompiletimeError(new TemplateCompiletimeMessage(error, srcName, templateToken, t, null, arg));
+            Listener.CompiletimeError(new TemplateCompiletimeMessage(error, srcName, templateToken, t, null, arg));
}

public virtual void CompiletimeError(ErrorType error, IToken templateToken, IToken t, object arg, object arg2)
@@ -132,58 +113,97 @@ namespace Antlr4.StringTemplate.Misc
if (srcName != null)
srcName = Path.GetFileName(srcName);

-            listener.CompiletimeError(new TemplateCompiletimeMessage(error, srcName, templateToken, t, null, arg, arg2));
+            Listener.CompiletimeError(new TemplateCompiletimeMessage(error, srcName, templateToken, t, null, arg, arg2));
}

public virtual void GroupSyntaxError(ErrorType error, string srcName, RecognitionException e, string msg)
{
IToken t = e.Token;
-            listener.CompiletimeError(new TemplateGroupCompiletimeMessage(error, srcName, e.Token, e, msg));
+            Listener.CompiletimeError(new TemplateGroupCompiletimeMessage(error, srcName, e.Token, e, msg));
}

public virtual void GroupLexerError(ErrorType error, string srcName, RecognitionException e, string msg)
{
-            listener.CompiletimeError(new TemplateGroupCompiletimeMessage(error, srcName, e.Token, e, msg));
+            Listener.CompiletimeError(new TemplateGroupCompiletimeMessage(error, srcName, e.Token, e, msg));
}

public virtual void RuntimeError(TemplateFrame frame, int ip, ErrorType error)
{
-            listener.RuntimeError(new TemplateRuntimeMessage(error, ip, frame));
+            Listener.RuntimeError(new TemplateRuntimeMessage(error, ip, frame));
}

public virtual void RuntimeError(TemplateFrame frame, int ip, ErrorType error, object arg)
{
-            listener.RuntimeError(new TemplateRuntimeMessage(error, ip, frame, arg));
+            Listener.RuntimeError(new TemplateRuntimeMessage(error, ip, frame, arg));
}

public virtual void RuntimeError(TemplateFrame frame, int ip, ErrorType error, Exception e, object arg)
{
-            listener.RuntimeError(new TemplateRuntimeMessage(error, ip, frame, e, arg));
+            Listener.RuntimeError(new TemplateRuntimeMessage(error, ip, frame, e, arg));
}

public virtual void RuntimeError(TemplateFrame frame, int ip, ErrorType error, object arg, object arg2)
{
-            listener.RuntimeError(new TemplateRuntimeMessage(error, ip, frame, null, arg, arg2));
+            Listener.RuntimeError(new TemplateRuntimeMessage(error, ip, frame, null, arg, arg2));
}

public virtual void RuntimeError(TemplateFrame frame, int ip, ErrorType error, object arg, object arg2, object arg3)
{
-            listener.RuntimeError(new TemplateRuntimeMessage(error, ip, frame, null, arg, arg2, arg3));
+            Listener.RuntimeError(new TemplateRuntimeMessage(error, ip, frame, null, arg, arg2, arg3));
}

public virtual void IOError(Template self, ErrorType error, Exception e)
{
-            listener.IOError(new TemplateMessage(error, self, e));
+            Listener.IOError(new TemplateMessage(error, self, e));
}

public virtual void IOError(Template self, ErrorType error, Exception e, object arg)
{
-            listener.IOError(new TemplateMessage(error, self, e, arg));
+            Listener.IOError(new TemplateMessage(error, self, e, arg));
}

public virtual void InternalError(Template self, string msg, Exception e)
{
-            listener.InternalError(new TemplateMessage(ErrorType.INTERNAL_ERROR, self, e, msg));
+            Listener.InternalError(new TemplateMessage(ErrorType.INTERNAL_ERROR, self, e, msg));
+        }
+
+        private class ConsoleErrorListener : ITemplateErrorListener
+        {
+            public virtual void CompiletimeError(TemplateMessage msg)
+            {
+                Console.Error.WriteLine(msg);
+            }
+
+            public virtual void RuntimeError(TemplateMessage msg)
+            {
+                if (msg.Error != ErrorType.NO_SUCH_PROPERTY)
+                { // ignore these
+                    Console.Error.WriteLine(msg);
+                }
+            }
+
+            public virtual void IOError(TemplateMessage msg)
+            {
+                Console.Error.WriteLine(msg);
+            }
+
+            public virtual void InternalError(TemplateMessage msg)
+            {
+                Console.Error.WriteLine(msg);
+                // throw new Error("internal error", msg.cause);
+            }
+
+            public virtual void Error(string s)
+            {
+                Error(s, null);
+            }
+
+            public virtual void Error(string s, Exception e)
+            {
+                Console.Error.WriteLine(s);
+                if (e != null)
+                    Console.Error.WriteLine(e.StackTrace);
+            }
}
}
}

