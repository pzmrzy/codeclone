commit 4b7b19b287628dadb674396b22d8fbc8c848b26b
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon May 2 14:27:50 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon May 2 14:27:50 2011 -0800

(C# 3) Allow empty dictionary definitions
Improved error message for required parameters appearing after an optional parameter

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8371]

diff --git a/Antlr4.StringTemplate/Compiler/Group.g3 b/Antlr4.StringTemplate/Compiler/Group.g3
index 20953b9..d33eda5 100644
--- a/Antlr4.StringTemplate/Compiler/Group.g3
+++ b/Antlr4.StringTemplate/Compiler/Group.g3
@@ -128,26 +128,16 @@ templateDef[string prefix]
|   alias=ID '::=' target=ID  {_group.DefineTemplateAlias($alias, $target);}
;

-formalArgs returns[List<FormalArgument> args]
-@init {$args = new List<FormalArgument>();}
-    :	formalArg[$args]
-    	( ',' formalArg[$args] )*
-    	( ',' formalArgWithDefaultValue[$args] )*
-    |	formalArgWithDefaultValue[$args] ( ',' formalArgWithDefaultValue[$args] )*
-    |
+formalArgs returns[List<FormalArgument> args = new List<FormalArgument>()]
+	:	formalArg[$args] (',' formalArg[$args])*
+	|
;

formalArg[List<FormalArgument> args]
+@init{bool hasOptionalParameter = false;}
:	ID
-		{$args.Add(new FormalArgument($ID.text));}
-    ;
-
-formalArgWithDefaultValue[List<FormalArgument> args]
-	:	ID
-		(	'=' a=STRING
-		|	'=' a=ANONYMOUS_TEMPLATE
-		|	'=' a='true'
-		|	'=' a='false'
+		(	'=' a=(STRING|ANONYMOUS_TEMPLATE|'true'|'false') {hasOptionalParameter = true;}
+		|	{if (hasOptionalParameter) _group.ErrorManager.GroupSyntaxError(ErrorType.REQUIRED_PARAMETER_AFTER_OPTIONAL, SourceName, input.LT(1));}
)
{$args.Add(new FormalArgument($ID.text, $a));}
;
@@ -176,16 +166,16 @@ dictDef
}
;

-dict returns [IDictionary<string,object> mapping]
-@init {mapping=new Dictionary<string,object>();}
+dict returns [IDictionary<string,object> mapping = new Dictionary<string, object>()]
:   '[' dictPairs[mapping] ']'
;

dictPairs[IDictionary<string,object> mapping]
-    :	keyValuePair[mapping]
-    	(',' keyValuePair[mapping])* (',' defaultValuePair[mapping])?
-    |	defaultValuePair[mapping]
-    ;
+	:	keyValuePair[mapping]
+		(',' keyValuePair[mapping])* (',' defaultValuePair[mapping])?
+	|	defaultValuePair[mapping]
+	|	/* no dictionary entries */
+	;
catch[RecognitionException] {
Error("missing dictionary entry at '"+input.LT(1).Text+"'");
}
@@ -199,16 +189,16 @@ keyValuePair[IDictionary<string,object> mapping]
;

keyValue returns [object value]
-	:	BIGSTRING			{$value = _group.CreateSingleton($BIGSTRING);}
-	|	BIGSTRING_NO_NL		{$value = _group.CreateSingleton($BIGSTRING_NO_NL);}
-	|	ANONYMOUS_TEMPLATE	{$value = _group.CreateSingleton($ANONYMOUS_TEMPLATE);}
-	|	STRING				{$value = Utility.ReplaceEscapes(Utility.Strip($STRING.text, 1));}
-	|	TRUE				{$value = true;}
-	|	FALSE				{$value = false;}
+	:	a=BIGSTRING				{$value = _group.CreateSingleton($a);}
+	|	a=BIGSTRING_NO_NL		{$value = _group.CreateSingleton($a);}
+	|	a=ANONYMOUS_TEMPLATE	{$value = _group.CreateSingleton($a);}
+	|	a=STRING				{$value = Utility.ReplaceEscapes(Utility.Strip($a.text, 1));}
+	|	TRUE					{$value = true;}
+	|	FALSE					{$value = false;}
|	{input.LT(1).Text.Equals("key")}?=> ID
-							{$value = TemplateGroup.DictionaryKey;}
+								{$value = TemplateGroup.DictionaryKey;}
;
- 	catch[RecognitionException] {
+	catch[RecognitionException] {
Error("missing value for key at '"+input.LT(1).Text+"'");
}

diff --git a/Antlr4.StringTemplate/Misc/ErrorManager.cs b/Antlr4.StringTemplate/Misc/ErrorManager.cs
index 937b49b..0870b6b 100644
--- a/Antlr4.StringTemplate/Misc/ErrorManager.cs
+++ b/Antlr4.StringTemplate/Misc/ErrorManager.cs
@@ -116,10 +116,15 @@ namespace Antlr4.StringTemplate.Misc
Listener.CompiletimeError(new TemplateCompiletimeMessage(error, srcName, templateToken, t, null, arg, arg2));
}

-        public virtual void GroupSyntaxError(ErrorType error, string srcName, RecognitionException e, string msg)
+        public virtual void GroupSyntaxError(ErrorType error, string sourceName, IToken token)
{
-            IToken t = e.Token;
-            Listener.CompiletimeError(new TemplateGroupCompiletimeMessage(error, srcName, e.Token, e, msg));
+            Listener.CompiletimeError(new TemplateGroupCompiletimeMessage(error, sourceName, token));
+        }
+
+        public virtual void GroupSyntaxError(ErrorType error, string sourceName, RecognitionException e, string message)
+        {
+            IToken token = e.Token;
+            Listener.CompiletimeError(new TemplateGroupCompiletimeMessage(error, sourceName, token, e, message));
}

public virtual void GroupLexerError(ErrorType error, string srcName, RecognitionException e, string msg)
diff --git a/Antlr4.StringTemplate/Misc/ErrorType.cs b/Antlr4.StringTemplate/Misc/ErrorType.cs
index 58b1158..a59b165 100644
--- a/Antlr4.StringTemplate/Misc/ErrorType.cs
+++ b/Antlr4.StringTemplate/Misc/ErrorType.cs
@@ -64,6 +64,7 @@ namespace Antlr4.StringTemplate.Misc
public static readonly ErrorType NO_SUCH_OPTION = new ErrorType("no such option: {0}");
public static readonly ErrorType INVALID_TEMPLATE_NAME = new ErrorType("invalid template name or path: {0}");
public static readonly ErrorType ANON_ARGUMENT_MISMATCH = new ErrorType("anonymous template has {0} arg(s) but mapped across {1} value(s)");
+        public static readonly ErrorType REQUIRED_PARAMETER_AFTER_OPTIONAL = new ErrorType("Optional parameters must appear after all required parameters");

// INTERNAL ERRORS
public static readonly ErrorType INTERNAL_ERROR = new ErrorType("{0}");
diff --git a/Antlr4.StringTemplate/Misc/TemplateGroupCompiletimeMessage.cs b/Antlr4.StringTemplate/Misc/TemplateGroupCompiletimeMessage.cs
index 542a535..b2e5f80 100644
--- a/Antlr4.StringTemplate/Misc/TemplateGroupCompiletimeMessage.cs
+++ b/Antlr4.StringTemplate/Misc/TemplateGroupCompiletimeMessage.cs
@@ -44,8 +44,13 @@ namespace Antlr4.StringTemplate.Misc
private readonly IToken token;
private readonly string srcName;

+        public TemplateGroupCompiletimeMessage(ErrorType error, string srcName, IToken t)
+            : this(error, srcName, t, null, null, null)
+        {
+        }
+
public TemplateGroupCompiletimeMessage(ErrorType error, string srcName, IToken t, Exception cause)
-            : this(error, srcName, t, cause, null)
+            : this(error, srcName, t, cause, null, null)
{
}

diff --git a/Antlr4.Test.StringTemplate/TestDictionaries.cs b/Antlr4.Test.StringTemplate/TestDictionaries.cs
index 7ff9134..b82d25d 100644
--- a/Antlr4.Test.StringTemplate/TestDictionaries.cs
+++ b/Antlr4.Test.StringTemplate/TestDictionaries.cs
@@ -60,6 +60,21 @@ namespace Antlr4.Test.StringTemplate
}

[TestMethod]
+        public void TestEmptyDictionary()
+        {
+            string templates =
+                "d ::= []\n";
+            writeFile(tmpdir, "t.stg", templates);
+
+            TemplateGroupFile group = null;
+            ErrorBuffer errors = new ErrorBuffer();
+            group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
+            group.Listener = errors;
+            group.Load(); // force load
+            Assert.AreEqual(0, errors.Errors.Count);
+        }
+
+        [TestMethod]
public void TestDictValuesAreTemplates()
{
string templates =
diff --git a/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs b/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
index 32f9f46..a804e81 100644
--- a/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
+++ b/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
@@ -175,7 +175,7 @@ namespace Antlr4.Test.StringTemplate
group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.Listener = errors;
group.Load(); // force load
-            string expected = "t.stg 1:6: mismatched input ')' expecting ID" + newline;
+            string expected = "t.stg 1:6: missing ID at ')'" + newline;
string result = errors.ToString();
Assert.AreEqual(expected, result);
}
@@ -193,8 +193,8 @@ namespace Antlr4.Test.StringTemplate
group.Listener = errors;
group.Load(); // force load
string expected =
-                "[t.stg 1:6: mismatched input ',' expecting ID, " +
-                "t.stg 1:7: mismatched input ')' expecting ID]";
+                "[t.stg 1:6: missing ID at ',', " +
+                "t.stg 1:7: missing ID at ')']";
string result = errors.Errors.ToListString();
Assert.AreEqual(expected, result);
}
@@ -212,8 +212,7 @@ namespace Antlr4.Test.StringTemplate
group.Listener = errors;
group.Load(); // force load
string expected =
-                "[t.stg 1:4: no viable alternative at input 'a', " +
-                "t.stg 1:6: garbled template definition starting at 'b']";
+                "[t.stg 1:6: no viable alternative at input 'b']";
string result = errors.Errors.ToListString();
Assert.AreEqual(expected, result);
}
@@ -237,23 +236,6 @@ namespace Antlr4.Test.StringTemplate
}

[TestMethod]
-        public void TestMap()
-        {
-            string templates =
-                "d ::= []\n";
-            writeFile(tmpdir, "t.stg", templates);
-
-            TemplateGroupFile group = null;
-            ErrorBuffer errors = new ErrorBuffer();
-            group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
-            group.Listener = errors;
-            group.Load(); // force load
-            string expected = "[t.stg 1:7: missing dictionary entry at ']']";
-            string result = errors.Errors.ToListString();
-            Assert.AreEqual(expected, result);
-        }
-
-        [TestMethod]
public void TestMap2()
{
string templates =
diff --git a/Antlr4.Test.StringTemplate/TestRegions.cs b/Antlr4.Test.StringTemplate/TestRegions.cs
index 360377c..2382ce4 100644
--- a/Antlr4.Test.StringTemplate/TestRegions.cs
+++ b/Antlr4.Test.StringTemplate/TestRegions.cs
@@ -183,7 +183,7 @@ namespace Antlr4.Test.StringTemplate
"a() ::= <<\n" +
"[\n" +
"<@r>foo<@end>\n" +
-                "<@r()>" +
+                "<@r()>\n" +
"]\n" +
">>\n"; // error; dup
writeFile(dir, "g.stg", g);
@@ -192,8 +192,15 @@ namespace Antlr4.Test.StringTemplate
ErrorBuffer errors = new ErrorBuffer();
group.Listener = errors;
group.Load();
-            string expected = "g.stg 3:2: redefinition of region a.r" + newline;
-            string result = errors.ToString();
+            Assert.AreEqual(0, errors.Errors.Count);
+
+            Template template = group.GetInstanceOf("a");
+            string expected =
+                "[" + newline +
+                "foo" + newline +
+                "foo" + newline +
+                "]";
+            string result = template.Render();
Assert.AreEqual(expected, result);
}

diff --git a/Antlr4.Test.StringTemplate/TestSyntaxErrors.cs b/Antlr4.Test.StringTemplate/TestSyntaxErrors.cs
index 630a784..112bb63 100644
--- a/Antlr4.Test.StringTemplate/TestSyntaxErrors.cs
+++ b/Antlr4.Test.StringTemplate/TestSyntaxErrors.cs
@@ -59,20 +59,24 @@ namespace Antlr4.Test.StringTemplate
[TestMethod]
public void TestIt()
{
-            string templates = "main() ::= <<\n<@r>a<@end>\n<@r()>\n>>";
+            string templates =
+                "main() ::= <<" + newline +
+                "<@r>a<@end>" + newline +
+                "<@r()>" + newline +
+                ">>";
writeFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
ErrorBuffer errors = new ErrorBuffer();
group.Listener = errors;
+            group.Load();
+            Assert.AreEqual(0, errors.Errors.Count);

-            // Force the compilation (this led to an NPE earlier that is reported in
-            // the error messages)
-            Template st = group.GetInstanceOf("main");
-
-            // A proper error messages should be written
-            Assert.AreEqual(
-                    "0:-1: region main.r is embedded and thus already implicitly defined" + newline,
-                    errors.ToString());
+            Template template = group.GetInstanceOf("main");
+            string expected =
+                "a" + newline +
+                "a";
+            string result = template.Render();
+            Assert.AreEqual(expected, result);
}

[TestMethod]

