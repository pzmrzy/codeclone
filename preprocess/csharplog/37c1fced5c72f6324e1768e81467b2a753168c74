commit 37c1fced5c72f6324e1768e81467b2a753168c74
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Fri Apr 17 22:34:20 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Fri Apr 17 22:34:20 2009 -0800

C# Port:
* TokenConstants updates
* Back to the old method of pushing/popping states

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6045]

diff --git a/Antlr3.StringTemplate/Language/ActionEvaluator.cs b/Antlr3.StringTemplate/Language/ActionEvaluator.cs
index b9bee89..807daad 100644
--- a/Antlr3.StringTemplate/Language/ActionEvaluator.cs
+++ b/Antlr3.StringTemplate/Language/ActionEvaluator.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\ActionEvaluator.g3 2009-04-11 17:05:21
+// $ANTLR 3.1.2 Language\\ActionEvaluator.g3 2009-04-17 13:33:35

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -241,7 +241,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,PLUS,Follow._PLUS_in_expr79);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._expr_in_expr83);
a=expr();

@@ -254,7 +254,7 @@ public partial class ActionEvaluator : TreeParser

value = chunk.Add(a,b);

-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -323,14 +323,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_expr131);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._expr_in_expr135);
e=expr();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

StringWriter buf = new StringWriter();
IStringTemplateWriter sw = self.Group.GetStringTemplateWriter(buf);
@@ -378,7 +378,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,LIST,Follow._LIST_in_list167);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Language\\ActionEvaluator.g3:123:4: ( expr | NOTHING )+
int cnt2=0;
for ( ; ; )
@@ -441,7 +441,7 @@ public partial class ActionEvaluator : TreeParser



-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);
value = new Cat(elements);

}
@@ -483,7 +483,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,INCLUDE,Follow._INCLUDE_in_templateInclude229);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Language\\ActionEvaluator.g3:148:4: (id= ID a1= . | ^( VALUE n= expr a2= . ) )
int alt3=2;
int LA3_0 = input.LA(1);
@@ -519,7 +519,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_templateInclude262);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._expr_in_templateInclude266);
n=expr();

@@ -528,7 +528,7 @@ public partial class ActionEvaluator : TreeParser
a2=(StringTemplateAST)input.LT(1);
MatchAny(input);

-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);
if (n!=null) {name=n.ToString();} args=a2;

}
@@ -537,7 +537,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

if ( name!=null )
{
@@ -602,7 +602,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,APPLY,Follow._APPLY_in_templateApplication316);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._expr_in_templateApplication320);
a=expr();

@@ -650,7 +650,7 @@ public partial class ActionEvaluator : TreeParser

value = chunk.ApplyListOfAlternatingTemplates(self,a,templatesToApply);

-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -659,7 +659,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,MULTI_APPLY,Follow._MULTI_APPLY_in_templateApplication345);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
// Language\\ActionEvaluator.g3:177:19: (a= expr )+
int cnt5=0;
for ( ; ; )
@@ -711,7 +711,7 @@ public partial class ActionEvaluator : TreeParser
anon.StringTemplate);


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -747,7 +747,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,FUNCTION,Follow._FUNCTION_in_function390);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Language\\ActionEvaluator.g3:191:4: ( 'first' a= singleFunctionArg | 'rest' a= singleFunctionArg | 'last' a= singleFunctionArg | 'length' a= singleFunctionArg | 'strip' a= singleFunctionArg | 'trunc' a= singleFunctionArg )
int alt7=6;
switch ( input.LA(1) )
@@ -874,7 +874,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -908,7 +908,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,SINGLEVALUEARG,Follow._SINGLEVALUEARG_in_singleFunctionArg499);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
PushFollow(Follow._expr_in_singleFunctionArg501);
expr8=expr();

@@ -916,7 +916,7 @@ public partial class ActionEvaluator : TreeParser

value = expr8;

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -954,7 +954,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,TEMPLATE,Follow._TEMPLATE_in_template524);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Language\\ActionEvaluator.g3:211:4: ( ID args= . |anon= ANONYMOUS_TEMPLATE | ^( VALUE n= expr args2= . ) )
int alt8=3;
switch ( input.LA(1) )
@@ -1022,7 +1022,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_template568);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._expr_in_template572);
n=expr();

@@ -1045,7 +1045,7 @@ public partial class ActionEvaluator : TreeParser
}


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -1053,7 +1053,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -1119,14 +1119,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,NOT,Follow._NOT_in_ifCondition625);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._ifAtom_in_ifCondition629);
a=ifAtom();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);
value = !chunk.TestAttributeTrue(a);

}
@@ -1248,7 +1248,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,DOT,Follow._DOT_in_attribute671);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._expr_in_attribute675);
obj=expr();

@@ -1287,14 +1287,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_attribute714);

-					Match(input, TokenConstants.Down, null);
+					Match(input, TokenTypes.Down, null);
PushFollow(Follow._expr_in_attribute718);
e=expr();

state._fsp--;


-					Match(input, TokenConstants.Up, null);
+					Match(input, TokenTypes.Up, null);
if (e!=null) {propName=e;}

}
@@ -1303,7 +1303,7 @@ public partial class ActionEvaluator : TreeParser
}


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);
value = chunk.GetObjectProperty(self,obj,propName);

}
@@ -1410,9 +1410,9 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,ARGS,Follow._ARGS_in_argList808);

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null);
+					Match(input, TokenTypes.Down, null);
// Language\\ActionEvaluator.g3:319:12: ( argumentAssignment[$embedded,$argumentContext] )*
for ( ; ; )
{
@@ -1449,7 +1449,7 @@ public partial class ActionEvaluator : TreeParser



-					Match(input, TokenConstants.Up, null);
+					Match(input, TokenTypes.Up, null);
}

}
@@ -1494,14 +1494,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,SINGLEVALUEARG,Follow._SINGLEVALUEARG_in_singleTemplateArg836);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
PushFollow(Follow._expr_in_singleTemplateArg840);
e=expr();

state._fsp--;


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

if ( e!=null )
{
@@ -1589,7 +1589,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_argumentAssignment860);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
arg=(StringTemplateAST)Match(input,ID,Follow._ID_in_argumentAssignment864);
PushFollow(Follow._expr_in_argumentAssignment866);
expr11=expr();
@@ -1597,7 +1597,7 @@ public partial class ActionEvaluator : TreeParser
state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

if ( expr11 != null )
{
@@ -1750,14 +1750,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,NOT,Follow._NOT_in_ifConditionCompiled940);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._ifAtomCompiled_in_ifConditionCompiled942);
ifAtomCompiled(gen);

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

#if COMPILE_EXPRESSIONS
EmitNot(gen);
@@ -1835,14 +1835,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,NOT,Follow._NOT_in_ifConditionFunctional975);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._ifAtomFunctional_in_ifConditionFunctional977);
ifAtomFunctional14=ifAtomFunctional();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

#if COMPILE_EXPRESSIONS
func = (chunk,self,writer) => !(ifAtomFunctional14(chunk,self,writer));
@@ -2009,7 +2009,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,PLUS,Follow._PLUS_in_exprCompiled1031);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._exprCompiled_in_exprCompiled1033);
exprCompiled(gen);

@@ -2021,7 +2021,7 @@ public partial class ActionEvaluator : TreeParser
state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

#if COMPILE_EXPRESSIONS
EmitAdd(gen);
@@ -2090,14 +2090,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_exprCompiled1078);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._exprCompiled_in_exprCompiled1080);
exprCompiled(gen);

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

#if COMPILE_EXPRESSIONS
EmitWriteToString(gen);
@@ -2198,7 +2198,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,PLUS,Follow._PLUS_in_exprFunctional1102);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._exprFunctional_in_exprFunctional1106);
a=exprFunctional();

@@ -2210,7 +2210,7 @@ public partial class ActionEvaluator : TreeParser
state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

#if COMPILE_EXPRESSIONS
func = (chunk,self,writer) => chunk.Add(a(chunk,self,writer),b(chunk,self,writer));
@@ -2304,14 +2304,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_exprFunctional1166);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._exprFunctional_in_exprFunctional1170);
a=exprFunctional();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

#if COMPILE_EXPRESSIONS
func = (chunk,self,writer) =>
@@ -2384,7 +2384,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,APPLY,Follow._APPLY_in_templateApplicationCompiled1194);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._exprCompiled_in_templateApplicationCompiled1198);
exprCompiled(gen);

@@ -2446,7 +2446,7 @@ public partial class ActionEvaluator : TreeParser
#endif


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2461,7 +2461,7 @@ public partial class ActionEvaluator : TreeParser
#endif


-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
// Language\\ActionEvaluator.g3:546:4: ( exprCompiled[$gen] )+
int cnt20=0;
for ( ; ; )
@@ -2515,7 +2515,7 @@ public partial class ActionEvaluator : TreeParser
#endif


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2578,7 +2578,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,APPLY,Follow._APPLY_in_templateApplicationFunctional1306);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._exprFunctional_in_templateApplicationFunctional1310);
a=exprFunctional();

@@ -2638,7 +2638,7 @@ public partial class ActionEvaluator : TreeParser
#endif


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2647,7 +2647,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,MULTI_APPLY,Follow._MULTI_APPLY_in_templateApplicationFunctional1335);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
// Language\\ActionEvaluator.g3:588:4: (a= exprFunctional )+
int cnt23=0;
for ( ; ; )
@@ -2707,7 +2707,7 @@ public partial class ActionEvaluator : TreeParser
#endif


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2782,7 +2782,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,DOT,Follow._DOT_in_attributeCompiled1386);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._exprCompiled_in_attributeCompiled1388);
exprCompiled(gen);

@@ -2825,14 +2825,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_attributeCompiled1412);

-					Match(input, TokenConstants.Down, null);
+					Match(input, TokenTypes.Down, null);
PushFollow(Follow._exprCompiled_in_attributeCompiled1414);
exprCompiled(gen);

state._fsp--;


-					Match(input, TokenConstants.Up, null);
+					Match(input, TokenTypes.Up, null);

}
break;
@@ -2845,7 +2845,7 @@ public partial class ActionEvaluator : TreeParser
#endif


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2973,7 +2973,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,DOT,Follow._DOT_in_attributeFunctional1489);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._exprFunctional_in_attributeFunctional1493);
a=exprFunctional();

@@ -3017,14 +3017,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_attributeFunctional1516);

-					Match(input, TokenConstants.Down, null);
+					Match(input, TokenTypes.Down, null);
PushFollow(Follow._exprFunctional_in_attributeFunctional1520);
b=exprFunctional();

state._fsp--;


-					Match(input, TokenConstants.Up, null);
+					Match(input, TokenTypes.Up, null);

#if COMPILE_EXPRESSIONS
func = (chunk,self,writer) => chunk.GetObjectProperty( self, a(chunk,self,writer), b(chunk,self,writer) );
@@ -3037,7 +3037,7 @@ public partial class ActionEvaluator : TreeParser
}


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -3135,7 +3135,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,INCLUDE,Follow._INCLUDE_in_templateIncludeCompiled1592);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Language\\ActionEvaluator.g3:721:4: ( ID args= . | ^( VALUE exprCompiled[$gen] args= . ) )
int alt29=2;
int LA29_0 = input.LA(1);
@@ -3175,7 +3175,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_templateIncludeCompiled1618);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._exprCompiled_in_templateIncludeCompiled1620);
exprCompiled(gen);

@@ -3184,7 +3184,7 @@ public partial class ActionEvaluator : TreeParser
args=(StringTemplateAST)input.LT(1);
MatchAny(input);

-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -3192,7 +3192,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

#if COMPILE_EXPRESSIONS
EmitTemplateInclude( gen, args );
@@ -3233,7 +3233,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,INCLUDE,Follow._INCLUDE_in_templateIncludeFunctional1657);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Language\\ActionEvaluator.g3:739:4: ( ID args= . | ^( VALUE exprFunctional args= . ) )
int alt30=2;
int LA30_0 = input.LA(1);
@@ -3268,7 +3268,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_templateIncludeFunctional1677);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._exprFunctional_in_templateIncludeFunctional1679);
exprFunctional31=exprFunctional();

@@ -3277,7 +3277,7 @@ public partial class ActionEvaluator : TreeParser
args=(StringTemplateAST)input.LT(1);
MatchAny(input);

-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -3285,7 +3285,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

#if COMPILE_EXPRESSIONS
if ( ID30 != null )
@@ -3349,7 +3349,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,FUNCTION,Follow._FUNCTION_in_functionCompiled1712);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Language\\ActionEvaluator.g3:782:4: ( 'first' singleFunctionArgCompiled[$gen] | 'rest' singleFunctionArgCompiled[$gen] | 'last' singleFunctionArgCompiled[$gen] | 'length' singleFunctionArgCompiled[$gen] | 'strip' singleFunctionArgCompiled[$gen] | 'trunc' singleFunctionArgCompiled[$gen] )
int alt31=6;
switch ( input.LA(1) )
@@ -3500,7 +3500,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -3534,7 +3534,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,FUNCTION,Follow._FUNCTION_in_functionFunctional1839);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Language\\ActionEvaluator.g3:824:4: ( 'first' a= singleFunctionArgFunctional | 'rest' a= singleFunctionArgFunctional | 'last' a= singleFunctionArgFunctional | 'length' a= singleFunctionArgFunctional | 'strip' a= singleFunctionArgFunctional | 'trunc' a= singleFunctionArgFunctional )
int alt32=6;
switch ( input.LA(1) )
@@ -3685,7 +3685,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -3719,7 +3719,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,LIST,Follow._LIST_in_listCompiled1974);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Language\\ActionEvaluator.g3:872:4: ( exprCompiled[$gen] | NOTHING )+
int cnt33=0;
for ( ; ; )
@@ -3782,7 +3782,7 @@ public partial class ActionEvaluator : TreeParser



-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

#if COMPILE_EXPRESSIONS
EmitCatList(gen,elements);
@@ -3824,7 +3824,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,LIST,Follow._LIST_in_listFunctional2037);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Language\\ActionEvaluator.g3:899:4: ( exprFunctional | NOTHING )+
int cnt34=0;
for ( ; ; )
@@ -3888,7 +3888,7 @@ public partial class ActionEvaluator : TreeParser



-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

#if COMPILE_EXPRESSIONS
func = (chunk,self,writer) =>
@@ -3927,14 +3927,14 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,SINGLEVALUEARG,Follow._SINGLEVALUEARG_in_singleFunctionArgCompiled2091);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
PushFollow(Follow._exprCompiled_in_singleFunctionArgCompiled2093);
exprCompiled(gen);

state._fsp--;


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -3968,7 +3968,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,SINGLEVALUEARG,Follow._SINGLEVALUEARG_in_singleFunctionArgFunctional2113);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
PushFollow(Follow._exprFunctional_in_singleFunctionArgFunctional2115);
exprFunctional33=exprFunctional();

@@ -3976,7 +3976,7 @@ public partial class ActionEvaluator : TreeParser

func = exprFunctional33;

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -4009,7 +4009,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,TEMPLATE,Follow._TEMPLATE_in_templateCompiled2133);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Language\\ActionEvaluator.g3:936:4: ( ID args= . |anon= ANONYMOUS_TEMPLATE | ^( VALUE n= exprCompiled[$gen] args2= . ) )
int alt35=3;
switch ( input.LA(1) )
@@ -4070,7 +4070,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_templateCompiled2177);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._exprCompiled_in_templateCompiled2181);
exprCompiled(gen);

@@ -4084,7 +4084,7 @@ public partial class ActionEvaluator : TreeParser
#endif


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -4092,7 +4092,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -4130,7 +4130,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,TEMPLATE,Follow._TEMPLATE_in_templateFunctional2227);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Language\\ActionEvaluator.g3:967:4: ( ID args= . |anon= ANONYMOUS_TEMPLATE | ^( VALUE n= expr args2= . ) )
int alt36=3;
switch ( input.LA(1) )
@@ -4212,7 +4212,7 @@ public partial class ActionEvaluator : TreeParser
{
Match(input,VALUE,Follow._VALUE_in_templateFunctional2271);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._expr_in_templateFunctional2275);
n=expr();

@@ -4242,7 +4242,7 @@ public partial class ActionEvaluator : TreeParser
#endif


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -4250,7 +4250,7 @@ public partial class ActionEvaluator : TreeParser
}


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

diff --git a/Antlr3.StringTemplate/Language/ActionLexer.cs b/Antlr3.StringTemplate/Language/ActionLexer.cs
index 01b4baf..5d9b89b 100644
--- a/Antlr3.StringTemplate/Language/ActionLexer.cs
+++ b/Antlr3.StringTemplate/Language/ActionLexer.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\Action.g3 2009-04-11 17:03:16
+// $ANTLR 3.1.2 Language\\Action.g3 2009-04-17 13:45:46

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -692,7 +692,7 @@ public partial class ActionLexer : Lexer
{
int ESC_CHAR1Start300 = GetCharIndex();
mESC_CHAR(out uc, false); if (state.failed) return ;
-					ESC_CHAR1 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ESC_CHAR1Start300, GetCharIndex()-1);
+					ESC_CHAR1 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ESC_CHAR1Start300, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append( (ESC_CHAR1!=null?ESC_CHAR1.Text:null) );
@@ -792,7 +792,7 @@ public partial class ActionLexer : Lexer

int aStart368 = GetCharIndex();
mID(); if (state.failed) return ;
-			a = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, aStart368, GetCharIndex()-1);
+			a = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, aStart368, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
args.Add((a!=null?a.Text:null));
@@ -918,7 +918,7 @@ public partial class ActionLexer : Lexer

int a2Start390 = GetCharIndex();
mID(); if (state.failed) return ;
-					a2 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, a2Start390, GetCharIndex()-1);
+					a2 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, a2Start390, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
args.Add((a2!=null?a2.Text:null));
@@ -1027,7 +1027,7 @@ public partial class ActionLexer : Lexer
{
int ESC_CHAR2Start460 = GetCharIndex();
mESC_CHAR(out uc, false); if (state.failed) return ;
-					ESC_CHAR2 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ESC_CHAR2Start460, GetCharIndex()-1);
+					ESC_CHAR2 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ESC_CHAR2Start460, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((ESC_CHAR2!=null?ESC_CHAR2.Text:null));
diff --git a/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.cs b/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.cs
index 0fe27d3..17bdc83 100644
--- a/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.cs
+++ b/Antlr3.StringTemplate/Language/AngleBracketTemplateLexer.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\AngleBracketTemplateLexer.g3 2009-04-10 15:18:31
+// $ANTLR 3.1.2 Language\\AngleBracketTemplateLexer.g3 2009-04-17 13:45:31

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -359,7 +359,7 @@ public partial class AngleBracketTemplateLexer : Lexer
Match('('); if (state.failed) return ;
int expStart171 = GetCharIndex();
mIF_EXPR(); if (state.failed) return ;
-					exp = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, expStart171, GetCharIndex()-1);
+					exp = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, expStart171, GetCharIndex()-1);
Match(")>"); if (state.failed) return ;

// Language\\AngleBracketTemplateLexer.g3:110:4: ( ( '\\r' )? '\\n' )?
@@ -452,7 +452,7 @@ public partial class AngleBracketTemplateLexer : Lexer
Match('('); if (state.failed) return ;
int expStart220 = GetCharIndex();
mIF_EXPR(); if (state.failed) return ;
-					exp = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, expStart220, GetCharIndex()-1);
+					exp = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, expStart220, GetCharIndex()-1);
Match(")>"); if (state.failed) return ;

// Language\\AngleBracketTemplateLexer.g3:117:4: ( ( '\\r' )? '\\n' )?
@@ -1311,7 +1311,7 @@ public partial class AngleBracketTemplateLexer : Lexer
{
int indStart686 = GetCharIndex();
mINDENT(); if (state.failed) return ;
-					ind = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, indStart686, GetCharIndex()-1);
+					ind = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, indStart686, GetCharIndex()-1);
if ( state.backtracking == 0 )
{

@@ -1489,7 +1489,7 @@ public partial class AngleBracketTemplateLexer : Lexer
{
int ESC1Start766 = GetCharIndex();
mESC(); if (state.failed) return ;
-					ESC1 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ESC1Start766, GetCharIndex()-1);
+					ESC1 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ESC1Start766, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((ESC1!=null?ESC1.Text:null));
@@ -1502,7 +1502,7 @@ public partial class AngleBracketTemplateLexer : Lexer
{
int stStart784 = GetCharIndex();
mSUBTEMPLATE(); if (state.failed) return ;
-					st = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, stStart784, GetCharIndex()-1);
+					st = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, stStart784, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((st!=null?st.Text:null));
@@ -1600,7 +1600,7 @@ public partial class AngleBracketTemplateLexer : Lexer
{
int stStart850 = GetCharIndex();
mSUBTEMPLATE(); if (state.failed) return ;
-						st = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, stStart850, GetCharIndex()-1);
+						st = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, stStart850, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((st!=null?st.Text:null));
@@ -1733,7 +1733,7 @@ public partial class AngleBracketTemplateLexer : Lexer
{
int ESC2Start943 = GetCharIndex();
mESC(); if (state.failed) return ;
-						ESC2 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ESC2Start943, GetCharIndex()-1);
+						ESC2 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ESC2Start943, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((ESC2!=null?ESC2.Text:null));
@@ -2121,16 +2121,16 @@ public partial class AngleBracketTemplateLexer : Lexer
Match('u'); if (state.failed) return ;
int aStart1191 = GetCharIndex();
mHEX(); if (state.failed) return ;
-				a = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, aStart1191, GetCharIndex()-1);
+				a = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, aStart1191, GetCharIndex()-1);
int bStart1195 = GetCharIndex();
mHEX(); if (state.failed) return ;
-				b = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, bStart1195, GetCharIndex()-1);
+				b = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, bStart1195, GetCharIndex()-1);
int cStart1199 = GetCharIndex();
mHEX(); if (state.failed) return ;
-				c = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, cStart1199, GetCharIndex()-1);
+				c = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, cStart1199, GetCharIndex()-1);
int dStart1203 = GetCharIndex();
mHEX(); if (state.failed) return ;
-				d = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, dStart1203, GetCharIndex()-1);
+				d = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, dStart1203, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
uc = (char)int.Parse((a!=null?a.Text:null)+(b!=null?b.Text:null)+(c!=null?c.Text:null)+(d!=null?d.Text:null), System.Globalization.NumberStyles.AllowHexSpecifier);
diff --git a/Antlr3.StringTemplate/Language/TemplateLexer.cs b/Antlr3.StringTemplate/Language/TemplateLexer.cs
index 014a80b..22fa08c 100644
--- a/Antlr3.StringTemplate/Language/TemplateLexer.cs
+++ b/Antlr3.StringTemplate/Language/TemplateLexer.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\Template.g3 2009-04-10 15:18:33
+// $ANTLR 3.1.2 Language\\Template.g3 2009-04-17 13:45:38

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -467,7 +467,7 @@ public partial class TemplateLexer : Lexer
Match('('); if (state.failed) return ;
int expStart206 = GetCharIndex();
mIF_EXPR(); if (state.failed) return ;
-					exp = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, expStart206, GetCharIndex()-1);
+					exp = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, expStart206, GetCharIndex()-1);
Match(")$"); if (state.failed) return ;

if ( state.backtracking == 0 )
@@ -560,7 +560,7 @@ public partial class TemplateLexer : Lexer
Match('('); if (state.failed) return ;
int expStart265 = GetCharIndex();
mIF_EXPR(); if (state.failed) return ;
-					exp = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, expStart265, GetCharIndex()-1);
+					exp = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, expStart265, GetCharIndex()-1);
Match(")$"); if (state.failed) return ;

if ( state.backtracking == 0 )
@@ -1401,7 +1401,7 @@ public partial class TemplateLexer : Lexer
{
int indStart759 = GetCharIndex();
mINDENT(); if (state.failed) return ;
-					ind = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, indStart759, GetCharIndex()-1);
+					ind = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, indStart759, GetCharIndex()-1);
if ( state.backtracking == 0 )
{

@@ -1522,7 +1522,7 @@ public partial class TemplateLexer : Lexer
{
int ESC1Start821 = GetCharIndex();
mESC(); if (state.failed) return ;
-					ESC1 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ESC1Start821, GetCharIndex()-1);
+					ESC1 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ESC1Start821, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((ESC1!=null?ESC1.Text:null));
@@ -1535,7 +1535,7 @@ public partial class TemplateLexer : Lexer
{
int stStart837 = GetCharIndex();
mSUBTEMPLATE(); if (state.failed) return ;
-					st = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, stStart837, GetCharIndex()-1);
+					st = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, stStart837, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((st!=null?st.Text:null));
@@ -1633,7 +1633,7 @@ public partial class TemplateLexer : Lexer
{
int stStart895 = GetCharIndex();
mSUBTEMPLATE(); if (state.failed) return ;
-						st = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, stStart895, GetCharIndex()-1);
+						st = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, stStart895, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((st!=null?st.Text:null));
@@ -1766,7 +1766,7 @@ public partial class TemplateLexer : Lexer
{
int ESC2Start981 = GetCharIndex();
mESC(); if (state.failed) return ;
-						ESC2 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ESC2Start981, GetCharIndex()-1);
+						ESC2 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ESC2Start981, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((ESC2!=null?ESC2.Text:null));
@@ -2225,16 +2225,16 @@ public partial class TemplateLexer : Lexer

int aStart1192 = GetCharIndex();
mHEX(); if (state.failed) return ;
-				a = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, aStart1192, GetCharIndex()-1);
+				a = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, aStart1192, GetCharIndex()-1);
int bStart1196 = GetCharIndex();
mHEX(); if (state.failed) return ;
-				b = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, bStart1196, GetCharIndex()-1);
+				b = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, bStart1196, GetCharIndex()-1);
int cStart1200 = GetCharIndex();
mHEX(); if (state.failed) return ;
-				c = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, cStart1200, GetCharIndex()-1);
+				c = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, cStart1200, GetCharIndex()-1);
int dStart1204 = GetCharIndex();
mHEX(); if (state.failed) return ;
-				d = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, dStart1204, GetCharIndex()-1);
+				d = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, dStart1204, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
uc = (char)int.Parse((a!=null?a.Text:null)+(b!=null?b.Text:null)+(c!=null?c.Text:null)+(d!=null?d.Text:null), System.Globalization.NumberStyles.AllowHexSpecifier);
diff --git a/Antlr3.Test/TestTreeNodeStream.cs b/Antlr3.Test/TestTreeNodeStream.cs
index a464959..055a803 100644
--- a/Antlr3.Test/TestTreeNodeStream.cs
+++ b/Antlr3.Test/TestTreeNodeStream.cs
@@ -172,16 +172,16 @@ namespace AntlrUnitTests

ITreeNodeStream stream = newStream( t );
assertEquals( 101, ( (ITree)stream.LT( 1 ) ).Type );
-            assertEquals( TokenConstants.Down, ( (ITree)stream.LT( 2 ) ).Type );
+            assertEquals( TokenTypes.Down, ( (ITree)stream.LT( 2 ) ).Type );
assertEquals( 102, ( (ITree)stream.LT( 3 ) ).Type );
-            assertEquals( TokenConstants.Down, ( (ITree)stream.LT( 4 ) ).Type );
+            assertEquals( TokenTypes.Down, ( (ITree)stream.LT( 4 ) ).Type );
assertEquals( 103, ( (ITree)stream.LT( 5 ) ).Type );
-            assertEquals( TokenConstants.Up, ( (ITree)stream.LT( 6 ) ).Type );
+            assertEquals( TokenTypes.Up, ( (ITree)stream.LT( 6 ) ).Type );
assertEquals( 104, ( (ITree)stream.LT( 7 ) ).Type );
-            assertEquals( TokenConstants.Up, ( (ITree)stream.LT( 8 ) ).Type );
-            assertEquals( TokenConstants.Eof, ( (ITree)stream.LT( 9 ) ).Type );
+            assertEquals( TokenTypes.Up, ( (ITree)stream.LT( 8 ) ).Type );
+            assertEquals( TokenTypes.EndOfFile, ( (ITree)stream.LT( 9 ) ).Type );
// check way ahead
-            assertEquals( TokenConstants.Eof, ( (ITree)stream.LT( 100 ) ).Type );
+            assertEquals( TokenTypes.EndOfFile, ( (ITree)stream.LT( 100 ) ).Type );
}

[TestMethod]
@@ -206,8 +206,8 @@ namespace AntlrUnitTests
stream.LT( 1 );
stream.Consume();
}
-            assertEquals( TokenConstants.Eof, ( (ITree)stream.LT( 1 ) ).Type );
-            assertEquals( TokenConstants.Up, ( (ITree)stream.LT( -1 ) ).Type );
+            assertEquals( TokenTypes.EndOfFile, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenTypes.Up, ( (ITree)stream.LT( -1 ) ).Type );
stream.Rewind( m );      // REWIND

// consume til end again :)
@@ -216,8 +216,8 @@ namespace AntlrUnitTests
stream.LT( 1 );
stream.Consume();
}
-            assertEquals( TokenConstants.Eof, ( (ITree)stream.LT( 1 ) ).Type );
-            assertEquals( TokenConstants.Up, ( (ITree)stream.LT( -1 ) ).Type );
+            assertEquals( TokenTypes.EndOfFile, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenTypes.Up, ( (ITree)stream.LT( -1 ) ).Type );
}

[TestMethod]
@@ -252,19 +252,19 @@ namespace AntlrUnitTests

assertEquals( 107, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenConstants.Up, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenTypes.Up, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenConstants.Up, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenTypes.Up, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
assertEquals( 104, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
// now we're past rewind position
assertEquals( 105, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenConstants.Up, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenTypes.Up, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenConstants.Eof, ( (ITree)stream.LT( 1 ) ).Type );
-            assertEquals( TokenConstants.Up, ( (ITree)stream.LT( -1 ) ).Type );
+            assertEquals( TokenTypes.EndOfFile, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenTypes.Up, ( (ITree)stream.LT( -1 ) ).Type );
}

[TestMethod]
@@ -294,17 +294,17 @@ namespace AntlrUnitTests
stream.Rewind( m2 );      // REWIND to 102
assertEquals( 102, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenConstants.Down, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenTypes.Down, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
// stop at 103 and rewind to start
stream.Rewind( m ); // REWIND to 101
assertEquals( 101, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenConstants.Down, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenTypes.Down, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
assertEquals( 102, ( (ITree)stream.LT( 1 ) ).Type );
stream.Consume();
-            assertEquals( TokenConstants.Down, ( (ITree)stream.LT( 1 ) ).Type );
+            assertEquals( TokenTypes.Down, ( (ITree)stream.LT( 1 ) ).Type );
}

[TestMethod]
@@ -337,9 +337,9 @@ namespace AntlrUnitTests
StringBuilder buf = new StringBuilder();
object o = nodes.LT( 1 );
int type = adaptor.GetType( o );
-            while ( o != null && type != TokenConstants.Eof )
+            while ( o != null && type != TokenTypes.EndOfFile )
{
-                if ( !( type == TokenConstants.Down || type == TokenConstants.Up ) )
+                if ( !( type == TokenTypes.Down || type == TokenTypes.Up ) )
{
buf.Append( " " );
buf.Append( type );
diff --git a/Antlr3/Analysis/Label.cs b/Antlr3/Analysis/Label.cs
index 1df1e45..8be998d 100644
--- a/Antlr3/Analysis/Label.cs
+++ b/Antlr3/Analysis/Label.cs
@@ -38,7 +38,7 @@ namespace Antlr3.Analysis
using IIntSet = Antlr3.Misc.IIntSet;
using InvalidOperationException = System.InvalidOperationException;
using IntervalSet = Antlr3.Misc.IntervalSet;
-    using TokenConstants = Antlr.Runtime.TokenConstants;
+    using TokenTypes = Antlr.Runtime.TokenTypes;

/** A state machine transition label.  A label can be either a simple
*  label such as a token or character.  A label can be a set of char or
@@ -111,14 +111,13 @@ namespace Antlr3.Analysis
*  this issue.
*/
public const int EOR_TOKEN_TYPE =
-            TokenConstants.EorTokenType;
+            TokenTypes.EndOfRule;

-        public const int DOWN = TokenConstants.Down;
-        public const int UP = TokenConstants.Up;
+        public const int DOWN = TokenTypes.Down;
+        public const int UP = TokenTypes.Up;

/** tokens and char range overlap; tokens are MIN_TOKEN_TYPE..n */
-        public const int MIN_TOKEN_TYPE =
-            TokenConstants.MinTokenType;
+        public const int MIN_TOKEN_TYPE = TokenTypes.Min;

/** The wildcard '.' char atom implies all valid characters==UNICODE */
//public static readonly IIntSet ALLCHAR = IntervalSet.of( MIN_CHAR_VALUE, MAX_CHAR_VALUE );
diff --git a/Antlr3/Grammars/ANTLR.g3 b/Antlr3/Grammars/ANTLR.g3
index f586d4c..c146af0 100644
--- a/Antlr3/Grammars/ANTLR.g3
+++ b/Antlr3/Grammars/ANTLR.g3
@@ -440,25 +440,14 @@ altList[IDictionary<string, object> opts]
finally { currentBlockAST = save; }

alternative
-@init
-{
-	GrammarAST eoa = null;
-	GrammarAST altRoot = null;
-}
-	:	( -> EOA["<end-of-alt>"] )
-		{ eoa = $tree; }
-		( -> ALT[$start,"ALT"] )
-		{ altRoot = $tree; }
-
-		(	( el+=element )+
-			-> ^({altRoot} $el+ {eoa})
-		|
-			-> ^({altRoot} EPSILON[$start,"epsilon"] {eoa})
-		)
+	:	element+
+		-> ^(ALT[$start,"ALT"] element+ EOA["<end-of-alt>"])
+	|	// epsilon alt
+		-> ^(ALT[$start,"ALT"] EPSILON[$start,"epsilon"] EOA["<end-of-alt>"])
;

exceptionGroup
-	:	( exceptionHandler )+ ( finallyClause )?
+	:	exceptionHandler+ finallyClause?
|	finallyClause
;

@@ -512,7 +501,7 @@ atom
;

ruleref
-	:	rr=RULE_REF^ ( ARG_ACTION )? (ROOT^|BANG^)?
+	:	RULE_REF^ ARG_ACTION? (ROOT^|BANG^)?
;

notSet
@@ -523,17 +512,16 @@ notSet
;

treeRoot
-	:	{atTreeRoot=true;}
-		(	id (ASSIGN^|PLUS_ASSIGN^) (atom|block)
-		|	atom
-		|	block
-		)
-		{atTreeRoot=false;}
+@init{atTreeRoot=true;}
+@after{atTreeRoot=false;}
+	:	id (ASSIGN^|PLUS_ASSIGN^) (atom|block)
+	|	atom
+	|	block
;

tree_
:	TREE_BEGIN^
-		treeRoot ( element )+
+		treeRoot element+
RPAREN!
;

@@ -640,8 +628,8 @@ currentBlockAST = save;
;

notTerminal
-	:	cl=CHAR_LITERAL
-	|	tr=TOKEN_REF
+	:	CHAR_LITERAL
+	|	TOKEN_REF
|	STRING_LITERAL
;

@@ -742,7 +730,7 @@ rewrite_ebnf

rewrite_tree
:	TREE_BEGIN^
-			rewrite_atom ( rewrite_element )*
+			rewrite_atom rewrite_element*
RPAREN!
;

diff --git a/Antlr3/Grammars/ANTLRLexer.cs b/Antlr3/Grammars/ANTLRLexer.cs
index c35d572..0fb744f 100644
--- a/Antlr3/Grammars/ANTLRLexer.cs
+++ b/Antlr3/Grammars/ANTLRLexer.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\ANTLR.g3 2009-04-16 21:27:00
+// $ANTLR 3.1.2 Grammars\\ANTLR.g3 2009-04-17 13:46:21

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -508,8 +508,8 @@ public partial class ANTLRLexer : Lexer
{
try
{
-			// Grammars\\ANTLR.g3:816:27: ()
-			// Grammars\\ANTLR.g3:816:27:
+			// Grammars\\ANTLR.g3:804:27: ()
+			// Grammars\\ANTLR.g3:804:27:
{


@@ -527,8 +527,8 @@ public partial class ANTLRLexer : Lexer
{
try
{
-			// Grammars\\ANTLR.g3:817:26: ()
-			// Grammars\\ANTLR.g3:817:26:
+			// Grammars\\ANTLR.g3:805:26: ()
+			// Grammars\\ANTLR.g3:805:26:
{


@@ -546,8 +546,8 @@ public partial class ANTLRLexer : Lexer
{
try
{
-			// Grammars\\ANTLR.g3:818:24: ()
-			// Grammars\\ANTLR.g3:818:24:
+			// Grammars\\ANTLR.g3:806:24: ()
+			// Grammars\\ANTLR.g3:806:24:
{


@@ -565,8 +565,8 @@ public partial class ANTLRLexer : Lexer
{
try
{
-			// Grammars\\ANTLR.g3:819:20: ()
-			// Grammars\\ANTLR.g3:819:20:
+			// Grammars\\ANTLR.g3:807:20: ()
+			// Grammars\\ANTLR.g3:807:20:
{


@@ -586,10 +586,10 @@ public partial class ANTLRLexer : Lexer
{
int _type = WS;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:822:4: ( ( ' ' | '\\t' | ( '\\r' )? '\\n' ) )
-			// Grammars\\ANTLR.g3:822:4: ( ' ' | '\\t' | ( '\\r' )? '\\n' )
+			// Grammars\\ANTLR.g3:810:4: ( ( ' ' | '\\t' | ( '\\r' )? '\\n' ) )
+			// Grammars\\ANTLR.g3:810:4: ( ' ' | '\\t' | ( '\\r' )? '\\n' )
{
-			// Grammars\\ANTLR.g3:822:4: ( ' ' | '\\t' | ( '\\r' )? '\\n' )
+			// Grammars\\ANTLR.g3:810:4: ( ' ' | '\\t' | ( '\\r' )? '\\n' )
int alt2=3;
switch ( input.LA(1) )
{
@@ -621,23 +621,23 @@ public partial class ANTLRLexer : Lexer
switch ( alt2 )
{
case 1:
-				// Grammars\\ANTLR.g3:822:6: ' '
+				// Grammars\\ANTLR.g3:810:6: ' '
{
Match(' '); if (state.failed) return ;

}
break;
case 2:
-				// Grammars\\ANTLR.g3:823:5: '\\t'
+				// Grammars\\ANTLR.g3:811:5: '\\t'
{
Match('\t'); if (state.failed) return ;

}
break;
case 3:
-				// Grammars\\ANTLR.g3:824:5: ( '\\r' )? '\\n'
+				// Grammars\\ANTLR.g3:812:5: ( '\\r' )? '\\n'
{
-				// Grammars\\ANTLR.g3:824:5: ( '\\r' )?
+				// Grammars\\ANTLR.g3:812:5: ( '\\r' )?
int alt1=2;
int LA1_0 = input.LA(1);

@@ -648,7 +648,7 @@ public partial class ANTLRLexer : Lexer
switch ( alt1 )
{
case 1:
-					// Grammars\\ANTLR.g3:824:6: '\\r'
+					// Grammars\\ANTLR.g3:812:6: '\\r'
{
Match('\r'); if (state.failed) return ;

@@ -687,10 +687,10 @@ public partial class ANTLRLexer : Lexer
{
int _type = COMMENT;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:830:4: ( ( SL_COMMENT | ML_COMMENT[ref $type] ) )
-			// Grammars\\ANTLR.g3:830:4: ( SL_COMMENT | ML_COMMENT[ref $type] )
+			// Grammars\\ANTLR.g3:818:4: ( ( SL_COMMENT | ML_COMMENT[ref $type] ) )
+			// Grammars\\ANTLR.g3:818:4: ( SL_COMMENT | ML_COMMENT[ref $type] )
{
-			// Grammars\\ANTLR.g3:830:4: ( SL_COMMENT | ML_COMMENT[ref $type] )
+			// Grammars\\ANTLR.g3:818:4: ( SL_COMMENT | ML_COMMENT[ref $type] )
int alt3=2;
int LA3_0 = input.LA(1);

@@ -724,14 +724,14 @@ public partial class ANTLRLexer : Lexer
switch ( alt3 )
{
case 1:
-				// Grammars\\ANTLR.g3:830:6: SL_COMMENT
+				// Grammars\\ANTLR.g3:818:6: SL_COMMENT
{
mSL_COMMENT(); if (state.failed) return ;

}
break;
case 2:
-				// Grammars\\ANTLR.g3:830:19: ML_COMMENT[ref $type]
+				// Grammars\\ANTLR.g3:818:19: ML_COMMENT[ref $type]
{
mML_COMMENT(ref _type); if (state.failed) return ;

@@ -764,24 +764,24 @@ public partial class ANTLRLexer : Lexer
{
try
{
-			// Grammars\\ANTLR.g3:840:4: ( '//' (=> ' $ANTLR ' SRC ( ( '\\r' )? '\\n' )? | (~ ( '\\r' | '\\n' ) )* ( ( '\\r' )? '\\n' )? ) )
-			// Grammars\\ANTLR.g3:840:4: '//' (=> ' $ANTLR ' SRC ( ( '\\r' )? '\\n' )? | (~ ( '\\r' | '\\n' ) )* ( ( '\\r' )? '\\n' )? )
+			// Grammars\\ANTLR.g3:828:4: ( '//' (=> ' $ANTLR ' SRC ( ( '\\r' )? '\\n' )? | (~ ( '\\r' | '\\n' ) )* ( ( '\\r' )? '\\n' )? ) )
+			// Grammars\\ANTLR.g3:828:4: '//' (=> ' $ANTLR ' SRC ( ( '\\r' )? '\\n' )? | (~ ( '\\r' | '\\n' ) )* ( ( '\\r' )? '\\n' )? )
{
Match("//"); if (state.failed) return ;

-			// Grammars\\ANTLR.g3:841:3: (=> ' $ANTLR ' SRC ( ( '\\r' )? '\\n' )? | (~ ( '\\r' | '\\n' ) )* ( ( '\\r' )? '\\n' )? )
+			// Grammars\\ANTLR.g3:829:3: (=> ' $ANTLR ' SRC ( ( '\\r' )? '\\n' )? | (~ ( '\\r' | '\\n' ) )* ( ( '\\r' )? '\\n' )? )
int alt9=2;
alt9 = dfa9.Predict(input);
switch ( alt9 )
{
case 1:
-				// Grammars\\ANTLR.g3:841:5: => ' $ANTLR ' SRC ( ( '\\r' )? '\\n' )?
+				// Grammars\\ANTLR.g3:829:5: => ' $ANTLR ' SRC ( ( '\\r' )? '\\n' )?
{

Match(" $ANTLR "); if (state.failed) return ;

mSRC(); if (state.failed) return ;
-				// Grammars\\ANTLR.g3:841:35: ( ( '\\r' )? '\\n' )?
+				// Grammars\\ANTLR.g3:829:35: ( ( '\\r' )? '\\n' )?
int alt5=2;
int LA5_0 = input.LA(1);

@@ -792,9 +792,9 @@ public partial class ANTLRLexer : Lexer
switch ( alt5 )
{
case 1:
-					// Grammars\\ANTLR.g3:841:36: ( '\\r' )? '\\n'
+					// Grammars\\ANTLR.g3:829:36: ( '\\r' )? '\\n'
{
-					// Grammars\\ANTLR.g3:841:36: ( '\\r' )?
+					// Grammars\\ANTLR.g3:829:36: ( '\\r' )?
int alt4=2;
int LA4_0 = input.LA(1);

@@ -805,7 +805,7 @@ public partial class ANTLRLexer : Lexer
switch ( alt4 )
{
case 1:
-						// Grammars\\ANTLR.g3:841:37: '\\r'
+						// Grammars\\ANTLR.g3:829:37: '\\r'
{
Match('\r'); if (state.failed) return ;

@@ -825,9 +825,9 @@ public partial class ANTLRLexer : Lexer
}
break;
case 2:
-				// Grammars\\ANTLR.g3:842:5: (~ ( '\\r' | '\\n' ) )* ( ( '\\r' )? '\\n' )?
+				// Grammars\\ANTLR.g3:830:5: (~ ( '\\r' | '\\n' ) )* ( ( '\\r' )? '\\n' )?
{
-				// Grammars\\ANTLR.g3:842:5: (~ ( '\\r' | '\\n' ) )*
+				// Grammars\\ANTLR.g3:830:5: (~ ( '\\r' | '\\n' ) )*
for ( ; ; )
{
int alt6=2;
@@ -859,7 +859,7 @@ public partial class ANTLRLexer : Lexer
;


-				// Grammars\\ANTLR.g3:842:19: ( ( '\\r' )? '\\n' )?
+				// Grammars\\ANTLR.g3:830:19: ( ( '\\r' )? '\\n' )?
int alt8=2;
int LA8_0 = input.LA(1);

@@ -870,9 +870,9 @@ public partial class ANTLRLexer : Lexer
switch ( alt8 )
{
case 1:
-					// Grammars\\ANTLR.g3:842:20: ( '\\r' )? '\\n'
+					// Grammars\\ANTLR.g3:830:20: ( '\\r' )? '\\n'
{
-					// Grammars\\ANTLR.g3:842:20: ( '\\r' )?
+					// Grammars\\ANTLR.g3:830:20: ( '\\r' )?
int alt7=2;
int LA7_0 = input.LA(1);

@@ -883,7 +883,7 @@ public partial class ANTLRLexer : Lexer
switch ( alt7 )
{
case 1:
-						// Grammars\\ANTLR.g3:842:21: '\\r'
+						// Grammars\\ANTLR.g3:830:21: '\\r'
{
Match('\r'); if (state.failed) return ;

@@ -920,8 +920,8 @@ public partial class ANTLRLexer : Lexer
{
try
{
-			// Grammars\\ANTLR.g3:848:4: ( '/*' ( . )* '*/' )
-			// Grammars\\ANTLR.g3:848:4: '/*' ( . )* '*/'
+			// Grammars\\ANTLR.g3:836:4: ( '/*' ( . )* '*/' )
+			// Grammars\\ANTLR.g3:836:4: '/*' ( . )* '*/'
{
Match("/*"); if (state.failed) return ;

@@ -929,7 +929,7 @@ public partial class ANTLRLexer : Lexer
{
type = (input.LA(1) == '*' && input.LA(2) != '/') ? DOC_COMMENT : ML_COMMENT;
}
-			// Grammars\\ANTLR.g3:850:3: ( . )*
+			// Grammars\\ANTLR.g3:838:3: ( . )*
for ( ; ; )
{
int alt10=2;
@@ -959,7 +959,7 @@ public partial class ANTLRLexer : Lexer
switch ( alt10 )
{
case 1:
-					// Grammars\\ANTLR.g3:850:0: .
+					// Grammars\\ANTLR.g3:838:0: .
{
MatchAny(); if (state.failed) return ;

@@ -994,8 +994,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = OPEN_ELEMENT_OPTION;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:854:4: ( '<' )
-			// Grammars\\ANTLR.g3:854:4: '<'
+			// Grammars\\ANTLR.g3:842:4: ( '<' )
+			// Grammars\\ANTLR.g3:842:4: '<'
{
Match('<'); if (state.failed) return ;

@@ -1017,8 +1017,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = CLOSE_ELEMENT_OPTION;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:858:4: ( '>' )
-			// Grammars\\ANTLR.g3:858:4: '>'
+			// Grammars\\ANTLR.g3:846:4: ( '>' )
+			// Grammars\\ANTLR.g3:846:4: '>'
{
Match('>'); if (state.failed) return ;

@@ -1040,8 +1040,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = AMPERSAND;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:861:13: ( '@' )
-			// Grammars\\ANTLR.g3:861:13: '@'
+			// Grammars\\ANTLR.g3:849:13: ( '@' )
+			// Grammars\\ANTLR.g3:849:13: '@'
{
Match('@'); if (state.failed) return ;

@@ -1063,8 +1063,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = COMMA;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:863:9: ( ',' )
-			// Grammars\\ANTLR.g3:863:9: ','
+			// Grammars\\ANTLR.g3:851:9: ( ',' )
+			// Grammars\\ANTLR.g3:851:9: ','
{
Match(','); if (state.failed) return ;

@@ -1086,8 +1086,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = QUESTION;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:865:12: ( '?' )
-			// Grammars\\ANTLR.g3:865:12: '?'
+			// Grammars\\ANTLR.g3:853:12: ( '?' )
+			// Grammars\\ANTLR.g3:853:12: '?'
{
Match('?'); if (state.failed) return ;

@@ -1109,8 +1109,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = TREE_BEGIN;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:867:14: ( '^(' )
-			// Grammars\\ANTLR.g3:867:14: '^('
+			// Grammars\\ANTLR.g3:855:14: ( '^(' )
+			// Grammars\\ANTLR.g3:855:14: '^('
{
Match("^("); if (state.failed) return ;

@@ -1133,8 +1133,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = LPAREN;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:869:9: ( '(' )
-			// Grammars\\ANTLR.g3:869:9: '('
+			// Grammars\\ANTLR.g3:857:9: ( '(' )
+			// Grammars\\ANTLR.g3:857:9: '('
{
Match('('); if (state.failed) return ;

@@ -1156,8 +1156,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = RPAREN;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:871:9: ( ')' )
-			// Grammars\\ANTLR.g3:871:9: ')'
+			// Grammars\\ANTLR.g3:859:9: ( ')' )
+			// Grammars\\ANTLR.g3:859:9: ')'
{
Match(')'); if (state.failed) return ;

@@ -1179,8 +1179,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = COLON;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:873:9: ( ':' )
-			// Grammars\\ANTLR.g3:873:9: ':'
+			// Grammars\\ANTLR.g3:861:9: ( ':' )
+			// Grammars\\ANTLR.g3:861:9: ':'
{
Match(':'); if (state.failed) return ;

@@ -1202,8 +1202,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = STAR;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:875:7: ( '*' )
-			// Grammars\\ANTLR.g3:875:7: '*'
+			// Grammars\\ANTLR.g3:863:7: ( '*' )
+			// Grammars\\ANTLR.g3:863:7: '*'
{
Match('*'); if (state.failed) return ;

@@ -1225,8 +1225,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = PLUS;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:877:7: ( '+' )
-			// Grammars\\ANTLR.g3:877:7: '+'
+			// Grammars\\ANTLR.g3:865:7: ( '+' )
+			// Grammars\\ANTLR.g3:865:7: '+'
{
Match('+'); if (state.failed) return ;

@@ -1248,8 +1248,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = ASSIGN;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:879:10: ( '=' )
-			// Grammars\\ANTLR.g3:879:10: '='
+			// Grammars\\ANTLR.g3:867:10: ( '=' )
+			// Grammars\\ANTLR.g3:867:10: '='
{
Match('='); if (state.failed) return ;

@@ -1271,8 +1271,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = PLUS_ASSIGN;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:881:15: ( '+=' )
-			// Grammars\\ANTLR.g3:881:15: '+='
+			// Grammars\\ANTLR.g3:869:15: ( '+=' )
+			// Grammars\\ANTLR.g3:869:15: '+='
{
Match("+="); if (state.failed) return ;

@@ -1295,8 +1295,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = IMPLIES;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:883:11: ( '=>' )
-			// Grammars\\ANTLR.g3:883:11: '=>'
+			// Grammars\\ANTLR.g3:871:11: ( '=>' )
+			// Grammars\\ANTLR.g3:871:11: '=>'
{
Match("=>"); if (state.failed) return ;

@@ -1319,8 +1319,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = REWRITE;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:885:11: ( '->' )
-			// Grammars\\ANTLR.g3:885:11: '->'
+			// Grammars\\ANTLR.g3:873:11: ( '->' )
+			// Grammars\\ANTLR.g3:873:11: '->'
{
Match("->"); if (state.failed) return ;

@@ -1343,8 +1343,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = SEMI;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:887:7: ( ';' )
-			// Grammars\\ANTLR.g3:887:7: ';'
+			// Grammars\\ANTLR.g3:875:7: ( ';' )
+			// Grammars\\ANTLR.g3:875:7: ';'
{
Match(';'); if (state.failed) return ;

@@ -1366,8 +1366,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = ROOT;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:889:8: ( '^' )
-			// Grammars\\ANTLR.g3:889:8: '^'
+			// Grammars\\ANTLR.g3:877:8: ( '^' )
+			// Grammars\\ANTLR.g3:877:8: '^'
{
Match('^'); if (state.failed) return ;
if ( state.backtracking == 0 )
@@ -1393,8 +1393,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = BANG;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:891:8: ( '!' )
-			// Grammars\\ANTLR.g3:891:8: '!'
+			// Grammars\\ANTLR.g3:879:8: ( '!' )
+			// Grammars\\ANTLR.g3:879:8: '!'
{
Match('!'); if (state.failed) return ;
if ( state.backtracking == 0 )
@@ -1420,8 +1420,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = OR;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:893:6: ( '|' )
-			// Grammars\\ANTLR.g3:893:6: '|'
+			// Grammars\\ANTLR.g3:881:6: ( '|' )
+			// Grammars\\ANTLR.g3:881:6: '|'
{
Match('|'); if (state.failed) return ;

@@ -1443,8 +1443,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = WILDCARD;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:895:12: ( '.' )
-			// Grammars\\ANTLR.g3:895:12: '.'
+			// Grammars\\ANTLR.g3:883:12: ( '.' )
+			// Grammars\\ANTLR.g3:883:12: '.'
{
Match('.'); if (state.failed) return ;

@@ -1466,8 +1466,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = ETC;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:897:7: ( '...' )
-			// Grammars\\ANTLR.g3:897:7: '...'
+			// Grammars\\ANTLR.g3:885:7: ( '...' )
+			// Grammars\\ANTLR.g3:885:7: '...'
{
Match("..."); if (state.failed) return ;

@@ -1490,8 +1490,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = RANGE;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:899:9: ( '..' )
-			// Grammars\\ANTLR.g3:899:9: '..'
+			// Grammars\\ANTLR.g3:887:9: ( '..' )
+			// Grammars\\ANTLR.g3:887:9: '..'
{
Match(".."); if (state.failed) return ;

@@ -1514,8 +1514,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = NOT;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:901:7: ( '~' )
-			// Grammars\\ANTLR.g3:901:7: '~'
+			// Grammars\\ANTLR.g3:889:7: ( '~' )
+			// Grammars\\ANTLR.g3:889:7: '~'
{
Match('~'); if (state.failed) return ;

@@ -1537,8 +1537,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = RCURLY;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:903:9: ( '}' )
-			// Grammars\\ANTLR.g3:903:9: '}'
+			// Grammars\\ANTLR.g3:891:9: ( '}' )
+			// Grammars\\ANTLR.g3:891:9: '}'
{
Match('}'); if (state.failed) return ;

@@ -1560,8 +1560,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = DOLLAR;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:905:10: ( '$' )
-			// Grammars\\ANTLR.g3:905:10: '$'
+			// Grammars\\ANTLR.g3:893:10: ( '$' )
+			// Grammars\\ANTLR.g3:893:10: '$'
{
Match('$'); if (state.failed) return ;

@@ -1583,8 +1583,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = STRAY_BRACKET;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:908:4: ( ']' )
-			// Grammars\\ANTLR.g3:908:4: ']'
+			// Grammars\\ANTLR.g3:896:4: ( ']' )
+			// Grammars\\ANTLR.g3:896:4: ']'
{
Match(']'); if (state.failed) return ;
if ( state.backtracking == 0 )
@@ -1617,11 +1617,11 @@ public partial class ANTLRLexer : Lexer
{
int _type = CHAR_LITERAL;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:920:4: ( '\\'' ( ESC |~ ( '\\\\' | '\\'' ) )* '\\'' )
-			// Grammars\\ANTLR.g3:920:4: '\\'' ( ESC |~ ( '\\\\' | '\\'' ) )* '\\''
+			// Grammars\\ANTLR.g3:908:4: ( '\\'' ( ESC |~ ( '\\\\' | '\\'' ) )* '\\'' )
+			// Grammars\\ANTLR.g3:908:4: '\\'' ( ESC |~ ( '\\\\' | '\\'' ) )* '\\''
{
Match('\''); if (state.failed) return ;
-			// Grammars\\ANTLR.g3:921:3: ( ESC |~ ( '\\\\' | '\\'' ) )*
+			// Grammars\\ANTLR.g3:909:3: ( ESC |~ ( '\\\\' | '\\'' ) )*
for ( ; ; )
{
int alt11=3;
@@ -1640,14 +1640,14 @@ public partial class ANTLRLexer : Lexer
switch ( alt11 )
{
case 1:
-					// Grammars\\ANTLR.g3:921:5: ESC
+					// Grammars\\ANTLR.g3:909:5: ESC
{
mESC(); if (state.failed) return ;

}
break;
case 2:
-					// Grammars\\ANTLR.g3:922:5: ~ ( '\\\\' | '\\'' )
+					// Grammars\\ANTLR.g3:910:5: ~ ( '\\\\' | '\\'' )
{
input.Consume();
state.failed=false;
@@ -1699,15 +1699,15 @@ public partial class ANTLRLexer : Lexer

System.Text.StringBuilder builder = new System.Text.StringBuilder();

-			// Grammars\\ANTLR.g3:939:4: ( '\"' (=> '\\\\' '\"' | '\\\\' c=~ '\"' |c=~ ( '\\\\' | '\"' ) )* '\"' )
-			// Grammars\\ANTLR.g3:939:4: '\"' (=> '\\\\' '\"' | '\\\\' c=~ '\"' |c=~ ( '\\\\' | '\"' ) )* '\"'
+			// Grammars\\ANTLR.g3:927:4: ( '\"' (=> '\\\\' '\"' | '\\\\' c=~ '\"' |c=~ ( '\\\\' | '\"' ) )* '\"' )
+			// Grammars\\ANTLR.g3:927:4: '\"' (=> '\\\\' '\"' | '\\\\' c=~ '\"' |c=~ ( '\\\\' | '\"' ) )* '\"'
{
Match('\"'); if (state.failed) return ;
if ( state.backtracking == 0 )
{
builder.Append('"');
}
-			// Grammars\\ANTLR.g3:940:3: (=> '\\\\' '\"' | '\\\\' c=~ '\"' |c=~ ( '\\\\' | '\"' ) )*
+			// Grammars\\ANTLR.g3:928:3: (=> '\\\\' '\"' | '\\\\' c=~ '\"' |c=~ ( '\\\\' | '\"' ) )*
for ( ; ; )
{
int alt12=4;
@@ -1737,7 +1737,7 @@ public partial class ANTLRLexer : Lexer
switch ( alt12 )
{
case 1:
-					// Grammars\\ANTLR.g3:940:5: => '\\\\' '\"'
+					// Grammars\\ANTLR.g3:928:5: => '\\\\' '\"'
{

Match('\\'); if (state.failed) return ;
@@ -1750,7 +1750,7 @@ public partial class ANTLRLexer : Lexer
}
break;
case 2:
-					// Grammars\\ANTLR.g3:941:5: '\\\\' c=~ '\"'
+					// Grammars\\ANTLR.g3:929:5: '\\\\' c=~ '\"'
{
Match('\\'); if (state.failed) return ;
c= input.LA(1);
@@ -1764,7 +1764,7 @@ public partial class ANTLRLexer : Lexer
}
break;
case 3:
-					// Grammars\\ANTLR.g3:942:5: c=~ ( '\\\\' | '\"' )
+					// Grammars\\ANTLR.g3:930:5: c=~ ( '\\\\' | '\"' )
{
c= input.LA(1);
input.Consume();
@@ -1816,12 +1816,12 @@ public partial class ANTLRLexer : Lexer
{
int _type = DOUBLE_ANGLE_STRING_LITERAL;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:951:4: ( '<<' ( . )* '>>' )
-			// Grammars\\ANTLR.g3:951:4: '<<' ( . )* '>>'
+			// Grammars\\ANTLR.g3:939:4: ( '<<' ( . )* '>>' )
+			// Grammars\\ANTLR.g3:939:4: '<<' ( . )* '>>'
{
Match("<<"); if (state.failed) return ;

-			// Grammars\\ANTLR.g3:951:9: ( . )*
+			// Grammars\\ANTLR.g3:939:9: ( . )*
for ( ; ; )
{
int alt13=2;
@@ -1851,7 +1851,7 @@ public partial class ANTLRLexer : Lexer
switch ( alt13 )
{
case 1:
-					// Grammars\\ANTLR.g3:951:0: .
+					// Grammars\\ANTLR.g3:939:0: .
{
MatchAny(); if (state.failed) return ;

@@ -1886,12 +1886,12 @@ public partial class ANTLRLexer : Lexer
{
try
{
-			// Grammars\\ANTLR.g3:957:4: ( '\\\\' ( . ) )
-			// Grammars\\ANTLR.g3:957:4: '\\\\' ( . )
+			// Grammars\\ANTLR.g3:945:4: ( '\\\\' ( . ) )
+			// Grammars\\ANTLR.g3:945:4: '\\\\' ( . )
{
Match('\\'); if (state.failed) return ;
-			// Grammars\\ANTLR.g3:958:3: ( . )
-			// Grammars\\ANTLR.g3:969:7: .
+			// Grammars\\ANTLR.g3:946:3: ( . )
+			// Grammars\\ANTLR.g3:957:7: .
{
MatchAny(); if (state.failed) return ;

@@ -1912,7 +1912,7 @@ public partial class ANTLRLexer : Lexer
{
try
{
-			// Grammars\\ANTLR.g3:975:4: ( '0' .. '9' )
+			// Grammars\\ANTLR.g3:963:4: ( '0' .. '9' )
// Grammars\\ANTLR.g3:
{
if ( (input.LA(1)>='0' && input.LA(1)<='9') )
@@ -1942,7 +1942,7 @@ public partial class ANTLRLexer : Lexer
{
try
{
-			// Grammars\\ANTLR.g3:980:4: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
+			// Grammars\\ANTLR.g3:968:4: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
// Grammars\\ANTLR.g3:
{
if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f') )
@@ -1974,10 +1974,10 @@ public partial class ANTLRLexer : Lexer
{
int _type = INT;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:985:4: ( ( '0' .. '9' )+ )
-			// Grammars\\ANTLR.g3:985:4: ( '0' .. '9' )+
+			// Grammars\\ANTLR.g3:973:4: ( ( '0' .. '9' )+ )
+			// Grammars\\ANTLR.g3:973:4: ( '0' .. '9' )+
{
-			// Grammars\\ANTLR.g3:985:4: ( '0' .. '9' )+
+			// Grammars\\ANTLR.g3:973:4: ( '0' .. '9' )+
int cnt14=0;
for ( ; ; )
{
@@ -2037,8 +2037,8 @@ public partial class ANTLRLexer : Lexer

string text_ = string.Empty;

-			// Grammars\\ANTLR.g3:993:4: ( '[' NESTED_ARG_ACTION[out text_] ']' )
-			// Grammars\\ANTLR.g3:993:4: '[' NESTED_ARG_ACTION[out text_] ']'
+			// Grammars\\ANTLR.g3:981:4: ( '[' NESTED_ARG_ACTION[out text_] ']' )
+			// Grammars\\ANTLR.g3:981:4: '[' NESTED_ARG_ACTION[out text_] ']'
{
Match('['); if (state.failed) return ;
mNESTED_ARG_ACTION(out text_); if (state.failed) return ;
@@ -2072,10 +2072,10 @@ public partial class ANTLRLexer : Lexer
text_ = string.Empty;
System.Text.StringBuilder builder = new System.Text.StringBuilder();

-			// Grammars\\ANTLR.g3:1007:4: ( (=> '\\\\' ']' | '\\\\' c=~ ( ']' ) | ACTION_STRING_LITERAL | ACTION_CHAR_LITERAL |c=~ ( '\\\\' | '\"' | '\\'' | ']' ) )* )
-			// Grammars\\ANTLR.g3:1007:4: (=> '\\\\' ']' | '\\\\' c=~ ( ']' ) | ACTION_STRING_LITERAL | ACTION_CHAR_LITERAL |c=~ ( '\\\\' | '\"' | '\\'' | ']' ) )*
+			// Grammars\\ANTLR.g3:995:4: ( (=> '\\\\' ']' | '\\\\' c=~ ( ']' ) | ACTION_STRING_LITERAL | ACTION_CHAR_LITERAL |c=~ ( '\\\\' | '\"' | '\\'' | ']' ) )* )
+			// Grammars\\ANTLR.g3:995:4: (=> '\\\\' ']' | '\\\\' c=~ ( ']' ) | ACTION_STRING_LITERAL | ACTION_CHAR_LITERAL |c=~ ( '\\\\' | '\"' | '\\'' | ']' ) )*
{
-			// Grammars\\ANTLR.g3:1007:4: (=> '\\\\' ']' | '\\\\' c=~ ( ']' ) | ACTION_STRING_LITERAL | ACTION_CHAR_LITERAL |c=~ ( '\\\\' | '\"' | '\\'' | ']' ) )*
+			// Grammars\\ANTLR.g3:995:4: (=> '\\\\' ']' | '\\\\' c=~ ( ']' ) | ACTION_STRING_LITERAL | ACTION_CHAR_LITERAL |c=~ ( '\\\\' | '\"' | '\\'' | ']' ) )*
for ( ; ; )
{
int alt15=6;
@@ -2113,7 +2113,7 @@ public partial class ANTLRLexer : Lexer
switch ( alt15 )
{
case 1:
-					// Grammars\\ANTLR.g3:1007:6: => '\\\\' ']'
+					// Grammars\\ANTLR.g3:995:6: => '\\\\' ']'
{

Match('\\'); if (state.failed) return ;
@@ -2126,7 +2126,7 @@ public partial class ANTLRLexer : Lexer
}
break;
case 2:
-					// Grammars\\ANTLR.g3:1008:5: '\\\\' c=~ ( ']' )
+					// Grammars\\ANTLR.g3:996:5: '\\\\' c=~ ( ']' )
{
Match('\\'); if (state.failed) return ;
c= input.LA(1);
@@ -2140,11 +2140,11 @@ public partial class ANTLRLexer : Lexer
}
break;
case 3:
-					// Grammars\\ANTLR.g3:1009:5: ACTION_STRING_LITERAL
+					// Grammars\\ANTLR.g3:997:5: ACTION_STRING_LITERAL
{
int ACTION_STRING_LITERAL1Start857 = GetCharIndex();
mACTION_STRING_LITERAL(); if (state.failed) return ;
-					ACTION_STRING_LITERAL1 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ACTION_STRING_LITERAL1Start857, GetCharIndex()-1);
+					ACTION_STRING_LITERAL1 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ACTION_STRING_LITERAL1Start857, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((ACTION_STRING_LITERAL1!=null?ACTION_STRING_LITERAL1.Text:null));
@@ -2153,11 +2153,11 @@ public partial class ANTLRLexer : Lexer
}
break;
case 4:
-					// Grammars\\ANTLR.g3:1010:5: ACTION_CHAR_LITERAL
+					// Grammars\\ANTLR.g3:998:5: ACTION_CHAR_LITERAL
{
int ACTION_CHAR_LITERAL2Start865 = GetCharIndex();
mACTION_CHAR_LITERAL(); if (state.failed) return ;
-					ACTION_CHAR_LITERAL2 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ACTION_CHAR_LITERAL2Start865, GetCharIndex()-1);
+					ACTION_CHAR_LITERAL2 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ACTION_CHAR_LITERAL2Start865, GetCharIndex()-1);
if ( state.backtracking == 0 )
{
builder.Append((ACTION_CHAR_LITERAL2!=null?ACTION_CHAR_LITERAL2.Text:null));
@@ -2166,7 +2166,7 @@ public partial class ANTLRLexer : Lexer
}
break;
case 5:
-					// Grammars\\ANTLR.g3:1011:5: c=~ ( '\\\\' | '\"' | '\\'' | ']' )
+					// Grammars\\ANTLR.g3:999:5: c=~ ( '\\\\' | '\"' | '\\'' | ']' )
{
c= input.LA(1);
input.Consume();
@@ -2215,11 +2215,11 @@ public partial class ANTLRLexer : Lexer
int actionLine = Line;
int actionColumn = CharPositionInLine;

-			// Grammars\\ANTLR.g3:1023:4: ( NESTED_ACTION ( '?' )? )
-			// Grammars\\ANTLR.g3:1023:4: NESTED_ACTION ( '?' )?
+			// Grammars\\ANTLR.g3:1011:4: ( NESTED_ACTION ( '?' )? )
+			// Grammars\\ANTLR.g3:1011:4: NESTED_ACTION ( '?' )?
{
mNESTED_ACTION(); if (state.failed) return ;
-			// Grammars\\ANTLR.g3:1024:3: ( '?' )?
+			// Grammars\\ANTLR.g3:1012:3: ( '?' )?
int alt16=2;
int LA16_0 = input.LA(1);

@@ -2230,7 +2230,7 @@ public partial class ANTLRLexer : Lexer
switch ( alt16 )
{
case 1:
-				// Grammars\\ANTLR.g3:1024:4: '?'
+				// Grammars\\ANTLR.g3:1012:4: '?'
{
Match('?'); if (state.failed) return ;
if ( state.backtracking == 0 )
@@ -2274,11 +2274,11 @@ public partial class ANTLRLexer : Lexer
{
try
{
-			// Grammars\\ANTLR.g3:1041:4: ( '{' ( NESTED_ACTION | ACTION_CHAR_LITERAL |=> COMMENT | ACTION_STRING_LITERAL | ACTION_ESC |~ ( '{' | '\\'' | '\"' | '\\\\' | '}' ) )* '}' )
-			// Grammars\\ANTLR.g3:1041:4: '{' ( NESTED_ACTION | ACTION_CHAR_LITERAL |=> COMMENT | ACTION_STRING_LITERAL | ACTION_ESC |~ ( '{' | '\\'' | '\"' | '\\\\' | '}' ) )* '}'
+			// Grammars\\ANTLR.g3:1029:4: ( '{' ( NESTED_ACTION | ACTION_CHAR_LITERAL |=> COMMENT | ACTION_STRING_LITERAL | ACTION_ESC |~ ( '{' | '\\'' | '\"' | '\\\\' | '}' ) )* '}' )
+			// Grammars\\ANTLR.g3:1029:4: '{' ( NESTED_ACTION | ACTION_CHAR_LITERAL |=> COMMENT | ACTION_STRING_LITERAL | ACTION_ESC |~ ( '{' | '\\'' | '\"' | '\\\\' | '}' ) )* '}'
{
Match('{'); if (state.failed) return ;
-			// Grammars\\ANTLR.g3:1042:3: ( NESTED_ACTION | ACTION_CHAR_LITERAL |=> COMMENT | ACTION_STRING_LITERAL | ACTION_ESC |~ ( '{' | '\\'' | '\"' | '\\\\' | '}' ) )*
+			// Grammars\\ANTLR.g3:1030:3: ( NESTED_ACTION | ACTION_CHAR_LITERAL |=> COMMENT | ACTION_STRING_LITERAL | ACTION_ESC |~ ( '{' | '\\'' | '\"' | '\\\\' | '}' ) )*
for ( ; ; )
{
int alt17=7;
@@ -2324,21 +2324,21 @@ public partial class ANTLRLexer : Lexer
switch ( alt17 )
{
case 1:
-					// Grammars\\ANTLR.g3:1042:5: NESTED_ACTION
+					// Grammars\\ANTLR.g3:1030:5: NESTED_ACTION
{
mNESTED_ACTION(); if (state.failed) return ;

}
break;
case 2:
-					// Grammars\\ANTLR.g3:1043:5: ACTION_CHAR_LITERAL
+					// Grammars\\ANTLR.g3:1031:5: ACTION_CHAR_LITERAL
{
mACTION_CHAR_LITERAL(); if (state.failed) return ;

}
break;
case 3:
-					// Grammars\\ANTLR.g3:1044:5: => COMMENT
+					// Grammars\\ANTLR.g3:1032:5: => COMMENT
{

mCOMMENT(); if (state.failed) return ;
@@ -2346,21 +2346,21 @@ public partial class ANTLRLexer : Lexer
}
break;
case 4:
-					// Grammars\\ANTLR.g3:1045:5: ACTION_STRING_LITERAL
+					// Grammars\\ANTLR.g3:1033:5: ACTION_STRING_LITERAL
{
mACTION_STRING_LITERAL(); if (state.failed) return ;

}
break;
case 5:
-					// Grammars\\ANTLR.g3:1046:5: ACTION_ESC
+					// Grammars\\ANTLR.g3:1034:5: ACTION_ESC
{
mACTION_ESC(); if (state.failed) return ;

}
break;
case 6:
-					// Grammars\\ANTLR.g3:1047:5: ~ ( '{' | '\\'' | '\"' | '\\\\' | '}' )
+					// Grammars\\ANTLR.g3:1035:5: ~ ( '{' | '\\'' | '\"' | '\\\\' | '}' )
{
input.Consume();
state.failed=false;
@@ -2393,11 +2393,11 @@ public partial class ANTLRLexer : Lexer
{
try
{
-			// Grammars\\ANTLR.g3:1054:4: ( '\\'' ( ACTION_ESC |~ ( '\\\\' | '\\'' ) )* '\\'' )
-			// Grammars\\ANTLR.g3:1054:4: '\\'' ( ACTION_ESC |~ ( '\\\\' | '\\'' ) )* '\\''
+			// Grammars\\ANTLR.g3:1042:4: ( '\\'' ( ACTION_ESC |~ ( '\\\\' | '\\'' ) )* '\\'' )
+			// Grammars\\ANTLR.g3:1042:4: '\\'' ( ACTION_ESC |~ ( '\\\\' | '\\'' ) )* '\\''
{
Match('\''); if (state.failed) return ;
-			// Grammars\\ANTLR.g3:1055:3: ( ACTION_ESC |~ ( '\\\\' | '\\'' ) )*
+			// Grammars\\ANTLR.g3:1043:3: ( ACTION_ESC |~ ( '\\\\' | '\\'' ) )*
for ( ; ; )
{
int alt18=3;
@@ -2416,14 +2416,14 @@ public partial class ANTLRLexer : Lexer
switch ( alt18 )
{
case 1:
-					// Grammars\\ANTLR.g3:1055:5: ACTION_ESC
+					// Grammars\\ANTLR.g3:1043:5: ACTION_ESC
{
mACTION_ESC(); if (state.failed) return ;

}
break;
case 2:
-					// Grammars\\ANTLR.g3:1056:5: ~ ( '\\\\' | '\\'' )
+					// Grammars\\ANTLR.g3:1044:5: ~ ( '\\\\' | '\\'' )
{
input.Consume();
state.failed=false;
@@ -2456,11 +2456,11 @@ public partial class ANTLRLexer : Lexer
{
try
{
-			// Grammars\\ANTLR.g3:1063:4: ( '\"' ( ACTION_ESC |~ ( '\\\\' | '\"' ) )* '\"' )
-			// Grammars\\ANTLR.g3:1063:4: '\"' ( ACTION_ESC |~ ( '\\\\' | '\"' ) )* '\"'
+			// Grammars\\ANTLR.g3:1051:4: ( '\"' ( ACTION_ESC |~ ( '\\\\' | '\"' ) )* '\"' )
+			// Grammars\\ANTLR.g3:1051:4: '\"' ( ACTION_ESC |~ ( '\\\\' | '\"' ) )* '\"'
{
Match('\"'); if (state.failed) return ;
-			// Grammars\\ANTLR.g3:1064:3: ( ACTION_ESC |~ ( '\\\\' | '\"' ) )*
+			// Grammars\\ANTLR.g3:1052:3: ( ACTION_ESC |~ ( '\\\\' | '\"' ) )*
for ( ; ; )
{
int alt19=3;
@@ -2479,14 +2479,14 @@ public partial class ANTLRLexer : Lexer
switch ( alt19 )
{
case 1:
-					// Grammars\\ANTLR.g3:1064:5: ACTION_ESC
+					// Grammars\\ANTLR.g3:1052:5: ACTION_ESC
{
mACTION_ESC(); if (state.failed) return ;

}
break;
case 2:
-					// Grammars\\ANTLR.g3:1065:5: ~ ( '\\\\' | '\"' )
+					// Grammars\\ANTLR.g3:1053:5: ~ ( '\\\\' | '\"' )
{
input.Consume();
state.failed=false;
@@ -2519,7 +2519,7 @@ public partial class ANTLRLexer : Lexer
{
try
{
-			// Grammars\\ANTLR.g3:1072:4: ( '\\\\\\'' | '\\\\\\\"' | '\\\\' ~ ( '\\'' | '\"' ) )
+			// Grammars\\ANTLR.g3:1060:4: ( '\\\\\\'' | '\\\\\\\"' | '\\\\' ~ ( '\\'' | '\"' ) )
int alt20=3;
int LA20_0 = input.LA(1);

@@ -2557,7 +2557,7 @@ public partial class ANTLRLexer : Lexer
switch ( alt20 )
{
case 1:
-				// Grammars\\ANTLR.g3:1072:4: '\\\\\\''
+				// Grammars\\ANTLR.g3:1060:4: '\\\\\\''
{
Match("\\'"); if (state.failed) return ;

@@ -2565,7 +2565,7 @@ public partial class ANTLRLexer : Lexer
}
break;
case 2:
-				// Grammars\\ANTLR.g3:1073:4: '\\\\\\\"'
+				// Grammars\\ANTLR.g3:1061:4: '\\\\\\\"'
{
Match("\\\""); if (state.failed) return ;

@@ -2573,7 +2573,7 @@ public partial class ANTLRLexer : Lexer
}
break;
case 3:
-				// Grammars\\ANTLR.g3:1074:4: '\\\\' ~ ( '\\'' | '\"' )
+				// Grammars\\ANTLR.g3:1062:4: '\\\\' ~ ( '\\'' | '\"' )
{
Match('\\'); if (state.failed) return ;
input.Consume();
@@ -2597,11 +2597,11 @@ public partial class ANTLRLexer : Lexer
{
int _type = TOKEN_REF;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:1077:4: ( 'A' .. 'Z' ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
-			// Grammars\\ANTLR.g3:1077:4: 'A' .. 'Z' ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
+			// Grammars\\ANTLR.g3:1065:4: ( 'A' .. 'Z' ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
+			// Grammars\\ANTLR.g3:1065:4: 'A' .. 'Z' ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
{
MatchRange('A','Z'); if (state.failed) return ;
-			// Grammars\\ANTLR.g3:1078:3: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
+			// Grammars\\ANTLR.g3:1066:3: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
for ( ; ; )
{
int alt21=2;
@@ -2652,8 +2652,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = TOKENS;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:1083:4: ( 'tokens' WS_LOOP '{' )
-			// Grammars\\ANTLR.g3:1083:4: 'tokens' WS_LOOP '{'
+			// Grammars\\ANTLR.g3:1071:4: ( 'tokens' WS_LOOP '{' )
+			// Grammars\\ANTLR.g3:1071:4: 'tokens' WS_LOOP '{'
{
Match("tokens"); if (state.failed) return ;

@@ -2678,8 +2678,8 @@ public partial class ANTLRLexer : Lexer
{
int _type = OPTIONS;
int _channel = DefaultTokenChannel;
-			// Grammars\\ANTLR.g3:1087:4: ( 'options' WS_LOOP '{' )
-			// Grammars\\ANTLR.g3:1087:4: 'options' WS_LOOP '{'
+			// Grammars\\ANTLR.g3:1075:4: ( 'options' WS_LOOP '{' )
+			// Grammars\\ANTLR.g3:1075:4: 'options' WS_LOOP '{'
{
Match("options"); if (state.failed) return ;

@@ -2707,11 +2707,11 @@ public partial class ANTLRLexer : Lexer

int t=0;

-			// Grammars\\ANTLR.g3:1096:4: ( 'a' .. 'z' ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
-			// Grammars\\ANTLR.g3:1096:4: 'a' .. 'z' ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
+			// Grammars\\ANTLR.g3:1084:4: ( 'a' .. 'z' ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
+			// Grammars\\ANTLR.g3:1084:4: 'a' .. 'z' ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
{
MatchRange('a','z'); if (state.failed) return ;
-			// Grammars\\ANTLR.g3:1096:13: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
+			// Grammars\\ANTLR.g3:1084:13: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
for ( ; ; )
{
int alt22=2;
@@ -2760,10 +2760,10 @@ public partial class ANTLRLexer : Lexer
{
try
{
-			// Grammars\\ANTLR.g3:1102:4: ( ( WS | COMMENT )* )
-			// Grammars\\ANTLR.g3:1102:4: ( WS | COMMENT )*
+			// Grammars\\ANTLR.g3:1090:4: ( ( WS | COMMENT )* )
+			// Grammars\\ANTLR.g3:1090:4: ( WS | COMMENT )*
{
-			// Grammars\\ANTLR.g3:1102:4: ( WS | COMMENT )*
+			// Grammars\\ANTLR.g3:1090:4: ( WS | COMMENT )*
for ( ; ; )
{
int alt23=3;
@@ -2782,14 +2782,14 @@ public partial class ANTLRLexer : Lexer
switch ( alt23 )
{
case 1:
-					// Grammars\\ANTLR.g3:1102:6: WS
+					// Grammars\\ANTLR.g3:1090:6: WS
{
mWS(); if (state.failed) return ;

}
break;
case 2:
-					// Grammars\\ANTLR.g3:1103:5: COMMENT
+					// Grammars\\ANTLR.g3:1091:5: COMMENT
{
mCOMMENT(); if (state.failed) return ;

@@ -2820,10 +2820,10 @@ public partial class ANTLRLexer : Lexer
{
try
{
-			// Grammars\\ANTLR.g3:1109:4: ( ( WS )? )
-			// Grammars\\ANTLR.g3:1109:4: ( WS )?
+			// Grammars\\ANTLR.g3:1097:4: ( ( WS )? )
+			// Grammars\\ANTLR.g3:1097:4: ( WS )?
{
-			// Grammars\\ANTLR.g3:1109:4: ( WS )?
+			// Grammars\\ANTLR.g3:1097:4: ( WS )?
int alt24=2;
int LA24_0 = input.LA(1);

@@ -2834,7 +2834,7 @@ public partial class ANTLRLexer : Lexer
switch ( alt24 )
{
case 1:
-				// Grammars\\ANTLR.g3:1109:5: WS
+				// Grammars\\ANTLR.g3:1097:5: WS
{
mWS(); if (state.failed) return ;

@@ -2861,19 +2861,19 @@ public partial class ANTLRLexer : Lexer
IToken file=null;
IToken line=null;

-			// Grammars\\ANTLR.g3:1122:4: ( 'src' ' ' file= ACTION_STRING_LITERAL ' ' line= INT )
-			// Grammars\\ANTLR.g3:1122:4: 'src' ' ' file= ACTION_STRING_LITERAL ' ' line= INT
+			// Grammars\\ANTLR.g3:1110:4: ( 'src' ' ' file= ACTION_STRING_LITERAL ' ' line= INT )
+			// Grammars\\ANTLR.g3:1110:4: 'src' ' ' file= ACTION_STRING_LITERAL ' ' line= INT
{
Match("src"); if (state.failed) return ;

Match(' '); if (state.failed) return ;
int fileStart1270 = GetCharIndex();
mACTION_STRING_LITERAL(); if (state.failed) return ;
-			file = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, fileStart1270, GetCharIndex()-1);
+			file = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, fileStart1270, GetCharIndex()-1);
Match(' '); if (state.failed) return ;
int lineStart1276 = GetCharIndex();
mINT(); if (state.failed) return ;
-			line = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, lineStart1276, GetCharIndex()-1);
+			line = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, lineStart1276, GetCharIndex()-1);
if ( state.backtracking == 0 )
{

@@ -3270,8 +3270,8 @@ public partial class ANTLRLexer : Lexer
// $ANTLR start synpred1_ANTLR
public void synpred1_ANTLR_fragment()
{
-		// Grammars\\ANTLR.g3:841:5: ( ' $ANTLR' )
-		// Grammars\\ANTLR.g3:841:6: ' $ANTLR'
+		// Grammars\\ANTLR.g3:829:5: ( ' $ANTLR' )
+		// Grammars\\ANTLR.g3:829:6: ' $ANTLR'
{
Match(" $ANTLR"); if (state.failed) return ;

@@ -3283,8 +3283,8 @@ public partial class ANTLRLexer : Lexer
// $ANTLR start synpred2_ANTLR
public void synpred2_ANTLR_fragment()
{
-		// Grammars\\ANTLR.g3:940:5: ( '\\\\\\\"' )
-		// Grammars\\ANTLR.g3:940:6: '\\\\\\\"'
+		// Grammars\\ANTLR.g3:928:5: ( '\\\\\\\"' )
+		// Grammars\\ANTLR.g3:928:6: '\\\\\\\"'
{
Match("\\\""); if (state.failed) return ;

@@ -3296,8 +3296,8 @@ public partial class ANTLRLexer : Lexer
// $ANTLR start synpred3_ANTLR
public void synpred3_ANTLR_fragment()
{
-		// Grammars\\ANTLR.g3:1007:6: ( '\\\\]' )
-		// Grammars\\ANTLR.g3:1007:7: '\\\\]'
+		// Grammars\\ANTLR.g3:995:6: ( '\\\\]' )
+		// Grammars\\ANTLR.g3:995:7: '\\\\]'
{
Match("\\]"); if (state.failed) return ;

@@ -3309,7 +3309,7 @@ public partial class ANTLRLexer : Lexer
// $ANTLR start synpred4_ANTLR
public void synpred4_ANTLR_fragment()
{
-		// Grammars\\ANTLR.g3:1044:5: ( '//' | '/*' )
+		// Grammars\\ANTLR.g3:1032:5: ( '//' | '/*' )
int alt26=2;
int LA26_0 = input.LA(1);

@@ -3343,7 +3343,7 @@ public partial class ANTLRLexer : Lexer
switch ( alt26 )
{
case 1:
-			// Grammars\\ANTLR.g3:1044:6: '//'
+			// Grammars\\ANTLR.g3:1032:6: '//'
{
Match("//"); if (state.failed) return ;

@@ -3351,7 +3351,7 @@ public partial class ANTLRLexer : Lexer
}
break;
case 2:
-			// Grammars\\ANTLR.g3:1044:13: '/*'
+			// Grammars\\ANTLR.g3:1032:13: '/*'
{
Match("/*"); if (state.failed) return ;

@@ -3482,7 +3482,7 @@ public partial class ANTLRLexer : Lexer
}
public override string GetDescription()
{
-			return "841:3: (=> ' $ANTLR ' SRC ( ( '\\r' )? '\\n' )? | (~ ( '\\r' | '\\n' ) )* ( ( '\\r' )? '\\n' )? )";
+			return "829:3: (=> ' $ANTLR ' SRC ( ( '\\r' )? '\\n' )? | (~ ( '\\r' | '\\n' ) )* ( ( '\\r' )? '\\n' )? )";
}
}

diff --git a/Antlr3/Grammars/ANTLRParser.cs b/Antlr3/Grammars/ANTLRParser.cs
index a7bf467..48d65bc 100644
--- a/Antlr3/Grammars/ANTLRParser.cs
+++ b/Antlr3/Grammars/ANTLRParser.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\ANTLR.g3 2009-04-16 21:26:59
+// $ANTLR 3.1.2 Grammars\\ANTLR.g3 2009-04-17 13:46:20

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -3956,7 +3956,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "alternative"
-	// Grammars\\ANTLR.g3:442:0: alternative : ( -> EOA[\"<end-of-alt>\"] ) ( -> ALT[$start,\"ALT\"] ) ( (el+= element )+ -> ^( ( $el)+ ) | -> ^( EPSILON[$start,\"epsilon\"] ) ) ;
+	// Grammars\\ANTLR.g3:442:0: alternative : ( ( element )+ -> ^( ALT[$start,\"ALT\"] ( element )+ EOA[\"<end-of-alt>\"] ) | -> ^( ALT[$start,\"ALT\"] EPSILON[$start,\"epsilon\"] EOA[\"<end-of-alt>\"] ) );
private ANTLRParser.alternative_return alternative(  )
{
ANTLRParser.alternative_return retval = new ANTLRParser.alternative_return();
@@ -3964,89 +3964,12 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		List list_el=null;
-		ANTLRParser.element_return el = default(ANTLRParser.element_return);
-		RewriteRuleSubtreeStream stream_element=new RewriteRuleSubtreeStream(adaptor,"rule element");
-
-			GrammarAST eoa = null;
-			GrammarAST altRoot = null;
+		ANTLRParser.element_return element71 = default(ANTLRParser.element_return);

+		RewriteRuleSubtreeStream stream_element=new RewriteRuleSubtreeStream(adaptor,"rule element");
try
{
-			// Grammars\\ANTLR.g3:448:4: ( ( -> EOA[\"<end-of-alt>\"] ) ( -> ALT[$start,\"ALT\"] ) ( (el+= element )+ -> ^( ( $el)+ ) | -> ^( EPSILON[$start,\"epsilon\"] ) ) )
-			// Grammars\\ANTLR.g3:448:4: ( -> EOA[\"<end-of-alt>\"] ) ( -> ALT[$start,\"ALT\"] ) ( (el+= element )+ -> ^( ( $el)+ ) | -> ^( EPSILON[$start,\"epsilon\"] ) )
-			{
-			// Grammars\\ANTLR.g3:448:4: ( -> EOA[\"<end-of-alt>\"] )
-			// Grammars\\ANTLR.g3:448:6:
-			{
-
-
-
-			{
-			// AST REWRITE
-			// elements:
-			// token labels:
-			// rule labels: retval
-			// token list labels:
-			// rule list labels:
-			// wildcard labels:
-			if ( state.backtracking == 0 ) {
-			retval.tree = root_0;
-			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
-
-			root_0 = (GrammarAST)adaptor.Nil();
-			// 448:6: -> EOA[\"<end-of-alt>\"]
-			{
-				adaptor.AddChild(root_0, (GrammarAST)adaptor.Create(EOA, "<end-of-alt>"));
-
-			}
-
-			retval.tree = root_0;
-			}
-			}
-
-			}
-
-			if ( state.backtracking == 0 )
-			{
-				 eoa = ((GrammarAST)retval.tree);
-			}
-			// Grammars\\ANTLR.g3:450:3: ( -> ALT[$start,\"ALT\"] )
-			// Grammars\\ANTLR.g3:450:5:
-			{
-
-
-
-			{
-			// AST REWRITE
-			// elements:
-			// token labels:
-			// rule labels: retval
-			// token list labels:
-			// rule list labels:
-			// wildcard labels:
-			if ( state.backtracking == 0 ) {
-			retval.tree = root_0;
-			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
-
-			root_0 = (GrammarAST)adaptor.Nil();
-			// 450:5: -> ALT[$start,\"ALT\"]
-			{
-				adaptor.AddChild(root_0, (GrammarAST)adaptor.Create(ALT, ((IToken)retval.start), "ALT"));
-
-			}
-
-			retval.tree = root_0;
-			}
-			}
-
-			}
-
-			if ( state.backtracking == 0 )
-			{
-				 altRoot = ((GrammarAST)retval.tree);
-			}
-			// Grammars\\ANTLR.g3:453:3: ( (el+= element )+ -> ^( ( $el)+ ) | -> ^( EPSILON[$start,\"epsilon\"] ) )
+			// Grammars\\ANTLR.g3:443:4: ( ( element )+ -> ^( ALT[$start,\"ALT\"] ( element )+ EOA[\"<end-of-alt>\"] ) | -> ^( ALT[$start,\"ALT\"] EPSILON[$start,\"epsilon\"] EOA[\"<end-of-alt>\"] ) )
int alt40=2;
int LA40_0 = input.LA(1);

@@ -4068,9 +3991,9 @@ public partial class ANTLRParser : Parser
switch ( alt40 )
{
case 1:
-				// Grammars\\ANTLR.g3:453:5: (el+= element )+
+				// Grammars\\ANTLR.g3:443:4: ( element )+
{
-				// Grammars\\ANTLR.g3:453:5: (el+= element )+
+				// Grammars\\ANTLR.g3:443:4: ( element )+
int cnt39=0;
for ( ; ; )
{
@@ -4086,17 +4009,14 @@ public partial class ANTLRParser : Parser
switch ( alt39 )
{
case 1:
-						// Grammars\\ANTLR.g3:453:7: el+= element
+						// Grammars\\ANTLR.g3:443:0: element
{
-						PushFollow(Follow._element_in_alternative1676);
-						el=element();
+						PushFollow(Follow._element_in_alternative1634);
+						element71=element();

state._fsp--;
if (state.failed) return retval;
-						if ( state.backtracking == 0 ) stream_element.Add(el.Tree);
-						if (list_el==null) list_el=new ArrayList();
-						list_el.Add(el.Tree);
-
+						if ( state.backtracking == 0 ) stream_element.Add(element71.Tree);

}
break;
@@ -4119,35 +4039,35 @@ public partial class ANTLRParser : Parser

{
// AST REWRITE
-				// elements: el
+				// elements: element
// token labels:
// rule labels: retval
// token list labels:
-				// rule list labels: el
+				// rule list labels:
// wildcard labels:
if ( state.backtracking == 0 ) {
retval.tree = root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
-				RewriteRuleSubtreeStream stream_el=new RewriteRuleSubtreeStream(adaptor,"token el",list_el);
+
root_0 = (GrammarAST)adaptor.Nil();
-				// 454:4: -> ^( ( $el)+ )
+				// 444:3: -> ^( ALT[$start,\"ALT\"] ( element )+ EOA[\"<end-of-alt>\"] )
{
-					// Grammars\\ANTLR.g3:454:7: ^( ( $el)+ )
+					// Grammars\\ANTLR.g3:444:6: ^( ALT[$start,\"ALT\"] ( element )+ EOA[\"<end-of-alt>\"] )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
-					root_1 = (GrammarAST)adaptor.BecomeRoot(altRoot, root_1);
+					root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(ALT, ((IToken)retval.start), "ALT"), root_1);

-					if ( !(stream_el.HasNext) )
+					if ( !(stream_element.HasNext) )
{
throw new RewriteEarlyExitException();
}
-					while ( stream_el.HasNext )
+					while ( stream_element.HasNext )
{
-						adaptor.AddChild(root_1, stream_el.NextTree());
+						adaptor.AddChild(root_1, stream_element.NextTree());

}
-					stream_el.Reset();
-					adaptor.AddChild(root_1, eoa);
+					stream_element.Reset();
+					adaptor.AddChild(root_1, (GrammarAST)adaptor.Create(EOA, "<end-of-alt>"));

adaptor.AddChild(root_0, root_1);
}
@@ -4161,7 +4081,7 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-				// Grammars\\ANTLR.g3:456:4:
+				// Grammars\\ANTLR.g3:446:3:
{


@@ -4179,15 +4099,15 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 456:4: -> ^( EPSILON[$start,\"epsilon\"] )
+				// 446:3: -> ^( ALT[$start,\"ALT\"] EPSILON[$start,\"epsilon\"] EOA[\"<end-of-alt>\"] )
{
-					// Grammars\\ANTLR.g3:456:7: ^( EPSILON[$start,\"epsilon\"] )
+					// Grammars\\ANTLR.g3:446:6: ^( ALT[$start,\"ALT\"] EPSILON[$start,\"epsilon\"] EOA[\"<end-of-alt>\"] )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
-					root_1 = (GrammarAST)adaptor.BecomeRoot(altRoot, root_1);
+					root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(ALT, ((IToken)retval.start), "ALT"), root_1);

adaptor.AddChild(root_1, (GrammarAST)adaptor.Create(EPSILON, ((IToken)retval.start), "epsilon"));
-					adaptor.AddChild(root_1, eoa);
+					adaptor.AddChild(root_1, (GrammarAST)adaptor.Create(EOA, "<end-of-alt>"));

adaptor.AddChild(root_0, root_1);
}
@@ -4202,10 +4122,6 @@ public partial class ANTLRParser : Parser
break;

}
-
-
-			}
-
retval.stop = input.LT(-1);

if ( state.backtracking == 0 ) {
@@ -4235,7 +4151,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "exceptionGroup"
-	// Grammars\\ANTLR.g3:460:0: exceptionGroup : ( ( exceptionHandler )+ ( finallyClause )? | finallyClause );
+	// Grammars\\ANTLR.g3:449:0: exceptionGroup : ( ( exceptionHandler )+ ( finallyClause )? | finallyClause );
private ANTLRParser.exceptionGroup_return exceptionGroup(  )
{
ANTLRParser.exceptionGroup_return retval = new ANTLRParser.exceptionGroup_return();
@@ -4243,14 +4159,14 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		ANTLRParser.exceptionHandler_return exceptionHandler71 = default(ANTLRParser.exceptionHandler_return);
-		ANTLRParser.finallyClause_return finallyClause72 = default(ANTLRParser.finallyClause_return);
+		ANTLRParser.exceptionHandler_return exceptionHandler72 = default(ANTLRParser.exceptionHandler_return);
ANTLRParser.finallyClause_return finallyClause73 = default(ANTLRParser.finallyClause_return);
+		ANTLRParser.finallyClause_return finallyClause74 = default(ANTLRParser.finallyClause_return);


try
{
-			// Grammars\\ANTLR.g3:461:4: ( ( exceptionHandler )+ ( finallyClause )? | finallyClause )
+			// Grammars\\ANTLR.g3:450:4: ( ( exceptionHandler )+ ( finallyClause )? | finallyClause )
int alt43=2;
int LA43_0 = input.LA(1);

@@ -4272,11 +4188,11 @@ public partial class ANTLRParser : Parser
switch ( alt43 )
{
case 1:
-				// Grammars\\ANTLR.g3:461:4: ( exceptionHandler )+ ( finallyClause )?
+				// Grammars\\ANTLR.g3:450:4: ( exceptionHandler )+ ( finallyClause )?
{
root_0 = (GrammarAST)adaptor.Nil();

-				// Grammars\\ANTLR.g3:461:4: ( exceptionHandler )+
+				// Grammars\\ANTLR.g3:450:4: ( exceptionHandler )+
int cnt41=0;
for ( ; ; )
{
@@ -4292,14 +4208,14 @@ public partial class ANTLRParser : Parser
switch ( alt41 )
{
case 1:
-						// Grammars\\ANTLR.g3:461:6: exceptionHandler
+						// Grammars\\ANTLR.g3:450:0: exceptionHandler
{
-						PushFollow(Follow._exceptionHandler_in_exceptionGroup1729);
-						exceptionHandler71=exceptionHandler();
+						PushFollow(Follow._exceptionHandler_in_exceptionGroup1680);
+						exceptionHandler72=exceptionHandler();

state._fsp--;
if (state.failed) return retval;
-						if ( state.backtracking == 0 ) adaptor.AddChild(root_0, exceptionHandler71.Tree);
+						if ( state.backtracking == 0 ) adaptor.AddChild(root_0, exceptionHandler72.Tree);

}
break;
@@ -4318,7 +4234,7 @@ public partial class ANTLRParser : Parser
;


-				// Grammars\\ANTLR.g3:461:26: ( finallyClause )?
+				// Grammars\\ANTLR.g3:450:22: ( finallyClause )?
int alt42=2;
int LA42_0 = input.LA(1);

@@ -4329,14 +4245,14 @@ public partial class ANTLRParser : Parser
switch ( alt42 )
{
case 1:
-					// Grammars\\ANTLR.g3:461:28: finallyClause
+					// Grammars\\ANTLR.g3:450:0: finallyClause
{
-					PushFollow(Follow._finallyClause_in_exceptionGroup1736);
-					finallyClause72=finallyClause();
+					PushFollow(Follow._finallyClause_in_exceptionGroup1683);
+					finallyClause73=finallyClause();

state._fsp--;
if (state.failed) return retval;
-					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, finallyClause72.Tree);
+					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, finallyClause73.Tree);

}
break;
@@ -4347,16 +4263,16 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-				// Grammars\\ANTLR.g3:462:4: finallyClause
+				// Grammars\\ANTLR.g3:451:4: finallyClause
{
root_0 = (GrammarAST)adaptor.Nil();

-				PushFollow(Follow._finallyClause_in_exceptionGroup1744);
-				finallyClause73=finallyClause();
+				PushFollow(Follow._finallyClause_in_exceptionGroup1689);
+				finallyClause74=finallyClause();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, finallyClause73.Tree);
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, finallyClause74.Tree);

}
break;
@@ -4391,7 +4307,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "exceptionHandler"
-	// Grammars\\ANTLR.g3:465:0: exceptionHandler : 'catch' ARG_ACTION ACTION ;
+	// Grammars\\ANTLR.g3:454:0: exceptionHandler : 'catch' ARG_ACTION ACTION ;
private ANTLRParser.exceptionHandler_return exceptionHandler(  )
{
ANTLRParser.exceptionHandler_return retval = new ANTLRParser.exceptionHandler_return();
@@ -4399,35 +4315,35 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken string_literal74=null;
-		IToken ARG_ACTION75=null;
-		IToken ACTION76=null;
+		IToken string_literal75=null;
+		IToken ARG_ACTION76=null;
+		IToken ACTION77=null;

-		GrammarAST string_literal74_tree=null;
-		GrammarAST ARG_ACTION75_tree=null;
-		GrammarAST ACTION76_tree=null;
+		GrammarAST string_literal75_tree=null;
+		GrammarAST ARG_ACTION76_tree=null;
+		GrammarAST ACTION77_tree=null;

try
{
-			// Grammars\\ANTLR.g3:466:4: ( 'catch' ARG_ACTION ACTION )
-			// Grammars\\ANTLR.g3:466:4: 'catch' ARG_ACTION ACTION
+			// Grammars\\ANTLR.g3:455:4: ( 'catch' ARG_ACTION ACTION )
+			// Grammars\\ANTLR.g3:455:4: 'catch' ARG_ACTION ACTION
{
root_0 = (GrammarAST)adaptor.Nil();

-			string_literal74=(IToken)Match(input,CATCH,Follow._CATCH_in_exceptionHandler1755); if (state.failed) return retval;
+			string_literal75=(IToken)Match(input,CATCH,Follow._CATCH_in_exceptionHandler1700); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-			string_literal74_tree = (GrammarAST)adaptor.Create(string_literal74);
-			root_0 = (GrammarAST)adaptor.BecomeRoot(string_literal74_tree, root_0);
+			string_literal75_tree = (GrammarAST)adaptor.Create(string_literal75);
+			root_0 = (GrammarAST)adaptor.BecomeRoot(string_literal75_tree, root_0);
}
-			ARG_ACTION75=(IToken)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_exceptionHandler1758); if (state.failed) return retval;
+			ARG_ACTION76=(IToken)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_exceptionHandler1703); if (state.failed) return retval;
if ( state.backtracking==0 ) {
-			ARG_ACTION75_tree = (GrammarAST)adaptor.Create(ARG_ACTION75);
-			adaptor.AddChild(root_0, ARG_ACTION75_tree);
+			ARG_ACTION76_tree = (GrammarAST)adaptor.Create(ARG_ACTION76);
+			adaptor.AddChild(root_0, ARG_ACTION76_tree);
}
-			ACTION76=(IToken)Match(input,ACTION,Follow._ACTION_in_exceptionHandler1760); if (state.failed) return retval;
+			ACTION77=(IToken)Match(input,ACTION,Follow._ACTION_in_exceptionHandler1705); if (state.failed) return retval;
if ( state.backtracking==0 ) {
-			ACTION76_tree = (GrammarAST)adaptor.Create(ACTION76);
-			adaptor.AddChild(root_0, ACTION76_tree);
+			ACTION77_tree = (GrammarAST)adaptor.Create(ACTION77);
+			adaptor.AddChild(root_0, ACTION77_tree);
}

}
@@ -4461,7 +4377,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "finallyClause"
-	// Grammars\\ANTLR.g3:469:0: finallyClause : 'finally' ACTION ;
+	// Grammars\\ANTLR.g3:458:0: finallyClause : 'finally' ACTION ;
private ANTLRParser.finallyClause_return finallyClause(  )
{
ANTLRParser.finallyClause_return retval = new ANTLRParser.finallyClause_return();
@@ -4469,28 +4385,28 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken string_literal77=null;
-		IToken ACTION78=null;
+		IToken string_literal78=null;
+		IToken ACTION79=null;

-		GrammarAST string_literal77_tree=null;
-		GrammarAST ACTION78_tree=null;
+		GrammarAST string_literal78_tree=null;
+		GrammarAST ACTION79_tree=null;

try
{
-			// Grammars\\ANTLR.g3:470:4: ( 'finally' ACTION )
-			// Grammars\\ANTLR.g3:470:4: 'finally' ACTION
+			// Grammars\\ANTLR.g3:459:4: ( 'finally' ACTION )
+			// Grammars\\ANTLR.g3:459:4: 'finally' ACTION
{
root_0 = (GrammarAST)adaptor.Nil();

-			string_literal77=(IToken)Match(input,FINALLY,Follow._FINALLY_in_finallyClause1771); if (state.failed) return retval;
+			string_literal78=(IToken)Match(input,FINALLY,Follow._FINALLY_in_finallyClause1716); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-			string_literal77_tree = (GrammarAST)adaptor.Create(string_literal77);
-			root_0 = (GrammarAST)adaptor.BecomeRoot(string_literal77_tree, root_0);
+			string_literal78_tree = (GrammarAST)adaptor.Create(string_literal78);
+			root_0 = (GrammarAST)adaptor.BecomeRoot(string_literal78_tree, root_0);
}
-			ACTION78=(IToken)Match(input,ACTION,Follow._ACTION_in_finallyClause1774); if (state.failed) return retval;
+			ACTION79=(IToken)Match(input,ACTION,Follow._ACTION_in_finallyClause1719); if (state.failed) return retval;
if ( state.backtracking==0 ) {
-			ACTION78_tree = (GrammarAST)adaptor.Create(ACTION78);
-			adaptor.AddChild(root_0, ACTION78_tree);
+			ACTION79_tree = (GrammarAST)adaptor.Create(ACTION79);
+			adaptor.AddChild(root_0, ACTION79_tree);
}

}
@@ -4524,7 +4440,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "element"
-	// Grammars\\ANTLR.g3:473:0: element : elementNoOptionSpec ;
+	// Grammars\\ANTLR.g3:462:0: element : elementNoOptionSpec ;
private ANTLRParser.element_return element(  )
{
ANTLRParser.element_return retval = new ANTLRParser.element_return();
@@ -4532,22 +4448,22 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		ANTLRParser.elementNoOptionSpec_return elementNoOptionSpec79 = default(ANTLRParser.elementNoOptionSpec_return);
+		ANTLRParser.elementNoOptionSpec_return elementNoOptionSpec80 = default(ANTLRParser.elementNoOptionSpec_return);


try
{
-			// Grammars\\ANTLR.g3:474:4: ( elementNoOptionSpec )
-			// Grammars\\ANTLR.g3:474:4: elementNoOptionSpec
+			// Grammars\\ANTLR.g3:463:4: ( elementNoOptionSpec )
+			// Grammars\\ANTLR.g3:463:4: elementNoOptionSpec
{
root_0 = (GrammarAST)adaptor.Nil();

-			PushFollow(Follow._elementNoOptionSpec_in_element1785);
-			elementNoOptionSpec79=elementNoOptionSpec();
+			PushFollow(Follow._elementNoOptionSpec_in_element1730);
+			elementNoOptionSpec80=elementNoOptionSpec();

state._fsp--;
if (state.failed) return retval;
-			if ( state.backtracking == 0 ) adaptor.AddChild(root_0, elementNoOptionSpec79.Tree);
+			if ( state.backtracking == 0 ) adaptor.AddChild(root_0, elementNoOptionSpec80.Tree);

}

@@ -4580,7 +4496,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "elementNoOptionSpec"
-	// Grammars\\ANTLR.g3:477:0: elementNoOptionSpec : ( ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) ) (sub= ebnfSuffix[root_0,false] )? |a= atom (sub2= ebnfSuffix[$a.tree,false] )? | ebnf | FORCED_ACTION | ACTION |p= SEMPRED ( IMPLIES )? |t3= tree_ ) ;
+	// Grammars\\ANTLR.g3:466:0: elementNoOptionSpec : ( ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) ) (sub= ebnfSuffix[root_0,false] )? |a= atom (sub2= ebnfSuffix[$a.tree,false] )? | ebnf | FORCED_ACTION | ACTION |p= SEMPRED ( IMPLIES )? |t3= tree_ ) ;
private ANTLRParser.elementNoOptionSpec_return elementNoOptionSpec(  )
{
ANTLRParser.elementNoOptionSpec_return retval = new ANTLRParser.elementNoOptionSpec_return();
@@ -4589,55 +4505,55 @@ public partial class ANTLRParser : Parser
GrammarAST root_0 = null;

IToken p=null;
-		IToken ASSIGN81=null;
-		IToken PLUS_ASSIGN82=null;
-		IToken FORCED_ACTION86=null;
-		IToken ACTION87=null;
-		IToken IMPLIES88=null;
+		IToken ASSIGN82=null;
+		IToken PLUS_ASSIGN83=null;
+		IToken FORCED_ACTION87=null;
+		IToken ACTION88=null;
+		IToken IMPLIES89=null;
ANTLRParser.ebnfSuffix_return sub = default(ANTLRParser.ebnfSuffix_return);
ANTLRParser.atom_return a = default(ANTLRParser.atom_return);
ANTLRParser.ebnfSuffix_return sub2 = default(ANTLRParser.ebnfSuffix_return);
ANTLRParser.tree__return t3 = default(ANTLRParser.tree__return);
-		ANTLRParser.id_return id80 = default(ANTLRParser.id_return);
-		ANTLRParser.atom_return atom83 = default(ANTLRParser.atom_return);
-		ANTLRParser.block_return block84 = default(ANTLRParser.block_return);
-		ANTLRParser.ebnf_return ebnf85 = default(ANTLRParser.ebnf_return);
+		ANTLRParser.id_return id81 = default(ANTLRParser.id_return);
+		ANTLRParser.atom_return atom84 = default(ANTLRParser.atom_return);
+		ANTLRParser.block_return block85 = default(ANTLRParser.block_return);
+		ANTLRParser.ebnf_return ebnf86 = default(ANTLRParser.ebnf_return);

GrammarAST p_tree=null;
-		GrammarAST ASSIGN81_tree=null;
-		GrammarAST PLUS_ASSIGN82_tree=null;
-		GrammarAST FORCED_ACTION86_tree=null;
-		GrammarAST ACTION87_tree=null;
-		GrammarAST IMPLIES88_tree=null;
+		GrammarAST ASSIGN82_tree=null;
+		GrammarAST PLUS_ASSIGN83_tree=null;
+		GrammarAST FORCED_ACTION87_tree=null;
+		GrammarAST ACTION88_tree=null;
+		GrammarAST IMPLIES89_tree=null;


IntSet elements=null;

try
{
-			// Grammars\\ANTLR.g3:482:4: ( ( ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) ) (sub= ebnfSuffix[root_0,false] )? |a= atom (sub2= ebnfSuffix[$a.tree,false] )? | ebnf | FORCED_ACTION | ACTION |p= SEMPRED ( IMPLIES )? |t3= tree_ ) )
-			// Grammars\\ANTLR.g3:482:4: ( ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) ) (sub= ebnfSuffix[root_0,false] )? |a= atom (sub2= ebnfSuffix[$a.tree,false] )? | ebnf | FORCED_ACTION | ACTION |p= SEMPRED ( IMPLIES )? |t3= tree_ )
+			// Grammars\\ANTLR.g3:471:4: ( ( ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) ) (sub= ebnfSuffix[root_0,false] )? |a= atom (sub2= ebnfSuffix[$a.tree,false] )? | ebnf | FORCED_ACTION | ACTION |p= SEMPRED ( IMPLIES )? |t3= tree_ ) )
+			// Grammars\\ANTLR.g3:471:4: ( ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) ) (sub= ebnfSuffix[root_0,false] )? |a= atom (sub2= ebnfSuffix[$a.tree,false] )? | ebnf | FORCED_ACTION | ACTION |p= SEMPRED ( IMPLIES )? |t3= tree_ )
{
root_0 = (GrammarAST)adaptor.Nil();

-			// Grammars\\ANTLR.g3:482:4: ( ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) ) (sub= ebnfSuffix[root_0,false] )? |a= atom (sub2= ebnfSuffix[$a.tree,false] )? | ebnf | FORCED_ACTION | ACTION |p= SEMPRED ( IMPLIES )? |t3= tree_ )
+			// Grammars\\ANTLR.g3:471:4: ( ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) ) (sub= ebnfSuffix[root_0,false] )? |a= atom (sub2= ebnfSuffix[$a.tree,false] )? | ebnf | FORCED_ACTION | ACTION |p= SEMPRED ( IMPLIES )? |t3= tree_ )
int alt49=7;
alt49 = dfa49.Predict(input);
switch ( alt49 )
{
case 1:
-				// Grammars\\ANTLR.g3:482:6: ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) ) (sub= ebnfSuffix[root_0,false] )?
+				// Grammars\\ANTLR.g3:471:6: ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) ) (sub= ebnfSuffix[root_0,false] )?
{
-				// Grammars\\ANTLR.g3:482:6: ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) )
-				// Grammars\\ANTLR.g3:482:8: id ( ASSIGN | PLUS_ASSIGN ) ( atom | block )
+				// Grammars\\ANTLR.g3:471:6: ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) )
+				// Grammars\\ANTLR.g3:471:8: id ( ASSIGN | PLUS_ASSIGN ) ( atom | block )
{
-				PushFollow(Follow._id_in_elementNoOptionSpec1805);
-				id80=id();
+				PushFollow(Follow._id_in_elementNoOptionSpec1750);
+				id81=id();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, id80.Tree);
-				// Grammars\\ANTLR.g3:482:11: ( ASSIGN | PLUS_ASSIGN )
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, id81.Tree);
+				// Grammars\\ANTLR.g3:471:11: ( ASSIGN | PLUS_ASSIGN )
int alt44=2;
int LA44_0 = input.LA(1);

@@ -4659,23 +4575,23 @@ public partial class ANTLRParser : Parser
switch ( alt44 )
{
case 1:
-					// Grammars\\ANTLR.g3:482:12: ASSIGN
+					// Grammars\\ANTLR.g3:471:12: ASSIGN
{
-					ASSIGN81=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_elementNoOptionSpec1808); if (state.failed) return retval;
+					ASSIGN82=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_elementNoOptionSpec1753); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-					ASSIGN81_tree = (GrammarAST)adaptor.Create(ASSIGN81);
-					root_0 = (GrammarAST)adaptor.BecomeRoot(ASSIGN81_tree, root_0);
+					ASSIGN82_tree = (GrammarAST)adaptor.Create(ASSIGN82);
+					root_0 = (GrammarAST)adaptor.BecomeRoot(ASSIGN82_tree, root_0);
}

}
break;
case 2:
-					// Grammars\\ANTLR.g3:482:20: PLUS_ASSIGN
+					// Grammars\\ANTLR.g3:471:20: PLUS_ASSIGN
{
-					PLUS_ASSIGN82=(IToken)Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_elementNoOptionSpec1811); if (state.failed) return retval;
+					PLUS_ASSIGN83=(IToken)Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_elementNoOptionSpec1756); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-					PLUS_ASSIGN82_tree = (GrammarAST)adaptor.Create(PLUS_ASSIGN82);
-					root_0 = (GrammarAST)adaptor.BecomeRoot(PLUS_ASSIGN82_tree, root_0);
+					PLUS_ASSIGN83_tree = (GrammarAST)adaptor.Create(PLUS_ASSIGN83);
+					root_0 = (GrammarAST)adaptor.BecomeRoot(PLUS_ASSIGN83_tree, root_0);
}

}
@@ -4683,7 +4599,7 @@ public partial class ANTLRParser : Parser

}

-				// Grammars\\ANTLR.g3:482:34: ( atom | block )
+				// Grammars\\ANTLR.g3:471:34: ( atom | block )
int alt45=2;
int LA45_0 = input.LA(1);

@@ -4705,26 +4621,26 @@ public partial class ANTLRParser : Parser
switch ( alt45 )
{
case 1:
-					// Grammars\\ANTLR.g3:482:35: atom
+					// Grammars\\ANTLR.g3:471:35: atom
{
-					PushFollow(Follow._atom_in_elementNoOptionSpec1816);
-					atom83=atom();
+					PushFollow(Follow._atom_in_elementNoOptionSpec1761);
+					atom84=atom();

state._fsp--;
if (state.failed) return retval;
-					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, atom83.Tree);
+					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, atom84.Tree);

}
break;
case 2:
-					// Grammars\\ANTLR.g3:482:40: block
+					// Grammars\\ANTLR.g3:471:40: block
{
-					PushFollow(Follow._block_in_elementNoOptionSpec1818);
-					block84=block();
+					PushFollow(Follow._block_in_elementNoOptionSpec1763);
+					block85=block();

state._fsp--;
if (state.failed) return retval;
-					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block84.Tree);
+					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block85.Tree);

}
break;
@@ -4734,7 +4650,7 @@ public partial class ANTLRParser : Parser

}

-				// Grammars\\ANTLR.g3:484:4: (sub= ebnfSuffix[root_0,false] )?
+				// Grammars\\ANTLR.g3:473:4: (sub= ebnfSuffix[root_0,false] )?
int alt46=2;
int LA46_0 = input.LA(1);

@@ -4745,9 +4661,9 @@ public partial class ANTLRParser : Parser
switch ( alt46 )
{
case 1:
-					// Grammars\\ANTLR.g3:484:6: sub= ebnfSuffix[root_0,false]
+					// Grammars\\ANTLR.g3:473:6: sub= ebnfSuffix[root_0,false]
{
-					PushFollow(Follow._ebnfSuffix_in_elementNoOptionSpec1833);
+					PushFollow(Follow._ebnfSuffix_in_elementNoOptionSpec1778);
sub=ebnfSuffix(root_0, false);

state._fsp--;
@@ -4766,15 +4682,15 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-				// Grammars\\ANTLR.g3:486:5: a= atom (sub2= ebnfSuffix[$a.tree,false] )?
+				// Grammars\\ANTLR.g3:475:5: a= atom (sub2= ebnfSuffix[$a.tree,false] )?
{
-				PushFollow(Follow._atom_in_elementNoOptionSpec1851);
+				PushFollow(Follow._atom_in_elementNoOptionSpec1796);
a=atom();

state._fsp--;
if (state.failed) return retval;
if ( state.backtracking == 0 ) adaptor.AddChild(root_0, a.Tree);
-				// Grammars\\ANTLR.g3:487:4: (sub2= ebnfSuffix[$a.tree,false] )?
+				// Grammars\\ANTLR.g3:476:4: (sub2= ebnfSuffix[$a.tree,false] )?
int alt47=2;
int LA47_0 = input.LA(1);

@@ -4785,9 +4701,9 @@ public partial class ANTLRParser : Parser
switch ( alt47 )
{
case 1:
-					// Grammars\\ANTLR.g3:487:6: sub2= ebnfSuffix[$a.tree,false]
+					// Grammars\\ANTLR.g3:476:6: sub2= ebnfSuffix[$a.tree,false]
{
-					PushFollow(Follow._ebnfSuffix_in_elementNoOptionSpec1860);
+					PushFollow(Follow._ebnfSuffix_in_elementNoOptionSpec1805);
sub2=ebnfSuffix((a!=null?((GrammarAST)a.tree):null), false);

state._fsp--;
@@ -4806,48 +4722,48 @@ public partial class ANTLRParser : Parser
}
break;
case 3:
-				// Grammars\\ANTLR.g3:489:5: ebnf
+				// Grammars\\ANTLR.g3:478:5: ebnf
{
-				PushFollow(Follow._ebnf_in_elementNoOptionSpec1876);
-				ebnf85=ebnf();
+				PushFollow(Follow._ebnf_in_elementNoOptionSpec1821);
+				ebnf86=ebnf();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ebnf85.Tree);
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ebnf86.Tree);

}
break;
case 4:
-				// Grammars\\ANTLR.g3:490:5: FORCED_ACTION
+				// Grammars\\ANTLR.g3:479:5: FORCED_ACTION
{
-				FORCED_ACTION86=(IToken)Match(input,FORCED_ACTION,Follow._FORCED_ACTION_in_elementNoOptionSpec1882); if (state.failed) return retval;
+				FORCED_ACTION87=(IToken)Match(input,FORCED_ACTION,Follow._FORCED_ACTION_in_elementNoOptionSpec1827); if (state.failed) return retval;
if ( state.backtracking==0 ) {
-				FORCED_ACTION86_tree = (GrammarAST)adaptor.Create(FORCED_ACTION86);
-				adaptor.AddChild(root_0, FORCED_ACTION86_tree);
+				FORCED_ACTION87_tree = (GrammarAST)adaptor.Create(FORCED_ACTION87);
+				adaptor.AddChild(root_0, FORCED_ACTION87_tree);
}

}
break;
case 5:
-				// Grammars\\ANTLR.g3:491:5: ACTION
+				// Grammars\\ANTLR.g3:480:5: ACTION
{
-				ACTION87=(IToken)Match(input,ACTION,Follow._ACTION_in_elementNoOptionSpec1888); if (state.failed) return retval;
+				ACTION88=(IToken)Match(input,ACTION,Follow._ACTION_in_elementNoOptionSpec1833); if (state.failed) return retval;
if ( state.backtracking==0 ) {
-				ACTION87_tree = (GrammarAST)adaptor.Create(ACTION87);
-				adaptor.AddChild(root_0, ACTION87_tree);
+				ACTION88_tree = (GrammarAST)adaptor.Create(ACTION88);
+				adaptor.AddChild(root_0, ACTION88_tree);
}

}
break;
case 6:
-				// Grammars\\ANTLR.g3:492:5: p= SEMPRED ( IMPLIES )?
+				// Grammars\\ANTLR.g3:481:5: p= SEMPRED ( IMPLIES )?
{
-				p=(IToken)Match(input,SEMPRED,Follow._SEMPRED_in_elementNoOptionSpec1896); if (state.failed) return retval;
+				p=(IToken)Match(input,SEMPRED,Follow._SEMPRED_in_elementNoOptionSpec1841); if (state.failed) return retval;
if ( state.backtracking==0 ) {
p_tree = (GrammarAST)adaptor.Create(p);
adaptor.AddChild(root_0, p_tree);
}
-				// Grammars\\ANTLR.g3:492:15: ( IMPLIES )?
+				// Grammars\\ANTLR.g3:481:15: ( IMPLIES )?
int alt48=2;
int LA48_0 = input.LA(1);

@@ -4858,9 +4774,9 @@ public partial class ANTLRParser : Parser
switch ( alt48 )
{
case 1:
-					// Grammars\\ANTLR.g3:492:17: IMPLIES
+					// Grammars\\ANTLR.g3:481:17: IMPLIES
{
-					IMPLIES88=(IToken)Match(input,IMPLIES,Follow._IMPLIES_in_elementNoOptionSpec1900); if (state.failed) return retval;
+					IMPLIES89=(IToken)Match(input,IMPLIES,Follow._IMPLIES_in_elementNoOptionSpec1845); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
p.Type = GATED_SEMPRED;
@@ -4881,9 +4797,9 @@ public partial class ANTLRParser : Parser
}
break;
case 7:
-				// Grammars\\ANTLR.g3:496:5: t3= tree_
+				// Grammars\\ANTLR.g3:485:5: t3= tree_
{
-				PushFollow(Follow._tree__in_elementNoOptionSpec1919);
+				PushFollow(Follow._tree__in_elementNoOptionSpec1864);
t3=tree_();

state._fsp--;
@@ -4927,7 +4843,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "atom"
-	// Grammars\\ANTLR.g3:500:0: atom : ( range ( ROOT | BANG )? | (=> id w= WILDCARD ( terminal | ruleref ) | terminal | ruleref ) | notSet ( ROOT | BANG )? );
+	// Grammars\\ANTLR.g3:489:0: atom : ( range ( ROOT | BANG )? | (=> id w= WILDCARD ( terminal | ruleref ) | terminal | ruleref ) | notSet ( ROOT | BANG )? );
private ANTLRParser.atom_return atom(  )
{
ANTLRParser.atom_return retval = new ANTLRParser.atom_return();
@@ -4936,27 +4852,27 @@ public partial class ANTLRParser : Parser
GrammarAST root_0 = null;

IToken w=null;
-		IToken ROOT90=null;
-		IToken BANG91=null;
-		IToken ROOT98=null;
-		IToken BANG99=null;
-		ANTLRParser.range_return range89 = default(ANTLRParser.range_return);
-		ANTLRParser.id_return id92 = default(ANTLRParser.id_return);
-		ANTLRParser.terminal_return terminal93 = default(ANTLRParser.terminal_return);
-		ANTLRParser.ruleref_return ruleref94 = default(ANTLRParser.ruleref_return);
-		ANTLRParser.terminal_return terminal95 = default(ANTLRParser.terminal_return);
-		ANTLRParser.ruleref_return ruleref96 = default(ANTLRParser.ruleref_return);
-		ANTLRParser.notSet_return notSet97 = default(ANTLRParser.notSet_return);
+		IToken ROOT91=null;
+		IToken BANG92=null;
+		IToken ROOT99=null;
+		IToken BANG100=null;
+		ANTLRParser.range_return range90 = default(ANTLRParser.range_return);
+		ANTLRParser.id_return id93 = default(ANTLRParser.id_return);
+		ANTLRParser.terminal_return terminal94 = default(ANTLRParser.terminal_return);
+		ANTLRParser.ruleref_return ruleref95 = default(ANTLRParser.ruleref_return);
+		ANTLRParser.terminal_return terminal96 = default(ANTLRParser.terminal_return);
+		ANTLRParser.ruleref_return ruleref97 = default(ANTLRParser.ruleref_return);
+		ANTLRParser.notSet_return notSet98 = default(ANTLRParser.notSet_return);

GrammarAST w_tree=null;
-		GrammarAST ROOT90_tree=null;
-		GrammarAST BANG91_tree=null;
-		GrammarAST ROOT98_tree=null;
-		GrammarAST BANG99_tree=null;
+		GrammarAST ROOT91_tree=null;
+		GrammarAST BANG92_tree=null;
+		GrammarAST ROOT99_tree=null;
+		GrammarAST BANG100_tree=null;

try
{
-			// Grammars\\ANTLR.g3:501:4: ( range ( ROOT | BANG )? | (=> id w= WILDCARD ( terminal | ruleref ) | terminal | ruleref ) | notSet ( ROOT | BANG )? )
+			// Grammars\\ANTLR.g3:490:4: ( range ( ROOT | BANG )? | (=> id w= WILDCARD ( terminal | ruleref ) | terminal | ruleref ) | notSet ( ROOT | BANG )? )
int alt54=3;
switch ( input.LA(1) )
{
@@ -5006,17 +4922,17 @@ public partial class ANTLRParser : Parser
switch ( alt54 )
{
case 1:
-				// Grammars\\ANTLR.g3:501:4: range ( ROOT | BANG )?
+				// Grammars\\ANTLR.g3:490:4: range ( ROOT | BANG )?
{
root_0 = (GrammarAST)adaptor.Nil();

-				PushFollow(Follow._range_in_atom1934);
-				range89=range();
+				PushFollow(Follow._range_in_atom1879);
+				range90=range();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, range89.Tree);
-				// Grammars\\ANTLR.g3:501:10: ( ROOT | BANG )?
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, range90.Tree);
+				// Grammars\\ANTLR.g3:490:10: ( ROOT | BANG )?
int alt50=3;
int LA50_0 = input.LA(1);

@@ -5031,23 +4947,23 @@ public partial class ANTLRParser : Parser
switch ( alt50 )
{
case 1:
-					// Grammars\\ANTLR.g3:501:11: ROOT
+					// Grammars\\ANTLR.g3:490:11: ROOT
{
-					ROOT90=(IToken)Match(input,ROOT,Follow._ROOT_in_atom1937); if (state.failed) return retval;
+					ROOT91=(IToken)Match(input,ROOT,Follow._ROOT_in_atom1882); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-					ROOT90_tree = (GrammarAST)adaptor.Create(ROOT90);
-					root_0 = (GrammarAST)adaptor.BecomeRoot(ROOT90_tree, root_0);
+					ROOT91_tree = (GrammarAST)adaptor.Create(ROOT91);
+					root_0 = (GrammarAST)adaptor.BecomeRoot(ROOT91_tree, root_0);
}

}
break;
case 2:
-					// Grammars\\ANTLR.g3:501:17: BANG
+					// Grammars\\ANTLR.g3:490:17: BANG
{
-					BANG91=(IToken)Match(input,BANG,Follow._BANG_in_atom1940); if (state.failed) return retval;
+					BANG92=(IToken)Match(input,BANG,Follow._BANG_in_atom1885); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-					BANG91_tree = (GrammarAST)adaptor.Create(BANG91);
-					root_0 = (GrammarAST)adaptor.BecomeRoot(BANG91_tree, root_0);
+					BANG92_tree = (GrammarAST)adaptor.Create(BANG92);
+					root_0 = (GrammarAST)adaptor.BecomeRoot(BANG92_tree, root_0);
}

}
@@ -5059,31 +4975,31 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-				// Grammars\\ANTLR.g3:502:4: (=> id w= WILDCARD ( terminal | ruleref ) | terminal | ruleref )
+				// Grammars\\ANTLR.g3:491:4: (=> id w= WILDCARD ( terminal | ruleref ) | terminal | ruleref )
{
root_0 = (GrammarAST)adaptor.Nil();

-				// Grammars\\ANTLR.g3:502:4: (=> id w= WILDCARD ( terminal | ruleref ) | terminal | ruleref )
+				// Grammars\\ANTLR.g3:491:4: (=> id w= WILDCARD ( terminal | ruleref ) | terminal | ruleref )
int alt52=3;
alt52 = dfa52.Predict(input);
switch ( alt52 )
{
case 1:
-					// Grammars\\ANTLR.g3:505:4: => id w= WILDCARD ( terminal | ruleref )
+					// Grammars\\ANTLR.g3:494:4: => id w= WILDCARD ( terminal | ruleref )
{

-					PushFollow(Follow._id_in_atom1980);
-					id92=id();
+					PushFollow(Follow._id_in_atom1925);
+					id93=id();

state._fsp--;
if (state.failed) return retval;
-					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, id92.Tree);
-					w=(IToken)Match(input,WILDCARD,Follow._WILDCARD_in_atom1984); if (state.failed) return retval;
+					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, id93.Tree);
+					w=(IToken)Match(input,WILDCARD,Follow._WILDCARD_in_atom1929); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
w_tree = (GrammarAST)adaptor.Create(w);
root_0 = (GrammarAST)adaptor.BecomeRoot(w_tree, root_0);
}
-					// Grammars\\ANTLR.g3:507:19: ( terminal | ruleref )
+					// Grammars\\ANTLR.g3:496:19: ( terminal | ruleref )
int alt51=2;
int LA51_0 = input.LA(1);

@@ -5105,26 +5021,26 @@ public partial class ANTLRParser : Parser
switch ( alt51 )
{
case 1:
-						// Grammars\\ANTLR.g3:507:20: terminal
+						// Grammars\\ANTLR.g3:496:20: terminal
{
-						PushFollow(Follow._terminal_in_atom1988);
-						terminal93=terminal();
+						PushFollow(Follow._terminal_in_atom1933);
+						terminal94=terminal();

state._fsp--;
if (state.failed) return retval;
-						if ( state.backtracking == 0 ) adaptor.AddChild(root_0, terminal93.Tree);
+						if ( state.backtracking == 0 ) adaptor.AddChild(root_0, terminal94.Tree);

}
break;
case 2:
-						// Grammars\\ANTLR.g3:507:29: ruleref
+						// Grammars\\ANTLR.g3:496:29: ruleref
{
-						PushFollow(Follow._ruleref_in_atom1990);
-						ruleref94=ruleref();
+						PushFollow(Follow._ruleref_in_atom1935);
+						ruleref95=ruleref();

state._fsp--;
if (state.failed) return retval;
-						if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ruleref94.Tree);
+						if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ruleref95.Tree);

}
break;
@@ -5139,26 +5055,26 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-					// Grammars\\ANTLR.g3:508:5: terminal
+					// Grammars\\ANTLR.g3:497:5: terminal
{
-					PushFollow(Follow._terminal_in_atom1999);
-					terminal95=terminal();
+					PushFollow(Follow._terminal_in_atom1944);
+					terminal96=terminal();

state._fsp--;
if (state.failed) return retval;
-					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, terminal95.Tree);
+					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, terminal96.Tree);

}
break;
case 3:
-					// Grammars\\ANTLR.g3:509:5: ruleref
+					// Grammars\\ANTLR.g3:498:5: ruleref
{
-					PushFollow(Follow._ruleref_in_atom2005);
-					ruleref96=ruleref();
+					PushFollow(Follow._ruleref_in_atom1950);
+					ruleref97=ruleref();

state._fsp--;
if (state.failed) return retval;
-					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ruleref96.Tree);
+					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, ruleref97.Tree);

}
break;
@@ -5169,17 +5085,17 @@ public partial class ANTLRParser : Parser
}
break;
case 3:
-				// Grammars\\ANTLR.g3:511:4: notSet ( ROOT | BANG )?
+				// Grammars\\ANTLR.g3:500:4: notSet ( ROOT | BANG )?
{
root_0 = (GrammarAST)adaptor.Nil();

-				PushFollow(Follow._notSet_in_atom2014);
-				notSet97=notSet();
+				PushFollow(Follow._notSet_in_atom1959);
+				notSet98=notSet();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, notSet97.Tree);
-				// Grammars\\ANTLR.g3:511:11: ( ROOT | BANG )?
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, notSet98.Tree);
+				// Grammars\\ANTLR.g3:500:11: ( ROOT | BANG )?
int alt53=3;
int LA53_0 = input.LA(1);

@@ -5194,23 +5110,23 @@ public partial class ANTLRParser : Parser
switch ( alt53 )
{
case 1:
-					// Grammars\\ANTLR.g3:511:12: ROOT
+					// Grammars\\ANTLR.g3:500:12: ROOT
{
-					ROOT98=(IToken)Match(input,ROOT,Follow._ROOT_in_atom2017); if (state.failed) return retval;
+					ROOT99=(IToken)Match(input,ROOT,Follow._ROOT_in_atom1962); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-					ROOT98_tree = (GrammarAST)adaptor.Create(ROOT98);
-					root_0 = (GrammarAST)adaptor.BecomeRoot(ROOT98_tree, root_0);
+					ROOT99_tree = (GrammarAST)adaptor.Create(ROOT99);
+					root_0 = (GrammarAST)adaptor.BecomeRoot(ROOT99_tree, root_0);
}

}
break;
case 2:
-					// Grammars\\ANTLR.g3:511:18: BANG
+					// Grammars\\ANTLR.g3:500:18: BANG
{
-					BANG99=(IToken)Match(input,BANG,Follow._BANG_in_atom2020); if (state.failed) return retval;
+					BANG100=(IToken)Match(input,BANG,Follow._BANG_in_atom1965); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-					BANG99_tree = (GrammarAST)adaptor.Create(BANG99);
-					root_0 = (GrammarAST)adaptor.BecomeRoot(BANG99_tree, root_0);
+					BANG100_tree = (GrammarAST)adaptor.Create(BANG100);
+					root_0 = (GrammarAST)adaptor.BecomeRoot(BANG100_tree, root_0);
}

}
@@ -5252,7 +5168,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "ruleref"
-	// Grammars\\ANTLR.g3:514:0: ruleref : rr= RULE_REF ( ARG_ACTION )? ( ROOT | BANG )? ;
+	// Grammars\\ANTLR.g3:503:0: ruleref : RULE_REF ( ARG_ACTION )? ( ROOT | BANG )? ;
private ANTLRParser.ruleref_return ruleref(  )
{
ANTLRParser.ruleref_return retval = new ANTLRParser.ruleref_return();
@@ -5260,29 +5176,29 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken rr=null;
-		IToken ARG_ACTION100=null;
-		IToken ROOT101=null;
-		IToken BANG102=null;
+		IToken RULE_REF101=null;
+		IToken ARG_ACTION102=null;
+		IToken ROOT103=null;
+		IToken BANG104=null;

-		GrammarAST rr_tree=null;
-		GrammarAST ARG_ACTION100_tree=null;
-		GrammarAST ROOT101_tree=null;
-		GrammarAST BANG102_tree=null;
+		GrammarAST RULE_REF101_tree=null;
+		GrammarAST ARG_ACTION102_tree=null;
+		GrammarAST ROOT103_tree=null;
+		GrammarAST BANG104_tree=null;

try
{
-			// Grammars\\ANTLR.g3:515:4: (rr= RULE_REF ( ARG_ACTION )? ( ROOT | BANG )? )
-			// Grammars\\ANTLR.g3:515:4: rr= RULE_REF ( ARG_ACTION )? ( ROOT | BANG )?
+			// Grammars\\ANTLR.g3:504:4: ( RULE_REF ( ARG_ACTION )? ( ROOT | BANG )? )
+			// Grammars\\ANTLR.g3:504:4: RULE_REF ( ARG_ACTION )? ( ROOT | BANG )?
{
root_0 = (GrammarAST)adaptor.Nil();

-			rr=(IToken)Match(input,RULE_REF,Follow._RULE_REF_in_ruleref2036); if (state.failed) return retval;
+			RULE_REF101=(IToken)Match(input,RULE_REF,Follow._RULE_REF_in_ruleref1979); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-			rr_tree = (GrammarAST)adaptor.Create(rr);
-			root_0 = (GrammarAST)adaptor.BecomeRoot(rr_tree, root_0);
+			RULE_REF101_tree = (GrammarAST)adaptor.Create(RULE_REF101);
+			root_0 = (GrammarAST)adaptor.BecomeRoot(RULE_REF101_tree, root_0);
}
-			// Grammars\\ANTLR.g3:515:17: ( ARG_ACTION )?
+			// Grammars\\ANTLR.g3:504:14: ( ARG_ACTION )?
int alt55=2;
int LA55_0 = input.LA(1);

@@ -5293,12 +5209,12 @@ public partial class ANTLRParser : Parser
switch ( alt55 )
{
case 1:
-				// Grammars\\ANTLR.g3:515:19: ARG_ACTION
+				// Grammars\\ANTLR.g3:504:0: ARG_ACTION
{
-				ARG_ACTION100=(IToken)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_ruleref2041); if (state.failed) return retval;
+				ARG_ACTION102=(IToken)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_ruleref1982); if (state.failed) return retval;
if ( state.backtracking==0 ) {
-				ARG_ACTION100_tree = (GrammarAST)adaptor.Create(ARG_ACTION100);
-				adaptor.AddChild(root_0, ARG_ACTION100_tree);
+				ARG_ACTION102_tree = (GrammarAST)adaptor.Create(ARG_ACTION102);
+				adaptor.AddChild(root_0, ARG_ACTION102_tree);
}

}
@@ -5306,7 +5222,7 @@ public partial class ANTLRParser : Parser

}

-			// Grammars\\ANTLR.g3:515:33: ( ROOT | BANG )?
+			// Grammars\\ANTLR.g3:504:26: ( ROOT | BANG )?
int alt56=3;
int LA56_0 = input.LA(1);

@@ -5321,23 +5237,23 @@ public partial class ANTLRParser : Parser
switch ( alt56 )
{
case 1:
-				// Grammars\\ANTLR.g3:515:34: ROOT
+				// Grammars\\ANTLR.g3:504:27: ROOT
{
-				ROOT101=(IToken)Match(input,ROOT,Follow._ROOT_in_ruleref2047); if (state.failed) return retval;
+				ROOT103=(IToken)Match(input,ROOT,Follow._ROOT_in_ruleref1986); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-				ROOT101_tree = (GrammarAST)adaptor.Create(ROOT101);
-				root_0 = (GrammarAST)adaptor.BecomeRoot(ROOT101_tree, root_0);
+				ROOT103_tree = (GrammarAST)adaptor.Create(ROOT103);
+				root_0 = (GrammarAST)adaptor.BecomeRoot(ROOT103_tree, root_0);
}

}
break;
case 2:
-				// Grammars\\ANTLR.g3:515:40: BANG
+				// Grammars\\ANTLR.g3:504:33: BANG
{
-				BANG102=(IToken)Match(input,BANG,Follow._BANG_in_ruleref2050); if (state.failed) return retval;
+				BANG104=(IToken)Match(input,BANG,Follow._BANG_in_ruleref1989); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-				BANG102_tree = (GrammarAST)adaptor.Create(BANG102);
-				root_0 = (GrammarAST)adaptor.BecomeRoot(BANG102_tree, root_0);
+				BANG104_tree = (GrammarAST)adaptor.Create(BANG104);
+				root_0 = (GrammarAST)adaptor.BecomeRoot(BANG104_tree, root_0);
}

}
@@ -5377,7 +5293,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "notSet"
-	// Grammars\\ANTLR.g3:518:0: notSet : NOT ( notTerminal | block ) ;
+	// Grammars\\ANTLR.g3:507:0: notSet : NOT ( notTerminal | block ) ;
private ANTLRParser.notSet_return notSet(  )
{
ANTLRParser.notSet_return retval = new ANTLRParser.notSet_return();
@@ -5385,25 +5301,25 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken NOT103=null;
-		ANTLRParser.notTerminal_return notTerminal104 = default(ANTLRParser.notTerminal_return);
-		ANTLRParser.block_return block105 = default(ANTLRParser.block_return);
+		IToken NOT105=null;
+		ANTLRParser.notTerminal_return notTerminal106 = default(ANTLRParser.notTerminal_return);
+		ANTLRParser.block_return block107 = default(ANTLRParser.block_return);

-		GrammarAST NOT103_tree=null;
+		GrammarAST NOT105_tree=null;

try
{
-			// Grammars\\ANTLR.g3:519:4: ( NOT ( notTerminal | block ) )
-			// Grammars\\ANTLR.g3:519:4: NOT ( notTerminal | block )
+			// Grammars\\ANTLR.g3:508:4: ( NOT ( notTerminal | block ) )
+			// Grammars\\ANTLR.g3:508:4: NOT ( notTerminal | block )
{
root_0 = (GrammarAST)adaptor.Nil();

-			NOT103=(IToken)Match(input,NOT,Follow._NOT_in_notSet2064); if (state.failed) return retval;
+			NOT105=(IToken)Match(input,NOT,Follow._NOT_in_notSet2003); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-			NOT103_tree = (GrammarAST)adaptor.Create(NOT103);
-			root_0 = (GrammarAST)adaptor.BecomeRoot(NOT103_tree, root_0);
+			NOT105_tree = (GrammarAST)adaptor.Create(NOT105);
+			root_0 = (GrammarAST)adaptor.BecomeRoot(NOT105_tree, root_0);
}
-			// Grammars\\ANTLR.g3:520:3: ( notTerminal | block )
+			// Grammars\\ANTLR.g3:509:3: ( notTerminal | block )
int alt57=2;
int LA57_0 = input.LA(1);

@@ -5425,26 +5341,26 @@ public partial class ANTLRParser : Parser
switch ( alt57 )
{
case 1:
-				// Grammars\\ANTLR.g3:520:5: notTerminal
+				// Grammars\\ANTLR.g3:509:5: notTerminal
{
-				PushFollow(Follow._notTerminal_in_notSet2071);
-				notTerminal104=notTerminal();
+				PushFollow(Follow._notTerminal_in_notSet2010);
+				notTerminal106=notTerminal();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, notTerminal104.Tree);
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, notTerminal106.Tree);

}
break;
case 2:
-				// Grammars\\ANTLR.g3:521:5: block
+				// Grammars\\ANTLR.g3:510:5: block
{
-				PushFollow(Follow._block_in_notSet2077);
-				block105=block();
+				PushFollow(Follow._block_in_notSet2016);
+				block107=block();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block105.Tree);
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block107.Tree);

}
break;
@@ -5483,7 +5399,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "treeRoot"
-	// Grammars\\ANTLR.g3:525:0: treeRoot : ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) | atom | block ) ;
+	// Grammars\\ANTLR.g3:514:0: treeRoot : ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) | atom | block );
private ANTLRParser.treeRoot_return treeRoot(  )
{
ANTLRParser.treeRoot_return retval = new ANTLRParser.treeRoot_return();
@@ -5491,29 +5407,21 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken ASSIGN107=null;
-		IToken PLUS_ASSIGN108=null;
-		ANTLRParser.id_return id106 = default(ANTLRParser.id_return);
-		ANTLRParser.atom_return atom109 = default(ANTLRParser.atom_return);
-		ANTLRParser.block_return block110 = default(ANTLRParser.block_return);
+		IToken ASSIGN109=null;
+		IToken PLUS_ASSIGN110=null;
+		ANTLRParser.id_return id108 = default(ANTLRParser.id_return);
ANTLRParser.atom_return atom111 = default(ANTLRParser.atom_return);
ANTLRParser.block_return block112 = default(ANTLRParser.block_return);
+		ANTLRParser.atom_return atom113 = default(ANTLRParser.atom_return);
+		ANTLRParser.block_return block114 = default(ANTLRParser.block_return);

-		GrammarAST ASSIGN107_tree=null;
-		GrammarAST PLUS_ASSIGN108_tree=null;
+		GrammarAST ASSIGN109_tree=null;
+		GrammarAST PLUS_ASSIGN110_tree=null;

+		atTreeRoot=true;
try
{
-			// Grammars\\ANTLR.g3:526:4: ( ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) | atom | block ) )
-			// Grammars\\ANTLR.g3:526:4: ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) | atom | block )
-			{
-			root_0 = (GrammarAST)adaptor.Nil();
-
-			if ( state.backtracking == 0 )
-			{
-				atTreeRoot=true;
-			}
-			// Grammars\\ANTLR.g3:527:3: ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) | atom | block )
+			// Grammars\\ANTLR.g3:517:4: ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) | atom | block )
int alt60=3;
switch ( input.LA(1) )
{
@@ -5584,15 +5492,17 @@ public partial class ANTLRParser : Parser
switch ( alt60 )
{
case 1:
-				// Grammars\\ANTLR.g3:527:5: id ( ASSIGN | PLUS_ASSIGN ) ( atom | block )
+				// Grammars\\ANTLR.g3:517:4: id ( ASSIGN | PLUS_ASSIGN ) ( atom | block )
{
-				PushFollow(Follow._id_in_treeRoot2098);
-				id106=id();
+				root_0 = (GrammarAST)adaptor.Nil();
+
+				PushFollow(Follow._id_in_treeRoot2039);
+				id108=id();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, id106.Tree);
-				// Grammars\\ANTLR.g3:527:8: ( ASSIGN | PLUS_ASSIGN )
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, id108.Tree);
+				// Grammars\\ANTLR.g3:517:7: ( ASSIGN | PLUS_ASSIGN )
int alt58=2;
int LA58_0 = input.LA(1);

@@ -5614,23 +5524,23 @@ public partial class ANTLRParser : Parser
switch ( alt58 )
{
case 1:
-					// Grammars\\ANTLR.g3:527:9: ASSIGN
+					// Grammars\\ANTLR.g3:517:8: ASSIGN
{
-					ASSIGN107=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_treeRoot2101); if (state.failed) return retval;
+					ASSIGN109=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_treeRoot2042); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-					ASSIGN107_tree = (GrammarAST)adaptor.Create(ASSIGN107);
-					root_0 = (GrammarAST)adaptor.BecomeRoot(ASSIGN107_tree, root_0);
+					ASSIGN109_tree = (GrammarAST)adaptor.Create(ASSIGN109);
+					root_0 = (GrammarAST)adaptor.BecomeRoot(ASSIGN109_tree, root_0);
}

}
break;
case 2:
-					// Grammars\\ANTLR.g3:527:17: PLUS_ASSIGN
+					// Grammars\\ANTLR.g3:517:16: PLUS_ASSIGN
{
-					PLUS_ASSIGN108=(IToken)Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_treeRoot2104); if (state.failed) return retval;
+					PLUS_ASSIGN110=(IToken)Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_treeRoot2045); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-					PLUS_ASSIGN108_tree = (GrammarAST)adaptor.Create(PLUS_ASSIGN108);
-					root_0 = (GrammarAST)adaptor.BecomeRoot(PLUS_ASSIGN108_tree, root_0);
+					PLUS_ASSIGN110_tree = (GrammarAST)adaptor.Create(PLUS_ASSIGN110);
+					root_0 = (GrammarAST)adaptor.BecomeRoot(PLUS_ASSIGN110_tree, root_0);
}

}
@@ -5638,7 +5548,7 @@ public partial class ANTLRParser : Parser

}

-				// Grammars\\ANTLR.g3:527:31: ( atom | block )
+				// Grammars\\ANTLR.g3:517:30: ( atom | block )
int alt59=2;
int LA59_0 = input.LA(1);

@@ -5660,26 +5570,26 @@ public partial class ANTLRParser : Parser
switch ( alt59 )
{
case 1:
-					// Grammars\\ANTLR.g3:527:32: atom
+					// Grammars\\ANTLR.g3:517:31: atom
{
-					PushFollow(Follow._atom_in_treeRoot2109);
-					atom109=atom();
+					PushFollow(Follow._atom_in_treeRoot2050);
+					atom111=atom();

state._fsp--;
if (state.failed) return retval;
-					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, atom109.Tree);
+					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, atom111.Tree);

}
break;
case 2:
-					// Grammars\\ANTLR.g3:527:37: block
+					// Grammars\\ANTLR.g3:517:36: block
{
-					PushFollow(Follow._block_in_treeRoot2111);
-					block110=block();
+					PushFollow(Follow._block_in_treeRoot2052);
+					block112=block();

state._fsp--;
if (state.failed) return retval;
-					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block110.Tree);
+					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block112.Tree);

}
break;
@@ -5690,39 +5600,35 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-				// Grammars\\ANTLR.g3:528:5: atom
+				// Grammars\\ANTLR.g3:518:4: atom
{
-				PushFollow(Follow._atom_in_treeRoot2118);
-				atom111=atom();
+				root_0 = (GrammarAST)adaptor.Nil();
+
+				PushFollow(Follow._atom_in_treeRoot2058);
+				atom113=atom();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, atom111.Tree);
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, atom113.Tree);

}
break;
case 3:
-				// Grammars\\ANTLR.g3:529:5: block
+				// Grammars\\ANTLR.g3:519:4: block
{
-				PushFollow(Follow._block_in_treeRoot2124);
-				block112=block();
+				root_0 = (GrammarAST)adaptor.Nil();
+
+				PushFollow(Follow._block_in_treeRoot2063);
+				block114=block();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block112.Tree);
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, block114.Tree);

}
break;

}
-
-			if ( state.backtracking == 0 )
-			{
-				atTreeRoot=false;
-			}
-
-			}
-
retval.stop = input.LT(-1);

if ( state.backtracking == 0 ) {
@@ -5730,6 +5636,10 @@ public partial class ANTLRParser : Parser
retval.tree = (GrammarAST)adaptor.RulePostProcessing(root_0);
adaptor.SetTokenBoundaries(retval.tree, retval.start, retval.stop);
}
+			if ( state.backtracking == 0 )
+			{
+				atTreeRoot=false;
+			}
}
catch ( RecognitionException re )
{
@@ -5752,7 +5662,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "tree_"
-	// Grammars\\ANTLR.g3:534:0: tree_ : TREE_BEGIN treeRoot ( element )+ RPAREN ;
+	// Grammars\\ANTLR.g3:522:0: tree_ : TREE_BEGIN treeRoot ( element )+ RPAREN ;
private ANTLRParser.tree__return tree_(  )
{
ANTLRParser.tree__return retval = new ANTLRParser.tree__return();
@@ -5760,33 +5670,33 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken TREE_BEGIN113=null;
-		IToken RPAREN116=null;
-		ANTLRParser.treeRoot_return treeRoot114 = default(ANTLRParser.treeRoot_return);
-		ANTLRParser.element_return element115 = default(ANTLRParser.element_return);
+		IToken TREE_BEGIN115=null;
+		IToken RPAREN118=null;
+		ANTLRParser.treeRoot_return treeRoot116 = default(ANTLRParser.treeRoot_return);
+		ANTLRParser.element_return element117 = default(ANTLRParser.element_return);

-		GrammarAST TREE_BEGIN113_tree=null;
-		GrammarAST RPAREN116_tree=null;
+		GrammarAST TREE_BEGIN115_tree=null;
+		GrammarAST RPAREN118_tree=null;

try
{
-			// Grammars\\ANTLR.g3:535:4: ( TREE_BEGIN treeRoot ( element )+ RPAREN )
-			// Grammars\\ANTLR.g3:535:4: TREE_BEGIN treeRoot ( element )+ RPAREN
+			// Grammars\\ANTLR.g3:523:4: ( TREE_BEGIN treeRoot ( element )+ RPAREN )
+			// Grammars\\ANTLR.g3:523:4: TREE_BEGIN treeRoot ( element )+ RPAREN
{
root_0 = (GrammarAST)adaptor.Nil();

-			TREE_BEGIN113=(IToken)Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_tree_2143); if (state.failed) return retval;
+			TREE_BEGIN115=(IToken)Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_tree_2074); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-			TREE_BEGIN113_tree = (GrammarAST)adaptor.Create(TREE_BEGIN113);
-			root_0 = (GrammarAST)adaptor.BecomeRoot(TREE_BEGIN113_tree, root_0);
+			TREE_BEGIN115_tree = (GrammarAST)adaptor.Create(TREE_BEGIN115);
+			root_0 = (GrammarAST)adaptor.BecomeRoot(TREE_BEGIN115_tree, root_0);
}
-			PushFollow(Follow._treeRoot_in_tree_2148);
-			treeRoot114=treeRoot();
+			PushFollow(Follow._treeRoot_in_tree_2079);
+			treeRoot116=treeRoot();

state._fsp--;
if (state.failed) return retval;
-			if ( state.backtracking == 0 ) adaptor.AddChild(root_0, treeRoot114.Tree);
-			// Grammars\\ANTLR.g3:536:12: ( element )+
+			if ( state.backtracking == 0 ) adaptor.AddChild(root_0, treeRoot116.Tree);
+			// Grammars\\ANTLR.g3:524:12: ( element )+
int cnt61=0;
for ( ; ; )
{
@@ -5802,14 +5712,14 @@ public partial class ANTLRParser : Parser
switch ( alt61 )
{
case 1:
-					// Grammars\\ANTLR.g3:536:14: element
+					// Grammars\\ANTLR.g3:524:0: element
{
-					PushFollow(Follow._element_in_tree_2152);
-					element115=element();
+					PushFollow(Follow._element_in_tree_2081);
+					element117=element();

state._fsp--;
if (state.failed) return retval;
-					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, element115.Tree);
+					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, element117.Tree);

}
break;
@@ -5828,7 +5738,7 @@ public partial class ANTLRParser : Parser
;


-			RPAREN116=(IToken)Match(input,RPAREN,Follow._RPAREN_in_tree_2159); if (state.failed) return retval;
+			RPAREN118=(IToken)Match(input,RPAREN,Follow._RPAREN_in_tree_2086); if (state.failed) return retval;

}

@@ -5861,7 +5771,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "ebnf"
-	// Grammars\\ANTLR.g3:541:0: ebnf : block ( QUESTION -> ^( OPTIONAL[$start,\"?\"] block ) | STAR -> ^( CLOSURE[$start,\"*\"] block ) | PLUS -> ^( POSITIVE_CLOSURE[$start,\"+\"] block ) | IMPLIES -> {GrammarType == COMBINED_GRAMMAR && char.IsUpper(currentRuleName[0])}? ^( SYNPRED[$start,\"=>\"] block ) ->| ROOT -> ^( ROOT block ) | BANG -> ^( BANG block ) | -> block ) ;
+	// Grammars\\ANTLR.g3:529:0: ebnf : block ( QUESTION -> ^( OPTIONAL[$start,\"?\"] block ) | STAR -> ^( CLOSURE[$start,\"*\"] block ) | PLUS -> ^( POSITIVE_CLOSURE[$start,\"+\"] block ) | IMPLIES -> {GrammarType == COMBINED_GRAMMAR && char.IsUpper(currentRuleName[0])}? ^( SYNPRED[$start,\"=>\"] block ) ->| ROOT -> ^( ROOT block ) | BANG -> ^( BANG block ) | -> block ) ;
private ANTLRParser.ebnf_return ebnf(  )
{
ANTLRParser.ebnf_return retval = new ANTLRParser.ebnf_return();
@@ -5869,20 +5779,20 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken QUESTION118=null;
-		IToken STAR119=null;
-		IToken PLUS120=null;
-		IToken IMPLIES121=null;
-		IToken ROOT122=null;
-		IToken BANG123=null;
-		ANTLRParser.block_return block117 = default(ANTLRParser.block_return);
-
-		GrammarAST QUESTION118_tree=null;
-		GrammarAST STAR119_tree=null;
-		GrammarAST PLUS120_tree=null;
-		GrammarAST IMPLIES121_tree=null;
-		GrammarAST ROOT122_tree=null;
-		GrammarAST BANG123_tree=null;
+		IToken QUESTION120=null;
+		IToken STAR121=null;
+		IToken PLUS122=null;
+		IToken IMPLIES123=null;
+		IToken ROOT124=null;
+		IToken BANG125=null;
+		ANTLRParser.block_return block119 = default(ANTLRParser.block_return);
+
+		GrammarAST QUESTION120_tree=null;
+		GrammarAST STAR121_tree=null;
+		GrammarAST PLUS122_tree=null;
+		GrammarAST IMPLIES123_tree=null;
+		GrammarAST ROOT124_tree=null;
+		GrammarAST BANG125_tree=null;
RewriteRuleITokenStream stream_QUESTION=new RewriteRuleITokenStream(adaptor,"token QUESTION");
RewriteRuleITokenStream stream_STAR=new RewriteRuleITokenStream(adaptor,"token STAR");
RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
@@ -5892,16 +5802,16 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
try
{
-			// Grammars\\ANTLR.g3:542:4: ( block ( QUESTION -> ^( OPTIONAL[$start,\"?\"] block ) | STAR -> ^( CLOSURE[$start,\"*\"] block ) | PLUS -> ^( POSITIVE_CLOSURE[$start,\"+\"] block ) | IMPLIES -> {GrammarType == COMBINED_GRAMMAR && char.IsUpper(currentRuleName[0])}? ^( SYNPRED[$start,\"=>\"] block ) ->| ROOT -> ^( ROOT block ) | BANG -> ^( BANG block ) | -> block ) )
-			// Grammars\\ANTLR.g3:542:4: block ( QUESTION -> ^( OPTIONAL[$start,\"?\"] block ) | STAR -> ^( CLOSURE[$start,\"*\"] block ) | PLUS -> ^( POSITIVE_CLOSURE[$start,\"+\"] block ) | IMPLIES -> {GrammarType == COMBINED_GRAMMAR && char.IsUpper(currentRuleName[0])}? ^( SYNPRED[$start,\"=>\"] block ) ->| ROOT -> ^( ROOT block ) | BANG -> ^( BANG block ) | -> block )
+			// Grammars\\ANTLR.g3:530:4: ( block ( QUESTION -> ^( OPTIONAL[$start,\"?\"] block ) | STAR -> ^( CLOSURE[$start,\"*\"] block ) | PLUS -> ^( POSITIVE_CLOSURE[$start,\"+\"] block ) | IMPLIES -> {GrammarType == COMBINED_GRAMMAR && char.IsUpper(currentRuleName[0])}? ^( SYNPRED[$start,\"=>\"] block ) ->| ROOT -> ^( ROOT block ) | BANG -> ^( BANG block ) | -> block ) )
+			// Grammars\\ANTLR.g3:530:4: block ( QUESTION -> ^( OPTIONAL[$start,\"?\"] block ) | STAR -> ^( CLOSURE[$start,\"*\"] block ) | PLUS -> ^( POSITIVE_CLOSURE[$start,\"+\"] block ) | IMPLIES -> {GrammarType == COMBINED_GRAMMAR && char.IsUpper(currentRuleName[0])}? ^( SYNPRED[$start,\"=>\"] block ) ->| ROOT -> ^( ROOT block ) | BANG -> ^( BANG block ) | -> block )
{
-			PushFollow(Follow._block_in_ebnf2173);
-			block117=block();
+			PushFollow(Follow._block_in_ebnf2100);
+			block119=block();

state._fsp--;
if (state.failed) return retval;
-			if ( state.backtracking == 0 ) stream_block.Add(block117.Tree);
-			// Grammars\\ANTLR.g3:543:3: ( QUESTION -> ^( OPTIONAL[$start,\"?\"] block ) | STAR -> ^( CLOSURE[$start,\"*\"] block ) | PLUS -> ^( POSITIVE_CLOSURE[$start,\"+\"] block ) | IMPLIES -> {GrammarType == COMBINED_GRAMMAR && char.IsUpper(currentRuleName[0])}? ^( SYNPRED[$start,\"=>\"] block ) ->| ROOT -> ^( ROOT block ) | BANG -> ^( BANG block ) | -> block )
+			if ( state.backtracking == 0 ) stream_block.Add(block119.Tree);
+			// Grammars\\ANTLR.g3:531:3: ( QUESTION -> ^( OPTIONAL[$start,\"?\"] block ) | STAR -> ^( CLOSURE[$start,\"*\"] block ) | PLUS -> ^( POSITIVE_CLOSURE[$start,\"+\"] block ) | IMPLIES -> {GrammarType == COMBINED_GRAMMAR && char.IsUpper(currentRuleName[0])}? ^( SYNPRED[$start,\"=>\"] block ) ->| ROOT -> ^( ROOT block ) | BANG -> ^( BANG block ) | -> block )
int alt62=7;
switch ( input.LA(1) )
{
@@ -5966,10 +5876,10 @@ public partial class ANTLRParser : Parser
switch ( alt62 )
{
case 1:
-				// Grammars\\ANTLR.g3:543:5: QUESTION
+				// Grammars\\ANTLR.g3:531:5: QUESTION
{
-				QUESTION118=(IToken)Match(input,QUESTION,Follow._QUESTION_in_ebnf2179); if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_QUESTION.Add(QUESTION118);
+				QUESTION120=(IToken)Match(input,QUESTION,Follow._QUESTION_in_ebnf2106); if (state.failed) return retval;
+				if ( state.backtracking == 0 ) stream_QUESTION.Add(QUESTION120);



@@ -5986,9 +5896,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 544:4: -> ^( OPTIONAL[$start,\"?\"] block )
+				// 532:4: -> ^( OPTIONAL[$start,\"?\"] block )
{
-					// Grammars\\ANTLR.g3:544:7: ^( OPTIONAL[$start,\"?\"] block )
+					// Grammars\\ANTLR.g3:532:7: ^( OPTIONAL[$start,\"?\"] block )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(OPTIONAL, ((IToken)retval.start), "?"), root_1);
@@ -6007,10 +5917,10 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-				// Grammars\\ANTLR.g3:545:5: STAR
+				// Grammars\\ANTLR.g3:533:5: STAR
{
-				STAR119=(IToken)Match(input,STAR,Follow._STAR_in_ebnf2197); if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_STAR.Add(STAR119);
+				STAR121=(IToken)Match(input,STAR,Follow._STAR_in_ebnf2124); if (state.failed) return retval;
+				if ( state.backtracking == 0 ) stream_STAR.Add(STAR121);



@@ -6027,9 +5937,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 546:4: -> ^( CLOSURE[$start,\"*\"] block )
+				// 534:4: -> ^( CLOSURE[$start,\"*\"] block )
{
-					// Grammars\\ANTLR.g3:546:7: ^( CLOSURE[$start,\"*\"] block )
+					// Grammars\\ANTLR.g3:534:7: ^( CLOSURE[$start,\"*\"] block )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(CLOSURE, ((IToken)retval.start), "*"), root_1);
@@ -6048,10 +5958,10 @@ public partial class ANTLRParser : Parser
}
break;
case 3:
-				// Grammars\\ANTLR.g3:547:5: PLUS
+				// Grammars\\ANTLR.g3:535:5: PLUS
{
-				PLUS120=(IToken)Match(input,PLUS,Follow._PLUS_in_ebnf2215); if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_PLUS.Add(PLUS120);
+				PLUS122=(IToken)Match(input,PLUS,Follow._PLUS_in_ebnf2142); if (state.failed) return retval;
+				if ( state.backtracking == 0 ) stream_PLUS.Add(PLUS122);



@@ -6068,9 +5978,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 548:4: -> ^( POSITIVE_CLOSURE[$start,\"+\"] block )
+				// 536:4: -> ^( POSITIVE_CLOSURE[$start,\"+\"] block )
{
-					// Grammars\\ANTLR.g3:548:7: ^( POSITIVE_CLOSURE[$start,\"+\"] block )
+					// Grammars\\ANTLR.g3:536:7: ^( POSITIVE_CLOSURE[$start,\"+\"] block )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(POSITIVE_CLOSURE, ((IToken)retval.start), "+"), root_1);
@@ -6089,10 +5999,10 @@ public partial class ANTLRParser : Parser
}
break;
case 4:
-				// Grammars\\ANTLR.g3:549:5: IMPLIES
+				// Grammars\\ANTLR.g3:537:5: IMPLIES
{
-				IMPLIES121=(IToken)Match(input,IMPLIES,Follow._IMPLIES_in_ebnf2233); if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_IMPLIES.Add(IMPLIES121);
+				IMPLIES123=(IToken)Match(input,IMPLIES,Follow._IMPLIES_in_ebnf2160); if (state.failed) return retval;
+				if ( state.backtracking == 0 ) stream_IMPLIES.Add(IMPLIES123);



@@ -6109,10 +6019,10 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 551:4: -> {GrammarType == COMBINED_GRAMMAR && char.IsUpper(currentRuleName[0])}? ^( SYNPRED[$start,\"=>\"] block )
+				// 539:4: -> {GrammarType == COMBINED_GRAMMAR && char.IsUpper(currentRuleName[0])}? ^( SYNPRED[$start,\"=>\"] block )
if (GrammarType == COMBINED_GRAMMAR && char.IsUpper(currentRuleName[0]))
{
-					// Grammars\\ANTLR.g3:551:78: ^( SYNPRED[$start,\"=>\"] block )
+					// Grammars\\ANTLR.g3:539:78: ^( SYNPRED[$start,\"=>\"] block )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(SYNPRED, ((IToken)retval.start), "=>"), root_1);
@@ -6123,9 +6033,9 @@ public partial class ANTLRParser : Parser
}

}
-				else // 553:4: ->
+				else // 541:4: ->
{
-					adaptor.AddChild(root_0, CreateSynSemPredFromBlock((block117!=null?((GrammarAST)block117.tree):null), SYN_SEMPRED));
+					adaptor.AddChild(root_0, CreateSynSemPredFromBlock((block119!=null?((GrammarAST)block119.tree):null), SYN_SEMPRED));

}

@@ -6136,10 +6046,10 @@ public partial class ANTLRParser : Parser
}
break;
case 5:
-				// Grammars\\ANTLR.g3:554:5: ROOT
+				// Grammars\\ANTLR.g3:542:5: ROOT
{
-				ROOT122=(IToken)Match(input,ROOT,Follow._ROOT_in_ebnf2269); if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_ROOT.Add(ROOT122);
+				ROOT124=(IToken)Match(input,ROOT,Follow._ROOT_in_ebnf2196); if (state.failed) return retval;
+				if ( state.backtracking == 0 ) stream_ROOT.Add(ROOT124);



@@ -6156,9 +6066,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 555:4: -> ^( ROOT block )
+				// 543:4: -> ^( ROOT block )
{
-					// Grammars\\ANTLR.g3:555:7: ^( ROOT block )
+					// Grammars\\ANTLR.g3:543:7: ^( ROOT block )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot(stream_ROOT.NextNode(), root_1);
@@ -6177,10 +6087,10 @@ public partial class ANTLRParser : Parser
}
break;
case 6:
-				// Grammars\\ANTLR.g3:556:5: BANG
+				// Grammars\\ANTLR.g3:544:5: BANG
{
-				BANG123=(IToken)Match(input,BANG,Follow._BANG_in_ebnf2286); if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_BANG.Add(BANG123);
+				BANG125=(IToken)Match(input,BANG,Follow._BANG_in_ebnf2213); if (state.failed) return retval;
+				if ( state.backtracking == 0 ) stream_BANG.Add(BANG125);



@@ -6197,9 +6107,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 557:4: -> ^( BANG block )
+				// 545:4: -> ^( BANG block )
{
-					// Grammars\\ANTLR.g3:557:7: ^( BANG block )
+					// Grammars\\ANTLR.g3:545:7: ^( BANG block )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot(stream_BANG.NextNode(), root_1);
@@ -6218,7 +6128,7 @@ public partial class ANTLRParser : Parser
}
break;
case 7:
-				// Grammars\\ANTLR.g3:559:4:
+				// Grammars\\ANTLR.g3:547:4:
{


@@ -6236,7 +6146,7 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 559:4: -> block
+				// 547:4: -> block
{
adaptor.AddChild(root_0, stream_block.NextTree());

@@ -6283,7 +6193,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "range"
-	// Grammars\\ANTLR.g3:563:0: range : c1= CHAR_LITERAL RANGE c2= CHAR_LITERAL -> ^( CHAR_RANGE[$c1,\"..\"] $c1 $c2) ;
+	// Grammars\\ANTLR.g3:551:0: range : c1= CHAR_LITERAL RANGE c2= CHAR_LITERAL -> ^( CHAR_RANGE[$c1,\"..\"] $c1 $c2) ;
private ANTLRParser.range_return range(  )
{
ANTLRParser.range_return retval = new ANTLRParser.range_return();
@@ -6293,26 +6203,26 @@ public partial class ANTLRParser : Parser

IToken c1=null;
IToken c2=null;
-		IToken RANGE124=null;
+		IToken RANGE126=null;

GrammarAST c1_tree=null;
GrammarAST c2_tree=null;
-		GrammarAST RANGE124_tree=null;
+		GrammarAST RANGE126_tree=null;
RewriteRuleITokenStream stream_CHAR_LITERAL=new RewriteRuleITokenStream(adaptor,"token CHAR_LITERAL");
RewriteRuleITokenStream stream_RANGE=new RewriteRuleITokenStream(adaptor,"token RANGE");

try
{
-			// Grammars\\ANTLR.g3:564:4: (c1= CHAR_LITERAL RANGE c2= CHAR_LITERAL -> ^( CHAR_RANGE[$c1,\"..\"] $c1 $c2) )
-			// Grammars\\ANTLR.g3:564:4: c1= CHAR_LITERAL RANGE c2= CHAR_LITERAL
+			// Grammars\\ANTLR.g3:552:4: (c1= CHAR_LITERAL RANGE c2= CHAR_LITERAL -> ^( CHAR_RANGE[$c1,\"..\"] $c1 $c2) )
+			// Grammars\\ANTLR.g3:552:4: c1= CHAR_LITERAL RANGE c2= CHAR_LITERAL
{
-			c1=(IToken)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_range2325); if (state.failed) return retval;
+			c1=(IToken)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_range2252); if (state.failed) return retval;
if ( state.backtracking == 0 ) stream_CHAR_LITERAL.Add(c1);

-			RANGE124=(IToken)Match(input,RANGE,Follow._RANGE_in_range2327); if (state.failed) return retval;
-			if ( state.backtracking == 0 ) stream_RANGE.Add(RANGE124);
+			RANGE126=(IToken)Match(input,RANGE,Follow._RANGE_in_range2254); if (state.failed) return retval;
+			if ( state.backtracking == 0 ) stream_RANGE.Add(RANGE126);

-			c2=(IToken)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_range2331); if (state.failed) return retval;
+			c2=(IToken)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_range2258); if (state.failed) return retval;
if ( state.backtracking == 0 ) stream_CHAR_LITERAL.Add(c2);


@@ -6332,9 +6242,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-			// 565:3: -> ^( CHAR_RANGE[$c1,\"..\"] $c1 $c2)
+			// 553:3: -> ^( CHAR_RANGE[$c1,\"..\"] $c1 $c2)
{
-				// Grammars\\ANTLR.g3:565:6: ^( CHAR_RANGE[$c1,\"..\"] $c1 $c2)
+				// Grammars\\ANTLR.g3:553:6: ^( CHAR_RANGE[$c1,\"..\"] $c1 $c2)
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(CHAR_RANGE, c1, ".."), root_1);
@@ -6382,7 +6292,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "terminal"
-	// Grammars\\ANTLR.g3:568:0: terminal : (cl= CHAR_LITERAL ( elementOptions[$cl.tree] )? ( ROOT | BANG )? |tr= TOKEN_REF ( elementOptions[$tr.tree] )? ( ARG_ACTION )? ( ROOT | BANG )? |sl= STRING_LITERAL ( elementOptions[$sl.tree] )? ( ROOT | BANG )? |wi= WILDCARD ( ROOT | BANG )? );
+	// Grammars\\ANTLR.g3:556:0: terminal : (cl= CHAR_LITERAL ( elementOptions[$cl.tree] )? ( ROOT | BANG )? |tr= TOKEN_REF ( elementOptions[$tr.tree] )? ( ARG_ACTION )? ( ROOT | BANG )? |sl= STRING_LITERAL ( elementOptions[$sl.tree] )? ( ROOT | BANG )? |wi= WILDCARD ( ROOT | BANG )? );
private ANTLRParser.terminal_return terminal(  )
{
ANTLRParser.terminal_return retval = new ANTLRParser.terminal_return();
@@ -6394,36 +6304,36 @@ public partial class ANTLRParser : Parser
IToken tr=null;
IToken sl=null;
IToken wi=null;
-		IToken ROOT126=null;
-		IToken BANG127=null;
-		IToken ARG_ACTION129=null;
-		IToken ROOT130=null;
-		IToken BANG131=null;
-		IToken ROOT133=null;
-		IToken BANG134=null;
+		IToken ROOT128=null;
+		IToken BANG129=null;
+		IToken ARG_ACTION131=null;
+		IToken ROOT132=null;
+		IToken BANG133=null;
IToken ROOT135=null;
IToken BANG136=null;
-		ANTLRParser.elementOptions_return elementOptions125 = default(ANTLRParser.elementOptions_return);
-		ANTLRParser.elementOptions_return elementOptions128 = default(ANTLRParser.elementOptions_return);
-		ANTLRParser.elementOptions_return elementOptions132 = default(ANTLRParser.elementOptions_return);
+		IToken ROOT137=null;
+		IToken BANG138=null;
+		ANTLRParser.elementOptions_return elementOptions127 = default(ANTLRParser.elementOptions_return);
+		ANTLRParser.elementOptions_return elementOptions130 = default(ANTLRParser.elementOptions_return);
+		ANTLRParser.elementOptions_return elementOptions134 = default(ANTLRParser.elementOptions_return);

GrammarAST cl_tree=null;
GrammarAST tr_tree=null;
GrammarAST sl_tree=null;
GrammarAST wi_tree=null;
-		GrammarAST ROOT126_tree=null;
-		GrammarAST BANG127_tree=null;
-		GrammarAST ARG_ACTION129_tree=null;
-		GrammarAST ROOT130_tree=null;
-		GrammarAST BANG131_tree=null;
-		GrammarAST ROOT133_tree=null;
-		GrammarAST BANG134_tree=null;
+		GrammarAST ROOT128_tree=null;
+		GrammarAST BANG129_tree=null;
+		GrammarAST ARG_ACTION131_tree=null;
+		GrammarAST ROOT132_tree=null;
+		GrammarAST BANG133_tree=null;
GrammarAST ROOT135_tree=null;
GrammarAST BANG136_tree=null;
+		GrammarAST ROOT137_tree=null;
+		GrammarAST BANG138_tree=null;

try
{
-			// Grammars\\ANTLR.g3:569:4: (cl= CHAR_LITERAL ( elementOptions[$cl.tree] )? ( ROOT | BANG )? |tr= TOKEN_REF ( elementOptions[$tr.tree] )? ( ARG_ACTION )? ( ROOT | BANG )? |sl= STRING_LITERAL ( elementOptions[$sl.tree] )? ( ROOT | BANG )? |wi= WILDCARD ( ROOT | BANG )? )
+			// Grammars\\ANTLR.g3:557:4: (cl= CHAR_LITERAL ( elementOptions[$cl.tree] )? ( ROOT | BANG )? |tr= TOKEN_REF ( elementOptions[$tr.tree] )? ( ARG_ACTION )? ( ROOT | BANG )? |sl= STRING_LITERAL ( elementOptions[$sl.tree] )? ( ROOT | BANG )? |wi= WILDCARD ( ROOT | BANG )? )
int alt71=4;
switch ( input.LA(1) )
{
@@ -6459,16 +6369,16 @@ public partial class ANTLRParser : Parser
switch ( alt71 )
{
case 1:
-				// Grammars\\ANTLR.g3:569:4: cl= CHAR_LITERAL ( elementOptions[$cl.tree] )? ( ROOT | BANG )?
+				// Grammars\\ANTLR.g3:557:4: cl= CHAR_LITERAL ( elementOptions[$cl.tree] )? ( ROOT | BANG )?
{
root_0 = (GrammarAST)adaptor.Nil();

-				cl=(IToken)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_terminal2359); if (state.failed) return retval;
+				cl=(IToken)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_terminal2286); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
cl_tree = (GrammarAST)adaptor.Create(cl);
root_0 = (GrammarAST)adaptor.BecomeRoot(cl_tree, root_0);
}
-				// Grammars\\ANTLR.g3:569:21: ( elementOptions[$cl.tree] )?
+				// Grammars\\ANTLR.g3:557:21: ( elementOptions[$cl.tree] )?
int alt63=2;
int LA63_0 = input.LA(1);

@@ -6479,10 +6389,10 @@ public partial class ANTLRParser : Parser
switch ( alt63 )
{
case 1:
-					// Grammars\\ANTLR.g3:569:23: elementOptions[$cl.tree]
+					// Grammars\\ANTLR.g3:557:23: elementOptions[$cl.tree]
{
-					PushFollow(Follow._elementOptions_in_terminal2364);
-					elementOptions125=elementOptions(cl_tree);
+					PushFollow(Follow._elementOptions_in_terminal2291);
+					elementOptions127=elementOptions(cl_tree);

state._fsp--;
if (state.failed) return retval;
@@ -6492,7 +6402,7 @@ public partial class ANTLRParser : Parser

}

-				// Grammars\\ANTLR.g3:569:52: ( ROOT | BANG )?
+				// Grammars\\ANTLR.g3:557:52: ( ROOT | BANG )?
int alt64=3;
int LA64_0 = input.LA(1);

@@ -6507,23 +6417,23 @@ public partial class ANTLRParser : Parser
switch ( alt64 )
{
case 1:
-					// Grammars\\ANTLR.g3:569:53: ROOT
+					// Grammars\\ANTLR.g3:557:53: ROOT
{
-					ROOT126=(IToken)Match(input,ROOT,Follow._ROOT_in_terminal2372); if (state.failed) return retval;
+					ROOT128=(IToken)Match(input,ROOT,Follow._ROOT_in_terminal2299); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-					ROOT126_tree = (GrammarAST)adaptor.Create(ROOT126);
-					root_0 = (GrammarAST)adaptor.BecomeRoot(ROOT126_tree, root_0);
+					ROOT128_tree = (GrammarAST)adaptor.Create(ROOT128);
+					root_0 = (GrammarAST)adaptor.BecomeRoot(ROOT128_tree, root_0);
}

}
break;
case 2:
-					// Grammars\\ANTLR.g3:569:59: BANG
+					// Grammars\\ANTLR.g3:557:59: BANG
{
-					BANG127=(IToken)Match(input,BANG,Follow._BANG_in_terminal2375); if (state.failed) return retval;
+					BANG129=(IToken)Match(input,BANG,Follow._BANG_in_terminal2302); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-					BANG127_tree = (GrammarAST)adaptor.Create(BANG127);
-					root_0 = (GrammarAST)adaptor.BecomeRoot(BANG127_tree, root_0);
+					BANG129_tree = (GrammarAST)adaptor.Create(BANG129);
+					root_0 = (GrammarAST)adaptor.BecomeRoot(BANG129_tree, root_0);
}

}
@@ -6535,16 +6445,16 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-				// Grammars\\ANTLR.g3:571:4: tr= TOKEN_REF ( elementOptions[$tr.tree] )? ( ARG_ACTION )? ( ROOT | BANG )?
+				// Grammars\\ANTLR.g3:559:4: tr= TOKEN_REF ( elementOptions[$tr.tree] )? ( ARG_ACTION )? ( ROOT | BANG )?
{
root_0 = (GrammarAST)adaptor.Nil();

-				tr=(IToken)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_terminal2386); if (state.failed) return retval;
+				tr=(IToken)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_terminal2313); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
tr_tree = (GrammarAST)adaptor.Create(tr);
root_0 = (GrammarAST)adaptor.BecomeRoot(tr_tree, root_0);
}
-				// Grammars\\ANTLR.g3:572:3: ( elementOptions[$tr.tree] )?
+				// Grammars\\ANTLR.g3:560:3: ( elementOptions[$tr.tree] )?
int alt65=2;
int LA65_0 = input.LA(1);

@@ -6555,10 +6465,10 @@ public partial class ANTLRParser : Parser
switch ( alt65 )
{
case 1:
-					// Grammars\\ANTLR.g3:572:5: elementOptions[$tr.tree]
+					// Grammars\\ANTLR.g3:560:5: elementOptions[$tr.tree]
{
-					PushFollow(Follow._elementOptions_in_terminal2393);
-					elementOptions128=elementOptions(tr_tree);
+					PushFollow(Follow._elementOptions_in_terminal2320);
+					elementOptions130=elementOptions(tr_tree);

state._fsp--;
if (state.failed) return retval;
@@ -6568,7 +6478,7 @@ public partial class ANTLRParser : Parser

}

-				// Grammars\\ANTLR.g3:573:3: ( ARG_ACTION )?
+				// Grammars\\ANTLR.g3:561:3: ( ARG_ACTION )?
int alt66=2;
int LA66_0 = input.LA(1);

@@ -6579,12 +6489,12 @@ public partial class ANTLRParser : Parser
switch ( alt66 )
{
case 1:
-					// Grammars\\ANTLR.g3:573:5: ARG_ACTION
+					// Grammars\\ANTLR.g3:561:5: ARG_ACTION
{
-					ARG_ACTION129=(IToken)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_terminal2404); if (state.failed) return retval;
+					ARG_ACTION131=(IToken)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_terminal2331); if (state.failed) return retval;
if ( state.backtracking==0 ) {
-					ARG_ACTION129_tree = (GrammarAST)adaptor.Create(ARG_ACTION129);
-					adaptor.AddChild(root_0, ARG_ACTION129_tree);
+					ARG_ACTION131_tree = (GrammarAST)adaptor.Create(ARG_ACTION131);
+					adaptor.AddChild(root_0, ARG_ACTION131_tree);
}

}
@@ -6592,7 +6502,7 @@ public partial class ANTLRParser : Parser

}

-				// Grammars\\ANTLR.g3:574:3: ( ROOT | BANG )?
+				// Grammars\\ANTLR.g3:562:3: ( ROOT | BANG )?
int alt67=3;
int LA67_0 = input.LA(1);

@@ -6607,23 +6517,23 @@ public partial class ANTLRParser : Parser
switch ( alt67 )
{
case 1:
-					// Grammars\\ANTLR.g3:574:4: ROOT
+					// Grammars\\ANTLR.g3:562:4: ROOT
{
-					ROOT130=(IToken)Match(input,ROOT,Follow._ROOT_in_terminal2413); if (state.failed) return retval;
+					ROOT132=(IToken)Match(input,ROOT,Follow._ROOT_in_terminal2340); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-					ROOT130_tree = (GrammarAST)adaptor.Create(ROOT130);
-					root_0 = (GrammarAST)adaptor.BecomeRoot(ROOT130_tree, root_0);
+					ROOT132_tree = (GrammarAST)adaptor.Create(ROOT132);
+					root_0 = (GrammarAST)adaptor.BecomeRoot(ROOT132_tree, root_0);
}

}
break;
case 2:
-					// Grammars\\ANTLR.g3:574:10: BANG
+					// Grammars\\ANTLR.g3:562:10: BANG
{
-					BANG131=(IToken)Match(input,BANG,Follow._BANG_in_terminal2416); if (state.failed) return retval;
+					BANG133=(IToken)Match(input,BANG,Follow._BANG_in_terminal2343); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-					BANG131_tree = (GrammarAST)adaptor.Create(BANG131);
-					root_0 = (GrammarAST)adaptor.BecomeRoot(BANG131_tree, root_0);
+					BANG133_tree = (GrammarAST)adaptor.Create(BANG133);
+					root_0 = (GrammarAST)adaptor.BecomeRoot(BANG133_tree, root_0);
}

}
@@ -6635,16 +6545,16 @@ public partial class ANTLRParser : Parser
}
break;
case 3:
-				// Grammars\\ANTLR.g3:576:4: sl= STRING_LITERAL ( elementOptions[$sl.tree] )? ( ROOT | BANG )?
+				// Grammars\\ANTLR.g3:564:4: sl= STRING_LITERAL ( elementOptions[$sl.tree] )? ( ROOT | BANG )?
{
root_0 = (GrammarAST)adaptor.Nil();

-				sl=(IToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_terminal2427); if (state.failed) return retval;
+				sl=(IToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_terminal2354); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
sl_tree = (GrammarAST)adaptor.Create(sl);
root_0 = (GrammarAST)adaptor.BecomeRoot(sl_tree, root_0);
}
-				// Grammars\\ANTLR.g3:576:23: ( elementOptions[$sl.tree] )?
+				// Grammars\\ANTLR.g3:564:23: ( elementOptions[$sl.tree] )?
int alt68=2;
int LA68_0 = input.LA(1);

@@ -6655,10 +6565,10 @@ public partial class ANTLRParser : Parser
switch ( alt68 )
{
case 1:
-					// Grammars\\ANTLR.g3:576:25: elementOptions[$sl.tree]
+					// Grammars\\ANTLR.g3:564:25: elementOptions[$sl.tree]
{
-					PushFollow(Follow._elementOptions_in_terminal2432);
-					elementOptions132=elementOptions(sl_tree);
+					PushFollow(Follow._elementOptions_in_terminal2359);
+					elementOptions134=elementOptions(sl_tree);

state._fsp--;
if (state.failed) return retval;
@@ -6668,7 +6578,7 @@ public partial class ANTLRParser : Parser

}

-				// Grammars\\ANTLR.g3:576:54: ( ROOT | BANG )?
+				// Grammars\\ANTLR.g3:564:54: ( ROOT | BANG )?
int alt69=3;
int LA69_0 = input.LA(1);

@@ -6683,23 +6593,23 @@ public partial class ANTLRParser : Parser
switch ( alt69 )
{
case 1:
-					// Grammars\\ANTLR.g3:576:55: ROOT
+					// Grammars\\ANTLR.g3:564:55: ROOT
{
-					ROOT133=(IToken)Match(input,ROOT,Follow._ROOT_in_terminal2440); if (state.failed) return retval;
+					ROOT135=(IToken)Match(input,ROOT,Follow._ROOT_in_terminal2367); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-					ROOT133_tree = (GrammarAST)adaptor.Create(ROOT133);
-					root_0 = (GrammarAST)adaptor.BecomeRoot(ROOT133_tree, root_0);
+					ROOT135_tree = (GrammarAST)adaptor.Create(ROOT135);
+					root_0 = (GrammarAST)adaptor.BecomeRoot(ROOT135_tree, root_0);
}

}
break;
case 2:
-					// Grammars\\ANTLR.g3:576:61: BANG
+					// Grammars\\ANTLR.g3:564:61: BANG
{
-					BANG134=(IToken)Match(input,BANG,Follow._BANG_in_terminal2443); if (state.failed) return retval;
+					BANG136=(IToken)Match(input,BANG,Follow._BANG_in_terminal2370); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-					BANG134_tree = (GrammarAST)adaptor.Create(BANG134);
-					root_0 = (GrammarAST)adaptor.BecomeRoot(BANG134_tree, root_0);
+					BANG136_tree = (GrammarAST)adaptor.Create(BANG136);
+					root_0 = (GrammarAST)adaptor.BecomeRoot(BANG136_tree, root_0);
}

}
@@ -6711,16 +6621,16 @@ public partial class ANTLRParser : Parser
}
break;
case 4:
-				// Grammars\\ANTLR.g3:578:4: wi= WILDCARD ( ROOT | BANG )?
+				// Grammars\\ANTLR.g3:566:4: wi= WILDCARD ( ROOT | BANG )?
{
root_0 = (GrammarAST)adaptor.Nil();

-				wi=(IToken)Match(input,WILDCARD,Follow._WILDCARD_in_terminal2454); if (state.failed) return retval;
+				wi=(IToken)Match(input,WILDCARD,Follow._WILDCARD_in_terminal2381); if (state.failed) return retval;
if ( state.backtracking==0 ) {
wi_tree = (GrammarAST)adaptor.Create(wi);
adaptor.AddChild(root_0, wi_tree);
}
-				// Grammars\\ANTLR.g3:578:16: ( ROOT | BANG )?
+				// Grammars\\ANTLR.g3:566:16: ( ROOT | BANG )?
int alt70=3;
int LA70_0 = input.LA(1);

@@ -6735,23 +6645,23 @@ public partial class ANTLRParser : Parser
switch ( alt70 )
{
case 1:
-					// Grammars\\ANTLR.g3:578:17: ROOT
+					// Grammars\\ANTLR.g3:566:17: ROOT
{
-					ROOT135=(IToken)Match(input,ROOT,Follow._ROOT_in_terminal2457); if (state.failed) return retval;
+					ROOT137=(IToken)Match(input,ROOT,Follow._ROOT_in_terminal2384); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-					ROOT135_tree = (GrammarAST)adaptor.Create(ROOT135);
-					root_0 = (GrammarAST)adaptor.BecomeRoot(ROOT135_tree, root_0);
+					ROOT137_tree = (GrammarAST)adaptor.Create(ROOT137);
+					root_0 = (GrammarAST)adaptor.BecomeRoot(ROOT137_tree, root_0);
}

}
break;
case 2:
-					// Grammars\\ANTLR.g3:578:23: BANG
+					// Grammars\\ANTLR.g3:566:23: BANG
{
-					BANG136=(IToken)Match(input,BANG,Follow._BANG_in_terminal2460); if (state.failed) return retval;
+					BANG138=(IToken)Match(input,BANG,Follow._BANG_in_terminal2387); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-					BANG136_tree = (GrammarAST)adaptor.Create(BANG136);
-					root_0 = (GrammarAST)adaptor.BecomeRoot(BANG136_tree, root_0);
+					BANG138_tree = (GrammarAST)adaptor.Create(BANG138);
+					root_0 = (GrammarAST)adaptor.BecomeRoot(BANG138_tree, root_0);
}

}
@@ -6803,7 +6713,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "elementOptions"
-	// Grammars\\ANTLR.g3:588:0: elementOptions[GrammarAST terminalAST] : ( OPEN_ELEMENT_OPTION defaultNodeOption[terminalAST] CLOSE_ELEMENT_OPTION | OPEN_ELEMENT_OPTION elementOption[terminalAST] ( SEMI elementOption[terminalAST] )* CLOSE_ELEMENT_OPTION );
+	// Grammars\\ANTLR.g3:576:0: elementOptions[GrammarAST terminalAST] : ( OPEN_ELEMENT_OPTION defaultNodeOption[terminalAST] CLOSE_ELEMENT_OPTION | OPEN_ELEMENT_OPTION elementOption[terminalAST] ( SEMI elementOption[terminalAST] )* CLOSE_ELEMENT_OPTION );
private ANTLRParser.elementOptions_return elementOptions( GrammarAST terminalAST )
{
ANTLRParser.elementOptions_return retval = new ANTLRParser.elementOptions_return();
@@ -6811,24 +6721,24 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken OPEN_ELEMENT_OPTION137=null;
-		IToken CLOSE_ELEMENT_OPTION139=null;
-		IToken OPEN_ELEMENT_OPTION140=null;
-		IToken SEMI142=null;
-		IToken CLOSE_ELEMENT_OPTION144=null;
-		ANTLRParser.defaultNodeOption_return defaultNodeOption138 = default(ANTLRParser.defaultNodeOption_return);
-		ANTLRParser.elementOption_return elementOption141 = default(ANTLRParser.elementOption_return);
+		IToken OPEN_ELEMENT_OPTION139=null;
+		IToken CLOSE_ELEMENT_OPTION141=null;
+		IToken OPEN_ELEMENT_OPTION142=null;
+		IToken SEMI144=null;
+		IToken CLOSE_ELEMENT_OPTION146=null;
+		ANTLRParser.defaultNodeOption_return defaultNodeOption140 = default(ANTLRParser.defaultNodeOption_return);
ANTLRParser.elementOption_return elementOption143 = default(ANTLRParser.elementOption_return);
+		ANTLRParser.elementOption_return elementOption145 = default(ANTLRParser.elementOption_return);

-		GrammarAST OPEN_ELEMENT_OPTION137_tree=null;
-		GrammarAST CLOSE_ELEMENT_OPTION139_tree=null;
-		GrammarAST OPEN_ELEMENT_OPTION140_tree=null;
-		GrammarAST SEMI142_tree=null;
-		GrammarAST CLOSE_ELEMENT_OPTION144_tree=null;
+		GrammarAST OPEN_ELEMENT_OPTION139_tree=null;
+		GrammarAST CLOSE_ELEMENT_OPTION141_tree=null;
+		GrammarAST OPEN_ELEMENT_OPTION142_tree=null;
+		GrammarAST SEMI144_tree=null;
+		GrammarAST CLOSE_ELEMENT_OPTION146_tree=null;

try
{
-			// Grammars\\ANTLR.g3:589:4: ( OPEN_ELEMENT_OPTION defaultNodeOption[terminalAST] CLOSE_ELEMENT_OPTION | OPEN_ELEMENT_OPTION elementOption[terminalAST] ( SEMI elementOption[terminalAST] )* CLOSE_ELEMENT_OPTION )
+			// Grammars\\ANTLR.g3:577:4: ( OPEN_ELEMENT_OPTION defaultNodeOption[terminalAST] CLOSE_ELEMENT_OPTION | OPEN_ELEMENT_OPTION elementOption[terminalAST] ( SEMI elementOption[terminalAST] )* CLOSE_ELEMENT_OPTION )
int alt73=2;
int LA73_0 = input.LA(1);

@@ -6894,42 +6804,42 @@ public partial class ANTLRParser : Parser
switch ( alt73 )
{
case 1:
-				// Grammars\\ANTLR.g3:589:4: OPEN_ELEMENT_OPTION defaultNodeOption[terminalAST] CLOSE_ELEMENT_OPTION
+				// Grammars\\ANTLR.g3:577:4: OPEN_ELEMENT_OPTION defaultNodeOption[terminalAST] CLOSE_ELEMENT_OPTION
{
root_0 = (GrammarAST)adaptor.Nil();

-				OPEN_ELEMENT_OPTION137=(IToken)Match(input,OPEN_ELEMENT_OPTION,Follow._OPEN_ELEMENT_OPTION_in_elementOptions2479); if (state.failed) return retval;
+				OPEN_ELEMENT_OPTION139=(IToken)Match(input,OPEN_ELEMENT_OPTION,Follow._OPEN_ELEMENT_OPTION_in_elementOptions2406); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-				OPEN_ELEMENT_OPTION137_tree = (GrammarAST)adaptor.Create(OPEN_ELEMENT_OPTION137);
-				root_0 = (GrammarAST)adaptor.BecomeRoot(OPEN_ELEMENT_OPTION137_tree, root_0);
+				OPEN_ELEMENT_OPTION139_tree = (GrammarAST)adaptor.Create(OPEN_ELEMENT_OPTION139);
+				root_0 = (GrammarAST)adaptor.BecomeRoot(OPEN_ELEMENT_OPTION139_tree, root_0);
}
-				PushFollow(Follow._defaultNodeOption_in_elementOptions2482);
-				defaultNodeOption138=defaultNodeOption(terminalAST);
+				PushFollow(Follow._defaultNodeOption_in_elementOptions2409);
+				defaultNodeOption140=defaultNodeOption(terminalAST);

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, defaultNodeOption138.Tree);
-				CLOSE_ELEMENT_OPTION139=(IToken)Match(input,CLOSE_ELEMENT_OPTION,Follow._CLOSE_ELEMENT_OPTION_in_elementOptions2485); if (state.failed) return retval;
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, defaultNodeOption140.Tree);
+				CLOSE_ELEMENT_OPTION141=(IToken)Match(input,CLOSE_ELEMENT_OPTION,Follow._CLOSE_ELEMENT_OPTION_in_elementOptions2412); if (state.failed) return retval;

}
break;
case 2:
-				// Grammars\\ANTLR.g3:590:4: OPEN_ELEMENT_OPTION elementOption[terminalAST] ( SEMI elementOption[terminalAST] )* CLOSE_ELEMENT_OPTION
+				// Grammars\\ANTLR.g3:578:4: OPEN_ELEMENT_OPTION elementOption[terminalAST] ( SEMI elementOption[terminalAST] )* CLOSE_ELEMENT_OPTION
{
root_0 = (GrammarAST)adaptor.Nil();

-				OPEN_ELEMENT_OPTION140=(IToken)Match(input,OPEN_ELEMENT_OPTION,Follow._OPEN_ELEMENT_OPTION_in_elementOptions2491); if (state.failed) return retval;
+				OPEN_ELEMENT_OPTION142=(IToken)Match(input,OPEN_ELEMENT_OPTION,Follow._OPEN_ELEMENT_OPTION_in_elementOptions2418); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-				OPEN_ELEMENT_OPTION140_tree = (GrammarAST)adaptor.Create(OPEN_ELEMENT_OPTION140);
-				root_0 = (GrammarAST)adaptor.BecomeRoot(OPEN_ELEMENT_OPTION140_tree, root_0);
+				OPEN_ELEMENT_OPTION142_tree = (GrammarAST)adaptor.Create(OPEN_ELEMENT_OPTION142);
+				root_0 = (GrammarAST)adaptor.BecomeRoot(OPEN_ELEMENT_OPTION142_tree, root_0);
}
-				PushFollow(Follow._elementOption_in_elementOptions2494);
-				elementOption141=elementOption(terminalAST);
+				PushFollow(Follow._elementOption_in_elementOptions2421);
+				elementOption143=elementOption(terminalAST);

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, elementOption141.Tree);
-				// Grammars\\ANTLR.g3:590:52: ( SEMI elementOption[terminalAST] )*
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, elementOption143.Tree);
+				// Grammars\\ANTLR.g3:578:52: ( SEMI elementOption[terminalAST] )*
for ( ; ; )
{
int alt72=2;
@@ -6944,15 +6854,15 @@ public partial class ANTLRParser : Parser
switch ( alt72 )
{
case 1:
-						// Grammars\\ANTLR.g3:590:53: SEMI elementOption[terminalAST]
+						// Grammars\\ANTLR.g3:578:53: SEMI elementOption[terminalAST]
{
-						SEMI142=(IToken)Match(input,SEMI,Follow._SEMI_in_elementOptions2498); if (state.failed) return retval;
-						PushFollow(Follow._elementOption_in_elementOptions2501);
-						elementOption143=elementOption(terminalAST);
+						SEMI144=(IToken)Match(input,SEMI,Follow._SEMI_in_elementOptions2425); if (state.failed) return retval;
+						PushFollow(Follow._elementOption_in_elementOptions2428);
+						elementOption145=elementOption(terminalAST);

state._fsp--;
if (state.failed) return retval;
-						if ( state.backtracking == 0 ) adaptor.AddChild(root_0, elementOption143.Tree);
+						if ( state.backtracking == 0 ) adaptor.AddChild(root_0, elementOption145.Tree);

}
break;
@@ -6966,7 +6876,7 @@ public partial class ANTLRParser : Parser
;


-				CLOSE_ELEMENT_OPTION144=(IToken)Match(input,CLOSE_ELEMENT_OPTION,Follow._CLOSE_ELEMENT_OPTION_in_elementOptions2506); if (state.failed) return retval;
+				CLOSE_ELEMENT_OPTION146=(IToken)Match(input,CLOSE_ELEMENT_OPTION,Follow._CLOSE_ELEMENT_OPTION_in_elementOptions2433); if (state.failed) return retval;

}
break;
@@ -7001,7 +6911,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "defaultNodeOption"
-	// Grammars\\ANTLR.g3:593:0: defaultNodeOption[GrammarAST terminalAST] : i= id ( WILDCARD i2= id )* ;
+	// Grammars\\ANTLR.g3:581:0: defaultNodeOption[GrammarAST terminalAST] : i= id ( WILDCARD i2= id )* ;
private ANTLRParser.defaultNodeOption_return defaultNodeOption( GrammarAST terminalAST )
{
ANTLRParser.defaultNodeOption_return retval = new ANTLRParser.defaultNodeOption_return();
@@ -7009,23 +6919,23 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken WILDCARD145=null;
+		IToken WILDCARD147=null;
ANTLRParser.id_return i = default(ANTLRParser.id_return);
ANTLRParser.id_return i2 = default(ANTLRParser.id_return);

-		GrammarAST WILDCARD145_tree=null;
+		GrammarAST WILDCARD147_tree=null;


StringBuffer buf = new StringBuffer();

try
{
-			// Grammars\\ANTLR.g3:598:4: (i= id ( WILDCARD i2= id )* )
-			// Grammars\\ANTLR.g3:598:4: i= id ( WILDCARD i2= id )*
+			// Grammars\\ANTLR.g3:586:4: (i= id ( WILDCARD i2= id )* )
+			// Grammars\\ANTLR.g3:586:4: i= id ( WILDCARD i2= id )*
{
root_0 = (GrammarAST)adaptor.Nil();

-			PushFollow(Follow._id_in_defaultNodeOption2526);
+			PushFollow(Follow._id_in_defaultNodeOption2453);
i=id();

state._fsp--;
@@ -7035,7 +6945,7 @@ public partial class ANTLRParser : Parser
{
buf.Append((i!=null?input.ToString(i.start,i.stop):null));
}
-			// Grammars\\ANTLR.g3:598:32: ( WILDCARD i2= id )*
+			// Grammars\\ANTLR.g3:586:32: ( WILDCARD i2= id )*
for ( ; ; )
{
int alt74=2;
@@ -7050,14 +6960,14 @@ public partial class ANTLRParser : Parser
switch ( alt74 )
{
case 1:
-					// Grammars\\ANTLR.g3:598:33: WILDCARD i2= id
+					// Grammars\\ANTLR.g3:586:33: WILDCARD i2= id
{
-					WILDCARD145=(IToken)Match(input,WILDCARD,Follow._WILDCARD_in_defaultNodeOption2531); if (state.failed) return retval;
+					WILDCARD147=(IToken)Match(input,WILDCARD,Follow._WILDCARD_in_defaultNodeOption2458); if (state.failed) return retval;
if ( state.backtracking==0 ) {
-					WILDCARD145_tree = (GrammarAST)adaptor.Create(WILDCARD145);
-					adaptor.AddChild(root_0, WILDCARD145_tree);
+					WILDCARD147_tree = (GrammarAST)adaptor.Create(WILDCARD147);
+					adaptor.AddChild(root_0, WILDCARD147_tree);
}
-					PushFollow(Follow._id_in_defaultNodeOption2535);
+					PushFollow(Follow._id_in_defaultNodeOption2462);
i2=id();

state._fsp--;
@@ -7116,7 +7026,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "elementOption"
-	// Grammars\\ANTLR.g3:602:0: elementOption[GrammarAST terminalAST] : a= id ASSIGN (b= id |s= STRING_LITERAL ) ;
+	// Grammars\\ANTLR.g3:590:0: elementOption[GrammarAST terminalAST] : a= id ASSIGN (b= id |s= STRING_LITERAL ) ;
private ANTLRParser.elementOption_return elementOption( GrammarAST terminalAST )
{
ANTLRParser.elementOption_return retval = new ANTLRParser.elementOption_return();
@@ -7125,32 +7035,32 @@ public partial class ANTLRParser : Parser
GrammarAST root_0 = null;

IToken s=null;
-		IToken ASSIGN146=null;
+		IToken ASSIGN148=null;
ANTLRParser.id_return a = default(ANTLRParser.id_return);
ANTLRParser.id_return b = default(ANTLRParser.id_return);

GrammarAST s_tree=null;
-		GrammarAST ASSIGN146_tree=null;
+		GrammarAST ASSIGN148_tree=null;

try
{
-			// Grammars\\ANTLR.g3:603:4: (a= id ASSIGN (b= id |s= STRING_LITERAL ) )
-			// Grammars\\ANTLR.g3:603:4: a= id ASSIGN (b= id |s= STRING_LITERAL )
+			// Grammars\\ANTLR.g3:591:4: (a= id ASSIGN (b= id |s= STRING_LITERAL ) )
+			// Grammars\\ANTLR.g3:591:4: a= id ASSIGN (b= id |s= STRING_LITERAL )
{
root_0 = (GrammarAST)adaptor.Nil();

-			PushFollow(Follow._id_in_elementOption2557);
+			PushFollow(Follow._id_in_elementOption2484);
a=id();

state._fsp--;
if (state.failed) return retval;
if ( state.backtracking == 0 ) adaptor.AddChild(root_0, a.Tree);
-			ASSIGN146=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_elementOption2559); if (state.failed) return retval;
+			ASSIGN148=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_elementOption2486); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-			ASSIGN146_tree = (GrammarAST)adaptor.Create(ASSIGN146);
-			root_0 = (GrammarAST)adaptor.BecomeRoot(ASSIGN146_tree, root_0);
+			ASSIGN148_tree = (GrammarAST)adaptor.Create(ASSIGN148);
+			root_0 = (GrammarAST)adaptor.BecomeRoot(ASSIGN148_tree, root_0);
}
-			// Grammars\\ANTLR.g3:603:17: (b= id |s= STRING_LITERAL )
+			// Grammars\\ANTLR.g3:591:17: (b= id |s= STRING_LITERAL )
int alt75=2;
int LA75_0 = input.LA(1);

@@ -7172,9 +7082,9 @@ public partial class ANTLRParser : Parser
switch ( alt75 )
{
case 1:
-				// Grammars\\ANTLR.g3:603:18: b= id
+				// Grammars\\ANTLR.g3:591:18: b= id
{
-				PushFollow(Follow._id_in_elementOption2565);
+				PushFollow(Follow._id_in_elementOption2492);
b=id();

state._fsp--;
@@ -7184,9 +7094,9 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-				// Grammars\\ANTLR.g3:603:23: s= STRING_LITERAL
+				// Grammars\\ANTLR.g3:591:23: s= STRING_LITERAL
{
-				s=(IToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_elementOption2569); if (state.failed) return retval;
+				s=(IToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_elementOption2496); if (state.failed) return retval;
if ( state.backtracking==0 ) {
s_tree = (GrammarAST)adaptor.Create(s);
adaptor.AddChild(root_0, s_tree);
@@ -7236,7 +7146,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "ebnfSuffix"
-	// Grammars\\ANTLR.g3:610:0: ebnfSuffix[GrammarAST elemAST, bool inRewrite] : ( -> BLOCK[\"BLOCK\"] ) ( -> ^( ALT[\"ALT\"] EOA[\"<end-of-alt>\"] ) ) ( QUESTION -> OPTIONAL[$elemAST.Token,\"?\"] | STAR -> CLOSURE[$elemAST.Token,\"*\"] | PLUS -> POSITIVE_CLOSURE[$elemAST.Token,\"+\"] ) -> ^( $ebnfSuffix ^( EOB[$elemAST.Token, \"<end-of-block>\"] ) ) ;
+	// Grammars\\ANTLR.g3:598:0: ebnfSuffix[GrammarAST elemAST, bool inRewrite] : ( -> BLOCK[\"BLOCK\"] ) ( -> ^( ALT[\"ALT\"] EOA[\"<end-of-alt>\"] ) ) ( QUESTION -> OPTIONAL[$elemAST.Token,\"?\"] | STAR -> CLOSURE[$elemAST.Token,\"*\"] | PLUS -> POSITIVE_CLOSURE[$elemAST.Token,\"+\"] ) -> ^( $ebnfSuffix ^( EOB[$elemAST.Token, \"<end-of-block>\"] ) ) ;
private ANTLRParser.ebnfSuffix_return ebnfSuffix( GrammarAST elemAST, bool inRewrite )
{
ANTLRParser.ebnfSuffix_return retval = new ANTLRParser.ebnfSuffix_return();
@@ -7244,13 +7154,13 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken QUESTION147=null;
-		IToken STAR148=null;
-		IToken PLUS149=null;
+		IToken QUESTION149=null;
+		IToken STAR150=null;
+		IToken PLUS151=null;

-		GrammarAST QUESTION147_tree=null;
-		GrammarAST STAR148_tree=null;
-		GrammarAST PLUS149_tree=null;
+		GrammarAST QUESTION149_tree=null;
+		GrammarAST STAR150_tree=null;
+		GrammarAST PLUS151_tree=null;
RewriteRuleITokenStream stream_QUESTION=new RewriteRuleITokenStream(adaptor,"token QUESTION");
RewriteRuleITokenStream stream_STAR=new RewriteRuleITokenStream(adaptor,"token STAR");
RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
@@ -7262,11 +7172,11 @@ public partial class ANTLRParser : Parser

try
{
-			// Grammars\\ANTLR.g3:621:4: ( ( -> BLOCK[\"BLOCK\"] ) ( -> ^( ALT[\"ALT\"] EOA[\"<end-of-alt>\"] ) ) ( QUESTION -> OPTIONAL[$elemAST.Token,\"?\"] | STAR -> CLOSURE[$elemAST.Token,\"*\"] | PLUS -> POSITIVE_CLOSURE[$elemAST.Token,\"+\"] ) -> ^( $ebnfSuffix ^( EOB[$elemAST.Token, \"<end-of-block>\"] ) ) )
-			// Grammars\\ANTLR.g3:621:4: ( -> BLOCK[\"BLOCK\"] ) ( -> ^( ALT[\"ALT\"] EOA[\"<end-of-alt>\"] ) ) ( QUESTION -> OPTIONAL[$elemAST.Token,\"?\"] | STAR -> CLOSURE[$elemAST.Token,\"*\"] | PLUS -> POSITIVE_CLOSURE[$elemAST.Token,\"+\"] )
+			// Grammars\\ANTLR.g3:609:4: ( ( -> BLOCK[\"BLOCK\"] ) ( -> ^( ALT[\"ALT\"] EOA[\"<end-of-alt>\"] ) ) ( QUESTION -> OPTIONAL[$elemAST.Token,\"?\"] | STAR -> CLOSURE[$elemAST.Token,\"*\"] | PLUS -> POSITIVE_CLOSURE[$elemAST.Token,\"+\"] ) -> ^( $ebnfSuffix ^( EOB[$elemAST.Token, \"<end-of-block>\"] ) ) )
+			// Grammars\\ANTLR.g3:609:4: ( -> BLOCK[\"BLOCK\"] ) ( -> ^( ALT[\"ALT\"] EOA[\"<end-of-alt>\"] ) ) ( QUESTION -> OPTIONAL[$elemAST.Token,\"?\"] | STAR -> CLOSURE[$elemAST.Token,\"*\"] | PLUS -> POSITIVE_CLOSURE[$elemAST.Token,\"+\"] )
{
-			// Grammars\\ANTLR.g3:621:4: ( -> BLOCK[\"BLOCK\"] )
-			// Grammars\\ANTLR.g3:621:6:
+			// Grammars\\ANTLR.g3:609:4: ( -> BLOCK[\"BLOCK\"] )
+			// Grammars\\ANTLR.g3:609:6:
{


@@ -7284,7 +7194,7 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-			// 621:6: -> BLOCK[\"BLOCK\"]
+			// 609:6: -> BLOCK[\"BLOCK\"]
{
adaptor.AddChild(root_0, (GrammarAST)adaptor.Create(BLOCK, "BLOCK"));

@@ -7300,8 +7210,8 @@ public partial class ANTLRParser : Parser
{
blkRoot = (GrammarAST)((GrammarAST)retval.tree).GetChild(0); currentBlockAST = blkRoot;
}
-			// Grammars\\ANTLR.g3:624:3: ( -> ^( ALT[\"ALT\"] EOA[\"<end-of-alt>\"] ) )
-			// Grammars\\ANTLR.g3:625:4:
+			// Grammars\\ANTLR.g3:612:3: ( -> ^( ALT[\"ALT\"] EOA[\"<end-of-alt>\"] ) )
+			// Grammars\\ANTLR.g3:613:4:
{


@@ -7319,9 +7229,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-			// 625:4: -> ^( ALT[\"ALT\"] EOA[\"<end-of-alt>\"] )
+			// 613:4: -> ^( ALT[\"ALT\"] EOA[\"<end-of-alt>\"] )
{
-				// Grammars\\ANTLR.g3:625:7: ^( ALT[\"ALT\"] EOA[\"<end-of-alt>\"] )
+				// Grammars\\ANTLR.g3:613:7: ^( ALT[\"ALT\"] EOA[\"<end-of-alt>\"] )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(ALT, "ALT"), root_1);
@@ -7348,7 +7258,7 @@ public partial class ANTLRParser : Parser
PrefixWithSynPred(alt);

}
-			// Grammars\\ANTLR.g3:632:3: ( QUESTION -> OPTIONAL[$elemAST.Token,\"?\"] | STAR -> CLOSURE[$elemAST.Token,\"*\"] | PLUS -> POSITIVE_CLOSURE[$elemAST.Token,\"+\"] )
+			// Grammars\\ANTLR.g3:620:3: ( QUESTION -> OPTIONAL[$elemAST.Token,\"?\"] | STAR -> CLOSURE[$elemAST.Token,\"*\"] | PLUS -> POSITIVE_CLOSURE[$elemAST.Token,\"+\"] )
int alt76=3;
switch ( input.LA(1) )
{
@@ -7379,10 +7289,10 @@ public partial class ANTLRParser : Parser
switch ( alt76 )
{
case 1:
-				// Grammars\\ANTLR.g3:632:5: QUESTION
+				// Grammars\\ANTLR.g3:620:5: QUESTION
{
-				QUESTION147=(IToken)Match(input,QUESTION,Follow._QUESTION_in_ebnfSuffix2643); if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_QUESTION.Add(QUESTION147);
+				QUESTION149=(IToken)Match(input,QUESTION,Follow._QUESTION_in_ebnfSuffix2570); if (state.failed) return retval;
+				if ( state.backtracking == 0 ) stream_QUESTION.Add(QUESTION149);



@@ -7399,7 +7309,7 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 633:4: -> OPTIONAL[$elemAST.Token,\"?\"]
+				// 621:4: -> OPTIONAL[$elemAST.Token,\"?\"]
{
adaptor.AddChild(root_0, (GrammarAST)adaptor.Create(OPTIONAL, elemAST.Token, "?"));

@@ -7412,10 +7322,10 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-				// Grammars\\ANTLR.g3:634:5: STAR
+				// Grammars\\ANTLR.g3:622:5: STAR
{
-				STAR148=(IToken)Match(input,STAR,Follow._STAR_in_ebnfSuffix2657); if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_STAR.Add(STAR148);
+				STAR150=(IToken)Match(input,STAR,Follow._STAR_in_ebnfSuffix2584); if (state.failed) return retval;
+				if ( state.backtracking == 0 ) stream_STAR.Add(STAR150);



@@ -7432,7 +7342,7 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 635:4: -> CLOSURE[$elemAST.Token,\"*\"]
+				// 623:4: -> CLOSURE[$elemAST.Token,\"*\"]
{
adaptor.AddChild(root_0, (GrammarAST)adaptor.Create(CLOSURE, elemAST.Token, "*"));

@@ -7445,10 +7355,10 @@ public partial class ANTLRParser : Parser
}
break;
case 3:
-				// Grammars\\ANTLR.g3:636:5: PLUS
+				// Grammars\\ANTLR.g3:624:5: PLUS
{
-				PLUS149=(IToken)Match(input,PLUS,Follow._PLUS_in_ebnfSuffix2671); if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_PLUS.Add(PLUS149);
+				PLUS151=(IToken)Match(input,PLUS,Follow._PLUS_in_ebnfSuffix2598); if (state.failed) return retval;
+				if ( state.backtracking == 0 ) stream_PLUS.Add(PLUS151);



@@ -7465,7 +7375,7 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 637:4: -> POSITIVE_CLOSURE[$elemAST.Token,\"+\"]
+				// 625:4: -> POSITIVE_CLOSURE[$elemAST.Token,\"+\"]
{
adaptor.AddChild(root_0, (GrammarAST)adaptor.Create(POSITIVE_CLOSURE, elemAST.Token, "+"));

@@ -7495,14 +7405,14 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-			// 639:3: -> ^( $ebnfSuffix ^( EOB[$elemAST.Token, \"<end-of-block>\"] ) )
+			// 627:3: -> ^( $ebnfSuffix ^( EOB[$elemAST.Token, \"<end-of-block>\"] ) )
{
-				// Grammars\\ANTLR.g3:639:6: ^( $ebnfSuffix ^( EOB[$elemAST.Token, \"<end-of-block>\"] ) )
+				// Grammars\\ANTLR.g3:627:6: ^( $ebnfSuffix ^( EOB[$elemAST.Token, \"<end-of-block>\"] ) )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

-				// Grammars\\ANTLR.g3:639:20: ^( EOB[$elemAST.Token, \"<end-of-block>\"] )
+				// Grammars\\ANTLR.g3:627:20: ^( EOB[$elemAST.Token, \"<end-of-block>\"] )
{
GrammarAST root_2 = (GrammarAST)adaptor.Nil();
root_2 = (GrammarAST)adaptor.BecomeRoot(blkRoot, root_2);
@@ -7559,7 +7469,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "notTerminal"
-	// Grammars\\ANTLR.g3:642:0: notTerminal : (cl= CHAR_LITERAL |tr= TOKEN_REF | STRING_LITERAL );
+	// Grammars\\ANTLR.g3:630:0: notTerminal : ( CHAR_LITERAL | TOKEN_REF | STRING_LITERAL );
private ANTLRParser.notTerminal_return notTerminal(  )
{
ANTLRParser.notTerminal_return retval = new ANTLRParser.notTerminal_return();
@@ -7567,87 +7477,34 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken cl=null;
-		IToken tr=null;
-		IToken STRING_LITERAL150=null;
+		IToken set152=null;

-		GrammarAST cl_tree=null;
-		GrammarAST tr_tree=null;
-		GrammarAST STRING_LITERAL150_tree=null;
+		GrammarAST set152_tree=null;

try
{
-			// Grammars\\ANTLR.g3:643:4: (cl= CHAR_LITERAL |tr= TOKEN_REF | STRING_LITERAL )
-			int alt77=3;
-			switch ( input.LA(1) )
+			// Grammars\\ANTLR.g3:631:4: ( CHAR_LITERAL | TOKEN_REF | STRING_LITERAL )
+			// Grammars\\ANTLR.g3:
{
-			case CHAR_LITERAL:
-				{
-				alt77=1;
-				}
-				break;
-			case TOKEN_REF:
-				{
-				alt77=2;
-				}
-				break;
-			case STRING_LITERAL:
-				{
-				alt77=3;
-				}
-				break;
-			default:
-				{
-					if (state.backtracking>0) {state.failed=true; return retval;}
-					NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
+			root_0 = (GrammarAST)adaptor.Nil();

-					throw nvae;
-				}
+			set152=(IToken)input.LT(1);
+			if ( input.LA(1)==CHAR_LITERAL||input.LA(1)==STRING_LITERAL||input.LA(1)==TOKEN_REF )
+			{
+				input.Consume();
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, (GrammarAST)adaptor.Create(set152));
+				state.errorRecovery=false;state.failed=false;
}
-
-			switch ( alt77 )
+			else
{
-			case 1:
-				// Grammars\\ANTLR.g3:643:4: cl= CHAR_LITERAL
-				{
-				root_0 = (GrammarAST)adaptor.Nil();
-
-				cl=(IToken)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_notTerminal2714); if (state.failed) return retval;
-				if ( state.backtracking==0 ) {
-				cl_tree = (GrammarAST)adaptor.Create(cl);
-				adaptor.AddChild(root_0, cl_tree);
-				}
-
-				}
-				break;
-			case 2:
-				// Grammars\\ANTLR.g3:644:4: tr= TOKEN_REF
-				{
-				root_0 = (GrammarAST)adaptor.Nil();
-
-				tr=(IToken)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_notTerminal2721); if (state.failed) return retval;
-				if ( state.backtracking==0 ) {
-				tr_tree = (GrammarAST)adaptor.Create(tr);
-				adaptor.AddChild(root_0, tr_tree);
-				}
-
-				}
-				break;
-			case 3:
-				// Grammars\\ANTLR.g3:645:4: STRING_LITERAL
-				{
-				root_0 = (GrammarAST)adaptor.Nil();
-
-				STRING_LITERAL150=(IToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_notTerminal2726); if (state.failed) return retval;
-				if ( state.backtracking==0 ) {
-				STRING_LITERAL150_tree = (GrammarAST)adaptor.Create(STRING_LITERAL150);
-				adaptor.AddChild(root_0, STRING_LITERAL150_tree);
-				}
+				if (state.backtracking>0) {state.failed=true; return retval;}
+				MismatchedSetException mse = new MismatchedSetException(null,input);
+				throw mse;
+			}

-				}
-				break;

}
+
retval.stop = input.LT(-1);

if ( state.backtracking == 0 ) {
@@ -7677,7 +7534,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "idList"
-	// Grammars\\ANTLR.g3:648:0: idList : id ( COMMA id )* ;
+	// Grammars\\ANTLR.g3:636:0: idList : id ( COMMA id )* ;
private ANTLRParser.idList_return idList(  )
{
ANTLRParser.idList_return retval = new ANTLRParser.idList_return();
@@ -7685,59 +7542,59 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken COMMA152=null;
-		ANTLRParser.id_return id151 = default(ANTLRParser.id_return);
+		IToken COMMA154=null;
ANTLRParser.id_return id153 = default(ANTLRParser.id_return);
+		ANTLRParser.id_return id155 = default(ANTLRParser.id_return);

-		GrammarAST COMMA152_tree=null;
+		GrammarAST COMMA154_tree=null;

try
{
-			// Grammars\\ANTLR.g3:649:4: ( id ( COMMA id )* )
-			// Grammars\\ANTLR.g3:649:4: id ( COMMA id )*
+			// Grammars\\ANTLR.g3:637:4: ( id ( COMMA id )* )
+			// Grammars\\ANTLR.g3:637:4: id ( COMMA id )*
{
root_0 = (GrammarAST)adaptor.Nil();

-			PushFollow(Follow._id_in_idList2737);
-			id151=id();
+			PushFollow(Follow._id_in_idList2660);
+			id153=id();

state._fsp--;
if (state.failed) return retval;
-			if ( state.backtracking == 0 ) adaptor.AddChild(root_0, id151.Tree);
-			// Grammars\\ANTLR.g3:649:7: ( COMMA id )*
+			if ( state.backtracking == 0 ) adaptor.AddChild(root_0, id153.Tree);
+			// Grammars\\ANTLR.g3:637:7: ( COMMA id )*
for ( ; ; )
{
-				int alt78=2;
-				int LA78_0 = input.LA(1);
+				int alt77=2;
+				int LA77_0 = input.LA(1);

-				if ( (LA78_0==COMMA) )
+				if ( (LA77_0==COMMA) )
{
-					alt78=1;
+					alt77=1;
}


-				switch ( alt78 )
+				switch ( alt77 )
{
case 1:
-					// Grammars\\ANTLR.g3:649:8: COMMA id
+					// Grammars\\ANTLR.g3:637:8: COMMA id
{
-					COMMA152=(IToken)Match(input,COMMA,Follow._COMMA_in_idList2740); if (state.failed) return retval;
-					PushFollow(Follow._id_in_idList2743);
-					id153=id();
+					COMMA154=(IToken)Match(input,COMMA,Follow._COMMA_in_idList2663); if (state.failed) return retval;
+					PushFollow(Follow._id_in_idList2666);
+					id155=id();

state._fsp--;
if (state.failed) return retval;
-					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, id153.Tree);
+					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, id155.Tree);

}
break;

default:
-					goto loop78;
+					goto loop77;
}
}

-			loop78:
+			loop77:
;


@@ -7773,7 +7630,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "id"
-	// Grammars\\ANTLR.g3:652:0: id : ( TOKEN_REF -> ID[$TOKEN_REF] | RULE_REF -> ID[$RULE_REF] );
+	// Grammars\\ANTLR.g3:640:0: id : ( TOKEN_REF -> ID[$TOKEN_REF] | RULE_REF -> ID[$RULE_REF] );
private ANTLRParser.id_return id(  )
{
ANTLRParser.id_return retval = new ANTLRParser.id_return();
@@ -7781,42 +7638,42 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken TOKEN_REF154=null;
-		IToken RULE_REF155=null;
+		IToken TOKEN_REF156=null;
+		IToken RULE_REF157=null;

-		GrammarAST TOKEN_REF154_tree=null;
-		GrammarAST RULE_REF155_tree=null;
+		GrammarAST TOKEN_REF156_tree=null;
+		GrammarAST RULE_REF157_tree=null;
RewriteRuleITokenStream stream_TOKEN_REF=new RewriteRuleITokenStream(adaptor,"token TOKEN_REF");
RewriteRuleITokenStream stream_RULE_REF=new RewriteRuleITokenStream(adaptor,"token RULE_REF");

try
{
-			// Grammars\\ANTLR.g3:653:4: ( TOKEN_REF -> ID[$TOKEN_REF] | RULE_REF -> ID[$RULE_REF] )
-			int alt79=2;
-			int LA79_0 = input.LA(1);
+			// Grammars\\ANTLR.g3:641:4: ( TOKEN_REF -> ID[$TOKEN_REF] | RULE_REF -> ID[$RULE_REF] )
+			int alt78=2;
+			int LA78_0 = input.LA(1);

-			if ( (LA79_0==TOKEN_REF) )
+			if ( (LA78_0==TOKEN_REF) )
{
-				alt79=1;
+				alt78=1;
}
-			else if ( (LA79_0==RULE_REF) )
+			else if ( (LA78_0==RULE_REF) )
{
-				alt79=2;
+				alt78=2;
}
else
{
if (state.backtracking>0) {state.failed=true; return retval;}
-				NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
+				NoViableAltException nvae = new NoViableAltException("", 78, 0, input);

throw nvae;
}
-			switch ( alt79 )
+			switch ( alt78 )
{
case 1:
-				// Grammars\\ANTLR.g3:653:4: TOKEN_REF
+				// Grammars\\ANTLR.g3:641:4: TOKEN_REF
{
-				TOKEN_REF154=(IToken)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_id2756); if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_TOKEN_REF.Add(TOKEN_REF154);
+				TOKEN_REF156=(IToken)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_id2679); if (state.failed) return retval;
+				if ( state.backtracking == 0 ) stream_TOKEN_REF.Add(TOKEN_REF156);



@@ -7833,9 +7690,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 654:3: -> ID[$TOKEN_REF]
+				// 642:3: -> ID[$TOKEN_REF]
{
-					adaptor.AddChild(root_0, (GrammarAST)adaptor.Create(ID, TOKEN_REF154));
+					adaptor.AddChild(root_0, (GrammarAST)adaptor.Create(ID, TOKEN_REF156));

}

@@ -7846,10 +7703,10 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-				// Grammars\\ANTLR.g3:655:4: RULE_REF
+				// Grammars\\ANTLR.g3:643:4: RULE_REF
{
-				RULE_REF155=(IToken)Match(input,RULE_REF,Follow._RULE_REF_in_id2768); if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_RULE_REF.Add(RULE_REF155);
+				RULE_REF157=(IToken)Match(input,RULE_REF,Follow._RULE_REF_in_id2691); if (state.failed) return retval;
+				if ( state.backtracking == 0 ) stream_RULE_REF.Add(RULE_REF157);



@@ -7866,9 +7723,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 656:3: -> ID[$RULE_REF]
+				// 644:3: -> ID[$RULE_REF]
{
-					adaptor.AddChild(root_0, (GrammarAST)adaptor.Create(ID, RULE_REF155));
+					adaptor.AddChild(root_0, (GrammarAST)adaptor.Create(ID, RULE_REF157));

}

@@ -7909,7 +7766,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "rewrite"
-	// Grammars\\ANTLR.g3:661:0: rewrite : ( ( rewrite_with_sempred )* REWRITE rewrite_alternative -> ( rewrite_with_sempred )* ^( REWRITE rewrite_alternative ) |);
+	// Grammars\\ANTLR.g3:649:0: rewrite : ( ( rewrite_with_sempred )* REWRITE rewrite_alternative -> ( rewrite_with_sempred )* ^( REWRITE rewrite_alternative ) |);
private ANTLRParser.rewrite_return rewrite(  )
{
ANTLRParser.rewrite_return retval = new ANTLRParser.rewrite_return();
@@ -7917,92 +7774,92 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken REWRITE157=null;
-		ANTLRParser.rewrite_with_sempred_return rewrite_with_sempred156 = default(ANTLRParser.rewrite_with_sempred_return);
-		ANTLRParser.rewrite_alternative_return rewrite_alternative158 = default(ANTLRParser.rewrite_alternative_return);
+		IToken REWRITE159=null;
+		ANTLRParser.rewrite_with_sempred_return rewrite_with_sempred158 = default(ANTLRParser.rewrite_with_sempred_return);
+		ANTLRParser.rewrite_alternative_return rewrite_alternative160 = default(ANTLRParser.rewrite_alternative_return);

-		GrammarAST REWRITE157_tree=null;
+		GrammarAST REWRITE159_tree=null;
RewriteRuleITokenStream stream_REWRITE=new RewriteRuleITokenStream(adaptor,"token REWRITE");
RewriteRuleSubtreeStream stream_rewrite_with_sempred=new RewriteRuleSubtreeStream(adaptor,"rule rewrite_with_sempred");
RewriteRuleSubtreeStream stream_rewrite_alternative=new RewriteRuleSubtreeStream(adaptor,"rule rewrite_alternative");
try
{
-			// Grammars\\ANTLR.g3:662:4: ( ( rewrite_with_sempred )* REWRITE rewrite_alternative -> ( rewrite_with_sempred )* ^( REWRITE rewrite_alternative ) |)
-			int alt81=2;
-			int LA81_0 = input.LA(1);
+			// Grammars\\ANTLR.g3:650:4: ( ( rewrite_with_sempred )* REWRITE rewrite_alternative -> ( rewrite_with_sempred )* ^( REWRITE rewrite_alternative ) |)
+			int alt80=2;
+			int LA80_0 = input.LA(1);

-			if ( (LA81_0==REWRITE) )
+			if ( (LA80_0==REWRITE) )
{
-				alt81=1;
+				alt80=1;
}
-			else if ( (LA81_0==OR||LA81_0==RPAREN||LA81_0==SEMI) )
+			else if ( (LA80_0==OR||LA80_0==RPAREN||LA80_0==SEMI) )
{
-				alt81=2;
+				alt80=2;
}
else
{
if (state.backtracking>0) {state.failed=true; return retval;}
-				NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
+				NoViableAltException nvae = new NoViableAltException("", 80, 0, input);

throw nvae;
}
-			switch ( alt81 )
+			switch ( alt80 )
{
case 1:
-				// Grammars\\ANTLR.g3:662:4: ( rewrite_with_sempred )* REWRITE rewrite_alternative
+				// Grammars\\ANTLR.g3:650:4: ( rewrite_with_sempred )* REWRITE rewrite_alternative
{
-				// Grammars\\ANTLR.g3:662:4: ( rewrite_with_sempred )*
+				// Grammars\\ANTLR.g3:650:4: ( rewrite_with_sempred )*
for ( ; ; )
{
-					int alt80=2;
-					int LA80_0 = input.LA(1);
+					int alt79=2;
+					int LA79_0 = input.LA(1);

-					if ( (LA80_0==REWRITE) )
+					if ( (LA79_0==REWRITE) )
{
-						int LA80_1 = input.LA(2);
+						int LA79_1 = input.LA(2);

-						if ( (LA80_1==SEMPRED) )
+						if ( (LA79_1==SEMPRED) )
{
-							alt80=1;
+							alt79=1;
}


}


-					switch ( alt80 )
+					switch ( alt79 )
{
case 1:
-						// Grammars\\ANTLR.g3:662:0: rewrite_with_sempred
+						// Grammars\\ANTLR.g3:650:0: rewrite_with_sempred
{
-						PushFollow(Follow._rewrite_with_sempred_in_rewrite2788);
-						rewrite_with_sempred156=rewrite_with_sempred();
+						PushFollow(Follow._rewrite_with_sempred_in_rewrite2711);
+						rewrite_with_sempred158=rewrite_with_sempred();

state._fsp--;
if (state.failed) return retval;
-						if ( state.backtracking == 0 ) stream_rewrite_with_sempred.Add(rewrite_with_sempred156.Tree);
+						if ( state.backtracking == 0 ) stream_rewrite_with_sempred.Add(rewrite_with_sempred158.Tree);

}
break;

default:
-						goto loop80;
+						goto loop79;
}
}

-				loop80:
+				loop79:
;


-				REWRITE157=(IToken)Match(input,REWRITE,Follow._REWRITE_in_rewrite2793); if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_REWRITE.Add(REWRITE157);
+				REWRITE159=(IToken)Match(input,REWRITE,Follow._REWRITE_in_rewrite2716); if (state.failed) return retval;
+				if ( state.backtracking == 0 ) stream_REWRITE.Add(REWRITE159);

-				PushFollow(Follow._rewrite_alternative_in_rewrite2795);
-				rewrite_alternative158=rewrite_alternative();
+				PushFollow(Follow._rewrite_alternative_in_rewrite2718);
+				rewrite_alternative160=rewrite_alternative();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_rewrite_alternative.Add(rewrite_alternative158.Tree);
+				if ( state.backtracking == 0 ) stream_rewrite_alternative.Add(rewrite_alternative160.Tree);


{
@@ -8018,16 +7875,16 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 664:3: -> ( rewrite_with_sempred )* ^( REWRITE rewrite_alternative )
+				// 652:3: -> ( rewrite_with_sempred )* ^( REWRITE rewrite_alternative )
{
-					// Grammars\\ANTLR.g3:664:6: ( rewrite_with_sempred )*
+					// Grammars\\ANTLR.g3:652:6: ( rewrite_with_sempred )*
while ( stream_rewrite_with_sempred.HasNext )
{
adaptor.AddChild(root_0, stream_rewrite_with_sempred.NextTree());

}
stream_rewrite_with_sempred.Reset();
-					// Grammars\\ANTLR.g3:664:28: ^( REWRITE rewrite_alternative )
+					// Grammars\\ANTLR.g3:652:28: ^( REWRITE rewrite_alternative )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot(stream_REWRITE.NextNode(), root_1);
@@ -8046,7 +7903,7 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-				// Grammars\\ANTLR.g3:666:2:
+				// Grammars\\ANTLR.g3:654:2:
{
root_0 = (GrammarAST)adaptor.Nil();

@@ -8085,7 +7942,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "rewrite_with_sempred"
-	// Grammars\\ANTLR.g3:668:0: rewrite_with_sempred : REWRITE SEMPRED rewrite_alternative ;
+	// Grammars\\ANTLR.g3:656:0: rewrite_with_sempred : REWRITE SEMPRED rewrite_alternative ;
private ANTLRParser.rewrite_with_sempred_return rewrite_with_sempred(  )
{
ANTLRParser.rewrite_with_sempred_return retval = new ANTLRParser.rewrite_with_sempred_return();
@@ -8093,36 +7950,36 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken REWRITE159=null;
-		IToken SEMPRED160=null;
-		ANTLRParser.rewrite_alternative_return rewrite_alternative161 = default(ANTLRParser.rewrite_alternative_return);
+		IToken REWRITE161=null;
+		IToken SEMPRED162=null;
+		ANTLRParser.rewrite_alternative_return rewrite_alternative163 = default(ANTLRParser.rewrite_alternative_return);

-		GrammarAST REWRITE159_tree=null;
-		GrammarAST SEMPRED160_tree=null;
+		GrammarAST REWRITE161_tree=null;
+		GrammarAST SEMPRED162_tree=null;

try
{
-			// Grammars\\ANTLR.g3:669:4: ( REWRITE SEMPRED rewrite_alternative )
-			// Grammars\\ANTLR.g3:669:4: REWRITE SEMPRED rewrite_alternative
+			// Grammars\\ANTLR.g3:657:4: ( REWRITE SEMPRED rewrite_alternative )
+			// Grammars\\ANTLR.g3:657:4: REWRITE SEMPRED rewrite_alternative
{
root_0 = (GrammarAST)adaptor.Nil();

-			REWRITE159=(IToken)Match(input,REWRITE,Follow._REWRITE_in_rewrite_with_sempred2822); if (state.failed) return retval;
+			REWRITE161=(IToken)Match(input,REWRITE,Follow._REWRITE_in_rewrite_with_sempred2745); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-			REWRITE159_tree = (GrammarAST)adaptor.Create(REWRITE159);
-			root_0 = (GrammarAST)adaptor.BecomeRoot(REWRITE159_tree, root_0);
+			REWRITE161_tree = (GrammarAST)adaptor.Create(REWRITE161);
+			root_0 = (GrammarAST)adaptor.BecomeRoot(REWRITE161_tree, root_0);
}
-			SEMPRED160=(IToken)Match(input,SEMPRED,Follow._SEMPRED_in_rewrite_with_sempred2825); if (state.failed) return retval;
+			SEMPRED162=(IToken)Match(input,SEMPRED,Follow._SEMPRED_in_rewrite_with_sempred2748); if (state.failed) return retval;
if ( state.backtracking==0 ) {
-			SEMPRED160_tree = (GrammarAST)adaptor.Create(SEMPRED160);
-			adaptor.AddChild(root_0, SEMPRED160_tree);
+			SEMPRED162_tree = (GrammarAST)adaptor.Create(SEMPRED162);
+			adaptor.AddChild(root_0, SEMPRED162_tree);
}
-			PushFollow(Follow._rewrite_alternative_in_rewrite_with_sempred2827);
-			rewrite_alternative161=rewrite_alternative();
+			PushFollow(Follow._rewrite_alternative_in_rewrite_with_sempred2750);
+			rewrite_alternative163=rewrite_alternative();

state._fsp--;
if (state.failed) return retval;
-			if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rewrite_alternative161.Tree);
+			if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rewrite_alternative163.Tree);

}

@@ -8155,7 +8012,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "rewrite_block"
-	// Grammars\\ANTLR.g3:672:0: rewrite_block : LPAREN rewrite_alternative RPAREN -> ^( BLOCK[$LPAREN,\"BLOCK\"] rewrite_alternative EOB[$RPAREN,\"<end-of-block>\"] ) ;
+	// Grammars\\ANTLR.g3:660:0: rewrite_block : LPAREN rewrite_alternative RPAREN -> ^( BLOCK[$LPAREN,\"BLOCK\"] rewrite_alternative EOB[$RPAREN,\"<end-of-block>\"] ) ;
private ANTLRParser.rewrite_block_return rewrite_block(  )
{
ANTLRParser.rewrite_block_return retval = new ANTLRParser.rewrite_block_return();
@@ -8163,31 +8020,31 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken LPAREN162=null;
-		IToken RPAREN164=null;
-		ANTLRParser.rewrite_alternative_return rewrite_alternative163 = default(ANTLRParser.rewrite_alternative_return);
+		IToken LPAREN164=null;
+		IToken RPAREN166=null;
+		ANTLRParser.rewrite_alternative_return rewrite_alternative165 = default(ANTLRParser.rewrite_alternative_return);

-		GrammarAST LPAREN162_tree=null;
-		GrammarAST RPAREN164_tree=null;
+		GrammarAST LPAREN164_tree=null;
+		GrammarAST RPAREN166_tree=null;
RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
RewriteRuleSubtreeStream stream_rewrite_alternative=new RewriteRuleSubtreeStream(adaptor,"rule rewrite_alternative");
try
{
-			// Grammars\\ANTLR.g3:673:4: ( LPAREN rewrite_alternative RPAREN -> ^( BLOCK[$LPAREN,\"BLOCK\"] rewrite_alternative EOB[$RPAREN,\"<end-of-block>\"] ) )
-			// Grammars\\ANTLR.g3:673:4: LPAREN rewrite_alternative RPAREN
+			// Grammars\\ANTLR.g3:661:4: ( LPAREN rewrite_alternative RPAREN -> ^( BLOCK[$LPAREN,\"BLOCK\"] rewrite_alternative EOB[$RPAREN,\"<end-of-block>\"] ) )
+			// Grammars\\ANTLR.g3:661:4: LPAREN rewrite_alternative RPAREN
{
-			LPAREN162=(IToken)Match(input,LPAREN,Follow._LPAREN_in_rewrite_block2838); if (state.failed) return retval;
-			if ( state.backtracking == 0 ) stream_LPAREN.Add(LPAREN162);
+			LPAREN164=(IToken)Match(input,LPAREN,Follow._LPAREN_in_rewrite_block2761); if (state.failed) return retval;
+			if ( state.backtracking == 0 ) stream_LPAREN.Add(LPAREN164);

-			PushFollow(Follow._rewrite_alternative_in_rewrite_block2842);
-			rewrite_alternative163=rewrite_alternative();
+			PushFollow(Follow._rewrite_alternative_in_rewrite_block2765);
+			rewrite_alternative165=rewrite_alternative();

state._fsp--;
if (state.failed) return retval;
-			if ( state.backtracking == 0 ) stream_rewrite_alternative.Add(rewrite_alternative163.Tree);
-			RPAREN164=(IToken)Match(input,RPAREN,Follow._RPAREN_in_rewrite_block2846); if (state.failed) return retval;
-			if ( state.backtracking == 0 ) stream_RPAREN.Add(RPAREN164);
+			if ( state.backtracking == 0 ) stream_rewrite_alternative.Add(rewrite_alternative165.Tree);
+			RPAREN166=(IToken)Match(input,RPAREN,Follow._RPAREN_in_rewrite_block2769); if (state.failed) return retval;
+			if ( state.backtracking == 0 ) stream_RPAREN.Add(RPAREN166);



@@ -8204,15 +8061,15 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-			// 676:3: -> ^( BLOCK[$LPAREN,\"BLOCK\"] rewrite_alternative EOB[$RPAREN,\"<end-of-block>\"] )
+			// 664:3: -> ^( BLOCK[$LPAREN,\"BLOCK\"] rewrite_alternative EOB[$RPAREN,\"<end-of-block>\"] )
{
-				// Grammars\\ANTLR.g3:676:6: ^( BLOCK[$LPAREN,\"BLOCK\"] rewrite_alternative EOB[$RPAREN,\"<end-of-block>\"] )
+				// Grammars\\ANTLR.g3:664:6: ^( BLOCK[$LPAREN,\"BLOCK\"] rewrite_alternative EOB[$RPAREN,\"<end-of-block>\"] )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
-				root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(BLOCK, LPAREN162, "BLOCK"), root_1);
+				root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(BLOCK, LPAREN164, "BLOCK"), root_1);

adaptor.AddChild(root_1, stream_rewrite_alternative.NextTree());
-				adaptor.AddChild(root_1, (GrammarAST)adaptor.Create(EOB, RPAREN164, "<end-of-block>"));
+				adaptor.AddChild(root_1, (GrammarAST)adaptor.Create(EOB, RPAREN166, "<end-of-block>"));

adaptor.AddChild(root_0, root_1);
}
@@ -8254,7 +8111,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "rewrite_alternative"
-	// Grammars\\ANTLR.g3:679:0: rewrite_alternative options {k=1; } : ({...}? => rewrite_template |{...}? => ( rewrite_element )+ -> {!stream_rewrite_element.HasNext}? ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] ) -> ^( ALT[LT(1),\"ALT\"] ( rewrite_element )+ EOA[\"<end-of-alt>\"] ) | -> ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] ) |{...}? ETC );
+	// Grammars\\ANTLR.g3:667:0: rewrite_alternative options {k=1; } : ({...}? => rewrite_template |{...}? => ( rewrite_element )+ -> {!stream_rewrite_element.HasNext}? ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] ) -> ^( ALT[LT(1),\"ALT\"] ( rewrite_element )+ EOA[\"<end-of-alt>\"] ) | -> ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] ) |{...}? ETC );
private ANTLRParser.rewrite_alternative_return rewrite_alternative(  )
{
ANTLRParser.rewrite_alternative_return retval = new ANTLRParser.rewrite_alternative_return();
@@ -8262,21 +8119,21 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken ETC167=null;
-		ANTLRParser.rewrite_template_return rewrite_template165 = default(ANTLRParser.rewrite_template_return);
-		ANTLRParser.rewrite_element_return rewrite_element166 = default(ANTLRParser.rewrite_element_return);
+		IToken ETC169=null;
+		ANTLRParser.rewrite_template_return rewrite_template167 = default(ANTLRParser.rewrite_template_return);
+		ANTLRParser.rewrite_element_return rewrite_element168 = default(ANTLRParser.rewrite_element_return);

-		GrammarAST ETC167_tree=null;
+		GrammarAST ETC169_tree=null;
RewriteRuleSubtreeStream stream_rewrite_element=new RewriteRuleSubtreeStream(adaptor,"rule rewrite_element");
try
{
-			// Grammars\\ANTLR.g3:681:4: ({...}? => rewrite_template |{...}? => ( rewrite_element )+ -> {!stream_rewrite_element.HasNext}? ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] ) -> ^( ALT[LT(1),\"ALT\"] ( rewrite_element )+ EOA[\"<end-of-alt>\"] ) | -> ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] ) |{...}? ETC )
-			int alt83=4;
-			alt83 = dfa83.Predict(input);
-			switch ( alt83 )
+			// Grammars\\ANTLR.g3:669:4: ({...}? => rewrite_template |{...}? => ( rewrite_element )+ -> {!stream_rewrite_element.HasNext}? ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] ) -> ^( ALT[LT(1),\"ALT\"] ( rewrite_element )+ EOA[\"<end-of-alt>\"] ) | -> ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] ) |{...}? ETC )
+			int alt82=4;
+			alt82 = dfa82.Predict(input);
+			switch ( alt82 )
{
case 1:
-				// Grammars\\ANTLR.g3:681:4: {...}? => rewrite_template
+				// Grammars\\ANTLR.g3:669:4: {...}? => rewrite_template
{
root_0 = (GrammarAST)adaptor.Nil();

@@ -8285,62 +8142,62 @@ public partial class ANTLRParser : Parser
if (state.backtracking>0) {state.failed=true; return retval;}
throw new FailedPredicateException(input, "rewrite_alternative", "Grammar.BuildTemplate");
}
-				PushFollow(Follow._rewrite_template_in_rewrite_alternative2882);
-				rewrite_template165=rewrite_template();
+				PushFollow(Follow._rewrite_template_in_rewrite_alternative2805);
+				rewrite_template167=rewrite_template();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rewrite_template165.Tree);
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rewrite_template167.Tree);

}
break;
case 2:
-				// Grammars\\ANTLR.g3:683:4: {...}? => ( rewrite_element )+
+				// Grammars\\ANTLR.g3:671:4: {...}? => ( rewrite_element )+
{
if ( !((Grammar.BuildAST)) )
{
if (state.backtracking>0) {state.failed=true; return retval;}
throw new FailedPredicateException(input, "rewrite_alternative", "Grammar.BuildAST");
}
-				// Grammars\\ANTLR.g3:683:27: ( rewrite_element )+
-				int cnt82=0;
+				// Grammars\\ANTLR.g3:671:27: ( rewrite_element )+
+				int cnt81=0;
for ( ; ; )
{
-					int alt82=2;
-					int LA82_0 = input.LA(1);
+					int alt81=2;
+					int LA81_0 = input.LA(1);

-					if ( (LA82_0==ACTION||LA82_0==CHAR_LITERAL||LA82_0==DOLLAR||LA82_0==LPAREN||LA82_0==RULE_REF||LA82_0==STRING_LITERAL||LA82_0==TOKEN_REF||LA82_0==TREE_BEGIN) )
+					if ( (LA81_0==ACTION||LA81_0==CHAR_LITERAL||LA81_0==DOLLAR||LA81_0==LPAREN||LA81_0==RULE_REF||LA81_0==STRING_LITERAL||LA81_0==TOKEN_REF||LA81_0==TREE_BEGIN) )
{
-						alt82=1;
+						alt81=1;
}


-					switch ( alt82 )
+					switch ( alt81 )
{
case 1:
-						// Grammars\\ANTLR.g3:683:29: rewrite_element
+						// Grammars\\ANTLR.g3:671:29: rewrite_element
{
-						PushFollow(Follow._rewrite_element_in_rewrite_alternative2894);
-						rewrite_element166=rewrite_element();
+						PushFollow(Follow._rewrite_element_in_rewrite_alternative2817);
+						rewrite_element168=rewrite_element();

state._fsp--;
if (state.failed) return retval;
-						if ( state.backtracking == 0 ) stream_rewrite_element.Add(rewrite_element166.Tree);
+						if ( state.backtracking == 0 ) stream_rewrite_element.Add(rewrite_element168.Tree);

}
break;

default:
-						if ( cnt82 >= 1 )
-							goto loop82;
+						if ( cnt81 >= 1 )
+							goto loop81;

if (state.backtracking>0) {state.failed=true; return retval;}
-						EarlyExitException eee82 = new EarlyExitException( 82, input );
-						throw eee82;
+						EarlyExitException eee81 = new EarlyExitException( 81, input );
+						throw eee81;
}
-					cnt82++;
+					cnt81++;
}
-				loop82:
+				loop81:
;


@@ -8359,10 +8216,10 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 684:3: -> {!stream_rewrite_element.HasNext}? ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] )
+				// 672:3: -> {!stream_rewrite_element.HasNext}? ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] )
if (!stream_rewrite_element.HasNext)
{
-					// Grammars\\ANTLR.g3:684:41: ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] )
+					// Grammars\\ANTLR.g3:672:41: ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(ALT, LT(1), "ALT"), root_1);
@@ -8374,9 +8231,9 @@ public partial class ANTLRParser : Parser
}

}
-				else // 685:3: -> ^( ALT[LT(1),\"ALT\"] ( rewrite_element )+ EOA[\"<end-of-alt>\"] )
+				else // 673:3: -> ^( ALT[LT(1),\"ALT\"] ( rewrite_element )+ EOA[\"<end-of-alt>\"] )
{
-					// Grammars\\ANTLR.g3:685:6: ^( ALT[LT(1),\"ALT\"] ( rewrite_element )+ EOA[\"<end-of-alt>\"] )
+					// Grammars\\ANTLR.g3:673:6: ^( ALT[LT(1),\"ALT\"] ( rewrite_element )+ EOA[\"<end-of-alt>\"] )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(ALT, LT(1), "ALT"), root_1);
@@ -8405,7 +8262,7 @@ public partial class ANTLRParser : Parser
}
break;
case 3:
-				// Grammars\\ANTLR.g3:688:3:
+				// Grammars\\ANTLR.g3:676:3:
{


@@ -8423,9 +8280,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 688:3: -> ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] )
+				// 676:3: -> ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] )
{
-					// Grammars\\ANTLR.g3:688:6: ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] )
+					// Grammars\\ANTLR.g3:676:6: ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(ALT, LT(1), "ALT"), root_1);
@@ -8445,7 +8302,7 @@ public partial class ANTLRParser : Parser
}
break;
case 4:
-				// Grammars\\ANTLR.g3:689:4: {...}? ETC
+				// Grammars\\ANTLR.g3:677:4: {...}? ETC
{
root_0 = (GrammarAST)adaptor.Nil();

@@ -8454,10 +8311,10 @@ public partial class ANTLRParser : Parser
if (state.backtracking>0) {state.failed=true; return retval;}
throw new FailedPredicateException(input, "rewrite_alternative", "Grammar.BuildAST");
}
-				ETC167=(IToken)Match(input,ETC,Follow._ETC_in_rewrite_alternative2955); if (state.failed) return retval;
+				ETC169=(IToken)Match(input,ETC,Follow._ETC_in_rewrite_alternative2878); if (state.failed) return retval;
if ( state.backtracking==0 ) {
-				ETC167_tree = (GrammarAST)adaptor.Create(ETC167);
-				adaptor.AddChild(root_0, ETC167_tree);
+				ETC169_tree = (GrammarAST)adaptor.Create(ETC169);
+				adaptor.AddChild(root_0, ETC169_tree);
}

}
@@ -8493,7 +8350,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "rewrite_element"
-	// Grammars\\ANTLR.g3:692:0: rewrite_element : ( (t= rewrite_atom -> $t) (subrule= ebnfSuffix[$t.tree,true] -> $subrule)? | rewrite_ebnf | (tr= rewrite_tree -> $tr) (subrule= ebnfSuffix[$tr.tree,true] -> $subrule)? );
+	// Grammars\\ANTLR.g3:680:0: rewrite_element : ( (t= rewrite_atom -> $t) (subrule= ebnfSuffix[$t.tree,true] -> $subrule)? | rewrite_ebnf | (tr= rewrite_tree -> $tr) (subrule= ebnfSuffix[$tr.tree,true] -> $subrule)? );
private ANTLRParser.rewrite_element_return rewrite_element(  )
{
ANTLRParser.rewrite_element_return retval = new ANTLRParser.rewrite_element_return();
@@ -8504,15 +8361,15 @@ public partial class ANTLRParser : Parser
ANTLRParser.rewrite_atom_return t = default(ANTLRParser.rewrite_atom_return);
ANTLRParser.ebnfSuffix_return subrule = default(ANTLRParser.ebnfSuffix_return);
ANTLRParser.rewrite_tree_return tr = default(ANTLRParser.rewrite_tree_return);
-		ANTLRParser.rewrite_ebnf_return rewrite_ebnf168 = default(ANTLRParser.rewrite_ebnf_return);
+		ANTLRParser.rewrite_ebnf_return rewrite_ebnf170 = default(ANTLRParser.rewrite_ebnf_return);

RewriteRuleSubtreeStream stream_rewrite_atom=new RewriteRuleSubtreeStream(adaptor,"rule rewrite_atom");
RewriteRuleSubtreeStream stream_ebnfSuffix=new RewriteRuleSubtreeStream(adaptor,"rule ebnfSuffix");
RewriteRuleSubtreeStream stream_rewrite_tree=new RewriteRuleSubtreeStream(adaptor,"rule rewrite_tree");
try
{
-			// Grammars\\ANTLR.g3:693:4: ( (t= rewrite_atom -> $t) (subrule= ebnfSuffix[$t.tree,true] -> $subrule)? | rewrite_ebnf | (tr= rewrite_tree -> $tr) (subrule= ebnfSuffix[$tr.tree,true] -> $subrule)? )
-			int alt86=3;
+			// Grammars\\ANTLR.g3:681:4: ( (t= rewrite_atom -> $t) (subrule= ebnfSuffix[$t.tree,true] -> $subrule)? | rewrite_ebnf | (tr= rewrite_tree -> $tr) (subrule= ebnfSuffix[$tr.tree,true] -> $subrule)? )
+			int alt85=3;
switch ( input.LA(1) )
{
case ACTION:
@@ -8522,37 +8379,37 @@ public partial class ANTLRParser : Parser
case STRING_LITERAL:
case TOKEN_REF:
{
-				alt86=1;
+				alt85=1;
}
break;
case LPAREN:
{
-				alt86=2;
+				alt85=2;
}
break;
case TREE_BEGIN:
{
-				alt86=3;
+				alt85=3;
}
break;
default:
{
if (state.backtracking>0) {state.failed=true; return retval;}
-					NoViableAltException nvae = new NoViableAltException("", 86, 0, input);
+					NoViableAltException nvae = new NoViableAltException("", 85, 0, input);

throw nvae;
}
}

-			switch ( alt86 )
+			switch ( alt85 )
{
case 1:
-				// Grammars\\ANTLR.g3:693:4: (t= rewrite_atom -> $t) (subrule= ebnfSuffix[$t.tree,true] -> $subrule)?
+				// Grammars\\ANTLR.g3:681:4: (t= rewrite_atom -> $t) (subrule= ebnfSuffix[$t.tree,true] -> $subrule)?
{
-				// Grammars\\ANTLR.g3:693:4: (t= rewrite_atom -> $t)
-				// Grammars\\ANTLR.g3:693:6: t= rewrite_atom
+				// Grammars\\ANTLR.g3:681:4: (t= rewrite_atom -> $t)
+				// Grammars\\ANTLR.g3:681:6: t= rewrite_atom
{
-				PushFollow(Follow._rewrite_atom_in_rewrite_element2970);
+				PushFollow(Follow._rewrite_atom_in_rewrite_element2893);
t=rewrite_atom();

state._fsp--;
@@ -8574,7 +8431,7 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 694:4: -> $t
+				// 682:4: -> $t
{
adaptor.AddChild(root_0, stream_t.NextTree());

@@ -8586,20 +8443,20 @@ public partial class ANTLRParser : Parser

}

-				// Grammars\\ANTLR.g3:696:3: (subrule= ebnfSuffix[$t.tree,true] -> $subrule)?
-				int alt84=2;
-				int LA84_0 = input.LA(1);
+				// Grammars\\ANTLR.g3:684:3: (subrule= ebnfSuffix[$t.tree,true] -> $subrule)?
+				int alt83=2;
+				int LA83_0 = input.LA(1);

-				if ( (LA84_0==PLUS||LA84_0==QUESTION||LA84_0==STAR) )
+				if ( (LA83_0==PLUS||LA83_0==QUESTION||LA83_0==STAR) )
{
-					alt84=1;
+					alt83=1;
}
-				switch ( alt84 )
+				switch ( alt83 )
{
case 1:
-					// Grammars\\ANTLR.g3:696:5: subrule= ebnfSuffix[$t.tree,true]
+					// Grammars\\ANTLR.g3:684:5: subrule= ebnfSuffix[$t.tree,true]
{
-					PushFollow(Follow._ebnfSuffix_in_rewrite_element2990);
+					PushFollow(Follow._ebnfSuffix_in_rewrite_element2913);
subrule=ebnfSuffix((t!=null?((GrammarAST)t.tree):null), true);

state._fsp--;
@@ -8621,7 +8478,7 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-					// 697:4: -> $subrule
+					// 685:4: -> $subrule
{
adaptor.AddChild(root_0, stream_subrule.NextTree());

@@ -8640,26 +8497,26 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-				// Grammars\\ANTLR.g3:699:4: rewrite_ebnf
+				// Grammars\\ANTLR.g3:687:4: rewrite_ebnf
{
root_0 = (GrammarAST)adaptor.Nil();

-				PushFollow(Follow._rewrite_ebnf_in_rewrite_element3009);
-				rewrite_ebnf168=rewrite_ebnf();
+				PushFollow(Follow._rewrite_ebnf_in_rewrite_element2932);
+				rewrite_ebnf170=rewrite_ebnf();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rewrite_ebnf168.Tree);
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rewrite_ebnf170.Tree);

}
break;
case 3:
-				// Grammars\\ANTLR.g3:700:4: (tr= rewrite_tree -> $tr) (subrule= ebnfSuffix[$tr.tree,true] -> $subrule)?
+				// Grammars\\ANTLR.g3:688:4: (tr= rewrite_tree -> $tr) (subrule= ebnfSuffix[$tr.tree,true] -> $subrule)?
{
-				// Grammars\\ANTLR.g3:700:4: (tr= rewrite_tree -> $tr)
-				// Grammars\\ANTLR.g3:700:6: tr= rewrite_tree
+				// Grammars\\ANTLR.g3:688:4: (tr= rewrite_tree -> $tr)
+				// Grammars\\ANTLR.g3:688:6: tr= rewrite_tree
{
-				PushFollow(Follow._rewrite_tree_in_rewrite_element3018);
+				PushFollow(Follow._rewrite_tree_in_rewrite_element2941);
tr=rewrite_tree();

state._fsp--;
@@ -8681,7 +8538,7 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 701:4: -> $tr
+				// 689:4: -> $tr
{
adaptor.AddChild(root_0, stream_tr.NextTree());

@@ -8693,20 +8550,20 @@ public partial class ANTLRParser : Parser

}

-				// Grammars\\ANTLR.g3:703:3: (subrule= ebnfSuffix[$tr.tree,true] -> $subrule)?
-				int alt85=2;
-				int LA85_0 = input.LA(1);
+				// Grammars\\ANTLR.g3:691:3: (subrule= ebnfSuffix[$tr.tree,true] -> $subrule)?
+				int alt84=2;
+				int LA84_0 = input.LA(1);

-				if ( (LA85_0==PLUS||LA85_0==QUESTION||LA85_0==STAR) )
+				if ( (LA84_0==PLUS||LA84_0==QUESTION||LA84_0==STAR) )
{
-					alt85=1;
+					alt84=1;
}
-				switch ( alt85 )
+				switch ( alt84 )
{
case 1:
-					// Grammars\\ANTLR.g3:703:5: subrule= ebnfSuffix[$tr.tree,true]
+					// Grammars\\ANTLR.g3:691:5: subrule= ebnfSuffix[$tr.tree,true]
{
-					PushFollow(Follow._ebnfSuffix_in_rewrite_element3038);
+					PushFollow(Follow._ebnfSuffix_in_rewrite_element2961);
subrule=ebnfSuffix((tr!=null?((GrammarAST)tr.tree):null), true);

state._fsp--;
@@ -8728,7 +8585,7 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-					// 704:4: -> $subrule
+					// 692:4: -> $subrule
{
adaptor.AddChild(root_0, stream_subrule.NextTree());

@@ -8777,7 +8634,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "rewrite_atom"
-	// Grammars\\ANTLR.g3:708:0: rewrite_atom : ( (tr= TOKEN_REF -> $tr) ( elementOptions[(GrammarAST)$tree.GetChild(0)] )? ( ARG_ACTION )? -> ^( $rewrite_atom ( ARG_ACTION )? ) |rr= RULE_REF | (cl= CHAR_LITERAL -> $cl) ( elementOptions[(GrammarAST)$tree.GetChild(0)] )? | (sl= STRING_LITERAL -> $sl) (eo= elementOptions[(GrammarAST)$tree.GetChild(0)] )? |d= DOLLAR i= id -> LABEL[$i.start,$i.text] | ACTION );
+	// Grammars\\ANTLR.g3:696:0: rewrite_atom : ( (tr= TOKEN_REF -> $tr) ( elementOptions[(GrammarAST)$tree.GetChild(0)] )? ( ARG_ACTION )? -> ^( $rewrite_atom ( ARG_ACTION )? ) |rr= RULE_REF | (cl= CHAR_LITERAL -> $cl) ( elementOptions[(GrammarAST)$tree.GetChild(0)] )? | (sl= STRING_LITERAL -> $sl) (eo= elementOptions[(GrammarAST)$tree.GetChild(0)] )? |d= DOLLAR i= id -> LABEL[$i.start,$i.text] | ACTION );
private ANTLRParser.rewrite_atom_return rewrite_atom(  )
{
ANTLRParser.rewrite_atom_return retval = new ANTLRParser.rewrite_atom_return();
@@ -8790,20 +8647,20 @@ public partial class ANTLRParser : Parser
IToken cl=null;
IToken sl=null;
IToken d=null;
-		IToken ARG_ACTION170=null;
-		IToken ACTION172=null;
+		IToken ARG_ACTION172=null;
+		IToken ACTION174=null;
ANTLRParser.elementOptions_return eo = default(ANTLRParser.elementOptions_return);
ANTLRParser.id_return i = default(ANTLRParser.id_return);
-		ANTLRParser.elementOptions_return elementOptions169 = default(ANTLRParser.elementOptions_return);
ANTLRParser.elementOptions_return elementOptions171 = default(ANTLRParser.elementOptions_return);
+		ANTLRParser.elementOptions_return elementOptions173 = default(ANTLRParser.elementOptions_return);

GrammarAST tr_tree=null;
GrammarAST rr_tree=null;
GrammarAST cl_tree=null;
GrammarAST sl_tree=null;
GrammarAST d_tree=null;
-		GrammarAST ARG_ACTION170_tree=null;
-		GrammarAST ACTION172_tree=null;
+		GrammarAST ARG_ACTION172_tree=null;
+		GrammarAST ACTION174_tree=null;
RewriteRuleITokenStream stream_TOKEN_REF=new RewriteRuleITokenStream(adaptor,"token TOKEN_REF");
RewriteRuleITokenStream stream_ARG_ACTION=new RewriteRuleITokenStream(adaptor,"token ARG_ACTION");
RewriteRuleITokenStream stream_CHAR_LITERAL=new RewriteRuleITokenStream(adaptor,"token CHAR_LITERAL");
@@ -8816,58 +8673,58 @@ public partial class ANTLRParser : Parser

try
{
-			// Grammars\\ANTLR.g3:713:4: ( (tr= TOKEN_REF -> $tr) ( elementOptions[(GrammarAST)$tree.GetChild(0)] )? ( ARG_ACTION )? -> ^( $rewrite_atom ( ARG_ACTION )? ) |rr= RULE_REF | (cl= CHAR_LITERAL -> $cl) ( elementOptions[(GrammarAST)$tree.GetChild(0)] )? | (sl= STRING_LITERAL -> $sl) (eo= elementOptions[(GrammarAST)$tree.GetChild(0)] )? |d= DOLLAR i= id -> LABEL[$i.start,$i.text] | ACTION )
-			int alt91=6;
+			// Grammars\\ANTLR.g3:701:4: ( (tr= TOKEN_REF -> $tr) ( elementOptions[(GrammarAST)$tree.GetChild(0)] )? ( ARG_ACTION )? -> ^( $rewrite_atom ( ARG_ACTION )? ) |rr= RULE_REF | (cl= CHAR_LITERAL -> $cl) ( elementOptions[(GrammarAST)$tree.GetChild(0)] )? | (sl= STRING_LITERAL -> $sl) (eo= elementOptions[(GrammarAST)$tree.GetChild(0)] )? |d= DOLLAR i= id -> LABEL[$i.start,$i.text] | ACTION )
+			int alt90=6;
switch ( input.LA(1) )
{
case TOKEN_REF:
{
-				alt91=1;
+				alt90=1;
}
break;
case RULE_REF:
{
-				alt91=2;
+				alt90=2;
}
break;
case CHAR_LITERAL:
{
-				alt91=3;
+				alt90=3;
}
break;
case STRING_LITERAL:
{
-				alt91=4;
+				alt90=4;
}
break;
case DOLLAR:
{
-				alt91=5;
+				alt90=5;
}
break;
case ACTION:
{
-				alt91=6;
+				alt90=6;
}
break;
default:
{
if (state.backtracking>0) {state.failed=true; return retval;}
-					NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
+					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);

throw nvae;
}
}

-			switch ( alt91 )
+			switch ( alt90 )
{
case 1:
-				// Grammars\\ANTLR.g3:713:4: (tr= TOKEN_REF -> $tr) ( elementOptions[(GrammarAST)$tree.GetChild(0)] )? ( ARG_ACTION )?
+				// Grammars\\ANTLR.g3:701:4: (tr= TOKEN_REF -> $tr) ( elementOptions[(GrammarAST)$tree.GetChild(0)] )? ( ARG_ACTION )?
{
-				// Grammars\\ANTLR.g3:713:4: (tr= TOKEN_REF -> $tr)
-				// Grammars\\ANTLR.g3:713:6: tr= TOKEN_REF
+				// Grammars\\ANTLR.g3:701:4: (tr= TOKEN_REF -> $tr)
+				// Grammars\\ANTLR.g3:701:6: tr= TOKEN_REF
{
-				tr=(IToken)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_rewrite_atom3072); if (state.failed) return retval;
+				tr=(IToken)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_rewrite_atom2995); if (state.failed) return retval;
if ( state.backtracking == 0 ) stream_TOKEN_REF.Add(tr);


@@ -8886,7 +8743,7 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 714:4: -> $tr
+				// 702:4: -> $tr
{
adaptor.AddChild(root_0, stream_tr.NextNode());

@@ -8898,46 +8755,46 @@ public partial class ANTLRParser : Parser

}

-				// Grammars\\ANTLR.g3:716:3: ( elementOptions[(GrammarAST)$tree.GetChild(0)] )?
-				int alt87=2;
-				int LA87_0 = input.LA(1);
+				// Grammars\\ANTLR.g3:704:3: ( elementOptions[(GrammarAST)$tree.GetChild(0)] )?
+				int alt86=2;
+				int LA86_0 = input.LA(1);

-				if ( (LA87_0==OPEN_ELEMENT_OPTION) )
+				if ( (LA86_0==OPEN_ELEMENT_OPTION) )
{
-					alt87=1;
+					alt86=1;
}
-				switch ( alt87 )
+				switch ( alt86 )
{
case 1:
-					// Grammars\\ANTLR.g3:716:4: elementOptions[(GrammarAST)$tree.GetChild(0)]
+					// Grammars\\ANTLR.g3:704:4: elementOptions[(GrammarAST)$tree.GetChild(0)]
{
-					PushFollow(Follow._elementOptions_in_rewrite_atom3089);
-					elementOptions169=elementOptions((GrammarAST)((GrammarAST)retval.tree).GetChild(0));
+					PushFollow(Follow._elementOptions_in_rewrite_atom3012);
+					elementOptions171=elementOptions((GrammarAST)((GrammarAST)retval.tree).GetChild(0));

state._fsp--;
if (state.failed) return retval;
-					if ( state.backtracking == 0 ) stream_elementOptions.Add(elementOptions169.Tree);
+					if ( state.backtracking == 0 ) stream_elementOptions.Add(elementOptions171.Tree);

}
break;

}

-				// Grammars\\ANTLR.g3:716:52: ( ARG_ACTION )?
-				int alt88=2;
-				int LA88_0 = input.LA(1);
+				// Grammars\\ANTLR.g3:704:52: ( ARG_ACTION )?
+				int alt87=2;
+				int LA87_0 = input.LA(1);

-				if ( (LA88_0==ARG_ACTION) )
+				if ( (LA87_0==ARG_ACTION) )
{
-					alt88=1;
+					alt87=1;
}
-				switch ( alt88 )
+				switch ( alt87 )
{
case 1:
-					// Grammars\\ANTLR.g3:716:53: ARG_ACTION
+					// Grammars\\ANTLR.g3:704:53: ARG_ACTION
{
-					ARG_ACTION170=(IToken)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_rewrite_atom3095); if (state.failed) return retval;
-					if ( state.backtracking == 0 ) stream_ARG_ACTION.Add(ARG_ACTION170);
+					ARG_ACTION172=(IToken)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_rewrite_atom3018); if (state.failed) return retval;
+					if ( state.backtracking == 0 ) stream_ARG_ACTION.Add(ARG_ACTION172);


}
@@ -8960,14 +8817,14 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 717:3: -> ^( $rewrite_atom ( ARG_ACTION )? )
+				// 705:3: -> ^( $rewrite_atom ( ARG_ACTION )? )
{
-					// Grammars\\ANTLR.g3:717:6: ^( $rewrite_atom ( ARG_ACTION )? )
+					// Grammars\\ANTLR.g3:705:6: ^( $rewrite_atom ( ARG_ACTION )? )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot(stream_retval.NextNode(), root_1);

-					// Grammars\\ANTLR.g3:717:22: ( ARG_ACTION )?
+					// Grammars\\ANTLR.g3:705:22: ( ARG_ACTION )?
if ( stream_ARG_ACTION.HasNext )
{
adaptor.AddChild(root_1, stream_ARG_ACTION.NextNode());
@@ -8987,11 +8844,11 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-				// Grammars\\ANTLR.g3:718:4: rr= RULE_REF
+				// Grammars\\ANTLR.g3:706:4: rr= RULE_REF
{
root_0 = (GrammarAST)adaptor.Nil();

-				rr=(IToken)Match(input,RULE_REF,Follow._RULE_REF_in_rewrite_atom3117); if (state.failed) return retval;
+				rr=(IToken)Match(input,RULE_REF,Follow._RULE_REF_in_rewrite_atom3040); if (state.failed) return retval;
if ( state.backtracking==0 ) {
rr_tree = (GrammarAST)adaptor.Create(rr);
adaptor.AddChild(root_0, rr_tree);
@@ -9000,12 +8857,12 @@ public partial class ANTLRParser : Parser
}
break;
case 3:
-				// Grammars\\ANTLR.g3:719:4: (cl= CHAR_LITERAL -> $cl) ( elementOptions[(GrammarAST)$tree.GetChild(0)] )?
+				// Grammars\\ANTLR.g3:707:4: (cl= CHAR_LITERAL -> $cl) ( elementOptions[(GrammarAST)$tree.GetChild(0)] )?
{
-				// Grammars\\ANTLR.g3:719:4: (cl= CHAR_LITERAL -> $cl)
-				// Grammars\\ANTLR.g3:719:6: cl= CHAR_LITERAL
+				// Grammars\\ANTLR.g3:707:4: (cl= CHAR_LITERAL -> $cl)
+				// Grammars\\ANTLR.g3:707:6: cl= CHAR_LITERAL
{
-				cl=(IToken)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_rewrite_atom3126); if (state.failed) return retval;
+				cl=(IToken)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_rewrite_atom3049); if (state.failed) return retval;
if ( state.backtracking == 0 ) stream_CHAR_LITERAL.Add(cl);


@@ -9024,7 +8881,7 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 720:4: -> $cl
+				// 708:4: -> $cl
{
adaptor.AddChild(root_0, stream_cl.NextNode());

@@ -9036,25 +8893,25 @@ public partial class ANTLRParser : Parser

}

-				// Grammars\\ANTLR.g3:722:3: ( elementOptions[(GrammarAST)$tree.GetChild(0)] )?
-				int alt89=2;
-				int LA89_0 = input.LA(1);
+				// Grammars\\ANTLR.g3:710:3: ( elementOptions[(GrammarAST)$tree.GetChild(0)] )?
+				int alt88=2;
+				int LA88_0 = input.LA(1);

-				if ( (LA89_0==OPEN_ELEMENT_OPTION) )
+				if ( (LA88_0==OPEN_ELEMENT_OPTION) )
{
-					alt89=1;
+					alt88=1;
}
-				switch ( alt89 )
+				switch ( alt88 )
{
case 1:
-					// Grammars\\ANTLR.g3:722:4: elementOptions[(GrammarAST)$tree.GetChild(0)]
+					// Grammars\\ANTLR.g3:710:4: elementOptions[(GrammarAST)$tree.GetChild(0)]
{
-					PushFollow(Follow._elementOptions_in_rewrite_atom3143);
-					elementOptions171=elementOptions((GrammarAST)((GrammarAST)retval.tree).GetChild(0));
+					PushFollow(Follow._elementOptions_in_rewrite_atom3066);
+					elementOptions173=elementOptions((GrammarAST)((GrammarAST)retval.tree).GetChild(0));

state._fsp--;
if (state.failed) return retval;
-					if ( state.backtracking == 0 ) stream_elementOptions.Add(elementOptions171.Tree);
+					if ( state.backtracking == 0 ) stream_elementOptions.Add(elementOptions173.Tree);

}
break;
@@ -9065,12 +8922,12 @@ public partial class ANTLRParser : Parser
}
break;
case 4:
-				// Grammars\\ANTLR.g3:723:4: (sl= STRING_LITERAL -> $sl) (eo= elementOptions[(GrammarAST)$tree.GetChild(0)] )?
+				// Grammars\\ANTLR.g3:711:4: (sl= STRING_LITERAL -> $sl) (eo= elementOptions[(GrammarAST)$tree.GetChild(0)] )?
{
-				// Grammars\\ANTLR.g3:723:4: (sl= STRING_LITERAL -> $sl)
-				// Grammars\\ANTLR.g3:723:6: sl= STRING_LITERAL
+				// Grammars\\ANTLR.g3:711:4: (sl= STRING_LITERAL -> $sl)
+				// Grammars\\ANTLR.g3:711:6: sl= STRING_LITERAL
{
-				sl=(IToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_rewrite_atom3155); if (state.failed) return retval;
+				sl=(IToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_rewrite_atom3078); if (state.failed) return retval;
if ( state.backtracking == 0 ) stream_STRING_LITERAL.Add(sl);


@@ -9089,7 +8946,7 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 724:4: -> $sl
+				// 712:4: -> $sl
{
adaptor.AddChild(root_0, stream_sl.NextNode());

@@ -9101,20 +8958,20 @@ public partial class ANTLRParser : Parser

}

-				// Grammars\\ANTLR.g3:726:3: (eo= elementOptions[(GrammarAST)$tree.GetChild(0)] )?
-				int alt90=2;
-				int LA90_0 = input.LA(1);
+				// Grammars\\ANTLR.g3:714:3: (eo= elementOptions[(GrammarAST)$tree.GetChild(0)] )?
+				int alt89=2;
+				int LA89_0 = input.LA(1);

-				if ( (LA90_0==OPEN_ELEMENT_OPTION) )
+				if ( (LA89_0==OPEN_ELEMENT_OPTION) )
{
-					alt90=1;
+					alt89=1;
}
-				switch ( alt90 )
+				switch ( alt89 )
{
case 1:
-					// Grammars\\ANTLR.g3:726:4: eo= elementOptions[(GrammarAST)$tree.GetChild(0)]
+					// Grammars\\ANTLR.g3:714:4: eo= elementOptions[(GrammarAST)$tree.GetChild(0)]
{
-					PushFollow(Follow._elementOptions_in_rewrite_atom3174);
+					PushFollow(Follow._elementOptions_in_rewrite_atom3097);
eo=elementOptions((GrammarAST)((GrammarAST)retval.tree).GetChild(0));

state._fsp--;
@@ -9130,12 +8987,12 @@ public partial class ANTLRParser : Parser
}
break;
case 5:
-				// Grammars\\ANTLR.g3:727:4: d= DOLLAR i= id
+				// Grammars\\ANTLR.g3:715:4: d= DOLLAR i= id
{
-				d=(IToken)Match(input,DOLLAR,Follow._DOLLAR_in_rewrite_atom3184); if (state.failed) return retval;
+				d=(IToken)Match(input,DOLLAR,Follow._DOLLAR_in_rewrite_atom3107); if (state.failed) return retval;
if ( state.backtracking == 0 ) stream_DOLLAR.Add(d);

-				PushFollow(Follow._id_in_rewrite_atom3188);
+				PushFollow(Follow._id_in_rewrite_atom3111);
i=id();

state._fsp--;
@@ -9156,7 +9013,7 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 728:3: -> LABEL[$i.start,$i.text]
+				// 716:3: -> LABEL[$i.start,$i.text]
{
adaptor.AddChild(root_0, (GrammarAST)adaptor.Create(LABEL, (i!=null?((IToken)i.start):null), (i!=null?input.ToString(i.start,i.stop):null)));

@@ -9169,14 +9026,14 @@ public partial class ANTLRParser : Parser
}
break;
case 6:
-				// Grammars\\ANTLR.g3:729:4: ACTION
+				// Grammars\\ANTLR.g3:717:4: ACTION
{
root_0 = (GrammarAST)adaptor.Nil();

-				ACTION172=(IToken)Match(input,ACTION,Follow._ACTION_in_rewrite_atom3201); if (state.failed) return retval;
+				ACTION174=(IToken)Match(input,ACTION,Follow._ACTION_in_rewrite_atom3124); if (state.failed) return retval;
if ( state.backtracking==0 ) {
-				ACTION172_tree = (GrammarAST)adaptor.Create(ACTION172);
-				adaptor.AddChild(root_0, ACTION172_tree);
+				ACTION174_tree = (GrammarAST)adaptor.Create(ACTION174);
+				adaptor.AddChild(root_0, ACTION174_tree);
}

}
@@ -9212,7 +9069,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "rewrite_ebnf"
-	// Grammars\\ANTLR.g3:732:0: rewrite_ebnf : b= rewrite_block ( QUESTION -> ^( OPTIONAL[$b.start,\"?\"] $b) | STAR -> ^( CLOSURE[$b.start,\"*\"] $b) | PLUS -> ^( POSITIVE_CLOSURE[$b.start,\"+\"] $b) ) ;
+	// Grammars\\ANTLR.g3:720:0: rewrite_ebnf : b= rewrite_block ( QUESTION -> ^( OPTIONAL[$b.start,\"?\"] $b) | STAR -> ^( CLOSURE[$b.start,\"*\"] $b) | PLUS -> ^( POSITIVE_CLOSURE[$b.start,\"+\"] $b) ) ;
private ANTLRParser.rewrite_ebnf_return rewrite_ebnf(  )
{
ANTLRParser.rewrite_ebnf_return retval = new ANTLRParser.rewrite_ebnf_return();
@@ -9220,64 +9077,64 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken QUESTION173=null;
-		IToken STAR174=null;
-		IToken PLUS175=null;
+		IToken QUESTION175=null;
+		IToken STAR176=null;
+		IToken PLUS177=null;
ANTLRParser.rewrite_block_return b = default(ANTLRParser.rewrite_block_return);

-		GrammarAST QUESTION173_tree=null;
-		GrammarAST STAR174_tree=null;
-		GrammarAST PLUS175_tree=null;
+		GrammarAST QUESTION175_tree=null;
+		GrammarAST STAR176_tree=null;
+		GrammarAST PLUS177_tree=null;
RewriteRuleITokenStream stream_QUESTION=new RewriteRuleITokenStream(adaptor,"token QUESTION");
RewriteRuleITokenStream stream_STAR=new RewriteRuleITokenStream(adaptor,"token STAR");
RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
RewriteRuleSubtreeStream stream_rewrite_block=new RewriteRuleSubtreeStream(adaptor,"rule rewrite_block");
try
{
-			// Grammars\\ANTLR.g3:733:4: (b= rewrite_block ( QUESTION -> ^( OPTIONAL[$b.start,\"?\"] $b) | STAR -> ^( CLOSURE[$b.start,\"*\"] $b) | PLUS -> ^( POSITIVE_CLOSURE[$b.start,\"+\"] $b) ) )
-			// Grammars\\ANTLR.g3:733:4: b= rewrite_block ( QUESTION -> ^( OPTIONAL[$b.start,\"?\"] $b) | STAR -> ^( CLOSURE[$b.start,\"*\"] $b) | PLUS -> ^( POSITIVE_CLOSURE[$b.start,\"+\"] $b) )
+			// Grammars\\ANTLR.g3:721:4: (b= rewrite_block ( QUESTION -> ^( OPTIONAL[$b.start,\"?\"] $b) | STAR -> ^( CLOSURE[$b.start,\"*\"] $b) | PLUS -> ^( POSITIVE_CLOSURE[$b.start,\"+\"] $b) ) )
+			// Grammars\\ANTLR.g3:721:4: b= rewrite_block ( QUESTION -> ^( OPTIONAL[$b.start,\"?\"] $b) | STAR -> ^( CLOSURE[$b.start,\"*\"] $b) | PLUS -> ^( POSITIVE_CLOSURE[$b.start,\"+\"] $b) )
{
-			PushFollow(Follow._rewrite_block_in_rewrite_ebnf3214);
+			PushFollow(Follow._rewrite_block_in_rewrite_ebnf3137);
b=rewrite_block();

state._fsp--;
if (state.failed) return retval;
if ( state.backtracking == 0 ) stream_rewrite_block.Add(b.Tree);
-			// Grammars\\ANTLR.g3:734:3: ( QUESTION -> ^( OPTIONAL[$b.start,\"?\"] $b) | STAR -> ^( CLOSURE[$b.start,\"*\"] $b) | PLUS -> ^( POSITIVE_CLOSURE[$b.start,\"+\"] $b) )
-			int alt92=3;
+			// Grammars\\ANTLR.g3:722:3: ( QUESTION -> ^( OPTIONAL[$b.start,\"?\"] $b) | STAR -> ^( CLOSURE[$b.start,\"*\"] $b) | PLUS -> ^( POSITIVE_CLOSURE[$b.start,\"+\"] $b) )
+			int alt91=3;
switch ( input.LA(1) )
{
case QUESTION:
{
-				alt92=1;
+				alt91=1;
}
break;
case STAR:
{
-				alt92=2;
+				alt91=2;
}
break;
case PLUS:
{
-				alt92=3;
+				alt91=3;
}
break;
default:
{
if (state.backtracking>0) {state.failed=true; return retval;}
-					NoViableAltException nvae = new NoViableAltException("", 92, 0, input);
+					NoViableAltException nvae = new NoViableAltException("", 91, 0, input);

throw nvae;
}
}

-			switch ( alt92 )
+			switch ( alt91 )
{
case 1:
-				// Grammars\\ANTLR.g3:734:5: QUESTION
+				// Grammars\\ANTLR.g3:722:5: QUESTION
{
-				QUESTION173=(IToken)Match(input,QUESTION,Follow._QUESTION_in_rewrite_ebnf3220); if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_QUESTION.Add(QUESTION173);
+				QUESTION175=(IToken)Match(input,QUESTION,Follow._QUESTION_in_rewrite_ebnf3143); if (state.failed) return retval;
+				if ( state.backtracking == 0 ) stream_QUESTION.Add(QUESTION175);



@@ -9295,9 +9152,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 735:4: -> ^( OPTIONAL[$b.start,\"?\"] $b)
+				// 723:4: -> ^( OPTIONAL[$b.start,\"?\"] $b)
{
-					// Grammars\\ANTLR.g3:735:7: ^( OPTIONAL[$b.start,\"?\"] $b)
+					// Grammars\\ANTLR.g3:723:7: ^( OPTIONAL[$b.start,\"?\"] $b)
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(OPTIONAL, (b!=null?((IToken)b.start):null), "?"), root_1);
@@ -9316,10 +9173,10 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-				// Grammars\\ANTLR.g3:736:5: STAR
+				// Grammars\\ANTLR.g3:724:5: STAR
{
-				STAR174=(IToken)Match(input,STAR,Follow._STAR_in_rewrite_ebnf3239); if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_STAR.Add(STAR174);
+				STAR176=(IToken)Match(input,STAR,Follow._STAR_in_rewrite_ebnf3162); if (state.failed) return retval;
+				if ( state.backtracking == 0 ) stream_STAR.Add(STAR176);



@@ -9337,9 +9194,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 737:4: -> ^( CLOSURE[$b.start,\"*\"] $b)
+				// 725:4: -> ^( CLOSURE[$b.start,\"*\"] $b)
{
-					// Grammars\\ANTLR.g3:737:7: ^( CLOSURE[$b.start,\"*\"] $b)
+					// Grammars\\ANTLR.g3:725:7: ^( CLOSURE[$b.start,\"*\"] $b)
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(CLOSURE, (b!=null?((IToken)b.start):null), "*"), root_1);
@@ -9358,10 +9215,10 @@ public partial class ANTLRParser : Parser
}
break;
case 3:
-				// Grammars\\ANTLR.g3:738:5: PLUS
+				// Grammars\\ANTLR.g3:726:5: PLUS
{
-				PLUS175=(IToken)Match(input,PLUS,Follow._PLUS_in_rewrite_ebnf3258); if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_PLUS.Add(PLUS175);
+				PLUS177=(IToken)Match(input,PLUS,Follow._PLUS_in_rewrite_ebnf3181); if (state.failed) return retval;
+				if ( state.backtracking == 0 ) stream_PLUS.Add(PLUS177);



@@ -9379,9 +9236,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 739:4: -> ^( POSITIVE_CLOSURE[$b.start,\"+\"] $b)
+				// 727:4: -> ^( POSITIVE_CLOSURE[$b.start,\"+\"] $b)
{
-					// Grammars\\ANTLR.g3:739:7: ^( POSITIVE_CLOSURE[$b.start,\"+\"] $b)
+					// Grammars\\ANTLR.g3:727:7: ^( POSITIVE_CLOSURE[$b.start,\"+\"] $b)
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(POSITIVE_CLOSURE, (b!=null?((IToken)b.start):null), "+"), root_1);
@@ -9434,7 +9291,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "rewrite_tree"
-	// Grammars\\ANTLR.g3:743:0: rewrite_tree : TREE_BEGIN rewrite_atom ( rewrite_element )* RPAREN ;
+	// Grammars\\ANTLR.g3:731:0: rewrite_tree : TREE_BEGIN rewrite_atom ( rewrite_element )* RPAREN ;
private ANTLRParser.rewrite_tree_return rewrite_tree(  )
{
ANTLRParser.rewrite_tree_return retval = new ANTLRParser.rewrite_tree_return();
@@ -9442,69 +9299,69 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken TREE_BEGIN176=null;
-		IToken RPAREN179=null;
-		ANTLRParser.rewrite_atom_return rewrite_atom177 = default(ANTLRParser.rewrite_atom_return);
-		ANTLRParser.rewrite_element_return rewrite_element178 = default(ANTLRParser.rewrite_element_return);
+		IToken TREE_BEGIN178=null;
+		IToken RPAREN181=null;
+		ANTLRParser.rewrite_atom_return rewrite_atom179 = default(ANTLRParser.rewrite_atom_return);
+		ANTLRParser.rewrite_element_return rewrite_element180 = default(ANTLRParser.rewrite_element_return);

-		GrammarAST TREE_BEGIN176_tree=null;
-		GrammarAST RPAREN179_tree=null;
+		GrammarAST TREE_BEGIN178_tree=null;
+		GrammarAST RPAREN181_tree=null;

try
{
-			// Grammars\\ANTLR.g3:744:4: ( TREE_BEGIN rewrite_atom ( rewrite_element )* RPAREN )
-			// Grammars\\ANTLR.g3:744:4: TREE_BEGIN rewrite_atom ( rewrite_element )* RPAREN
+			// Grammars\\ANTLR.g3:732:4: ( TREE_BEGIN rewrite_atom ( rewrite_element )* RPAREN )
+			// Grammars\\ANTLR.g3:732:4: TREE_BEGIN rewrite_atom ( rewrite_element )* RPAREN
{
root_0 = (GrammarAST)adaptor.Nil();

-			TREE_BEGIN176=(IToken)Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_rewrite_tree3286); if (state.failed) return retval;
+			TREE_BEGIN178=(IToken)Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_rewrite_tree3209); if (state.failed) return retval;
if ( state.backtracking == 0 ) {
-			TREE_BEGIN176_tree = (GrammarAST)adaptor.Create(TREE_BEGIN176);
-			root_0 = (GrammarAST)adaptor.BecomeRoot(TREE_BEGIN176_tree, root_0);
+			TREE_BEGIN178_tree = (GrammarAST)adaptor.Create(TREE_BEGIN178);
+			root_0 = (GrammarAST)adaptor.BecomeRoot(TREE_BEGIN178_tree, root_0);
}
-			PushFollow(Follow._rewrite_atom_in_rewrite_tree3292);
-			rewrite_atom177=rewrite_atom();
+			PushFollow(Follow._rewrite_atom_in_rewrite_tree3215);
+			rewrite_atom179=rewrite_atom();

state._fsp--;
if (state.failed) return retval;
-			if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rewrite_atom177.Tree);
-			// Grammars\\ANTLR.g3:745:17: ( rewrite_element )*
+			if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rewrite_atom179.Tree);
+			// Grammars\\ANTLR.g3:733:17: ( rewrite_element )*
for ( ; ; )
{
-				int alt93=2;
-				int LA93_0 = input.LA(1);
+				int alt92=2;
+				int LA92_0 = input.LA(1);

-				if ( (LA93_0==ACTION||LA93_0==CHAR_LITERAL||LA93_0==DOLLAR||LA93_0==LPAREN||LA93_0==RULE_REF||LA93_0==STRING_LITERAL||LA93_0==TOKEN_REF||LA93_0==TREE_BEGIN) )
+				if ( (LA92_0==ACTION||LA92_0==CHAR_LITERAL||LA92_0==DOLLAR||LA92_0==LPAREN||LA92_0==RULE_REF||LA92_0==STRING_LITERAL||LA92_0==TOKEN_REF||LA92_0==TREE_BEGIN) )
{
-					alt93=1;
+					alt92=1;
}


-				switch ( alt93 )
+				switch ( alt92 )
{
case 1:
-					// Grammars\\ANTLR.g3:745:19: rewrite_element
+					// Grammars\\ANTLR.g3:733:0: rewrite_element
{
-					PushFollow(Follow._rewrite_element_in_rewrite_tree3296);
-					rewrite_element178=rewrite_element();
+					PushFollow(Follow._rewrite_element_in_rewrite_tree3217);
+					rewrite_element180=rewrite_element();

state._fsp--;
if (state.failed) return retval;
-					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rewrite_element178.Tree);
+					if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rewrite_element180.Tree);

}
break;

default:
-					goto loop93;
+					goto loop92;
}
}

-			loop93:
+			loop92:
;


-			RPAREN179=(IToken)Match(input,RPAREN,Follow._RPAREN_in_rewrite_tree3303); if (state.failed) return retval;
+			RPAREN181=(IToken)Match(input,RPAREN,Follow._RPAREN_in_rewrite_tree3222); if (state.failed) return retval;

}

@@ -9537,7 +9394,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "rewrite_template"
-	// Grammars\\ANTLR.g3:761:0: public rewrite_template options {k=1; } : ({...}? => ( rewrite_template_head -> rewrite_template_head ) (st= DOUBLE_QUOTE_STRING_LITERAL |st= DOUBLE_ANGLE_STRING_LITERAL ) | rewrite_template_head | rewrite_indirect_template_head | ACTION );
+	// Grammars\\ANTLR.g3:749:0: public rewrite_template options {k=1; } : ({...}? => ( rewrite_template_head -> rewrite_template_head ) (st= DOUBLE_QUOTE_STRING_LITERAL |st= DOUBLE_ANGLE_STRING_LITERAL ) | rewrite_template_head | rewrite_indirect_template_head | ACTION );
public ANTLRParser.rewrite_template_return rewrite_template(  )
{
ANTLRParser.rewrite_template_return retval = new ANTLRParser.rewrite_template_return();
@@ -9546,38 +9403,38 @@ public partial class ANTLRParser : Parser
GrammarAST root_0 = null;

IToken st=null;
-		IToken ACTION183=null;
-		ANTLRParser.rewrite_template_head_return rewrite_template_head180 = default(ANTLRParser.rewrite_template_head_return);
-		ANTLRParser.rewrite_template_head_return rewrite_template_head181 = default(ANTLRParser.rewrite_template_head_return);
-		ANTLRParser.rewrite_indirect_template_head_return rewrite_indirect_template_head182 = default(ANTLRParser.rewrite_indirect_template_head_return);
+		IToken ACTION185=null;
+		ANTLRParser.rewrite_template_head_return rewrite_template_head182 = default(ANTLRParser.rewrite_template_head_return);
+		ANTLRParser.rewrite_template_head_return rewrite_template_head183 = default(ANTLRParser.rewrite_template_head_return);
+		ANTLRParser.rewrite_indirect_template_head_return rewrite_indirect_template_head184 = default(ANTLRParser.rewrite_indirect_template_head_return);

GrammarAST st_tree=null;
-		GrammarAST ACTION183_tree=null;
+		GrammarAST ACTION185_tree=null;
RewriteRuleITokenStream stream_DOUBLE_QUOTE_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token DOUBLE_QUOTE_STRING_LITERAL");
RewriteRuleITokenStream stream_DOUBLE_ANGLE_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token DOUBLE_ANGLE_STRING_LITERAL");
RewriteRuleSubtreeStream stream_rewrite_template_head=new RewriteRuleSubtreeStream(adaptor,"rule rewrite_template_head");
try
{
-			// Grammars\\ANTLR.g3:764:3: ({...}? => ( rewrite_template_head -> rewrite_template_head ) (st= DOUBLE_QUOTE_STRING_LITERAL |st= DOUBLE_ANGLE_STRING_LITERAL ) | rewrite_template_head | rewrite_indirect_template_head | ACTION )
-			int alt95=4;
+			// Grammars\\ANTLR.g3:752:3: ({...}? => ( rewrite_template_head -> rewrite_template_head ) (st= DOUBLE_QUOTE_STRING_LITERAL |st= DOUBLE_ANGLE_STRING_LITERAL ) | rewrite_template_head | rewrite_indirect_template_head | ACTION )
+			int alt94=4;
switch ( input.LA(1) )
{
case TOKEN_REF:
{
-				int LA95_1 = input.LA(2);
+				int LA94_1 = input.LA(2);

if ( ((LT(1).Text.Equals("template"))) )
{
-					alt95=1;
+					alt94=1;
}
else if ( (true) )
{
-					alt95=2;
+					alt94=2;
}
else
{
if (state.backtracking>0) {state.failed=true; return retval;}
-					NoViableAltException nvae = new NoViableAltException("", 95, 1, input);
+					NoViableAltException nvae = new NoViableAltException("", 94, 1, input);

throw nvae;
}
@@ -9585,20 +9442,20 @@ public partial class ANTLRParser : Parser
break;
case RULE_REF:
{
-				int LA95_2 = input.LA(2);
+				int LA94_2 = input.LA(2);

if ( ((LT(1).Text.Equals("template"))) )
{
-					alt95=1;
+					alt94=1;
}
else if ( (true) )
{
-					alt95=2;
+					alt94=2;
}
else
{
if (state.backtracking>0) {state.failed=true; return retval;}
-					NoViableAltException nvae = new NoViableAltException("", 95, 2, input);
+					NoViableAltException nvae = new NoViableAltException("", 94, 2, input);

throw nvae;
}
@@ -9606,42 +9463,42 @@ public partial class ANTLRParser : Parser
break;
case LPAREN:
{
-				alt95=3;
+				alt94=3;
}
break;
case ACTION:
{
-				alt95=4;
+				alt94=4;
}
break;
default:
{
if (state.backtracking>0) {state.failed=true; return retval;}
-					NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
+					NoViableAltException nvae = new NoViableAltException("", 94, 0, input);

throw nvae;
}
}

-			switch ( alt95 )
+			switch ( alt94 )
{
case 1:
-				// Grammars\\ANTLR.g3:764:3: {...}? => ( rewrite_template_head -> rewrite_template_head ) (st= DOUBLE_QUOTE_STRING_LITERAL |st= DOUBLE_ANGLE_STRING_LITERAL )
+				// Grammars\\ANTLR.g3:752:3: {...}? => ( rewrite_template_head -> rewrite_template_head ) (st= DOUBLE_QUOTE_STRING_LITERAL |st= DOUBLE_ANGLE_STRING_LITERAL )
{
if ( !((LT(1).Text.Equals("template"))) )
{
if (state.backtracking>0) {state.failed=true; return retval;}
throw new FailedPredicateException(input, "rewrite_template", "LT(1).Text.Equals(\"template\")");
}
-				// Grammars\\ANTLR.g3:765:3: ( rewrite_template_head -> rewrite_template_head )
-				// Grammars\\ANTLR.g3:765:5: rewrite_template_head
+				// Grammars\\ANTLR.g3:753:3: ( rewrite_template_head -> rewrite_template_head )
+				// Grammars\\ANTLR.g3:753:5: rewrite_template_head
{
-				PushFollow(Follow._rewrite_template_head_in_rewrite_template3338);
-				rewrite_template_head180=rewrite_template_head();
+				PushFollow(Follow._rewrite_template_head_in_rewrite_template3257);
+				rewrite_template_head182=rewrite_template_head();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_rewrite_template_head.Add(rewrite_template_head180.Tree);
+				if ( state.backtracking == 0 ) stream_rewrite_template_head.Add(rewrite_template_head182.Tree);


{
@@ -9657,7 +9514,7 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 766:4: -> rewrite_template_head
+				// 754:4: -> rewrite_template_head
{
adaptor.AddChild(root_0, stream_rewrite_template_head.NextTree());

@@ -9669,40 +9526,40 @@ public partial class ANTLRParser : Parser

}

-				// Grammars\\ANTLR.g3:768:3: (st= DOUBLE_QUOTE_STRING_LITERAL |st= DOUBLE_ANGLE_STRING_LITERAL )
-				int alt94=2;
-				int LA94_0 = input.LA(1);
+				// Grammars\\ANTLR.g3:756:3: (st= DOUBLE_QUOTE_STRING_LITERAL |st= DOUBLE_ANGLE_STRING_LITERAL )
+				int alt93=2;
+				int LA93_0 = input.LA(1);

-				if ( (LA94_0==DOUBLE_QUOTE_STRING_LITERAL) )
+				if ( (LA93_0==DOUBLE_QUOTE_STRING_LITERAL) )
{
-					alt94=1;
+					alt93=1;
}
-				else if ( (LA94_0==DOUBLE_ANGLE_STRING_LITERAL) )
+				else if ( (LA93_0==DOUBLE_ANGLE_STRING_LITERAL) )
{
-					alt94=2;
+					alt93=2;
}
else
{
if (state.backtracking>0) {state.failed=true; return retval;}
-					NoViableAltException nvae = new NoViableAltException("", 94, 0, input);
+					NoViableAltException nvae = new NoViableAltException("", 93, 0, input);

throw nvae;
}
-				switch ( alt94 )
+				switch ( alt93 )
{
case 1:
-					// Grammars\\ANTLR.g3:768:5: st= DOUBLE_QUOTE_STRING_LITERAL
+					// Grammars\\ANTLR.g3:756:5: st= DOUBLE_QUOTE_STRING_LITERAL
{
-					st=(IToken)Match(input,DOUBLE_QUOTE_STRING_LITERAL,Follow._DOUBLE_QUOTE_STRING_LITERAL_in_rewrite_template3357); if (state.failed) return retval;
+					st=(IToken)Match(input,DOUBLE_QUOTE_STRING_LITERAL,Follow._DOUBLE_QUOTE_STRING_LITERAL_in_rewrite_template3276); if (state.failed) return retval;
if ( state.backtracking == 0 ) stream_DOUBLE_QUOTE_STRING_LITERAL.Add(st);


}
break;
case 2:
-					// Grammars\\ANTLR.g3:768:38: st= DOUBLE_ANGLE_STRING_LITERAL
+					// Grammars\\ANTLR.g3:756:38: st= DOUBLE_ANGLE_STRING_LITERAL
{
-					st=(IToken)Match(input,DOUBLE_ANGLE_STRING_LITERAL,Follow._DOUBLE_ANGLE_STRING_LITERAL_in_rewrite_template3363); if (state.failed) return retval;
+					st=(IToken)Match(input,DOUBLE_ANGLE_STRING_LITERAL,Follow._DOUBLE_ANGLE_STRING_LITERAL_in_rewrite_template3282); if (state.failed) return retval;
if ( state.backtracking == 0 ) stream_DOUBLE_ANGLE_STRING_LITERAL.Add(st);


@@ -9719,42 +9576,42 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-				// Grammars\\ANTLR.g3:772:3: rewrite_template_head
+				// Grammars\\ANTLR.g3:760:3: rewrite_template_head
{
root_0 = (GrammarAST)adaptor.Nil();

-				PushFollow(Follow._rewrite_template_head_in_rewrite_template3378);
-				rewrite_template_head181=rewrite_template_head();
+				PushFollow(Follow._rewrite_template_head_in_rewrite_template3297);
+				rewrite_template_head183=rewrite_template_head();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rewrite_template_head181.Tree);
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rewrite_template_head183.Tree);

}
break;
case 3:
-				// Grammars\\ANTLR.g3:775:3: rewrite_indirect_template_head
+				// Grammars\\ANTLR.g3:763:3: rewrite_indirect_template_head
{
root_0 = (GrammarAST)adaptor.Nil();

-				PushFollow(Follow._rewrite_indirect_template_head_in_rewrite_template3387);
-				rewrite_indirect_template_head182=rewrite_indirect_template_head();
+				PushFollow(Follow._rewrite_indirect_template_head_in_rewrite_template3306);
+				rewrite_indirect_template_head184=rewrite_indirect_template_head();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rewrite_indirect_template_head182.Tree);
+				if ( state.backtracking == 0 ) adaptor.AddChild(root_0, rewrite_indirect_template_head184.Tree);

}
break;
case 4:
-				// Grammars\\ANTLR.g3:778:3: ACTION
+				// Grammars\\ANTLR.g3:766:3: ACTION
{
root_0 = (GrammarAST)adaptor.Nil();

-				ACTION183=(IToken)Match(input,ACTION,Follow._ACTION_in_rewrite_template3396); if (state.failed) return retval;
+				ACTION185=(IToken)Match(input,ACTION,Follow._ACTION_in_rewrite_template3315); if (state.failed) return retval;
if ( state.backtracking==0 ) {
-				ACTION183_tree = (GrammarAST)adaptor.Create(ACTION183);
-				adaptor.AddChild(root_0, ACTION183_tree);
+				ACTION185_tree = (GrammarAST)adaptor.Create(ACTION185);
+				adaptor.AddChild(root_0, ACTION185_tree);
}

}
@@ -9790,7 +9647,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "rewrite_template_head"
-	// Grammars\\ANTLR.g3:782:0: rewrite_template_head : id lp= LPAREN rewrite_template_args RPAREN -> ^( TEMPLATE[$lp,\"TEMPLATE\"] id rewrite_template_args ) ;
+	// Grammars\\ANTLR.g3:770:0: rewrite_template_head : id lp= LPAREN rewrite_template_args RPAREN -> ^( TEMPLATE[$lp,\"TEMPLATE\"] id rewrite_template_args ) ;
private ANTLRParser.rewrite_template_head_return rewrite_template_head(  )
{
ANTLRParser.rewrite_template_head_return retval = new ANTLRParser.rewrite_template_head_return();
@@ -9799,38 +9656,38 @@ public partial class ANTLRParser : Parser
GrammarAST root_0 = null;

IToken lp=null;
-		IToken RPAREN186=null;
-		ANTLRParser.id_return id184 = default(ANTLRParser.id_return);
-		ANTLRParser.rewrite_template_args_return rewrite_template_args185 = default(ANTLRParser.rewrite_template_args_return);
+		IToken RPAREN188=null;
+		ANTLRParser.id_return id186 = default(ANTLRParser.id_return);
+		ANTLRParser.rewrite_template_args_return rewrite_template_args187 = default(ANTLRParser.rewrite_template_args_return);

GrammarAST lp_tree=null;
-		GrammarAST RPAREN186_tree=null;
+		GrammarAST RPAREN188_tree=null;
RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id");
RewriteRuleSubtreeStream stream_rewrite_template_args=new RewriteRuleSubtreeStream(adaptor,"rule rewrite_template_args");
try
{
-			// Grammars\\ANTLR.g3:783:4: ( id lp= LPAREN rewrite_template_args RPAREN -> ^( TEMPLATE[$lp,\"TEMPLATE\"] id rewrite_template_args ) )
-			// Grammars\\ANTLR.g3:783:4: id lp= LPAREN rewrite_template_args RPAREN
+			// Grammars\\ANTLR.g3:771:4: ( id lp= LPAREN rewrite_template_args RPAREN -> ^( TEMPLATE[$lp,\"TEMPLATE\"] id rewrite_template_args ) )
+			// Grammars\\ANTLR.g3:771:4: id lp= LPAREN rewrite_template_args RPAREN
{
-			PushFollow(Follow._id_in_rewrite_template_head3409);
-			id184=id();
+			PushFollow(Follow._id_in_rewrite_template_head3328);
+			id186=id();

state._fsp--;
if (state.failed) return retval;
-			if ( state.backtracking == 0 ) stream_id.Add(id184.Tree);
-			lp=(IToken)Match(input,LPAREN,Follow._LPAREN_in_rewrite_template_head3413); if (state.failed) return retval;
+			if ( state.backtracking == 0 ) stream_id.Add(id186.Tree);
+			lp=(IToken)Match(input,LPAREN,Follow._LPAREN_in_rewrite_template_head3332); if (state.failed) return retval;
if ( state.backtracking == 0 ) stream_LPAREN.Add(lp);

-			PushFollow(Follow._rewrite_template_args_in_rewrite_template_head3417);
-			rewrite_template_args185=rewrite_template_args();
+			PushFollow(Follow._rewrite_template_args_in_rewrite_template_head3336);
+			rewrite_template_args187=rewrite_template_args();

state._fsp--;
if (state.failed) return retval;
-			if ( state.backtracking == 0 ) stream_rewrite_template_args.Add(rewrite_template_args185.Tree);
-			RPAREN186=(IToken)Match(input,RPAREN,Follow._RPAREN_in_rewrite_template_head3421); if (state.failed) return retval;
-			if ( state.backtracking == 0 ) stream_RPAREN.Add(RPAREN186);
+			if ( state.backtracking == 0 ) stream_rewrite_template_args.Add(rewrite_template_args187.Tree);
+			RPAREN188=(IToken)Match(input,RPAREN,Follow._RPAREN_in_rewrite_template_head3340); if (state.failed) return retval;
+			if ( state.backtracking == 0 ) stream_RPAREN.Add(RPAREN188);



@@ -9847,9 +9704,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-			// 786:3: -> ^( TEMPLATE[$lp,\"TEMPLATE\"] id rewrite_template_args )
+			// 774:3: -> ^( TEMPLATE[$lp,\"TEMPLATE\"] id rewrite_template_args )
{
-				// Grammars\\ANTLR.g3:786:6: ^( TEMPLATE[$lp,\"TEMPLATE\"] id rewrite_template_args )
+				// Grammars\\ANTLR.g3:774:6: ^( TEMPLATE[$lp,\"TEMPLATE\"] id rewrite_template_args )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(TEMPLATE, lp, "TEMPLATE"), root_1);
@@ -9897,7 +9754,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "rewrite_indirect_template_head"
-	// Grammars\\ANTLR.g3:790:0: rewrite_indirect_template_head : lp= LPAREN ACTION RPAREN LPAREN rewrite_template_args RPAREN -> ^( TEMPLATE[$lp,\"TEMPLATE\"] ACTION rewrite_template_args ) ;
+	// Grammars\\ANTLR.g3:778:0: rewrite_indirect_template_head : lp= LPAREN ACTION RPAREN LPAREN rewrite_template_args RPAREN -> ^( TEMPLATE[$lp,\"TEMPLATE\"] ACTION rewrite_template_args ) ;
private ANTLRParser.rewrite_indirect_template_head_return rewrite_indirect_template_head(  )
{
ANTLRParser.rewrite_indirect_template_head_return retval = new ANTLRParser.rewrite_indirect_template_head_return();
@@ -9906,46 +9763,46 @@ public partial class ANTLRParser : Parser
GrammarAST root_0 = null;

IToken lp=null;
-		IToken ACTION187=null;
-		IToken RPAREN188=null;
-		IToken LPAREN189=null;
-		IToken RPAREN191=null;
-		ANTLRParser.rewrite_template_args_return rewrite_template_args190 = default(ANTLRParser.rewrite_template_args_return);
+		IToken ACTION189=null;
+		IToken RPAREN190=null;
+		IToken LPAREN191=null;
+		IToken RPAREN193=null;
+		ANTLRParser.rewrite_template_args_return rewrite_template_args192 = default(ANTLRParser.rewrite_template_args_return);

GrammarAST lp_tree=null;
-		GrammarAST ACTION187_tree=null;
-		GrammarAST RPAREN188_tree=null;
-		GrammarAST LPAREN189_tree=null;
-		GrammarAST RPAREN191_tree=null;
+		GrammarAST ACTION189_tree=null;
+		GrammarAST RPAREN190_tree=null;
+		GrammarAST LPAREN191_tree=null;
+		GrammarAST RPAREN193_tree=null;
RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
RewriteRuleITokenStream stream_ACTION=new RewriteRuleITokenStream(adaptor,"token ACTION");
RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
RewriteRuleSubtreeStream stream_rewrite_template_args=new RewriteRuleSubtreeStream(adaptor,"rule rewrite_template_args");
try
{
-			// Grammars\\ANTLR.g3:791:4: (lp= LPAREN ACTION RPAREN LPAREN rewrite_template_args RPAREN -> ^( TEMPLATE[$lp,\"TEMPLATE\"] ACTION rewrite_template_args ) )
-			// Grammars\\ANTLR.g3:791:4: lp= LPAREN ACTION RPAREN LPAREN rewrite_template_args RPAREN
+			// Grammars\\ANTLR.g3:779:4: (lp= LPAREN ACTION RPAREN LPAREN rewrite_template_args RPAREN -> ^( TEMPLATE[$lp,\"TEMPLATE\"] ACTION rewrite_template_args ) )
+			// Grammars\\ANTLR.g3:779:4: lp= LPAREN ACTION RPAREN LPAREN rewrite_template_args RPAREN
{
-			lp=(IToken)Match(input,LPAREN,Follow._LPAREN_in_rewrite_indirect_template_head3449); if (state.failed) return retval;
+			lp=(IToken)Match(input,LPAREN,Follow._LPAREN_in_rewrite_indirect_template_head3368); if (state.failed) return retval;
if ( state.backtracking == 0 ) stream_LPAREN.Add(lp);

-			ACTION187=(IToken)Match(input,ACTION,Follow._ACTION_in_rewrite_indirect_template_head3453); if (state.failed) return retval;
-			if ( state.backtracking == 0 ) stream_ACTION.Add(ACTION187);
+			ACTION189=(IToken)Match(input,ACTION,Follow._ACTION_in_rewrite_indirect_template_head3372); if (state.failed) return retval;
+			if ( state.backtracking == 0 ) stream_ACTION.Add(ACTION189);

-			RPAREN188=(IToken)Match(input,RPAREN,Follow._RPAREN_in_rewrite_indirect_template_head3457); if (state.failed) return retval;
-			if ( state.backtracking == 0 ) stream_RPAREN.Add(RPAREN188);
+			RPAREN190=(IToken)Match(input,RPAREN,Follow._RPAREN_in_rewrite_indirect_template_head3376); if (state.failed) return retval;
+			if ( state.backtracking == 0 ) stream_RPAREN.Add(RPAREN190);

-			LPAREN189=(IToken)Match(input,LPAREN,Follow._LPAREN_in_rewrite_indirect_template_head3461); if (state.failed) return retval;
-			if ( state.backtracking == 0 ) stream_LPAREN.Add(LPAREN189);
+			LPAREN191=(IToken)Match(input,LPAREN,Follow._LPAREN_in_rewrite_indirect_template_head3380); if (state.failed) return retval;
+			if ( state.backtracking == 0 ) stream_LPAREN.Add(LPAREN191);

-			PushFollow(Follow._rewrite_template_args_in_rewrite_indirect_template_head3463);
-			rewrite_template_args190=rewrite_template_args();
+			PushFollow(Follow._rewrite_template_args_in_rewrite_indirect_template_head3382);
+			rewrite_template_args192=rewrite_template_args();

state._fsp--;
if (state.failed) return retval;
-			if ( state.backtracking == 0 ) stream_rewrite_template_args.Add(rewrite_template_args190.Tree);
-			RPAREN191=(IToken)Match(input,RPAREN,Follow._RPAREN_in_rewrite_indirect_template_head3465); if (state.failed) return retval;
-			if ( state.backtracking == 0 ) stream_RPAREN.Add(RPAREN191);
+			if ( state.backtracking == 0 ) stream_rewrite_template_args.Add(rewrite_template_args192.Tree);
+			RPAREN193=(IToken)Match(input,RPAREN,Follow._RPAREN_in_rewrite_indirect_template_head3384); if (state.failed) return retval;
+			if ( state.backtracking == 0 ) stream_RPAREN.Add(RPAREN193);



@@ -9962,9 +9819,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-			// 795:3: -> ^( TEMPLATE[$lp,\"TEMPLATE\"] ACTION rewrite_template_args )
+			// 783:3: -> ^( TEMPLATE[$lp,\"TEMPLATE\"] ACTION rewrite_template_args )
{
-				// Grammars\\ANTLR.g3:795:6: ^( TEMPLATE[$lp,\"TEMPLATE\"] ACTION rewrite_template_args )
+				// Grammars\\ANTLR.g3:783:6: ^( TEMPLATE[$lp,\"TEMPLATE\"] ACTION rewrite_template_args )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(TEMPLATE, lp, "TEMPLATE"), root_1);
@@ -10012,7 +9869,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "rewrite_template_args"
-	// Grammars\\ANTLR.g3:798:0: rewrite_template_args : ( rewrite_template_arg ( COMMA rewrite_template_arg )* -> ^( ARGLIST[\"ARGLIST\"] ( rewrite_template_arg )+ ) | -> ARGLIST[\"ARGLIST\"] );
+	// Grammars\\ANTLR.g3:786:0: rewrite_template_args : ( rewrite_template_arg ( COMMA rewrite_template_arg )* -> ^( ARGLIST[\"ARGLIST\"] ( rewrite_template_arg )+ ) | -> ARGLIST[\"ARGLIST\"] );
private ANTLRParser.rewrite_template_args_return rewrite_template_args(  )
{
ANTLRParser.rewrite_template_args_return retval = new ANTLRParser.rewrite_template_args_return();
@@ -10020,81 +9877,81 @@ public partial class ANTLRParser : Parser

GrammarAST root_0 = null;

-		IToken COMMA193=null;
-		ANTLRParser.rewrite_template_arg_return rewrite_template_arg192 = default(ANTLRParser.rewrite_template_arg_return);
+		IToken COMMA195=null;
ANTLRParser.rewrite_template_arg_return rewrite_template_arg194 = default(ANTLRParser.rewrite_template_arg_return);
+		ANTLRParser.rewrite_template_arg_return rewrite_template_arg196 = default(ANTLRParser.rewrite_template_arg_return);

-		GrammarAST COMMA193_tree=null;
+		GrammarAST COMMA195_tree=null;
RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
RewriteRuleSubtreeStream stream_rewrite_template_arg=new RewriteRuleSubtreeStream(adaptor,"rule rewrite_template_arg");
try
{
-			// Grammars\\ANTLR.g3:799:4: ( rewrite_template_arg ( COMMA rewrite_template_arg )* -> ^( ARGLIST[\"ARGLIST\"] ( rewrite_template_arg )+ ) | -> ARGLIST[\"ARGLIST\"] )
-			int alt97=2;
-			int LA97_0 = input.LA(1);
+			// Grammars\\ANTLR.g3:787:4: ( rewrite_template_arg ( COMMA rewrite_template_arg )* -> ^( ARGLIST[\"ARGLIST\"] ( rewrite_template_arg )+ ) | -> ARGLIST[\"ARGLIST\"] )
+			int alt96=2;
+			int LA96_0 = input.LA(1);

-			if ( (LA97_0==RULE_REF||LA97_0==TOKEN_REF) )
+			if ( (LA96_0==RULE_REF||LA96_0==TOKEN_REF) )
{
-				alt97=1;
+				alt96=1;
}
-			else if ( (LA97_0==RPAREN) )
+			else if ( (LA96_0==RPAREN) )
{
-				alt97=2;
+				alt96=2;
}
else
{
if (state.backtracking>0) {state.failed=true; return retval;}
-				NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
+				NoViableAltException nvae = new NoViableAltException("", 96, 0, input);

throw nvae;
}
-			switch ( alt97 )
+			switch ( alt96 )
{
case 1:
-				// Grammars\\ANTLR.g3:799:4: rewrite_template_arg ( COMMA rewrite_template_arg )*
+				// Grammars\\ANTLR.g3:787:4: rewrite_template_arg ( COMMA rewrite_template_arg )*
{
-				PushFollow(Follow._rewrite_template_arg_in_rewrite_template_args3489);
-				rewrite_template_arg192=rewrite_template_arg();
+				PushFollow(Follow._rewrite_template_arg_in_rewrite_template_args3408);
+				rewrite_template_arg194=rewrite_template_arg();

state._fsp--;
if (state.failed) return retval;
-				if ( state.backtracking == 0 ) stream_rewrite_template_arg.Add(rewrite_template_arg192.Tree);
-				// Grammars\\ANTLR.g3:799:25: ( COMMA rewrite_template_arg )*
+				if ( state.backtracking == 0 ) stream_rewrite_template_arg.Add(rewrite_template_arg194.Tree);
+				// Grammars\\ANTLR.g3:787:25: ( COMMA rewrite_template_arg )*
for ( ; ; )
{
-					int alt96=2;
-					int LA96_0 = input.LA(1);
+					int alt95=2;
+					int LA95_0 = input.LA(1);

-					if ( (LA96_0==COMMA) )
+					if ( (LA95_0==COMMA) )
{
-						alt96=1;
+						alt95=1;
}


-					switch ( alt96 )
+					switch ( alt95 )
{
case 1:
-						// Grammars\\ANTLR.g3:799:26: COMMA rewrite_template_arg
+						// Grammars\\ANTLR.g3:787:26: COMMA rewrite_template_arg
{
-						COMMA193=(IToken)Match(input,COMMA,Follow._COMMA_in_rewrite_template_args3492); if (state.failed) return retval;
-						if ( state.backtracking == 0 ) stream_COMMA.Add(COMMA193);
+						COMMA195=(IToken)Match(input,COMMA,Follow._COMMA_in_rewrite_template_args3411); if (state.failed) return retval;
+						if ( state.backtracking == 0 ) stream_COMMA.Add(COMMA195);

-						PushFollow(Follow._rewrite_template_arg_in_rewrite_template_args3494);
-						rewrite_template_arg194=rewrite_template_arg();
+						PushFollow(Follow._rewrite_template_arg_in_rewrite_template_args3413);
+						rewrite_template_arg196=rewrite_template_arg();

state._fsp--;
if (state.failed) return retval;
-						if ( state.backtracking == 0 ) stream_rewrite_template_arg.Add(rewrite_template_arg194.Tree);
+						if ( state.backtracking == 0 ) stream_rewrite_template_arg.Add(rewrite_template_arg196.Tree);

}
break;

default:
-						goto loop96;
+						goto loop95;
}
}

-				loop96:
+				loop95:
;


@@ -10113,9 +9970,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 800:3: -> ^( ARGLIST[\"ARGLIST\"] ( rewrite_template_arg )+ )
+				// 788:3: -> ^( ARGLIST[\"ARGLIST\"] ( rewrite_template_arg )+ )
{
-					// Grammars\\ANTLR.g3:800:6: ^( ARGLIST[\"ARGLIST\"] ( rewrite_template_arg )+ )
+					// Grammars\\ANTLR.g3:788:6: ^( ARGLIST[\"ARGLIST\"] ( rewrite_template_arg )+ )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(ARGLIST, "ARGLIST"), root_1);
@@ -10143,7 +10000,7 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-				// Grammars\\ANTLR.g3:802:3:
+				// Grammars\\ANTLR.g3:790:3:
{


@@ -10161,7 +10018,7 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-				// 802:3: -> ARGLIST[\"ARGLIST\"]
+				// 790:3: -> ARGLIST[\"ARGLIST\"]
{
adaptor.AddChild(root_0, (GrammarAST)adaptor.Create(ARGLIST, "ARGLIST"));

@@ -10204,7 +10061,7 @@ public partial class ANTLRParser : Parser
}

// $ANTLR start "rewrite_template_arg"
-	// Grammars\\ANTLR.g3:805:0: rewrite_template_arg : id a= ASSIGN ACTION -> ^( ARG[$a,\"ARG\"] id ACTION ) ;
+	// Grammars\\ANTLR.g3:793:0: rewrite_template_arg : id a= ASSIGN ACTION -> ^( ARG[$a,\"ARG\"] id ACTION ) ;
private ANTLRParser.rewrite_template_arg_return rewrite_template_arg(  )
{
ANTLRParser.rewrite_template_arg_return retval = new ANTLRParser.rewrite_template_arg_return();
@@ -10213,30 +10070,30 @@ public partial class ANTLRParser : Parser
GrammarAST root_0 = null;

IToken a=null;
-		IToken ACTION196=null;
-		ANTLRParser.id_return id195 = default(ANTLRParser.id_return);
+		IToken ACTION198=null;
+		ANTLRParser.id_return id197 = default(ANTLRParser.id_return);

GrammarAST a_tree=null;
-		GrammarAST ACTION196_tree=null;
+		GrammarAST ACTION198_tree=null;
RewriteRuleITokenStream stream_ASSIGN=new RewriteRuleITokenStream(adaptor,"token ASSIGN");
RewriteRuleITokenStream stream_ACTION=new RewriteRuleITokenStream(adaptor,"token ACTION");
RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id");
try
{
-			// Grammars\\ANTLR.g3:806:4: ( id a= ASSIGN ACTION -> ^( ARG[$a,\"ARG\"] id ACTION ) )
-			// Grammars\\ANTLR.g3:806:4: id a= ASSIGN ACTION
+			// Grammars\\ANTLR.g3:794:4: ( id a= ASSIGN ACTION -> ^( ARG[$a,\"ARG\"] id ACTION ) )
+			// Grammars\\ANTLR.g3:794:4: id a= ASSIGN ACTION
{
-			PushFollow(Follow._id_in_rewrite_template_arg3529);
-			id195=id();
+			PushFollow(Follow._id_in_rewrite_template_arg3448);
+			id197=id();

state._fsp--;
if (state.failed) return retval;
-			if ( state.backtracking == 0 ) stream_id.Add(id195.Tree);
-			a=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_rewrite_template_arg3533); if (state.failed) return retval;
+			if ( state.backtracking == 0 ) stream_id.Add(id197.Tree);
+			a=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_rewrite_template_arg3452); if (state.failed) return retval;
if ( state.backtracking == 0 ) stream_ASSIGN.Add(a);

-			ACTION196=(IToken)Match(input,ACTION,Follow._ACTION_in_rewrite_template_arg3535); if (state.failed) return retval;
-			if ( state.backtracking == 0 ) stream_ACTION.Add(ACTION196);
+			ACTION198=(IToken)Match(input,ACTION,Follow._ACTION_in_rewrite_template_arg3454); if (state.failed) return retval;
+			if ( state.backtracking == 0 ) stream_ACTION.Add(ACTION198);



@@ -10253,9 +10110,9 @@ public partial class ANTLRParser : Parser
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

root_0 = (GrammarAST)adaptor.Nil();
-			// 807:3: -> ^( ARG[$a,\"ARG\"] id ACTION )
+			// 795:3: -> ^( ARG[$a,\"ARG\"] id ACTION )
{
-				// Grammars\\ANTLR.g3:807:6: ^( ARG[$a,\"ARG\"] id ACTION )
+				// Grammars\\ANTLR.g3:795:6: ^( ARG[$a,\"ARG\"] id ACTION )
{
GrammarAST root_1 = (GrammarAST)adaptor.Nil();
root_1 = (GrammarAST)adaptor.BecomeRoot((GrammarAST)adaptor.Create(ARG, a, "ARG"), root_1);
@@ -10299,8 +10156,8 @@ public partial class ANTLRParser : Parser
// $ANTLR start synpred1_ANTLR
public void synpred1_ANTLR_fragment()
{
-		// Grammars\\ANTLR.g3:505:4: ({...}? id WILDCARD ( terminal | ruleref ) )
-		// Grammars\\ANTLR.g3:505:5: {...}? id WILDCARD ( terminal | ruleref )
+		// Grammars\\ANTLR.g3:494:4: ({...}? id WILDCARD ( terminal | ruleref ) )
+		// Grammars\\ANTLR.g3:494:5: {...}? id WILDCARD ( terminal | ruleref )
{
if ( !((LT(1).CharPositionInLine+LT(1).Text.Length==LT(2).CharPositionInLine&&
LT(2).CharPositionInLine+1==LT(3).CharPositionInLine)) )
@@ -10308,37 +10165,37 @@ public partial class ANTLRParser : Parser
if (state.backtracking>0) {state.failed=true; return ;}
throw new FailedPredicateException(input, "synpred1_ANTLR", "LT(1).CharPositionInLine+LT(1).Text.Length==LT(2).CharPositionInLine&&\n\t\t\t LT(2).CharPositionInLine+1==LT(3).CharPositionInLine");
}
-		PushFollow(Follow._id_in_synpred1_ANTLR1964);
+		PushFollow(Follow._id_in_synpred1_ANTLR1909);
id();

state._fsp--;
if (state.failed) return ;
-		Match(input,WILDCARD,Follow._WILDCARD_in_synpred1_ANTLR1966); if (state.failed) return ;
-		// Grammars\\ANTLR.g3:506:72: ( terminal | ruleref )
-		int alt98=2;
-		int LA98_0 = input.LA(1);
+		Match(input,WILDCARD,Follow._WILDCARD_in_synpred1_ANTLR1911); if (state.failed) return ;
+		// Grammars\\ANTLR.g3:495:72: ( terminal | ruleref )
+		int alt97=2;
+		int LA97_0 = input.LA(1);

-		if ( (LA98_0==CHAR_LITERAL||LA98_0==STRING_LITERAL||LA98_0==TOKEN_REF||LA98_0==WILDCARD) )
+		if ( (LA97_0==CHAR_LITERAL||LA97_0==STRING_LITERAL||LA97_0==TOKEN_REF||LA97_0==WILDCARD) )
{
-			alt98=1;
+			alt97=1;
}
-		else if ( (LA98_0==RULE_REF) )
+		else if ( (LA97_0==RULE_REF) )
{
-			alt98=2;
+			alt97=2;
}
else
{
if (state.backtracking>0) {state.failed=true; return ;}
-			NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
+			NoViableAltException nvae = new NoViableAltException("", 97, 0, input);

throw nvae;
}
-		switch ( alt98 )
+		switch ( alt97 )
{
case 1:
-			// Grammars\\ANTLR.g3:506:73: terminal
+			// Grammars\\ANTLR.g3:495:73: terminal
{
-			PushFollow(Follow._terminal_in_synpred1_ANTLR1969);
+			PushFollow(Follow._terminal_in_synpred1_ANTLR1914);
terminal();

state._fsp--;
@@ -10347,9 +10204,9 @@ public partial class ANTLRParser : Parser
}
break;
case 2:
-			// Grammars\\ANTLR.g3:506:82: ruleref
+			// Grammars\\ANTLR.g3:495:82: ruleref
{
-			PushFollow(Follow._ruleref_in_synpred1_ANTLR1971);
+			PushFollow(Follow._ruleref_in_synpred1_ANTLR1916);
ruleref();

state._fsp--;
@@ -10391,14 +10248,14 @@ public partial class ANTLRParser : Parser
#region DFA
DFA49 dfa49;
DFA52 dfa52;
-	DFA83 dfa83;
+	DFA82 dfa82;

protected override void InitDFAs()
{
base.InitDFAs();
dfa49 = new DFA49( this );
dfa52 = new DFA52( this, new SpecialStateTransitionHandler( specialStateTransition52 ) );
-		dfa83 = new DFA83( this, new SpecialStateTransitionHandler( specialStateTransition83 ) );
+		dfa82 = new DFA82( this, new SpecialStateTransitionHandler( specialStateTransition82 ) );
}

class DFA49 : DFA
@@ -10472,7 +10329,7 @@ public partial class ANTLRParser : Parser
}
public override string GetDescription()
{
-			return "482:4: ( ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) ) (sub= ebnfSuffix[root_0,false] )? |a= atom (sub2= ebnfSuffix[$a.tree,false] )? | ebnf | FORCED_ACTION | ACTION |p= SEMPRED ( IMPLIES )? |t3= tree_ )";
+			return "471:4: ( ( id ( ASSIGN | PLUS_ASSIGN ) ( atom | block ) ) (sub= ebnfSuffix[root_0,false] )? |a= atom (sub2= ebnfSuffix[$a.tree,false] )? | ebnf | FORCED_ACTION | ACTION |p= SEMPRED ( IMPLIES )? |t3= tree_ )";
}
}

@@ -10558,7 +10415,7 @@ public partial class ANTLRParser : Parser
}
public override string GetDescription()
{
-			return "502:4: (=> id w= WILDCARD ( terminal | ruleref ) | terminal | ruleref )";
+			return "491:4: (=> id w= WILDCARD ( terminal | ruleref ) | terminal | ruleref )";
}
}

@@ -10734,22 +10591,22 @@ public partial class ANTLRParser : Parser
dfa.Error(nvae);
throw nvae;
}
-	class DFA83 : DFA
+	class DFA82 : DFA
{

-		const string DFA83_eotS =
+		const string DFA82_eotS =
"\xF\xFFFF";
-		const string DFA83_eofS =
+		const string DFA82_eofS =
"\xF\xFFFF";
-		const string DFA83_minS =
+		const string DFA82_minS =
"\x1\x4\x4\x0\xA\xFFFF";
-		const string DFA83_maxS =
+		const string DFA82_maxS =
"\x1\x5D\x4\x0\xA\xFFFF";
-		const string DFA83_acceptS =
+		const string DFA82_acceptS =
"\x5\xFFFF\x1\x2\x3\xFFFF\x1\x3\x3\xFFFF\x1\x4\x1\x1";
-		const string DFA83_specialS =
+		const string DFA82_specialS =
"\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\xA\xFFFF}>";
-		static readonly string[] DFA83_transitionS =
+		static readonly string[] DFA82_transitionS =
{
"\x1\x4\xD\xFFFF\x1\x5\x9\xFFFF\x1\x5\x8\xFFFF\x1\xD\xD\xFFFF\x1\x3\x7"+
"\xFFFF\x1\x9\xD\xFFFF\x1\x9\x1\xFFFF\x1\x9\x1\xFFFF\x1\x2\x1\xFFFF\x1"+
@@ -10770,43 +10627,43 @@ public partial class ANTLRParser : Parser
""
};

-		static readonly short[] DFA83_eot = DFA.UnpackEncodedString(DFA83_eotS);
-		static readonly short[] DFA83_eof = DFA.UnpackEncodedString(DFA83_eofS);
-		static readonly char[] DFA83_min = DFA.UnpackEncodedStringToUnsignedChars(DFA83_minS);
-		static readonly char[] DFA83_max = DFA.UnpackEncodedStringToUnsignedChars(DFA83_maxS);
-		static readonly short[] DFA83_accept = DFA.UnpackEncodedString(DFA83_acceptS);
-		static readonly short[] DFA83_special = DFA.UnpackEncodedString(DFA83_specialS);
-		static readonly short[][] DFA83_transition;
+		static readonly short[] DFA82_eot = DFA.UnpackEncodedString(DFA82_eotS);
+		static readonly short[] DFA82_eof = DFA.UnpackEncodedString(DFA82_eofS);
+		static readonly char[] DFA82_min = DFA.UnpackEncodedStringToUnsignedChars(DFA82_minS);
+		static readonly char[] DFA82_max = DFA.UnpackEncodedStringToUnsignedChars(DFA82_maxS);
+		static readonly short[] DFA82_accept = DFA.UnpackEncodedString(DFA82_acceptS);
+		static readonly short[] DFA82_special = DFA.UnpackEncodedString(DFA82_specialS);
+		static readonly short[][] DFA82_transition;

-		static DFA83()
+		static DFA82()
{
-			int numStates = DFA83_transitionS.Length;
-			DFA83_transition = new short[numStates][];
+			int numStates = DFA82_transitionS.Length;
+			DFA82_transition = new short[numStates][];
for ( int i=0; i < numStates; i++ )
{
-				DFA83_transition[i] = DFA.UnpackEncodedString(DFA83_transitionS[i]);
+				DFA82_transition[i] = DFA.UnpackEncodedString(DFA82_transitionS[i]);
}
}

-		public DFA83( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
+		public DFA82( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
: base( specialStateTransition )	{
this.recognizer = recognizer;
-			this.decisionNumber = 83;
-			this.eot = DFA83_eot;
-			this.eof = DFA83_eof;
-			this.min = DFA83_min;
-			this.max = DFA83_max;
-			this.accept = DFA83_accept;
-			this.special = DFA83_special;
-			this.transition = DFA83_transition;
+			this.decisionNumber = 82;
+			this.eot = DFA82_eot;
+			this.eof = DFA82_eof;
+			this.min = DFA82_min;
+			this.max = DFA82_max;
+			this.accept = DFA82_accept;
+			this.special = DFA82_special;
+			this.transition = DFA82_transition;
}
public override string GetDescription()
{
-			return "679:0: rewrite_alternative options {k=1; } : ({...}? => rewrite_template |{...}? => ( rewrite_element )+ -> {!stream_rewrite_element.HasNext}? ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] ) -> ^( ALT[LT(1),\"ALT\"] ( rewrite_element )+ EOA[\"<end-of-alt>\"] ) | -> ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] ) |{...}? ETC );";
+			return "667:0: rewrite_alternative options {k=1; } : ({...}? => rewrite_template |{...}? => ( rewrite_element )+ -> {!stream_rewrite_element.HasNext}? ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] ) -> ^( ALT[LT(1),\"ALT\"] ( rewrite_element )+ EOA[\"<end-of-alt>\"] ) | -> ^( ALT[LT(1),\"ALT\"] EPSILON[\"epsilon\"] EOA[\"<end-of-alt>\"] ) |{...}? ETC );";
}
}

-	int specialStateTransition83( DFA dfa, int s, IIntStream _input )
+	int specialStateTransition82( DFA dfa, int s, IIntStream _input )
{
ITokenStream input = (ITokenStream)_input;
int _s = s;
@@ -10814,36 +10671,36 @@ public partial class ANTLRParser : Parser
{

case 0:
-				int LA83_0 = input.LA(1);
+				int LA82_0 = input.LA(1);


-				int index83_0 = input.Index;
+				int index82_0 = input.Index;
input.Rewind();
s = -1;
-				if ( (LA83_0==TOKEN_REF) && ((((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))||(Grammar.BuildTemplate)||(Grammar.BuildAST)||((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))||((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))||((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))))) {s = 1;}
+				if ( (LA82_0==TOKEN_REF) && ((((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))||(Grammar.BuildTemplate)||(Grammar.BuildAST)||((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))||((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))||((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))))) {s = 1;}

-				else if ( (LA83_0==RULE_REF) && ((((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))||(Grammar.BuildTemplate)||(Grammar.BuildAST)||((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))||((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))||((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))))) {s = 2;}
+				else if ( (LA82_0==RULE_REF) && ((((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))||(Grammar.BuildTemplate)||(Grammar.BuildAST)||((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))||((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))||((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))))) {s = 2;}

-				else if ( (LA83_0==LPAREN) && (((Grammar.BuildTemplate)||(Grammar.BuildAST)))) {s = 3;}
+				else if ( (LA82_0==LPAREN) && (((Grammar.BuildTemplate)||(Grammar.BuildAST)))) {s = 3;}

-				else if ( (LA83_0==ACTION) && (((Grammar.BuildTemplate)||(Grammar.BuildAST)))) {s = 4;}
+				else if ( (LA82_0==ACTION) && (((Grammar.BuildTemplate)||(Grammar.BuildAST)))) {s = 4;}

-				else if ( (LA83_0==CHAR_LITERAL||LA83_0==DOLLAR||LA83_0==STRING_LITERAL||LA83_0==TREE_BEGIN) && ((Grammar.BuildAST))) {s = 5;}
+				else if ( (LA82_0==CHAR_LITERAL||LA82_0==DOLLAR||LA82_0==STRING_LITERAL||LA82_0==TREE_BEGIN) && ((Grammar.BuildAST))) {s = 5;}

-				else if ( (LA83_0==OR||LA83_0==REWRITE||LA83_0==RPAREN||LA83_0==SEMI) ) {s = 9;}
+				else if ( (LA82_0==OR||LA82_0==REWRITE||LA82_0==RPAREN||LA82_0==SEMI) ) {s = 9;}

-				else if ( (LA83_0==ETC) ) {s = 13;}
+				else if ( (LA82_0==ETC) ) {s = 13;}


-				input.Seek(index83_0);
+				input.Seek(index82_0);
if ( s>=0 ) return s;
break;

case 1:
-				int LA83_1 = input.LA(1);
+				int LA82_1 = input.LA(1);


-				int index83_1 = input.Index;
+				int index82_1 = input.Index;
input.Rewind();
s = -1;
if ( ((((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))||(Grammar.BuildTemplate))) ) {s = 14;}
@@ -10851,15 +10708,15 @@ public partial class ANTLRParser : Parser
else if ( ((Grammar.BuildAST)) ) {s = 5;}


-				input.Seek(index83_1);
+				input.Seek(index82_1);
if ( s>=0 ) return s;
break;

case 2:
-				int LA83_2 = input.LA(1);
+				int LA82_2 = input.LA(1);


-				int index83_2 = input.Index;
+				int index82_2 = input.Index;
input.Rewind();
s = -1;
if ( ((((Grammar.BuildTemplate)&&(LT(1).Text.Equals("template")))||(Grammar.BuildTemplate))) ) {s = 14;}
@@ -10867,15 +10724,15 @@ public partial class ANTLRParser : Parser
else if ( ((Grammar.BuildAST)) ) {s = 5;}


-				input.Seek(index83_2);
+				input.Seek(index82_2);
if ( s>=0 ) return s;
break;

case 3:
-				int LA83_3 = input.LA(1);
+				int LA82_3 = input.LA(1);


-				int index83_3 = input.Index;
+				int index82_3 = input.Index;
input.Rewind();
s = -1;
if ( ((Grammar.BuildTemplate)) ) {s = 14;}
@@ -10883,15 +10740,15 @@ public partial class ANTLRParser : Parser
else if ( ((Grammar.BuildAST)) ) {s = 5;}


-				input.Seek(index83_3);
+				input.Seek(index82_3);
if ( s>=0 ) return s;
break;

case 4:
-				int LA83_4 = input.LA(1);
+				int LA82_4 = input.LA(1);


-				int index83_4 = input.Index;
+				int index82_4 = input.Index;
input.Rewind();
s = -1;
if ( ((Grammar.BuildTemplate)) ) {s = 14;}
@@ -10899,12 +10756,12 @@ public partial class ANTLRParser : Parser
else if ( ((Grammar.BuildAST)) ) {s = 5;}


-				input.Seek(index83_4);
+				input.Seek(index82_4);
if ( s>=0 ) return s;
break;
}
if (state.backtracking>0) {state.failed=true; return -1;}
-		NoViableAltException nvae = new NoViableAltException(dfa.GetDescription(), 83, _s, input);
+		NoViableAltException nvae = new NoViableAltException(dfa.GetDescription(), 82, _s, input);
dfa.Error(nvae);
throw nvae;
}
@@ -11026,174 +10883,172 @@ public partial class ANTLRParser : Parser
public static readonly BitSet _OR_in_altList1572 = new BitSet(new ulong[]{0x888008000040010UL,0xA4212200UL});
public static readonly BitSet _alternative_in_altList1576 = new BitSet(new ulong[]{0x800000000000000UL,0x200UL});
public static readonly BitSet _rewrite_in_altList1580 = new BitSet(new ulong[]{0x800000000000002UL});
-		public static readonly BitSet _element_in_alternative1676 = new BitSet(new ulong[]{0x88008000040012UL,0xA4212000UL});
-		public static readonly BitSet _exceptionHandler_in_exceptionGroup1729 = new BitSet(new ulong[]{0x4000020002UL});
-		public static readonly BitSet _finallyClause_in_exceptionGroup1736 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _finallyClause_in_exceptionGroup1744 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _CATCH_in_exceptionHandler1755 = new BitSet(new ulong[]{0x800UL});
-		public static readonly BitSet _ARG_ACTION_in_exceptionHandler1758 = new BitSet(new ulong[]{0x10UL});
-		public static readonly BitSet _ACTION_in_exceptionHandler1760 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _FINALLY_in_finallyClause1771 = new BitSet(new ulong[]{0x10UL});
-		public static readonly BitSet _ACTION_in_finallyClause1774 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _elementNoOptionSpec_in_element1785 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _id_in_elementNoOptionSpec1805 = new BitSet(new ulong[]{0x8000000000002000UL});
-		public static readonly BitSet _ASSIGN_in_elementNoOptionSpec1808 = new BitSet(new ulong[]{0x88000000040000UL,0x84202000UL});
-		public static readonly BitSet _PLUS_ASSIGN_in_elementNoOptionSpec1811 = new BitSet(new ulong[]{0x88000000040000UL,0x84202000UL});
-		public static readonly BitSet _atom_in_elementNoOptionSpec1816 = new BitSet(new ulong[]{0x4000000000000002UL,0x80010UL});
-		public static readonly BitSet _block_in_elementNoOptionSpec1818 = new BitSet(new ulong[]{0x4000000000000002UL,0x80010UL});
-		public static readonly BitSet _ebnfSuffix_in_elementNoOptionSpec1833 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _atom_in_elementNoOptionSpec1851 = new BitSet(new ulong[]{0x4000000000000002UL,0x80010UL});
-		public static readonly BitSet _ebnfSuffix_in_elementNoOptionSpec1860 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _ebnf_in_elementNoOptionSpec1876 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _FORCED_ACTION_in_elementNoOptionSpec1882 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _ACTION_in_elementNoOptionSpec1888 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _SEMPRED_in_elementNoOptionSpec1896 = new BitSet(new ulong[]{0x100000000002UL});
-		public static readonly BitSet _IMPLIES_in_elementNoOptionSpec1900 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _tree__in_elementNoOptionSpec1919 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _range_in_atom1934 = new BitSet(new ulong[]{0x8002UL,0x400UL});
-		public static readonly BitSet _ROOT_in_atom1937 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _BANG_in_atom1940 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _id_in_atom1980 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
-		public static readonly BitSet _WILDCARD_in_atom1984 = new BitSet(new ulong[]{0x40000UL,0x84202000UL});
-		public static readonly BitSet _terminal_in_atom1988 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _ruleref_in_atom1990 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _terminal_in_atom1999 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _ruleref_in_atom2005 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _notSet_in_atom2014 = new BitSet(new ulong[]{0x8002UL,0x400UL});
-		public static readonly BitSet _ROOT_in_atom2017 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _BANG_in_atom2020 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _RULE_REF_in_ruleref2036 = new BitSet(new ulong[]{0x8802UL,0x400UL});
-		public static readonly BitSet _ARG_ACTION_in_ruleref2041 = new BitSet(new ulong[]{0x8002UL,0x400UL});
-		public static readonly BitSet _ROOT_in_ruleref2047 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _BANG_in_ruleref2050 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _NOT_in_notSet2064 = new BitSet(new ulong[]{0x8000000040000UL,0x4200000UL});
-		public static readonly BitSet _notTerminal_in_notSet2071 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _block_in_notSet2077 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _id_in_treeRoot2098 = new BitSet(new ulong[]{0x8000000000002000UL});
-		public static readonly BitSet _ASSIGN_in_treeRoot2101 = new BitSet(new ulong[]{0x88000000040000UL,0x84202000UL});
-		public static readonly BitSet _PLUS_ASSIGN_in_treeRoot2104 = new BitSet(new ulong[]{0x88000000040000UL,0x84202000UL});
-		public static readonly BitSet _atom_in_treeRoot2109 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _block_in_treeRoot2111 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _atom_in_treeRoot2118 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _block_in_treeRoot2124 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _TREE_BEGIN_in_tree_2143 = new BitSet(new ulong[]{0x88000000040000UL,0x84202000UL});
-		public static readonly BitSet _treeRoot_in_tree_2148 = new BitSet(new ulong[]{0x88008000040010UL,0xA4212000UL});
-		public static readonly BitSet _element_in_tree_2152 = new BitSet(new ulong[]{0x88008000040010UL,0xA4212800UL});
-		public static readonly BitSet _RPAREN_in_tree_2159 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _block_in_ebnf2173 = new BitSet(new ulong[]{0x4000100000008002UL,0x80410UL});
-		public static readonly BitSet _QUESTION_in_ebnf2179 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _STAR_in_ebnf2197 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _PLUS_in_ebnf2215 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _IMPLIES_in_ebnf2233 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _ROOT_in_ebnf2269 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _BANG_in_ebnf2286 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _CHAR_LITERAL_in_range2325 = new BitSet(new ulong[]{0x0UL,0x20UL});
-		public static readonly BitSet _RANGE_in_range2327 = new BitSet(new ulong[]{0x40000UL});
-		public static readonly BitSet _CHAR_LITERAL_in_range2331 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _CHAR_LITERAL_in_terminal2359 = new BitSet(new ulong[]{0x100000000008002UL,0x400UL});
-		public static readonly BitSet _elementOptions_in_terminal2364 = new BitSet(new ulong[]{0x8002UL,0x400UL});
-		public static readonly BitSet _ROOT_in_terminal2372 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _BANG_in_terminal2375 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _TOKEN_REF_in_terminal2386 = new BitSet(new ulong[]{0x100000000008802UL,0x400UL});
-		public static readonly BitSet _elementOptions_in_terminal2393 = new BitSet(new ulong[]{0x8802UL,0x400UL});
-		public static readonly BitSet _ARG_ACTION_in_terminal2404 = new BitSet(new ulong[]{0x8002UL,0x400UL});
-		public static readonly BitSet _ROOT_in_terminal2413 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _BANG_in_terminal2416 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _STRING_LITERAL_in_terminal2427 = new BitSet(new ulong[]{0x100000000008002UL,0x400UL});
-		public static readonly BitSet _elementOptions_in_terminal2432 = new BitSet(new ulong[]{0x8002UL,0x400UL});
-		public static readonly BitSet _ROOT_in_terminal2440 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _BANG_in_terminal2443 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _WILDCARD_in_terminal2454 = new BitSet(new ulong[]{0x8002UL,0x400UL});
-		public static readonly BitSet _ROOT_in_terminal2457 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _BANG_in_terminal2460 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _OPEN_ELEMENT_OPTION_in_elementOptions2479 = new BitSet(new ulong[]{0x0UL,0x4002000UL});
-		public static readonly BitSet _defaultNodeOption_in_elementOptions2482 = new BitSet(new ulong[]{0x100000UL});
-		public static readonly BitSet _CLOSE_ELEMENT_OPTION_in_elementOptions2485 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _OPEN_ELEMENT_OPTION_in_elementOptions2491 = new BitSet(new ulong[]{0x0UL,0x4002000UL});
-		public static readonly BitSet _elementOption_in_elementOptions2494 = new BitSet(new ulong[]{0x100000UL,0x8000UL});
-		public static readonly BitSet _SEMI_in_elementOptions2498 = new BitSet(new ulong[]{0x0UL,0x4002000UL});
-		public static readonly BitSet _elementOption_in_elementOptions2501 = new BitSet(new ulong[]{0x100000UL,0x8000UL});
-		public static readonly BitSet _CLOSE_ELEMENT_OPTION_in_elementOptions2506 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _id_in_defaultNodeOption2526 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
-		public static readonly BitSet _WILDCARD_in_defaultNodeOption2531 = new BitSet(new ulong[]{0x0UL,0x4002000UL});
-		public static readonly BitSet _id_in_defaultNodeOption2535 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
-		public static readonly BitSet _id_in_elementOption2557 = new BitSet(new ulong[]{0x2000UL});
-		public static readonly BitSet _ASSIGN_in_elementOption2559 = new BitSet(new ulong[]{0x0UL,0x4202000UL});
-		public static readonly BitSet _id_in_elementOption2565 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _STRING_LITERAL_in_elementOption2569 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _QUESTION_in_ebnfSuffix2643 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _STAR_in_ebnfSuffix2657 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _PLUS_in_ebnfSuffix2671 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _CHAR_LITERAL_in_notTerminal2714 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _TOKEN_REF_in_notTerminal2721 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _STRING_LITERAL_in_notTerminal2726 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _id_in_idList2737 = new BitSet(new ulong[]{0x1000002UL});
-		public static readonly BitSet _COMMA_in_idList2740 = new BitSet(new ulong[]{0x0UL,0x4002000UL});
-		public static readonly BitSet _id_in_idList2743 = new BitSet(new ulong[]{0x1000002UL});
-		public static readonly BitSet _TOKEN_REF_in_id2756 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _RULE_REF_in_id2768 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _rewrite_with_sempred_in_rewrite2788 = new BitSet(new ulong[]{0x0UL,0x200UL});
-		public static readonly BitSet _REWRITE_in_rewrite2793 = new BitSet(new ulong[]{0x8002010040010UL,0x24202000UL});
-		public static readonly BitSet _rewrite_alternative_in_rewrite2795 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _REWRITE_in_rewrite_with_sempred2822 = new BitSet(new ulong[]{0x0UL,0x10000UL});
-		public static readonly BitSet _SEMPRED_in_rewrite_with_sempred2825 = new BitSet(new ulong[]{0x8002010040010UL,0x24202000UL});
-		public static readonly BitSet _rewrite_alternative_in_rewrite_with_sempred2827 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _LPAREN_in_rewrite_block2838 = new BitSet(new ulong[]{0x8002010040010UL,0x24202800UL});
-		public static readonly BitSet _rewrite_alternative_in_rewrite_block2842 = new BitSet(new ulong[]{0x0UL,0x800UL});
-		public static readonly BitSet _RPAREN_in_rewrite_block2846 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _rewrite_template_in_rewrite_alternative2882 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _rewrite_element_in_rewrite_alternative2894 = new BitSet(new ulong[]{0x8000010040012UL,0x24202000UL});
-		public static readonly BitSet _ETC_in_rewrite_alternative2955 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _rewrite_atom_in_rewrite_element2970 = new BitSet(new ulong[]{0x4000000000000002UL,0x80010UL});
-		public static readonly BitSet _ebnfSuffix_in_rewrite_element2990 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _rewrite_ebnf_in_rewrite_element3009 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _rewrite_tree_in_rewrite_element3018 = new BitSet(new ulong[]{0x4000000000000002UL,0x80010UL});
-		public static readonly BitSet _ebnfSuffix_in_rewrite_element3038 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _TOKEN_REF_in_rewrite_atom3072 = new BitSet(new ulong[]{0x100000000000802UL});
-		public static readonly BitSet _elementOptions_in_rewrite_atom3089 = new BitSet(new ulong[]{0x802UL});
-		public static readonly BitSet _ARG_ACTION_in_rewrite_atom3095 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _RULE_REF_in_rewrite_atom3117 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _CHAR_LITERAL_in_rewrite_atom3126 = new BitSet(new ulong[]{0x100000000000002UL});
-		public static readonly BitSet _elementOptions_in_rewrite_atom3143 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _STRING_LITERAL_in_rewrite_atom3155 = new BitSet(new ulong[]{0x100000000000002UL});
-		public static readonly BitSet _elementOptions_in_rewrite_atom3174 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _DOLLAR_in_rewrite_atom3184 = new BitSet(new ulong[]{0x0UL,0x4002000UL});
-		public static readonly BitSet _id_in_rewrite_atom3188 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _ACTION_in_rewrite_atom3201 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _rewrite_block_in_rewrite_ebnf3214 = new BitSet(new ulong[]{0x4000000000000000UL,0x80010UL});
-		public static readonly BitSet _QUESTION_in_rewrite_ebnf3220 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _STAR_in_rewrite_ebnf3239 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _PLUS_in_rewrite_ebnf3258 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _TREE_BEGIN_in_rewrite_tree3286 = new BitSet(new ulong[]{0x10040010UL,0x4202000UL});
-		public static readonly BitSet _rewrite_atom_in_rewrite_tree3292 = new BitSet(new ulong[]{0x8000010040010UL,0x24202800UL});
-		public static readonly BitSet _rewrite_element_in_rewrite_tree3296 = new BitSet(new ulong[]{0x8000010040010UL,0x24202800UL});
-		public static readonly BitSet _RPAREN_in_rewrite_tree3303 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _rewrite_template_head_in_rewrite_template3338 = new BitSet(new ulong[]{0xC0000000UL});
-		public static readonly BitSet _DOUBLE_QUOTE_STRING_LITERAL_in_rewrite_template3357 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _DOUBLE_ANGLE_STRING_LITERAL_in_rewrite_template3363 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _rewrite_template_head_in_rewrite_template3378 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _rewrite_indirect_template_head_in_rewrite_template3387 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _ACTION_in_rewrite_template3396 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _id_in_rewrite_template_head3409 = new BitSet(new ulong[]{0x8000000000000UL});
-		public static readonly BitSet _LPAREN_in_rewrite_template_head3413 = new BitSet(new ulong[]{0x0UL,0x4002800UL});
-		public static readonly BitSet _rewrite_template_args_in_rewrite_template_head3417 = new BitSet(new ulong[]{0x0UL,0x800UL});
-		public static readonly BitSet _RPAREN_in_rewrite_template_head3421 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _LPAREN_in_rewrite_indirect_template_head3449 = new BitSet(new ulong[]{0x10UL});
-		public static readonly BitSet _ACTION_in_rewrite_indirect_template_head3453 = new BitSet(new ulong[]{0x0UL,0x800UL});
-		public static readonly BitSet _RPAREN_in_rewrite_indirect_template_head3457 = new BitSet(new ulong[]{0x8000000000000UL});
-		public static readonly BitSet _LPAREN_in_rewrite_indirect_template_head3461 = new BitSet(new ulong[]{0x0UL,0x4002800UL});
-		public static readonly BitSet _rewrite_template_args_in_rewrite_indirect_template_head3463 = new BitSet(new ulong[]{0x0UL,0x800UL});
-		public static readonly BitSet _RPAREN_in_rewrite_indirect_template_head3465 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _rewrite_template_arg_in_rewrite_template_args3489 = new BitSet(new ulong[]{0x1000002UL});
-		public static readonly BitSet _COMMA_in_rewrite_template_args3492 = new BitSet(new ulong[]{0x0UL,0x4002000UL});
-		public static readonly BitSet _rewrite_template_arg_in_rewrite_template_args3494 = new BitSet(new ulong[]{0x1000002UL});
-		public static readonly BitSet _id_in_rewrite_template_arg3529 = new BitSet(new ulong[]{0x2000UL});
-		public static readonly BitSet _ASSIGN_in_rewrite_template_arg3533 = new BitSet(new ulong[]{0x10UL});
-		public static readonly BitSet _ACTION_in_rewrite_template_arg3535 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _id_in_synpred1_ANTLR1964 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
-		public static readonly BitSet _WILDCARD_in_synpred1_ANTLR1966 = new BitSet(new ulong[]{0x40000UL,0x84202000UL});
-		public static readonly BitSet _terminal_in_synpred1_ANTLR1969 = new BitSet(new ulong[]{0x2UL});
-		public static readonly BitSet _ruleref_in_synpred1_ANTLR1971 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _element_in_alternative1634 = new BitSet(new ulong[]{0x88008000040012UL,0xA4212000UL});
+		public static readonly BitSet _exceptionHandler_in_exceptionGroup1680 = new BitSet(new ulong[]{0x4000020002UL});
+		public static readonly BitSet _finallyClause_in_exceptionGroup1683 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _finallyClause_in_exceptionGroup1689 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _CATCH_in_exceptionHandler1700 = new BitSet(new ulong[]{0x800UL});
+		public static readonly BitSet _ARG_ACTION_in_exceptionHandler1703 = new BitSet(new ulong[]{0x10UL});
+		public static readonly BitSet _ACTION_in_exceptionHandler1705 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _FINALLY_in_finallyClause1716 = new BitSet(new ulong[]{0x10UL});
+		public static readonly BitSet _ACTION_in_finallyClause1719 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _elementNoOptionSpec_in_element1730 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _id_in_elementNoOptionSpec1750 = new BitSet(new ulong[]{0x8000000000002000UL});
+		public static readonly BitSet _ASSIGN_in_elementNoOptionSpec1753 = new BitSet(new ulong[]{0x88000000040000UL,0x84202000UL});
+		public static readonly BitSet _PLUS_ASSIGN_in_elementNoOptionSpec1756 = new BitSet(new ulong[]{0x88000000040000UL,0x84202000UL});
+		public static readonly BitSet _atom_in_elementNoOptionSpec1761 = new BitSet(new ulong[]{0x4000000000000002UL,0x80010UL});
+		public static readonly BitSet _block_in_elementNoOptionSpec1763 = new BitSet(new ulong[]{0x4000000000000002UL,0x80010UL});
+		public static readonly BitSet _ebnfSuffix_in_elementNoOptionSpec1778 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _atom_in_elementNoOptionSpec1796 = new BitSet(new ulong[]{0x4000000000000002UL,0x80010UL});
+		public static readonly BitSet _ebnfSuffix_in_elementNoOptionSpec1805 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _ebnf_in_elementNoOptionSpec1821 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _FORCED_ACTION_in_elementNoOptionSpec1827 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _ACTION_in_elementNoOptionSpec1833 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _SEMPRED_in_elementNoOptionSpec1841 = new BitSet(new ulong[]{0x100000000002UL});
+		public static readonly BitSet _IMPLIES_in_elementNoOptionSpec1845 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _tree__in_elementNoOptionSpec1864 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _range_in_atom1879 = new BitSet(new ulong[]{0x8002UL,0x400UL});
+		public static readonly BitSet _ROOT_in_atom1882 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _BANG_in_atom1885 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _id_in_atom1925 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
+		public static readonly BitSet _WILDCARD_in_atom1929 = new BitSet(new ulong[]{0x40000UL,0x84202000UL});
+		public static readonly BitSet _terminal_in_atom1933 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _ruleref_in_atom1935 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _terminal_in_atom1944 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _ruleref_in_atom1950 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _notSet_in_atom1959 = new BitSet(new ulong[]{0x8002UL,0x400UL});
+		public static readonly BitSet _ROOT_in_atom1962 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _BANG_in_atom1965 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _RULE_REF_in_ruleref1979 = new BitSet(new ulong[]{0x8802UL,0x400UL});
+		public static readonly BitSet _ARG_ACTION_in_ruleref1982 = new BitSet(new ulong[]{0x8002UL,0x400UL});
+		public static readonly BitSet _ROOT_in_ruleref1986 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _BANG_in_ruleref1989 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _NOT_in_notSet2003 = new BitSet(new ulong[]{0x8000000040000UL,0x4200000UL});
+		public static readonly BitSet _notTerminal_in_notSet2010 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _block_in_notSet2016 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _id_in_treeRoot2039 = new BitSet(new ulong[]{0x8000000000002000UL});
+		public static readonly BitSet _ASSIGN_in_treeRoot2042 = new BitSet(new ulong[]{0x88000000040000UL,0x84202000UL});
+		public static readonly BitSet _PLUS_ASSIGN_in_treeRoot2045 = new BitSet(new ulong[]{0x88000000040000UL,0x84202000UL});
+		public static readonly BitSet _atom_in_treeRoot2050 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _block_in_treeRoot2052 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _atom_in_treeRoot2058 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _block_in_treeRoot2063 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _TREE_BEGIN_in_tree_2074 = new BitSet(new ulong[]{0x88000000040000UL,0x84202000UL});
+		public static readonly BitSet _treeRoot_in_tree_2079 = new BitSet(new ulong[]{0x88008000040010UL,0xA4212000UL});
+		public static readonly BitSet _element_in_tree_2081 = new BitSet(new ulong[]{0x88008000040010UL,0xA4212800UL});
+		public static readonly BitSet _RPAREN_in_tree_2086 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _block_in_ebnf2100 = new BitSet(new ulong[]{0x4000100000008002UL,0x80410UL});
+		public static readonly BitSet _QUESTION_in_ebnf2106 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _STAR_in_ebnf2124 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _PLUS_in_ebnf2142 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _IMPLIES_in_ebnf2160 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _ROOT_in_ebnf2196 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _BANG_in_ebnf2213 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _CHAR_LITERAL_in_range2252 = new BitSet(new ulong[]{0x0UL,0x20UL});
+		public static readonly BitSet _RANGE_in_range2254 = new BitSet(new ulong[]{0x40000UL});
+		public static readonly BitSet _CHAR_LITERAL_in_range2258 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _CHAR_LITERAL_in_terminal2286 = new BitSet(new ulong[]{0x100000000008002UL,0x400UL});
+		public static readonly BitSet _elementOptions_in_terminal2291 = new BitSet(new ulong[]{0x8002UL,0x400UL});
+		public static readonly BitSet _ROOT_in_terminal2299 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _BANG_in_terminal2302 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _TOKEN_REF_in_terminal2313 = new BitSet(new ulong[]{0x100000000008802UL,0x400UL});
+		public static readonly BitSet _elementOptions_in_terminal2320 = new BitSet(new ulong[]{0x8802UL,0x400UL});
+		public static readonly BitSet _ARG_ACTION_in_terminal2331 = new BitSet(new ulong[]{0x8002UL,0x400UL});
+		public static readonly BitSet _ROOT_in_terminal2340 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _BANG_in_terminal2343 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _STRING_LITERAL_in_terminal2354 = new BitSet(new ulong[]{0x100000000008002UL,0x400UL});
+		public static readonly BitSet _elementOptions_in_terminal2359 = new BitSet(new ulong[]{0x8002UL,0x400UL});
+		public static readonly BitSet _ROOT_in_terminal2367 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _BANG_in_terminal2370 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _WILDCARD_in_terminal2381 = new BitSet(new ulong[]{0x8002UL,0x400UL});
+		public static readonly BitSet _ROOT_in_terminal2384 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _BANG_in_terminal2387 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _OPEN_ELEMENT_OPTION_in_elementOptions2406 = new BitSet(new ulong[]{0x0UL,0x4002000UL});
+		public static readonly BitSet _defaultNodeOption_in_elementOptions2409 = new BitSet(new ulong[]{0x100000UL});
+		public static readonly BitSet _CLOSE_ELEMENT_OPTION_in_elementOptions2412 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _OPEN_ELEMENT_OPTION_in_elementOptions2418 = new BitSet(new ulong[]{0x0UL,0x4002000UL});
+		public static readonly BitSet _elementOption_in_elementOptions2421 = new BitSet(new ulong[]{0x100000UL,0x8000UL});
+		public static readonly BitSet _SEMI_in_elementOptions2425 = new BitSet(new ulong[]{0x0UL,0x4002000UL});
+		public static readonly BitSet _elementOption_in_elementOptions2428 = new BitSet(new ulong[]{0x100000UL,0x8000UL});
+		public static readonly BitSet _CLOSE_ELEMENT_OPTION_in_elementOptions2433 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _id_in_defaultNodeOption2453 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
+		public static readonly BitSet _WILDCARD_in_defaultNodeOption2458 = new BitSet(new ulong[]{0x0UL,0x4002000UL});
+		public static readonly BitSet _id_in_defaultNodeOption2462 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
+		public static readonly BitSet _id_in_elementOption2484 = new BitSet(new ulong[]{0x2000UL});
+		public static readonly BitSet _ASSIGN_in_elementOption2486 = new BitSet(new ulong[]{0x0UL,0x4202000UL});
+		public static readonly BitSet _id_in_elementOption2492 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _STRING_LITERAL_in_elementOption2496 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _QUESTION_in_ebnfSuffix2570 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _STAR_in_ebnfSuffix2584 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _PLUS_in_ebnfSuffix2598 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _set_in_notTerminal2639 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _id_in_idList2660 = new BitSet(new ulong[]{0x1000002UL});
+		public static readonly BitSet _COMMA_in_idList2663 = new BitSet(new ulong[]{0x0UL,0x4002000UL});
+		public static readonly BitSet _id_in_idList2666 = new BitSet(new ulong[]{0x1000002UL});
+		public static readonly BitSet _TOKEN_REF_in_id2679 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _RULE_REF_in_id2691 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _rewrite_with_sempred_in_rewrite2711 = new BitSet(new ulong[]{0x0UL,0x200UL});
+		public static readonly BitSet _REWRITE_in_rewrite2716 = new BitSet(new ulong[]{0x8002010040010UL,0x24202000UL});
+		public static readonly BitSet _rewrite_alternative_in_rewrite2718 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _REWRITE_in_rewrite_with_sempred2745 = new BitSet(new ulong[]{0x0UL,0x10000UL});
+		public static readonly BitSet _SEMPRED_in_rewrite_with_sempred2748 = new BitSet(new ulong[]{0x8002010040010UL,0x24202000UL});
+		public static readonly BitSet _rewrite_alternative_in_rewrite_with_sempred2750 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _LPAREN_in_rewrite_block2761 = new BitSet(new ulong[]{0x8002010040010UL,0x24202800UL});
+		public static readonly BitSet _rewrite_alternative_in_rewrite_block2765 = new BitSet(new ulong[]{0x0UL,0x800UL});
+		public static readonly BitSet _RPAREN_in_rewrite_block2769 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _rewrite_template_in_rewrite_alternative2805 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _rewrite_element_in_rewrite_alternative2817 = new BitSet(new ulong[]{0x8000010040012UL,0x24202000UL});
+		public static readonly BitSet _ETC_in_rewrite_alternative2878 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _rewrite_atom_in_rewrite_element2893 = new BitSet(new ulong[]{0x4000000000000002UL,0x80010UL});
+		public static readonly BitSet _ebnfSuffix_in_rewrite_element2913 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _rewrite_ebnf_in_rewrite_element2932 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _rewrite_tree_in_rewrite_element2941 = new BitSet(new ulong[]{0x4000000000000002UL,0x80010UL});
+		public static readonly BitSet _ebnfSuffix_in_rewrite_element2961 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _TOKEN_REF_in_rewrite_atom2995 = new BitSet(new ulong[]{0x100000000000802UL});
+		public static readonly BitSet _elementOptions_in_rewrite_atom3012 = new BitSet(new ulong[]{0x802UL});
+		public static readonly BitSet _ARG_ACTION_in_rewrite_atom3018 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _RULE_REF_in_rewrite_atom3040 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _CHAR_LITERAL_in_rewrite_atom3049 = new BitSet(new ulong[]{0x100000000000002UL});
+		public static readonly BitSet _elementOptions_in_rewrite_atom3066 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _STRING_LITERAL_in_rewrite_atom3078 = new BitSet(new ulong[]{0x100000000000002UL});
+		public static readonly BitSet _elementOptions_in_rewrite_atom3097 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _DOLLAR_in_rewrite_atom3107 = new BitSet(new ulong[]{0x0UL,0x4002000UL});
+		public static readonly BitSet _id_in_rewrite_atom3111 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _ACTION_in_rewrite_atom3124 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _rewrite_block_in_rewrite_ebnf3137 = new BitSet(new ulong[]{0x4000000000000000UL,0x80010UL});
+		public static readonly BitSet _QUESTION_in_rewrite_ebnf3143 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _STAR_in_rewrite_ebnf3162 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _PLUS_in_rewrite_ebnf3181 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _TREE_BEGIN_in_rewrite_tree3209 = new BitSet(new ulong[]{0x10040010UL,0x4202000UL});
+		public static readonly BitSet _rewrite_atom_in_rewrite_tree3215 = new BitSet(new ulong[]{0x8000010040010UL,0x24202800UL});
+		public static readonly BitSet _rewrite_element_in_rewrite_tree3217 = new BitSet(new ulong[]{0x8000010040010UL,0x24202800UL});
+		public static readonly BitSet _RPAREN_in_rewrite_tree3222 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _rewrite_template_head_in_rewrite_template3257 = new BitSet(new ulong[]{0xC0000000UL});
+		public static readonly BitSet _DOUBLE_QUOTE_STRING_LITERAL_in_rewrite_template3276 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _DOUBLE_ANGLE_STRING_LITERAL_in_rewrite_template3282 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _rewrite_template_head_in_rewrite_template3297 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _rewrite_indirect_template_head_in_rewrite_template3306 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _ACTION_in_rewrite_template3315 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _id_in_rewrite_template_head3328 = new BitSet(new ulong[]{0x8000000000000UL});
+		public static readonly BitSet _LPAREN_in_rewrite_template_head3332 = new BitSet(new ulong[]{0x0UL,0x4002800UL});
+		public static readonly BitSet _rewrite_template_args_in_rewrite_template_head3336 = new BitSet(new ulong[]{0x0UL,0x800UL});
+		public static readonly BitSet _RPAREN_in_rewrite_template_head3340 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _LPAREN_in_rewrite_indirect_template_head3368 = new BitSet(new ulong[]{0x10UL});
+		public static readonly BitSet _ACTION_in_rewrite_indirect_template_head3372 = new BitSet(new ulong[]{0x0UL,0x800UL});
+		public static readonly BitSet _RPAREN_in_rewrite_indirect_template_head3376 = new BitSet(new ulong[]{0x8000000000000UL});
+		public static readonly BitSet _LPAREN_in_rewrite_indirect_template_head3380 = new BitSet(new ulong[]{0x0UL,0x4002800UL});
+		public static readonly BitSet _rewrite_template_args_in_rewrite_indirect_template_head3382 = new BitSet(new ulong[]{0x0UL,0x800UL});
+		public static readonly BitSet _RPAREN_in_rewrite_indirect_template_head3384 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _rewrite_template_arg_in_rewrite_template_args3408 = new BitSet(new ulong[]{0x1000002UL});
+		public static readonly BitSet _COMMA_in_rewrite_template_args3411 = new BitSet(new ulong[]{0x0UL,0x4002000UL});
+		public static readonly BitSet _rewrite_template_arg_in_rewrite_template_args3413 = new BitSet(new ulong[]{0x1000002UL});
+		public static readonly BitSet _id_in_rewrite_template_arg3448 = new BitSet(new ulong[]{0x2000UL});
+		public static readonly BitSet _ASSIGN_in_rewrite_template_arg3452 = new BitSet(new ulong[]{0x10UL});
+		public static readonly BitSet _ACTION_in_rewrite_template_arg3454 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _id_in_synpred1_ANTLR1909 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
+		public static readonly BitSet _WILDCARD_in_synpred1_ANTLR1911 = new BitSet(new ulong[]{0x40000UL,0x84202000UL});
+		public static readonly BitSet _terminal_in_synpred1_ANTLR1914 = new BitSet(new ulong[]{0x2UL});
+		public static readonly BitSet _ruleref_in_synpred1_ANTLR1916 = new BitSet(new ulong[]{0x2UL});

}
#endregion Follow sets
diff --git a/Antlr3/Grammars/ANTLRParserHelper.cs b/Antlr3/Grammars/ANTLRParserHelper.cs
index 49a32e4..2877e0f 100644
--- a/Antlr3/Grammars/ANTLRParserHelper.cs
+++ b/Antlr3/Grammars/ANTLRParserHelper.cs
@@ -62,7 +62,7 @@ namespace Antlr3.Grammars
//Console.Out.WriteLine( "start: " + start + ", stop: " + stop );
if ( stop == null ||
( stop.TokenIndex < start.TokenIndex &&
-                      stop.Type != TokenConstants.Eof ) )
+                      stop.Type != TokenTypes.EndOfFile ) )
{
// sometimes resync does not consume a token (when LT(1) is
// in follow set.  So, stop will be 1 to left to start. adjust.
@@ -94,7 +94,7 @@ namespace Antlr3.Grammars
{
int i = ( (IToken)start ).TokenIndex;
int j = ( (IToken)stop ).TokenIndex;
-                        if ( ( (IToken)stop ).Type == TokenConstants.Eof )
+                        if ( ( (IToken)stop ).Type == TokenTypes.EndOfFile )
{
j = ( (ITokenStream)input ).Size();
}
@@ -121,7 +121,7 @@ namespace Antlr3.Grammars
{
get
{
-                    return TokenConstants.InvalidTokenType;
+                    return TokenTypes.Invalid;
}
set
{
diff --git a/Antlr3/Grammars/ANTLRTreePrinter.cs b/Antlr3/Grammars/ANTLRTreePrinter.cs
index 2acb02a..d9af458 100644
--- a/Antlr3/Grammars/ANTLRTreePrinter.cs
+++ b/Antlr3/Grammars/ANTLRTreePrinter.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\ANTLRTreePrinter.g3 2009-04-16 20:58:22
+// $ANTLR 3.1.2 Grammars\\ANTLRTreePrinter.g3 2009-04-17 13:33:44

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -396,14 +396,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,LEXER_GRAMMAR,Follow._LEXER_GRAMMAR_in_grammar_127);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._grammarSpec_in_grammar_129);
grammarSpec("lexer ");

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -412,14 +412,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,PARSER_GRAMMAR,Follow._PARSER_GRAMMAR_in_grammar_139);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._grammarSpec_in_grammar_141);
grammarSpec("parser ");

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -428,14 +428,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,TREE_GRAMMAR,Follow._TREE_GRAMMAR_in_grammar_151);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._grammarSpec_in_grammar_153);
grammarSpec("tree ");

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -444,14 +444,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,COMBINED_GRAMMAR,Follow._COMBINED_GRAMMAR_in_grammar_163);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._grammarSpec_in_grammar_165);
grammarSpec("");

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -482,7 +482,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_attrScope181);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
Match(input,ID,Follow._ID_in_attrScope183);
// Grammars\\ANTLRTreePrinter.g3:115:18: ( ruleAction )*
for ( ; ; )
@@ -521,7 +521,7 @@ public partial class ANTLRTreePrinter : TreeParser

Match(input,ACTION,Follow._ACTION_in_attrScope188);

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -814,7 +814,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_action293);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
id1=(GrammarAST)Match(input,ID,Follow._ID_in_action297);
// Grammars\\ANTLRTreePrinter.g3:140:4: (id2= ID a1= ACTION |a2= ACTION )
int alt11=2;
@@ -857,7 +857,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

if ( showActions )
{
@@ -894,7 +894,7 @@ public partial class ANTLRTreePrinter : TreeParser

@out(" options {");

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:156:4: ( option )+
int cnt12=0;
for ( ; ; )
@@ -938,7 +938,7 @@ public partial class ANTLRTreePrinter : TreeParser

@out("} ");

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -969,7 +969,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_option391);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
id=(GrammarAST)Match(input,ID,Follow._ID_in_option395);
@out((id!=null?id.Text:null)+"=");
PushFollow(Follow._optionValue_in_option399);
@@ -978,7 +978,7 @@ public partial class ANTLRTreePrinter : TreeParser
state._fsp--;


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -1100,7 +1100,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,IMPORT,Follow._IMPORT_in_delegateGrammars484);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:186:16: ( ^( ASSIGN ID ID ) | ID )+
int cnt14=0;
for ( ; ; )
@@ -1125,11 +1125,11 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_delegateGrammars489);

-					Match(input, TokenConstants.Down, null);
+					Match(input, TokenTypes.Down, null);
Match(input,ID,Follow._ID_in_delegateGrammars491);
Match(input,ID,Follow._ID_in_delegateGrammars493);

-					Match(input, TokenConstants.Up, null);
+					Match(input, TokenTypes.Up, null);

}
break;
@@ -1155,7 +1155,7 @@ public partial class ANTLRTreePrinter : TreeParser



-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -1184,7 +1184,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,TOKENS,Follow._TOKENS_in_tokensSpec516);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:190:14: ( tokenSpec )+
int cnt15=0;
for ( ; ; )
@@ -1226,7 +1226,7 @@ public partial class ANTLRTreePrinter : TreeParser



-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -1282,7 +1282,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_tokenSpec543);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
Match(input,TOKEN_REF,Follow._TOKEN_REF_in_tokenSpec545);
if ( input.LA(1)==CHAR_LITERAL||input.LA(1)==STRING_LITERAL )
{
@@ -1296,7 +1296,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -1398,7 +1398,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,RULE,Follow._RULE_in_rule582);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
id=(GrammarAST)Match(input,ID,Follow._ID_in_rule586);
// Grammars\\ANTLRTreePrinter.g3:204:4: ( modifier )?
int alt18=2;
@@ -1427,9 +1427,9 @@ public partial class ANTLRTreePrinter : TreeParser
@out((id!=null?id.Text:null));
Match(input,ARG,Follow._ARG_in_rule605);

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:206:10: (arg= ARG_ACTION )?
int alt19=2;
int LA19_0 = input.LA(1);
@@ -1452,13 +1452,13 @@ public partial class ANTLRTreePrinter : TreeParser
}


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);
}
Match(input,RET,Follow._RET_in_rule623);

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:207:10: (ret= ARG_ACTION )?
int alt20=2;
int LA20_0 = input.LA(1);
@@ -1481,7 +1481,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);
}
// Grammars\\ANTLRTreePrinter.g3:208:4: ( throwsSpec )?
int alt21=2;
@@ -1627,7 +1627,7 @@ public partial class ANTLRTreePrinter : TreeParser
Match(input,EOR,Follow._EOR_in_rule698);
@out(";\n");

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -1659,11 +1659,11 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_ruleAction716);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
id=(GrammarAST)Match(input,ID,Follow._ID_in_ruleAction720);
a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_ruleAction724);

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);
if ( showActions ) @out("@"+(id!=null?id.Text:null)+"{"+(a!=null?a.Text:null)+"}");

}
@@ -1737,7 +1737,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,THROWS,Follow._THROWS_in_throwsSpec773);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:238:15: ( ID )+
int cnt26=0;
for ( ; ; )
@@ -1775,7 +1775,7 @@ public partial class ANTLRTreePrinter : TreeParser



-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -1804,9 +1804,9 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_ruleScopeSpec790);

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:242:15: ( ruleAction )*
for ( ; ; )
{
@@ -1894,7 +1894,7 @@ public partial class ANTLRTreePrinter : TreeParser



-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);
}

}
@@ -1948,7 +1948,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:265:4: ( optionsSpec )?
int alt30=2;
int LA30_0 = input.LA(1);
@@ -2028,7 +2028,7 @@ public partial class ANTLRTreePrinter : TreeParser
Match(input,EOB,Follow._EOB_in_block865);
if ( forceParens||numAlts>1 ) @out(")");

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -2057,7 +2057,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,ALT,Follow._ALT_in_alternative887);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:272:11: ( element )+
int cnt32=0;
for ( ; ; )
@@ -2100,7 +2100,7 @@ public partial class ANTLRTreePrinter : TreeParser

Match(input,EOA,Follow._EOA_in_alternative894);

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -2252,11 +2252,11 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,CATCH,Follow._CATCH_in_exceptionHandler934);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
Match(input,ARG_ACTION,Follow._ARG_ACTION_in_exceptionHandler936);
Match(input,ACTION,Follow._ACTION_in_exceptionHandler938);

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -2285,10 +2285,10 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,FINALLY,Follow._FINALLY_in_finallyClause951);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
Match(input,ACTION,Follow._ACTION_in_finallyClause953);

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -2322,7 +2322,7 @@ public partial class ANTLRTreePrinter : TreeParser

@out(" ->");

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:290:4: ( SEMPRED )?
int alt36=2;
int LA36_0 = input.LA(1);
@@ -2420,7 +2420,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -2456,7 +2456,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,TEMPLATE,Follow._TEMPLATE_in_rewrite_template1038);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:302:4: (id= ID |ind= ACTION )
int alt38=2;
int LA38_0 = input.LA(1);
@@ -2500,9 +2500,9 @@ public partial class ANTLRTreePrinter : TreeParser

@out("(");

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:307:5: ( ^( ARG arg= ID a= ACTION ) )*
for ( ; ; )
{
@@ -2522,13 +2522,13 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,ARG,Follow._ARG_in_rewrite_template1088);

-						Match(input, TokenConstants.Down, null);
+						Match(input, TokenTypes.Down, null);
arg=(GrammarAST)Match(input,ID,Follow._ID_in_rewrite_template1092);
@out((arg!=null?arg.Text:null)+"=");
a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_rewrite_template1104);
@out((a!=null?a.Text:null));

-						Match(input, TokenConstants.Up, null);
+						Match(input, TokenTypes.Up, null);

}
break;
@@ -2544,7 +2544,7 @@ public partial class ANTLRTreePrinter : TreeParser

@out(")");

-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);
}
// Grammars\\ANTLRTreePrinter.g3:313:4: ( DOUBLE_QUOTE_STRING_LITERAL | DOUBLE_ANGLE_STRING_LITERAL )?
int alt40=3;
@@ -2580,7 +2580,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -2791,14 +2791,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,ROOT,Follow._ROOT_in_element1187);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._element_in_element1189);
element();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2807,14 +2807,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,BANG,Follow._BANG_in_element1196);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._element_in_element1198);
element();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2836,14 +2836,14 @@ public partial class ANTLRTreePrinter : TreeParser

@out("~");

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._element_in_element1214);
element();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2852,7 +2852,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,RANGE,Follow._RANGE_in_element1221);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._atom_in_element1223);
atom();

@@ -2865,7 +2865,7 @@ public partial class ANTLRTreePrinter : TreeParser
state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2874,7 +2874,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_element1234);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._atom_in_element1236);
atom();

@@ -2887,7 +2887,7 @@ public partial class ANTLRTreePrinter : TreeParser
state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2896,7 +2896,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_element1247);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
id=(GrammarAST)Match(input,ID,Follow._ID_in_element1251);
@out((id!=null?id.Text:null)+"=");
PushFollow(Follow._element_in_element1255);
@@ -2905,7 +2905,7 @@ public partial class ANTLRTreePrinter : TreeParser
state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2914,7 +2914,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_element1262);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
id2=(GrammarAST)Match(input,ID,Follow._ID_in_element1266);
@out((id2!=null?id2.Text:null)+"+=");
PushFollow(Follow._element_in_element1270);
@@ -2923,7 +2923,7 @@ public partial class ANTLRTreePrinter : TreeParser
state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2954,14 +2954,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,SYNPRED,Follow._SYNPRED_in_element1288);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._block_in_element1290);
block(true);

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);
@out("=>");

}
@@ -3019,9 +3019,9 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,BACKTRACK_SEMPRED,Follow._BACKTRACK_SEMPRED_in_element1343);

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null);
+					Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:357:24: ( . )*
for ( ; ; )
{
@@ -3058,7 +3058,7 @@ public partial class ANTLRTreePrinter : TreeParser



-					Match(input, TokenConstants.Up, null);
+					Match(input, TokenTypes.Up, null);
}

}
@@ -3154,14 +3154,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,OPTIONAL,Follow._OPTIONAL_in_ebnf1385);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._block_in_ebnf1387);
block(true);

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);
@out("? ");

}
@@ -3171,14 +3171,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,CLOSURE,Follow._CLOSURE_in_ebnf1399);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._block_in_ebnf1401);
block(true);

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);
@out("* ");

}
@@ -3188,14 +3188,14 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_ebnf1414);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._block_in_ebnf1416);
block(true);

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);
@out("+ ");

}
@@ -3229,7 +3229,7 @@ public partial class ANTLRTreePrinter : TreeParser

@out(" ^(");

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
PushFollow(Follow._element_in_tree_1437);
element();

@@ -3272,7 +3272,7 @@ public partial class ANTLRTreePrinter : TreeParser

@out(") ");

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -3390,9 +3390,9 @@ public partial class ANTLRTreePrinter : TreeParser

@out(((GrammarAST)retval.start).ToString());

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null);
+						Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:381:5: (rarg= ARG_ACTION )?
int alt46=2;
int LA46_0 = input.LA(1);
@@ -3439,7 +3439,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-						Match(input, TokenConstants.Up, null);
+						Match(input, TokenTypes.Up, null);
}

}
@@ -3451,9 +3451,9 @@ public partial class ANTLRTreePrinter : TreeParser

@out(((GrammarAST)retval.start).ToString());

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null);
+						Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:385:5: (targ= ARG_ACTION )?
int alt48=2;
int LA48_0 = input.LA(1);
@@ -3500,7 +3500,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-						Match(input, TokenConstants.Up, null);
+						Match(input, TokenTypes.Up, null);
}

}
@@ -3512,9 +3512,9 @@ public partial class ANTLRTreePrinter : TreeParser

@out(((GrammarAST)retval.start).ToString());

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null);
+						Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:389:5: ( ast_suffix )?
int alt50=2;
int LA50_0 = input.LA(1);
@@ -3540,7 +3540,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-						Match(input, TokenConstants.Up, null);
+						Match(input, TokenTypes.Up, null);
}

}
@@ -3552,9 +3552,9 @@ public partial class ANTLRTreePrinter : TreeParser

@out(((GrammarAST)retval.start).ToString());

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null);
+						Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:392:5: ( ast_suffix )?
int alt51=2;
int LA51_0 = input.LA(1);
@@ -3580,7 +3580,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-						Match(input, TokenConstants.Up, null);
+						Match(input, TokenTypes.Up, null);
}

}
@@ -3592,9 +3592,9 @@ public partial class ANTLRTreePrinter : TreeParser

@out(((GrammarAST)retval.start).ToString());

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null);
+						Match(input, TokenTypes.Down, null);
// Grammars\\ANTLRTreePrinter.g3:395:5: ( ast_suffix )?
int alt52=2;
int LA52_0 = input.LA(1);
@@ -3620,7 +3620,7 @@ public partial class ANTLRTreePrinter : TreeParser
}


-						Match(input, TokenConstants.Up, null);
+						Match(input, TokenTypes.Up, null);
}

}
@@ -3645,7 +3645,7 @@ public partial class ANTLRTreePrinter : TreeParser
{
Match(input,DOT,Follow._DOT_in_atom1631);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
ID6=(GrammarAST)Match(input,ID,Follow._ID_in_atom1633);
@out((ID6!=null?ID6.Text:null)+".");
PushFollow(Follow._atom_in_atom1637);
@@ -3654,7 +3654,7 @@ public partial class ANTLRTreePrinter : TreeParser
state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
diff --git a/Antlr3/Grammars/ActionAnalysisLexer.cs b/Antlr3/Grammars/ActionAnalysisLexer.cs
index abbeec4..a0f2cee 100644
--- a/Antlr3/Grammars/ActionAnalysisLexer.cs
+++ b/Antlr3/Grammars/ActionAnalysisLexer.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\ActionAnalysisLexer.g3 2009-04-16 20:58:18
+// $ANTLR 3.1.2 Grammars\\ActionAnalysisLexer.g3 2009-04-17 13:46:13

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -84,12 +84,12 @@ public partial class ActionAnalysisLexer : Lexer
{
for ( ; ;)
{
-			if ( input.LA(1)==CharStreamConstants.Eof )
+			if ( input.LA(1)==CharStreamConstants.EndOfFile )
{
-				return TokenConstants.EofToken;
+				return Tokens.EndOfFile;
}
state.token = null;
-			state.channel = TokenConstants.DefaultChannel;
+			state.channel = TokenChannels.Default;
state.tokenStartCharIndex = input.Index;
state.tokenStartCharPositionInLine = input.CharPositionInLine;
state.tokenStartLine = input.Line;
@@ -150,11 +150,11 @@ public partial class ActionAnalysisLexer : Lexer
Match('$'); if (state.failed) return ;
int xStart57 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart57, GetCharIndex()-1);
+			x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart57, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart63 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart63, GetCharIndex()-1);
+			y = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, yStart63, GetCharIndex()-1);
if ( !((enclosingRule!=null)) )
{
if (state.backtracking>0) {state.failed=true; return ;}
@@ -228,7 +228,7 @@ public partial class ActionAnalysisLexer : Lexer
Match('$'); if (state.failed) return ;
int ID1Start84 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID1 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID1Start84, GetCharIndex()-1);
+			ID1 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ID1Start84, GetCharIndex()-1);
if ( !((enclosingRule!=null && enclosingRule.GetRuleLabel((ID1!=null?ID1.Text:null))!=null)) )
{
if (state.backtracking>0) {state.failed=true; return ;}
@@ -268,7 +268,7 @@ public partial class ActionAnalysisLexer : Lexer
Match('$'); if (state.failed) return ;
int ID2Start106 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID2 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID2Start106, GetCharIndex()-1);
+			ID2 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ID2Start106, GetCharIndex()-1);
if ( !((enclosingRule!=null && enclosingRule.GetLocalAttributeScope((ID2!=null?ID2.Text:null))!=null)) )
{
if (state.backtracking>0) {state.failed=true; return ;}
diff --git a/Antlr3/Grammars/ActionAnalysisLexerHelper.cs b/Antlr3/Grammars/ActionAnalysisLexerHelper.cs
index 6c52684..e0254b6 100644
--- a/Antlr3/Grammars/ActionAnalysisLexerHelper.cs
+++ b/Antlr3/Grammars/ActionAnalysisLexerHelper.cs
@@ -58,7 +58,7 @@ namespace Antlr3.Grammars
do
{
t = NextToken();
-            } while ( t.Type != TokenConstants.Eof );
+            } while ( t.Type != TokenTypes.EndOfFile );
}
}
}
diff --git a/Antlr3/Grammars/ActionTranslator.cs b/Antlr3/Grammars/ActionTranslator.cs
index ae12afd..5cd219e 100644
--- a/Antlr3/Grammars/ActionTranslator.cs
+++ b/Antlr3/Grammars/ActionTranslator.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\ActionTranslator.g3 2009-04-16 21:08:59
+// $ANTLR 3.1.2 Grammars\\ActionTranslator.g3 2009-04-17 13:46:04

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -108,12 +108,12 @@ public partial class ActionTranslator : Lexer
{
for ( ; ;)
{
-			if ( input.LA(1)==CharStreamConstants.Eof )
+			if ( input.LA(1)==CharStreamConstants.EndOfFile )
{
-				return TokenConstants.EofToken;
+				return Tokens.EndOfFile;
}
state.token = null;
-			state.channel = TokenConstants.DefaultChannel;
+			state.channel = TokenChannels.Default;
state.tokenStartCharIndex = input.Index;
state.tokenStartCharPositionInLine = input.CharPositionInLine;
state.tokenStartLine = input.Line;
@@ -175,11 +175,11 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart60 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart60, GetCharIndex()-1);
+			x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart60, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart66 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart66, GetCharIndex()-1);
+			y = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, yStart66, GetCharIndex()-1);
// Grammars\\ActionTranslator.g3:91:22: ( WS )?
int alt1=2;
int LA1_0 = input.LA(1);
@@ -203,7 +203,7 @@ public partial class ActionTranslator : Lexer
Match('='); if (state.failed) return ;
int exprStart75 = GetCharIndex();
mATTR_VALUE_EXPR(); if (state.failed) return ;
-			expr = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, exprStart75, GetCharIndex()-1);
+			expr = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, exprStart75, GetCharIndex()-1);
Match(';'); if (state.failed) return ;
if ( !((enclosingRule!=null &&
(x!=null?x.Text:null).Equals(enclosingRule.name) &&
@@ -288,11 +288,11 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart107 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart107, GetCharIndex()-1);
+			x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart107, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart113 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart113, GetCharIndex()-1);
+			y = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, yStart113, GetCharIndex()-1);
if ( !((enclosingRule!=null &&
(x!=null?x.Text:null).Equals(enclosingRule.name) &&
enclosingRule.GetLocalAttributeScope((y!=null?y.Text:null))!=null)) )
@@ -368,11 +368,11 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart139 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart139, GetCharIndex()-1);
+			x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart139, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart145 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart145, GetCharIndex()-1);
+			y = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, yStart145, GetCharIndex()-1);
// Grammars\\ActionTranslator.g3:188:22: ( WS )?
int alt2=2;
int LA2_0 = input.LA(1);
@@ -440,11 +440,11 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart184 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart184, GetCharIndex()-1);
+			x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart184, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart190 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart190, GetCharIndex()-1);
+			y = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, yStart190, GetCharIndex()-1);
if ( !((enclosingRule!=null &&
(enclosingRule.GetTokenLabel((x!=null?x.Text:null))!=null||
IsTokenRefInAlt((x!=null?x.Text:null))) &&
@@ -511,11 +511,11 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart221 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart221, GetCharIndex()-1);
+			x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart221, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart227 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart227, GetCharIndex()-1);
+			y = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, yStart227, GetCharIndex()-1);
// Grammars\\ActionTranslator.g3:248:22: ( WS )?
int alt3=2;
int LA3_0 = input.LA(1);
@@ -601,11 +601,11 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart280 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart280, GetCharIndex()-1);
+			x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart280, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart286 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart286, GetCharIndex()-1);
+			y = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, yStart286, GetCharIndex()-1);
if ( !((enclosingRule!=null)) )
{
if (state.backtracking>0) {state.failed=true; return ;}
@@ -702,7 +702,7 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int ID1Start328 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID1 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID1Start328, GetCharIndex()-1);
+			ID1 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ID1Start328, GetCharIndex()-1);
if ( !((enclosingRule!=null &&
GetElementLabel((ID1!=null?ID1.Text:null))!=null &&
enclosingRule.GetRuleLabel((ID1!=null?ID1.Text:null))==null)) )
@@ -755,7 +755,7 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int ID2Start352 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID2 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID2Start352, GetCharIndex()-1);
+			ID2 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ID2Start352, GetCharIndex()-1);
if ( !((grammar.type!=Grammar.LEXER && enclosingRule!=null && IsTokenRefInAlt((ID2!=null?ID2.Text:null)))) )
{
if (state.backtracking>0) {state.failed=true; return ;}
@@ -807,7 +807,7 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int ID3Start376 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID3 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID3Start376, GetCharIndex()-1);
+			ID3 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ID3Start376, GetCharIndex()-1);
if ( !((grammar.type==Grammar.LEXER &&
enclosingRule!=null &&
IsRuleRefInAlt((ID3!=null?ID3.Text:null)))) )
@@ -862,7 +862,7 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int ID4Start400 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID4 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID4Start400, GetCharIndex()-1);
+			ID4 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ID4Start400, GetCharIndex()-1);
// Grammars\\ActionTranslator.g3:422:11: ( WS )?
int alt4=2;
int LA4_0 = input.LA(1);
@@ -886,7 +886,7 @@ public partial class ActionTranslator : Lexer
Match('='); if (state.failed) return ;
int exprStart409 = GetCharIndex();
mATTR_VALUE_EXPR(); if (state.failed) return ;
-			expr = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, exprStart409, GetCharIndex()-1);
+			expr = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, exprStart409, GetCharIndex()-1);
Match(';'); if (state.failed) return ;
if ( !((enclosingRule!=null
&& enclosingRule.GetLocalAttributeScope((ID4!=null?ID4.Text:null))!=null
@@ -961,7 +961,7 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int ID5Start432 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID5 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID5Start432, GetCharIndex()-1);
+			ID5 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ID5Start432, GetCharIndex()-1);
if ( !((enclosingRule!=null && enclosingRule.GetLocalAttributeScope((ID5!=null?ID5.Text:null))!=null)) )
{
if (state.backtracking>0) {state.failed=true; return ;}
@@ -1027,12 +1027,12 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart458 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart458, GetCharIndex()-1);
+			x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart458, GetCharIndex()-1);
Match("::"); if (state.failed) return ;

int yStart464 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart464, GetCharIndex()-1);
+			y = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, yStart464, GetCharIndex()-1);
// Grammars\\ActionTranslator.g3:509:23: ( WS )?
int alt5=2;
int LA5_0 = input.LA(1);
@@ -1056,7 +1056,7 @@ public partial class ActionTranslator : Lexer
Match('='); if (state.failed) return ;
int exprStart473 = GetCharIndex();
mATTR_VALUE_EXPR(); if (state.failed) return ;
-			expr = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, exprStart473, GetCharIndex()-1);
+			expr = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, exprStart473, GetCharIndex()-1);
Match(';'); if (state.failed) return ;
if ( !((ResolveDynamicScope((x!=null?x.Text:null))!=null &&
ResolveDynamicScope((x!=null?x.Text:null)).GetAttribute((y!=null?y.Text:null))!=null)) )
@@ -1109,12 +1109,12 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart508 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart508, GetCharIndex()-1);
+			x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart508, GetCharIndex()-1);
Match("::"); if (state.failed) return ;

int yStart514 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart514, GetCharIndex()-1);
+			y = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, yStart514, GetCharIndex()-1);
if ( !((ResolveDynamicScope((x!=null?x.Text:null))!=null &&
ResolveDynamicScope((x!=null?x.Text:null)).GetAttribute((y!=null?y.Text:null))!=null)) )
{
@@ -1165,12 +1165,12 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart548 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart548, GetCharIndex()-1);
+			x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart548, GetCharIndex()-1);
Match("::"); if (state.failed) return ;

int yStart554 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart554, GetCharIndex()-1);
+			y = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, yStart554, GetCharIndex()-1);
if ( state.backtracking==1 )
{

@@ -1209,18 +1209,18 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart576 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart576, GetCharIndex()-1);
+			x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart576, GetCharIndex()-1);
Match('['); if (state.failed) return ;
Match('-'); if (state.failed) return ;
int exprStart584 = GetCharIndex();
mSCOPE_INDEX_EXPR(); if (state.failed) return ;
-			expr = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, exprStart584, GetCharIndex()-1);
+			expr = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, exprStart584, GetCharIndex()-1);
Match(']'); if (state.failed) return ;
Match("::"); if (state.failed) return ;

int yStart592 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart592, GetCharIndex()-1);
+			y = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, yStart592, GetCharIndex()-1);
if ( state.backtracking==1 )
{

@@ -1259,17 +1259,17 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart616 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart616, GetCharIndex()-1);
+			x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart616, GetCharIndex()-1);
Match('['); if (state.failed) return ;
int exprStart622 = GetCharIndex();
mSCOPE_INDEX_EXPR(); if (state.failed) return ;
-			expr = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, exprStart622, GetCharIndex()-1);
+			expr = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, exprStart622, GetCharIndex()-1);
Match(']'); if (state.failed) return ;
Match("::"); if (state.failed) return ;

int yStart630 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart630, GetCharIndex()-1);
+			y = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, yStart630, GetCharIndex()-1);
if ( state.backtracking==1 )
{

@@ -1362,7 +1362,7 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int ID6Start673 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID6 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID6Start673, GetCharIndex()-1);
+			ID6 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ID6Start673, GetCharIndex()-1);
if ( !((ResolveDynamicScope((ID6!=null?ID6.Text:null))!=null)) )
{
if (state.backtracking>0) {state.failed=true; return ;}
@@ -1735,11 +1735,11 @@ public partial class ActionTranslator : Lexer
Match('%'); if (state.failed) return ;
int aStart823 = GetCharIndex();
mACTION(); if (state.failed) return ;
-			a = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, aStart823, GetCharIndex()-1);
+			a = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, aStart823, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int ID7Start827 = GetCharIndex();
mID(); if (state.failed) return ;
-			ID7 = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, ID7Start827, GetCharIndex()-1);
+			ID7 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ID7Start827, GetCharIndex()-1);
// Grammars\\ActionTranslator.g3:656:24: ( WS )?
int alt17=2;
int LA17_0 = input.LA(1);
@@ -1763,7 +1763,7 @@ public partial class ActionTranslator : Lexer
Match('='); if (state.failed) return ;
int exprStart836 = GetCharIndex();
mATTR_VALUE_EXPR(); if (state.failed) return ;
-			expr = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, exprStart836, GetCharIndex()-1);
+			expr = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, exprStart836, GetCharIndex()-1);
Match(';'); if (state.failed) return ;
if ( state.backtracking==1 )
{
@@ -1805,11 +1805,11 @@ public partial class ActionTranslator : Lexer
Match('%'); if (state.failed) return ;
int xStart863 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart863, GetCharIndex()-1);
+			x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart863, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart869 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart869, GetCharIndex()-1);
+			y = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, yStart869, GetCharIndex()-1);
// Grammars\\ActionTranslator.g3:673:22: ( WS )?
int alt18=2;
int LA18_0 = input.LA(1);
@@ -1833,7 +1833,7 @@ public partial class ActionTranslator : Lexer
Match('='); if (state.failed) return ;
int exprStart878 = GetCharIndex();
mATTR_VALUE_EXPR(); if (state.failed) return ;
-			expr = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, exprStart878, GetCharIndex()-1);
+			expr = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, exprStart878, GetCharIndex()-1);
Match(';'); if (state.failed) return ;
if ( state.backtracking==1 )
{
@@ -1933,7 +1933,7 @@ public partial class ActionTranslator : Lexer
Match('%'); if (state.failed) return ;
int aStart927 = GetCharIndex();
mACTION(); if (state.failed) return ;
-			a = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, aStart927, GetCharIndex()-1);
+			a = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, aStart927, GetCharIndex()-1);
if ( state.backtracking==1 )
{

@@ -2118,11 +2118,11 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart1016 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart1016, GetCharIndex()-1);
+			x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart1016, GetCharIndex()-1);
Match('.'); if (state.failed) return ;
int yStart1022 = GetCharIndex();
mID(); if (state.failed) return ;
-			y = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, yStart1022, GetCharIndex()-1);
+			y = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, yStart1022, GetCharIndex()-1);
if ( state.backtracking==1 )
{

@@ -2159,7 +2159,7 @@ public partial class ActionTranslator : Lexer
Match('$'); if (state.failed) return ;
int xStart1042 = GetCharIndex();
mID(); if (state.failed) return ;
-			x = new CommonToken(input, TokenConstants.InvalidTokenType, TokenConstants.DefaultChannel, xStart1042, GetCharIndex()-1);
+			x = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, xStart1042, GetCharIndex()-1);
if ( state.backtracking==1 )
{

diff --git a/Antlr3/Grammars/ActionTranslatorHelper.cs b/Antlr3/Grammars/ActionTranslatorHelper.cs
index d29f607..c713d8c 100644
--- a/Antlr3/Grammars/ActionTranslatorHelper.cs
+++ b/Antlr3/Grammars/ActionTranslatorHelper.cs
@@ -47,7 +47,7 @@ namespace Antlr3.Grammars
using Rule = Antlr3.Tool.Rule;
using StringBuilder = System.Text.StringBuilder;
using StringTemplate = Antlr3.ST.StringTemplate;
-    using TokenConstants = Antlr.Runtime.TokenConstants;
+    using TokenTypes = Antlr.Runtime.TokenTypes;

partial class ActionTranslator
{
@@ -93,7 +93,7 @@ namespace Antlr3.Grammars
do
{
t = NextToken();
-            } while ( t.Type != TokenConstants.Eof );
+            } while ( t.Type != TokenTypes.EndOfFile );
return chunks;
}

diff --git a/Antlr3/Grammars/AssignTokenTypesWalker.cs b/Antlr3/Grammars/AssignTokenTypesWalker.cs
index 8660961..5ef6700 100644
--- a/Antlr3/Grammars/AssignTokenTypesWalker.cs
+++ b/Antlr3/Grammars/AssignTokenTypesWalker.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\AssignTokenTypesWalker.g3 2009-04-16 21:09:05
+// $ANTLR 3.1.2 Grammars\\AssignTokenTypesWalker.g3 2009-04-17 13:33:46

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -282,14 +282,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,LEXER_GRAMMAR,Follow._LEXER_GRAMMAR_in_grammar_68);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._grammarSpec_in_grammar_73);
grammarSpec();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -298,14 +298,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,PARSER_GRAMMAR,Follow._PARSER_GRAMMAR_in_grammar_83);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._grammarSpec_in_grammar_87);
grammarSpec();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -314,14 +314,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,TREE_GRAMMAR,Follow._TREE_GRAMMAR_in_grammar_97);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._grammarSpec_in_grammar_103);
grammarSpec();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -330,14 +330,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,COMBINED_GRAMMAR,Follow._COMBINED_GRAMMAR_in_grammar_113);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._grammarSpec_in_grammar_115);
grammarSpec();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -520,9 +520,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_grammarSpec178);

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null);
+						Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:159:17: ( . )*
for ( ; ; )
{
@@ -559,7 +559,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-						Match(input, TokenConstants.Up, null);
+						Match(input, TokenTypes.Up, null);
}

}
@@ -607,7 +607,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_attrScope203);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
Match(input,ID,Follow._ID_in_attrScope205);
// Grammars\\AssignTokenTypesWalker.g3:164:18: ( ^( AMPERSAND ( . )* ) )*
for ( ; ; )
@@ -628,9 +628,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_attrScope210);

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null);
+						Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:164:32: ( . )*
for ( ; ; )
{
@@ -667,7 +667,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-						Match(input, TokenConstants.Up, null);
+						Match(input, TokenTypes.Up, null);
}

}
@@ -684,7 +684,7 @@ public partial class AssignTokenTypesWalker : TreeParser

Match(input,ACTION,Follow._ACTION_in_attrScope219);

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -716,7 +716,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_optionsSpec238);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:168:15: ( option[$opts] )+
int cnt11=0;
for ( ; ; )
@@ -758,7 +758,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -790,7 +790,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_option260);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
ID1=(GrammarAST)Match(input,ID,Follow._ID_in_option262);
PushFollow(Follow._optionValue_in_option264);
optionValue2=optionValue();
@@ -798,7 +798,7 @@ public partial class AssignTokenTypesWalker : TreeParser
state._fsp--;


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

string key = (ID1!=null?ID1.Text:null);
opts[key] = (optionValue2!=null?optionValue2.value:default(Object));
@@ -934,14 +934,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,CHARSET,Follow._CHARSET_in_charSet323);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
PushFollow(Follow._charSetElement_in_charSet325);
charSetElement();

state._fsp--;


-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -1006,11 +1006,11 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,OR,Follow._OR_in_charSetElement345);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_charSetElement347);
Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_charSetElement349);

-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -1019,11 +1019,11 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,RANGE,Follow._RANGE_in_charSetElement358);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_charSetElement360);
Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_charSetElement362);

-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -1054,7 +1054,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,IMPORT,Follow._IMPORT_in_delegateGrammars377);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:210:4: ( ^( ASSIGN ID ID ) | ID )+
int cnt14=0;
for ( ; ; )
@@ -1079,11 +1079,11 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_delegateGrammars385);

-					Match(input, TokenConstants.Down, null);
+					Match(input, TokenTypes.Down, null);
Match(input,ID,Follow._ID_in_delegateGrammars387);
Match(input,ID,Follow._ID_in_delegateGrammars389);

-					Match(input, TokenConstants.Up, null);
+					Match(input, TokenTypes.Up, null);

}
break;
@@ -1109,7 +1109,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -1138,7 +1138,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,TOKENS,Follow._TOKENS_in_tokensSpec420);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:217:14: ( tokenSpec )+
int cnt15=0;
for ( ; ; )
@@ -1180,7 +1180,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -1242,7 +1242,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_tokenSpec458);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
t2=(GrammarAST)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_tokenSpec465);
TrackToken(t2);
// Grammars\\AssignTokenTypesWalker.g3:224:4: (s= STRING_LITERAL |c= CHAR_LITERAL )
@@ -1285,7 +1285,7 @@ public partial class AssignTokenTypesWalker : TreeParser
}


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -1386,7 +1386,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,RULE,Follow._RULE_in_rule531);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
id=(GrammarAST)Match(input,ID,Follow._ID_in_rule535);
currentRuleName=(id!=null?id.Text:null);
// Grammars\\AssignTokenTypesWalker.g3:236:4: (m= modifier )?
@@ -1415,9 +1415,9 @@ public partial class AssignTokenTypesWalker : TreeParser

Match(input,ARG,Follow._ARG_in_rule553);

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:237:10: ( ARG_ACTION )?
int alt20=2;
int LA20_0 = input.LA(1);
@@ -1439,13 +1439,13 @@ public partial class AssignTokenTypesWalker : TreeParser
}


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);
}
Match(input,RET,Follow._RET_in_rule565);

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:238:10: ( ARG_ACTION )?
int alt21=2;
int LA21_0 = input.LA(1);
@@ -1467,7 +1467,7 @@ public partial class AssignTokenTypesWalker : TreeParser
}


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);
}
// Grammars\\AssignTokenTypesWalker.g3:239:4: ( throwsSpec )?
int alt22=2;
@@ -1560,9 +1560,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_rule603);

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null);
+						Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:242:18: ( . )*
for ( ; ; )
{
@@ -1599,7 +1599,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-						Match(input, TokenConstants.Up, null);
+						Match(input, TokenTypes.Up, null);
}

}
@@ -1646,7 +1646,7 @@ public partial class AssignTokenTypesWalker : TreeParser
Match(input,EOR,Follow._EOR_in_rule630);
TrackTokenRule(id,(m!=null?((GrammarAST)m.start):null),(b!=null?((GrammarAST)b.start):null));

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -1718,7 +1718,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,THROWS,Follow._THROWS_in_throwsSpec677);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:258:15: ( ID )+
int cnt28=0;
for ( ; ; )
@@ -1756,7 +1756,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -1785,9 +1785,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_ruleScopeSpec694);

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:262:15: ( ^( AMPERSAND ( . )* ) )*
for ( ; ; )
{
@@ -1807,9 +1807,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_ruleScopeSpec699);

-						if ( input.LA(1)==TokenConstants.Down )
+						if ( input.LA(1)==TokenTypes.Down )
{
-							Match(input, TokenConstants.Down, null);
+							Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:262:29: ( . )*
for ( ; ; )
{
@@ -1846,7 +1846,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-							Match(input, TokenConstants.Up, null);
+							Match(input, TokenTypes.Up, null);
}

}
@@ -1913,7 +1913,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);
}

}
@@ -1949,7 +1949,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,BLOCK,Follow._BLOCK_in_block733);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:267:4: ( optionsSpec )?
int alt33=2;
int LA33_0 = input.LA(1);
@@ -2021,7 +2021,7 @@ public partial class AssignTokenTypesWalker : TreeParser

Match(input,EOB,Follow._EOB_in_block758);

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -2050,7 +2050,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,ALT,Follow._ALT_in_alternative775);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:274:11: ( element )+
int cnt35=0;
for ( ; ; )
@@ -2093,7 +2093,7 @@ public partial class AssignTokenTypesWalker : TreeParser

Match(input,EOA,Follow._EOA_in_alternative782);

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -2245,11 +2245,11 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,CATCH,Follow._CATCH_in_exceptionHandler822);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
Match(input,ARG_ACTION,Follow._ARG_ACTION_in_exceptionHandler824);
Match(input,ACTION,Follow._ACTION_in_exceptionHandler826);

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -2278,10 +2278,10 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,FINALLY,Follow._FINALLY_in_finallyClause839);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
Match(input,ACTION,Follow._ACTION_in_finallyClause841);

-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -2327,9 +2327,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,REWRITE,Follow._REWRITE_in_rewrite856);

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null);
+						Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:291:16: ( . )*
for ( ; ; )
{
@@ -2366,7 +2366,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-						Match(input, TokenConstants.Up, null);
+						Match(input, TokenTypes.Up, null);
}

}
@@ -2521,14 +2521,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,ROOT,Follow._ROOT_in_element875);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._element_in_element877);
element();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2537,14 +2537,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,BANG,Follow._BANG_in_element884);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._element_in_element886);
element();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2564,14 +2564,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,NOT,Follow._NOT_in_element898);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._element_in_element900);
element();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2580,7 +2580,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,RANGE,Follow._RANGE_in_element907);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._atom_in_element909);
atom();

@@ -2592,7 +2592,7 @@ public partial class AssignTokenTypesWalker : TreeParser
state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2601,7 +2601,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_element918);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._atom_in_element920);
atom();

@@ -2613,7 +2613,7 @@ public partial class AssignTokenTypesWalker : TreeParser
state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2622,7 +2622,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_element929);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
Match(input,ID,Follow._ID_in_element931);
PushFollow(Follow._element_in_element933);
element();
@@ -2630,7 +2630,7 @@ public partial class AssignTokenTypesWalker : TreeParser
state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2639,7 +2639,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_element940);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
Match(input,ID,Follow._ID_in_element942);
PushFollow(Follow._element_in_element944);
element();
@@ -2647,7 +2647,7 @@ public partial class AssignTokenTypesWalker : TreeParser
state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2678,14 +2678,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,SYNPRED,Follow._SYNPRED_in_element962);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._block_in_element964);
block();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2722,9 +2722,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,BACKTRACK_SEMPRED,Follow._BACKTRACK_SEMPRED_in_element992);

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null);
+					Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:310:24: ( . )*
for ( ; ; )
{
@@ -2761,7 +2761,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-					Match(input, TokenConstants.Up, null);
+					Match(input, TokenTypes.Up, null);
}

}
@@ -2852,14 +2852,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,OPTIONAL,Follow._OPTIONAL_in_ebnf1024);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._block_in_ebnf1026);
block();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2868,14 +2868,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,CLOSURE,Follow._CLOSURE_in_ebnf1035);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._block_in_ebnf1037);
block();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2884,14 +2884,14 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_ebnf1046);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
PushFollow(Follow._block_in_ebnf1048);
block();

state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
@@ -2922,7 +2922,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_tree_1062);

-			Match(input, TokenConstants.Down, null);
+			Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:323:17: ( element )+
int cnt44=0;
for ( ; ; )
@@ -2964,7 +2964,7 @@ public partial class AssignTokenTypesWalker : TreeParser



-			Match(input, TokenConstants.Up, null);
+			Match(input, TokenTypes.Up, null);

}

@@ -3041,9 +3041,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,RULE_REF,Follow._RULE_REF_in_atom1079);

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null);
+					Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:327:16: ( ARG_ACTION )?
int alt45=2;
int LA45_0 = input.LA(1);
@@ -3065,7 +3065,7 @@ public partial class AssignTokenTypesWalker : TreeParser
}


-					Match(input, TokenConstants.Up, null);
+					Match(input, TokenTypes.Up, null);
}

}
@@ -3075,9 +3075,9 @@ public partial class AssignTokenTypesWalker : TreeParser
{
t=(GrammarAST)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_atom1095);

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null);
+					Match(input, TokenTypes.Down, null);
// Grammars\\AssignTokenTypesWalker.g3:328:19: ( ARG_ACTION )?
int alt46=2;
int LA46_0 = input.LA(1);
@@ -3099,7 +3099,7 @@ public partial class AssignTokenTypesWalker : TreeParser
}


-					Match(input, TokenConstants.Up, null);
+					Match(input, TokenTypes.Up, null);
}
TrackToken(t);

@@ -3133,7 +3133,7 @@ public partial class AssignTokenTypesWalker : TreeParser
{
Match(input,DOT,Follow._DOT_in_atom1136);

-				Match(input, TokenConstants.Down, null);
+				Match(input, TokenTypes.Down, null);
Match(input,ID,Follow._ID_in_atom1138);
PushFollow(Follow._atom_in_atom1140);
atom();
@@ -3141,7 +3141,7 @@ public partial class AssignTokenTypesWalker : TreeParser
state._fsp--;


-				Match(input, TokenConstants.Up, null);
+				Match(input, TokenTypes.Up, null);

}
break;
diff --git a/Antlr3/Grammars/CodeGenTreeWalker.cs b/Antlr3/Grammars/CodeGenTreeWalker.cs
index 93810b3..2927d0d 100644
--- a/Antlr3/Grammars/CodeGenTreeWalker.cs
+++ b/Antlr3/Grammars/CodeGenTreeWalker.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\CodeGenTreeWalker.g3 2009-04-16 21:13:39
+// $ANTLR 3.1.2 Grammars\\CodeGenTreeWalker.g3 2009-04-17 13:33:39

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -264,14 +264,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,LEXER_GRAMMAR,Follow._LEXER_GRAMMAR_in_grammar_66); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
PushFollow(Follow._grammarSpec_in_grammar_68);
grammarSpec();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -280,14 +280,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,PARSER_GRAMMAR,Follow._PARSER_GRAMMAR_in_grammar_78); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
PushFollow(Follow._grammarSpec_in_grammar_80);
grammarSpec();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -296,14 +296,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,TREE_GRAMMAR,Follow._TREE_GRAMMAR_in_grammar_90); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
PushFollow(Follow._grammarSpec_in_grammar_92);
grammarSpec();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -312,14 +312,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,COMBINED_GRAMMAR,Follow._COMBINED_GRAMMAR_in_grammar_102); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
PushFollow(Follow._grammarSpec_in_grammar_104);
grammarSpec();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -354,7 +354,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_attrScope123); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
Match(input,ID,Follow._ID_in_attrScope125); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:137:18: ( ^( AMPERSAND ( . )* ) )*
for ( ; ; )
@@ -375,9 +375,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_attrScope130); if (state.failed) return ;

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null); if (state.failed) return ;
+						Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:137:32: ( . )*
for ( ; ; )
{
@@ -414,7 +414,7 @@ public partial class CodeGenTreeWalker : TreeParser



-						Match(input, TokenConstants.Up, null); if (state.failed) return ;
+						Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -431,7 +431,7 @@ public partial class CodeGenTreeWalker : TreeParser

Match(input,ACTION,Follow._ACTION_in_attrScope139); if (state.failed) return ;

-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;

}

@@ -514,9 +514,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_grammarSpec185); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return ;
+					Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:155:15: ( . )*
for ( ; ; )
{
@@ -553,7 +553,7 @@ public partial class CodeGenTreeWalker : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return ;
+					Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -576,9 +576,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,IMPORT,Follow._IMPORT_in_grammarSpec199); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return ;
+					Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:156:14: ( . )*
for ( ; ; )
{
@@ -615,7 +615,7 @@ public partial class CodeGenTreeWalker : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return ;
+					Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -638,9 +638,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,TOKENS,Follow._TOKENS_in_grammarSpec213); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return ;
+					Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:157:14: ( . )*
for ( ; ; )
{
@@ -677,7 +677,7 @@ public partial class CodeGenTreeWalker : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return ;
+					Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -739,9 +739,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_grammarSpec234); if (state.failed) return ;

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null); if (state.failed) return ;
+						Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:159:17: ( . )*
for ( ; ; )
{
@@ -778,7 +778,7 @@ public partial class CodeGenTreeWalker : TreeParser



-						Match(input, TokenConstants.Up, null); if (state.failed) return ;
+						Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -913,9 +913,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,RULE,Follow._RULE_in_rules304); if (state.failed) return ;

-						if ( input.LA(1)==TokenConstants.Down )
+						if ( input.LA(1)==TokenTypes.Down )
{
-							Match(input, TokenConstants.Down, null); if (state.failed) return ;
+							Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:180:13: ( . )*
for ( ; ; )
{
@@ -952,7 +952,7 @@ public partial class CodeGenTreeWalker : TreeParser



-							Match(input, TokenConstants.Up, null); if (state.failed) return ;
+							Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -1046,7 +1046,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,RULE,Follow._RULE_in_rule345); if (state.failed) return retval;

-			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Down, null); if (state.failed) return retval;
id=(GrammarAST)Match(input,ID,Follow._ID_in_rule349); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
@@ -1078,9 +1078,9 @@ public partial class CodeGenTreeWalker : TreeParser

Match(input,ARG,Follow._ARG_in_rule370); if (state.failed) return retval;

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:219:10: ( ARG_ACTION )?
int alt18=2;
int LA18_0 = input.LA(1);
@@ -1102,13 +1102,13 @@ public partial class CodeGenTreeWalker : TreeParser
}


-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}
Match(input,RET,Follow._RET_in_rule382); if (state.failed) return retval;

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:220:10: ( ARG_ACTION )?
int alt19=2;
int LA19_0 = input.LA(1);
@@ -1130,7 +1130,7 @@ public partial class CodeGenTreeWalker : TreeParser
}


-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}
// Grammars\\CodeGenTreeWalker.g3:221:4: ( throwsSpec )?
int alt20=2;
@@ -1171,9 +1171,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_rule404); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:222:16: ( . )*
for ( ; ; )
{
@@ -1210,7 +1210,7 @@ public partial class CodeGenTreeWalker : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}

}
@@ -1261,9 +1261,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_rule427); if (state.failed) return retval;

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+						Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:224:18: ( . )*
for ( ; ; )
{
@@ -1300,7 +1300,7 @@ public partial class CodeGenTreeWalker : TreeParser



-						Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+						Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}

}
@@ -1398,7 +1398,7 @@ public partial class CodeGenTreeWalker : TreeParser

Match(input,EOR,Follow._EOR_in_rule462); if (state.failed) return retval;

-			Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -1504,7 +1504,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,THROWS,Follow._THROWS_in_throwsSpec512); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:319:15: ( ID )+
int cnt27=0;
for ( ; ; )
@@ -1543,7 +1543,7 @@ public partial class CodeGenTreeWalker : TreeParser



-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;

}

@@ -1572,9 +1572,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_ruleScopeSpec529); if (state.failed) return ;

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:323:15: ( ^( AMPERSAND ( . )* ) )*
for ( ; ; )
{
@@ -1594,9 +1594,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_ruleScopeSpec534); if (state.failed) return ;

-						if ( input.LA(1)==TokenConstants.Down )
+						if ( input.LA(1)==TokenTypes.Down )
{
-							Match(input, TokenConstants.Down, null); if (state.failed) return ;
+							Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:323:29: ( . )*
for ( ; ; )
{
@@ -1633,7 +1633,7 @@ public partial class CodeGenTreeWalker : TreeParser



-							Match(input, TokenConstants.Up, null); if (state.failed) return ;
+							Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -1700,7 +1700,7 @@ public partial class CodeGenTreeWalker : TreeParser



-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -1824,7 +1824,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,BLOCK,Follow._BLOCK_in_block604); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:364:4: ( ^( OPTIONS ( . )* ) )?
int alt33=2;
int LA33_0 = input.LA(1);
@@ -1840,9 +1840,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_block612); if (state.failed) return retval;

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+						Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:364:16: ( . )*
for ( ; ; )
{
@@ -1879,7 +1879,7 @@ public partial class CodeGenTreeWalker : TreeParser



-						Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+						Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}

}
@@ -1960,7 +1960,7 @@ public partial class CodeGenTreeWalker : TreeParser

Match(input,EOB,Follow._EOB_in_block650); if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -2016,9 +2016,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
s=(GrammarAST)Match(input,BLOCK,Follow._BLOCK_in_setBlock682); if (state.failed) return retval;

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:411:14: ( . )*
for ( ; ; )
{
@@ -2055,7 +2055,7 @@ public partial class CodeGenTreeWalker : TreeParser



-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -2120,7 +2120,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,ALT,Follow._ALT_in_setAlternative702); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\CodeGenTreeWalker.g3:447:10: ( setElement )+
int cnt37=0;
for ( ; ; )
@@ -2164,7 +2164,7 @@ public partial class CodeGenTreeWalker : TreeParser

Match(input,EOA,Follow._EOA_in_setAlternative707); if (state.failed) return ;

-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;

}

@@ -2321,11 +2321,11 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,CATCH,Follow._CATCH_in_exceptionHandler751); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
ARG_ACTION3=(GrammarAST)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_exceptionHandler753); if (state.failed) return ;
ACTION2=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_exceptionHandler755); if (state.failed) return ;

-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{

@@ -2363,10 +2363,10 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,FINALLY,Follow._FINALLY_in_finallyClause773); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
ACTION4=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_finallyClause775); if (state.failed) return ;

-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{

@@ -2447,7 +2447,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
a=(GrammarAST)Match(input,ALT,Follow._ALT_in_alternative804); if (state.failed) return retval;

-			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:509:4: (e= element[null,null] )+
int cnt41=0;
for ( ; ; )
@@ -2504,7 +2504,7 @@ public partial class CodeGenTreeWalker : TreeParser

Match(input,EOA,Follow._EOA_in_alternative835); if (state.failed) return retval;

-			Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}

@@ -2564,14 +2564,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
ROOT5=(GrammarAST)Match(input,ROOT,Follow._ROOT_in_element870); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_element874);
e=element(label, ROOT5);

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = (e!=null?e.code:default(StringTemplate));
@@ -2584,14 +2584,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
BANG6=(GrammarAST)Match(input,BANG,Follow._BANG_in_element887); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_element891);
e=element(label, BANG6);

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = (e!=null?e.code:default(StringTemplate));
@@ -2604,14 +2604,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
n=(GrammarAST)Match(input,NOT,Follow._NOT_in_element907); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._notElement_in_element909);
notElement7=notElement(n, label, astSuffix);

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = notElement7;
@@ -2624,7 +2624,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_element924); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
alabel=(GrammarAST)Match(input,ID,Follow._ID_in_element928); if (state.failed) return retval;
PushFollow(Follow._element_in_element932);
e=element(alabel, astSuffix);
@@ -2632,7 +2632,7 @@ public partial class CodeGenTreeWalker : TreeParser
state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = (e!=null?e.code:default(StringTemplate));
@@ -2645,7 +2645,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_element947); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
label2=(GrammarAST)Match(input,ID,Follow._ID_in_element951); if (state.failed) return retval;
PushFollow(Follow._element_in_element955);
e=element(label2, astSuffix);
@@ -2653,7 +2653,7 @@ public partial class CodeGenTreeWalker : TreeParser
state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = (e!=null?e.code:default(StringTemplate));
@@ -2666,11 +2666,11 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_element969); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
a=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_element973); if (state.failed) return retval;
b=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_element977); if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -2814,9 +2814,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,SYNPRED,Follow._SYNPRED_in_element1075); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:583:14: ( . )*
for ( ; ; )
{
@@ -2853,7 +2853,7 @@ public partial class CodeGenTreeWalker : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}

}
@@ -2863,9 +2863,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,BACKTRACK_SEMPRED,Follow._BACKTRACK_SEMPRED_in_element1086); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:585:24: ( . )*
for ( ; ; )
{
@@ -2902,7 +2902,7 @@ public partial class CodeGenTreeWalker : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}

}
@@ -3134,9 +3134,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
assign_st=(GrammarAST)Match(input,BLOCK,Follow._BLOCK_in_notElement1195); if (state.failed) return code;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return code;
+					Match(input, TokenTypes.Down, null); if (state.failed) return code;
// Grammars\\CodeGenTreeWalker.g3:644:23: ( . )*
for ( ; ; )
{
@@ -3173,7 +3173,7 @@ public partial class CodeGenTreeWalker : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return code;
+					Match(input, TokenTypes.Up, null); if (state.failed) return code;
}
if ( state.backtracking == 0 )
{
@@ -3308,14 +3308,14 @@ public partial class CodeGenTreeWalker : TreeParser
}
Match(input,OPTIONAL,Follow._OPTIONAL_in_ebnf1260); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._block_in_ebnf1264);
blk=block("optionalBlock", dfa);

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = (blk!=null?blk.code:default(StringTemplate));
@@ -3332,14 +3332,14 @@ public partial class CodeGenTreeWalker : TreeParser
}
Match(input,CLOSURE,Follow._CLOSURE_in_ebnf1285); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._block_in_ebnf1289);
blk=block("closureBlock", dfa);

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = (blk!=null?blk.code:default(StringTemplate));
@@ -3356,14 +3356,14 @@ public partial class CodeGenTreeWalker : TreeParser
}
Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_ebnf1310); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._block_in_ebnf1314);
blk=block("positiveClosureBlock", dfa);

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = (blk!=null?blk.code:default(StringTemplate));
@@ -3442,7 +3442,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_tree_1352); if (state.failed) return retval;

-			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_tree_1359);
el=element(null, rootSuffix);

@@ -3568,7 +3568,7 @@ public partial class CodeGenTreeWalker : TreeParser



-			Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}

@@ -3691,9 +3691,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
r=(GrammarAST)Match(input,RULE_REF,Follow._RULE_REF_in_atom1469); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:780:20: (rarg= ARG_ACTION )?
int alt52=2;
int LA52_0 = input.LA(1);
@@ -3715,7 +3715,7 @@ public partial class CodeGenTreeWalker : TreeParser
}


-					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -3771,9 +3771,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
t=(GrammarAST)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_atom1492); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:825:19: (targ= ARG_ACTION )?
int alt53=2;
int LA53_0 = input.LA(1);
@@ -3795,7 +3795,7 @@ public partial class CodeGenTreeWalker : TreeParser
}


-					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -3958,7 +3958,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,DOT,Follow._DOT_in_atom1549); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
ID12=(GrammarAST)Match(input,ID,Follow._ID_in_atom1551); if (state.failed) return retval;
PushFollow(Follow._atom_in_atom1555);
a=atom(ID12, label, astSuffix);
@@ -3966,7 +3966,7 @@ public partial class CodeGenTreeWalker : TreeParser
state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = (a!=null?a.code:default(StringTemplate));
@@ -4066,9 +4066,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
s=(GrammarAST)Match(input,BLOCK,Follow._BLOCK_in_set1613); if (state.failed) return code;

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null); if (state.failed) return code;
+				Match(input, TokenTypes.Down, null); if (state.failed) return code;
// Grammars\\CodeGenTreeWalker.g3:974:14: ( . )*
for ( ; ; )
{
@@ -4105,7 +4105,7 @@ public partial class CodeGenTreeWalker : TreeParser



-				Match(input, TokenConstants.Up, null); if (state.failed) return code;
+				Match(input, TokenTypes.Up, null); if (state.failed) return code;
}
if ( state.backtracking == 0 )
{
@@ -4204,11 +4204,11 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_setElement1649); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_setElement1651); if (state.failed) return ;
Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_setElement1653); if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -4319,7 +4319,7 @@ public partial class CodeGenTreeWalker : TreeParser
}
r=(GrammarAST)Match(input,REWRITE,Follow._REWRITE_in_rewrite1690); if (state.failed) return retval;

-					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:1048:17: (pred= SEMPRED )?
int alt57=2;
int LA57_0 = input.LA(1);
@@ -4346,7 +4346,7 @@ public partial class CodeGenTreeWalker : TreeParser
state._fsp--;
if (state.failed) return retval;

-					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -4434,7 +4434,7 @@ public partial class CodeGenTreeWalker : TreeParser

}

-			Match(input, TokenConstants.Down, null); if (state.failed) return code;
+			Match(input, TokenTypes.Down, null); if (state.failed) return code;
PushFollow(Follow._rewrite_alternative_in_rewrite_block1748);
alt=rewrite_alternative();

@@ -4442,7 +4442,7 @@ public partial class CodeGenTreeWalker : TreeParser
if (state.failed) return code;
Match(input,EOB,Follow._EOB_in_rewrite_block1753); if (state.failed) return code;

-			Match(input, TokenConstants.Up, null); if (state.failed) return code;
+			Match(input, TokenTypes.Up, null); if (state.failed) return code;
if ( state.backtracking == 0 )
{

@@ -4594,7 +4594,7 @@ public partial class CodeGenTreeWalker : TreeParser
code =templates.GetInstanceOf("rewriteElementList");
}

-				Match(input, TokenConstants.Down, null); if (state.failed) return code;
+				Match(input, TokenTypes.Down, null); if (state.failed) return code;
// Grammars\\CodeGenTreeWalker.g3:1100:4: ( (el= rewrite_element )+ | EPSILON )
int alt60=2;
int LA60_0 = input.LA(1);
@@ -4693,7 +4693,7 @@ public partial class CodeGenTreeWalker : TreeParser

Match(input,EOA,Follow._EOA_in_rewrite_alternative1843); if (state.failed) return code;

-				Match(input, TokenConstants.Up, null); if (state.failed) return code;
+				Match(input, TokenTypes.Up, null); if (state.failed) return code;

}
break;
@@ -4911,14 +4911,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,OPTIONAL,Follow._OPTIONAL_in_rewrite_ebnf1929); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._rewrite_block_in_rewrite_ebnf1931);
rewrite_block19=rewrite_block("rewriteOptionalBlock");

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = rewrite_block19;
@@ -4939,14 +4939,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,CLOSURE,Follow._CLOSURE_in_rewrite_ebnf1949); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._rewrite_block_in_rewrite_ebnf1951);
rewrite_block20=rewrite_block("rewriteClosureBlock");

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = rewrite_block20;
@@ -4967,14 +4967,14 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_rewrite_ebnf1969); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._rewrite_block_in_rewrite_ebnf1971);
rewrite_block21=rewrite_block("rewritePositiveClosureBlock");

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.code = rewrite_block21;
@@ -5036,7 +5036,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_rewrite_tree2004); if (state.failed) return retval;

-			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._rewrite_atom_in_rewrite_tree2011);
r=rewrite_atom(true);

@@ -5098,7 +5098,7 @@ public partial class CodeGenTreeWalker : TreeParser



-			Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -5266,9 +5266,9 @@ public partial class CodeGenTreeWalker : TreeParser
{
tk=(GrammarAST)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_rewrite_atom2093); if (state.failed) return retval;

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+						Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\CodeGenTreeWalker.g3:1243:20: (arg= ARG_ACTION )?
int alt65=2;
int LA65_0 = input.LA(1);
@@ -5290,7 +5290,7 @@ public partial class CodeGenTreeWalker : TreeParser
}


-						Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+						Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}

}
@@ -5512,11 +5512,11 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,ALT,Follow._ALT_in_rewrite_template2164); if (state.failed) return code;

-				Match(input, TokenConstants.Down, null); if (state.failed) return code;
+				Match(input, TokenTypes.Down, null); if (state.failed) return code;
Match(input,EPSILON,Follow._EPSILON_in_rewrite_template2166); if (state.failed) return code;
Match(input,EOA,Follow._EOA_in_rewrite_template2168); if (state.failed) return code;

-				Match(input, TokenConstants.Up, null); if (state.failed) return code;
+				Match(input, TokenTypes.Up, null); if (state.failed) return code;
if ( state.backtracking == 0 )
{
code =templates.GetInstanceOf("rewriteEmptyTemplate");
@@ -5529,7 +5529,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,TEMPLATE,Follow._TEMPLATE_in_rewrite_template2179); if (state.failed) return code;

-				Match(input, TokenConstants.Down, null); if (state.failed) return code;
+				Match(input, TokenTypes.Down, null); if (state.failed) return code;
// Grammars\\CodeGenTreeWalker.g3:1362:16: (id= ID |ind= ACTION )
int alt68=2;
int LA68_0 = input.LA(1);
@@ -5590,9 +5590,9 @@ public partial class CodeGenTreeWalker : TreeParser
}
Match(input,ARGLIST,Follow._ARGLIST_in_rewrite_template2201); if (state.failed) return code;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return code;
+					Match(input, TokenTypes.Down, null); if (state.failed) return code;
// Grammars\\CodeGenTreeWalker.g3:1381:5: ( ^( ARG arg= ID a= ACTION ) )*
for ( ; ; )
{
@@ -5612,7 +5612,7 @@ public partial class CodeGenTreeWalker : TreeParser
{
Match(input,ARG,Follow._ARG_in_rewrite_template2211); if (state.failed) return code;

-							Match(input, TokenConstants.Down, null); if (state.failed) return code;
+							Match(input, TokenTypes.Down, null); if (state.failed) return code;
arg=(GrammarAST)Match(input,ID,Follow._ID_in_rewrite_template2215); if (state.failed) return code;
a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_rewrite_template2219); if (state.failed) return code;
if ( state.backtracking == 0 )
@@ -5627,7 +5627,7 @@ public partial class CodeGenTreeWalker : TreeParser

}

-							Match(input, TokenConstants.Up, null); if (state.failed) return code;
+							Match(input, TokenTypes.Up, null); if (state.failed) return code;

}
break;
@@ -5642,7 +5642,7 @@ public partial class CodeGenTreeWalker : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return code;
+					Match(input, TokenTypes.Up, null); if (state.failed) return code;
}
// Grammars\\CodeGenTreeWalker.g3:1393:4: ( DOUBLE_QUOTE_STRING_LITERAL | DOUBLE_ANGLE_STRING_LITERAL )?
int alt70=3;
@@ -5694,7 +5694,7 @@ public partial class CodeGenTreeWalker : TreeParser
}


-				Match(input, TokenConstants.Up, null); if (state.failed) return code;
+				Match(input, TokenTypes.Up, null); if (state.failed) return code;

}
break;
diff --git a/Antlr3/Grammars/DefineGrammarItemsWalker.cs b/Antlr3/Grammars/DefineGrammarItemsWalker.cs
index a83336d..c49117b 100644
--- a/Antlr3/Grammars/DefineGrammarItemsWalker.cs
+++ b/Antlr3/Grammars/DefineGrammarItemsWalker.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\DefineGrammarItemsWalker.g3 2009-04-16 21:27:02
+// $ANTLR 3.1.2 Grammars\\DefineGrammarItemsWalker.g3 2009-04-17 13:36:45

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -166,18 +166,9 @@ public partial class DefineGrammarItemsWalker : TreeParser

protected class AttributeScopeActions_scope
{
-		public static void PushScope( DefineGrammarItemsWalker grammar )
-		{
-			grammar.AttributeScopeActions_stack.Push( new AttributeScopeActions_scope() );
-		}
-		public static void PopScope( DefineGrammarItemsWalker grammar )
-		{
-			grammar.AttributeScopeActions_stack.Pop();
-		}
-
public Dictionary<GrammarAST, GrammarAST> actions;
}
-	protected Stack<AttributeScopeActions_scope> AttributeScopeActions_stack = new Stack<AttributeScopeActions_scope>();
+	partial void AttributeScopeActions_scopeInit( AttributeScopeActions_scope scope );partial void AttributeScopeActions_scopeAfter( AttributeScopeActions_scope scope );protected Stack<AttributeScopeActions_scope> AttributeScopeActions_stack = new Stack<AttributeScopeActions_scope>();

public DefineGrammarItemsWalker( ITreeNodeStream input )
: this( input, new RecognizerSharedState() )
@@ -256,14 +247,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
grammar.type = Grammar.LEXER;
}

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._grammarSpec_in_grammar_83);
grammarSpec();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -277,14 +268,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
grammar.type = Grammar.PARSER;
}

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._grammarSpec_in_grammar_97);
grammarSpec();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -298,14 +289,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
grammar.type = Grammar.TREE_PARSER;
}

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._grammarSpec_in_grammar_111);
grammarSpec();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -319,14 +310,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
grammar.type = Grammar.COMBINED;
}

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._grammarSpec_in_grammar_125);
grammarSpec();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -356,7 +347,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
// Grammars\\DefineGrammarItemsWalker.g3:109:0: attrScope : ^( 'scope' name= ID ( attrScopeAction )* attrs= ACTION ) ;
private void attrScope(  )
{
-		AttributeScopeActions_scope.PushScope(this);
+		AttributeScopeActions_stack.Push(new AttributeScopeActions_scope());AttributeScopeActions_scopeInit(AttributeScopeActions_stack.Peek());

GrammarAST name=null;
GrammarAST attrs=null;
@@ -371,7 +362,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_attrScope150); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
name=(GrammarAST)Match(input,ID,Follow._ID_in_attrScope154); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:115:23: ( attrScopeAction )*
for ( ; ; )
@@ -410,7 +401,7 @@ public partial class DefineGrammarItemsWalker : TreeParser

attrs=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_attrScope161); if (state.failed) return ;

-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{

@@ -432,7 +423,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}
finally
{
-			AttributeScopeActions_scope.PopScope(this);
+			AttributeScopeActions_scopeAfter(AttributeScopeActions_stack.Peek());AttributeScopeActions_stack.Pop();

}
return ;
@@ -454,11 +445,11 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_attrScopeAction179); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
ID1=(GrammarAST)Match(input,ID,Follow._ID_in_attrScopeAction181); if (state.failed) return ;
ACTION2=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_attrScopeAction183); if (state.failed) return ;

-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{

@@ -756,7 +747,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
amp=(GrammarAST)Match(input,AMPERSAND,Follow._AMPERSAND_in_action286); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
id1=(GrammarAST)Match(input,ID,Follow._ID_in_action290); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:154:4: (id2= ID a1= ACTION |a2= ACTION )
int alt10=2;
@@ -806,7 +797,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}


-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{

@@ -841,9 +832,9 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_optionsSpec353); if (state.failed) return ;

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:166:14: ( . )*
for ( ; ; )
{
@@ -880,7 +871,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -910,7 +901,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,IMPORT,Follow._IMPORT_in_delegateGrammars370); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:170:16: ( ^( ASSIGN ID ID ) | ID )+
int cnt12=0;
for ( ; ; )
@@ -935,11 +926,11 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_delegateGrammars375); if (state.failed) return ;

-					Match(input, TokenConstants.Down, null); if (state.failed) return ;
+					Match(input, TokenTypes.Down, null); if (state.failed) return ;
Match(input,ID,Follow._ID_in_delegateGrammars377); if (state.failed) return ;
Match(input,ID,Follow._ID_in_delegateGrammars379); if (state.failed) return ;

-					Match(input, TokenConstants.Up, null); if (state.failed) return ;
+					Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -966,7 +957,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;

}

@@ -995,7 +986,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,TOKENS,Follow._TOKENS_in_tokensSpec402); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:174:14: ( tokenSpec )+
int cnt13=0;
for ( ; ; )
@@ -1038,7 +1029,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;

}

@@ -1097,7 +1088,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_tokenSpec431); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
Match(input,TOKEN_REF,Follow._TOKEN_REF_in_tokenSpec436); if (state.failed) return ;
if ( input.LA(1)==CHAR_LITERAL||input.LA(1)==STRING_LITERAL )
{
@@ -1112,7 +1103,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}


-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -1229,7 +1220,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
RULE3=(GrammarAST)Match(input,RULE,Follow._RULE_in_rule491); if (state.failed) return retval;

-			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Down, null); if (state.failed) return retval;
id=(GrammarAST)Match(input,ID,Follow._ID_in_rule495); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
@@ -1261,9 +1252,9 @@ public partial class DefineGrammarItemsWalker : TreeParser

Match(input,ARG,Follow._ARG_in_rule512); if (state.failed) return retval;

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\DefineGrammarItemsWalker.g3:200:11: (args= ARG_ACTION )?
int alt17=2;
int LA17_0 = input.LA(1);
@@ -1285,13 +1276,13 @@ public partial class DefineGrammarItemsWalker : TreeParser
}


-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}
Match(input,RET,Follow._RET_in_rule528); if (state.failed) return retval;

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\DefineGrammarItemsWalker.g3:201:11: (ret= ARG_ACTION )?
int alt18=2;
int LA18_0 = input.LA(1);
@@ -1313,7 +1304,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}


-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}
// Grammars\\DefineGrammarItemsWalker.g3:202:4: ( throwsSpec )?
int alt19=2;
@@ -1498,7 +1489,7 @@ public partial class DefineGrammarItemsWalker : TreeParser

}

-			Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}

@@ -1531,11 +1522,11 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
amp=(GrammarAST)Match(input,AMPERSAND,Follow._AMPERSAND_in_ruleAction625); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
id=(GrammarAST)Match(input,ID,Follow._ID_in_ruleAction629); if (state.failed) return ;
a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_ruleAction633); if (state.failed) return ;

-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{
if (r!=null) r.DefineNamedAction(amp,id,a);
@@ -1624,7 +1615,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,THROWS,Follow._THROWS_in_throwsSpec693); if (state.failed) return exceptions;

-			Match(input, TokenConstants.Down, null); if (state.failed) return exceptions;
+			Match(input, TokenTypes.Down, null); if (state.failed) return exceptions;
// Grammars\\DefineGrammarItemsWalker.g3:268:15: ( ID )+
int cnt24=0;
for ( ; ; )
@@ -1667,7 +1658,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-			Match(input, TokenConstants.Up, null); if (state.failed) return exceptions;
+			Match(input, TokenTypes.Up, null); if (state.failed) return exceptions;

}

@@ -1689,7 +1680,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
// Grammars\\DefineGrammarItemsWalker.g3:271:0: ruleScopeSpec[Rule r] : ^( 'scope' ( ( attrScopeAction )* attrs= ACTION )? (uses= ID )* ) ;
private void ruleScopeSpec( Rule r )
{
-		AttributeScopeActions_scope.PushScope(this);
+		AttributeScopeActions_stack.Push(new AttributeScopeActions_scope());AttributeScopeActions_scopeInit(AttributeScopeActions_stack.Peek());

GrammarAST attrs=null;
GrammarAST uses=null;
@@ -1704,9 +1695,9 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_ruleScopeSpec726); if (state.failed) return ;

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:278:4: ( ( attrScopeAction )* attrs= ACTION )?
int alt26=2;
int LA26_0 = input.LA(1);
@@ -1819,7 +1810,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -1832,7 +1823,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}
finally
{
-			AttributeScopeActions_scope.PopScope(this);
+			AttributeScopeActions_scopeAfter(AttributeScopeActions_stack.Peek());AttributeScopeActions_stack.Pop();

}
return ;
@@ -1863,7 +1854,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,BLOCK,Follow._BLOCK_in_block793); if (state.failed) return retval;

-			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\DefineGrammarItemsWalker.g3:313:4: ( optionsSpec )?
int alt28=2;
int LA28_0 = input.LA(1);
@@ -1975,7 +1966,7 @@ public partial class DefineGrammarItemsWalker : TreeParser

Match(input,EOB,Follow._EOB_in_block835); if (state.failed) return retval;

-			Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}

@@ -2009,11 +2000,11 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
amp=(GrammarAST)Match(input,AMPERSAND,Follow._AMPERSAND_in_blockAction859); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
id=(GrammarAST)Match(input,ID,Follow._ID_in_blockAction863); if (state.failed) return ;
a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_blockAction867); if (state.failed) return ;

-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;

}

@@ -2069,7 +2060,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,ALT,Follow._ALT_in_alternative888); if (state.failed) return retval;

-			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\DefineGrammarItemsWalker.g3:354:11: ( element )+
int cnt31=0;
for ( ; ; )
@@ -2113,7 +2104,7 @@ public partial class DefineGrammarItemsWalker : TreeParser

Match(input,EOA,Follow._EOA_in_alternative895); if (state.failed) return retval;

-			Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}

@@ -2269,11 +2260,11 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,CATCH,Follow._CATCH_in_exceptionHandler937); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
Match(input,ARG_ACTION,Follow._ARG_ACTION_in_exceptionHandler939); if (state.failed) return ;
ACTION7=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_exceptionHandler941); if (state.failed) return ;

-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{
TrackInlineAction(ACTION7);
@@ -2308,10 +2299,10 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,FINALLY,Follow._FINALLY_in_finallyClause959); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
ACTION8=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_finallyClause961); if (state.failed) return ;

-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{
TrackInlineAction(ACTION8);
@@ -2364,14 +2355,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,ROOT,Follow._ROOT_in_element978); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_element980);
element();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -2380,14 +2371,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,BANG,Follow._BANG_in_element989); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_element991);
element();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -2407,14 +2398,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,NOT,Follow._NOT_in_element1008); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_element1010);
element();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -2423,7 +2414,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,RANGE,Follow._RANGE_in_element1019); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._atom_in_element1021);
atom(null);

@@ -2435,7 +2426,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -2444,7 +2435,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_element1034); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._atom_in_element1036);
atom(null);

@@ -2456,7 +2447,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -2465,7 +2456,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_element1048); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
id=(GrammarAST)Match(input,ID,Follow._ID_in_element1052); if (state.failed) return retval;
PushFollow(Follow._element_in_element1056);
el=element();
@@ -2473,7 +2464,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -2504,7 +2495,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_element1069); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
id2=(GrammarAST)Match(input,ID,Follow._ID_in_element1073); if (state.failed) return retval;
PushFollow(Follow._element_in_element1077);
a2=element();
@@ -2534,7 +2525,7 @@ public partial class DefineGrammarItemsWalker : TreeParser

}

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -2565,14 +2556,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,SYNPRED,Follow._SYNPRED_in_element1110); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._block_in_element1112);
block();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -2630,9 +2621,9 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,BACKTRACK_SEMPRED,Follow._BACKTRACK_SEMPRED_in_element1166); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\DefineGrammarItemsWalker.g3:437:26: ( . )*
for ( ; ; )
{
@@ -2669,7 +2660,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}

}
@@ -2750,14 +2741,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,OPTIONAL,Follow._OPTIONAL_in_ebnf1219); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
PushFollow(Follow._block_in_ebnf1221);
block();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -2766,14 +2757,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,CLOSURE,Follow._CLOSURE_in_ebnf1230); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
PushFollow(Follow._block_in_ebnf1232);
block();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -2782,14 +2773,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_ebnf1241); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
PushFollow(Follow._block_in_ebnf1243);
block();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -2850,14 +2841,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,CLOSURE,Follow._CLOSURE_in_dotLoop1262); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._dotBlock_in_dotLoop1264);
dotBlock();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -2866,14 +2857,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_dotLoop1274); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._dotBlock_in_dotLoop1276);
dotBlock();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -2923,17 +2914,17 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,BLOCK,Follow._BLOCK_in_dotBlock1299); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
Match(input,ALT,Follow._ALT_in_dotBlock1303); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
Match(input,WILDCARD,Follow._WILDCARD_in_dotBlock1305); if (state.failed) return ;
Match(input,EOA,Follow._EOA_in_dotBlock1307); if (state.failed) return ;

-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;
Match(input,EOB,Follow._EOB_in_dotBlock1311); if (state.failed) return ;

-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;

}

@@ -2962,7 +2953,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_tree_1325); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:479:17: ( element )+
int cnt39=0;
for ( ; ; )
@@ -3005,7 +2996,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;

}

@@ -3087,9 +3078,9 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
rr=(GrammarAST)Match(input,RULE_REF,Follow._RULE_REF_in_atom1345); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return ;
+					Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:483:19: (rarg= ARG_ACTION )?
int alt40=2;
int LA40_0 = input.LA(1);
@@ -3111,7 +3102,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}


-					Match(input, TokenConstants.Up, null); if (state.failed) return ;
+					Match(input, TokenTypes.Up, null); if (state.failed) return ;
}
if ( state.backtracking == 0 )
{
@@ -3132,9 +3123,9 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
t=(GrammarAST)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_atom1367); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return ;
+					Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:492:19: (targ= ARG_ACTION )?
int alt41=2;
int LA41_0 = input.LA(1);
@@ -3156,7 +3147,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}


-					Match(input, TokenConstants.Up, null); if (state.failed) return ;
+					Match(input, TokenTypes.Up, null); if (state.failed) return ;
}
if ( state.backtracking == 0 )
{
@@ -3227,7 +3218,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,DOT,Follow._DOT_in_atom1415); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
ID11=(GrammarAST)Match(input,ID,Follow._ID_in_atom1417); if (state.failed) return ;
PushFollow(Follow._atom_in_atom1419);
atom(ID11);
@@ -3235,7 +3226,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -3337,7 +3328,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,REWRITE,Follow._REWRITE_in_rewrite1461); if (state.failed) return retval;

-					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\DefineGrammarItemsWalker.g3:546:15: (pred= SEMPRED )?
int alt43=2;
int LA43_0 = input.LA(1);
@@ -3364,7 +3355,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
state._fsp--;
if (state.failed) return retval;

-					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -3432,7 +3423,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,BLOCK,Follow._BLOCK_in_rewrite_block1505); if (state.failed) return retval;

-			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._rewrite_alternative_in_rewrite_block1507);
rewrite_alternative();

@@ -3440,7 +3431,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
if (state.failed) return retval;
Match(input,EOB,Follow._EOB_in_rewrite_block1509); if (state.failed) return retval;

-			Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -3582,7 +3573,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}
a=(GrammarAST)Match(input,ALT,Follow._ALT_in_rewrite_alternative1541); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:585:36: ( ( rewrite_element )+ | EPSILON )
int alt46=2;
int LA46_0 = input.LA(1);
@@ -3663,7 +3654,7 @@ public partial class DefineGrammarItemsWalker : TreeParser

Match(input,EOA,Follow._EOA_in_rewrite_alternative1558); if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -3844,14 +3835,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,OPTIONAL,Follow._OPTIONAL_in_rewrite_ebnf1611); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
PushFollow(Follow._rewrite_block_in_rewrite_ebnf1613);
rewrite_block();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -3860,14 +3851,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,CLOSURE,Follow._CLOSURE_in_rewrite_ebnf1622); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
PushFollow(Follow._rewrite_block_in_rewrite_ebnf1624);
rewrite_block();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -3876,14 +3867,14 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_rewrite_ebnf1633); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
PushFollow(Follow._rewrite_block_in_rewrite_ebnf1635);
rewrite_block();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -3914,7 +3905,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_rewrite_tree1652); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
PushFollow(Follow._rewrite_atom_in_rewrite_tree1654);
rewrite_atom();

@@ -3956,7 +3947,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;

}

@@ -4096,9 +4087,9 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,TOKEN_REF,Follow._TOKEN_REF_in_rewrite_atom1689); if (state.failed) return retval;

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+						Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\DefineGrammarItemsWalker.g3:635:5: ( ARG_ACTION )?
int alt51=2;
int LA51_0 = input.LA(1);
@@ -4127,7 +4118,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}


-						Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+						Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}

}
@@ -4236,11 +4227,11 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,ALT,Follow._ALT_in_rewrite_template1759); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
Match(input,EPSILON,Follow._EPSILON_in_rewrite_template1761); if (state.failed) return ;
Match(input,EOA,Follow._EOA_in_rewrite_template1763); if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -4249,7 +4240,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,TEMPLATE,Follow._TEMPLATE_in_rewrite_template1772); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:655:16: (id= ID |ind= ACTION )
int alt54=2;
int LA54_0 = input.LA(1);
@@ -4290,9 +4281,9 @@ public partial class DefineGrammarItemsWalker : TreeParser

Match(input,ARGLIST,Follow._ARGLIST_in_rewrite_template1789); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return ;
+					Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\DefineGrammarItemsWalker.g3:657:5: ( ^( ARG arg= ID a= ACTION ) )*
for ( ; ; )
{
@@ -4312,11 +4303,11 @@ public partial class DefineGrammarItemsWalker : TreeParser
{
Match(input,ARG,Follow._ARG_in_rewrite_template1799); if (state.failed) return ;

-							Match(input, TokenConstants.Down, null); if (state.failed) return ;
+							Match(input, TokenTypes.Down, null); if (state.failed) return ;
arg=(GrammarAST)Match(input,ID,Follow._ID_in_rewrite_template1803); if (state.failed) return ;
a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_rewrite_template1807); if (state.failed) return ;

-							Match(input, TokenConstants.Up, null); if (state.failed) return ;
+							Match(input, TokenTypes.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{

@@ -4338,7 +4329,7 @@ public partial class DefineGrammarItemsWalker : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return ;
+					Match(input, TokenTypes.Up, null); if (state.failed) return ;
}
if ( state.backtracking == 0 )
{
@@ -4382,7 +4373,7 @@ public partial class DefineGrammarItemsWalker : TreeParser
}


-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
diff --git a/Antlr3/Grammars/TreeToNFAConverter.cs b/Antlr3/Grammars/TreeToNFAConverter.cs
index b315af7..0375919 100644
--- a/Antlr3/Grammars/TreeToNFAConverter.cs
+++ b/Antlr3/Grammars/TreeToNFAConverter.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\TreeToNFAConverter.g3 2009-04-16 21:09:09
+// $ANTLR 3.1.2 Grammars\\TreeToNFAConverter.g3 2009-04-17 13:33:49

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -228,14 +228,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,LEXER_GRAMMAR,Follow._LEXER_GRAMMAR_in_grammar_67); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
PushFollow(Follow._grammarSpec_in_grammar_69);
grammarSpec();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -244,14 +244,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,PARSER_GRAMMAR,Follow._PARSER_GRAMMAR_in_grammar_79); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
PushFollow(Follow._grammarSpec_in_grammar_81);
grammarSpec();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -260,14 +260,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,TREE_GRAMMAR,Follow._TREE_GRAMMAR_in_grammar_91); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
PushFollow(Follow._grammarSpec_in_grammar_93);
grammarSpec();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -276,14 +276,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,COMBINED_GRAMMAR,Follow._COMBINED_GRAMMAR_in_grammar_103); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
PushFollow(Follow._grammarSpec_in_grammar_105);
grammarSpec();

state._fsp--;
if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -324,7 +324,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_attrScope124); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
Match(input,ID,Follow._ID_in_attrScope126); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:101:18: ( ^( AMPERSAND ( . )* ) )*
for ( ; ; )
@@ -345,9 +345,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_attrScope131); if (state.failed) return ;

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null); if (state.failed) return ;
+						Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:101:32: ( . )*
for ( ; ; )
{
@@ -384,7 +384,7 @@ public partial class TreeToNFAConverter : TreeParser



-						Match(input, TokenConstants.Up, null); if (state.failed) return ;
+						Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -401,7 +401,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,ACTION,Follow._ACTION_in_attrScope140); if (state.failed) return ;

-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;

}

@@ -466,9 +466,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_grammarSpec169); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return ;
+					Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:107:15: ( . )*
for ( ; ; )
{
@@ -505,7 +505,7 @@ public partial class TreeToNFAConverter : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return ;
+					Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -528,9 +528,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,IMPORT,Follow._IMPORT_in_grammarSpec183); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return ;
+					Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:108:14: ( . )*
for ( ; ; )
{
@@ -567,7 +567,7 @@ public partial class TreeToNFAConverter : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return ;
+					Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -590,9 +590,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,TOKENS,Follow._TOKENS_in_grammarSpec197); if (state.failed) return ;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return ;
+					Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:109:14: ( . )*
for ( ; ; )
{
@@ -629,7 +629,7 @@ public partial class TreeToNFAConverter : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return ;
+					Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -691,9 +691,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_grammarSpec218); if (state.failed) return ;

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null); if (state.failed) return ;
+						Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:111:17: ( . )*
for ( ; ; )
{
@@ -730,7 +730,7 @@ public partial class TreeToNFAConverter : TreeParser



-						Match(input, TokenConstants.Up, null); if (state.failed) return ;
+						Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -854,7 +854,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,RULE,Follow._RULE_in_rule255); if (state.failed) return retval;

-			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Down, null); if (state.failed) return retval;
id=(GrammarAST)Match(input,ID,Follow._ID_in_rule259); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
@@ -889,9 +889,9 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,ARG,Follow._ARG_in_rule278); if (state.failed) return retval;

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:126:10: ( ARG_ACTION )?
int alt16=2;
int LA16_0 = input.LA(1);
@@ -913,13 +913,13 @@ public partial class TreeToNFAConverter : TreeParser
}


-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}
Match(input,RET,Follow._RET_in_rule290); if (state.failed) return retval;

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:127:10: ( ARG_ACTION )?
int alt17=2;
int LA17_0 = input.LA(1);
@@ -941,7 +941,7 @@ public partial class TreeToNFAConverter : TreeParser
}


-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}
// Grammars\\TreeToNFAConverter.g3:128:4: ( throwsSpec )?
int alt18=2;
@@ -982,9 +982,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_rule312); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:129:16: ( . )*
for ( ; ; )
{
@@ -1021,7 +1021,7 @@ public partial class TreeToNFAConverter : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}

}
@@ -1072,9 +1072,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_rule337); if (state.failed) return retval;

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+						Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:131:18: ( . )*
for ( ; ; )
{
@@ -1111,7 +1111,7 @@ public partial class TreeToNFAConverter : TreeParser



-						Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+						Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}

}
@@ -1192,7 +1192,7 @@ public partial class TreeToNFAConverter : TreeParser

}

-			Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}

@@ -1259,7 +1259,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,THROWS,Follow._THROWS_in_throwsSpec411); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:178:15: ( ID )+
int cnt25=0;
for ( ; ; )
@@ -1298,7 +1298,7 @@ public partial class TreeToNFAConverter : TreeParser



-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;

}

@@ -1327,9 +1327,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,SCOPE,Follow._SCOPE_in_ruleScopeSpec428); if (state.failed) return ;

-			if ( input.LA(1)==TokenConstants.Down )
+			if ( input.LA(1)==TokenTypes.Down )
{
-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:182:15: ( ^( AMPERSAND ( . )* ) )*
for ( ; ; )
{
@@ -1349,9 +1349,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_ruleScopeSpec433); if (state.failed) return ;

-						if ( input.LA(1)==TokenConstants.Down )
+						if ( input.LA(1)==TokenTypes.Down )
{
-							Match(input, TokenConstants.Down, null); if (state.failed) return ;
+							Match(input, TokenTypes.Down, null); if (state.failed) return ;
// Grammars\\TreeToNFAConverter.g3:182:29: ( . )*
for ( ; ; )
{
@@ -1388,7 +1388,7 @@ public partial class TreeToNFAConverter : TreeParser



-							Match(input, TokenConstants.Up, null); if (state.failed) return ;
+							Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -1455,7 +1455,7 @@ public partial class TreeToNFAConverter : TreeParser



-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;
}

}
@@ -1556,7 +1556,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,BLOCK,Follow._BLOCK_in_block490); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:197:13: ( ^( OPTIONS ( . )* ) )?
int alt31=2;
int LA31_0 = input.LA(1);
@@ -1572,9 +1572,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_block495); if (state.failed) return retval;

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+						Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:197:25: ( . )*
for ( ; ; )
{
@@ -1611,7 +1611,7 @@ public partial class TreeToNFAConverter : TreeParser



-						Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+						Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}

}
@@ -1677,7 +1677,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,EOB,Follow._EOB_in_block536); if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.g = factory.BuildAlternativeBlock(alts);
@@ -1718,7 +1718,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,ALT,Follow._ALT_in_alternative565); if (state.failed) return g;

-			Match(input, TokenConstants.Down, null); if (state.failed) return g;
+			Match(input, TokenTypes.Down, null); if (state.failed) return g;
// Grammars\\TreeToNFAConverter.g3:214:11: (e= element )+
int cnt34=0;
for ( ; ; )
@@ -1766,7 +1766,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,EOA,Follow._EOA_in_alternative577); if (state.failed) return g;

-			Match(input, TokenConstants.Up, null); if (state.failed) return g;
+			Match(input, TokenTypes.Up, null); if (state.failed) return g;
if ( state.backtracking == 0 )
{

@@ -1931,11 +1931,11 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,CATCH,Follow._CATCH_in_exceptionHandler624); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
Match(input,ARG_ACTION,Follow._ARG_ACTION_in_exceptionHandler626); if (state.failed) return ;
Match(input,ACTION,Follow._ACTION_in_exceptionHandler628); if (state.failed) return ;

-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;

}

@@ -1964,10 +1964,10 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,FINALLY,Follow._FINALLY_in_finallyClause644); if (state.failed) return ;

-			Match(input, TokenConstants.Down, null); if (state.failed) return ;
+			Match(input, TokenTypes.Down, null); if (state.failed) return ;
Match(input,ACTION,Follow._ACTION_in_finallyClause646); if (state.failed) return ;

-			Match(input, TokenConstants.Up, null); if (state.failed) return ;
+			Match(input, TokenTypes.Up, null); if (state.failed) return ;

}

@@ -2029,9 +2029,9 @@ public partial class TreeToNFAConverter : TreeParser
}
Match(input,REWRITE,Follow._REWRITE_in_rewrite669); if (state.failed) return retval;

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+						Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:247:14: ( . )*
for ( ; ; )
{
@@ -2068,7 +2068,7 @@ public partial class TreeToNFAConverter : TreeParser



-						Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+						Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}

}
@@ -2138,7 +2138,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,ROOT,Follow._ROOT_in_element696); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_element700);
e=element();

@@ -2149,7 +2149,7 @@ public partial class TreeToNFAConverter : TreeParser
retval.g = (e!=null?e.g:default(StateCluster));
}

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -2158,7 +2158,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,BANG,Follow._BANG_in_element711); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_element715);
e=element();

@@ -2169,7 +2169,7 @@ public partial class TreeToNFAConverter : TreeParser
retval.g = (e!=null?e.g:default(StateCluster));
}

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -2178,7 +2178,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,ASSIGN,Follow._ASSIGN_in_element724); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
Match(input,ID,Follow._ID_in_element726); if (state.failed) return retval;
PushFollow(Follow._element_in_element730);
e=element();
@@ -2190,7 +2190,7 @@ public partial class TreeToNFAConverter : TreeParser
retval.g = (e!=null?e.g:default(StateCluster));
}

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -2199,7 +2199,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_element739); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
Match(input,ID,Follow._ID_in_element741); if (state.failed) return retval;
PushFollow(Follow._element_in_element745);
e=element();
@@ -2211,7 +2211,7 @@ public partial class TreeToNFAConverter : TreeParser
retval.g = (e!=null?e.g:default(StateCluster));
}

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -2220,7 +2220,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,RANGE,Follow._RANGE_in_element756); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._atom_in_element760);
a=atom(null);

@@ -2232,7 +2232,7 @@ public partial class TreeToNFAConverter : TreeParser
state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{
retval.g = factory.BuildRange(grammar.GetTokenType((a!=null?(input.TokenStream.ToString(
@@ -2250,11 +2250,11 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_element779); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
c1=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_element783); if (state.failed) return retval;
c2=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_element787); if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -2316,14 +2316,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,SYNPRED,Follow._SYNPRED_in_element828); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._block_in_element830);
block();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -2376,9 +2376,9 @@ public partial class TreeToNFAConverter : TreeParser
{
bpred=(GrammarAST)Match(input,BACKTRACK_SEMPRED,Follow._BACKTRACK_SEMPRED_in_element882); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:273:32: ( . )*
for ( ; ; )
{
@@ -2415,7 +2415,7 @@ public partial class TreeToNFAConverter : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -2587,14 +2587,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,OPTIONAL,Follow._OPTIONAL_in_ebnf953); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._block_in_ebnf957);
b=block();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -2622,14 +2622,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,CLOSURE,Follow._CLOSURE_in_ebnf970); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._block_in_ebnf974);
b=block();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -2661,14 +2661,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_ebnf987); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._block_in_ebnf991);
b=block();

state._fsp--;
if (state.failed) return retval;

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -2733,7 +2733,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_tree_1019); if (state.failed) return retval;

-			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Down, null); if (state.failed) return retval;
PushFollow(Follow._element_in_tree_1026);
e=element();

@@ -2802,7 +2802,7 @@ public partial class TreeToNFAConverter : TreeParser

}

-			Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}

@@ -2876,7 +2876,7 @@ public partial class TreeToNFAConverter : TreeParser
{
n=(GrammarAST)Match(input,NOT,Follow._NOT_in_atom_or_notatom1083); if (state.failed) return g;

-				Match(input, TokenConstants.Down, null); if (state.failed) return g;
+				Match(input, TokenTypes.Down, null); if (state.failed) return g;
// Grammars\\TreeToNFAConverter.g3:389:4: (c= CHAR_LITERAL (ast1= ast_suffix )? |t= TOKEN_REF (ast3= ast_suffix )? | set )
int alt46=3;
switch ( input.LA(1) )
@@ -3074,7 +3074,7 @@ public partial class TreeToNFAConverter : TreeParser
n.followingNFAState = g.right;
}

-				Match(input, TokenConstants.Up, null); if (state.failed) return g;
+				Match(input, TokenTypes.Up, null); if (state.failed) return g;

}
break;
@@ -3167,9 +3167,9 @@ public partial class TreeToNFAConverter : TreeParser
{
r=(GrammarAST)Match(input,RULE_REF,Follow._RULE_REF_in_atom1176); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:471:18: (rarg= ARG_ACTION )?
int alt48=2;
int LA48_0 = input.LA(1);
@@ -3215,7 +3215,7 @@ public partial class TreeToNFAConverter : TreeParser
}


-					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -3244,9 +3244,9 @@ public partial class TreeToNFAConverter : TreeParser
{
t=(GrammarAST)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_atom1206); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:489:20: (targ= ARG_ACTION )?
int alt50=2;
int LA50_0 = input.LA(1);
@@ -3292,7 +3292,7 @@ public partial class TreeToNFAConverter : TreeParser
}


-					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -3324,9 +3324,9 @@ public partial class TreeToNFAConverter : TreeParser
{
c=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_atom1237); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:510:23: (as3= ast_suffix )?
int alt52=2;
int LA52_0 = input.LA(1);
@@ -3352,7 +3352,7 @@ public partial class TreeToNFAConverter : TreeParser
}


-					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -3376,9 +3376,9 @@ public partial class TreeToNFAConverter : TreeParser
{
s=(GrammarAST)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_atom1261); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:523:25: (as4= ast_suffix )?
int alt53=2;
int LA53_0 = input.LA(1);
@@ -3404,7 +3404,7 @@ public partial class TreeToNFAConverter : TreeParser
}


-					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -3428,9 +3428,9 @@ public partial class TreeToNFAConverter : TreeParser
{
w=(GrammarAST)Match(input,WILDCARD,Follow._WILDCARD_in_atom1285); if (state.failed) return retval;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:536:18: (as5= ast_suffix )?
int alt54=2;
int LA54_0 = input.LA(1);
@@ -3456,7 +3456,7 @@ public partial class TreeToNFAConverter : TreeParser
}


-					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}
if ( state.backtracking == 0 )
{
@@ -3480,7 +3480,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,DOT,Follow._DOT_in_atom1307); if (state.failed) return retval;

-				Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
scope_=(GrammarAST)Match(input,ID,Follow._ID_in_atom1311); if (state.failed) return retval;
PushFollow(Follow._atom_in_atom1315);
a=atom((scope_!=null?scope_.Text:null));
@@ -3492,7 +3492,7 @@ public partial class TreeToNFAConverter : TreeParser
retval.g = (a!=null?a.g:default(StateCluster));
}

-				Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -3575,7 +3575,7 @@ public partial class TreeToNFAConverter : TreeParser
{
b=(GrammarAST)Match(input,BLOCK,Follow._BLOCK_in_set1361); if (state.failed) return retval;

-			Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:565:6: ( ^( ALT ( ^( BACKTRACK_SEMPRED ( . )* ) )? setElement[elements] EOA ) )+
int cnt58=0;
for ( ; ; )
@@ -3596,7 +3596,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,ALT,Follow._ALT_in_set1370); if (state.failed) return retval;

-					Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:565:13: ( ^( BACKTRACK_SEMPRED ( . )* ) )?
int alt57=2;
int LA57_0 = input.LA(1);
@@ -3612,9 +3612,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,BACKTRACK_SEMPRED,Follow._BACKTRACK_SEMPRED_in_set1375); if (state.failed) return retval;

-						if ( input.LA(1)==TokenConstants.Down )
+						if ( input.LA(1)==TokenTypes.Down )
{
-							Match(input, TokenConstants.Down, null); if (state.failed) return retval;
+							Match(input, TokenTypes.Down, null); if (state.failed) return retval;
// Grammars\\TreeToNFAConverter.g3:565:35: ( . )*
for ( ; ; )
{
@@ -3651,7 +3651,7 @@ public partial class TreeToNFAConverter : TreeParser



-							Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+							Match(input, TokenTypes.Up, null); if (state.failed) return retval;
}

}
@@ -3666,7 +3666,7 @@ public partial class TreeToNFAConverter : TreeParser
if (state.failed) return retval;
Match(input,EOA,Follow._EOA_in_set1387); if (state.failed) return retval;

-					Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+					Match(input, TokenTypes.Up, null); if (state.failed) return retval;

}
break;
@@ -3687,7 +3687,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,EOB,Follow._EOB_in_set1397); if (state.failed) return retval;

-			Match(input, TokenConstants.Up, null); if (state.failed) return retval;
+			Match(input, TokenTypes.Up, null); if (state.failed) return retval;
if ( state.backtracking == 0 )
{

@@ -3732,7 +3732,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,RULE,Follow._RULE_in_setRule1431); if (state.failed) return elements;

-			Match(input, TokenConstants.Down, null); if (state.failed) return elements;
+			Match(input, TokenTypes.Down, null); if (state.failed) return elements;
id=(GrammarAST)Match(input,ID,Follow._ID_in_setRule1435); if (state.failed) return elements;
// Grammars\\TreeToNFAConverter.g3:581:18: ( modifier )?
int alt59=2;
@@ -3775,9 +3775,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_setRule1449); if (state.failed) return elements;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return elements;
+					Match(input, TokenTypes.Down, null); if (state.failed) return elements;
// Grammars\\TreeToNFAConverter.g3:581:50: ( . )*
for ( ; ; )
{
@@ -3814,7 +3814,7 @@ public partial class TreeToNFAConverter : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return elements;
+					Match(input, TokenTypes.Up, null); if (state.failed) return elements;
}

}
@@ -3865,9 +3865,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_setRule1471); if (state.failed) return elements;

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null); if (state.failed) return elements;
+						Match(input, TokenTypes.Down, null); if (state.failed) return elements;
// Grammars\\TreeToNFAConverter.g3:582:18: ( . )*
for ( ; ; )
{
@@ -3904,7 +3904,7 @@ public partial class TreeToNFAConverter : TreeParser



-						Match(input, TokenConstants.Up, null); if (state.failed) return elements;
+						Match(input, TokenTypes.Up, null); if (state.failed) return elements;
}

}
@@ -3921,7 +3921,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,BLOCK,Follow._BLOCK_in_setRule1485); if (state.failed) return elements;

-			Match(input, TokenConstants.Down, null); if (state.failed) return elements;
+			Match(input, TokenTypes.Down, null); if (state.failed) return elements;
// Grammars\\TreeToNFAConverter.g3:583:13: ( ^( OPTIONS ( . )* ) )?
int alt66=2;
int LA66_0 = input.LA(1);
@@ -3937,9 +3937,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_setRule1490); if (state.failed) return elements;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return elements;
+					Match(input, TokenTypes.Down, null); if (state.failed) return elements;
// Grammars\\TreeToNFAConverter.g3:583:25: ( . )*
for ( ; ; )
{
@@ -3976,7 +3976,7 @@ public partial class TreeToNFAConverter : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return elements;
+					Match(input, TokenTypes.Up, null); if (state.failed) return elements;
}

}
@@ -4004,7 +4004,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,ALT,Follow._ALT_in_setRule1508); if (state.failed) return elements;

-					Match(input, TokenConstants.Down, null); if (state.failed) return elements;
+					Match(input, TokenTypes.Down, null); if (state.failed) return elements;
// Grammars\\TreeToNFAConverter.g3:584:15: ( BACKTRACK_SEMPRED )?
int alt67=2;
int LA67_0 = input.LA(1);
@@ -4032,7 +4032,7 @@ public partial class TreeToNFAConverter : TreeParser
if (state.failed) return elements;
Match(input,EOA,Follow._EOA_in_setRule1518); if (state.failed) return elements;

-					Match(input, TokenConstants.Up, null); if (state.failed) return elements;
+					Match(input, TokenTypes.Up, null); if (state.failed) return elements;

}
break;
@@ -4053,7 +4053,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,EOB,Follow._EOB_in_setRule1530); if (state.failed) return elements;

-			Match(input, TokenConstants.Up, null); if (state.failed) return elements;
+			Match(input, TokenTypes.Up, null); if (state.failed) return elements;
// Grammars\\TreeToNFAConverter.g3:587:4: ( exceptionGroup )?
int alt69=2;
int LA69_0 = input.LA(1);
@@ -4080,7 +4080,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,EOR,Follow._EOR_in_setRule1549); if (state.failed) return elements;

-			Match(input, TokenConstants.Up, null); if (state.failed) return elements;
+			Match(input, TokenTypes.Up, null); if (state.failed) return elements;

}

@@ -4257,11 +4257,11 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_setElement1611); if (state.failed) return ;

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
c1=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_setElement1615); if (state.failed) return ;
c2=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_setElement1619); if (state.failed) return ;

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;
if ( state.backtracking == 0 )
{

@@ -4304,7 +4304,7 @@ public partial class TreeToNFAConverter : TreeParser
ns=new IntervalSet();
}

-				Match(input, TokenConstants.Down, null); if (state.failed) return ;
+				Match(input, TokenTypes.Down, null); if (state.failed) return ;
PushFollow(Follow._setElement_in_setElement1651);
setElement(ns);

@@ -4318,7 +4318,7 @@ public partial class TreeToNFAConverter : TreeParser

}

-				Match(input, TokenConstants.Up, null); if (state.failed) return ;
+				Match(input, TokenTypes.Up, null); if (state.failed) return ;

}
break;
@@ -4357,7 +4357,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,BLOCK,Follow._BLOCK_in_testBlockAsSet1696); if (state.failed) return alts;

-			Match(input, TokenConstants.Down, null); if (state.failed) return alts;
+			Match(input, TokenTypes.Down, null); if (state.failed) return alts;
// Grammars\\TreeToNFAConverter.g3:705:4: ( ^( ALT ( BACKTRACK_SEMPRED )? testSetElement EOA ) )+
int cnt72=0;
for ( ; ; )
@@ -4378,7 +4378,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,ALT,Follow._ALT_in_testBlockAsSet1704); if (state.failed) return alts;

-					Match(input, TokenConstants.Down, null); if (state.failed) return alts;
+					Match(input, TokenTypes.Down, null); if (state.failed) return alts;
// Grammars\\TreeToNFAConverter.g3:705:12: ( BACKTRACK_SEMPRED )?
int alt71=2;
int LA71_0 = input.LA(1);
@@ -4407,7 +4407,7 @@ public partial class TreeToNFAConverter : TreeParser
alts += testSetElement10;
Match(input,EOA,Follow._EOA_in_testBlockAsSet1715); if (state.failed) return alts;

-					Match(input, TokenConstants.Up, null); if (state.failed) return alts;
+					Match(input, TokenTypes.Up, null); if (state.failed) return alts;

}
break;
@@ -4428,7 +4428,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,EOB,Follow._EOB_in_testBlockAsSet1727); if (state.failed) return alts;

-			Match(input, TokenConstants.Up, null); if (state.failed) return alts;
+			Match(input, TokenTypes.Up, null); if (state.failed) return alts;

}

@@ -4466,7 +4466,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,RULE,Follow._RULE_in_testSetRule1762); if (state.failed) return alts;

-			Match(input, TokenConstants.Down, null); if (state.failed) return alts;
+			Match(input, TokenTypes.Down, null); if (state.failed) return alts;
id=(GrammarAST)Match(input,ID,Follow._ID_in_testSetRule1766); if (state.failed) return alts;
// Grammars\\TreeToNFAConverter.g3:718:18: ( modifier )?
int alt73=2;
@@ -4509,9 +4509,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,OPTIONS,Follow._OPTIONS_in_testSetRule1780); if (state.failed) return alts;

-				if ( input.LA(1)==TokenConstants.Down )
+				if ( input.LA(1)==TokenTypes.Down )
{
-					Match(input, TokenConstants.Down, null); if (state.failed) return alts;
+					Match(input, TokenTypes.Down, null); if (state.failed) return alts;
// Grammars\\TreeToNFAConverter.g3:718:50: ( . )*
for ( ; ; )
{
@@ -4548,7 +4548,7 @@ public partial class TreeToNFAConverter : TreeParser



-					Match(input, TokenConstants.Up, null); if (state.failed) return alts;
+					Match(input, TokenTypes.Up, null); if (state.failed) return alts;
}

}
@@ -4599,9 +4599,9 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,AMPERSAND,Follow._AMPERSAND_in_testSetRule1802); if (state.failed) return alts;

-					if ( input.LA(1)==TokenConstants.Down )
+					if ( input.LA(1)==TokenTypes.Down )
{
-						Match(input, TokenConstants.Down, null); if (state.failed) return alts;
+						Match(input, TokenTypes.Down, null); if (state.failed) return alts;
// Grammars\\TreeToNFAConverter.g3:719:18: ( . )*
for ( ; ; )
{
@@ -4638,7 +4638,7 @@ public partial class TreeToNFAConverter : TreeParser



-						Match(input, TokenConstants.Up, null); if (state.failed) return alts;
+						Match(input, TokenTypes.Up, null); if (state.failed) return alts;
}

}
@@ -4655,7 +4655,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,BLOCK,Follow._BLOCK_in_testSetRule1816); if (state.failed) return alts;

-			Match(input, TokenConstants.Down, null); if (state.failed) return alts;
+			Match(input, TokenTypes.Down, null); if (state.failed) return alts;
// Grammars\\TreeToNFAConverter.g3:721:5: ( ^( ALT ( BACKTRACK_SEMPRED )? testSetElement EOA ) )+
int cnt80=0;
for ( ; ; )
@@ -4676,7 +4676,7 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,ALT,Follow._ALT_in_testSetRule1825); if (state.failed) return alts;

-					Match(input, TokenConstants.Down, null); if (state.failed) return alts;
+					Match(input, TokenTypes.Down, null); if (state.failed) return alts;
// Grammars\\TreeToNFAConverter.g3:721:13: ( BACKTRACK_SEMPRED )?
int alt79=2;
int LA79_0 = input.LA(1);
@@ -4705,7 +4705,7 @@ public partial class TreeToNFAConverter : TreeParser
alts += testSetElement11;
Match(input,EOA,Follow._EOA_in_testSetRule1836); if (state.failed) return alts;

-					Match(input, TokenConstants.Up, null); if (state.failed) return alts;
+					Match(input, TokenTypes.Up, null); if (state.failed) return alts;

}
break;
@@ -4726,7 +4726,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,EOB,Follow._EOB_in_testSetRule1850); if (state.failed) return alts;

-			Match(input, TokenConstants.Up, null); if (state.failed) return alts;
+			Match(input, TokenTypes.Up, null); if (state.failed) return alts;
// Grammars\\TreeToNFAConverter.g3:725:4: ( exceptionGroup )?
int alt81=2;
int LA81_0 = input.LA(1);
@@ -4753,7 +4753,7 @@ public partial class TreeToNFAConverter : TreeParser

Match(input,EOR,Follow._EOR_in_testSetRule1868); if (state.failed) return alts;

-			Match(input, TokenConstants.Up, null); if (state.failed) return alts;
+			Match(input, TokenTypes.Up, null); if (state.failed) return alts;

}

@@ -4869,11 +4869,11 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_testSetElement1930); if (state.failed) return alts;

-				Match(input, TokenConstants.Down, null); if (state.failed) return alts;
+				Match(input, TokenTypes.Down, null); if (state.failed) return alts;
c1=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_testSetElement1934); if (state.failed) return alts;
c2=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_testSetElement1938); if (state.failed) return alts;

-				Match(input, TokenConstants.Up, null); if (state.failed) return alts;
+				Match(input, TokenTypes.Up, null); if (state.failed) return alts;
alts = IntervalSet.Of( Grammar.GetCharValueFromGrammarCharLiteral((c1!=null?c1.Text:null)), Grammar.GetCharValueFromGrammarCharLiteral((c2!=null?c2.Text:null)) ).Count;

}
@@ -4895,14 +4895,14 @@ public partial class TreeToNFAConverter : TreeParser
{
Match(input,NOT,Follow._NOT_in_testSetElement1963); if (state.failed) return alts;

-				Match(input, TokenConstants.Down, null); if (state.failed) return alts;
+				Match(input, TokenTypes.Down, null); if (state.failed) return alts;
PushFollow(Follow._testSetElement_in_testSetElement1967);
tse=testSetElement();

state._fsp--;
if (state.failed) return alts;

-				Match(input, TokenConstants.Up, null); if (state.failed) return alts;
+				Match(input, TokenTypes.Up, null); if (state.failed) return alts;
alts = grammar.TokenTypes.Count - tse;

}
diff --git a/Antlr3/Tool/Grammar.cs b/Antlr3/Tool/Grammar.cs
index d9bbb71..d45df0b 100644
--- a/Antlr3/Tool/Grammar.cs
+++ b/Antlr3/Tool/Grammar.cs
@@ -63,7 +63,6 @@ namespace Antlr3.Tool
using TextReader = System.IO.TextReader;
using TextWriter = System.IO.TextWriter;
using TimeSpan = System.TimeSpan;
-    using TokenConstants = Antlr.Runtime.TokenConstants;
using Tool = Antlr3.AntlrTool;

/** Represents a grammar in memory. */
@@ -1845,7 +1844,7 @@ namespace Antlr3.Tool
public virtual void DefineToken( string text, int tokenType )
{
//JSystem.@out.println("defineToken("+text+", "+tokenType+")");
-            if ( composite.tokenIDToTypeMap.ContainsKey( text ) && composite.tokenIDToTypeMap[text] < TokenConstants.MinTokenType )
+            if ( composite.tokenIDToTypeMap.ContainsKey( text ) && composite.tokenIDToTypeMap[text] < Antlr.Runtime.TokenTypes.Min )
{
// already defined?  Must be predefined one like EOF;
// do nothing
diff --git a/Antlr3/Tool/GrammarAST.cs b/Antlr3/Tool/GrammarAST.cs
index 934a711..a046de4 100644
--- a/Antlr3/Tool/GrammarAST.cs
+++ b/Antlr3/Tool/GrammarAST.cs
@@ -393,8 +393,8 @@ namespace Antlr3.Tool
}

// used in enumerating the descendants of a node
-        static readonly GrammarAST DescendantDownNode = new GrammarAST( Antlr.Runtime.TokenConstants.Down, "DOWN" );
-        static readonly GrammarAST DescendantUpNode = new GrammarAST( Antlr.Runtime.TokenConstants.Up, "UP" );
+        static readonly GrammarAST DescendantDownNode = new GrammarAST( Antlr.Runtime.TokenTypes.Down, "DOWN" );
+        static readonly GrammarAST DescendantUpNode = new GrammarAST( Antlr.Runtime.TokenTypes.Up, "UP" );

public static IEnumerable<ITree> Descendants( ITree root )
{
diff --git a/Antlr3/Tool/Interpreter.cs b/Antlr3/Tool/Interpreter.cs
index a16f26a..af9add1 100644
--- a/Antlr3/Tool/Interpreter.cs
+++ b/Antlr3/Tool/Interpreter.cs
@@ -81,7 +81,7 @@ namespace Antlr3.Tool
if ( !ruleName.Equals( Grammar.ARTIFICIAL_TOKENS_RULENAME ) )
{
int type = g.GetTokenType( ruleName );
-                    int channel = TokenConstants.DefaultChannel;
+                    int channel = TokenChannels.Default;
token = new CommonToken( (ICharStream)outer.input, type, channel, 0, 0 );
}
}
@@ -107,14 +107,14 @@ namespace Antlr3.Tool
{
return null;
}
-            if ( input.LA( 1 ) == CharStreamConstants.Eof )
+            if ( input.LA( 1 ) == CharStreamConstants.EndOfFile )
{
-                return TokenConstants.EofToken;
+                return Tokens.EndOfFile;
}
int start = input.Index;
int charPos = ( (ICharStream)input ).CharPositionInLine;
CommonToken token = null;
-            while ( input.LA( 1 ) != CharStreamConstants.Eof )
+            while ( input.LA( 1 ) != CharStreamConstants.EndOfFile )
{
try
{
@@ -133,7 +133,7 @@ namespace Antlr3.Tool
int stop = input.Index - 1;
if ( token == null )
{
-                return TokenConstants.EofToken;
+                return Tokens.EndOfFile;
}
token.Line = ( ( (ICharStream)input ).Line );
token.StartIndex = start;

