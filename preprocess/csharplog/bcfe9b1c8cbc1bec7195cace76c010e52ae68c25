commit bcfe9b1c8cbc1bec7195cace76c010e52ae68c25
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Thu Dec 10 21:40:22 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Thu Dec 10 21:40:22 2009 -0800

C# Port:
* Merge CL6349

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6479]

diff --git a/Antlr3.Test/ST4/TestRenderers.cs b/Antlr3.Test/ST4/TestRenderers.cs
index e21a357..03e4db1 100644
--- a/Antlr3.Test/ST4/TestRenderers.cs
+++ b/Antlr3.Test/ST4/TestRenderers.cs
@@ -41,6 +41,7 @@ namespace AntlrUnitTests.ST4
[TestClass]
public class TestRenderers : StringTemplateTestBase
{
+#if false
public class DateRenderer : IAttributeRenderer
{
public string ToString(object o)
@@ -83,6 +84,7 @@ namespace AntlrUnitTests.ST4
return dateTime.ToString(formatString);
}
}
+#endif

public class StringRenderer : IAttributeRenderer
{
@@ -108,10 +110,10 @@ namespace AntlrUnitTests.ST4
"dateThing(created) ::= \"date: <created>\"\n";
WriteFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
-            group.RegisterRenderer(typeof(DateTime), new DateRenderer());
+            group.RegisterRenderer(typeof(DateTime), new DateTimeRenderer());
Template st = group.GetInstanceOf("dateThing");
st.Add("created", new DateTime(2005, 7, 5));
-            string expecting = "date: 2005.07.05";
+            string expecting = "date: 7/5/2005 12:00 AM";
string result = st.Render();
Assert.AreEqual(expecting, result);
}
@@ -123,7 +125,7 @@ namespace AntlrUnitTests.ST4
"dateThing(created) ::= << date: <created; format=\"yyyy.MM.dd\"> >>\n";
WriteFile(tmpdir, "t.stg", templates);
TemplateGroup group = new TemplateGroupFile(tmpdir + "/t.stg");
-            group.RegisterRenderer(typeof(DateTime), new DateRenderer3());
+            group.RegisterRenderer(typeof(DateTime), new DateTimeRenderer());
Template st = group.GetInstanceOf("dateThing");
st.Add("created", new DateTime(2005, 7, 5));
string expecting = " date: 2005.07.05 ";
diff --git a/StringTemplate4/DateTimeRenderer.cs b/StringTemplate4/DateTimeRenderer.cs
new file mode 100644
index 0000000..7631a33
--- /dev/null
+++ b/StringTemplate4/DateTimeRenderer.cs
@@ -0,0 +1,75 @@
+ï»¿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2005-2008 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2008-2009 Sam Harwell
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace StringTemplate
+{
+    using System.Collections.Generic;
+    using DateTime = System.DateTime;
+
+    public class DateTimeRenderer : IAttributeRenderer
+    {
+        private static readonly IDictionary<string, string> StandardFormats =
+            new Dictionary<string, string>()
+            {
+                {"short", "g"},
+                {"medium", "G"},
+                {"long", "f"},
+                {"full", "F"},
+
+                {"date:short", "d"},
+                {"date:medium", "d"},
+                {"date:long", "D"},
+                {"date:full", ""},
+
+                {"time:short", "t"},
+                {"time:medium", "t"},
+                {"time:long", "T"},
+                {"time:full", "T"},
+            };
+
+        public string ToString(object o)
+        {
+            return ToString(o, "short");
+        }
+
+        public string ToString(object o, string formatString)
+        {
+            DateTime d = (DateTime)o;
+
+            string format;
+            if (!StandardFormats.TryGetValue(formatString, out format))
+                format = formatString;
+
+            return d.ToString(format);
+        }
+    }
+}
diff --git a/StringTemplate4/StringTemplate4.csproj b/StringTemplate4/StringTemplate4.csproj
index 5dac4ab..1b6a453 100644
--- a/StringTemplate4/StringTemplate4.csproj
+++ b/StringTemplate4/StringTemplate4.csproj
@@ -50,6 +50,7 @@
<Compile Include="BytecodeDisassembler.cs" />
<Compile Include="CompiledTemplate.cs" />
<Compile Include="Compiler.cs" />
+    <Compile Include="DateTimeRenderer.cs" />
<Compile Include="ErrorTolerance.cs" />
<Compile Include="FormalArgument.cs" />
<Compile Include="GroupLexerHelper.cs" />

