commit 241d36be664b1d5cc32c83e2e34b822367921eef
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Dec 14 03:13:20 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Dec 14 03:13:20 2009 -0800

C# Port:
* Merge 6401

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6509]

diff --git a/Antlr3.Test/ST4/TestDebugEvents.cs b/Antlr3.Test/ST4/TestDebugEvents.cs
index 4790ea2..7516403 100644
--- a/Antlr3.Test/ST4/TestDebugEvents.cs
+++ b/Antlr3.Test/ST4/TestDebugEvents.cs
@@ -58,8 +58,8 @@ namespace AntlrUnitTests.ST4
ST st = group.GetInstanceOf("t");
st.code.Dump();
StringWriter sw = new StringWriter();
-            Interpreter interp = new Interpreter(group, new AutoIndentWriter(sw));
-            interp.Exec(st);
+            Interpreter interp = new Interpreter(group);
+            interp.Exec(new AutoIndentWriter(sw), st);
String expected = "";
IList<InterpEvent> events = interp.Events;
String result = events.ToString();
@@ -79,8 +79,8 @@ namespace AntlrUnitTests.ST4
st.code.Dump();
st.Add("x", "foo");
StringWriter sw = new StringWriter();
-            Interpreter interp = new Interpreter(group, new AutoIndentWriter(sw));
-            interp.Exec(st);
+            Interpreter interp = new Interpreter(group);
+            interp.Exec(new AutoIndentWriter(sw), st);
String expected = "";
IList<InterpEvent> events = interp.Events;
String result = events.ToString();
@@ -101,8 +101,8 @@ namespace AntlrUnitTests.ST4
st.code.Dump();
st.Add("x", "foo");
StringWriter sw = new StringWriter();
-            Interpreter interp = new Interpreter(group, new AutoIndentWriter(sw));
-            interp.Exec(st);
+            Interpreter interp = new Interpreter(group);
+            interp.Exec(new AutoIndentWriter(sw), st);
String expected = "";
IList<InterpEvent> events = interp.Events;
String result = events.ToString();
diff --git a/STViz/TemplateVisualizer.xaml b/STViz/TemplateVisualizer.xaml
index c589ba5..028ee63 100644
--- a/STViz/TemplateVisualizer.xaml
+++ b/STViz/TemplateVisualizer.xaml
@@ -12,7 +12,7 @@
<TextBlock Text="{Binding Name}" />
</DataTemplate>

-        <HierarchicalDataTemplate x:Key="TemplateEventsItemTemplate" ItemsSource="{Binding Path=Template.DebugInfo.InterpreterEvents}">
+        <HierarchicalDataTemplate x:Key="TemplateEventsItemTemplate" ItemsSource="{Binding Path=Template.InterpreterEvents}">
<TextBlock Text="{Binding Template.Name}" />
</HierarchicalDataTemplate>
</Window.Resources>
diff --git a/STViz/TemplateVisualizer.xaml.cs b/STViz/TemplateVisualizer.xaml.cs
index 6885011..5bd7198 100644
--- a/STViz/TemplateVisualizer.xaml.cs
+++ b/STViz/TemplateVisualizer.xaml.cs
@@ -50,13 +50,13 @@ namespace STViz
{
}

-        public TemplateVisualizer(Template template)
+        public TemplateVisualizer(DebugTemplate template)
{
InitializeComponent();

StringWriter sw = new StringWriter();
-            Interpreter interp = new Interpreter(template.groupThatCreatedThisInstance, new AutoIndentWriter(sw));
-            interp.Exec(template);
+            Interpreter interp = new Interpreter(template.groupThatCreatedThisInstance);
+            interp.Exec(new AutoIndentWriter(sw), template);
IList<InterpEvent> events = interp.Events;

string text = sw.ToString();
@@ -64,7 +64,7 @@ namespace STViz
txtOutput.Document = new FlowDocument(new Paragraph(new Run(text)));
}

-        private static Template CreateDefaultTemplate()
+        private static DebugTemplate CreateDefaultTemplate()
{
string templates =
"method(type,name,args,stats) ::= <<\n" +
@@ -81,7 +81,7 @@ namespace STViz
File.WriteAllText(Path.Combine(tmpdir, "t.stg"), templates);
TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
group.Debug = true;
-            Template st = group.GetInstanceOf("method");
+            DebugTemplate st = (DebugTemplate)group.GetInstanceOf("method");
st.code.Dump();
st.Add("type", "float");
st.Add("name", "foo");
@@ -142,7 +142,7 @@ namespace STViz

private class RootEvent : InterpEvent
{
-            public RootEvent(Template template, int start, int stop)
+            public RootEvent(DebugTemplate template, int start, int stop)
: base(template, start, stop)
{
}
diff --git a/StringTemplate4/Debug/DebugTemplate.cs b/StringTemplate4/Debug/DebugTemplate.cs
new file mode 100644
index 0000000..675677e
--- /dev/null
+++ b/StringTemplate4/Debug/DebugTemplate.cs
@@ -0,0 +1,81 @@
+﻿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2005-2008 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2008-2009 Sam Harwell
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace StringTemplate.Debug
+{
+    using System.Collections.Generic;
+
+    public class DebugTemplate : Template
+    {
+        public DebugTemplate()
+        {
+            this.InterpreterEvents = new List<InterpEvent>();
+            this.AddAttributeEvents = new Dictionary<string, ICollection<AddAttributeEvent>>();
+            this.TemplateConstructionEvent = new ConstructionEvent();
+        }
+
+        public IList<InterpEvent> InterpreterEvents
+        {
+            get;
+            private set;
+        }
+
+        public IDictionary<string, ICollection<AddAttributeEvent>> AddAttributeEvents
+        {
+            get;
+            private set;
+        }
+
+        public ConstructionEvent TemplateConstructionEvent
+        {
+            get;
+            private set;
+        }
+
+        public override void Add(string name, object value)
+        {
+            if (groupThatCreatedThisInstance.Debug)
+            {
+                ICollection<AddAttributeEvent> collection;
+                if (!AddAttributeEvents.TryGetValue(name, out collection))
+                {
+                    collection = new List<AddAttributeEvent>();
+                    AddAttributeEvents[name] = collection;
+                }
+
+                collection.Add(new AddAttributeEvent(name, value));
+            }
+
+            base.Add(name, value);
+        }
+    }
+}
diff --git a/StringTemplate4/Debug/EvalExprEvent.cs b/StringTemplate4/Debug/EvalExprEvent.cs
index b62a3ba..657e4ee 100644
--- a/StringTemplate4/Debug/EvalExprEvent.cs
+++ b/StringTemplate4/Debug/EvalExprEvent.cs
@@ -38,7 +38,7 @@ namespace StringTemplate.Debug
int exprStop; // template pattern location
string expr;

-        public EvalExprEvent(Template self, int start, int stop, int exprStart, int exprStop)
+        public EvalExprEvent(DebugTemplate self, int start, int stop, int exprStart, int exprStop)
: base(self, start, stop)
{
this.exprStart = exprStart;
diff --git a/StringTemplate4/Debug/EvalTemplateEvent.cs b/StringTemplate4/Debug/EvalTemplateEvent.cs
index 3cb5ec7..9ac0499 100644
--- a/StringTemplate4/Debug/EvalTemplateEvent.cs
+++ b/StringTemplate4/Debug/EvalTemplateEvent.cs
@@ -34,7 +34,7 @@ namespace StringTemplate.Debug
{
public class EvalTemplateEvent : InterpEvent
{
-        public EvalTemplateEvent(Template template, int start, int stop)
+        public EvalTemplateEvent(DebugTemplate template, int start, int stop)
: base(template, start, stop)
{
}
diff --git a/StringTemplate4/Debug/InterpEvent.cs b/StringTemplate4/Debug/InterpEvent.cs
index 3abc22b..d748924 100644
--- a/StringTemplate4/Debug/InterpEvent.cs
+++ b/StringTemplate4/Debug/InterpEvent.cs
@@ -34,7 +34,7 @@ namespace StringTemplate.Debug
{
public class InterpEvent
{
-        public InterpEvent(Template self, int start, int stop)
+        public InterpEvent(DebugTemplate self, int start, int stop)
{
this.Template = self;
this.Start = start;
diff --git a/StringTemplate4/Debug/TemplateDebugInfo.cs b/StringTemplate4/Debug/TemplateDebugInfo.cs
deleted file mode 100644
index 330b951..0000000
--- a/StringTemplate4/Debug/TemplateDebugInfo.cs
+++ /dev/null
@@ -1,72 +0,0 @@
-﻿/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
- * All rights reserved.
- *
- * Conversion to C#:
- * Copyright (c) 2008-2009 Sam Harwell
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- * 3. The name of the author may not be used to endorse or promote products
- *    derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
- * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
- * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
- * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-namespace StringTemplate.Debug
-{
-    using System.Collections.Generic;
-
-    public class TemplateDebugInfo
-    {
-        public TemplateDebugInfo()
-        {
-            this.InterpreterEvents = new List<InterpEvent>();
-            this.AddAttributeEvents = new Dictionary<string, ICollection<AddAttributeEvent>>();
-            this.TemplateConstructionEvent = new ConstructionEvent();
-        }
-
-        /** Track all events that occur during rendering.  Create room
-         *  for each new ST, but make sure to wipe this list
-         *  upon creation of interpreter to reset.  The construction-time
-         *  events like "new ST" and "add attribute" can stay, of course.
-         */
-        public IList<InterpEvent> InterpreterEvents
-        {
-            get;
-            private set;
-        }
-
-        /** Track add attribute "events"; used for ST user-level debugging;
-         *  Avoid polluting ST with this field when not debugging.
-         */
-        public IDictionary<string, ICollection<AddAttributeEvent>> AddAttributeEvents
-        {
-            get;
-            private set;
-        }
-
-        public ConstructionEvent TemplateConstructionEvent
-        {
-            get;
-            private set;
-        }
-    }
-}
diff --git a/StringTemplate4/Interpreter.cs b/StringTemplate4/Interpreter.cs
index 3d4376d..7c6f2b6 100644
--- a/StringTemplate4/Interpreter.cs
+++ b/StringTemplate4/Interpreter.cs
@@ -61,11 +61,6 @@ namespace StringTemplate
public static readonly int OPTION_SEPARATOR = 3;
public static readonly int OPTION_WRAP = 4;

-        /// <summary>
-        /// Track everything happening in interp if debug
-        /// </summary>
-        protected internal IList<InterpEvent> events;
-
public static readonly int DEFAULT_OPERAND_STACK_SIZE = 100;

public static readonly HashSet<string> predefinedAttributes =
@@ -81,8 +76,6 @@ namespace StringTemplate
int sp = -1;  // stack pointer register
int nw = 0;   // how many char written on this template line so far? ("number written" register)

-        ITemplateWriter @out;
-
/** Exec st with respect to this group. Once set in Template.toString(),
*  it should be fixed.  Template has group also.
*/
@@ -92,26 +85,24 @@ namespace StringTemplate

public bool trace = false;

-        public Interpreter(TemplateGroup group, ITemplateWriter @out)
-            : this(group, @out, CultureInfo.CurrentCulture)
+        /// <summary>
+        /// Track everything happening in interp if debug
+        /// </summary>
+        protected internal IList<InterpEvent> events;
+
+        public Interpreter(TemplateGroup group)
+            : this(group, CultureInfo.CurrentCulture)
{
}

-        public Interpreter(TemplateGroup group, ITemplateWriter @out, CultureInfo culture)
+        // TODO: remove out and move back to exec; must avoid creating new interp when deugging same st tree
+        public Interpreter(TemplateGroup group, CultureInfo culture)
{
this.group = group;
-            this.@out = @out;
this.culture = culture;
if (group.Debug)
{
events = new List<InterpEvent>();
-                if (group.DebugInfo != null)
-                {
-                    foreach (TemplateDebugInfo info in group.DebugInfo.Values)
-                    {
-                        info.InterpreterEvents.Clear();
-                    }
-                }
}
}

@@ -123,7 +114,7 @@ namespace StringTemplate
}
}

-        public int Exec(Template self)
+        public int Exec(ITemplateWriter @out, Template self)
{
int start = @out.Index; // track char we're about to write
int prevOpcode = 0;
@@ -252,7 +243,7 @@ namespace StringTemplate
int exprStop = GetShort(code, ip);
ip += 2;
o = operands[sp--];
-                    nw = WriteObjectNoOptions(self, o, exprStart, exprStop);
+                    nw = WriteObjectNoOptions(@out, self, o, exprStart, exprStop);
n += nw;
break;
case Bytecode.INSTR_WRITE_OPT:
@@ -262,7 +253,7 @@ namespace StringTemplate
ip += 2;
options = (object[])operands[sp--]; // get options
o = operands[sp--];                 // get option to write
-                    nw = WriteObjectWithOptions(self, o, options, exprStart, exprStop);
+                    nw = WriteObjectWithOptions(@out, self, o, options, exprStart, exprStop);
n += nw;
break;
case Bytecode.INSTR_MAP:
@@ -403,20 +394,19 @@ namespace StringTemplate
if (group.Debug)
{
int stop = @out.Index - 1;
-                EvalTemplateEvent e = new EvalTemplateEvent(self, start, stop);
+                EvalTemplateEvent e = new EvalTemplateEvent((DebugTemplate)self, start, stop);
Console.WriteLine(e);
events.Add(e);
if (self.enclosingInstance != null)
{
-                    TemplateDebugInfo info = self.enclosingInstance.DebugInfo;
-                    info.InterpreterEvents.Add(e);
+                    ((DebugTemplate)self.enclosingInstance).InterpreterEvents.Add(e);
}
}

return n;
}

-        protected int WriteObjectNoOptions(Template self, object o, int exprStart, int exprStop)
+        protected int WriteObjectNoOptions(ITemplateWriter @out, Template self, object o, int exprStart, int exprStop)
{
//int start = @out.Index; // track char we're about to write
int n = WriteObject(@out, self, o, null);
@@ -430,7 +420,7 @@ namespace StringTemplate
return n;
}

-        protected int WriteObjectWithOptions(Template self, object o, object[] options, int exprStart, int exprStop)
+        protected int WriteObjectWithOptions(ITemplateWriter @out, Template self, object o, object[] options, int exprStart, int exprStop)
{
//int start = @out.Index; // track char we're about to write
// precompute all option values (render all the way to strings)
@@ -491,7 +481,7 @@ namespace StringTemplate
group.listener.Error("Can't write wrap string");
}
}
-                n = Exec((Template)o);
+                n = Exec(@out, (Template)o);
}
else
{
@@ -942,8 +932,9 @@ namespace StringTemplate

// if not string already, must evaluate it
StringWriter sw = new StringWriter();
-                Interpreter interp = new Interpreter(group, new NoIndentWriter(sw), culture);
-                interp.WriteObjectNoOptions(self, value, -1, -1);
+                //Interpreter interp = new Interpreter(group, new NoIndentWriter(sw), culture);
+                //interp.WriteObjectNoOptions(self, value, -1, -1);
+                WriteObjectNoOptions(new NoIndentWriter(sw), self, value, -1, -1);
return sw.ToString();
}
return null;
diff --git a/StringTemplate4/StringTemplate4.csproj b/StringTemplate4/StringTemplate4.csproj
index 5aebe64..a940897 100644
--- a/StringTemplate4/StringTemplate4.csproj
+++ b/StringTemplate4/StringTemplate4.csproj
@@ -54,10 +54,10 @@
<Compile Include="DateTimeRenderer.cs" />
<Compile Include="Debug\AddAttributeEvent.cs" />
<Compile Include="Debug\ConstructionEvent.cs" />
+    <Compile Include="Debug\DebugTemplate.cs" />
<Compile Include="Debug\EvalExprEvent.cs" />
<Compile Include="Debug\EvalTemplateEvent.cs" />
<Compile Include="Debug\InterpEvent.cs" />
-    <Compile Include="Debug\TemplateDebugInfo.cs" />
<Compile Include="ErrorTolerance.cs" />
<Compile Include="FormalArgument.cs" />
<Compile Include="GroupLexerHelper.cs" />
diff --git a/StringTemplate4/Template.cs b/StringTemplate4/Template.cs
index 822bcf3..121c587 100644
--- a/StringTemplate4/Template.cs
+++ b/StringTemplate4/Template.cs
@@ -127,14 +127,6 @@ namespace StringTemplate
}
}

-        public TemplateDebugInfo DebugInfo
-        {
-            get
-            {
-                return groupThatCreatedThisInstance.GetDebugInfo(this);
-            }
-        }
-
[DebuggerHidden]
public IEnumerable<Template> EnclosingInstanceStack
{
@@ -173,22 +165,6 @@ namespace StringTemplate
if (value is Template)
((Template)value).enclosingInstance = this;

-            if (groupThatCreatedThisInstance.Debug)
-            {
-                TemplateDebugInfo info;
-                if (groupThatCreatedThisInstance.DebugInfo.TryGetValue(this, out info) && info != null)
-                {
-                    ICollection<AddAttributeEvent> collection;
-                    if (!info.AddAttributeEvents.TryGetValue(name, out collection))
-                    {
-                        collection = new List<AddAttributeEvent>();
-                        info.AddAttributeEvents[name] = collection;
-                    }
-
-                    collection.Add(new AddAttributeEvent(name, value));
-                }
-            }
-
object curvalue = null;
if (attributes == null || !attributes.ContainsKey(name))
{ // new attribute
@@ -346,14 +322,14 @@ namespace StringTemplate

public virtual int Write(ITemplateWriter @out)
{
-            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, @out);
-            return interp.Exec(this);
+            Interpreter interp = new Interpreter(groupThatCreatedThisInstance);
+            return interp.Exec(@out, this);
}

public virtual int Write(ITemplateWriter @out, CultureInfo culture)
{
-            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, @out, culture);
-            return interp.Exec(this);
+            Interpreter interp = new Interpreter(groupThatCreatedThisInstance, culture);
+            return interp.Exec(@out, this);
}

public string Render()
@@ -376,14 +352,7 @@ namespace StringTemplate
StringWriter @out = new StringWriter();
ITemplateWriter wr = new AutoIndentWriter(@out);
wr.SetLineWidth(lineWidth);
-            try
-            {
-                Write(wr, culture);
-            }
-            catch (IOException)
-            {
-                Console.Error.WriteLine("Got IOException writing to writer");
-            }
+            Write(wr, culture);
return @out.ToString();
}

diff --git a/StringTemplate4/TemplateGroup.cs b/StringTemplate4/TemplateGroup.cs
index 2301e5d..fba15e7 100644
--- a/StringTemplate4/TemplateGroup.cs
+++ b/StringTemplate4/TemplateGroup.cs
@@ -80,11 +80,6 @@ namespace StringTemplate

public static readonly ITemplateErrorListener DefaultErrorListener = new DefaultErrorListenerImpl();

-        /** To avoid polluting ST instances with debug info when not debugging,
-         *  we map ST instances to associated debug objects in group.
-         */
-        protected IDictionary<Template, TemplateDebugInfo> debugInfoMap;
-
public string fullyQualifiedRootDirName;

/** Load files using what encoding? */
@@ -132,35 +127,14 @@ namespace StringTemplate

public static TemplateGroup defaultGroup = new TemplateGroup();

-        private bool _debug;
-
public TemplateGroup()
{
}

public bool Debug
{
-            get
-            {
-                return _debug;
-            }
-            set
-            {
-                if (_debug == value)
-                    return;
-
-                _debug = value;
-                if (_debug)
-                    debugInfoMap = new Dictionary<Template, TemplateDebugInfo>();
-            }
-        }
-
-        public IDictionary<Template, TemplateDebugInfo> DebugInfo
-        {
-            get
-            {
-                return debugInfoMap;
-            }
+            get;
+            set;
}

public virtual string Name
@@ -442,29 +416,16 @@ namespace StringTemplate
return renderer;
}

-        public TemplateDebugInfo GetDebugInfo(Template template)
-        {
-            if (!Debug)
-                return null;
-
-            TemplateDebugInfo debugInfo;
-            if (!debugInfoMap.TryGetValue(template, out debugInfo))
-                return null;
-
-            return debugInfo;
-        }
-
/// <summary>
/// StringTemplate object factory; each group can have its own.
/// </summary>
public virtual Template CreateStringTemplate()
{
// TODO: try making a mem pool
-            Template template = new Template();
if (Debug)
-                debugInfoMap[template] = new TemplateDebugInfo();
+                return new DebugTemplate();

-            return template;
+            return new Template();
}

public override string ToString()

