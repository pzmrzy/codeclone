commit b8d27fc62aba782169f2218bf739f873be44bc13
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sun Apr 24 13:54:55 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sun Apr 24 13:54:55 2011 -0800

(C# 3) Remove TemplateDump (merges part of CL8290)

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8307]

diff --git a/Antlr4.StringTemplate/Antlr4.StringTemplate.csproj b/Antlr4.StringTemplate/Antlr4.StringTemplate.csproj
index 71bb1a1..81d53e8 100644
--- a/Antlr4.StringTemplate/Antlr4.StringTemplate.csproj
+++ b/Antlr4.StringTemplate/Antlr4.StringTemplate.csproj
@@ -94,7 +94,6 @@
<Compile Include="Misc\MultiMap.cs" />
<Compile Include="Misc\ObjectModelAdaptor.cs" />
<Compile Include="Misc\TemplateCompileTimeMessage.cs" />
-    <Compile Include="Misc\TemplateDump.cs" />
<Compile Include="Misc\TemplateGroupCompiletimeMessage.cs" />
<Compile Include="Misc\TemplateLexerMessage.cs" />
<Compile Include="Misc\TemplateMessage.cs" />
diff --git a/Antlr4.StringTemplate/Misc/TemplateDump.cs b/Antlr4.StringTemplate/Misc/TemplateDump.cs
deleted file mode 100644
index 86f1b22..0000000
--- a/Antlr4.StringTemplate/Misc/TemplateDump.cs
+++ /dev/null
@@ -1,154 +0,0 @@
-/*
- * [The "BSD licence"]
- * Copyright (c) 2011 Terence Parr
- * All rights reserved.
- *
- * Conversion to C#:
- * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- * 3. The name of the author may not be used to endorse or promote products
- *    derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
- * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
- * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
- * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
- * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-namespace Antlr4.StringTemplate.Misc
-{
-    using System.Collections.Generic;
-    using System.Linq;
-    using Antlr.Runtime.JavaExtensions;
-    using ArgumentNullException = System.ArgumentNullException;
-    using Environment = System.Environment;
-    using StringBuilder = System.Text.StringBuilder;
-    using StringComparer = System.StringComparer;
-
-    /** This class dumps out a hierarchy of templates in text form, indented
-     *  to show the nested relationship.  Usage:
-     *
-     *     Template st = ...;
-     *     TemplateDump d = new TemplateDump(st);
-     *     System.out.println(d.ToString());
-     */
-    public class TemplateDump
-    {
-        private readonly TemplateFrame _frame;
-
-        public TemplateDump(TemplateFrame frame)
-        {
-            if (frame == null)
-                throw new ArgumentNullException("frame");
-
-            this._frame = frame;
-        }
-
-        public static string ToString(TemplateFrame frame)
-        {
-            TemplateDump d = new TemplateDump(frame);
-            return d.ToString();
-        }
-
-        public override string ToString()
-        {
-            return ToString(0);
-        }
-
-        protected virtual string ToString(int n)
-        {
-            Template self = _frame.Template;
-            StringBuilder buf = new StringBuilder();
-            buf.Append(GetTemplateDeclaratorString() + ":");
-            n++;
-            if (self.GetAttributes() != null)
-            {
-                List<string> attrNames = new List<string>(self.GetAttributes().Keys);
-                attrNames.Sort(StringComparer.Ordinal);
-                string longestName = attrNames.OrderBy(i => i.Length).Last();
-                int w = longestName.Length;
-                foreach (object attrName in attrNames)
-                {
-                    string name = (string)attrName;
-                    buf.Append(Environment.NewLine);
-                    Indent(buf, n);
-                    buf.Append(string.Format("%-" + w + "s = ", name));
-                    buf.Append(string.Format(string.Format("{{0,-{0}}} = ", w), name));
-                    object value;
-                    self.GetAttributes().TryGetValue(name, out value);
-                    buf.Append(GetValueDebugString(value, n));
-                }
-            }
-            buf.Append(Environment.NewLine);
-            n--;
-            Indent(buf, n);
-            buf.Append("]");
-            return buf.ToString();
-        }
-
-        protected virtual string GetValueDebugString(object value, int n)
-        {
-            StringBuilder buf = new StringBuilder();
-            value = Interpreter.ConvertAnythingIteratableToIterator(_frame, value);
-            if (value is Template)
-            {
-                TemplateDump d = new TemplateDump(new TemplateFrame((Template)value, _frame));
-                buf.Append(d.ToString(n));
-            }
-            else if (value is Iterator)
-            {
-                Iterator it = (Iterator)value;
-                int na = 0;
-                while (it.hasNext())
-                {
-                    string v = GetValueDebugString(it.next(), n);
-                    if (na > 0)
-                        buf.Append(", ");
-                    buf.Append(v);
-                    na++;
-                }
-            }
-            else
-            {
-                buf.Append(value);
-            }
-            return buf.ToString();
-        }
-
-        protected virtual string GetTemplateDeclaratorString()
-        {
-            Template self = _frame.Template;
-            StringBuilder buf = new StringBuilder();
-            buf.Append("<");
-            buf.Append(self.Name);
-            buf.Append("(");
-            if (self.impl.FormalArguments != null)
-                buf.Append(string.Join(",", self.impl.FormalArguments.Select(i => i.Name).ToArray()));
-            buf.Append(")@");
-            buf.Append(GetHashCode());
-            buf.Append(">");
-            return buf.ToString();
-        }
-
-        protected virtual void Indent(StringBuilder buf, int n)
-        {
-            for (int i = 1; i <= n; i++)
-                buf.Append("   ");
-        }
-    }
-}

