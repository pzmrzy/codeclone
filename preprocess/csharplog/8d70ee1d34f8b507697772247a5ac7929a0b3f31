commit 8d70ee1d34f8b507697772247a5ac7929a0b3f31
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sun Nov 21 09:00:35 2010 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sun Nov 21 09:00:35 2010 -0800

(C# 3) Code cleanup

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7095]

diff --git a/Antlr3.StringTemplate/Language/Template.g3 b/Antlr3.StringTemplate/Language/Template.g3
index edba739..5f143e2 100644
--- a/Antlr3.StringTemplate/Language/Template.g3
+++ b/Antlr3.StringTemplate/Language/Template.g3
@@ -188,10 +188,11 @@ action[StringTemplate self]
bool err = false;
// watch out for <@super.r()>; that does NOT def implicit region
// convert to <super.region__enclosingTemplate__r()>
-			if ( regionName.StartsWith("super.") )
+			string regionNamePrefix = "super.";
+			if ( regionName.StartsWith(regionNamePrefix) )
{
//System.Console.Out.WriteLine( "super region ref " + regionName );
-				string regionRef = regionName.substring("super.".Length,regionName.Length);
+				string regionRef = regionName.Substring(regionNamePrefix.Length, regionName.Length - regionNamePrefix.Length);
string templateScope = self.Group.GetUnMangledTemplateName(self.Name);
StringTemplate scopeST = self.Group.LookupTemplate(templateScope);
if ( scopeST==null )
@@ -233,8 +234,9 @@ action[StringTemplate self]
int indexOfDefSymbol = combinedNameTemplateStr.IndexOf("::=");
if ( indexOfDefSymbol>=1 )
{
-				string regionName = combinedNameTemplateStr.substring(0,indexOfDefSymbol);
-				string template = combinedNameTemplateStr.substring(indexOfDefSymbol+3, combinedNameTemplateStr.Length);
+				string regionName = combinedNameTemplateStr.Substring(0, indexOfDefSymbol);
+				int startIndex = indexOfDefSymbol + 3;
+				string template = combinedNameTemplateStr.Substring(startIndex, combinedNameTemplateStr.Length - startIndex);
StringTemplate regionST = self.Group.DefineRegionTemplate(self,regionName,template,RegionType.Embedded);
// treat as regular action: mangled template include
string indent = ((ChunkToken)$rd).Indentation;
diff --git a/Antlr3.StringTemplate/StringTemplateGroup.cs b/Antlr3.StringTemplate/StringTemplateGroup.cs
index 90574f8..269e1c0 100644
--- a/Antlr3.StringTemplate/StringTemplateGroup.cs
+++ b/Antlr3.StringTemplate/StringTemplateGroup.cs
@@ -1009,8 +1009,9 @@ namespace Antlr3.ST
/** <summary>Return "t" from "region__t__foo"</summary> */
public virtual string GetUnMangledTemplateName( string mangledName )
{
-            return mangledName.substring( "region__".Length,
-                                         mangledName.LastIndexOf( "__" ) );
+            int regionLength = "region__".Length;
+            return mangledName.Substring( regionLength,
+                                         mangledName.LastIndexOf( "__" ) - regionLength );
}

/** <summary>Make name and alias for target.  Replace any previous def of name</summary> */
diff --git a/Antlr3.Test/TestAttributes.cs b/Antlr3.Test/TestAttributes.cs
index 242ee71..6ab003e 100644
--- a/Antlr3.Test/TestAttributes.cs
+++ b/Antlr3.Test/TestAttributes.cs
@@ -745,7 +745,9 @@ namespace AntlrUnitTests
generator.GenRecognizer(); // codegen phase sets some vars we need
StringTemplate codeST = generator.RecognizerST;
string code = codeST.ToString();
-            string found = code.substring( code.IndexOf( "###" ) + 3, code.IndexOf( "!!!" ) );
+            int startIndex = code.IndexOf("###") + 3;
+            int endIndex = code.IndexOf("!!!");
+            string found = code.Substring( startIndex, endIndex - startIndex );
assertEquals( expecting, found );

assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
@@ -791,7 +793,9 @@ namespace AntlrUnitTests

StringTemplate codeST = generator.RecognizerST;
string code = codeST.ToString();
-            string found = code.substring( code.IndexOf( "###" ) + 3, code.IndexOf( "!!!" ) );
+            int startIndex = code.IndexOf("###") + 3;
+            int endIndex = code.IndexOf("!!!");
+            string found = code.Substring( startIndex, endIndex - startIndex );
assertEquals( expecting, found );

assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
@@ -818,7 +822,9 @@ namespace AntlrUnitTests

StringTemplate codeST = generator.RecognizerST;
string code = codeST.ToString();
-            string found = code.substring( code.IndexOf( "###" ) + 3, code.IndexOf( "!!!" ) );
+            int startIndex = code.IndexOf("###") + 3;
+            int endIndex = code.IndexOf("!!!");
+            string found = code.Substring(startIndex, endIndex - startIndex);
assertEquals( expecting, found );

assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
@@ -1774,7 +1780,9 @@ namespace AntlrUnitTests

StringTemplate codeST = generator.RecognizerST;
string code = codeST.ToString();
-            string found = code.substring( code.IndexOf( "###" ) + 3, code.IndexOf( "!!!" ) );
+            int startIndex = code.IndexOf("###") + 3;
+            int endIndex = code.IndexOf("!!!");
+            string found = code.Substring(startIndex, endIndex - startIndex);
assertEquals( expecting, found );

assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
@@ -1889,7 +1897,9 @@ namespace AntlrUnitTests
new CommonToken( ANTLRParser.ACTION, action ), 1 );
StringTemplate codeST = generator.RecognizerST;
string code = codeST.ToString();
-            string found = code.substring( code.IndexOf( "###" ) + 3, code.IndexOf( "!!!" ) );
+            int startIndex = code.IndexOf("###") + 3;
+            int endIndex = code.IndexOf("!!!");
+            string found = code.Substring(startIndex, endIndex - startIndex);
assertEquals( expecting, found );

assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
@@ -2341,7 +2351,9 @@ namespace AntlrUnitTests

StringTemplate codeST = generator.RecognizerST;
string code = codeST.ToString();
-            string found = code.substring( code.IndexOf( "###" ) + 3, code.IndexOf( "!!!" ) );
+            int startIndex = code.IndexOf("###") + 3;
+            int endIndex = code.IndexOf("!!!");
+            string found = code.Substring(startIndex, endIndex - startIndex);
assertEquals( expecting, found );

assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
@@ -2366,7 +2378,9 @@ namespace AntlrUnitTests

StringTemplate codeST = generator.RecognizerST;
string code = codeST.ToString();
-            string found = code.substring( code.IndexOf( "###" ) + 3, code.IndexOf( "!!!" ) );
+            int startIndex = code.IndexOf("###") + 3;
+            int endIndex = code.IndexOf("!!!");
+            string found = code.Substring(startIndex, endIndex - startIndex);
assertEquals( expecting, found );

assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
@@ -2392,7 +2406,9 @@ namespace AntlrUnitTests

StringTemplate codeST = generator.RecognizerST;
string code = codeST.ToString();
-            string found = code.substring( code.IndexOf( "###" ) + 3, code.IndexOf( "!!!" ) );
+            int startIndex = code.IndexOf("###") + 3;
+            int endIndex = code.IndexOf("!!!");
+            string found = code.Substring(startIndex, endIndex - startIndex);
assertEquals( expecting, found );

assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
@@ -3480,7 +3496,9 @@ namespace AntlrUnitTests
generator.GenRecognizer(); // codegen phase sets some vars we need
StringTemplate codeST = generator.RecognizerST;
string code = codeST.ToString();
-            string found = code.substring( code.IndexOf( "###" ) + 3, code.IndexOf( "!!!" ) );
+            int startIndex = code.IndexOf("###") + 3;
+            int endIndex = code.IndexOf("!!!");
+            string found = code.Substring(startIndex, endIndex - startIndex);
assertEquals( expecting, found );

int expectedMsgID = ErrorManager.MSG_UNKNOWN_RULE_ATTRIBUTE;
@@ -3514,7 +3532,9 @@ namespace AntlrUnitTests
generator.GenRecognizer(); // codegen phase sets some vars we need
StringTemplate codeST = generator.RecognizerST;
string code = codeST.ToString();
-            string found = code.substring( code.IndexOf( "###" ) + 3, code.IndexOf( "!!!" ) );
+            int startIndex = code.IndexOf("###") + 3;
+            int endIndex = code.IndexOf("!!!");
+            string found = code.Substring(startIndex, endIndex - startIndex);
assertEquals( expecting, found );

assertEquals( "unexpected errors: " + equeue, 0, equeue.errors.Count );
diff --git a/Antlr3.Test/TestLexer.cs b/Antlr3.Test/TestLexer.cs
index d8bc9b3..d4bcf85 100644
--- a/Antlr3.Test/TestLexer.cs
+++ b/Antlr3.Test/TestLexer.cs
@@ -279,7 +279,7 @@ namespace AntlrUnitTests
StringTemplate codeST = generator.RecognizerST;
string code = codeST.ToString();
int m = code.IndexOf( "match(\"" );
-            string found = code.substring( m, m + expecting.Length );
+            string found = code.Substring( m, expecting.Length );

assertEquals( expecting, found );
}

