commit 1a789f826f01a38656c8f8f49ffe0a33a1756a42
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Fri Jul 29 17:24:47 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Fri Jul 29 17:24:47 2011 -0800

(C# 3) Add unit tests from CL8844

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8934]

diff --git a/Antlr4.Test.StringTemplate/TestRenderers.cs b/Antlr4.Test.StringTemplate/TestRenderers.cs
index f4d236a..84d5a84 100644
--- a/Antlr4.Test.StringTemplate/TestRenderers.cs
+++ b/Antlr4.Test.StringTemplate/TestRenderers.cs
@@ -218,6 +218,43 @@ namespace Antlr4.Test.StringTemplate
}

[TestMethod]
+        public void TestStringRendererWithTemplateInclude_cap()
+        {
+            // must toString the t() ref before applying format
+            string templates =
+                    "foo(x) ::= << <(t()); format=\"cap\"> >>\n" +
+                    "t() ::= <<ack>>\n";
+
+            writeFile(tmpdir, "t.stg", templates);
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
+            //Interpreter.trace = true;
+            group.RegisterRenderer(typeof(string), new StringRenderer());
+            Template st = group.GetInstanceOf("foo");
+            st.Add("x", "hi");
+            string expecting = " Ack ";
+            string result = st.Render();
+            Assert.AreEqual(expecting, result);
+        }
+
+        [TestMethod]
+        public void TestStringRendererWithSubtemplateInclude_cap()
+        {
+            // must toString the t() ref before applying format
+            string templates =
+                    "foo(x) ::= << <({ack}); format=\"cap\"> >>\n";
+
+            writeFile(tmpdir, "t.stg", templates);
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(tmpdir, "t.stg"));
+            //Interpreter.trace = true;
+            group.RegisterRenderer(typeof(string), new StringRenderer());
+            Template st = group.GetInstanceOf("foo");
+            st.Add("x", "hi");
+            string expecting = " Ack ";
+            string result = st.Render();
+            Assert.AreEqual(expecting, result);
+        }
+
+        [TestMethod]
public void TestStringRendererWithFormat_cap_emptyValue()
{
string templates =

