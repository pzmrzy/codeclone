commit 89b3014cb68ecccfec2d05f95258dee1108c199a
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Fri Dec 11 09:53:44 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Fri Dec 11 09:53:44 2009 -0800

C# Port:
* Merge CL6380-6381

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6485]

diff --git a/Antlr3.Test/ST4/StringTemplateTestBase.cs b/Antlr3.Test/ST4/StringTemplateTestBase.cs
index dc8ef74..a730dcd 100644
--- a/Antlr3.Test/ST4/StringTemplateTestBase.cs
+++ b/Antlr3.Test/ST4/StringTemplateTestBase.cs
@@ -1,13 +1,15 @@
ï»¿namespace AntlrUnitTests.ST4
{
-    using Console = System.Console;
+    using Antlr.Runtime;
+    using Microsoft.VisualStudio.TestTools.UnitTesting;
+    using StringTemplate;
using Directory = System.IO.Directory;
using Environment = System.Environment;
using File = System.IO.File;
using IOException = System.IO.IOException;
using Path = System.IO.Path;
using Random = System.Random;
-    using Microsoft.VisualStudio.TestTools.UnitTesting;
+    using StringBuilder = System.Text.StringBuilder;

public abstract class StringTemplateTestBase
{
@@ -45,6 +47,33 @@
}
}

+        public void CheckTokens(string template, string expected)
+        {
+            CheckTokens(template, expected, '<', '>');
+        }
+
+
+        public void CheckTokens(string template, string expected, char delimiterStartChar, char delimiterStopChar)
+        {
+            TemplateLexer lexer = new TemplateLexer(new ANTLRStringStream(template), delimiterStartChar, delimiterStopChar);
+            UnbufferedTokenStream tokens = new UnbufferedTokenStream(lexer);
+            StringBuilder buf = new StringBuilder();
+            buf.Append("[");
+            int i = 1;
+            IToken t = tokens.LT(i);
+            while (t.Type != CharStreamConstants.EndOfFile)
+            {
+                if (i > 1)
+                    buf.Append(", ");
+                buf.Append(t);
+                i++;
+                t = tokens.LT(i);
+            }
+            buf.Append("]");
+            string result = buf.ToString();
+            Assert.AreEqual(expected, result);
+        }
+
public class User
{
public int id;
diff --git a/Antlr3.Test/ST4/TestDollarDelimiters.cs b/Antlr3.Test/ST4/TestDollarDelimiters.cs
index b882977..f276e6b 100644
--- a/Antlr3.Test/ST4/TestDollarDelimiters.cs
+++ b/Antlr3.Test/ST4/TestDollarDelimiters.cs
@@ -32,48 +32,53 @@

namespace AntlrUnitTests.ST4
{
+    using Microsoft.VisualStudio.TestTools.UnitTesting;
+
+    [TestClass]
public class TestDollarDelimiters : StringTemplateTestBase
{
-        /*
-        @Test public void testSimpleAttr() throws Exception {
-            String template = "hi $name$";
-            List<Chunk> chunks = new Chunkifier(template, '$', '$').chunkify();
-            String expected = "[1:0..2:hi , 1:4..7:name]";
-            String result = chunks.toString();
-            assertEquals(expected, result);
+        [TestMethod]
+        public void TestSimpleAttr()
+        {
+            string template = "hi $name$";
+            string expected = "[[@0,0:2='hi ',<TEXT>,1:0], [@1,3:3='$',<LDELIM>,1:3], [@2,4:7='name',<ID>,1:4], [@3,8:8='$',<RDELIM>,1:8]]";
+            CheckTokens(template, expected, '$', '$');
}
-
-        @Test public void testString() throws Exception {
-            String template = "hi $foo(a=\"$\")$";
-            List<Chunk> chunks = new Chunkifier(template, '$', '$').chunkify();
-            String expected = "[1:0..2:hi , 1:4..13:foo(a=\"$\")]";
-            String result = chunks.toString();
-            assertEquals(expected, result);
+
+        [TestMethod]
+        public void TestString()
+        {
+            string template = "hi $foo(a=\"$\")$";
+            string expected = "[[@0,0:2='hi ',<TEXT>,1:0], [@1,3:3='$',<LDELIM>,1:3], [@2,4:6='foo',<ID>,1:4], [@3,7:7='(',<LPAREN>,1:7], [@4,8:8='a',<ID>,1:8], [@5,9:9='=',<EQUALS>,1:9], [@6,10:12='\"$\"',<STRING>,1:10], [@7,13:13=')',<RPAREN>,1:13], [@8,14:14='$',<RDELIM>,1:14]]";
+            CheckTokens(template, expected, '$', '$');
}

-        @Test public void testEscInString() throws Exception {
-            String template = "hi $foo(a=\"$\\\"\")$";
-            List<Chunk> chunks = new Chunkifier(template, '$', '$').chunkify();
-            String expected = "[1:0..2:hi , 1:4..15:foo(a=\"$\\\"\")]";
-            String result = chunks.toString();
-            assertEquals(expected, result);
+        [TestMethod]
+        public void TestEscInString()
+        {
+            string template = "hi $foo(a=\"$\\\"\")$"; // "hi $foo(a="$\"")$"
+            string expected = "[[@0,0:2='hi ',<TEXT>,1:0], [@1,3:3='$',<LDELIM>,1:3], [@2,4:6='foo',<ID>,1:4], [@3,7:7='(',<LPAREN>,1:7], [@4,8:8='a',<ID>,1:8], [@5,9:9='=',<EQUALS>,1:9], [@6,10:0='\"$\"\"',<STRING>,1:10], [@7,15:15=')',<RPAREN>,1:15], [@8,16:16='$',<RDELIM>,1:16]]";
+            CheckTokens(template, expected, '$', '$');
}

-        @Test public void testSubtemplate() throws Exception {
-            String template = "hi $names:{n | $n$}$";
-            List<Chunk> chunks = new Chunkifier(template, '$', '$').chunkify();
-            String expected = "[1:0..2:hi , 1:4..18:names:{n | $n$}]";
-            String result = chunks.toString();
-            assertEquals(expected, result);
+        [TestMethod]
+        public void TestSubtemplate()
+        {
+            string template = "hi $names:{n | $n$}$";
+            string expected =
+                "[[@0,0:2='hi ',<TEXT>,1:0], [@1,3:3='$',<LDELIM>,1:3], [@2,4:8='names',<ID>,1:4], " +
+                "[@3,9:9=':',<COLON>,1:9], [@4,10:10='{',<LCURLY>,1:10], [@5,11:11='n',<ID>,1:11], " +
+                "[@6,13:13='|',<PIPE>,1:13], [@7,15:15='$',<LDELIM>,1:15], [@8,16:16='n',<ID>,1:16], " +
+                "[@9,17:17='$',<RDELIM>,1:17], [@10,18:18='}',<RCURLY>,1:18], [@11,19:19='$',<RDELIM>,1:19]]";
+            CheckTokens(template, expected, '$', '$');
}

-        @Test public void testNestedSubtemplate() throws Exception {
-            String template = "hi $names:{n | $n:{$it$}$}$";
-            List<Chunk> chunks = new Chunkifier(template, '$', '$').chunkify();
-            String expected = "[1:0..2:hi , 1:4..25:names:{n | $n:{$it$}$}]";
-            String result = chunks.toString();
-            assertEquals(expected, result);
+        [TestMethod]
+        public void TestNestedSubtemplate()
+        {
+            string template = "hi $names:{n | $n:{$it$}$}$";
+            string expected = "[[@0,0:2='hi ',<TEXT>,1:0], [@1,3:3='$',<LDELIM>,1:3], [@2,4:8='names',<ID>,1:4], [@3,9:9=':',<COLON>,1:9], [@4,10:10='{',<LCURLY>,1:10], [@5,11:11='n',<ID>,1:11], [@6,13:13='|',<PIPE>,1:13], [@7,15:15='$',<LDELIM>,1:15], [@8,16:16='n',<ID>,1:16], [@9,17:17=':',<COLON>,1:17], [@10,18:18='{',<LCURLY>,1:18], [@11,19:19='$',<LDELIM>,1:19], [@12,20:21='it',<ID>,1:20], [@13,22:22='$',<RDELIM>,1:22], [@14,23:23='}',<RCURLY>,1:23], [@15,24:24='$',<RDELIM>,1:24], [@16,25:25='}',<RCURLY>,1:25], [@17,26:26='$',<RDELIM>,1:26]]";
+            CheckTokens(template, expected, '$', '$');
}
-        */
}
}
diff --git a/Antlr3.Test/ST4/TestLexer.cs b/Antlr3.Test/ST4/TestLexer.cs
index 4f74679..14627e8 100644
--- a/Antlr3.Test/ST4/TestLexer.cs
+++ b/Antlr3.Test/ST4/TestLexer.cs
@@ -41,34 +41,13 @@ namespace AntlrUnitTests.ST4
[TestClass]
public class TestLexer : StringTemplateTestBase
{
-        public void Check(string template, string expected)
-        {
-            TemplateLexer lexer = new TemplateLexer(new ANTLRStringStream(template));
-            CommonTokenStream tokens = new CommonTokenStream(lexer);
-            StringBuilder buf = new StringBuilder();
-            buf.Append("[");
-            int i = 1;
-            IToken t = tokens.LT(i);
-            while (t.Type != CharStreamConstants.EndOfFile)
-            {
-                if (i > 1)
-                    buf.Append(", ");
-                buf.Append(t);
-                i++;
-                t = tokens.LT(i);
-            }
-            buf.Append("]");
-            string result = buf.ToString();
-            Assert.AreEqual(expected, result);
-        }
-
[TestMethod]
public void TestOneExpr()
{
string template = "<name>";
string expected = "[[@0,0:0='<',<LDELIM>,1:0], [@1,1:4='name',<ID>,1:1], " +
"[@2,5:5='>',<RDELIM>,1:5]]";
-            Check(template, expected);
+            CheckTokens(template, expected);
}

[TestMethod]
@@ -78,7 +57,7 @@ namespace AntlrUnitTests.ST4
string expected = "[[@0,0:2='hi ',<TEXT>,1:0], [@1,3:3='<',<LDELIM>,1:3], " +
"[@2,4:7='name',<ID>,1:4], [@3,8:8='>',<RDELIM>,1:8], " +
"[@4,9:12=' mom',<TEXT>,1:9]]";
-            Check(template, expected);
+            CheckTokens(template, expected);
}

[TestMethod]
@@ -86,7 +65,7 @@ namespace AntlrUnitTests.ST4
{
string template = "hi \\<name>";
string expected = "[[@0,0:0='hi <name>',<TEXT>,1:0]]";
-            Check(template, expected);
+            CheckTokens(template, expected);
}

[TestMethod]
@@ -96,7 +75,7 @@ namespace AntlrUnitTests.ST4
string expected =
"[[@0,0:0='<',<LDELIM>,1:0], [@1,1:1='a',<ID>,1:1], [@2,2:2='>',<RDELIM>,1:2], " +
"[@3,3:0='<dog',<TEXT>,1:3]]";
-            Check(template, expected);
+            CheckTokens(template, expected);
}

[TestMethod]
@@ -104,7 +83,7 @@ namespace AntlrUnitTests.ST4
{
string template = "hi \\x";
string expected = "[[@0,0:4='hi \\x',<TEXT>,1:0]]";
-            Check(template, expected);
+            CheckTokens(template, expected);
}

[TestMethod]
@@ -116,7 +95,7 @@ namespace AntlrUnitTests.ST4
"[@4,8:8='a',<ID>,1:8], [@5,9:9='=',<EQUALS>,1:9], " +
"[@6,10:12='\">\"',<STRING>,1:10], [@7,13:13=')',<RPAREN>,1:13], " +
"[@8,14:14='>',<RDELIM>,1:14]]";
-            Check(template, expected);
+            CheckTokens(template, expected);
}

[TestMethod]
@@ -128,7 +107,7 @@ namespace AntlrUnitTests.ST4
"[@3,7:7='(',<LPAREN>,1:7], [@4,8:8='a',<ID>,1:8], [@5,9:9='=',<EQUALS>,1:9], " +
"[@6,10:0='\">\"\"',<STRING>,1:10], [@7,15:15=')',<RPAREN>,1:15], " +
"[@8,16:16='>',<RDELIM>,1:16]]";
-            Check(template, expected);
+            CheckTokens(template, expected);
}

[TestMethod]
@@ -137,7 +116,7 @@ namespace AntlrUnitTests.ST4
string template = "hi <names:{n | <n>}>";
string expected =
"[[@0,0:2='hi ',<TEXT>,1:0], [@1,3:3='<',<LDELIM>,1:3], [@2,4:8='names',<ID>,1:4], [@3,9:9=':',<COLON>,1:9], [@4,10:10='{',<LCURLY>,1:10], [@5,11:11='n',<ID>,1:11], [@6,13:13='|',<PIPE>,1:13], [@7,15:15='<',<LDELIM>,1:15], [@8,16:16='n',<ID>,1:16], [@9,17:17='>',<RDELIM>,1:17], [@10,18:18='}',<RCURLY>,1:18], [@11,19:19='>',<RDELIM>,1:19]]";
-            Check(template, expected);
+            CheckTokens(template, expected);
}

[TestMethod]
@@ -151,7 +130,7 @@ namespace AntlrUnitTests.ST4
"[@6,12:12='<',<LDELIM>,1:12], [@7,13:14='it',<ID>,1:13], " +
"[@8,15:15='>',<RDELIM>,1:15], [@9,16:16='}',<RCURLY>,1:16], " +
"[@10,17:17='>',<RDELIM>,1:17]]";
-            Check(template, expected);
+            CheckTokens(template, expected);
}

[TestMethod]
@@ -160,7 +139,7 @@ namespace AntlrUnitTests.ST4
string template = "hi <names:{x,y | <x><y>}>"; // semantically bogus
string expected =
"[[@0,0:2='hi ',<TEXT>,1:0], [@1,3:3='<',<LDELIM>,1:3], [@2,4:8='names',<ID>,1:4], [@3,9:9=':',<COLON>,1:9], [@4,10:10='{',<LCURLY>,1:10], [@5,11:11='x',<ID>,1:11], [@6,12:12=',',<COMMA>,1:12], [@7,13:13='y',<ID>,1:13], [@8,15:15='|',<PIPE>,1:15], [@9,17:17='<',<LDELIM>,1:17], [@10,18:18='x',<ID>,1:18], [@11,19:19='>',<RDELIM>,1:19], [@12,20:20='<',<LDELIM>,1:20], [@13,21:21='y',<ID>,1:21], [@14,22:22='>',<RDELIM>,1:22], [@15,23:23='}',<RCURLY>,1:23], [@16,24:24='>',<RDELIM>,1:24]]";
-            Check(template, expected);
+            CheckTokens(template, expected);
}

[TestMethod]
@@ -169,7 +148,7 @@ namespace AntlrUnitTests.ST4
string template = "hi <names:{n | <n:{<it>}>}>";
string expected =
"[[@0,0:2='hi ',<TEXT>,1:0], [@1,3:3='<',<LDELIM>,1:3], [@2,4:8='names',<ID>,1:4], [@3,9:9=':',<COLON>,1:9], [@4,10:10='{',<LCURLY>,1:10], [@5,11:11='n',<ID>,1:11], [@6,13:13='|',<PIPE>,1:13], [@7,15:15='<',<LDELIM>,1:15], [@8,16:16='n',<ID>,1:16], [@9,17:17=':',<COLON>,1:17], [@10,18:18='{',<LCURLY>,1:18], [@11,19:19='<',<LDELIM>,1:19], [@12,20:21='it',<ID>,1:20], [@13,22:22='>',<RDELIM>,1:22], [@14,23:23='}',<RCURLY>,1:23], [@15,24:24='>',<RDELIM>,1:24], [@16,25:25='}',<RCURLY>,1:25], [@17,26:26='>',<RDELIM>,1:26]]";
-            Check(template, expected);
+            CheckTokens(template, expected);
}

[TestMethod]
@@ -190,7 +169,7 @@ namespace AntlrUnitTests.ST4
"[@20,39:39=';',<SEMI>,1:39], [@21,41:49='separator',<ID>,1:41], " +
"[@22,50:50='=',<EQUALS>,1:50], [@23,51:54='\", \"',<STRING>,1:51], " +
"[@24,55:55='>',<RDELIM>,1:55], [@25,56:56='*',<TEXT>,1:56]]";
-            Check(template, expected);
+            CheckTokens(template, expected);
}

[TestMethod]
@@ -203,7 +182,7 @@ namespace AntlrUnitTests.ST4
"[@6,10:10='>',<RDELIM>,1:10], [@7,11:15='works',<TEXT>,1:11], " +
"[@8,16:16='<',<LDELIM>,1:16], [@9,17:21='endif',<ENDIF>,1:17], " +
"[@10,22:22='>',<RDELIM>,1:22]]";
-            Check(template, expected);
+            CheckTokens(template, expected);
}

[TestMethod]
@@ -216,7 +195,7 @@ namespace AntlrUnitTests.ST4
"[@6,10:10='>',<RDELIM>,1:10], [@7,11:15='works',<TEXT>,1:11], " +
"[@8,16:16='<',<LDELIM>,1:16], [@9,17:21='endif',<ENDIF>,1:17], " +
"[@10,22:22='>',<RDELIM>,1:22]]";
-            Check(template, expected);
+            CheckTokens(template, expected);
}

[TestMethod]
@@ -230,7 +209,7 @@ namespace AntlrUnitTests.ST4
"[@8,16:19='else',<ELSE>,1:16], [@9,20:20='>',<RDELIM>,1:20], " +
"[@10,21:24='fail',<TEXT>,1:21], [@11,25:25='<',<LDELIM>,1:25], " +
"[@12,26:30='endif',<ENDIF>,1:26], [@13,31:31='>',<RDELIM>,1:31]]";
-            Check(template, expected);
+            CheckTokens(template, expected);
}

[TestMethod]
@@ -248,7 +227,7 @@ namespace AntlrUnitTests.ST4
"[@16,36:36='>',<RDELIM>,1:36], [@17,37:40='fail',<TEXT>,1:37], " +
"[@18,41:41='<',<LDELIM>,1:41], [@19,42:46='endif',<ENDIF>,1:42], " +
"[@20,47:47='>',<RDELIM>,1:47]]";
-            Check(template, expected);
+            CheckTokens(template, expected);
}
}
}
diff --git a/Antlr3.vsmdi b/Antlr3.vsmdi
index e2d4094..f518fa7 100644
--- a/Antlr3.vsmdi
+++ b/Antlr3.vsmdi
@@ -295,7 +295,15 @@
<TestLink id="d91387b8-07ea-e9b6-7401-8c929cac5355" name="TestLabeledNotSetsInLexer" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
</TestLinks>
</TestList>
-  <TestList name="Dollar Delimiters" id="249ced62-20e1-4998-9a49-3f6c94330743" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167" />
+  <TestList name="Dollar Delimiters" id="249ced62-20e1-4998-9a49-3f6c94330743" parentListId="4adbb104-d28d-4362-8420-a9fefe69c167">
+    <TestLinks>
+      <TestLink id="fd3235a0-0c5f-26ac-5630-fddb973c7405" name="TestEscInString" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0ed21c7c-9771-66f3-472f-ce6dd7d14e1f" name="TestNestedSubtemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="8a638168-a023-e7f0-466b-8622442b351b" name="TestString" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0bff8755-5911-c552-edd2-bece76d4ab80" name="TestSimpleAttr" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+      <TestLink id="0472ac85-5868-bac6-14c5-442d03c993ce" name="TestSubtemplate" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />
+    </TestLinks>
+  </TestList>
<TestList name="Templates" id="24fbf8dd-7c87-4dac-ab4d-7fbcb52b5177" parentListId="8c43106b-9dc1-4907-a29f-aa66a61bf5b6">
<TestLinks>
<TestLink id="c60bf111-c68e-a2f1-9208-f0ae4e3e80dd" name="TestTemplateConstructorNoArgs" storage="antlr3.test\bin\debug\antlrunittests.dll" type="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestElement, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.ObjectModel,   PublicKeyToken=b03f5f7f11d50a3a" />

