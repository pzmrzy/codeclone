commit b7cbbbcbb164f8c5db191436271fdc1f4e8b5c6c
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Thu Dec 10 12:26:42 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Thu Dec 10 12:26:42 2009 -0800

C# Port:
* Merge CL6338

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6469]

diff --git a/Antlr3.Test/ST4/TestGroups.cs b/Antlr3.Test/ST4/TestGroups.cs
index 7a93518..b042697 100644
--- a/Antlr3.Test/ST4/TestGroups.cs
+++ b/Antlr3.Test/ST4/TestGroups.cs
@@ -33,13 +33,9 @@
namespace AntlrUnitTests.ST4
{
using Microsoft.VisualStudio.TestTools.UnitTesting;
+    using StringTemplate;
using ArgumentException = System.ArgumentException;
using Path = System.IO.Path;
-    using ST = StringTemplate.Template;
-    using STGroup = StringTemplate.TemplateGroup;
-    using STGroupDir = StringTemplate.TemplateGroupDirectory;
-    using STGroupFile = StringTemplate.TemplateGroupFile;
-    using String = System.String;

[TestClass]
public class TestGroups : StringTemplateTestBase
@@ -47,36 +43,36 @@ namespace AntlrUnitTests.ST4
[TestMethod]
public void TestSimpleGroup()
{
-            String dir = GetRandomDir();
-            String a =
+            string dir = GetRandomDir();
+            string a =
"a(x) ::= <<" + newline +
"foo" + newline +
">>" + newline;
WriteFile(dir, "a.st", a);
-            STGroup group = new STGroupDir(dir);
-            ST st = group.GetInstanceOf("a");
-            String expected = "foo" + newline;
-            String result = st.Render();
+            TemplateGroup group = new TemplateGroupDirectory(dir);
+            Template st = group.GetInstanceOf("a");
+            string expected = "foo" + newline;
+            string result = st.Render();
Assert.AreEqual(expected, result);
}

[TestMethod]
public void TestGroupWithTwoTemplates()
{
-            String dir = GetRandomDir();
-            String a =
+            string dir = GetRandomDir();
+            string a =
"a(x) ::= <<" + newline +
"foo" + newline +
">>" + newline;
WriteFile(dir, "a.st", a);
-            String b =
+            string b =
"b() ::= \"bar\"" + newline;
WriteFile(dir, "b.st", b);
-            STGroup group = new STGroupDir(dir);
-            ST st1 = group.GetInstanceOf("a");
-            ST st2 = group.GetInstanceOf("b");
-            String expected = "foo" + newline + "bar";
-            String result = st1.Render() + st2.Render();
+            TemplateGroup group = new TemplateGroupDirectory(dir);
+            Template st1 = group.GetInstanceOf("a");
+            Template st2 = group.GetInstanceOf("b");
+            string expected = "foo" + newline + "bar";
+            string result = st1.Render() + st2.Render();
Assert.AreEqual(expected, result);
}

@@ -84,20 +80,20 @@ namespace AntlrUnitTests.ST4
public void TestSubdir()
{
// /randomdir/a and /randomdir/subdir/b
-            String dir = GetRandomDir();
-            String a =
+            string dir = GetRandomDir();
+            string a =
"a(x) ::= <<" + newline +
"foo" + newline +
">>" + newline;
WriteFile(dir, "a.st", a);
-            String b =
+            string b =
"b() ::= \"bar\"" + newline;
WriteFile(Path.Combine(dir, "subdir"), "b.st", b);
-            STGroup group = new STGroupDir(dir);
-            ST st1 = group.GetInstanceOf("a");
-            ST st2 = group.GetInstanceOf("subdir/b");
-            String expected = "foo" + newline + "bar";
-            String result = st1.Render() + st2.Render();
+            TemplateGroup group = new TemplateGroupDirectory(dir);
+            Template st1 = group.GetInstanceOf("a");
+            Template st2 = group.GetInstanceOf("subdir/b");
+            string expected = "foo" + newline + "bar";
+            string result = st1.Render() + st2.Render();
Assert.AreEqual(expected, result);
}

@@ -105,22 +101,22 @@ namespace AntlrUnitTests.ST4
public void TestGroupFileInDir()
{
// /randomdir/a and /randomdir/group.stg with b and c templates
-            String dir = GetRandomDir();
-            String a =
+            string dir = GetRandomDir();
+            string a =
"a(x) ::= <<\n" +
"foo\n" +
">>\n";
WriteFile(dir, "a.st", a);
-            String groupFile =
+            string groupFile =
"b() ::= \"bar\"\n" +
"c() ::= \"duh\"\n";
WriteFile(dir, "group.stg", groupFile);
-            STGroup group = new STGroupDir(dir);
-            ST st1 = group.GetInstanceOf("a");
-            ST st2 = group.GetInstanceOf("group/b");
-            ST st3 = group.GetInstanceOf("group/c");
-            String expected = "foo" + newline + "barduh";
-            String result = st1.Render() + st2.Render() + st3.Render();
+            TemplateGroup group = new TemplateGroupDirectory(dir);
+            Template st1 = group.GetInstanceOf("a");
+            Template st2 = group.GetInstanceOf("group/b");
+            Template st3 = group.GetInstanceOf("group/c");
+            string expected = "foo" + newline + "barduh";
+            string result = st1.Render() + st2.Render() + st3.Render();
Assert.AreEqual(expected, result);
}

@@ -128,20 +124,20 @@ namespace AntlrUnitTests.ST4
public void TestSubSubdir()
{
// /randomdir/a and /randomdir/subdir/b
-            String dir = GetRandomDir();
-            String a =
+            string dir = GetRandomDir();
+            string a =
"a(x) ::= <<" + newline +
"foo" + newline +
">>" + newline;
WriteFile(dir, "a.st", a);
-            String b =
+            string b =
"b() ::= \"bar\"" + newline;
WriteFile(Path.Combine(Path.Combine(dir, "sub1"), "sub2"), "b.st", b);
-            STGroup group = new STGroupDir(dir);
-            ST st1 = group.GetInstanceOf("a");
-            ST st2 = group.GetInstanceOf("sub1/sub2/b");
-            String expected = "foo" + newline + "bar";
-            String result = st1.Render() + st2.Render();
+            TemplateGroup group = new TemplateGroupDirectory(dir);
+            Template st1 = group.GetInstanceOf("a");
+            Template st2 = group.GetInstanceOf("sub1/sub2/b");
+            string expected = "foo" + newline + "bar";
+            string result = st1.Render() + st2.Render();
Assert.AreEqual(expected, result);
}

@@ -149,34 +145,34 @@ namespace AntlrUnitTests.ST4
public void TestGroupFileInSubDir()
{
// /randomdir/a and /randomdir/group.stg with b and c templates
-            String dir = GetRandomDir();
-            String a =
+            string dir = GetRandomDir();
+            string a =
"a(x) ::= <<\n" +
"foo\n" +
">>\n";
WriteFile(dir, "a.st", a);
-            String groupFile =
+            string groupFile =
"b() ::= \"bar\"\n" +
"c() ::= \"duh\"\n";
WriteFile(dir, Path.Combine("subdir", "group.stg"), groupFile);
-            STGroup group = new STGroupDir(dir);
-            ST st1 = group.GetInstanceOf("a");
-            ST st2 = group.GetInstanceOf("subdir/group/b");
-            ST st3 = group.GetInstanceOf("subdir/group/c");
-            String expected = "foo" + newline + "barduh";
-            String result = st1.Render() + st2.Render() + st3.Render();
+            TemplateGroup group = new TemplateGroupDirectory(dir);
+            Template st1 = group.GetInstanceOf("a");
+            Template st2 = group.GetInstanceOf("subdir/group/b");
+            Template st3 = group.GetInstanceOf("subdir/group/c");
+            string expected = "foo" + newline + "barduh";
+            string result = st1.Render() + st2.Render() + st3.Render();
Assert.AreEqual(expected, result);
}

[TestMethod]
public void TestAttemptToAccessTemplateUnderGroupFile()
{
-            String dir = GetRandomDir();
-            String groupFile =
+            string dir = GetRandomDir();
+            string groupFile =
"a() ::= \"bar\"\n";
WriteFile(dir, "group.stg", groupFile);
-            STGroup group = new STGroupFile(Path.Combine(dir, "group.stg"));
-            String error = null;
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
+            string error = null;
try
{
group.GetInstanceOf("sub/b"); // can't have sub under group file
@@ -185,20 +181,20 @@ namespace AntlrUnitTests.ST4
{
error = iae.Message;
}
-            String expected = "can't use relative template name sub/b";
-            String result = error;
+            string expected = "can't use relative template name sub/b";
+            string result = error;
Assert.AreEqual(expected, result);
}

[TestMethod]
public void TestAttemptToUseWrongGroupFileNameFromRoot()
{
-            String dir = GetRandomDir();
-            String groupFile =
+            string dir = GetRandomDir();
+            string groupFile =
"a() ::= \"bar\"\n";
WriteFile(dir, "group.stg", groupFile);
-            STGroup group = new STGroupFile(Path.Combine(dir, "group.stg"));
-            String error = null;
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
+            string error = null;
try
{
group.GetInstanceOf("/sub/a"); // can't have sub under group file
@@ -207,42 +203,42 @@ namespace AntlrUnitTests.ST4
{
error = iae.Message;
}
-            String expected = "name must be of form /group/templatename: /sub/a";
-            String result = error;
+            string expected = "name must be of form /group/templatename: /sub/a";
+            string result = error;
Assert.AreEqual(expected, result);
}

[TestMethod]
public void TestAttemptToGoTooDeepUsingGroupFileNameFromRoot()
{
-            String dir = GetRandomDir();
-            String groupFile =
+            string dir = GetRandomDir();
+            string groupFile =
"a() ::= \"bar\"\n";
WriteFile(dir, "group.stg", groupFile);
-            STGroup group = new STGroupFile(Path.Combine(dir, "group.stg"));
-            String error = null;
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(dir, "group.stg"));
+            string error = null;
try
{
-                group.GetInstanceOf("/gropu/b/b"); // can't have sub under group file
+                group.GetInstanceOf("/group/b/b"); // can't have sub under group file
}
catch (ArgumentException iae)
{
error = iae.Message;
}
-            String expected = "name must be of form /group/templatename: /gropu/b/b";
-            String result = error;
+            string expected = "name must be of form /group/templatename: /group/b/b";
+            string result = error;
Assert.AreEqual(expected, result);
}

[TestMethod]
public void TestAttemptToAccessDirWithSameNameAsTemplate()
{
-            String dir = GetRandomDir();
-            String a =
+            string dir = GetRandomDir();
+            string a =
"a(x) ::= <<foo>>\n";
WriteFile(dir, "a.st", a);
-            STGroup group = new STGroupDir(dir);
-            String error = null;
+            TemplateGroup group = new TemplateGroupDirectory(dir);
+            string error = null;
try
{
group.GetInstanceOf("a/b"); // 'a' is a template
@@ -251,20 +247,20 @@ namespace AntlrUnitTests.ST4
{
error = iae.Message;
}
-            String expected = "a is a template not a dir or group file";
-            String result = error;
+            string expected = "a is a template not a dir or group file";
+            string result = error;
Assert.AreEqual(expected, result);
}

[TestMethod]
public void TestAttemptToAccessSubDirWithWrongRootName()
{
-            String dir = GetRandomDir();
-            String a =
+            string dir = GetRandomDir();
+            string a =
"a(x) ::= <<foo>>\n";
WriteFile(dir + "/subdir", "a.st", a);
-            STGroup group = new STGroupDir(Path.Combine(dir, "subdir"));
-            String error = null;
+            TemplateGroup group = new TemplateGroupDirectory(Path.Combine(dir, "subdir"));
+            string error = null;
try
{
group.GetInstanceOf("/x/b"); // name is subdir not x
@@ -273,8 +269,39 @@ namespace AntlrUnitTests.ST4
{
error = iae.Message;
}
-            String expected = "x doesn't match directory name subdir";
-            String result = error;
+            string expected = "no such subdirectory or group file: x";
+            string result = error;
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestRefToAnotherTemplateInSameGroup()
+        {
+            string dir = GetRandomDir();
+            string a = "a() ::= << <b()> >>\n";
+            string b = "b() ::= <<bar>>\n";
+            WriteFile(dir, "a.st", a);
+            WriteFile(dir, "b.st", b);
+            TemplateGroup group = new TemplateGroupDirectory(dir);
+            Template st = group.GetInstanceOf("a");
+            string expected = " bar ";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestRefToAnotherTemplateInSameSubdir()
+        {
+            // /randomdir/a and /randomdir/subdir/b
+            string dir = GetRandomDir();
+            string a = "a() ::= << <b()> >>\n";
+            string b = "b() ::= <<bar>>\n";
+            WriteFile(dir + "/subdir", "a.st", a);
+            WriteFile(dir + "/subdir", "b.st", b);
+            TemplateGroup group = new TemplateGroupDirectory(dir);
+            Template st = group.GetInstanceOf("subdir/a");
+            string expected = " bar ";
+            string result = st.Render();
Assert.AreEqual(expected, result);
}
}
diff --git a/StringTemplate4/TemplateGroup.cs b/StringTemplate4/TemplateGroup.cs
index b76493b..382716e 100644
--- a/StringTemplate4/TemplateGroup.cs
+++ b/StringTemplate4/TemplateGroup.cs
@@ -69,14 +69,19 @@ namespace StringTemplate
public static readonly ITemplateErrorListener DefaultErrorListener = new DefaultErrorListenerImpl();

/** The topmost group of templates in the template tree.
-         *  If null, implies this is the root
+         *  Point to yourself if group is root; but parent will be null.
*/
public TemplateGroup root;

+        public TemplateGroupDirectory parent; // Are we a subdir or group file in dir?
+
+        public string fullyQualifiedRootDirName; // if we're root
+
/** Load files using what encoding? */
public Encoding encoding;

-        //public String supergroup;
+        // only in root
+        public IList<TemplateGroup> imports; // OR, supergroups;???

public List<string> interfaces;

@@ -109,11 +114,24 @@ namespace StringTemplate
{
}

-        /*
-        public TemplateGroup(String name) {
-            this.name = name;
+        public string AbsoluteTemplatePath
+        {
+            get
+            {
+                Console.WriteLine("GetTemplatePathFromRoot root=" + (root != null ? root.GetName() : null) + " this=" + this.GetName());
+                IList<string> elems = new List<string>();
+                TemplateGroup p = this;
+                while (p != root)
+                {
+                    elems.Insert(0, p.GetName());
+                    p = p.parent;
+                }
+
+                string s = "/" + string.Join("/", elems.ToArray());
+                Console.WriteLine("; template path=" + s);
+                return s;
+            }
}
-        */

// TODO: for dirs, should this load everything in dir and below?
public virtual void Load()
@@ -125,6 +143,7 @@ namespace StringTemplate
*/
public virtual Template GetInstanceOf(string name)
{
+            Console.WriteLine("GetInstanceOf(" + name + ") resolves to " + AbsoluteTemplatePath + "/" + name);
CompiledTemplate c = LookupTemplate(name);
if (c != null)
{
@@ -196,7 +215,6 @@ namespace StringTemplate
throw new ArgumentException("cannot have '.' in template names");
}
Compiler c = new Compiler();
-            //template = Misc.trimOneStartingWS(template);
CompiledTemplate code = c.Compile(template);
code.name = name;
code.formalArguments = args;
@@ -252,9 +270,14 @@ namespace StringTemplate
return "<no name>;";
}

+        public string GetPathFromRoot()
+        {
+            return root.fullyQualifiedRootDirName + AbsoluteTemplatePath;
+        }
+
public override string ToString()
{
-            return Show();
+            return GetName();
}

public virtual string Show()
diff --git a/StringTemplate4/TemplateGroupDirectory.cs b/StringTemplate4/TemplateGroupDirectory.cs
index 3395710..f957d33 100644
--- a/StringTemplate4/TemplateGroupDirectory.cs
+++ b/StringTemplate4/TemplateGroupDirectory.cs
@@ -35,6 +35,8 @@ namespace StringTemplate
using System.Linq;
using Antlr.Runtime;
using ArgumentException = System.ArgumentException;
+    using ArgumentNullException = System.ArgumentNullException;
+    using Console = System.Console;
using Directory = System.IO.Directory;
using Encoding = System.Text.Encoding;
using Exception = System.Exception;
@@ -43,25 +45,36 @@ namespace StringTemplate

public class TemplateGroupDirectory : TemplateGroup
{
-        public string dir;
+        public string dirName;

-        public TemplateGroupDirectory(string dirName)
+        public TemplateGroupDirectory(string fullyQualifiedRootDirName)
{
-            dir = dirName;
-            if (!Directory.Exists(dir))
+            this.parent = null;
+            this.root = this;
+            this.fullyQualifiedRootDirName = fullyQualifiedRootDirName;
+            if (!Directory.Exists(fullyQualifiedRootDirName))
{
-                throw new ArgumentException("No such directory: " + dirName);
+                throw new ArgumentException("No such directory: " + fullyQualifiedRootDirName);
}
}

-        public TemplateGroupDirectory(TemplateGroup root, string dirName)
-            : this(dirName)
+        public TemplateGroupDirectory(TemplateGroupDirectory parent, string dirName)
{
-            this.root = root;
+            if (parent == null)
+                throw new ArgumentNullException("parent", "Relative dir " + dirName + " can't have a null parent.");
+
+            this.parent = parent;
+            this.root = parent.root;
+            this.dirName = dirName;
+            string dir = GetPathFromRoot();
+            if (!Directory.Exists(dir))
+            {
+                throw new ArgumentException("No such directory: " + dir);
+            }
}

-        public TemplateGroupDirectory(TemplateGroup root, string dirName, Encoding encoding)
-            : this(root, dirName)
+        public TemplateGroupDirectory(TemplateGroupDirectory parent, string dirName, Encoding encoding)
+            : this(parent, dirName)
{
this.encoding = encoding;
}
@@ -70,50 +83,47 @@ namespace StringTemplate
{
if (name.Length > 0 && (name[0] == Path.DirectorySeparatorChar || name[0] == Path.AltDirectorySeparatorChar))
{
-                if (root != null)
+                if (this != root)
return root.LookupTemplate(name);
-                // strip '/' and try again; we're root
-                //return lookupTemplate(name.substring(1));
+
+                // we're the root; strip '/' and try again
name = name.Substring(1);
-                string[] names = name.Split(new char[] { Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar });
-                if (!names[0].Equals(Path.GetFileName(dir)))
-                {
-                    throw new ArgumentException(names[0] + " doesn't match directory name " + Path.GetFileName(dir));
-                }
}
+
if (name.IndexOfAny(new char[] { Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar }) >= 0)
-                return LookupQualifiedTemplate(dir, name);
+                return LookupQualifiedTemplate(name);

// else plain old template name, check if already here
CompiledTemplate code;
if (templates.TryGetValue(name, out code))
return code;

-            return LookupTemplateFile(name);
+            return LookupTemplateFile(name); // try to load then
}

/** Look up template name with '/' anywhere but first char */
-        protected virtual CompiledTemplate LookupQualifiedTemplate(string dir, string name)
+        protected virtual CompiledTemplate LookupQualifiedTemplate(string name)
{
// TODO: slow to load a template!
+            string d = GetPathFromRoot();
string[] names = name.Split(new char[] { Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar });
-            string templateFile = Path.Combine(dir, names[0] + ".st");
+            string templateFile = Path.Combine(d, names[0] + ".st");
if (templates.ContainsKey(names[0]) || File.Exists(templateFile))
{
throw new ArgumentException(names[0] + " is a template not a dir or group file");
}
// look for a directory or group file called names[0]
TemplateGroup sub = null;
-            string subF = Path.Combine(dir, names[0]);
-            if (Directory.Exists(subF))
+            string group = Path.Combine(d, names[0]);
+            if (Directory.Exists(group))
{
-                sub = new TemplateGroupDirectory(root, Path.Combine( dir , names[0]));
+                sub = new TemplateGroupDirectory(this, names[0]);
}
-            else if (File.Exists(Path.Combine(dir, names[0] + ".stg")))
+            else if (File.Exists(Path.Combine(d, names[0] + ".stg")))
{
try
{
-                    sub = new TemplateGroupFile(Path.Combine(dir, names[0] + ".stg"));
+                    sub = new TemplateGroupFile(this, names[0] + ".stg");
}
catch (Exception e)
{
@@ -122,19 +132,27 @@ namespace StringTemplate
}
else
{
-                throw new ArgumentException("no such subgroup: " + names[0]);
+                throw new ArgumentException("no such subdirectory or group file: " + names[0]);
}
string allButFirstName = string.Join(Path.DirectorySeparatorChar.ToString(), names.Skip(1).ToArray());
-            return sub.LookupTemplate(allButFirstName);
+            CompiledTemplate st = sub.LookupTemplate(allButFirstName);
+            // try list of imports at root
+            if (st == null)
+            {
+                Console.WriteLine("look for " + name + " in " + imports);
+            }
+            return st;
}

+        // load from disk
public virtual CompiledTemplate LookupTemplateFile(string name)
{
-            // not in templates list, load it from disk
-            string f = Path.Combine(dir, name + ".st");
+            string d = GetPathFromRoot();
+            string f = Path.Combine(d, name + ".st");
if (!File.Exists(f))
-            { // TODO: add tolerance check here
-                throw new ArgumentException("no such template: " + name);
+            {
+                // TODO: add tolerance check here
+                throw new ArgumentException("no such template: /" + AbsoluteTemplatePath + "/" + name);
}
try
{
@@ -148,14 +166,17 @@ namespace StringTemplate
}
catch (Exception e)
{
-                listener.Error("can't load template file: " + Path.Combine(f, name), e);
+                listener.Error("can't load template file: " + Path.Combine(Path.GetFullPath(f), name), e);
}
return null;
}

public override string GetName()
{
-            return Path.GetFileName(dir);
+            if (parent == null)
+                return "/";
+
+            return dirName;
}

}
diff --git a/StringTemplate4/TemplateGroupFile.cs b/StringTemplate4/TemplateGroupFile.cs
index dfd99bf..1150a31 100644
--- a/StringTemplate4/TemplateGroupFile.cs
+++ b/StringTemplate4/TemplateGroupFile.cs
@@ -42,39 +42,48 @@ namespace StringTemplate
public class TemplateGroupFile : TemplateGroup
{
public string fileName;
-        //public Encoding encoding;

-        public TemplateGroupFile(string fileName)
+        public TemplateGroupFile(string fullyQualifiedFileName)
{
if (!Path.GetExtension(fileName).Equals(".stg", StringComparison.OrdinalIgnoreCase))
{
-                throw new ArgumentException("Group file names must end in .stg: " + fileName);
+                throw new ArgumentException("Group file names must end in .stg: " + fullyQualifiedFileName);
}
-            this.fileName = fileName;
+
+            this.fileName = Path.GetFileName(fullyQualifiedFileName);
+            this.parent = null;
+            this.root = this;
+            this.fullyQualifiedRootDirName = Path.GetFullPath(Path.GetDirectoryName(fullyQualifiedRootDirName));
}

-        public TemplateGroupFile(TemplateGroup root, string fileName)
-            : this(fileName)
+        public TemplateGroupFile(TemplateGroupDirectory parent, string fileName)
{
-            this.root = root;
+            if (parent == null)
+            {
+                throw new ArgumentException("Relative dir " + fileName + " can't have null parent");
+            }
+
+            this.fileName = fileName;
+            this.parent = parent;
+            this.root = parent.root;
}

-        public TemplateGroupFile(TemplateGroup root, string fileName, Encoding encoding)
-            : this(root, fileName)
+        public TemplateGroupFile(TemplateGroupDirectory parent, string fileName, Encoding encoding)
+            : this(parent, fileName)
{
this.encoding = encoding;
}

public override string GetName()
{
-            return Path.GetFileName(fileName);
+            return Path.GetFileNameWithoutExtension(fileName);
}

public override CompiledTemplate LookupTemplate(string name)
{
if (name.Length > 0 && (name[0] == Path.DirectorySeparatorChar || name[0] == Path.AltDirectorySeparatorChar))
{
-                if (root != null)
+                if (this != root)
return root.LookupTemplate(name);
// if no root, name must be "/groupfile/templatename"
string[] names = name.Split(new char[] { Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar });
@@ -105,9 +114,12 @@ namespace StringTemplate
{
if (alreadyLoaded)
return;
+
+            string fullFileName = GetPathFromRoot() + ".stg";
+
try
{
-                ANTLRFileStream fs = new ANTLRFileStream(fileName, encoding);
+                ANTLRFileStream fs = new ANTLRFileStream(fullFileName, encoding);
GroupLexer lexer = new GroupLexer(fs);
UnbufferedTokenStream tokens = new UnbufferedTokenStream(lexer);
GroupParser parser = new GroupParser(tokens);
@@ -116,7 +128,7 @@ namespace StringTemplate
}
catch (Exception e)
{
-                listener.Error("can't load group file: " + fileName, e);
+                listener.Error("can't load group file: " + fullFileName, e);
}
}


