commit 9287f3cdeecc81717f2fc5fc71a6611a9f814fac
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Dec 14 12:08:00 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Dec 14 12:08:00 2009 -0800

C# Port:
* Merge 6408

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 6518]

diff --git a/StringTemplate4/ErrorTolerance.cs b/StringTemplate4/ErrorTolerance.cs
index fdd0d1f..845c590 100644
--- a/StringTemplate4/ErrorTolerance.cs
+++ b/StringTemplate4/ErrorTolerance.cs
@@ -32,26 +32,31 @@

namespace StringTemplate
{
+    using ThreadStatic = System.ThreadStaticAttribute;
+
public class ErrorTolerance
{
// bit set values telling ST what to care about
+        public static readonly int DETECT_UNKNOWN_ATTRIBUTE = 1;
public static readonly int DETECT_UNKNOWN_PROPERTY = 2;
-        public static readonly int DETECT_UNKNOWN_ATTRIBUTE = 4;
+        public static readonly int DETECT_UNKNOWN_TEMPLATE = 4;
public static readonly int DETECT_MALFORMED_TEMPLATE_NAME = 8;
-        public static readonly int DETECT_UNKNOWN_TEMPLATE = 16;

-        public static readonly int DEFAULT_TOLERANCE = 0;
+        public static readonly int DEFAULT_TOLERANCE = DETECT_UNKNOWN_TEMPLATE | DETECT_MALFORMED_TEMPLATE_NAME;

-        public int detect = DEFAULT_TOLERANCE;
+        [ThreadStatic]
+        public static int detect = DEFAULT_TOLERANCE;

public bool Detects(int x)
{
return (detect & x) != 0;
}
+
public void Detect(int x)
{
detect |= x;
}
+
public void Ignore(int x)
{
detect &= ~x;
diff --git a/StringTemplate4/TemplateGroup.cs b/StringTemplate4/TemplateGroup.cs
index bc7ae58..77c262d 100644
--- a/StringTemplate4/TemplateGroup.cs
+++ b/StringTemplate4/TemplateGroup.cs
@@ -57,28 +57,6 @@ namespace StringTemplate
public static readonly string DICT_KEY = "key";
public static readonly string DEFAULT_KEY = "default";

-        //private class DefaultErrorListenerImpl : ITemplateErrorListener
-        //{
-        //    public void Error(string message, Exception e)
-        //    {
-        //        Console.Error.WriteLine(message);
-        //        if (e != null)
-        //            Console.Error.WriteLine(e.StackTrace);
-        //    }
-
-        //    public void Error(string message)
-        //    {
-        //        Error(message, null);
-        //    }
-
-        //    public void Warning(string message)
-        //    {
-        //        Console.WriteLine(message);
-        //    }
-        //}
-
-        //public static readonly ITemplateErrorListener DefaultErrorListener = new DefaultErrorListenerImpl();
-
public string fullyQualifiedRootDirName;

/** Load files using what encoding? */
@@ -116,14 +94,6 @@ namespace StringTemplate

protected bool alreadyLoaded = false;

-        /** Where to report errors.  All string templates in this group
-         *  use this error handler by default.
-         */
-        //public ITemplateErrorListener listener = DefaultErrorListener;
-
-        public static ErrorTolerance DEFAULT_ERROR_TOLERANCE = new ErrorTolerance();
-        public ErrorTolerance tolerance = DEFAULT_ERROR_TOLERANCE;
-
public static TemplateGroup defaultGroup = new TemplateGroup();

public TemplateGroup()
@@ -136,18 +106,6 @@ namespace StringTemplate
set;
}

-        public ErrorTolerance ErrorTolerance
-        {
-            get
-            {
-                return this.tolerance;
-            }
-            set
-            {
-                this.tolerance = value;
-            }
-        }
-
public virtual string Name
{
get
@@ -491,20 +449,5 @@ namespace StringTemplate
}
return buf.ToString();
}
-
-        public virtual bool Detects(int x)
-        {
-            return tolerance.Detects(x);
-        }
-
-        public virtual void Detect(int x)
-        {
-            tolerance.Detect(x);
-        }
-
-        public virtual void Ignore(int x)
-        {
-            tolerance.Ignore(x);
-        }
}
}

