commit 0f09efff2ce81a70772117ac91a6e7d4c0d8274f
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Wed Feb 9 20:56:10 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Wed Feb 9 20:56:10 2011 -0800

(C# 3) New unit tests

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7665]

diff --git a/Antlr4.Test.StringTemplate/TestRegions.cs b/Antlr4.Test.StringTemplate/TestRegions.cs
index 700a8bb..f1ec470 100644
--- a/Antlr4.Test.StringTemplate/TestRegions.cs
+++ b/Antlr4.Test.StringTemplate/TestRegions.cs
@@ -142,6 +142,64 @@ namespace Antlr4.Test.StringTemplate
}

[TestMethod]
+        public void TestAnonymousTemplateInRegion()
+        {
+            string dir = tmpdir;
+            string g = "a() ::= <<[<@r()>]>>\n" +
+                       "@a.r() ::= <<\n"+
+                       "<[\"foo\"]:{x|<x>}>\n"+
+                       ">>\n";
+            writeFile(dir, "g.stg", g);
+
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(dir, "g.stg"));
+            Template st = group.GetInstanceOf("a");
+            string expected = "[foo]";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestAccessDictionaryFromAnonymousTemplate()
+        {
+            string dir = tmpdir;
+            string g =
+                "a() ::= <<[<[\"foo\",\"a\"]:{x|<if(values.(x))><x><endif>}>]>>\n" +
+                "values ::= [\n" +
+                "    \"a\":false,\n" +
+                "    default:true\n" +
+                "]\n";
+            writeFile(dir, "g.stg", g);
+
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(dir, "g.stg"));
+            Template st = group.GetInstanceOf("a");
+            string expected = "[foo]";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestAccessDictionaryFromAnonymousTemplateInRegion()
+        {
+            string dir = tmpdir;
+            string g =
+                "a() ::= <<[<@r()>]>>\n" +
+                "@a.r() ::= <<\n" +
+                "<[\"foo\",\"a\"]:{x|<if(values.(x))><x><endif>}>\n" +
+                ">>\n" +
+                "values ::= [\n" +
+                "    \"a\":false,\n" +
+                "    default:true\n" +
+                "]\n";
+            writeFile(dir, "g.stg", g);
+
+            TemplateGroup group = new TemplateGroupFile(Path.Combine(dir, "g.stg"));
+            Template st = group.GetInstanceOf("a");
+            string expected = "[foo]";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
public void TestCantDefineEmbeddedRegionAgain()
{
string dir = tmpdir;
diff --git a/Antlr4.Test.StringTemplate/TestWhitespace.cs b/Antlr4.Test.StringTemplate/TestWhitespace.cs
index 61362fe..a90b06e 100644
--- a/Antlr4.Test.StringTemplate/TestWhitespace.cs
+++ b/Antlr4.Test.StringTemplate/TestWhitespace.cs
@@ -35,7 +35,7 @@ namespace Antlr4.Test.StringTemplate
using Antlr4.StringTemplate;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using StringWriter = System.IO.StringWriter;
-    using Environment = System.Environment;
+    using System.Collections.Generic;

[TestClass]
public class TestWhitespace : BaseTest
@@ -191,7 +191,7 @@ namespace Antlr4.Test.StringTemplate
"<users>\n" +
"<users>\n" +
"end\n");
-            string expecting = "begin" + Environment.NewLine + "end" + newline;
+            string expecting = "begin" + newline + "end" + newline;
string result = t.Render();
Assert.AreEqual(expecting, result);
}
@@ -378,5 +378,21 @@ namespace Antlr4.Test.StringTemplate
string expecting = "Foo\na\nb\nc\n";     // expect \n in output
Assert.AreEqual(expecting, result);
}
+
+        [TestMethod]
+        public void TestNoSeparatorEmittedForSkippedIteratorValue()
+        {
+            Template st = new Template(
+                "<names:{name|<if(name.key)><name.Value><endif>}; separator=\" \">"
+                );
+            st.Add("names", new KeyValuePair<bool, string>(true, "Foo"));
+            st.Add("names", new KeyValuePair<bool, string>(false, "Bar"));
+            st.Add("names", new KeyValuePair<bool, string>(true, "Foo"));
+            StringWriter sw = new StringWriter();
+            st.Write(new AutoIndentWriter(sw));
+            string result = sw.ToString();
+            string expecting = "Foo Foo";
+            Assert.AreEqual(expecting, result);
+        }
}
}

