commit 84d2b67bf108c90b9119b1ab28d25b3df85b7298
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sun Nov 21 13:49:57 2010 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sun Nov 21 13:49:57 2010 -0800

Fix exception rethrow

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7109]

diff --git a/Antlr3/Antlr3.csproj b/Antlr3/Antlr3.csproj
index 3034fa7..dc47dba 100644
--- a/Antlr3/Antlr3.csproj
+++ b/Antlr3/Antlr3.csproj
@@ -144,6 +144,7 @@
<Antlr3 Include="Grammars\TreeToNFAConverter.g3" />
<Compile Include="Analysis\MachineProbe.cs" />
<Compile Include="Extensions\EnumerableExtensions.cs" />
+    <Compile Include="Extensions\ExceptionExtensions.cs" />
<Compile Include="Extensions\FuncEqualityComparer.cs" />
<Compile Include="Extensions\ListExtensions.cs" />
<Compile Include="Misc\Graph.cs" />
diff --git a/Antlr3/Extensions/ExceptionExtensions.cs b/Antlr3/Extensions/ExceptionExtensions.cs
new file mode 100644
index 0000000..a224d64
--- /dev/null
+++ b/Antlr3/Extensions/ExceptionExtensions.cs
@@ -0,0 +1,69 @@
+ï»¿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2005-2008 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2010 Sam Harwell, Pixel Mine, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr3.Extensions
+{
+    using System;
+    using BindingFlags = System.Reflection.BindingFlags;
+
+    public static class ExceptionExtensions
+    {
+        private static readonly Action<Exception> _internalPreserveStackTrace =
+            (Action<Exception>)Delegate.CreateDelegate(
+                typeof(Action<Exception>),
+                typeof(Exception).GetMethod(
+                    "InternalPreserveStackTrace",
+                    BindingFlags.Instance | BindingFlags.NonPublic));
+
+#pragma warning disable 618
+        public static bool IsCritical(this Exception e)
+        {
+            if (e is AccessViolationException
+                || e is StackOverflowException
+                || e is ExecutionEngineException
+                || e is OutOfMemoryException
+                || e is BadImageFormatException
+                || e is AppDomainUnloadedException)
+            {
+                return true;
+            }
+
+            return false;
+        }
+#pragma warning restore 618
+
+        public static void PreserveStackTrace(this Exception e)
+        {
+            _internalPreserveStackTrace(e);
+        }
+    }
+}
diff --git a/Antlr3/Grammars/TreeToNFAConverter.g3 b/Antlr3/Grammars/TreeToNFAConverter.g3
index 390069b..332d148 100644
--- a/Antlr3/Grammars/TreeToNFAConverter.g3
+++ b/Antlr3/Grammars/TreeToNFAConverter.g3
@@ -77,6 +77,7 @@ options
using Antlr3.Analysis;
using Antlr3.Misc;
using Antlr3.Tool;
+using Antlr3.Extensions;

using BitSet = Antlr.Runtime.BitSet;
using DFA = Antlr.Runtime.DFA;
@@ -587,7 +588,7 @@ setRule returns [IIntSet elements=new IntervalSet()]
EOR
)
;
-catch[RecognitionException re] { throw re; }
+catch[RecognitionException re] { re.PreserveStackTrace(); throw; }

setElement[IIntSet elements]
@init
@@ -706,7 +707,7 @@ options { backtrack = true; }
EOB
)
;
-catch[RecognitionException re] { throw re; }
+catch[RecognitionException re] { re.PreserveStackTrace(); throw; }
finally { inTest--; }

testSetRule returns [int alts=0]
@@ -725,7 +726,7 @@ testSetRule returns [int alts=0]
EOR
)
;
-catch[RecognitionException re] { throw re; }
+catch[RecognitionException re] { re.PreserveStackTrace(); throw; }
finally { inTest--; }

/** Match just an element; no ast suffix etc.. */
@@ -753,4 +754,4 @@ testSetElement returns [int alts=1]
|   ^( NOT tse=testSetElement )
{{ $alts = grammar.TokenTypes.Count - $tse.alts; }}
;
-catch[RecognitionException re] { throw re; }
+catch[RecognitionException re] { re.PreserveStackTrace(); throw; }

