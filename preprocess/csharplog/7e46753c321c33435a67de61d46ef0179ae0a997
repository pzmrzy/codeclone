commit 7e46753c321c33435a67de61d46ef0179ae0a997
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Tue Jan 18 15:49:25 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Tue Jan 18 15:49:25 2011 -0800

Expose terminal options to templates
Implement the "type" terminal option

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7432]

diff --git a/Antlr3/Grammars/CodeGenTreeWalker.g3 b/Antlr3/Grammars/CodeGenTreeWalker.g3
index 99077e3..b40cf97 100644
--- a/Antlr3/Grammars/CodeGenTreeWalker.g3
+++ b/Antlr3/Grammars/CodeGenTreeWalker.g3
@@ -1,10 +1,10 @@
/*
[The "BSD licence"]
- Copyright (c) 2005-2008 Terence Parr
+ Copyright (c) 2011 Terence Parr
All rights reserved.

Grammar conversion to ANTLR v3 and C#:
- Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
@@ -882,7 +882,7 @@ atom[GrammarAST scope, GrammarAST label, GrammarAST astSuffix]
$code.SetAttribute("token",tokenLabel);
if ( !currentAltHasASTRewrite && $t.terminalOptions!=null )
{
-					$code.SetAttribute("hetero",$t.terminalOptions[Grammar.defaultTokenOption]);
+					$code.SetAttribute("terminalOptions", $t.terminalOptions);
}
int i = ((TokenWithIndex)$t.Token).TokenIndex;
$code.SetAttribute("elementIndex", i);
@@ -908,7 +908,7 @@ atom[GrammarAST scope, GrammarAST label, GrammarAST astSuffix]
string tokenLabel = generator.GetTokenTypeAsTargetLabel(grammar.GetTokenType($c.text));
$code.SetAttribute("token",tokenLabel);
if ( $c.terminalOptions!=null ) {
-					$code.SetAttribute("hetero",$c.terminalOptions[Grammar.defaultTokenOption]);
+					$code.SetAttribute("terminalOptions",$c.terminalOptions);
}
int i = ((TokenWithIndex)$c.Token).TokenIndex;
$code.SetAttribute("elementIndex", i);
@@ -939,7 +939,7 @@ atom[GrammarAST scope, GrammarAST label, GrammarAST astSuffix]
$code.SetAttribute("token",tokenLabel);
if ( $s.terminalOptions!=null )
{
-					$code.SetAttribute("hetero",$s.terminalOptions[Grammar.defaultTokenOption]);
+					$code.SetAttribute("terminalOptions",$s.terminalOptions);
}
$code.SetAttribute("elementIndex", i);
generator.GenerateLocalFollow($s,tokenLabel,currentRuleName,i);
@@ -1253,11 +1253,6 @@ rewrite_atom[bool isRoot] returns [StringTemplate code=null]
Rule rule = grammar.GetRule(currentRuleName);
ICollection<string> tokenRefsInAlt = rule.GetTokenRefsInAlt(outerAltNum);
bool createNewNode = !tokenRefsInAlt.Contains(tokenName) || $arg!=null;
-			object hetero = null;
-			if ( term.terminalOptions!=null )
-			{
-				hetero = term.terminalOptions[Grammar.defaultTokenOption];
-			}
if ( createNewNode )
{
stName = "rewriteImaginaryTokenRef";
@@ -1267,7 +1262,7 @@ rewrite_atom[bool isRoot] returns [StringTemplate code=null]
stName += "Root";
}
$code = templates.GetInstanceOf(stName);
-			$code.SetAttribute("hetero", hetero);
+			$code.SetAttribute("terminalOptions",term.terminalOptions);
if ( $arg!=null )
{
List args = generator.TranslateAction(currentRuleName,$arg);
diff --git a/Antlr3/Tool/Grammar.cs b/Antlr3/Tool/Grammar.cs
index fbd53bf..1e5a7ad 100644
--- a/Antlr3/Tool/Grammar.cs
+++ b/Antlr3/Tool/Grammar.cs
@@ -1,10 +1,10 @@
ï»¿/*
* [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -303,14 +303,16 @@ namespace Antlr3.Tool

// Token options are here to avoid contaminating Token object in runtime

-        /** Legal options for terminal refs like ID<node=MyVarNode> */
+        /** Legal options for terminal refs like ID&lt;node=MyVarNode&gt; */
public static readonly HashSet<string> legalTokenOptions =
new HashSet<string>()
{
-                defaultTokenOption
+                "class",
+                "type",
+                "text",
};

-        public const string defaultTokenOption = "node";
+        public const string defaultTokenOption = "type";

/** Is there a global fixed lookahead set for this grammar?
*  If 0, nothing specified.  -1 implies we have not looked at

