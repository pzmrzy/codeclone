commit 2297e3565e372fc4de4556c1beb3bfc88ffd7dbe
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Wed Apr 6 06:21:20 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Wed Apr 6 06:21:20 2011 -0800

(C# 3) Merge CL8071: add <%...%>

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8084]

diff --git a/Antlr4.StringTemplate/Compiler/Group.g3 b/Antlr4.StringTemplate/Compiler/Group.g3
index cf3e2dc..20953b9 100644
--- a/Antlr4.StringTemplate/Compiler/Group.g3
+++ b/Antlr4.StringTemplate/Compiler/Group.g3
@@ -1,5 +1,5 @@
/*
- * [The "BSD licence"]
+ * [The "BSD license"]
* Copyright (c) 2011 Terence Parr
* All rights reserved.
*
@@ -106,6 +106,7 @@ templateDef[string prefix]
{IToken templateToken = input.LT(1);}
(	STRING     {template=$STRING.text; n=1;}
|	BIGSTRING  {template=$BIGSTRING.text; n=2;}
+	    |	BIGSTRING_NO_NL  {template=$BIGSTRING_NO_NL.text; n=2;}
|	{
template = string.Empty;
string msg = "missing template at '"+input.LT(1).Text+"'";
@@ -199,6 +200,7 @@ keyValuePair[IDictionary<string,object> mapping]

keyValue returns [object value]
:	BIGSTRING			{$value = _group.CreateSingleton($BIGSTRING);}
+	|	BIGSTRING_NO_NL		{$value = _group.CreateSingleton($BIGSTRING_NO_NL);}
|	ANONYMOUS_TEMPLATE	{$value = _group.CreateSingleton($ANONYMOUS_TEMPLATE);}
|	STRING				{$value = Utility.ReplaceEscapes(Utility.Strip($STRING.text, 1));}
|	TRUE				{$value = true;}
@@ -240,6 +242,10 @@ BIGSTRING
{Text = Text.Replace("\\>",">");}
;

+BIGSTRING_NO_NL // same as BIGSTRING but means ignore newlines later
+	:	'<%' .* '%>'
+	;
+
ANONYMOUS_TEMPLATE
:	'{'
{
diff --git a/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs b/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs
index 4e482c5..32300c8 100644
--- a/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs
+++ b/Antlr4.StringTemplate/Compiler/TemplateCompiler.cs
@@ -1,5 +1,5 @@
/*
- * [The "BSD licence"]
+ * [The "BSD license"]
* Copyright (c) 2011 Terence Parr
* All rights reserved.
*
@@ -143,7 +143,16 @@ namespace Antlr4.StringTemplate.Compiler
{
ANTLRStringStream @is = new ANTLRStringStream(template);
@is.name = srcName != null ? srcName : name;
-            TemplateLexer lexer = new TemplateLexer(ErrorManager, @is, templateToken, DelimiterStartChar, DelimiterStopChar);
+            TemplateLexer lexer = null;
+            if (templateToken != null && templateToken.Type == GroupParser.BIGSTRING_NO_NL)
+            {
+                lexer = new TemplateLexerNoNewlines(ErrorManager, @is, templateToken, DelimiterStartChar, DelimiterStopChar);
+            }
+            else
+            {
+                lexer = new TemplateLexer(ErrorManager, @is, templateToken, DelimiterStartChar, DelimiterStopChar);
+            }
+
CommonTokenStream tokens = new CommonTokenStream(lexer);
TemplateParser p = new TemplateParser(tokens, ErrorManager, templateToken);
TemplateParser.templateAndEOF_return r = null;
@@ -244,5 +253,32 @@ namespace Antlr4.StringTemplate.Compiler
// we have reported the error, so just blast out
throw new TemplateException();
}
+
+        private class TemplateLexerNoNewlines : TemplateLexer
+        {
+            public TemplateLexerNoNewlines(ErrorManager errMgr, ICharStream input, IToken templateToken, char delimiterStartChar, char delimiterStopChar)
+                : base(errMgr, input, templateToken, delimiterStartChar, delimiterStopChar)
+            {
+            }
+
+            /** Throw out \n tokens inside BIGSTRING_NO_NL */
+            public override IToken NextToken()
+            {
+                IToken t = base.NextToken();
+                while (t.Type == TemplateLexer.NEWLINE)
+                {
+                    t = base.NextToken();
+                }
+
+                if (t.Type == TemplateLexer.INDENT)
+                {
+                    // flip to TEXT so it prints; indent only prints
+                    // when we're at start of line
+                    t.Type = TEXT;
+                }
+
+                return t;
+            }
+        }
}
}

