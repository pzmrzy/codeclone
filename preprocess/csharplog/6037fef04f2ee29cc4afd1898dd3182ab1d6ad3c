commit 6037fef04f2ee29cc4afd1898dd3182ab1d6ad3c
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Mon Apr 11 17:12:36 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Mon Apr 11 17:12:36 2011 -0800

(C# 3) Merge 8108, 8110: STViz attribute pane updates and scroll template hierarchy to selected item

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8182]

diff --git a/Antlr4.StringTemplate.Visualizer/Antlr4.StringTemplate.Visualizer.csproj b/Antlr4.StringTemplate.Visualizer/Antlr4.StringTemplate.Visualizer.csproj
index 941f49a..c360d77 100644
--- a/Antlr4.StringTemplate.Visualizer/Antlr4.StringTemplate.Visualizer.csproj
+++ b/Antlr4.StringTemplate.Visualizer/Antlr4.StringTemplate.Visualizer.csproj
@@ -56,6 +56,7 @@
<Reference Include="PresentationFramework" />
</ItemGroup>
<ItemGroup>
+    <Compile Include="AttributeViewModel.cs" />
<Compile Include="Extensions\FlowDocumentExtensions.cs" />
<Compile Include="Extensions\ListExtensions.cs" />
<Compile Include="Extensions\TemplateExtensions.cs" />
@@ -73,6 +74,7 @@
<DesignTimeSharedInput>True</DesignTimeSharedInput>
</Compile>
<Compile Include="TemplateCallHierarchyViewModel.cs" />
+    <Compile Include="TemplateFrameAttributeViewModel.cs" />
<Compile Include="TemplateVisualizer.cs" />
<Compile Include="TemplateVisualizerFrame.xaml.cs">
<DependentUpon>TemplateVisualizerFrame.xaml</DependentUpon>
@@ -81,6 +83,7 @@
<Compile Include="TemplateVisualizerWindow.xaml.cs">
<DependentUpon>TemplateVisualizerWindow.xaml</DependentUpon>
</Compile>
+    <Compile Include="TreeViewItemDisplay.cs" />
<EmbeddedResource Include="Properties\Resources.resx">
<Generator>ResXFileCodeGenerator</Generator>
<LastGenOutput>Resources.Designer.cs</LastGenOutput>
@@ -93,6 +96,7 @@
<LastGenOutput>Settings.Designer.cs</LastGenOutput>
</None>
<AppDesigner Include="Properties\" />
+    <None Include="Resources\Templates\AttributeRendererTemplates.stg" />
</ItemGroup>
<ItemGroup>
<Page Include="TemplateVisualizerFrame.xaml">
diff --git a/Antlr4.StringTemplate.Visualizer/AttributeViewModel.cs b/Antlr4.StringTemplate.Visualizer/AttributeViewModel.cs
new file mode 100644
index 0000000..b293790
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/AttributeViewModel.cs
@@ -0,0 +1,97 @@
+ï»¿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr4.StringTemplate.Visualizer
+{
+    using System.Collections.Generic;
+    using System.Collections.ObjectModel;
+    using System.Linq;
+    using Antlr4.StringTemplate.Debug;
+    using Antlr4.StringTemplate.Visualizer.Extensions;
+
+    public class AttributeViewModel
+    {
+        private readonly string _name;
+        private readonly object _value;
+        private readonly ReadOnlyCollection<AddAttributeEvent> _events;
+
+        public AttributeViewModel(string name, object value, IEnumerable<AddAttributeEvent> events)
+        {
+            _name = name;
+            _value = value;
+            if (events != null)
+                _events = events.ToList().AsReadOnly();
+        }
+
+        public string Name
+        {
+            get
+            {
+                return _name;
+            }
+        }
+
+        public object Value
+        {
+            get
+            {
+                return _value;
+            }
+        }
+
+        public ReadOnlyCollection<AddAttributeEvent> Events
+        {
+            get
+            {
+                return _events;
+            }
+        }
+
+        // for WPF tree view binding
+        public object Attributes
+        {
+            get
+            {
+                return null;
+            }
+        }
+
+        public override string ToString()
+        {
+            string description = this.GetDescription();
+            if (description.Length > 200)
+                description = description.Substring(0, 197) + "...";
+
+            return description;
+        }
+    }
+}
diff --git a/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs b/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs
index 42373c2..b20a684 100644
--- a/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs
+++ b/Antlr4.StringTemplate.Visualizer/Extensions/ListExtensions.cs
@@ -32,27 +32,142 @@

namespace Antlr4.StringTemplate.Visualizer.Extensions
{
+    using System.Collections;
using Antlr4.StringTemplate;
+    using ArgumentNullException = System.ArgumentNullException;
using CultureInfo = System.Globalization.CultureInfo;
-    using IList = System.Collections.IList;
+    using IEnumerable = System.Collections.IEnumerable;

internal static class ListExtensions
{
-        public static string ToListString(this IList list)
+        private static TemplateGroup _listRendererTemplateGroup;
+
+        public static string ToListString(this IEnumerable list)
{
-            TemplateGroup group = new TemplateGroup();
-            group.DefineTemplate("listTemplate", "[<list:{x|<x>}; separator=\", \">]", new string[] { "list" });
-            group.RegisterRenderer(typeof(IList), new CollectionRenderer());
-            Template st = group.GetInstanceOf("listTemplate");
+            Template st = GetListRendererTemplate();
st.Add("list", list);
return st.Render();
}

+        public static string GetDescription(this AttributeViewModel attribute)
+        {
+            if (attribute == null)
+                throw new ArgumentNullException("attribute");
+
+            Template template = GetAttributeTemplate();
+            template.Add("attr", attribute);
+            return template.Render().Replace("\\", "\\\\").Replace("\r", "\\r").Replace("\n", "\\n").Replace("\0", "\\0");
+        }
+
+        private static Template GetAttributeTemplate()
+        {
+            return GetListRendererTemplateGroup().GetInstanceOf("attribute");
+        }
+
+        private static Template GetListRendererTemplate()
+        {
+            return GetListRendererTemplateGroup().GetInstanceOf("listTemplate");
+        }
+
+        private static Template GetAggregateRendererTemplate()
+        {
+            return GetListRendererTemplateGroup().GetInstanceOf("aggregateTemplate");
+        }
+
+        private static Template GetDictionaryRendererTemplate()
+        {
+            return GetListRendererTemplateGroup().GetInstanceOf("dictionaryTemplate");
+        }
+
+        private static TemplateGroup GetListRendererTemplateGroup()
+        {
+            if (_listRendererTemplateGroup == null)
+            {
+                _listRendererTemplateGroup = new TemplateGroupString("AttributeRendererTemplates", Properties.Resources.AttributeRendererTemplates);
+                _listRendererTemplateGroup.RegisterRenderer(typeof(IEnumerable), new CollectionRenderer());
+                _listRendererTemplateGroup.RegisterTypeProxyFactory(typeof(IDictionary), new DictionaryTypeProxyFactory());
+                _listRendererTemplateGroup.RegisterTypeProxyFactory(typeof(Misc.Aggregate), new AggregateProxyFactory());
+                _listRendererTemplateGroup.RegisterTypeProxyFactory(typeof(Template), new TemplateProxyFactory(_listRendererTemplateGroup));
+            }
+
+            return _listRendererTemplateGroup;
+        }
+
private class CollectionRenderer : IAttributeRenderer
{
public string ToString(object o, string formatString, CultureInfo culture)
{
-                return ((IList)o).ToListString();
+                string s = o as string;
+                if (s != null)
+                    return s;
+
+                return ((IEnumerable)o).ToListString();
+            }
+        }
+
+        private class DictionaryTypeProxyFactory : ITypeProxyFactory
+        {
+            public object CreateProxy(TemplateFrame frame, object obj)
+            {
+                if (frame.Template.Name == "dictionaryTemplate")
+                    return obj;
+
+                Template template = GetDictionaryRendererTemplate();
+                template.Add("dict", obj);
+                return template;
+            }
+        }
+
+        private class AggregateProxyFactory : ITypeProxyFactory
+        {
+            public object CreateProxy(TemplateFrame frame, object obj)
+            {
+                if (frame.Template.Name == "dictionaryTemplate")
+                    return obj;
+
+                Template template = GetAggregateRendererTemplate();
+                template.Add("aggr", obj);
+                return template;
+            }
+        }
+
+        private class TemplateProxyFactory : ITypeProxyFactory
+        {
+            private readonly TemplateGroup _ignoreGroup;
+
+            public TemplateProxyFactory(TemplateGroup ignoreGroup)
+            {
+                _ignoreGroup = ignoreGroup;
+            }
+
+            public object CreateProxy(TemplateFrame frame, object obj)
+            {
+                Template template = obj as Template;
+                if (template != null && template.Group != _ignoreGroup)
+                    return new TemplateProxy(template);
+
+                return obj;
+            }
+        }
+
+        private class TemplateProxy
+        {
+            private readonly Template _template;
+
+            public TemplateProxy(Template template)
+            {
+                if (template == null)
+                    throw new ArgumentNullException("template");
+
+                _template = template;
+            }
+
+            public override string ToString()
+            {
+                if (_template.impl == null)
+                    return _template.ToString();
+
+                return _template.impl.template;
}
}
}
diff --git a/Antlr4.StringTemplate.Visualizer/Properties/Resources.Designer.cs b/Antlr4.StringTemplate.Visualizer/Properties/Resources.Designer.cs
index f56c498..b1f44ae 100644
--- a/Antlr4.StringTemplate.Visualizer/Properties/Resources.Designer.cs
+++ b/Antlr4.StringTemplate.Visualizer/Properties/Resources.Designer.cs
@@ -1,7 +1,7 @@
ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
-//     Runtime Version:4.0.30319.1
+//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
@@ -17,7 +17,7 @@ namespace Antlr4.StringTemplate.Visualizer.Properties {
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
-    // To Add or Remove a member, edit your .ResX file then rerun ResGen
+    // To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
@@ -59,5 +59,32 @@ namespace Antlr4.StringTemplate.Visualizer.Properties {
resourceCulture = value;
}
}
+
+        /// <summary>
+        ///   Looks up a localized string similar to attribute(attr) ::= &lt;%
+        ///&lt;attr.Name&gt; = &lt;attr.Value&gt;
+        ///&lt;if(attr.Events)&gt;
+        ///&lt;!!&gt; @ &lt;attr.Events:{event|&lt;event.FileName&gt;:&lt;event.Line&gt;}; separator=&quot;, &quot;&gt;
+        ///&lt;endif&gt;
+        ///%&gt;
+        ///
+        ///listTemplate(list) ::= &lt;&lt;
+        ///[&lt;list:{x|&lt;x&gt;}; separator=&quot;, &quot;&gt;]
+        ///&gt;&gt;
+        ///
+        ///aggregateTemplate(aggr) ::= &lt;&lt;
+        ///aggr&lt;dictionaryTemplate(aggr)&gt;
+        ///&gt;&gt;
+        ///
+        ///dictionaryTemplate(dict) ::= &lt;&lt;
+        ///{&lt;dict.keys,dict.values:{key,value|&lt;key&gt;=&lt;value&gt;}; separator=&quot;, &quot;&gt;}
+        ///&gt;&gt;
+        ///.
+        /// </summary>
+        internal static string AttributeRendererTemplates {
+            get {
+                return ResourceManager.GetString("AttributeRendererTemplates", resourceCulture);
+            }
+        }
}
}
diff --git a/Antlr4.StringTemplate.Visualizer/Properties/Resources.resx b/Antlr4.StringTemplate.Visualizer/Properties/Resources.resx
index af7dbeb..0280925 100644
--- a/Antlr4.StringTemplate.Visualizer/Properties/Resources.resx
+++ b/Antlr4.StringTemplate.Visualizer/Properties/Resources.resx
@@ -46,7 +46,7 @@

mimetype: application/x-microsoft.net.object.binary.base64
value   : The object must be serialized with
-            : System.Serialization.Formatters.Binary.BinaryFormatter
+            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
: and then encoded with base64 encoding.

mimetype: application/x-microsoft.net.object.soap.base64
@@ -60,6 +60,7 @@
: and then encoded with base64 encoding.
-->
<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
+    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
<xsd:element name="root" msdata:IsDataSet="true">
<xsd:complexType>
<xsd:choice maxOccurs="unbounded">
@@ -68,9 +69,10 @@
<xsd:sequence>
<xsd:element name="value" type="xsd:string" minOccurs="0" />
</xsd:sequence>
-              <xsd:attribute name="name" type="xsd:string" />
+              <xsd:attribute name="name" use="required" type="xsd:string" />
<xsd:attribute name="type" type="xsd:string" />
<xsd:attribute name="mimetype" type="xsd:string" />
+              <xsd:attribute ref="xml:space" />
</xsd:complexType>
</xsd:element>
<xsd:element name="assembly">
@@ -85,9 +87,10 @@
<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
</xsd:sequence>
-              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
+              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
+              <xsd:attribute ref="xml:space" />
</xsd:complexType>
</xsd:element>
<xsd:element name="resheader">
@@ -114,4 +117,8 @@
<resheader name="writer">
<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
</resheader>
+  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
+  <data name="AttributeRendererTemplates" type="System.Resources.ResXFileRef, System.Windows.Forms">
+    <value>..\resources\templates\attributerenderertemplates.stg;System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;utf-8</value>
+  </data>
</root>
\ No newline at end of file
diff --git a/Antlr4.StringTemplate.Visualizer/Resources/Templates/AttributeRendererTemplates.stg b/Antlr4.StringTemplate.Visualizer/Resources/Templates/AttributeRendererTemplates.stg
new file mode 100644
index 0000000..40e0410
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/Resources/Templates/AttributeRendererTemplates.stg
@@ -0,0 +1,50 @@
+ï»¿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+attribute(attr) ::= <%
+<attr.Name> = <attr.Value>
+<if(attr.Events)>
+<!!> @ <attr.Events:{event|<event.FileName>:<event.Line>}; separator=", ">
+<endif>
+%>
+
+listTemplate(list) ::= <<
+[<list:{x|<x>}; separator=", ">]
+>>
+
+aggregateTemplate(aggr) ::= <<
+aggr<dictionaryTemplate(aggr)>
+>>
+
+dictionaryTemplate(dict) ::= <<
+{<dict.keys,dict.values:{key,value|<key>=<value>}; separator=", ">}
+>>
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateFrameAttributeViewModel.cs b/Antlr4.StringTemplate.Visualizer/TemplateFrameAttributeViewModel.cs
new file mode 100644
index 0000000..f810d4f
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/TemplateFrameAttributeViewModel.cs
@@ -0,0 +1,128 @@
+ï»¿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr4.StringTemplate.Visualizer
+{
+    using System;
+    using System.Collections.Generic;
+    using System.Collections.ObjectModel;
+    using System.ComponentModel;
+    using System.Linq;
+    using Antlr4.StringTemplate.Debug;
+    using Path = System.IO.Path;
+
+    public class TemplateFrameAttributeViewModel : INotifyPropertyChanged
+    {
+        private static readonly ReadOnlyCollection<AttributeViewModel> EmptyAttributes = new ReadOnlyCollection<AttributeViewModel>(new AttributeViewModel[0]);
+
+        private readonly EvalTemplateEvent _event;
+        private readonly ReadOnlyCollection<AttributeViewModel> _attributes = EmptyAttributes;
+
+        public TemplateFrameAttributeViewModel(EvalTemplateEvent @event)
+        {
+            if (@event == null)
+                throw new ArgumentNullException("event");
+
+            this._event = @event;
+
+            Template template = _event.Frame.Template;
+            IDictionary<string, object> attributes = template.GetAttributes();
+            if (attributes != null)
+                _attributes = attributes.Select(i => new AttributeViewModel(i.Key, i.Value, GetAttributeEvents(template, i.Key))).ToList().AsReadOnly();
+        }
+
+        public event PropertyChangedEventHandler PropertyChanged;
+
+        public EvalTemplateEvent Event
+        {
+            get
+            {
+                return _event;
+            }
+        }
+
+        public TemplateFrame Frame
+        {
+            get
+            {
+                return _event.Frame;
+            }
+        }
+
+        public Template Template
+        {
+            get
+            {
+                return _event.Template;
+            }
+        }
+
+        public ReadOnlyCollection<AttributeViewModel> Attributes
+        {
+            get
+            {
+                return _attributes;
+            }
+        }
+
+        private static IEnumerable<AddAttributeEvent> GetAttributeEvents(Template template, string attribute)
+        {
+            if (template == null || template.DebugState == null)
+                return null;
+
+            List<AddAttributeEvent> events;
+            if (!template.DebugState.AddAttributeEvents.TryGetValue(attribute, out events))
+                return null;
+
+            return events;
+        }
+
+        public override string ToString()
+        {
+            Template template = _event.Template;
+            if (template.IsAnonymousSubtemplate)
+                return "{...}";
+
+            if (template.DebugState == null || template.DebugState.NewTemplateEvent == null)
+                return string.Format("{0}", template);
+
+            return string.Format("{0} @ {1}:{2}", template, Path.GetFileName(template.DebugState.NewTemplateEvent.GetFileName()), template.DebugState.NewTemplateEvent.GetLine());
+        }
+
+        protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
+        {
+            var t = PropertyChanged;
+            if (t != null)
+                t(this, e);
+        }
+    }
+}
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml
index 219458b..1ff5e67 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml
@@ -33,7 +33,8 @@
xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
-             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
+             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
+             xmlns:local="clr-namespace:Antlr4.StringTemplate.Visualizer"
mc:Ignorable="d"
d:DesignHeight="600" d:DesignWidth="800">
<Grid>
@@ -63,6 +64,7 @@
<Style TargetType="{x:Type TreeViewItem}">
<Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
<Setter Property="IsSelected" Value="{Binding IsSelected}" />
+                        <Setter Property="local:TreeViewItemDisplay.BringSelectionIntoView" Value="true" />
</Style>
</TreeView.ItemContainerStyle>
</TreeView>
@@ -79,8 +81,20 @@
<ColumnDefinition />
</Grid.ColumnDefinitions>

-            <ListBox Name="AttributesListBox" Grid.Column="0" Grid.ColumnSpan="1" SelectionChanged="HandleAttributesListBoxSelectionChanged"
-                         ItemsSource="{Binding Attributes}" />
+            <TreeView Name="AttributesListBox" Grid.Column="0" Grid.ColumnSpan="1" SelectedItemChanged="HandleAttributesTreeViewSelectedItemChanged"
+                         ItemsSource="{Binding AttributeStack}">
+                <TreeView.ItemTemplate>
+                    <HierarchicalDataTemplate ItemsSource="{Binding Attributes}">
+                        <ContentControl Content="{Binding}" />
+                    </HierarchicalDataTemplate>
+                </TreeView.ItemTemplate>
+                <TreeView.ItemContainerStyle>
+                    <Style TargetType="{x:Type TreeViewItem}">
+                        <Setter Property="IsExpanded" Value="True" />
+                    </Style>
+                </TreeView.ItemContainerStyle>
+            </TreeView>
+
<GridSplitter Width="5" Grid.Column="1" Grid.ColumnSpan="1" ResizeBehavior="PreviousAndNext" />
<TabControl Grid.Column="2" Grid.ColumnSpan="1">
<TabItem Header="Template">
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
index ab85f77..b192faa 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerFrame.xaml.cs
@@ -35,7 +35,6 @@ namespace Antlr4.StringTemplate.Visualizer
using System;
using System.Collections.Generic;
using System.Linq;
-    using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
@@ -45,8 +44,6 @@ namespace Antlr4.StringTemplate.Visualizer
using Antlr4.StringTemplate.Debug;
using Antlr4.StringTemplate.Misc;
using Antlr4.StringTemplate.Visualizer.Extensions;
-    using IList = System.Collections.IList;
-    using Path = System.IO.Path;

public partial class TemplateVisualizerFrame : UserControl
{
@@ -103,7 +100,7 @@ namespace Antlr4.StringTemplate.Visualizer
}
}

-        private void HandleAttributesListBoxSelectionChanged(object sender, SelectionChangedEventArgs e)
+        private void HandleAttributesTreeViewSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
{
// do nothing for now
}
@@ -139,6 +136,8 @@ namespace Antlr4.StringTemplate.Visualizer
currentTemplate = ViewModel.Visualizer.RootTemplate;
else
currentTemplate = de.Frame;
+
+            SetSelectionPath(ViewModel.TemplateCallHierarchy[0], currentTemplate.GetEvalTemplateEventStack(true));
UpdateCurrentTemplate();
}

@@ -182,18 +181,18 @@ namespace Antlr4.StringTemplate.Visualizer
}
}

-        private static void SetSelectionPath(TemplateCallHierarchyViewModel treeView, ICollection<Template> selectionPath)
+        private static void SetSelectionPath(TemplateCallHierarchyViewModel viewModel, ICollection<EvalTemplateEvent> selectionPath)
{
-            if (treeView == null || selectionPath == null || selectionPath.Count == 0 || treeView.Template != selectionPath.First())
+            if (viewModel == null || selectionPath == null || selectionPath.Count == 0 || viewModel.Event != selectionPath.First())
return;

List<TemplateCallHierarchyViewModel> nodes = new List<TemplateCallHierarchyViewModel>();
-            nodes.Add(treeView);
+            nodes.Add(viewModel);

-            TemplateCallHierarchyViewModel current = treeView;
-            foreach (var template in selectionPath.Skip(1))
+            TemplateCallHierarchyViewModel current = viewModel;
+            foreach (var @event in selectionPath.Skip(1))
{
-                current = current.Children.FirstOrDefault(i => i.Template == template);
+                current = current.Children.FirstOrDefault(i => i.Event == @event);
if (current == null)
return;

@@ -236,9 +235,11 @@ namespace Antlr4.StringTemplate.Visualizer
// highlight output text and, if {...} subtemplate, region in ST src
// get last event for currentST; it's the event that captures ST eval
List<InterpEvent> events = currentTemplate.GetDebugState().Events;
-            EvalTemplateEvent e = (EvalTemplateEvent)events[events.Count - 1];
+            EvalTemplateEvent e = events[events.Count - 1] as EvalTemplateEvent;
//m.output.moveCaretPosition(e.outputStartChar);
-            Highlight(OutputTextBox.Document, e.OutputInterval);
+            if (e != null)
+                Highlight(OutputTextBox.Document, e.OutputInterval);
+
if (currentTemplate.Template.IsAnonymousSubtemplate)
{
Interval r = currentTemplate.Template.impl.TemplateRange;
@@ -309,52 +310,7 @@ namespace Antlr4.StringTemplate.Visualizer
if (viewModel == null)
return;

-            List<string> attributesList = new List<string>();
-            IDictionary<string, object> attributes = currentTemplate.Template.GetAttributes();
-            if (attributes != null)
-            {
-                foreach (var attribute in attributes)
-                {
-                    object value = attribute.Value;
-                    IList valueList = value as IList;
-                    if (valueList != null)
-                        value = valueList.ToListString();
-
-                    if (currentTemplate.Template.DebugState != null && currentTemplate.Template.DebugState.AddAttributeEvents != null)
-                    {
-                        List<AddAttributeEvent> events;
-                        currentTemplate.Template.DebugState.AddAttributeEvents.TryGetValue(attribute.Key, out events);
-                        StringBuilder locations = new StringBuilder();
-                        int i = 0;
-                        if (events != null)
-                        {
-                            foreach (AddAttributeEvent ae in events)
-                            {
-                                if (i > 0)
-                                    locations.Append(", ");
-
-                                locations.AppendFormat("{0}:{1}", Path.GetFileName(ae.GetFileName()), ae.GetLine());
-                                i++;
-                            }
-                        }
-
-                        if (locations.Length > 0)
-                        {
-                            attributesList.Add(string.Format("{0} = {1} @ {2}", attribute.Key, value, locations));
-                        }
-                        else
-                        {
-                            attributesList.Add(string.Format("{0} = {1}", attribute.Key, value));
-                        }
-                    }
-                    else
-                    {
-                        attributesList.Add(string.Format("{0} = {1}", attribute.Key, value));
-                    }
-                }
-            }
-
-            viewModel.Attributes = attributesList;
+            viewModel.AttributeStack = currentTemplate.GetEvalTemplateEventStack(false).Select(i => new TemplateFrameAttributeViewModel(i)).ToList();
}
}
}
diff --git a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerViewModel.cs b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerViewModel.cs
index aa82400..8230c12 100644
--- a/Antlr4.StringTemplate.Visualizer/TemplateVisualizerViewModel.cs
+++ b/Antlr4.StringTemplate.Visualizer/TemplateVisualizerViewModel.cs
@@ -46,10 +46,12 @@ namespace Antlr4.StringTemplate.Visualizer
private static readonly PropertyChangedEventArgs AstPropertyChangedEventArgs = new PropertyChangedEventArgs("Ast");
private static readonly PropertyChangedEventArgs BytecodePropertyChangedEventArgs = new PropertyChangedEventArgs("Bytecode");
private static readonly PropertyChangedEventArgs AttributesPropertyChangedEventArgs = new PropertyChangedEventArgs("Attributes");
+        private static readonly PropertyChangedEventArgs AttributeStackPropertyChangedEventArgs = new PropertyChangedEventArgs("AttributeStack");
private static readonly PropertyChangedEventArgs TitlePropertyChangedEventArgs = new PropertyChangedEventArgs("Title");

private readonly TemplateVisualizer _visualizer;
private readonly List<TemplateCallHierarchyViewModel> _templateCallHierarchy;
+        private List<TemplateFrameAttributeViewModel> _attributeStack;
private readonly List<InterpEvent> _allEvents;
private CommonTree _ast;
private string _title;
@@ -121,6 +123,23 @@ namespace Antlr4.StringTemplate.Visualizer
}
}

+        public List<TemplateFrameAttributeViewModel> AttributeStack
+        {
+            get
+            {
+                return _attributeStack;
+            }
+
+            set
+            {
+                if (value == _attributeStack)
+                    return;
+
+                _attributeStack = value;
+                OnPropertyChanged(AttributeStackPropertyChangedEventArgs);
+            }
+        }
+
public CommonTree Ast
{
get
diff --git a/Antlr4.StringTemplate.Visualizer/TreeViewItemDisplay.cs b/Antlr4.StringTemplate.Visualizer/TreeViewItemDisplay.cs
new file mode 100644
index 0000000..ac2c31e
--- /dev/null
+++ b/Antlr4.StringTemplate.Visualizer/TreeViewItemDisplay.cs
@@ -0,0 +1,83 @@
+ï»¿/*
+ * [The "BSD licence"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr4.StringTemplate.Visualizer
+{
+    using System.Windows;
+    using System.Windows.Controls;
+
+    public static class TreeViewItemDisplay
+    {
+        public static readonly DependencyProperty BringSelectionIntoViewProperty =
+            DependencyProperty.RegisterAttached(
+                "BringSelectionIntoView",
+                typeof(bool),
+                typeof(TreeViewItemDisplay),
+                new UIPropertyMetadata(false, HandleBringSelectionIntoViewChanged));
+
+        public static bool GetBringSelectionIntoView(TreeViewItem treeViewItem)
+        {
+            return (bool)treeViewItem.GetValue(BringSelectionIntoViewProperty);
+        }
+
+        public static void SetBringSelectionIntoView(TreeViewItem treeViewItem, bool value)
+        {
+            treeViewItem.SetValue(BringSelectionIntoViewProperty, value);
+        }
+
+        private static void HandleBringSelectionIntoViewChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
+        {
+            TreeViewItem item = d as TreeViewItem;
+            if (item == null)
+                return;
+
+            if (!(e.NewValue is bool))
+                return;
+
+            if ((bool)e.NewValue)
+                item.Selected += HandleTreeViewItemSelected;
+            else
+                item.Selected -= HandleTreeViewItemSelected;
+        }
+
+        private static void HandleTreeViewItemSelected(object sender, RoutedEventArgs e)
+        {
+            // ignore notifications from ancestors
+            if (!object.ReferenceEquals(sender, e.OriginalSource))
+                return;
+
+            TreeViewItem item = e.OriginalSource as TreeViewItem;
+            if (item != null)
+                item.BringIntoView();
+        }
+    }
+}
diff --git a/Antlr4.StringTemplate/ITypeProxyFactory.cs b/Antlr4.StringTemplate/ITypeProxyFactory.cs
index 3b173ab..033467e 100644
--- a/Antlr4.StringTemplate/ITypeProxyFactory.cs
+++ b/Antlr4.StringTemplate/ITypeProxyFactory.cs
@@ -34,6 +34,6 @@ namespace Antlr4.StringTemplate
{
public interface ITypeProxyFactory
{
-        object CreateProxy(object obj);
+        object CreateProxy(TemplateFrame frame, object obj);
}
}
diff --git a/Antlr4.StringTemplate/Interpreter.cs b/Antlr4.StringTemplate/Interpreter.cs
index e35e7ab..bd7b266 100644
--- a/Antlr4.StringTemplate/Interpreter.cs
+++ b/Antlr4.StringTemplate/Interpreter.cs
@@ -76,7 +76,7 @@ namespace Antlr4.StringTemplate
public partial class Interpreter
{

-        public const int DefaultOperandStackSize = 100;
+        public const int DefaultOperandStackSize = 512;

public static readonly HashSet<string> predefinedAnonSubtemplateAttributes = new HashSet<string>() { "i", "i0" };

@@ -794,7 +794,7 @@ namespace Antlr4.StringTemplate

ITypeProxyFactory proxyFactory = frame.Template.Group.GetTypeProxyFactory(o.GetType());
if (proxyFactory != null)
-                o = proxyFactory.CreateProxy(o);
+                o = proxyFactory.CreateProxy(frame, o);

System.Diagnostics.Debug.Assert(!(o is TemplateFrame));
Template template = o as Template;
@@ -1378,7 +1378,7 @@ namespace Antlr4.StringTemplate
{
ITypeProxyFactory proxyFactory = self.Group.GetTypeProxyFactory(o.GetType());
if (proxyFactory != null)
-                    o = proxyFactory.CreateProxy(o);
+                    o = proxyFactory.CreateProxy(frame, o);

IModelAdaptor adap = self.Group.GetModelAdaptor(o.GetType());
return adap.GetProperty(this, frame, o, property, ToString(frame, property));
diff --git a/Antlr4.StringTemplate/Misc/Aggregate.cs b/Antlr4.StringTemplate/Misc/Aggregate.cs
index 38c72a8..4feac01 100644
--- a/Antlr4.StringTemplate/Misc/Aggregate.cs
+++ b/Antlr4.StringTemplate/Misc/Aggregate.cs
@@ -78,7 +78,7 @@ namespace Antlr4.StringTemplate.Misc
{
private readonly Dictionary<string, object> _properties = new Dictionary<string, object>();

-        internal IDictionary<string, object> Properties
+        public IDictionary<string, object> Properties
{
get
{

