commit 936886e96acefe58a70ac748b4ebce601bae6fc8
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Wed Mar 18 15:26:06 2009 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Wed Mar 18 15:26:06 2009 -0800

C# Port:
* More .NET conventions in StringTemplate

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 5938]

diff --git a/Antlr3.StringTemplate/Language/ASTExpr.cs b/Antlr3.StringTemplate/Language/ASTExpr.cs
index bcedb83..66d4b9b 100644
--- a/Antlr3.StringTemplate/Language/ASTExpr.cs
+++ b/Antlr3.StringTemplate/Language/ASTExpr.cs
@@ -95,10 +95,10 @@ namespace Antlr3.ST.Language

static readonly Dictionary<Type, Dictionary<string, Func<object, object>>> _memberAccessors = new Dictionary<Type, Dictionary<string, Func<object, object>>>();

-        protected internal ITree _exprTree = null;
+        ITree _exprTree;

/** <summary>store separator etc...</summary> */
-        IDictionary<string, object> _options = null;
+        IDictionary<string, object> _options;

/** <summary>
*  A cached value of wrap=expr from the &lt;...> expression.
@@ -106,7 +106,7 @@ namespace Antlr3.ST.Language
*  in writeAttribute.
*  </summary>
*/
-        string _wrapString = null;
+        string _wrapString;

/** <summary>
*  For null values in iterated attributes and single attributes that
@@ -118,7 +118,7 @@ namespace Antlr3.ST.Language
*  &lt;values:{v| &lt;v>}; null="0"> also.
*  </summary>
*/
-        string _nullValue = null;
+        string _nullValue;

/** <summary>
*  A cached value of separator=expr from the &lt;...> expression.
@@ -126,10 +126,10 @@ namespace Antlr3.ST.Language
*  in writeAttribute.
*  </summary>
*/
-        string _separatorString = null;
+        string _separatorString;

/** <summary>A cached value of option format=expr</summary> */
-        string _formatString = null;
+        string _formatString;

public ASTExpr( StringTemplate enclosingTemplate, ITree exprTree, IDictionary<string, object> options ) :
base( enclosingTemplate )
@@ -140,7 +140,7 @@ namespace Antlr3.ST.Language

#region Properties
/** <summary>Return the tree interpreted when this template is written out.</summary> */
-        public virtual ITree AST
+        public ITree AST
{
get
{
@@ -271,7 +271,7 @@ namespace Antlr3.ST.Language
int numAttributes = attributes.Count;

// ensure arguments line up
-            var formalArguments = templateToApply.GetFormalArguments();
+            var formalArguments = templateToApply.FormalArguments;
if ( formalArguments == null || formalArguments.Count == 0 )
{
self.Error( "missing arguments in anonymous" +
@@ -324,8 +324,8 @@ namespace Antlr3.ST.Language
argumentContext[DefaultIndexVariableName] = i + 1;
argumentContext[DefaultIndex0VariableName] = i;
StringTemplate embedded = templateToApply.GetInstanceOf();
-                embedded.SetEnclosingInstance( self );
-                embedded.SetArgumentContext( argumentContext );
+                embedded.EnclosingInstance = self;
+                embedded.ArgumentContext = argumentContext;
results.Add( embedded );
i++;
}
@@ -372,14 +372,14 @@ namespace Antlr3.ST.Language
// eval.g), but that is used as the examplar.  We must create
// a new instance of the embedded template to apply each time
// to get new attribute sets etc...
-                    StringTemplateAST args = embedded.GetArgumentsAST();
+                    StringTemplateAST args = embedded.ArgumentsAST;
embedded = embedded.GetInstanceOf(); // make new instance
-                    embedded.SetEnclosingInstance( self );
-                    embedded.SetArgumentsAST( args );
+                    embedded.EnclosingInstance = self;
+                    embedded.ArgumentsAST = args;
argumentContext = new Dictionary<string, object>();
-                    var formalArgs = embedded.GetFormalArguments();
+                    var formalArgs = embedded.FormalArguments;
bool isAnonymous =
-                        embedded.GetName() == StringTemplate.ANONYMOUS_ST_NAME;
+                        embedded.Name == StringTemplate.ANONYMOUS_ST_NAME;
SetSoleFormalArgumentToIthValue( embedded, argumentContext, ithValue );
// if it's an anonymous template with a formal arg, don't set it/attr
if ( !( isAnonymous && formalArgs != null && formalArgs.Count > 0 ) )
@@ -389,7 +389,7 @@ namespace Antlr3.ST.Language
}
argumentContext[DefaultIndexVariableName] = i + 1;
argumentContext[DefaultIndex0VariableName] = i;
-                    embedded.SetArgumentContext( argumentContext );
+                    embedded.ArgumentContext = argumentContext;
EvaluateArguments( embedded );
/*
System.err.println("i="+i+": applyTemplate("+embedded.getName()+
@@ -414,11 +414,11 @@ namespace Antlr3.ST.Language
*/
embedded = (StringTemplate)templatesToApply[0];
argumentContext = new Dictionary<string, object>();
-                var formalArgs = embedded.GetFormalArguments();
-                StringTemplateAST args = embedded.GetArgumentsAST();
+                var formalArgs = embedded.FormalArguments;
+                StringTemplateAST args = embedded.ArgumentsAST;
SetSoleFormalArgumentToIthValue( embedded, argumentContext, attributeValue );
bool isAnonymous =
-                    embedded.GetName() == StringTemplate.ANONYMOUS_ST_NAME;
+                    embedded.Name == StringTemplate.ANONYMOUS_ST_NAME;
// if it's an anonymous template with a formal arg, don't set it/attr
if ( !( isAnonymous && formalArgs != null && formalArgs.Count > 0 ) )
{
@@ -427,7 +427,7 @@ namespace Antlr3.ST.Language
}
argumentContext[DefaultIndexVariableName] = 1;
argumentContext[DefaultIndex0VariableName] = 0;
-                embedded.SetArgumentContext( argumentContext );
+                embedded.ArgumentContext = argumentContext;
EvaluateArguments( embedded );
return embedded;
}
@@ -435,12 +435,12 @@ namespace Antlr3.ST.Language

protected virtual void SetSoleFormalArgumentToIthValue( StringTemplate embedded, IDictionary argumentContext, object ithValue )
{
-            var formalArgs = embedded.GetFormalArguments();
+            var formalArgs = embedded.FormalArguments;
if ( formalArgs != null )
{
string soleArgName = null;
bool isAnonymous =
-                    embedded.GetName() == StringTemplate.ANONYMOUS_ST_NAME;
+                    embedded.Name == StringTemplate.ANONYMOUS_ST_NAME;
if ( formalArgs.Count == 1 || ( isAnonymous && formalArgs.Count > 0 ) )
{
if ( isAnonymous && formalArgs.Count > 1 )
@@ -637,7 +637,7 @@ namespace Antlr3.ST.Language
// TODO: TJP just asked himself why we can't do inherited attr here?
else if ( c == typeof( StringTemplate ) )
{
-                var attributes = ( (StringTemplate)o ).GetAttributes();
+                var attributes = ( (StringTemplate)o ).Attributes;
if ( attributes != null )
{
string propertyName2 = (string)property;
@@ -786,15 +786,15 @@ namespace Antlr3.ST.Language
StringTemplateAST argumentsAST )
{
//System.out.println("getTemplateInclude: look up "+enclosing.getGroup().getName()+"::"+templateName);
-            StringTemplateGroup group = enclosing.GetGroup();
+            StringTemplateGroup group = enclosing.Group;
StringTemplate embedded = group.GetEmbeddedInstanceOf( enclosing, templateName );
if ( embedded == null )
{
enclosing.Error( "cannot make embedded instance of " + templateName +
-                        " in template " + enclosing.GetName() );
+                        " in template " + enclosing.Name );
return null;
}
-            embedded.SetArgumentsAST( argumentsAST );
+            embedded.ArgumentsAST = argumentsAST;
EvaluateArguments( embedded );
return embedded;
}
@@ -849,17 +849,17 @@ namespace Antlr3.ST.Language
// than one template (like both a header file and C file when
// generating C code).  It must execute within the context of
// the enclosing template.
-                    stToWrite.SetEnclosingInstance( self );
+                    stToWrite.EnclosingInstance = self;
// if self is found up the enclosing instance chain, then
// infinite recursion
-                    if ( StringTemplate.InLintMode() &&
+                    if ( StringTemplate.LintMode &&
StringTemplate.IsRecursiveEnclosingInstance( stToWrite ) )
{
// throw exception since sometimes eval keeps going
// even after I ignore this write of o.
throw new InvalidOperationException( "infinite recursion to " +
stToWrite.GetTemplateDeclaratorString() + " referenced in " +
-                                stToWrite.GetEnclosingInstance().GetTemplateDeclaratorString() +
+                                stToWrite.EnclosingInstance.GetTemplateDeclaratorString() +
"; stack trace:" + Environment.NewLine + stToWrite.GetEnclosingInstanceStackTrace() );
}
else
@@ -882,7 +882,7 @@ namespace Antlr3.ST.Language
// be formatted before being written to the real output.
StringWriter buf = new StringWriter();
IStringTemplateWriter sw =
-                                    self.GetGroup().GetStringTemplateWriter( buf );
+                                    self.Group.GetStringTemplateWriter( buf );
stToWrite.Write( sw );
n = @out.Write( renderer.ToString( buf.ToString(), _formatString ) );
return n;
@@ -977,7 +977,7 @@ namespace Antlr3.ST.Language
// must evaluate, writing to a string so we can hang on to it
StringWriter buf = new StringWriter();
IStringTemplateWriter sw =
-                    self.GetGroup().GetStringTemplateWriter( buf );
+                    self.Group.GetStringTemplateWriter( buf );
{
ActionEvaluator eval =
new ActionEvaluator( self, this, sw, exprAST );
@@ -1008,7 +1008,7 @@ namespace Antlr3.ST.Language
*/
protected virtual void EvaluateArguments( StringTemplate self )
{
-            StringTemplateAST argumentsAST = self.GetArgumentsAST();
+            StringTemplateAST argumentsAST = self.ArgumentsAST;
if ( argumentsAST == null || argumentsAST.GetChild( 0 ) == null )
{
// return immediately if missing tree or no actual args
@@ -1020,11 +1020,11 @@ namespace Antlr3.ST.Language
// available as well so we put a dummy ST between the enclosing
// context and the embedded context.  The dummy has the predefined
// context as does the embedded.
-            StringTemplate enclosing = self.GetEnclosingInstance();
-            StringTemplate argContextST = new StringTemplate( self.GetGroup(), "" );
-            argContextST.SetName( "<invoke " + self.GetName() + " arg context>" );
-            argContextST.SetEnclosingInstance( enclosing );
-            argContextST.SetArgumentContext( self.GetArgumentContext() );
+            StringTemplate enclosing = self.EnclosingInstance;
+            StringTemplate argContextST = new StringTemplate( self.Group, "" );
+            argContextST.Name = "<invoke " + self.Name + " arg context>";
+            argContextST.EnclosingInstance = enclosing;
+            argContextST.ArgumentContext = self.ArgumentContext;

ActionEvaluator eval =
new ActionEvaluator( argContextST, this, null, argumentsAST );
@@ -1039,8 +1039,8 @@ namespace Antlr3.ST.Language
// in any existing arg context, that context gets filled with
// new values.  With bold(item=obj), context becomes:
// {[obj=...],[item=...]}.
-                Dictionary<string, object> ac = eval.argList( self, self.GetArgumentContext() );
-                self.SetArgumentContext( ac );
+                Dictionary<string, object> ac = eval.argList( self, self.ArgumentContext );
+                self.ArgumentContext = ac;
}
catch ( RecognitionException re )
{
diff --git a/Antlr3.StringTemplate/Language/Action.g3 b/Antlr3.StringTemplate/Language/Action.g3
index f1879d1..caa040b 100644
--- a/Antlr3.StringTemplate/Language/Action.g3
+++ b/Antlr3.StringTemplate/Language/Action.g3
@@ -263,9 +263,9 @@ anonymousTemplate
:	t=ANONYMOUS_TEMPLATE
{
anonymous = new StringTemplate();
-			anonymous.SetGroup(self.GetGroup());
-			anonymous.SetEnclosingInstance(self);
-			anonymous.SetTemplate($t.text);
+			anonymous.Group = self.Group;
+			anonymous.EnclosingInstance = self;
+			anonymous.Template = $t.text;
if ( $t is StringTemplateToken )
anonymous.DefineFormalArguments(((StringTemplateToken)$t).args);
else
diff --git a/Antlr3.StringTemplate/Language/ActionEvaluator.cs b/Antlr3.StringTemplate/Language/ActionEvaluator.cs
index fccbcef..6612921 100644
--- a/Antlr3.StringTemplate/Language/ActionEvaluator.cs
+++ b/Antlr3.StringTemplate/Language/ActionEvaluator.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\ActionEvaluator.g3 2009-03-16 18:28:41
+// $ANTLR 3.1.2 Language\\ActionEvaluator.g3 2009-03-18 18:21:39

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -332,7 +332,7 @@ public partial class ActionEvaluator : TreeParser
Match(input, TokenConstants.UP, null);

StringWriter buf = new StringWriter();
-							IStringTemplateWriter sw = self.GetGroup().GetStringTemplateWriter(buf);
+							IStringTemplateWriter sw = self.Group.GetStringTemplateWriter(buf);
int n = chunk.WriteAttribute(self,e,sw);
if ( n > 0 )
{
@@ -991,11 +991,11 @@ public partial class ActionEvaluator : TreeParser
MatchAny(input);

string templateName = (ID9!=null?ID9.Text:null);
-									StringTemplateGroup group = self.GetGroup();
+									StringTemplateGroup group = self.Group;
StringTemplate embedded = group.GetEmbeddedInstanceOf(self, templateName);
if ( embedded!=null )
{
-										embedded.SetArgumentsAST(args);
+										embedded.ArgumentsAST = args;
templatesToApply.Add(embedded);
}

@@ -1010,7 +1010,7 @@ public partial class ActionEvaluator : TreeParser
StringTemplate anonymous = anon.StringTemplate;
// to properly see overridden templates, always set
// anonymous' group to be self's group
-									anonymous.SetGroup(self.GetGroup());
+									anonymous.Group = self.Group;
templatesToApply.Add(anonymous);


@@ -1034,11 +1034,11 @@ public partial class ActionEvaluator : TreeParser
if ( n!=null )
{
string templateName = n.ToString();
-											StringTemplateGroup group = self.GetGroup();
+											StringTemplateGroup group = self.Group;
embedded = group.GetEmbeddedInstanceOf(self, templateName);
if ( embedded!=null )
{
-												embedded.SetArgumentsAST(args2);
+												embedded.ArgumentsAST = args2;
templatesToApply.Add(embedded);
}
}
@@ -1343,9 +1343,9 @@ public partial class ActionEvaluator : TreeParser
value =(at!=null?at.Text:null);
if ( (at!=null?at.Text:null)!=null )
{
-								StringTemplate valueST =new StringTemplate(self.GetGroup(), (at!=null?at.Text:null));
-								valueST.SetEnclosingInstance(self);
-								valueST.SetName("<anonymous template argument>");
+								StringTemplate valueST =new StringTemplate(self.Group, (at!=null?at.Text:null));
+								valueST.EnclosingInstance = self;
+								valueST.Name = "<anonymous template argument>";
value = valueST;
}

@@ -1507,14 +1507,14 @@ public partial class ActionEvaluator : TreeParser
string soleArgName = null;
// find the sole defined formal argument for embedded
bool error = false;
-							var formalArgs = embedded.GetFormalArguments();
+							var formalArgs = embedded.FormalArguments;
if ( formalArgs!=null )
{
var argNames = formalArgs.Select( fa => fa.name ).ToArray();
if ( argNames.Length==1 )
{
soleArgName = (string)argNames.ToArray()[0];
-									//System.out.println("sole formal arg of "+embedded.GetName()+" is "+soleArgName);
+									//System.out.println("sole formal arg of "+embedded.Name+" is "+soleArgName);
}
else
{
@@ -1527,7 +1527,7 @@ public partial class ActionEvaluator : TreeParser
}
if ( error )
{
-								self.Error("template "+embedded.GetName()+
+								self.Error("template "+embedded.Name+
" must have exactly one formal arg in template context "+
self.GetEnclosingInstanceStackString());
}
diff --git a/Antlr3.StringTemplate/Language/ActionEvaluator.g3 b/Antlr3.StringTemplate/Language/ActionEvaluator.g3
index 94713a0..d6db683 100644
--- a/Antlr3.StringTemplate/Language/ActionEvaluator.g3
+++ b/Antlr3.StringTemplate/Language/ActionEvaluator.g3
@@ -104,7 +104,7 @@ expr returns [object value]
// convert to string (force early eval)
{
StringWriter buf = new StringWriter();
-			IStringTemplateWriter sw = self.GetGroup().GetStringTemplateWriter(buf);
+			IStringTemplateWriter sw = self.Group.GetStringTemplateWriter(buf);
int n = chunk.WriteAttribute(self,$e.value,sw);
if ( n > 0 )
{
@@ -211,11 +211,11 @@ template[System.Collections.Generic.List<StringTemplate> templatesToApply]
(	ID args=. // don't eval argList now; must re-eval each iteration
{
string templateName = $ID.text;
-					StringTemplateGroup group = self.GetGroup();
+					StringTemplateGroup group = self.Group;
StringTemplate embedded = group.GetEmbeddedInstanceOf(self, templateName);
if ( embedded!=null )
{
-						embedded.SetArgumentsAST($args);
+						embedded.ArgumentsAST = $args;
$templatesToApply.Add(embedded);
}
}
@@ -225,7 +225,7 @@ template[System.Collections.Generic.List<StringTemplate> templatesToApply]
StringTemplate anonymous = $anon.StringTemplate;
// to properly see overridden templates, always set
// anonymous' group to be self's group
-					anonymous.SetGroup(self.GetGroup());
+					anonymous.Group = self.Group;
$templatesToApply.Add(anonymous);
}

@@ -235,11 +235,11 @@ template[System.Collections.Generic.List<StringTemplate> templatesToApply]
if ( $n.value!=null )
{
string templateName = $n.value.ToString();
-							StringTemplateGroup group = self.GetGroup();
+							StringTemplateGroup group = self.Group;
embedded = group.GetEmbeddedInstanceOf(self, templateName);
if ( embedded!=null )
{
-								embedded.SetArgumentsAST($args2);
+								embedded.ArgumentsAST = $args2;
$templatesToApply.Add(embedded);
}
}
@@ -292,9 +292,9 @@ attribute returns [object value]
$value=$at.text;
if ( $at.text!=null )
{
-				StringTemplate valueST =new StringTemplate(self.GetGroup(), $at.text);
-				valueST.SetEnclosingInstance(self);
-				valueST.SetName("<anonymous template argument>");
+				StringTemplate valueST =new StringTemplate(self.Group, $at.text);
+				valueST.EnclosingInstance = self;
+				valueST.Name = "<anonymous template argument>";
$value = valueST;
}
}
@@ -328,14 +328,14 @@ singleTemplateArg[StringTemplate embedded, Map argumentContext]
string soleArgName = null;
// find the sole defined formal argument for embedded
bool error = false;
-				var formalArgs = $embedded.GetFormalArguments();
+				var formalArgs = $embedded.FormalArguments;
if ( formalArgs!=null )
{
var argNames = formalArgs.Select( fa => fa.name ).ToArray();
if ( argNames.Length==1 )
{
soleArgName = (string)argNames.ToArray()[0];
-						//System.out.println("sole formal arg of "+$embedded.GetName()+" is "+soleArgName);
+						//System.out.println("sole formal arg of "+$embedded.Name+" is "+soleArgName);
}
else
{
@@ -348,7 +348,7 @@ singleTemplateArg[StringTemplate embedded, Map argumentContext]
}
if ( error )
{
-					self.Error("template "+$embedded.GetName()+
+					self.Error("template "+$embedded.Name+
" must have exactly one formal arg in template context "+
self.GetEnclosingInstanceStackString());
}
diff --git a/Antlr3.StringTemplate/Language/ActionParser.cs b/Antlr3.StringTemplate/Language/ActionParser.cs
index 2927bb6..f67824f 100644
--- a/Antlr3.StringTemplate/Language/ActionParser.cs
+++ b/Antlr3.StringTemplate/Language/ActionParser.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\Action.g3 2009-03-18 17:32:04
+// $ANTLR 3.1.2 Language\\Action.g3 2009-03-18 18:14:46

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -2399,9 +2399,9 @@ public partial class ActionParser : Parser
{

anonymous = new StringTemplate();
-							anonymous.SetGroup(self.GetGroup());
-							anonymous.SetEnclosingInstance(self);
-							anonymous.SetTemplate((t!=null?t.Text:null));
+							anonymous.Group = self.Group;
+							anonymous.EnclosingInstance = self;
+							anonymous.Template = (t!=null?t.Text:null);
if ( t is StringTemplateToken )
anonymous.DefineFormalArguments(((StringTemplateToken)t).args);
else
diff --git a/Antlr3.StringTemplate/Language/ActionParserHelper.cs b/Antlr3.StringTemplate/Language/ActionParserHelper.cs
index 04b083c..42a4e98 100644
--- a/Antlr3.StringTemplate/Language/ActionParserHelper.cs
+++ b/Antlr3.StringTemplate/Language/ActionParserHelper.cs
@@ -56,14 +56,14 @@ namespace Antlr3.ST.Language

public override void ReportError( RecognitionException e )
{
-            StringTemplateGroup group = self.GetGroup();
+            StringTemplateGroup group = self.Group;
if ( group == StringTemplate.defaultGroup )
{
self.Error( "action parse error; template context is " + self.GetEnclosingInstanceStackString(), e );
}
else
{
-                self.Error( "action parse error in group " + self.GetGroup().Name + " line " + self.GetGroupFileLine() + "; template context is " + self.GetEnclosingInstanceStackString(), e );
+                self.Error( "action parse error in group " + self.Group.Name + " line " + self.GroupFileLine + "; template context is " + self.GetEnclosingInstanceStackString(), e );
}
}
}
diff --git a/Antlr3.StringTemplate/Language/ConditionalExpr.cs b/Antlr3.StringTemplate/Language/ConditionalExpr.cs
index 19fb89b..66ed75a 100644
--- a/Antlr3.StringTemplate/Language/ConditionalExpr.cs
+++ b/Antlr3.StringTemplate/Language/ConditionalExpr.cs
@@ -41,9 +41,9 @@ namespace Antlr3.ST.Language
/** <summary>A conditional reference to an embedded subtemplate.</summary> */
public class ConditionalExpr : ASTExpr
{
-        StringTemplate subtemplate = null;
-        List<ElseIfClauseData> elseIfSubtemplates = null;
-        StringTemplate elseSubtemplate = null;
+        StringTemplate _subtemplate;
+        List<ElseIfClauseData> _elseIfSubtemplates;
+        StringTemplate _elseSubtemplate;

protected class ElseIfClauseData
{
@@ -51,44 +51,47 @@ namespace Antlr3.ST.Language
public StringTemplate st;
}

-        public ConditionalExpr( StringTemplate enclosingTemplate, ITree tree ) :
-            base( enclosingTemplate, tree, null )
+        public ConditionalExpr( StringTemplate enclosingTemplate, ITree tree )
+            : base( enclosingTemplate, tree, null )
{
}

-        public virtual void SetSubtemplate( StringTemplate subtemplate )
+        public StringTemplate Subtemplate
{
-            this.subtemplate = subtemplate;
+            get
+            {
+                return _subtemplate;
+            }
+            set
+            {
+                _subtemplate = value;
+            }
+        }
+        public StringTemplate ElseSubtemplate
+        {
+            get
+            {
+                return _elseSubtemplate;
+            }
+            set
+            {
+                _elseSubtemplate = value;
+            }
}

public virtual void AddElseIfSubtemplate( ASTExpr conditionalTree,
StringTemplate subtemplate )
{
-            if ( elseIfSubtemplates == null )
+            if ( _elseIfSubtemplates == null )
{
-                elseIfSubtemplates = new List<ElseIfClauseData>();
+                _elseIfSubtemplates = new List<ElseIfClauseData>();
}
ElseIfClauseData d = new ElseIfClauseData()
{
expr = conditionalTree,
st = subtemplate
};
-            elseIfSubtemplates.Add( d );
-        }
-
-        public virtual StringTemplate GetSubtemplate()
-        {
-            return subtemplate;
-        }
-
-        public virtual StringTemplate GetElseSubtemplate()
-        {
-            return elseSubtemplate;
-        }
-
-        public virtual void SetElseSubtemplate( StringTemplate elseSubtemplate )
-        {
-            this.elseSubtemplate = elseSubtemplate;
+            _elseIfSubtemplates.Add( d );
}

/** <summary>
@@ -99,7 +102,7 @@ namespace Antlr3.ST.Language
*/
public override int Write( StringTemplate self, IStringTemplateWriter @out )
{
-            if ( _exprTree == null || self == null || @out == null )
+            if ( AST == null || self == null || @out == null )
{
return 0;
}
@@ -110,23 +113,23 @@ namespace Antlr3.ST.Language
{
bool testedTrue = false;
// get conditional from tree and compute result
-                ITree cond = _exprTree.GetChild( 0 );
+                ITree cond = AST.GetChild( 0 );
eval = new ActionEvaluator( self, this, @out, cond );
bool includeSubtemplate = eval.ifCondition(); // eval and write out tree
// System.out.println("subtemplate "+subtemplate);
// IF
if ( includeSubtemplate )
{
-                    n = WriteSubTemplate( self, @out, subtemplate );
+                    n = WriteSubTemplate( self, @out, _subtemplate );
testedTrue = true;
}
// ELSEIF
-                else if ( elseIfSubtemplates != null && elseIfSubtemplates.Count > 0 )
+                else if ( _elseIfSubtemplates != null && _elseIfSubtemplates.Count > 0 )
{
-                    for ( int i = 0; i < elseIfSubtemplates.Count; i++ )
+                    for ( int i = 0; i < _elseIfSubtemplates.Count; i++ )
{
-                        ElseIfClauseData elseIfClause = elseIfSubtemplates[i];
-                        eval = new ActionEvaluator( self, this, @out, elseIfClause.expr._exprTree );
+                        ElseIfClauseData elseIfClause = _elseIfSubtemplates[i];
+                        eval = new ActionEvaluator( self, this, @out, elseIfClause.expr.AST );
includeSubtemplate = eval.ifCondition();
if ( includeSubtemplate )
{
@@ -137,19 +140,19 @@ namespace Antlr3.ST.Language
}
}
// ELSE
-                if ( !testedTrue && elseSubtemplate != null )
+                if ( !testedTrue && _elseSubtemplate != null )
{
// evaluate ELSE clause if present and IF condition failed
-                    StringTemplate s = elseSubtemplate.GetInstanceOf();
-                    s.SetEnclosingInstance( self );
-                    s.SetGroup( self.GetGroup() );
-                    s.SetNativeGroup( self.GetNativeGroup() );
+                    StringTemplate s = _elseSubtemplate.GetInstanceOf();
+                    s.EnclosingInstance = self;
+                    s.Group = self.Group;
+                    s.NativeGroup = self.NativeGroup;
n = s.Write( @out );
}
}
catch ( RecognitionException re )
{
-                self.Error( "can't evaluate tree: " + _exprTree.ToStringTree(), re );
+                self.Error( "can't evaluate tree: " + AST.ToStringTree(), re );
}
return n;
}
@@ -165,11 +168,11 @@ namespace Antlr3.ST.Language
* "enclosing instance" pointer.
*/
StringTemplate s = subtemplate.GetInstanceOf();
-            s.SetEnclosingInstance( self );
+            s.EnclosingInstance = self;
// make sure we evaluate in context of enclosing template's
// group so polymorphism works. :)
-            s.SetGroup( self.GetGroup() );
-            s.SetNativeGroup( self.GetNativeGroup() );
+            s.Group = self.Group;
+            s.NativeGroup = self.NativeGroup;
return s.Write( @out );
}
}
diff --git a/Antlr3.StringTemplate/Language/Group.g3 b/Antlr3.StringTemplate/Language/Group.g3
index b9813cf..40f1151 100644
--- a/Antlr3.StringTemplate/Language/Group.g3
+++ b/Antlr3.StringTemplate/Language/Group.g3
@@ -196,13 +196,13 @@ template[StringTemplateGroup g]
}
}
)
-		{if ( st!=null ) {st.SetGroupFileLine(line);}}
+		{if ( st!=null ) {st.GroupFileLine = line;}}
LPAREN
(args[st]|{st.DefineEmptyFormalArgumentList();})
RPAREN
DEFINED_TO_BE
-		(	t=STRING     {st.SetTemplate($t.text);}
-		|	bt=BIGSTRING {st.SetTemplate($bt.text);}
+		(	t=STRING     {st.Template = $t.text;}
+		|	bt=BIGSTRING {st.Template = $bt.text;}
)

|   alias=ID DEFINED_TO_BE target=ID
@@ -224,12 +224,12 @@ arg[StringTemplate st]
defaultValue=new StringTemplate("\$_val_\$");
defaultValue.SetAttribute("_val_", $s.text);
defaultValue.DefineFormalArgument("_val_");
-				defaultValue.Name = "<"+st.GetName()+"'s arg "+$name.text+" default value subtemplate>";
+				defaultValue.Name = "<"+st.Name+"'s arg "+$name.text+" default value subtemplate>";
}
|	ASSIGN bs=ANONYMOUS_TEMPLATE
{
-				defaultValue=new StringTemplate(st.GetGroup(), $bs.text);
-				defaultValue.Name = "<"+st.GetName()+"'s arg "+$name.text+" default value subtemplate>";
+				defaultValue=new StringTemplate(st.Group, $bs.text);
+				defaultValue.Name = "<"+st.Name+"'s arg "+$name.text+" default value subtemplate>";
}
)?
{st.DefineFormalArgument($name.text, defaultValue);}
diff --git a/Antlr3.StringTemplate/Language/GroupParser.cs b/Antlr3.StringTemplate/Language/GroupParser.cs
index 5ce50dc..9cb52f5 100644
--- a/Antlr3.StringTemplate/Language/GroupParser.cs
+++ b/Antlr3.StringTemplate/Language/GroupParser.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\Group.g3 2009-03-18 17:32:03
+// $ANTLR 3.1.2 Language\\Group.g3 2009-03-18 18:21:15

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -442,7 +442,7 @@ public partial class GroupParser : Parser

}

-				if ( st!=null ) {st.SetGroupFileLine(line);}
+				if ( st!=null ) {st.GroupFileLine = line;}
Match(input,LPAREN,Follow._LPAREN_in_template230);
// Language\\Group.g3:201:4: ( args[st] |)
int alt6=2;
@@ -511,7 +511,7 @@ public partial class GroupParser : Parser
// Language\\Group.g3:204:5: t= STRING
{
t=(IToken)Match(input,STRING,Follow._STRING_in_template256);
-					st.SetTemplate((t!=null?t.Text:null));
+					st.Template = (t!=null?t.Text:null);

}
break;
@@ -519,7 +519,7 @@ public partial class GroupParser : Parser
// Language\\Group.g3:205:5: bt= BIGSTRING
{
bt=(IToken)Match(input,BIGSTRING,Follow._BIGSTRING_in_template270);
-					st.SetTemplate((bt!=null?bt.Text:null));
+					st.Template = (bt!=null?bt.Text:null);

}
break;
@@ -667,7 +667,7 @@ public partial class GroupParser : Parser
defaultValue=new StringTemplate("$_val_$");
defaultValue.SetAttribute("_val_", (s!=null?s.Text:null));
defaultValue.DefineFormalArgument("_val_");
-								defaultValue.Name = "<"+st.GetName()+"'s arg "+(name!=null?name.Text:null)+" default value subtemplate>";
+								defaultValue.Name = "<"+st.Name+"'s arg "+(name!=null?name.Text:null)+" default value subtemplate>";


}
@@ -678,8 +678,8 @@ public partial class GroupParser : Parser
Match(input,ASSIGN,Follow._ASSIGN_in_arg359);
bs=(IToken)Match(input,ANONYMOUS_TEMPLATE,Follow._ANONYMOUS_TEMPLATE_in_arg363);

-								defaultValue=new StringTemplate(st.GetGroup(), (bs!=null?bs.Text:null));
-								defaultValue.Name = "<"+st.GetName()+"'s arg "+(name!=null?name.Text:null)+" default value subtemplate>";
+								defaultValue=new StringTemplate(st.Group, (bs!=null?bs.Text:null));
+								defaultValue.Name = "<"+st.Name+"'s arg "+(name!=null?name.Text:null)+" default value subtemplate>";


}
diff --git a/Antlr3.StringTemplate/Language/Template.g3 b/Antlr3.StringTemplate/Language/Template.g3
index 8d4882e..89f4cac 100644
--- a/Antlr3.StringTemplate/Language/Template.g3
+++ b/Antlr3.StringTemplate/Language/Template.g3
@@ -143,21 +143,21 @@ action[StringTemplate self]
{
ConditionalExpr c = (ConditionalExpr)self.ParseAction($i.text);
// create and precompile the subtemplate
-			StringTemplate subtemplate = new StringTemplate(self.GetGroup(), null);
-			subtemplate.SetEnclosingInstance(self);
-			subtemplate.SetName($i.text+"_subtemplate");
+			StringTemplate subtemplate = new StringTemplate(self.Group, null);
+			subtemplate.EnclosingInstance = self;
+			subtemplate.Name = $i.text + "_subtemplate";
self.AddChunk(c);
}

-		template[subtemplate] {if ( c!=null ) c.SetSubtemplate(subtemplate);}
+		template[subtemplate] {if ( c!=null ) c.Subtemplate = subtemplate;}

(	ei=ELSEIF
{
ASTExpr ec = self.ParseAction($ei.text);
// create and precompile the subtemplate
-				StringTemplate elseIfSubtemplate = new StringTemplate(self.GetGroup(), null);
-				elseIfSubtemplate.SetEnclosingInstance(self);
-				elseIfSubtemplate.SetName($ei.text+"_subtemplate");
+				StringTemplate elseIfSubtemplate = new StringTemplate(self.Group, null);
+				elseIfSubtemplate.EnclosingInstance = self;
+				elseIfSubtemplate.Name = $ei.text + "_subtemplate";
}

template[elseIfSubtemplate]
@@ -168,13 +168,13 @@ action[StringTemplate self]
(	ELSE
{
// create and precompile the subtemplate
-				StringTemplate elseSubtemplate = new StringTemplate(self.GetGroup(), null);
-				elseSubtemplate.SetEnclosingInstance(self);
-				elseSubtemplate.SetName("else_subtemplate");
+				StringTemplate elseSubtemplate = new StringTemplate(self.Group, null);
+				elseSubtemplate.EnclosingInstance = self;
+				elseSubtemplate.Name = "else_subtemplate";
}

template[elseSubtemplate]
-			{if ( c!=null ) c.SetElseSubtemplate(elseSubtemplate);}
+			{if ( c!=null ) c.ElseSubtemplate = elseSubtemplate;}
)?

ENDIF
@@ -190,31 +190,31 @@ action[StringTemplate self]
// convert to <super.region__enclosingTemplate__r()>
if ( regionName.StartsWith("super.") )
{
-				//System.out.println("super region ref "+regionName);
+				//System.Console.Out.WriteLine( "super region ref " + regionName );
string regionRef = regionName.substring("super.".Length,regionName.Length);
-				string templateScope = self.GetGroup().GetUnMangledTemplateName(self.GetName());
-				StringTemplate scopeST = self.GetGroup().LookupTemplate(templateScope);
+				string templateScope = self.Group.GetUnMangledTemplateName(self.Name);
+				StringTemplate scopeST = self.Group.LookupTemplate(templateScope);
if ( scopeST==null )
{
-					self.GetGroup().Error("reference to region within undefined template: "+templateScope);
+					self.Group.Error("reference to region within undefined template: "+templateScope);
err=true;
}
if ( !scopeST.ContainsRegionName(regionRef) )
{
-					self.GetGroup().Error("template "+templateScope+" has no region called "+regionRef);
+					self.Group.Error("template "+templateScope+" has no region called "+regionRef);
err=true;
}
else
{
-					mangledRef = self.GetGroup().GetMangledRegionName(templateScope,regionRef);
+					mangledRef = self.Group.GetMangledRegionName(templateScope,regionRef);
mangledRef = "super."+mangledRef;
}
}
else
{
//System.out.println("region ref "+regionName);
-				StringTemplate regionST = self.GetGroup().DefineImplicitRegionTemplate(self,regionName);
-				mangledRef = regionST.GetName();
+				StringTemplate regionST = self.Group.DefineImplicitRegionTemplate(self,regionName);
+				mangledRef = regionST.Name;
}

if ( !err )
@@ -235,10 +235,10 @@ action[StringTemplate self]
{
string regionName = combinedNameTemplateStr.substring(0,indexOfDefSymbol);
string template = combinedNameTemplateStr.substring(indexOfDefSymbol+3, combinedNameTemplateStr.Length);
-				StringTemplate regionST = self.GetGroup().DefineRegionTemplate(self,regionName,template,StringTemplate.REGION_EMBEDDED);
+				StringTemplate regionST = self.Group.DefineRegionTemplate(self,regionName,template,StringTemplate.REGION_EMBEDDED);
// treat as regular action: mangled template include
string indent = ((ChunkToken)$rd).Indentation;
-				ASTExpr c = self.ParseAction(regionST.GetName()+"()");
+				ASTExpr c = self.ParseAction(regionST.Name+"()");
c.Indentation = indent;
self.AddChunk(c);
}
diff --git a/Antlr3.StringTemplate/Language/TemplateParser.cs b/Antlr3.StringTemplate/Language/TemplateParser.cs
index 6333875..f080702 100644
--- a/Antlr3.StringTemplate/Language/TemplateParser.cs
+++ b/Antlr3.StringTemplate/Language/TemplateParser.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Language\\Template.g3 2009-03-16 21:10:52
+// $ANTLR 3.1.2 Language\\Template.g3 2009-03-18 18:13:50

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -283,9 +283,9 @@ public partial class TemplateParser : Parser

ConditionalExpr c = (ConditionalExpr)self.ParseAction((i!=null?i.Text:null));
// create and precompile the subtemplate
-							StringTemplate subtemplate = new StringTemplate(self.GetGroup(), null);
-							subtemplate.SetEnclosingInstance(self);
-							subtemplate.SetName((i!=null?i.Text:null)+"_subtemplate");
+							StringTemplate subtemplate = new StringTemplate(self.Group, null);
+							subtemplate.EnclosingInstance = self;
+							subtemplate.Name = (i!=null?i.Text:null) + "_subtemplate";
self.AddChunk(c);

PushFollow(Follow._template_in_action139);
@@ -293,7 +293,7 @@ public partial class TemplateParser : Parser

state._fsp--;

-				if ( c!=null ) c.SetSubtemplate(subtemplate);
+				if ( c!=null ) c.Subtemplate = subtemplate;
// Language\\Template.g3:154:3: (ei= ELSEIF template[elseIfSubtemplate] )*
for ( ; ; )
{
@@ -315,9 +315,9 @@ public partial class TemplateParser : Parser

ASTExpr ec = self.ParseAction((ei!=null?ei.Text:null));
// create and precompile the subtemplate
-										StringTemplate elseIfSubtemplate = new StringTemplate(self.GetGroup(), null);
-										elseIfSubtemplate.SetEnclosingInstance(self);
-										elseIfSubtemplate.SetName((ei!=null?ei.Text:null)+"_subtemplate");
+										StringTemplate elseIfSubtemplate = new StringTemplate(self.Group, null);
+										elseIfSubtemplate.EnclosingInstance = self;
+										elseIfSubtemplate.Name = (ei!=null?ei.Text:null) + "_subtemplate";

PushFollow(Follow._template_in_action162);
template(elseIfSubtemplate);
@@ -354,16 +354,16 @@ public partial class TemplateParser : Parser
Match(input,ELSE,Follow._ELSE_in_action181);

// create and precompile the subtemplate
-									StringTemplate elseSubtemplate = new StringTemplate(self.GetGroup(), null);
-									elseSubtemplate.SetEnclosingInstance(self);
-									elseSubtemplate.SetName("else_subtemplate");
+									StringTemplate elseSubtemplate = new StringTemplate(self.Group, null);
+									elseSubtemplate.EnclosingInstance = self;
+									elseSubtemplate.Name = "else_subtemplate";

PushFollow(Follow._template_in_action192);
template(elseSubtemplate);

state._fsp--;

-					if ( c!=null ) c.SetElseSubtemplate(elseSubtemplate);
+					if ( c!=null ) c.ElseSubtemplate = elseSubtemplate;

}
break;
@@ -388,31 +388,31 @@ public partial class TemplateParser : Parser
// convert to <super.region__enclosingTemplate__r()>
if ( regionName.StartsWith("super.") )
{
-								//System.out.println("super region ref "+regionName);
+								//System.Console.Out.WriteLine( "super region ref " + regionName );
string regionRef = regionName.substring("super.".Length,regionName.Length);
-								string templateScope = self.GetGroup().GetUnMangledTemplateName(self.GetName());
-								StringTemplate scopeST = self.GetGroup().LookupTemplate(templateScope);
+								string templateScope = self.Group.GetUnMangledTemplateName(self.Name);
+								StringTemplate scopeST = self.Group.LookupTemplate(templateScope);
if ( scopeST==null )
{
-									self.GetGroup().Error("reference to region within undefined template: "+templateScope);
+									self.Group.Error("reference to region within undefined template: "+templateScope);
err=true;
}
if ( !scopeST.ContainsRegionName(regionRef) )
{
-									self.GetGroup().Error("template "+templateScope+" has no region called "+regionRef);
+									self.Group.Error("template "+templateScope+" has no region called "+regionRef);
err=true;
}
else
{
-									mangledRef = self.GetGroup().GetMangledRegionName(templateScope,regionRef);
+									mangledRef = self.Group.GetMangledRegionName(templateScope,regionRef);
mangledRef = "super."+mangledRef;
}
}
else
{
//System.out.println("region ref "+regionName);
-								StringTemplate regionST = self.GetGroup().DefineImplicitRegionTemplate(self,regionName);
-								mangledRef = regionST.GetName();
+								StringTemplate regionST = self.Group.DefineImplicitRegionTemplate(self,regionName);
+								mangledRef = regionST.Name;
}

if ( !err )
@@ -438,10 +438,10 @@ public partial class TemplateParser : Parser
{
string regionName = combinedNameTemplateStr.substring(0,indexOfDefSymbol);
string template = combinedNameTemplateStr.substring(indexOfDefSymbol+3, combinedNameTemplateStr.Length);
-								StringTemplate regionST = self.GetGroup().DefineRegionTemplate(self,regionName,template,StringTemplate.REGION_EMBEDDED);
+								StringTemplate regionST = self.Group.DefineRegionTemplate(self,regionName,template,StringTemplate.REGION_EMBEDDED);
// treat as regular action: mangled template include
string indent = ((ChunkToken)rd).Indentation;
-								ASTExpr c = self.ParseAction(regionST.GetName()+"()");
+								ASTExpr c = self.ParseAction(regionST.Name+"()");
c.Indentation = indent;
self.AddChunk(c);
}
diff --git a/Antlr3.StringTemplate/Language/TemplateParserHelper.cs b/Antlr3.StringTemplate/Language/TemplateParserHelper.cs
index b973334..9738d19 100644
--- a/Antlr3.StringTemplate/Language/TemplateParserHelper.cs
+++ b/Antlr3.StringTemplate/Language/TemplateParserHelper.cs
@@ -40,14 +40,14 @@ namespace Antlr3.ST.Language

public override void ReportError( RecognitionException e )
{
-            StringTemplateGroup group = self.GetGroup();
+            StringTemplateGroup group = self.Group;
if ( group == StringTemplate.defaultGroup )
{
self.Error( "template parse error; template context is " + self.GetEnclosingInstanceStackString(), e );
}
else
{
-                self.Error( "template parse error in group " + self.GetGroup().Name + " line " + self.GetGroupFileLine() + "; template context is " + self.GetEnclosingInstanceStackString(), e );
+                self.Error( "template parse error in group " + self.Group.Name + " line " + self.GroupFileLine + "; template context is " + self.GetEnclosingInstanceStackString(), e );
}
}
}
diff --git a/Antlr3.StringTemplate/StringTemplate.cs b/Antlr3.StringTemplate/StringTemplate.cs
index ad2170f..8e301d2 100644
--- a/Antlr3.StringTemplate/StringTemplate.cs
+++ b/Antlr3.StringTemplate/StringTemplate.cs
@@ -375,8 +375,8 @@ namespace Antlr3.ST
public StringTemplate( string template, Type lexer )
: this()
{
-            SetGroup( new StringTemplateGroup( "defaultGroup", lexer ) );
-            SetTemplate( template );
+            Group = new StringTemplateGroup( "defaultGroup", lexer );
+            Template = template;
}

/** <summary>Create an anonymous template with no name, but with a group</summary> */
@@ -385,9 +385,9 @@ namespace Antlr3.ST
{
if ( group != null )
{
-                SetGroup( group );
+                Group = group;
}
-            SetTemplate( template );
+            Template = template;
}

public StringTemplate( StringTemplateGroup group,
@@ -404,11 +404,11 @@ namespace Antlr3.ST
{
get
{
-                return GetArgumentContext();
+                return _argumentContext;
}
set
{
-                SetArgumentContext( value );
+                _argumentContext = value;
}
}

@@ -416,11 +416,11 @@ namespace Antlr3.ST
{
get
{
-                return GetArgumentsAST();
+                return _argumentsAST;
}
set
{
-                SetArgumentsAST( value );
+                _argumentsAST = value;
}
}

@@ -428,19 +428,24 @@ namespace Antlr3.ST
{
get
{
-                return GetAttributes();
+                return attributes;
}
set
{
-                SetAttributes( value );
+                attributes = value;
}
}

+        /** <summary>
+         *  Get a list of the strings and subtemplates and attribute
+         *  refs in a template.
+         *  </summary>
+         */
public IList<Expr> Chunks
{
get
{
-                return GetChunks();
+                return _chunks;
}
}

@@ -448,11 +453,15 @@ namespace Antlr3.ST
{
get
{
-                return GetEnclosingInstance();
+                return _enclosingInstance;
}
set
{
-                SetEnclosingInstance( value );
+                if ( this == value )
+                    throw new ArgumentException( "cannot embed template " + Name + " in itself" );
+
+                // set the parent for this template
+                _enclosingInstance = value;
}
}

@@ -460,11 +469,14 @@ namespace Antlr3.ST
{
get
{
-                return GetErrorListener();
+                if ( _listener == null )
+                    return _group.ErrorListener;
+
+                return _listener;
}
set
{
-                SetErrorListener( value );
+                _listener = value;
}
}

@@ -472,31 +484,39 @@ namespace Antlr3.ST
{
get
{
-                return GetGroup();
+                return _group;
}
set
{
-                SetGroup( value );
+                _group = value;
}
}

+        /** <summary>Gets or sets the outermost template's group file line number</summary> */
public int GroupFileLine
{
get
{
-                return GetGroupFileLine();
+                if ( _enclosingInstance != null )
+                    return _enclosingInstance.GroupFileLine;
+
+                return _groupFileLine;
}
set
{
-                SetGroupFileLine( value );
+                _groupFileLine = value;
}
}

-        public IEnumerable<FormalArgument> FormalArguments
+        public IList<FormalArgument> FormalArguments
{
get
{
-                return GetFormalArguments();
+                return _formalArguments;
+            }
+            private set
+            {
+                _formalArguments = value;
}
}

@@ -512,15 +532,21 @@ namespace Antlr3.ST
}
}

+        /** <summary>
+         *  Make StringTemplate check your work as it evaluates templates.
+         *  Problems are sent to error listener.   Currently warns when
+         *  you set attributes that are not used.
+         *  </summary>
+         */
public static bool LintMode
{
get
{
-                return InLintMode();
+                return _lintMode;
}
set
{
-                SetLintMode( value );
+                _lintMode = value;
}
}

@@ -528,11 +554,11 @@ namespace Antlr3.ST
{
get
{
-                return GetName();
+                return _name;
}
set
{
-                SetName( value );
+                _name = value;
}
}

@@ -540,11 +566,11 @@ namespace Antlr3.ST
{
get
{
-                return GetNativeGroup();
+                return _nativeGroup;
}
set
{
-                SetNativeGroup( value );
+                _nativeGroup = value;
}
}

@@ -552,7 +578,10 @@ namespace Antlr3.ST
{
get
{
-                return GetOutermostEnclosingInstance();
+                if ( _enclosingInstance != null )
+                    return _enclosingInstance.OutermostEnclosingInstance;
+
+                return this;
}
}

@@ -560,7 +589,10 @@ namespace Antlr3.ST
{
get
{
-                return GetOutermostName();
+                if ( _enclosingInstance != null )
+                    return _enclosingInstance.OutermostName;
+
+                return Name;
}
}

@@ -568,11 +600,11 @@ namespace Antlr3.ST
{
get
{
-                return GetRegionDefType();
+                return _regionDefType;
}
set
{
-                SetRegionDefType( value );
+                _regionDefType = value;
}
}

@@ -580,11 +612,12 @@ namespace Antlr3.ST
{
get
{
-                return GetTemplate();
+                return _pattern;
}
set
{
-                SetTemplate( value );
+                _pattern = value;
+                BreakTemplateIntoChunks();
}
}

@@ -600,7 +633,7 @@ namespace Antlr3.ST
{
get
{
-                return GetTemplateID();
+                return _templateID;
}
}

@@ -656,129 +689,6 @@ namespace Antlr3.ST
return t;
}

-        public virtual StringTemplate GetEnclosingInstance()
-        {
-            return _enclosingInstance;
-        }
-
-        public virtual StringTemplate GetOutermostEnclosingInstance()
-        {
-            if ( _enclosingInstance != null )
-            {
-                return _enclosingInstance.GetOutermostEnclosingInstance();
-            }
-            return this;
-        }
-
-        public virtual void SetEnclosingInstance( StringTemplate enclosingInstance )
-        {
-            if ( this == enclosingInstance )
-            {
-                throw new ArgumentException( "cannot embed template " + GetName() + " in itself" );
-            }
-            // set the parent for this template
-            this._enclosingInstance = enclosingInstance;
-        }
-
-        public virtual Dictionary<string, object> GetArgumentContext()
-        {
-            return _argumentContext;
-        }
-
-        public virtual void SetArgumentContext( Dictionary<string, object> ac )
-        {
-            _argumentContext = ac;
-        }
-
-        public virtual StringTemplateAST GetArgumentsAST()
-        {
-            return _argumentsAST;
-        }
-
-        public virtual void SetArgumentsAST( StringTemplateAST argumentsAST )
-        {
-            this._argumentsAST = argumentsAST;
-        }
-
-        public virtual string GetName()
-        {
-            return _name;
-        }
-
-        public virtual string GetOutermostName()
-        {
-            if ( _enclosingInstance != null )
-            {
-                return _enclosingInstance.GetOutermostName();
-            }
-            return GetName();
-        }
-
-        public virtual void SetName( string name )
-        {
-            this._name = name;
-        }
-
-        public virtual StringTemplateGroup GetGroup()
-        {
-            return _group;
-        }
-
-        public virtual void SetGroup( StringTemplateGroup group )
-        {
-            this._group = group;
-        }
-
-        public virtual StringTemplateGroup GetNativeGroup()
-        {
-            return _nativeGroup;
-        }
-
-        public virtual void SetNativeGroup( StringTemplateGroup nativeGroup )
-        {
-            this._nativeGroup = nativeGroup;
-        }
-
-        /** <summary>Return the outermost template's group file line number</summary> */
-        public virtual int GetGroupFileLine()
-        {
-            if ( _enclosingInstance != null )
-            {
-                return _enclosingInstance.GetGroupFileLine();
-            }
-            return _groupFileLine;
-        }
-
-        public virtual void SetGroupFileLine( int groupFileLine )
-        {
-            this._groupFileLine = groupFileLine;
-        }
-
-        public virtual void SetTemplate( string template )
-        {
-            this._pattern = template;
-            BreakTemplateIntoChunks();
-        }
-
-        public virtual string GetTemplate()
-        {
-            return _pattern;
-        }
-
-        public virtual void SetErrorListener( IStringTemplateErrorListener listener )
-        {
-            this._listener = listener;
-        }
-
-        public virtual IStringTemplateErrorListener GetErrorListener()
-        {
-            if ( _listener == null )
-            {
-                return _group.ErrorListener;
-            }
-            return _listener;
-        }
-
public virtual void Reset()
{
attributes = new Dictionary<string, object>(); // just throw out table and make new one
@@ -786,7 +696,7 @@ namespace Antlr3.ST

public virtual void SetPredefinedAttributes()
{
-            if ( !InLintMode() )
+            if ( !LintMode )
{
return; // only do this method so far in lint mode
}
@@ -832,7 +742,7 @@ namespace Antlr3.ST

if ( value is StringTemplate )
{
-                ( (StringTemplate)value ).SetEnclosingInstance( this );
+                ( (StringTemplate)value ).EnclosingInstance = this;
}
else if ( value is HashSet<object> )
{
@@ -941,7 +851,7 @@ namespace Antlr3.ST
object value = values[i];
if ( value is StringTemplate )
{
-                    ( (StringTemplate)value ).SetEnclosingInstance( this );
+                    ( (StringTemplate)value ).EnclosingInstance = this;
}
else
{
@@ -1043,7 +953,7 @@ namespace Antlr3.ST
if ( embedded._formalArguments != FormalArgument.UNKNOWN &&
embedded.GetFormalArgument( name ) == null )
{
-                throw new ArgumentException( "template " + embedded.GetName() +
+                throw new ArgumentException( "template " + embedded.Name +
" has no such attribute: " + name +
" in template context " +
GetEnclosingInstanceStackString() );
@@ -1166,7 +1076,7 @@ namespace Antlr3.ST
// nope, check argument context in case embedded
if ( o == null )
{
-                IDictionary<string, object> argContext = self.GetArgumentContext();
+                IDictionary<string, object> argContext = self.ArgumentContext;
if ( argContext != null )
{
o = argContext.get( attribute );
@@ -1236,10 +1146,10 @@ namespace Antlr3.ST
catch ( Exception e )
{
string name = "<unknown>";
-                string outerName = GetOutermostName();
-                if ( GetName() != null )
+                string outerName = OutermostName;
+                if ( Name != null )
{
-                    name = GetName();
+                    name = Name;
}
if ( outerName != null && !name.Equals( outerName ) )
{
@@ -1280,26 +1190,6 @@ namespace Antlr3.ST
return a;
}

-        public virtual int GetTemplateID()
-        {
-            return _templateID;
-        }
-
-        public virtual IDictionary<string, object> GetAttributes()
-        {
-            return attributes;
-        }
-
-        /** <summary>
-         *  Get a list of the strings and subtemplates and attribute
-         *  refs in a template.
-         *  </summary>
-         */
-        public virtual IList<Expr> GetChunks()
-        {
-            return _chunks;
-        }
-
public virtual void AddChunk( Expr e )
{
if ( _chunks == null )
@@ -1309,23 +1199,8 @@ namespace Antlr3.ST
_chunks.Add( e );
}

-        public virtual void SetAttributes( IDictionary<string, object> attributes )
-        {
-            this.attributes = attributes;
-        }
-
#region Formal Arg Stuff

-        public virtual IList<FormalArgument> GetFormalArguments()
-        {
-            return _formalArguments;
-        }
-
-        public virtual void SetFormalArguments( IList<FormalArgument> args )
-        {
-            _formalArguments = args;
-        }
-
/** <summary>
*  Set any default argument values that were not set by the
*  invoking template or by setAttribute directly.  Note
@@ -1394,7 +1269,7 @@ namespace Antlr3.ST

public virtual void DefineEmptyFormalArgumentList()
{
-            SetFormalArguments( new List<FormalArgument>() );
+            FormalArguments = new List<FormalArgument>();
}

public virtual void DefineFormalArgument( string name )
@@ -1505,9 +1380,9 @@ namespace Antlr3.ST

public virtual void Warning( string msg )
{
-            if ( GetErrorListener() != null )
+            if ( ErrorListener != null )
{
-                GetErrorListener().Warning( msg );
+                ErrorListener.Warning( msg );
}
else
{
@@ -1517,9 +1392,9 @@ namespace Antlr3.ST

public virtual void Error( string msg, Exception e )
{
-            if ( GetErrorListener() != null )
+            if ( ErrorListener != null )
{
-                GetErrorListener().Error( msg, e );
+                ErrorListener.Error( msg, e );
}
else
{
@@ -1539,22 +1414,6 @@ namespace Antlr3.ST
}
}

-        /** <summary>
-         *  Make StringTemplate check your work as it evaluates templates.
-         *  Problems are sent to error listener.   Currently warns when
-         *  you set attributes that are not used.
-         *  </summary>
-         */
-        public static void SetLintMode( bool lint )
-        {
-            StringTemplate._lintMode = lint;
-        }
-
-        public static bool InLintMode()
-        {
-            return _lintMode;
-        }
-
/** <summary>Indicates that 'name' has been referenced in this template.</summary> */
protected virtual void TrackAttributeReference( string name )
{
@@ -1630,9 +1489,9 @@ namespace Antlr3.ST
StringTemplate st = (StringTemplate)o;
buf.Append( "=" );
buf.Append( "<" );
-                            buf.Append( st.GetName() );
+                            buf.Append( st.Name );
buf.Append( "()@" );
-                            buf.Append( st.GetTemplateID().ToString() );
+                            buf.Append( st.TemplateID.ToString() );
buf.Append( ">" );
}
else if ( o is IList )
@@ -1652,9 +1511,9 @@ namespace Antlr3.ST
n++;
StringTemplate st = (StringTemplate)listValue;
buf.Append( "<" );
-                                    buf.Append( st.GetName() );
+                                    buf.Append( st.Name );
buf.Append( "()@" );
-                                    buf.Append( st.GetTemplateID().ToString() );
+                                    buf.Append( st.TemplateID.ToString() );
buf.Append( ">" );
}
}
@@ -1683,11 +1542,11 @@ namespace Antlr3.ST
{
StringBuilder buf = new StringBuilder();
buf.Append( "<" );
-            buf.Append( GetName() );
+            buf.Append( Name );
buf.Append( "(" );
buf.Append( _formalArguments.Select( fa => fa.name ).ToList().ToElementString() );
buf.Append( ")@" );
-            buf.Append( GetTemplateID().ToString() );
+            buf.Append( TemplateID.ToString() );
buf.Append( ">" );
return buf.ToString();
}
@@ -1697,14 +1556,14 @@ namespace Antlr3.ST
if ( showAttributes )
{
StringBuilder buf = new StringBuilder();
-                buf.Append( GetName() );
+                buf.Append( Name );
if ( attributes != null )
{
buf.Append( "[" + string.Join( ", ", attributes.Keys.Cast<object>().Select( o => o.ToString() ).ToArray() ) + "]" );
}
return buf.ToString();
}
-            return GetName();
+            return Name;
}

#if false
@@ -1761,7 +1620,7 @@ namespace Antlr3.ST
StringTemplate self,
string attribute )
{
-            if ( self.GetFormalArguments() == FormalArgument.UNKNOWN )
+            if ( self.FormalArguments == FormalArgument.UNKNOWN )
{
// bypass unknown arg lists
if ( self._enclosingInstance != null )
@@ -1799,7 +1658,7 @@ namespace Antlr3.ST
if ( _referencedAttributes != null &&
!_referencedAttributes.Contains( name ) )
{
-                    Warning( GetName() + ": set but not used: " + name );
+                    Warning( Name + ": set but not used: " + name );
}
}
// can do the reverse, but will have lots of false warnings :(
@@ -1817,7 +1676,7 @@ namespace Antlr3.ST
StringTemplate p = this;
while ( p != null )
{
-                string name = p.GetName();
+                string name = p.Name;
names.Insert( 0, name + ( p._passThroughAttributes ? "(...)" : "" ) );
p = p._enclosingInstance;
}
@@ -1843,16 +1702,6 @@ namespace Antlr3.ST
return _regions.Contains( name );
}

-        public virtual int GetRegionDefType()
-        {
-            return _regionDefType;
-        }
-
-        public virtual void SetRegionDefType( int regionDefType )
-        {
-            this._regionDefType = regionDefType;
-        }
-
public virtual string ToDebugString()
{
StringBuilder buf = new StringBuilder();
@@ -1906,7 +1755,7 @@ namespace Antlr3.ST
{ // indent
buf.Append( "  " );
}
-            buf.Append( GetName() );
+            buf.Append( Name );
buf.Append( attributes.Keys );
buf.Append( ":" + _newline );
if ( attributes != null )
@@ -2104,7 +1953,7 @@ namespace Antlr3.ST
string templateInclude = t.GetChild( 0 ).Text;
Console.Out.WriteLine( "found include " + templateInclude );
PutToMultiValuedMap( edges, srcNode, templateInclude );
-                        StringTemplateGroup group = GetGroup();
+                        StringTemplateGroup group = Group;
if ( group != null )
{
StringTemplate st = group.GetInstanceOf( templateInclude );
@@ -2130,7 +1979,7 @@ namespace Antlr3.ST

public virtual void PrintDebugString()
{
-            Console.Out.WriteLine( "template-" + GetName() + ":" );
+            Console.Out.WriteLine( "template-" + Name + ":" );
Console.Out.Write( "chunks=" );
Console.Out.WriteLine( _chunks.ToString() );
if ( attributes == null )
diff --git a/Antlr3.StringTemplate/StringTemplateGroup.cs b/Antlr3.StringTemplate/StringTemplateGroup.cs
index 5aef2f0..8242ad6 100644
--- a/Antlr3.StringTemplate/StringTemplateGroup.cs
+++ b/Antlr3.StringTemplate/StringTemplateGroup.cs
@@ -642,7 +642,7 @@ namespace Antlr3.ST
// group for the embedded instance not the current evaluation
// group (which is always pulled down to the original group
// from which somebody did group.getInstanceOf("foo");
-                st = enclosingInstance.GetNativeGroup().GetInstanceOf( enclosingInstance, name );
+                st = enclosingInstance.NativeGroup.GetInstanceOf( enclosingInstance, name );
}
else
{
@@ -650,8 +650,8 @@ namespace Antlr3.ST
}
// make sure all embedded templates have the same group as enclosing
// so that polymorphic refs will start looking at the original group
-            st.SetGroup( this );
-            st.SetEnclosingInstance( enclosingInstance );
+            st.Group = this;
+            st.EnclosingInstance = enclosingInstance;
return st;
}

@@ -704,7 +704,7 @@ namespace Antlr3.ST
// group is reset; it's nativeGroup will remain where it was
if ( st != null )
{
-                        st.SetGroup( this );
+                        st.Group = this;
}
}
if ( st != null )
@@ -939,11 +939,11 @@ namespace Antlr3.ST
throw new ArgumentException( "cannot have '.' in template names" );
}
StringTemplate st = CreateStringTemplate();
-            st.SetName( name );
-            st.SetGroup( this );
-            st.SetNativeGroup( this );
-            st.SetTemplate( template );
-            st.SetErrorListener( _listener );
+            st.Name = name;
+            st.Group = this;
+            st.NativeGroup = this;
+            st.Template = template;
+            st.ErrorListener = _listener;
_templates[name] = st;
return st;
}
@@ -958,7 +958,7 @@ namespace Antlr3.ST
GetMangledRegionName( enclosingTemplateName, regionName );
StringTemplate regionST = DefineTemplate( mangledName, template );
regionST.IsRegion = true;
-            regionST.SetRegionDefType( type );
+            regionST.RegionDefType = type;
return regionST;
}

@@ -969,11 +969,11 @@ namespace Antlr3.ST
int type )
{
StringTemplate regionST =
-                DefineRegionTemplate( enclosingTemplate.GetOutermostName(),
+                DefineRegionTemplate( enclosingTemplate.OutermostName,
regionName,
template,
type );
-            enclosingTemplate.GetOutermostEnclosingInstance().AddRegionName( regionName );
+            enclosingTemplate.OutermostEnclosingInstance.AddRegionName( regionName );
return regionST;
}

@@ -1035,7 +1035,7 @@ namespace Antlr3.ST
if ( st.IsRegion )
{
// don't allow redef of @t.r() ::= "..." or <@r>...<@end>
-                    if ( st.GetRegionDefType() == StringTemplate.REGION_IMPLICIT )
+                    if ( st.RegionDefType == StringTemplate.REGION_IMPLICIT )
{
return false;
}
@@ -1324,21 +1324,21 @@ namespace Antlr3.ST
IStringTemplateWriter @out )
{
if ( _noDebugStartStopStrings == null ||
-                 !_noDebugStartStopStrings.Contains( st.GetName() ) )
+                 !_noDebugStartStopStrings.Contains( st.Name ) )
{
string groupPrefix = "";
-                if ( !st.GetName().StartsWith( "if" ) && !st.GetName().StartsWith( "else" ) )
+                if ( !st.Name.StartsWith( "if" ) && !st.Name.StartsWith( "else" ) )
{
-                    if ( st.GetNativeGroup() != null )
+                    if ( st.NativeGroup != null )
{
-                        groupPrefix = st.GetNativeGroup().Name + ".";
+                        groupPrefix = st.NativeGroup.Name + ".";
}
else
{
-                        groupPrefix = st.GetGroup().Name + ".";
+                        groupPrefix = st.Group.Name + ".";
}
}
-                @out.Write( "<" + groupPrefix + st.GetName() + ">" );
+                @out.Write( "<" + groupPrefix + st.Name + ">" );
}
}

@@ -1346,21 +1346,21 @@ namespace Antlr3.ST
IStringTemplateWriter @out )
{
if ( _noDebugStartStopStrings == null ||
-                 !_noDebugStartStopStrings.Contains( st.GetName() ) )
+                 !_noDebugStartStopStrings.Contains( st.Name ) )
{
string groupPrefix = "";
-                if ( !st.GetName().StartsWith( "if" ) && !st.GetName().StartsWith( "else" ) )
+                if ( !st.Name.StartsWith( "if" ) && !st.Name.StartsWith( "else" ) )
{
-                    if ( st.GetNativeGroup() != null )
+                    if ( st.NativeGroup != null )
{
-                        groupPrefix = st.GetNativeGroup().Name + ".";
+                        groupPrefix = st.NativeGroup.Name + ".";
}
else
{
-                        groupPrefix = st.GetGroup().Name + ".";
+                        groupPrefix = st.Group.Name + ".";
}
}
-                @out.Write( "</" + groupPrefix + st.GetName() + ">" );
+                @out.Write( "</" + groupPrefix + st.Name + ">" );
}
}

@@ -1383,12 +1383,12 @@ namespace Antlr3.ST
if ( st != NOT_FOUND_ST )
{
formalArgs = formalArgs.GetInstanceOf();
-                    formalArgs.SetAttribute( "args", st.GetFormalArguments() );
+                    formalArgs.SetAttribute( "args", st.FormalArguments );
buf.Append( tname + "(" + formalArgs + ")" );
if ( showTemplatePatterns )
{
buf.Append( " ::= <<" );
-                        buf.Append( st.GetTemplate() );
+                        buf.Append( st.Template );
buf.Append( ">>" + _newline );
}
else
diff --git a/Antlr3.StringTemplate/StringTemplateGroupInterface.cs b/Antlr3.StringTemplate/StringTemplateGroupInterface.cs
index c1959c1..0e2a9a5 100644
--- a/Antlr3.StringTemplate/StringTemplateGroupInterface.cs
+++ b/Antlr3.StringTemplate/StringTemplateGroupInterface.cs
@@ -209,7 +209,7 @@ namespace Antlr3.ST
if ( group.IsDefined( d.name ) )
{
StringTemplate defST = group.GetTemplateDefinition( d.name );
-                    var formalArgs = defST.GetFormalArguments();
+                    var formalArgs = defST.FormalArguments;
bool ack = false;
if ( ( d.formalArgs != null && formalArgs == null ) ||
( d.formalArgs == null && formalArgs != null ) ||
diff --git a/Antlr3.Test/StringTemplateTests.cs b/Antlr3.Test/StringTemplateTests.cs
index b6eb30e..b096a2a 100644
--- a/Antlr3.Test/StringTemplateTests.cs
+++ b/Antlr3.Test/StringTemplateTests.cs
@@ -1376,7 +1376,7 @@ namespace AntlrUnitTests
[TestMethod]
public void TestSetButNotRefd()
{
-            StringTemplate.SetLintMode( true );
+            StringTemplate.LintMode = true;
StringTemplateGroup group =
new StringTemplateGroup( "test" );
StringTemplate t = new StringTemplate( group, "$a$ then $b$ and $c$ refs." );
@@ -1389,7 +1389,7 @@ namespace AntlrUnitTests
string result = t.ToString();    // result is irrelevant
//System.out.println("result error: '"+errors+"'");
//System.out.println("expecting: '"+expectingError+"'");
-            StringTemplate.SetLintMode( false );
+            StringTemplate.LintMode = false;
Assert.AreEqual( expectingError, errors.ToString() );
}

@@ -2776,7 +2776,7 @@ namespace AntlrUnitTests
"block(stats) ::= \"<stats>\"" +
"ifstat(stats) ::= \"IF true then <stats>\"" + newline
;
-            StringTemplate.SetLintMode( true );
+            StringTemplate.LintMode = true;
StringTemplate.ResetTemplateCounter();
StringTemplateGroup group =
new StringTemplateGroup( new StringReader( templates ) );
@@ -2805,7 +2805,7 @@ namespace AntlrUnitTests
}
//System.err.println("errors="+errors+"'");
//System.err.println("expecting="+expectingError+"'");
-            StringTemplate.SetLintMode( false );
+            StringTemplate.LintMode = false;
Assert.AreEqual( expectingError, errors );
}

@@ -5129,7 +5129,7 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$names,phones,salaries:{n,p | $n$@$p$}; separator=\", \"$"
);
-            e.SetErrorListener( errors );
+            e.ErrorListener = errors;
e = e.GetInstanceOf();
e.SetAttribute( "names", "Ter" );
e.SetAttribute( "names", "Tom" );
@@ -5149,7 +5149,7 @@ namespace AntlrUnitTests
StringTemplate e = new StringTemplate(
"$names,phones,salaries:{$n$@$p$}; separator=\", \"$"
);
-            e.SetErrorListener( errors );
+            e.ErrorListener = errors;
e = e.GetInstanceOf();
e.SetAttribute( "names", "Tom" );
e.SetAttribute( "phones", "2" );
diff --git a/Antlr3.Test/TestAttributes.cs b/Antlr3.Test/TestAttributes.cs
index 4ac1c82..920fd27 100644
--- a/Antlr3.Test/TestAttributes.cs
+++ b/Antlr3.Test/TestAttributes.cs
@@ -3443,7 +3443,7 @@ namespace AntlrUnitTests
object chunk = translator.chunks[i];
if ( chunk is StringTemplate )
{
-                    if ( ( (StringTemplate)chunk ).GetName().Equals( "scopeSetAttributeRef" ) )
+                    if ( ( (StringTemplate)chunk ).Name.Equals( "scopeSetAttributeRef" ) )
{
foundScopeSetAttributeRef = true;
}
diff --git a/Antlr3/Codegen/CodeGenerator.cs b/Antlr3/Codegen/CodeGenerator.cs
index cc69311..5d786b4 100644
--- a/Antlr3/Codegen/CodeGenerator.cs
+++ b/Antlr3/Codegen/CodeGenerator.cs
@@ -451,7 +451,7 @@ namespace Antlr3.Codegen
{
// create a dummy to avoid null-checks all over code generator
headerFileST = new StringTemplate( templates, "" );
-                headerFileST.SetName( "dummy-header-file" );
+                headerFileST.Name = "dummy-header-file";
}

bool filterMode = grammar.getOption( "filter" ) != null &&
@@ -931,7 +931,7 @@ namespace Antlr3.Codegen
if ( iset.Intervals == null || iset.Intervals.Count == 0 )
{
StringTemplate emptyST = new StringTemplate( templates, "" );
-                emptyST.SetName( "empty-set-expr" );
+                emptyST.Name = "empty-set-expr";
return emptyST;
}
string testSTName = "lookaheadTest";
@@ -1040,7 +1040,7 @@ namespace Antlr3.Codegen
StringTemplate vocabFileST =
new StringTemplate( vocabFilePattern,
typeof( AngleBracketTemplateLexer ) );
-            vocabFileST.SetName( "vocab-file" );
+            vocabFileST.Name = "vocab-file";
// make constants for the token names
foreach ( string tokenID in grammar.TokenIDs )
{
diff --git a/Antlr3/Grammars/CodeGenTreeWalker.cs b/Antlr3/Grammars/CodeGenTreeWalker.cs
index eb28560..a21f38d 100644
--- a/Antlr3/Grammars/CodeGenTreeWalker.cs
+++ b/Antlr3/Grammars/CodeGenTreeWalker.cs
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 Grammars\\CodeGenTreeWalker.g3 2009-03-16 17:47:49
+// $ANTLR 3.1.2 Grammars\\CodeGenTreeWalker.g3 2009-03-18 18:16:14

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
@@ -1355,7 +1355,7 @@ public partial class CodeGenTreeWalker : TreeParser
}
}
retval.code = templates.GetInstanceOf(stName);
-								if ( retval.code.GetName().Equals("rule") )
+								if ( retval.code.Name.Equals("rule") )
{
retval.code.SetAttribute("emptyRule", grammar.isEmptyRule(block2));
}
diff --git a/Antlr3/Grammars/CodeGenTreeWalker.g3 b/Antlr3/Grammars/CodeGenTreeWalker.g3
index 65cfc07..37bf060 100644
--- a/Antlr3/Grammars/CodeGenTreeWalker.g3
+++ b/Antlr3/Grammars/CodeGenTreeWalker.g3
@@ -256,7 +256,7 @@ rule returns [StringTemplate code=null]
}
}
$code = templates.GetInstanceOf(stName);
-				if ( $code.GetName().Equals("rule") )
+				if ( $code.Name.Equals("rule") )
{
$code.SetAttribute("emptyRule", grammar.isEmptyRule(block2));
}

