commit 077a0330e9f3f68d97cf74a9a42db9cc74511e2b
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sun Apr 10 18:03:56 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sun Apr 10 18:03:56 2011 -0800

(C# 3) Merge CL8144: Pass through updates

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8157]

diff --git a/Antlr4.StringTemplate/Interpreter.cs b/Antlr4.StringTemplate/Interpreter.cs
index 4124afa..15fbc8b 100644
--- a/Antlr4.StringTemplate/Interpreter.cs
+++ b/Antlr4.StringTemplate/Interpreter.cs
@@ -611,12 +611,28 @@ namespace Antlr4.StringTemplate

foreach (FormalArgument arg in c.FormalArguments)
{
+                // if not already set by user, set to value from outer scope
if (!attrs.ContainsKey(arg.Name))
{
//System.out.println("arg "+arg.name+" missing");
-                    object o = GetAttribute(frame, arg.Name);
-                    //System.out.println("setting to "+o);
-                    attrs[arg.Name] = o;
+
+                    // We only pass through nonempty values. Further, it makes no sense to set
+                    // values for parameter x if x has no definition above. That is the same as
+                    // having no value.  If we did set to null, we'd mess up
+                    // any default argument (which is set later).
+                    try
+                    {
+                        object o = GetAttribute(frame, arg.Name);
+                        if (o != Template.EmptyAttribute)
+                        {
+                            //System.out.println("setting to "+o);
+                            attrs[arg.Name] = o;
+                        }
+                    }
+                    catch (AttributeNotFoundException)
+                    {
+                        // if no such attribute exists for arg.name, don't set parameter
+                    }
}
}
}
diff --git a/Antlr4.Test.StringTemplate/TestCoreBasics.cs b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
index 814aa97..67d9c73 100644
--- a/Antlr4.Test.StringTemplate/TestCoreBasics.cs
+++ b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
@@ -341,6 +341,34 @@ namespace Antlr4.Test.StringTemplate
}

[TestMethod]
+        public void TestPassThruWithDefaultValue()
+        {
+            string templates =
+                "a(x,y) ::= \"<b(...)>\"\n" + // should not set y when it sees "no value" from above
+                "b(x,y={99}) ::= \"<x><y>\"\n";
+            TemplateGroup group = new TemplateGroupString(templates);
+            Template a = group.GetInstanceOf("a");
+            a.Add("x", "x");
+            string expected = "x99";
+            string result = a.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestPassThruWithDefaultValueThatLacksDefinitionAbove()
+        {
+            string templates =
+                "a(x) ::= \"<b(...)>\"\n" + // should not set y when it sees "no definition" from above
+                "b(x,y={99}) ::= \"<x><y>\"\n";
+            TemplateGroup group = new TemplateGroupString(templates);
+            Template a = group.GetInstanceOf("a");
+            a.Add("x", "x");
+            string expected = "x99";
+            string result = a.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
public void TestPassThruPartialArgs()
{
string templates =

