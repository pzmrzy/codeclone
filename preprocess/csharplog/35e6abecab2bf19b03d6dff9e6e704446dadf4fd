commit 35e6abecab2bf19b03d6dff9e6e704446dadf4fd
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Wed Jun 22 16:03:03 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Wed Jun 22 16:03:03 2011 -0800

(C# 3) Merge CL8723 ({...} in subdirs), CL8724 (unit tests)

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8735]

diff --git a/Antlr4.StringTemplate/Compiler/CompilationState.cs b/Antlr4.StringTemplate/Compiler/CompilationState.cs
index da9551d..9755709 100644
--- a/Antlr4.StringTemplate/Compiler/CompilationState.cs
+++ b/Antlr4.StringTemplate/Compiler/CompilationState.cs
@@ -62,6 +62,7 @@ namespace Antlr4.StringTemplate.Compiler
this.errMgr = errMgr;
this.tokens = tokens;
impl.Name = name;
+            impl.Prefix = Utility.GetPrefix(name);
}

public virtual int DefineString(string s)
diff --git a/Antlr4.StringTemplate/Misc/Utility.cs b/Antlr4.StringTemplate/Misc/Utility.cs
index 061d2fd..4fb9d91 100644
--- a/Antlr4.StringTemplate/Misc/Utility.cs
+++ b/Antlr4.StringTemplate/Misc/Utility.cs
@@ -59,7 +59,7 @@ namespace Antlr4.StringTemplate.Misc
return s;
}

-        public static string GetPrefix(string name)
+        public static string GetParent(string name)
{
//System.out.println("getParent("+name+")="+p);
if (name == null)
@@ -76,6 +76,19 @@ namespace Antlr4.StringTemplate.Misc
return string.Empty;
}

+        public static string GetPrefix(string name)
+        {
+            if (name == null)
+                return "/";
+
+            string parent = GetParent(name);
+            string prefix = parent;
+            if (!parent.EndsWith("/"))
+                prefix += '/';
+
+            return prefix;
+        }
+
public static string ReplaceEscapes(string s)
{
s = s.Replace("\n", "\\\\n");
diff --git a/Antlr4.StringTemplate/TemplateGroupDirectory.cs b/Antlr4.StringTemplate/TemplateGroupDirectory.cs
index 3d1d01e..74086c0 100644
--- a/Antlr4.StringTemplate/TemplateGroupDirectory.cs
+++ b/Antlr4.StringTemplate/TemplateGroupDirectory.cs
@@ -131,10 +131,8 @@ namespace Antlr4.StringTemplate
if (Verbose)
Console.WriteLine("STGroupDir.load(" + name + ")");

-            string parent = Utility.GetPrefix(name); // must have parent; it's fully-qualified
-            string prefix = parent;
-            if (!parent.EndsWith("/"))
-                prefix += '/';
+            string parent = Utility.GetParent(name); // must have parent; it's fully-qualified
+            string prefix = Utility.GetPrefix(name);

//    	if (parent.isEmpty()) {
//    		// no need to check for a group file as name has no parent
diff --git a/Antlr4.Test.StringTemplate/TestGroups.cs b/Antlr4.Test.StringTemplate/TestGroups.cs
index b30e020..375a036 100644
--- a/Antlr4.Test.StringTemplate/TestGroups.cs
+++ b/Antlr4.Test.StringTemplate/TestGroups.cs
@@ -94,6 +94,18 @@ namespace Antlr4.Test.StringTemplate
}

[TestMethod]
+        public void TestSubdirWithSubtemplate()
+        {
+            // /randomdir/a and /randomdir/subdir/b
+            string dir = tmpdir;
+            writeFile(Path.Combine(dir, "subdir"), "a.st", "a(x) ::= \"<x:{y|<y>}>\"");
+            TemplateGroup group = new TemplateGroupDirectory(dir);
+            Template st = group.GetInstanceOf("/subdir/a");
+            st.Add("x", new string[] { "a", "b" });
+            Assert.AreEqual("ab", st.Render());
+        }
+
+        [TestMethod]
public void TestGroupFileInDir()
{
// /randomdir/a and /randomdir/group.stg with b and c templates
diff --git a/Antlr4.Test.StringTemplate/TestRegions.cs b/Antlr4.Test.StringTemplate/TestRegions.cs
index 0f73b0e..e615d0f 100644
--- a/Antlr4.Test.StringTemplate/TestRegions.cs
+++ b/Antlr4.Test.StringTemplate/TestRegions.cs
@@ -89,6 +89,38 @@ namespace Antlr4.Test.StringTemplate
}

[TestMethod]
+        public void TestDefineRegionInSubgroupOneInSubdir()
+        {
+            string dir = tmpdir;
+            writeFile(dir, "g1.stg", "a() ::= <<[<@r()>]>>\n");
+            writeFile(Path.Combine(dir, "subdir"), "g2.stg", "@a.r() ::= <<foo>>\n");
+
+            TemplateGroup group1 = new TemplateGroupFile(Path.Combine(dir, "g1.stg"));
+            TemplateGroup group2 = new TemplateGroupFile(Path.Combine(dir, "subdir", "g2.stg"));
+            group2.ImportTemplates(group1); // define r in g2
+            Template st = group2.GetInstanceOf("a");
+            string expected = "[foo]";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
+        public void TestDefineRegionInSubgroupBothInSubdir()
+        {
+            string dir = tmpdir;
+            writeFile(Path.Combine(dir, "subdir"), "g1.stg", "a() ::= <<[<@r()>]>>\n");
+            writeFile(Path.Combine(dir, "subdir"), "g2.stg", "@a.r() ::= <<foo>>\n");
+
+            TemplateGroup group1 = new TemplateGroupFile(Path.Combine(dir, "subdir", "g1.stg"));
+            TemplateGroup group2 = new TemplateGroupFile(Path.Combine(dir, "subdir", "g2.stg"));
+            group2.ImportTemplates(group1); // define r in g2
+            Template st = group2.GetInstanceOf("a");
+            string expected = "[foo]";
+            string result = st.Render();
+            Assert.AreEqual(expected, result);
+        }
+
+        [TestMethod]
public void TestDefineRegionInSubgroupThatRefsSuper()
{
string dir = tmpdir;

