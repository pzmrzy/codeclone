commit edc99e806f28e9f1dc140da82fb90e54b2a5d3c6
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Tue Jun 21 13:44:00 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Tue Jun 21 13:44:00 2011 -0800

(C# 3) Merge CL8689 (wasn't properly stripping actions)

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8704]

diff --git a/Antlr3.Test/TestAttributes.cs b/Antlr3.Test/TestAttributes.cs
index cdc7687..17112e4 100644
--- a/Antlr3.Test/TestAttributes.cs
+++ b/Antlr3.Test/TestAttributes.cs
@@ -1,10 +1,10 @@
/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2005-2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -508,6 +508,36 @@ namespace AntlrUnitTests
}

[TestMethod]
+        public void TestActionNotMovedToSynPred()
+        {
+            String action = "$b = true;";
+            String expecting = "retval.b = true;";
+
+            ErrorQueue equeue = new ErrorQueue();
+            ErrorManager.SetErrorListener(equeue);
+            Grammar g = new Grammar(
+                "grammar t;\n" +
+                "options {output=AST;}\n" + // push b into retval struct
+                "a returns [boolean b]\n" +
+                "options {backtrack=true;}\n" +
+                "   : 'a' {" + action + "}\n" +
+                "   | 'a'\n" +
+                "   ;\n");
+            AntlrTool antlr = newTool();
+            CodeGenerator generator = new CodeGenerator(antlr, g, "Java");
+            g.CodeGenerator = generator;
+            generator.GenRecognizer(); // forces load of templates
+            ActionTranslator translator =
+                new ActionTranslator(generator,
+                    "a",
+                    new CommonToken(ANTLRParser.ACTION, action), 1);
+            String found = translator.Translate();
+            Assert.AreEqual(expecting, found);
+
+            Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
+        }
+
+        [TestMethod]
public void TestReturnValueWithNumber() /*throws Exception*/ {
string action = "$x.i1";
string expecting = "x";
diff --git a/Antlr3/Tool/GrammarAST.cs b/Antlr3/Tool/GrammarAST.cs
index 2c418d1..1fc275a 100644
--- a/Antlr3/Tool/GrammarAST.cs
+++ b/Antlr3/Tool/GrammarAST.cs
@@ -1,10 +1,10 @@
ï»¿/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2005-2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2008-2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -514,13 +514,13 @@ namespace Antlr3.Tool
return Dup( this );
}

-        static IEnumerable<GrammarAST> GetChildrenForDupTree( GrammarAST t )
+        private static IEnumerable<GrammarAST> GetChildrenForDupTree( GrammarAST t )
{
for ( int i = 0; i < t.ChildCount; i++ )
{
GrammarAST child = (GrammarAST)t.GetChild( i );
int ttype = child.Type;
-                if ( ttype == ANTLRParser.REWRITES )
+                if ( ttype == ANTLRParser.REWRITES || ttype == ANTLRParser.ACTION )
{
continue;
}

