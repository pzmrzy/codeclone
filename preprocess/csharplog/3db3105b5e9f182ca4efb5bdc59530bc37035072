commit 3db3105b5e9f182ca4efb5bdc59530bc37035072
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Wed Mar 30 07:39:47 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Wed Mar 30 07:39:47 2011 -0800

(C# 3) Fix token assignment order when using delegate grammars

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7977]

diff --git a/Antlr3/Tool/AssignTokenTypesBehavior.cs b/Antlr3/Tool/AssignTokenTypesBehavior.cs
index 533ffc8..4eb3498 100644
--- a/Antlr3/Tool/AssignTokenTypesBehavior.cs
+++ b/Antlr3/Tool/AssignTokenTypesBehavior.cs
@@ -55,8 +55,8 @@ namespace Antlr3.Tool
protected IDictionary<string, string> aliases = new SortedList<string, string>(StringComparer.Ordinal);
protected IDictionary<string, string> aliasesReverseIndex = new Dictionary<string, string>();

-        public AssignTokenTypesBehavior( ITreeNodeStream input )
-            : base( input )
+        public AssignTokenTypesBehavior()
+            : base(null)
{
}

diff --git a/Antlr3/Tool/CompositeGrammar.cs b/Antlr3/Tool/CompositeGrammar.cs
index 08bb045..c5b4822 100644
--- a/Antlr3/Tool/CompositeGrammar.cs
+++ b/Antlr3/Tool/CompositeGrammar.cs
@@ -388,18 +388,15 @@ namespace Antlr3.Tool
//System.Console.Out.WriteLine( "### assign types" );
//ttypesWalker.setASTNodeClass( "org.antlr.tool.GrammarAST" );
IList<Grammar> grammars = delegateGrammarTreeRoot.GetPostOrderedGrammarList();
-            for ( int i = 0; grammars != null && i < grammars.Count; i++ )
+            AssignTokenTypesWalker ttypesWalker = new AssignTokenTypesBehavior();
+            for (int i = 0; grammars != null && i < grammars.Count; i++)
{
Grammar g = (Grammar)grammars[i];
-                AssignTokenTypesWalker ttypesWalker = new AssignTokenTypesBehavior( new Antlr.Runtime.Tree.CommonTreeNodeStream( g.Tree ) );
+                ttypesWalker.SetTreeNodeStream(new Antlr.Runtime.Tree.CommonTreeNodeStream(g.Tree));
try
{
//System.Console.Out.WriteLine( "    walking " + g.name );
ttypesWalker.grammar_( g );
-
-                    // the walker has filled literals, tokens, and alias tables.
-                    // now tell it to define them in the root grammar
-                    ttypesWalker.DefineTokens( delegateGrammarTreeRoot.grammar );
}
catch ( RecognitionException re )
{
@@ -407,6 +404,10 @@ namespace Antlr3.Tool
re );
}
}
+
+            // the walker has filled literals, tokens, and alias tables.
+            // now tell it to define them in the root grammar
+            ttypesWalker.DefineTokens(delegateGrammarTreeRoot.grammar);
}

public virtual void TranslateLeftRecursiveRules()

