commit 817086c1b17d6e39dac446d4ad157effe65c3703
Author:     Sam Harwell <sam@tunnelvisionlabs.com>
AuthorDate: Tue Jan 29 17:40:14 2013 -0600
Commit:     Sam Harwell <sam@tunnelvisionlabs.com>
CommitDate: Tue Jan 29 23:01:15 2013 -0600

Categorize unit tests

diff --git a/Antlr3.Test/Antlr3.Test.csproj b/Antlr3.Test/Antlr3.Test.csproj
index 3d4d266..82dc491 100644
--- a/Antlr3.Test/Antlr3.Test.csproj
+++ b/Antlr3.Test/Antlr3.Test.csproj
@@ -47,6 +47,7 @@
<Compile Include="TestAttributes.cs" />
<Compile Include="TestAutoAST.cs" />
<Compile Include="TestBufferedTreeNodeStream.cs" />
+    <Compile Include="TestCategories.cs" />
<Compile Include="TestCharDFAConversion.cs" />
<Compile Include="TestCommonTokenStream.cs" />
<Compile Include="TestCompositeGrammars.cs" />
diff --git a/Antlr3.Test/StringTemplateTests.cs b/Antlr3.Test/StringTemplateTests.cs
index c1ad135..4930679 100644
--- a/Antlr3.Test/StringTemplateTests.cs
+++ b/Antlr3.Test/StringTemplateTests.cs
@@ -122,6 +122,7 @@ namespace AntlrUnitTests
}

[TestMethod]
+        [TestCategory(TestCategories.ST3)]
public void TestInterfaceFileFormat()
{
string groupI =
@@ -140,7 +141,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, I.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNoGroupLoader()
{
// this also tests the group loader
@@ -163,7 +164,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, errors.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestCannotFindInterfaceFile()
{
// this also tests the group loader
@@ -186,7 +187,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, errors.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMultiDirGroupLoading()
{
// this also tests the group loader
@@ -225,7 +226,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, group.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestGroupSatisfiesSingleInterface()
{
// this also tests the group loader
@@ -254,7 +255,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, errors.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestGroupExtendsSuperGroup()
{
// this also tests the group loader
@@ -285,7 +286,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, st.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestGroupExtendsSuperGroupWithAngleBrackets()
{
// this also tests the group loader
@@ -315,7 +316,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, st.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMissingInterfaceTemplate()
{
// this also tests the group loader
@@ -343,7 +344,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, errors.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMissingOptionalInterfaceTemplate()
{
// this also tests the group loader
@@ -371,7 +372,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, errors.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMismatchedInterfaceTemplate()
{
// this also tests the group loader
@@ -400,7 +401,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, errors.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestGroupFileFormat()
{
string templates =
@@ -428,7 +429,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, b.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEscapedTemplateDelimiters()
{
string templates =
@@ -457,7 +458,7 @@ namespace AntlrUnitTests
}

/** Check syntax and setAttribute-time errors */
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestTemplateParameterDecls()
{
string templates =
@@ -494,7 +495,7 @@ namespace AntlrUnitTests
a.SetAttribute( "b", "x" );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestTemplateRedef()
{
string templates =
@@ -508,7 +509,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, errors.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMissingInheritedAttribute()
{
string templates =
@@ -531,7 +532,7 @@ namespace AntlrUnitTests
t.ToString(); // should be no problem
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestFormalArgumentAssignment()
{
string templates =
@@ -546,7 +547,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestUndefinedArgumentAssignment()
{
string templates =
@@ -571,7 +572,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, error );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestFormalArgumentAssignmentInApply()
{
string templates =
@@ -587,7 +588,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestUndefinedArgumentAssignmentInApply()
{
string templates =
@@ -613,7 +614,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, error );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestUndefinedAttributeReference()
{
string templates =
@@ -637,7 +638,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, error );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestUndefinedDefaultAttributeReference()
{
string templates =
@@ -661,7 +662,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, error );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestAngleBracketsWithGroupFile()
{
string templates =
@@ -679,7 +680,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestAngleBracketsNoGroup()
{
StringTemplate st = new StringTemplate(
@@ -691,7 +692,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, st.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRegionRef()
{
string templates =
@@ -706,7 +707,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEmbeddedRegionRef()
{
string templates =
@@ -721,7 +722,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRegionRefAngleBrackets()
{
string templates =
@@ -735,7 +736,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEmbeddedRegionRefAngleBrackets()
{
string templates =
@@ -750,7 +751,7 @@ namespace AntlrUnitTests
}

// FIXME: This test fails due to inserted white space...
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEmbeddedRegionRefWithNewlinesAngleBrackets()
{
string templates =
@@ -767,7 +768,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRegionRefWithDefAngleBrackets()
{
string templates =
@@ -782,7 +783,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRegionRefWithDefInConditional()
{
string templates =
@@ -798,7 +799,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRegionRefWithImplicitDefInConditional()
{
string templates =
@@ -820,7 +821,7 @@ namespace AntlrUnitTests
Assert.AreEqual( err_expecting, err_result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRegionOverride()
{
string templates1 =
@@ -845,7 +846,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRegionOverrideRefSuperRegion()
{
string templates1 =
@@ -870,7 +871,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRegionOverrideRefSuperRegion3Levels()
{
// Bug: This was causing infinite recursion:
@@ -917,7 +918,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRegionOverrideRefSuperImplicitRegion()
{
string templates1 =
@@ -941,7 +942,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEmbeddedRegionRedefError()
{
// cannot define an embedded template within group
@@ -960,7 +961,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestImplicitRegionRedefError()
{
// cannot define an implicitly-defined template more than once
@@ -980,7 +981,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestImplicitOverriddenRegionRedefError()
{
string templates1 =
@@ -1007,7 +1008,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestUnknownRegionDefError()
{
// cannot define an implicitly-defined template more than once
@@ -1026,7 +1027,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSuperRegionRefError()
{
string templates1 =
@@ -1052,7 +1053,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMissingEndRegionError()
{
// cannot define an implicitly-defined template more than once
@@ -1072,7 +1073,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMissingEndRegionErrorAngleBrackets()
{
// cannot define an implicitly-defined template more than once
@@ -1090,7 +1091,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSimpleInheritance()
{
// make a bold template in the super group that you can inherit from sub
@@ -1107,7 +1108,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, duh.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestOverrideInheritance()
{
// make a bold template in the super group and one in sub group
@@ -1125,7 +1126,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, duh.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMultiLevelInheritance()
{
// must loop up two levels to find bold()
@@ -1145,7 +1146,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, duh.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestComplicatedInheritance()
{
// in super: decls invokes labels
@@ -1177,7 +1178,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void Test3LevelSuperRef()
{
string templates1 =
@@ -1210,7 +1211,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestExprInParens()
{
// specify a template to apply to an attribute
@@ -1227,7 +1228,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, duh.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMultipleAdditions()
{
// specify a template to apply to an attribute
@@ -1244,7 +1245,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, duh.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestCollectionAttributes()
{
StringTemplateGroup group =
@@ -1273,7 +1274,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestParenthesizedExpression()
{
StringTemplateGroup group =
@@ -1287,7 +1288,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestApplyTemplateNameExpression()
{
StringTemplateGroup group =
@@ -1302,7 +1303,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestApplyTemplateNameTemplateEval()
{
StringTemplateGroup group =
@@ -1317,7 +1318,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestTemplateNameExpression()
{
StringTemplateGroup group =
@@ -1330,7 +1331,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMissingEndDelimiter()
{
StringTemplateGroup group =
@@ -1345,7 +1346,7 @@ namespace AntlrUnitTests
Assert.IsTrue( errors.ToString().StartsWith( expectingError ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSetButNotRefd()
{
StringTemplate.LintMode = true;
@@ -1365,7 +1366,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expectingError, errors.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNullTemplateApplication()
{
StringTemplateGroup group =
@@ -1388,7 +1389,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, error );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNullTemplateToMultiValuedApplication()
{
StringTemplateGroup group =
@@ -1412,7 +1413,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, error );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestChangingAttrValueTemplateApplicationToVector()
{
StringTemplateGroup group =
@@ -1426,7 +1427,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestChangingAttrValueRepeatedTemplateApplicationToVector()
{
StringTemplateGroup group = new StringTemplateGroup( "dummy", "." );
@@ -1441,7 +1442,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, members.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestAlternatingTemplateApplication()
{
StringTemplateGroup group = new StringTemplateGroup( "dummy", "." );
@@ -1457,7 +1458,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, item.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestExpressionAsRHSOfAssignment()
{
StringTemplateGroup group =
@@ -1469,7 +1470,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestTemplateApplicationAsRHSOfAssignment()
{
StringTemplateGroup group = new StringTemplateGroup( "test" );
@@ -1481,7 +1482,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestParameterAndAttributeScoping()
{
StringTemplateGroup group =
@@ -1495,7 +1496,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestComplicatedSeparatorExpr()
{
StringTemplateGroup group =
@@ -1513,7 +1514,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestAttributeRefButtedUpAgainstEndifAndWhitespace()
{
StringTemplateGroup group =
@@ -1525,7 +1526,7 @@ namespace AntlrUnitTests
Assert.AreEqual( a.ToString(), expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestStringCatenationOnSingleValuedAttributeViaTemplateLiteral()
{
StringTemplateGroup group =
@@ -1540,7 +1541,7 @@ namespace AntlrUnitTests
Assert.AreEqual( b.ToString(), expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestStringCatenationOpOnArg()
{
StringTemplateGroup group =
@@ -1554,7 +1555,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, b.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestStringCatenationOpOnArgWithEqualsInString()
{
StringTemplateGroup group =
@@ -1568,7 +1569,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, b.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestApplyingTemplateFromDiskWithPrecompiledIF()
{
// Create a temporary working directory
@@ -1640,7 +1641,7 @@ namespace AntlrUnitTests
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMultiValuedAttributeWithAnonymousTemplateUsingIndexVariableI()
{
StringTemplateGroup tgroup =
@@ -1664,7 +1665,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestFindTemplateInCLASSPATH()
{
// Look for templates in CLASSPATH as resources
@@ -1691,7 +1692,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, m.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestApplyTemplateToSingleValuedAttribute()
{
StringTemplateGroup group = new StringTemplateGroup( "test" );
@@ -1701,7 +1702,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "<b>Terence</b>", name.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestStringLiteralAsAttribute()
{
StringTemplateGroup group = new StringTemplateGroup( "test" );
@@ -1710,7 +1711,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "<b>Terence</b>", name.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestApplyTemplateToSingleValuedAttributeWithDefaultAttribute()
{
StringTemplateGroup group = new StringTemplateGroup( "test" );
@@ -1720,7 +1721,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "<b>Terence</b>", name.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestApplyAnonymousTemplateToSingleValuedAttribute()
{
// specify a template to apply to an attribute
@@ -1731,7 +1732,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "<li>Terence</li>", item.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestApplyAnonymousTemplateToMultiValuedAttribute()
{
// specify a template to apply to an attribute
@@ -1748,7 +1749,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, list.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestApplyAnonymousTemplateToAggregateAttribute()
{
StringTemplate st = new StringTemplate( "$items:{$it.lastName$, $it.firstName$\n}$" );
@@ -1761,7 +1762,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, st.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRepeatedApplicationOfTemplateToSingleValuedAttribute()
{
StringTemplateGroup group = new StringTemplateGroup( "dummy", "." );
@@ -1771,7 +1772,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "<b><b>Jim</b></b>", item.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRepeatedApplicationOfTemplateToMultiValuedAttributeWithSeparator()
{
StringTemplateGroup group = new StringTemplateGroup( "dummy", "." );
@@ -1788,7 +1789,7 @@ namespace AntlrUnitTests

// ### NEED A TEST OF obj ASSIGNED TO ARG?

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMultiValuedAttributeWithSeparator()
{
StringTemplate query;
@@ -1806,7 +1807,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "SELECT  name, email FROM User;", query.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSingleValuedAttributes()
{
// all attributes are single-valued:
@@ -1816,7 +1817,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "SELECT name FROM User;", query.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIFTemplate()
{
StringTemplateGroup group =
@@ -1831,7 +1832,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "SELECT name FROM PERSON WHERE ID=231;", t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIFCondWithParensTemplate()
{
StringTemplateGroup group = new StringTemplateGroup( "dummy", ".", typeof( AngleBracketTemplateLexer ) );
@@ -1844,7 +1845,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "int x=0;", t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIFCondWithParensDollarDelimsTemplate()
{
StringTemplateGroup group = new StringTemplateGroup( "dummy", "." );
@@ -1858,7 +1859,7 @@ namespace AntlrUnitTests
}

/** As of 2.0, you can test a boolean value */
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIFBoolean()
{
StringTemplateGroup group =
@@ -1874,7 +1875,7 @@ namespace AntlrUnitTests
Assert.AreEqual( " y", t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNestedIFTemplate()
{
StringTemplateGroup group = new StringTemplateGroup( "dummy", ".", typeof( AngleBracketTemplateLexer ) );
@@ -1897,7 +1898,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIFConditionWithTemplateApplication()
{
StringTemplateGroup group =
@@ -1968,7 +1969,7 @@ namespace AntlrUnitTests
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestObjectPropertyReference()
{
//Assert.AreEqual(expecting, t.toString());
@@ -1990,7 +1991,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestApplyRepeatedAnonymousTemplateWithForeignTemplateRefToMultiValuedAttribute()
{
// specify a template to apply to an attribute
@@ -2041,7 +2042,7 @@ namespace AntlrUnitTests
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRecursion()
{
StringTemplateGroup group = new StringTemplateGroup( "dummy", ".", typeof( AngleBracketTemplateLexer ) );
@@ -2064,7 +2065,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, tree.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNestedAnonymousTemplates()
{
StringTemplateGroup group =
@@ -2086,7 +2087,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestAnonymousTemplateAccessToEnclosingAttributes()
{
StringTemplateGroup group =
@@ -2109,7 +2110,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNestedAnonymousTemplatesAgain()
{
StringTemplateGroup group =
@@ -2130,7 +2131,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEscapes()
{
StringTemplateGroup group =
@@ -2166,7 +2167,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, v.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEscapesOutsideExpressions()
{
StringTemplate b = new StringTemplate( "It\\'s ok...\\$; $a:{\\'hi\\', $it$}$" );
@@ -2176,7 +2177,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestElseClause()
{
StringTemplate e = new StringTemplate(
@@ -2195,7 +2196,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestElseIfClause()
{
StringTemplate e = new StringTemplate(
@@ -2210,7 +2211,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestElseIfClauseAngleBrackets()
{
StringTemplate e = new StringTemplate(
@@ -2226,7 +2227,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestElseIfClause2()
{
StringTemplate e = new StringTemplate(
@@ -2243,7 +2244,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestElseIfClauseAndElse()
{
StringTemplate e = new StringTemplate(
@@ -2261,7 +2262,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNestedIF()
{
StringTemplate e = new StringTemplate(
@@ -2289,7 +2290,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEmbeddedMultiLineIF()
{
StringTemplateGroup group =
@@ -2319,7 +2320,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, main.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSimpleIndentOfAttributeList()
{
string templates =
@@ -2343,7 +2344,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIndentOfMultilineAttributes()
{
string templates =
@@ -2372,7 +2373,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIndentOfMultipleBlankLines()
{
string templates =
@@ -2394,7 +2395,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIndentBetweenLeftJustifiedLiterals()
{
string templates =
@@ -2422,7 +2423,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNestedIndent()
{
string templates =
@@ -2516,7 +2517,7 @@ namespace AntlrUnitTests
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestAlternativeWriter()
{
StringBuilder buf = new StringBuilder();
@@ -2530,7 +2531,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "<b>Terence</b>", buf.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestApplyAnonymousTemplateToMapAndSet()
{
StringTemplate st =
@@ -2554,7 +2555,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, st.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestDumpMapAndSet()
{
StringTemplate st =
@@ -2593,7 +2594,7 @@ namespace AntlrUnitTests
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestApplyAnonymousTemplateToArrayAndMapProperty()
{
StringTemplate st =
@@ -2608,7 +2609,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, st.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSuperTemplateRef()
{
// you can refer to a template defined in a super group via super.t()
@@ -2624,7 +2625,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, st.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestApplySuperTemplateRef()
{
StringTemplateGroup group = new StringTemplateGroup( "super" );
@@ -2640,7 +2641,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, st.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLazyEvalOfSuperInApplySuperTemplateRef()
{
StringTemplateGroup group = new StringTemplateGroup( "base" );
@@ -2672,7 +2673,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expectingError, error );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestTemplatePolymorphism()
{
StringTemplateGroup group = new StringTemplateGroup( "super" );
@@ -2692,7 +2693,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, st.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestListOfEmbeddedTemplateSeesEnclosingAttributes()
{
string templates =
@@ -2717,7 +2718,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, outputST.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestInheritArgumentFromRecursiveTemplateApplication()
{
// do not inherit attributes through formal args
@@ -2738,7 +2739,7 @@ namespace AntlrUnitTests
}


-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestDeliberateRecursiveTemplateApplication()
{
// This test will cause infinite loop.  block contains a stat which
@@ -2783,7 +2784,7 @@ namespace AntlrUnitTests
}


-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestImmediateTemplateAsAttributeLoop()
{
// even though block has a stats value that refers to itself,
@@ -2804,7 +2805,7 @@ namespace AntlrUnitTests
}


-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestTemplateAlias()
{
string templates =
@@ -2821,7 +2822,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestTemplateGetPropertyGetsAttribute()
{
// This test will cause infinite loop if missing attribute no
@@ -2883,7 +2884,7 @@ namespace AntlrUnitTests
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestComplicatedIndirectTemplateApplication()
{
string templates =
@@ -2906,7 +2907,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, f.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIndirectTemplateApplication()
{
string templates =
@@ -2926,7 +2927,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, f.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIndirectTemplateWithArgsApplication()
{
string templates =
@@ -2946,7 +2947,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, f.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNullIndirectTemplateApplication()
{
string templates =
@@ -2966,7 +2967,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, f.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNullIndirectTemplate()
{
string templates =
@@ -2986,7 +2987,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, f.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestHashMapPropertyFetch()
{
StringTemplate a = new StringTemplate( "$stuff.prop$" );
@@ -2999,7 +3000,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, results );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestHashMapPropertyFetchEmbeddedStringTemplate()
{
StringTemplate a = new StringTemplate( "$stuff.prop$" );
@@ -3013,7 +3014,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, results );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEmbeddedComments()
{
StringTemplate st = new StringTemplate(
@@ -3060,7 +3061,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEmbeddedCommentsAngleBracketed()
{
StringTemplate st = new StringTemplate(
@@ -3113,7 +3114,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineBreak()
{
StringTemplate st = new StringTemplate(
@@ -3128,7 +3129,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineBreak2()
{
StringTemplate st = new StringTemplate(
@@ -3143,7 +3144,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineBreakNoWhiteSpace()
{
StringTemplate st = new StringTemplate(
@@ -3158,7 +3159,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineBreakDollar()
{
StringTemplate st = new StringTemplate(
@@ -3173,7 +3174,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineBreakDollar2()
{
StringTemplate st = new StringTemplate(
@@ -3188,7 +3189,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineBreakNoWhiteSpaceDollar()
{
StringTemplate st = new StringTemplate(
@@ -3203,7 +3204,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestCharLiterals()
{
StringTemplate st = new StringTemplate(
@@ -3233,7 +3234,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNewlineNormalizationInTemplateString()
{
StringTemplate st = new StringTemplate(
@@ -3248,7 +3249,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNewlineNormalizationInTemplateStringPC()
{
StringTemplate st = new StringTemplate(
@@ -3263,7 +3264,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNewlineNormalizationInAttribute()
{
StringTemplate st = new StringTemplate(
@@ -3279,7 +3280,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestUnicodeLiterals()
{
StringTemplate st = new StringTemplate(
@@ -3304,7 +3305,7 @@ namespace AntlrUnitTests
}


-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEmptyIteratedValueGetsSeparator()
{
StringTemplateGroup group =
@@ -3324,7 +3325,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMissingIteratedConditionalValueGetsNoSeparator()
{
StringTemplateGroup group =
@@ -3343,7 +3344,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMissingIteratedConditionalValueGetsNoSeparator2()
{
StringTemplateGroup group = new StringTemplateGroup("test");
@@ -3360,7 +3361,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMissingIteratedDoubleConditionalValueGetsNoSeparator()
{
StringTemplateGroup group = new StringTemplateGroup("test");
@@ -3377,7 +3378,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIteratedConditionalWithEmptyElseValueGetsSeparator()
{
StringTemplateGroup group =
@@ -3396,7 +3397,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestWhiteSpaceAtEndOfTemplate()
{
StringTemplateGroup group = new StringTemplateGroup( "group", System.Reflection.Assembly.GetExecutingAssembly() );
@@ -3421,7 +3422,7 @@ namespace AntlrUnitTests
public IList users = new List<object>();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSizeZeroButNonNullListGetsNoOutput()
{
StringTemplateGroup group =
@@ -3438,7 +3439,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNullListGetsNoOutput()
{
StringTemplateGroup group =
@@ -3455,7 +3456,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEmptyListGetsNoOutput()
{
StringTemplateGroup group =
@@ -3472,7 +3473,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEmptyListNoIteratorGetsNoOutput()
{
StringTemplateGroup group =
@@ -3489,7 +3490,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEmptyExprAsFirstLineGetsNoOutput()
{
StringTemplateGroup group =
@@ -3505,7 +3506,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSizeZeroOnLineByItselfGetsNoOutput()
{
StringTemplateGroup group =
@@ -3523,7 +3524,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSizeZeroOnLineWithIndentGetsNoOutput()
{
StringTemplateGroup group =
@@ -3541,7 +3542,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSimpleAutoIndent()
{
StringTemplate a = new StringTemplate(
@@ -3561,7 +3562,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, results );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestComputedPropertyName()
{
StringTemplateGroup group =
@@ -3578,7 +3579,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNonNullButEmptyIteratorTestsFalse()
{
StringTemplateGroup group =
@@ -3593,7 +3594,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestDoNotInheritAttributesThroughFormalArgs()
{
string templates =
@@ -3613,7 +3614,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestArgEvaluationContext()
{
string templates =
@@ -3636,7 +3637,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestPassThroughAttributes()
{
string templates =
@@ -3654,7 +3655,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestPassThroughAttributes2()
{
string templates =
@@ -3674,7 +3675,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestDefaultArgument()
{
string templates =
@@ -3694,7 +3695,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestDefaultArgument2()
{
string templates =
@@ -3722,7 +3723,7 @@ namespace AntlrUnitTests
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestDefaultArgumentManuallySet()
{
string templates =
@@ -3752,7 +3753,7 @@ namespace AntlrUnitTests
*  a default value. look up the value to see if it's null without
*  checking checkNullAttributeAgainstFormalArguments.
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestDefaultArgumentImplicitlySet()
{
string templates =
@@ -3771,7 +3772,9 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

+        [Ignore] // this is known to fail in the Java version as well
[TestMethod]
+        [TestCategory(TestCategories.ST3)]
public void TestDefaultArgumentImplicitlySet2()
{
string templates =
@@ -3790,7 +3793,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestDefaultArgumentAsTemplate()
{
string templates =
@@ -3811,7 +3814,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestDefaultArgumentAsTemplate2()
{
string templates =
@@ -3831,7 +3834,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestDoNotUseDefaultArgument()
{
string templates =
@@ -3859,7 +3862,7 @@ namespace AntlrUnitTests
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestDefaultArgumentInParensToEvalEarly()
{
string templates =
@@ -3877,7 +3880,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestArgumentsAsTemplates()
{
string templates =
@@ -3897,7 +3900,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestTemplateArgumentEvaluatedInSurroundingContext()
{
string templates =
@@ -3920,7 +3923,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestArgumentsAsTemplatesDefaultDelimiters()
{
string templates =
@@ -3941,7 +3944,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestDefaultArgsWhenNotInvoked()
{
string templates =
@@ -4016,7 +4019,7 @@ namespace AntlrUnitTests
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRendererForST()
{
StringTemplate st = new StringTemplate(
@@ -4030,7 +4033,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRendererWithFormat()
{
StringTemplate st = new StringTemplate(
@@ -4044,7 +4047,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRendererWithFormatAndList()
{
StringTemplate st = new StringTemplate(
@@ -4059,7 +4062,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRendererWithFormatAndSeparator()
{
StringTemplate st = new StringTemplate(
@@ -4074,7 +4077,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRendererWithFormatAndSeparatorAndNull()
{
StringTemplate st = new StringTemplate(
@@ -4091,7 +4094,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEmbeddedRendererSeesEnclosing()
{
// st is embedded in outer; set renderer on outer, st should
@@ -4111,7 +4114,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRendererForGroup()
{
string templates =
@@ -4129,7 +4132,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestOverriddenRenderer()
{
string templates =
@@ -4148,7 +4151,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMap()
{
string templates =
@@ -4166,7 +4169,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMapValuesAreTemplates()
{
string templates =
@@ -4185,7 +4188,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMapKeyLookupViaTemplate()
{
// ST doesn't do a toString on .(key) values, it just uses the value
@@ -4207,7 +4210,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMapMissingDefaultValueIsEmpty()
{
string templates =
@@ -4226,7 +4229,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMapHiddenByFormalArg()
{
string templates =
@@ -4244,7 +4247,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMapEmptyValueAndAngleBracketStrings()
{
string templates =
@@ -4262,7 +4265,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMapDefaultValue()
{
string templates =
@@ -4280,7 +4283,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMapEmptyDefaultValue()
{
string templates =
@@ -4298,7 +4301,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMapDefaultValueIsKey()
{
string templates =
@@ -4321,7 +4324,7 @@ namespace AntlrUnitTests
* <p>
* Bug ref: JIRA bug ST-15 (Fixed)
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMapDefaultStringAsKey()
{
string templates =
@@ -4344,7 +4347,7 @@ namespace AntlrUnitTests
* <p>
* Bug ref: JIRA bug ST-15 (Fixed)
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMapDefaultIsDefaultString()
{
string templates =
@@ -4360,7 +4363,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMapViaEnclosingTemplates()
{
string templates =
@@ -4379,7 +4382,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMapViaEnclosingTemplates2()
{
string templates =
@@ -4400,7 +4403,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEmptyGroupTemplate()
{
string templates =
@@ -4415,7 +4418,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEmptyStringAndEmptyAnonTemplateAsParameterUsingAngleBracketLexer()
{
string templates =
@@ -4430,7 +4433,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEmptyStringAndEmptyAnonTemplateAsParameterUsingDollarLexer()
{
string templates =
@@ -4451,7 +4454,7 @@ namespace AntlrUnitTests
*  encoding on windows. The character needs to be escaped as bellow.
*  Please correct to escape the correct charcter.
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void Test8BitEuroChars()
{
StringTemplate e = new StringTemplate(
@@ -4462,7 +4465,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void Test16BitUnicodeChar()
{
StringTemplate e = new StringTemplate(
@@ -4473,7 +4476,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestFirstOp()
{
StringTemplate e = new StringTemplate(
@@ -4487,7 +4490,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestTruncOp()
{
StringTemplate e = new StringTemplate(
@@ -4501,7 +4504,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRestOp()
{
StringTemplate e = new StringTemplate(
@@ -4515,7 +4518,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRestOpEmptyList()
{
StringTemplate e = new StringTemplate(
@@ -4527,7 +4530,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestReUseOfRestResult()
{
string templates =
@@ -4546,7 +4549,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLastOp()
{
StringTemplate e = new StringTemplate(
@@ -4560,7 +4563,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestCombinedOp()
{
// replace first of yours with first of mine
@@ -4577,7 +4580,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestCatListAndSingleAttribute()
{
// replace first of yours with first of mine
@@ -4593,7 +4596,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestReUseOfCat()
{
string templates =
@@ -4615,7 +4618,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestCatListAndEmptyAttributes()
{
// + is overloaded to be cat strings and cat lists so the
@@ -4634,7 +4637,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNestedOp()
{
StringTemplate e = new StringTemplate(
@@ -4648,7 +4651,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestFirstWithOneAttributeOp()
{
StringTemplate e = new StringTemplate(
@@ -4660,7 +4663,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLastWithOneAttributeOp()
{
StringTemplate e = new StringTemplate(
@@ -4672,7 +4675,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLastWithLengthOneListAttributeOp()
{
StringTemplate e = new StringTemplate(
@@ -4684,7 +4687,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRestWithOneAttributeOp()
{
StringTemplate e = new StringTemplate(
@@ -4696,7 +4699,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRestWithLengthOneListAttributeOp()
{
StringTemplate e = new StringTemplate(
@@ -4708,7 +4711,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRepeatedRestOp()
{
StringTemplate e = new StringTemplate(
@@ -4726,7 +4729,7 @@ namespace AntlrUnitTests
*  work if we passed in a List not an iterator.  Avoid sending in iterators
*  if you ref it twice.
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRepeatedIteratedAttrFromArg()
{
string templates =
@@ -4754,7 +4757,7 @@ namespace AntlrUnitTests
*
*  Maybe make a RestIterator like I have CatIterator.
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestRepeatedRestOpAsArg()
{
String templates =
@@ -4773,7 +4776,7 @@ namespace AntlrUnitTests
}
#endif

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIncomingLists()
{
StringTemplate e = new StringTemplate(
@@ -4786,7 +4789,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIncomingListsAreNotModified()
{
StringTemplate e = new StringTemplate(
@@ -4804,7 +4807,7 @@ namespace AntlrUnitTests
Assert.AreEqual( names.Count, 2 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIncomingListsAreNotModified2()
{
StringTemplate e = new StringTemplate(
@@ -4822,7 +4825,7 @@ namespace AntlrUnitTests
Assert.AreEqual( names.Count, 2 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIncomingArraysAreOk()
{
StringTemplate e = new StringTemplate(
@@ -4835,7 +4838,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMultipleRefsToListAttribute()
{
string templates =
@@ -4851,7 +4854,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestApplyTemplateWithSingleFormalArgs()
{
string templates =
@@ -4869,7 +4872,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestApplyTemplateWithNoFormalArgs()
{
string templates =
@@ -4888,7 +4891,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestAnonTemplateArgs()
{
StringTemplate e = new StringTemplate(
@@ -4901,7 +4904,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestAnonTemplateWithArgHasNoITArg()
{
StringTemplate e = new StringTemplate(
@@ -4923,7 +4926,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, error );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestAnonTemplateArgs2()
{
StringTemplate e = new StringTemplate(
@@ -4936,7 +4939,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestFirstWithCatAttribute()
{
StringTemplate e = new StringTemplate(
@@ -4951,7 +4954,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestFirstWithListOfMaps()
{
StringTemplate e = new StringTemplate(
@@ -4976,7 +4979,7 @@ namespace AntlrUnitTests

#if false
// this FAILS!
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestFirstWithListOfMaps2()
{
StringTemplate e = new StringTemplate(
@@ -4999,7 +5002,7 @@ namespace AntlrUnitTests
}
#endif

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestJustCat()
{
StringTemplate e = new StringTemplate(
@@ -5014,7 +5017,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestCat2Attributes()
{
StringTemplate e = new StringTemplate(
@@ -5029,7 +5032,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestCat2AttributesWithApply()
{
StringTemplate e = new StringTemplate(
@@ -5044,7 +5047,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestCat3Attributes()
{
StringTemplate e = new StringTemplate(
@@ -5061,7 +5064,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestCatWithTemplateApplicationAsElement()
{
StringTemplate e = new StringTemplate(
@@ -5076,7 +5079,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestCatWithIFAsElement()
{
StringTemplate e = new StringTemplate(
@@ -5091,7 +5094,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestCatWithNullTemplateApplicationAsElement()
{
StringTemplate e = new StringTemplate(
@@ -5104,7 +5107,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestCatWithNestedTemplateApplicationAsElement()
{
StringTemplate e = new StringTemplate(
@@ -5119,7 +5122,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestListAsTemplateArgument()
{
string templates =
@@ -5140,7 +5143,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSingleExprTemplateArgument()
{
string templates =
@@ -5158,7 +5161,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSingleExprTemplateArgumentInApply()
{
// when you specify a single arg on a template application
@@ -5181,7 +5184,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSoleFormalTemplateArgumentInMultiApply()
{
string templates =
@@ -5201,7 +5204,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSingleExprTemplateArgumentError()
{
string templates =
@@ -5220,7 +5223,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, errors.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestInvokeIndirectTemplateWithSingleFormalArgs()
{
string templates =
@@ -5239,7 +5242,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestParallelAttributeIteration()
{
StringTemplate e = new StringTemplate(
@@ -5256,7 +5259,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestParallelAttributeIterationWithNullValue()
{
StringTemplate e = new StringTemplate(
@@ -5276,7 +5279,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestParallelAttributeIterationHasI()
{
StringTemplate e = new StringTemplate(
@@ -5293,7 +5296,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestParallelAttributeIterationWithDifferentSizes()
{
StringTemplate e = new StringTemplate(
@@ -5310,7 +5313,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestParallelAttributeIterationWithSingletons()
{
StringTemplate e = new StringTemplate(
@@ -5324,7 +5327,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestParallelAttributeIterationWithMismatchArgListSizes()
{
IStringTemplateErrorListener errors = new ErrorBuffer();
@@ -5344,7 +5347,7 @@ namespace AntlrUnitTests
Assert.AreEqual( errorExpecting, errors.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestParallelAttributeIterationWithMissingArgs()
{
IStringTemplateErrorListener errors = new ErrorBuffer();
@@ -5361,7 +5364,7 @@ namespace AntlrUnitTests
Assert.AreEqual( errorExpecting, errors.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestParallelAttributeIterationWithDifferentSizesTemplateRefInsideToo()
{
string templates =
@@ -5383,7 +5386,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, p.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestAnonTemplateOnLeftOfApply()
{
StringTemplate e = new StringTemplate(
@@ -5393,7 +5396,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestOverrideThroughConditional()
{
string templates =
@@ -5428,7 +5431,7 @@ namespace AntlrUnitTests
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNonPublicPropertyAccess()
{
StringTemplate st =
@@ -5440,7 +5443,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, st.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIndexVar()
{
StringTemplateGroup group =
@@ -5458,7 +5461,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIndex0Var()
{
StringTemplateGroup group =
@@ -5476,7 +5479,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIndexVarWithMultipleExprs()
{
StringTemplateGroup group =
@@ -5496,7 +5499,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIndex0VarWithMultipleExprs()
{
StringTemplateGroup group =
@@ -5516,7 +5519,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestArgumentContext()
{
// t is referenced within foo and so will be evaluated in that
@@ -5529,7 +5532,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, main.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNoDotsInAttributeNames()
{
StringTemplateGroup group = new StringTemplateGroup( "dummy", "." );
@@ -5547,7 +5550,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, error );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNoDotsInTemplateNames()
{
IStringTemplateErrorListener errors = new ErrorBuffer();
@@ -5564,7 +5567,7 @@ namespace AntlrUnitTests
Assert.IsTrue( errors.ToString().StartsWith( expecting ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineWrap()
{
string templates =
@@ -5586,7 +5589,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, a.ToString( 40 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineWrapWithNormalizedNewlines()
{
string templates =
@@ -5614,7 +5617,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineWrapAnchored()
{
string templates =
@@ -5637,7 +5640,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, a.ToString( 40 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSubtemplatesAnchorToo()
{
String templates =
@@ -5661,7 +5664,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, a.ToString( 40 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestFortranLineWrap()
{
string templates =
@@ -5679,7 +5682,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, a.ToString( 30 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineWrapWithDiffAnchor()
{
string templates =
@@ -5701,7 +5704,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, a.ToString( 30 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineWrapEdgeCase()
{
string templates =
@@ -5719,7 +5722,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, a.ToString( 3 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineWrapLastCharIsNewline()
{
string templates =
@@ -5737,7 +5740,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, a.ToString( 3 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineWrapCharAfterWrapIsNewline()
{
string templates =
@@ -5758,7 +5761,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, a.ToString( 3 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineWrapForAnonTemplate()
{
string templates =
@@ -5776,7 +5779,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, a.ToString( 9 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineWrapForAnonTemplateAnchored()
{
string templates =
@@ -5794,7 +5797,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, a.ToString( 9 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineWrapForAnonTemplateComplicatedWrap()
{
string templates =
@@ -5817,7 +5820,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString( 9 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIndentBeyondLineWidth()
{
string templates =
@@ -5838,7 +5841,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, a.ToString( 2 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestIndentedExpr()
{
string templates =
@@ -5858,7 +5861,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, a.ToString( 6 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNestedIndentedExpr()
{
string templates =
@@ -5880,7 +5883,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, top.ToString( 6 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNestedWithIndentAndTrackStartOfExpr()
{
string templates =
@@ -5902,7 +5905,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, top.ToString( 7 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineDoesNotWrapDueToLiteral()
{
string templates =
@@ -5922,7 +5925,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, a.ToString( n ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSingleValueWrap()
{
string templates =
@@ -5940,7 +5943,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, m.ToString( 2 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLineWrapInNestedExpr()
{
string templates =
@@ -5975,7 +5978,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, top.ToString( 40 ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestBackslash()
{
StringTemplateGroup group = new StringTemplateGroup("test");
@@ -5984,7 +5987,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, t.ToString());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestBackslash2()
{
StringTemplateGroup group = new StringTemplateGroup("test");
@@ -5993,7 +5996,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, t.ToString());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEscapeEscape()
{
StringTemplateGroup group =
@@ -6005,7 +6008,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestEscapeEscapeNestedAngle()
{
StringTemplateGroup group =
@@ -6017,7 +6020,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestListOfIntArrays()
{
StringTemplateGroup group =
@@ -6037,7 +6040,7 @@ namespace AntlrUnitTests

// Test null option

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNullOptionSingleNullValue()
{
StringTemplateGroup group =
@@ -6049,7 +6052,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNullOptionHasEmptyNullValue()
{
StringTemplateGroup group =
@@ -6064,7 +6067,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNullOptionSingleNullValueInList()
{
StringTemplateGroup group =
@@ -6079,7 +6082,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNullValueInList()
{
StringTemplateGroup group =
@@ -6099,7 +6102,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNullValueInListNoNullOption()
{
StringTemplateGroup group =
@@ -6119,7 +6122,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNullValueInListWithTemplateApply()
{
StringTemplateGroup group =
@@ -6137,7 +6140,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNullValueInListWithTemplateApplyNullFirstValue()
{
StringTemplateGroup group =
@@ -6155,7 +6158,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNullSingleValueInListWithTemplateApply()
{
StringTemplateGroup group =
@@ -6170,7 +6173,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestNullSingleValueWithTemplateApply()
{
StringTemplateGroup group =
@@ -6182,7 +6185,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLengthOp()
{
StringTemplate e = new StringTemplate(
@@ -6196,7 +6199,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLengthOpWithMap()
{
StringTemplate e = new StringTemplate(
@@ -6212,7 +6215,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLengthOpWithSet()
{
StringTemplate e = new StringTemplate(
@@ -6228,7 +6231,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLengthOpNull()
{
StringTemplate e = new StringTemplate(
@@ -6240,7 +6243,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLengthOpSingleValue()
{
StringTemplate e = new StringTemplate(
@@ -6252,7 +6255,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLengthOpPrimitive()
{
StringTemplate e = new StringTemplate(
@@ -6264,7 +6267,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLengthOpOfListWithNulls()
{
StringTemplate e = new StringTemplate(
@@ -6281,7 +6284,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestStripOpOfListWithNulls()
{
StringTemplate e = new StringTemplate(
@@ -6298,7 +6301,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestStripOpOfListOfListsWithNulls()
{
StringTemplate e = new StringTemplate(
@@ -6322,7 +6325,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestStripOpOfSingleAlt()
{
StringTemplate e = new StringTemplate(
@@ -6334,7 +6337,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestStripOpOfNull()
{
StringTemplate e = new StringTemplate(
@@ -6345,7 +6348,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestReUseOfStripResult()
{
string templates =
@@ -6365,7 +6368,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLengthOpOfStrippedListWithNulls()
{
StringTemplate e = new StringTemplate(
@@ -6382,7 +6385,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestLengthOpOfStrippedListWithNullsFrontAndBack()
{
StringTemplate e = new StringTemplate(
@@ -6406,7 +6409,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMapKeys()
{
StringTemplateGroup group =
@@ -6426,7 +6429,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "float:0.0, int:0", t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMapValues()
{
StringTemplateGroup group =
@@ -6447,7 +6450,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "0.0, 0 0", t.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestMapKeysWithIntegerType()
{
// must get back an Integer from keys not a toString()'d version
@@ -6469,7 +6472,7 @@ namespace AntlrUnitTests
#if false
/** Use when super.attr name is implemented
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestArgumentContext2()
{
// t is referenced within foo and so will be evaluated in that
@@ -6492,7 +6495,7 @@ namespace AntlrUnitTests
* <p>
* Bug ref: JIRA bug ST-2
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestGroupTrailingSemiColon()
{
//try {
@@ -6516,7 +6519,7 @@ namespace AntlrUnitTests
}
#endif

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestSuperReferenceInIfClause()
{
string superGroupString =
@@ -6546,7 +6549,7 @@ namespace AntlrUnitTests
}

/** Added feature for ST-21 */
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestListLiteralWithEmptyElements()
{
StringTemplate e = new StringTemplate(
@@ -6560,7 +6563,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, e.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestTemplateApplicationAsOptionValue()
{
StringTemplate st = new StringTemplate(
@@ -6576,7 +6579,7 @@ namespace AntlrUnitTests

#region C# port tests only

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST3)]
public void TestDateTimeFormatting()
{
StringTemplate e = new StringTemplate(
diff --git a/Antlr3.Test/TestASTConstruction.cs b/Antlr3.Test/TestASTConstruction.cs
index b1fe772..b871bb1 100644
--- a/Antlr3.Test/TestASTConstruction.cs
+++ b/Antlr3.Test/TestASTConstruction.cs
@@ -45,7 +45,7 @@ namespace AntlrUnitTests
{
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestA() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -56,7 +56,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestEmptyAlt()
{
Grammar g = new Grammar(
@@ -68,7 +68,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, found);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNakeRulePlusInLexer() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -80,7 +80,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRulePlus() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -92,7 +92,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNakedRulePlus() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -104,7 +104,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleOptional() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -116,7 +116,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNakedRuleOptional() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -128,7 +128,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleStar() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -140,7 +140,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNakedRuleStar() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -152,7 +152,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCharStar() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -163,7 +163,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCharStarInLexer() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -174,7 +174,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestStringStar() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -185,7 +185,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestStringStarInLexer() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -196,7 +196,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCharPlus() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -207,7 +207,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCharPlusInLexer() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -218,7 +218,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCharOptional() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -229,7 +229,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCharOptionalInLexer() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -240,7 +240,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCharRangePlus() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -251,7 +251,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabel() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -262,7 +262,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabelOfOptional() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -273,7 +273,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabelOfClosure() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -284,7 +284,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleLabel() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -296,7 +296,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetLabel() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -307,7 +307,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSetLabel() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -318,7 +318,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSetListLabel() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -329,7 +329,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSetListLabelInLoop() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -340,7 +340,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleLabelOfPositiveClosure() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -352,7 +352,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestListLabelOfClosure() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -363,7 +363,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestListLabelOfClosure2() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -374,7 +374,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleListLabelOfPositiveClosure() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -387,7 +387,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRootTokenInStarLoop() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar Expr;\n" +
@@ -399,7 +399,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestActionInStarLoop() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar Expr;\n" +
diff --git a/Antlr3.Test/TestAttributes.cs b/Antlr3.Test/TestAttributes.cs
index 48219c8..4433c32 100644
--- a/Antlr3.Test/TestAttributes.cs
+++ b/Antlr3.Test/TestAttributes.cs
@@ -61,7 +61,7 @@ namespace AntlrUnitTests
{
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestEscapedLessThanInAction() /*throws Exception*/ {
Grammar g = new Grammar();
AntlrTool antlr = newTool();
@@ -80,7 +80,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestEscaped_InAction() /*throws Exception*/ {
string action = "int \\$n; \"\\$in string\\$\"";
string expecting = "int $n; \"$in string$\"";
@@ -102,7 +102,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestArguments() /*throws Exception*/ {
string action = "$i; $i.x; $u; $u.x";
string expecting = "i; i.x; u; u.x";
@@ -126,7 +126,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestComplicatedArgParsing() /*throws Exception*/ {
string action = "x, (*a).foo(21,33), 3.2+1, '\\n', " +
"\"a,oo\\nick\", {bl, \"fdkj\"eck}";
@@ -153,7 +153,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestBracketArgParsing() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -182,7 +182,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestStringArgParsing() /*throws Exception*/ {
string action = "34, '{', \"it's<\", '\"', \"\\\"\", 19";
string expecting = "34, '{', \"it's<\", '\"', \"\\\"\", 19";
@@ -230,7 +230,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestComplicatedSingleArgParsing() /*throws Exception*/ {
string action = "(*a).foo(21,33,\",\")";
string expecting = "(*a).foo(21,33,\",\")";
@@ -256,7 +256,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestArgWithLT() /*throws Exception*/ {
string action = "34<50";
string expecting = "34<50";
@@ -283,7 +283,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGenericsAsArgumentDefinition() /*throws Exception*/ {
string action = "$foo.get(\"ick\");";
string expecting = "foo.get(\"ick\");";
@@ -314,7 +314,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGenericsAsArgumentDefinition2() /*throws Exception*/ {
string action = "$foo.get(\"ick\"); x=3;";
string expecting = "foo.get(\"ick\"); x=3;";
@@ -354,7 +354,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGenericsAsReturnValue() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -371,7 +371,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestComplicatedArgParsingWithTranslation() /*throws Exception*/ {
string action = "x, $A.text+\"3242\", (*$A).foo(21,33), 3.2+1, '\\n', " +
"\"a,oo\\nick\", {bl, \"fdkj\"eck}";
@@ -404,7 +404,7 @@ namespace AntlrUnitTests
convert actions to strings; keep as templates.
June 9, 2006: made action translation leave templates not strings
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRefToReturnValueBeforeRefToPredefinedAttr() /*throws Exception*/ {
string action = "$x.foo";
string expecting = "(x!=null?x.foo:0)";
@@ -427,7 +427,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleLabelBeforeRefToPredefinedAttr() /*throws Exception*/ {
// As of Mar 2007, I'm removing unused labels.  Unfortunately,
// the action is not seen until code gen.  Can't see $x.text
@@ -453,7 +453,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInvalidArguments() /*throws Exception*/ {
string action = "$x";
string expecting = action;
@@ -480,7 +480,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReturnValue() /*throws Exception*/ {
string action = "$x.i";
string expecting = "x";
@@ -507,7 +507,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestActionNotMovedToSynPred()
{
String action = "$b = true;";
@@ -537,7 +537,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReturnValueWithNumber() /*throws Exception*/ {
string action = "$x.i1";
string expecting = "x";
@@ -564,7 +564,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReturnValues() /*throws Exception*/ {
string action = "$i; $i.x; $u; $u.x";
string expecting = "retval.i; retval.i.x; retval.u; retval.u.x";
@@ -589,7 +589,7 @@ namespace AntlrUnitTests
}

/* regression test for ANTLR-46 */
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReturnWithMultipleRuleRefs() /*throws Exception*/ {
string action1 = "$obj = $rule2.obj;";
string action2 = "$obj = $rule3.obj;";
@@ -629,7 +629,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInvalidReturnValues() /*throws Exception*/ {
string action = "$x";
string expecting = action;
@@ -655,7 +655,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenLabels() /*throws Exception*/ {
string action = "$id; $f; $id.text; $id.getText(); $id.dork " +
"$id.type; $id.line; $id.pos; " +
@@ -680,7 +680,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleLabels() /*throws Exception*/ {
string action = "$r.x; $r.start;\n $r.stop;\n $r.tree; $a.x; $a.stop;";
string expecting = "(r!=null?r.x:0); (r!=null?((Token)r.start):null);" + NewLine +
@@ -711,7 +711,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAmbiguRuleRef() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -728,7 +728,7 @@ namespace AntlrUnitTests
Assert.AreEqual(1, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleLabelsWithSpecialToken() /*throws Exception*/ {
string action = "$r.x; $r.start; $r.stop; $r.tree; $a.x; $a.stop;";
string expecting = "(r!=null?r.x:0); (r!=null?((MYTOKEN)r.start):null); (r!=null?((MYTOKEN)r.stop):null); (r!=null?((Object)r.tree):null); (r!=null?r.x:0); (r!=null?((MYTOKEN)r.stop):null);";
@@ -759,7 +759,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestForwardRefRuleLabels() /*throws Exception*/ {
string action = "$r.x; $r.start; $r.stop; $r.tree; $a.x; $a.tree;";
string expecting = "(r!=null?r.x:0); (r!=null?((Token)r.start):null); (r!=null?((Token)r.stop):null); (r!=null?((Object)r.tree):null); (r!=null?r.x:0); (r!=null?((Object)r.tree):null);";
@@ -788,7 +788,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInvalidRuleLabelAccessesParameter() /*throws Exception*/ {
string action = "$r.z";
string expecting = action;
@@ -817,7 +817,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInvalidRuleLabelAccessesScopeAttribute() /*throws Exception*/ {
string action = "$r.n";
string expecting = action;
@@ -847,7 +847,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInvalidRuleAttribute() /*throws Exception*/ {
string action = "$r.blort";
string expecting = action;
@@ -876,7 +876,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingRuleAttribute() /*throws Exception*/ {
string action = "$r";
string expecting = action;
@@ -905,7 +905,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingUnlabeledRuleAttribute() /*throws Exception*/ {
string action = "$a";
string expecting = action;
@@ -932,7 +932,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNonDynamicAttributeOutsideRule() /*throws Exception*/ {
string action = "[TestMethod] public void foo() { $x; }";
string expecting = action;
@@ -958,7 +958,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNonDynamicAttributeOutsideRule2() /*throws Exception*/ {
string action = "[TestMethod] public void foo() { $x.y; }";
string expecting = action;
@@ -987,7 +987,7 @@ namespace AntlrUnitTests

// D Y N A M I C A L L Y  S C O P E D  A T T R I B U T E S

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestBasicGlobalScope() /*throws Exception*/ {
string action = "$Symbols::names.add($id.text);";
string expecting = "((Symbols_scope)Symbols_stack.peek()).names.add((id!=null?id.getText():null));";
@@ -1015,7 +1015,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestUnknownGlobalScope() /*throws Exception*/ {
string action = "$Symbols::names.add($id.text);";

@@ -1042,7 +1042,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIndexedGlobalScope() /*throws Exception*/ {
string action = "$Symbols[-1]::names.add($id.text);";
string expecting =
@@ -1071,7 +1071,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void Test0IndexedGlobalScope() /*throws Exception*/ {
string action = "$Symbols[0]::names.add($id.text);";
string expecting =
@@ -1100,7 +1100,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAbsoluteIndexedGlobalScope() /*throws Exception*/ {
string action = "$Symbols[3]::names.add($id.text);";
string expecting =
@@ -1129,7 +1129,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestScopeAndAttributeWithUnderscore() /*throws Exception*/ {
string action = "$foo_bar::a_b;";
string expecting = "((foo_bar_scope)foo_bar_stack.peek()).a_b;";
@@ -1156,7 +1156,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSharedGlobalScope() /*throws Exception*/ {
string action = "$Symbols::x;";
string expecting = "((Symbols_scope)Symbols_stack.peek()).x;";
@@ -1187,7 +1187,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGlobalScopeOutsideRule() /*throws Exception*/ {
string action = "public void foo() {$Symbols::names.add('foo');}";
string expecting = "public void foo() {((Symbols_scope)Symbols_stack.peek()).names.add('foo');}";
@@ -1215,7 +1215,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleScopeOutsideRule() /*throws Exception*/ {
string action = "public void foo() {$a::name;}";
string expecting = "public void foo() {((a_scope)a_stack.peek()).name;}";
@@ -1242,7 +1242,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestBasicRuleScope() /*throws Exception*/ {
string action = "$a::n;";
string expecting = "((a_scope)a_stack.peek()).n;";
@@ -1268,7 +1268,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestUnqualifiedRuleScopeAccessInsideRule() /*throws Exception*/ {
string action = "$n;";
string expecting = action;
@@ -1296,7 +1296,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIsolatedDynamicRuleScopeRef() /*throws Exception*/ {
string action = "$a;"; // refers to stack not top of stack
string expecting = "a_stack;";
@@ -1323,7 +1323,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDynamicRuleScopeRefInSubrule() /*throws Exception*/ {
string action = "$a::n;";
string expecting = "((a_scope)a_stack.peek()).n;";
@@ -1350,7 +1350,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIsolatedGlobalScopeRef() /*throws Exception*/ {
string action = "$Symbols;";
string expecting = "Symbols_stack;";
@@ -1381,7 +1381,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleScopeFromAnotherRule() /*throws Exception*/ {
string action = "$a::n;"; // must be qualified
string expecting = "((a_scope)a_stack.peek()).n;";
@@ -1409,7 +1409,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestFullyQualifiedRefToCurrentRuleParameter() /*throws Exception*/ {
string action = "$a.i;";
string expecting = "i;";
@@ -1432,7 +1432,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestFullyQualifiedRefToCurrentRuleRetVal() /*throws Exception*/ {
string action = "$a.i;";
string expecting = "retval.i;";
@@ -1455,7 +1455,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetFullyQualifiedRefToCurrentRuleRetVal() /*throws Exception*/ {
string action = "$a.i = 1;";
string expecting = "retval.i = 1;";
@@ -1478,7 +1478,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIsolatedRefToCurrentRule() /*throws Exception*/ {
string action = "$a;";
//String expecting = "";
@@ -1503,7 +1503,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIsolatedRefToRule() /*throws Exception*/ {
string action = "$x;";

@@ -1527,7 +1527,7 @@ namespace AntlrUnitTests
}

/*  I think these have to be errors $a.x makes no sense.
-        [TestMethod] public void TestFullyQualifiedRefToLabelInCurrentRule()
+        [TestMethod][TestCategory(TestCategories.Antlr3)] public void TestFullyQualifiedRefToLabelInCurrentRule()
//throws Exception
{
String action = "$a.x;";
@@ -1556,7 +1556,7 @@ namespace AntlrUnitTests
Assert.AreEqual("unexpected errors: "+equeue, 0, equeue.errors.size());
}

-        [TestMethod] public void TestFullyQualifiedRefToListLabelInCurrentRule()
+        [TestMethod][TestCategory(TestCategories.Antlr3)] public void TestFullyQualifiedRefToListLabelInCurrentRule()
//throws Exception
{
String action = "$a.x;"; // must be qualified
@@ -1585,7 +1585,7 @@ namespace AntlrUnitTests
Assert.AreEqual("unexpected errors: "+equeue, 0, equeue.errors.size());
}
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestFullyQualifiedRefToTemplateAttributeInCurrentRule() /*throws Exception*/ {
string action = "$a.st;"; // can be qualified
string expecting = "retval.st;";
@@ -1609,7 +1609,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleRefWhenRuleHasScope() /*throws Exception*/ {
string action = "$b.start;";
string expecting = "(b1!=null?((Token)b1.start):null);";
@@ -1639,7 +1639,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDynamicScopeRefOkEvenThoughRuleRefExists() /*throws Exception*/ {
string action = "$b::n;";
string expecting = "((b_scope)b_stack.peek()).n;";
@@ -1666,7 +1666,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRefToTemplateAttributeForCurrentRule() /*throws Exception*/ {
string action = "$st=null;";
string expecting = "retval.st =null;";
@@ -1690,7 +1690,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRefToTextAttributeForCurrentRule() /*throws Exception*/ {
string action = "$text";
string expecting = "input.toString(retval.start,input.LT(-1))";
@@ -1714,7 +1714,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRefToStartAttributeForCurrentRule() /*throws Exception*/ {
string action = "$start;";
string expecting = "((Token)retval.start);";
@@ -1741,7 +1741,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenLabelFromMultipleAlts() /*throws Exception*/ {
string action = "$ID.text;"; // must be qualified
string action2 = "$INT.text;"; // must be qualified
@@ -1776,7 +1776,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleLabelFromMultipleAlts() /*throws Exception*/ {
string action = "$b.text;"; // must be qualified
string action2 = "$c.text;"; // must be qualified
@@ -1806,7 +1806,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestUnknownDynamicAttribute() /*throws Exception*/ {
string action = "$a::x";
string expecting = action;
@@ -1839,7 +1839,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestUnknownGlobalDynamicAttribute() /*throws Exception*/ {
string action = "$Symbols::x";
string expecting = action;
@@ -1872,7 +1872,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestUnqualifiedRuleScopeAttribute() /*throws Exception*/ {
string action = "$n;"; // must be qualified
string expecting = "$n;";
@@ -1905,7 +1905,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleAndTokenLabelTypeMismatch() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -1922,7 +1922,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestListAndTokenLabelTypeMismatch() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -1939,7 +1939,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestListAndRuleLabelTypeMismatch() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -1957,7 +1957,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestArgReturnValueMismatch() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -1975,7 +1975,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimplePlusEqualLabel() /*throws Exception*/ {
string action = "$ids.size();"; // must be qualified
string expecting = "list_ids.size();";
@@ -1999,7 +1999,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPlusEqualStringLabel() /*throws Exception*/ {
string action = "$ids.size();"; // must be qualified
string expecting = "list_ids.size();";
@@ -2024,7 +2024,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPlusEqualSetLabel() /*throws Exception*/ {
string action = "$ids.size();"; // must be qualified
string expecting = "list_ids.size();";
@@ -2049,7 +2049,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPlusEqualWildcardLabel() /*throws Exception*/ {
string action = "$ids.size();"; // must be qualified
string expecting = "list_ids.size();";
@@ -2074,7 +2074,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestImplicitTokenLabel() /*throws Exception*/ {
string action = "$ID; $ID.text; $ID.getText()";
string expecting = "ID1; (ID1!=null?ID1.getText():null); ID1.getText()";
@@ -2101,7 +2101,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestImplicitRuleLabel() /*throws Exception*/ {
string action = "$r.start;";
string expecting = "(r1!=null?((Token)r1.start):null);";
@@ -2128,7 +2128,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReuseExistingLabelWithImplicitRuleLabel() /*throws Exception*/ {
string action = "$r.start;";
string expecting = "(x!=null?((Token)x.start):null);";
@@ -2155,7 +2155,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReuseExistingListLabelWithImplicitRuleLabel() /*throws Exception*/ {
string action = "$r.start;";
string expecting = "(x!=null?((Token)x.start):null);";
@@ -2183,7 +2183,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReuseExistingLabelWithImplicitTokenLabel() /*throws Exception*/ {
string action = "$ID.text;";
string expecting = "(x!=null?x.getText():null);";
@@ -2208,7 +2208,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReuseExistingListLabelWithImplicitTokenLabel() /*throws Exception*/ {
string action = "$ID.text;";
string expecting = "(x!=null?x.getText():null);";
@@ -2233,7 +2233,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleLabelWithoutOutputOption() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -2257,7 +2257,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleLabelOnTwoDifferentRulesAST() /*throws Exception*/ {
//Assert.Inconclusive( "I broke this test while trying to fix return values on another test..." );
string grammar =
@@ -2273,7 +2273,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleLabelOnTwoDifferentRulesTemplate() /*throws Exception*/ {
//Assert.Inconclusive( "I broke this test while trying to fix return values on another test..." );
string grammar =
@@ -2289,7 +2289,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingArgs() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -2311,7 +2311,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestArgsWhenNoneDefined() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -2333,7 +2333,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReturnInitValue() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -2353,7 +2353,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMultipleReturnInitValue() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -2373,7 +2373,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "String s=new String(\"foo\")", parameters.ElementAt( 2 ).ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCStyleReturnInitValue() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -2393,7 +2393,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestArgsWithInitValues() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -2415,7 +2415,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestArgsOnToken() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -2437,7 +2437,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestArgsOnTokenInLexer() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -2459,7 +2459,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabelOnRuleRefInLexer() /*throws Exception*/ {
string action = "$i.text";
string expecting = "(i!=null?i.getText():null)";
@@ -2483,7 +2483,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRefToRuleRefInLexer() /*throws Exception*/ {
string action = "$ID.text";
string expecting = "(ID1!=null?ID1.getText():null)";
@@ -2507,7 +2507,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRefToRuleRefInLexerNoAttribute() /*throws Exception*/ {
string action = "$ID";
string expecting = "ID1";
@@ -2531,7 +2531,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCharLabelInLexer() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -2547,7 +2547,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCharListLabelInLexer() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -2562,7 +2562,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardCharLabelInLexer() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -2577,7 +2577,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardCharListLabelInLexer() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -2592,7 +2592,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingArgsInLexer() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -2615,7 +2615,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerRulePropertyRefs() /*throws Exception*/ {
string action = "$text $type $line $pos $channel $index $start $stop";
string expecting = "getText() _type state.tokenStartLine state.tokenStartCharPositionInLine _channel -1 state.tokenStartCharIndex (getCharIndex()-1)";
@@ -2638,7 +2638,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerLabelRefs() /*throws Exception*/ {
string action = "$a $b.text $c $d.text";
string expecting = "a (b!=null?b.getText():null) c (d!=null?d.getText():null)";
@@ -2662,7 +2662,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSettingLexerRulePropertyRefs() /*throws Exception*/ {
string action = "$text $type=1 $line=1 $pos=1 $channel=1 $index";
string expecting = "getText() _type=1 state.tokenStartLine=1 state.tokenStartCharPositionInLine=1 _channel=1 -1";
@@ -2685,7 +2685,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestArgsOnTokenInLexerRuleOfCombined() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -2719,7 +2719,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingArgsOnTokenInLexerRuleOfCombined() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -2755,7 +2755,7 @@ namespace AntlrUnitTests

// T R E E S

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenLabelTreeProperty() /*throws Exception*/ {
string action = "$id.tree;";
string expecting = "id_tree;";
@@ -2782,7 +2782,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenRefTreeProperty() /*throws Exception*/ {
string action = "$ID.tree;";
string expecting = "ID1_tree;";
@@ -2805,7 +2805,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, found);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAmbiguousTokenRef() /*throws Exception*/ {
string action = "$ID;";
//String expecting = "";
@@ -2829,7 +2829,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAmbiguousTokenRefWithProp() /*throws Exception*/ {
string action = "$ID.text;";
//String expecting = "";
@@ -2853,7 +2853,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleRefWithDynamicScope() /*throws Exception*/ {
string action = "$field::x = $field.st;";
string expecting = "((field_scope)field_stack.peek()).x = retval.st;";
@@ -2879,7 +2879,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAssignToOwnRulenameAttr() /*throws Exception*/ {
string action = "$rule.tree = null;";
string expecting = "retval.tree = null;";
@@ -2903,7 +2903,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAssignToOwnParamAttr() /*throws Exception*/ {
string action = "$rule.i = 42; $i = 23;";
string expecting = "i = 42; i = 23;";
@@ -2927,7 +2927,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIllegalAssignToOwnRulenameAttr() /*throws Exception*/ {
string action = "$rule.stop = 0;";
ErrorQueue equeue = new ErrorQueue();
@@ -2955,7 +2955,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIllegalAssignToLocalAttr() /*throws Exception*/ {
string action = "$tree = null; $st = null; $start = 0; $stop = 0; $text = 0;";
string expecting = "retval.tree = null; retval.st = null;   ";
@@ -2996,7 +2996,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIllegalAssignRuleRefAttr() /*throws Exception*/ {
string action = "$other.tree = null;";
ErrorQueue equeue = new ErrorQueue();
@@ -3027,7 +3027,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIllegalAssignTokenRefAttr() /*throws Exception*/ {
string action = "$ID.text = \"test\";";
ErrorQueue equeue = new ErrorQueue();
@@ -3057,7 +3057,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAssignToTreeNodeAttribute() /*throws Exception*/ {
//string action = "$tree.scope = localScope;";
string expecting = "((Object)retval.tree).scope = localScope;";
@@ -3085,7 +3085,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, found);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDoNotTranslateAttributeCompare() /*throws Exception*/ {
string action = "$a.line == $b.line";
string expecting = "(a!=null?a.getLine():0) == (b!=null?b.getLine():0)";
@@ -3110,7 +3110,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDoNotTranslateScopeAttributeCompare() /*throws Exception*/ {
string action = "if ($rule::foo == \"foo\" || 1) { System.out.println(\"ouch\"); }";
string expecting = "if (((rule_scope)rule_stack.peek()).foo == \"foo\" || 1) { System.out.println(\"ouch\"); }";
@@ -3160,7 +3160,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTreeRuleStopAttributeIsInvalid() /*throws Exception*/ {
string action = "$r.x; $r.start; $r.stop";
string expecting = "(r!=null?r.x:0); (r!=null?((CommonTree)r.start):null); $r.stop";
@@ -3196,7 +3196,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRefToTextAttributeForCurrentTreeRule() /*throws Exception*/ {
string action = "$text";
string expecting = "input.getTokenStream().toString(" +
@@ -3226,7 +3226,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTypeOfGuardedAttributeRefIsCorrect() /*throws Exception*/ {
string action = "int x = $b::n;";
string expecting = "int x = ((b_scope)b_stack.peek()).n;";
@@ -3253,7 +3253,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGlobalAttributeScopeInit()
{
string grammar =
@@ -3264,7 +3264,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "true" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleAttributeScopeInit()
{
string grammar =
diff --git a/Antlr3.Test/TestAutoAST.cs b/Antlr3.Test/TestAutoAST.cs
index 66b4946..5bd6fa7 100644
--- a/Antlr3.Test/TestAutoAST.cs
+++ b/Antlr3.Test/TestAutoAST.cs
@@ -39,7 +39,7 @@ namespace AntlrUnitTests
{
protected bool debug = false;

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenList() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -53,7 +53,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenListInSingleAltBlock() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -67,7 +67,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleRootAtOuterLevel() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -81,7 +81,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(abc 34)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleRootAtOuterLevelReverse() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -95,7 +95,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(abc 34)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestBang() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -109,7 +109,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc 4532" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOptionalThenRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -123,7 +123,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(b a 1)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabeledStringRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -137,7 +137,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(void foo ;)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcard() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -151,7 +151,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(void foo ;)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -165,7 +165,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(foo void ;)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardRootWithLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -179,7 +179,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(foo void ;)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardRootWithListLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -193,7 +193,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(foo void ;)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardBangWithListLabel() /*throws Exception*/
{
string grammar =
@@ -208,7 +208,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "void ;" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRootRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -222,7 +222,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(34 a c)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRootRoot2() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -236,7 +236,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(c (34 a))" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRootThenRootInLoop() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -250,7 +250,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(* (* (a 34) b 9) c)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNestedSubrule() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -264,7 +264,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "void a b ;" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInvokeRule() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -279,7 +279,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "int a" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInvokeRuleAsRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -294,7 +294,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(int a)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInvokeRuleAsRootWithLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -309,7 +309,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(int a)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInvokeRuleAsRootWithListLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -324,7 +324,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(int a)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleRootInLoop() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -338,7 +338,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(+ (+ (+ a b) c) d)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleInvocationRuleRootInLoop() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -353,7 +353,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(- (+ (+ a b) c) d)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTailRecursion() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -369,7 +369,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(exp 3 (exp 4 5))" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSet() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -383,7 +383,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -397,7 +397,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(+ abc)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetRootWithLabel() /*throws Exception*/ {
// FAILS until I rebuild the antlr.g in v3 (ROOT can't follow a block after an ID assign)
string grammar =
@@ -413,7 +413,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(+ abc)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetAsRuleRootInLoop() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -427,7 +427,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(- (+ a b) c)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSet() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -441,7 +441,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34 + 2" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSetWithLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -455,7 +455,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34 + 2" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSetWithListLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -469,7 +469,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34 + 2" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSetRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -483,7 +483,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(34 55)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSetRootWithLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -497,7 +497,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(34 55)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSetRootWithListLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -511,7 +511,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(34 55)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSetRuleRootInLoop() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -526,7 +526,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(+ (+ 3 4) 5)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenLabelReuse() /*throws Exception*/ {
// check for compilation problem due to multiple defines
string grammar =
@@ -541,7 +541,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "2nd id=b;a b" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenLabelReuse2() /*throws Exception*/ {
// check for compilation problem due to multiple defines
string grammar =
@@ -556,7 +556,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "2nd id=b;(b a)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenListLabelReuse() /*throws Exception*/ {
// check for compilation problem due to multiple defines
// make sure ids has both ID tokens
@@ -573,7 +573,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenListLabelReuse2() /*throws Exception*/ {
// check for compilation problem due to multiple defines
// make sure ids has both ID tokens
@@ -590,7 +590,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenListLabelRuleRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -604,7 +604,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenListLabelBang() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -618,7 +618,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "", found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleListLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -635,7 +635,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "2nd x=b;a b" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleListLabelRuleRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -651,7 +651,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "x=(b a);(b a)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleListLabelBang() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -667,7 +667,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "1st x=a;b" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestComplicatedMelange() /*throws Exception*/ {
// check for compilation problem
string grammar =
@@ -684,7 +684,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a b b c c d" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReturnValueWithAST() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -699,7 +699,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34" + NewLine + "abc 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetLoop() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -713,7 +713,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc 34 d" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestExtraTokenInSimpleDecl() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -729,7 +729,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(int x 1)" + NewLine, found ); // tree gets correct x and 1 tokens
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingIDInSimpleDecl() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -746,7 +746,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(int <missing ID> 1)" + NewLine, found ); // tree gets invented ID token
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingSetInSimpleDecl() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -763,7 +763,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(<error: x> x 1)" + NewLine, found ); // tree gets invented ID token
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingTokenGivesErrorNode() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -778,7 +778,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc <missing INT>" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingTokenGivesErrorNodeInInvokedRule() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -794,7 +794,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "<mismatched token: [@1,3:3='<EOF>',<-1>,1:3], resync=abc>" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestExtraTokenGivesErrorNode() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -811,7 +811,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingFirstTokenGivesErrorNode() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -826,7 +826,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "<missing ID> 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingFirstTokenGivesErrorNode2() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -846,7 +846,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "<missing ID> 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNoViableAltGivesErrorNode() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
diff --git a/Antlr3.Test/TestBufferedTreeNodeStream.cs b/Antlr3.Test/TestBufferedTreeNodeStream.cs
index c091f83..fa68070 100644
--- a/Antlr3.Test/TestBufferedTreeNodeStream.cs
+++ b/Antlr3.Test/TestBufferedTreeNodeStream.cs
@@ -55,7 +55,7 @@ namespace AntlrUnitTests
return ( (BufferedTreeNodeStream)stream ).ToTokenTypeString();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSeek()
{
// ^(101 ^(102 103 ^(106 107) ) 104 105)
diff --git a/Antlr3.Test/TestCategories.cs b/Antlr3.Test/TestCategories.cs
new file mode 100644
index 0000000..af31da6
--- /dev/null
+++ b/Antlr3.Test/TestCategories.cs
@@ -0,0 +1,10 @@
+﻿namespace AntlrUnitTests
+{
+    internal static class TestCategories
+    {
+        public const string Antlr3 = "ANTLR 3";
+        public const string ST3 = "ST3";
+
+        public const string Antlr3LeftRecursion = Antlr3 + " (Left Recursion)";
+    }
+}
diff --git a/Antlr3.Test/TestCharDFAConversion.cs b/Antlr3.Test/TestCharDFAConversion.cs
index 359042f..99d9bf0 100644
--- a/Antlr3.Test/TestCharDFAConversion.cs
+++ b/Antlr3.Test/TestCharDFAConversion.cs
@@ -53,7 +53,7 @@ namespace AntlrUnitTests

// R A N G E S  &  S E T S

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleRangeVersusChar() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -67,7 +67,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRangeWithDisjointSet() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -85,7 +85,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDisjointSetCollidingWithTwoRanges() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -103,7 +103,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDisjointSetCollidingWithTwoRangesCharsFirst() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -120,7 +120,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDisjointSetCollidingWithTwoRangesAsSeparateAlts() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -147,7 +147,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestKeywordVersusID() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -167,7 +167,7 @@ namespace AntlrUnitTests
checkDecision( g, 2, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIdenticalRules() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -190,7 +190,7 @@ namespace AntlrUnitTests

}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAdjacentNotCharLoops() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -206,7 +206,7 @@ namespace AntlrUnitTests
checkDecision( g, 3, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNonAdjacentNotCharLoops() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -222,7 +222,7 @@ namespace AntlrUnitTests
checkDecision( g, 3, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLoopsWithOptimizedOutExitBranches() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -246,7 +246,7 @@ namespace AntlrUnitTests

// N O N G R E E D Y

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNonGreedy() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -259,7 +259,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNonGreedyWildcardStar() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -270,7 +270,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNonGreedyByDefaultWildcardStar() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -281,7 +281,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNonGreedyWildcardPlus() /*throws Exception*/ {
// same DFA as nongreedy .* but code gen checks number of
// iterations at runtime
@@ -294,7 +294,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNonGreedyByDefaultWildcardPlus() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -305,7 +305,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNonGreedyByDefaultWildcardPlusWithParens() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -316,7 +316,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNonWildcardNonGreedy() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -329,7 +329,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNonWildcardEOTMakesItWorkWithoutNonGreedyOption() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -344,7 +344,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAltConflictsWithLoopThenExit() /*throws Exception*/ {
// \" predicts alt 1, but wildcard then " can predict exit also
Grammar g = new Grammar(
@@ -360,7 +360,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNonGreedyLoopThatNeverLoops() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -380,7 +380,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "[1]", u.alts.ToElementString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRecursive() /*throws Exception*/ {
// this is cool because the 3rd alt includes !(all other possibilities)
Grammar g = new Grammar(
@@ -404,7 +404,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRecursive2() /*throws Exception*/ {
// this is also cool because it resolves \\ to be ESC alt; it's just
// less efficient of a DFA
@@ -435,7 +435,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotFragmentInLexer() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar T;\n" +
@@ -448,7 +448,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSetFragmentInLexer() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar T;\n" +
@@ -461,7 +461,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotTokenInLexer() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar T;\n" +
@@ -474,7 +474,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotComplicatedSetRuleInLexer() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar T;\n" +
@@ -487,7 +487,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSetWithRuleInLexer() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar T;\n" +
@@ -503,7 +503,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetCallsRuleWithNot() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar A;\n" +
@@ -515,7 +515,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSynPredInLexer() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar T;\n" +
diff --git a/Antlr3.Test/TestCommonTokenStream.cs b/Antlr3.Test/TestCommonTokenStream.cs
index 3af9ea2..b5827b5 100644
--- a/Antlr3.Test/TestCommonTokenStream.cs
+++ b/Antlr3.Test/TestCommonTokenStream.cs
@@ -40,7 +40,7 @@ namespace AntlrUnitTests
[TestClass]
public class TestCommonTokenStream : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestFirstToken()
{
Grammar g = new Grammar(
@@ -63,7 +63,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void Test2ndToken()
{
Grammar g = new Grammar(
@@ -86,7 +86,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCompleteBuffer()
{
Grammar g = new Grammar(
@@ -119,7 +119,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCompleteBufferAfterConsuming()
{
Grammar g = new Grammar(
@@ -153,7 +153,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLookback()
{
Grammar g = new Grammar(
@@ -233,7 +233,7 @@ namespace AntlrUnitTests
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOffChannel()
{
ITokenSource lexer = // simulate input " x =34  ;\n"
diff --git a/Antlr3.Test/TestCompositeGrammars.cs b/Antlr3.Test/TestCompositeGrammars.cs
index 9e992b2..66be11c 100644
--- a/Antlr3.Test/TestCompositeGrammars.cs
+++ b/Antlr3.Test/TestCompositeGrammars.cs
@@ -44,7 +44,7 @@ namespace AntlrUnitTests
{
protected bool debug = false;

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardStillWorks() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -55,7 +55,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDelegatorInvokesDelegateRule() /*throws Exception*/ {
string slave =
"parser grammar S;\n" +
@@ -73,7 +73,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "S.a" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDelegatorInvokesDelegateRuleWithArgs() /*throws Exception*/ {
// must generate something like:
// public int a(int x) throws RecognitionException { return gS.a(x); }
@@ -94,7 +94,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "S.a1000" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDelegatorInvokesDelegateRuleWithReturnStruct() /*throws Exception*/ {
// must generate something like:
// public int a(int x) throws RecognitionException { return gS.a(x); }
@@ -115,7 +115,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "S.ab" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDelegatorAccessesDelegateMembers() /*throws Exception*/ {
string slave =
"parser grammar S;\n" +
@@ -135,7 +135,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "foo" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDelegatorInvokesFirstVersionOfDelegateRule() /*throws Exception*/ {
string slave =
"parser grammar S;\n" +
@@ -158,7 +158,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "S.a" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDelegatesSeeSameTokenType() /*throws Exception*/ {
string slave =
"parser grammar S;\n" + // A, B, C token type order
@@ -197,7 +197,7 @@ namespace AntlrUnitTests
"T.y" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDelegatesSeeSameTokenType2() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -243,7 +243,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCombinedImportsCombined() /*throws Exception*/ {
//Assert.Inconclusive( "May be failing on just my port..." );
// for now, we don't allow combined to import combined
@@ -275,7 +275,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expectedError, Regex.Replace(equeue.errors[0].ToString(), "\\-[0-9]+", ""), "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSameStringTwoNames() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -329,7 +329,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expectedError, equeue.errors[0].ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSameNameTwoStrings() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -382,7 +382,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expectedError, equeue.errors[0].ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestImportedTokenVocabIgnoredWithWarning() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -421,7 +421,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expectedError, equeue.warnings[0].ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestImportedTokenVocabWorksInRoot() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -463,7 +463,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSyntaxErrorsInImportsNotThrownOut() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -490,7 +490,7 @@ namespace AntlrUnitTests
Assert.AreEqual(5, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSyntaxErrorsInImportsNotThrownOut2() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -517,7 +517,7 @@ namespace AntlrUnitTests
Assert.AreEqual(3, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDelegatorRuleOverridesDelegate() /*throws Exception*/ {
string slave =
"parser grammar S;\n" +
@@ -535,7 +535,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "S.a" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDelegatorRuleOverridesLookaheadInDelegate() /*throws Exception*/ {
string slave =
"parser grammar JavaDecl;\n" +
@@ -563,7 +563,7 @@ namespace AntlrUnitTests

// LEXER INHERITANCE

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerDelegatorInvokesDelegateRule() /*throws Exception*/ {
string slave =
"lexer grammar S;\n" +
@@ -580,7 +580,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "S.A"+NewLine+"abc"+NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerDelegatorRuleOverridesDelegate() /*throws Exception*/ {
string slave =
"lexer grammar S;\n" +
@@ -599,7 +599,7 @@ namespace AntlrUnitTests
"ab" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerDelegatorRuleOverridesDelegateLeavingNoRules() /*throws Exception*/ {
// M.Tokens has nothing to predict tokens from S.  Should
// not include S.Tokens alt in this case?
@@ -641,7 +641,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInvalidImportMechanism() /*throws Exception*/ {
// M.Tokens has nothing to predict tokens from S.  Should
// not include S.Tokens alt in this case?
@@ -672,7 +672,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expectedError, Regex.Replace(equeue.errors[0].ToString(), "\\-[0-9]+", ""));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSyntacticPredicateRulesAreNotInherited() /*throws Exception*/ {
// if this compiles, it means that synpred1_S is defined in S.java
// but not MParser.java.  MParser has its own synpred1_M which must
@@ -697,7 +697,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "S.a1" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestKeywordVSIDGivesNoWarning() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -721,7 +721,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "S.A" + NewLine + "M.a" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWarningForUndefinedToken() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -748,7 +748,7 @@ namespace AntlrUnitTests
}

/** Make sure that M can import S that imports T. */
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void Test3LevelImport() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -795,7 +795,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, ok );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestBigTreeOfImports() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -859,7 +859,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, ok );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRulesVisibleThroughMultilevelImport() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -901,7 +901,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNestedComposite()
{
// Wasn't compiling. http://www.antlr.org/jira/browse/ANTLR-438
@@ -960,7 +960,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, ok);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestHeadersPropogatedCorrectlyToImportedGrammars()
{
string slave =
diff --git a/Antlr3.Test/TestDFAConversion.cs b/Antlr3.Test/TestDFAConversion.cs
index c667e9a..cea61f5 100644
--- a/Antlr3.Test/TestDFAConversion.cs
+++ b/Antlr3.Test/TestDFAConversion.cs
@@ -52,7 +52,7 @@ namespace AntlrUnitTests
public class TestDFAConversion : BaseTest
{

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestA() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -63,7 +63,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAB_or_AC() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -75,7 +75,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAB_or_AC_k2() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -88,7 +88,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAB_or_AC_k1() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -105,7 +105,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestselfRecurseNonDet() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -115,7 +115,7 @@ namespace AntlrUnitTests
assertNonLLStar( g, altsWithRecursion );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRecursionOverflow() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -126,7 +126,7 @@ namespace AntlrUnitTests
assertRecursionOverflow( g, expectedTargetRules, expectedAlt );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRecursionOverflow2() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -137,7 +137,7 @@ namespace AntlrUnitTests
assertRecursionOverflow( g, expectedTargetRules, expectedAlt );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRecursionOverflowWithPredOk() /*throws Exception*/ {
// overflows with k=*, but resolves with pred
// no warnings/errors
@@ -167,7 +167,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRecursionOverflowWithPredOk2() /*throws Exception*/ {
// must predict Z w/o predicate
Grammar g = new Grammar(
@@ -197,7 +197,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCannotSeePastRecursion() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -211,7 +211,7 @@ namespace AntlrUnitTests
assertNonLLStar( g, altsWithRecursion );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSynPredResolvesRecursion() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -237,7 +237,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSynPredMissingInMiddle()
{
Grammar g = new Grammar(
@@ -260,7 +260,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktrackAndPredMissingInMiddle()
{
Grammar g = new Grammar(
@@ -284,7 +284,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSemPredResolvesRecursion() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -310,7 +310,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSemPredResolvesRecursion2() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -338,7 +338,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSemPredResolvesRecursion3() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -370,7 +370,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSynPredResolvesRecursion2() /*throws Exception*/ {
// k=* fails and it retries/succeeds with k=1 silently
// because of predicate
@@ -404,7 +404,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSynPredResolvesRecursion3() /*throws Exception*/ {
// No errors with k=1; don't try k=* first
Grammar g = new Grammar(
@@ -438,7 +438,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSynPredResolvesRecursion4() /*throws Exception*/ {
// No errors with k=2; don't try k=* first
// Should be ok like k=1 'except bigger DFA
@@ -474,7 +474,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSynPredResolvesRecursionInLexer() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -501,7 +501,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktrackResolvesRecursionInLexer() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -529,7 +529,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktrackResolvesRecursion() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -556,7 +556,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestselfRecurseNonDet2() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -576,7 +576,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIndirectRecursionLoop() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -610,7 +610,7 @@ namespace AntlrUnitTests
Assert.IsTrue( expecting.SequenceEqual( ruleNames2( result ) ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIndirectRecursionLoop2() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -646,7 +646,7 @@ namespace AntlrUnitTests
Assert.IsTrue( expecting.SequenceEqual( ruleNames2( result ) ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIndirectRecursionLoop3() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -678,7 +678,7 @@ namespace AntlrUnitTests
Assert.IsTrue( expecting.SequenceEqual( ruleNames2( result ) ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestifThenElse() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -700,7 +700,7 @@ namespace AntlrUnitTests
checkDecision( g, 2, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestifThenElseChecksStackSuffixConflict() /*throws Exception*/ {
// if you don't check stack soon enough, this finds E B not just E
// as ambig input
@@ -725,7 +725,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInvokeRule() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -743,7 +743,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDoubleInvokeRuleLeftEdge() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -769,7 +769,7 @@ namespace AntlrUnitTests
checkDecision( g, 2, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestimmediateTailRecursion() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -782,7 +782,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAStar_immediateTailRecursion() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -800,7 +800,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNoStartRule() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -818,7 +818,7 @@ namespace AntlrUnitTests
Assert.IsTrue(msg is GrammarSemanticsMessage, "expecting no start rules; found " + msg.GetType().Name);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAStar_immediateTailRecursion2() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -837,7 +837,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestimmediateLeftRecursion() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -850,7 +850,7 @@ namespace AntlrUnitTests
Assert.IsTrue( expectedRules.SequenceEqual( ruleNames( leftRecursive ) ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIndirectLeftRecursion() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -867,7 +867,7 @@ namespace AntlrUnitTests
Assert.IsTrue( expectedRules.SequenceEqual( ruleNames( leftRecursive ) ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLeftRecursionInMultipleCycles() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -889,7 +889,7 @@ namespace AntlrUnitTests
Assert.IsTrue( expectedRules.SequenceEqual( ruleNames( leftRecursive ) ) );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCycleInsideRuleDoesNotForceInfiniteRecursion() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -904,7 +904,7 @@ namespace AntlrUnitTests

// L O O P S

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAStar() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -915,7 +915,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAorBorCStar() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -926,7 +926,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAPlus() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -937,7 +937,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 ); // loopback decision
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAPlusNonGreedyWhenDeterministic() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -949,7 +949,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAPlusNonGreedyWhenNonDeterministic() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -966,7 +966,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAPlusGreedyWhenNonDeterministic() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -984,7 +984,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAorBorCPlus() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -995,7 +995,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAOptional() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1006,7 +1006,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 ); // loopback decision
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAorBorCOptional() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1019,7 +1019,7 @@ namespace AntlrUnitTests

// A R B I T R A R Y  L O O K A H E A D

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAStarBOrAStarC() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1042,7 +1042,7 @@ namespace AntlrUnitTests
checkDecision( g, 3, expecting, null, null, null, null, 0 ); // rule block
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAStarBOrAPlusC() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1065,7 +1065,7 @@ namespace AntlrUnitTests
}


-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAOrBPlusOrAPlus() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1087,7 +1087,7 @@ namespace AntlrUnitTests
checkDecision( g, 3, expecting, null, null, null, null, 0 ); // rule
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLoopbackAndExit() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1100,7 +1100,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOptionalAltAndBypass() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1115,7 +1115,7 @@ namespace AntlrUnitTests

// R E S O L V E  S Y N  C O N F L I C T S

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestResolveLL1ByChoosingFirst() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1132,7 +1132,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestResolveLL2ByChoosingFirst() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1149,7 +1149,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestResolveLL2MixAlt() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1168,7 +1168,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIndirectIFThenElseStyleAmbig() /*throws Exception*/ {
//Assert.Inconclusive( "May be failing on just my port..." );
// the (c)+ loopback is ambig because it could match "CASE"
@@ -1199,7 +1199,7 @@ namespace AntlrUnitTests

// S E T S

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestComplement() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1211,7 +1211,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestComplementToken() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1223,7 +1223,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestComplementChar() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -1234,7 +1234,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestComplementCharSet() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -1246,7 +1246,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNoSetCollapseWithActions() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1257,7 +1257,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleAltsSetCollapse() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1268,7 +1268,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, g.Tree.ToStringTree() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokensRuleAltsDoNotCollapse() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -1281,7 +1281,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, 0 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMultipleSequenceCollision() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1315,7 +1315,7 @@ namespace AntlrUnitTests
*/
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMultipleAltsSameSequenceCollision() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1339,7 +1339,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestFollowReturnsToLoopReenteringSameRule() /*throws Exception*/ {
//Assert.Inconclusive( "May be failing on just my port..." );
// D07 can be matched in the (...)? or fall out of esc back into (..)*
@@ -1363,7 +1363,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenCallsAnotherOnLeftEdge() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -1380,7 +1380,7 @@ namespace AntlrUnitTests
}


-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSelfRecursionAmbigAlts() /*throws Exception*/ {
// ambiguous grammar for "L ID R" (alts 1,2 of a)
Grammar g = new Grammar(
@@ -1408,7 +1408,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIndirectRecursionAmbigAlts() /*throws Exception*/ {
// ambiguous grammar for "L ID R" (alts 1,2 of a)
// This was derived from the java grammar 12/4/2004 when it
@@ -1443,7 +1443,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTailRecursionInvokedFromArbitraryLookaheadDecision() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1458,7 +1458,7 @@ namespace AntlrUnitTests
assertNonLLStar( g, altsWithRecursion );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardStarK1AndNonGreedyByDefaultInParser() /*throws Exception*/ {
// no error because .* assumes it should finish when it sees R
Grammar g = new Grammar(
@@ -1477,7 +1477,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardPlusK1AndNonGreedyByDefaultInParser() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1495,7 +1495,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGatedSynPred() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1519,7 +1519,7 @@ namespace AntlrUnitTests
Assert.IsTrue(expectedPreds.SequenceEqual(preds), "predicate names not recorded properly in grammar");
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestHoistedGatedSynPred()
{
Grammar g = new Grammar(
@@ -1544,7 +1544,7 @@ namespace AntlrUnitTests
Assert.IsTrue(expectedPreds.SetEquals(preds), "predicate names not recorded properly in grammar");
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestHoistedGatedSynPred2()
{
Grammar g = new Grammar(
@@ -1571,7 +1571,7 @@ namespace AntlrUnitTests
Assert.IsTrue(expectedPreds.SequenceEqual(preds), "predicate names not recorded properly in grammar");
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGreedyGetsNoErrorForAmbig()
{
Grammar g = new Grammar(
@@ -1594,7 +1594,7 @@ namespace AntlrUnitTests
checkDecision(g, 2, expecting, null, null, null, null, 0);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGreedyNonLLStarStillGetsError()
{
Grammar g = new Grammar(
@@ -1611,7 +1611,7 @@ namespace AntlrUnitTests
assertNonLLStar(g, altsWithRecursion);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGreedyRecOverflowStillGetsError()
{
Grammar g = new Grammar(
@@ -1625,7 +1625,7 @@ namespace AntlrUnitTests

// Check state table creation

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCyclicTableCreation() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -1689,7 +1689,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expectedAlt, msg.alt, "mismatched alt");
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardInTreeGrammar() /*throws Exception*/
{
Grammar g = new Grammar(
@@ -1708,7 +1708,7 @@ namespace AntlrUnitTests
nonDetAlts, ambigInput, danglingAlts, numWarnings );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardInTreeGrammar2() /*throws Exception*/
{
Grammar g = new Grammar(
diff --git a/Antlr3.Test/TestDFAMatching.cs b/Antlr3.Test/TestDFAMatching.cs
index be4158a..b911c0f 100644
--- a/Antlr3.Test/TestDFAMatching.cs
+++ b/Antlr3.Test/TestDFAMatching.cs
@@ -48,7 +48,7 @@ namespace AntlrUnitTests
{
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleAltCharTest() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -62,7 +62,7 @@ namespace AntlrUnitTests
checkPrediction( dfa, "d", NFA.INVALID_ALT_NUMBER );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSets() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -77,7 +77,7 @@ namespace AntlrUnitTests
checkPrediction( dfa, "9", 3 );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestFiniteCommonLeftPrefixes() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -91,7 +91,7 @@ namespace AntlrUnitTests
checkPrediction( dfa, "q", NFA.INVALID_ALT_NUMBER );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleLoops() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
diff --git a/Antlr3.Test/TestFastQueue.cs b/Antlr3.Test/TestFastQueue.cs
index 429441a..73f9c74 100644
--- a/Antlr3.Test/TestFastQueue.cs
+++ b/Antlr3.Test/TestFastQueue.cs
@@ -42,7 +42,7 @@ namespace AntlrUnitTests
[TestClass]
public class TestFastQueue
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestQueueNoRemove()
{
FastQueue<string> q = new FastQueue<string>();
@@ -56,7 +56,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestQueueThenRemoveAll()
{
FastQueue<string> q = new FastQueue<string>();
@@ -79,7 +79,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestQueueThenRemoveOneByOne()
{
StringBuilder buf = new StringBuilder();
@@ -102,7 +102,7 @@ namespace AntlrUnitTests

// E r r o r s

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
[ExpectedException(typeof(InvalidOperationException))]
public void TestGetFromEmptyQueue()
{
@@ -110,7 +110,7 @@ namespace AntlrUnitTests
q.Dequeue();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
[ExpectedException(typeof(InvalidOperationException))]
public void TestGetFromEmptyQueueAfterSomeAdds()
{
@@ -122,7 +122,7 @@ namespace AntlrUnitTests
q.Dequeue();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
[ExpectedException(typeof(InvalidOperationException))]
public void TestGetFromEmptyQueueAfterClear()
{
diff --git a/Antlr3.Test/TestHeteroAST.cs b/Antlr3.Test/TestHeteroAST.cs
index 4d43896..cc39823 100644
--- a/Antlr3.Test/TestHeteroAST.cs
+++ b/Antlr3.Test/TestHeteroAST.cs
@@ -42,7 +42,7 @@ namespace AntlrUnitTests

// PARSERS -- AUTO AST

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestToken() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -60,7 +60,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a<V>" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenCommonTree()
{
string grammar =
@@ -74,7 +74,7 @@ namespace AntlrUnitTests
Assert.AreEqual("a" + NewLine, found);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenWithQualifiedType() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -92,7 +92,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a<V>" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenWithLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -110,7 +110,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a<V>" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenWithListLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -128,7 +128,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a<V>" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -146,7 +146,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a<V>" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenRootWithListLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -164,7 +164,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a<V>" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestString() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -182,7 +182,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "begin<V>" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestStringRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -202,7 +202,7 @@ namespace AntlrUnitTests

// PARSERS -- REWRITE AST

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteToken() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -220,7 +220,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a<V>" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteTokenWithArgs() /*throws Exception*/ {
// arg to ID<V>[42,19,30] means you're constructing node not associated with ID
// so must pass in token manually
@@ -243,7 +243,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "<V>;421930 a<V>;9900" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteTokenRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -262,7 +262,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(a<V> 2)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteString() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -280,7 +280,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "begin<V>" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteStringRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -299,7 +299,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(begin<V> 2)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteRuleResults() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -325,7 +325,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(LIST<W> a<V> b<V> c<V>)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCopySemanticsWithHetero() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -350,7 +350,7 @@ namespace AntlrUnitTests

// TREE PARSERS -- REWRITE AST

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTreeParserRewriteFlatList() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -381,7 +381,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34<V> abc<W>" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTreeParserRewriteTree() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -412,7 +412,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(34<V> abc<W>)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTreeParserRewriteImaginary() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -440,7 +440,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "ROOT<V> abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTreeParserRewriteImaginaryWithArgs() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -469,7 +469,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "ROOT<V>;42 abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTreeParserRewriteImaginaryRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -497,7 +497,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(ROOT<V> abc)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTreeParserRewriteImaginaryFromReal() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -526,7 +526,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "ROOT<V>@1" + NewLine, found ); // at line 1; shows copy of ID's stuff
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTreeParserAutoHeteroAST() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
diff --git a/Antlr3.Test/TestInterpretedLexing.cs b/Antlr3.Test/TestInterpretedLexing.cs
index 8bb2379..711f1ee 100644
--- a/Antlr3.Test/TestInterpretedLexing.cs
+++ b/Antlr3.Test/TestInterpretedLexing.cs
@@ -82,7 +82,7 @@ namespace AntlrUnitTests
{
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleAltCharTest() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -97,7 +97,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result.Type, Atype );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleRuleRef() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -109,7 +109,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result.Type, Atype );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleLoop() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -124,7 +124,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result.Type, INTtype );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMultAltLoop() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -152,7 +152,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result.Type, Atype );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleLoops() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -164,7 +164,7 @@ namespace AntlrUnitTests
Assert.AreEqual( Atype, result.Type );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokensRules() /*throws Exception*/ {
Grammar pg = new Grammar(
"parser grammar p;\n" +
diff --git a/Antlr3.Test/TestInterpretedParsing.cs b/Antlr3.Test/TestInterpretedParsing.cs
index cfe3c13..ffcd8fe 100644
--- a/Antlr3.Test/TestInterpretedParsing.cs
+++ b/Antlr3.Test/TestInterpretedParsing.cs
@@ -42,7 +42,7 @@ namespace AntlrUnitTests
[TestClass]
public class TestInterpretedParsing : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleParse()
{
Grammar pg = new Grammar(
@@ -79,7 +79,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMismatchedTokenError()
{
Assert.Inconclusive("May be failing on just my port...");
@@ -117,7 +117,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMismatchedSetError()
{
Assert.Inconclusive("May be failing on just my port...");
@@ -155,7 +155,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNoViableAltError()
{
Assert.Inconclusive("May be failing on just my port...");
diff --git a/Antlr3.Test/TestIntervalSet.cs b/Antlr3.Test/TestIntervalSet.cs
index 0795590..ae11060 100644
--- a/Antlr3.Test/TestIntervalSet.cs
+++ b/Antlr3.Test/TestIntervalSet.cs
@@ -51,14 +51,14 @@ namespace AntlrUnitTests
{
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleElement() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 99 );
string expecting = "99";
Assert.AreEqual( s.ToString(), expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIsolatedElements() /*throws Exception*/ {
IntervalSet s = new IntervalSet();
s.Add( 1 );
@@ -68,7 +68,7 @@ namespace AntlrUnitTests
Assert.AreEqual( s.ToString(), expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMixedRangesAndElements() /*throws Exception*/ {
IntervalSet s = new IntervalSet();
s.Add( 1 );
@@ -78,7 +78,7 @@ namespace AntlrUnitTests
Assert.AreEqual( s.ToString(), expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleAnd() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 10, 20 );
IntervalSet s2 = IntervalSet.Of( 13, 15 );
@@ -87,7 +87,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRangeAndIsolatedElement() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 'a', 'z' );
IntervalSet s2 = IntervalSet.Of( 'd' );
@@ -96,7 +96,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestEmptyIntersection() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 'a', 'z' );
IntervalSet s2 = IntervalSet.Of( '0', '9' );
@@ -105,7 +105,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestEmptyIntersectionSingleElements() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 'a' );
IntervalSet s2 = IntervalSet.Of( 'd' );
@@ -115,7 +115,7 @@ namespace AntlrUnitTests
}

#if false
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSingleElement() /*throws Exception*/ {
IntervalSet vocabulary = IntervalSet.Of( 1, 1000 );
vocabulary.Add( 2000, 3000 );
@@ -125,7 +125,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSet() /*throws Exception*/ {
IntervalSet vocabulary = IntervalSet.Of( 1, 1000 );
IntervalSet s = IntervalSet.Of( 50, 60 );
@@ -136,7 +136,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotEqualSet() /*throws Exception*/ {
IntervalSet vocabulary = IntervalSet.Of( 1, 1000 );
IntervalSet s = IntervalSet.Of( 1, 1000 );
@@ -145,7 +145,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSetEdgeElement() /*throws Exception*/ {
IntervalSet vocabulary = IntervalSet.Of( 1, 2 );
IntervalSet s = IntervalSet.Of( 1 );
@@ -154,7 +154,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSetFragmentedVocabulary() /*throws Exception*/ {
IntervalSet vocabulary = IntervalSet.Of( 1, 255 );
vocabulary.Add( 1000, 2000 );
@@ -169,7 +169,7 @@ namespace AntlrUnitTests
}
#endif

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSubtractOfCompletelyContainedRange() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 10, 20 );
IntervalSet s2 = IntervalSet.Of( 12, 15 );
@@ -178,7 +178,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSubtractOfOverlappingRangeFromLeft() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 10, 20 );
IntervalSet s2 = IntervalSet.Of( 5, 11 );
@@ -192,7 +192,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSubtractOfOverlappingRangeFromRight() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 10, 20 );
IntervalSet s2 = IntervalSet.Of( 15, 25 );
@@ -206,7 +206,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSubtractOfCompletelyCoveredRange() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 10, 20 );
IntervalSet s2 = IntervalSet.Of( 1, 25 );
@@ -215,7 +215,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSubtractOfRangeSpanningMultipleRanges() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 10, 20 );
s.Add( 30, 40 );
@@ -234,7 +234,7 @@ namespace AntlrUnitTests
/** The following was broken:
{0..113, 115..65534}-{0..115, 117..65534}=116..65534
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSubtractOfWackyRange() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 0, 113 );
s.Add( 115, 200 );
@@ -245,7 +245,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleEquals() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 10, 20 );
IntervalSet s2 = IntervalSet.Of( 10, 20 );
@@ -259,7 +259,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestEquals() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 10, 20 );
s.Add( 2 );
@@ -278,7 +278,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleElementMinusDisjointSet() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 15, 15 );
IntervalSet s2 = IntervalSet.Of( 1, 5 );
@@ -288,7 +288,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMembership() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 15, 15 );
s.Add( 50, 60 );
@@ -302,7 +302,7 @@ namespace AntlrUnitTests
}

// {2,15,18} & 10..20
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIntersectionWithTwoContainedElements() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 10, 20 );
IntervalSet s2 = IntervalSet.Of( 2, 2 );
@@ -313,7 +313,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIntersectionWithTwoContainedElementsReversed() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 10, 20 );
IntervalSet s2 = IntervalSet.Of( 2, 2 );
@@ -324,7 +324,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestComplement() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 100, 100 );
s.Add( 101, 101 );
@@ -334,7 +334,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestComplement2() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 100, 101 );
Interval s2 = Interval.FromBounds( 100, 102 );
@@ -343,7 +343,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestComplement3() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 1, 96 );
s.Add( 99, Label.MAX_CHAR_VALUE );
@@ -352,7 +352,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMergeOfRangesAndSingleValues() /*throws Exception*/ {
// {0..41, 42, 43..65534}
IntervalSet s = IntervalSet.Of( 0, 41 );
@@ -363,7 +363,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMergeOfRangesAndSingleValuesReverse() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 43, 65534 );
s.Add( 42 );
@@ -373,7 +373,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMergeWhereAdditionMergesTwoExistingIntervals() /*throws Exception*/ {
// 42, 10, {0..9, 11..41, 43..65534}
IntervalSet s = IntervalSet.Of( 42 );
@@ -386,7 +386,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMergeWithDoubleOverlap() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 1, 10 );
s.Add( 20, 30 );
@@ -396,7 +396,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSize() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 20, 30 );
s.Add( 50, 55 );
@@ -406,7 +406,7 @@ namespace AntlrUnitTests
Assert.AreEqual( result, expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestToList() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 20, 25 );
s.Add( 50, 55 );
@@ -424,7 +424,7 @@ namespace AntlrUnitTests
'q' is 113 ascii
'u' is 117
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotRIntersectionNotT() /*throws Exception*/ {
IntervalSet s = IntervalSet.Of( 0, 's' );
s.Add( 'u', 200 );
diff --git a/Antlr3.Test/TestJavaCodeGeneration.cs b/Antlr3.Test/TestJavaCodeGeneration.cs
index 3740c71..b1213f0 100644
--- a/Antlr3.Test/TestJavaCodeGeneration.cs
+++ b/Antlr3.Test/TestJavaCodeGeneration.cs
@@ -41,7 +41,7 @@ namespace AntlrUnitTests
[TestClass]
public class TestJavaCodeGeneration : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDupVarDefForPinchedState()
{
// so->s2 and s0->s3->s1 pinches back to s1
@@ -59,7 +59,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabeledNotSetsInLexer()
{
// d must be an int
@@ -74,7 +74,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabeledSetsInLexer()
{
// d must be an int
@@ -88,7 +88,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "x" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabeledRangeInLexer()
{
// d must be an int
@@ -102,7 +102,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "x" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabeledWildcardInLexer()
{
// d must be an int
@@ -116,7 +116,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "x" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSynpredWithPlusLoop()
{
string grammar =
@@ -129,7 +129,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDoubleQuoteEscape()
{
string grammar =
@@ -146,7 +146,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestUserExceptionInParser()
{
string grammar =
@@ -159,7 +159,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestBlankRuleGetsNoException()
{
string grammar =
@@ -179,7 +179,7 @@ namespace AntlrUnitTests
* compiling grammar with backtracking.
* https://github.com/antlr/antlr3/issues/20
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSemanticPredicateAnalysisStackOverflow()
{
string grammar =
diff --git a/Antlr3.Test/TestLeftRecursion.cs b/Antlr3.Test/TestLeftRecursion.cs
index 02186b1..b6ab918 100644
--- a/Antlr3.Test/TestLeftRecursion.cs
+++ b/Antlr3.Test/TestLeftRecursion.cs
@@ -41,7 +41,7 @@ namespace AntlrUnitTests
{
protected bool debug = false;

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimple()
{
string grammar =
@@ -58,7 +58,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, found);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTernaryExpr()
{
string grammar =
@@ -88,7 +88,7 @@ namespace AntlrUnitTests
RunTests(grammar, tests, "e");
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDeclarationsUsingASTOperators()
{
string grammar =
@@ -123,7 +123,7 @@ namespace AntlrUnitTests
RunTests(grammar, tests, "declarator");
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDeclarationsUsingRewriteOperators()
{
string grammar =
@@ -158,7 +158,7 @@ namespace AntlrUnitTests
RunTests(grammar, tests, "declarator");
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestExpressionsUsingASTOperators()
{
string grammar =
@@ -194,7 +194,7 @@ namespace AntlrUnitTests
RunTests(grammar, tests, "e");
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestExpressionsUsingRewriteOperators()
{
string grammar =
@@ -230,7 +230,7 @@ namespace AntlrUnitTests
RunTests(grammar, tests, "e");
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestExpressionAssociativity()
{
string grammar =
@@ -272,7 +272,7 @@ namespace AntlrUnitTests
RunTests(grammar, tests, "e");
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestJavaExpressions()
{
// Generates about 7k in bytecodes for generated e_ rule;
diff --git a/Antlr3.Test/TestLexer.cs b/Antlr3.Test/TestLexer.cs
index 6536cfc..f637487 100644
--- a/Antlr3.Test/TestLexer.cs
+++ b/Antlr3.Test/TestLexer.cs
@@ -50,7 +50,7 @@ namespace AntlrUnitTests
{
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetText() /*throws Exception*/ {
// this must return A not I to the parser; calling a nonfragment rule
// from a nonfragment rule does not set the overall token.
@@ -64,7 +64,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "\t" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRefToRuleDoesNotSetTokenNorEmitAnother() /*throws Exception*/ {
// this must return A not I to the parser; calling a nonfragment rule
// from a nonfragment rule does not set the overall token.
@@ -79,7 +79,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "-34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRefToRuleDoesNotSetChannel() /*throws Exception*/ {
// this must set channel of A to HIDDEN.  $channel is local to rule
// like $type.
@@ -94,7 +94,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "- 34, channel=0" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWeCanSetType() /*throws Exception*/ {
string grammar =
"grammar P;\n" +
@@ -108,7 +108,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "-34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRefToFragment() /*throws Exception*/ {
// this must return A not I to the parser; calling a nonfragment rule
// from a nonfragment rule does not set the overall token.
@@ -123,7 +123,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "-34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMultipleRefToFragment() /*throws Exception*/ {
// this must return A not I to the parser; calling a nonfragment rule
// from a nonfragment rule does not set the overall token.
@@ -138,7 +138,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "3.14159" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabelInSubrule() /*throws Exception*/ {
// can we see v outside?
string grammar =
@@ -152,7 +152,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "342" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRefToTokenInLexer() /*throws Exception*/ {
string grammar =
"grammar P;\n" +
@@ -165,7 +165,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "342" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestListLabelInLexer() /*throws Exception*/ {
string grammar =
"grammar P;\n" +
@@ -178,7 +178,7 @@ namespace AntlrUnitTests
Assert.AreEqual( " 33 297" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDupListRefInLexer() /*throws Exception*/ {
string grammar =
"grammar P;\n" +
@@ -191,7 +191,7 @@ namespace AntlrUnitTests
Assert.AreEqual( " 33 297" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCharLabelInLexer()
{
string grammar =
@@ -203,7 +203,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRepeatedLabelInLexer()
{
string grammar =
@@ -216,7 +216,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRepeatedRuleLabelInLexer()
{
string grammar =
@@ -230,7 +230,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIsolatedEOTEdge()
{
string grammar =
@@ -244,7 +244,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestEscapedLiterals()
{
/* Grammar:
@@ -262,7 +262,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNewlineLiterals() /*throws Exception*/
{
Grammar g = new Grammar(
diff --git a/Antlr3.Test/TestLookaheadStream.cs b/Antlr3.Test/TestLookaheadStream.cs
index 86b52b4..70f3e47 100644
--- a/Antlr3.Test/TestLookaheadStream.cs
+++ b/Antlr3.Test/TestLookaheadStream.cs
@@ -39,7 +39,7 @@ namespace AntlrUnitTests
[TestClass]
public class TestLookaheadStream
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSeek()
{
UnbufferedTokenStream stream = new UnbufferedTokenStream(new TokenSource());
diff --git a/Antlr3.Test/TestMessages.cs b/Antlr3.Test/TestMessages.cs
index 1c72b2d..7248281 100644
--- a/Antlr3.Test/TestMessages.cs
+++ b/Antlr3.Test/TestMessages.cs
@@ -50,7 +50,7 @@ namespace AntlrUnitTests
{
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMessageStringificationIsConsistent() /*throws Exception*/
{
string action = "$other.tree = null;";
diff --git a/Antlr3.Test/TestNFAConstruction.cs b/Antlr3.Test/TestNFAConstruction.cs
index 3119a7a..b1fbf1c 100644
--- a/Antlr3.Test/TestNFAConstruction.cs
+++ b/Antlr3.Test/TestNFAConstruction.cs
@@ -47,7 +47,7 @@ namespace AntlrUnitTests
{
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestA() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -61,7 +61,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAB() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -76,7 +76,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAorB() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -100,7 +100,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRangeOrRange() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -123,7 +123,7 @@ namespace AntlrUnitTests
checkRule( g, "A", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRange() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -138,7 +138,7 @@ namespace AntlrUnitTests
checkRule( g, "A", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCharSetInParser() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -153,7 +153,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestABorCD() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -174,7 +174,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestbA() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -195,7 +195,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestbA_bC() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -222,7 +222,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAorEpsilon() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -245,7 +245,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAOptional() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -263,7 +263,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNakedAoptional() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -281,7 +281,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAorBthenC() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -294,7 +294,7 @@ namespace AntlrUnitTests
*/
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAplus() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -312,7 +312,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNakedAplus() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -330,7 +330,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAplusNonGreedy() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -348,7 +348,7 @@ namespace AntlrUnitTests
checkRule( g, "A", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAorBplus() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -372,7 +372,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAorBorEmptyPlus() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -399,7 +399,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAStar() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -419,7 +419,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNestedAstar() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -446,7 +446,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPlusNestedInStar() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -471,7 +471,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestStarNestedInPlus() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -496,7 +496,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNakedAstar() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -516,7 +516,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAorBstar() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -542,7 +542,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAorBOptionalSubrule() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -560,7 +560,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPredicatedAorB() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -581,7 +581,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMultiplePredicates() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -615,7 +615,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSets() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -686,7 +686,7 @@ namespace AntlrUnitTests
checkRule( g, "e", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSet() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -706,7 +706,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSingletonBlockSet() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -726,7 +726,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotCharSet() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -746,7 +746,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotBlockSet() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -766,7 +766,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotSetLoop() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -792,7 +792,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotBlockSetLoop() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -818,7 +818,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetsInCombinedGrammarSentToLexer() /*throws Exception*/ {
// not sure this belongs in this test suite, but whatever.
Grammar g = new Grammar(
@@ -832,7 +832,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabeledNotSet() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -852,7 +852,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabeledNotCharSet() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -872,7 +872,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabeledNotBlockSet() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -892,7 +892,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expectingGrammarStr, g.ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestEscapedCharLiteral() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -906,7 +906,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestEscapedStringLiteral() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar P;\n" +
@@ -922,7 +922,7 @@ namespace AntlrUnitTests

// AUTO BACKTRACKING STUFF

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktracking_RuleBlock() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -945,7 +945,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktracking_RuleSetBlock() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -961,7 +961,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktracking_SimpleBlock() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -985,7 +985,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktracking_SetBlock() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -1001,7 +1001,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktracking_StarBlock() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -1031,7 +1031,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktracking_StarSetBlock_IgnoresPreds() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -1053,7 +1053,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktracking_StarSetBlock() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -1083,7 +1083,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktracking_StarBlock1Alt() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -1106,7 +1106,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktracking_PlusBlock() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -1134,7 +1134,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktracking_PlusSetBlock() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -1162,7 +1162,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktracking_PlusBlock1Alt() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -1183,7 +1183,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktracking_OptionalBlock2Alts() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -1210,7 +1210,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktracking_OptionalBlock1Alt() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -1231,7 +1231,7 @@ namespace AntlrUnitTests
checkRule( g, "a", expecting );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoBacktracking_ExistingPred() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
diff --git a/Antlr3.Test/TestRewriteAST.cs b/Antlr3.Test/TestRewriteAST.cs
index 5ae064c..115a211 100644
--- a/Antlr3.Test/TestRewriteAST.cs
+++ b/Antlr3.Test/TestRewriteAST.cs
@@ -45,7 +45,7 @@ namespace AntlrUnitTests
{
protected bool debug = false;

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDelete() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -59,7 +59,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "", found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleToken() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -73,7 +73,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleTokenToNewNode() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -87,7 +87,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "x" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleTokenToNewNodeRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -101,7 +101,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(x INT)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleTokenToNewNode2() /*throws Exception*/ {
// Allow creation of new nodes w/o args.
string grammar =
@@ -116,7 +116,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "ID" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleCharLiteral() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -130,7 +130,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "c" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleStringLiteral() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -144,7 +144,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "ick" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleRule() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -159,7 +159,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReorderTokens() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -173,7 +173,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34 abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReorderTokenAndRule() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -188,7 +188,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34 abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenTree() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -202,7 +202,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(34 abc)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenTreeAfterOtherStuff() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -216,7 +216,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "void (34 abc)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNestedTokenTreeWithOuterLoop() /*throws Exception*/ {
// verify that ID and INT both iterate over outer index variable
string grammar =
@@ -232,7 +232,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(DUH a (DUH 1)) (DUH b (DUH 2))" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOptionalSingleToken() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -246,7 +246,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestClosureSingleToken() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -260,7 +260,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a b" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPositiveClosureSingleToken() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -274,7 +274,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a b" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOptionalSingleRule() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -289,7 +289,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestClosureSingleRule() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -304,7 +304,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a b" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestClosureOfLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -319,7 +319,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a b" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOptionalLabelNoListLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -333,7 +333,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPositiveClosureSingleRule() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -348,7 +348,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a b" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSinglePredicateT() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -362,7 +362,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSinglePredicateF() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -376,7 +376,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "", found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMultiplePredicate() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -393,7 +393,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "2" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMultiplePredicateTrees() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -410,7 +410,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(2 a)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleTree() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -425,7 +425,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(- 34)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleTree2() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -441,7 +441,7 @@ namespace AntlrUnitTests
}


-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNestedTrees() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -456,7 +456,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(var (: a int) (: b float))" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestImaginaryTokenCopy() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -472,7 +472,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(VAR a) (VAR b) (VAR c)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenUnreferencedOnLeftButDefined() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -488,7 +488,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "ID" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestImaginaryTokenCopySetText() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -504,7 +504,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(var a) (var b) (var c)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestImaginaryTokenNoCopyFromToken() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -520,7 +520,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "({ a b c)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestImaginaryTokenNoCopyFromTokenSetText() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -536,7 +536,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(block a b c)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMixedRewriteAndAutoAST() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -554,7 +554,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(2 1 a)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSubruleWithRewrite() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -571,7 +571,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "1 a 2 3" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSubruleWithRewrite2() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -592,7 +592,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(TYPE int a) (TYPE int b 3)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNestedRewriteShutsOffAutoAST() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -610,7 +610,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "d 42" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteActions() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -625,7 +625,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(9 3)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteActions2() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -640,7 +640,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "9 3" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRefToOldValue() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -656,7 +656,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(+ (+ 3 4) 5)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCopySemanticsForRules() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -672,7 +672,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(3 3)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCopySemanticsForRules2() /*throws Exception*/ {
// copy type as a root for each invocation of (...)+ in rewrite
string grammar =
@@ -687,7 +687,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(int a) (int b) (int c)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCopySemanticsForRules3() /*throws Exception*/ {
// copy type *and* modifier even though it's optional
// for each invocation of (...)+ in rewrite
@@ -704,7 +704,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(int public a) (int public b) (int public c)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCopySemanticsForRules3Double() /*throws Exception*/ {
// copy type *and* modifier even though it's optional
// for each invocation of (...)+ in rewrite
@@ -721,7 +721,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(int public a) (int public b) (int public c) (int public a) (int public b) (int public c)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCopySemanticsForRules4() /*throws Exception*/ {
// copy type *and* modifier even though it's optional
// for each invocation of (...)+ in rewrite
@@ -739,7 +739,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(int (MOD public) a) (int (MOD public) b) (int (MOD public) c)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCopySemanticsLists() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -753,7 +753,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a b c a b c" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCopyRuleLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -768,7 +768,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a a" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCopyRuleLabel2() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -783,7 +783,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(a a)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestQueueingOfTokens() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -798,7 +798,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(int a b c)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCopyOfTokens() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -813,7 +813,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "int a int a" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenCopyInLoop() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -828,7 +828,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(int a) (int b) (int c)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenCopyInLoopAgainstTwoOthers() /*throws Exception*/ {
// must smear 'int' copies across as root of multiple trees
string grammar =
@@ -844,7 +844,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(int a 1) (int b 2) (int c 3)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestListRefdOneAtATime() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -859,7 +859,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a b c" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSplitListWithLabels() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -875,7 +875,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a VAR b c" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestComplicatedMelange() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -893,7 +893,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a a b b b c c c d" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -908,7 +908,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAmbiguousRule() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -922,7 +922,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWeirdRuleRef() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -945,7 +945,7 @@ namespace AntlrUnitTests
Assert.AreEqual(1, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleListLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -960,7 +960,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a b" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleListLabel2() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -975,7 +975,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a b" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOptional() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -990,7 +990,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOptional2() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -1005,7 +1005,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a b" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOptional3() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -1020,7 +1020,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a b" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOptional4() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -1035,7 +1035,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a b" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOptional5() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -1050,7 +1050,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestArbitraryExprType() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -1065,7 +1065,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "", found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSet() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -1079,7 +1079,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "2 34 a de" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSet2() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -1093,7 +1093,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "2" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetWithLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -1107,7 +1107,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "2" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteAction() /*throws Exception*/ {
string grammar =
"grammar T; \n" +
@@ -1123,7 +1123,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "25.0" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOptionalSubruleWithoutRealElements() /*throws Exception*/ {
// copy type *and* modifier even though it's optional
// for each invocation of (...)+ in rewrite
@@ -1145,7 +1145,7 @@ namespace AntlrUnitTests

// C A R D I N A L I T Y  I S S U E S

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCardinality() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -1163,7 +1163,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCardinality2() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -1181,7 +1181,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCardinality3() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -1199,7 +1199,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLoopCardinality() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -1217,7 +1217,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcard() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -1233,7 +1233,7 @@ namespace AntlrUnitTests

// E R R O R S

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestUnknownRule() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -1262,7 +1262,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestKnownRuleButNotInLHS() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -1292,7 +1292,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestUnknownToken() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -1321,7 +1321,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestUnknownLabel() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -1350,7 +1350,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestUnknownCharLiteralToken() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -1379,7 +1379,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestUnknownStringLiteralToken() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -1408,7 +1408,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestExtraTokenInSimpleDecl() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -1425,7 +1425,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(EXPR int x 1)" + NewLine, found ); // tree gets correct x and 1 tokens
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingIDInSimpleDecl() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -1442,7 +1442,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(EXPR int <missing ID> 1)" + NewLine, found ); // tree gets invented ID token
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingSetInSimpleDecl() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -1459,7 +1459,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(EXPR <error: x> x 1)" + NewLine, found ); // tree gets invented ID token
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingTokenGivesErrorNode() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -1475,7 +1475,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc <missing INT>" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestExtraTokenGivesErrorNode() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -1492,7 +1492,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingFirstTokenGivesErrorNode() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -1507,7 +1507,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "<missing ID> 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingFirstTokenGivesErrorNode2() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -1527,7 +1527,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "<missing ID> 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNoViableAltGivesErrorNode() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
diff --git a/Antlr3.Test/TestRewriteTemplates.cs b/Antlr3.Test/TestRewriteTemplates.cs
index 1a54373..3b4bf3d 100644
--- a/Antlr3.Test/TestRewriteTemplates.cs
+++ b/Antlr3.Test/TestRewriteTemplates.cs
@@ -44,7 +44,7 @@ namespace AntlrUnitTests
{
protected bool debug = false;

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDelete() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -58,7 +58,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "", found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAction() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -72,7 +72,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestEmbeddedLiteralConstructor() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -86,7 +86,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInlineTemplate() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -100,7 +100,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "x:abc, y:34;" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNamedTemplate() /*throws Exception*/ {
// the support code adds template group in it's output Test.java
// that defines template foo.
@@ -116,7 +116,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIndirectTemplate() /*throws Exception*/ {
// the support code adds template group in it's output Test.java
// that defines template foo.
@@ -132,7 +132,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInlineTemplateInvokingLib() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -146,7 +146,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPredicatedAlts() /*throws Exception*/ {
// the support code adds template group in it's output Test.java
// that defines template foo.
@@ -164,7 +164,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "hi abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTemplateReturn() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -179,7 +179,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReturnValueWithTemplate() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -194,7 +194,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "8" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTemplateRefToDynamicAttributes() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -213,7 +213,7 @@ namespace AntlrUnitTests

// tests for rewriting templates in tree parsers

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleNode() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -234,7 +234,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "|abc|" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleNodeRewriteMode() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -255,7 +255,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "|abc|" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteRuleAndRewriteModeOnSimpleElements() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -277,7 +277,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.warnings.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteRuleAndRewriteModeIgnoreActionsPredicates() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -300,7 +300,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.warnings.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteRuleAndRewriteModeNotSimple() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -320,7 +320,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.warnings.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteRuleAndRewriteModeRefRule() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
diff --git a/Antlr3.Test/TestSemanticPredicateEvaluation.cs b/Antlr3.Test/TestSemanticPredicateEvaluation.cs
index 9c10d62..98d1258 100644
--- a/Antlr3.Test/TestSemanticPredicateEvaluation.cs
+++ b/Antlr3.Test/TestSemanticPredicateEvaluation.cs
@@ -37,7 +37,7 @@ namespace AntlrUnitTests
[TestClass]
public class TestSemanticPredicateEvaluation : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleCyclicDFAWithPredicate() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -49,7 +49,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "alt2" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleCyclicDFAWithInstanceVarPredicate() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -62,7 +62,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "alt2" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPredicateValidation() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -79,7 +79,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "error: FailedPredicateException(a,{false}?)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerPreds() /*throws Exception*/ {
string grammar =
"grammar foo;" +
@@ -93,7 +93,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "token 2" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerPreds2() /*throws Exception*/ {
string grammar =
"grammar foo;" +
@@ -107,7 +107,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "token 1" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerPredInExitBranch() /*throws Exception*/ {
// p says it's ok to exit; it has precendence over the !p loopback branch
string grammar =
@@ -122,7 +122,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "222" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerPredInExitBranch2() /*throws Exception*/ {
string grammar =
"grammar foo;" +
@@ -135,7 +135,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "111" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerPredInExitBranch3() /*throws Exception*/ {
string grammar =
"grammar foo;" +
@@ -148,7 +148,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "122" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerPredInExitBranch4() /*throws Exception*/ {
string grammar =
"grammar foo;" +
@@ -160,7 +160,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "01xxx" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerPredsInCyclicDFA() /*throws Exception*/ {
string grammar =
"grammar foo;" +
@@ -173,7 +173,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "token 2" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerPredsInCyclicDFA2() /*throws Exception*/ {
string grammar =
"grammar foo;" +
@@ -186,7 +186,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "token 2" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGatedPred() /*throws Exception*/ {
string grammar =
"grammar foo;" +
@@ -199,7 +199,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "token 1" + NewLine + "token 1" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGatedPred2() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -213,7 +213,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "AC" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPredWithActionTranslation() /*throws Exception*/ {
string grammar =
"grammar foo;\n" +
@@ -227,7 +227,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "alt 2" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPredicatesOnEOTTarget() /*throws Exception*/ {
string grammar =
"grammar foo; \n" +
@@ -243,7 +243,7 @@ namespace AntlrUnitTests
}

#if true // my lookahead tests
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSynpredLookahead()
{
string grammar =
@@ -262,7 +262,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "B" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPredicatesWithGlobalScope()
{
string grammar =
@@ -274,7 +274,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "B" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPredicatesWithGlobalScope2()
{
string grammar =
@@ -296,7 +296,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "B" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
[Ignore]
public void TestPredicatesWithGlobalScope3()
{
diff --git a/Antlr3.Test/TestSemanticPredicates.cs b/Antlr3.Test/TestSemanticPredicates.cs
index c32e952..c13153e 100644
--- a/Antlr3.Test/TestSemanticPredicates.cs
+++ b/Antlr3.Test/TestSemanticPredicates.cs
@@ -53,7 +53,7 @@ namespace AntlrUnitTests
{
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPredsButSyntaxResolves() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -64,7 +64,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLL_1_Pred() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -76,7 +76,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLL_1_Pred_forced_k_1() /*throws Exception*/ {
// should stop just like before w/o k set.
Grammar g = new Grammar(
@@ -89,7 +89,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLL_2_Pred() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -102,7 +102,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPredicatedLoop() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -115,7 +115,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPredicatedToStayInLoop() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -128,7 +128,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAndPredicates() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -140,7 +140,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOrPredicates() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -153,7 +153,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIgnoresHoistingDepthGreaterThanZero() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -164,7 +164,7 @@ namespace AntlrUnitTests
new int[] { 1, 2 }, "A", null, null, 2, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIgnoresPredsHiddenByActions() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -175,7 +175,7 @@ namespace AntlrUnitTests
new int[] { 1, 2 }, "A", null, null, 2, true );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIgnoresPredsHiddenByActionsOneAlt() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -204,7 +204,7 @@ namespace AntlrUnitTests
}
*/

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestHoist2() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -218,7 +218,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestHoistCorrectContext() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -232,7 +232,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDefaultPredNakedAltIsLast() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -246,7 +246,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDefaultPredNakedAltNotLast() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -260,7 +260,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLeftRecursivePred() /*throws Exception*/ {
// No analysis possible. but probably good to fail.  Not sure we really want
// left-recursion even if guarded with pred.
@@ -297,7 +297,7 @@ namespace AntlrUnitTests
Assert.IsTrue(msg is LeftRecursionCyclesMessage, "warning must be a left recursion msg");
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIgnorePredFromLL2AltLastAltIsDefaultTrue() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -319,7 +319,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIgnorePredFromLL2AltPredUnionNeeded() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -341,7 +341,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPredGets2SymbolSyntacticContext() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -356,7 +356,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMatchesLongestThenTestPred() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar P;\n" +
@@ -371,7 +371,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPredsUsedAfterRecursionOverflow() /*throws Exception*/ {
// analysis must bail out due to non-LL(*) nature (ovf)
// retries with k=1 (but with LL(*) algorithm not optimized version
@@ -402,7 +402,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPredsUsedAfterK2FailsNoRecursionOverflow() /*throws Exception*/ {
// analysis must bail out due to non-LL(*) nature (ovf)
// retries with k=1 (but with LL(*) algorithm not optimized version
@@ -438,7 +438,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerMatchesLongestThenTestPred() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -454,7 +454,7 @@ namespace AntlrUnitTests
checkDecision( g, 2, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerMatchesLongestMinusPred() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -468,7 +468,7 @@ namespace AntlrUnitTests
checkDecision( g, 2, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGatedPred() /*throws Exception*/ {
// gated preds are present on all arcs in predictor
Grammar g = new Grammar(
@@ -485,7 +485,7 @@ namespace AntlrUnitTests
checkDecision( g, 2, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGatedPredHoistsAndCanBeInStopState() /*throws Exception*/ {
// I found a bug where merging stop states made us throw away
// a stop state with a gated pred!
@@ -500,7 +500,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGatedPredInCyclicDFA() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -518,7 +518,7 @@ namespace AntlrUnitTests
checkDecision( g, 3, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGatedPredNotActuallyUsedOnEdges() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar P;\n" +
@@ -542,7 +542,7 @@ namespace AntlrUnitTests
checkDecision( g, 2, expecting2, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGatedPredDoesNotForceAllToBeGated() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar w;\n" +
@@ -556,7 +556,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestGatedPredDoesNotForceAllToBeGated2() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar w;\n" +
@@ -574,7 +574,7 @@ namespace AntlrUnitTests
checkDecision( g, 1, expecting, null, null, null, null, null, 0, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestORGatedPred() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar w;\n" +
@@ -595,7 +595,7 @@ namespace AntlrUnitTests
/** The following grammar should yield an error that rule 'a' has
*  insufficient semantic info pulled from 'b'.
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIncompleteSemanticHoistedContext() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -609,7 +609,7 @@ namespace AntlrUnitTests
new int[] { 1, 2 }, "B", new int[] { 1 }, null, 3, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIncompleteSemanticHoistedContextk2() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -624,7 +624,7 @@ namespace AntlrUnitTests
new int[] { 1, 2 }, "A B", new int[] { 1 }, null, 3, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIncompleteSemanticHoistedContextInFOLLOW() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -639,7 +639,7 @@ namespace AntlrUnitTests
new int[] { 1, 2 }, "A", new int[] { 2 }, null, 3, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIncompleteSemanticHoistedContextInFOLLOWk2() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -655,7 +655,7 @@ namespace AntlrUnitTests
new int[] { 1, 2 }, "A B", new int[] { 2 }, null, 2, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIncompleteSemanticHoistedContextInFOLLOWDueToHiddenPred() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -681,7 +681,7 @@ namespace AntlrUnitTests
*  conversion to include an edge for D.  Alt 1 is the only possible
*  prediction because we resolve the ambiguity by choosing alt 1.
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIncompleteSemanticHoistedContext2() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -696,7 +696,7 @@ namespace AntlrUnitTests
null, 3, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTooFewSemanticPredicates() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -708,7 +708,7 @@ namespace AntlrUnitTests
null, null, 2, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPredWithK1() /*throws Exception*/ {
Grammar g = new Grammar(
"\tlexer grammar TLexer;\n" +
@@ -734,7 +734,7 @@ namespace AntlrUnitTests
danglingAlts, numWarnings, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPredWithArbitraryLookahead() /*throws Exception*/ {
Grammar g = new Grammar(
"\tlexer grammar TLexer;\n" +
@@ -764,7 +764,7 @@ namespace AntlrUnitTests
*  test a||a||b||a||a etc...  ANTLR makes a unique set and THEN
*  OR's them together.
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestUniquePredicateOR() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar v;\n" +
@@ -793,7 +793,7 @@ namespace AntlrUnitTests
danglingAlts, numWarnings, false );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSemanticContextPreventsEarlyTerminationOfClosure() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar T;\n" +
diff --git a/Antlr3.Test/TestSets.cs b/Antlr3.Test/TestSets.cs
index ceee76f..1411f71 100644
--- a/Antlr3.Test/TestSets.cs
+++ b/Antlr3.Test/TestSets.cs
@@ -45,7 +45,7 @@ namespace AntlrUnitTests
{
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSeqDoesNotBecomeSet() /*throws Exception*/ {
// this must return A not I to the parser; calling a nonfragment rule
// from a nonfragment rule does not set the overall token.
@@ -60,7 +60,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParserSet() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -70,7 +70,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "x" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParserNotSet() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -80,7 +80,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "z" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParserNotToken() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -90,7 +90,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "zz" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParserNotTokenWithLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -100,7 +100,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "z" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleAsSet() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -110,7 +110,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "b" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleAsSetAST() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -121,7 +121,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "b" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotChar() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -132,7 +132,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "x" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOptionalSingleElement() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -143,7 +143,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "bc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOptionalLexerSingleElement() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -154,7 +154,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "bc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestStarLexerSingleElement() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -168,7 +168,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "c" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPlusLexerSingleElement() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -179,7 +179,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "bbbbc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOptionalSet() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -189,7 +189,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "ac" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestStarSet() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -199,7 +199,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abaac" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestPlusSet() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -209,7 +209,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abaac" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerOptionalSet() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -220,7 +220,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "ac" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerStarSet() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -231,7 +231,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abaac" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerPlusSet() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -242,7 +242,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abaac" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotCharSet() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -253,7 +253,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "x" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotCharSetWithLabel() /*throws Exception*/ {
// This doesn't work in lexer yet.
// Generates: h=input.LA(1); but h is defined as a Token
@@ -266,7 +266,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "x" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotCharSetWithRuleRef() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -278,7 +278,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "x" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotCharSetWithRuleRef2() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -290,7 +290,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "x" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotCharSetWithRuleRef3() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -303,7 +303,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "x" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNotCharSetWithRuleRef4() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
diff --git a/Antlr3.Test/TestSymbolDefinitions.cs b/Antlr3.Test/TestSymbolDefinitions.cs
index c9d94d3..3fdacb8 100644
--- a/Antlr3.Test/TestSymbolDefinitions.cs
+++ b/Antlr3.Test/TestSymbolDefinitions.cs
@@ -54,7 +54,7 @@ namespace AntlrUnitTests
{
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParserSimpleTokens() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -65,7 +65,7 @@ namespace AntlrUnitTests
checkSymbols( g, rules, tokenNames );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParserTokensSection() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -80,7 +80,7 @@ namespace AntlrUnitTests
checkSymbols( g, rules, tokenNames );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerTokensSection() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -95,7 +95,7 @@ namespace AntlrUnitTests
checkSymbols( g, rules, tokenNames );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokensSectionWithAssignmentSection() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -110,7 +110,7 @@ namespace AntlrUnitTests
checkSymbols( g, rules, tokenNames );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCombinedGrammarLiterals() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -124,7 +124,7 @@ namespace AntlrUnitTests
checkSymbols( g, rules, tokenNames );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLiteralInParserAndLexer() /*throws Exception*/ {
// 'x' is token and char in lexer rule
Grammar g = new Grammar(
@@ -146,7 +146,7 @@ namespace AntlrUnitTests
Assert.AreEqual( implicitLexer, g.GetLexerGrammar() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCombinedGrammarWithRefToLiteralButNoTokenIDRef() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -157,7 +157,7 @@ namespace AntlrUnitTests
checkSymbols( g, rules, tokenNames );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetDoesNotMissTokenAliases() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -169,7 +169,7 @@ namespace AntlrUnitTests
checkSymbols( g, rules, tokenNames );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimplePlusEqualLabel() /*throws Exception*/ {
Grammar g = new Grammar(
"parser grammar t;\n" +
@@ -180,7 +180,7 @@ namespace AntlrUnitTests
checkPlusEqualsLabels( g, rule, tokenLabels, ruleLabels );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMixedPlusEqualLabel() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -196,7 +196,7 @@ namespace AntlrUnitTests

// T E S T  L I T E R A L  E S C A P E S

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParserCharLiteralWithEscape() /*throws Exception*/ {
Grammar g = new Grammar(
"grammar t;\n" +
@@ -206,7 +206,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "'\\n'", literals.ToArray()[0] );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenInTokensSectionAndTokenRuleDef() /*throws Exception*/ {
// this must return A not I to the parser; calling a nonfragment rule
// from a nonfragment rule does not set the overall token.
@@ -222,7 +222,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a}" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenInTokensSectionAndTokenRuleDef2() /*throws Exception*/ {
// this must return A not I to the parser; calling a nonfragment rule
// from a nonfragment rule does not set the overall token.
@@ -239,7 +239,7 @@ namespace AntlrUnitTests
}


-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRefToRuleWithNoReturnValue() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -263,7 +263,7 @@ namespace AntlrUnitTests

// T E S T  E R R O R S

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParserStringLiterals() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -278,7 +278,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParserCharLiterals() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -293,7 +293,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestEmptyNotChar() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -308,7 +308,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestEmptyNotToken() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -323,7 +323,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestEmptyNotSet() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -338,7 +338,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestStringLiteralInParserTokensSection() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -356,7 +356,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCharLiteralInParserTokensSection() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -374,7 +374,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCharLiteralInLexerTokensSection() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -391,7 +391,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleRedefinition() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -407,7 +407,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerRuleRedefinition() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -423,7 +423,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCombinedRuleRedefinition() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -440,7 +440,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestUndefinedToken() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -455,7 +455,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsWarning( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestUndefinedTokenOkInParser() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -465,7 +465,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "should not be an error");
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestUndefinedRule() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -480,7 +480,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLexerRuleInParser() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -495,7 +495,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParserRuleInLexer() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -510,7 +510,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleScopeConflict() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -529,7 +529,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenRuleScopeConflict() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -548,7 +548,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenScopeConflict() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -568,7 +568,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenRuleScopeConflictInLexerGrammar() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -587,7 +587,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenLabelScopeConflict() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -606,7 +606,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleLabelScopeConflict() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -626,7 +626,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabelAndRuleNameConflict() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -644,7 +644,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabelAndTokenNameConflict() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -662,7 +662,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabelAndArgConflict() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -678,7 +678,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabelAndParameterConflict() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -694,7 +694,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLabelRuleScopeConflict() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -715,7 +715,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleScopeArgConflict() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -736,7 +736,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleScopeReturnValueConflict() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -757,7 +757,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleScopeRuleNameConflict() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -778,7 +778,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestBadGrammarOption() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -795,7 +795,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestBadRuleOption() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -812,7 +812,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestBadSubRuleOption() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue ); // unique listener per thread
@@ -830,7 +830,7 @@ namespace AntlrUnitTests
checkGrammarSemanticsError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenVocabStringUsedInLexer() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -863,7 +863,7 @@ namespace AntlrUnitTests
Assert.AreEqual(0, equeue.errors.Count, "unexpected errors: " + equeue);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTokenVocabStringUsedInCombined() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
diff --git a/Antlr3.Test/TestSyntacticPredicateEvaluation.cs b/Antlr3.Test/TestSyntacticPredicateEvaluation.cs
index b27cd2e..e6a9242 100644
--- a/Antlr3.Test/TestSyntacticPredicateEvaluation.cs
+++ b/Antlr3.Test/TestSyntacticPredicateEvaluation.cs
@@ -37,7 +37,7 @@ namespace AntlrUnitTests
[TestClass]
public class TestSyntacticPredicateEvaluation : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTwoPredsWithNakedAlt() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -87,7 +87,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTwoPredsWithNakedAltNotLast() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -136,7 +136,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TesTLexerPred() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -158,7 +158,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "alt1" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TesTLexerWithPredLongerThanAlt() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -181,7 +181,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "alt1"+NewLine+"D" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TesTLexerPredCyclicPrediction() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -198,7 +198,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "alt1" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TesTLexerPredCyclicPrediction2() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -214,7 +214,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "alt2" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleNestedPred() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -250,7 +250,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTripleNestedPredInLexer() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -302,7 +302,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTreeParserWithSynPred() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -326,7 +326,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "alt 2" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTreeParserWithNestedSynPred() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -354,7 +354,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "b:alt 2 a:alt 1" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSynPredWithOutputTemplate() /*throws Exception*/ {
// really just seeing if it will compile
string grammar =
@@ -375,7 +375,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "1:xxxy;" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSynPredWithOutputAST() /*throws Exception*/ {
// really just seeing if it will compile
string grammar =
@@ -396,7 +396,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "x x x y" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOptionalBlockWithSynPred() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -411,7 +411,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "", found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSynPredK2() /*throws Exception*/ {
// all manually specified syn predicates are gated (i.e., forced
// to execute).
@@ -426,7 +426,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "alt1" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSynPredKStar() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
diff --git a/Antlr3.Test/TestSyntaxErrors.cs b/Antlr3.Test/TestSyntaxErrors.cs
index ac9f838..ecd3a8b 100644
--- a/Antlr3.Test/TestSyntaxErrors.cs
+++ b/Antlr3.Test/TestSyntaxErrors.cs
@@ -41,7 +41,7 @@ namespace AntlrUnitTests
[TestClass]
public class TestSyntaxErrors : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLL2()
{
string grammar =
@@ -56,7 +56,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLL3()
{
string grammar =
@@ -72,7 +72,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLLStar()
{
string grammar =
@@ -87,7 +87,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSynPred()
{
string grammar =
@@ -106,7 +106,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLL1ErrorInfo()
{
string grammar =
@@ -129,7 +129,7 @@ namespace AntlrUnitTests
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestStrayBracketRecovery()
{
string grammar =
@@ -157,7 +157,7 @@ namespace AntlrUnitTests
* This is a regression test for antlr/antlr3#61.
* https://github.com/antlr/antlr3/issues/61
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMissingAttributeAccessPreventsCodeGeneration()
{
string grammar =
diff --git a/Antlr3.Test/TestTemplates.cs b/Antlr3.Test/TestTemplates.cs
index ace0fd1..dec7ed2 100644
--- a/Antlr3.Test/TestTemplates.cs
+++ b/Antlr3.Test/TestTemplates.cs
@@ -50,7 +50,7 @@ namespace AntlrUnitTests
{
private readonly string LINE_SEP = NewLine;

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTemplateConstructor() /*throws Exception*/ {
string action = "x = %foo(name={$ID.text});";
string expecting = "x = templateLib.getInstanceOf(\"foo\"," +
@@ -88,7 +88,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTemplateConstructorNoArgs() /*throws Exception*/ {
string action = "x = %foo();";
string expecting = "x = templateLib.getInstanceOf(\"foo\");";
@@ -125,7 +125,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestIndirectTemplateConstructor() /*throws Exception*/ {
string action = "x = %({\"foo\"})(name={$ID.text});";
string expecting = "x = templateLib.getInstanceOf(\"foo\"," +
@@ -163,7 +163,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestStringConstructor() /*throws Exception*/ {
string action = "x = %{$ID.text};";
string expecting = "x = new StringTemplate(templateLib,(ID1!=null?ID1.getText():null));";
@@ -199,7 +199,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetAttr() /*throws Exception*/ {
string action = "%x.y = z;";
string expecting = "(x).setAttribute(\"y\", z);";
@@ -236,7 +236,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetAttrOfExpr() /*throws Exception*/ {
string action = "%{foo($ID.text).getST()}.y = z;";
string expecting = "(foo((ID1!=null?ID1.getText():null)).getST()).setAttribute(\"y\", z);";
@@ -272,7 +272,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetAttrOfExprInMembers() /*throws Exception*/ {
ErrorQueue equeue = new ErrorQueue();
ErrorManager.SetErrorListener( equeue );
@@ -296,7 +296,7 @@ namespace AntlrUnitTests
assertNoErrors( equeue );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCannotHaveSpaceBeforeDot() /*throws Exception*/ {
string action = "%x .y = z;";
//String expecting = null;
@@ -325,7 +325,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCannotHaveSpaceAfterDot() /*throws Exception*/ {
string action = "%x. y = z;";
//String expecting = null;
diff --git a/Antlr3.Test/TestTokenRewriteStream.cs b/Antlr3.Test/TestTokenRewriteStream.cs
index 725324a..249aa13 100644
--- a/Antlr3.Test/TestTokenRewriteStream.cs
+++ b/Antlr3.Test/TestTokenRewriteStream.cs
@@ -45,7 +45,7 @@ namespace AntlrUnitTests
[TestClass]
public class TestTokenRewriteStream : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInsertBeforeIndex0() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -61,7 +61,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInsertAfterLastIndex() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -77,7 +77,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void Test2InsertBeforeAfterMiddleIndex() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -95,7 +95,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceIndex0() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -112,7 +112,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceLastIndex() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -129,7 +129,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceMiddleIndex() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -146,7 +146,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestToStringStartStop() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -181,7 +181,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestToStringStartStop2() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -235,7 +235,7 @@ namespace AntlrUnitTests
}


-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void Test2ReplaceMiddleIndex() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -253,7 +253,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void Test2ReplaceMiddleIndex1InsertBefore() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -272,7 +272,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceThenDeleteMiddleIndex() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -290,7 +290,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInsertInPriorReplace() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -317,7 +317,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, exc.Message );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInsertThenReplaceSameIndex() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -335,7 +335,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void Test2InsertMiddleIndex() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -353,7 +353,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void Test2InsertThenReplaceIndex0() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -372,7 +372,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceThenInsertBeforeLastIndex() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -390,7 +390,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInsertThenReplaceLastIndex() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -408,7 +408,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceThenInsertAfterLastIndex() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -426,7 +426,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceRangeThenInsertAtLeftEdge() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -444,7 +444,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceRangeThenInsertAtRightEdge() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -471,7 +471,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, exc.Message );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceRangeThenInsertAfterRightEdge() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -489,7 +489,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceAll() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -506,7 +506,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceSubsetThenFetch() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -523,7 +523,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceThenReplaceSuperset() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -550,7 +550,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, exc.Message );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceThenReplaceLowerIndexedSuperset() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -577,7 +577,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, exc.Message );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceSingleMiddleThenOverlappingSuperset() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -597,7 +597,7 @@ namespace AntlrUnitTests

// June 2, 2008 I rewrote core of rewrite engine; just adding lots more tests here

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCombineInserts() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -615,7 +615,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCombine3Inserts() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -634,7 +634,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCombineInsertOnLeftWithReplace() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -652,7 +652,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCombineInsertOnLeftWithDelete() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -670,7 +670,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDisjointInserts() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -689,7 +689,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOverlappingReplace() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -707,7 +707,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOverlappingReplace2() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -734,7 +734,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, exc.Message );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOverlappingReplace3() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -752,7 +752,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestOverlappingReplace4() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -770,7 +770,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDropIdenticalReplace() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -788,7 +788,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDropPrevCoveredInsert() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -806,7 +806,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLeaveAloneDisjointInsert() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -824,7 +824,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLeaveAloneDisjointInsert2() /*throws Exception*/ {
Grammar g = new Grammar(
"lexer grammar t;\n" +
@@ -842,7 +842,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInsertBeforeTokenThenDeleteThatToken()
{
Grammar g = new Grammar(
diff --git a/Antlr3.Test/TestTopologicalSort.cs b/Antlr3.Test/TestTopologicalSort.cs
index c52d977..56b7a5f 100644
--- a/Antlr3.Test/TestTopologicalSort.cs
+++ b/Antlr3.Test/TestTopologicalSort.cs
@@ -41,7 +41,7 @@ namespace AntlrUnitTests
[TestClass]
public class TestTopologicalSort : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public virtual void TestFairlyLargeGraph()
{
Graph g = new Graph();
@@ -64,7 +64,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public virtual void TestCyclicGraph()
{
Graph g = new Graph();
@@ -79,7 +79,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public virtual void TestRepeatedEdges()
{
Graph g = new Graph();
@@ -94,7 +94,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public virtual void TestSimpleTokenDependence()
{
Graph g = new Graph();
@@ -109,7 +109,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, result );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public virtual void TestParserLexerCombo()
{
Graph g = new Graph();
diff --git a/Antlr3.Test/TestTreeGrammarRewriteAST.cs b/Antlr3.Test/TestTreeGrammarRewriteAST.cs
index 219bcd0..83e3b96 100644
--- a/Antlr3.Test/TestTreeGrammarRewriteAST.cs
+++ b/Antlr3.Test/TestTreeGrammarRewriteAST.cs
@@ -51,7 +51,7 @@ namespace AntlrUnitTests
{
protected bool debug = false;

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestFlatList() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -72,7 +72,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34 abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleTree() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -93,7 +93,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(34 abc)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNonImaginaryWithCtor() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -113,7 +113,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "99" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCombinedRewriteAndAuto() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -138,7 +138,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAvoidDup() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -159,7 +159,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(abc abc)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLoop() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -180,7 +180,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "3 4 5 a b c" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoDup() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -201,7 +201,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoDupRule() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -223,7 +223,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a 1" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoWildcard() /*throws Exception*/
{
string grammar =
@@ -245,7 +245,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNoWildcardAsRootError() /*throws Exception*/
{
ErrorQueue equeue = new ErrorQueue();
@@ -275,7 +275,7 @@ namespace AntlrUnitTests
checkError( equeue, expectedMessage );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoWildcard2() /*throws Exception*/
{
string grammar =
@@ -297,7 +297,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(abc 34)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoWildcardWithLabel() /*throws Exception*/
{
string grammar =
@@ -319,7 +319,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoWildcardWithListLabel() /*throws Exception*/
{
string grammar =
@@ -341,7 +341,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoDupMultiple() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -362,7 +362,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "a b 3" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoDupTree() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -383,7 +383,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(a 3)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoDupTree2() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -405,7 +405,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(a 3 4)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoDupTreeWithLabels() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -426,7 +426,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(a 3)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoDupTreeWithListLabels() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -447,7 +447,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(a 3)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoDupTreeWithRuleRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -468,7 +468,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(a 3)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoDupTreeWithRuleRootAndLabels() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -489,7 +489,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(a 3)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoDupTreeWithRuleRootAndListLabels() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -511,7 +511,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(a 3)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoDupNestedTree() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -532,7 +532,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(a (b 3))" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAutoDupTreeWithSubruleInside() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -555,7 +555,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(OP a)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDelete() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -576,7 +576,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "", found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetMatchNoRewrite() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -598,7 +598,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetOptionalMatchNoRewrite() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -619,7 +619,7 @@ namespace AntlrUnitTests
}


-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetMatchNoRewriteLevel2() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -639,7 +639,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(abc 34)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSetMatchNoRewriteLevel2Root() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -662,7 +662,7 @@ namespace AntlrUnitTests

// REWRITE MODE

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteModeCombinedRewriteAndAuto() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -688,7 +688,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteModeFlatTree() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -710,7 +710,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc 1" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteModeChainRuleFlatTree() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -733,7 +733,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34 abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteModeChainRuleTree() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -756,7 +756,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteModeChainRuleTree2() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -780,7 +780,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteModeChainRuleTree3() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -804,7 +804,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "boo 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteModeChainRuleTree4() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -828,7 +828,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(boo 34)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteModeChainRuleTree5() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -852,7 +852,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(boo 34)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteOfRuleRef() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -873,7 +873,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteOfRuleRefRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -897,7 +897,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(12 (abc 34))" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteOfRuleRefRootLabeled() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -921,7 +921,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(12 (abc 34))" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
[Ignore]
public void TestRewriteOfRuleRefRootListLabeled() /*throws Exception*/ {
string grammar =
@@ -946,7 +946,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(12 (abc 34))" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteOfRuleRefChild() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -967,7 +967,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(34 34)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteOfRuleRefLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -988,7 +988,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(34 34)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteOfRuleRefListLabel() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -1009,7 +1009,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(34 34)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRewriteModeWithPredicatedRewrites() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -1033,7 +1033,7 @@ namespace AntlrUnitTests
"(root (ick 34))" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardSingleNode() /*throws Exception*/
{
string grammar =
@@ -1055,7 +1055,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardUnlabeledSingleNode() /*throws Exception*/
{
string grammar =
@@ -1077,7 +1077,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardGrabsSubtree() /*throws Exception*/
{
string grammar =
@@ -1099,7 +1099,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(1 2 3)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardGrabsSubtree2() /*throws Exception*/
{
string grammar =
@@ -1121,7 +1121,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(1 2 3)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardListLabel() /*throws Exception*/
{
string grammar =
@@ -1143,7 +1143,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "1 2 3" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardListLabel2() /*throws Exception*/
{
string grammar =
@@ -1165,7 +1165,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "(2 3) (2 3)" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRuleResultAsRoot()
{
string grammar =
diff --git a/Antlr3.Test/TestTreeIterator.cs b/Antlr3.Test/TestTreeIterator.cs
index c04a48d..779d1d3 100644
--- a/Antlr3.Test/TestTreeIterator.cs
+++ b/Antlr3.Test/TestTreeIterator.cs
@@ -47,7 +47,7 @@ namespace AntlrUnitTests
"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "B", "C", "D", "E", "F", "G"
};

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNode()
{
ITreeAdaptor adaptor = new CommonTreeAdaptor();
@@ -71,7 +71,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestFlatAB()
{
ITreeAdaptor adaptor = new CommonTreeAdaptor();
@@ -95,7 +95,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAB()
{
ITreeAdaptor adaptor = new CommonTreeAdaptor();
@@ -119,7 +119,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestABC()
{
ITreeAdaptor adaptor = new CommonTreeAdaptor();
@@ -143,7 +143,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestVerticalList()
{
ITreeAdaptor adaptor = new CommonTreeAdaptor();
@@ -167,7 +167,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestComplex()
{
ITreeAdaptor adaptor = new CommonTreeAdaptor();
diff --git a/Antlr3.Test/TestTreeNodeStream.cs b/Antlr3.Test/TestTreeNodeStream.cs
index 6ca3539..679d92c 100644
--- a/Antlr3.Test/TestTreeNodeStream.cs
+++ b/Antlr3.Test/TestTreeNodeStream.cs
@@ -56,7 +56,7 @@ namespace AntlrUnitTests
return ( (CommonTreeNodeStream)stream ).ToTokenTypeString();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleNode()
{
ITree t = new CommonTree( new CommonToken( 101 ) );
@@ -71,7 +71,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void Test4Nodes() /*throws Exception*/ {
// ^(101 ^(102 103) 104)
ITree t = new CommonTree( new CommonToken( 101 ) );
@@ -89,7 +89,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestList() /*throws Exception*/ {
ITree root = new CommonTree( (IToken)null );

@@ -113,7 +113,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestFlatList() /*throws Exception*/ {
ITree root = new CommonTree( (IToken)null );

@@ -131,7 +131,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestListWithOneNode() /*throws Exception*/ {
ITree root = new CommonTree( (IToken)null );

@@ -147,7 +147,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAoverB() /*throws Exception*/ {
ITree t = new CommonTree( new CommonToken( 101 ) );
t.AddChild( new CommonTree( new CommonToken( 102 ) ) );
@@ -162,7 +162,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestLT() /*throws Exception*/ {
// ^(101 ^(102 103) 104)
ITree t = new CommonTree( new CommonToken( 101 ) );
@@ -184,7 +184,7 @@ namespace AntlrUnitTests
Assert.AreEqual( TokenTypes.EndOfFile, ( (ITree)stream.LT( 100 ) ).Type );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMarkRewindEntire() /*throws Exception*/ {
// ^(101 ^(102 103 ^(106 107) ) 104 105)
// stream has 7 real + 6 nav nodes
@@ -218,7 +218,7 @@ namespace AntlrUnitTests
Assert.AreEqual( TokenTypes.EndOfFile, ( (ITree)stream.LT( 1 ) ).Type );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMarkRewindInMiddle() /*throws Exception*/ {
// ^(101 ^(102 103 ^(106 107) ) 104 105)
// stream has 7 real + 6 nav nodes
@@ -265,7 +265,7 @@ namespace AntlrUnitTests
Assert.AreEqual( TokenTypes.Up, ( (ITree)stream.LT( -1 ) ).Type );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestMarkRewindNested() /*throws Exception*/ {
// ^(101 ^(102 103 ^(106 107) ) 104 105)
// stream has 7 real + 6 nav nodes
@@ -305,7 +305,7 @@ namespace AntlrUnitTests
Assert.AreEqual( TokenTypes.Down, ( (ITree)stream.LT( 1 ) ).Type );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSeekFromStart() /*throws Exception*/ {
// ^(101 ^(102 103 ^(106 107) ) 104 105)
// stream has 7 real + 6 nav nodes
@@ -329,7 +329,7 @@ namespace AntlrUnitTests
Assert.AreEqual( 104, ( (ITree)stream.LT( 1 ) ).Type );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDeepTree()
{
// ^(10 100 101 ^(20 ^(30 40 (50 (60 70)))) (80 90)))
diff --git a/Antlr3.Test/TestTreeParsing.cs b/Antlr3.Test/TestTreeParsing.cs
index 48dc95e..9c2c242 100644
--- a/Antlr3.Test/TestTreeParsing.cs
+++ b/Antlr3.Test/TestTreeParsing.cs
@@ -37,7 +37,7 @@ namespace AntlrUnitTests
[TestClass]
public class TestTreeParsing : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestFlatList() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -58,7 +58,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc, 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSimpleTree() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -79,7 +79,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc, 34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestFlatVsTreeDecision() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -103,7 +103,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "^(a 1)b 2" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestFlatVsTreeDecision2() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -128,7 +128,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "^(a 3)b 5" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestCyclicDFALookahead() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -151,7 +151,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "alt 1" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTemplateOutput() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -173,7 +173,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "34" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNullableChildList() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -194,7 +194,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNullableChildList2() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -216,7 +216,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNullableChildList3() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -239,7 +239,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc, def" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestActionsAfterRoot() /*throws Exception*/ {
string grammar =
"grammar T;\n" +
@@ -261,7 +261,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "abc, 2" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardLookahead() /*throws Exception*/
{
string grammar =
@@ -284,7 +284,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "alt 1" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardLookahead2() /*throws Exception*/
{
string grammar =
@@ -310,7 +310,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "alt 1" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardLookahead3() /*throws Exception*/
{
string grammar =
@@ -336,7 +336,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "alt 1" + NewLine, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcardPlusLookahead() /*throws Exception*/
{
string grammar =
diff --git a/Antlr3.Test/TestTreeWizard.cs b/Antlr3.Test/TestTreeWizard.cs
index 3d3fe9a..6c0b938 100644
--- a/Antlr3.Test/TestTreeWizard.cs
+++ b/Antlr3.Test/TestTreeWizard.cs
@@ -46,7 +46,7 @@ namespace AntlrUnitTests
new string[] { "", "", "", "", "", "A", "B", "C", "D", "E", "ID", "VAR" };
protected static readonly ITreeAdaptor adaptor = new CommonTreeAdaptor();

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleNode() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "ID" );
@@ -55,7 +55,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleNodeWithArg() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "ID[foo]" );
@@ -64,7 +64,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleNodeTree() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A)" );
@@ -73,7 +73,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleLevelTree() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B C D)" );
@@ -82,7 +82,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestListTree() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(nil A B C)" );
@@ -91,14 +91,14 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestInvalidListTree() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "A B C" );
Assert.IsNull(t);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDoubleLevelTree() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A (B C) (B D) E)" );
@@ -107,7 +107,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleNodeIndex() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "ID" );
@@ -117,7 +117,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNoRepeatsIndex() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B C D)" );
@@ -127,7 +127,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRepeatsIndex() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B (A C B) B D D)" );
@@ -152,7 +152,7 @@ namespace AntlrUnitTests
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNoRepeatsVisit() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B C D)" );
@@ -163,7 +163,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestNoRepeatsVisit2() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B (A C B) B D D)" );
@@ -175,7 +175,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRepeatsVisit() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B (A C B) B D D)" );
@@ -187,7 +187,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRepeatsVisit2() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B (A C B) B D D)" );
@@ -220,7 +220,7 @@ namespace AntlrUnitTests
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRepeatsVisitWithContext() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B (A C B) B D D)" );
@@ -232,7 +232,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestRepeatsVisitWithNullParentAndContext() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B (A C B) B D D)" );
@@ -244,7 +244,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestVisitPattern() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B C (A B) D)" );
@@ -256,7 +256,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestVisitPatternMultiple() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B C (A B) (D (A B)))" );
@@ -286,7 +286,7 @@ namespace AntlrUnitTests

}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestVisitPatternMultipleWithLabels() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B C (A[foo] B[bar]) (D (A[big] B[dog])))" );
@@ -298,7 +298,7 @@ namespace AntlrUnitTests
Assert.AreEqual( expecting, found );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParse() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B C)" );
@@ -306,7 +306,7 @@ namespace AntlrUnitTests
Assert.IsTrue( valid );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParseSingleNode() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "A" );
@@ -314,7 +314,7 @@ namespace AntlrUnitTests
Assert.IsTrue( valid );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParseFlatTree() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(nil A B C)" );
@@ -322,7 +322,7 @@ namespace AntlrUnitTests
Assert.IsTrue( valid );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestWildcard() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B C)" );
@@ -330,7 +330,7 @@ namespace AntlrUnitTests
Assert.IsTrue( valid );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParseWithText() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B[foo] C[bar])" );
@@ -340,7 +340,7 @@ namespace AntlrUnitTests
Assert.IsTrue( valid );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParseWithText2()
{
TreeWizard wiz = new TreeWizard(adaptor, tokens);
@@ -351,7 +351,7 @@ namespace AntlrUnitTests
Assert.AreEqual("(A T__32 (C (D a)))", t.ToStringTree());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParseWithTextFails() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B C)" );
@@ -359,7 +359,7 @@ namespace AntlrUnitTests
Assert.IsTrue( !valid ); // fails
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParseLabels() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B C)" );
@@ -371,7 +371,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "C", labels.get( "c" ).ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParseWithWildcardLabels() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B C)" );
@@ -382,7 +382,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "C", labels.get( "c" ).ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParseLabelsAndTestText() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B[foo] C)" );
@@ -394,7 +394,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "C", labels.get( "c" ).ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestParseLabelsInNestedTree() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A (B C) (D E))" );
@@ -408,7 +408,7 @@ namespace AntlrUnitTests
Assert.AreEqual( "E", labels.get( "e" ).ToString() );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestEquals() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t1 = (CommonTree)wiz.Create( "(A B C)" );
@@ -417,7 +417,7 @@ namespace AntlrUnitTests
Assert.IsTrue( same );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestEqualsWithText() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t1 = (CommonTree)wiz.Create( "(A B[foo] C)" );
@@ -426,7 +426,7 @@ namespace AntlrUnitTests
Assert.IsTrue( same );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestEqualsWithMismatchedText() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t1 = (CommonTree)wiz.Create( "(A B[foo] C)" );
@@ -435,7 +435,7 @@ namespace AntlrUnitTests
Assert.IsTrue( !same );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestFindPattern() /*throws Exception*/ {
TreeWizard wiz = new TreeWizard( adaptor, tokens );
CommonTree t = (CommonTree)wiz.Create( "(A B C (A[foo] B[bar]) (D (A[big] B[dog])))" );
diff --git a/Antlr3.Test/TestTrees.cs b/Antlr3.Test/TestTrees.cs
index 6f90b20..9b8eb0e 100644
--- a/Antlr3.Test/TestTrees.cs
+++ b/Antlr3.Test/TestTrees.cs
@@ -69,14 +69,14 @@ namespace AntlrUnitTests
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestSingleNode() /*throws Exception*/ {
CommonTree t = new CommonTree( new CommonToken( 101 ) );
Assert.IsNull( t.Parent );
Assert.AreEqual( -1, t.ChildIndex );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestTwoChildrenOfNilRoot() /*throws Exception*/ {
CommonTree root_0 = (CommonTree)adaptor.Nil();
CommonTree t = new V( 101, 2 );
@@ -89,7 +89,7 @@ namespace AntlrUnitTests
Assert.AreEqual( 1, u.ChildIndex );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void Test4Nodes() /*throws Exception*/ {
// ^(101 ^(102 103) 104)
CommonTree r0 = new CommonTree( new CommonToken( 101 ) );
@@ -101,7 +101,7 @@ namespace AntlrUnitTests
Assert.AreEqual( -1, r0.ChildIndex );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestList() /*throws Exception*/ {
// ^(nil 101 102 103)
CommonTree r0 = new CommonTree( (IToken)null );
@@ -120,7 +120,7 @@ namespace AntlrUnitTests
Assert.AreEqual( 2, c2.ChildIndex );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestList2() /*throws Exception*/ {
// Add child ^(nil 101 102 103) to root 5
// should pull 101 102 103 directly to become 5's child list
@@ -146,7 +146,7 @@ namespace AntlrUnitTests
Assert.AreEqual( 2, c2.ChildIndex );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestAddListToExistChildren() /*throws Exception*/ {
// Add child ^(nil 101 102 103) to root ^(5 6)
// should add 101 102 103 to end of 5's child list
@@ -173,7 +173,7 @@ namespace AntlrUnitTests
Assert.AreEqual( 3, c2.ChildIndex );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestDupTree() /*throws Exception*/ {
// ^(101 ^(102 103 ^(106 107) ) 104 105)
CommonTree r0 = new CommonTree( new CommonToken( 101 ) );
@@ -193,7 +193,7 @@ namespace AntlrUnitTests
dup.SanityCheckParentAndChildIndexes();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestBecomeRoot() /*throws Exception*/ {
// 5 becomes new root of ^(nil 101 102 103)
CommonTree newRoot = new CommonTree( new CommonToken( 5 ) );
@@ -208,7 +208,7 @@ namespace AntlrUnitTests
newRoot.SanityCheckParentAndChildIndexes();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestBecomeRoot2() /*throws Exception*/ {
// 5 becomes new root of ^(101 102 103)
CommonTree newRoot = new CommonTree( new CommonToken( 5 ) );
@@ -222,7 +222,7 @@ namespace AntlrUnitTests
newRoot.SanityCheckParentAndChildIndexes();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestBecomeRoot3() /*throws Exception*/ {
// ^(nil 5) becomes new root of ^(nil 101 102 103)
CommonTree newRoot = new CommonTree( (IToken)null );
@@ -238,7 +238,7 @@ namespace AntlrUnitTests
newRoot.SanityCheckParentAndChildIndexes();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestBecomeRoot5() /*throws Exception*/ {
// ^(nil 5) becomes new root of ^(101 102 103)
CommonTree newRoot = new CommonTree( (IToken)null );
@@ -253,7 +253,7 @@ namespace AntlrUnitTests
newRoot.SanityCheckParentAndChildIndexes();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestBecomeRoot6() /*throws Exception*/ {
// emulates construction of ^(5 6)
CommonTree root_0 = (CommonTree)adaptor.Nil();
@@ -269,7 +269,7 @@ namespace AntlrUnitTests

// Test replaceChildren

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
[ExpectedException(typeof(ArgumentException))]
public void TestReplaceWithNoChildren() /*throws Exception*/ {
CommonTree t = new CommonTree( new CommonToken( 101 ) );
@@ -277,7 +277,7 @@ namespace AntlrUnitTests
t.ReplaceChildren( 0, 0, newChild );
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceWithOneChildren() /*throws Exception*/ {
// assume token type 99 and use text
CommonTree t = new CommonTree( new CommonToken( 99, "a" ) );
@@ -291,7 +291,7 @@ namespace AntlrUnitTests
t.SanityCheckParentAndChildIndexes();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceInMiddle() /*throws Exception*/ {
CommonTree t = new CommonTree( new CommonToken( 99, "a" ) );
t.AddChild( new CommonTree( new CommonToken( 99, "b" ) ) );
@@ -305,7 +305,7 @@ namespace AntlrUnitTests
t.SanityCheckParentAndChildIndexes();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceAtLeft() /*throws Exception*/ {
CommonTree t = new CommonTree( new CommonToken( 99, "a" ) );
t.AddChild( new CommonTree( new CommonToken( 99, "b" ) ) ); // index 0
@@ -319,7 +319,7 @@ namespace AntlrUnitTests
t.SanityCheckParentAndChildIndexes();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceAtRight() /*throws Exception*/ {
CommonTree t = new CommonTree( new CommonToken( 99, "a" ) );
t.AddChild( new CommonTree( new CommonToken( 99, "b" ) ) );
@@ -333,7 +333,7 @@ namespace AntlrUnitTests
t.SanityCheckParentAndChildIndexes();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceOneWithTwoAtLeft() /*throws Exception*/ {
CommonTree t = new CommonTree( new CommonToken( 99, "a" ) );
t.AddChild( new CommonTree( new CommonToken( 99, "b" ) ) );
@@ -350,7 +350,7 @@ namespace AntlrUnitTests
t.SanityCheckParentAndChildIndexes();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceOneWithTwoAtRight() /*throws Exception*/ {
CommonTree t = new CommonTree( new CommonToken( 99, "a" ) );
t.AddChild( new CommonTree( new CommonToken( 99, "b" ) ) );
@@ -367,7 +367,7 @@ namespace AntlrUnitTests
t.SanityCheckParentAndChildIndexes();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceOneWithTwoInMiddle() /*throws Exception*/ {
CommonTree t = new CommonTree( new CommonToken( 99, "a" ) );
t.AddChild( new CommonTree( new CommonToken( 99, "b" ) ) );
@@ -384,7 +384,7 @@ namespace AntlrUnitTests
t.SanityCheckParentAndChildIndexes();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceTwoWithOneAtLeft() /*throws Exception*/ {
CommonTree t = new CommonTree( new CommonToken( 99, "a" ) );
t.AddChild( new CommonTree( new CommonToken( 99, "b" ) ) );
@@ -399,7 +399,7 @@ namespace AntlrUnitTests
t.SanityCheckParentAndChildIndexes();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceTwoWithOneAtRight() /*throws Exception*/ {
CommonTree t = new CommonTree( new CommonToken( 99, "a" ) );
t.AddChild( new CommonTree( new CommonToken( 99, "b" ) ) );
@@ -414,7 +414,7 @@ namespace AntlrUnitTests
t.SanityCheckParentAndChildIndexes();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceAllWithOne() /*throws Exception*/ {
CommonTree t = new CommonTree( new CommonToken( 99, "a" ) );
t.AddChild( new CommonTree( new CommonToken( 99, "b" ) ) );
@@ -429,7 +429,7 @@ namespace AntlrUnitTests
t.SanityCheckParentAndChildIndexes();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.Antlr3)]
public void TestReplaceAllWithTwo() /*throws Exception*/ {
CommonTree t = new CommonTree( new CommonToken( 99, "a" ) );
t.AddChild( new CommonTree( new CommonToken( 99, "b" ) ) );
diff --git a/Antlr4.Test.StringTemplate/Antlr4.Test.StringTemplate.csproj b/Antlr4.Test.StringTemplate/Antlr4.Test.StringTemplate.csproj
index 352d26b..345ef04 100644
--- a/Antlr4.Test.StringTemplate/Antlr4.Test.StringTemplate.csproj
+++ b/Antlr4.Test.StringTemplate/Antlr4.Test.StringTemplate.csproj
@@ -48,6 +48,7 @@
<Compile Include="Extensions\ListExtensions.cs" />
<Compile Include="Properties\AssemblyInfo.cs" />
<Compile Include="TestAggregates.cs" />
+    <Compile Include="TestCategories.cs" />
<Compile Include="TestNoNewlineTemplates.cs" />
<Compile Include="TestTemplateNames.cs" />
<Compile Include="TestVisualizer.cs" />
diff --git a/Antlr4.Test.StringTemplate/TestAggregates.cs b/Antlr4.Test.StringTemplate/TestAggregates.cs
index 9d6dd25..90b91a5 100644
--- a/Antlr4.Test.StringTemplate/TestAggregates.cs
+++ b/Antlr4.Test.StringTemplate/TestAggregates.cs
@@ -38,7 +38,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestAggregates : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestApplyAnonymousTemplateToAggregateAttribute()
{
Template st = new Template("<items:{it|<it.id>: <it.lastName>, <it.firstName>\n}>");
@@ -79,7 +79,7 @@ namespace Antlr4.Test.StringTemplate
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestComplicatedIndirectTemplateApplication()
{
string templates =
diff --git a/Antlr4.Test.StringTemplate/TestCategories.cs b/Antlr4.Test.StringTemplate/TestCategories.cs
new file mode 100644
index 0000000..66c22b9
--- /dev/null
+++ b/Antlr4.Test.StringTemplate/TestCategories.cs
@@ -0,0 +1,7 @@
+﻿namespace Antlr4.Test.StringTemplate
+{
+    internal static class TestCategories
+    {
+        public const string ST4 = "ST4";
+    }
+}
diff --git a/Antlr4.Test.StringTemplate/TestCompiler.cs b/Antlr4.Test.StringTemplate/TestCompiler.cs
index 9aa984c..8e1afa7 100644
--- a/Antlr4.Test.StringTemplate/TestCompiler.cs
+++ b/Antlr4.Test.StringTemplate/TestCompiler.cs
@@ -47,7 +47,7 @@ namespace Antlr4.Test.StringTemplate
base.setUpImpl();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAttr()
{
string template = "hi <name>";
@@ -63,7 +63,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestInclude()
{
string template = "hi <foo()>";
@@ -77,7 +77,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIncludeWithPassThrough()
{
string template = "hi <foo(...)>";
@@ -91,7 +91,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIncludeWithPartialPassThrough()
{
string template = "hi <foo(x=y,...)>";
@@ -105,7 +105,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSuperInclude()
{
string template = "<super.foo()>";
@@ -120,7 +120,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSuperIncludeWithArgs()
{
string template = "<super.foo(a,{b})>";
@@ -134,7 +134,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSuperIncludeWithNamedArgs()
{
string template = "<super.foo(x=a,y={b})>";
@@ -148,7 +148,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIncludeWithArgs()
{
string template = "hi <foo(a,b)>";
@@ -162,7 +162,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAnonIncludeArgs()
{
string template = "<({ a, b | <a><b>})>";
@@ -176,7 +176,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAnonIncludeArgMismatch()
{
ITemplateErrorListener errors = new ErrorBuffer();
@@ -189,7 +189,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, errors.ToString());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAnonIncludeArgMismatch2()
{
ITemplateErrorListener errors = new ErrorBuffer();
@@ -202,7 +202,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, errors.ToString());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAnonIncludeArgMismatch3()
{
ITemplateErrorListener errors = new ErrorBuffer();
@@ -215,7 +215,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, errors.ToString());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndirectIncludeWitArgs()
{
string template = "hi <(foo)(a,b)>";
@@ -229,7 +229,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestProp()
{
string template = "hi <a.b>";
@@ -243,7 +243,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestProp2()
{
string template = "<u.id>: <u.name>";
@@ -258,7 +258,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMap()
{
string template = "<name:bold()>";
@@ -272,7 +272,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMapAsOption()
{
string template = "<a; wrap=name:bold()>";
@@ -287,7 +287,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMapArg()
{
string template = "<name:bold(x)>";
@@ -301,7 +301,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndirectMapArg()
{
string template = "<name:(t)(x)>";
@@ -315,7 +315,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRepeatedMap()
{
string template = "<name:bold():italics()>";
@@ -329,7 +329,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRepeatedMapArg()
{
string template = "<name:bold(x):italics(x,y)>";
@@ -344,7 +344,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRotMap()
{
string template = "<name:bold(),italics()>";
@@ -358,7 +358,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRotMapArg()
{
string template = "<name:bold(x),italics()>";
@@ -372,7 +372,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestZipMap()
{
string template = "<names,phones:bold()>";
@@ -386,7 +386,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestZipMapArg()
{
string template = "<names,phones:bold(x)>";
@@ -400,7 +400,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAnonMap()
{
string template = "<name:{n | <n>}>";
@@ -414,7 +414,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAnonZipMap()
{
string template = "<a,b:{x,y | <x><y>}>";
@@ -428,7 +428,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIf()
{
string template = "go: <if(name)>hi, foo<endif>";
@@ -442,7 +442,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIfElse()
{
string template = "go: <if(name)>hi, foo<else>bye<endif>";
@@ -461,7 +461,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestElseIf()
{
string template = "go: <if(name)>hi, foo<elseif(user)>a user<endif>";
@@ -482,7 +482,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestElseIfElse()
{
string template = "go: <if(name)>hi, foo<elseif(user)>a user<else>bye<endif>";
@@ -505,7 +505,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestOption()
{
string template = "hi <name; separator=\"x\">";
@@ -519,7 +519,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestOptionAsTemplate()
{
string template = "hi <name; separator={, }>";
@@ -533,7 +533,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestOptions()
{
string template = "hi <name; anchor, wrap=foo(), separator=\", \">";
@@ -557,7 +557,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(asmExpected, asmResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmptyList()
{
string template = "<[]>";
@@ -570,7 +570,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestList()
{
string template = "<[a,b]>";
@@ -583,7 +583,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmbeddedRegion()
{
string template = "<@r>foo<@end>";
@@ -598,7 +598,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(stringsExpected, stringsResult);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRegion()
{
string template = "x:<@r()>";
diff --git a/Antlr4.Test.StringTemplate/TestCoreBasics.cs b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
index 1f0c7d1..b755aff 100644
--- a/Antlr4.Test.StringTemplate/TestCoreBasics.cs
+++ b/Antlr4.Test.StringTemplate/TestCoreBasics.cs
@@ -43,7 +43,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestCoreBasics : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNullAttr()
{
string template = "hi <name>!";
@@ -54,7 +54,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAttr()
{
string template = "hi <name>!";
@@ -65,7 +65,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestChainAttr()
{
string template = "<x>:<names>!";
@@ -76,7 +76,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSetUnknownAttr()
{
string templates =
@@ -99,7 +99,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMultiAttr()
{
string template = "hi <name>!";
@@ -112,7 +112,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAttrIsList()
{
string template = "hi <name>!";
@@ -128,7 +128,7 @@ namespace Antlr4.Test.StringTemplate
Assert.IsTrue(names.Count == 2); // my names list is still just 2
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAttrIsArray()
{
string template = "hi <name>!";
@@ -142,7 +142,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestProp()
{
string template = "<u.id>: <u.name>"; // checks field and method getter
@@ -153,7 +153,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestPropWithNoAttr()
{
string template = "<foo.a>: <ick>";
@@ -164,7 +164,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMapAcrossDictionaryUsesKeys()
{
string template = "<foo:{f | <f>}>"; // checks field and method getter
@@ -175,7 +175,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSTProp()
{
string template = "<t.x>"; // get x attr of template t
@@ -188,7 +188,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestBooleanISProp()
{
string template = "<t.isManager>"; // call isManager
@@ -199,7 +199,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestBooleanHASProp()
{
string template = "<t.hasParkingSpot>"; // call hasParkingSpot
@@ -210,7 +210,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNullAttrProp()
{
string template = "<u.id>: <u.name>";
@@ -220,7 +220,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNoSuchProp()
{
ErrorBufferAllErrors errors = new ErrorBufferAllErrors();
@@ -237,7 +237,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual("Antlr4.Test.StringTemplate.BaseTest+User.qqq", e.PropertyName);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNullIndirectProp()
{
ErrorBufferAllErrors errors = new ErrorBufferAllErrors();
@@ -255,7 +255,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual("Antlr4.Test.StringTemplate.BaseTest+User.null", e.PropertyName);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestPropConvertsToString()
{
ErrorBufferAllErrors errors = new ErrorBufferAllErrors();
@@ -273,7 +273,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual("Antlr4.Test.StringTemplate.BaseTest+User.100", e.PropertyName);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestInclude()
{
string template = "Load <box()>;";
@@ -286,7 +286,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIncludeWithArg()
{
string template = "Load <box(\"arg\")>;";
@@ -299,7 +299,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIncludeWithArg2()
{
string template = "Load <box(\"arg\", foo())>;";
@@ -312,7 +312,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIncludeWithEmptySubtemplateArg()
{
string template = "load <box({})>;";
@@ -325,7 +325,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIncludeWithNestedArgs()
{
string template = "Load <box(foo(\"arg\"))>;";
@@ -338,7 +338,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestPassThru()
{
string templates =
@@ -353,7 +353,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestPassThruWithDefaultValue()
{
string templates =
@@ -367,7 +367,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestPassThruWithDefaultValueThatLacksDefinitionAbove()
{
string templates =
@@ -381,7 +381,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestPassThruPartialArgs()
{
string templates =
@@ -396,7 +396,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestPassThruNoMissingArgs()
{
string templates =
@@ -411,7 +411,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefineTemplate()
{
TemplateGroup group = new TemplateGroup();
@@ -427,7 +427,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMap()
{
TemplateGroup group = new TemplateGroup();
@@ -443,7 +443,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndirectMap()
{
TemplateGroup group = new TemplateGroup();
@@ -460,7 +460,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMapWithExprAsTemplateName()
{
string templates =
@@ -478,7 +478,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestParallelMap()
{
TemplateGroup group = new TemplateGroup();
@@ -496,7 +496,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestParallelMapWith3Versus2Elements()
{
TemplateGroup group = new TemplateGroup();
@@ -513,7 +513,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestParallelMapThenMap()
{
TemplateGroup group = new TemplateGroup();
@@ -531,7 +531,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMapThenParallelMap()
{
TemplateGroup group = new TemplateGroup();
@@ -549,7 +549,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMapIndexes()
{
TemplateGroup group = new TemplateGroup();
@@ -566,7 +566,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMapIndexes2()
{
TemplateGroup group = new TemplateGroup();
@@ -582,7 +582,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMapSingleValue()
{
TemplateGroup group = new TemplateGroup();
@@ -595,7 +595,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMapNullValue()
{
TemplateGroup group = new TemplateGroup();
@@ -607,7 +607,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMapNullValueInList()
{
TemplateGroup group = new TemplateGroup();
@@ -623,7 +623,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRepeatedMap()
{
TemplateGroup group = new TemplateGroup();
@@ -640,7 +640,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRoundRobinMap()
{
TemplateGroup group = new TemplateGroup();
@@ -657,7 +657,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestTrueCond()
{
string template = "<if(name)>works<endif>";
@@ -668,7 +668,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmptyIFTemplate()
{
string template = "<if(x)>fail<elseif(name)><endif>";
@@ -679,7 +679,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCondParens()
{
string template = "<if(!(x||y)&&!z)>works<endif>";
@@ -689,7 +689,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestFalseCond()
{
string template = "<if(name)>works<endif>";
@@ -699,7 +699,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestFalseCond2()
{
string template = "<if(name)>works<endif>";
@@ -710,7 +710,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestFalseCondWithFormalArgs()
{
// insert of indent instr was not working; ok now
@@ -731,7 +731,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestElseIf2()
{
string template =
@@ -743,7 +743,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestElseIf3()
{
string template =
@@ -755,7 +755,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNotTrueCond()
{
string template = "<if(!name)>works<endif>";
@@ -766,7 +766,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNotFalseCond()
{
string template = "<if(!name)>works<endif>";
@@ -776,7 +776,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestParensInConditonal()
{
string template = "<if((a||b)&&(c||d))>works<endif>";
@@ -790,7 +790,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestParensInConditonal2()
{
string template = "<if((!a||b)&&!(c||d))>broken<else>works<endif>";
@@ -804,7 +804,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestTrueCondWithElse()
{
string template = "<if(name)>works<else>fail<endif>";
@@ -815,7 +815,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestFalseCondWithElse()
{
string template = "<if(name)>fail<else>works<endif>";
@@ -825,7 +825,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestElseIf()
{
string template = "<if(name)>fail<elseif(id)>works<else>fail<endif>";
@@ -836,7 +836,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestElseIfNoElseAllFalse()
{
string template = "<if(name)>fail<elseif(id)>fail<endif>";
@@ -846,7 +846,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestElseIfAllExprFalse()
{
string template = "<if(name)>fail<elseif(id)>fail<else>works<endif>";
@@ -856,7 +856,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestOr()
{
string template = "<if(name||notThere)>works<else>fail<endif>";
@@ -867,7 +867,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMapConditionAndEscapeInside()
{
string template = "<if(m.name)>works \\\\<endif>";
@@ -880,7 +880,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAnd()
{
string template = "<if(name&&notThere)>fail<else>works<endif>";
@@ -891,7 +891,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAndNot()
{
string template = "<if(name&&!notThere)>works<else>fail<endif>";
@@ -902,7 +902,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCharLiterals()
{
Template st = new Template(
@@ -931,7 +931,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestUnicodeLiterals()
{
Template st = new Template(
@@ -954,7 +954,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSubtemplateExpr()
{
string template = "<{name\n}>";
@@ -965,7 +965,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSeparator()
{
TemplateGroup group = new TemplateGroup();
@@ -979,7 +979,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSeparatorInList()
{
TemplateGroup group = new TemplateGroup();
@@ -1001,7 +1001,7 @@ namespace Antlr4.Test.StringTemplate
* but you had called render() with a no-indent-writer?  now *part* your
* input is indented!
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEarlyEvalIndent()
{
string templates =
@@ -1025,7 +1025,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEarlyEvalNoIndent()
{
string templates =
@@ -1053,7 +1053,7 @@ namespace Antlr4.Test.StringTemplate
}


-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestArrayOfTemplates()
{
string template = "<foo>!";
@@ -1065,7 +1065,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestArrayOfTemplatesInTemplate()
{
string template = "<foo>!";
@@ -1079,7 +1079,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestListOfTemplates()
{
string template = "<foo>!";
@@ -1091,7 +1091,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestListOfTemplatesInTemplate()
{
string template = "<foo>!";
@@ -1105,7 +1105,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void Playing()
{
string template = "<a:t(x,y),u()>";
diff --git a/Antlr4.Test.StringTemplate/TestDebugEvents.cs b/Antlr4.Test.StringTemplate/TestDebugEvents.cs
index 9f27cd8..ae83a76 100644
--- a/Antlr4.Test.StringTemplate/TestDebugEvents.cs
+++ b/Antlr4.Test.StringTemplate/TestDebugEvents.cs
@@ -44,7 +44,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestDebugEvents : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestString()
{
string templates =
@@ -61,7 +61,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAttribute()
{
string templates =
@@ -80,7 +80,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestTemplateCall()
{
string templates =
@@ -104,7 +104,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEvalExprEventForSpecialCharacter()
{
string templates = "t() ::= <<[<\\n>]>>\n";
diff --git a/Antlr4.Test.StringTemplate/TestDictionaries.cs b/Antlr4.Test.StringTemplate/TestDictionaries.cs
index b82d25d..47a4530 100644
--- a/Antlr4.Test.StringTemplate/TestDictionaries.cs
+++ b/Antlr4.Test.StringTemplate/TestDictionaries.cs
@@ -42,7 +42,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestDictionaries : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDict()
{
string templates =
@@ -59,7 +59,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmptyDictionary()
{
string templates =
@@ -74,7 +74,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(0, errors.Errors.Count);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictValuesAreTemplates()
{
string templates =
@@ -93,7 +93,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictKeyLookupViaTemplate()
{
// Make sure we try rendering stuff to string if not found as regular object
@@ -112,7 +112,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictKeyLookupAsNonToStringableObject()
{
// Make sure we try rendering stuff to string if not found as regular object
@@ -133,7 +133,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictMissingDefaultValueIsEmpty()
{
string templates =
@@ -151,7 +151,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictMissingDefaultValueIsEmptyForNullKey()
{
string templates =
@@ -169,7 +169,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictHiddenByFormalArg()
{
string templates =
@@ -186,7 +186,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictEmptyValueAndAngleBracketStrings()
{
string templates =
@@ -203,7 +203,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictDefaultValue()
{
string templates =
@@ -220,7 +220,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictNullKeyGetsDefaultValue()
{
string templates =
@@ -237,7 +237,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictEmptyDefaultValue()
{
string templates =
@@ -254,7 +254,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictDefaultValueIsKey()
{
string templates =
@@ -271,7 +271,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictWithoutIteration()
{
string templates =
@@ -297,7 +297,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictWithoutIteration2()
{
string templates =
@@ -324,7 +324,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictWithoutIteration3()
{
string templates =
@@ -356,7 +356,7 @@ namespace Antlr4.Test.StringTemplate
/**
* Test that a map can have only the default entry.
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictDefaultStringAsKey()
{
string templates =
@@ -376,7 +376,7 @@ namespace Antlr4.Test.StringTemplate
/**
* Test that a map can return a <b>string</b> with the word: default.
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictDefaultIsDefaultString()
{
string templates =
@@ -391,7 +391,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictViaEnclosingTemplates()
{
string templates =
@@ -409,7 +409,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDictViaEnclosingTemplates2()
{
string templates =
@@ -429,7 +429,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAccessDictionaryFromAnonymousTemplate()
{
string dir = tmpdir;
@@ -448,7 +448,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAccessDictionaryFromAnonymousTemplateInRegion()
{
string dir = tmpdir;
diff --git a/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs b/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
index 7bc8f10..2b7671b 100644
--- a/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
+++ b/Antlr4.Test.StringTemplate/TestDollarDelimiters.cs
@@ -39,7 +39,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestDollarDelimiters : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAttr()
{
string template = "hi $name$!";
@@ -50,7 +50,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestParallelMap()
{
TemplateGroup group = new TemplateGroup('$', '$');
@@ -68,7 +68,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRefToAnotherTemplateInSameGroup()
{
string dir = tmpdir;
@@ -83,7 +83,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefaultArgument()
{
string templates =
diff --git a/Antlr4.Test.StringTemplate/TestFunctions.cs b/Antlr4.Test.StringTemplate/TestFunctions.cs
index 5c5fa09..e223a51 100644
--- a/Antlr4.Test.StringTemplate/TestFunctions.cs
+++ b/Antlr4.Test.StringTemplate/TestFunctions.cs
@@ -40,7 +40,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestFunctions : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestFirst()
{
string template = "<first(names)>";
@@ -52,7 +52,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLength()
{
string template = "<length(names)>";
@@ -64,7 +64,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLengthWithNullValues()
{
string template = "<length(names)>";
@@ -76,7 +76,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestFirstOp()
{
Template e = new Template(
@@ -89,7 +89,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestTruncOp()
{
Template e = new Template(
@@ -102,7 +102,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRestOp()
{
Template e = new Template(
@@ -115,7 +115,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRestOpEmptyList()
{
Template e = new Template(
@@ -126,7 +126,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestReUseOfRestResult()
{
string templates =
@@ -144,7 +144,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLastOp()
{
Template e = new Template(
@@ -157,7 +157,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestStripOp()
{
Template e = new Template(
@@ -173,7 +173,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLengthStrip()
{
Template e = new Template(
@@ -189,7 +189,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCombinedOp()
{
// replace first of yours with first of mine
@@ -205,7 +205,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCatListAndSingleAttribute()
{
// replace first of yours with first of mine
@@ -220,7 +220,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestReUseOfCat()
{
string templates =
@@ -241,7 +241,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCatListAndEmptyAttributes()
{
// + is overloaded to be cat strings and cat lists so the
@@ -259,7 +259,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNestedOp()
{
Template e = new Template(
@@ -272,7 +272,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestFirstWithOneAttributeOp()
{
Template e = new Template(
@@ -283,7 +283,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLastWithOneAttributeOp()
{
Template e = new Template(
@@ -294,7 +294,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLastWithLengthOneListAttributeOp()
{
Template e = new Template(
@@ -305,7 +305,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRestWithOneAttributeOp()
{
Template e = new Template(
@@ -316,7 +316,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRestWithLengthOneListAttributeOp()
{
Template e = new Template(
@@ -327,7 +327,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRepeatedRestOp()
{
Template e = new Template(
@@ -339,7 +339,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIncomingLists()
{
Template e = new Template(
@@ -351,7 +351,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestFirstWithCatAttribute()
{
Template e = new Template(
@@ -365,7 +365,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestFirstWithListOfMaps()
{
Template e = new Template(
@@ -386,7 +386,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestFirstWithListOfMaps2()
{
Template e = new Template(
@@ -406,7 +406,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestTrim()
{
Template e = new Template(
@@ -417,7 +417,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestStrlen()
{
Template e = new Template(
@@ -428,7 +428,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestReverse()
{
Template e = new Template(
diff --git a/Antlr4.Test.StringTemplate/TestGroupSyntax.cs b/Antlr4.Test.StringTemplate/TestGroupSyntax.cs
index 87df635..5e38a75 100644
--- a/Antlr4.Test.StringTemplate/TestGroupSyntax.cs
+++ b/Antlr4.Test.StringTemplate/TestGroupSyntax.cs
@@ -42,7 +42,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestGroupSyntax : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSimpleGroup()
{
string templates =
@@ -58,7 +58,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEscapedQuote()
{
// setTest(ranges) ::= "<ranges; separator=\"||\">"
@@ -76,7 +76,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMultiTemplates()
{
string templates =
@@ -100,7 +100,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSetDefaultDelimiters()
{
string templates =
@@ -116,7 +116,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSetNonDefaultDelimiters()
{
string templates =
@@ -132,7 +132,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSingleTemplateWithArgs()
{
string templates =
@@ -148,7 +148,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefaultValues()
{
string templates =
@@ -164,7 +164,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefaultValues2()
{
string templates =
@@ -180,7 +180,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefaultValueTemplateWithArg()
{
string templates =
@@ -196,7 +196,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNestedTemplateInGroupFile()
{
string templates =
@@ -212,7 +212,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNestedDefaultValueTemplate()
{
string templates =
@@ -229,7 +229,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNestedDefaultValueTemplateWithEscapes()
{
string templates =
@@ -245,7 +245,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMessedUpTemplateDoesntCauseRuntimeError()
{
string templates =
diff --git a/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs b/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
index bcd4f43..1e4580a 100644
--- a/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
+++ b/Antlr4.Test.StringTemplate/TestGroupSyntaxErrors.cs
@@ -41,7 +41,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestGroupSyntaxErrors : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMissingImportString()
{
string templates =
@@ -59,7 +59,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestImportNotString()
{
string templates =
@@ -76,7 +76,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMissingTemplate()
{
string templates =
@@ -93,7 +93,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestUnclosedTemplate()
{
string templates =
@@ -111,7 +111,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestParen()
{
string templates =
@@ -128,7 +128,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNewlineInString()
{
string templates =
@@ -145,7 +145,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestParen2()
{
string templates =
@@ -163,7 +163,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestArg()
{
string templates =
@@ -180,7 +180,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestArg2()
{
string templates =
@@ -199,7 +199,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestArg3()
{
string templates =
@@ -217,7 +217,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefaultArgsOutOfOrder()
{
string templates =
@@ -235,7 +235,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestErrorWithinTemplate()
{
string templates =
@@ -252,7 +252,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMap2()
{
string templates =
@@ -269,7 +269,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMap3()
{
string templates =
@@ -286,7 +286,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestUnterminatedString()
{
string templates =
diff --git a/Antlr4.Test.StringTemplate/TestGroups.cs b/Antlr4.Test.StringTemplate/TestGroups.cs
index 87c7e35..05656ef 100644
--- a/Antlr4.Test.StringTemplate/TestGroups.cs
+++ b/Antlr4.Test.StringTemplate/TestGroups.cs
@@ -41,7 +41,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestGroups : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSimpleGroup()
{
string dir = tmpdir;
@@ -53,7 +53,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSimpleGroupFromString()
{
string g =
@@ -66,7 +66,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestGroupWithTwoTemplates()
{
string dir = tmpdir;
@@ -80,7 +80,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSubdir()
{
// /randomdir/a and /randomdir/subdir/b
@@ -93,7 +93,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual("bar", group.GetInstanceOf("subdir/b").Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSubdirWithSubtemplate()
{
// /randomdir/a and /randomdir/subdir/b
@@ -105,7 +105,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual("ab", st.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestGroupFileInDir()
{
// /randomdir/a and /randomdir/group.stg with b and c templates
@@ -121,7 +121,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual("duh", group.GetInstanceOf("/group/c").Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSubSubdir()
{
// /randomdir/a and /randomdir/subdir/b
@@ -136,7 +136,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestGroupFileInSubDir()
{
// /randomdir/a and /randomdir/group.stg with b and c templates
@@ -155,7 +155,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDupDef()
{
string dir = tmpdir;
@@ -172,7 +172,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAlias()
{
string dir = tmpdir;
@@ -187,7 +187,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAliasWithArgs()
{
string dir = tmpdir;
@@ -204,7 +204,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSimpleDefaultArg()
{
string dir = tmpdir;
@@ -219,7 +219,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefaultArgument()
{
string templates =
@@ -237,7 +237,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestBooleanDefaultArguments()
{
string templates =
@@ -255,7 +255,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefaultArgument2()
{
string templates =
@@ -270,7 +270,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSubtemplateAsDefaultArgSeesOtherArgs()
{
string templates =
@@ -290,7 +290,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEarlyEvalOfDefaultArgs()
{
string templates =
@@ -303,7 +303,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefaultArgumentAsSimpleTemplate()
{
string templates =
@@ -329,7 +329,7 @@ namespace Antlr4.Test.StringTemplate
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefaultArgumentManuallySet()
{
// set arg f manually for stat(f=f)
@@ -348,7 +348,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefaultArgumentSeesVarFromDynamicScoping()
{
string templates =
@@ -366,7 +366,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefaultArgumentImplicitlySet2()
{
// f of stat is implicit first arg
@@ -385,7 +385,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefaultArgumentAsTemplate()
{
string templates =
@@ -405,7 +405,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefaultArgumentAsTemplate2()
{
string templates =
@@ -425,7 +425,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDoNotUseDefaultArgument()
{
string templates =
@@ -450,7 +450,7 @@ namespace Antlr4.Test.StringTemplate
*
* @throws Exception
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestHandleBuggyDefaultArgument()
{
string templates = "main(a={(<\"\")>}) ::= \"\"";
@@ -478,7 +478,7 @@ namespace Antlr4.Test.StringTemplate
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefaultArgumentInParensToEvalEarly()
{
string templates =
@@ -495,7 +495,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestTrueFalseArgs()
{
string groupFile =
@@ -509,7 +509,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNamedArgsInOrder()
{
string dir = tmpdir;
@@ -524,7 +524,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNamedArgsOutOfOrder()
{
string dir = tmpdir;
@@ -539,7 +539,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestUnknownNamedArg()
{
string dir = tmpdir;
@@ -559,7 +559,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMissingNamedArg()
{
string dir = tmpdir;
@@ -578,7 +578,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNamedArgsNotAllowInIndirectInclude()
{
string dir = tmpdir;
@@ -597,7 +597,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCantSeeGroupDirIfGroupFileOfSameName()
{
string dir = tmpdir;
@@ -613,7 +613,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(null, st);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestUnloadingSimpleGroup()
{
string dir = tmpdir;
@@ -640,7 +640,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestUnloadingGroupFile()
{
string dir = tmpdir;
@@ -665,7 +665,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestGroupFileImport()
{
// /randomdir/group1.stg (a template) and /randomdir/group2.stg with b.
@@ -699,7 +699,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual("group2", stb.impl.NativeGroup.Name);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestUnloadWithImports()
{
writeFile(tmpdir, "t.stg",
diff --git a/Antlr4.Test.StringTemplate/TestImports.cs b/Antlr4.Test.StringTemplate/TestImports.cs
index ad06afe..617fb87 100644
--- a/Antlr4.Test.StringTemplate/TestImports.cs
+++ b/Antlr4.Test.StringTemplate/TestImports.cs
@@ -40,7 +40,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestImports : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestImportDir()
{
/*
@@ -69,7 +69,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestImportRelativeDir()
{
/*
@@ -97,7 +97,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestImportGroupFileSameDir()
{
/*
@@ -123,7 +123,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestImportRelativeGroupFile()
{
/*
@@ -150,7 +150,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestImportTemplateFileSameDir()
{
/*
@@ -173,7 +173,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestImportRelativeTemplateFile()
{
/*
@@ -200,7 +200,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestImportTemplateFromAnotherGroupObject()
{
/*
@@ -234,7 +234,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestImportTemplateInGroupFileFromDir()
{
string dir = tmpdir;
@@ -256,7 +256,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestImportTemplateInGroupFileFromGroupFile()
{
string dir = tmpdir;
@@ -279,7 +279,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestImportTemplateFromSubdir()
{
// /randomdir/x/subdir/a and /randomdir/y/subdir/b
@@ -298,7 +298,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestImportTemplateFromGroupFile()
{
// /randomdir/x/subdir/a and /randomdir/y/subdir.stg which has a and b
@@ -325,7 +325,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestPolymorphicTemplateReference()
{
string dir1 = Path.Combine(tmpdir, "d1");
@@ -354,7 +354,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSuper()
{
string dir1 = Path.Combine(tmpdir, "d1");
@@ -375,7 +375,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestUnloadImportedTemplate()
{
string dir1 = Path.Combine(tmpdir, "d1");
diff --git a/Antlr4.Test.StringTemplate/TestIndentation.cs b/Antlr4.Test.StringTemplate/TestIndentation.cs
index 726bc2e..e5ad2c0 100644
--- a/Antlr4.Test.StringTemplate/TestIndentation.cs
+++ b/Antlr4.Test.StringTemplate/TestIndentation.cs
@@ -39,7 +39,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestIndentation : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndentInFrontOfTwoExpr()
{
string templates =
@@ -58,7 +58,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, t.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSimpleIndentOfAttributeList()
{
string templates =
@@ -79,7 +79,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, t.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndentOfMultilineAttributes()
{
string templates =
@@ -104,7 +104,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, t.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndentOfMultipleBlankLines()
{
string templates =
@@ -122,7 +122,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, t.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndentBetweenLeftJustifiedLiterals()
{
string templates =
@@ -146,7 +146,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, t.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNestedIndent()
{
string templates =
@@ -192,7 +192,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, t.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndentedIFWithValueExpr()
{
Template t = new Template(
@@ -208,7 +208,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndentedIFWithElse()
{
Template t = new Template(
@@ -221,7 +221,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndentedIFWithElse2()
{
Template t = new Template(
@@ -234,7 +234,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndentedIFWithNewlineBeforeText()
{
TemplateGroup group = new TemplateGroup();
@@ -252,7 +252,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndentedIFWithEndifNextLine()
{
TemplateGroup group = new TemplateGroup();
@@ -269,7 +269,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIFWithIndentOnMultipleLines()
{
Template t = new Template(
@@ -288,7 +288,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIFWithIndentAndExprOnMultipleLines()
{
Template t = new Template(
@@ -308,7 +308,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIFWithIndentAndExprWithIndentOnMultipleLines()
{
Template t = new Template(
@@ -328,7 +328,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNestedIFWithIndentOnMultipleLines()
{
Template t = new Template(
@@ -353,7 +353,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIFInSubtemplate()
{
Template t = new Template(
diff --git a/Antlr4.Test.StringTemplate/TestIndirectionAndEarlyEval.cs b/Antlr4.Test.StringTemplate/TestIndirectionAndEarlyEval.cs
index f887a1c..ff70b3f 100644
--- a/Antlr4.Test.StringTemplate/TestIndirectionAndEarlyEval.cs
+++ b/Antlr4.Test.StringTemplate/TestIndirectionAndEarlyEval.cs
@@ -39,7 +39,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestIndirectionAndEarlyEval : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEarlyEval()
{
string template = "<(name)>";
@@ -50,7 +50,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndirectTemplateInclude()
{
TemplateGroup group = new TemplateGroup();
@@ -64,7 +64,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndirectTemplateIncludeWithArgs()
{
TemplateGroup group = new TemplateGroup();
@@ -78,7 +78,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndirectTemplateIncludeViaTemplate()
{
TemplateGroup group = new TemplateGroup();
@@ -92,7 +92,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndirectProp()
{
string template = "<u.(propname)>: <u.name>";
@@ -104,7 +104,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndirectMap()
{
TemplateGroup group = new TemplateGroup();
@@ -121,7 +121,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNonStringDictLookup()
{
string template = "<m.(intkey)>";
diff --git a/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs b/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
index 473ab37..c969c15 100644
--- a/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
+++ b/Antlr4.Test.StringTemplate/TestInterptimeErrors.cs
@@ -63,7 +63,7 @@ namespace Antlr4.Test.StringTemplate
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMissingEmbeddedTemplate()
{
ErrorBuffer errors = new ErrorBuffer();
@@ -81,7 +81,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMissingSuperTemplate()
{
ErrorBuffer errors = new ErrorBuffer();
@@ -105,7 +105,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNoPropertyNotError()
{
ErrorBuffer errors = new ErrorBuffer();
@@ -124,7 +124,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestHiddenPropertyNotError()
{
ErrorBuffer errors = new ErrorBuffer();
@@ -143,7 +143,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestHiddenFieldNotError()
{
ErrorBuffer errors = new ErrorBuffer();
@@ -162,7 +162,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSoleArg()
{
ErrorBuffer errors = new ErrorBuffer();
@@ -181,7 +181,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSoleArgUsingApplySyntax()
{
ErrorBuffer errors = new ErrorBuffer();
@@ -203,7 +203,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestUndefinedAttr()
{
ErrorBuffer errors = new ErrorBuffer();
@@ -222,7 +222,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestParallelAttributeIterationWithMissingArgs()
{
ErrorBuffer errors = new ErrorBuffer();
@@ -246,7 +246,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestStringTypeMismatch()
{
ErrorBuffer errors = new ErrorBuffer();
@@ -259,7 +259,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(errorExpecting, errors.ToString());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestStringTypeMismatch2()
{
ErrorBuffer errors = new ErrorBuffer();
diff --git a/Antlr4.Test.StringTemplate/TestLexer.cs b/Antlr4.Test.StringTemplate/TestLexer.cs
index 60b4eb3..e51b8b8 100644
--- a/Antlr4.Test.StringTemplate/TestLexer.cs
+++ b/Antlr4.Test.StringTemplate/TestLexer.cs
@@ -37,7 +37,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestLexer : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestOneExpr()
{
string template = "<name>";
@@ -46,7 +46,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestOneExprSurrounded()
{
string template = "hi <name> mom";
@@ -56,7 +56,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEscDelim()
{
string template = "hi \\<name>";
@@ -68,7 +68,7 @@ namespace Antlr4.Test.StringTemplate
\signature{Laleh Shahideh, Ed.D. \\ Associate~Dean \\ Student Academic~Services \\ College of Arts and Sciences
}
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEscEsc()
{
string template = "hi \\\\ foo";
@@ -76,7 +76,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEscDelimHasCorrectStartChar()
{
string template = "<a>\\<dog";
@@ -86,7 +86,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEscChar()
{
string template = "hi \\x";
@@ -94,7 +94,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestString()
{
string template = "hi <foo(a=\">\")>";
@@ -106,7 +106,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEscInString()
{
string template = "hi <foo(a=\">\\\"\")>";
@@ -118,7 +118,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSubtemplate()
{
string template = "hi <names:{n | <n>}>";
@@ -127,7 +127,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSubtemplateNoArg()
{
string template = "hi <names:{n | <n>}>";
@@ -136,7 +136,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSubtemplateMultiArgs()
{
string template = "hi <names:{x,y | <x><y>}>"; // semantically bogus
@@ -145,7 +145,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNestedSubtemplate()
{
string template = "hi <names:{n | <n:{x|<x>}>}>";
@@ -154,7 +154,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNestedList()
{
string template =
@@ -164,7 +164,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIF()
{
string template = "<if(!name)>works<endif>";
@@ -177,7 +177,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIFNot()
{
string template = "<if(!name)>works<endif>";
@@ -190,7 +190,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIFELSE()
{
string template = "<if(name)>works<else>fail<endif>";
@@ -204,7 +204,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestELSEIF()
{
string template = "<if(name)>fail<elseif(id)>works<else>fail<endif>";
@@ -222,7 +222,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmbeddedRegion()
{
string template = "<@r>foo<@end>";
@@ -233,7 +233,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRegion()
{
string template = "<@r()>";
diff --git a/Antlr4.Test.StringTemplate/TestLineWrap.cs b/Antlr4.Test.StringTemplate/TestLineWrap.cs
index 6871ff4..d3af6a2 100644
--- a/Antlr4.Test.StringTemplate/TestLineWrap.cs
+++ b/Antlr4.Test.StringTemplate/TestLineWrap.cs
@@ -42,7 +42,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestLineWrap : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLineWrap1()
{
string templates =
@@ -69,7 +69,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLineWrapAnchored()
{
string templates =
@@ -91,7 +91,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, a.Render(40));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSubtemplatesAnchorToo()
{
string templates =
@@ -115,7 +115,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, a.Render(40));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestFortranLineWrap()
{
string templates =
@@ -132,7 +132,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, a.Render(30));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLineWrapWithDiffAnchor()
{
string templates =
@@ -153,7 +153,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, a.Render(30));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLineWrapEdgeCase()
{
string templates =
@@ -170,7 +170,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, a.Render(3));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLineWrapLastCharIsNewline()
{
string templates =
@@ -187,7 +187,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, a.Render(3));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLineWrapCharAfterWrapIsNewline()
{
string templates =
@@ -207,7 +207,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, a.Render(3));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLineWrapForList()
{
string templates =
@@ -224,7 +224,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, a.Render(4));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLineWrapForAnonTemplate()
{
string templates =
@@ -241,7 +241,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, a.Render(9));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLineWrapForAnonTemplateAnchored()
{
string templates =
@@ -258,7 +258,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, a.Render(9));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLineWrapForAnonTemplateComplicatedWrap()
{
string templates =
@@ -280,7 +280,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, t.Render(9));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndentBeyondLineWidth()
{
string templates =
@@ -300,7 +300,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, a.Render(2));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndentedExpr()
{
string templates =
@@ -319,7 +319,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, a.Render(6));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNestedIndentedExpr()
{
string templates =
@@ -340,7 +340,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, top.Render(6));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNestedWithIndentAndTrackStartOfExpr()
{
string templates =
@@ -361,7 +361,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, top.Render(7));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLineDoesNotWrapDueToLiteral()
{
string templates =
@@ -380,7 +380,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, a.Render(n));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSingleValueWrap()
{
string templates =
@@ -397,7 +397,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, m.Render(2));
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLineWrapInNestedExpr()
{
string templates =
diff --git a/Antlr4.Test.StringTemplate/TestLists.cs b/Antlr4.Test.StringTemplate/TestLists.cs
index 715d9b7..3d6fa44 100644
--- a/Antlr4.Test.StringTemplate/TestLists.cs
+++ b/Antlr4.Test.StringTemplate/TestLists.cs
@@ -39,7 +39,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestLists : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestJustCat()
{
Template e = new Template(
@@ -53,7 +53,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestListLiteralWithEmptyElements()
{
Template e = new Template(
@@ -63,7 +63,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestListLiteralWithEmptyFirstElement()
{
Template e = new Template(
@@ -73,7 +73,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLength()
{
Template e = new Template(
@@ -87,7 +87,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCat2Attributes()
{
Template e = new Template(
@@ -101,7 +101,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCat2AttributesWithApply()
{
Template e = new Template(
@@ -115,7 +115,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCat3Attributes()
{
Template e = new Template(
@@ -131,7 +131,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCatWithTemplateApplicationAsElement()
{
Template e = new Template(
@@ -145,7 +145,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCatWithIFAsElement()
{
Template e = new Template(
@@ -159,7 +159,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCatNullValues()
{
// [a, b] must behave like <a><b>; if a==b==null, blank output
@@ -173,7 +173,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCatWithNullTemplateApplicationAsElement()
{
Template e = new Template(
@@ -185,7 +185,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCatWithNestedTemplateApplicationAsElement()
{
Template e = new Template(
@@ -199,7 +199,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestListAsTemplateArgument()
{
string templates =
diff --git a/Antlr4.Test.StringTemplate/TestModelAdaptors.cs b/Antlr4.Test.StringTemplate/TestModelAdaptors.cs
index 22b9a08..1cfb9bf 100644
--- a/Antlr4.Test.StringTemplate/TestModelAdaptors.cs
+++ b/Antlr4.Test.StringTemplate/TestModelAdaptors.cs
@@ -85,7 +85,7 @@ namespace Antlr4.Test.StringTemplate
}
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSimpleAdaptor()
{
string templates =
@@ -100,7 +100,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAdaptorAndBadProp()
{
ErrorBufferAllErrors errors = new ErrorBufferAllErrors();
@@ -121,7 +121,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual("User.qqq", e.PropertyName);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAdaptorCoversSubclass()
{
string templates =
@@ -136,7 +136,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestWeCanResetAdaptorCacheInvalidatedUponAdaptorReset()
{
string templates =
@@ -156,7 +156,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSeesMostSpecificAdaptor()
{
string templates =
diff --git a/Antlr4.Test.StringTemplate/TestNoNewlineTemplates.cs b/Antlr4.Test.StringTemplate/TestNoNewlineTemplates.cs
index 23a074d..1e97148 100644
--- a/Antlr4.Test.StringTemplate/TestNoNewlineTemplates.cs
+++ b/Antlr4.Test.StringTemplate/TestNoNewlineTemplates.cs
@@ -35,7 +35,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestNoNewlineTemplates : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNoNewlineTemplate()
{
string template =
@@ -57,7 +57,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestWSNoNewlineTemplate()
{
string template =
@@ -72,7 +72,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmptyNoNewlineTemplate()
{
string template =
@@ -85,7 +85,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIgnoreIndent()
{
string template =
@@ -101,7 +101,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIgnoreIndentInIF()
{
string template =
@@ -119,7 +119,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestKeepWS()
{
string template =
@@ -134,7 +134,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRegion()
{
string template =
@@ -153,7 +153,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefineRegionInSubgroup()
{
string dir = tmpdir;
diff --git a/Antlr4.Test.StringTemplate/TestNullAndEmptyValues.cs b/Antlr4.Test.StringTemplate/TestNullAndEmptyValues.cs
index b2e0fd0..04fb616 100644
--- a/Antlr4.Test.StringTemplate/TestNullAndEmptyValues.cs
+++ b/Antlr4.Test.StringTemplate/TestNullAndEmptyValues.cs
@@ -40,7 +40,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestNullAndEmptyValues : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSeparatorWithNullFirstValue()
{
TemplateGroup group = new TemplateGroup();
@@ -54,7 +54,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestTemplateAppliedToNullIsEmpty()
{
TemplateGroup group = new TemplateGroup();
@@ -67,7 +67,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestTemplateAppliedToMissingValueIsEmpty()
{
TemplateGroup group = new TemplateGroup();
@@ -79,7 +79,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSeparatorWithNull2ndValue()
{
TemplateGroup group = new TemplateGroup();
@@ -93,7 +93,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSeparatorWithNullLastValue()
{
TemplateGroup group = new TemplateGroup();
@@ -107,7 +107,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSeparatorWithTwoNullValuesInRow()
{
TemplateGroup group = new TemplateGroup();
@@ -123,7 +123,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestTwoNullValues()
{
TemplateGroup group = new TemplateGroup();
@@ -136,7 +136,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNullListItemNotCountedForIteratorIndex()
{
TemplateGroup group = new TemplateGroup();
@@ -151,7 +151,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSizeZeroButNonNullListGetsNoOutput()
{
TemplateGroup group = new TemplateGroup();
@@ -166,7 +166,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNullListGetsNoOutput()
{
TemplateGroup group = new TemplateGroup();
@@ -180,7 +180,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmptyListGetsNoOutput()
{
TemplateGroup group = new TemplateGroup();
@@ -195,7 +195,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMissingDictionaryValue()
{
TemplateGroup group = new TemplateGroup();
@@ -207,7 +207,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMissingDictionaryValue2()
{
TemplateGroup group = new TemplateGroup();
@@ -219,7 +219,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMissingDictionaryValue3()
{
TemplateGroup group = new TemplateGroup();
@@ -231,7 +231,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSeparatorEmittedForEmptyIteratorValue()
{
Template st = new Template(
@@ -245,7 +245,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSeparatorEmittedForEmptyIteratorValue2()
{
Template st = new Template(
diff --git a/Antlr4.Test.StringTemplate/TestOptions.cs b/Antlr4.Test.StringTemplate/TestOptions.cs
index 6703ee3..b4a398d 100644
--- a/Antlr4.Test.StringTemplate/TestOptions.cs
+++ b/Antlr4.Test.StringTemplate/TestOptions.cs
@@ -41,7 +41,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestOptions : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSeparator()
{
TemplateGroup group = new TemplateGroup();
@@ -55,7 +55,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSeparatorWithSpaces()
{
TemplateGroup group = new TemplateGroup();
@@ -70,7 +70,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAttrSeparator()
{
TemplateGroup group = new TemplateGroup();
@@ -85,7 +85,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIncludeSeparator()
{
TemplateGroup group = new TemplateGroup();
@@ -101,7 +101,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSubtemplateSeparator()
{
TemplateGroup group = new TemplateGroup();
@@ -116,7 +116,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSeparatorWithNullFirstValueAndNullOption()
{
TemplateGroup group = new TemplateGroup();
@@ -130,7 +130,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSeparatorWithNull2ndValueAndNullOption()
{
TemplateGroup group = new TemplateGroup();
@@ -145,7 +145,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNullValueAndNullOption()
{
TemplateGroup group = new TemplateGroup();
@@ -157,7 +157,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestListApplyWithNullValueAndNullOption()
{
TemplateGroup group = new TemplateGroup();
@@ -171,7 +171,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDoubleListApplyWithNullValueAndNullOption()
{
// first apply sends [Template, null, Template] to second apply, which puts [] around
@@ -188,7 +188,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMissingValueAndNullOption()
{
TemplateGroup group = new TemplateGroup();
@@ -199,7 +199,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestOptionDoesntApplyToNestedTemplate()
{
TemplateGroup group = new TemplateGroup();
@@ -212,7 +212,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIllegalOption()
{
ErrorBuffer errors = new ErrorBuffer();
diff --git a/Antlr4.Test.StringTemplate/TestRegions.cs b/Antlr4.Test.StringTemplate/TestRegions.cs
index 4c2c149..9fe01b7 100644
--- a/Antlr4.Test.StringTemplate/TestRegions.cs
+++ b/Antlr4.Test.StringTemplate/TestRegions.cs
@@ -40,7 +40,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestRegions : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmbeddedRegion()
{
string dir = tmpdir;
@@ -56,7 +56,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRegion()
{
string dir = tmpdir;
@@ -72,7 +72,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefineRegionInSubgroup()
{
string dir = tmpdir;
@@ -88,7 +88,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefineRegionInSubgroupOneInSubdir()
{
string dir = tmpdir;
@@ -104,7 +104,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefineRegionInSubgroupBothInSubdir()
{
string dir = tmpdir;
@@ -120,7 +120,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefineRegionInSubgroupThatRefsSuper()
{
string dir = tmpdir;
@@ -138,7 +138,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefineRegionInSubgroup2()
{
string dir = tmpdir;
@@ -156,7 +156,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDefineRegionInSameGroup()
{
string dir = tmpdir;
@@ -171,7 +171,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAnonymousTemplateInRegion()
{
string dir = tmpdir;
@@ -188,7 +188,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCantDefineEmbeddedRegionAgain()
{
string dir = tmpdir;
@@ -205,7 +205,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCantDefineEmbeddedRegionAgainInTemplate()
{
string dir = tmpdir;
@@ -234,7 +234,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMissingRegionName()
{
string dir = tmpdir;
@@ -250,7 +250,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndentBeforeRegionIsIgnored()
{
string dir = tmpdir;
@@ -270,7 +270,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRegionOverrideStripsNewlines()
{
string dir = tmpdir;
@@ -294,7 +294,7 @@ namespace Antlr4.Test.StringTemplate

//

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRegionOverrideRefSuperRegion()
{
string dir = tmpdir;
@@ -316,7 +316,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRegionOverrideRefSuperRegion2Levels()
{
string g =
@@ -336,7 +336,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRegionOverrideRefSuperRegion3Levels()
{
string dir = tmpdir;
@@ -365,7 +365,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRegionOverrideRefSuperImplicitRegion()
{
string dir = tmpdir;
@@ -386,7 +386,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestUnknownRegionDefError()
{
string dir = tmpdir;
@@ -406,7 +406,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSuperRegionRefMissingOk()
{
string dir = tmpdir;
@@ -430,7 +430,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmbeddedRegionOnOneLine()
{
string dir = tmpdir;
@@ -449,7 +449,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmbeddedRegionTagsOnSeparateLines()
{
string dir = tmpdir;
@@ -470,7 +470,7 @@ namespace Antlr4.Test.StringTemplate
}

[Ignore]
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmbeddedSubtemplate()
{
// fix so we ignore inside {...}
diff --git a/Antlr4.Test.StringTemplate/TestRenderers.cs b/Antlr4.Test.StringTemplate/TestRenderers.cs
index 84d5a84..3a10d17 100644
--- a/Antlr4.Test.StringTemplate/TestRenderers.cs
+++ b/Antlr4.Test.StringTemplate/TestRenderers.cs
@@ -42,7 +42,7 @@ namespace Antlr4.Test.StringTemplate
public class TestRenderers : BaseTest
{
#if false // date renderer
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRendererForGroup()
{
string templates =
@@ -57,7 +57,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRendererWithFormat()
{
string templates =
@@ -72,7 +72,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRendererWithPredefinedFormat()
{
string templates =
@@ -87,7 +87,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRendererWithPredefinedFormat2()
{
string templates =
@@ -102,7 +102,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRendererWithPredefinedFormat3()
{
string templates =
@@ -118,7 +118,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRendererWithPredefinedFormat4()
{
string templates =
@@ -135,7 +135,7 @@ namespace Antlr4.Test.StringTemplate
}
#endif

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestStringRendererWithPrintfFormat()
{
string templates =
@@ -151,7 +151,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRendererWithFormatAndList()
{
string template =
@@ -167,7 +167,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRendererWithFormatAndSeparator()
{
string template =
@@ -183,7 +183,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRendererWithFormatAndSeparatorAndNull()
{
string template =
@@ -201,7 +201,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestStringRendererWithFormat_cap()
{
string templates =
@@ -217,7 +217,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestStringRendererWithTemplateInclude_cap()
{
// must toString the t() ref before applying format
@@ -236,7 +236,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestStringRendererWithSubtemplateInclude_cap()
{
// must toString the t() ref before applying format
@@ -254,7 +254,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestStringRendererWithFormat_cap_emptyValue()
{
string templates =
@@ -270,7 +270,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestStringRendererWithFormat_url_encode()
{
string templates =
@@ -286,7 +286,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestStringRendererWithFormat_xml_encode()
{
string templates =
@@ -302,7 +302,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestStringRendererWithFormat_xml_encode_null()
{
string templates =
@@ -318,7 +318,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNumberRendererWithPrintfFormat()
{
//string templates = "foo(x,y) ::= << <x; format=\"%d\"> <y; format=\"%2.3f\"> >>\n";
@@ -336,7 +336,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestInstanceofRenderer()
{
string templates =
@@ -354,7 +354,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLocaleWithNumberRenderer()
{
//string templates = "foo(x,y) ::= << <x; format=\"%,d\"> <y; format=\"%,2.3f\"> >>\n";
diff --git a/Antlr4.Test.StringTemplate/TestScopes.cs b/Antlr4.Test.StringTemplate/TestScopes.cs
index d08c4be..1858f0c 100644
--- a/Antlr4.Test.StringTemplate/TestScopes.cs
+++ b/Antlr4.Test.StringTemplate/TestScopes.cs
@@ -40,7 +40,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestScopes : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSeesEnclosingAttr()
{
string templates =
@@ -62,7 +62,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMissingArg()
{
string templates =
@@ -79,7 +79,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expectedError, errors.ToString());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestUnknownAttr()
{
string templates =
@@ -95,7 +95,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expectedError, errors.ToString());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestArgWithSameNameAsEnclosing()
{
string templates =
@@ -118,7 +118,7 @@ namespace Antlr4.Test.StringTemplate
group.Listener = ErrorManager.DefaultErrorListener;
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndexAttrVisibleLocallyOnly()
{
string templates =
diff --git a/Antlr4.Test.StringTemplate/TestSubtemplates.cs b/Antlr4.Test.StringTemplate/TestSubtemplates.cs
index 49659fd..0ef02d2 100644
--- a/Antlr4.Test.StringTemplate/TestSubtemplates.cs
+++ b/Antlr4.Test.StringTemplate/TestSubtemplates.cs
@@ -41,7 +41,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestSubtemplates : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSimpleIteration()
{
TemplateGroup group = new TemplateGroup();
@@ -55,7 +55,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMapIterationIsByKeys()
{
TemplateGroup group = new TemplateGroup();
@@ -71,7 +71,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSimpleIterationWithArg()
{
TemplateGroup group = new TemplateGroup();
@@ -85,7 +85,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNestedIterationWithArg()
{
TemplateGroup group = new TemplateGroup();
@@ -99,7 +99,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSubtemplateAsDefaultArg()
{
string templates =
@@ -119,7 +119,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestParallelAttributeIteration()
{
Template e = new Template(
@@ -135,7 +135,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestParallelAttributeIterationWithNullValue()
{
Template e = new Template(
@@ -154,7 +154,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestParallelAttributeIterationHasI()
{
Template e = new Template(
@@ -172,7 +172,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestParallelAttributeIterationWithDifferentSizes()
{
Template e = new Template(
@@ -188,7 +188,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestParallelAttributeIterationWithSingletons()
{
Template e = new Template(
@@ -201,7 +201,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, e.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestParallelAttributeIterationWithDifferentSizesTemplateRefInsideToo()
{
string templates =
@@ -222,7 +222,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, p.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEvalSTIteratingSubtemplateInSTFromAnotherGroup()
{
ErrorBuffer errors = new ErrorBuffer();
@@ -246,7 +246,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEvalSTIteratingSubtemplateInSTFromAnotherGroupSingleValue()
{
ErrorBuffer errors = new ErrorBuffer();
@@ -270,7 +270,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEvalSTFromAnotherGroup()
{
ErrorBuffer errors = new ErrorBuffer();
diff --git a/Antlr4.Test.StringTemplate/TestSyntaxErrors.cs b/Antlr4.Test.StringTemplate/TestSyntaxErrors.cs
index 112bb63..751070c 100644
--- a/Antlr4.Test.StringTemplate/TestSyntaxErrors.cs
+++ b/Antlr4.Test.StringTemplate/TestSyntaxErrors.cs
@@ -37,7 +37,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestSyntaxErrors : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmptyExpr()
{
string template = " <> ";
@@ -56,7 +56,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIt()
{
string templates =
@@ -79,7 +79,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmptyExpr2()
{
string template = "hi <> ";
@@ -98,7 +98,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestUnterminatedExpr()
{
string template = "hi <t()$";
@@ -119,7 +119,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestWeirdChar()
{
string template = "   <*>";
@@ -139,7 +139,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestWeirdChar2()
{
string template = "\n<\\\n";
@@ -159,7 +159,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestValidButOutOfPlaceChar()
{
string templates =
@@ -175,7 +175,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestValidButOutOfPlaceCharOnDifferentLine()
{
string templates =
@@ -192,7 +192,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestErrorInNestedTemplate()
{
string templates =
@@ -209,7 +209,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEOFInExpr()
{
string templates =
@@ -226,7 +226,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEOFInExpr2()
{
string templates =
@@ -243,7 +243,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEOFInString()
{
string templates =
@@ -261,7 +261,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNonterminatedComment()
{
string templates = "foo() ::= << <!foo> >>";
@@ -278,7 +278,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestMissingRPAREN()
{
string templates =
@@ -295,7 +295,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRotPar()
{
string templates =
diff --git a/Antlr4.Test.StringTemplate/TestTemplateNames.cs b/Antlr4.Test.StringTemplate/TestTemplateNames.cs
index 0741f9f..9615d6d 100644
--- a/Antlr4.Test.StringTemplate/TestTemplateNames.cs
+++ b/Antlr4.Test.StringTemplate/TestTemplateNames.cs
@@ -39,7 +39,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestTemplateNames : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAbsoluteTemplateRefFromOutside()
{
// /randomdir/a and /randomdir/subdir/b
@@ -53,7 +53,7 @@ namespace Antlr4.Test.StringTemplate
}


-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRelativeTemplateRefInExpr()
{
// /randomdir/a and /randomdir/subdir/b
@@ -64,7 +64,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(" bar ", group.GetInstanceOf("a").Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestAbsoluteTemplateRefInExpr()
{
// /randomdir/a and /randomdir/subdir/b
@@ -75,7 +75,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(" bar ", group.GetInstanceOf("a").Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRefToAnotherTemplateInSameGroup()
{
string dir = tmpdir;
@@ -88,7 +88,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRefToAnotherTemplateInSameSubdir()
{
// /randomdir/a and /randomdir/subdir/b
@@ -100,7 +100,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(" bar ", group.GetInstanceOf("/subdir/a").Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestFullyQualifiedGetInstanceOf()
{
string dir = tmpdir;
@@ -110,7 +110,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual("foo", group.GetInstanceOf("/a").Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestFullyQualifiedTemplateRef()
{
// /randomdir/a and /randomdir/subdir/b
@@ -128,7 +128,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(" bar ", template.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestFullyQualifiedTemplateRef2()
{
// /randomdir/a and /randomdir/group.stg with b and c templates
@@ -149,7 +149,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(" bar ", st2.Render());
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestRelativeInSubdir()
{
// /randomdir/a and /randomdir/subdir/b
diff --git a/Antlr4.Test.StringTemplate/TestTokensForDollarDelimiters.cs b/Antlr4.Test.StringTemplate/TestTokensForDollarDelimiters.cs
index 071e51f..3082661 100644
--- a/Antlr4.Test.StringTemplate/TestTokensForDollarDelimiters.cs
+++ b/Antlr4.Test.StringTemplate/TestTokensForDollarDelimiters.cs
@@ -38,7 +38,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestTokensForDollarDelimiters : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSimpleAttr()
{
string template = "hi $name$";
@@ -46,7 +46,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected, '$', '$');
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestString()
{
string template = "hi $foo(a=\"$\")$";
@@ -54,7 +54,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected, '$', '$');
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEscInString()
{
string template = "hi $foo(a=\"$\\\"\")$"; // "hi $foo(a="$\"")$"
@@ -62,7 +62,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected, '$', '$');
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSubtemplate()
{
string template = "hi $names:{n | $n$}$";
@@ -74,7 +74,7 @@ namespace Antlr4.Test.StringTemplate
checkTokens(template, expected, '$', '$');
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNestedSubtemplate()
{
string template = "hi $names:{n | $n:{$it$}$}$";
diff --git a/Antlr4.Test.StringTemplate/TestVisualizer.cs b/Antlr4.Test.StringTemplate/TestVisualizer.cs
index d0fab31..1d854e7 100644
--- a/Antlr4.Test.StringTemplate/TestVisualizer.cs
+++ b/Antlr4.Test.StringTemplate/TestVisualizer.cs
@@ -45,7 +45,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestVisualizer : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void SimpleVisualizerTest()
{
string templates =
@@ -85,7 +85,7 @@ namespace Antlr4.Test.StringTemplate
st.Visualize();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void VisualizerTestShadowTemplates()
{
string templates =
@@ -106,7 +106,7 @@ namespace Antlr4.Test.StringTemplate
template.Visualize();
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void VisualizerTestDefaultArgumentTemplate()
{
string templates =
@@ -132,7 +132,7 @@ namespace Antlr4.Test.StringTemplate
* http://www.antlr.org/pipermail/stringtemplate-interest/2011-May/003476.
* html
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEarlyEval()
{
string templates = "main() ::= <<\n<f(p=\"x\")>*<f(p=\"y\")>\n>>\n\n" +
@@ -155,7 +155,7 @@ namespace Antlr4.Test.StringTemplate
* http://www.antlr.org/pipermail/stringtemplate-interest/2011-May/003476.
* html
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEarlyEval2()
{
string templates = "main() ::= <<\n<f(p=\"x\")>*\n>>\n\n" +
@@ -176,7 +176,7 @@ namespace Antlr4.Test.StringTemplate
/**
*  see http://www.antlr.org/pipermail/stringtemplate-interest/2011-August/003758.html
*/
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestBugArrayIndexOutOfBoundsExceptionInTemplateRuntimeMessage_SourceLocation()
{
string templates = "main(doit = true) ::= "
diff --git a/Antlr4.Test.StringTemplate/TestWhitespace.cs b/Antlr4.Test.StringTemplate/TestWhitespace.cs
index 71c6b1d..6f8ff16 100644
--- a/Antlr4.Test.StringTemplate/TestWhitespace.cs
+++ b/Antlr4.Test.StringTemplate/TestWhitespace.cs
@@ -40,7 +40,7 @@ namespace Antlr4.Test.StringTemplate
[TestClass]
public class TestWhitespace : BaseTest
{
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestTrimmedSubtemplates()
{
TemplateGroup group = new TemplateGroup();
@@ -54,7 +54,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestTrimmedNewlinesBeforeAfterInTemplate()
{
string templates =
@@ -68,7 +68,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestDontTrimJustSpaceBeforeAfterInTemplate()
{
string templates =
@@ -80,7 +80,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestTrimmedSubtemplatesNoArgs()
{
TemplateGroup group = new TemplateGroup();
@@ -92,7 +92,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestTrimmedSubtemplatesArgs()
{
TemplateGroup group = new TemplateGroup();
@@ -106,7 +106,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestTrimJustOneWSInSubtemplates()
{
TemplateGroup group = new TemplateGroup();
@@ -120,7 +120,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestTrimNewlineInSubtemplates()
{
TemplateGroup group = new TemplateGroup();
@@ -135,7 +135,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLeaveNewlineOnEndInSubtemplates()
{
TemplateGroup group = new TemplateGroup();
@@ -152,7 +152,7 @@ namespace Antlr4.Test.StringTemplate
}

[Ignore]
-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestTabBeforeEndInSubtemplates()
{
// fails since it counts indent from outer too
@@ -174,7 +174,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expected, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmptyExprAsFirstLineGetsNoOutput()
{
Template t = new Template(
@@ -185,7 +185,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmptyLineWithIndent()
{
Template t = new Template(
@@ -197,7 +197,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmptyLine()
{
Template t = new Template(
@@ -209,7 +209,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSizeZeroOnLineByItselfGetsNoOutput()
{
Template t = new Template(
@@ -223,7 +223,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSizeZeroOnLineWithIndentGetsNoOutput()
{
Template t = new Template(
@@ -237,7 +237,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestSizeZeroOnLineWithMultipleExpr()
{
Template t = new Template(
@@ -250,7 +250,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIFExpr()
{
Template t = new Template(
@@ -262,7 +262,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIndentedIFExpr()
{
Template t = new Template(
@@ -274,7 +274,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIFElseExprOnSingleLine()
{
Template t = new Template(
@@ -286,7 +286,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIFOnMultipleLines()
{
Template t = new Template(
@@ -302,7 +302,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestElseifOnMultipleLines()
{
Template t = new Template(
@@ -318,7 +318,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestElseifOnMultipleLines2()
{
Template t = new Template(
@@ -335,7 +335,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestElseifOnMultipleLines3()
{
Template t = new Template(
@@ -352,7 +352,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEndifNotOnLineAlone()
{
Template t = new Template(
@@ -367,7 +367,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNestedIFOnMultipleLines()
{
Template t = new Template(
@@ -386,7 +386,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestIfElseifOnMultipleLines()
{
Template t = new Template(
@@ -403,7 +403,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLineBreak()
{
Template st = new Template(
@@ -417,7 +417,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLineBreak2()
{
Template st = new Template(
@@ -431,7 +431,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestLineBreakNoWhiteSpace()
{
Template st = new Template(
@@ -445,7 +445,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNewlineNormalizationInTemplateString()
{
Template st = new Template(
@@ -459,7 +459,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNewlineNormalizationInTemplateStringPC()
{
Template st = new Template(
@@ -473,7 +473,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNewlineNormalizationInAttribute()
{
Template st = new Template(
@@ -488,7 +488,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestNullIterationLineGivesNoOutput()
{
Template t = new Template(
@@ -500,7 +500,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestEmptyIterationLineGivesNoOutput()
{
Template t = new Template(
@@ -513,7 +513,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCommentOnlyLineGivesNoOutput()
{
Template t = new Template(
@@ -525,7 +525,7 @@ namespace Antlr4.Test.StringTemplate
Assert.AreEqual(expecting, result);
}

-        [TestMethod]
+        [TestMethod][TestCategory(TestCategories.ST4)]
public void TestCommentOnlyLineGivesNoOutput2()
{
Template t = new Template(

