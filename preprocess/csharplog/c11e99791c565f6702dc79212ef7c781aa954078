commit c11e99791c565f6702dc79212ef7c781aa954078
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Tue May 3 20:10:42 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Tue May 3 20:10:42 2011 -0800

(C# 3) Remove ST3 dependency on the Antlr.Runtime.Debug project

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 8380]

diff --git a/Antlr3.StringTemplate/Antlr3.StringTemplate.csproj b/Antlr3.StringTemplate/Antlr3.StringTemplate.csproj
index 593ba37..9bfc162 100644
--- a/Antlr3.StringTemplate/Antlr3.StringTemplate.csproj
+++ b/Antlr3.StringTemplate/Antlr3.StringTemplate.csproj
@@ -50,6 +50,7 @@
<Compile Include="AttributeRenderer.cs" />
<Compile Include="AutoIndentWriter.cs" />
<Compile Include="CommonGroupLoader.cs" />
+    <Compile Include="Extensions\ExceptionExtensions.cs" />
<Compile Include="NoIndentWriter.cs" />
<Compile Include="PathGroupLoader.cs" />
<Compile Include="Properties\AssemblyInfo.cs" />
@@ -128,10 +129,6 @@
<Compile Include="TypeRegistry`1.cs" />
</ItemGroup>
<ItemGroup>
-    <ProjectReference Include="..\..\..\antlr\antlr3-main\runtime\CSharp3\Sources\Antlr3.Runtime.Debug\Antlr3.Runtime.Debug.csproj">
-      <Project>{5EE27A90-B023-42C9-AAF1-52B0424C5D0B}</Project>
-      <Name>Antlr3.Runtime.Debug</Name>
-    </ProjectReference>
<ProjectReference Include="..\..\..\antlr\antlr3-main\runtime\CSharp3\Sources\Antlr3.Runtime\Antlr3.Runtime.csproj">
<Project>{8FDC0A87-9005-4D5A-AB75-E55CEB575559}</Project>
<Name>Antlr3.Runtime</Name>
diff --git a/Antlr3.StringTemplate/Extensions/ExceptionExtensions.cs b/Antlr3.StringTemplate/Extensions/ExceptionExtensions.cs
new file mode 100644
index 0000000..dca7de9
--- /dev/null
+++ b/Antlr3.StringTemplate/Extensions/ExceptionExtensions.cs
@@ -0,0 +1,87 @@
+﻿/*
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
+ * All rights reserved.
+ *
+ * Conversion to C#:
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+namespace Antlr3.ST.Extensions
+{
+    using System;
+
+    using BindingFlags = System.Reflection.BindingFlags;
+    using TextWriter = System.IO.TextWriter;
+
+    public static class ExceptionExtensions
+    {
+        private static readonly Action<Exception> _internalPreserveStackTrace =
+            (Action<Exception>)Delegate.CreateDelegate(
+                typeof(Action<Exception>),
+                typeof(Exception).GetMethod(
+                    "InternalPreserveStackTrace",
+                    BindingFlags.Instance | BindingFlags.NonPublic));
+
+#pragma warning disable 618
+        public static bool IsCritical(this Exception e)
+        {
+            if (e is AccessViolationException
+                || e is StackOverflowException
+                || e is ExecutionEngineException
+                || e is OutOfMemoryException
+                || e is BadImageFormatException
+                || e is AppDomainUnloadedException)
+            {
+                return true;
+            }
+
+            return false;
+        }
+#pragma warning restore 618
+
+        public static void PreserveStackTrace(this Exception e)
+        {
+            _internalPreserveStackTrace(e);
+        }
+
+        internal static void PrintStackTrace(this Exception e)
+        {
+            PrintStackTrace(e, Console.Error);
+        }
+
+        internal static void PrintStackTrace(this Exception e, TextWriter writer)
+        {
+            writer.WriteLine(e.ToString());
+            string trace = e.StackTrace ?? string.Empty;
+            foreach (string line in trace.Split('\n', '\r'))
+            {
+                if (!string.IsNullOrEmpty(line))
+                    writer.WriteLine("        " + line);
+            }
+        }
+    }
+}
diff --git a/Antlr3.StringTemplate/Language/ASTExpr.cs b/Antlr3.StringTemplate/Language/ASTExpr.cs
index 6e32fce..4fbaaea 100644
--- a/Antlr3.StringTemplate/Language/ASTExpr.cs
+++ b/Antlr3.StringTemplate/Language/ASTExpr.cs
@@ -1,10 +1,10 @@
﻿/*
- * [The "BSD licence"]
- * Copyright (c) 2003-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -42,6 +42,7 @@ namespace Antlr3.ST.Language
using ICollection = System.Collections.ICollection;
using IDictionary = System.Collections.IDictionary;
using IEnumerable = System.Collections.IEnumerable;
+    using IEnumerator = System.Collections.IEnumerator;
using IList = System.Collections.IList;
using InvalidOperationException = System.InvalidOperationException;
using IOException = System.IO.IOException;
@@ -442,11 +443,11 @@ namespace Antlr3.ST.Language
int numEmpty = 0;
for ( int a = 0; a < numAttributes; a++ )
{
-                    Iterator it = attributes[a] as Iterator;
-                    if ( it != null && it.hasNext() )
+                    IEnumerator it = attributes[a] as IEnumerator;
+                    if ( it != null && it.MoveNext() )
{
string argName = formalArgumentNames[a];
-                        object iteratedValue = it.next();
+                        object iteratedValue = it.Current;
argumentContext[argName] = iteratedValue;
}
else
@@ -486,15 +487,15 @@ namespace Antlr3.ST.Language
attributeValue = ConvertArrayToList( attributeValue );
attributeValue = ConvertAnythingIteratableToIterator( attributeValue );

-            Iterator iter = attributeValue as Iterator;
+            IEnumerator iter = attributeValue as IEnumerator;
if ( iter != null )
{
// results can be treated list an attribute, indicate ST created list
var resultVector = new StringTemplate.STAttributeList();
int i = 0;
-                while ( iter.hasNext() )
+                while ( iter.MoveNext() )
{
-                    object ithValue = iter.next();
+                    object ithValue = iter.Current;
if ( ithValue == null )
{
if ( _nullValue == null )
@@ -806,7 +807,7 @@ namespace Antlr3.ST.Language
if ( attributes != null )
{
string propertyName2 = (string)property;
-                    value = attributes.get( propertyName2 );
+                    attributes.TryGetValue( propertyName2, out value );
return value;
}
}
@@ -919,9 +920,10 @@ namespace Antlr3.ST.Language
if ( enumerable != null )
return enumerable.Cast<object>().Any();

-            Iterator iterator = a as Iterator;
-            if ( iterator != null )
-                return iterator.hasNext();
+            // have to simply return true here for IEnumerator because there's no immutable way to check its contents
+            //IEnumerator iterator = a as IEnumerator;
+            //if (iterator != null)
+            //    return iterator.hasNext();

// any other non-null object, return true--it's present
return true;
@@ -1024,7 +1026,7 @@ namespace Antlr3.ST.Language

// normalize
o = ConvertAnythingIteratableToIterator(o);
-                Iterator iter = o as Iterator;
+                IEnumerator iter = o as IEnumerator;
if (iter != null)
return WriteIterableValue(self, iter, @out);

@@ -1114,13 +1116,13 @@ namespace Antlr3.ST.Language
return n;
}

-        protected virtual int WriteIterableValue(StringTemplate self, Iterator iter, IStringTemplateWriter @out)
+        protected virtual int WriteIterableValue(StringTemplate self, IEnumerator iter, IStringTemplateWriter @out)
{
int n = 0;
bool seenAValue = false;
-            while (iter.hasNext())
+            while (iter.MoveNext())
{
-                object iterValue = iter.next() ?? _nullValue;
+                object iterValue = iter.Current ?? _nullValue;

if (iterValue != null)
{
@@ -1165,7 +1167,7 @@ namespace Antlr3.ST.Language
continue;
}
}
-                    else if (!(iterValue is Iterator))
+                    else if (!(iterValue is IEnumerator))
{
// if not possible to be missing, don't waste time
// writing to temp buffer; might need separator though
@@ -1377,15 +1379,15 @@ namespace Antlr3.ST.Language

IDictionary dictionary = o as IDictionary;
if ( dictionary != null )
-                return dictionary.Values.iterator();
+                return dictionary.Values.GetEnumerator();

ICollection collection = o as ICollection;
if ( collection != null )
-                return collection.iterator();
+                return collection.GetEnumerator();

IEnumerable enumerable = o as IEnumerable;
if ( enumerable != null )
-                return enumerable.Cast<object>().iterator();
+                return enumerable.Cast<object>().GetEnumerator();

//// This code is implied in the last line
//Iterator iterator = o as Iterator;
@@ -1395,17 +1397,17 @@ namespace Antlr3.ST.Language
return o;
}

-        protected static Iterator ConvertAnythingToIterator( object o )
+        protected static IEnumerator ConvertAnythingToIterator( object o )
{
o = ConvertAnythingIteratableToIterator( o );

-            Iterator iter = o as Iterator;
+            IEnumerator iter = o as IEnumerator;
if ( iter != null )
return iter;

var singleton = new StringTemplate.STAttributeList( 1 );
singleton.Add( o );
-            return singleton.iterator();
+            return singleton.GetEnumerator();
}

/** <summary>
@@ -1419,14 +1421,15 @@ namespace Antlr3.ST.Language
{
return null;
}
+
object f = attribute;
attribute = ConvertAnythingIteratableToIterator( attribute );
-            Iterator it = attribute as Iterator;
+            IEnumerator it = attribute as IEnumerator;
if ( it != null )
{
-                if ( it.hasNext() )
+                if ( it.MoveNext() )
{
-                    f = it.next();
+                    f = it.Current;
}
}

@@ -1444,23 +1447,27 @@ namespace Antlr3.ST.Language
{
return null;
}
+
object theRest = attribute;
attribute = ConvertAnythingIteratableToIterator( attribute );
-            Iterator it = attribute as Iterator;
+            IEnumerator it = attribute as IEnumerator;
if ( it != null )
{
var a = new List<object>();
-                if ( !it.hasNext() )
+                if ( !it.MoveNext() )
{
return null; // if not even one value return null
}
-                it.next(); // ignore first value
-                while ( it.hasNext() )
+
+                // ignore first value
+
+                while ( it.MoveNext() )
{
-                    object o = it.next();
+                    object o = it.Current;
if ( o != null )
a.Add( o );
}
+
return a;
}
else
@@ -1484,14 +1491,15 @@ namespace Antlr3.ST.Language
{
return null;
}
+
object last = attribute;
attribute = ConvertAnythingIteratableToIterator( attribute );
-            Iterator it = attribute as Iterator;
+            IEnumerator it = attribute as IEnumerator;
if ( it != null )
{
-                while ( it.hasNext() )
+                while ( it.MoveNext() )
{
-                    last = it.next();
+                    last = it.Current;
}
}

@@ -1506,13 +1514,13 @@ namespace Antlr3.ST.Language
return null;
}
attribute = ConvertAnythingIteratableToIterator( attribute );
-            Iterator it = attribute as Iterator;
+            IEnumerator it = attribute as IEnumerator;
if ( it != null )
{
var a = new List<object>();
-                while ( it.hasNext() )
+                while ( it.MoveNext() )
{
-                    object o = it.next();
+                    object o = it.Current;
if ( o != null )
a.Add( o );
}
@@ -1529,16 +1537,20 @@ namespace Antlr3.ST.Language
return null;
}
attribute = ConvertAnythingIteratableToIterator( attribute );
-            Iterator it = attribute as Iterator;
+            IEnumerator it = attribute as IEnumerator;
if ( it != null )
{
var a = new List<object>();
-                while ( it.hasNext() )
+                while ( it.MoveNext() )
{
-                    object o = (object)it.next();
-                    if ( it.hasNext() )
-                        a.Add( o ); // only add if not last one
+                    object o = it.Current;
+                    a.Add( o );
}
+
+                // remove the last item
+                if (a.Count > 0)
+                    a.RemoveAt(a.Count - 1);
+
return a;
}
return null; // trunc(x)==null when x single-valued attribute
@@ -1572,15 +1584,15 @@ namespace Antlr3.ST.Language
if ( enumerable != null )
return enumerable.Cast<object>().Count();

-            Iterator iterator = attribute as Iterator;
+            IEnumerator iterator = attribute as IEnumerator;
if ( iterator != null )
{
int i = 0;
-                while ( iterator.hasNext() )
+                while ( iterator.MoveNext() )
{
-                    iterator.next();
i++;
}
+
return i;
}

diff --git a/Antlr3.StringTemplate/Language/ActionEvaluator.g3 b/Antlr3.StringTemplate/Language/ActionEvaluator.g3
index 187c54a..a16bdfd 100644
--- a/Antlr3.StringTemplate/Language/ActionEvaluator.g3
+++ b/Antlr3.StringTemplate/Language/ActionEvaluator.g3
@@ -1,10 +1,10 @@
/*
- [The "BSD licence"]
- Copyright (c) 2005-2008 Terence Parr
+ [The "BSD license"]
+ Copyright (c) 2011 Terence Parr
All rights reserved.

Grammar conversion to ANTLR v3 and C#:
- Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
@@ -90,7 +90,7 @@ list returns [object value]
|	NOTHING
{
List<object> nullSingleton = new List<object>( new object[] {null} );
-					elements.Add(nullSingleton.iterator()); // add a blank
+					elements.Add(nullSingleton.GetEnumerator()); // add a blank
}
)+
)
@@ -866,7 +866,7 @@ listFunctional returns [System.Func<ASTExpr,StringTemplate,IStringTemplateWriter
|	NOTHING
{
#if COMPILE_EXPRESSIONS
-					elements.Add( (chunk,self,writer) => new List<object>( new object[] { null } ).iterator() );
+					elements.Add( (chunk,self,writer) => new List<object>( new object[] { null } ).GetEnumerator() );
#endif
}
)+
diff --git a/Antlr3.StringTemplate/Language/Cat.cs b/Antlr3.StringTemplate/Language/Cat.cs
index bd62e16..c62c93b 100644
--- a/Antlr3.StringTemplate/Language/Cat.cs
+++ b/Antlr3.StringTemplate/Language/Cat.cs
@@ -1,10 +1,10 @@
﻿/*
- * [The "BSD licence"]
- * Copyright (c) 2003-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -30,15 +30,14 @@
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

-using System;
-using System.Collections.Generic;
-using System.Linq;
-
-using IEnumerable = System.Collections.IEnumerable;
-using IEnumerator = System.Collections.IEnumerator;
-
namespace Antlr3.ST.Language
{
+    using System.Collections.Generic;
+    using System.Linq;
+
+    using IEnumerable = System.Collections.IEnumerable;
+    using IEnumerator = System.Collections.IEnumerator;
+
public class Cat : List<object>
{
public Cat( IEnumerable attributes )
@@ -51,9 +50,7 @@ namespace Antlr3.ST.Language
return items.SelectMany( ( item ) =>
{
item = ASTExpr.ConvertAnythingIteratableToIterator( item );
-                if ( item is Antlr.Runtime.JavaExtensions.Iterator )
-                    return ( (Antlr.Runtime.JavaExtensions.Iterator)item ).Source.Cast<object>();
-                else if ( item is string )
+                if ( item is string )
return Enumerable.Repeat( item, 1 );
else if ( item is IEnumerable )
return ( (IEnumerable)item ).Cast<object>();
diff --git a/Antlr3.StringTemplate/Language/FormalArgument.cs b/Antlr3.StringTemplate/Language/FormalArgument.cs
index d29d554..ab70ca4 100644
--- a/Antlr3.StringTemplate/Language/FormalArgument.cs
+++ b/Antlr3.StringTemplate/Language/FormalArgument.cs
@@ -1,10 +1,10 @@
﻿/*
- * [The "BSD licence"]
- * Copyright (c) 2003-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -33,7 +33,6 @@
namespace Antlr3.ST.Language
{
using System.Collections.Generic;
-    using Antlr.Runtime.JavaExtensions;

/** <summary>
*  Represents the name of a formal argument
@@ -139,10 +138,9 @@ namespace Antlr3.ST.Language

public override int GetHashCode()
{
-            return ObjectExtensions.ShiftPrimeXOR(
-                ( name != null ) ? name.GetHashCode() : 0,
-                ( defaultValueST != null ) ? defaultValueST.GetHashCode() : 0
-                );
+            int nameHash = (name != null) ? name.GetHashCode() : 0;
+            int defaultValueHash = (defaultValueST != null) ? defaultValueST.GetHashCode() : 0;
+            return nameHash ^ defaultValueHash;
}

public override string ToString()
diff --git a/Antlr3.StringTemplate/Language/GroupParserHelper.cs b/Antlr3.StringTemplate/Language/GroupParserHelper.cs
index bf6f9a2..f7495e9 100644
--- a/Antlr3.StringTemplate/Language/GroupParserHelper.cs
+++ b/Antlr3.StringTemplate/Language/GroupParserHelper.cs
@@ -1,10 +1,10 @@
/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Grammar conversion to ANTLR v3 and C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -33,8 +33,7 @@
namespace Antlr3.ST.Language
{
using System;
-    using Antlr.Runtime.JavaExtensions;
-
+    using Antlr3.ST.Extensions;
using RecognitionException = Antlr.Runtime.RecognitionException;

partial class GroupParser
diff --git a/Antlr3.StringTemplate/Language/InterfaceParserHelper.cs b/Antlr3.StringTemplate/Language/InterfaceParserHelper.cs
index fb987e0..9b01004 100644
--- a/Antlr3.StringTemplate/Language/InterfaceParserHelper.cs
+++ b/Antlr3.StringTemplate/Language/InterfaceParserHelper.cs
@@ -1,10 +1,10 @@
/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Grammar conversion to ANTLR v3 and C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -33,8 +33,7 @@
namespace Antlr3.ST.Language
{
using System;
-    using Antlr.Runtime.JavaExtensions;
-
+    using Antlr3.ST.Extensions;
using RecognitionException = Antlr.Runtime.RecognitionException;

partial class InterfaceParser
diff --git a/Antlr3.StringTemplate/PathGroupLoader.cs b/Antlr3.StringTemplate/PathGroupLoader.cs
index 903671b..2e85e80 100644
--- a/Antlr3.StringTemplate/PathGroupLoader.cs
+++ b/Antlr3.StringTemplate/PathGroupLoader.cs
@@ -1,10 +1,10 @@
﻿/*
- * [The "BSD licence"]
- * Copyright (c) 2003-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -34,15 +34,15 @@ namespace Antlr3.ST
{
using System;
using System.Collections.ObjectModel;
-    using Antlr.Runtime.JavaExtensions;
+    using Antlr3.ST.Extensions;
using Antlr3.ST.Language;

using Encoding = System.Text.Encoding;
using IOException = System.IO.IOException;
+    using Path = System.IO.Path;
using Stream = System.IO.Stream;
using StreamReader = System.IO.StreamReader;
using TextReader = System.IO.TextReader;
-    using Path = System.IO.Path;

/** <summary>
*  A brain dead loader that looks only in the directory(ies) you
diff --git a/Antlr3.StringTemplate/StringTemplate.cs b/Antlr3.StringTemplate/StringTemplate.cs
index 0be083d..2cf8001 100644
--- a/Antlr3.StringTemplate/StringTemplate.cs
+++ b/Antlr3.StringTemplate/StringTemplate.cs
@@ -1,10 +1,10 @@
﻿/*
- * [The "BSD licence"]
- * Copyright (c) 2003-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008-2010 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -36,6 +36,7 @@ namespace Antlr3.ST
using System.Collections.Generic;
using System.Linq;
using Antlr.Runtime.JavaExtensions;
+    using Antlr3.ST.Extensions;
using Antlr3.ST.Language;

using CommonToken = Antlr.Runtime.CommonToken;
@@ -749,7 +750,8 @@ namespace Antlr3.ST

// convert plain collections
// get exactly in this scope (no enclosing)
-            object o = this._attributes.get( name );
+            object o;
+            this._attributes.TryGetValue(name, out o);
if ( o == null )
{ // new attribute
RawSetAttribute( this._attributes, name, value );
@@ -868,41 +870,13 @@ namespace Antlr3.ST
throw new ArgumentException( "invalid aggregate attribute format: " +
aggrSpec );
}
+
string aggrName = aggrSpec.Substring( 0, dot );
string propString = aggrSpec.Substring( dot + 1 );
-            bool error = true;
-            StringTokenizer tokenizer = new StringTokenizer( propString, "{,}", true );
-            //match:
-            if ( tokenizer.hasMoreTokens() )
-            {
-                string token = tokenizer.nextToken(); // advance to {
-                token = token.Trim();
-                if ( token.Equals( "{" ) )
-                {
-                    token = tokenizer.nextToken();    // advance to first prop name
-                    token = token.Trim();
-                    properties.Add( token );
-                    token = tokenizer.nextToken();    // advance to a comma
-                    token = token.Trim();
-                    while ( token.Equals( "," ) )
-                    {
-                        token = tokenizer.nextToken();    // advance to a prop name
-                        token = token.Trim();
-                        properties.Add( token );
-                        token = tokenizer.nextToken();    // advance to a "," or "}"
-                        token = token.Trim();
-                    }
-                    if ( token.Equals( "}" ) )
-                    {
-                        error = false;
-                    }
-                }
-            }
-            if ( error )
-            {
-                throw new ArgumentException( "invalid aggregate attribute format: " +
-                        aggrSpec );
-            }
+            if (!propString.StartsWith("{") || !propString.EndsWith("}"))
+                throw new ArgumentException("invalid aggregate attribute format", "aggrSpec");
+
+            properties.AddRange(propString.Substring(1, propString.Length - 2).Split(','));
return aggrName;
}

@@ -1740,8 +1714,11 @@ namespace Antlr3.ST
{
buf.Append( ',' );
}
+
buf.Append( name + "=" );
-                    object value = _attributes.get( name );
+
+                    object value;
+                    _attributes.TryGetValue(name, out value);
if ( value is StringTemplate )
{
buf.Append( ( (StringTemplate)value ).ToDebugString() );
diff --git a/Antlr3.StringTemplate/StringTemplateGroup.cs b/Antlr3.StringTemplate/StringTemplateGroup.cs
index 91d7aff..81d4147 100644
--- a/Antlr3.StringTemplate/StringTemplateGroup.cs
+++ b/Antlr3.StringTemplate/StringTemplateGroup.cs
@@ -1,10 +1,10 @@
﻿/*
- * [The "BSD licence"]
- * Copyright (c) 2003-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2010 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -36,7 +36,7 @@ namespace Antlr3.ST
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
-    using Antlr.Runtime.JavaExtensions;
+    using Antlr3.ST.Extensions;

using AngleBracketTemplateLexer = Antlr3.ST.Language.AngleBracketTemplateLexer;
using ANTLRReaderStream = Antlr.Runtime.ANTLRReaderStream;
@@ -539,8 +539,8 @@ namespace Antlr3.ST
*/
public virtual void SetSuperGroup( string superGroupName )
{
-            StringTemplateGroup superGroup =
-                (StringTemplateGroup)_nameToGroupMap.get( superGroupName );
+            StringTemplateGroup superGroup;
+            _nameToGroupMap.TryGetValue(superGroupName, out superGroup);
if ( superGroup != null )
{
// we've seen before; just use it
@@ -580,7 +580,8 @@ namespace Antlr3.ST
*/
public virtual void ImplementInterface( string interfaceName )
{
-            StringTemplateGroupInterface I = _nameToInterfaceMap.get( interfaceName );
+            StringTemplateGroupInterface I;
+            _nameToInterfaceMap.TryGetValue(interfaceName, out I);
if ( I != null )
{
// we've seen before; just use it
diff --git a/Antlr3.StringTemplate/StringTemplateGroupInterface.cs b/Antlr3.StringTemplate/StringTemplateGroupInterface.cs
index 000461e..260f0bd 100644
--- a/Antlr3.StringTemplate/StringTemplateGroupInterface.cs
+++ b/Antlr3.StringTemplate/StringTemplateGroupInterface.cs
@@ -1,10 +1,10 @@
﻿/*
- * [The "BSD licence"]
- * Copyright (c) 2003-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -35,11 +35,10 @@ namespace Antlr3.ST
using System;
using System.Collections.Generic;
using System.Linq;
-    using Antlr.Runtime.JavaExtensions;
+    using Antlr3.ST.Extensions;
using Antlr3.ST.Language;

using DebuggerDisplay = System.Diagnostics.DebuggerDisplayAttribute;
-    using IList = System.Collections.IList;
using StringBuilder = System.Text.StringBuilder;
using TextReader = System.IO.TextReader;


