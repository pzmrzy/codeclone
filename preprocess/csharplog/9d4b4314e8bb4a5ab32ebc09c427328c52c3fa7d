commit 9d4b4314e8bb4a5ab32ebc09c427328c52c3fa7d
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Fri Feb 25 19:28:55 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Fri Feb 25 19:28:55 2011 -0800

(C# 3) Optimized grammar

[git-p4: depot-paths = "//depot/code/antlrcs/main/": change = 7773]

diff --git a/Antlr4.StringTemplate/Compiler/TemplateParser.g3 b/Antlr4.StringTemplate/Compiler/TemplateParser.g3
index 93aa49f..3d62f26 100644
--- a/Antlr4.StringTemplate/Compiler/TemplateParser.g3
+++ b/Antlr4.StringTemplate/Compiler/TemplateParser.g3
@@ -76,15 +76,13 @@ element
;

exprTag
-	:	LDELIM expr ( ';' exprOptions )? RDELIM
-		-> ^(EXPR[$LDELIM,"EXPR"] expr exprOptions?)
+	:	LDELIM<type=EXPR;text="EXPR">^ expr exprOptions? RDELIM!
;

region
-	:	LDELIM '@' ID RDELIM NEWLINE?
+	:	LDELIM! '@'<REGION>^ ID RDELIM! NEWLINE!?
template
-		INDENT? LDELIM '@end' RDELIM NEWLINE?
-		-> ^(REGION ID template?)
+		INDENT!? LDELIM! '@end'! RDELIM! NEWLINE!?
;

subtemplate
@@ -119,7 +117,8 @@ notConditional
|	memberExpr
;

-exprOptions : option ( ',' option )* -> ^(OPTIONS option*) ;
+exprOptions
+	:	';'<OPTIONS>^ option ( ','! option )*;

option
@init {
@@ -150,9 +149,7 @@ option

exprNoComma
:	memberExpr
-		( ':' mapTemplateRef					-> ^(MAP memberExpr mapTemplateRef)
-		|										-> memberExpr
-		)
+		(':'<MAP>^ mapTemplateRef)?
;

expr : mapExpr ;
@@ -177,26 +174,26 @@ expr:{arg | ...}     apply subtemplate to expr
expr:(e)(args)       convert e to a string template name and apply to expr
*/
mapTemplateRef
-	:	ID '(' args ')'							-> ^(INCLUDE ID args?)
+	:	ID '('<INCLUDE>^ args ')'!
|	subtemplate
-	|	lp='(' mapExpr rp=')' '(' argExprList? ')'-> ^(INCLUDE_IND mapExpr argExprList?)
+	|	'('<INCLUDE_IND>^ mapExpr ')'! '('! argExprList? ')'!
;

memberExpr
-	:	(includeExpr->includeExpr)
-		(	p='.' ID							-> ^(PROP[$p,"PROP"] $memberExpr ID)
-		|	p='.' '(' mapExpr ')'				-> ^(PROP_IND[$p,"PROP_IND"] $memberExpr mapExpr)
+	:	includeExpr
+		(	'.'<type=PROP;text="PROP">^ ID
+		|	'.'<type=PROP_IND;text="PROP_IND">^ '('! mapExpr ')'!
)*
;

includeExpr
options {k=2;} // prevent full LL(*), which fails, falling back on k=1; need k=2
:	{TemplateCompiler.funcs.ContainsKey(input.LT(1).Text)}? // predefined function
-		ID '(' expr? ')'						-> ^(EXEC_FUNC ID expr?)
-	|	'super' '.' ID '(' args ')'				-> ^(INCLUDE_SUPER ID args?)
-	|	ID '(' args ')'							-> ^(INCLUDE ID args?)
-	|	'@' 'super' '.' ID '(' rp=')'			-> ^(INCLUDE_SUPER_REGION ID)
-	|	'@' ID '(' rp=')'						-> ^(INCLUDE_REGION ID)
+		ID '('<EXEC_FUNC>^ expr? ')'!
+	|	'super'! '.'! ID '('<INCLUDE_SUPER>^ args ')'!
+	|	ID '('<INCLUDE>^ args ')'!
+	|	'@'! 'super'! '.'! ID '('<INCLUDE_SUPER_REGION>^ ')'!
+	|	'@'! ID '('<INCLUDE_REGION>^ ')'!
|	primary
;

@@ -214,20 +211,21 @@ primary
)
;

-args:	argExprList
-	|	namedArg ( ',' namedArg )* -> namedArg+
+args
+	:	argExprList
+	|	namedArg (','! namedArg)*
|
;

-argExprList : arg ( ',' arg )* -> arg+ ;
+argExprList : arg (','! arg)*;

arg : exprNoComma ;

-namedArg : ID '=' arg -> ^('=' ID arg) ;
+namedArg : ID '='^ arg;

list:	{input.LA(2)==RBRACK}? // hush warning; [] special case
-		lb='[' ']' -> LIST[$lb]
-	|	lb='[' listElement ( ',' listElement )* ']' -> ^(LIST[$lb] listElement*)
+		'['<LIST>^ ']'!
+	|	'['<LIST>^ listElement ( ','! listElement )* ']'!
;

listElement : exprNoComma | -> NULL ;

