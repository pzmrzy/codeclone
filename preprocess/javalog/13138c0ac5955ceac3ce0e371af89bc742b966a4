commit 13138c0ac5955ceac3ce0e371af89bc742b966a4
Author:     Sam Harwell <sam@tunnelvisionlabs.com>
AuthorDate: Fri Jan 4 19:06:37 2013 -0600
Commit:     Sam Harwell <sam@tunnelvisionlabs.com>
CommitDate: Fri Jan 4 19:06:37 2013 -0600

Updated documentation for maven plugin

diff --git a/antlr3-maven-plugin/src/main/java/org/antlr/mojo/antlr3/Antlr3Mojo.java b/antlr3-maven-plugin/src/main/java/org/antlr/mojo/antlr3/Antlr3Mojo.java
index a1c572c..2465aa9 100644
--- a/antlr3-maven-plugin/src/main/java/org/antlr/mojo/antlr3/Antlr3Mojo.java
+++ b/antlr3-maven-plugin/src/main/java/org/antlr/mojo/antlr3/Antlr3Mojo.java
@@ -55,13 +55,11 @@ import org.codehaus.plexus.compiler.util.scan.mapping.SourceMapping;
import org.codehaus.plexus.compiler.util.scan.mapping.SuffixMapping;

/**
- * Goal that picks up all the ANTLR grammars in a project and moves those that
- * are required for generation of the compilable sources into the location
- * that we use to compile them, such as target/generated-sources/antlr3 ...
+ * Parses ANTLR grammar files {@code *.g} and transforms them into Java source
+ * files.
*
* @goal antlr
- *
- * @phase process-sources
+ * @phase generate-sources
* @requiresDependencyResolution compile
* @requiresProject true
*
@@ -75,7 +73,7 @@ public class Antlr3Mojo
//
/**
* If set to true, then after the tool has processed an input grammar file
-     * it will report variaous statistics about the parser, such as information
+     * it will report various statistics about the parser, such as information
* on cyclic DFAs, which rules may use backtracking, and so on.
*
* @parameter default-value="false"
@@ -83,7 +81,7 @@ public class Antlr3Mojo
protected boolean report;
/**
* If set to true, then the ANTLR tool will print a version of the input
-     * grammar which is devoid of any actions that may be present in the input file.
+     * grammar(s) which are stripped of any embedded actions.
*
* @parameter default-value="false"
*/
@@ -97,119 +95,124 @@ public class Antlr3Mojo
*/
protected boolean debug;
/**
-     * If set to true, then then the generated parser will compute and report on
-     * profile information at runtime.
+     * If set to true, then the generated parser will compute and report profile
+     * information at runtime.
*
* @parameter default-value="false"
*/
protected boolean profile;
/**
-     * If set to true then the ANTLR tool will generate a description of the nfa
-     * for each rule in <a href="http://www.graphviz.org">Dot format</a>
-     *
+     * If set to true, then the ANTLR tool will generate a description of the
+     * NFA for each rule in <a href="http://www.graphviz.org">Dot format</a>
+     *
* @parameter default-value="false"
*/
protected boolean nfa;
/**
-     * If set to true then the ANTLR tool will generate a description of the DFA
-     * for each decision in the grammar in <a href="http://www.graphviz.org">Dot format</a>
-     *
+     * If set to true, then the ANTLR tool will generate a description of the
+     * DFA for each decision in the grammar in
+     * <a href="http://www.graphviz.org">Dot format</a>.
+     *
* @parameter default-value="false"
*/
protected boolean dfa;
/**
-     * If set to true, the generated parser code will log rule entry and exit points
-     * to stdout as an aid to debugging.
+     * If set to true, the generated parser code will log rule entry and exit
+     * points to stdout ({@link System#out} for the Java target) as an aid to
+     * debugging.
*
* @parameter default-value="false"
*/
protected boolean trace;
/**
-     * If this parameter is set, it indicates that any warning or error messages returned
-     * by ANLTR, shoould be formatted in the specified way. Currently, ANTLR suports the
-     * built-in formats of antlr, gnu and vs2005.
+     * If this parameter is set, it indicates that any warning or error messages
+     * returned by ANLTR, should be formatted in the specified way. Currently,
+     * ANTLR supports the built-in formats {@code antlr}, {@code gnu} and
+     * {@code vs2005}.
*
* @parameter default-value="antlr"
*/
protected String messageFormat;
/**
-     * If this parameter is set to true, then ANTLR will report all sorts of things
-     * about what it is doing such as the names of files and the version of ANTLR and so on.
+     * If set to true, then ANTLR will report verbose messages during the code
+     * generation process. This includes the names of files, the version of
+     * ANTLR, and more.
*
* @parameter default-value="true"
*/
protected boolean verbose;

/**
-     * The number of alts, beyond which ANTLR will not generate a switch statement
-     * for the DFA.
+     * The maximum number of alternatives allowed in an inline switch statement.
+     * Beyond this, ANTLR will not generate a switch statement for the DFA.
*
* @parameter default-value="300"
*/
private int maxSwitchCaseLabels;

/**
-     * The number of alts, below which ANTLR will not choose to generate a switch
-     * statement over an if statement.
+     * The minimum number of alternatives for ANTLR to generate a switch
+     * statement. For decisions with fewer alternatives, an if/else if/else
+     * statement will be used instead.
+     *
+     * @parameter default-value="3"
*/
private int minSwitchAlts;

/* --------------------------------------------------------------------
-     * The following are Maven specific parameters, rather than specificlly
+     * The following are Maven specific parameters, rather than specific
* options that the ANTLR tool can use.
*/
+
/**
-     * Provides an explicit list of all the grammars that should
-     * be included in the generate phase of the plugin. Note that the plugin
-     * is smart enough to realize that imported grammars should be included but
-     * not acted upon directly by the ANTLR Tool.
-     *
-     * Unless otherwise specified, the include list scans for and includes all
-     * files that end in ".g" in any directory beneath src/main/antlr3. Note that
-     * this version of the plugin looks for the directory antlr3 and not the directory
-     * antlr, so as to avoid clashes and confusion for projects that use both v2 and v3 grammars
-     * such as ANTLR itself.
+     * Provides an explicit list of all the grammars that should be included in
+     * the generate phase of the plugin. Note that the plugin is smart enough to
+     * realize that imported grammars should be included but not acted upon
+     * directly by the ANTLR Tool.
+     * <p/>
+     * A set of Ant-like inclusion patterns used to select files from the source
+     * directory for processing. By default, the pattern <code>**&#47;*.g</code>
+     * is used to select grammar files.
*
* @parameter
*/
protected Set<String> includes = new HashSet<String>();
/**
-     * Provides an explicit list of any grammars that should be excluded from
-     * the generate phase of the plugin. Files listed here will not be sent for
-     * processing by the ANTLR tool.
+     * A set of Ant-like exclusion patterns used to prevent certain files from
+     * being processed. By default, this set is empty such that no files are
+     * excluded.
*
-     * @parameter
+     * @parameter
*/
protected Set<String> excludes = new HashSet<String>();
/**
+     * The current Maven project.
+     *
* @parameter expression="${project}"
* @required
* @readonly
*/
protected MavenProject project;
/**
-     * Specifies the Antlr directory containing grammar files. For
-     * antlr version 3.x we default this to a directory in the tree
-     * called antlr3 because the antlr directory is occupied by version
-     * 2.x grammars.
+     * The directory where the ANTLR grammar files ({@code *.g}) are located.
*
* @parameter default-value="${basedir}/src/main/antlr3"
-     * @required
*/
private File sourceDirectory;
/**
-     * Location for generated Java files. For antlr version 3.x we default
-     * this to a directory in the tree called antlr3 because the antlr
-     * directory is occupied by version 2.x grammars.
+     * The directory where the parser files generated by ANTLR will be stored.
+     * The directory will be registered as a compile source root of the project
+     * such that the generated files will participate in later build phases like
+     * compiling and packaging.
*
* @parameter default-value="${project.build.directory}/generated-sources/antlr3"
* @required
*/
private File outputDirectory;
/**
-     * Location for imported token files, e.g. <code>.tokens</code> and imported grammars.
-     * Note that ANTLR will not try to process grammars that it finds to be imported
-     * into other grammars (in the same processing session).
+     * Location for imported token files, e.g. {@code *.tokens} and imported
+     * grammars. Note that ANTLR will not try to process grammars that it finds
+     * to be imported into other grammars (in the same processing session).
*
* @parameter default-value="${basedir}/src/main/antlr3/imports"
*/
@@ -231,16 +234,18 @@ public class Antlr3Mojo
project.addCompileSourceRoot(outputDir.getPath());
}
/**
-     * An instance of the ANTLR tool build
+     * An instance of the ANTLR tool build.
*/
protected Tool tool;

/**
* The main entry point for this Mojo, it is responsible for converting
* ANTLR 3.x grammars into the target language specified by the grammar.
-     *
-     * @throws org.apache.maven.plugin.MojoExecutionException When something is disvocered such as a missing source
-     * @throws org.apache.maven.plugin.MojoFailureException When something really bad happesn such as not being able to create the ANTLR Tool
+     *
+     * @throws MojoExecutionException if a configuration or grammar error causes
+     * the code generation process to fail
+     * @throws MojoFailureException if an instance of the ANTLR 3 {@link Tool}
+     * cannot be created
*/
public void execute()
throws MojoExecutionException, MojoFailureException {
@@ -400,10 +405,10 @@ public class Antlr3Mojo
*
* @param sourceDirectory
* @param outputDirectory
-     * @throws antlr.TokenStreamException
-     * @throws antlr.RecognitionException
-     * @throws java.io.IOException
-     * @throws org.codehaus.plexus.compiler.util.scan.InclusionScanException
+     * @throws TokenStreamException
+     * @throws RecognitionException
+     * @throws IOException
+     * @throws InclusionScanException
*/
private void processGrammarFiles(File sourceDirectory, File outputDirectory)
throws TokenStreamException, RecognitionException, IOException, InclusionScanException {
@@ -470,11 +475,11 @@ public class Antlr3Mojo
/**
* Given the source directory File object and the full PATH to a
* grammar, produce the path to the named grammar file in relative
-     * terms to the sourceDirectory. This will then allow ANTLR to
+     * terms to the {@code sourceDirectory}. This will then allow ANTLR to
* produce output relative to the base of the output directory and
* reflect the input organization of the grammar files.
*
-     * @param sourceDirectory The source directory File object
+     * @param sourceDirectory The source directory {@link File} object
* @param grammarFileName The full path to the input grammar file
* @return The path to the grammar file relative to the source directory
*/
diff --git a/antlr3-maven-plugin/src/site/apt/examples/import.apt b/antlr3-maven-plugin/src/site/apt/examples/import.apt
index 06a49f1..befd508 100644
--- a/antlr3-maven-plugin/src/site/apt/examples/import.apt
+++ b/antlr3-maven-plugin/src/site/apt/examples/import.apt
@@ -1,7 +1,7 @@
Imported Grammar Files

In order to have the ANTLR plugin automatically locate and use grammars used
- as imports in your main .g files, you need to place the imported grammar
+ as imports in your main <<<.g>>> files, you need to place the imported grammar
files in the imports directory beneath the root directory of your grammar
files (which is <<<src/main/antlr3>>> by default of course).

diff --git a/antlr3-maven-plugin/src/site/apt/examples/libraries.apt b/antlr3-maven-plugin/src/site/apt/examples/libraries.apt
index 73ce796..822a9ac 100644
--- a/antlr3-maven-plugin/src/site/apt/examples/libraries.apt
+++ b/antlr3-maven-plugin/src/site/apt/examples/libraries.apt
@@ -2,23 +2,23 @@ Libraries

The introduction of the import directive in a grammar allows reuse of common grammar files
as well as the ability to divide up functional components of large grammars. However it has
- caused some confusion in regard to the fact that generated vocab files (<<<xxx.tokens>>>) can also
+ caused some confusion in regard to the fact that generated vocabulary files (<<<*.tokens>>>) can also
be searched for with the <<<<libDirectory>>>> directive.

This has confused two separate functions and imposes a structure upon the layout of
your grammar files in certain cases. If you have grammars that both use the import
- directive and also require the use of a vocab file then you will need to locate
- the grammar that generates the .tokens file alongside the grammar that uses it. This
+ directive and also require the use of a vocabulary file then you will need to locate
+ the grammar that generates the <<<.tokens>>> file alongside the grammar that uses it. This
is because you will need to use the <<<<libDirectory>>>> directive to specify the
- location of your imported grammars and ANTLR will not find any vocab files in
+ location of your imported grammars and ANTLR will not find any vocabulary files in
this directory.

- The .tokens files for any grammars are generated within the same output directory structure
- as the .java files. So, whereever the .java files are generated, you will also find the .tokens
- files. ANTLR looks for .tokens files in both the <<<<libDirectory>>>> and the output directory
- where it is placing the geenrated .java files. Hence when you locate the grammars that generate
- .tokens files in the same source directory as the ones that use the .tokens files, then
- the Maven plugin will find the expected .tokens files.
+ The <<<.tokens>>> files for any grammars are generated within the same output directory structure
+ as the <<<.java>>> files. So, wherever the <<<.java>>> files are generated, you will also find the <<<.tokens>>>
+ files. ANTLR looks for <<<.tokens>>> files in both the <<<<libDirectory>>>> and the output directory
+ where it is placing the generated <<<.java>>> files. Hence when you locate the grammars that generate
+ <<<.tokens>>> files in the same source directory as the ones that use the <<<.tokens>>> files, then
+ the Maven plugin will find the expected <<<.tokens>>> files.

The <<<<libDirectory>>>> is specified like any other directory parameter in Maven. Here is an
example:
@@ -27,10 +27,9 @@ Libraries
<plugin>
<groupId>org.antlr</groupId>
<artifactId>antlr3-maven-plugin</artifactId>
-    <version>3.1.3-1</version>
+    <version>${plugin.version}</version>

<executions>
-
<execution>
<configuration>
<goals>
diff --git a/antlr3-maven-plugin/src/site/apt/examples/simple.apt b/antlr3-maven-plugin/src/site/apt/examples/simple.apt
index 3e36e84..ed1918b 100644
--- a/antlr3-maven-plugin/src/site/apt/examples/simple.apt
+++ b/antlr3-maven-plugin/src/site/apt/examples/simple.apt
@@ -1,7 +1,7 @@
Simple configuration

If your grammar files are organized into the default locations as described in the {{{../index.html}introduction}},
- then configuring the pom.xml file for your project is as simple as adding this to it
+ then configuring the <<<pom.xml>>> file for your project is as simple as adding this to it

+--
<plugins>
@@ -21,12 +21,12 @@ Simple configuration
</plugins>
+--

- When the mvn command is executed all grammar files under <<<src/main/antlr3>>>, except any
+ When the <<<mvn>>> command is executed all grammar files under <<<src/main/antlr3>>>, except any
import grammars under <<<src/main/antlr3/imports>>> will be analyzed and converted to
- java source code in the output directory <<<target/generated-sources/antlr3>>>.
+ Java source code in the output directory <<<target/generated-sources/antlr3>>>.

Your input files under <<<antlr3>>> should be stored in sub directories that
- reflect the package structure of your java parsers. If your grammar file parser.g contains:
+ reflect the package structure of your java parsers. If your grammar file <<<parser.g>>> contains:

+---
@header {
@@ -34,7 +34,7 @@ package org.jimi.themuss;
}
+---

- Then the .g file should be stored in: <<<src/main/antlr3/org/jimi/themuss/parser.g>>>. THis way
- the generated .java files will correctly reflect the package structure in which they will
+ Then the <<<.g>>> file should be stored in: <<<src/main/antlr3/org/jimi/themuss/parser.g>>>. This way
+ the generated <<<.java>>> files will correctly reflect the package structure in which they will
finally rest as classes.

diff --git a/antlr3-maven-plugin/src/site/apt/faq.apt.vm b/antlr3-maven-plugin/src/site/apt/faq.apt.vm
new file mode 100644
index 0000000..d6360a1
--- /dev/null
+++ b/antlr3-maven-plugin/src/site/apt/faq.apt.vm
@@ -0,0 +1 @@
+FAQ
diff --git a/antlr3-maven-plugin/src/site/apt/index.apt b/antlr3-maven-plugin/src/site/apt/index.apt
index 2b2495a..2b57f13 100644
--- a/antlr3-maven-plugin/src/site/apt/index.apt
+++ b/antlr3-maven-plugin/src/site/apt/index.apt
@@ -28,7 +28,7 @@ ANTLR v3 Maven plugin
use version 3.1.3 of the plugin, you will build your grammars using version 3.1.3 of the
ANTLR tool, version 3.2 of the plugin will use version 3.2 of the ANTLR tool and so on.

- You may also find that there are patch versions of the plugin suchas 3.1.3-1 3.1.3-2 and
+ You may also find that there are patch versions of the plugin such as 3.1.3-1 3.1.3-2 and
so on. Use the latest patch release of the plugin.

The current version of the plugin is shown at the top of this page after the <<Last Deployed>> date.
@@ -49,10 +49,10 @@ ANTLR v3 Maven plugin
+--- imports/  .g files that are imported by other grammars.
+--

- If your grammar is intended to be part of a package called org.foo.bar then you would
+ If your grammar is intended to be part of a package called <<<org.foo.bar>>> then you would
place it in the directory <<<src/main/antlr3/org/foo/bar>>>. The plugin will then produce
- .java and .tokens files in the output directory <<<target/generated-sources/antlr3/org/foo/bar>>>
- When the Java files are compiled they will be in the correct location for the javac
+ <<<.java>>> and <<<.tokens>>> files in the output directory <<<target/generated-sources/antlr3/org/foo/bar>>>
+ When the Java files are compiled they will be in the correct location for the Javac
compiler without any special configuration. The generated java files are automatically
submitted for compilation by the plugin.

@@ -60,4 +60,3 @@ ANTLR v3 Maven plugin
any grammar files that are imported by other grammar files (do not make subdirectories here.)
Such files are never built on their own, but the plugin will automatically tell the ANTLR
tool to look in this directory for library files.
-
diff --git a/antlr3-maven-plugin/src/site/apt/usage.apt.vm b/antlr3-maven-plugin/src/site/apt/usage.apt.vm
index 9b7ad0f..1b28890 100644
--- a/antlr3-maven-plugin/src/site/apt/usage.apt.vm
+++ b/antlr3-maven-plugin/src/site/apt/usage.apt.vm
@@ -1,193 +1,59 @@
Usage

- The Maven plugin for antlr is simple to use but is at its simplest when you use the default
- layouts for your grammars, as so:
+ The ANTLR 3 plugin for Maven can generate parsers for any number of grammars in
+ your project.
+
+* Compiling Grammars into Parsers
+
+ By default, the <<<{{{./antlr-mojo.html}antlr}}>>> goal will search for grammar
+ files in the directory <<<$\{basedir\}/src/main/antlr3>>> and any additional
+ <<<.tokens>>> files in the directory <<<$\{basedir\}/src/main/antlr3/imports>>>.
+ This can be configured to search other directories using the plugin configuration
+ parameters as described in the <<<{{{./antlr-mojo.html}antlr}}>>> goal
+ documentation.
+
+ The following figure shows the expected layout of files for the default
+ configuration of this plugin.

+--
src/main/
|
-      +--- antlr3/... .g files organized in the required package structure
+      +--- antlr3/...       .g files organized in the required package structure
|
-             +--- imports/  .g files that are imported by other grammars.
+             +--- imports/  user-created .tokens files and .g files that are imported by other grammars
+--

- However, if you are not able to use this structure for whatever reason, you
- can configure the locations of the grammar files, where library/import files
- are located and where the output files should be generated.
-
-* Plugin Descriptor
-
- The current version of the plugin is shown at the top of this page after the <<Last Deployed>> date.
-
- The full layout of the descriptor (at least, those parts that are not standard Maven things),
- showing the default values of the configuration options, is as follows:
+ The next step is to configure your POM to call the plugin. The goals will
+ normally run during the generate-sources phase of the build. Examples of how to
+ configure your POM can be found on the various examples pages, reachable via
+ the page menu. If you stick with the default values, the snippet below will
+ suffice:

+--
-<plugin>
-    <groupId>org.antlr</groupId>
-    <artifactId>antlr3-maven-plugin</artifactId>
-    <version>3.1.3-1</version>
-
-    <executions>
-
-        <execution>
-            <configuration>
-                <goals>
-                    <goal>antlr</goal>
-                </goals>
-                <conversionTimeout>10000</conversionTimeout>
-                <debug>false</debug>
-                <dfa>false</dfa>
-                <nfa>false</nfa>
-                <excludes><exclude/></excludes>
-                <includes><include/></includes>
-                <libDirectory>src/main/antlr3/imports</libDirectory>
-                <messageFormat>antlr</messageFormat>
-                <outputDirectory>target/generated-sources/antlr3</outputDirectory>
-                <printGrammar>false</printGrammar>
-                <profile>false</profile>
-                <report>false</report>
-                <sourceDirectory>src/main/antlr3</sourceDirectory>
-                <trace>false</trace>
-                <verbose>true</verbose>
-            </configuration>
-        </execution>
-    </executions>
-
-</plugin>
+<project>
+  ...
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.antlr</groupId>
+        <artifactId>antlr3-maven-plugin</artifactId>
+        <version>${project.version}</version>
+        <executions>
+          <execution>
+            <id>antlr</id>
+            <goals>
+              <goal>antlr</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
+    </plugins>
+    ...
+  </build>
+  ...
+</project>
+--

- Note that you can create multiple executions, and thus build some grammars with different
- options to others (such as setting the debug option for instance).
-
-** Configuration parameters
-
-*** report
-
-    If set to true, then after the tool has processed an input grammar file
-    it will report variaous statistics about the parser, such as information
-    on cyclic DFAs, which rules may use backtracking, and so on.
-
-    default-value="false"
-
-*** printGrammar
-
-    If set to true, then the ANTLR tool will print a version of the input
-    grammar which is devoid of any actions that may be present in the input file.
-
-    default-value = "false"
-
-*** debug
-
-     If set to true, then the code generated by the ANTLR code generator will
-     be set to debug mode. This means that when run, the code will 'hang' and
-     wait for a debug connection on a TCP port (49100 by default).
-
-     default-value="false"
-
-*** profile
-
-     If set to true, then then the generated parser will compute and report on
-     profile information at runtime.
-
-     default-value="false"
-
-*** nfa
-
-     If set to true then the ANTLR tool will generate a description of the nfa
-     for each rule in <a href="http://www.graphviz.org">Dot format</a>
-
-     default-value="false"
-
-    protected boolean nfa;
-
-*** dfa
-
-     If set to true then the ANTLR tool will generate a description of the DFA
-     for each decision in the grammar in <a href="http://www.graphviz.org">Dot format</a>
-
-     default-value="false"
-
-*** trace
-
-     If set to true, the generated parser code will log rule entry and exit points
-     to stdout as an aid to debugging.
-
-     default-value="false"
-
-*** messageFormat
-
-     If this parameter is set, it indicates that any warning or error messages returned
-     by ANLTR, shoould be formatted in the specified way. Currently, ANTLR supports the
-     built-in formats of antlr, gnu and vs2005.
-
-     default-value="antlr"
-
-*** verbose
-
-     If this parameter is set to true, then ANTLR will report all sorts of things
-     about what it is doing such as the names of files and the version of ANTLR and so on.
-
-     default-value="true"
-
-*** conversionTimeout
-
-     The number of milliseconds ANTLR will wait for analysis of each
-     alternative in the grammar to complete before giving up. You may raise
-     this value if ANTLR gives up on a complicated alt and tells you that
-     there are lots of ambiguties, but you know that it just needed to spend
-     more time on it. Note that this is an absolute time and not CPU time.
-
-     default-value="10000"
-
-*** includes
-
-     Provides an explicit list of all the grammars that should
-     be included in the generate phase of the plugin. Note that the plugin
-     is smart enough to realize that imported grammars should be included but
-     not acted upon directly by the ANTLR Tool.
-
-     Unless otherwise specified, the include list scans for and includes all
-     files that end in ".g" in any directory beneath src/main/antlr3. Note that
-     this version of the plugin looks for the directory antlr3 and not the directory
-     antlr, so as to avoid clashes and confusion for projects that use both v2 and v3 grammars
-     such as ANTLR itself.
-
-*** excludes
-
-     Provides an explicit list of any grammars that should be excluded from
-     the generate phase of the plugin. Files listed here will not be sent for
-     processing by the ANTLR tool.
-
-*** sourceDirectory
-
-     Specifies the Antlr directory containing grammar files. For
-     antlr version 3.x we default this to a directory in the tree
-     called antlr3 because the antlr directory is occupied by version
-     2.x grammars.
-
-     <<NB>> Take careful note that the default location for antlr grammars
-     is now <<antlr3>> and NOT <<antlr>>
-
-     default-value="<<<${basedir}/src/main/antlr3>>>"
-
-*** outputDirectory
-
-     Location for generated Java files. For antlr version 3.x we default
-     this to a directory in the tree called antlr3 because the antlr
-     directory is occupied by version 2.x grammars.
-
-     default-value="<<<${project.build.directory}/generated-sources/antlr3>>>"
-
-*** libDirectory
-
-     Location for imported token files, e.g. <code>.tokens</code> and imported grammars.
-     Note that ANTLR will not try to process grammars that it finds in this directory, but
-     will include this directory in the search for .tokens files and import grammars.
-
-     <<NB>> If you change the lib directory from the default but the directory is
-     still under<<<${basedir}/src/main/antlr3>>>, then you will need to exclude
-     the grammars from processing specifically, using the <<<<excludes>>>> option.
-
-     default-value="<<<${basedir}/src/main/antlr3/imports>>>"
-
+ Note that you can create multiple executions, and thus build some grammars with
+ different options to others (such as setting the <<<debug>>> option for
+ instance).
diff --git a/antlr3-maven-plugin/src/site/site.xml b/antlr3-maven-plugin/src/site/site.xml
index 7d0c52b..92bcea3 100644
--- a/antlr3-maven-plugin/src/site/site.xml
+++ b/antlr3-maven-plugin/src/site/site.xml
@@ -6,18 +6,20 @@
<version position="left"/>

<poweredBy>
-    <logo name="ANTLR Web Site" href="http://antlr.org/"
+    <logo name="ANTLR Web Site" href="http://antlr3.org/"
img="http://www.antlr.org/wiki/download/attachments/292/ANTLR3"/>
</poweredBy>

<body>
<links>
-      <item name="Antlr Web Site" href="http://www.antlr.org/"/>
+      <item name="Antlr Web Site" href="http://www.antlr3.org/"/>
</links>

<menu name="Overview">
<item name="Introduction" href="index.html"/>
+      <item name="Goals" href="plugin-info.html"/>
<item name="Usage" href="usage.html"/>
+      <item name="FAQ" href="faq.html"/>
</menu>

<menu name="Examples">

