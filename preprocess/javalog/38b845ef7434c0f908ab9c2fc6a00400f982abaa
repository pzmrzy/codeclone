commit 38b845ef7434c0f908ab9c2fc6a00400f982abaa
Author:     Sam Harwell <sam@tunnelvisionlabs.com>
AuthorDate: Wed Feb 22 12:10:47 2012 -0600
Commit:     Sam Harwell <sam@tunnelvisionlabs.com>
CommitDate: Wed Feb 22 12:26:06 2012 -0600

Replace while loop over Iterator<?> with for each loop

diff --git a/runtime/Java/src/main/java/org/antlr/runtime/TokenRewriteStream.java b/runtime/Java/src/main/java/org/antlr/runtime/TokenRewriteStream.java
index 7b21446..7a73adc 100644
--- a/runtime/Java/src/main/java/org/antlr/runtime/TokenRewriteStream.java
+++ b/runtime/Java/src/main/java/org/antlr/runtime/TokenRewriteStream.java
@@ -401,9 +401,7 @@ public class TokenRewriteStream extends CommonTokenStream {
if ( end==tokens.size()-1 ) {
// Scan any remaining operations after last token
// should be included (they will be inserts).
-            Iterator<? extends RewriteOperation> it = indexToOp.values().iterator();
-            while (it.hasNext()) {
-                RewriteOperation op = it.next();
+            for (RewriteOperation op : indexToOp.values()) {
if ( op.index >= tokens.size()-1 ) buf.append(op.text);
}
}
diff --git a/tool/src/main/java/org/antlr/analysis/DecisionProbe.java b/tool/src/main/java/org/antlr/analysis/DecisionProbe.java
index 34fc75b..eaad8f6 100644
--- a/tool/src/main/java/org/antlr/analysis/DecisionProbe.java
+++ b/tool/src/main/java/org/antlr/analysis/DecisionProbe.java
@@ -198,10 +198,7 @@ public class DecisionProbe {
}

if ( statesWithSyntacticallyAmbiguousAltsSet.size()>0 ) {
-			Iterator<DFAState> it =
-				statesWithSyntacticallyAmbiguousAltsSet.iterator();
-			while (	it.hasNext() ) {
-				DFAState d = it.next();
+			for (DFAState d : statesWithSyntacticallyAmbiguousAltsSet) {
if ( !statesResolvedWithSemanticPredicatesSet.contains(d) ) {
return false;
}
diff --git a/tool/src/main/java/org/antlr/codegen/CodeGenerator.java b/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
index 4151b8b..253a484 100644
--- a/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
+++ b/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
@@ -804,9 +804,7 @@ public class CodeGenerator {
*/
protected void genTokenTypeConstants(ST code) {
// make constants for the token types
-		Iterator<String> tokenIDs = grammar.getTokenIDs().iterator();
-		while (tokenIDs.hasNext()) {
-			String tokenID = tokenIDs.next();
+		for (String tokenID : grammar.getTokenIDs()) {
int tokenType = grammar.getTokenType(tokenID);
if ( tokenType==Label.EOF ||
tokenType>=Label.MIN_TOKEN_TYPE )
@@ -861,9 +859,7 @@ public class CodeGenerator {
vocabFileST.add("tokens",(Object)null);
vocabFileST.impl.name = "vocab-file";
// make constants for the token names
-		Iterator<String> tokenIDs = grammar.getTokenIDs().iterator();
-		while (tokenIDs.hasNext()) {
-			String tokenID = tokenIDs.next();
+		for (String tokenID : grammar.getTokenIDs()) {
int tokenType = grammar.getTokenType(tokenID);
if ( tokenType>=Label.MIN_TOKEN_TYPE ) {
vocabFileST.addAggr("tokens.{name,type}", tokenID, Utils.integer(tokenType));
@@ -871,9 +867,7 @@ public class CodeGenerator {
}

// now dump the strings
-		Iterator<String> literals = grammar.getStringLiterals().iterator();
-		while (literals.hasNext()) {
-			String literal = literals.next();
+		for (String literal : grammar.getStringLiterals()) {
int tokenType = grammar.getTokenType(literal);
if ( tokenType>=Label.MIN_TOKEN_TYPE ) {
vocabFileST.addAggr("tokens.{name,type}", literal, Utils.integer(tokenType));
diff --git a/tool/src/main/java/org/antlr/misc/BitSet.java b/tool/src/main/java/org/antlr/misc/BitSet.java
index 6f08df5..c85b923 100644
--- a/tool/src/main/java/org/antlr/misc/BitSet.java
+++ b/tool/src/main/java/org/antlr/misc/BitSet.java
@@ -127,14 +127,8 @@ public class BitSet implements IntSet, Cloneable {
if ( elements==null ) {
return;
}
-		Iterator<Integer> it = elements.iterator();
-		while (it.hasNext()) {
-			Object o = (Object) it.next();
-			if ( !(o instanceof Integer) ) {
-				throw new IllegalArgumentException();
-			}
-			Integer eI = (Integer)o;
-			add(eI.intValue());
+		for (Integer element : elements) {
+			add(element);
}
/*
int n = elements.size();
@@ -339,10 +333,8 @@ public class BitSet implements IntSet, Cloneable {

public static BitSet of(Collection<? extends Integer> elements) {
BitSet s = new BitSet();
-        Iterator<? extends Integer> iter = elements.iterator();
-        while (iter.hasNext()) {
-            Integer el = iter.next();
-            s.add(el.intValue());
+        for (Integer el : elements) {
+            s.add(el);
}
return s;
}
diff --git a/tool/src/main/java/org/antlr/tool/Grammar.java b/tool/src/main/java/org/antlr/tool/Grammar.java
index 426fbf5..dbe5c13 100644
--- a/tool/src/main/java/org/antlr/tool/Grammar.java
+++ b/tool/src/main/java/org/antlr/tool/Grammar.java
@@ -788,9 +788,7 @@ public class Grammar {
}
// make sure generated grammar has the same options
if ( options!=null ) {
-			Iterator<String> optionNames = options.keySet().iterator();
-			while (optionNames.hasNext()) {
-				String optionName = optionNames.next();
+			for (String optionName : options.keySet()) {
if ( !doNotCopyOptionsToLexer.contains(optionName) ) {
Object value = options.get(optionName);
lexerGrammarST.addAggr("options.{name,value}", optionName, value);
diff --git a/tool/src/main/java/org/antlr/tool/GrammarReport.java b/tool/src/main/java/org/antlr/tool/GrammarReport.java
index 9705337..416fbf9 100644
--- a/tool/src/main/java/org/antlr/tool/GrammarReport.java
+++ b/tool/src/main/java/org/antlr/tool/GrammarReport.java
@@ -289,9 +289,7 @@ public class GrammarReport {
protected String getDFALocations(Set<DFA> dfas) {
Set<Integer> decisions = new HashSet<Integer>();
StringBuilder buf = new StringBuilder();
-		Iterator<DFA> it = dfas.iterator();
-		while ( it.hasNext() ) {
-			DFA dfa = it.next();
+		for (DFA dfa : dfas) {
// if we aborted a DFA and redid with k=1, the backtrackin
if ( decisions.contains(Utils.integer(dfa.decisionNumber)) ) {
continue;
diff --git a/tool/src/main/java/org/antlr/tool/NameSpaceChecker.java b/tool/src/main/java/org/antlr/tool/NameSpaceChecker.java
index bd39e85..8a926b5 100644
--- a/tool/src/main/java/org/antlr/tool/NameSpaceChecker.java
+++ b/tool/src/main/java/org/antlr/tool/NameSpaceChecker.java
@@ -49,9 +49,7 @@ public class NameSpaceChecker {
}
// walk all labels for Rule r
if ( r.labelNameSpace!=null ) {
-				Iterator<Grammar.LabelElementPair> it = r.labelNameSpace.values().iterator();
-				while ( it.hasNext() ) {
-					Grammar.LabelElementPair pair = it.next();
+				for (Grammar.LabelElementPair pair : r.labelNameSpace.values()) {
checkForLabelConflict(r, pair.label);
}
}
@@ -67,9 +65,7 @@ public class NameSpaceChecker {
checkForRuleArgumentAndReturnValueConflicts(r);
}
// check all global scopes against tokens
-		Iterator<AttributeScope> it = grammar.getGlobalScopes().values().iterator();
-		while (it.hasNext()) {
-			AttributeScope scope = it.next();
+		for (AttributeScope scope : grammar.getGlobalScopes().values()) {
checkForGlobalScopeTokenConflict(scope);
}
// check for missing rule, tokens
diff --git a/tool/src/test/java/org/antlr/test/BaseTest.java b/tool/src/test/java/org/antlr/test/BaseTest.java
index 6964285..fa9ad04 100644
--- a/tool/src/test/java/org/antlr/test/BaseTest.java
+++ b/tool/src/test/java/org/antlr/test/BaseTest.java
@@ -835,11 +835,10 @@ public abstract class BaseTest {

public List<String> realElements(Map<String, Integer> elements) {
List<String> n = new ArrayList<String>();
-		Iterator<String> iterator = elements.keySet().iterator();
-		while (iterator.hasNext()) {
-			String tokenID = iterator.next();
-			if ( elements.get(tokenID) >= Label.MIN_TOKEN_TYPE ) {
-				n.add(tokenID+"="+elements.get(tokenID));
+		for (Map.Entry<String, Integer> entry : elements.entrySet()) {
+			String tokenID = entry.getKey();
+			if ( entry.getValue() >= Label.MIN_TOKEN_TYPE ) {
+				n.add(tokenID+"="+entry.getValue());
}
}
Collections.sort(n);

