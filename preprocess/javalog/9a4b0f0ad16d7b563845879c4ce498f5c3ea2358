commit 9a4b0f0ad16d7b563845879c4ce498f5c3ea2358
Author:     acondit <acondit@parrt.spork>
AuthorDate: Sat Jun 4 07:23:20 2011 -0800
Commit:     acondit <acondit@parrt.spork>
CommitDate: Sat Jun 4 07:23:20 2011 -0800

More work on ANTLR3.4 revision

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8587]

diff --git a/runtime/ObjC/Framework/AMutableArray.m b/runtime/ObjC/Framework/AMutableArray.m
index c392f0e..e6d1eb8 100644
--- a/runtime/ObjC/Framework/AMutableArray.m
+++ b/runtime/ObjC/Framework/AMutableArray.m
@@ -111,7 +111,6 @@
ptrBuffer = [buffer mutableBytes];
obj = ptrBuffer[anIdx];
if ( obj == [NSNull null] ) {
-        [obj release];
obj = nil;
}
return obj;
diff --git a/runtime/ObjC/Framework/AMutableDictionary.m b/runtime/ObjC/Framework/AMutableDictionary.m
index 75b2b11..88b85a8 100644
--- a/runtime/ObjC/Framework/AMutableDictionary.m
+++ b/runtime/ObjC/Framework/AMutableDictionary.m
@@ -81,6 +81,7 @@
#ifdef DEBUG_DEALLOC
NSLog( @"called dealloc in AMutableDictionary" );
#endif
+    if ( data ) [data release];
if ( root ) [root release];
[super dealloc];
}
@@ -113,7 +114,6 @@
if ( ret >= 0 && ret < node.numkeys ) {
obj = node.btNodes[ret];
if ( obj == [NSNull null] ) {
-                [obj release];
obj = nil;
}
}
diff --git a/runtime/ObjC/Framework/ANTLRBaseMapElement.h b/runtime/ObjC/Framework/ANTLRBaseMapElement.h
index b1031f1..0815165 100644
--- a/runtime/ObjC/Framework/ANTLRBaseMapElement.h
+++ b/runtime/ObjC/Framework/ANTLRBaseMapElement.h
@@ -33,7 +33,7 @@
#import "ANTLRLinkBase.h"

@interface ANTLRBaseMapElement : ANTLRLinkBase {
-    __strong NSNumber *index;
+    NSNumber *index;
}

@property (retain) NSNumber *index;
diff --git a/runtime/ObjC/Framework/ANTLRBaseMapElement.m b/runtime/ObjC/Framework/ANTLRBaseMapElement.m
index 62a618f..7197799 100644
--- a/runtime/ObjC/Framework/ANTLRBaseMapElement.m
+++ b/runtime/ObjC/Framework/ANTLRBaseMapElement.m
@@ -57,8 +57,8 @@
- (id) initWithAnIndex:(NSNumber *)aNumber
{
if ((self = [super init]) != nil ) {
-        [aNumber retain];
index = aNumber;
+        if ( index ) [index retain];
}
return (self);
}
diff --git a/runtime/ObjC/Framework/ANTLRBaseTree.m b/runtime/ObjC/Framework/ANTLRBaseTree.m
index a953819..5ba4eac 100755
--- a/runtime/ObjC/Framework/ANTLRBaseTree.m
+++ b/runtime/ObjC/Framework/ANTLRBaseTree.m
@@ -89,8 +89,9 @@ static id<ANTLRBaseTree> invalidNode = nil;
{
self = [super init];
if ( self != nil ) {
-        children = [[AMutableArray arrayWithCapacity:5] retain];
-        [children addObject:node];
+        // children = [[AMutableArray arrayWithCapacity:5] retain];
+        // [children addObject:node];
+        [self addChild:node];
return self;
}
return nil;
@@ -102,7 +103,6 @@ static id<ANTLRBaseTree> invalidNode = nil;
NSLog( @"called dealloc in ANTLRBaseTree" );
#endif
if ( children ) [children release];
-	children = nil;
[super dealloc];
}

@@ -119,14 +119,14 @@ static id<ANTLRBaseTree> invalidNode = nil;
*/
- (AMutableArray *) children
{
-    return children; // [[children retain] autorelease];
+    return children;
}

- (void) setChildren:(AMutableArray *)anArray
{
if ( children != anArray ) {
if ( children ) [children release];
-        [anArray retain];
+        if ( anArray ) [anArray retain];
}
children = anArray;
}
diff --git a/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.m b/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.m
index ea95286..58b181d 100644
--- a/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.m
+++ b/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.m
@@ -139,7 +139,7 @@
- (void) addChild:(id)child toTree:(id)t
{
if ( t != nil && child != nil ) {
-        [(id)t addChild:[(id)child retain]];
+        [(id)t addChild:child];
}
}

diff --git a/runtime/ObjC/Framework/ANTLRCommonToken.m b/runtime/ObjC/Framework/ANTLRCommonToken.m
index b9ba3e1..ee0e018 100644
--- a/runtime/ObjC/Framework/ANTLRCommonToken.m
+++ b/runtime/ObjC/Framework/ANTLRCommonToken.m
@@ -198,7 +198,7 @@ static ANTLRCommonToken *INVALID_TOKEN;
if ((self = [super init]) != nil) {
self.type = aTType;
self.text = [NSString stringWithString:tokenText];
-        [text retain];
+        if ( text ) [text retain];
}
return self;
}
diff --git a/runtime/ObjC/Framework/ANTLRCommonTree.m b/runtime/ObjC/Framework/ANTLRCommonTree.m
index fc062f3..68c1fc1 100644
--- a/runtime/ObjC/Framework/ANTLRCommonTree.m
+++ b/runtime/ObjC/Framework/ANTLRCommonTree.m
@@ -178,7 +178,8 @@
{
if ( token != aToken ) {
if ( token ) [token release];
-		token = [aToken retain];
+		[aToken retain];
+		token = aToken;
}
}

diff --git a/runtime/ObjC/Framework/ANTLRHashMap.m b/runtime/ObjC/Framework/ANTLRHashMap.m
index e56841b..ab025a9 100644
--- a/runtime/ObjC/Framework/ANTLRHashMap.m
+++ b/runtime/ObjC/Framework/ANTLRHashMap.m
@@ -452,7 +452,7 @@ static NSInteger itIndex;
idx %= BuffSize;
}
if ( aRule != ptrBuffer[idx] ) {
-        if ( ptrBuffer[idx] != nil ) [ptrBuffer[idx] release];
+        if ( ptrBuffer[idx] ) [ptrBuffer[idx] release];
[aRule retain];
}
ptrBuffer[idx] = aRule;
diff --git a/runtime/ObjC/Framework/ANTLRHashRule.m b/runtime/ObjC/Framework/ANTLRHashRule.m
index 71fede8..3bca78f 100644
--- a/runtime/ObjC/Framework/ANTLRHashRule.m
+++ b/runtime/ObjC/Framework/ANTLRHashRule.m
@@ -261,9 +261,7 @@

Index = ( anIndex >= BuffSize ) ? anIndex % BuffSize : anIndex;
if (aRule != ptrBuffer[Index]) {
-        if (ptrBuffer[Index] != nil) {
-            [ptrBuffer[Index] release];
-        }
+        if ( ptrBuffer[Index] ) [ptrBuffer[Index] release];
[aRule retain];
}
ptrBuffer[Index] = aRule;
diff --git a/runtime/ObjC/Framework/ANTLRLookaheadStream.m b/runtime/ObjC/Framework/ANTLRLookaheadStream.m
index fc1a720..57e489e 100644
--- a/runtime/ObjC/Framework/ANTLRLookaheadStream.m
+++ b/runtime/ObjC/Framework/ANTLRLookaheadStream.m
@@ -59,7 +59,8 @@
-(id) initWithEOF:(id)obj
{
if ((self = [super init]) != nil) {
-		self.eof = [obj retain];
+		self.eof = obj;
+        if ( self.eof ) [self.eof retain];
}
return self;
}
diff --git a/runtime/ObjC/Framework/ANTLRMapElement.h b/runtime/ObjC/Framework/ANTLRMapElement.h
index ee70312..e20d01c 100644
--- a/runtime/ObjC/Framework/ANTLRMapElement.h
+++ b/runtime/ObjC/Framework/ANTLRMapElement.h
@@ -33,8 +33,8 @@
#import "ANTLRBaseMapElement.h"

@interface ANTLRMapElement : ANTLRBaseMapElement {
-    __strong NSString *name;
-    __strong id        node;
+    NSString *name;
+    id        node;
}
@property (retain, getter=getName, setter=setName:) NSString *name;
@property (retain, getter=getNode, setter=setNode:) id node;
diff --git a/runtime/ObjC/Framework/ANTLRMapElement.m b/runtime/ObjC/Framework/ANTLRMapElement.m
index 1eb9682..bce1c9f 100644
--- a/runtime/ObjC/Framework/ANTLRMapElement.m
+++ b/runtime/ObjC/Framework/ANTLRMapElement.m
@@ -65,7 +65,8 @@

- (id) init
{
-    if ((self = [super init]) != nil) {
+    self = [super init];
+    if ( self != nil ) {
index = nil;
name  = nil;
}
@@ -74,7 +75,8 @@

- (id) initWithName:(NSString *)aName Type:(NSInteger)aTType
{
-    if ((self = [super init]) != nil) {
+    self = [super init];
+    if ( self != nil ) {
index = [[NSNumber numberWithInteger: aTType] retain];
name  = [[NSString stringWithString:aName] retain];
}
@@ -83,31 +85,45 @@

- (id) initWithNode:(NSInteger)aTType Node:(id)aNode
{
-    if ((self = [super init]) != nil) {
-        index = [[NSNumber numberWithInteger: aTType] retain];
-        node  = [aNode retain];
+    self = [super initWithAnIndex:[NSNumber numberWithInteger:aTType]];
+    if ( self != nil ) {
+        node  = aNode;
+        if ( node ) [node retain];
}
return self;
}

- (id) initWithName:(NSString *)aName Node:(id)aNode
{
-    if ((self = [super init]) != nil) {
+    self = [super init];
+    if ( self != nil ) {
name  = [[NSString stringWithString:aName] retain];
-        node = [aNode retain];
+        node = aNode;
+        if ( node ) [node retain];
}
return self;
}

-- (id) initWithObj1:(id)anObj1 Obj2:(id)anObj2
+- (id) initWithObj1:(id)anIndex Obj2:(id)aNode
{
-    if ((self = [super init]) != nil) {
-        index  = [anObj1 retain];
-        node = [anObj2 retain];
+    self = [super initWithAnIndex:anIndex];
+    if ( self != nil ) {
+        node = aNode;
+        if ( node ) [node retain];
}
return self;
}

+- (void) dealloc
+{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRMapElement" );
+#endif
+    if ( name ) [name release];
+    if ( node ) [node release];
+    [super dealloc];
+}
+
- (id) copyWithZone:(NSZone *)aZone
{
ANTLRMapElement *copy;
@@ -129,8 +145,8 @@
- (NSInteger)size
{
NSInteger aSize = 0;
-    if ( name != nil ) aSize += sizeof(id);
-    if ( node != nil ) aSize += sizeof(id);
+    if ( name ) aSize += sizeof(id);
+    if ( node ) aSize += sizeof(id);
return aSize;
}

@@ -155,8 +171,8 @@
}

- (void)setNode:(id)aNode
-{   if (aNode != node) {
-        if (node != nil) [node release];
+{   if ( aNode != node ) {
+        if ( node ) [node release];
[aNode retain];
}
node = aNode;
diff --git a/runtime/ObjC/Framework/ANTLRRewriteRuleElementStream.m b/runtime/ObjC/Framework/ANTLRRewriteRuleElementStream.m
index ab06c40..138163c 100644
--- a/runtime/ObjC/Framework/ANTLRRewriteRuleElementStream.m
+++ b/runtime/ObjC/Framework/ANTLRRewriteRuleElementStream.m
@@ -251,7 +251,7 @@
if ( description != nil && description != elementDescription ) {
if (elementDescription != nil) [elementDescription release];
elementDescription = [NSString stringWithString:description];
-        [description release];
+        [elementDescription retain];
}
}

diff --git a/runtime/ObjC/Framework/ANTLRRuleStack.m b/runtime/ObjC/Framework/ANTLRRuleStack.m
index 5aef433..39e93b2 100644
--- a/runtime/ObjC/Framework/ANTLRRuleStack.m
+++ b/runtime/ObjC/Framework/ANTLRRuleStack.m
@@ -44,12 +44,12 @@ extern NSInteger debug;

+ (ANTLRRuleStack *)newANTLRRuleStack
{
-    return [[[ANTLRRuleStack alloc] init] retain];
+    return [[ANTLRRuleStack alloc] init];
}

+ (ANTLRRuleStack *)newANTLRRuleStack:(NSInteger)cnt
{
-    return [[[ANTLRRuleStack alloc] initWithLen:cnt] retain];
+    return [[ANTLRRuleStack alloc] initWithLen:cnt];
}

- (id)init
diff --git a/runtime/ObjC/Framework/ANTLRStringStream.m b/runtime/ObjC/Framework/ANTLRStringStream.m
index e08ab33..1e1da4d 100644
--- a/runtime/ObjC/Framework/ANTLRStringStream.m
+++ b/runtime/ObjC/Framework/ANTLRStringStream.m
@@ -344,7 +344,11 @@ extern NSInteger debug;

- (void) setSourceName:(NSString *)aName
{
-    name = aName;
+    if ( name != aName ) {
+        if ( name ) [name release];
+        if ( aName ) [aName retain];
+        name = aName;
+    }
}


@@ -374,9 +378,9 @@ extern NSInteger debug;
- (void) setData: (NSString *) aData
{
if (data != aData) {
+        if ( data ) [data release];
data = [NSString stringWithString:aData];
[data retain];
-        [aData release];
}
}

diff --git a/runtime/ObjC/Framework/ArrayIterator.m b/runtime/ObjC/Framework/ArrayIterator.m
index 5d01527..45d1e6a 100644
--- a/runtime/ObjC/Framework/ArrayIterator.m
+++ b/runtime/ObjC/Framework/ArrayIterator.m
@@ -167,7 +167,7 @@

- (void) removeObjectAtIndex:(NSInteger)idx
{
-    @throw [[ANTLRUnsupportedOperationException newException:@"Cant remove object from ArrayIterator"] autorelease];
+    @throw [ANTLRUnsupportedOperationException newException:@"Cant remove object from ArrayIterator"];
}

- (NSInteger) count

