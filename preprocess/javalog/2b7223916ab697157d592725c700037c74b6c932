commit 2b7223916ab697157d592725c700037c74b6c932
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Thu Apr 21 06:04:29 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Thu Apr 21 06:04:29 2011 -0800

Use checked generics which revealed an improper field declaration (field Grammar.actions)

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8286]

diff --git a/tool/src/main/java/org/antlr/codegen/CodeGenerator.java b/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
index 3baac43..c6dec27 100644
--- a/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
+++ b/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
@@ -318,7 +318,7 @@ public class CodeGenerator {
// The only two possible output files are available at this point.
// Verify action scopes are ok for target and dump actions into output
// Templates can say <actions.parser.header> for example.
-		Map actions = grammar.getActions();
+		Map<String, Map<String, Object>> actions = grammar.getActions();
verifyActionScopesOkForTarget(actions);
// translate $x::y references
translateActionAttributeReferences(actions);
diff --git a/tool/src/main/java/org/antlr/codegen/RubyTarget.java b/tool/src/main/java/org/antlr/codegen/RubyTarget.java
index 2565678..4506d01 100644
--- a/tool/src/main/java/org/antlr/codegen/RubyTarget.java
+++ b/tool/src/main/java/org/antlr/codegen/RubyTarget.java
@@ -29,8 +29,10 @@
package org.antlr.codegen;

import org.antlr.Tool;
-import org.stringtemplate.v4.*;
import org.antlr.tool.Grammar;
+import org.stringtemplate.v4.AttributeRenderer;
+import org.stringtemplate.v4.ST;
+import org.stringtemplate.v4.STGroup;

import java.io.IOException;
import java.util.*;
@@ -59,7 +61,7 @@ public class RubyTarget extends Target
}
};

-    public static HashMap sharedActionBlocks = new HashMap();
+    public static Map<String, Map<String, Object>> sharedActionBlocks = new HashMap<String, Map<String, Object>>();

public class RubyRenderer implements AttributeRenderer
{
@@ -337,13 +339,13 @@ public class RubyTarget extends Target
*/

if ( grammar.type == Grammar.COMBINED ) {
-            Map actions = grammar.getActions();
+            Map<String, Map<String, Object>> actions = grammar.getActions();
if ( actions.containsKey( "all" ) ) {
sharedActionBlocks.put( grammar.name, actions.get( "all" ) );
}
} else if ( grammar.implicitLexer ) {
if ( sharedActionBlocks.containsKey( grammar.name ) ) {
-                Map actions = grammar.getActions();
+                Map<String, Map<String, Object>> actions = grammar.getActions();
actions.put( "all", sharedActionBlocks.get( grammar.name ) );
}
}
diff --git a/tool/src/main/java/org/antlr/tool/Grammar.java b/tool/src/main/java/org/antlr/tool/Grammar.java
index 2d4ef6e..a88314d 100644
--- a/tool/src/main/java/org/antlr/tool/Grammar.java
+++ b/tool/src/main/java/org/antlr/tool/Grammar.java
@@ -287,8 +287,8 @@ public class Grammar {
*  I track the AST node for the action in case I need the line number
*  for errors.
*/
-	protected Map<String, Map<String,GrammarAST>> actions =
-		new HashMap<String, Map<String,GrammarAST>>();
+	private Map<String, Map<String, Object>> actions =
+		new HashMap<String, Map<String, Object>>();

/** The NFA that represents the grammar with edges labelled with tokens
*  or epsilon.  It is more suitable to analysis than an AST representation.
@@ -779,11 +779,11 @@ public class Grammar {
}
lexerGrammarST.add("name", name);
// if there are any actions set for lexer, pass them in
-		if ( actions.get("lexer")!=null ) {
+		if ( getActions().get("lexer")!=null ) {
lexerGrammarST.add("actionNames",
-										((Map)actions.get("lexer")).keySet());
+										getActions().get("lexer").keySet());
lexerGrammarST.add("actions",
-										((Map)actions.get("lexer")).values());
+										getActions().get("lexer").values());
}
// make sure generated grammar has the same options
if ( options!=null ) {
@@ -1500,12 +1500,12 @@ outer:
}
//System.out.println("Grammar "+name+" define @"+scope+"::"+nameAST.getText()+"{"+actionAST.getText()+"}");
String actionName = nameAST.getText();
-		Map scopeActions = (Map)actions.get(scope);
+		Map<String, Object> scopeActions = getActions().get(scope);
if ( scopeActions==null ) {
-			scopeActions = new HashMap();
-			actions.put(scope, scopeActions);
+			scopeActions = new HashMap<String, Object>();
+			getActions().put(scope, scopeActions);
}
-		GrammarAST a = (GrammarAST)scopeActions.get(actionName);
+		Object a = scopeActions.get(actionName);
if ( a!=null ) {
ErrorManager.grammarError(
ErrorManager.MSG_ACTION_REDEFINITION,this,
@@ -1528,21 +1528,21 @@ outer:

public void setSynPredGateIfNotAlready(ST gateST) {
String scope = getDefaultActionScope(type);
-        Map actionsForGrammarScope = (Map)actions.get(scope);
+        Map<String, Object> actionsForGrammarScope = getActions().get(scope);
// if no synpredgate action set by user then set
if ( (actionsForGrammarScope==null ||
!actionsForGrammarScope.containsKey(Grammar.SYNPREDGATE_ACTION_NAME)) )
{
if ( actionsForGrammarScope==null ) {
-                actionsForGrammarScope=new HashMap();
-                actions.put(scope, actionsForGrammarScope);
+                actionsForGrammarScope=new HashMap<String, Object>();
+                getActions().put(scope, actionsForGrammarScope);
}
actionsForGrammarScope.put(Grammar.SYNPREDGATE_ACTION_NAME,
gateST);
}
}

-	public Map getActions() {
+	public Map<String, Map<String, Object>> getActions() {
return actions;
}


