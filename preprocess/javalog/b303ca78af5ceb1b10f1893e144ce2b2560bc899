commit b303ca78af5ceb1b10f1893e144ce2b2560bc899
Author:     acondit <acondit@parrt.spork>
AuthorDate: Sat May 7 07:54:41 2011 -0800
Commit:     acondit <acondit@parrt.spork>
CommitDate: Sat May 7 07:54:41 2011 -0800

Changes to match ANTLR3.4 changes

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8405]

diff --git a/runtime/ObjC/Framework/test/runtime/tree/ANTLRCommonTreeTest.m b/runtime/ObjC/Framework/test/runtime/tree/ANTLRCommonTreeTest.m
index 0512413..b944721 100644
--- a/runtime/ObjC/Framework/test/runtime/tree/ANTLRCommonTreeTest.m
+++ b/runtime/ObjC/Framework/test/runtime/tree/ANTLRCommonTreeTest.m
@@ -12,12 +12,13 @@
#import "ANTLRCommonTree.h"
#import "ANTLRCommonToken.h"
#import "ANTLRError.h"
+#import "ANTLRRuntimeException.h"

@implementation ANTLRCommonTreeTest

-(void) test01InitAndRelease
{
-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTree];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTree];
STAssertNotNil(tree, @"Tree was nil");
// FIXME: It doesn't do anything else, perhaps initWithTree should set something somewhere, java says no though...
return;
@@ -25,7 +26,7 @@

-(void) test02InitWithTree
{
-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTree];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTree];
STAssertNotNil(tree, @"Tree was nil");
if (tree != nil)
STAssertEquals([tree getType], (NSInteger)ANTLRTokenTypeInvalid, @"Tree should have an invalid token type, because it has no token");
@@ -36,17 +37,17 @@
-(void) test03WithToken
{
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"this||is||a||double||piped||separated||csv"];
-	ANTLRCommonToken *token = [ANTLRCommonToken newANTLRCommonToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
+	ANTLRCommonToken *token = [ANTLRCommonToken newToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
token.line = 1;
token.charPositionInLine = 4;
-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTreeWithToken:token];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTreeWithToken:token];
STAssertNotNil(tree, @"Tree was nil");
if (tree != nil)
STAssertNotNil(tree.token, @"Tree with token was nil");
if (tree != nil && tree.token != nil) {
STAssertEquals((NSUInteger) tree.token.line, (NSUInteger)1, [NSString stringWithFormat:@"Tree should be at line 1, but was at %d", tree.token.line] );
STAssertEquals((NSUInteger) tree.token.charPositionInLine, (NSUInteger)4, [NSString stringWithFormat:@"Char position should be 1, but was at %d", tree.token.charPositionInLine]);
-        STAssertNotNil(tree.token.text, @"Tree with token with text was nil");
+        STAssertNotNil(((ANTLRCommonToken *)tree.token).text, @"Tree with token with text was nil");
}
if (tree != nil && tree.token != nil && tree.token.text != nil)
STAssertTrue([tree.token.text isEqualToString:@"||"], @"Text was not ||");
@@ -56,7 +57,7 @@

-(void) test04InvalidTreeNode
{
-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTreeWithToken:[ANTLRCommonToken invalidToken]];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTreeWithToken:[ANTLRCommonToken invalidToken]];
STAssertNotNil(tree, @"Tree was nil");
STAssertEquals(tree.token.type, (NSInteger)ANTLRTokenTypeInvalid, @"Tree Token type was not ANTLRTokenTypeInvalid");
//[tree release];
@@ -66,11 +67,11 @@
-(void) test05InitWithCommonTreeNode
{
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"this||is||a||double||piped||separated||csv"];
-	ANTLRCommonToken *token = [ANTLRCommonToken newANTLRCommonToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTreeWithToken:token];
+	ANTLRCommonToken *token = [ANTLRCommonToken newToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTreeWithToken:token];
STAssertNotNil(tree, @"Tree was nil");
STAssertNotNil(tree.token, @"Tree token was nil");
-	ANTLRCommonTree *newTree = [ANTLRCommonTree newANTLRCommonTreeWithTree:tree];
+	ANTLRCommonTree *newTree = [ANTLRCommonTree newTreeWithTree:tree];
STAssertNotNil(newTree, @"New tree was nil");
STAssertNotNil(newTree.token, @"New tree token was nil");
STAssertEquals(newTree.token, tree.token, @"Tokens did not match");
@@ -86,10 +87,10 @@
-(void) test06CopyTree
{
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"this||is||a||double||piped||separated||csv"];
-	ANTLRCommonToken *token = [ANTLRCommonToken newANTLRCommonToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTreeWithToken:token];
+	ANTLRCommonToken *token = [ANTLRCommonToken newToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTreeWithToken:token];
STAssertNotNil(tree, @"Tree was nil");
-	ANTLRCommonTree *newTree = [tree copyWithZone:nil];
+	ANTLRCommonTree *newTree = (ANTLRCommonTree *)[tree copyWithZone:nil];
STAssertTrue([newTree isKindOfClass:[ANTLRCommonTree class]], @"Copied tree was not an ANTLRCommonTree");
STAssertNotNil(newTree, @"New tree was nil");
// STAssertEquals(newTree.token, tree.token, @"Tokens did not match");
@@ -115,13 +116,13 @@
}
//[errorTree release];

-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeUP];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeUP];
STAssertNotNil(tree, @"Tree is nil");
if (tree != nil)
STAssertNil([tree description], @"Tree description was not nil, was: %@", [tree description]);
//[tree release];

-	tree = [ANTLRCommonTree newANTLRCommonTree];
+	tree = [ANTLRCommonTree newTree];
STAssertNotNil(tree, @"Tree is nil");
if (tree != nil) {
aString = [tree description];
@@ -132,8 +133,8 @@
//[tree release];

ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"this||is||a||double||piped||separated||csv"];
-	ANTLRCommonToken *token = [ANTLRCommonToken newANTLRCommonToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
-	tree = [ANTLRCommonTree newANTLRCommonTreeWithToken:token];
+	ANTLRCommonToken *token = [ANTLRCommonToken newToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
+	tree = [ANTLRCommonTree newTreeWithToken:token];
STAssertNotNil(tree, @"Tree node is nil");
aString = [tree description];
STAssertNotNil(aString, @"tree description returned nil");
@@ -146,14 +147,14 @@
-(void) test08Text
{
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"this||is||a||double||piped||separated||csv"];
-	ANTLRCommonToken *token = [ANTLRCommonToken newANTLRCommonToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTreeWithToken:token];
+	ANTLRCommonToken *token = [ANTLRCommonToken newToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTreeWithToken:token];
STAssertNotNil(tree, @"Tree was nil");
STAssertTrue([tree.token.text isEqualToString:@"||"], @"Tree text was not valid, should have been || was %@", tree.token.text);
//[tree release];

// test nil (for line coverage)
-	tree = [ANTLRCommonTree newANTLRCommonTree];
+	tree = [ANTLRCommonTree newTree];
STAssertNotNil(tree, @"Tree was nil");
STAssertNil(tree.token.text, @"Tree text was not nil: %@", tree.token.text);
return;
@@ -162,16 +163,16 @@
-(void) test09AddChild
{
// Create a new tree
-	ANTLRCommonTree *parent = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:555];
+	ANTLRCommonTree *parent = [ANTLRCommonTree newTreeWithTokenType:555];
parent.token.line = 1;
parent.token.charPositionInLine = 1;

// Child tree
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"this||is||a||double||piped||separated||csv"];
-	ANTLRCommonToken *token = [ANTLRCommonToken newANTLRCommonToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
+	ANTLRCommonToken *token = [ANTLRCommonToken newToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
token.line = 1;
token.charPositionInLine = 4;
-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTreeWithToken:token];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTreeWithToken:token];

// Add a child to the parent tree
[parent addChild:tree];
@@ -194,19 +195,19 @@
-(void) test10AddChildren
{
// Create a new tree
-	ANTLRCommonTree *parent = [ANTLRCommonTree newANTLRCommonTree];
+	ANTLRCommonTree *parent = [ANTLRCommonTree newTree];

// Child tree
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"this||is||a||double||piped||separated||csv"];
-	ANTLRCommonToken *token = [ANTLRCommonToken newANTLRCommonToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
+	ANTLRCommonToken *token = [ANTLRCommonToken newToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
token.line = 1;
token.charPositionInLine = 4;
-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTreeWithToken:token];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTreeWithToken:token];

// Add a child to the parent tree
[parent addChild: tree];

-	ANTLRCommonTree *newParent = [ANTLRCommonTree newANTLRCommonTree];
+	ANTLRCommonTree *newParent = [ANTLRCommonTree newTree];
[newParent addChildren:parent.children];

STAssertEquals([newParent getChild:0], [parent getChild:0], @"Children did not match");
@@ -215,14 +216,14 @@

-(void) test11AddSelfAsChild
{
-	ANTLRCommonTree *parent = [ANTLRCommonTree newANTLRCommonTree];
+	ANTLRCommonTree *parent = [ANTLRCommonTree newTree];
@try
{
[parent addChild:parent];
}
@catch (NSException *e)
{
-		STAssertTrue([[e name] isEqualToString:ANTLRIllegalArgumentException], @"Got wrong kind of exception! %@", [e name]);
+		STAssertTrue([[e name] isEqualToString:@"ANTLRIllegalArgumentException"], @"Got wrong kind of exception! %@", [e name]);
//[parent release];
return;
}
@@ -232,8 +233,8 @@

-(void) test12AddEmptyChildWithNoChildren
{
-	ANTLRCommonTree *emptyChild = [ANTLRCommonTree newANTLRCommonTree];
-	ANTLRCommonTree *parent = [ANTLRCommonTree newANTLRCommonTree];
+	ANTLRCommonTree *emptyChild = [ANTLRCommonTree newTree];
+	ANTLRCommonTree *parent = [ANTLRCommonTree newTree];
[parent addChild:emptyChild];
STAssertEquals((NSInteger)[parent getChildCount], (NSInteger)0, @"There were supposed to be no children!");
//[parent release];
@@ -244,19 +245,19 @@
-(void) test13AddEmptyChildWithChildren
{
// Create a new tree
-	ANTLRCommonTree *parent = [ANTLRCommonTree newANTLRCommonTree];
+	ANTLRCommonTree *parent = [ANTLRCommonTree newTree];

// Child tree
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"this||is||a||double||piped||separated||csv"];
-	ANTLRCommonToken *token = [ANTLRCommonToken newANTLRCommonToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
+	ANTLRCommonToken *token = [ANTLRCommonToken newToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
token.line = 1;
token.charPositionInLine = 4;
-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTreeWithToken:token];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTreeWithToken:token];

// Add a child to the parent tree
[parent addChild: tree];

-	ANTLRCommonTree *newParent = [ANTLRCommonTree newANTLRCommonTree];
+	ANTLRCommonTree *newParent = [ANTLRCommonTree newTree];
[newParent addChild:parent];

STAssertEquals((NSInteger)[newParent getChildCount], (NSInteger)1, @"Parent should only have 1 child: %d", [newParent getChildCount]);
@@ -270,12 +271,12 @@
-(void) test14ChildAtIndex
{
// Create a new tree
-	ANTLRCommonTree *parent = [ANTLRCommonTree newANTLRCommonTree];
+	ANTLRCommonTree *parent = [ANTLRCommonTree newTree];

// Child tree
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"this||is||a||double||piped||separated||csv"];
-	ANTLRCommonToken *token = [ANTLRCommonToken newANTLRCommonToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTreeWithToken:token];
+	ANTLRCommonToken *token = [ANTLRCommonToken newToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTreeWithToken:token];

// Add a child to the parent tree
[parent addChild: tree];
@@ -291,15 +292,15 @@

-(void) test15SetChildAtIndex
{
-	ANTLRCommonTree *parent = [ANTLRCommonTree newANTLRCommonTree];
+	ANTLRCommonTree *parent = [ANTLRCommonTree newTree];

// Child tree
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"this||is||a||double||piped||separated||csv"];
-	ANTLRCommonToken *token = [ANTLRCommonToken newANTLRCommonToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTreeWithToken:token];
+	ANTLRCommonToken *token = [ANTLRCommonToken newToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTreeWithToken:token];


-	tree = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeUP];
+	tree = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeUP];
tree.token.text = @"<UP>";
[parent addChild:tree];

@@ -316,18 +317,18 @@

-(void) test16GetAncestor
{
-	ANTLRCommonTree *parent = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeUP];
+	ANTLRCommonTree *parent = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeUP];
parent.token.text = @"<UP>";

-	ANTLRCommonTree *down = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeDOWN];
+	ANTLRCommonTree *down = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeDOWN];
down.token.text = @"<DOWN>";

[parent addChild:down];

// Child tree
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"this||is||a||double||piped||separated||csv"];
-	ANTLRCommonToken *token = [ANTLRCommonToken newANTLRCommonToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTreeWithToken:token];
+	ANTLRCommonToken *token = [ANTLRCommonToken newToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTreeWithToken:token];

[down addChild:tree];
STAssertTrue([tree hasAncestor:ANTLRTokenTypeUP], @"Should have an ancestor of type ANTLRTokenTypeUP");
@@ -342,22 +343,22 @@
-(void) test17FirstChildWithType
{
// Create a new tree
-	ANTLRCommonTree *parent = [ANTLRCommonTree newANTLRCommonTree];
+	ANTLRCommonTree *parent = [ANTLRCommonTree newTree];

-	ANTLRCommonTree *up = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeUP];
-	ANTLRCommonTree *down = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeDOWN];
+	ANTLRCommonTree *up = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeUP];
+	ANTLRCommonTree *down = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeDOWN];

[parent addChild:up];
[parent addChild:down];

-	ANTLRCommonTree *found = [parent getFirstChildWithType:ANTLRTokenTypeDOWN];
+	ANTLRCommonTree *found = (ANTLRCommonTree *)[parent getFirstChildWithType:ANTLRTokenTypeDOWN];
STAssertNotNil(found, @"Child with type DOWN should not be nil");
if (found != nil) {
STAssertNotNil(found.token, @"Child token with type DOWN should not be nil");
if (found.token != nil)
STAssertEquals((NSInteger)found.token.type, (NSInteger)ANTLRTokenTypeDOWN, @"Token type was not correct, should be down!");
}
-	found = [parent getFirstChildWithType:ANTLRTokenTypeUP];
+	found = (ANTLRCommonTree *)[parent getFirstChildWithType:ANTLRTokenTypeUP];
STAssertNotNil(found, @"Child with type UP should not be nil");
if (found != nil) {
STAssertNotNil(found.token, @"Child token with type UP should not be nil");
@@ -372,10 +373,10 @@
{
// Child tree
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"this||is||a||double||piped||separated||csv"];
-	ANTLRCommonToken *token = [ANTLRCommonToken newANTLRCommonToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTreeWithToken:token];
+	ANTLRCommonToken *token = [ANTLRCommonToken newToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTreeWithToken:token];

-	ANTLRCommonTree *parent = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:555];
+	ANTLRCommonTree *parent = [ANTLRCommonTree newTreeWithTokenType:555];
STAssertNotNil(tree, @"tree should not be nil");
@try
{
@@ -393,7 +394,7 @@
}
@catch (NSException * e)
{
-		STAssertTrue([[e name] isEqualToString:ANTLRIllegalArgumentException], @"Exception was not an ANTLRIllegalArgumentException but was %@", [e name]);
+		STAssertTrue([[e name] isEqualToString:@"ANTLRIllegalStateException"], @"Exception was not an ANTLRIllegalStateException but was %@", [e name]);
passed = YES;
}
if (!passed)
@@ -418,10 +419,10 @@
{
// Child tree
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"this||is||a||double||piped||separated||csv"];
-	ANTLRCommonToken *token = [ANTLRCommonToken newANTLRCommonToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTreeWithToken:token];
+	ANTLRCommonToken *token = [ANTLRCommonToken newToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTreeWithToken:token];

-	ANTLRCommonTree *parent = [ANTLRCommonTree newANTLRCommonTree];
+	ANTLRCommonTree *parent = [ANTLRCommonTree newTree];
[parent addChild:tree];

ANTLRCommonTree *deletedChild = [parent deleteChild:0];
@@ -434,22 +435,22 @@
{
// Child tree
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"this||is||a||double||piped||separated||csv"];
-	ANTLRCommonToken *token = [ANTLRCommonToken newANTLRCommonToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
-	ANTLRCommonTree *tree = [ANTLRCommonTree newANTLRCommonTreeWithToken:token];
+	ANTLRCommonToken *token = [ANTLRCommonToken newToken:stream Type:555 Channel:ANTLRTokenChannelDefault Start:4 Stop:5];
+	ANTLRCommonTree *tree = [ANTLRCommonTree newTreeWithToken:token];

// Description for tree
NSString *treeDesc = [tree treeDescription];
STAssertNotNil(treeDesc, @"Tree description should not be nil");
STAssertTrue([treeDesc isEqualToString:@"||"], @"Tree description was not || but rather %@", treeDesc);

-	ANTLRCommonTree *parent = [ANTLRCommonTree newANTLRCommonTree];
+	ANTLRCommonTree *parent = [ANTLRCommonTree newTree];
STAssertTrue([[parent treeDescription] isEqualToString:@"nil"], @"Tree description was not nil was %@", [parent treeDescription]);
[parent addChild:tree];
treeDesc = [parent treeDescription];
STAssertTrue([treeDesc isEqualToString:@"||"], @"Tree description was not || but was: %@", treeDesc);

// Test non empty parent
-	ANTLRCommonTree *down = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeDOWN];
+	ANTLRCommonTree *down = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeDOWN];
down.token.text = @"<DOWN>";

[tree addChild:down];
@@ -460,9 +461,9 @@

-(void) test21ReplaceChildrenAtIndexWithNoChildren
{
-	ANTLRCommonTree *parent = [ANTLRCommonTree newANTLRCommonTree];
-	ANTLRCommonTree *parent2 = [ANTLRCommonTree newANTLRCommonTree];
-	ANTLRCommonTree *child = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeDOWN];
+	ANTLRCommonTree *parent = [ANTLRCommonTree newTree];
+	ANTLRCommonTree *parent2 = [ANTLRCommonTree newTree];
+	ANTLRCommonTree *child = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeDOWN];
child.token.text = @"<DOWN>";
[parent2 addChild:child];
@try
@@ -471,7 +472,7 @@
}
@catch (NSException *ex)
{
-		STAssertTrue([[ex name] isEqualToString:ANTLRIllegalArgumentException], @"Expected an illegal argument exception... Got instead: %@", [ex name]);
+		STAssertTrue([[ex name] isEqualToString:@"ANTLRIllegalArgumentException"], @"Expected an illegal argument exception... Got instead: %@", [ex name]);
return;
}
STFail(@"Exception was not thrown when I tried to replace a child on a parent with no children");
@@ -480,11 +481,11 @@

-(void) test22ReplaceChildrenAtIndex
{
-	ANTLRCommonTree *parent1 = [ANTLRCommonTree newANTLRCommonTree];
-	ANTLRCommonTree *child1 = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeUP];
+	ANTLRCommonTree *parent1 = [ANTLRCommonTree newTree];
+	ANTLRCommonTree *child1 = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeUP];
[parent1 addChild:child1];
-	ANTLRCommonTree *parent2 = [ANTLRCommonTree newANTLRCommonTree];
-	ANTLRCommonTree *child2 = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeDOWN];
+	ANTLRCommonTree *parent2 = [ANTLRCommonTree newTree];
+	ANTLRCommonTree *child2 = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeDOWN];
child2.token.text = @"<DOWN>";
[parent2 addChild:child2];

@@ -496,10 +497,10 @@

-(void) test23ReplaceChildrenAtIndexWithChild
{
-	ANTLRCommonTree *replacement = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeUP];
+	ANTLRCommonTree *replacement = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeUP];
replacement.token.text = @"<UP>";
-	ANTLRCommonTree *parent = [ANTLRCommonTree newANTLRCommonTree];
-	ANTLRCommonTree *child = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeDOWN];
+	ANTLRCommonTree *parent = [ANTLRCommonTree newTree];
+	ANTLRCommonTree *child = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeDOWN];
child.token.text = @"<DOWN>";
[parent addChild:child];

@@ -511,16 +512,16 @@

-(void) test24ReplacechildrenAtIndexWithLessChildren
{
-	ANTLRCommonTree *parent1 = [ANTLRCommonTree newANTLRCommonTree];
-	ANTLRCommonTree *child1 = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeUP];
+	ANTLRCommonTree *parent1 = [ANTLRCommonTree newTree];
+	ANTLRCommonTree *child1 = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeUP];
[parent1 addChild:child1];

-	ANTLRCommonTree *parent2 = [ANTLRCommonTree newANTLRCommonTree];
+	ANTLRCommonTree *parent2 = [ANTLRCommonTree newTree];

-	ANTLRCommonTree *child2 = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeEOF];
+	ANTLRCommonTree *child2 = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeEOF];
[parent2 addChild:child2];

-	ANTLRCommonTree *child3 = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeDOWN];
+	ANTLRCommonTree *child3 = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeDOWN];
child2.token.text = @"<DOWN>";
[parent2 addChild:child3];

@@ -532,15 +533,15 @@

-(void) test25ReplacechildrenAtIndexWithMoreChildren
{
-	ANTLRCommonTree *parent1 = [ANTLRCommonTree newANTLRCommonTree];
-	ANTLRCommonTree *child1 = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeUP];
+	ANTLRCommonTree *parent1 = [ANTLRCommonTree newTree];
+	ANTLRCommonTree *child1 = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeUP];
[parent1 addChild:child1];
-	ANTLRCommonTree *child2 = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeEOF];
+	ANTLRCommonTree *child2 = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeEOF];
[parent1 addChild:child2];

-	ANTLRCommonTree *parent2 = [ANTLRCommonTree newANTLRCommonTree];
+	ANTLRCommonTree *parent2 = [ANTLRCommonTree newTree];

-	ANTLRCommonTree *child3 = [ANTLRCommonTree newANTLRCommonTreeWithTokenType:ANTLRTokenTypeDOWN];
+	ANTLRCommonTree *child3 = [ANTLRCommonTree newTreeWithTokenType:ANTLRTokenTypeDOWN];
child2.token.text = @"<DOWN>";
[parent2 addChild:child3];


