commit cf3aa953f846ba9372aafd88b50450aae3b5cb48
Author:     acondit <acondit@parrt.spork>
AuthorDate: Wed Apr 13 18:07:00 2011 -0800
Commit:     acondit <acondit@parrt.spork>
CommitDate: Wed Apr 13 18:07:00 2011 -0800

Sync of changes made to V4 while working on ST4 implementation plus a number of bug fixes.

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8211]

diff --git a/runtime/ObjC/Framework/ANTLR.h b/runtime/ObjC/Framework/ANTLR.h
index a189efe..0e6e37f 100644
--- a/runtime/ObjC/Framework/ANTLR.h
+++ b/runtime/ObjC/Framework/ANTLR.h
@@ -54,6 +54,7 @@
#import <ANTLR/ANTLRError.h>
#import <ANTLR/ANTLRFailedPredicateException.h>
#import <ANTLR/ANTLRFastQueue.h>
+#import <ANTLR/ANTLRFileStream.h>
#import <ANTLR/ANTLRHashMap.h>
#import <ANTLR/ANTLRHashRule.h>
#import <ANTLR/ANTLRInputStream.h>
diff --git a/runtime/ObjC/Framework/ANTLRBaseRecognizer.m b/runtime/ObjC/Framework/ANTLRBaseRecognizer.m
index 4f61054..fc20cdf 100644
--- a/runtime/ObjC/Framework/ANTLRBaseRecognizer.m
+++ b/runtime/ObjC/Framework/ANTLRBaseRecognizer.m
@@ -711,7 +711,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
ANTLRRecognitionException *e = nil;
// if next token is what we are looking for then "delete" this token
if ( [self mismatchIsUnwantedToken:anInput TokenType:ttype] ) {
-        e = [ANTLRUnwantedTokenException newANTLRUnwantedTokenException:ttype Stream:anInput];
+        e = [ANTLRUnwantedTokenException newException:ttype Stream:anInput];
/*
System.err.println("recoverFromMismatchedToken deleting "+
((TokenStream)input).LT(1)+
@@ -729,12 +729,12 @@ static NSString *NEXT_TOKEN_RULE_NAME;
// can't recover with single token deletion, try insertion
if ( [self mismatchIsMissingToken:anInput Follow:follow] ) {
id<ANTLRToken> inserted = [self getMissingSymbol:anInput Exception:e TokenType:ttype Follow:follow];
-        e = [ANTLRMissingTokenException newANTLRMissingTokenException:ttype Stream:anInput With:inserted];
+        e = [ANTLRMissingTokenException newException:ttype Stream:anInput With:inserted];
[self reportError:e];  // report after inserting so AW sees the token in the exception
return inserted;
}
// even that didn't work; must throw the exception
-    e = [ANTLRMismatchedTokenException newANTLRMismatchedTokenException:ttype Stream:anInput];
+    e = [ANTLRMismatchedTokenException newException:ttype Stream:anInput];
@throw e;
}

@@ -860,7 +860,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
- (NSMutableArray *)getRuleInvocationStack
{
NSString *parserClassName = [[self className] retain];
-    return [self getRuleInvocationStack:[ANTLRRecognitionException newANTLRRecognitionException] Recognizer:parserClassName];
+    return [self getRuleInvocationStack:[ANTLRRecognitionException newException] Recognizer:parserClassName];
}

/** A more general version of getRuleInvocationStack where you can
@@ -955,11 +955,10 @@ static NSString *NEXT_TOKEN_RULE_NAME;
{
if ( tokens == nil )
return nil;
-    NSEnumerator *enumerator = [tokens objectEnumerator];
NSMutableArray *strings = [[NSMutableArray arrayWithCapacity:[tokens count]] retain];
id object;
NSInteger i = 0;
-    while (object = [enumerator nextObject]) {
+    for (object in tokens) {
[strings addObject:[[object getText] retain]];
i++;
}
@@ -980,7 +979,6 @@ static NSString *NEXT_TOKEN_RULE_NAME;
{
NSNumber *stopIndexI;
ANTLRHashRule *aHashRule;
-    ANTLRRuleMemo *aRuleMap;
if ( (aHashRule = [state.ruleMemo objectAtIndex:ruleIndex]) == nil ) {
aHashRule = [[ANTLRHashRule newANTLRHashRuleWithLen:17] retain];
[state.ruleMemo insertObject:aHashRule atIndex:ruleIndex];
@@ -1027,7 +1025,6 @@ static NSString *NEXT_TOKEN_RULE_NAME;
StartIndex:(NSInteger)ruleStartIndex
{
ANTLRRuleStack *aRuleStack;
-    ANTLRHashRule *aHashRule;
NSInteger stopTokenIndex;

aRuleStack = state.ruleMemo;
@@ -1056,7 +1053,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;

int aCnt = 0;
aRuleStack = state.ruleMemo;
-    for (int i = 0; aRuleStack != nil && i < [aRuleStack length]; i++) {
+    for (NSUInteger i = 0; aRuleStack != nil && i < [aRuleStack length]; i++) {
aHashRule = [aRuleStack objectAtIndex:i];
if ( aHashRule != nil ) {
aCnt += [aHashRule count]; // how many input indexes are recorded?
diff --git a/runtime/ObjC/Framework/ANTLRBaseStack.h b/runtime/ObjC/Framework/ANTLRBaseStack.h
index 5069031..5a4e566 100644
--- a/runtime/ObjC/Framework/ANTLRBaseStack.h
+++ b/runtime/ObjC/Framework/ANTLRBaseStack.h
@@ -44,7 +44,7 @@
}

//@property (copy) ANTLRRuleStack *fNext;
-@property (getter=getLastHash, setter=setLastHash) NSInteger LastHash;
+@property (getter=getLastHash, setter=setLastHash:) NSInteger LastHash;

// Contruction/Destruction
+ (ANTLRBaseStack *)newANTLRBaseStack;
diff --git a/runtime/ObjC/Framework/ANTLRBaseStack.m b/runtime/ObjC/Framework/ANTLRBaseStack.m
index 07434ac..77eb77a 100644
--- a/runtime/ObjC/Framework/ANTLRBaseStack.m
+++ b/runtime/ObjC/Framework/ANTLRBaseStack.m
@@ -44,12 +44,12 @@

+(ANTLRBaseStack *)newANTLRBaseStack
{
-    return [[ANTLRBaseStack alloc] init];
+    return [[[ANTLRBaseStack alloc] init] retain];
}

+(ANTLRBaseStack *)newANTLRBaseStackWithLen:(NSInteger)cnt
{
-    return [[ANTLRBaseStack alloc] initWithLen:cnt];
+    return [[[ANTLRBaseStack alloc] initWithLen:cnt] retain];
}

-(id)init
diff --git a/runtime/ObjC/Framework/ANTLRBaseTree.h b/runtime/ObjC/Framework/ANTLRBaseTree.h
index 00771cd..1cee234 100755
--- a/runtime/ObjC/Framework/ANTLRBaseTree.h
+++ b/runtime/ObjC/Framework/ANTLRBaseTree.h
@@ -25,16 +25,17 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import "ANTLRTree.h"
+#import "ANTLRCommonToken.h"

@protocol ANTLRBaseTree <ANTLRTree>

-@property (retain, getter=getChildren, setter=setChildren) NSMutableArray *children;
++ (id<ANTLRBaseTree>) INVALID_NODE;

+ (id<ANTLRBaseTree>) newTree;
+ (id<ANTLRBaseTree>) newTree:(id<ANTLRBaseTree>)node;

- (id<ANTLRBaseTree>) init;
-- (id<ANTLRBaseTree>) initWith:(id<ANTLRTree>)node;
+- (id<ANTLRBaseTree>) initWith:(id<ANTLRBaseTree>)node;

- (id<ANTLRBaseTree>) getChild:(NSUInteger)i;
- (NSMutableArray *)getChildren;
@@ -45,11 +46,11 @@
// Add t as a child to this node.  If t is null, do nothing.  If t
//  is nil, add all children of t to this' children.

-- (void) addChild:(id<ANTLRTree>) tree;
+- (void) addChild:(id<ANTLRBaseTree>) tree;
- (void) addChildren:(NSArray *) theChildren;
//- (void) removeAllChildren;

-- (void) setChild:(NSInteger) i With:(id<ANTLRTree>)t;
+- (void) setChild:(NSInteger) i With:(id<ANTLRBaseTree>)t;
- (id) deleteChild:(NSInteger) i;
- (NSMutableArray *) createChildrenList;
- (void) replaceChildrenFrom:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id) t;
@@ -65,12 +66,12 @@
- (void) freshenParentAndChildIndexes;
- (void) freshenParentAndChildIndexes:(NSInteger) offset;
- (void) sanityCheckParentAndChildIndexes;
-- (void) sanityCheckParentAndChildIndexes:(id<ANTLRTree>) parent At:(NSInteger) i;
+- (void) sanityCheckParentAndChildIndexes:(id<ANTLRBaseTree>) parent At:(NSInteger) i;

- (NSInteger) getChildIndex;
- (void) setChildIndex:(NSInteger)i;

-- (id<ANTLRTree>)getAncestor:(NSInteger)ttype;
+- (id<ANTLRBaseTree>)getAncestor:(NSInteger)ttype;
- (NSMutableArray *)getAncestors;

#pragma mark Copying
@@ -93,21 +94,33 @@
- (NSString *) toString;
- (NSString *) toStringTree;

+@property (retain) id<ANTLRToken>token;
+@property (assign) NSInteger startIndex;
+@property (assign) NSInteger stopIndex;
+@property (retain) id<ANTLRBaseTree> parent;
+@property (assign) NSInteger childIndex;
+@property (retain) NSMutableArray *children;
+@property (retain) NSException *anException;
+
@end

@interface ANTLRBaseTree : NSObject <ANTLRTree>
{
+	ANTLRCommonToken *token;
+	NSInteger startIndex;
+	NSInteger stopIndex;
+    id<ANTLRBaseTree> parent;
+    NSInteger childIndex;
NSMutableArray *children;
NSException *anException;
}

-@property (retain, getter=getChildren, setter=setChildren) NSMutableArray *children;
-
++ (id<ANTLRBaseTree>) INVALID_NODE;
+ (id<ANTLRBaseTree>) newTree;
+ (id<ANTLRBaseTree>) newTree:(id<ANTLRBaseTree>)node;

-- (id<ANTLRTree>) init;
-- (id<ANTLRBaseTree>) initWith:(id<ANTLRTree>)node;
+- (id<ANTLRBaseTree>) init;
+- (id<ANTLRBaseTree>) initWith:(id<ANTLRBaseTree>)node;

- (id<ANTLRBaseTree>) getChild:(NSUInteger)i;
- (NSMutableArray *)getChildren;
@@ -120,11 +133,11 @@
// Add t as a child to this node.  If t is null, do nothing.  If t
//  is nil, add all children of t to this' children.

-- (void) addChild:(id<ANTLRTree>) tree;
+- (void) addChild:(id<ANTLRBaseTree>) tree;
- (void) addChildren:(NSArray *) theChildren;

-- (void) setChild:(NSInteger) i With:(id<ANTLRTree>)t;
-- (id) deleteChild:(NSInteger) i;
+- (void) setChild:(NSUInteger) i With:(id<ANTLRBaseTree>)t;
+- (id) deleteChild:(NSUInteger) idx;
- (NSMutableArray *) createChildrenList;
- (void) replaceChildrenFrom:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id) t;
// Indicates the node is a nil node but may still have children, meaning
@@ -139,13 +152,13 @@
- (void) freshenParentAndChildIndexes;
- (void) freshenParentAndChildIndexes:(NSInteger) offset;
- (void) sanityCheckParentAndChildIndexes;
-- (void) sanityCheckParentAndChildIndexes:(id<ANTLRTree>) parent At:(NSInteger) i;
+- (void) sanityCheckParentAndChildIndexes:(id<ANTLRBaseTree>) parent At:(NSInteger) i;

- (NSInteger) getChildIndex;
- (void) setChildIndex:(NSInteger)i;

- (BOOL) hasAncestor:(NSInteger) ttype;
-- (id<ANTLRTree>)getAncestor:(NSInteger)ttype;
+- (id<ANTLRBaseTree>)getAncestor:(NSInteger)ttype;
- (NSMutableArray *)getAncestors;

- (id) copyWithZone:(NSZone *)aZone;
@@ -166,6 +179,15 @@
- (NSString *) toString;
- (NSString *) toStringTree;

+@property (retain) ANTLRCommonToken *token;
+@property (assign) NSInteger startIndex;
+@property (assign) NSInteger stopIndex;
+@property (retain) id<ANTLRBaseTree> parent;
+@property (assign) NSInteger childIndex;
+
+@property (retain, getter=getChildren, setter=setChildren:) NSMutableArray *children;
+@property (retain) NSException *anException;
+
@end

@interface ANTLRTreeNavigationNode : ANTLRBaseTree {
diff --git a/runtime/ObjC/Framework/ANTLRBaseTree.m b/runtime/ObjC/Framework/ANTLRBaseTree.m
index b6c5e90..97c3f03 100755
--- a/runtime/ObjC/Framework/ANTLRBaseTree.m
+++ b/runtime/ObjC/Framework/ANTLRBaseTree.m
@@ -24,8 +24,8 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRTree.h"
#import "ANTLRBaseTree.h"
+#import "ANTLRBaseTreeAdaptor.h"
#import "ANTLRToken.h"
// TODO: this shouldn't be here...but needed for invalidNode
#import "ANTLRCommonTree.h"
@@ -37,12 +37,29 @@ ANTLRTreeNavigationNodeDown *navigationNodeDown = nil;
ANTLRTreeNavigationNodeUp *navigationNodeUp = nil;
ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;

+
@implementation ANTLRBaseTree

-@synthesize children;
+static id<ANTLRBaseTree> invalidNode = nil;

#pragma mark ANTLRTree protocol conformance

++ (id<ANTLRBaseTree>) INVALID_NODE
+{
+	if ( invalidNode == nil ) {
+		invalidNode = [[ANTLRCommonTree alloc] initWithTokenType:ANTLRTokenTypeInvalid];
+	}
+	return invalidNode;
+}
+
++ (id<ANTLRBaseTree>) invalidNode
+{
+	if ( invalidNode == nil ) {
+		invalidNode = [[ANTLRCommonTree alloc] initWithTokenType:ANTLRTokenTypeInvalid];
+	}
+	return invalidNode;
+}
+
+ newTree
{
return [[ANTLRBaseTree alloc] init];
@@ -54,21 +71,23 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
*/
+ newTree:(id<ANTLRBaseTree>) node
{
-    return [[ANTLRBaseTree alloc] initWith:(id<ANTLRTree>) node];
+    return [[ANTLRBaseTree alloc] initWith:(id<ANTLRBaseTree>) node];
}

-- (ANTLRBaseTree *) init
+- (id) init
{
-    if (( self = [super init]) != nil) {
+    self = [super init];
+    if ( self != nil ) {
children = nil;
return self;
}
return nil;
}

-- (ANTLRBaseTree *) initWith:(id<ANTLRTree>)node
+- (id) initWith:(id<ANTLRBaseTree>)node
{
-    if (( self = [super init]) != nil) {
+    self = [super init];
+    if ( self != nil ) {
children = nil;
[children addObject:node];
return self;
@@ -83,12 +102,12 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
[super dealloc];
}

-- (id<ANTLRTree>) getChild:(NSUInteger)i
+- (id<ANTLRBaseTree>) getChild:(NSUInteger)i
{
if ( children == nil || i >= [children count] ) {
return nil;
}
-    return (id<ANTLRTree>)[children objectAtIndex:i];
+    return (id<ANTLRBaseTree>)[children objectAtIndex:i];
}

/** Get the children internal List; note that if you directly mess with
@@ -104,10 +123,10 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
children = anArray;
}

-- (id<ANTLRTree>) getFirstChildWithType:(NSInteger) type
+- (id<ANTLRBaseTree>) getFirstChildWithType:(NSInteger) type
{
-    for (int i = 0; children != nil && i < [children count]; i++) {
-        id<ANTLRTree> t = (id<ANTLRTree>) [children objectAtIndex:i];
+    for (NSUInteger i = 0; children != nil && i < [children count]; i++) {
+        id<ANTLRBaseTree> t = (id<ANTLRBaseTree>) [children objectAtIndex:i];
if ( [t getType] == type ) {
return t;
}
@@ -129,29 +148,29 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
*  and child isNil then this routine moves children to t via
*  t.children = child.children; i.e., without copying the array.
*/
-- (void) addChild:(id<ANTLRTree>) t
+- (void) addChild:(id<ANTLRBaseTree>) t
{
//System.out.println("add child "+t.toStringTree()+" "+self.toStringTree());
//System.out.println("existing children: "+children);
if ( t == nil ) {
return; // do nothing upon addChild(nil)
}
-    if ( self == t )
-        [NSException raise:ANTLRIllegalArgumentException format:(NSString *)@"ANTLRBaseTree Can't add self to self as child"];
-    ANTLRBaseTree *childTree = (ANTLRBaseTree *) t;
+    if ( self == (ANTLRBaseTree *)t )
+        @throw [ANTLRIllegalArgumentException newException:@"ANTLRBaseTree Can't add self to self as child"];
+    id<ANTLRBaseTree> childTree = (id<ANTLRBaseTree>) t;
if ( [childTree isNil] ) { // t is an empty node possibly with children
if ( children != nil && children == childTree.children ) {
-            @throw [ANTLRRuntimeException newANTLRRuntimeException:@"ANTLRBaseTree add child list to itself"];
+            @throw [ANTLRRuntimeException newException:@"ANTLRBaseTree add child list to itself"];
}
// just add all of childTree's children to this
if ( childTree.children != nil ) {
if ( children != nil ) { // must copy, this has children already
int n = [childTree.children count];
for ( int i = 0; i < n; i++) {
-                    id<ANTLRTree> c = (id<ANTLRTree>)[childTree.children objectAtIndex:i];
+                    id<ANTLRBaseTree> c = (id<ANTLRBaseTree>)[childTree.children objectAtIndex:i];
[children addObject:c];
// handle double-link stuff for each child of nil root
-                    [c setParent:self];
+                    [c setParent:(id<ANTLRBaseTree>)self];
[c setChildIndex:[children count]-1];
}
}
@@ -168,7 +187,7 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
children = [NSMutableArray arrayWithCapacity:5]; // create children list on demand
}
[children addObject:t];
-        [childTree setParent:self];
+        [childTree setParent:(id<ANTLRBaseTree>)self];
[childTree setChildIndex:[children count]-1];
}
// System.out.println("now children are: "+children);
@@ -177,19 +196,19 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
/** Add all elements of kids list as children of this node */
- (void) addChildren:(NSMutableArray *) kids
{
-    for (int i = 0; i < [kids count]; i++) {
-        id<ANTLRTree> t = (id<ANTLRTree>) [kids objectAtIndex:i];
+    for (NSUInteger i = 0; i < [kids count]; i++) {
+        id<ANTLRBaseTree> t = (id<ANTLRBaseTree>) [kids objectAtIndex:i];
[self addChild:t];
}
}

-- (void) setChild:(NSInteger) i With:(id<ANTLRTree>)t
+- (void) setChild:(NSUInteger) i With:(id<ANTLRBaseTree>)t
{
if ( t == nil ) {
return;
}
if ( [t isNil] ) {
-        [NSException raise:ANTLRIllegalArgumentException format:(NSString *)@"ANTLRBaseTree Can't set single child to a list"];
+        @throw [ANTLRIllegalArgumentException newException:@"ANTLRBaseTree Can't set single child to a list"];
}
if ( children == nil ) {
children = [NSMutableArray arrayWithCapacity:5];
@@ -200,19 +219,19 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
else {
[children insertObject:t atIndex:i];
}
-    [t setParent:self];
+    [t setParent:(id<ANTLRBaseTree>)self];
[t setChildIndex:i];
}

-- (id) deleteChild:(NSInteger) i
+- (id) deleteChild:(NSUInteger) idx
{
if ( children == nil ) {
return nil;
}
-    id<ANTLRTree> killed = (id<ANTLRTree>)[children objectAtIndex:i];
-    [children removeObjectAtIndex:i];
+    id<ANTLRBaseTree> killed = (id<ANTLRBaseTree>)[children objectAtIndex:idx];
+    [children removeObjectAtIndex:idx];
// walk rest and decrement their child indexes
-    [self freshenParentAndChildIndexes:i];
+    [self freshenParentAndChildIndexes:idx];
return killed;
}

@@ -229,11 +248,11 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
System.out.println("in="+toStringTree());
*/
if ( children == nil ) {
-        [NSException raise:ANTLRIllegalArgumentException format:(NSString *)@"ANTLRBaseTree Invalid Indexes; no children in list"];
+        @throw [ANTLRIllegalArgumentException newException:@"ANTLRBaseTree Invalid Indexes; no children in list"];
}
int replacingHowMany = stopChildIndex - startChildIndex + 1;
int replacingWithHowMany;
-    ANTLRBaseTree *newTree = (ANTLRBaseTree *) t;
+    id<ANTLRBaseTree> newTree = (id<ANTLRBaseTree>) t;
NSMutableArray *newChildren = nil;
// normalize to a list of children to add: newChildren
if ( [newTree isNil] ) {
@@ -250,9 +269,9 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
if ( delta == 0 ) {
int j = 0; // index into new children
for (int i=startChildIndex; i <= stopChildIndex; i++) {
-            ANTLRBaseTree *child = (ANTLRBaseTree *)[newChildren objectAtIndex:j];
+            id<ANTLRBaseTree> child = (id<ANTLRBaseTree>)[newChildren objectAtIndex:j];
[children replaceObjectAtIndex:i withObject:(id)child];
-            [child setParent:self];
+            [child setParent:(id<ANTLRBaseTree>)self];
[child setChildIndex:i];
j++;
}
@@ -304,9 +323,9 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
{
int n = [self getChildCount];
for (int i = offset; i < n; i++) {
-        id<ANTLRTree> child = (id<ANTLRTree>)[self getChild:i];
+        id<ANTLRBaseTree> child = (id<ANTLRBaseTree>)[self getChild:i];
[child setChildIndex:i];
-        [child setParent:self];
+        [child setParent:(id<ANTLRBaseTree>)self];
}
}

@@ -315,20 +334,18 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
[self sanityCheckParentAndChildIndexes:nil At:-1];
}

-- (void) sanityCheckParentAndChildIndexes:(id<ANTLRTree>) parent At:(NSInteger) i
+- (void) sanityCheckParentAndChildIndexes:(id<ANTLRBaseTree>)aParent At:(NSInteger) i
{
-    if ( parent != [self getParent] ) {
-        [NSException raise:@"ANTLRIllegalArgumentException" format:(NSString *)@"parents do not match; expected %s found %s", parent, [self getParent]];
-        //        throw new IllegalStateException("parents don't match; expected "+parent+" found "+self.getParent());
+    if ( aParent != self.parent ) {
+        @throw [ANTLRIllegalStateException newException:[NSString stringWithFormat:@"parents don't match; expected %s found %s", aParent, self.parent]];
}
if ( i != [self getChildIndex] ) {
-        [NSException raise:@"ANTLRIllegalArgumentException" format:(NSString *)@"child indexes don't match; expected %d found %d", i, [self getChildIndex]];
-        //        throw new IllegalStateException("child indexes don't match; expected "+i+" found "+self.getChildIndex());
+        @throw [ANTLRIllegalStateException newException:[NSString stringWithFormat:@"child indexes don't match; expected %d found %d", i, [self getChildIndex]]];
}
int n = [self getChildCount];
for (int c = 0; c < n; c++) {
-        ANTLRCommonTree *child = (ANTLRCommonTree *)[self getChild:c];
-        [child sanityCheckParentAndChildIndexes:self At:c];
+        id<ANTLRBaseTree> child = (id<ANTLRBaseTree>)[self getChild:c];
+        [child sanityCheckParentAndChildIndexes:(id<ANTLRBaseTree>)self At:c];
}
}

@@ -340,7 +357,7 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
return 0;
}

-- (void) setTokenStartIndex:(NSInteger) index
+- (void) setTokenStartIndex:(NSInteger) anIndex
{
}

@@ -352,11 +369,11 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
return 0;
}

-- (void) setTokenStopIndex:(NSInteger) index
+- (void) setTokenStopIndex:(NSInteger) anIndex
{
}

-- (id<ANTLRTree>) dupNode
+- (id<ANTLRBaseTree>) dupNode
{
return nil;
}
@@ -368,17 +385,17 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
return 0;
}

-- (void) setChildIndex:(NSInteger) index
+- (void) setChildIndex:(NSInteger) anIndex
{
}

/** ANTLRBaseTree doesn't track parent pointers. */
-- (id<ANTLRTree>) getParent
+- (id<ANTLRBaseTree>) getParent
{
return nil;
}

-- (void) setParent:(id<ANTLRTree>) t
+- (void) setParent:(id<ANTLRBaseTree>) t
{
}

@@ -389,14 +406,14 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
}

/** Walk upwards and get first ancestor with this token type. */
-- (id<ANTLRTree>) getAncestor:(NSInteger) ttype
+- (id<ANTLRBaseTree>) getAncestor:(NSInteger) ttype
{
-    id<ANTLRTree> t = self;
-    t = [t getParent];
+    id<ANTLRBaseTree> t = (id<ANTLRBaseTree>)self;
+    t = (id<ANTLRBaseTree>)[t getParent];
while ( t != nil ) {
if ( [t getType]==ttype )
return t;
-        t = [t getParent];
+        t = (id<ANTLRBaseTree>)[t getParent];
}
return nil;
}
@@ -409,41 +426,16 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
if ( [self getParent] == nil )
return nil;
NSMutableArray *ancestors = [NSMutableArray arrayWithCapacity:5];
-    id<ANTLRTree> t = self;
-    t = [t getParent];
+    id<ANTLRBaseTree> t = (id<ANTLRBaseTree>)self;
+    t = (id<ANTLRBaseTree>)[t getParent];
while ( t != nil ) {
[ancestors insertObject:t atIndex:0]; // insert at start
-        t = [t getParent];
+        t = (id<ANTLRBaseTree>)[t getParent];
}
[ancestors retain];
return ancestors;
}

-/** Print out a whole tree not just a node */
-- (NSString *) toStringTree
-{
-    if ( children == nil || [children count] == 0 ) {
-        return [self toString];
-    }
-    NSMutableString *buf = [NSMutableString stringWithCapacity:[children count]];
-    if ( ![self isNil] ) {
-        [buf appendString:@"("];
-        [buf appendString:[self toString]];
-        [buf appendString:@" "];
-    }
-    for (int i = 0; children != nil && i < [children count]; i++) {
-        id<ANTLRTree> t = (id<ANTLRTree>)[children objectAtIndex:i];
-        if ( i > 0 ) {
-            [buf appendString:@" "];
-        }
-        [buf appendString:[(id<ANTLRBaseTree>)t toStringTree]];
-    }
-    if ( ![self isNil] ) {
-        [buf appendString:@")"];
-    }
-    return buf;
-}
-
- (NSInteger) getType
{
return ANTLRTokenTypeInvalid;
@@ -468,18 +460,12 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
{
}

-/** Override to say how a node (not a tree) should look as text */
-- (NSString *) toString
-{
-    return nil;
-}
-
#pragma mark Copying

// the children themselves are not copied here!
- (id) copyWithZone:(NSZone *)aZone
{
-    id<ANTLRTree> theCopy = [[[self class] allocWithZone:aZone] init];
+    id<ANTLRBaseTree> theCopy = [[[self class] allocWithZone:aZone] init];
[theCopy addChildren:self.children];
return theCopy;
}
@@ -495,9 +481,8 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;

[theCopy.children removeAllObjects];
NSMutableArray *childrenCopy = theCopy.children;
-    NSUInteger childIdx = 0;
-    for (childIdx = 0; childIdx < [children count]; childIdx++) {
-        id<ANTLRTree> childCopy = [[children objectAtIndex:childIdx] deepCopyWithZone:aZone];
+    for (id loopItem in children) {
+        id<ANTLRBaseTree> childCopy = [loopItem deepCopyWithZone:aZone];
[theCopy addChild:childCopy];
}
[childrenCopy release];
@@ -506,7 +491,32 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;

- (NSString *) treeDescription
{
-    return [self toStringTree];
+    if ( children == nil || [children count] == 0 ) {
+        return [self description];
+    }
+    NSMutableString *buf = [NSMutableString stringWithCapacity:[children count]];
+    if ( ![self isNil] ) {
+        [buf appendString:@"("];
+        [buf appendString:[self toString]];
+        [buf appendString:@" "];
+    }
+    for (int i = 0; children != nil && i < [children count]; i++) {
+        id<ANTLRBaseTree> t = (id<ANTLRBaseTree>)[children objectAtIndex:i];
+        if ( i > 0 ) {
+            [buf appendString:@" "];
+        }
+        [buf appendString:[(id<ANTLRBaseTree>)t toStringTree]];
+    }
+    if ( ![self isNil] ) {
+        [buf appendString:@")"];
+    }
+    return buf;
+}
+
+/** Print out a whole tree not just a node */
+- (NSString *) toStringTree
+{
+    return [self treeDescription];
}

- (NSString *) description
@@ -514,6 +524,20 @@ ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
return nil;
}

+/** Override to say how a node (not a tree) should look as text */
+- (NSString *) toString
+{
+    return nil;
+}
+
+@synthesize token;
+@synthesize startIndex;
+@synthesize stopIndex;
+@synthesize parent;
+@synthesize childIndex;
+@synthesize children;
+@synthesize anException;
+
@end

#pragma mark -
diff --git a/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.h b/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.h
index c0e748b..65a3d3e 100644
--- a/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.h
+++ b/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.h
@@ -34,17 +34,14 @@
NSInteger uniqueNodeID;
}

-@property (retain, getter=getTreeToUniqueIDMap, setter=setTreeToUniqueIDMap:) ANTLRUniqueIDMap *treeToUniqueIDMap;
-@property (getter=getUniqueNodeID, setter=setUniqueNodeID:) NSInteger uniqueNodeID;
-
-+ (id<ANTLRTreeAdaptor>) newEmptyTree;
-
- (id) init;

- (id) copyWithZone:(NSZone *)aZone;

- (id) emptyNode;

+- (id) createNil;
+
/** create tree node that holds the start and stop tokens associated
*  with an error.
*
@@ -61,16 +58,16 @@
To:(id<ANTLRToken>)stopToken
Exception:(NSException *) e;

-- (BOOL) isNil:(id<ANTLRTree>) aTree;
+- (BOOL) isNil:(id<ANTLRBaseTree>) aTree;

-- (id<ANTLRTree>)dupTree:(id<ANTLRTree>)aTree;
+- (id<ANTLRBaseTree>)dupTree:(id<ANTLRBaseTree>)aTree;

/** This is generic in the sense that it will work with any kind of
*  tree (not just Tree interface).  It invokes the adaptor routines
*  not the tree node routines to do the construction.
*/
-- (id<ANTLRTree>)dupTree:(id<ANTLRTree>)aTree Parent:(id<ANTLRTree>)parent;
-- (id<ANTLRTree>)dupNode:(id<ANTLRTree>)aNode;
+- (id<ANTLRBaseTree>)dupTree:(id<ANTLRBaseTree>)aTree Parent:(id<ANTLRBaseTree>)parent;
+- (id<ANTLRBaseTree>)dupNode:(id<ANTLRBaseTree>)aNode;
/** Add a child to the tree t.  If child is a flat tree (a list), make all
*  in list children of t.  Warning: if t has no children, but child does
*  and child isNil then you can decide it is ok to move children to t via
@@ -78,7 +75,7 @@
*  make sure that this is consistent with have the user will build
*  ASTs.
*/
-- (void) addChild:(id<ANTLRTree>)aChild toTree:(id<ANTLRTree>)aTree;
+- (void) addChild:(id<ANTLRBaseTree>)aChild toTree:(id<ANTLRBaseTree>)aTree;

/** If oldRoot is a nil root, just copy or move the children to newRoot.
*  If not a nil root, make oldRoot a child of newRoot.
@@ -106,45 +103,44 @@
*  constructing these nodes so we should have this control for
*  efficiency.
*/
-- (id<ANTLRTree>)becomeRoot:(id<ANTLRTree>)aNewRoot old:(id<ANTLRTree>)oldRoot;
+- (id<ANTLRBaseTree>)becomeRoot:(id<ANTLRBaseTree>)aNewRoot old:(id<ANTLRBaseTree>)oldRoot;

/** Transform ^(nil x) to x and nil to null */
-- (id<ANTLRTree>)rulePostProcessing:(id<ANTLRTree>)aRoot;
-
-- (id<ANTLRTree>)becomeRootfromToken:(id<ANTLRToken>)aNewRoot old:(id<ANTLRTree>)oldRoot;
+- (id<ANTLRBaseTree>)rulePostProcessing:(id<ANTLRBaseTree>)aRoot;

-- (id<ANTLRTree>)createTree:(NSInteger)aTType FromToken:(id<ANTLRToken>)aFromToken;
+- (id<ANTLRBaseTree>)becomeRootfromToken:(id<ANTLRToken>)aNewRoot old:(id<ANTLRBaseTree>)oldRoot;

-- (id<ANTLRTree>)createTree:(NSInteger)aTType FromToken:(id<ANTLRToken>)aFromToken Text:(NSString *)theText;
+- (id<ANTLRBaseTree>) create:(id<ANTLRToken>)payload;
+- (id<ANTLRBaseTree>) createTree:(NSInteger)aTType FromToken:(id<ANTLRToken>)aFromToken;
+- (id<ANTLRBaseTree>) createTree:(NSInteger)aTType FromToken:(id<ANTLRToken>)aFromToken Text:(NSString *)theText;
+- (id<ANTLRBaseTree>) createTree:(NSInteger)aTType Text:(NSString *)theText;

-- (id<ANTLRTree>)createTree:(NSInteger)aTType Text:(NSString *)theText;
+- (NSInteger) getType:(id<ANTLRBaseTree>)aTree;

-- (NSInteger) getType:(id<ANTLRTree>)aTree;
+- (void) setType:(id<ANTLRBaseTree>)aTree Type:(NSInteger)type;

-- (void) setType:(id<ANTLRTree>)aTree Type:(NSInteger)type;
+- (NSString *)getText:(id<ANTLRBaseTree>)aTree;

-- (NSString *)getText:(id<ANTLRTree>)aTree;
+- (void) setText:(id<ANTLRBaseTree>)aTree Text:(NSString *)theText;

-- (void) setText:(id<ANTLRTree>)aTree Text:(NSString *)theText;
+- (id<ANTLRBaseTree>) getChild:(id<ANTLRBaseTree>)aTree At:(NSInteger)i;

-- (id<ANTLRTree>) getChild:(id<ANTLRTree>)aTree At:(NSInteger)i;
+- (void) setChild:(id<ANTLRBaseTree>)aTree At:(NSInteger)index Child:(id<ANTLRBaseTree>)aChild;

-- (void) setChild:(id<ANTLRTree>)aTree At:(NSInteger)index Child:(id<ANTLRTree>)aChild;
+- (id<ANTLRBaseTree>) deleteChild:(id<ANTLRBaseTree>)aTree Index:(NSInteger)index;

-- (id<ANTLRTree>) deleteChild:(id<ANTLRTree>)aTree Index:(NSInteger)index;
+- (NSInteger) getChildCount:(id<ANTLRBaseTree>)aTree;

-- (NSInteger) getChildCount:(id<ANTLRTree>)aTree;
+- (NSInteger) getUniqueID:(id<ANTLRBaseTree>)node;

-- (NSInteger) getUniqueID:(id<ANTLRTree>)node;
+#ifdef DONTUSENOMO
+- (NSInteger) getUniqueID;

- (void) setUniqueNodeID:(NSInteger)aUniqueNodeID;

-#ifdef DONTUSENOMO
- (ANTLRUniqueIDMap *)getTreeToUniqueIDMap;

- (void) setTreeToUniqueIDMap:(ANTLRUniqueIDMap *)aMapNode;
-
-- (NSInteger)getUniqueID;
#endif

/** Tell me how to create a token for use with imaginary token nodes.
@@ -165,4 +161,7 @@

- (id<ANTLRToken>)createToken:(id<ANTLRToken>)aFromToken;

+@property (retain) ANTLRUniqueIDMap *treeToUniqueIDMap;
+@property (assign) NSInteger uniqueNodeID;
+
@end
diff --git a/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.m b/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.m
index 7a322ce..b2149c1 100644
--- a/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.m
+++ b/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.m
@@ -28,19 +28,22 @@
#import "ANTLRRuntimeException.h"
#import "ANTLRUniqueIDMap.h"
#import "ANTLRMapElement.h"
+#import "ANTLRCommonTree.h"

@implementation ANTLRBaseTreeAdaptor

-+ (ANTLRBaseTreeAdaptor *) newEmptyTree
+@synthesize treeToUniqueIDMap;
+@synthesize uniqueNodeID;
+
++ (id<ANTLRTree>) newEmptyTree
{
return [[ANTLRCommonTree alloc] init];
-//    return nil;
}

- (id) init
{
-    if ((self = [super init]) != nil) {
-
+    self = [super init];
+    if ( self != nil ) {
}
return self;
}
@@ -57,9 +60,14 @@
}


+- (id) createNil
+{
+    return [ANTLRCommonTree newTreeWithToken:nil];
+}
+
- (id) emptyNode
{
-    return [[ANTLRBaseTreeAdaptor alloc] init];
+    return [ANTLRCommonTree newTreeWithToken:nil];
}

/** create tree node that holds the start and stop tokens associated
@@ -85,39 +93,39 @@
Exception:e];
}

-- (BOOL) isNil:(id<ANTLRTree>) tree
+- (BOOL) isNil:(id<ANTLRBaseTree>) tree
{
-    return [(id<ANTLRTree>)tree isNil];
+    return [(id<ANTLRBaseTree>)tree isNil];
}

-- (id<ANTLRTree>)dupTree:(id<ANTLRTree>)tree
+- (id<ANTLRBaseTree>)dupTree:(id<ANTLRBaseTree>)tree
{
-    return [self dupTree:(id<ANTLRTree>)tree Parent:nil];
+    return [self dupTree:(id<ANTLRBaseTree>)tree Parent:nil];
}

/** This is generic in the sense that it will work with any kind of
*  tree (not just Tree interface).  It invokes the adaptor routines
*  not the tree node routines to do the construction.
*/
-- (id<ANTLRTree>)dupTree:(id<ANTLRTree>)t Parent:(id<ANTLRTree>)parent
+- (id<ANTLRBaseTree>)dupTree:(id<ANTLRBaseTree>)t Parent:(id<ANTLRBaseTree>)parent
{
if ( t==nil ) {
return nil;
}
-    id<ANTLRTree>newTree = [self dupNode:t];
+    id<ANTLRBaseTree>newTree = [self dupNode:t];
// ensure new subtree root has parent/child index set
[self setChildIndex:newTree With:[self getChildIndex:t]]; // same index in new tree
[self setParent:newTree With:parent];
NSInteger n = [self getChildCount:t];
for (NSInteger i = 0; i < n; i++) {
-        id<ANTLRTree> child = [self getChild:t At:i];
-        id<ANTLRTree> newSubTree = [self dupTree:child Parent:t];
+        id<ANTLRBaseTree> child = [self getChild:t At:i];
+        id<ANTLRBaseTree> newSubTree = [self dupTree:child Parent:t];
[self addChild:newSubTree toTree:newTree];
}
return newTree;
}

-- (id<ANTLRTree>)dupNode:(id<ANTLRTree>)aNode
+- (id<ANTLRBaseTree>)dupNode:(id<ANTLRBaseTree>)aNode
{
return aNode; // override for better results :>)
}
@@ -128,10 +136,10 @@
*  make sure that this is consistent with have the user will build
*  ASTs.
*/
-- (void) addChild:(id<ANTLRTree>)child toTree:(id<ANTLRTree>)t
+- (void) addChild:(id<ANTLRBaseTree>)child toTree:(id<ANTLRBaseTree>)t
{
if ( t != nil && child != nil ) {
-        [(id<ANTLRTree>)t addChild:[(id<ANTLRTree>)child retain]];
+        [(id<ANTLRBaseTree>)t addChild:[(id<ANTLRBaseTree>)child retain]];
}
}

@@ -161,18 +169,18 @@
*  constructing these nodes so we should have this control for
*  efficiency.
*/
-- (id<ANTLRTree>)becomeRoot:(id<ANTLRTree>)newRoot old:(id<ANTLRTree>)oldRoot
+- (id<ANTLRBaseTree>)becomeRoot:(id<ANTLRBaseTree>)newRoot old:(id<ANTLRBaseTree>)oldRoot
{
if ( oldRoot == nil ) {
return newRoot;
}
//System.out.println("becomeroot new "+newRoot.toString()+" old "+oldRoot);
-    id<ANTLRTree> newRootTree = (id<ANTLRTree>)newRoot;
-    id<ANTLRTree> oldRootTree = (id<ANTLRTree>)oldRoot;
+    id<ANTLRBaseTree> newRootTree = (id<ANTLRBaseTree>)newRoot;
+    id<ANTLRBaseTree> oldRootTree = (id<ANTLRBaseTree>)oldRoot;
// handle ^(nil real-node)
if ( [newRootTree isNil] ) {
NSInteger nc = [newRootTree getChildCount];
-        if ( nc == 1 ) newRootTree = [(id<ANTLRTree>)newRootTree getChild:0];
+        if ( nc == 1 ) newRootTree = [(id<ANTLRBaseTree>)newRootTree getChild:0];
else if ( nc > 1 ) {
// TODO: make tree run time exceptions hierarchy
@throw [ANTLRRuntimeException newException:NSStringFromClass([self class]) reason:@"more than one node as root (TODO: make exception hierarchy)"];
@@ -186,16 +194,16 @@
}

/** Transform ^(nil x) to x and nil to null */
-- (id<ANTLRTree>)rulePostProcessing:(id<ANTLRTree>)root
+- (id<ANTLRBaseTree>)rulePostProcessing:(id<ANTLRBaseTree>)root
{
//System.out.println("rulePostProcessing: "+((Tree)root).toStringTree());
-    id<ANTLRTree> r = (id<ANTLRTree>)root;
+    id<ANTLRBaseTree> r = (id<ANTLRBaseTree>)root;
if ( r != nil && [r isNil] ) {
if ( [r getChildCount] == 0 ) {
r = nil;
}
else if ( [r getChildCount] == 1 ) {
-            r = (id<ANTLRTree>)[r getChild:0];
+            r = (id<ANTLRBaseTree>)[r getChild:0];
// whoever invokes rule will set parent and child index
[r setParent:nil];
[r setChildIndex:-1];
@@ -204,79 +212,84 @@
return r;
}

-- (id<ANTLRTree>)becomeRootfromToken:(id<ANTLRToken>)newRoot old:(id<ANTLRTree>)oldRoot
+- (id<ANTLRBaseTree>)becomeRootfromToken:(id<ANTLRToken>)newRoot old:(id<ANTLRBaseTree>)oldRoot
+{
+    return [self becomeRoot:(id<ANTLRToken>)[self create:newRoot] old:oldRoot];
+}
+
+- (id<ANTLRBaseTree>) create:(id<ANTLRToken>)aToken
{
-    return [self becomeRoot:[self createTree:newRoot] old:oldRoot];
+    return [ANTLRCommonTree newTreeWithToken:aToken];
}

-- (id<ANTLRTree>)createTree:(NSInteger)tokenType FromToken:(id<ANTLRToken>)fromToken
+- (id<ANTLRBaseTree>)createTree:(NSInteger)tokenType FromToken:(id<ANTLRToken>)fromToken
{
fromToken = [self createToken:fromToken];
//((ClassicToken)fromToken).setType(tokenType);
[fromToken setType:tokenType];
-    id<ANTLRTree> t = [[self class] createTree:fromToken];
+    id<ANTLRBaseTree> t = [self create:fromToken];
return t;
}

-- (id<ANTLRTree>)createTree:(NSInteger)tokenType FromToken:(id<ANTLRToken>)fromToken Text:(NSString *)text;
+- (id<ANTLRBaseTree>)createTree:(NSInteger)tokenType FromToken:(id<ANTLRToken>)fromToken Text:(NSString *)text
{
if (fromToken == nil)
return [self createTree:tokenType Text:text];
-    fromToken = [self createToken:fromToken];
+    fromToken = [self createToken:tokenType Text:text];
[fromToken setType:tokenType];
[fromToken setText:text];
-    id<ANTLRTree>t = [[self class] createTree:fromToken];
+    id<ANTLRBaseTree>t = [self create:fromToken];
return t;
}

-- (id<ANTLRTree>)createTree:(NSInteger)tokenType Text:(NSString *)text
+- (id<ANTLRBaseTree>)createTree:(NSInteger)tokenType Text:(NSString *)text
{
id<ANTLRToken> fromToken = [self createToken:tokenType Text:text];
-    id<ANTLRTree> t = (id<ANTLRTree>)[self createTree:fromToken];
+    id<ANTLRBaseTree> t = (id<ANTLRBaseTree>)[self create:fromToken];
return t;
}

-- (NSInteger) getType:(id<ANTLRTree>) t
+- (NSInteger) getType:(id<ANTLRBaseTree>) t
{
-    return [(id<ANTLRTree>)t getType];
+    return [(id<ANTLRBaseTree>)t getType];
}

-- (void) setType:(id<ANTLRTree>)t Type:(NSInteger)type
+- (void) setType:(id<ANTLRBaseTree>)t Type:(NSInteger)type
{
-    @throw [ANTLRRuntimeException newANTLRNoSuchElementException:@"don't know enough about Tree node"];
+    @throw [ANTLRNoSuchElementException newException:@"don't know enough about Tree node"];
}

-- (NSString *)getText:(id<ANTLRTree>)t
+- (NSString *)getText:(id<ANTLRBaseTree>)t
{
-    return [(id<ANTLRTree>)t getText];
+    return [(id<ANTLRBaseTree>)t getText];
}

-- (void) setText:(id<ANTLRTree>)t Text:(NSString *)text
+- (void) setText:(id<ANTLRBaseTree>)t Text:(NSString *)text
{
-    @throw [ANTLRRuntimeException newANTLRNoSuchElementException:@"don't know enough about Tree node"];
+    @throw [ANTLRNoSuchElementException newException:@"don't know enough about Tree node"];
}

-- (id<ANTLRTree>) getChild:(id<ANTLRTree>)t At:(NSInteger)index
+- (id<ANTLRBaseTree>) getChild:(id<ANTLRBaseTree>)t At:(NSInteger)index
{
-    return [(id<ANTLRTree>)t getChild:index ];
+    return [(id<ANTLRBaseTree>)t getChild:index ];
}

-- (void) setChild:(id<ANTLRTree>)t At:(NSInteger)index Child:(id<ANTLRTree>)child
+- (void) setChild:(id<ANTLRBaseTree>)t At:(NSInteger)index Child:(id<ANTLRBaseTree>)child
{
-    [(id<ANTLRTree>)t setChild:index With:(id<ANTLRTree>)child];
+    [(id<ANTLRBaseTree>)t setChild:index With:(id<ANTLRBaseTree>)child];
}

-- (id<ANTLRTree>) deleteChild:(id<ANTLRTree>)t Index:(NSInteger)index
+- (id<ANTLRBaseTree>) deleteChild:(id<ANTLRBaseTree>)t Index:(NSInteger)index
{
-    return [(id<ANTLRTree>)t deleteChild:index];
+    return [(id<ANTLRBaseTree>)t deleteChild:index];
}

-- (NSInteger) getChildCount:(id<ANTLRTree>)t
+- (NSInteger) getChildCount:(id<ANTLRBaseTree>)t
{
-    return [(id<ANTLRTree>)t getChildCount];
+    return [(id<ANTLRBaseTree>)t getChildCount];
}

-- (NSInteger) getUniqueID:(id<ANTLRTree>)node
+- (NSInteger) getUniqueID:(id<ANTLRBaseTree>)node
{
if ( treeToUniqueIDMap == nil ) {
treeToUniqueIDMap = [ANTLRUniqueIDMap newANTLRUniqueIDMap];
@@ -326,12 +339,27 @@
return nil;
}

+/** Track start/stop token for subtree root created for a rule.
+ *  Only works with Tree nodes.  For rules that match nothing,
+ *  seems like this will yield start=i and stop=i-1 in a nil node.
+ *  Might be useful info so I'll not force to be i..i.
+ */
+- (void) setTokenBoundaries:(id<ANTLRBaseTree>)aTree From:(id<ANTLRToken>)startToken To:(id<ANTLRToken>)stopToken
+{
+    return;
+}
+
+#ifdef DONTUSENOMO
+- (NSInteger)getUniqueID
+{
+    return uniqueNodeID;
+}
+
- (void) setUniqueNodeID:(NSInteger)aUniqueNodeID
{
uniqueNodeID = aUniqueNodeID;
}

-#ifdef DONTUSENOMO
- (ANTLRUniqueIDMap *)getTreeToUniqueIDMap
{
return treeToUniqueIDMap;
@@ -342,11 +370,6 @@
treeToUniqueIDMap = aMapListNode;
}

-- (NSInteger)getUniqueID
-{
-    return uniqueNodeID;
-}
-
#endif

@end
diff --git a/runtime/ObjC/Framework/ANTLRBitSet.h b/runtime/ObjC/Framework/ANTLRBitSet.h
index a1be117..3a4a51f 100644
--- a/runtime/ObjC/Framework/ANTLRBitSet.h
+++ b/runtime/ObjC/Framework/ANTLRBitSet.h
@@ -90,4 +90,5 @@

//private
- (CFMutableBitVectorRef) _bitVector;
+@property (getter=_bitVector) CFMutableBitVectorRef bitVector;
@end
diff --git a/runtime/ObjC/Framework/ANTLRBitSet.m b/runtime/ObjC/Framework/ANTLRBitSet.m
index d3170ee..9f1b8f4 100644
--- a/runtime/ObjC/Framework/ANTLRBitSet.m
+++ b/runtime/ObjC/Framework/ANTLRBitSet.m
@@ -76,7 +76,7 @@

+ (ANTLRBitSet *) of:(NSUInteger)a And2:(NSUInteger)b And3:(NSUInteger)c
{
-    NSInteger d = ((a>b)?a:b);
+    NSUInteger d = ((a>b)?a:b);
d = ((c>d)?c:d)+1;
ANTLRBitSet *s = [ANTLRBitSet newANTLRBitSetWithNBits:d];
[s add:a];
@@ -87,8 +87,8 @@

+ (ANTLRBitSet *) of:(NSUInteger)a And2:(NSUInteger)b And3:(NSUInteger)c And4:(NSUInteger)d
{
-    NSInteger e = ((a>b)?a:b);
-    NSInteger f = ((c>d)?c:d);
+    NSUInteger e = ((a>b)?a:b);
+    NSUInteger f = ((c>d)?c:d);
e = ((e>f)?e:f)+1;
ANTLRBitSet *s = [ANTLRBitSet newANTLRBitSetWithNBits:e];
[s add:a];
@@ -165,10 +165,9 @@
{
if ((self = [super init]) != nil) {
bitVector = CFBitVectorCreateMutable ( kCFAllocatorDefault, 0 );
-		NSEnumerator *enumerator = [theArray objectEnumerator];
id value;
int bit = 0;
-		while (value = [enumerator nextObject]) {
+		for (value in theArray) {
if ([value boolValue] == YES) {
[self add:bit];
//CFBitVectorSetBitAtIndex(bitVector, bit, 1);
@@ -310,9 +309,11 @@
return bitVector;
}

+@synthesize bitVector;
@end

NSInteger max(NSInteger a, NSInteger b)
{
return (a>b)?a:b;
-}
\ No newline at end of file
+}
+
diff --git a/runtime/ObjC/Framework/ANTLRBufferedTokenStream.h b/runtime/ObjC/Framework/ANTLRBufferedTokenStream.h
index a7db39c..3ef668c 100644
--- a/runtime/ObjC/Framework/ANTLRBufferedTokenStream.h
+++ b/runtime/ObjC/Framework/ANTLRBufferedTokenStream.h
@@ -53,15 +53,15 @@ NSInteger p;
NSInteger range; // how deep have we gone?

}
-@property (retain, getter=getTokenSource,setter=setTokenSource) id<ANTLRTokenSource> tokenSource;
-@property (retain, getter=getTokens,setter=setTokens) NSMutableArray *tokens;
-@property (assign, getter=getLastMarker,setter=setLastMarker) NSInteger lastMarker;
-@property (assign, getter=getIndex,setter=setIndex) NSInteger p;
-@property (assign, getter=getRange,setter=setRange) NSInteger range;
+@property (retain, getter=getTokenSource,setter=setTokenSource:) id<ANTLRTokenSource> tokenSource;
+@property (retain, getter=getTokens,setter=setTokens:) NSMutableArray *tokens;
+@property (assign, getter=getLastMarker,setter=setLastMarker:) NSInteger lastMarker;
+@property (assign, getter=getIndex,setter=setIndex:) NSInteger p;
+@property (assign, getter=getRange,setter=setRange:) NSInteger range;

+ (ANTLRBufferedTokenStream *) newANTLRBufferedTokenStream;
+ (ANTLRBufferedTokenStream *) newANTLRBufferedTokenStreamWith:(id<ANTLRTokenSource>)aSource;
-- (id) initWithSource:(id<ANTLRTokenSource>)aSource;
+- (id) initWithTokenSource:(id<ANTLRTokenSource>)aSource;
- (id) copyWithZone:(NSZone *)aZone;
- (NSInteger) getIndex;
- (void) setIndex:(NSInteger)index;
diff --git a/runtime/ObjC/Framework/ANTLRBufferedTokenStream.m b/runtime/ObjC/Framework/ANTLRBufferedTokenStream.m
index c1cbe16..3558c0f 100644
--- a/runtime/ObjC/Framework/ANTLRBufferedTokenStream.m
+++ b/runtime/ObjC/Framework/ANTLRBufferedTokenStream.m
@@ -27,6 +27,7 @@
#import "ANTLRBufferedTokenStream.h"
#import "ANTLRTokenSource.h"
#import "ANTLRCommonTreeAdaptor.h"
+#import "ANTLRRuntimeException.h"

extern NSInteger debug;

@@ -45,7 +46,7 @@ extern NSInteger debug;

+ (ANTLRBufferedTokenStream *) newANTLRBufferedTokenStreamWith:(id<ANTLRTokenSource>)aSource
{
-    return [[ANTLRBufferedTokenStream alloc] initWithSource:aSource];
+    return [[ANTLRBufferedTokenStream alloc] initWithTokenSource:aSource];
}

- (ANTLRBufferedTokenStream *) init
@@ -60,7 +61,7 @@ extern NSInteger debug;
return self;
}

--(id) initWithSource:(id<ANTLRTokenSource>)aSource
+-(id) initWithTokenSource:(id<ANTLRTokenSource>)aSource
{
if ((self = [super init]) != nil)
{
@@ -96,9 +97,9 @@ extern NSInteger debug;
return p;
}

-- (void) setIndex:(NSInteger) index
+- (void) setIndex:(NSInteger) anIndex
{
-    p = index;
+    p = anIndex;
}

- (NSInteger) getRange
@@ -142,9 +143,9 @@ extern NSInteger debug;
lastMarker = 0;
}

-- (void) seek:(NSInteger) index
+- (void) seek:(NSInteger) anIndex
{
-    p = index;
+    p = anIndex;
}

- (NSInteger) size
@@ -196,7 +197,7 @@ extern NSInteger debug;
- (id<ANTLRToken>) getToken:(NSInteger) i
{
if ( i < 0 || i >= [tokens count] ) {
-        @throw [ANTLRRuntimeException newANTLRNoSuchElementException:[NSString stringWithFormat:@"token index %d out of range 0..%d", i, [tokens count]-1]];
+        @throw [ANTLRNoSuchElementException newException:[NSString stringWithFormat:@"token index %d out of range 0..%d", i, [tokens count]-1]];
}
return [tokens objectAtIndex:i];
}
diff --git a/runtime/ObjC/Framework/ANTLRBufferedTreeNodeStream.h b/runtime/ObjC/Framework/ANTLRBufferedTreeNodeStream.h
index 8618ea2..7ac5fa5 100644
--- a/runtime/ObjC/Framework/ANTLRBufferedTreeNodeStream.h
+++ b/runtime/ObjC/Framework/ANTLRBufferedTreeNodeStream.h
@@ -60,13 +60,13 @@

@interface ANTLRBufferedTreeNodeStream : NSObject <ANTLRTreeNodeStream>
{
-	id<ANTLRTree> up;
-	id<ANTLRTree> down;
-	id<ANTLRTree> eof;
+	id<ANTLRBaseTree> up;
+	id<ANTLRBaseTree> down;
+	id<ANTLRBaseTree> eof;

NSMutableArray *nodes;

-	id<ANTLRTree> root; // root
+	id<ANTLRBaseTree> root; // root

id<ANTLRTokenStream> tokens;
ANTLRCommonTreeAdaptor *adaptor;
@@ -81,11 +81,11 @@

}

-@property (retain, getter=getUp, setter=setUp:) id<ANTLRTree> up;
-@property (retain, getter=getDown, setter=setDown:) id<ANTLRTree> down;
-@property (retain, getter=getEof, setter=setEof:) id<ANTLRTree> eof;
+@property (retain, getter=getUp, setter=setUp:) id<ANTLRBaseTree> up;
+@property (retain, getter=getDown, setter=setDown:) id<ANTLRBaseTree> down;
+@property (retain, getter=getEof, setter=setEof:) id<ANTLRBaseTree> eof;
@property (retain, getter=getNodes, setter=setNodes:) NSMutableArray *nodes;
-@property (retain, getter=getTreeSource, setter=setTreeSource:) id<ANTLRTree> root;
+@property (retain, getter=getTreeSource, setter=setTreeSource:) id<ANTLRBaseTree> root;
@property (retain, getter=getTokenStream, setter=setTokenStream:) id<ANTLRTokenStream> tokens;
@property (retain, getter=getAdaptor, setter=setAdaptor:) ANTLRCommonTreeAdaptor *adaptor;
@property (assign, getter=getUniqueNavigationNodes, setter=setUniqueNavigationNodes:) BOOL uniqueNavigationNodes;
@@ -95,24 +95,24 @@
@property (retain, getter=getEnum, setter=setEnum:) NSEnumerator *e;
@property (retain, getter=getCurrentSymbol, setter=setCurrentSymbol:) id currentSymbol;

-+ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(id<ANTLRTree>)tree;
-+ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(id<ANTLRTreeAdaptor>)adaptor Tree:(id<ANTLRTree>)tree;
-+ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(id<ANTLRTreeAdaptor>)adaptor Tree:(id<ANTLRTree>)tree withBufferSize:(NSInteger)initialBufferSize;
++ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(id<ANTLRBaseTree>)tree;
++ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(id<ANTLRTreeAdaptor>)adaptor Tree:(id<ANTLRBaseTree>)tree;
++ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(id<ANTLRTreeAdaptor>)adaptor Tree:(id<ANTLRBaseTree>)tree withBufferSize:(NSInteger)initialBufferSize;

#pragma mark Constructor
-- (id) initWithTree:(id<ANTLRTree>)tree;
-- (id) initWithTreeAdaptor:(ANTLRCommonTreeAdaptor *)anAdaptor Tree:(id<ANTLRTree>)tree;
-- (id) initWithTreeAdaptor:(ANTLRCommonTreeAdaptor *)anAdaptor Tree:(id<ANTLRTree>)tree WithBufferSize:(NSInteger)bufferSize;
+- (id) initWithTree:(id<ANTLRBaseTree>)tree;
+- (id) initWithTreeAdaptor:(ANTLRCommonTreeAdaptor *)anAdaptor Tree:(id<ANTLRBaseTree>)tree;
+- (id) initWithTreeAdaptor:(ANTLRCommonTreeAdaptor *)anAdaptor Tree:(id<ANTLRBaseTree>)tree WithBufferSize:(NSInteger)bufferSize;

- (id) copyWithZone:(NSZone *)aZone;

// protected methods. DO NOT USE
#pragma mark Protected Methods
- (void) fillBuffer;
-- (void) fillBufferWithTree:(id<ANTLRTree>) tree;
-- (NSInteger) getNodeIndex:(id<ANTLRTree>) node;
+- (void) fillBufferWithTree:(id<ANTLRBaseTree>) tree;
+- (NSInteger) getNodeIndex:(id<ANTLRBaseTree>) node;
- (void) addNavigationNode:(NSInteger) type;
-- (id) getNode:(NSInteger) i;
+- (id) getNode:(NSUInteger) i;
- (id) LT:(NSInteger) k;
- (id) getCurrentSymbol;
- (id) LB:(NSInteger) i;
@@ -151,6 +151,6 @@

// getters and setters
- (NSMutableArray *) getNodes;
-- (id<ANTLRTree>) getEof;
+- (id<ANTLRBaseTree>) getEof;

@end
diff --git a/runtime/ObjC/Framework/ANTLRBufferedTreeNodeStream.m b/runtime/ObjC/Framework/ANTLRBufferedTreeNodeStream.m
index 535dfe0..6877f03 100644
--- a/runtime/ObjC/Framework/ANTLRBufferedTreeNodeStream.m
+++ b/runtime/ObjC/Framework/ANTLRBufferedTreeNodeStream.m
@@ -67,7 +67,7 @@ extern NSInteger debug;

- (void) remove
{
-	@throw [ANTLRRuntimeException newANTLRRuntimeException:@"cannot remove nodes from stream"];
+	@throw [ANTLRRuntimeException newException:@"cannot remove nodes from stream"];
}

@end
@@ -89,19 +89,19 @@ extern NSInteger debug;
@synthesize e;
@synthesize currentSymbol;

-+ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(id<ANTLRTree>) aTree
++ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(id<ANTLRBaseTree>) aTree
{
-    return [((ANTLRBufferedTreeNodeStream *)[ANTLRBufferedTreeNodeStream alloc]) initWithTree:(id<ANTLRTree>)aTree];
+    return [((ANTLRBufferedTreeNodeStream *)[ANTLRBufferedTreeNodeStream alloc]) initWithTree:(id<ANTLRBaseTree>)aTree];
}

-+ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(id<ANTLRTreeAdaptor>)adaptor Tree:(ANTLRCommonTree *)aTree
++ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(id<ANTLRTreeAdaptor>)adaptor Tree:(id<ANTLRBaseTree>)aTree
{
-    return [[ANTLRBufferedTreeNodeStream alloc] initWithTreeAdaptor:adaptor Tree:(id<ANTLRTree>)aTree];
+    return [[ANTLRBufferedTreeNodeStream alloc] initWithTreeAdaptor:adaptor Tree:(id<ANTLRBaseTree>)aTree];
}

-+ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(id<ANTLRTreeAdaptor>)adaptor Tree:(id<ANTLRTree>)aTree withBufferSize:(NSInteger)initialBufferSize
++ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(id<ANTLRTreeAdaptor>)adaptor Tree:(id<ANTLRBaseTree>)aTree withBufferSize:(NSInteger)initialBufferSize
{
-    return [[ANTLRBufferedTreeNodeStream alloc] initWithTreeAdaptor:adaptor Tree:(id<ANTLRTree>)aTree WithBufferSize:initialBufferSize];
+    return [[ANTLRBufferedTreeNodeStream alloc] initWithTreeAdaptor:adaptor Tree:(id<ANTLRBaseTree>)aTree WithBufferSize:initialBufferSize];
}

-(ANTLRBufferedTreeNodeStream *) init
@@ -121,7 +121,7 @@ extern NSInteger debug;
return self;
}

-- (ANTLRBufferedTreeNodeStream *)initWithTree:(id<ANTLRTree>) aTree
+- (ANTLRBufferedTreeNodeStream *)initWithTree:(id<ANTLRBaseTree>) aTree
{
self = [super init];
if (self) {
@@ -138,7 +138,7 @@ extern NSInteger debug;
return self;
}

--(ANTLRBufferedTreeNodeStream *) initWithTreeAdaptor:(ANTLRCommonTreeAdaptor *)anAdaptor Tree:(id<ANTLRTree>)aTree
+-(ANTLRBufferedTreeNodeStream *) initWithTreeAdaptor:(ANTLRCommonTreeAdaptor *)anAdaptor Tree:(id<ANTLRBaseTree>)aTree
{
self = [super init];
if (self) {
@@ -155,7 +155,7 @@ extern NSInteger debug;
return self;
}

--(ANTLRBufferedTreeNodeStream *) initWithTreeAdaptor:(ANTLRCommonTreeAdaptor *)anAdaptor Tree:(id<ANTLRTree>)aTree WithBufferSize:(NSInteger)bufferSize
+-(ANTLRBufferedTreeNodeStream *) initWithTreeAdaptor:(ANTLRCommonTreeAdaptor *)anAdaptor Tree:(id<ANTLRBaseTree>)aTree WithBufferSize:(NSInteger)bufferSize
{
self = [super init];
if (self) {
@@ -211,7 +211,7 @@ extern NSInteger debug;
p = 0; // buffer of nodes intialized now
}

--(void) fillBufferWithTree:(id<ANTLRTree>) aTree
+-(void) fillBufferWithTree:(id<ANTLRBaseTree>) aTree
{
BOOL empty = [adaptor isNil:aTree];
if (!empty) {
@@ -230,12 +230,12 @@ extern NSInteger debug;
}
}

--(NSInteger) getNodeIndex:(id<ANTLRTree>) node
+-(NSInteger) getNodeIndex:(id<ANTLRBaseTree>) node
{
if (p == -1) {
[self fillBuffer];
}
-	for (NSInteger i = 0; i < [nodes count]; i++) {
+	for (NSUInteger i = 0; i < [nodes count]; i++) {
id t = [nodes objectAtIndex:i];
if (t == node) {
return i;
@@ -267,7 +267,7 @@ extern NSInteger debug;
[nodes addObject:navNode];
}

--(id) getNode:(NSInteger) i
+-(id) getNode:(NSUInteger) i
{
if (p == -1) {
[self fillBuffer];
@@ -308,7 +308,7 @@ extern NSInteger debug;
return [nodes objectAtIndex:(p - k)];
}

-- (id<ANTLRTree>)getTreeSource
+- (id<ANTLRBaseTree>)getTreeSource
{
return root;
}
@@ -431,6 +431,11 @@ extern NSInteger debug;
return [nodes count];
}

+-(NSUInteger) size
+{
+	return [self count];
+}
+
-(NSEnumerator *) objectEnumerator
{
if (e == nil) {
@@ -439,7 +444,7 @@ extern NSInteger debug;
return e;
}

--(void) replaceChildren:(id<ANTLRTree>) parent From:(NSInteger)startIdx To:(NSInteger)stopIdx With:(id<ANTLRTree>)aTree
+-(void) replaceChildren:(id<ANTLRBaseTree>) parent From:(NSInteger)startIdx To:(NSInteger)stopIdx With:(id<ANTLRBaseTree>)aTree
{
if (parent != nil) {
[adaptor replaceChildren:parent From:startIdx To:stopIdx With:aTree];
@@ -453,8 +458,8 @@ extern NSInteger debug;
[self fillBuffer];
}
NSMutableString *buf = [NSMutableString stringWithCapacity:10];
-	for (NSInteger i= 0; i < [nodes count]; i++) {
-		id<ANTLRTree> aTree = (id<ANTLRTree>)[self getNode:i];
+	for (NSUInteger i= 0; i < [nodes count]; i++) {
+		id<ANTLRBaseTree> aTree = (id<ANTLRBaseTree>)[self getNode:i];
[buf appendFormat:@" %d", [adaptor getType:aTree]];
}
return buf;
@@ -466,8 +471,8 @@ extern NSInteger debug;
[self fillBuffer];
}
NSMutableString *buf = [NSMutableString stringWithCapacity:10];
-	for (NSInteger i = aStart; i < [nodes count] && i <= aStop; i++) {
-		id<ANTLRTree> t = (id<ANTLRTree>)[self getNode:i];
+	for (NSUInteger i = aStart; i < [nodes count] && i <= aStop; i++) {
+		id<ANTLRBaseTree> t = (id<ANTLRBaseTree>)[self getNode:i];
[buf appendFormat:@" %d", [adaptor getType:t]];
}
return buf;
@@ -496,8 +501,8 @@ extern NSInteger debug;
[tokens toStringFromStart:beginTokenIndex ToEnd:endTokenIndex];
}
// walk nodes looking for aStart
-	id<ANTLRTree> aTree = nil;
-	NSInteger i = 0;
+	id<ANTLRBaseTree> aTree = nil;
+	NSUInteger i = 0;
for (; i < [nodes count]; i++) {
aTree = [nodes objectAtIndex:i];
if (aTree == aStart) {
@@ -529,7 +534,7 @@ extern NSInteger debug;
return nodes;
}

-- (id<ANTLRTree>) getEof
+- (id<ANTLRBaseTree>) getEof
{
return eof;
}
diff --git a/runtime/ObjC/Framework/ANTLRCharStreamState.h b/runtime/ObjC/Framework/ANTLRCharStreamState.h
index 2787c76..f52edb5 100644
--- a/runtime/ObjC/Framework/ANTLRCharStreamState.h
+++ b/runtime/ObjC/Framework/ANTLRCharStreamState.h
@@ -38,9 +38,9 @@ NSInteger line;
NSInteger charPositionInLine;
}

-@property (getter=getP,setter=setP:) NSInteger p;
-@property (getter=getLine,setter=setLine:) NSInteger line;
-@property (getter=getCharPositionInLine,setter=setCharPositionInLine:) NSInteger charPositionInLine;
+@property (assign) NSInteger p;
+@property (assign) NSInteger line;
+@property (assign) NSInteger charPositionInLine;

+ newANTLRCharStreamState;

diff --git a/runtime/ObjC/Framework/ANTLRCommonErrorNode.h b/runtime/ObjC/Framework/ANTLRCommonErrorNode.h
index 79badc1..f44641a 100644
--- a/runtime/ObjC/Framework/ANTLRCommonErrorNode.h
+++ b/runtime/ObjC/Framework/ANTLRCommonErrorNode.h
@@ -60,4 +60,8 @@ ANTLRRecognitionException *trappedException;

- (NSString *) toString;

+@property (retain) id<ANTLRIntStream> input;
+@property (retain) id<ANTLRToken> startToken;
+@property (retain) id<ANTLRToken> stopToken;
+@property (retain) ANTLRRecognitionException *trappedException;
@end
diff --git a/runtime/ObjC/Framework/ANTLRCommonErrorNode.m b/runtime/ObjC/Framework/ANTLRCommonErrorNode.m
index 22a0f36..353e872 100644
--- a/runtime/ObjC/Framework/ANTLRCommonErrorNode.m
+++ b/runtime/ObjC/Framework/ANTLRCommonErrorNode.m
@@ -134,4 +134,8 @@
return aString;
}

+@synthesize input;
+@synthesize startToken;
+@synthesize stopToken;
+@synthesize trappedException;
@end
diff --git a/runtime/ObjC/Framework/ANTLRCommonToken.h b/runtime/ObjC/Framework/ANTLRCommonToken.h
index e478448..e7593a5 100644
--- a/runtime/ObjC/Framework/ANTLRCommonToken.h
+++ b/runtime/ObjC/Framework/ANTLRCommonToken.h
@@ -37,26 +37,27 @@
NSUInteger charPositionInLine;
NSUInteger channel;
// this token's position in the TokenStream
-	NSUInteger index;
+	NSInteger index;

// indices into the CharStream to avoid copying the text
// can manually override the text by using -setText:
-	NSUInteger startIndex;
-	NSUInteger stopIndex;
+	NSInteger startIndex;
+	NSInteger stopIndex;
// the actual input stream this token was found in
id<ANTLRCharStream> input;
}

+ (void) initialize;
+ (NSInteger) DEFAULT_CHANNEL;
++ (id<ANTLRToken>)INVALID_TOKEN;
+ (NSInteger) INVALID_TOKEN_TYPE;
-+ (ANTLRCommonToken *) newToken;
-+ (ANTLRCommonToken *) newToken:(id<ANTLRCharStream>)anInput
-                                      Type:(NSInteger)aTType
-                                   Channel:(NSInteger)aChannel
-                                     Start:(NSInteger)aStart
-                                      Stop:(NSInteger)aStop;
-+ (ANTLRCommonToken *) newToken:(ANTLRTokenType)aType;
++ (id<ANTLRToken>) newToken;
++ (id<ANTLRToken>) newToken:(id<ANTLRCharStream>)anInput
+                       Type:(NSInteger)aTType
+                    Channel:(NSInteger)aChannel
+                      Start:(NSInteger)aStart
+                       Stop:(NSInteger)aStop;
++ (id<ANTLRToken>) newToken:(ANTLRTokenType)aType;
+ (id<ANTLRToken>) newToken:(NSInteger)tokenType Text:(NSString *)tokenText;
+ (id<ANTLRToken>) newTokenWithToken:(ANTLRCommonToken *)fromToken;
+ (id<ANTLRToken>) eofToken;
@@ -71,7 +72,7 @@
Channel:(NSInteger)aChannel
Start:(NSInteger)theStart
Stop:(NSInteger)theStop;
-- (id) initWithToken:(ANTLRCommonToken *)aToken;
+- (id) initWithToken:(id<ANTLRToken>)aToken;
- (id) initWithType:(ANTLRTokenType)aType;
- (id) initWithType:(ANTLRTokenType)aTType Text:(NSString *)tokenText;

@@ -111,15 +112,15 @@
- (id<ANTLRCharStream>) getInput;
- (void) setInput: (id<ANTLRCharStream>) anInput;

-- (NSUInteger) getStart;
-- (void) setStart: (NSUInteger) aStart;
+- (NSInteger) getStart;
+- (void) setStart: (NSInteger) aStart;

-- (NSUInteger) getStop;
-- (void) setStop: (NSUInteger) aStop;
+- (NSInteger) getStop;
+- (void) setStop: (NSInteger) aStop;

// the index of this Token into the TokenStream
-- (NSUInteger) getTokenIndex;
-- (void) setTokenIndex: (NSUInteger) aTokenIndex;
+- (NSInteger) getTokenIndex;
+- (void) setTokenIndex: (NSInteger) aTokenIndex;

// conform to NSCopying
- (id) copyWithZone:(NSZone *)theZone;
@@ -132,9 +133,9 @@
@property (assign) NSUInteger line;
@property (assign) NSUInteger charPositionInLine;
@property (assign) NSUInteger channel;
-@property (assign) NSUInteger index;
-@property (assign, getter=getStart, setter=setStart:) NSUInteger startIndex;
-@property (assign, getter=getStop, setter=setStop:) NSUInteger stopIndex;
+@property (assign) NSInteger index;
+@property (assign, getter=getStart, setter=setStart:) NSInteger startIndex;
+@property (assign, getter=getStop, setter=setStop:) NSInteger stopIndex;
@property (retain) id<ANTLRCharStream> input;

@end
diff --git a/runtime/ObjC/Framework/ANTLRCommonToken.m b/runtime/ObjC/Framework/ANTLRCommonToken.m
index 650ed6e..0e4ae35 100644
--- a/runtime/ObjC/Framework/ANTLRCommonToken.m
+++ b/runtime/ObjC/Framework/ANTLRCommonToken.m
@@ -57,6 +57,11 @@ static ANTLRCommonToken *INVALID_TOKEN;
[INVALID_TOKEN retain];
}

++ (ANTLRCommonToken *)INVALID_TOKEN
+{
+    return INVALID_TOKEN;
+}
+
+ (NSInteger) DEFAULT_CHANNEL
{
return DEFAULT_CHANNEL;
@@ -150,7 +155,10 @@ static ANTLRCommonToken *INVALID_TOKEN;
channel = aChannel;
startIndex = aStart;
stopIndex = aStop;
-        text = [input substringWithRange:NSMakeRange(startIndex, (stopIndex-startIndex)+1)];
+        if (type == ANTLRTokenTypeEOF)
+            text = @"EOF";
+        else
+            text = [input substringWithRange:NSMakeRange(startIndex, (stopIndex-startIndex)+1)];
}
return self;
}
@@ -315,12 +323,12 @@ static ANTLRCommonToken *INVALID_TOKEN;
//----------------------------------------------------------
//  start
//----------------------------------------------------------
-- (NSUInteger) getStart
+- (NSInteger) getStart
{
return startIndex;
}

-- (void) setStart: (NSUInteger) aStart
+- (void) setStart: (NSInteger) aStart
{
startIndex = aStart;
}
@@ -328,12 +336,12 @@ static ANTLRCommonToken *INVALID_TOKEN;
//----------------------------------------------------------
//  stop
//----------------------------------------------------------
-- (NSUInteger) getStop
+- (NSInteger) getStop
{
return stopIndex;
}

-- (void) setStop: (NSUInteger) aStop
+- (void) setStop: (NSInteger) aStop
{
stopIndex = aStop;
}
@@ -341,12 +349,12 @@ static ANTLRCommonToken *INVALID_TOKEN;
//----------------------------------------------------------
//  index
//----------------------------------------------------------
-- (NSUInteger) getTokenIndex;
+- (NSInteger) getTokenIndex;
{
return index;
}

-- (void) setTokenIndex: (NSUInteger) aTokenIndex;
+- (void) setTokenIndex: (NSInteger) aTokenIndex;
{
index = aTokenIndex;
}
@@ -355,11 +363,6 @@ static ANTLRCommonToken *INVALID_TOKEN;
// provide a textual representation for debugging
- (NSString *) description
{
-   return [self toString];
-}
-
-- (NSString *)toString
-{
NSString *channelStr;
NSMutableString *txtString;

@@ -378,4 +381,9 @@ static ANTLRCommonToken *INVALID_TOKEN;
return [NSString stringWithFormat:@"[@%d, %d:%d='%@',<%d>%@,%d:%d]", index, startIndex, stopIndex, txtString, type, channelStr, line, charPositionInLine];
}

+- (NSString *)toString
+{
+   return [self description];
+}
+
@end
diff --git a/runtime/ObjC/Framework/ANTLRCommonTokenStream.h b/runtime/ObjC/Framework/ANTLRCommonTokenStream.h
index 86427b8..534a546 100644
--- a/runtime/ObjC/Framework/ANTLRCommonTokenStream.h
+++ b/runtime/ObjC/Framework/ANTLRCommonTokenStream.h
@@ -35,20 +35,20 @@
@interface ANTLRCommonTokenStream : ANTLRBufferedTokenStream < ANTLRTokenStream >
{
NSMutableDictionary *channelOverride;
-	NSInteger channel;
+	NSUInteger channel;
}

-@property (retain, getter=getChannelOverride,setter=setChannelOverride) NSMutableDictionary *channelOverride;
-@property (assign, getter=getChannel,setter=setChannel) NSInteger channel;
+@property (retain, getter=getChannelOverride,setter=setChannelOverride:) NSMutableDictionary *channelOverride;
+@property (assign, getter=getChannel,setter=setChannel:) NSUInteger channel;

+ (ANTLRCommonTokenStream *)newANTLRCommonTokenStream;
+ (ANTLRCommonTokenStream *)newANTLRCommonTokenStreamWithTokenSource:(id<ANTLRTokenSource>)theTokenSource;
+ (ANTLRCommonTokenStream *)newANTLRCommonTokenStreamWithTokenSource:(id<ANTLRTokenSource>)theTokenSource
-                                                               Channel:(NSInteger)aChannel;
+                                                               Channel:(NSUInteger)aChannel;

- (id) init;
- (id) initWithTokenSource:(id<ANTLRTokenSource>)theTokenSource;
-- (id) initWithTokenSource:(id<ANTLRTokenSource>)theTokenSource Channel:(NSInteger)aChannel;
+- (id) initWithTokenSource:(id<ANTLRTokenSource>)theTokenSource Channel:(NSUInteger)aChannel;

- (void) consume;
- (id<ANTLRToken>) LB:(NSInteger)k;
@@ -64,8 +64,8 @@
// - (id<ANTLRTokenSource>) getTokenSource;
- (void) setTokenSource: (id<ANTLRTokenSource>) aTokenSource;

-- (NSInteger)getChannel;
-- (void)setChannel:(NSInteger)aChannel;
+- (NSUInteger)getChannel;
+- (void)setChannel:(NSUInteger)aChannel;

- (NSMutableDictionary *)getChannelOverride;
- (void)setChannelOverride:(NSMutableDictionary *)anOverride;
diff --git a/runtime/ObjC/Framework/ANTLRCommonTokenStream.m b/runtime/ObjC/Framework/ANTLRCommonTokenStream.m
index 75daa26..9eba279 100644
--- a/runtime/ObjC/Framework/ANTLRCommonTokenStream.m
+++ b/runtime/ObjC/Framework/ANTLRCommonTokenStream.m
@@ -45,11 +45,9 @@
return [[ANTLRCommonTokenStream alloc] initWithTokenSource:(id<ANTLRTokenSource>)theTokenSource];
}

-+ (ANTLRCommonTokenStream *)newANTLRCommonTokenStreamWithTokenSource:(id<ANTLRTokenSource>)theTokenSource
-                                                               Channel:(NSInteger)aChannel
++ (ANTLRCommonTokenStream *)newANTLRCommonTokenStreamWithTokenSource:(id<ANTLRTokenSource>)theTokenSource Channel:(NSUInteger)aChannel
{
-    return [[ANTLRCommonTokenStream alloc] initWithTokenSource:(id<ANTLRTokenSource>)theTokenSource
-                                                       Channel:aChannel];
+    return [[ANTLRCommonTokenStream alloc] initWithTokenSource:(id<ANTLRTokenSource>)theTokenSource Channel:aChannel];
}

- (id) init
@@ -63,16 +61,16 @@

- (id) initWithTokenSource:(id<ANTLRTokenSource>)theTokenSource
{
-	if ((self = [super initWithSource:theTokenSource]) != nil) {
+	if ((self = [super initWithTokenSource:theTokenSource]) != nil) {
channelOverride = [[NSMutableDictionary dictionaryWithCapacity:100] retain];
channel = ANTLRTokenChannelDefault;
}
return self;
}

-- (id) initWithTokenSource:(id<ANTLRTokenSource>)theTokenSource Channel:(NSInteger)aChannel
+- (id) initWithTokenSource:(id<ANTLRTokenSource>)theTokenSource Channel:(NSUInteger)aChannel
{
-	if ((self = [super initWithSource:theTokenSource]) != nil) {
+	if ((self = [super initWithTokenSource:theTokenSource]) != nil) {
channelOverride = [[NSMutableDictionary dictionaryWithCapacity:100] retain];
channel = aChannel;
}
@@ -203,12 +201,12 @@
return copy;
}

-- (NSInteger)getChannel
+- (NSUInteger)getChannel
{
return channel;
}

-- (void)setChannel:(NSInteger)aChannel
+- (void)setChannel:(NSUInteger)aChannel
{
channel = aChannel;
}
diff --git a/runtime/ObjC/Framework/ANTLRCommonTree.h b/runtime/ObjC/Framework/ANTLRCommonTree.h
index a6f3a41..356da1d 100644
--- a/runtime/ObjC/Framework/ANTLRCommonTree.h
+++ b/runtime/ObjC/Framework/ANTLRCommonTree.h
@@ -29,19 +29,15 @@
#import "ANTLRBaseTree.h"

@interface ANTLRCommonTree : ANTLRBaseTree <ANTLRTree> {
-	ANTLRCommonToken *token;
-	NSInteger startIndex;
-	NSInteger stopIndex;
-    ANTLRCommonTree *parent;
-    NSInteger childIndex;
}

-@property (retain, getter=getANTLRCommonToken, setter=setANTLRCommonToken) ANTLRCommonToken *token;
-@property (assign, getter=getTokenStartIndex, setter=setTokenStartIndex) NSInteger startIndex;
-@property (assign, getter=getTokenStopIndex, setter=setTokenStopIndex) NSInteger stopIndex;
-@property (retain, getter=getParent, setter=setParent:) ANTLRCommonTree *parent;
-@property (assign, getter=getChildIndex, setter=setChildIndex) NSInteger childIndex;
-
+/*
+@property (retain, getter=getANTLRCommonToken, setter=setANTLRCommonToken:) ANTLRCommonToken *token;
+@property (assign, getter=getTokenStartIndex, setter=setTokenStartIndex:) NSInteger startIndex;
+@property (assign, getter=getTokenStopIndex, setter=setTokenStopIndex:) NSInteger stopIndex;
+@property (retain, getter=getParent, setter=setParent:) id<ANTLRBaseTree> parentparent;
+@property (assign, getter=getChildIndex, setter=setChildIndex:) NSInteger childIndex;
+*/
+ (ANTLRCommonTree *) invalidNode;
+ (ANTLRCommonTree *) newTree;
+ (ANTLRCommonTree *) newTreeWithTree:(ANTLRCommonTree *)aTree;
@@ -49,10 +45,10 @@
+ (ANTLRCommonTree *) newTreeWithTokenType:(NSInteger)tokenType;
+ (ANTLRCommonTree *) newTreeWithTokenType:(NSInteger)aTType Text:(NSString *)theText;
#ifdef DONTUSEYET
-+ (id<ANTLRTree>) newTreeWithTokenType:(NSInteger)tokenType;
-+ (id<ANTLRTree>) newTreeWithToken:(id<ANTLRToken>)fromToken TokenType:(NSInteger)tokenType;
-+ (id<ANTLRTree>) newTreeWithToken:(id<ANTLRToken>)fromToken TokenType:(NSInteger)tokenType Text:(NSString *)tokenText;
-+ (id<ANTLRTree>) newTreeWithToken:(id<ANTLRToken>)fromToken Text:(NSString *)tokenText;
++ (id<ANTLRBaseTree>) newTreeWithTokenType:(NSInteger)tokenType;
++ (id<ANTLRBaseTree>) newTreeWithToken:(id<ANTLRToken>)fromToken TokenType:(NSInteger)tokenType;
++ (id<ANTLRBaseTree>) newTreeWithToken:(id<ANTLRToken>)fromToken TokenType:(NSInteger)tokenType Text:(NSString *)tokenText;
++ (id<ANTLRBaseTree>) newTreeWithToken:(id<ANTLRToken>)fromToken Text:(NSString *)tokenText;
#endif

- (id) init;
@@ -61,13 +57,13 @@
- (id) initWithTokenType:(NSInteger)aTokenType;
- (id) initWithTokenType:(NSInteger)aTokenType Text:(NSString *)theText;

-- (id<ANTLRTree>) copyWithZone:(NSZone *)aZone;
+- (id<ANTLRBaseTree>) copyWithZone:(NSZone *)aZone;

- (BOOL) isNil;

- (ANTLRCommonToken *) getToken;
- (void) setToken:(ANTLRCommonToken *)aToken;
-- (id<ANTLRTree>) dupNode;
+- (id<ANTLRBaseTree>) dupNode;
- (NSInteger) getType;
- (NSString *) getText;
- (NSUInteger) getLine;
diff --git a/runtime/ObjC/Framework/ANTLRCommonTree.m b/runtime/ObjC/Framework/ANTLRCommonTree.m
index 37b5c98..615a6c1 100644
--- a/runtime/ObjC/Framework/ANTLRCommonTree.m
+++ b/runtime/ObjC/Framework/ANTLRCommonTree.m
@@ -29,85 +29,93 @@

@implementation ANTLRCommonTree

+/*
@synthesize token;
@synthesize startIndex;
@synthesize stopIndex;
@synthesize parent;
@synthesize childIndex;
+*/

-+ (ANTLRCommonTree *)invalidNode
++ (id<ANTLRBaseTree>)INVALID_NODE
{
-    // Had to cast to id<ANTLRTree> here, because GCC is dumb.
-	return [((ANTLRCommonTree *)[ANTLRCommonTree alloc]) initWithToken:[ANTLRCommonToken invalidToken]];
+	return [[ANTLRCommonTree alloc] initWithToken:[ANTLRCommonToken invalidToken]];
}

-+ (ANTLRCommonTree *)newTree
++ (id<ANTLRBaseTree>)invalidNode
+{
+    // Had to cast to id<ANTLRBaseTree> here, because GCC is dumb.
+	return [[ANTLRCommonTree alloc] initWithToken:ANTLRCommonToken.INVALID_TOKEN];
+}
+
++ (id<ANTLRBaseTree>)newTree
{
return [[ANTLRCommonTree alloc] init];
}

-+ (ANTLRCommonTree *)newTreeWithTree:(ANTLRCommonTree *)aTree
++ (id<ANTLRBaseTree>)newTreeWithTree:(id<ANTLRBaseTree>)aTree
{
return [[ANTLRCommonTree alloc] initWithTreeNode:aTree];
}

-+ (ANTLRCommonTree *)newTreeWithToken:(ANTLRCommonToken *)aToken
++ (id<ANTLRBaseTree>)newTreeWithToken:(id<ANTLRToken>)aToken
{
-    // Had to cast to id<ANTLRTree> here, because GCC is dumb.
-	return [((ANTLRCommonTree *)[ANTLRCommonTree alloc]) initWithToken:aToken];
+	return [[ANTLRCommonTree alloc] initWithToken:aToken];
}

-+ (ANTLRCommonTree *)newTreeWithTokenType:(NSInteger)aTType
++ (id<ANTLRBaseTree>)newTreeWithTokenType:(NSInteger)aTType
{
-    // Had to cast to id<ANTLRTree> here, because GCC is dumb.
return [[ANTLRCommonTree alloc] initWithTokenType:(NSInteger)aTType];
}

-+ (ANTLRCommonTree *)newTreeWithTokenType:(NSInteger)aTType Text:(NSString *)theText
++ (id<ANTLRBaseTree>)newTreeWithTokenType:(NSInteger)aTType Text:(NSString *)theText
{
-    // Had to cast to id<ANTLRTree> here, because GCC is dumb.
return [[ANTLRCommonTree alloc] initWithTokenType:(NSInteger)aTType Text:theText];
}

- (id)init
{
-	if ((self = [super init]) != nil) {
+	self = (ANTLRCommonTree *)[super init];
+	if ( self != nil ) {
token = nil;
startIndex = -1;
stopIndex = -1;
parent = nil;
childIndex = -1;
}
-	return self;
+	return (id<ANTLRBaseTree>)self;
}

-- (id)initWithTreeNode:(ANTLRCommonTree *)aNode
+- (id)initWithTreeNode:(id<ANTLRBaseTree>)aNode
{
-	if ((self = [super init]) != nil) {
+	self = (ANTLRCommonTree *)[super init];
+	if ( self != nil ) {
token = aNode.token;
startIndex = aNode.startIndex;
stopIndex = aNode.stopIndex;
parent = nil;
childIndex = -1;
}
-	return self;
+	return (id<ANTLRBaseTree>)self;
}

-- (id)initWithToken:(ANTLRCommonToken *)aToken
+- (id)initWithToken:(id<ANTLRToken>)aToken
{
-	if ((self = [super init]) != nil ) {
+	self = (ANTLRCommonTree *)[super init];
+	if ( self != nil ) {
token = aToken;
startIndex = -1;
stopIndex = -1;
parent = nil;
childIndex = -1;
}
-	return self;
+	return (id<ANTLRBaseTree>)self;
}

- (id)initWithTokenType:(NSInteger)aTokenType
{
-	if ((self = [super init]) != nil ) {
+	self = (ANTLRCommonTree *)[super init];
+	if ( self != nil ) {
token = [ANTLRCommonToken newToken:aTokenType];
//		startIndex = token.startIndex;
startIndex = -1;
@@ -116,12 +124,13 @@
parent = nil;
childIndex = -1;
}
-	return self;
+	return (id<ANTLRBaseTree>)self;
}

- (id) initWithTokenType:(NSInteger)aTokenType Text:(NSString *)theText
{
-	if ((self = [super init]) != nil ) {
+	self = (ANTLRCommonTree *)[super init];
+	if ( self != nil ) {
token = [ANTLRCommonToken newToken:aTokenType Text:theText];
//		startIndex = token.startIndex;
startIndex = -1;
@@ -130,7 +139,7 @@
parent = nil;
childIndex = -1;
}
-	return self;
+	return (id<ANTLRBaseTree>)self;
}

- (void) dealloc
@@ -173,7 +182,7 @@
}
}

-- (id<ANTLRTree>) dupNode
+- (id<ANTLRBaseTree>) dupNode
{
return [ANTLRCommonTree newTreeWithTree:self ];
}
@@ -268,7 +277,7 @@
}
return;
}
-    for (int i=0; i < [children count]; i++) {
+    for (NSUInteger i=0; i < [children count]; i++) {
[[children objectAtIndex:i] setUnknownTokenBoundaries];
}
if ( startIndex >= 0 && stopIndex >= 0 )
@@ -286,19 +295,19 @@
return childIndex;
}

-- (id<ANTLRTree>) getParent
+- (id<ANTLRBaseTree>) getParent
{
return parent;
}

-- (void) setParent:(id<ANTLRTree>) t
+- (void) setParent:(id<ANTLRBaseTree>) t
{
-    parent = (ANTLRCommonTree *)t;
+    parent = (id<ANTLRBaseTree>)t;
}

-- (void) setChildIndex:(NSInteger) index
+- (void) setChildIndex:(NSInteger) anIndex
{
-    childIndex = index;
+    childIndex = anIndex;
}

- (NSString *) description
diff --git a/runtime/ObjC/Framework/ANTLRCommonTreeAdaptor.h b/runtime/ObjC/Framework/ANTLRCommonTreeAdaptor.h
index 0bd55fa..90f0d49 100644
--- a/runtime/ObjC/Framework/ANTLRCommonTreeAdaptor.h
+++ b/runtime/ObjC/Framework/ANTLRCommonTreeAdaptor.h
@@ -34,30 +34,32 @@
@interface ANTLRCommonTreeAdaptor : ANTLRBaseTreeAdaptor {
}

-+ (id<ANTLRTree>) newEmptyTree;
++ (id<ANTLRBaseTree>) newEmptyTree;
+ (ANTLRCommonTreeAdaptor *)newTreeAdaptor;
- (id) init;
-- (id<ANTLRTree>)dupNode:(id<ANTLRTree>)t;
-- (ANTLRCommonTree *)createTree:(ANTLRCommonToken *)aToken;
-- (ANTLRCommonTree *)createTree:(NSInteger)tokenType Text:(NSString *)text;
+- (id<ANTLRBaseTree>)dupNode:(id<ANTLRBaseTree>)t;
+
+- (id<ANTLRBaseTree>) create:(id<ANTLRToken>) payload;
+- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType fromToken:(ANTLRCommonToken *)aToken;
+- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType fromToken:(ANTLRCommonToken *)aToken Text:(NSString *)text;
- (id<ANTLRToken>)createToken:(NSInteger)tokenType Text:(NSString *)text;
- (id<ANTLRToken>)createToken:(id<ANTLRToken>)fromToken;
-- (void) setTokenBoundaries:(id<ANTLRTree>)t From:(id<ANTLRToken>)startToken To:(id<ANTLRToken>)stopToken;
-- (NSInteger)getTokenStartIndex:(id<ANTLRTree>)t;
-- (NSInteger)getTokenStopIndex:(id<ANTLRTree>)t;
-- (NSString *)getText:(id<ANTLRTree>)t;
-- (void)setText:(id<ANTLRTree>)t Text:(NSString *)text;
-- (NSInteger)getType:(id<ANTLRTree>)t;
-- (void) setType:(id<ANTLRTree>)t Type:(NSInteger)tokenType;
-- (id<ANTLRToken>)getToken:(id<ANTLRTree>)t;
-- (id<ANTLRTree>)getChild:(id<ANTLRTree>)t At:(NSInteger)i;
-- (void) setChild:(id<ANTLRTree>)t At:(NSInteger)i Child:(id<ANTLRTree>)child;
-- (NSInteger)getChildCount:(id<ANTLRTree>)t;
-- (id<ANTLRTree>)getParent:(id<ANTLRTree>)t;
-- (void)setParent:(id<ANTLRTree>)t With:(id<ANTLRTree>)parent;
-- (NSInteger)getChildIndex:(id<ANTLRTree>)t;
-- (void)setChildIndex:(id<ANTLRTree>)t With:(NSInteger)index;
-- (void)replaceChildren:(id<ANTLRTree>)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id<ANTLRTree>)t;
+- (void) setTokenBoundaries:(id<ANTLRBaseTree>)t From:(id<ANTLRToken>)startToken To:(id<ANTLRToken>)stopToken;
+- (NSInteger)getTokenStartIndex:(id<ANTLRBaseTree>)t;
+- (NSInteger)getTokenStopIndex:(id<ANTLRBaseTree>)t;
+- (NSString *)getText:(id<ANTLRBaseTree>)t;
+- (void)setText:(id<ANTLRBaseTree>)t Text:(NSString *)text;
+- (NSInteger)getType:(id<ANTLRBaseTree>)t;
+- (void) setType:(id<ANTLRBaseTree>)t Type:(NSInteger)tokenType;
+- (id<ANTLRToken>)getToken:(id<ANTLRBaseTree>)t;
+- (id<ANTLRBaseTree>)getChild:(id<ANTLRBaseTree>)t At:(NSInteger)i;
+- (void) setChild:(id<ANTLRBaseTree>)t At:(NSInteger)i Child:(id<ANTLRBaseTree>)child;
+- (NSInteger)getChildCount:(id<ANTLRBaseTree>)t;
+- (id<ANTLRBaseTree>)getParent:(id<ANTLRBaseTree>)t;
+- (void)setParent:(id<ANTLRBaseTree>)t With:(id<ANTLRBaseTree>)parent;
+- (NSInteger)getChildIndex:(id<ANTLRBaseTree>)t;
+- (void)setChildIndex:(id<ANTLRBaseTree>)t With:(NSInteger)index;
+- (void)replaceChildren:(id<ANTLRBaseTree>)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id<ANTLRBaseTree>)t;
- (id)copyWithZone:(NSZone *)zone;

@end
diff --git a/runtime/ObjC/Framework/ANTLRCommonTreeAdaptor.m b/runtime/ObjC/Framework/ANTLRCommonTreeAdaptor.m
index c29c149..3285e31 100644
--- a/runtime/ObjC/Framework/ANTLRCommonTreeAdaptor.m
+++ b/runtime/ObjC/Framework/ANTLRCommonTreeAdaptor.m
@@ -52,11 +52,11 @@
*  I could use reflection to prevent having to override this
*  but reflection is slow.
*/
-- (id) dupNode:(id<ANTLRTree>)t
+- (id) dupNode:(id<ANTLRBaseTree>)t
{
if ( t==nil )
return nil;
-    return [(id<ANTLRTree>) t copyWithZone:nil];
+    return [ANTLRCommonTree newTree:t];
}

/** Tell me how to create a token for use with imaginary token nodes.
@@ -73,7 +73,7 @@
*  If you care what the token payload objects' type is, you should
*  override this method and any other createToken variant.
*/
-- (ANTLRCommonTree *) createTree:(ANTLRCommonToken *)aToken
+- (ANTLRCommonTree *) create:(ANTLRCommonToken *)aToken
{
return [ANTLRCommonTree newTreeWithToken:aToken];
}
@@ -97,7 +97,7 @@
return fromToken;
}

-- (id<ANTLRToken>)createToken:(ANTLRCommonToken *)fromToken
+- (id<ANTLRToken>)createToken:(id<ANTLRToken>)fromToken
{
return fromToken = [ANTLRCommonToken newTokenWithToken:(ANTLRCommonToken *)fromToken];
}
@@ -107,7 +107,7 @@
*  seems like this will yield start=i and stop=i-1 in a nil node.
*  Might be useful info so I'll not force to be i..i.
*/
-- (void) setTokenBoundaries:(id<ANTLRTree>)aTree From:(id<ANTLRToken>)startToken To:(id<ANTLRToken>)stopToken
+- (void) setTokenBoundaries:(id<ANTLRBaseTree>)aTree From:(id<ANTLRToken>)startToken To:(id<ANTLRToken>)stopToken
{
if ( aTree == nil )
return;
@@ -117,45 +117,45 @@
startTokIdx = [startToken getTokenIndex];
if ( stopToken != nil )
stopTokIdx = [stopToken getTokenIndex];
-    [(id<ANTLRTree>)aTree setTokenStartIndex:startTokIdx];
-    [(id<ANTLRTree>)aTree setTokenStopIndex:stopTokIdx];
+    [(id<ANTLRBaseTree>)aTree setTokenStartIndex:startTokIdx];
+    [(id<ANTLRBaseTree>)aTree setTokenStopIndex:stopTokIdx];
}

-- (NSInteger)getTokenStartIndex:(id<ANTLRTree>) t
+- (NSInteger)getTokenStartIndex:(id<ANTLRBaseTree>) t
{
if ( t == nil )
return -1;
-    return [(id<ANTLRTree>)t getTokenStartIndex];
+    return [(id<ANTLRBaseTree>)t getTokenStartIndex];
}

-- (NSInteger)getTokenStopIndex:(id<ANTLRTree>) t
+- (NSInteger)getTokenStopIndex:(id<ANTLRBaseTree>) t
{
if ( t == nil )
return -1;
-    return [(id<ANTLRTree>)t getTokenStopIndex];
+    return [(id<ANTLRBaseTree>)t getTokenStopIndex];
}

-- (NSString *)getText:(id<ANTLRTree>)t
+- (NSString *)getText:(id<ANTLRBaseTree>)t
{
if ( t == nil )
return nil;
-    return [(id<ANTLRTree>) t getText];
+    return [(id<ANTLRBaseTree>) t getText];
}

-- (void)setText:(id<ANTLRTree>)t Text:(NSString *)text
+- (void)setText:(id<ANTLRBaseTree>)t Text:(NSString *)text
{
if ( t == nil )
return;
}

-- (NSInteger)getType:(id<ANTLRTree>)t
+- (NSInteger)getType:(id<ANTLRBaseTree>)t
{
if ( t==nil )
return ANTLRTokenTypeInvalid;
-    return [(id<ANTLRTree>) t getType];
+    return [(id<ANTLRBaseTree>) t getType];
}

-- (void) setType:(id<ANTLRTree>)t Type:(NSInteger)tokenType
+- (void) setType:(id<ANTLRBaseTree>)t Type:(NSInteger)tokenType
{
if ( t==nil )
return;
@@ -173,62 +173,62 @@
return nil; // no idea what to do
}

-- (id<ANTLRTree>) getChild:(id<ANTLRTree>)t At:(NSInteger)i
+- (id<ANTLRBaseTree>) getChild:(id<ANTLRBaseTree>)t At:(NSInteger)i
{
if ( t == nil )
return nil;
-    return [(id<ANTLRTree>) t getChild:i];
+    return [(id<ANTLRBaseTree>) t getChild:i];
}

-- (void) setChild:(id<ANTLRTree>)t At:(NSInteger)i Child:(id<ANTLRTree>)child
+- (void) setChild:(id<ANTLRBaseTree>)t At:(NSInteger)i Child:(id<ANTLRBaseTree>)child
{
if ( t == nil )
return;
-    [(id<ANTLRTree>) t setChild:i With:child];
+    [(id<ANTLRBaseTree>) t setChild:i With:child];
}

-- (id) deleteChild:(id<ANTLRTree>)t Index:(int)index
+- (id) deleteChild:(id<ANTLRBaseTree>)t Index:(NSInteger)anIndex
{
-    return [t deleteChild:index];
+    return [t deleteChild:anIndex];
}

-- (NSInteger) getChildCount:(id<ANTLRTree>) t
+- (NSInteger) getChildCount:(id<ANTLRBaseTree>) t
{
if ( t == nil )
return 0;
-    return [(id<ANTLRTree>) t getChildCount];
+    return [(id<ANTLRBaseTree>) t getChildCount];
}

-- (id<ANTLRTree>) getParent:(id<ANTLRTree>) t
+- (id<ANTLRBaseTree>) getParent:(id<ANTLRBaseTree>) t
{
if ( t == nil )
return nil;
-    return [(id<ANTLRTree>) t getParent];
+    return (id<ANTLRBaseTree>)[t getParent];
}

-- (void) setParent:(id<ANTLRTree>)t With:(id<ANTLRTree>) parent
+- (void) setParent:(id<ANTLRBaseTree>)t With:(id<ANTLRBaseTree>) parent
{
if ( t != nil )
-        [(id<ANTLRTree>) t setParent:(id<ANTLRTree>)parent];
+        [(id<ANTLRBaseTree>) t setParent:(id<ANTLRBaseTree>)parent];
}

-- (NSInteger) getChildIndex:(id<ANTLRTree>) t
+- (NSInteger) getChildIndex:(id<ANTLRBaseTree>) t
{
if ( t == nil )
return 0;
-    return [(id<ANTLRTree>) t getChildIndex];
+    return [(id<ANTLRBaseTree>) t getChildIndex];
}

-- (void) setChildIndex:(id<ANTLRTree>)t With:(NSInteger)index
+- (void) setChildIndex:(id<ANTLRBaseTree>)t With:(NSInteger)anIndex
{
if ( t!=nil )
-        [(id<ANTLRTree>)t setChildIndex:index];
+        [(id<ANTLRBaseTree>)t setChildIndex:anIndex];
}

-- (void) replaceChildren:(id<ANTLRTree>)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id<ANTLRTree>)t
+- (void) replaceChildren:(id<ANTLRBaseTree>)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id<ANTLRBaseTree>)t
{
if ( parent != nil ) {
-        [(id<ANTLRTree>)parent replaceChildrenFrom:startChildIndex To:stopChildIndex With:t];
+        [(id<ANTLRBaseTree>)parent replaceChildrenFrom:startChildIndex To:stopChildIndex With:t];
}
}

diff --git a/runtime/ObjC/Framework/ANTLRCommonTreeNodeStream.h b/runtime/ObjC/Framework/ANTLRCommonTreeNodeStream.h
index 1ea9633..e43f97d 100644
--- a/runtime/ObjC/Framework/ANTLRCommonTreeNodeStream.h
+++ b/runtime/ObjC/Framework/ANTLRCommonTreeNodeStream.h
@@ -76,7 +76,7 @@ NSInteger level;
*/
- (id) nextElement;

-- (BOOL) isEOF:(id<ANTLRTree>) o;
+- (BOOL) isEOF:(id<ANTLRBaseTree>) o;
- (void) setUniqueNavigationNodes:(BOOL) uniqueNavigationNodes;

- (id) getTreeSource;
@@ -109,9 +109,12 @@ NSInteger level;

- (void) replaceChildren:(id)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id) t;

-- (NSString *) toStringFromNode:(id<ANTLRTree>)startNode ToNode:(id<ANTLRTree>)stopNode;
+- (NSString *) toStringFromNode:(id<ANTLRBaseTree>)startNode ToNode:(id<ANTLRBaseTree>)stopNode;

/** For debugging; destructive: moves tree iterator to end. */
- (NSString *) toTokenTypeString;

+@property (retain) ANTLRTreeIterator *it;
+@property (retain) ANTLRIntArray *calls;
+@property BOOL hasNilRoot;
@end
diff --git a/runtime/ObjC/Framework/ANTLRCommonTreeNodeStream.m b/runtime/ObjC/Framework/ANTLRCommonTreeNodeStream.m
index 44656e7..abab0a0 100644
--- a/runtime/ObjC/Framework/ANTLRCommonTreeNodeStream.m
+++ b/runtime/ObjC/Framework/ANTLRCommonTreeNodeStream.m
@@ -109,7 +109,7 @@
return t;
}

-- (BOOL) isEOF:(id<ANTLRTree>) aTree
+- (BOOL) isEOF:(id<ANTLRBaseTree>) aTree
{
return [adaptor getType:aTree] == ANTLRTokenTypeEOF;
}
@@ -150,7 +150,7 @@

- (ANTLRCommonTree *)getNode:(NSInteger) i
{
-    @throw [ANTLRRuntimeException newANTLRRuntimeException:@"Absolute node indexes are meaningless in an unbuffered stream"];
+    @throw [ANTLRRuntimeException newException:@"Absolute node indexes are meaningless in an unbuffered stream"];
return nil;
}

@@ -162,17 +162,17 @@
/** Make stream jump to a new location, saving old location.
*  Switch back with pop().
*/
-- (void) push:(NSInteger) index
+- (void) push:(NSInteger) anIndex
{
if ( calls == nil ) {
calls = [ANTLRIntArray newArrayWithLen:INITIAL_CALL_STACK_SIZE];
}
-    [calls push:p]; // save current index
-    [self seek:index];
+    [calls push:p]; // save current anIndex
+    [self seek:anIndex];
}

-/** Seek back to previous index saved during last push() call.
- *  Return top of stack (return index).
+/** Seek back to previous anIndex saved during last push() call.
+ *  Return top of stack (return anIndex).
*/
- (NSInteger) pop
{
@@ -190,7 +190,7 @@
}
}

-- (NSString *) toStringFromNode:(id<ANTLRTree>)startNode ToNode:(id<ANTLRTree>)stopNode
+- (NSString *) toStringFromNode:(id<ANTLRBaseTree>)startNode ToNode:(id<ANTLRBaseTree>)stopNode
{
// we'll have to walk from start to stop in tree; we're not keeping
// a complete node stream buffer
@@ -214,5 +214,8 @@
return buf;
}

+@synthesize it;
+@synthesize calls;
+@synthesize hasNilRoot;
@end

diff --git a/runtime/ObjC/Framework/ANTLRDFA.h b/runtime/ObjC/Framework/ANTLRDFA.h
index 9094a3d..b3e7fde 100644
--- a/runtime/ObjC/Framework/ANTLRDFA.h
+++ b/runtime/ObjC/Framework/ANTLRDFA.h
@@ -44,10 +44,6 @@
NSInteger len;
}

-@property (retain, getter=getRecognizer,setter=setRecognizer:) ANTLRBaseRecognizer *recognizer;
-@property (assign, getter=getDecision,setter=setDecision:) NSInteger decisionNumber;
-@property (assign, getter=getLen,setter=setLen:) NSInteger len;
-
- (id) initWithRecognizer:(id) theRecognizer;
// simulate the DFA using the static tables and predict an alternative
- (NSInteger) predict:(id<ANTLRCharStream>)anInput;
@@ -72,4 +68,15 @@
- (void)setRecognizer:(ANTLRBaseRecognizer *)aRecognizer;
- (NSInteger)length;

+@property const int *eot;
+@property const int *eof;
+@property const unichar *min;
+@property const unichar *max;
+@property const int *accept;
+@property const int *special;
+@property const int **transition;
+
+@property (retain, getter=getRecognizer,setter=setRecognizer:) ANTLRBaseRecognizer *recognizer;
+@property (assign, getter=getDecision,setter=setDecision:) NSInteger decisionNumber;
+@property (assign, getter=getLen,setter=setLen:) NSInteger len;
@end
diff --git a/runtime/ObjC/Framework/ANTLRDFA.m b/runtime/ObjC/Framework/ANTLRDFA.m
index efe4f94..48aba4c 100644
--- a/runtime/ObjC/Framework/ANTLRDFA.m
+++ b/runtime/ObjC/Framework/ANTLRDFA.m
@@ -121,10 +121,10 @@ NSInteger debug = 0;
}
if ( debug > 2 ) {
NSLog(@"no viable alt!\n");
-                NSLog(@"min[%d] = $d\n", s, min[s]);
-                NSLog(@"max[%d] = $d\n", s, min[s]);
-                NSLog(@"eot[%d] = $d\n", s, min[s]);
-                NSLog(@"eof[%d] = $d\n", s, min[s]);
+                NSLog(@"min[%d] = %d\n", s, min[s]);
+                NSLog(@"max[%d] = %d\n", s, min[s]);
+                NSLog(@"eot[%d] = %d\n", s, min[s]);
+                NSLog(@"eof[%d] = %d\n", s, min[s]);
for (NSInteger p = 0; p < self.len; p++) {
NSLog(@"%d ", transition[s][p]);
}
@@ -146,14 +146,14 @@ NSInteger debug = 0;
[recognizer.state setFailed:YES];
return;
}
-	ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:decisionNumber state:state stream:anInput];
+	ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:decisionNumber state:state stream:anInput];
[self error:nvae];
@throw nvae;
}

- (NSInteger) specialStateTransition:(NSInteger)state Stream:(id<ANTLRIntStream>)anInput
{
-    @throw [ANTLRNoViableAltException newANTLRNoViableAltException:-1 state:state stream:anInput];
+    @throw [ANTLRNoViableAltException newException:-1 state:state stream:anInput];
return -1;
}

@@ -189,7 +189,7 @@ NSInteger debug = 0;
for (int i=0; i < [encodedString length]; i+=2) {
size += [encodedString characterAtIndex:i];
}
-    NSMutableData *dp = [NSMutableData dataWithLength:size];
+    NSMutableData *dp = [[NSMutableData dataWithLength:size] retain];
short *data = (short *)[dp mutableBytes];
int di = 0;
for (int i=0; i < [encodedString length]; i+=2) {
@@ -211,8 +211,8 @@ NSInteger debug = 0;
for (int i=0; i < [encodedString length]; i+=2) {
size += [encodedString characterAtIndex:i];
}
-    NSMutableData *dp = [NSMutableData dataWithLength:size];
-    char *data = (short *)[dp mutableBytes];
+    NSMutableData *dp = [[NSMutableData dataWithLength:size] retain];
+    char *data = (char *)[dp mutableBytes];
int di = 0;
for (int i=0; i < [encodedString length]; i+=2) {
char n = [encodedString characterAtIndex:i];
@@ -255,4 +255,11 @@ NSInteger debug = 0;
return len;
}

+@synthesize eot;
+@synthesize eof;
+@synthesize min;
+@synthesize max;
+@synthesize accept;
+@synthesize special;
+@synthesize transition;
@end
diff --git a/runtime/ObjC/Framework/ANTLRDebugEventProxy.m b/runtime/ObjC/Framework/ANTLRDebugEventProxy.m
index 016e6cc..b3623bb 100644
--- a/runtime/ObjC/Framework/ANTLRDebugEventProxy.m
+++ b/runtime/ObjC/Framework/ANTLRDebugEventProxy.m
@@ -102,7 +102,7 @@ static unsigned lengthOfUTF8Ack = 0;
@try {
NSData *newLine = [debuggerFH readDataOfLength:lengthOfUTF8Ack];
response = [[NSString alloc] initWithData:newLine encoding:NSUTF8StringEncoding];
-		if (![response isEqualToString:@"ack\n"]) @throw [NSException exceptionWithName:@"ANTLRDebugEventProxy" Reason:@"illegal response from debugger" userInfo:nil];
+		if (![response isEqualToString:@"ack\n"]) @throw [NSException exceptionWithName:@"ANTLRDebugEventProxy" reason:@"illegal response from debugger" userInfo:nil];
}
@catch (NSException *e) {
NSLog(@"socket died or debugger misbehaved: %@ read <%@>", e, response);
diff --git a/runtime/ObjC/Framework/ANTLRDebugTreeAdaptor.m b/runtime/ObjC/Framework/ANTLRDebugTreeAdaptor.m
index 9431080..c076948 100644
--- a/runtime/ObjC/Framework/ANTLRDebugTreeAdaptor.m
+++ b/runtime/ObjC/Framework/ANTLRDebugTreeAdaptor.m
@@ -89,92 +89,92 @@

#pragma mark Construction

-- (id<ANTLRTree>) newANTLRTreeWithToken:(id<ANTLRToken>) payload
+- (id<ANTLRBaseTree>) newANTLRTreeWithToken:(id<ANTLRToken>) payload
{
-	id<ANTLRTree> newTree = [ANTLRTreeAdaptor newANTLRTreeWithToken:payload];
+	id<ANTLRBaseTree> newTree = [ANTLRCommonTree newTreeWithToken:payload];
[debugListener createNode:[treeAdaptor uniqueIdForTree:newTree] fromTokenAtIndex:[payload getTokenIndex]];
return newTree;
}

-- (id<ANTLRTree>) emptyTree
+- (id<ANTLRBaseTree>) emptyTree
{
-	id<ANTLRTree> newTree = [treeAdaptor newEmptyTree];
+	id<ANTLRBaseTree> newTree = [treeAdaptor newEmptyTree];
[debugListener createNilNode:[treeAdaptor uniqueIdForTree:newTree]];
return newTree;
}

/*	We don't have debug events for those:
- - (id) copyNode:(id<ANTLRTree>)aNode
+ - (id) copyNode:(id<ANTLRBaseTree>)aNode
{
}
-- (id) copyTree:(id<ANTLRTree>)aTree
+- (id) copyTree:(id<ANTLRBaseTree>)aTree
{
}
*/

-- (void) addChild:(id<ANTLRTree>)child toTree:(id<ANTLRTree>)aTree
+- (void) addChild:(id<ANTLRBaseTree>)child toTree:(id<ANTLRBaseTree>)aTree
{
[treeAdaptor addChild:child toTree:aTree];
[debugListener addChild:[treeAdaptor uniqueIdForTree:child] toTree:[self uniqueIdForTree:aTree]];
}

-- (id<ANTLRTree>) becomeRoot:(id<ANTLRTree>)newRoot old:(id<ANTLRTree>)oldRoot
+- (id<ANTLRBaseTree>) becomeRoot:(id<ANTLRBaseTree>)newRoot old:(id<ANTLRBaseTree>)oldRoot
{
-	id<ANTLRTree> newTree = [treeAdaptor becomeRoot:newRoot old:oldRoot];
+	id<ANTLRBaseTree> newTree = [treeAdaptor becomeRoot:newRoot old:oldRoot];
[debugListener becomeRoot:[treeAdaptor uniqueIdForTree:newTree] old:[self uniqueIdForTree:oldRoot]];
return newTree;
}

/* handle by forwardInvocation:
-- (NSUInteger) uniqueIdForTree:(id<ANTLRTree>)aNode
+- (NSUInteger) uniqueIdForTree:(id<ANTLRBaseTree>)aNode
{
}
*/

#pragma mark Rewrite Rules

- - (void) addTokenAsChild:(id<ANTLRToken>)child toTree:(id<ANTLRTree>)aTree
+ - (void) addTokenAsChild:(id<ANTLRToken>)child toTree:(id<ANTLRBaseTree>)aTree
{
-	id<ANTLRTree> newChild = [self newANTLRTreeWithToken:child];
+	id<ANTLRBaseTree> newChild = [self newANTLRTreeWithToken:child];
[self addChild:newChild toTree:aTree];
}

-- (id<ANTLRTree>) makeToken:(id<ANTLRToken>)newRoot parentOf:(id<ANTLRTree>)oldRoot
+- (id<ANTLRBaseTree>) makeToken:(id<ANTLRToken>)newRoot parentOf:(id<ANTLRBaseTree>)oldRoot
{
-	id<ANTLRTree> newNode = [self newANTLRTreeWithToken:newRoot];
+	id<ANTLRBaseTree> newNode = [self newANTLRTreeWithToken:newRoot];
return [self becomeRoot:newNode old:oldRoot];
}

-- (id<ANTLRTree>) newANTLRTreeWithTokenType:(NSInteger)tokenType
+- (id<ANTLRBaseTree>) newANTLRTreeWithTokenType:(NSInteger)tokenType
{
-	id<ANTLRTree> newTree = [treeAdaptor newANTLRTreeWithTokenType:tokenType];
+	id<ANTLRBaseTree> newTree = [treeAdaptor newANTLRTreeWithTokenType:tokenType];
[debugListener createNode:[treeAdaptor uniqueIdForTree:newTree] text:nil type:tokenType];
return newTree;
}

-- (id<ANTLRTree>) newANTLRTreeWithTokenType:(NSInteger)tokenType text:(NSString *)tokenText
+- (id<ANTLRBaseTree>) newANTLRTreeWithTokenType:(NSInteger)tokenType text:(NSString *)tokenText
{
-	id<ANTLRTree> newTree = [treeAdaptor newANTLRTreeWithTokenType:tokenType text:tokenText];
+	id<ANTLRBaseTree> newTree = [treeAdaptor newANTLRTreeWithTokenType:tokenType text:tokenText];
[debugListener createNode:[treeAdaptor uniqueIdForTree:newTree] text:tokenText type:tokenType];
return newTree;
}
-- (id<ANTLRTree>) newANTLRTreeWithToken:(id<ANTLRToken>)fromToken tokenType:(NSInteger)tokenType
+- (id<ANTLRBaseTree>) newANTLRTreeWithToken:(id<ANTLRToken>)fromToken tokenType:(NSInteger)tokenType
{
-	id<ANTLRTree> newTree = [treeAdaptor newANTLRTreeWithToken:fromToken tokenType:tokenType];
+	id<ANTLRBaseTree> newTree = [treeAdaptor newANTLRTreeWithToken:fromToken tokenType:tokenType];
[debugListener createNode:[treeAdaptor uniqueIdForTree:newTree] text:fromToken.text type:tokenType];
return newTree;
}

-- (id<ANTLRTree>) newANTLRTreeWithToken:(id<ANTLRToken>)fromToken tokenType:(NSInteger)tokenType text:(NSString *)tokenText
+- (id<ANTLRBaseTree>) newANTLRTreeWithToken:(id<ANTLRToken>)fromToken tokenType:(NSInteger)tokenType text:(NSString *)tokenText
{
-	id<ANTLRTree> newTree = [treeAdaptor newANTLRTreeWithToken:fromToken tokenType:tokenType text:tokenText];
+	id<ANTLRBaseTree> newTree = [treeAdaptor newANTLRTreeWithToken:fromToken tokenType:tokenType text:tokenText];
[debugListener createNode:[treeAdaptor uniqueIdForTree:newTree] text:tokenText type:tokenType];
return newTree;
}

-- (id<ANTLRTree>) newANTLRTreeWithToken:(id<ANTLRToken>)fromToken text:(NSString *)tokenText
+- (id<ANTLRBaseTree>) newANTLRTreeWithToken:(id<ANTLRToken>)fromToken text:(NSString *)tokenText
{
-	id<ANTLRTree> newTree = [treeAdaptor newANTLRTreeWithToken:fromToken text:tokenText];
+	id<ANTLRBaseTree> newTree = [treeAdaptor newANTLRTreeWithToken:fromToken text:tokenText];
[debugListener createNode:[treeAdaptor uniqueIdForTree:newTree] text:tokenText type:[fromToken getType]];
return newTree;
}
@@ -182,7 +182,7 @@
#pragma mark Content

/* handled by forwardInvocation:
-- (NSInteger) tokenTypeForNode:(id<ANTLRTree>)aNode
+- (NSInteger) tokenTypeForNode:(id<ANTLRBaseTree>)aNode
{
}

@@ -190,15 +190,15 @@
{
}

-- (NSString *) textForNode:(id<ANTLRTree>)aNode
+- (NSString *) textForNode:(id<ANTLRBaseTree>)aNode
{
}

-- (void) setText:(NSString *)tokenText forNode:(id<ANTLRTree>)aNode
+- (void) setText:(NSString *)tokenText forNode:(id<ANTLRBaseTree>)aNode
{
}
*/
-- (void) setBoundariesForTree:(id<ANTLRTree>)aTree fromToken:(id<ANTLRToken>)startToken toToken:(id<ANTLRToken>)stopToken
+- (void) setBoundariesForTree:(id<ANTLRBaseTree>)aTree fromToken:(id<ANTLRToken>)startToken toToken:(id<ANTLRToken>)stopToken
{
[treeAdaptor setBoundariesForTree:aTree fromToken:startToken toToken:stopToken];
if (aTree && startToken && stopToken) {
@@ -206,22 +206,22 @@
}
}
/* handled by forwardInvocation:
-- (NSInteger) tokenStartIndexForTree:(id<ANTLRTree>)aTree
+- (NSInteger) tokenStartIndexForTree:(id<ANTLRBaseTree>)aTree
{
}

-- (NSInteger) tokenStopIndexForTree:(id<ANTLRTree>)aTree
+- (NSInteger) tokenStopIndexForTree:(id<ANTLRBaseTree>)aTree
{
}
*/

#pragma mark Navigation / Tree Parsing
/* handled by forwardInvocation:
-- (id<ANTLRTree>) childForNode:(id<ANTLRTree>) aNode atIndex:(NSInteger) i
+- (id<ANTLRBaseTree>) childForNode:(id<ANTLRBaseTree>) aNode atIndex:(NSInteger) i
{
}

-- (NSInteger) childCountForTree:(id<ANTLRTree>) aTree
+- (NSInteger) childCountForTree:(id<ANTLRBaseTree>) aTree
{
}
*/
diff --git a/runtime/ObjC/Framework/ANTLRDebugTreeNodeStream.m b/runtime/ObjC/Framework/ANTLRDebugTreeNodeStream.m
index f53fb92..dd13bfb 100644
--- a/runtime/ObjC/Framework/ANTLRDebugTreeNodeStream.m
+++ b/runtime/ObjC/Framework/ANTLRDebugTreeNodeStream.m
@@ -123,7 +123,7 @@

- (NSInteger) LA:(NSUInteger) i
{
-	id<ANTLRTree> node = [self LT:1];
+	id<ANTLRBaseTree> node = [self LT:1];
return [node getType];
}

diff --git a/runtime/ObjC/Framework/ANTLRDoubleKeyMap.h b/runtime/ObjC/Framework/ANTLRDoubleKeyMap.h
index 641f6cb..7371675 100644
--- a/runtime/ObjC/Framework/ANTLRDoubleKeyMap.h
+++ b/runtime/ObjC/Framework/ANTLRDoubleKeyMap.h
@@ -19,4 +19,5 @@
- (NSArray *) allKeys1;
- (NSArray *) allKeys2:(id)k1;
- (NSMutableArray *) values;
+@property (retain) NSMutableDictionary *data;
@end
diff --git a/runtime/ObjC/Framework/ANTLRDoubleKeyMap.m b/runtime/ObjC/Framework/ANTLRDoubleKeyMap.m
index f44ef48..3e30411 100644
--- a/runtime/ObjC/Framework/ANTLRDoubleKeyMap.m
+++ b/runtime/ObjC/Framework/ANTLRDoubleKeyMap.m
@@ -4,7 +4,8 @@

- (id) init
{
-    if (self = [super init]) {
+    self = [super init];
+    if ( self  != nil ) {
data = [NSMutableDictionary dictionaryWithCapacity:30];
}
return self;
@@ -15,13 +16,13 @@
NSMutableDictionary *data2 = [data objectForKey:k1];
id prev = nil;
if (data2 == nil) {
-        data2 = [NSMutableDictionary dictionaryWithCapacity:30];
-        [data setObject:k1 forKey:data2];
+        data2 = [[NSMutableDictionary dictionaryWithCapacity:30] retain];
+        [data setObject:data2 forKey:k1];
}
else {
prev = [data2 objectForKey:k2];
}
-    [data2 setObject:k2 forKey:v];
+    [data2 setObject:v forKey:k2];
return prev;
}

@@ -92,4 +93,5 @@
[super dealloc];
}

+@synthesize data;
@end
diff --git a/runtime/ObjC/Framework/ANTLREarlyExitException.h b/runtime/ObjC/Framework/ANTLREarlyExitException.h
index 1a89bbb..07e840d 100644
--- a/runtime/ObjC/Framework/ANTLREarlyExitException.h
+++ b/runtime/ObjC/Framework/ANTLREarlyExitException.h
@@ -31,7 +31,9 @@
int decisionNumber;
}

-+ (ANTLREarlyExitException *) exceptionWithStream:(id<ANTLRIntStream>) anInputStream decisionNumber:(NSInteger) aDecisionNumber;
++ (ANTLREarlyExitException *) newException:(id<ANTLRIntStream>)anInputStream decisionNumber:(NSInteger)aDecisionNumber;
- (id) initWithStream:(id<ANTLRIntStream>)anInputStream decisionNumber:(NSInteger) aDecisionNumber;

+@property int decisionNumber;
@end
+
diff --git a/runtime/ObjC/Framework/ANTLREarlyExitException.m b/runtime/ObjC/Framework/ANTLREarlyExitException.m
index 60de2d6..81ffb26 100644
--- a/runtime/ObjC/Framework/ANTLREarlyExitException.m
+++ b/runtime/ObjC/Framework/ANTLREarlyExitException.m
@@ -29,7 +29,7 @@

@implementation ANTLREarlyExitException

-+ (ANTLREarlyExitException *) exceptionWithStream:(id<ANTLRIntStream>) anInputStream decisionNumber:(NSInteger) aDecisionNumber
++ (ANTLREarlyExitException *) newException:(id<ANTLRIntStream>) anInputStream decisionNumber:(NSInteger) aDecisionNumber
{
return [[self alloc] initWithStream:anInputStream decisionNumber:aDecisionNumber];
}
@@ -49,4 +49,6 @@
return desc;
}

+@synthesize decisionNumber;
@end
+
diff --git a/runtime/ObjC/Framework/ANTLRError.h b/runtime/ObjC/Framework/ANTLRError.h
index f2657af..9a15702 100644
--- a/runtime/ObjC/Framework/ANTLRError.h
+++ b/runtime/ObjC/Framework/ANTLRError.h
@@ -33,23 +33,3 @@
#import <Cocoa/Cocoa.h>

#define ANTLRErrorDomain @"ANTLRError"
-
-#define ANTLRIllegalArgumentException @"ANTLRIllegalArgumentException"
-#define ANTLRIllegalStateException @"IllegalStateException"
-//#define ANTLRRuntimeException @"RuntimeException"
-//#define ANTLRNoSuchMethodException @"NoSuchMethodException"
-//#define ANTLRNoSuchElementException @"NoSuchElementException"
-//#define ANTLRUnsupportedOperationException @"UnsupportedOperationException"
-
-
-/*typedef enum
-{
-	ANTLRIllegalState = 1,
-	ANTLRIllegalArgument = 2,
-	ANTLRRecognitionError = 3,
-	ANTLRMissingTokenError = 4,
-	ANTLRUnwantedTokenError = 5,
-	ANTLRMismatechedTokenError = 6,
-	ANTLRNoViableAltError = 7
-
-} ANTLRErrorCode;*/
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/ANTLRFailedPredicateException.h b/runtime/ObjC/Framework/ANTLRFailedPredicateException.h
index 9788cba..afbb653 100644
--- a/runtime/ObjC/Framework/ANTLRFailedPredicateException.h
+++ b/runtime/ObjC/Framework/ANTLRFailedPredicateException.h
@@ -34,10 +34,10 @@
NSString *ruleName;
}

-@property (retain, getter=getPredicate, setter=setPredicate:) NSString *predicate;
-@property (retain, getter=getRuleName, setter=setRuleName:) NSString *ruleName;
+@property (retain) NSString *predicate;
+@property (retain) NSString *ruleName;

-+ (ANTLRFailedPredicateException *) exceptionWithRuleName:(NSString *)theRuleName predicate:(NSString *)thePredicate stream:(id<ANTLRIntStream>)theStream;
++ (ANTLRFailedPredicateException *) newException:(NSString *)theRuleName predicate:(NSString *)thePredicate stream:(id<ANTLRIntStream>)theStream;
- (ANTLRFailedPredicateException *) initWithRuleName:(NSString *)theRuleName predicate:(NSString *)thePredicate stream:(id<ANTLRIntStream>)theStream;

#ifdef DONTUSEYET
diff --git a/runtime/ObjC/Framework/ANTLRFailedPredicateException.m b/runtime/ObjC/Framework/ANTLRFailedPredicateException.m
index fd549c1..cadba77 100644
--- a/runtime/ObjC/Framework/ANTLRFailedPredicateException.m
+++ b/runtime/ObjC/Framework/ANTLRFailedPredicateException.m
@@ -29,7 +29,7 @@

@implementation ANTLRFailedPredicateException

-+ (ANTLRFailedPredicateException *) exceptionWithRuleName:(NSString *)theRuleName predicate:(NSString *)thePredicate stream:(id<ANTLRIntStream>)theStream
++ (ANTLRFailedPredicateException *) newException:(NSString *)theRuleName predicate:(NSString *)thePredicate stream:(id<ANTLRIntStream>)theStream
{
return [[ANTLRFailedPredicateException alloc] initWithRuleName:theRuleName predicate:thePredicate stream:theStream];
}
diff --git a/runtime/ObjC/Framework/ANTLRFastQueue.h b/runtime/ObjC/Framework/ANTLRFastQueue.h
index 425d763..81790b8 100644
--- a/runtime/ObjC/Framework/ANTLRFastQueue.h
+++ b/runtime/ObjC/Framework/ANTLRFastQueue.h
@@ -36,14 +36,14 @@
{
//	NSAutoreleasePool *pool;
NSMutableArray *data;
-	NSInteger p;
-    NSInteger range;
+	NSUInteger p;
+    NSUInteger range;
}

//@property (retain, getter=getPool, setter=setPool:) NSAutoreleasePool *pool;
-@property (retain, getter=getData, setter=setData:) NSMutableArray *data;
-@property (assign, getter=getP, setter=setP:) NSInteger p;
-@property (assign, getter=getRange, setter=setRange:) NSInteger range;
+@property (retain) NSMutableArray *data;
+@property (assign) NSUInteger p;
+@property (assign) NSUInteger range;

+ (id) newANTLRFastQueue;

@@ -54,19 +54,15 @@
- (void) reset;
- (id) remove;
- (void) addObject:(id) o;
-- (NSInteger) count;
-- (NSInteger) size;
-- (NSInteger) range;
+- (NSUInteger) count;
+- (NSUInteger) size;
+- (NSUInteger) range;
- (id) head;
-- (id) objectAtIndex:(NSInteger) i;
+- (id) objectAtIndex:(NSUInteger) i;
- (void) clear;
- (NSString *) toString;
- (NSString *) description;
//- (NSAutoreleasePool *) getPool;
//- (void) setPool:(NSAutoreleasePool *)aPool;
-- (NSMutableArray *) getData;
-- (void) setData:(NSMutableArray *)myData;
-- (NSInteger) getP;
-- (void) setP:(NSInteger)anInt;

@end
diff --git a/runtime/ObjC/Framework/ANTLRFastQueue.m b/runtime/ObjC/Framework/ANTLRFastQueue.m
index 9c669ee..8776a2b 100644
--- a/runtime/ObjC/Framework/ANTLRFastQueue.m
+++ b/runtime/ObjC/Framework/ANTLRFastQueue.m
@@ -42,7 +42,7 @@

+ (id) newANTLRFastQueue
{
-    return [[ANTLRFastQueue alloc] init];
+    return [[[ANTLRFastQueue alloc] init] retain];
}

- (id) init
@@ -103,17 +103,17 @@
[data addObject:o];
}

-- (NSInteger) count
+- (NSUInteger) count
{
return [data count];
}

-- (NSInteger) size
+- (NSUInteger) size
{
return [data count] - p;
}

-- (NSInteger) range
+- (NSUInteger) range
{
return range;
}
@@ -123,16 +123,16 @@
return [self objectAtIndex:0];
}

-- (id) objectAtIndex:(NSInteger) i
+- (id) objectAtIndex:(NSUInteger) i
{
-    NSInteger absIndex;
+    NSUInteger absIndex;

absIndex = p + i;
if (absIndex >= [data count]) {
-		@throw [ANTLRRuntimeException newANTLRNoSuchElementException:[NSString stringWithFormat:@"queue index %d > last index %d", absIndex, [data count]-1]];
+		@throw [ANTLRNoSuchElementException newException:[NSString stringWithFormat:@"queue index %d > last index %d", absIndex, [data count]-1]];
}
if (absIndex < 0) {
-	    @throw [ANTLRRuntimeException newANTLRNoSuchElementException:[NSString stringWithFormat:@"queue index %d < 0", absIndex]];
+	    @throw [ANTLRNoSuchElementException newException:[NSString stringWithFormat:@"queue index %d < 0", absIndex]];
}
if ( absIndex > range ) range = absIndex;
return [data objectAtIndex:absIndex];
@@ -168,25 +168,4 @@
}
#endif

-- (NSMutableArray *)getData
-{
-    return data;
-}
-
-- (void)setData:(NSMutableArray *)myData
-{
-    data = myData;
-}
-
-
-- (NSInteger) getP
-{
-    return p;
-}
-
-- (void) setP:(NSInteger) anInt
-{
-    p = anInt;
-}
-
@end
diff --git a/runtime/ObjC/Framework/ANTLRHashMap.h b/runtime/ObjC/Framework/ANTLRHashMap.h
index 04aca7b..5631342 100644
--- a/runtime/ObjC/Framework/ANTLRHashMap.h
+++ b/runtime/ObjC/Framework/ANTLRHashMap.h
@@ -37,7 +37,6 @@
#define HBUFSIZE      0x2000

@interface ANTLRHashMap : ANTLRLinkBase {
-	//	ANTLRHashMap *fNext;
//    TStringPool *fPool;
NSInteger Scope;
NSInteger LastHash;
@@ -46,11 +45,6 @@
NSInteger mode;
}

-//@property (copy) ANTLRHashMap *fNext;
-//@property (copy) TStringPool *fPool;
-@property (getter=getScope, setter=setScope:) NSInteger Scope;
-@property (getter=getLastHash, setter=setLastHash:) NSInteger LastHash;
-
// Contruction/Destruction
+ (id)newANTLRHashMap;
+ (id)newANTLRHashMapWithLen:(NSInteger)aBuffSize;
@@ -99,4 +93,11 @@
- (NSEnumerator *)objectEnumerator;
- (BOOL) hasNext;
- (ANTLRMapElement *)nextObject;
+
+//@property (copy) TStringPool *fPool;
+@property (getter=getScope, setter=setScope:) NSInteger Scope;
+@property (getter=getLastHash, setter=setLastHash:) NSInteger LastHash;
+
+@property NSInteger BuffSize;
+@property (getter=getMode,setter=setMode:) NSInteger mode;
@end
diff --git a/runtime/ObjC/Framework/ANTLRHashMap.m b/runtime/ObjC/Framework/ANTLRHashMap.m
index a23426b..7e07008 100644
--- a/runtime/ObjC/Framework/ANTLRHashMap.m
+++ b/runtime/ObjC/Framework/ANTLRHashMap.m
@@ -44,18 +44,12 @@ static NSInteger itIndex;

+(id)newANTLRHashMap
{
-    ANTLRHashMap *aNewANTLRHashMap;
-
-    aNewANTLRHashMap = [[ANTLRHashMap alloc] init];
-	return( aNewANTLRHashMap );
+    return [[[ANTLRHashMap alloc] init] retain];
}

+(id)newANTLRHashMapWithLen:(NSInteger)aBuffSize
{
-    ANTLRHashMap *aNewANTLRHashMap;
-
-    aNewANTLRHashMap = [[ANTLRHashMap alloc] initWithLen:aBuffSize];
-	return( aNewANTLRHashMap );
+    return [[[ANTLRHashMap alloc] initWithLen:aBuffSize] retain];
}

-(id)init
@@ -518,4 +512,5 @@ static NSInteger itIndex;
return nil;
}

+@synthesize BuffSize;
@end
diff --git a/runtime/ObjC/Framework/ANTLRHashRule.h b/runtime/ObjC/Framework/ANTLRHashRule.h
index f1558e8..75ef581 100644
--- a/runtime/ObjC/Framework/ANTLRHashRule.h
+++ b/runtime/ObjC/Framework/ANTLRHashRule.h
@@ -37,15 +37,11 @@
#define HBUFSIZE      0x2000

@interface ANTLRHashRule : ANTLRPtrBuffer {
-	//	ANTLRHashRule *fNext;
//    TStringPool *fPool;
NSInteger LastHash;
NSInteger mode;
}

-//@property (copy) ANTLRHashRule *fNext;
-@property (getter=getLastHash, setter=setLastHash:) NSInteger LastHash;
-
// Contruction/Destruction
+ (id)newANTLRHashRule;
+ (id)newANTLRHashRuleWithLen:(NSInteger)aBuffSize;
@@ -69,4 +65,6 @@
- (void) insertObject:(ANTLRRuleMemo *)aRule atIndex:(NSInteger)Index;
- (ANTLRRuleMemo *) objectAtIndex:(NSInteger)Index;

+@property (getter=getLastHash, setter=setLastHash:) NSInteger LastHash;
+@property (getter=getMode,setter=setMode:) NSInteger mode;
@end
diff --git a/runtime/ObjC/Framework/ANTLRHashRule.m b/runtime/ObjC/Framework/ANTLRHashRule.m
index 93ce3a1..6919045 100644
--- a/runtime/ObjC/Framework/ANTLRHashRule.m
+++ b/runtime/ObjC/Framework/ANTLRHashRule.m
@@ -42,24 +42,17 @@

+(id)newANTLRHashRule
{
-    ANTLRHashRule *aNewANTLRHashRule;
-
-    aNewANTLRHashRule = [[ANTLRHashRule alloc] init];
-	return( aNewANTLRHashRule );
+    return [[[ANTLRHashRule alloc] init] retain];
}

+(id)newANTLRHashRuleWithLen:(NSInteger)aBuffSize
{
-    ANTLRHashRule *aNewANTLRHashRule;
-
-    aNewANTLRHashRule = [[ANTLRHashRule alloc] initWithLen:aBuffSize];
-	return( aNewANTLRHashRule );
+    return [[[ANTLRHashRule alloc] initWithLen:aBuffSize] retain];
}

-(id)init
{
if ((self = [super initWithLen:HASHSIZE]) != nil) {
-		fNext = nil;
}
return( self );
}
@@ -67,7 +60,6 @@
-(id)initWithLen:(NSInteger)aBuffSize
{
if ((self = [super initWithLen:aBuffSize]) != nil) {
-		fNext = nil;
mode = 0;
}
return( self );
@@ -83,8 +75,10 @@
tmp = ptrBuffer[Index];
while ( tmp && tmp != ptrBuffer[Index] ) {
rtmp = tmp;
-                // tmp = [tmp getfNext];
-                tmp = (ANTLRRuleMemo *)tmp.fNext;
+                if ([tmp isKindOfClass:[ANTLRLinkBase class]])
+                    tmp = (ANTLRRuleMemo *)tmp.fNext;
+                else
+                    tmp = nil;
[rtmp dealloc];
}
}
@@ -135,7 +129,10 @@
tmp = ptrBuffer[Index];
while ( tmp && tmp != ptrBuffer[Index ] ) {
rtmp = tmp;
-                tmp = tmp.fNext;
+                if ([tmp isKindOfClass:[ANTLRLinkBase class]])
+                    tmp = (ANTLRRuleMemo *)tmp.fNext;
+                else
+                    tmp = nil;
[rtmp dealloc];
}
}
diff --git a/runtime/ObjC/Framework/ANTLRInputStream.m b/runtime/ObjC/Framework/ANTLRInputStream.m
index 245c5b6..3d041c5 100644
--- a/runtime/ObjC/Framework/ANTLRInputStream.m
+++ b/runtime/ObjC/Framework/ANTLRInputStream.m
@@ -44,8 +44,7 @@

- (id) init
{
-    if (self = [super init]) {
-    }
+    self = [super init];
return self;
}

@@ -54,7 +53,8 @@
readBufferSize:(NSInteger)theRBSize
encoding:(NSStringEncoding)theEncoding
{
-    if ( self = [super initWithReader:anInput size:theSize readBufferSize:theRBSize] ) {
+    ;self = [super initWithReader:anInput size:theSize readBufferSize:theRBSize];
+    if ( self != nil ) {
//[self load:theSize readBufferSize:theRBSize];
}
return self;
diff --git a/runtime/ObjC/Framework/ANTLRIntArray.h b/runtime/ObjC/Framework/ANTLRIntArray.h
index a41a14b..d1c872b 100644
--- a/runtime/ObjC/Framework/ANTLRIntArray.h
+++ b/runtime/ObjC/Framework/ANTLRIntArray.h
@@ -34,14 +34,14 @@

@interface ANTLRIntArray : ANTLRPtrBuffer
{
-    NSInteger *ip;
+    NSUInteger *ip;
}

+ (ANTLRIntArray *)newArray;
-+ (ANTLRIntArray *)newArrayWithLen:(NSInteger)aLen;
++ (ANTLRIntArray *)newArrayWithLen:(NSUInteger)aLen;

- (id) init;
-- (id) initWithLen:(NSInteger)aLen;
+- (id) initWithLen:(NSUInteger)aLen;

- (void) dealloc;

@@ -50,13 +50,13 @@
- (void) addInteger:(NSInteger) v;
- (void) push:(NSInteger) v;
- (NSInteger) pop;
-- (NSInteger) integerAtIndex:(NSInteger) i;
-- (void) insertInteger:(NSInteger)anInteger AtIndex:(NSInteger) idx;
-- (NSInteger) size;
+- (NSInteger) integerAtIndex:(NSUInteger) i;
+- (void) insertInteger:(NSInteger)anInteger AtIndex:(NSUInteger) idx;
- (void) reset;

-- (NSInteger) count;
-- (NSInteger) size;
-- (void) ensureCapacity:(NSInteger) index;
+- (NSUInteger) count;
+- (NSUInteger) size;
+- (void) ensureCapacity:(NSUInteger) index;

+@property NSUInteger *ip;
@end
diff --git a/runtime/ObjC/Framework/ANTLRIntArray.m b/runtime/ObjC/Framework/ANTLRIntArray.m
index 6f49587..f338ea7 100644
--- a/runtime/ObjC/Framework/ANTLRIntArray.m
+++ b/runtime/ObjC/Framework/ANTLRIntArray.m
@@ -35,26 +35,26 @@

+ (ANTLRIntArray *)newArray
{
-    return [[ANTLRIntArray alloc] init];
+    return [[[ANTLRIntArray alloc] init] retain];
}

-+ (ANTLRIntArray *)newArrayWithLen:(NSInteger)aLen
++ (ANTLRIntArray *)newArrayWithLen:(NSUInteger)aLen
{
-    return [[ANTLRIntArray alloc] initWithLen:aLen];
+    return [[[ANTLRIntArray alloc] initWithLen:aLen] retain];
}

-(id) init
{
if ((self = [super initWithLen:ANTLR_INT_ARRAY_INITIAL_SIZE]) != nil) {
-        ip = (NSInteger *)ptrBuffer;
+        ip = (NSUInteger *)ptrBuffer;
}
return self;
}

--(id) initWithLen:(NSInteger)aLen
+-(id) initWithLen:(NSUInteger)aLen
{
if ((self = [super initWithLen:aLen]) != nil) {
-        ip = (NSInteger *)ptrBuffer;
+        ip = (NSUInteger *)ptrBuffer;
}
return self;
}
@@ -72,21 +72,21 @@
return copy;
}

-- (NSInteger)count
+- (NSUInteger)count
{
return ptr;
}

// FIXME: Java runtime returns p, I'm not so sure it's right so have added p + 1 to show true size!
--(NSInteger) size
+-(NSUInteger) size
{
-	return (ptr * sizeof(NSInteger));
+	return (ptr * sizeof(NSUInteger));
}

-(void) addInteger:(NSInteger) v
{
[self ensureCapacity:ptr];
-	ip[ptr++] = (id) v;
+	ip[ptr++] = (NSInteger) v;
}

-(void) push:(NSInteger) v
@@ -100,7 +100,7 @@
return v;
}

--(NSInteger) integerAtIndex:(NSInteger) i
+-(NSInteger) integerAtIndex:(NSUInteger) i
{
if (i >= BuffSize) {
return (NSInteger)-1;
@@ -108,31 +108,33 @@
return (NSInteger) ip[i];
}

--(void) insertInteger:(NSInteger)anInteger AtIndex:(NSInteger)idx
+-(void) insertInteger:(NSInteger)anInteger AtIndex:(NSUInteger)idx
{
if ( idx >= BuffSize ) {
[self ensureCapacity:idx];
}
-    ip[idx] = (id) anInteger;
+    ip[idx] = (NSInteger) anInteger;
}
-(void) reset
{
ptr = 0;
}

-- (void) ensureCapacity:(NSInteger) index
+- (void) ensureCapacity:(NSUInteger) anIndex
{
-	if ((index * sizeof(NSInteger)) >= [buffer length])
+	if ((anIndex * sizeof(NSUInteger)) >= [buffer length])
{
-		NSInteger newSize = ([buffer length] / sizeof(NSInteger)) * 2;
-		if (index > newSize) {
-			newSize = index + 1;
+		NSUInteger newSize = ([buffer length] / sizeof(NSUInteger)) * 2;
+		if (anIndex > newSize) {
+			newSize = anIndex + 1;
}
BuffSize = newSize;
-		[buffer setLength:(BuffSize * sizeof(NSInteger))];
-        ip = (NSInteger *)ptrBuffer = [buffer mutableBytes];
+		[buffer setLength:(BuffSize * sizeof(NSUInteger))];
+        ptrBuffer = (id *)[buffer mutableBytes];
+        ip = (NSUInteger *)ptrBuffer;
}
}

+@synthesize ip;
@end

diff --git a/runtime/ObjC/Framework/ANTLRLexer.h b/runtime/ObjC/Framework/ANTLRLexer.h
index 5cfb36f..7576735 100644
--- a/runtime/ObjC/Framework/ANTLRLexer.h
+++ b/runtime/ObjC/Framework/ANTLRLexer.h
@@ -42,7 +42,7 @@
}

@property (retain, getter=getInput, setter=setInput:) id<ANTLRCharStream> input;
-@property (getter=getRuleNestingLevel, setter=setRuleNestingLevel) NSUInteger ruleNestingLevel;
+@property (getter=getRuleNestingLevel, setter=setRuleNestingLevel:) NSUInteger ruleNestingLevel;

#pragma mark Initializer
- (id) initWithCharStream:(id<ANTLRCharStream>) anInput;
diff --git a/runtime/ObjC/Framework/ANTLRLexer.m b/runtime/ObjC/Framework/ANTLRLexer.m
index ba86f62..62dc685 100644
--- a/runtime/ObjC/Framework/ANTLRLexer.m
+++ b/runtime/ObjC/Framework/ANTLRLexer.m
@@ -222,7 +222,7 @@
state.failed = YES;
return;
}
-			ANTLRMismatchedTokenException *mte = [ANTLRMismatchedTokenException newANTLRMismatchedTokenExceptionChar:[aString characterAtIndex:i] Stream:input];
+			ANTLRMismatchedTokenException *mte = [ANTLRMismatchedTokenException newExceptionChar:[aString characterAtIndex:i] Stream:input];
[self recover:mte];
@throw mte;
}
@@ -246,7 +246,7 @@
state.failed = YES;
return;
}
-		ANTLRMismatchedTokenException  *mte = [ANTLRMismatchedTokenException newANTLRMismatchedTokenExceptionChar:aChar Stream:input];
+		ANTLRMismatchedTokenException  *mte = [ANTLRMismatchedTokenException newExceptionChar:aChar Stream:input];
[self recover:mte];
@throw mte;
}
@@ -263,7 +263,7 @@
return;
}
ANTLRMismatchedRangeException  *mre = [ANTLRMismatchedRangeException
-					exceptionWithRange:NSMakeRange((NSUInteger)fromChar,(NSUInteger)toChar)
+					newException:NSMakeRange((NSUInteger)fromChar,(NSUInteger)toChar)
stream:input];
[self recover:mre];
@throw mre;
diff --git a/runtime/ObjC/Framework/ANTLRLexerRuleReturnScope.h b/runtime/ObjC/Framework/ANTLRLexerRuleReturnScope.h
index 18ae374..27b8abc 100644
--- a/runtime/ObjC/Framework/ANTLRLexerRuleReturnScope.h
+++ b/runtime/ObjC/Framework/ANTLRLexerRuleReturnScope.h
@@ -27,8 +27,8 @@
#import <Cocoa/Cocoa.h>

@interface ANTLRLexerRuleReturnScope : NSObject {
-	int startToken;
-	int stopToken;
+	NSInteger start;
+	NSInteger stopToken;
}

- (NSInteger) getStart;
@@ -37,6 +37,7 @@
- (NSInteger) getStop;
- (void) setStop: (NSInteger) aStop;

-
+@property (assign, getter=getStart, setter=setStart:) NSInteger start;
+@property (getter=getStop,setter=setStop:) NSInteger stopToken;

@end
diff --git a/runtime/ObjC/Framework/ANTLRLexerState.m b/runtime/ObjC/Framework/ANTLRLexerState.m
index d627ce8..33ed2cb 100644
--- a/runtime/ObjC/Framework/ANTLRLexerState.m
+++ b/runtime/ObjC/Framework/ANTLRLexerState.m
@@ -40,7 +40,6 @@

- (void) reset
{
-	[super reset];
[self setToken:nil];
type = 0;
channel = 0;
@@ -61,6 +60,7 @@
{
return token;
}
+
- (void) setToken:(id<ANTLRToken>) theToken
{
if (theToken != token) {
@@ -70,7 +70,7 @@
}


-- (unsigned int) getType
+- (unsigned int) getTokenType
{
return type;
}
@@ -80,7 +80,7 @@
type = theTokenType;
}

-- (unsigned int) channel
+- (unsigned int) getChannel
{
return channel;
}
@@ -90,7 +90,7 @@
channel = theChannel;
}

-- (unsigned int) tokenStartLine
+- (unsigned int) getTokenStartLine
{
return tokenStartLine;
}
@@ -100,7 +100,7 @@
tokenStartLine = theTokenStartLine;
}

-- (unsigned int) tokenCharPositionInLine
+- (unsigned int) getTokenCharPositionInLine
{
return tokenStartCharPositionInLine;
}
@@ -110,7 +110,7 @@
tokenStartCharPositionInLine = theCharPosition;
}

-- (int) tokenStartCharIndex
+- (int) getTokenStartCharIndex
{
return tokenStartCharIndex;
}
@@ -120,7 +120,7 @@
tokenStartCharIndex = theTokenStartCharIndex;
}

-- (NSString *) text
+- (NSString *) getText
{
return text;
}
diff --git a/runtime/ObjC/Framework/ANTLRLinkBase.h b/runtime/ObjC/Framework/ANTLRLinkBase.h
index 21019e6..856791f 100644
--- a/runtime/ObjC/Framework/ANTLRLinkBase.h
+++ b/runtime/ObjC/Framework/ANTLRLinkBase.h
@@ -46,6 +46,8 @@
- (id<ANTLRLinkList>)getfPrev;
- (void) setFPrev:(id<ANTLRLinkList>)pp;

+@property (retain) id<ANTLRLinkList> fPrev;
+@property (retain) id<ANTLRLinkList> fNext;
@end

@interface ANTLRLinkBase : NSObject <ANTLRLinkList> {
@@ -53,8 +55,8 @@
id<ANTLRLinkList> fNext;
}

-@property (retain, getter=getfPrev, setter=setFPrev:) id<ANTLRLinkList> fPrev;
-@property (retain, getter=getfNext, setter=setFNext:) id<ANTLRLinkList> fNext;
+@property (retain) id<ANTLRLinkList> fPrev;
+@property (retain) id<ANTLRLinkList> fNext;

+ (id<ANTLRLinkList>)newANTLRLinkBase;
+ (id<ANTLRLinkList>)newANTLRLinkBase:(id<ANTLRLinkList>)np Prev:(id<ANTLRLinkList>)pp;
@@ -68,7 +70,7 @@
- (id<ANTLRLinkList>)insert:(id<ANTLRLinkList>)node;

- (id<ANTLRLinkList>)getfNext;
-- (void)setFNext:(id<ANTLRLinkList>) np;
+- (void)setfNext:(id<ANTLRLinkList>) np;
- (id<ANTLRLinkList>)getfPrev;
-- (void)setFPrev:(id<ANTLRLinkList>) pp;
+- (void)setfPrev:(id<ANTLRLinkList>) pp;
@end
diff --git a/runtime/ObjC/Framework/ANTLRLinkBase.m b/runtime/ObjC/Framework/ANTLRLinkBase.m
index 9698fc1..01b9d7b 100644
--- a/runtime/ObjC/Framework/ANTLRLinkBase.m
+++ b/runtime/ObjC/Framework/ANTLRLinkBase.m
@@ -75,7 +75,7 @@
{
ANTLRLinkBase *copy;

-    copy = [[self class] alloc];
+    copy = [[self class] allocWithZone:aZone];
copy.fPrev = fPrev;
copy.fNext = fNext;
return( copy );
@@ -85,10 +85,11 @@

-(id<ANTLRLinkList>)append:(id<ANTLRLinkList>)node
{
-	node.fNext = (id<ANTLRLinkList>)self;
-	node.fPrev = (id<ANTLRLinkList>)self.fPrev;
-	self.fPrev = node;
-	((id<ANTLRLinkList>)self.fPrev).fNext = node;
+	node.fPrev = (id<ANTLRLinkList>)self;
+	node.fNext = (id<ANTLRLinkList>)self.fNext;
+	if (node.fNext != nil)
+        node.fNext.fPrev = node;
+    self.fNext = node;
return( node );
}

@@ -96,7 +97,9 @@
{
node.fNext = self;
node.fPrev = self.fPrev;
-	if ( self.fPrev != nil ) self.fPrev.fNext = node;
+    if (node.fPrev != nil)
+        node.fPrev.fNext = node;
+	self.fPrev = node;
return( node );
}

@@ -105,7 +108,7 @@
return(fNext);
}

--(void)setFNext:(id<ANTLRLinkList>)np
+-(void)setfNext:(id<ANTLRLinkList>)np
{
fNext = np;
}
@@ -115,7 +118,7 @@
return(fPrev);
}

--(void)setFPrev:(id<ANTLRLinkList>)pp
+-(void)setfPrev:(id<ANTLRLinkList>)pp
{
fPrev = pp;
}
diff --git a/runtime/ObjC/Framework/ANTLRLookaheadStream.h b/runtime/ObjC/Framework/ANTLRLookaheadStream.h
index 7c33764..da7430d 100644
--- a/runtime/ObjC/Framework/ANTLRLookaheadStream.h
+++ b/runtime/ObjC/Framework/ANTLRLookaheadStream.h
@@ -49,7 +49,7 @@
@property (assign, getter=getEofElementIndex, setter=setEofElementIndex:) NSInteger eofElementIndex;
@property (assign, getter=getLastMarker, setter=setLastMarker:) NSInteger lastMarker;
@property (assign, getter=getMarkDepth, setter=setMarkDepth:) NSInteger markDepth;
-@property (assign, getter=getPrevElement, setter=setPrevElement:) id prevElement;
+@property (retain) id prevElement;

- (id) initWithEOF:(id) o;
- (id) nextElement;
diff --git a/runtime/ObjC/Framework/ANTLRLookaheadStream.m b/runtime/ObjC/Framework/ANTLRLookaheadStream.m
index cfbb87b..2f7dd5c 100644
--- a/runtime/ObjC/Framework/ANTLRLookaheadStream.m
+++ b/runtime/ObjC/Framework/ANTLRLookaheadStream.m
@@ -33,6 +33,7 @@
#import "ANTLRError.h"
#import "ANTLRRecognitionException.h"
#import "ANTLRCommonToken.h"
+#import "ANTLRRuntimeException.h"

@implementation ANTLRLookaheadStream

@@ -40,6 +41,7 @@
@synthesize eofElementIndex;
@synthesize lastMarker;
@synthesize markDepth;
+@synthesize prevElement;

-(id) init
{
@@ -116,7 +118,7 @@
}
}

--(NSInteger) count
+-(NSUInteger) count
{
@throw [NSException exceptionWithName:@"ANTLRUnsupportedOperationException" reason:@"Streams have no defined size" userInfo:nil];
}
@@ -141,7 +143,7 @@
if (k == 1) {
return prevElement;
}
-	@throw [ANTLRRuntimeException newANTLRNoSuchElementException:[NSString stringWithString:@"can't look backwards more than one token in this stream"]];
+	@throw [ANTLRNoSuchElementException newException:@"can't look backwards more than one token in this stream"];
}

-(id) getCurrentSymbol
@@ -184,9 +186,9 @@
//    if (lastMarker == 0) [self reset];
}

--(void) seek:(NSInteger) index
+-(void) seek:(NSInteger) anIndex
{
-	p = index;
+	p = anIndex;
}

- (id) getEof
diff --git a/runtime/ObjC/Framework/ANTLRMap.m b/runtime/ObjC/Framework/ANTLRMap.m
index 241a9e6..e3f65c1 100644
--- a/runtime/ObjC/Framework/ANTLRMap.m
+++ b/runtime/ObjC/Framework/ANTLRMap.m
@@ -33,7 +33,7 @@
#define FAILURE (-1)

#import "ANTLRMap.h"
-#import "ANTLRTree.h"
+#import "ANTLRBaseTree.h"

/*
* Start of ANTLRMap
@@ -44,25 +44,20 @@

+(id)newANTLRMap
{
-    ANTLRMap *aNewANTLRMap;
-
-    aNewANTLRMap = [[ANTLRMap alloc] init];
-	return( aNewANTLRMap );
+    return [[ANTLRMap alloc] init];
}

+(id)newANTLRMapWithLen:(NSInteger)aBuffSize
{
-    ANTLRMap *aNewANTLRMap;
-
-    aNewANTLRMap = [[ANTLRMap alloc] initWithLen:aBuffSize];
-	return( aNewANTLRMap );
+    return [[ANTLRMap alloc] initWithLen:aBuffSize];
}

-(id)init
{
NSInteger idx;

-	if ((self = [super initWithLen:HASHSIZE]) != nil) {
+	self = [super initWithLen:HASHSIZE];
+    if ( self != nil ) {
fNext = nil;
for( idx = 0; idx < HASHSIZE; idx++ ) {
ptrBuffer[idx] = nil;
@@ -73,7 +68,8 @@

-(id)initWithLen:(NSInteger)aBuffSize
{
-	if ((self = [super initWithLen:aBuffSize]) != nil) {
+	self = [super initWithLen:aBuffSize];
+    if ( self != nil ) {
}
return( self );
}
@@ -153,7 +149,7 @@

for (int i = 0; i < BuffSize; i++) {
if ((anElement = ptrBuffer[i]) != nil) {
-            aSize =+ (NSInteger)[anElement size];
+            aSize += (NSInteger)[anElement size];
}
}
return aSize;
@@ -304,12 +300,12 @@
return( nil );              /*   not found      */
}

-- (NSInteger)getNode:(id<ANTLRTree>)aNode
+- (NSInteger)getNode:(id<ANTLRBaseTree>)aNode
{
ANTLRMapElement *np;
NSInteger idx;

-    idx = [(id<ANTLRTree>)aNode getType];
+    idx = [(id<ANTLRBaseTree>)aNode getType];
idx %= HASHSIZE;
np = ptrBuffer[idx];
return( [(NSNumber *)np.index integerValue] );
diff --git a/runtime/ObjC/Framework/ANTLRMismatchedNotSetException.h b/runtime/ObjC/Framework/ANTLRMismatchedNotSetException.h
index 57391d5..71a4f23 100644
--- a/runtime/ObjC/Framework/ANTLRMismatchedNotSetException.h
+++ b/runtime/ObjC/Framework/ANTLRMismatchedNotSetException.h
@@ -37,10 +37,10 @@
{
ANTLRBitSet *expecting;
}
-@property (retain, getter=getExpecting, setter=setExpecting) ANTLRBitSet *expecting;
+@property (retain, getter=getExpecting, setter=setExpecting:) ANTLRBitSet *expecting;

-- (ANTLRMismatchedNotSetException *)newANTLRMismatchedNotSetException;
-- (ANTLRMismatchedNotSetException *)newANTLRMismatchedNotSetException:(id<ANTLRIntStream>)anInput
+- (ANTLRMismatchedNotSetException *)newException;
+- (ANTLRMismatchedNotSetException *)newException:(id<ANTLRIntStream>)anInput
Follow:(ANTLRBitSet *)expecting;

- (id) init;
diff --git a/runtime/ObjC/Framework/ANTLRMismatchedNotSetException.m b/runtime/ObjC/Framework/ANTLRMismatchedNotSetException.m
index d86466f..3eaaeab 100644
--- a/runtime/ObjC/Framework/ANTLRMismatchedNotSetException.m
+++ b/runtime/ObjC/Framework/ANTLRMismatchedNotSetException.m
@@ -35,12 +35,12 @@

@synthesize expecting;

-- (ANTLRMismatchedNotSetException *)newANTLRMismatchedNotSetException
+- (ANTLRMismatchedNotSetException *)newException
{
return [[ANTLRMismatchedNotSetException alloc] init];
}

-- (ANTLRMismatchedNotSetException *)newANTLRMismatchedNotSetException:(id<ANTLRIntStream>)anInput
+- (ANTLRMismatchedNotSetException *)newException:(id<ANTLRIntStream>)anInput
Follow:(ANTLRBitSet *)expected
{
return [[ANTLRMismatchedNotSetException alloc] initWithStream:anInput Follow:(ANTLRBitSet *)expected];
diff --git a/runtime/ObjC/Framework/ANTLRMismatchedRangeException.h b/runtime/ObjC/Framework/ANTLRMismatchedRangeException.h
index abda3bb..b5eae7b 100644
--- a/runtime/ObjC/Framework/ANTLRMismatchedRangeException.h
+++ b/runtime/ObjC/Framework/ANTLRMismatchedRangeException.h
@@ -34,7 +34,7 @@
NSRange range;
}

-+ (id) exceptionWithRange:(NSRange) aRange stream:(id<ANTLRIntStream>) theInput;
++ (id) newException:(NSRange) aRange stream:(id<ANTLRIntStream>) theInput;
- (id) initWithRange:(NSRange) aRange stream:(id<ANTLRIntStream>) theInput;

@end
diff --git a/runtime/ObjC/Framework/ANTLRMismatchedRangeException.m b/runtime/ObjC/Framework/ANTLRMismatchedRangeException.m
index 77b873b..aecd96b 100644
--- a/runtime/ObjC/Framework/ANTLRMismatchedRangeException.m
+++ b/runtime/ObjC/Framework/ANTLRMismatchedRangeException.m
@@ -30,7 +30,7 @@

@implementation ANTLRMismatchedRangeException

-+ (id) exceptionWithRange:(NSRange) aRange stream:(id<ANTLRIntStream>) theInput
++ (id) newException:(NSRange) aRange stream:(id<ANTLRIntStream>) theInput
{
return [[ANTLRMismatchedRangeException alloc] initWithRange:aRange stream:theInput];
}
diff --git a/runtime/ObjC/Framework/ANTLRMismatchedSetException.h b/runtime/ObjC/Framework/ANTLRMismatchedSetException.h
index 3bd45fc..2f00697 100644
--- a/runtime/ObjC/Framework/ANTLRMismatchedSetException.h
+++ b/runtime/ObjC/Framework/ANTLRMismatchedSetException.h
@@ -34,7 +34,7 @@

@property (retain, getter=getExpecting, setter=setExpecting:) NSSet *expecting;

-+ (id) exceptionWithSet:(NSSet *) theExpectedSet stream:(id<ANTLRIntStream>) theStream;
++ (id) newException:(NSSet *) theExpectedSet stream:(id<ANTLRIntStream>) theStream;
- (id) initWithSet:(NSSet *) theExpectedSet stream:(id<ANTLRIntStream>) theStream;

- (NSSet *) getExpecting;
diff --git a/runtime/ObjC/Framework/ANTLRMismatchedSetException.m b/runtime/ObjC/Framework/ANTLRMismatchedSetException.m
index e09f84f..b31d545 100644
--- a/runtime/ObjC/Framework/ANTLRMismatchedSetException.m
+++ b/runtime/ObjC/Framework/ANTLRMismatchedSetException.m
@@ -31,7 +31,7 @@

@synthesize expecting;

-+ (id) exceptionWithSet:(NSSet *) theExpectedSet stream:(id<ANTLRIntStream>) theStream
++ (id) newException:(NSSet *) theExpectedSet stream:(id<ANTLRIntStream>) theStream
{
return [[ANTLRMismatchedSetException alloc] initWithSet:theExpectedSet stream:theStream];
}
diff --git a/runtime/ObjC/Framework/ANTLRMismatchedTokenException.h b/runtime/ObjC/Framework/ANTLRMismatchedTokenException.h
index 5e1d77d..8e28dcc 100644
--- a/runtime/ObjC/Framework/ANTLRMismatchedTokenException.h
+++ b/runtime/ObjC/Framework/ANTLRMismatchedTokenException.h
@@ -41,12 +41,12 @@
@property (assign, getter=getExpectingChar, setter=setExpectingChar:) unichar expectingChar;
@property (assign, getter=getIsTokenType, setter=setIsTokenType:) BOOL isTokenType;

-+ (id) newANTLRMismatchedTokenException:(NSInteger)expectedTokenType Stream:(id<ANTLRIntStream>)anInput;
-+ (id) newANTLRMismatchedTokenExceptionMissing:(NSInteger)expectedTokenType
++ (id) newException:(NSInteger)expectedTokenType Stream:(id<ANTLRIntStream>)anInput;
++ (id) newExceptionMissing:(NSInteger)expectedTokenType
Stream:(id<ANTLRIntStream>)anInput
Token:(id<ANTLRToken>)inserted;
-+ (id) newANTLRMismatchedTokenExceptionChar:(unichar)expectedCharacter Stream:(id<ANTLRIntStream>)anInput;
-+ (id) newANTLRMismatchedTokenExceptionStream:(id<ANTLRIntStream>)anInput
++ (id) newExceptionChar:(unichar)expectedCharacter Stream:(id<ANTLRIntStream>)anInput;
++ (id) newExceptionStream:(id<ANTLRIntStream>)anInput
Exception:(NSException *)e
Follow:(ANTLRBitSet *)follow;
- (id) initWithTokenType:(NSInteger)expectedTokenType Stream:(id<ANTLRIntStream>)anInput;
diff --git a/runtime/ObjC/Framework/ANTLRMismatchedTokenException.m b/runtime/ObjC/Framework/ANTLRMismatchedTokenException.m
index d2fa0ee..a8807fa 100644
--- a/runtime/ObjC/Framework/ANTLRMismatchedTokenException.m
+++ b/runtime/ObjC/Framework/ANTLRMismatchedTokenException.m
@@ -34,24 +34,24 @@
@synthesize isTokenType;


-+ (id) newANTLRMismatchedTokenException:(NSInteger)expectedTokenType Stream:(id<ANTLRIntStream>)anInput
++ (id) newException:(NSInteger)expectedTokenType Stream:(id<ANTLRIntStream>)anInput
{
return [[ANTLRMismatchedTokenException alloc] initWithTokenType:expectedTokenType Stream:anInput];
}

-+ (id) newANTLRMismatchedTokenExceptionMissing:(NSInteger)expectedTokenType
++ (id) newExceptionMissing:(NSInteger)expectedTokenType
Stream:(id<ANTLRIntStream>)anInput
Token:(id<ANTLRToken>)inserted
{
return [[ANTLRMismatchedTokenException alloc] initWithTokenType:expectedTokenType Stream:anInput Token:inserted];
}

-+ (id) newANTLRMismatchedTokenExceptionChar:(unichar) expectedCharacter Stream:(id<ANTLRIntStream>)anInput
++ (id) newExceptionChar:(unichar) expectedCharacter Stream:(id<ANTLRIntStream>)anInput
{
return [[ANTLRMismatchedTokenException alloc] initWithCharacter:expectedCharacter Stream:anInput];
}

-+ (id) newANTLRMismatchedTokenExceptionStream:(id<ANTLRIntStream>)anInput Exception:(NSException *)e Follow:(ANTLRBitSet *) follow
++ (id) newExceptionStream:(id<ANTLRIntStream>)anInput Exception:(NSException *)e Follow:(ANTLRBitSet *) follow
{
return [[ANTLRMismatchedTokenException alloc] initWithStream:anInput];
}
diff --git a/runtime/ObjC/Framework/ANTLRMismatchedTreeNodeException.h b/runtime/ObjC/Framework/ANTLRMismatchedTreeNodeException.h
index b61ab51..3528cba 100644
--- a/runtime/ObjC/Framework/ANTLRMismatchedTreeNodeException.h
+++ b/runtime/ObjC/Framework/ANTLRMismatchedTreeNodeException.h
@@ -33,9 +33,9 @@
NSInteger expecting;
}

-@property (getter=getExpecting, setter=setExpecting) NSInteger expecting;
+@property (getter=getExpecting, setter=setExpecting:) NSInteger expecting;

-+ (id) newANTLRMismatchedTreeNodeException:(NSInteger)expectedTokenType Stream:(id<ANTLRIntStream>)anInput;
++ (id) newException:(NSInteger)expectedTokenType Stream:(id<ANTLRIntStream>)anInput;
- (id) initWithTokenType:(NSInteger) expectedTokenType Stream:(id<ANTLRIntStream>)anInput;


diff --git a/runtime/ObjC/Framework/ANTLRMismatchedTreeNodeException.m b/runtime/ObjC/Framework/ANTLRMismatchedTreeNodeException.m
index f600736..60d5184 100644
--- a/runtime/ObjC/Framework/ANTLRMismatchedTreeNodeException.m
+++ b/runtime/ObjC/Framework/ANTLRMismatchedTreeNodeException.m
@@ -31,7 +31,7 @@

@synthesize expecting;

-+ (id) newANTLRMismatchedTreeNodeException:(NSInteger)expectedTokenType Stream:(id<ANTLRIntStream>)anInput
++ (id) newException:(NSInteger)expectedTokenType Stream:(id<ANTLRIntStream>)anInput
{
return [[ANTLRMismatchedTreeNodeException alloc] initWithTokenType:expectedTokenType Stream:anInput];
}
diff --git a/runtime/ObjC/Framework/ANTLRMissingTokenException.h b/runtime/ObjC/Framework/ANTLRMissingTokenException.h
index 1398e25..1ae8103 100644
--- a/runtime/ObjC/Framework/ANTLRMissingTokenException.h
+++ b/runtime/ObjC/Framework/ANTLRMissingTokenException.h
@@ -37,10 +37,10 @@
id<ANTLRToken> inserted;
}
/** Used for remote debugger deserialization */
-+ (id) newANTLRMissingTokenException;
-+ (id) newANTLRMissingTokenException:(NSInteger)expected
-                              Stream:(id<ANTLRIntStream>)anInput
-                                With:(id<ANTLRToken>)insertedToken;
++ (id) newException;
++ (id) newException:(NSInteger)expected
+             Stream:(id<ANTLRIntStream>)anInput
+               With:(id<ANTLRToken>)insertedToken;
- (id) init;
- (id) init:(NSInteger)expected Stream:(id<ANTLRIntStream>)anInput With:(id<ANTLRToken>)insertedToken;

@@ -48,4 +48,5 @@

- (NSString *)toString;

+@property (retain) id<ANTLRToken> inserted;
@end
diff --git a/runtime/ObjC/Framework/ANTLRMissingTokenException.m b/runtime/ObjC/Framework/ANTLRMissingTokenException.m
index 47a40a4..35bd130 100644
--- a/runtime/ObjC/Framework/ANTLRMissingTokenException.m
+++ b/runtime/ObjC/Framework/ANTLRMissingTokenException.m
@@ -34,14 +34,14 @@

@implementation ANTLRMissingTokenException
/** Used for remote debugger deserialization */
-+ (id) newANTLRMissingTokenException
++ (id) newException
{
return [[ANTLRMissingTokenException alloc] init];
}

-+ (id) newANTLRMissingTokenException:(NSInteger)expected
-                        Stream:(id<ANTLRIntStream>)anInput
-                          With:(id<ANTLRToken>)insertedToken
++ (id) newException:(NSInteger)expected
+             Stream:(id<ANTLRIntStream>)anInput
+               With:(id<ANTLRToken>)insertedToken
{
return [[ANTLRMissingTokenException alloc] init:expected Stream:anInput With:insertedToken];
}
@@ -79,4 +79,5 @@
return @"MissingTokenException";
}

+@synthesize inserted;
@end
diff --git a/runtime/ObjC/Framework/ANTLRNoViableAltException.h b/runtime/ObjC/Framework/ANTLRNoViableAltException.h
index b71baff..9b2e521 100644
--- a/runtime/ObjC/Framework/ANTLRNoViableAltException.h
+++ b/runtime/ObjC/Framework/ANTLRNoViableAltException.h
@@ -33,11 +33,13 @@
int stateNumber;
}

-+ (ANTLRNoViableAltException *) newANTLRNoViableAltException:(NSInteger)theDecisionNumber state:(NSInteger)theStateNumber stream:(id<ANTLRIntStream>)theStream;
++ (ANTLRNoViableAltException *) newException:(NSInteger)theDecisionNumber state:(NSInteger)theStateNumber stream:(id<ANTLRIntStream>)theStream;
- (ANTLRNoViableAltException *) initWithDecision:(NSInteger)theDecisionNumber state:(NSInteger)theStateNumber stream:(id<ANTLRIntStream>)theStream;

- (void)setDecisionNumber:(NSInteger)decisionNumber;
- (void)setStateNumber:(NSInteger)stateNumber;


-@end
\ No newline at end of file
+@property (getter=decisionNumber,setter=setDecisionNumber:) NSInteger decisionNumber;
+@property (getter=stateNumber,setter=setStateNumber:) NSInteger stateNumber;
+@end
diff --git a/runtime/ObjC/Framework/ANTLRNoViableAltException.m b/runtime/ObjC/Framework/ANTLRNoViableAltException.m
index 3d8cd3f..e519581 100644
--- a/runtime/ObjC/Framework/ANTLRNoViableAltException.m
+++ b/runtime/ObjC/Framework/ANTLRNoViableAltException.m
@@ -31,7 +31,7 @@
@implementation ANTLRNoViableAltException


-+ (ANTLRNoViableAltException *) newANTLRNoViableAltException:(NSInteger)theDecisionNumber state:(NSInteger)theStateNumber stream:(id<ANTLRIntStream>)theStream
++ (ANTLRNoViableAltException *) newException:(NSInteger)theDecisionNumber state:(NSInteger)theStateNumber stream:(id<ANTLRIntStream>)theStream
{
return [[self alloc] initWithDecision:theDecisionNumber state:theStateNumber stream:theStream];
}
diff --git a/runtime/ObjC/Framework/ANTLRNodeMapElement.h b/runtime/ObjC/Framework/ANTLRNodeMapElement.h
index 1c0c916..3bbf7b7 100644
--- a/runtime/ObjC/Framework/ANTLRNodeMapElement.h
+++ b/runtime/ObjC/Framework/ANTLRNodeMapElement.h
@@ -31,25 +31,25 @@

#import <Cocoa/Cocoa.h>
#import "ANTLRBaseMapElement.h"
-#import "ANTLRTree.h"
+#import "ANTLRBaseTree.h"

@interface ANTLRNodeMapElement : ANTLRBaseMapElement {
-    id<ANTLRTree> node;
+    id<ANTLRBaseTree> node;
}

-@property (retain, getter=getNode, setter=setNode:) id node;
+@property (retain, getter=getNode, setter=setNode:) id<ANTLRBaseTree> node;

+ (void)initialize;

+ (id) newANTLRNodeMapElement;
-+ (id) newANTLRNodeMapElementWithIndex:(id)anIndex Node:(id<ANTLRTree>)aNode;
++ (id) newANTLRNodeMapElementWithIndex:(id)anIndex Node:(id<ANTLRBaseTree>)aNode;
- (id) init;
- (id) initWithAnIndex:(id)anIndex Node:(id)aNode;

- (id) copyWithZone:(NSZone *)aZone;

-- (id<ANTLRTree>)getNode;
-- (void)setNode:(id<ANTLRTree>)aNode;
+- (id<ANTLRBaseTree>)getNode;
+- (void)setNode:(id<ANTLRBaseTree>)aNode;

- (NSInteger)size;

diff --git a/runtime/ObjC/Framework/ANTLRNodeMapElement.m b/runtime/ObjC/Framework/ANTLRNodeMapElement.m
index 115b8b9..8c3618a 100644
--- a/runtime/ObjC/Framework/ANTLRNodeMapElement.m
+++ b/runtime/ObjC/Framework/ANTLRNodeMapElement.m
@@ -47,7 +47,7 @@ static NSInteger _aUniqueID;
return [[ANTLRNodeMapElement alloc] init];
}

-+ (ANTLRNodeMapElement *)newANTLRNodeMapElementWithIndex:(id)anIndex Node:(id<ANTLRTree>)aNode
++ (ANTLRNodeMapElement *)newANTLRNodeMapElementWithIndex:(id)anIndex Node:(id<ANTLRBaseTree>)aNode
{
return [[ANTLRNodeMapElement alloc] initWithAnIndex:anIndex Node:aNode];
}
@@ -82,12 +82,12 @@ static NSInteger _aUniqueID;
return( copy );
}

-- (id<ANTLRTree>)getNode
+- (id<ANTLRBaseTree>)getNode
{
return node;
}

-- (void)setNode:(id<ANTLRTree>)aNode
+- (void)setNode:(id<ANTLRBaseTree>)aNode
{
if ( aNode != node ) {
if (node  != nil) [node release];
diff --git a/runtime/ObjC/Framework/ANTLRParseTree.h b/runtime/ObjC/Framework/ANTLRParseTree.h
index 92554e3..38ad35d 100644
--- a/runtime/ObjC/Framework/ANTLRParseTree.h
+++ b/runtime/ObjC/Framework/ANTLRParseTree.h
@@ -33,7 +33,7 @@
#import "ANTLRBaseTree.h"
#import "ANTLRCommonToken.h"

-@interface ANTLRParseTree : ANTLRBaseTree {
+@interface ANTLRParseTree : ANTLRBaseTree <ANTLRBaseTree> {
id<ANTLRToken> payload;
NSMutableArray *hiddenTokens;
}
@@ -42,10 +42,10 @@
*  This really adds no functionality, it is just an alias for CommonTree
*  that is more meaningful (specific) and holds a String to display for a node.
*/
-+ (ANTLRParseTree *)newANTLRParseTree:(id<ANTLRToken>)label;
++ (id<ANTLRBaseTree>)newANTLRParseTree:(id<ANTLRToken>)label;
- (id)initWithLabel:(id<ANTLRToken>)label;

-- (id<ANTLRTree>)dupNode;
+- (id<ANTLRBaseTree>)dupNode;
- (NSInteger)getType;
- (NSString *)getText;
- (NSInteger)getTokenStartIndex;
@@ -57,4 +57,6 @@
- (NSString *)toInputString;
- (void)_toStringLeaves:(NSMutableString *)buf;

+@property (retain) id<ANTLRToken> payload;
+@property (retain) NSMutableArray *hiddenTokens;
@end
diff --git a/runtime/ObjC/Framework/ANTLRParseTree.m b/runtime/ObjC/Framework/ANTLRParseTree.m
index e43b62e..f5e1d0c 100644
--- a/runtime/ObjC/Framework/ANTLRParseTree.m
+++ b/runtime/ObjC/Framework/ANTLRParseTree.m
@@ -50,7 +50,7 @@
return self;
}

-- (id<ANTLRTree>)dupNode
+- (id<ANTLRBaseTree>)dupNode
{
return nil;
}
@@ -70,7 +70,7 @@
return 0;
}

-- (void)setTokenStartIndex:(NSInteger)index
+- (void)setTokenStartIndex:(NSInteger)anIndex
{
}

@@ -79,7 +79,7 @@
return 0;
}

-- (void)setTokenStopIndex:(NSInteger)index
+- (void)setTokenStopIndex:(NSInteger)anIndex
{
}

@@ -102,7 +102,7 @@
{
NSMutableString *buf = [NSMutableString stringWithCapacity:25];
if ( hiddenTokens!=nil ) {
-        for (int i = 0; i < [hiddenTokens count]; i++) {
+        for (NSUInteger i = 0; i < [hiddenTokens count]; i++) {
id<ANTLRToken>  hidden = (id<ANTLRToken> ) [hiddenTokens objectAtIndex:i];
[buf appendString:[hidden getText]];
}
@@ -135,4 +135,6 @@
}
}

+@synthesize payload;
+@synthesize hiddenTokens;
@end
diff --git a/runtime/ObjC/Framework/ANTLRPtrBuffer.h b/runtime/ObjC/Framework/ANTLRPtrBuffer.h
index 2625107..40903b7 100644
--- a/runtime/ObjC/Framework/ANTLRPtrBuffer.h
+++ b/runtime/ObjC/Framework/ANTLRPtrBuffer.h
@@ -38,24 +38,24 @@

@interface ANTLRPtrBuffer : ANTLRLinkBase {
//ANTLRPtrBuffer *fNext;
-    NSInteger BuffSize;
+    NSUInteger BuffSize;
+    NSUInteger count;
+    NSUInteger ptr;
NSMutableData *buffer;
id *ptrBuffer;
-    NSInteger count;
-    NSInteger ptr;
}

-@property (getter=getBuffSize, setter=setBuffSize:) NSInteger BuffSize;
+@property (getter=getBuffSize, setter=setBuffSize:) NSUInteger BuffSize;
+@property (getter=getCount, setter=setCount:) NSUInteger count;
+@property (getter=getPtr, setter=setPtr:) NSUInteger ptr;
@property (retain, getter=getBuffer, setter=setBuffer:) NSMutableData *buffer;
-@property (retain, getter=getPtrBuffer, setter=setPtrBuffer:) id *ptrBuffer;
-@property (getter=getCount, setter=setCount:) NSInteger count;
-@property (getter=getPtr, setter=setPtr:) NSInteger ptr;
+@property (assign, getter=getPtrBuffer, setter=setPtrBuffer:) id *ptrBuffer;

// Contruction/Destruction
+(ANTLRPtrBuffer *)newANTLRPtrBuffer;
+(ANTLRPtrBuffer *)newANTLRPtrBufferWithLen:(NSInteger)cnt;
-(id)init;
--(id)initWithLen:(NSInteger)cnt;
+-(id)initWithLen:(NSUInteger)cnt;
-(void)dealloc;

// Instance Methods
@@ -63,18 +63,18 @@
/* clear -- reinitialize the maplist array */
- (void) clear;

-- (NSInteger)count;
-- (NSInteger)length;
-- (NSInteger)size;
+- (NSUInteger)count;
+- (NSUInteger)length;
+- (NSUInteger)size;

- (NSMutableData *)getBuffer;
- (void)setBuffer:(NSMutableData *)np;
-- (NSInteger)getCount;
-- (void)setCount:(NSInteger)aCount;
+- (NSUInteger)getCount;
+- (void)setCount:(NSUInteger)aCount;
- (id *)getPtrBuffer;
- (void)setPtrBuffer:(id *)np;
-- (NSInteger)getPtr;
-- (void)setPtr:(NSInteger)np;
+- (NSUInteger)getPtr;
+- (void)setPtr:(NSUInteger)np;

- (void) push:(id) v;
- (id) pop;
@@ -82,11 +82,13 @@

- (void) addObject:(id) v;
- (void) addObjectsFromArray:(ANTLRPtrBuffer *)anArray;
-- (void) insertObject:(id)aRule atIndex:(NSInteger)idx;
-- (id)   objectAtIndex:(NSInteger)idx;
+- (void) insertObject:(id)aRule atIndex:(NSUInteger)idx;
+- (id)   objectAtIndex:(NSUInteger)idx;
- (void) removeAllObjects;
+- (void)removeObjectAtIndex:(NSInteger)idx;

-- (void) ensureCapacity:(NSInteger) index;
+- (void) ensureCapacity:(NSUInteger) index;
+- (NSString *) description;
- (NSString *) toString;

@end
diff --git a/runtime/ObjC/Framework/ANTLRPtrBuffer.m b/runtime/ObjC/Framework/ANTLRPtrBuffer.m
index 84d7c86..f803263 100644
--- a/runtime/ObjC/Framework/ANTLRPtrBuffer.m
+++ b/runtime/ObjC/Framework/ANTLRPtrBuffer.m
@@ -48,24 +48,23 @@

+(ANTLRPtrBuffer *)newANTLRPtrBuffer
{
-    return [[ANTLRPtrBuffer alloc] init];
+    return [[[ANTLRPtrBuffer alloc] init] retain];
}

+(ANTLRPtrBuffer *)newANTLRPtrBufferWithLen:(NSInteger)cnt
{
-    return [[ANTLRPtrBuffer alloc] initWithLen:cnt];
+    return [[[ANTLRPtrBuffer alloc] initWithLen:cnt] retain];
}

-(id)init
{
-    NSInteger idx;
+    NSUInteger idx;

-	if ((self = [super init]) != nil) {
-		fNext = nil;
+	self = [super init];
+	if ( self != nil ) {
BuffSize  = BUFFSIZE;
ptr = 0;
-        buffer = [NSMutableData dataWithLength:(NSUInteger)BuffSize * sizeof(id)];
-        [buffer retain];
+        buffer = [[NSMutableData dataWithLength:(NSUInteger)BuffSize * sizeof(id)] retain];
ptrBuffer = (id *)[buffer mutableBytes];
for( idx = 0; idx < BuffSize; idx++ ) {
ptrBuffer[idx] = nil;
@@ -74,16 +73,15 @@
return( self );
}

--(id)initWithLen:(NSInteger)cnt
+-(id)initWithLen:(NSUInteger)cnt
{
-    NSInteger idx;
+    NSUInteger idx;

-	if ((self = [super init]) != nil) {
-		fNext = nil;
+	self = [super init];
+	if ( self != nil ) {
BuffSize  = cnt;
ptr = 0;
-        buffer = [NSMutableData dataWithLength:(NSUInteger)BuffSize * sizeof(id)];
-        [buffer retain];
+        buffer = [[NSMutableData dataWithLength:(NSUInteger)BuffSize * sizeof(id)] retain];
ptrBuffer = (id *)[buffer mutableBytes];
for( idx = 0; idx < BuffSize; idx++ ) {
ptrBuffer[idx] = nil;
@@ -102,7 +100,10 @@
tmp = ptrBuffer[idx];
while ( tmp ) {
rtmp = tmp;
-                tmp = (id)tmp.fNext;
+                if ([tmp isKindOfClass:[ANTLRLinkBase class]])
+                    tmp = (id)tmp.fNext;
+                else
+                    tmp = nil;
[rtmp dealloc];
}
}
@@ -132,7 +133,10 @@
tmp = ptrBuffer[idx];
while ( tmp ) {
rtmp = tmp;
-            tmp = [tmp getfNext];
+            if ([tmp isKindOfClass:[ANTLRLinkBase class]])
+                tmp = (id)tmp.fNext;
+            else
+                tmp = nil;
[rtmp dealloc];
}
ptrBuffer[idx] = nil;
@@ -149,12 +153,12 @@
buffer = np;
}

-- (NSInteger)getCount
+- (NSUInteger)getCount
{
return( count );
}

-- (void)setCount:(NSInteger)aCount
+- (void)setCount:(NSUInteger)aCount
{
count = aCount;
}
@@ -169,12 +173,12 @@
ptrBuffer = np;
}

-- (NSInteger)getPtr
+- (NSUInteger)getPtr
{
return( ptr );
}

-- (void)setPtr:(NSInteger)aPtr
+- (void)setPtr:(NSUInteger)aPtr
{
ptr = aPtr;
}
@@ -218,7 +222,7 @@
return v;
}

-- (NSInteger)count
+- (NSUInteger)count
{
int cnt = 0;

@@ -231,14 +235,14 @@
return cnt;
}

-- (NSInteger)length
+- (NSUInteger)length
{
return BuffSize;
}

-- (NSInteger)size
+- (NSUInteger)size
{
-    NSInteger aSize = 0;
+    NSUInteger aSize = 0;
for (int i = 0; i < BuffSize; i++ ) {
if (ptrBuffer[i] != nil) {
aSize += sizeof(id);
@@ -247,7 +251,7 @@
return aSize;
}

-- (void) insertObject:(id)aRule atIndex:(NSInteger)idx
+- (void) insertObject:(id)aRule atIndex:(NSUInteger)idx
{
if ( idx >= BuffSize ) {
[self ensureCapacity:idx];
@@ -259,7 +263,7 @@
ptrBuffer[idx] = aRule;
}

-- (id)objectAtIndex:(NSInteger)idx
+- (id)objectAtIndex:(NSUInteger)idx
{
if ( idx < BuffSize ) {
return ptrBuffer[idx];
@@ -291,13 +295,26 @@
ptr = 0;
}

-- (void) ensureCapacity:(NSInteger) index
+- (void)removeObjectAtIndex:(NSInteger)idx
{
-	if ((index * sizeof(id)) >= [buffer length])
+    int i;
+    if ( idx >= 0 && idx < count ) {
+        if ( ptrBuffer[idx] != nil ) [ptrBuffer[idx] release];
+        for ( i = idx; i < count-1; i++ ) {
+            ptrBuffer[i] = ptrBuffer[i+1];
+        }
+        ptrBuffer[i] = nil;
+        count--;
+    }
+}
+
+- (void) ensureCapacity:(NSUInteger) anIndex
+{
+	if ((anIndex * sizeof(id)) >= [buffer length])
{
NSInteger newSize = ([buffer length] / sizeof(id)) * 2;
-		if (index > newSize) {
-			newSize = index + 1;
+		if (anIndex > newSize) {
+			newSize = anIndex + 1;
}
BuffSize = newSize;
[buffer setLength:(BuffSize * sizeof(id))];
@@ -305,7 +322,7 @@
}
}

-- (NSString *) toString
+- (NSString *) description
{
NSMutableString *str;
NSInteger idx, cnt;
@@ -319,4 +336,9 @@
return str;
}

+- (NSString *) toString
+{
+    return [self description];
+}
+
@end
diff --git a/runtime/ObjC/Framework/ANTLRPtrStack.h b/runtime/ObjC/Framework/ANTLRPtrStack.h
index e2a9510..7aa65a9 100644
--- a/runtime/ObjC/Framework/ANTLRPtrStack.h
+++ b/runtime/ObjC/Framework/ANTLRPtrStack.h
@@ -22,7 +22,6 @@

//@property (copy) ANTLRPtrStack *fNext;
//@property (copy) TStringPool *fPool;
-@property (getter=getLastHash, setter=setLastHash) NSInteger LastHash;

// Contruction/Destruction
+ (ANTLRPtrStack *)newANTLRPtrStack;
diff --git a/runtime/ObjC/Framework/ANTLRReaderStream.m b/runtime/ObjC/Framework/ANTLRReaderStream.m
index c394bfe..a71b827 100644
--- a/runtime/ObjC/Framework/ANTLRReaderStream.m
+++ b/runtime/ObjC/Framework/ANTLRReaderStream.m
@@ -51,7 +51,8 @@ static NSInteger INITIAL_BUFFER_SIZE = 1024;

- (id) init
{
-    if (self = [super init]) {
+	self = [super init];
+	if ( self != nil ) {
fh = nil;
rbSize = READ_BUFFER_SIZE;
size = INITIAL_BUFFER_SIZE;
@@ -61,7 +62,8 @@ static NSInteger INITIAL_BUFFER_SIZE = 1024;

- (id) initWithReader:(NSFileHandle *)r size:(NSInteger)aSize readBufferSize:(NSInteger)aReadChunkSize
{
-    if (self = [super init]) {
+	self = [super init];
+	if ( self != nil ) {
fh = r;
rbSize = aSize;
size = aReadChunkSize;
@@ -90,7 +92,7 @@ static NSInteger INITIAL_BUFFER_SIZE = 1024;
numRead = [retData length];
NSLog( @"read %d chars; p was %d is now %d", n, p1, (p1+numRead) );
p1 += numRead;
-        n = p1+1;
+        n = p1;
data = [[NSString alloc] initWithData:retData encoding:NSASCIIStringEncoding];
NSLog( @"n=%d", n );
}
@@ -110,8 +112,8 @@ static NSInteger INITIAL_BUFFER_SIZE = 1024;

- (void)stream:(NSStream *)stream handleEvent:(NSStreamEvent)eventCode
{
-    NSMutableData *myData;
-    NSNumber *bytesRead;
+    NSMutableData *myData = nil;
+    NSNumber *bytesRead = [NSNumber numberWithInteger:0];
switch(eventCode) {
case NSStreamEventHasBytesAvailable:
{
diff --git a/runtime/ObjC/Framework/ANTLRRecognitionException.h b/runtime/ObjC/Framework/ANTLRRecognitionException.h
index 853dc0e..c46d215 100644
--- a/runtime/ObjC/Framework/ANTLRRecognitionException.h
+++ b/runtime/ObjC/Framework/ANTLRRecognitionException.h
@@ -29,13 +29,13 @@
#import "ANTLRRuntimeException.h"
#import "ANTLRToken.h"
#import "ANTLRIntStream.h"
-#import "ANTLRTree.h"
+#import "ANTLRBaseTree.h"

@interface ANTLRRecognitionException : ANTLRRuntimeException {
id<ANTLRIntStream> input;
NSInteger index;
id<ANTLRToken> token;
-	id<ANTLRTree> node;
+	id<ANTLRBaseTree> node;
unichar c;
NSInteger line;
NSInteger charPositionInLine;
@@ -43,15 +43,17 @@

@property (retain, getter=getStream, setter=setStream:) id<ANTLRIntStream> input;
@property (retain, getter=getToken, setter=setToken:) id<ANTLRToken>token;
-@property (retain, getter=getNode, setter=setNode:) id<ANTLRTree>node;
+@property (retain, getter=getNode, setter=setNode:) id<ANTLRBaseTree>node;
@property (getter=getLine, setter=setLine:) NSInteger line;
@property (getter=getCharPositionInLine, setter=setCharPositionInLine:) NSInteger charPositionInLine;

-+ (ANTLRRecognitionException *) newANTLRRecognitionException;
-+ (ANTLRRecognitionException *) exceptionWithStream:(id<ANTLRIntStream>) anInputStream;
++ (id) newException;
++ (id) newException:(id<ANTLRIntStream>) anInputStream;
- (id) init;
- (id) initWithStream:(id<ANTLRIntStream>)anInputStream;
- (id) initWithStream:(id<ANTLRIntStream>)anInputStream reason:(NSString *)aReason;
+- (id) initWithName:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;
+
- (NSInteger) unexpectedType;
- (id<ANTLRToken>)getUnexpectedToken;

@@ -61,12 +63,14 @@
- (id<ANTLRToken>) getToken;
- (void) setToken: (id<ANTLRToken>) aToken;

-- (id<ANTLRTree>) getNode;
-- (void) setNode: (id<ANTLRTree>) aNode;
+- (id<ANTLRBaseTree>) getNode;
+- (void) setNode: (id<ANTLRBaseTree>) aNode;

- (NSString *)getMessage;

- (NSInteger)getCharPositionInLine;
- (void)setCharPositionInLine:(NSInteger)aPos;

+@property NSInteger index;
+@property unichar c;
@end
diff --git a/runtime/ObjC/Framework/ANTLRRecognitionException.m b/runtime/ObjC/Framework/ANTLRRecognitionException.m
index 70fc02e..09814f6 100644
--- a/runtime/ObjC/Framework/ANTLRRecognitionException.m
+++ b/runtime/ObjC/Framework/ANTLRRecognitionException.m
@@ -36,17 +36,17 @@
@synthesize line;
@synthesize charPositionInLine;

-+ (ANTLRRecognitionException *) newANTLRRecognitionException
++ (id) newException
{
return [[ANTLRRecognitionException alloc] init];
}

-+ (ANTLRRecognitionException *) exceptionWithStream:(id<ANTLRIntStream>) anInputStream
++ (id) newException:(id<ANTLRIntStream>) anInputStream
{
return [[ANTLRRecognitionException alloc] initWithStream:anInputStream];
}

-+ (ANTLRRecognitionException *) exceptionWithStream:(id<ANTLRIntStream>) anInputStream reason:(NSString *)aReason
++ (id) newException:(id<ANTLRIntStream>) anInputStream reason:(NSString *)aReason
{
return [[ANTLRRecognitionException alloc] initWithStream:anInputStream reason:aReason];
}
@@ -91,6 +91,13 @@
return self;
}

+- (id) initWithName:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
+{
+    if ((self = [super initWithName:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo]) != nil) {
+    }
+    return self;
+}
+
- (void) dealloc
{
[self setStream:nil];
@@ -166,12 +173,12 @@
//----------------------------------------------------------
//  node
//----------------------------------------------------------
-- (id<ANTLRTree>) getNode
+- (id<ANTLRBaseTree>) getNode
{
return node;
}

-- (void) setNode: (id<ANTLRTree>) aNode
+- (void) setNode: (id<ANTLRBaseTree>) aNode
{
if (node != aNode) {
[aNode retain];
@@ -195,4 +202,6 @@
charPositionInLine = aPos;
}

+@synthesize index;
+@synthesize c;
@end
diff --git a/runtime/ObjC/Framework/ANTLRRecognizerSharedState.h b/runtime/ObjC/Framework/ANTLRRecognizerSharedState.h
index 0430b79..fa03dc1 100755
--- a/runtime/ObjC/Framework/ANTLRRecognizerSharedState.h
+++ b/runtime/ObjC/Framework/ANTLRRecognizerSharedState.h
@@ -54,15 +54,15 @@
@property (assign) NSInteger lastErrorIndex;
@property (assign, getter=getFailed, setter=setFailed:) BOOL failed;
@property (assign) NSInteger syntaxErrors;
-@property (assign, getter=getBacktracking, setter=setBacktracking) NSInteger backtracking;
+@property (assign, getter=getBacktracking, setter=setBacktracking:) NSInteger backtracking;
@property (retain, getter=getRuleMemo, setter=setRuleMemo:) ANTLRRuleStack *ruleMemo;
-@property (copy, getter=getToken, setter=setToken) id<ANTLRToken> token;
+@property (copy, getter=getToken, setter=setToken:) id<ANTLRToken> token;
@property (getter=getType,setter=setType:) NSUInteger type;
@property (getter=getChannel,setter=setChannel:) NSUInteger channel;
@property (getter=getTokenStartLine,setter=setTokenStartLine:) NSUInteger tokenStartLine;
@property (getter=getCharPositionInLine,setter=setCharPositionInLine:) NSUInteger tokenStartCharPositionInLine;
@property (getter=getTokenStartCharIndex,setter=setTokenStartCharIndex:) NSInteger tokenStartCharIndex;
-@property (retain, getter=getText, setter=setText) NSString *text;
+@property (retain, getter=getText, setter=setText:) NSString *text;

+ (ANTLRRecognizerSharedState *) newANTLRRecognizerSharedState;
+ (ANTLRRecognizerSharedState *) newANTLRRecognizerSharedStateWithRuleLen:(NSInteger)aLen;
diff --git a/runtime/ObjC/Framework/ANTLRRecognizerSharedState.m b/runtime/ObjC/Framework/ANTLRRecognizerSharedState.m
index 54633b1..e663e6e 100755
--- a/runtime/ObjC/Framework/ANTLRRecognizerSharedState.m
+++ b/runtime/ObjC/Framework/ANTLRRecognizerSharedState.m
@@ -50,17 +50,17 @@

+ (ANTLRRecognizerSharedState *) newANTLRRecognizerSharedState
{
-    return [[ANTLRRecognizerSharedState alloc] init];
+    return [[[ANTLRRecognizerSharedState alloc] init] retain];
}

+ (ANTLRRecognizerSharedState *) newANTLRRecognizerSharedStateWithRuleLen:(NSInteger)aLen
{
-    return [[ANTLRRecognizerSharedState alloc] initWithRuleLen:aLen];
+    return [[[ANTLRRecognizerSharedState alloc] initWithRuleLen:aLen] retain];
}

+ (ANTLRRecognizerSharedState *) newANTLRRecognizerSharedState:(ANTLRRecognizerSharedState *)aState
{
-    return [[ANTLRRecognizerSharedState alloc] initWithState:aState];
+    return [[[ANTLRRecognizerSharedState alloc] initWithState:aState] retain];
}

- (id) init
diff --git a/runtime/ObjC/Framework/ANTLRRewriteRuleElementStream.h b/runtime/ObjC/Framework/ANTLRRewriteRuleElementStream.h
index 309651d..c3130ae 100644
--- a/runtime/ObjC/Framework/ANTLRRewriteRuleElementStream.h
+++ b/runtime/ObjC/Framework/ANTLRRewriteRuleElementStream.h
@@ -69,8 +69,8 @@
- (NSInteger) size;

- (BOOL) hasNext;
-- (id<ANTLRTree>) nextTree;
-- (id<ANTLRTree>) _next;       // internal: TODO: redesign if necessary. maybe delegate
+- (id<ANTLRBaseTree>) nextTree;
+- (id<ANTLRBaseTree>) _next;       // internal: TODO: redesign if necessary. maybe delegate

- (id) copyElement:(id)element;
- (id) toTree:(id)element;
diff --git a/runtime/ObjC/Framework/ANTLRRewriteRuleElementStream.m b/runtime/ObjC/Framework/ANTLRRewriteRuleElementStream.m
index c8e816b..59da529 100644
--- a/runtime/ObjC/Framework/ANTLRRewriteRuleElementStream.m
+++ b/runtime/ObjC/Framework/ANTLRRewriteRuleElementStream.m
@@ -179,7 +179,7 @@
[elements addObject:anElement];
}

-- (id<ANTLRTree>) nextTree
+- (id<ANTLRBaseTree>) nextTree
{
NSInteger n = [self size];
if ( dirty && (cursor >= 0 && n == 1)) {
@@ -235,7 +235,7 @@
return nil;
}

-- (id<ANTLRTree>) toTree:(id)element
+- (id<ANTLRBaseTree>) toTree:(id)element
{
return element;
}
diff --git a/runtime/ObjC/Framework/ANTLRRewriteRuleNodeStream.h b/runtime/ObjC/Framework/ANTLRRewriteRuleNodeStream.h
index d457253..2789e45 100755
--- a/runtime/ObjC/Framework/ANTLRRewriteRuleNodeStream.h
+++ b/runtime/ObjC/Framework/ANTLRRewriteRuleNodeStream.h
@@ -40,7 +40,7 @@
- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements;

- (id) nextNode;
-- (id) nextTree:(id<ANTLRToken>)element;
+- (id) toTree:(id<ANTLRBaseTree>)element;
- (id) dup:(id)element;

@end
diff --git a/runtime/ObjC/Framework/ANTLRRewriteRuleNodeStream.m b/runtime/ObjC/Framework/ANTLRRewriteRuleNodeStream.m
index fc668ab..8dfedd7 100755
--- a/runtime/ObjC/Framework/ANTLRRewriteRuleNodeStream.m
+++ b/runtime/ObjC/Framework/ANTLRRewriteRuleNodeStream.m
@@ -7,7 +7,7 @@
//

#import "ANTLRRewriteRuleNodeStream.h"
-
+#import "ANTLRRuntimeException.h"

@implementation ANTLRRewriteRuleNodeStream

@@ -60,15 +60,15 @@
return [self _next];
}

-- (id<ANTLRTree>) nextTree:(id<ANTLRToken>)element
+- (id<ANTLRBaseTree>) toTree:(id<ANTLRBaseTree>)element
{
-    return [adaptor dupNode:element];
+    return [treeAdaptor dupNode:element];
}

- (id) dup:(id)element
{
return [treeAdaptor dupTree:element];
-    @throw [ANTLRRuntimeException newUnsupportedOperationException:@"dup can't be called for a node stream."];
+    @throw [ANTLRRuntimeException newException:@"ANTLRUnsupportedOperationException" reason:@"dup can't be called for a node stream."];
}

@end
diff --git a/runtime/ObjC/Framework/ANTLRRewriteRuleSubtreeStream.m b/runtime/ObjC/Framework/ANTLRRewriteRuleSubtreeStream.m
index 33a8f13..48910bd 100644
--- a/runtime/ObjC/Framework/ANTLRRewriteRuleSubtreeStream.m
+++ b/runtime/ObjC/Framework/ANTLRRewriteRuleSubtreeStream.m
@@ -78,7 +78,7 @@

- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements
{
-    if ((self = [super init]) != nil) {
+    if ((self = [super initWithTreeAdaptor:aTreeAdaptor description:anElementDescription elements:theElements]) != nil) {
dirty = NO;
}
return self;
diff --git a/runtime/ObjC/Framework/ANTLRRewriteRuleTokenStream.h b/runtime/ObjC/Framework/ANTLRRewriteRuleTokenStream.h
index 3a516de..f644c55 100644
--- a/runtime/ObjC/Framework/ANTLRRewriteRuleTokenStream.h
+++ b/runtime/ObjC/Framework/ANTLRRewriteRuleTokenStream.h
@@ -61,6 +61,6 @@
/** Don't convert to a tree unless they explicitly call nextTree.
*  This way we can do hetero tree nodes in rewrite.
*/
-- (id<ANTLRTree>) toTree:(id<ANTLRToken>)element;
+- (id<ANTLRBaseTree>) toTree:(id<ANTLRToken>)element;

-@end
\ No newline at end of file
+@end
diff --git a/runtime/ObjC/Framework/ANTLRRewriteRuleTokenStream.m b/runtime/ObjC/Framework/ANTLRRewriteRuleTokenStream.m
index 3e3cd6b..20dfdbc 100644
--- a/runtime/ObjC/Framework/ANTLRRewriteRuleTokenStream.m
+++ b/runtime/ObjC/Framework/ANTLRRewriteRuleTokenStream.m
@@ -101,7 +101,7 @@
return self;
}

-- (id<ANTLRTree>) nextNode
+- (id<ANTLRBaseTree>) nextNode
{
id<ANTLRToken> t = [self _next];
return [treeAdaptor createTree:t];
@@ -115,14 +115,14 @@
/** Don't convert to a tree unless they explicitly call nextTree.
*  This way we can do hetero tree nodes in rewrite.
*/
-- (id<ANTLRTree>) toTree:(id<ANTLRToken>)element
+- (id<ANTLRBaseTree>) toTree:(id<ANTLRToken>)element
{
return element;
}

- (id) copyElement:(id)element
{
-    @throw [ANTLRRuntimeException newANTLRRuntimeException:@"copy can't be called for a token stream."];
+    @throw [ANTLRRuntimeException newException:@"copy can't be called for a token stream."];
}

@end
diff --git a/runtime/ObjC/Framework/ANTLRRuleMemo.h b/runtime/ObjC/Framework/ANTLRRuleMemo.h
index 63a5ae2..ed95af6 100644
--- a/runtime/ObjC/Framework/ANTLRRuleMemo.h
+++ b/runtime/ObjC/Framework/ANTLRRuleMemo.h
@@ -37,8 +37,8 @@
NSNumber *stopIndex;
}

-@property (retain, getter=getStartIndex, setter=setStartIndex) NSNumber *startIndex;
-@property (retain, getter=getStopIndex, setter=setStopIndex) NSNumber *stopIndex;
+@property (retain, getter=getStartIndex, setter=setStartIndex:) NSNumber *startIndex;
+@property (retain, getter=getStopIndex, setter=setStopIndex:) NSNumber *stopIndex;

+ (ANTLRRuleMemo *)newANTLRRuleMemo;
+ (ANTLRRuleMemo *)newANTLRRuleMemoWithStartIndex:(NSNumber *)aStartIndex StopIndex:(NSNumber *)aStopIndex;
diff --git a/runtime/ObjC/Framework/ANTLRRuleStack.m b/runtime/ObjC/Framework/ANTLRRuleStack.m
index f38faae..ac58f57 100644
--- a/runtime/ObjC/Framework/ANTLRRuleStack.m
+++ b/runtime/ObjC/Framework/ANTLRRuleStack.m
@@ -44,12 +44,12 @@ extern NSInteger debug;

+ (ANTLRRuleStack *)newANTLRRuleStack
{
-    return [[ANTLRRuleStack alloc] init];
+    return [[[ANTLRRuleStack alloc] init] retain];
}

+ (ANTLRRuleStack *)newANTLRRuleStack:(NSInteger)cnt
{
-    return [[ANTLRRuleStack alloc] initWithLen:cnt];
+    return [[[ANTLRRuleStack alloc] initWithLen:cnt] retain];
}

- (id)init
diff --git a/runtime/ObjC/Framework/ANTLRRuntimeException.h b/runtime/ObjC/Framework/ANTLRRuntimeException.h
index 96e31a8..b0bf69b 100644
--- a/runtime/ObjC/Framework/ANTLRRuntimeException.h
+++ b/runtime/ObjC/Framework/ANTLRRuntimeException.h
@@ -31,24 +31,70 @@

#import <Cocoa/Cocoa.h>

-@interface ANTLRRuntimeException : NSException
-{
+@interface ANTLRRuntimeException : NSException {
}

-+ (ANTLRRuntimeException *) newANTLRNoSuchElementException:(NSString *)aReason;
-+ (ANTLRRuntimeException *) newANTLRIllegalArgumentException:(NSString *)aReason;
-+ (ANTLRRuntimeException *) newANTLRRuntimeException:(NSString *)aReason;
++ (ANTLRRuntimeException *) newException;
++ (ANTLRRuntimeException *) newException:(NSString *)aReason;
++ (ANTLRRuntimeException *) newException:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;
+
+ (ANTLRRuntimeException *) newException:(NSString *)aName reason:(NSString *)aReason;
-+ (ANTLRRuntimeException *) newException:(NSString *)aName reason:(NSString *)aReason userInfo:aUserInfo;
++ (ANTLRRuntimeException *) newException:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;

- (id) init;
-- (id)initWithRuntime:(NSString *)aReason;
-- (id)initWithReason:(NSString *)aReason;
-- (id)initWithName:(NSString *)aName reason:(NSString *)aReason;
-- (id)initWithName:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;
+- (id) init:(NSString *)aReason;
+- (id) init:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;
+- (id) initWithName:(NSString *)aName reason:(NSString *)aReason;
+- (id) initWithName:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;

- (NSString *) Description;
- (id) stackTrace:(NSException *)e;
-//    - (void)setDecisionNumber:(NSInteger)decisionNumber;
-//    - (void)setStateNumber:(NSInteger)stateNumber;
+
+@end
+
+@interface ANTLRIllegalArgumentException : ANTLRRuntimeException {
+}
+
++ (id) newException;
++ (id) newException:(NSString *)aReason;
++ (id) newException:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;
+
+- (id) init;
+- (id)init:(NSString *)aReason;
+- (id)init:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;
+
+@end
+
+@interface ANTLRIllegalStateException : ANTLRRuntimeException {
+}
+
++ (id) newException;
++ (id) newException:(NSString *)aReason;
++ (id) newException:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;
+
+- (id) init;
+- (id)init:(NSString *)aReason;
+- (id)init:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;
+
+@end
+
+@interface ANTLRNoSuchElementException : ANTLRRuntimeException {
+}
+
++ (id) newException;
++ (id) newException:(NSString *)aReason;
++ (id) newException:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;
+
+- (id) init;
+- (id) init:(NSString *)aReason;
+- (id) init:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;
+
+@end
+
+@interface ANTLRRewriteEarlyExitException : ANTLRRuntimeException {
+}
+
++ (id) newException;
+- (id) initWithName:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;
+
@end
diff --git a/runtime/ObjC/Framework/ANTLRRuntimeException.m b/runtime/ObjC/Framework/ANTLRRuntimeException.m
index 92d4567..b1f14e6 100644
--- a/runtime/ObjC/Framework/ANTLRRuntimeException.m
+++ b/runtime/ObjC/Framework/ANTLRRuntimeException.m
@@ -34,67 +34,59 @@

@implementation ANTLRRuntimeException

-+ (ANTLRRuntimeException *) newANTLRNoSuchElementException:(NSString *)aReason
++ (id) newException
{
-    return [[ANTLRRuntimeException alloc] initWithName:@"ANTLRNoSuchElementException" reason:aReason];
+    return [[ANTLRRuntimeException alloc] init];
}

-+ (ANTLRRuntimeException *) newANTLRIllegalArgumentException:(NSString *)aReason
++ (id) newException:(NSString *)aReason
{
-    return [[ANTLRRuntimeException alloc] initWithName:@"ANTLRIllegalArgumentException" reason:aReason];
+    return [[ANTLRRuntimeException alloc] init:aReason];
}

-+ (ANTLRRuntimeException *) newANTLRRuntimeException:(NSString *)aReason
++ (id) newException:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
{
-    return [[ANTLRRuntimeException alloc] initWithRuntime:aReason];
+    return [[ANTLRRuntimeException alloc] init:aReason userInfo:aUserInfo];
}

-+ (ANTLRRuntimeException *) newException:(NSString *)aName reason:(NSString *)aReason
++ (id) newException:(NSString *)aName reason:(NSString *)aReason;
{
return [[ANTLRRuntimeException alloc] initWithName:aName reason:aReason];
}

-+ (ANTLRRuntimeException *) newException:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
++ (id) newException:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;
{
return [[ANTLRRuntimeException alloc] initWithName:aName reason:aReason userInfo:aUserInfo];
}

-- init
+
+- (id) init
{
-    if ((self = [super initWithName:@"ANTLRRuntimeException" reason:@"UnknownException" userInfo:nil]) != nil) {
-    }
+    self = [super initWithName:@"ANTLRRuntimeException" reason:@"UnknownException" userInfo:nil];
return(self);
}

-- (id)initWithRuntime:(NSString *)aReason
+- (id) init:(NSString *)aReason
{
-    self = [super initWithName:(NSString *)@"RuntimeException" reason:(NSString *)aReason userInfo:(NSDictionary *)nil];
-    if (self) {
-    }
+    self = [super initWithName:(NSString *)@"ANTLRRuntimeException" reason:(NSString *)aReason userInfo:(NSDictionary *)nil];
return(self);
}

-- (id)initWithReason:(NSString *)aReason
+- (id) init:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
{
-    self = [super initWithName:(NSString *)@"NoNameGiven" reason:(NSString *)aReason userInfo:(NSDictionary *)nil];
-    if (self) {
-    }
+    self = [super initWithName:@"ANTLRRuntimeException" reason:aReason userInfo:aUserInfo];
return(self);
}

-- (id)initWithName:(NSString *)aName reason:(NSString *)aReason
+- (id) initWithName:(NSString *)aName reason:(NSString *)aReason
{
self = [super initWithName:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)nil];
-    if (self) {
-    }
return(self);
}

-- (id)initWithName:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
+- (id) initWithName:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
{
-    self = [super initWithName:aName reason:aReason userInfo:aUserInfo];
-    if (self) {
-    }
+    self = [super initWithName:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo];
return(self);
}

@@ -120,3 +112,140 @@
}

@end
+
+@implementation ANTLRIllegalArgumentException
+
++ (id) newException
+{
+    return [[ANTLRIllegalArgumentException alloc] init];
+}
+
++ (id) newException:(NSString *)aReason
+{
+    return [[ANTLRIllegalArgumentException alloc] init:aReason];
+}
+
++ (id) newException:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
+{
+    return [[ANTLRIllegalArgumentException alloc] init:aReason userInfo:aUserInfo];
+}
+
+- (id) init
+{
+    self = [super initWithName:@"ANTLRIllegalArgumentException" reason:@"UnknownException" userInfo:nil];
+    return(self);
+}
+
+- (id) init:(NSString *)aReason
+{
+    self = [super initWithName:@"ANTLRIllegalArgumentException" reason:(NSString *)aReason userInfo:nil];
+    return(self);
+}
+
+- (id) init:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
+{
+    self = [super initWithName:@"ANTLRIllegalArgumentException" reason:aReason userInfo:aUserInfo];
+    return(self);
+}
+
+@end
+
+@implementation ANTLRIllegalStateException
+
++ (id) newException
+{
+    return [[ANTLRIllegalStateException alloc] init];
+}
+
++ (id) newException:(NSString *)aReason
+{
+    return [[ANTLRIllegalStateException alloc] init:aReason];
+}
+
++ (id) newException:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
+{
+    return [[ANTLRIllegalStateException alloc] init:aReason userInfo:aUserInfo];
+}
+
+- (id) init
+{
+    self = [super initWithName:@"ANTLRIllegalStateException" reason:@"UnknownException" userInfo:nil];
+    return(self);
+}
+
+- (id) init:(NSString *)aReason
+{
+    self = [super initWithName:@"ANTLRIllegalStateException" reason:(NSString *)aReason userInfo:nil];
+    return(self);
+}
+
+- (id) init:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
+{
+    self = [super initWithName:@"ANTLRIllegalStateException" reason:aReason userInfo:aUserInfo];
+    return(self);
+}
+
+@end
+
+@implementation ANTLRNoSuchElementException
+
++ (id) newException
+{
+    return [[ANTLRNoSuchElementException alloc] init];
+}
+
++ (id) newException:(NSString *)aReason
+{
+    return [[ANTLRNoSuchElementException alloc] init:aReason];
+}
+
++ (id) newException:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
+{
+    return [[ANTLRNoSuchElementException alloc] init:aReason userInfo:(NSDictionary *)aUserInfo];
+}
+
+- (id) init
+{
+    self = [super initWithName:@"ANTLRNoSuchElementException" reason:@"UnknownException" userInfo:nil];
+    return(self);
+}
+
+- (id) init:(NSString *)aReason
+{
+    self = [super initWithName:@"ANTLRNoSuchElementException" reason:(NSString *)aReason userInfo:(NSDictionary *)nil];
+    return(self);
+}
+
+- (id) init:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
+{
+    self = [super initWithName:@"ANTLRNoSuchElementException" reason:aReason userInfo:aUserInfo];
+    return(self);
+}
+
+- (id) initWithName:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
+{
+    self = [super initWithName:aName reason:aReason userInfo:aUserInfo];
+    return(self);
+}
+
+@end
+
+@implementation ANTLRRewriteEarlyExitException
+
++ (id) newException
+{
+	return [[self alloc] init];
+}
+
+- (id) init
+{
+	self = [super initWithName:@"RewriteEarlyExitException" reason:nil userInfo:nil];
+	return self;
+}
+
+- (NSString *) description
+{
+	return [self name];
+}
+
+@end
diff --git a/runtime/ObjC/Framework/ANTLRStreamEnumerator.h b/runtime/ObjC/Framework/ANTLRStreamEnumerator.h
index a0e0f69..b848cde 100644
--- a/runtime/ObjC/Framework/ANTLRStreamEnumerator.h
+++ b/runtime/ObjC/Framework/ANTLRStreamEnumerator.h
@@ -42,4 +42,7 @@
-(id) initWithNodes:(NSMutableArray *) n andEOF:(id) o;
-(BOOL) hasNext;

+@property NSInteger i;
+@property (retain) id eof;
+@property (retain) NSMutableArray *nodes;
@end
diff --git a/runtime/ObjC/Framework/ANTLRStreamEnumerator.m b/runtime/ObjC/Framework/ANTLRStreamEnumerator.m
index 4a187eb..4436de2 100644
--- a/runtime/ObjC/Framework/ANTLRStreamEnumerator.m
+++ b/runtime/ObjC/Framework/ANTLRStreamEnumerator.m
@@ -62,7 +62,7 @@

-(id) nextObject
{
-	NSInteger current = i;
+	NSUInteger current = i;
i++;
if (current < [nodes count])
{
@@ -71,4 +71,7 @@
return eof;
}

+@synthesize i;
+@synthesize eof;
+@synthesize nodes;
@end
diff --git a/runtime/ObjC/Framework/ANTLRStringStream.m b/runtime/ObjC/Framework/ANTLRStringStream.m
index 687fcc3..74092d9 100644
--- a/runtime/ObjC/Framework/ANTLRStringStream.m
+++ b/runtime/ObjC/Framework/ANTLRStringStream.m
@@ -229,7 +229,7 @@ extern NSInteger debug;
// Note: markers are 1-based!
- (NSInteger) mark
{
-    if (debug > 1) NSLog(@"mark entry -- markers=%x, markDepth=%d\n", markers, markDepth);
+    if (debug > 1) NSLog(@"mark entry -- markers=%x, markDepth=%d\n", (int)markers, markDepth);
if ( markers == nil ) {
markers = [ANTLRPtrBuffer newANTLRPtrBufferWithLen:100];
[markers addObject:[NSNull null]]; // ANTLR generates code that assumes markers to be 1-based,
@@ -252,13 +252,13 @@ extern NSInteger debug;
State = [markers objectAtIndex:markDepth];
[State retain];
State = (ANTLRCharStreamState *)[markers objectAtIndex:markDepth];
-        if (debug > 1) NSLog(@"mark retrieve charState %x from %d, p=%d, line=%d, charPositionInLine=%d\n", charState, markDepth, charState.p, charState.line, charState.charPositionInLine);
+        if (debug > 1) NSLog(@"mark retrieve charState %x from %d, p=%d, line=%d, charPositionInLine=%d\n", State, markDepth, State.p, State.line, State.charPositionInLine);
}
State.p = p;
State.line = line;
State.charPositionInLine = charPositionInLine;
lastMarker = markDepth;
-    if (debug > 1) NSLog(@"mark exit -- markers=%x, charState=%x, p=%d, line=%d, charPositionInLine=%d\n", markers, charState, charState.p, charState.line, charState.charPositionInLine);
+    if (debug > 1) NSLog(@"mark exit -- markers=%x, charState=%x, p=%d, line=%d, charPositionInLine=%d\n", markers, State, State.p, State.line, State.charPositionInLine);
return markDepth;
}

@@ -298,19 +298,19 @@ extern NSInteger debug;
// when seeking forward we must handle character position and line numbers.
// seeking backward already has the correct line information on the markers stack,
// so we just take it from there.
-- (void) seek:(NSInteger) index
+- (void) seek:(NSInteger) anIndex
{
-    if (debug > 1) NSLog(@"seek entry -- index=%d p=%d\n", index, p);
-	if ( index <= p ) {
-		p = index; // just jump; don't update stream charState (line, ...)
-        if (debug > 1) NSLog(@"seek exit return -- index=%d p=%d\n", index, p);
+    if (debug > 1) NSLog(@"seek entry -- index=%d p=%d\n", anIndex, p);
+	if ( anIndex <= p ) {
+		p = anIndex; // just jump; don't update stream charState (line, ...)
+        if (debug > 1) NSLog(@"seek exit return -- index=%d p=%d\n", anIndex, p);
return;
}
-	// seek forward, consume until p hits index
-	while ( p < index ) {
+	// seek forward, consume until p hits anIndex
+	while ( p < anIndex ) {
[self consume];
}
-    if (debug > 1) NSLog(@"seek exit end -- index=%d p=%d\n", index, p);
+    if (debug > 1) NSLog(@"seek exit end -- index=%d p=%d\n", anIndex, p);
}

// get a substring from our raw data.
diff --git a/runtime/ObjC/Framework/ANTLRToken.h b/runtime/ObjC/Framework/ANTLRToken.h
index 045519c..df5f33f 100644
--- a/runtime/ObjC/Framework/ANTLRToken.h
+++ b/runtime/ObjC/Framework/ANTLRToken.h
@@ -75,8 +75,8 @@ typedef enum {
- (void) setChannel: (NSUInteger) aChannel;

// the index of this Token into the TokenStream
-- (NSUInteger) getTokenIndex;
-- (void) setTokenIndex: (NSUInteger) aTokenIndex;
+- (NSInteger) getTokenIndex;
+- (void) setTokenIndex: (NSInteger) aTokenIndex;
- (NSString *)toString;

@end
diff --git a/runtime/ObjC/Framework/ANTLRTokenRewriteStream.m b/runtime/ObjC/Framework/ANTLRTokenRewriteStream.m
index 8072fd0..878b0d2 100644
--- a/runtime/ObjC/Framework/ANTLRTokenRewriteStream.m
+++ b/runtime/ObjC/Framework/ANTLRTokenRewriteStream.m
@@ -346,7 +346,7 @@ extern NSInteger debug;
- (void) replaceProgNam:(NSString *)programName FromIndex:(NSInteger)from ToIndex:(NSInteger)to Text:(NSString *)theText
{
if ( from > to || from < 0 || to < 0 || to >= [tokens count] ) {
-        @throw [ANTLRRuntimeException newANTLRIllegalArgumentException:[NSString stringWithFormat:@"replace: range invalid: %d..%d size=%d\n", from, to, [tokens count]]];
+        @throw [ANTLRIllegalArgumentException newException:[NSString stringWithFormat:@"replace: range invalid: %d..%d size=%d\n", from, to, [tokens count]]];
}
ANTLRRewriteOperation *op = [ANTLRReplaceOp newANTLRReplaceOp:from ToIndex:to Text:theText];
ANTLRHashMap *rewrites = (ANTLRHashMap *)[lastRewriteTokenIndexes getName:programName];
@@ -495,9 +495,9 @@ extern NSInteger debug;
if ( end == [tokens count]-1 ) {
// Scan any remaining operations after last token
// should be included (they will be inserts).
-        int i = 0;
-        while ( i < [indexToOp count] - 1 ) {
-            ANTLRRewriteOperation *op = [indexToOp objectAtIndex:i];
+        int i2 = 0;
+        while ( i2 < [indexToOp count] - 1 ) {
+            ANTLRRewriteOperation *op = [indexToOp objectAtIndex:i2];
if ( op.index >= [tokens count]-1 ) {
[buf appendString:op.text];
}
@@ -586,7 +586,7 @@ extern NSInteger debug;
BOOL disjoint = prevRop.lastIndex<rop.index || prevRop.index > rop.lastIndex;
BOOL same = prevRop.index==rop.index && prevRop.lastIndex==rop.lastIndex;
if ( !disjoint && !same ) {
-                @throw [ANTLRRuntimeException newANTLRIllegalArgumentException:
+                @throw [ANTLRIllegalArgumentException newException:
[NSString stringWithFormat:@"replace op boundaries of %@, overlap with previous %@\n", rop, prevRop]];
}
}
@@ -622,7 +622,7 @@ extern NSInteger debug;
continue;
}
if ( iop.index >= rop.index && iop.index <= rop.lastIndex ) {
-                @throw [ANTLRRuntimeException newANTLRIllegalArgumentException:[NSString stringWithFormat:@"insert op %d within boundaries of previous %d", iop, rop]];
+                @throw [ANTLRIllegalArgumentException newException:[NSString stringWithFormat:@"insert op %d within boundaries of previous %d", iop, rop]];
}
}
}
@@ -633,7 +633,7 @@ extern NSInteger debug;
if ( op == nil )
continue; // ignore deleted ops
if ( [m objectAtIndex:op.index] != nil ) {
-            @throw [ANTLRRuntimeException newANTLRRuntimeException:@"should only be one op per index\n"];
+            @throw [ANTLRRuntimeException newException:@"should only be one op per index\n"];
}
//[m put(new Integer(op.index), op);
[m setObject:op atIndex:op.index];
diff --git a/runtime/ObjC/Framework/ANTLRTokenSource.h b/runtime/ObjC/Framework/ANTLRTokenSource.h
index 4d6b6ee..ca1fa2b 100644
--- a/runtime/ObjC/Framework/ANTLRTokenSource.h
+++ b/runtime/ObjC/Framework/ANTLRTokenSource.h
@@ -35,4 +35,4 @@
- (id<ANTLRToken>) nextToken;
- (NSString *)getSourceName;

-@end
\ No newline at end of file
+@end
diff --git a/runtime/ObjC/Framework/ANTLRTree.m b/runtime/ObjC/Framework/ANTLRTree.m
index db282e6..4d9edaa 100644
--- a/runtime/ObjC/Framework/ANTLRTree.m
+++ b/runtime/ObjC/Framework/ANTLRTree.m
@@ -29,12 +29,13 @@
// TODO: this shouldn't be here...but needed for invalidNode
#import "ANTLRCommonTree.h"

-@interface ANTLRTree (TreeMaintenance)
-- (void) _createChildrenList;
-@end
-
@implementation ANTLRTree

+@synthesize isEmpty;
+@synthesize isEmptyNode;
+@synthesize invalidNode;
+@synthesize children;
+
#pragma mark ANTLRTree protocol conformance

+ (id<ANTLRTree>) invalidNode
@@ -48,7 +49,8 @@

- (id<ANTLRTree>) init
{
-	if ((self = [super init]) != nil) {
+	self = [super init];
+	if ( self != nil ) {
isEmptyNode = NO;
}
return self;
@@ -136,15 +138,12 @@
return @"";
}

-
-@end
-
-@implementation ANTLRTree (TreeMaintenance)
-
- (void) _createChildrenList
{
-	if (!children)
+	if ( children == nil )
children = [[NSMutableArray alloc] init];
}

+@end
+
@end
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/ANTLRTreeAdaptor.h b/runtime/ObjC/Framework/ANTLRTreeAdaptor.h
index e6579cf..41af6da 100644
--- a/runtime/ObjC/Framework/ANTLRTreeAdaptor.h
+++ b/runtime/ObjC/Framework/ANTLRTreeAdaptor.h
@@ -34,13 +34,143 @@

#pragma mark Construction

-+ (id<ANTLRTree>) newEmptyTree;
+#pragma mark ANTLRTreeAdaptor implementation
+- (id<ANTLRBaseTree>)dupNode:(id<ANTLRBaseTree>)aNode;	// copies just the node
+- (id<ANTLRBaseTree>)dupTree:(id<ANTLRBaseTree>)aTree;	// copies the entire subtree, recursively
+
+/** Return a nil node (an empty but non-null node) that can hold
+ *  a list of element as the children.  If you want a flat tree (a list)
+ *  use "t=adaptor.nil(); t.addChild(x); t.addChild(y);"
+ */
+- (id) emptyNode;

-- (id<ANTLRTree>) createTree:(id<ANTLRToken>)payload;
+/** Return a tree node representing an error.  This node records the
+ *  tokens consumed during error recovery.  The start token indicates the
+ *  input symbol at which the error was detected.  The stop token indicates
+ *  the last symbol consumed during recovery.
+ *
+ *  You must specify the input stream so that the erroneous text can
+ *  be packaged up in the error node.  The exception could be useful
+ *  to some applications; default implementation stores ptr to it in
+ *  the CommonErrorNode.
+ *
+ *  This only makes sense during token parsing, not tree parsing.
+ *  Tree parsing should happen only when parsing and tree construction
+ *  succeed.
+ */
+- (id) errorNode:(id<ANTLRTokenStream>)anInput
+            From:(id<ANTLRToken>)aStartToken
+              To:(id<ANTLRToken>)aStopToken
+       Exception:(NSException *) e;
+
+/** Is tree considered a nil node used to make lists of child nodes? */
+- (BOOL) isNil:(id<ANTLRBaseTree>)aTree;
+
+
+- (void) addChild:(id<ANTLRBaseTree>)child toTree:(id<ANTLRBaseTree>)aTree;
+
+/** If oldRoot is a nil root, just copy or move the children to newRoot.
+ *  If not a nil root, make oldRoot a child of newRoot.
+ *
+ *    old=^(nil a b c), new=r yields ^(r a b c)
+ *    old=^(a b c), new=r yields ^(r ^(a b c))
+ *
+ *  If newRoot is a nil-rooted single child tree, use the single
+ *  child as the new root node.
+ *
+ *    old=^(nil a b c), new=^(nil r) yields ^(r a b c)
+ *    old=^(a b c), new=^(nil r) yields ^(r ^(a b c))
+ *
+ *  If oldRoot was null, it's ok, just return newRoot (even if isNil).
+ *
+ *    old=null, new=r yields r
+ *    old=null, new=^(nil r) yields ^(nil r)
+ *
+ *  Return newRoot.  Throw an exception if newRoot is not a
+ *  simple node or nil root with a single child node--it must be a root
+ *  node.  If newRoot is ^(nil x) return x as newRoot.
+ *
+ *  Be advised that it's ok for newRoot to point at oldRoot's
+ *  children; i.e., you don't have to copy the list.  We are
+ *  constructing these nodes so we should have this control for
+ *  efficiency.
+ */
+- (id) becomeRoot:(id<ANTLRBaseTree>)newRoot old:(id<ANTLRBaseTree>)oldRoot;
+
+- (id) rulePostProcessing:(id<ANTLRBaseTree>)root;
+
+#pragma mark Rewrite Rules
+
+- (NSUInteger) getUniqueID:(id<ANTLRBaseTree>)aNode;
+
+- (id<ANTLRBaseTree>) createTreeFromToken:(id<ANTLRToken>)payload;
+- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType FromToken:(id<ANTLRToken>)fromToken;
+- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType FromToken:(id<ANTLRToken>)fromToken Text:(NSString *)text;
+- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType Text:(NSString *)text;
+
+#pragma mark Content
+
+- (id<ANTLRBaseTree>)dupNode:(id<ANTLRBaseTree>)aNode;
+- (id<ANTLRBaseTree>)dupTree:(id<ANTLRBaseTree>)aTree;
+
+- (NSInteger) getType:(id<ANTLRBaseTree>)aNode;
+- (void) setType:(id<ANTLRBaseTree>)aNode Type:(NSInteger)tokenType;
+
+- (NSString *) getText:(id<ANTLRBaseTree>)aNode;
+- (void) setText:(id<ANTLRBaseTree>)aNode Text:(NSString *)tokenText;
+
+- (id<ANTLRToken>) getToken:(id<ANTLRBaseTree>)t;
+
+- (void) setTokenBoundaries:(id<ANTLRBaseTree>)aTree From:(id<ANTLRToken>)startToken To:(id<ANTLRToken>)stopToken;
+- (NSInteger) getTokenStartIndex:(id<ANTLRBaseTree>)aTree;
+- (NSInteger) getTokenStopIndex:(id<ANTLRBaseTree>)aTree;
+
+#pragma mark Navigation / Tree Parsing
+
+/** Get a child 0..n-1 node */
+- (id<ANTLRBaseTree>) getChild:(id<ANTLRBaseTree>)aNode At:(NSInteger) i;
+/** Set ith child (0..n-1) to t; t must be non-null and non-nil node */
+- (void) setChild:(id<ANTLRBaseTree>)aTree At:(NSInteger)index Child:(id<ANTLRBaseTree>)child;
+/** Remove ith child and shift children down from right. */
+- (id<ANTLRBaseTree>) deleteChild:(id<ANTLRBaseTree>)t Index:(NSInteger)index;
+
+/** How many children?  If 0, then this is a leaf node */
+- (NSInteger) getChildCount:(id<ANTLRBaseTree>) aTree;
+
+/** Who is the parent node of this node; if null, implies node is root.
+ *  If your node type doesn't handle this, it's ok but the tree rewrites
+ *  in tree parsers need this functionality.
+ */
+- (id<ANTLRBaseTree>)getParent:(id<ANTLRBaseTree>)t;
+- (void) setParent:(id<ANTLRBaseTree>)t With:(id<ANTLRBaseTree>)parent;
+
+/** What index is this node in the child list? Range: 0..n-1
+ *  If your node type doesn't handle this, it's ok but the tree rewrites
+ *  in tree parsers need this functionality.
+ */
+- (NSInteger) getChildIndex:(id<ANTLRBaseTree>)t;
+- (void) setChildIndex:(id<ANTLRBaseTree>)t With:(NSInteger)index;
+
+- (void) replaceChildren:(id<ANTLRBaseTree>)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id<ANTLRBaseTree>)t;
+
+@end
+
+@interface ANTLRTreeAdaptor : NSObject {
+
+}
+
++ (id) newAdaptor;
+- (id) init;
+
+#pragma mark Construction
+
++ (id<ANTLRBaseTree>) newEmptyTree;
+
+- (id<ANTLRBaseTree>) createTree:(id<ANTLRToken>)payload;

#pragma mark ANTLRTreeAdaptor implementation
-- (id<ANTLRTree>)dupNode:(id<ANTLRTree>)aNode;	// copies just the node
-- (id<ANTLRTree>)dupTree:(id<ANTLRTree>)aTree;	// copies the entire subtree, recursively
+- (id<ANTLRBaseTree>)dupNode:(id<ANTLRBaseTree>)aNode;	// copies just the node
+- (id<ANTLRBaseTree>)dupTree:(id<ANTLRBaseTree>)aTree;	// copies the entire subtree, recursively

/** Return a nil node (an empty but non-null node) that can hold
*  a list of element as the children.  If you want a flat tree (a list)
@@ -68,10 +198,10 @@
Exception:(NSException *) e;

/** Is tree considered a nil node used to make lists of child nodes? */
-- (BOOL) isNil:(id<ANTLRTree>)aTree;
+- (BOOL) isNil:(id<ANTLRBaseTree>)aTree;


-- (void) addChild:(id<ANTLRTree>)child toTree:(id<ANTLRTree>)aTree;
+- (void) addChild:(id<ANTLRBaseTree>)child toTree:(id<ANTLRBaseTree>)aTree;

/** If oldRoot is a nil root, just copy or move the children to newRoot.
*  If not a nil root, make oldRoot a child of newRoot.
@@ -99,61 +229,62 @@
*  constructing these nodes so we should have this control for
*  efficiency.
*/
-- (id) becomeRoot:(id<ANTLRTree>)newRoot old:(id<ANTLRTree>)oldRoot;
+- (id) becomeRoot:(id<ANTLRBaseTree>)newRoot old:(id<ANTLRBaseTree>)oldRoot;

-- (id) rulePostProcessing:(id<ANTLRTree>)root;
+- (id) rulePostProcessing:(id<ANTLRBaseTree>)root;

#pragma mark Rewrite Rules
-
-- (NSUInteger) getUniqueID:(id<ANTLRTree>)aNode;

-- (id<ANTLRTree>) createTree:(NSInteger)tokenType FromToken:(id<ANTLRToken>)fromToken;
-- (id<ANTLRTree>) createTree:(NSInteger)tokenType FromToken:(id<ANTLRToken>)fromToken Text:(NSString *)text;
-- (id<ANTLRTree>) createTree:(NSInteger)tokenType Text:(NSString *)text;
+- (NSUInteger) getUniqueID:(id<ANTLRBaseTree>)aNode;
+
+- (id<ANTLRBaseTree>) create:(id<ANTLRToken>)payload;
+- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType FromToken:(id<ANTLRToken>)fromToken;
+- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType FromToken:(id<ANTLRToken>)fromToken Text:(NSString *)text;
+- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType Text:(NSString *)text;

#pragma mark Content

-- (id<ANTLRTree>)dupNode:(id<ANTLRTree>)aNode;
-- (id<ANTLRTree>)dupTree:(id<ANTLRTree>)aTree;
+- (id<ANTLRBaseTree>)dupNode:(id<ANTLRBaseTree>)aNode;
+- (id<ANTLRBaseTree>)dupTree:(id<ANTLRBaseTree>)aTree;

-- (NSInteger) getType:(id<ANTLRTree>)aNode;
-- (void) setType:(id<ANTLRTree>)aNode Type:(NSInteger)tokenType;
+- (NSInteger) getType:(id<ANTLRBaseTree>)aNode;
+- (void) setType:(id<ANTLRBaseTree>)aNode Type:(NSInteger)tokenType;

-- (NSString *) getText:(id<ANTLRTree>)aNode;
-- (void) setText:(id<ANTLRTree>)aNode Text:(NSString *)tokenText;
+- (NSString *) getText:(id<ANTLRBaseTree>)aNode;
+- (void) setText:(id<ANTLRBaseTree>)aNode Text:(NSString *)tokenText;

-- (id<ANTLRToken>) getToken:(id<ANTLRTree>)t;
+- (id<ANTLRToken>) getToken:(id<ANTLRBaseTree>)t;

-- (void) setTokenBoundaries:(id<ANTLRTree>)aTree From:(id<ANTLRToken>)startToken To:(id<ANTLRToken>)stopToken;
-- (NSInteger) getTokenStartIndex:(id<ANTLRTree>)aTree;
-- (NSInteger) getTokenStopIndex:(id<ANTLRTree>)aTree;
+- (void) setTokenBoundaries:(id<ANTLRBaseTree>)aTree From:(id<ANTLRToken>)startToken To:(id<ANTLRToken>)stopToken;
+- (NSInteger) getTokenStartIndex:(id<ANTLRBaseTree>)aTree;
+- (NSInteger) getTokenStopIndex:(id<ANTLRBaseTree>)aTree;

#pragma mark Navigation / Tree Parsing

/** Get a child 0..n-1 node */
-- (id<ANTLRTree>) getChild:(id<ANTLRTree>)aNode At:(NSInteger) i;
+- (id<ANTLRBaseTree>) getChild:(id<ANTLRBaseTree>)aNode At:(NSInteger) i;
/** Set ith child (0..n-1) to t; t must be non-null and non-nil node */
-- (void) setChild:(id<ANTLRTree>)aTree At:(NSInteger)index Child:(id<ANTLRTree>)child;
+- (void) setChild:(id<ANTLRBaseTree>)aTree At:(NSInteger)index Child:(id<ANTLRBaseTree>)child;
/** Remove ith child and shift children down from right. */
-- (id<ANTLRTree>) deleteChild:(id<ANTLRTree>)t Index:(NSInteger)index;
+- (id<ANTLRBaseTree>) deleteChild:(id<ANTLRBaseTree>)t Index:(NSInteger)index;

/** How many children?  If 0, then this is a leaf node */
-- (NSInteger) getChildCount:(id<ANTLRTree>) aTree;
+- (NSInteger) getChildCount:(id<ANTLRBaseTree>) aTree;

/** Who is the parent node of this node; if null, implies node is root.
*  If your node type doesn't handle this, it's ok but the tree rewrites
*  in tree parsers need this functionality.
*/
-- (id<ANTLRTree>)getParent:(id<ANTLRTree>)t;
-- (void) setParent:(id<ANTLRTree>)t With:(id<ANTLRTree>)parent;
+- (id<ANTLRBaseTree>)getParent:(id<ANTLRBaseTree>)t;
+- (void) setParent:(id<ANTLRBaseTree>)t With:(id<ANTLRBaseTree>)parent;

/** What index is this node in the child list? Range: 0..n-1
*  If your node type doesn't handle this, it's ok but the tree rewrites
*  in tree parsers need this functionality.
*/
-- (NSInteger) getChildIndex:(id<ANTLRTree>)t;
-- (void) setChildIndex:(id<ANTLRTree>)t With:(NSInteger)index;
+- (NSInteger) getChildIndex:(id<ANTLRBaseTree>)t;
+- (void) setChildIndex:(id<ANTLRBaseTree>)t With:(NSInteger)index;

-- (void) replaceChildren:(id<ANTLRTree>)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id<ANTLRTree>)t;
+- (void) replaceChildren:(id<ANTLRBaseTree>)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id<ANTLRBaseTree>)t;

@end
diff --git a/runtime/ObjC/Framework/ANTLRTreeAdaptor.m b/runtime/ObjC/Framework/ANTLRTreeAdaptor.m
index b2dadee..d409f25 100644
--- a/runtime/ObjC/Framework/ANTLRTreeAdaptor.m
+++ b/runtime/ObjC/Framework/ANTLRTreeAdaptor.m
@@ -31,89 +31,133 @@
@implementation ANTLRTreeAdaptor


-+ (id<ANTLRTree>) newEmptyTree
++ (id<ANTLRBaseTree>) newEmptyTree
{
-	return [self newTreeWithToken:nil];
+	return [ANTLRTreeAdaptor newTreeWithToken:nil];
}

-+ (id<ANTLRTree>) newTreeWithToken:(id<ANTLRToken>) payload
++ (id) newAdaptor
{
-    ANTLRTreeAdaptor *ATA;
-    ATA = [[ANTLRTreeAdaptor alloc] initWith:payload];
-    return ATA;
+    return [[ANTLRTreeAdaptor alloc] init];
+}
+
+- (id) init
+{
+    self = [super init];
+    return self;
+}
+
+- (id) initWithPayload:(id<ANTLRToken>)payload
+{
+    self = [super init];
+    return self;
}

#pragma mark Rewrite Rules

-- (id<ANTLRTree>) newTreeWithTokenType:(NSInteger)tokenType
+/** Create a tree node from Token object; for CommonTree type trees,
+ *  then the token just becomes the payload.  This is the most
+ *  common create call.
+ *
+ *  Override if you want another kind of node to be built.
+ */
+- (id<ANTLRBaseTree>) create:(id<ANTLRToken>) payload
{
-	id<ANTLRToken> newToken = [self newTokenWithTokenType:tokenType text:nil];
-
-	id<ANTLRTree> newTree = [self newTreeWithToken:newToken];
-	[newToken release];
-	return newTree;
+    return nil;
}

-- (id<ANTLRTree>) newTreeWithTokenType:(NSInteger)tokenType text:(NSString *)tokenText
+- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType
{
-	id<ANTLRToken> newToken = [self newTokenWithTokenType:tokenType text:tokenText];
+	id<ANTLRToken> newToken = [self createToken:tokenType text:nil];

-	id<ANTLRTree> newTree = [self newTreeWithToken:newToken];
+	id<ANTLRBaseTree> newTree = [self create:newToken];
[newToken release];
return newTree;
}

-- (id<ANTLRTree>) newTreeWithToken:(id<ANTLRToken>)fromToken tokenType:(NSInteger)tokenType
+/** Create a new node derived from a token, with a new token type.
+ *  This is invoked from an imaginary node ref on right side of a
+ *  rewrite rule as IMAG[$tokenLabel].
+ *
+ *  This should invoke createToken(Token).
+ */
+- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType fromToken:(id<ANTLRToken>)fromToken
{
-	id<ANTLRToken> newToken = [self newTokenWithToken:fromToken];
+	id<ANTLRToken> newToken = [self createToken:fromToken];
[newToken setType:tokenType];

-	id<ANTLRTree> newTree = [self newTreeWithToken:newToken];
+	id<ANTLRBaseTree> newTree = [self create:newToken];
[newToken release];
return newTree;
}

-- (id<ANTLRTree>) newTreeWithToken:(id<ANTLRToken>)fromToken tokenType:(NSInteger)tokenType text:(NSString *)tokenText
+/** Create a new node derived from a token, with a new token type.
+ *  This is invoked from an imaginary node ref on right side of a
+ *  rewrite rule as IMAG[$tokenLabel].
+ *
+ *  This should invoke createToken(Token).
+ */
+- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType fromToken:(id<ANTLRToken>)fromToken text:(NSString *)tokenText
{
-	id<ANTLRToken> newToken = [self newTokenWithToken:fromToken];
+	id<ANTLRToken> newToken = [self createToken:fromToken];
+	[newToken setText:tokenText];
+
+	id<ANTLRBaseTree> newTree = [self create:newToken];
+	[newToken release];
+	return newTree;
+}
+
+/** Same as create(tokenType,fromToken) except set the text too.
+ *  This is invoked from an imaginary node ref on right side of a
+ *  rewrite rule as IMAG[$tokenLabel, "IMAG"].
+ *
+ *  This should invoke createToken(Token).
+ */
+- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType text:(NSString *)tokenText
+{
+	id<ANTLRToken> newToken = [self createToken:tokenType text:tokenText];
[newToken setType:tokenType];
[newToken setText:tokenText];

-	id<ANTLRTree> newTree = [self newTreeWithToken:newToken];
+	id<ANTLRBaseTree> newTree = [self create:newToken];
[newToken release];
return newTree;
}

-- (id<ANTLRTree>) newTreeWithToken:(id<ANTLRToken>)fromToken text:(NSString *)tokenText
+/** Create a new node derived from a token, with a new token type.
+ *  This is invoked from an imaginary node ref on right side of a
+ *  rewrite rule as IMAG["IMAG"].
+ *
+ *  This should invoke createToken(int,String).
+ */
+- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType text:(NSString *)tokenText
{
-	id<ANTLRToken> newToken = [self newTokenWithToken:fromToken];
-	[newToken setText:tokenText];
+	id<ANTLRToken> newToken = [self createToken:tokenType text:tokenText];

-	id<ANTLRTree> newTree = [self newTreeWithToken:newToken];
+	id<ANTLRBaseTree> newTree = [self create:newToken];
[newToken release];
return newTree;
}

-
-- (id) copyNode:(id<ANTLRTree>)aNode
+- (id) copyNode:(id<ANTLRBaseTree>)aNode
{
return [aNode copyWithZone:nil];	// not -copy: to silence warnings
}

-- (id) copyTree:(id<ANTLRTree>)aTree
+- (id) copyTree:(id<ANTLRBaseTree>)aTree
{
return [aTree deepCopy];
}


-- (void) addChild:(id<ANTLRTree>)child toTree:(id<ANTLRTree>)aTree
+- (void) addChild:(id<ANTLRBaseTree>)child toTree:(id<ANTLRBaseTree>)aTree
{
[aTree addChild:child];
}

-- (id) makeNode:(id<ANTLRTree>)newRoot parentOf:(id<ANTLRTree>)oldRoot
+- (id) makeNode:(id<ANTLRBaseTree>)newRoot parentOf:(id<ANTLRBaseTree>)oldRoot
{
-	id<ANTLRTree> newRootNode = newRoot;
+	id<ANTLRBaseTree> newRootNode = newRoot;

if (oldRoot == nil)
return newRootNode;
@@ -125,7 +169,7 @@
}
#warning TODO: double check memory management with respect to code generation
// remove the empty node, placing its sole child in its role.
-		id<ANTLRTree> tmpRootNode = [[newRootNode childAtIndex:0] retain];
+		id<ANTLRBaseTree> tmpRootNode = [[newRootNode childAtIndex:0] retain];
[newRootNode release];
newRootNode = tmpRootNode;
}
@@ -142,9 +186,9 @@
}


-- (id<ANTLRTree>) postProcessTree:(id<ANTLRTree>)aTree
+- (id<ANTLRBaseTree>) postProcessTree:(id<ANTLRBaseTree>)aTree
{
-	id<ANTLRTree> processedNode = aTree;
+	id<ANTLRBaseTree> processedNode = aTree;
if (aTree != nil && [aTree isNil] != NO && [aTree getChildCount] == 1) {
processedNode = [aTree childAtIndex:0];
}
@@ -152,7 +196,7 @@
}


-- (NSUInteger) uniqueIdForTree:(id<ANTLRTree>)aNode
+- (NSUInteger) uniqueIdForTree:(id<ANTLRBaseTree>)aNode
{
// TODO: is hash appropriate here?
return [aNode hash];
@@ -161,7 +205,7 @@

#pragma mark Content

-- (NSInteger) tokenTypeForNode:(id<ANTLRTree>)aNode
+- (NSInteger) tokenTypeForNode:(id<ANTLRBaseTree>)aNode
{
return [aNode getType];
}
@@ -172,12 +216,12 @@
}


-- (NSString *) textForNode:(id<ANTLRTree>)aNode
+- (NSString *) textForNode:(id<ANTLRBaseTree>)aNode
{
return [aNode getText];
}

-- (void) setText:(NSString *)tokenText forNode:(id<ANTLRTree>)aNode
+- (void) setText:(NSString *)tokenText forNode:(id<ANTLRBaseTree>)aNode
{
// currently unimplemented
}
@@ -185,13 +229,13 @@

#pragma mark Navigation / Tree Parsing

-- (id<ANTLRTree>) childForNode:(id<ANTLRTree>) aNode atIndex:(NSInteger) i
+- (id<ANTLRBaseTree>) childForNode:(id<ANTLRBaseTree>) aNode atIndex:(NSInteger) i
{
// currently unimplemented
return nil;
}

-- (NSInteger) childCountForTree:(id<ANTLRTree>) aTree
+- (NSInteger) childCountForTree:(id<ANTLRBaseTree>) aTree
{
// currently unimplemented
return 0;
@@ -199,36 +243,18 @@

#pragma mark Subclass Responsibilties

-- (id<ANTLRTree>) newTreeWithToken:(id<ANTLRToken>) payload
-{
-	// subclass responsibility
-	return nil;
-}
-
-- (id<ANTLRToken>) newTokenWithToken:(id<ANTLRToken>)fromToken
-{
-	// subclass responsibility
-	return nil;
-}
-
-- (id<ANTLRToken>) newTokenWithTokenType:(NSInteger)tokenType text:(NSString *)tokenText
-{
-	// subclass responsibility
-	return nil;
-}
-
-- (void) setBoundariesForTree:(id<ANTLRTree>)aTree fromToken:(id<ANTLRToken>)startToken toToken:(id<ANTLRToken>)stopToken
+- (void) setBoundariesForTree:(id<ANTLRBaseTree>)aTree fromToken:(id<ANTLRToken>)startToken toToken:(id<ANTLRToken>)stopToken
{
// subclass responsibility
}

-- (NSInteger) tokenStartIndexForTree:(id<ANTLRTree>)aTree
+- (NSInteger) tokenStartIndexForTree:(id<ANTLRBaseTree>)aTree
{
// subclass responsibility
return 0;
}

-- (NSInteger) tokenStopIndexForTree:(id<ANTLRTree>)aTree
+- (NSInteger) tokenStopIndexForTree:(id<ANTLRBaseTree>)aTree
{
// subclass responsibility
return 0;
diff --git a/runtime/ObjC/Framework/ANTLRTreeException.h b/runtime/ObjC/Framework/ANTLRTreeException.h
index 8ec5c45..28330af 100644
--- a/runtime/ObjC/Framework/ANTLRTreeException.h
+++ b/runtime/ObjC/Framework/ANTLRTreeException.h
@@ -29,14 +29,14 @@
#import "ANTLRRecognitionException.h"

@interface ANTLRTreeException : ANTLRRecognitionException {
-	id<ANTLRTree> oldRoot;
-	id<ANTLRTree> newRoot;
+	id<ANTLRBaseTree> oldRoot;
+	id<ANTLRBaseTree> newRoot;
}

-+ (id) exceptionWithOldRoot:(id<ANTLRTree>)theOldRoot newRoot:(id<ANTLRTree>)theNewRoot stream:(id<ANTLRIntStream>)aStream;
-- (id) initWithOldRoot:(id<ANTLRTree>)theOldRoot newRoot:(id<ANTLRTree>)theNewRoot stream:(id<ANTLRIntStream>)aStream;
++ (id) newException:(id<ANTLRBaseTree>)theOldRoot newRoot:(id<ANTLRBaseTree>)theNewRoot stream:(id<ANTLRIntStream>)aStream;
+- (id) initWithOldRoot:(id<ANTLRBaseTree>)theOldRoot newRoot:(id<ANTLRBaseTree>)theNewRoot stream:(id<ANTLRIntStream>)aStream;

-- (void) setOldRoot:(id<ANTLRTree>)aTree;
-- (void) setNewRoot:(id<ANTLRTree>)aTree;
+- (void) setOldRoot:(id<ANTLRBaseTree>)aTree;
+- (void) setNewRoot:(id<ANTLRBaseTree>)aTree;

@end
diff --git a/runtime/ObjC/Framework/ANTLRTreeException.m b/runtime/ObjC/Framework/ANTLRTreeException.m
index 4c009ad..8d78e7f 100644
--- a/runtime/ObjC/Framework/ANTLRTreeException.m
+++ b/runtime/ObjC/Framework/ANTLRTreeException.m
@@ -35,12 +35,12 @@

@implementation ANTLRTreeException

-+ (id) exceptionWithOldRoot:(id<ANTLRTree>)theOldRoot newRoot:(id<ANTLRTree>)theNewRoot stream:(id<ANTLRIntStream>)aStream;
++ (id) newException:(id<ANTLRBaseTree>)theOldRoot newRoot:(id<ANTLRBaseTree>)theNewRoot stream:(id<ANTLRIntStream>)aStream;
{
return [[ANTLRTreeException alloc] initWithOldRoot:theOldRoot newRoot:theNewRoot stream:aStream];
}

-- (id) initWithOldRoot:(id<ANTLRTree>)theOldRoot newRoot:(id<ANTLRTree>)theNewRoot stream:(id<ANTLRIntStream>)aStream;
+- (id) initWithOldRoot:(id<ANTLRBaseTree>)theOldRoot newRoot:(id<ANTLRBaseTree>)theNewRoot stream:(id<ANTLRIntStream>)aStream;
{
if ((self = [super initWithStream:aStream reason:@"The new root has more than one child. Cannot make it the root node."]) != nil ) {
[self setOldRoot:theOldRoot];
@@ -56,7 +56,7 @@
[super dealloc];
}

-- (void) setNewRoot:(id<ANTLRTree>)aTree
+- (void) setNewRoot:(id<ANTLRBaseTree>)aTree
{
if (newRoot != aTree) {
[aTree retain];
@@ -65,7 +65,7 @@
}
}

-- (void) setOldRoot:(id<ANTLRTree>)aTree
+- (void) setOldRoot:(id<ANTLRBaseTree>)aTree
{
if (oldRoot != aTree) {
[aTree retain];
diff --git a/runtime/ObjC/Framework/ANTLRTreeIterator.h b/runtime/ObjC/Framework/ANTLRTreeIterator.h
index e6d5e71..7798418 100644
--- a/runtime/ObjC/Framework/ANTLRTreeIterator.h
+++ b/runtime/ObjC/Framework/ANTLRTreeIterator.h
@@ -38,30 +38,35 @@
@interface ANTLRTreeIterator : NSObject
{
id<ANTLRTreeAdaptor> adaptor;
-	id<ANTLRTree> root;
-	id<ANTLRTree> tree;
+	id<ANTLRBaseTree> root;
+	id<ANTLRBaseTree> tree;
BOOL firstTime;
-	id<ANTLRTree> up;
-	id<ANTLRTree> down;
-	id<ANTLRTree> eof;
+	id<ANTLRBaseTree> up;
+	id<ANTLRBaseTree> down;
+	id<ANTLRBaseTree> eof;

ANTLRFastQueue *nodes;
}

-@property(retain, readwrite) id<ANTLRTree> up;
-@property(retain, readwrite) id<ANTLRTree> down;
-@property(retain, readwrite) id<ANTLRTree> eof;
+@property(retain, readwrite) id<ANTLRBaseTree> up;
+@property(retain, readwrite) id<ANTLRBaseTree> down;
+@property(retain, readwrite) id<ANTLRBaseTree> eof;

+ newANTRLTreeIterator;
+ (ANTLRTreeIterator *) newANTRLTreeIteratorWithAdaptor:(ANTLRCommonTreeAdaptor *)adaptor
-                                                andTree:(id<ANTLRTree>)tree;
+                                                andTree:(id<ANTLRBaseTree>)tree;
- (id) init;
-- (id) initWithTree:(id<ANTLRTree>) t;
-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>) a andTree:(id<ANTLRTree>) t;
+- (id) initWithTree:(id<ANTLRBaseTree>) t;
+- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>) a andTree:(id<ANTLRBaseTree>) t;

- (void) reset;
- (BOOL) hasNext;
- (id) nextObject;
- (NSArray *) allObjects;

+@property (retain) id<ANTLRTreeAdaptor> adaptor;
+@property (retain) id<ANTLRBaseTree> root;
+@property (retain) id<ANTLRBaseTree> tree;
+@property BOOL firstTime;
+@property (retain) ANTLRFastQueue *nodes;
@end
diff --git a/runtime/ObjC/Framework/ANTLRTreeIterator.m b/runtime/ObjC/Framework/ANTLRTreeIterator.m
index 46835d3..083e75c 100644
--- a/runtime/ObjC/Framework/ANTLRTreeIterator.m
+++ b/runtime/ObjC/Framework/ANTLRTreeIterator.m
@@ -40,7 +40,7 @@
}

+ (ANTLRTreeIterator *) newANTRLTreeIteratorWithAdaptor:(ANTLRCommonTreeAdaptor *)adaptor
-                                                andTree:(id<ANTLRTree>)tree
+                                                andTree:(id<ANTLRBaseTree>)tree
{
return [[ANTLRTreeIterator alloc] initWithTreeAdaptor:adaptor andTree:tree];
}
@@ -59,12 +59,12 @@
return self;
}

--(id) initWithTree:(id<ANTLRTree>) t
+-(id) initWithTree:(id<ANTLRBaseTree>) t
{
return [self initWithTreeAdaptor:[ANTLRCommonTreeAdaptor newTreeAdaptor] andTree:t];
}

--(id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)a andTree:(id<ANTLRTree>)t
+-(id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)a andTree:(id<ANTLRBaseTree>)t
{
if ((self = [super init]) != nil) {
firstTime = YES;
@@ -128,7 +128,7 @@
return self.down;
}
// if no children, look for next sibling of ancestor
-	id<ANTLRTree> parent = [adaptor getParent:tree];
+	id<ANTLRBaseTree> parent = [adaptor getParent:tree];
while (parent != nil && ([adaptor getChildIndex:tree] + 1) >= [adaptor getChildCount:parent]) {
[nodes addObject:up];
tree = parent;
@@ -158,10 +158,15 @@

- (void)remove
{
-    @throw [ANTLRRuntimeException newANTLRRuntimeException:@"UnsupportedOperationException"];
+    @throw [ANTLRRuntimeException newException:@"ANTLRUnsupportedOperationException"];
}
@synthesize up;
@synthesize down;
@synthesize eof;

+@synthesize adaptor;
+@synthesize root;
+@synthesize tree;
+@synthesize firstTime;
+@synthesize nodes;
@end
diff --git a/runtime/ObjC/Framework/ANTLRTreeNodeStream.h b/runtime/ObjC/Framework/ANTLRTreeNodeStream.h
index be7a4ee..d14be70 100644
--- a/runtime/ObjC/Framework/ANTLRTreeNodeStream.h
+++ b/runtime/ObjC/Framework/ANTLRTreeNodeStream.h
@@ -35,7 +35,6 @@
@protocol ANTLRTreeNodeStream < ANTLRIntStream >

- (id) initWithTree:(ANTLRCommonTree *)theTree;
-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)theAdaptor Tree:(ANTLRCommonTree *)theTree;

- (id) getNode:(NSInteger) idx;
- (id) LT:(NSInteger)k;
diff --git a/runtime/ObjC/Framework/ANTLRTreeParser.m b/runtime/ObjC/Framework/ANTLRTreeParser.m
index 165aaa9..34fab50 100644
--- a/runtime/ObjC/Framework/ANTLRTreeParser.m
+++ b/runtime/ObjC/Framework/ANTLRTreeParser.m
@@ -73,7 +73,7 @@

- (void) mismatch:(id<ANTLRIntStream>)aStream tokenType:(ANTLRTokenType)aTType follow:(ANTLRBitSet *)aBitset
{
-	ANTLRMismatchedTreeNodeException *mte = [ANTLRMismatchedTreeNodeException newANTLRMismatchedTreeNodeException:aTType Stream:aStream];
+	ANTLRMismatchedTreeNodeException *mte = [ANTLRMismatchedTreeNodeException newException:aTType Stream:aStream];
[mte setNode:[((id<ANTLRTreeNodeStream>)aStream) LT:1]];
[self recoverFromMismatchedToken:aStream Type:aTType Follow:aBitset];
}
@@ -146,7 +146,7 @@
*/
- (id) recoverFromMismatchedToken:(id<ANTLRIntStream>)anInput Type:(NSInteger)ttype Follow:(ANTLRBitSet *)follow
{
-    @throw [ANTLRMismatchedTreeNodeException newANTLRMismatchedTreeNodeException:ttype Stream:anInput];
+    @throw [ANTLRMismatchedTreeNodeException newException:ttype Stream:anInput];
}

/** Prefix error message with the grammar name because message is
@@ -166,7 +166,7 @@
{
if ( [self isKindOfClass:[ANTLRTreeParser class]] ) {
id<ANTLRTreeAdaptor> adaptor = (id<ANTLRTreeAdaptor>)[((id<ANTLRTreeNodeStream>)e.input) getTreeAdaptor];
-        e.token = [adaptor getToken:((id<ANTLRTree>)e.node)];
+        e.token = [adaptor getToken:((id<ANTLRBaseTree>)e.node)];
if ( e.token == nil ) { // could be an UP/DOWN node
e.token = [ANTLRCommonToken newToken:[adaptor getType:e.node]
Text:[adaptor getText:e.node]];
diff --git a/runtime/ObjC/Framework/ANTLRTreePatternLexer.h b/runtime/ObjC/Framework/ANTLRTreePatternLexer.h
index f6059d3..629365d 100644
--- a/runtime/ObjC/Framework/ANTLRTreePatternLexer.h
+++ b/runtime/ObjC/Framework/ANTLRTreePatternLexer.h
@@ -66,13 +66,13 @@ BOOL error;

}

-@property (retain, getter=getPattern, setter=setPattern:) NSString *pattern;
-@property (getter=getP, setter=setP:) NSInteger p;
-@property (getter=getC, setter=setC:) NSInteger c;
-@property (getter=getN, setter=setN:) NSInteger n;
+@property (retain) NSString *pattern;
+@property (assign) NSInteger p;
+@property (assign) NSInteger c;
+@property (assign) NSInteger n;
@property (retain, getter=getSval, setter=setSval:) NSMutableData *sval;
-@property (assign, getter=getData, setter=setData:) char *data;
-@property (getter=getError, setter=setError) BOOL error;
+@property (assign) char *data;
+@property (assign) BOOL error;

+ (ANTLRTreePatternLexer *)newANTLRTreePatternLexer:(NSString *)aPattern;
- (id) init;
diff --git a/runtime/ObjC/Framework/ANTLRTreePatternLexer.m b/runtime/ObjC/Framework/ANTLRTreePatternLexer.m
index 847ed01..6932fcd 100644
--- a/runtime/ObjC/Framework/ANTLRTreePatternLexer.m
+++ b/runtime/ObjC/Framework/ANTLRTreePatternLexer.m
@@ -33,6 +33,14 @@

@implementation ANTLRTreePatternLexer

+@synthesize pattern;
+@synthesize p;
+@synthesize c;
+@synthesize n;
+@synthesize sval;
+@synthesize data;
+@synthesize error;
+
+ (ANTLRTreePatternLexer *)newANTLRTreePatternLexer:(NSString *)aPattern
{
return [[ANTLRTreePatternLexer alloc] initWithPattern:aPattern];
@@ -44,7 +52,7 @@
p = -1;
n = 0;
error = NO;
-        sval = [NSMutableData dataWithLength:1000];
+        sval = [[NSMutableData dataWithLength:1000] retain];
data = [sval mutableBytes];
pattern = @"";
n = [pattern length];
@@ -59,7 +67,7 @@
p = -1;
n = 0;
error = NO;
-        sval = [NSMutableData dataWithLength:1000];
+        sval = [[NSMutableData dataWithLength:1000] retain];
data = [sval mutableBytes];
pattern = aPattern;
n = [pattern length];
diff --git a/runtime/ObjC/Framework/ANTLRTreePatternParser.h b/runtime/ObjC/Framework/ANTLRTreePatternParser.h
index f6d6dc6..f3f82b6 100644
--- a/runtime/ObjC/Framework/ANTLRTreePatternParser.h
+++ b/runtime/ObjC/Framework/ANTLRTreePatternParser.h
@@ -50,8 +50,12 @@ id<ANTLRTreeAdaptor> adaptor;
- (id) initWithTokenizer:(ANTLRTreePatternLexer *)tokenizer
Wizard:(ANTLRTreeWizard *)aWizard
Adaptor:(id<ANTLRTreeAdaptor>)anAdaptor;
-- (id<ANTLRTree>) pattern;
-- (id<ANTLRTree>) parseTree;
-- (id<ANTLRTree>) parseNode;
+- (id<ANTLRBaseTree>) pattern;
+- (id<ANTLRBaseTree>) parseTree;
+- (id<ANTLRBaseTree>) parseNode;

+@property (retain) ANTLRTreePatternLexer *tokenizer;
+@property NSInteger ttype;
+@property (retain) ANTLRTreeWizard *wizard;
+@property (retain) id<ANTLRTreeAdaptor> adaptor;
@end
diff --git a/runtime/ObjC/Framework/ANTLRTreePatternParser.m b/runtime/ObjC/Framework/ANTLRTreePatternParser.m
index 41c693a..e421fc2 100644
--- a/runtime/ObjC/Framework/ANTLRTreePatternParser.m
+++ b/runtime/ObjC/Framework/ANTLRTreePatternParser.m
@@ -65,13 +65,13 @@
return self;
}

-- (id<ANTLRTree>)pattern
+- (id<ANTLRBaseTree>)pattern
{
if ( ttype==ANTLRLexerTokenTypeBEGIN ) {
return [self parseTree];
}
else if ( ttype==ANTLRLexerTokenTypeID ) {
-        id<ANTLRTree> node = [self parseNode];
+        id<ANTLRBaseTree> node = [self parseNode];
if ( ttype==ANTLRLexerTokenTypeEOF ) {
return node;
}
@@ -80,13 +80,13 @@
return nil;
}

-- (id<ANTLRTree>) parseTree
+- (id<ANTLRBaseTree>) parseTree
{
if ( ttype != ANTLRLexerTokenTypeBEGIN ) {
-        @throw [ANTLRRuntimeException newANTLRRuntimeException:@"no BEGIN"];
+        @throw [ANTLRRuntimeException newException:@"no BEGIN"];
}
ttype = [tokenizer nextToken];
-    id<ANTLRTree> root = [self parseNode];
+    id<ANTLRBaseTree> root = [self parseNode];
if ( root==nil ) {
return nil;
}
@@ -96,11 +96,11 @@
ttype==ANTLRLexerTokenTypeDOT )
{
if ( ttype==ANTLRLexerTokenTypeBEGIN ) {
-            id<ANTLRTree> subtree = [self parseTree];
+            id<ANTLRBaseTree> subtree = [self parseTree];
[adaptor addChild:subtree toTree:root];
}
else {
-            id<ANTLRTree> child = [self parseNode];
+            id<ANTLRBaseTree> child = [self parseNode];
if ( child == nil ) {
return nil;
}
@@ -108,16 +108,17 @@
}
}
if ( ttype != ANTLRLexerTokenTypeEND ) {
-        @throw [ANTLRRuntimeException newANTLRRuntimeException:@"no END"];
+        @throw [ANTLRRuntimeException newException:@"no END"];
}
ttype = [tokenizer nextToken];
return root;
}

-- (id<ANTLRTree>) parseNode
+- (id<ANTLRBaseTree>) parseNode
{
// "%label:" prefix
NSString *label = nil;
+    ANTLRTreePattern *node;
if ( ttype == ANTLRLexerTokenTypePERCENT ) {
ttype = [tokenizer nextToken];
if ( ttype != ANTLRLexerTokenTypeID ) {
@@ -135,7 +136,7 @@
if ( ttype == ANTLRLexerTokenTypeDOT ) {
ttype = [tokenizer nextToken];
id<ANTLRToken> wildcardPayload = [ANTLRCommonToken newToken:0 Text:@"."];
-        ANTLRTreePattern *node = [ANTLRWildcardTreePattern newANTLRWildcardTreePattern:wildcardPayload];
+        node = [ANTLRWildcardTreePattern newANTLRWildcardTreePattern:wildcardPayload];
if ( label != nil ) {
node.label = label;
}
@@ -149,7 +150,7 @@
NSString *tokenName = [tokenizer toString];
ttype = [tokenizer nextToken];
if ( [tokenName isEqualToString:@"nil"] ) {
-        return adaptor;
+        return [adaptor emptyNode];
}
NSString *text = tokenName;
// check for arg
@@ -165,7 +166,6 @@
if ( treeNodeType==ANTLRTokenTypeInvalid ) {
return nil;
}
-    id<ANTLRTree> node;
node = [adaptor createTree:treeNodeType Text:text];
if ( label!=nil && [node class] == [ANTLRTreePattern class] ) {
((ANTLRTreePattern *)node).label = label;
@@ -176,4 +176,8 @@
return node;
}

+@synthesize tokenizer;
+@synthesize ttype;
+@synthesize wizard;
+@synthesize adaptor;
@end
diff --git a/runtime/ObjC/Framework/ANTLRTreeRewriter.h b/runtime/ObjC/Framework/ANTLRTreeRewriter.h
index aee873e..7b64250 100644
--- a/runtime/ObjC/Framework/ANTLRTreeRewriter.h
+++ b/runtime/ObjC/Framework/ANTLRTreeRewriter.h
@@ -42,6 +42,8 @@

- (id)rule;

+@property (retain) id  actor;
+@property SEL ruleSEL;
@end

@interface ANTLRTreeRewriter : ANTLRTreeParser {
@@ -57,16 +59,20 @@
+ (ANTLRTreeRewriter *) newANTLRTreeRewriter:(id<ANTLRTreeNodeStream>)anInput State:(ANTLRRecognizerSharedState *)aState;
- (id)initWithStream:(id<ANTLRTreeNodeStream>)anInput;
- (id)initWithStream:(id<ANTLRTreeNodeStream>)anInput State:(ANTLRRecognizerSharedState *)aState;
-- (ANTLRTreeRewriter *) applyOnce:(id<ANTLRTree>)t Rule:(ANTLRfptr *)whichRule;
-- (ANTLRTreeRewriter *) applyRepeatedly:(id<ANTLRTree>)t Rule:(ANTLRfptr *)whichRule;
-- (ANTLRTreeRewriter *) downup:(id<ANTLRTree>)t;
-- (ANTLRTreeRewriter *) pre:(id<ANTLRTree>)t;
-- (ANTLRTreeRewriter *) post:(id<ANTLRTree>)t;
-- (ANTLRTreeRewriter *) downup:(id<ANTLRTree>)t XForm:(BOOL)aShowTransformations;
-- (void)reportTransformation:(id<ANTLRTree>)oldTree Tree:(id<ANTLRTree>)newTree;
+- (ANTLRTreeRewriter *) applyOnce:(id<ANTLRBaseTree>)t Rule:(ANTLRfptr *)whichRule;
+- (ANTLRTreeRewriter *) applyRepeatedly:(id<ANTLRBaseTree>)t Rule:(ANTLRfptr *)whichRule;
+- (ANTLRTreeRewriter *) downup:(id<ANTLRBaseTree>)t;
+- (ANTLRTreeRewriter *) pre:(id<ANTLRBaseTree>)t;
+- (ANTLRTreeRewriter *) post:(id<ANTLRBaseTree>)t;
+- (ANTLRTreeRewriter *) downup:(id<ANTLRBaseTree>)t XForm:(BOOL)aShowTransformations;
+- (void)reportTransformation:(id<ANTLRBaseTree>)oldTree Tree:(id<ANTLRBaseTree>)newTree;
- (ANTLRTreeRewriter *) topdown_fptr;
- (ANTLRTreeRewriter *) bottomup_ftpr;
- (ANTLRTreeRewriter *) topdown;
- (ANTLRTreeRewriter *) bottomup;

+@property BOOL showTransformations;
+@property (retain) id<ANTLRTokenStream> originalTokenStream;
+@property (retain) id<ANTLRTreeAdaptor> originalAdaptor;
+@property (retain) ANTLRfptr *rule;
@end
diff --git a/runtime/ObjC/Framework/ANTLRTreeRewriter.m b/runtime/ObjC/Framework/ANTLRTreeRewriter.m
index 6748330..6acf1d8 100644
--- a/runtime/ObjC/Framework/ANTLRTreeRewriter.m
+++ b/runtime/ObjC/Framework/ANTLRTreeRewriter.m
@@ -56,10 +56,12 @@
if ( [actor respondsToSelector:ruleSEL] )
return [actor performSelector:ruleSEL];
else
-        @throw [ANTLRRecognitionException newANTLRRuntimeException:@"Unknown Rewrite exception"];
+        @throw [ANTLRRecognitionException newException:@"Unknown Rewrite exception"];
return nil;
}

+@synthesize actor;
+@synthesize ruleSEL;
@end

@implementation ANTLRTreeRewriter
@@ -108,13 +110,13 @@
return self;
}

-- (ANTLRTreeRewriter *) applyOnce:(id<ANTLRTree>)t Rule:(ANTLRfptr *)whichRule
+- (ANTLRTreeRewriter *) applyOnce:(id<ANTLRBaseTree>)t Rule:(ANTLRfptr *)whichRule
{
if ( t == nil ) return nil;
@try {
// share TreeParser object but not parsing-related state
state = [ANTLRRecognizerSharedState newANTLRRecognizerSharedState];
-        input = [ANTLRCommonTreeNodeStream newANTLRCommonTreeNodeStream:(id<ANTLRTreeAdaptor>)originalAdaptor Tree:(id<ANTLRTree>)t];
+        input = [ANTLRCommonTreeNodeStream newANTLRCommonTreeNodeStream:(id<ANTLRTreeAdaptor>)originalAdaptor Tree:(id<ANTLRBaseTree>)t];
[(ANTLRCommonTreeNodeStream *)input setTokenStream:originalTokenStream];
[self setBacktrackingLevel:1];
ANTLRTreeRuleReturnScope *r = [(ANTLRfptr *)whichRule rule];
@@ -122,11 +124,11 @@
if ( [self getFailed] )
return t;
if ( showTransformations &&
-            r != nil && !(t == [r getNode]) && [r getNode] != nil ) {
-            [self reportTransformation:(id<ANTLRTree>)t Tree:[r getNode]];
+            r != nil && !(t == r.start) && r.start != nil ) {
+            [self reportTransformation:(id<ANTLRBaseTree>)t Tree:r.start];
}
-        if ( r != nil && [r getNode] != nil )
-            return [r getNode];
+        if ( r != nil && r.start != nil )
+            return r.start;
else
return t;
}
@@ -136,28 +138,28 @@
return t;
}

-- (ANTLRTreeRewriter *) applyRepeatedly:(id<ANTLRTree>)t Rule:(ANTLRfptr *)whichRule
+- (ANTLRTreeRewriter *) applyRepeatedly:(id<ANTLRBaseTree>)t Rule:(ANTLRfptr *)whichRule
{
BOOL treeChanged = true;
while ( treeChanged ) {
-        ANTLRTreeRewriter *u = [self applyOnce:(id<ANTLRTree>)t Rule:whichRule];
+        ANTLRTreeRewriter *u = [self applyOnce:(id<ANTLRBaseTree>)t Rule:whichRule];
treeChanged = !(t == u);
t = u;
}
return t;
}

-- (ANTLRTreeRewriter *) downup:(id<ANTLRTree>)t
+- (ANTLRTreeRewriter *) downup:(id<ANTLRBaseTree>)t
{
return [self downup:t XForm:NO];
}

-- (ANTLRTreeRewriter *) pre:(id<ANTLRTree>)t
+- (ANTLRTreeRewriter *) pre:(id<ANTLRBaseTree>)t
{
return [self applyOnce:t Rule:topdown_fptr];
}

-- (ANTLRTreeRewriter *)post:(id<ANTLRTree>)t
+- (ANTLRTreeRewriter *)post:(id<ANTLRBaseTree>)t
{
return [self applyRepeatedly:t Rule:bottomup_ftpr];
}
@@ -175,7 +177,7 @@ public Object downup(Object t, boolean showTransformations) {
}
#endif

-- (ANTLRTreeRewriter *) downup:(id<ANTLRTree>)t XForm:(BOOL)aShowTransformations
+- (ANTLRTreeRewriter *) downup:(id<ANTLRBaseTree>)t XForm:(BOOL)aShowTransformations
{
showTransformations = aShowTransformations;
ANTLRTreeVisitor *v = [ANTLRTreeVisitor newANTLRTreeVisitor:[[originalAdaptor class] newTreeAdaptor]];
@@ -193,7 +195,7 @@ public Object downup(Object t, boolean showTransformations) {
/** Override this if you need transformation tracing to go somewhere
*  other than stdout or if you're not using Tree-derived trees.
*/
-- (void)reportTransformation:(id<ANTLRTree>)oldTree Tree:(id<ANTLRTree>)newTree
+- (void)reportTransformation:(id<ANTLRBaseTree>)oldTree Tree:(id<ANTLRBaseTree>)newTree
{
//System.out.println(((Tree)oldTree).toStringTree()+" -> "+ ((Tree)newTree).toStringTree());
}
@@ -214,15 +216,19 @@ public Object downup(Object t, boolean showTransformations) {
- (ANTLRTreeRewriter *) topdown
// @throws RecognitionException
{
-    [ANTLRRecognitionException newANTLRRuntimeException:@"TopDown exception"];
+    [ANTLRRecognitionException newException:@"TopDown exception"];
return nil;
}

- (ANTLRTreeRewriter *) bottomup
//@throws RecognitionException
{
-    @throw [ANTLRRecognitionException newANTLRRuntimeException:@"BottomUp exception"];
+    @throw [ANTLRRecognitionException newException:@"BottomUp exception"];
return nil;
}

+@synthesize showTransformations;
+@synthesize originalTokenStream;
+@synthesize originalAdaptor;
+@synthesize rule;
@end
diff --git a/runtime/ObjC/Framework/ANTLRTreeVisitor.h b/runtime/ObjC/Framework/ANTLRTreeVisitor.h
index 1f167bb..de0d095 100644
--- a/runtime/ObjC/Framework/ANTLRTreeVisitor.h
+++ b/runtime/ObjC/Framework/ANTLRTreeVisitor.h
@@ -40,6 +40,7 @@
+ (ANTLRTreeVisitor *)newANTLRTreeVisitor;
- (id)init;
- (id)initWithAdaptor:(id<ANTLRTreeAdaptor>)anAdaptor;
-- (ANTLRTreeVisitor *)visit:(id<ANTLRTree>)t Action:(ANTLRTreeVisitorAction *)action;
+- (ANTLRTreeVisitor *)visit:(id<ANTLRBaseTree>)t Action:(ANTLRTreeVisitorAction *)action;

+@property (retain) id<ANTLRTreeAdaptor> adaptor;
@end
diff --git a/runtime/ObjC/Framework/ANTLRTreeVisitor.m b/runtime/ObjC/Framework/ANTLRTreeVisitor.m
index 115c9ba..764a490 100644
--- a/runtime/ObjC/Framework/ANTLRTreeVisitor.m
+++ b/runtime/ObjC/Framework/ANTLRTreeVisitor.m
@@ -71,7 +71,7 @@
*
*  Return result of applying post action to this node.
*/
-- (ANTLRTreeVisitor *)visit:(id<ANTLRTree>)t Action:(ANTLRTreeVisitorAction *)action
+- (ANTLRTreeVisitor *)visit:(id<ANTLRBaseTree>)t Action:(ANTLRTreeVisitorAction *)action
{
// System.out.println("visit "+((Tree)t).toStringTree());
BOOL isNil = [adaptor isNil:t];
@@ -79,9 +79,9 @@
t = [action pre:(ANTLRTreeVisitorAction *)t]; // if rewritten, walk children of new t
}
for (int i=0; i < [adaptor getChildCount:t]; i++) {
-        id<ANTLRTree> child = [adaptor getChild:t At:i];
-        id<ANTLRTree> visitResult = [self visit:child Action:action];
-        id<ANTLRTree> childAfterVisit = [adaptor getChild:t At:i];
+        id<ANTLRBaseTree> child = [adaptor getChild:t At:i];
+        id<ANTLRBaseTree> visitResult = [self visit:child Action:action];
+        id<ANTLRBaseTree> childAfterVisit = [adaptor getChild:t At:i];
if ( visitResult !=  childAfterVisit ) { // result & child differ?
[adaptor setChild:t At:i Child:visitResult];
}
@@ -90,4 +90,5 @@
return t;
}

+@synthesize adaptor;
@end
diff --git a/runtime/ObjC/Framework/ANTLRTreeWizard.h b/runtime/ObjC/Framework/ANTLRTreeWizard.h
index 576655f..e748cb6 100644
--- a/runtime/ObjC/Framework/ANTLRTreeWizard.h
+++ b/runtime/ObjC/Framework/ANTLRTreeWizard.h
@@ -39,7 +39,7 @@

@protocol ANTLRContextVisitor <NSObject>
// TODO: should this be called visit or something else?
-- (void) visit:(id<ANTLRTree>)t Parent:(id<ANTLRTree>)parent ChildIndex:(NSInteger)childIndex Map:(ANTLRMap *)labels;
+- (void) visit:(id<ANTLRBaseTree>)t Parent:(id<ANTLRBaseTree>)parent ChildIndex:(NSInteger)childIndex Map:(ANTLRMap *)labels;

@end

@@ -52,9 +52,13 @@
+ (ANTLRVisitor *)newANTLRVisitor:(NSInteger)anAction Actor:(id)anActor Object:(id)anObject1 Object:(id)anObject2;
- (id) initWithAction:(NSInteger)anAction Actor:(id)anActor Object:(id)anObject1 Object:(id)anObject2;

-- (void) visit:(id<ANTLRTree>)t;
-- (void) visit:(id<ANTLRTree>)t Parent:(id<ANTLRTree>)parent ChildIndex:(NSInteger)childIndex Map:(ANTLRMap *)labels;
+- (void) visit:(id<ANTLRBaseTree>)t;
+- (void) visit:(id<ANTLRBaseTree>)t Parent:(id<ANTLRBaseTree>)parent ChildIndex:(NSInteger)childIndex Map:(ANTLRMap *)labels;

+@property NSInteger action;
+@property (retain) id actor;
+@property (retain) id object1;
+@property (retain) id object2;
@end

/** When using %label:TOKENNAME in a tree for parse(), we must
@@ -67,7 +71,7 @@
@property (retain, getter=getLabel, setter=setLabel:) NSString *label;
@property (assign, getter=getHasTextArg, setter=setHasTextArg:) BOOL hasTextArg;

-+ (ANTLRTreePattern *)newANTLRTreePattern:(id<ANTLRToken>)payload;
++ (id<ANTLRBaseTree>)newANTLRTreePattern:(id<ANTLRToken>)payload;

- (id) initWithToken:(id<ANTLRToken>)payload;
- (NSString *)toString;
@@ -83,15 +87,15 @@
/** This adaptor creates TreePattern objects for use during scan() */
@interface ANTLRTreePatternTreeAdaptor : ANTLRCommonTreeAdaptor {
}
-+ (ANTLRTreePatternTreeAdaptor *)newANTLRTreePatternTreeAdaptor;
++ (ANTLRTreePatternTreeAdaptor *)newTreeAdaptor;
#ifdef DONTUSENOMO
-+ (ANTLRTreePatternTreeAdaptor *)newANTLRTreePatternTreeAdaptor:(id<ANTLRToken>)payload;
++ (ANTLRTreePatternTreeAdaptor *)newTreeAdaptor:(id<ANTLRToken>)payload;
#endif
- (id) init;
#ifdef DONTUSENOMO
- initWithToken:(id<ANTLRToken>)payload;
#endif
-- (id<ANTLRTree>)createTreePattern:(id<ANTLRToken>)payload;
+- (id<ANTLRBaseTree>)createTreePattern:(id<ANTLRToken>)payload;

@end

@@ -110,25 +114,27 @@
- (id) initWithTokenNames:(id<ANTLRTreeAdaptor>)anAdaptor TokenNames:(NSArray *)theTokNams;
- (ANTLRMap *)computeTokenTypes:(NSArray *)theTokNams;
- (NSInteger)getTokenType:(NSString *)tokenName;
-- (ANTLRMap *)index:(id<ANTLRTree>)t;
-- (void) _index:(id<ANTLRTree>)t Map:(ANTLRMap *)m;
-- (NSMutableArray *)find:(id<ANTLRTree>) t Pattern:(NSString *)pattern;
-- (ANTLRTreeWizard *)findFirst:(id<ANTLRTree>) t Type:(NSInteger)ttype;
-- (ANTLRTreeWizard *)findFirst:(id<ANTLRTree>) t Pattern:(NSString *)pattern;
-- (void) visit:(id<ANTLRTree>)t Type:(NSInteger)ttype Visitor:(ANTLRVisitor *)visitor;
-- (void) _visit:(id<ANTLRTree>)t
-         Parent:(id<ANTLRTree>)parent
+- (ANTLRMap *)index:(id<ANTLRBaseTree>)t;
+- (void) _index:(id<ANTLRBaseTree>)t Map:(ANTLRMap *)m;
+- (NSMutableArray *)find:(id<ANTLRBaseTree>) t Pattern:(NSString *)pattern;
+- (ANTLRTreeWizard *)findFirst:(id<ANTLRBaseTree>) t Type:(NSInteger)ttype;
+- (ANTLRTreeWizard *)findFirst:(id<ANTLRBaseTree>) t Pattern:(NSString *)pattern;
+- (void) visit:(id<ANTLRBaseTree>)t Type:(NSInteger)ttype Visitor:(ANTLRVisitor *)visitor;
+- (void) _visit:(id<ANTLRBaseTree>)t
+         Parent:(id<ANTLRBaseTree>)parent
ChildIndex:(NSInteger)childIndex
Type:(NSInteger)ttype
Visitor:(ANTLRVisitor *)visitor;
-- (void)visit:(id<ANTLRTree>)t Pattern:(NSString *)pattern Visitor:(ANTLRVisitor *)visitor;
-- (BOOL)parse:(id<ANTLRTree>)t Pattern:(NSString *)pattern Map:(ANTLRMap *)labels;
-- (BOOL) parse:(id<ANTLRTree>) t Pattern:(NSString *)pattern;
-- (BOOL) _parse:(id<ANTLRTree>)t1 Pattern:(ANTLRTreePattern *)tpattern Map:(ANTLRMap *)labels;
-- (id<ANTLRTree>) createTree:(NSString *)pattern;
+- (void)visit:(id<ANTLRBaseTree>)t Pattern:(NSString *)pattern Visitor:(ANTLRVisitor *)visitor;
+- (BOOL)parse:(id<ANTLRBaseTree>)t Pattern:(NSString *)pattern Map:(ANTLRMap *)labels;
+- (BOOL) parse:(id<ANTLRBaseTree>) t Pattern:(NSString *)pattern;
+- (BOOL) _parse:(id<ANTLRBaseTree>)t1 Pattern:(id<ANTLRBaseTree>)tpattern Map:(ANTLRMap *)labels;
+- (id<ANTLRBaseTree>) createTree:(NSString *)pattern;
- (BOOL)equals:(id)t1 O2:(id)t2 Adaptor:(id<ANTLRTreeAdaptor>)anAdaptor;
- (BOOL)equals:(id)t1 O2:(id)t2;
- (BOOL) _equals:(id)t1 O2:(id)t2 Adaptor:(id<ANTLRTreeAdaptor>)anAdaptor;

+@property (retain) id<ANTLRTreeAdaptor> adaptor;
+@property (retain) ANTLRMap *tokenNameToTypeMap;
@end

diff --git a/runtime/ObjC/Framework/ANTLRTreeWizard.m b/runtime/ObjC/Framework/ANTLRTreeWizard.m
index 0210c95..4faeed8 100644
--- a/runtime/ObjC/Framework/ANTLRTreeWizard.m
+++ b/runtime/ObjC/Framework/ANTLRTreeWizard.m
@@ -52,7 +52,7 @@
return self;
}

-- (void) visit:(id<ANTLRTree>)t Parent:(id<ANTLRTree>)parent ChildIndex:(NSInteger)childIndex Map:(ANTLRMap *)labels
+- (void) visit:(id<ANTLRBaseTree>)t Parent:(id<ANTLRBaseTree>)parent ChildIndex:(NSInteger)childIndex Map:(ANTLRMap *)labels
{
switch (action) {
case 0:
@@ -71,12 +71,16 @@
return;
}

-- (void) visit:(id<ANTLRTree>)t
+- (void) visit:(id<ANTLRBaseTree>)t
{
[object1 addObject:t];
return;
}

+@synthesize action;
+@synthesize actor;
+@synthesize object1;
+@synthesize object2;
@end

/** When using %label:TOKENNAME in a tree for parse(), we must
@@ -87,16 +91,16 @@
@synthesize label;
@synthesize hasTextArg;

-+ (ANTLRTreePattern *)newANTLRTreePattern:(id<ANTLRToken>)payload
++ (id<ANTLRBaseTree>)newANTLRTreePattern:(id<ANTLRToken>)payload
{
-    return (ANTLRTreePattern *)[[ANTLRTreePattern alloc] initWithToken:payload];
+    return (id<ANTLRBaseTree>)[[ANTLRTreePattern alloc] initWithToken:payload];
}

- (id) initWithToken:(id<ANTLRToken>)payload
{
if ((self = [super initWithToken:payload]) != nil ) {
}
-    return (ANTLRTreePattern *)self;
+    return (id<ANTLRBaseTree>)self;
}

- (NSString *)toString
@@ -158,9 +162,9 @@
}
#endif

-- (ANTLRTreePattern *)createTreePattern:(id<ANTLRToken>)payload
+- (id<ANTLRBaseTree>)createTreePattern:(id<ANTLRToken>)payload
{
-    return (ANTLRTreePattern *)[super createTree:payload];
+    return (id<ANTLRBaseTree>)[super create:payload];
}

@end
@@ -178,11 +182,11 @@
*  dynamic searches; i.e., go find me all PLUS nodes.
protected Map tokenTypeToStreamIndexesMap;

- /** If tokenTypesToReverseIndex set to INDEX_ALL then indexing
+ ** If tokenTypesToReverseIndex set to INDEX_ALL then indexing
*  occurs for all token types.
public static final Set INDEX_ALL = new HashSet();

- /** A set of token types user would like to index for faster lookup.
+ ** A set of token types user would like to index for faster lookup.
*  If this is INDEX_ALL, then all token types are tracked.  If nil,
*  then none are indexed.
protected Set tokenTypesToReverseIndex = nil;
@@ -289,7 +293,7 @@
*
*  TODO: save this index so that find and visit are faster
*/
-- (ANTLRMap *)index:(id<ANTLRTree>)t
+- (ANTLRMap *)index:(id<ANTLRBaseTree>)t
{
ANTLRMap *m = [ANTLRMap newANTLRMap];
[self _index:t Map:m];
@@ -297,7 +301,7 @@
}

/** Do the work for index */
-- (void) _index:(id<ANTLRTree>)t Map:(ANTLRMap *)m
+- (void) _index:(id<ANTLRBaseTree>)t Map:(ANTLRMap *)m
{
if ( t==nil ) {
return;
@@ -312,13 +316,13 @@
[elements addObject:t];
int n = [adaptor getChildCount:t];
for (int i=0; i<n; i++) {
-        id<ANTLRTree> child = [adaptor getChild:t At:i];
+        id<ANTLRBaseTree> child = [adaptor getChild:t At:i];
[self _index:child Map:m];
}
}

/** Return a List of tree nodes with token type ttype */
-- (NSMutableArray *)find:(id<ANTLRTree>)t Type:(NSInteger)ttype
+- (NSMutableArray *)find:(id<ANTLRBaseTree>)t Type:(NSInteger)ttype
{
#ifdef DONTUSENOMO
final List nodes = new ArrayList();
@@ -335,7 +339,7 @@
}

/** Return a List of subtrees matching pattern. */
-- (NSMutableArray *)find:(id<ANTLRTree>)t Pattern:(NSString *)pattern
+- (NSMutableArray *)find:(id<ANTLRBaseTree>)t Pattern:(NSString *)pattern
{
NSMutableArray *subtrees = [NSMutableArray arrayWithCapacity:100];
// Create a TreePattern from the pattern
@@ -343,7 +347,7 @@
ANTLRTreePatternParser *parser = [ANTLRTreePatternParser newANTLRTreePatternParser:tokenizer
Wizard:self
Adaptor:[ANTLRTreePatternTreeAdaptor newTreeAdaptor]];
-    id<ANTLRTree>tpattern = [parser pattern];
+    id<ANTLRBaseTree>tpattern = [parser pattern];
// don't allow invalid patterns
if ( tpattern == nil ||
[tpattern isNil] ||
@@ -366,12 +370,12 @@
return subtrees;
}

-- (ANTLRTreeWizard *)findFirst:(id<ANTLRTree>) t Type:(NSInteger)ttype
+- (ANTLRTreeWizard *)findFirst:(id<ANTLRBaseTree>) t Type:(NSInteger)ttype
{
return nil;
}

-- (ANTLRTreeWizard *)findFirst:(id<ANTLRTree>) t Pattern:(NSString *)pattern
+- (ANTLRTreeWizard *)findFirst:(id<ANTLRBaseTree>) t Pattern:(NSString *)pattern
{
return nil;
}
@@ -381,14 +385,14 @@
*  of the visitor action method is never set (it's nil) since using
*  a token type rather than a pattern doesn't let us set a label.
*/
-- (void) visit:(id<ANTLRTree>)t Type:(NSInteger)ttype Visitor:(ANTLRVisitor *)visitor
+- (void) visit:(id<ANTLRBaseTree>)t Type:(NSInteger)ttype Visitor:(ANTLRVisitor *)visitor
{
[self _visit:t Parent:nil ChildIndex:0 Type:ttype Visitor:visitor];
}

/** Do the recursive work for visit */
-- (void) _visit:(id<ANTLRTree>)t
-         Parent:(id<ANTLRTree>)parent
+- (void) _visit:(id<ANTLRBaseTree>)t
+         Parent:(id<ANTLRBaseTree>)parent
ChildIndex:(NSInteger)childIndex
Type:(NSInteger)ttype
Visitor:(ANTLRVisitor *)visitor
@@ -401,7 +405,7 @@
}
int n = [adaptor getChildCount:t];
for (int i=0; i<n; i++) {
-        id<ANTLRTree> child = [adaptor getChild:t At:i];
+        id<ANTLRBaseTree> child = [adaptor getChild:t At:i];
[self _visit:child Parent:t ChildIndex:i Type:ttype Visitor:visitor];
}
}
@@ -411,13 +415,13 @@
*  with visit(t, ttype, visitor) so nil-rooted patterns are not allowed.
*  Patterns with wildcard roots are also not allowed.
*/
-- (void)visit:(id<ANTLRTree>)t Pattern:(NSString *)pattern Visitor:(ANTLRVisitor *)visitor
+- (void)visit:(id<ANTLRBaseTree>)t Pattern:(NSString *)pattern Visitor:(ANTLRVisitor *)visitor
{
// Create a TreePattern from the pattern
ANTLRTreePatternLexer *tokenizer = [ANTLRTreePatternLexer newANTLRTreePatternLexer:pattern];
ANTLRTreePatternParser *parser =
[ANTLRTreePatternParser newANTLRTreePatternParser:tokenizer Wizard:self Adaptor:[ANTLRTreePatternTreeAdaptor newTreeAdaptor]];
-    id<ANTLRTree> tpattern = [parser pattern];
+    id<ANTLRBaseTree> tpattern = [parser pattern];
// don't allow invalid patterns
if ( tpattern == nil ||
[tpattern isNil] ||
@@ -454,7 +458,7 @@
*
*  TODO: what's a better way to indicate bad pattern? Exceptions are a hassle
*/
-- (BOOL)parse:(id<ANTLRTree>)t Pattern:(NSString *)pattern Map:(ANTLRMap *)labels
+- (BOOL)parse:(id<ANTLRBaseTree>)t Pattern:(NSString *)pattern Map:(ANTLRMap *)labels
{
#ifdef DONTUSENOMO
TreePatternLexer tokenizer = new TreePatternLexer(pattern);
@@ -472,7 +476,7 @@
ANTLRTreePatternParser *parser = [ANTLRTreePatternParser newANTLRTreePatternParser:tokenizer
Wizard:self
Adaptor:[ANTLRTreePatternTreeAdaptor newTreeAdaptor]];
-    id<ANTLRTree> tpattern = [parser pattern];
+    id<ANTLRBaseTree> tpattern = [parser pattern];
/*
System.out.println("t="+((Tree)t).toStringTree());
System.out.println("scant="+tpattern.toStringTree());
@@ -482,7 +486,7 @@
return [self _parse:t Pattern:tpattern Map:labels];
}

-- (BOOL) parse:(id<ANTLRTree>) t Pattern:(NSString *)pattern
+- (BOOL) parse:(id<ANTLRBaseTree>)t Pattern:(NSString *)pattern
{
return [self parse:t Pattern:pattern Map:nil];
}
@@ -492,12 +496,16 @@
*  text arguments on nodes.  Fill labels map with pointers to nodes
*  in tree matched against nodes in pattern with labels.
*/
-- (BOOL) _parse:(ANTLRTreePattern *)t1 Pattern:(ANTLRTreePattern *)tpattern Map:(ANTLRMap *)labels
+- (BOOL) _parse:(id<ANTLRBaseTree>)t1 Pattern:(id<ANTLRBaseTree>)aTPattern Map:(ANTLRMap *)labels
{
+    ANTLRTreePattern *tpattern;
// make sure both are non-nil
-    if ( t1 == nil || tpattern == nil ) {
+    if ( t1 == nil || aTPattern == nil ) {
return NO;
}
+    if ( [aTPattern isKindOfClass:[ANTLRWildcardTreePattern class]] ) {
+        tpattern = (ANTLRTreePattern *)aTPattern;
+    }
// check roots (wildcard matches anything)
if ( [tpattern class] != [ANTLRWildcardTreePattern class] ) {
if ( [adaptor getType:t1] != [tpattern getType] )
@@ -518,8 +526,8 @@
return NO;
}
for (int i=0; i<n1; i++) {
-        id<ANTLRTree> child1 = [adaptor getChild:t1 At:i];
-        ANTLRTreePattern *child2 = (ANTLRTreePattern *)[tpattern getChild:i];
+        id<ANTLRBaseTree> child1 = [adaptor getChild:t1 At:i];
+        id<ANTLRBaseTree>child2 = (id<ANTLRBaseTree>)[tpattern getChild:i];
if ( ![self _parse:child1 Pattern:child2 Map:labels] ) {
return NO;
}
@@ -540,11 +548,11 @@
*  nil is a special name meaning "give me a nil node".  Useful for
*  making lists: (nil A B C) is a list of A B C.
*/
-- (id<ANTLRTree>) createTree:(NSString *)pattern
+- (id<ANTLRBaseTree>) createTree:(NSString *)pattern
{
ANTLRTreePatternLexer *tokenizer = [ANTLRTreePatternLexer newANTLRTreePatternLexer:pattern];
ANTLRTreePatternParser *parser = [ANTLRTreePatternParser newANTLRTreePatternParser:tokenizer Wizard:self Adaptor:adaptor];
-    id<ANTLRTree> t = [parser pattern];
+    id<ANTLRBaseTree> t = [parser pattern];
return t;
}

@@ -590,8 +598,8 @@
return NO;
}
for (int i=0; i<n1; i++) {
-        id<ANTLRTree> child1 = [anAdaptor getChild:t1 At:i];
-        id<ANTLRTree> child2 = [anAdaptor getChild:t2 At:i];
+        id<ANTLRBaseTree> child1 = [anAdaptor getChild:t1 At:i];
+        id<ANTLRBaseTree> child2 = [anAdaptor getChild:t2 At:i];
if ( ![self _equals:child1 O2:child2 Adaptor:anAdaptor] ) {
return NO;
}
@@ -618,7 +626,7 @@
*
*  If you change this method, you will likely need to change
*  getNodeIndex(), which extracts information.
-- (void)fillReverseIndex:(id<ANTLRTree>)node Index:(NSInteger)streamIndex
+- (void)fillReverseIndex:(id<ANTLRBaseTree>)node Index:(NSInteger)streamIndex
{
//System.out.println("revIndex "+node+"@"+streamIndex);
if ( tokenTypesToReverseIndex == nil ) {
@@ -647,7 +655,7 @@
}
}

-/** Track the indicated token type in the reverse index.  Call this
+ ** Track the indicated token type in the reverse index.  Call this
*  repeatedly for each type or use variant with Set argument to
*  set all at once.
* @param tokenType
@@ -662,13 +670,13 @@ public void reverseIndex:(NSInteger)tokenType
tokenTypesToReverseIndex.add(new Integer(tokenType));
}

-/** Track the indicated token types in the reverse index. Set
+** Track the indicated token types in the reverse index. Set
*  to INDEX_ALL to track all token types.
public void reverseIndex(Set tokenTypes) {
tokenTypesToReverseIndex = tokenTypes;
}

- /** Given a node pointer, return its index into the node stream.
+ ** Given a node pointer, return its index into the node stream.
*  This is not its Token stream index.  If there is no reverse map
*  from node to stream index or the map does not contain entries
*  for node's token type, a linear search of entire stream is used.
@@ -699,4 +707,6 @@ public int getNodeIndex(Object node) {

*/

+@synthesize adaptor;
+@synthesize tokenNameToTypeMap;
@end
diff --git a/runtime/ObjC/Framework/ANTLRUnbufferedCommonTreeNodeStream.h b/runtime/ObjC/Framework/ANTLRUnbufferedCommonTreeNodeStream.h
index 5a2c1f1..aa1f9c6 100644
--- a/runtime/ObjC/Framework/ANTLRUnbufferedCommonTreeNodeStream.h
+++ b/runtime/ObjC/Framework/ANTLRUnbufferedCommonTreeNodeStream.h
@@ -56,7 +56,7 @@
NSUInteger tail;
}

-@property (retain, getter=getRoot, setter=setRoot) ANTLRCommonTree *root;
+@property (retain, getter=getRoot, setter=setRoot:) ANTLRCommonTree *root;
@property (retain, getter=getCurrentNode, setter=setCurrentNode:) ANTLRCommonTree *currentNode;
@property (retain, getter=getPreviousNode, setter=setPreviousNode:) ANTLRCommonTree *previousNode;
@property (retain, getter=getTreeAdaptor, setter=setTreeAdaptor:) id<ANTLRTreeAdaptor> treeAdaptor;
@@ -104,7 +104,7 @@
- (NSUInteger) size;

#pragma mark Lookahead Handling
-- (void) addLookahead:(id<ANTLRTree>)aNode;
+- (void) addLookahead:(id<ANTLRBaseTree>)aNode;
- (NSUInteger) lookaheadSize;
- (void) fillBufferWithLookahead:(NSInteger)k;
- (id) nextObject;
diff --git a/runtime/ObjC/Framework/ANTLRUnbufferedCommonTreeNodeStream.m b/runtime/ObjC/Framework/ANTLRUnbufferedCommonTreeNodeStream.m
index fb0f86d..1ee1e4f 100644
--- a/runtime/ObjC/Framework/ANTLRUnbufferedCommonTreeNodeStream.m
+++ b/runtime/ObjC/Framework/ANTLRUnbufferedCommonTreeNodeStream.m
@@ -48,12 +48,12 @@
@synthesize head;
@synthesize tail;

-- (id) initWithTree:(ANTLRCommonTree *)theTree;
+- (id) initWithTree:(ANTLRCommonTree *)theTree
{
return [self initWithTree:theTree treeAdaptor:nil];
}

-- (id) initWithTree:(ANTLRCommonTree *)theTree treeAdaptor:(ANTLRCommonTreeAdaptor *)theAdaptor;
+- (id) initWithTree:(ANTLRCommonTree *)theTree treeAdaptor:(ANTLRCommonTreeAdaptor *)theAdaptor
{
if ((self = [super init]) != nil) {
[self setRoot:theTree];
@@ -85,7 +85,7 @@
[super dealloc];
}

-- (void) reset;
+- (void) reset
{
currentNode = root;
previousNode = nil;
@@ -106,19 +106,19 @@

#pragma mark ANTLRTreeNodeStream conformance

-- (id) LT:(NSInteger)k;
+- (id) LT:(NSInteger)k
{
if (k == -1)
return previousNode;
if (k < 0)
@throw [NSException exceptionWithName:@"ANTLRTreeException" reason:@"-LT: looking back more than one node unsupported for unbuffered streams" userInfo:nil];
if (k == 0)
-		return [ANTLRBaseTree invalidNode];
+		return ANTLRBaseTree.INVALID_NODE;
[self fillBufferWithLookahead:k];
return [lookahead objectAtIndex:(head+k-1) % [lookahead count]];
}

-- (id) treeSource;
+- (id) treeSource
{
return [self root];
}
@@ -137,7 +137,7 @@
}
}

-- (id<ANTLRTokenStream>) getTokenStream;
+- (id<ANTLRTokenStream>) getTokenStream
{
return tokenStream;
}
@@ -151,34 +151,34 @@
}
}

-- (void) setUsesUniqueNavigationNodes:(BOOL)flag;
+- (void) setUsesUniqueNavigationNodes:(BOOL)flag
{
shouldUseUniqueNavigationNodes = flag;
}

-- (id) nodeAtIndex:(NSUInteger) idx;
+- (id) nodeAtIndex:(NSUInteger) idx
{
@throw [NSException exceptionWithName:@"ANTLRTreeException" reason:@"-nodeAtIndex: unsupported for unbuffered streams" userInfo:nil];
}

-- (NSString *) toString;
+- (NSString *) toString
{
@throw [NSException exceptionWithName:@"ANTLRTreeException" reason:@"-toString unsupported for unbuffered streams" userInfo:nil];
}

-- (NSString *) toStringWithRange:(NSRange) aRange;
+- (NSString *) toStringWithRange:(NSRange) aRange
{
@throw [NSException exceptionWithName:@"ANTLRTreeException" reason:@"-toString: unsupported for unbuffered streams" userInfo:nil];
}

-- (NSString *) toStringFromNode:(id)startNode ToNode:(id)stopNode;
+- (NSString *) toStringFromNode:(id)startNode ToNode:(id)stopNode
{
@throw [NSException exceptionWithName:@"ANTLRTreeException" reason:@"-toStringFromNode:toNode: unsupported for unbuffered streams" userInfo:nil];
}

#pragma mark ANTLRIntStream conformance

-- (void) consume;
+- (void) consume
{
[self fillBufferWithLookahead:1];
absoluteNodeIndex++;
@@ -186,7 +186,7 @@
head = (head+1) % [lookahead count];
}

-- (NSInteger) LA:(NSUInteger) i;
+- (NSInteger) LA:(NSUInteger) i
{
ANTLRCommonTree *node = [self LT:i];
if (!node)
@@ -195,7 +195,7 @@
return ttype;
}

-- (NSUInteger) mark;
+- (NSUInteger) mark
{
ANTLRUnbufferedCommonTreeNodeStreamState *state = [[[ANTLRUnbufferedCommonTreeNodeStreamState alloc] init] retain];
[state setCurrentNode:currentNode];
@@ -214,12 +214,12 @@
return [markers count];
}

-- (NSUInteger) getIndex;
+- (NSUInteger) getIndex
{
return absoluteNodeIndex + 1;
}

-- (void) rewind:(NSUInteger) marker;
+- (void) rewind:(NSUInteger) marker
{
if ( [markers count] < marker ) {
return;
@@ -249,12 +249,12 @@
[self rewind:[markers count]];
}

-- (void) release:(NSUInteger) marker;
+- (void) release:(NSUInteger) marker
{
@throw [NSException exceptionWithName:@"ANTLRTreeException" reason:@"-release: unsupported for unbuffered streams" userInfo:nil];
}

-- (void) seek:(NSUInteger) anIndex;
+- (void) seek:(NSUInteger) anIndex
{
if ( anIndex < (NSUInteger) index )
@throw [NSException exceptionWithName:@"ANTLRTreeException" reason:@"-seek: backwards unsupported for unbuffered streams" userInfo:nil];
@@ -270,7 +270,7 @@


#pragma mark Lookahead Handling
-- (void) addLookahead:(id<ANTLRTree>)aNode;
+- (void) addLookahead:(id<ANTLRBaseTree>)aNode
{
[lookahead replaceObjectAtIndex:tail withObject:aNode];
tail = (tail+1) % [lookahead count];
@@ -297,14 +297,14 @@

}

-- (NSUInteger) lookaheadSize;
+- (NSUInteger) lookaheadSize
{
return tail < head
? ([lookahead count] - head + tail)
: (tail - head);
}

-- (void) fillBufferWithLookahead:(NSInteger)k;
+- (void) fillBufferWithLookahead:(NSInteger)k
{
unsigned int n = [self lookaheadSize];
unsigned int i;
@@ -339,7 +339,7 @@
}

#pragma mark Node visiting
-- (ANTLRCommonTree *) handleRootNode;
+- (ANTLRCommonTree *) handleRootNode
{
ANTLRCommonTree *node = currentNode;
currentChildIndex = 0;
@@ -354,7 +354,7 @@
return node;
}

-- (ANTLRCommonTree *) visitChild:(NSInteger)childNumber;
+- (ANTLRCommonTree *) visitChild:(NSInteger)childNumber
{
ANTLRCommonTree *node = nil;

@@ -371,7 +371,7 @@
return node;
}

-- (void) walkBackToMostRecentNodeWithUnvisitedChildren;
+- (void) walkBackToMostRecentNodeWithUnvisitedChildren
{
while (currentNode != nil && currentChildIndex >= (NSInteger)[currentNode getChildCount])
{
@@ -392,7 +392,7 @@

}

-- (void) addNavigationNodeWithType:(NSInteger)tokenType;
+- (void) addNavigationNodeWithType:(NSInteger)tokenType
{
// TODO: this currently ignores shouldUseUniqueNavigationNodes.
switch (tokenType) {
diff --git a/runtime/ObjC/Framework/ANTLRUnbufferedTokenStream.h b/runtime/ObjC/Framework/ANTLRUnbufferedTokenStream.h
index e4f8630..9d702a7 100644
--- a/runtime/ObjC/Framework/ANTLRUnbufferedTokenStream.h
+++ b/runtime/ObjC/Framework/ANTLRUnbufferedTokenStream.h
@@ -42,7 +42,7 @@
}

@property (retain, getter=getTokenSource, setter=setTokenSource:) id<ANTLRTokenSource> tokenSource;
-@property (getter=getTokenIndex, setter=setTokenIndex) NSInteger tokenIndex;
+@property (getter=getTokenIndex, setter=setTokenIndex:) NSInteger tokenIndex;
@property (getter=getChannel, setter=setChannel:) NSInteger channel;

+ (ANTLRUnbufferedTokenStream *)newANTLRUnbufferedTokenStream:(id<ANTLRTokenSource>)aTokenSource;
diff --git a/runtime/ObjC/Framework/ANTLRUnbufferedTokenStream.m b/runtime/ObjC/Framework/ANTLRUnbufferedTokenStream.m
index 9dd903f..3bb2d16 100644
--- a/runtime/ObjC/Framework/ANTLRUnbufferedTokenStream.m
+++ b/runtime/ObjC/Framework/ANTLRUnbufferedTokenStream.m
@@ -96,7 +96,7 @@

- (id<ANTLRToken>)objectAtIndex:(NSInteger)anIdx
{
-    @throw [ANTLRRuntimeException newANTLRRuntimeException:@"Absolute token indexes are meaningless in an unbuffered stream"];
+    @throw [ANTLRRuntimeException newException:@"Absolute token indexes are meaningless in an unbuffered stream"];
}

- (NSString *)getSourceName
diff --git a/runtime/ObjC/Framework/ANTLRUniqueIDMap.h b/runtime/ObjC/Framework/ANTLRUniqueIDMap.h
index a805bd5..55c92d1 100644
--- a/runtime/ObjC/Framework/ANTLRUniqueIDMap.h
+++ b/runtime/ObjC/Framework/ANTLRUniqueIDMap.h
@@ -42,7 +42,7 @@
NSInteger lastHash;
}

-@property (getter=getLastHash, setter=setLastHash) NSInteger lastHash;
+@property (getter=getLastHash, setter=setLastHash:) NSInteger lastHash;

+ (id)newANTLRUniqueIDMap;
+ (id)newANTLRUniqueIDMapWithLen:(NSInteger)aHashSize;
@@ -58,7 +58,7 @@

- (void)deleteANTLRUniqueIDMap:(ANTLRNodeMapElement *)np;
- (void)delete_chain:(ANTLRNodeMapElement *)np;
-- (id)getNode:(id<ANTLRTree>)aNode;
-- (void)putID:(id)anID Node:(id<ANTLRTree>)aNode;
+- (id)getNode:(id<ANTLRBaseTree>)aNode;
+- (void)putID:(id)anID Node:(id<ANTLRBaseTree>)aNode;

@end
diff --git a/runtime/ObjC/Framework/ANTLRUniqueIDMap.m b/runtime/ObjC/Framework/ANTLRUniqueIDMap.m
index 4d5f728..4230120 100644
--- a/runtime/ObjC/Framework/ANTLRUniqueIDMap.m
+++ b/runtime/ObjC/Framework/ANTLRUniqueIDMap.m
@@ -129,7 +129,7 @@

for (int i = 0; i < BuffSize; i++) {
if ((anElement = ptrBuffer[i]) != nil) {
-            aCnt =+ (NSInteger)[anElement count];
+            aCnt += (NSInteger)[anElement count];
}
}
return aCnt;
@@ -147,12 +147,12 @@
[np dealloc];
}

-- (id)getNode:(id<ANTLRTree>)aNode
+- (id)getNode:(id<ANTLRBaseTree>)aNode
{
ANTLRNodeMapElement *np;
NSInteger idx;

-    idx = [(id<ANTLRTree>)aNode getType];
+    idx = [(id<ANTLRBaseTree>)aNode getType];
np = ptrBuffer[idx];
while ( np != nil ) {
if (np.node == aNode) {
@@ -163,12 +163,12 @@
return( nil );
}

-- (void)putID:(id)anID Node:(id<ANTLRTree>)aNode
+- (void)putID:(id)anID Node:(id<ANTLRBaseTree>)aNode
{
ANTLRNodeMapElement *np, *np1;
NSInteger idx;

-    idx = [(id<ANTLRTree>)aNode getType];
+    idx = [(id<ANTLRBaseTree>)aNode getType];
idx %= HASHSIZE;
np = [ANTLRNodeMapElement newANTLRNodeMapElementWithIndex:anID Node:aNode];
np1 = ptrBuffer[idx];
diff --git a/runtime/ObjC/Framework/ANTLRUnwantedTokenException.h b/runtime/ObjC/Framework/ANTLRUnwantedTokenException.h
index 2945bfe..fbb60e3 100644
--- a/runtime/ObjC/Framework/ANTLRUnwantedTokenException.h
+++ b/runtime/ObjC/Framework/ANTLRUnwantedTokenException.h
@@ -35,8 +35,8 @@
@interface ANTLRUnwantedTokenException : ANTLRMismatchedTokenException {

}
-+ (ANTLRUnwantedTokenException *)newANTLRUnwantedTokenException;
-+ (ANTLRUnwantedTokenException *)newANTLRUnwantedTokenException:(NSInteger)expected Stream:(id<ANTLRIntStream>)anInput;
++ (ANTLRUnwantedTokenException *)newException;
++ (ANTLRUnwantedTokenException *)newException:(NSInteger)expected Stream:(id<ANTLRIntStream>)anInput;

- (id) init;
- (id) initWithStream:(id<ANTLRIntStream>)anInput And:(NSInteger)expected;
diff --git a/runtime/ObjC/Framework/ANTLRUnwantedTokenException.m b/runtime/ObjC/Framework/ANTLRUnwantedTokenException.m
index 3eac72b..b8b24f3 100644
--- a/runtime/ObjC/Framework/ANTLRUnwantedTokenException.m
+++ b/runtime/ObjC/Framework/ANTLRUnwantedTokenException.m
@@ -33,12 +33,12 @@

@implementation ANTLRUnwantedTokenException : ANTLRMismatchedTokenException
/** Used for remote debugger deserialization */
-+ (ANTLRUnwantedTokenException *)newANTLRUnwantedTokenException
++ (ANTLRUnwantedTokenException *)newException
{
return [[ANTLRUnwantedTokenException alloc] init];
}

-+ (ANTLRUnwantedTokenException *)newANTLRUnwantedTokenException:(NSInteger)expected Stream:(id<ANTLRIntStream>)anInput
++ (ANTLRUnwantedTokenException *)newException:(NSInteger)expected Stream:(id<ANTLRIntStream>)anInput
{
return [[ANTLRUnwantedTokenException alloc] initWithStream:anInput And:expected];
}
@@ -67,14 +67,14 @@

- (NSString *)toString
{
-    NSString *exp = [NSString stringWithFormat:@", expected %d", expecting];
+    NSString *exp1 = [NSString stringWithFormat:@", expected %d", expecting];
if ( expecting == ANTLRTokenTypeInvalid ) {
-        exp = @"";
+        exp1 = @"";
}
if ( token==nil ) {
-        return [NSString stringWithFormat:@"UnwantedTokenException(found=%@)", exp];
+        return [NSString stringWithFormat:@"UnwantedTokenException(found=%@)", exp1];
}
-    return [NSString stringWithFormat:@"UnwantedTokenException(found=%@ %@", token.text, exp];
+    return [NSString stringWithFormat:@"UnwantedTokenException(found=%@ %@", token.text, exp1];
}

@end
diff --git a/runtime/ObjC/Framework/antlr3.h b/runtime/ObjC/Framework/antlr3.h
index e966415..b76ce93 100644
--- a/runtime/ObjC/Framework/antlr3.h
+++ b/runtime/ObjC/Framework/antlr3.h
@@ -54,6 +54,7 @@
#import <ANTLR/ANTLRError.h>
#import <ANTLR/ANTLRFailedPredicateException.h>
#import <ANTLR/ANTLRFastQueue.h>
+#import <ANTLR/ANTLRFileStream.h>
#import <ANTLR/ANTLRHashMap.h>
#import <ANTLR/ANTLRHashRule.h>
#import <ANTLR/ANTLRInputStream.h>

