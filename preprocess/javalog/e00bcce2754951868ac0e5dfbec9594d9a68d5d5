commit e00bcce2754951868ac0e5dfbec9594d9a68d5d5
Author:     Sam Harwell <sam@tunnelvisionlabs.com>
AuthorDate: Thu Dec 13 14:06:22 2012 -0600
Commit:     Sam Harwell <sam@tunnelvisionlabs.com>
CommitDate: Thu Dec 13 14:06:22 2012 -0600

Fix behavior of LookaheadStream.seek and LB, handle the possible UnsupportedOperationException in RecognitionException.extractInformationFromTreeNodeStream

diff --git a/runtime/Java/src/main/java/org/antlr/runtime/RecognitionException.java b/runtime/Java/src/main/java/org/antlr/runtime/RecognitionException.java
index 3e79f99..0a8b411 100644
--- a/runtime/Java/src/main/java/org/antlr/runtime/RecognitionException.java
+++ b/runtime/Java/src/main/java/org/antlr/runtime/RecognitionException.java
@@ -140,8 +140,13 @@ public class RecognitionException extends Exception {
this.approximateLineInfo = true;
break;
}
+
--i;
-					priorNode = nodes.LT(i);
+					try {
+						priorNode = nodes.LT(i);
+					} catch (UnsupportedOperationException ex) {
+						priorNode = null;
+					}
}
}
else { // node created from real token
diff --git a/runtime/Java/src/main/java/org/antlr/runtime/misc/LookaheadStream.java b/runtime/Java/src/main/java/org/antlr/runtime/misc/LookaheadStream.java
index 580316d..8f876e5 100644
--- a/runtime/Java/src/main/java/org/antlr/runtime/misc/LookaheadStream.java
+++ b/runtime/Java/src/main/java/org/antlr/runtime/misc/LookaheadStream.java
@@ -27,8 +27,6 @@
*/
package org.antlr.runtime.misc;

-import java.util.NoSuchElementException;
-
/**
* A lookahead queue that knows how to mark/release locations in the buffer for
* backtracking purposes. Any markers force the {@link FastQueue} superclass to
@@ -163,25 +161,46 @@ public abstract class LookaheadStream<T> extends FastQueue<T> {
* Seek to a 0-indexed absolute token index. This method can only be used to
* seek within the current data buffer. Normally used to seek backwards in
* the buffer. Does not force loading of nodes.
+     *
+     * @throws IllegalArgumentException if {@code index} is less than 0
+     * @throws UnsupportedOperationException if {@code index} does not lie
+     * within the moving window of elements
*/
-  public void seek(int index) {
-    int delta = currentElementIndex - index;
-    p -= delta;
+    public void seek(int index) {
+        if (index < 0) {
+            throw new IllegalArgumentException("can't seek before the beginning of the input");
+        }
+
+        int delta = currentElementIndex - index;
+        if (p - delta < 0) {
+            throw new UnsupportedOperationException("can't seek before the beginning of this stream's buffer");
+        }
+        else if (p - delta >= data.size()) {
+            throw new UnsupportedOperationException("can't seek past the end of the stream's buffer");
+        }

-    if (p < 0) {
-      throw new IllegalArgumentException("Can't seek past the beginning of this stream's buffer");
+        p -= delta;
+        currentElementIndex = index;
}

-    currentElementIndex = index;
-  }
+    protected T LB(int k) {
+        assert k > 0;

-  protected T LB(int k) {
-    if (p - k == -1) {
-      return prevElement;
-    }
-    else if (p > 0) {
-      return elementAt(-1);
+        int index = p - k;
+        if (index == -1) {
+            return prevElement;
+        }
+
+        // if k>0 then we know index < data.size(). avoid the double-check for
+        // performance.
+        if (index >= 0 /*&& index < data.size()*/) {
+            return data.get(index);
+        }
+
+        if (index < -1) {
+            throw new UnsupportedOperationException("can't look more than one token before the beginning of this stream's buffer");
+        }
+
+        throw new UnsupportedOperationException("can't look past the end of this stream's buffer using LB(int)");
}
-    throw new NoSuchElementException("can't look backwards past the beginning of this stream's buffer");
-  }
}

