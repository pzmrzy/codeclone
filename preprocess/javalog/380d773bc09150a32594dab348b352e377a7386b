commit 380d773bc09150a32594dab348b352e377a7386b
Author:     Sam Harwell <sam@tunnelvisionlabs.com>
AuthorDate: Fri Nov 30 00:07:32 2012 -0600
Commit:     Sam Harwell <sam@tunnelvisionlabs.com>
CommitDate: Fri Nov 30 00:07:32 2012 -0600

Suppress warnings, add @Override annotations in generated code

diff --git a/tool/src/main/resources/org/antlr/codegen/templates/Java/Java.stg b/tool/src/main/resources/org/antlr/codegen/templates/Java/Java.stg
index 5832433..5bdb1df 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/Java/Java.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/Java/Java.stg
@@ -77,7 +77,7 @@ import java.util.HashMap;
<@end>

<docComment>
-@SuppressWarnings({"all", "warnings", "unchecked", "cast"})
+@SuppressWarnings("all")
<recognizer>

>>
@@ -117,7 +117,7 @@ public class <grammar.recognizerName> extends <@superClassName><superClass><@end
{g|this.<g:delegateName()> = <g:delegateName()>;}; separator="\n">
<last(grammar.delegators):{g|gParent = <g:delegateName()>;}>
}
-	public String getGrammarFileName() { return "<fileName>"; }
+	@Override public String getGrammarFileName() { return "<fileName>"; }

<if(filterMode)>
<filteringNextToken()>
@@ -238,8 +238,8 @@ public class <grammar.recognizerName> extends <@superClassName><superClass><@end
}
<@end>

-	public String[] getTokenNames() { return <grammar.composite.rootGrammar.recognizerName>.tokenNames; }
-	public String getGrammarFileName() { return "<fileName>"; }
+	@Override public String[] getTokenNames() { return <grammar.composite.rootGrammar.recognizerName>.tokenNames; }
+	@Override public String getGrammarFileName() { return "<fileName>"; }

<members>

@@ -536,6 +536,7 @@ public final void m<ruleName>(<ruleDescriptor.parameterScope:parameterScope()>)
*  that chooses between lexer rules.
*/
tokensRule(ruleName,nakedBlock,args,block,ruleDescriptor) ::= <<
+@Override
public void mTokens() throws RecognitionException {
<block>
}
@@ -1090,11 +1091,13 @@ class DFA<dfa.decisionNumber> extends DFA {
this.special = DFA<dfa.decisionNumber>_special;
this.transition = DFA<dfa.decisionNumber>_transition;
}
+	@Override
public String getDescription() {
return "<dfa.description>";
}
<@errorMethod()>
<if(dfa.specialStateSTs)>
+	@Override
public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
<if(LEXER)>
IntStream input = _input;

