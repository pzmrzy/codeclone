commit 8c9d8ebc0b6ed48060a15b566ef3ff9af8a83f15
Author:     Zannick <jokeserver@gmail.com>
AuthorDate: Sat Jun 23 19:49:53 2012 -0700
Commit:     Zannick <jokeserver@gmail.com>
CommitDate: Mon Jun 25 00:59:08 2012 -0700

Allow genSetExpr/setTest to actually use sets.

This adds three additional possible arguments to setTest which allow
language templates to use set inclusion tests instead of repeated
equality and range checking tests:
- varName, which is either the temp variable the LA token is saved to,
or the LA() function call. This is given by two new templates,
lookaheadVarName and isolatedLookaheadVarName, which match their
counterpart lookaheadTest rules.
- allValues, the flattened full list of token names to match against.
- allValuesAsInt, the flattened full list of token ids to match against,
similar to atomAsInt in the lookaheadTest rules.

To receive allValues and/or allValuesAsInt, all three of these arguments
must be listed in the setTest definition. This also stops the ranges
argument from being passed in. Alternately, the setTest template can define
only ranges and varName as arguments, in which case it does not receive
allValues or allValuesAsInt. (This can be useful if you'd like to test
set inclusion for only the individual elements in ranges, and keep the
range tests themselves.)

And finally, make use of this feature in the Python3 target, since
Python3 allows raw definitions of sets, making these checks consistently
faster than the old behavior.

diff --git a/tool/src/main/java/org/antlr/codegen/CodeGenerator.java b/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
index 253a484..7728509 100644
--- a/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
+++ b/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
@@ -763,11 +763,37 @@ public class CodeGenerator {
}
String testSTName = "lookaheadTest";
String testRangeSTName = "lookaheadRangeTest";
+		String varSTName = "lookaheadVarName";
if ( !partOfDFA ) {
testSTName = "isolatedLookaheadTest";
testRangeSTName = "isolatedLookaheadRangeTest";
+			varSTName = "isolatedLookaheadVarName";
}
ST setST = templates.getInstanceOf("setTest");
+		// If setTest asks for varName (e.g. so it can test via set inclusion),
+		// give it the var name.
+		if ( setST.impl.formalArguments.get("varName")!=null ) {
+			ST varST = templates.getInstanceOf(varSTName);
+			varST.add("k", Utils.integer(k));
+			setST.add("varName", varST);
+			// If setTest asks for all the values in one list,
+			// skip the ordinary ranges variable.
+			if ( setST.impl.formalArguments.get("allValues")!=null ) {
+				// Flatten the IntervalSet into a list of integers.
+				Iterator<Interval> iter = iset.getIntervals().iterator();
+				while (iter.hasNext()) {
+					Interval I = iter.next();
+					int a = I.a;
+					int b = I.b;
+					for (int i = a; i <= b; i++) {
+						setST.add("allValues", getTokenTypeAsTargetLabel(i));
+						setST.add("allValuesAsInt", Utils.integer(i));
+					}
+				}
+				// Skip doing anything with ranges.
+				return setST;
+			}
+		}
Iterator<Interval> iter = iset.getIntervals().iterator();
int rangeNumber = 1;
while (iter.hasNext()) {
diff --git a/tool/src/main/resources/org/antlr/codegen/templates/Python3/Python3.stg b/tool/src/main/resources/org/antlr/codegen/templates/Python3/Python3.stg
index b1c1fbf..bb5f8fe 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/Python3/Python3.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/Python3/Python3.stg
@@ -1217,7 +1217,7 @@ se:

andPredicates(left,right) ::= "((<left>) and (<right>))"

-orPredicates(operands) ::= "(<first(operands)><rest(operands):{o |  or <o>}>)"
+orPredicates(operands) ::= "(<operands; separator=\" or \">)"

notPredicate(pred) ::= "not (<evalPredicate(pred, {})>)"

@@ -1238,7 +1238,12 @@ lookaheadRangeTest(lower,upper,k,rangeNumber,lowerAsInt,upperAsInt) ::= <%

isolatedLookaheadRangeTest(lower,upper,k,rangeNumber,lowerAsInt,upperAsInt) ::= "(<lower> \<= self.input.LA(<k>) \<= <upper>)"

-setTest(ranges) ::= "<ranges; separator=\" or \">"
+lookaheadVarName(k) ::= "LA<decisionNumber>_<stateNumber>"
+isolatedLookaheadVarName(k) ::= "self.input.LA(<k>)"
+
+setTest(varName,allValues,allValuesAsInt) ::= <%
+<varName> in {<allValues; separator=", ">}
+%>

// A T T R I B U T E S


