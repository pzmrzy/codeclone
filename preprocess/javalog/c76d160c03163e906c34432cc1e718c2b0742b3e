commit c76d160c03163e906c34432cc1e718c2b0742b3e
Author:     Alan Condit <acondit@ipns.com>
AuthorDate: Thu Feb 16 19:03:26 2012 -0800
Commit:     Alan Condit <acondit@ipns.com>
CommitDate: Thu Feb 16 19:03:26 2012 -0800

Fixing examples to match latest changes

diff --git a/runtime/ObjC/Framework/ANTLR/ANTLR.xcodeproj/xcuserdata/acondit.xcuserdatad/xcschemes/Fuzzy.xcscheme b/runtime/ObjC/Framework/ANTLR/ANTLR.xcodeproj/xcuserdata/acondit.xcuserdatad/xcschemes/Fuzzy.xcscheme
deleted file mode 100644
index bb165e3..0000000
--- a/runtime/ObjC/Framework/ANTLR/ANTLR.xcodeproj/xcuserdata/acondit.xcuserdatad/xcschemes/Fuzzy.xcscheme
+++ /dev/null
@@ -1,82 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<Scheme
-   version = "1.3">
-   <BuildAction
-      parallelizeBuildables = "YES"
-      buildImplicitDependencies = "YES">
-      <BuildActionEntries>
-         <BuildActionEntry
-            buildForTesting = "YES"
-            buildForRunning = "YES"
-            buildForProfiling = "YES"
-            buildForArchiving = "YES"
-            buildForAnalyzing = "YES">
-            <BuildableReference
-               BuildableIdentifier = "primary"
-               BlueprintIdentifier = "1A63BC60134F5DAB002EDFB4"
-               BuildableName = "Fuzzy"
-               BlueprintName = "Fuzzy"
-               ReferencedContainer = "container:ANTLR.xcodeproj">
-            </BuildableReference>
-         </BuildActionEntry>
-      </BuildActionEntries>
-   </BuildAction>
-   <TestAction
-      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.GDB"
-      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.GDB"
-      shouldUseLaunchSchemeArgsEnv = "YES"
-      buildConfiguration = "Debug">
-      <Testables>
-      </Testables>
-   </TestAction>
-   <LaunchAction
-      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.GDB"
-      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.GDB"
-      displayScaleIsEnabled = "NO"
-      displayScale = "1.00"
-      launchStyle = "0"
-      useCustomWorkingDirectory = "NO"
-      buildConfiguration = "Debug">
-      <BuildableProductRunnable>
-         <BuildableReference
-            BuildableIdentifier = "primary"
-            BlueprintIdentifier = "1A63BC60134F5DAB002EDFB4"
-            BuildableName = "Fuzzy"
-            BlueprintName = "Fuzzy"
-            ReferencedContainer = "container:ANTLR.xcodeproj">
-         </BuildableReference>
-      </BuildableProductRunnable>
-      <EnvironmentVariables>
-         <EnvironmentVariable
-            value = ""
-            isEnabled = "NO">
-         </EnvironmentVariable>
-      </EnvironmentVariables>
-      <AdditionalOptions>
-      </AdditionalOptions>
-   </LaunchAction>
-   <ProfileAction
-      displayScaleIsEnabled = "NO"
-      displayScale = "1.00"
-      shouldUseLaunchSchemeArgsEnv = "YES"
-      savedToolIdentifier = ""
-      useCustomWorkingDirectory = "NO"
-      buildConfiguration = "Release">
-      <BuildableProductRunnable>
-         <BuildableReference
-            BuildableIdentifier = "primary"
-            BlueprintIdentifier = "1A63BC60134F5DAB002EDFB4"
-            BuildableName = "Fuzzy"
-            BlueprintName = "Fuzzy"
-            ReferencedContainer = "container:ANTLR.xcodeproj">
-         </BuildableReference>
-      </BuildableProductRunnable>
-   </ProfileAction>
-   <AnalyzeAction
-      buildConfiguration = "Debug">
-   </AnalyzeAction>
-   <ArchiveAction
-      buildConfiguration = "Release"
-      revealArchiveInOrganizer = "YES">
-   </ArchiveAction>
-</Scheme>
diff --git a/runtime/ObjC/Framework/ANTLR/ANTLR.xcodeproj/xcuserdata/acondit.xcuserdatad/xcschemes/LL-start.xcscheme b/runtime/ObjC/Framework/ANTLR/ANTLR.xcodeproj/xcuserdata/acondit.xcuserdatad/xcschemes/LL-start.xcscheme
deleted file mode 100644
index 5e618e1..0000000
--- a/runtime/ObjC/Framework/ANTLR/ANTLR.xcodeproj/xcuserdata/acondit.xcuserdatad/xcschemes/LL-start.xcscheme
+++ /dev/null
@@ -1,76 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<Scheme
-   version = "1.3">
-   <BuildAction
-      parallelizeBuildables = "YES"
-      buildImplicitDependencies = "YES">
-      <BuildActionEntries>
-         <BuildActionEntry
-            buildForTesting = "YES"
-            buildForRunning = "YES"
-            buildForProfiling = "YES"
-            buildForArchiving = "YES"
-            buildForAnalyzing = "YES">
-            <BuildableReference
-               BuildableIdentifier = "primary"
-               BlueprintIdentifier = "1A63BD4B134F5F43002EDFB4"
-               BuildableName = "LL-start"
-               BlueprintName = "LL-start"
-               ReferencedContainer = "container:ANTLR.xcodeproj">
-            </BuildableReference>
-         </BuildActionEntry>
-      </BuildActionEntries>
-   </BuildAction>
-   <TestAction
-      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.GDB"
-      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.GDB"
-      shouldUseLaunchSchemeArgsEnv = "YES"
-      buildConfiguration = "Debug">
-      <Testables>
-      </Testables>
-   </TestAction>
-   <LaunchAction
-      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.GDB"
-      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.GDB"
-      displayScaleIsEnabled = "NO"
-      displayScale = "1.00"
-      launchStyle = "0"
-      useCustomWorkingDirectory = "NO"
-      buildConfiguration = "Debug">
-      <BuildableProductRunnable>
-         <BuildableReference
-            BuildableIdentifier = "primary"
-            BlueprintIdentifier = "1A63BD4B134F5F43002EDFB4"
-            BuildableName = "LL-start"
-            BlueprintName = "LL-start"
-            ReferencedContainer = "container:ANTLR.xcodeproj">
-         </BuildableReference>
-      </BuildableProductRunnable>
-      <AdditionalOptions>
-      </AdditionalOptions>
-   </LaunchAction>
-   <ProfileAction
-      displayScaleIsEnabled = "NO"
-      displayScale = "1.00"
-      shouldUseLaunchSchemeArgsEnv = "YES"
-      savedToolIdentifier = ""
-      useCustomWorkingDirectory = "NO"
-      buildConfiguration = "Release">
-      <BuildableProductRunnable>
-         <BuildableReference
-            BuildableIdentifier = "primary"
-            BlueprintIdentifier = "1A63BD4B134F5F43002EDFB4"
-            BuildableName = "LL-start"
-            BlueprintName = "LL-start"
-            ReferencedContainer = "container:ANTLR.xcodeproj">
-         </BuildableReference>
-      </BuildableProductRunnable>
-   </ProfileAction>
-   <AnalyzeAction
-      buildConfiguration = "Debug">
-   </AnalyzeAction>
-   <ArchiveAction
-      buildConfiguration = "Release"
-      revealArchiveInOrganizer = "YES">
-   </ArchiveAction>
-</Scheme>
diff --git a/runtime/ObjC/Framework/examples/LL-star/SimpleC.tokens b/runtime/ObjC/Framework/examples/LL-star/SimpleC.tokens
index 635b4e1..1d3555d 100644
--- a/runtime/ObjC/Framework/examples/LL-star/SimpleC.tokens
+++ b/runtime/ObjC/Framework/examples/LL-star/SimpleC.tokens
@@ -1,31 +1,31 @@
-T__20=20
-INT=5
-ID=4
-T__9=9
-T__8=8
T__7=7
-T__19=19
-WS=6
-T__16=16
-T__15=15
-T__18=18
-T__17=17
-T__12=12
+T__8=8
+T__9=9
+T__10=10
T__11=11
-T__14=14
+T__12=12
T__13=13
-T__10=10
-'char'=12
-'}'=15
-'=='=18
-'{'=14
-'void'=13
-';'=7
-'='=17
-'int'=11
-'<'=19
-'('=8
+T__14=14
+T__15=15
+T__16=16
+T__17=17
+T__18=18
+T__19=19
+T__20=20
+ID=4
+INT=5
+WS=6
+'('=7
+')'=8
+'+'=9
+','=10
+';'=11
+'<'=12
+'='=13
+'=='=14
+'char'=15
'for'=16
-'+'=20
-','=9
-')'=10
+'int'=17
+'void'=18
+'{'=19
+'}'=20
diff --git a/runtime/ObjC/Framework/examples/LL-star/SimpleCLexer.h b/runtime/ObjC/Framework/examples/LL-star/SimpleCLexer.h
index b640542..c9deb4f 100644
--- a/runtime/ObjC/Framework/examples/LL-star/SimpleCLexer.h
+++ b/runtime/ObjC/Framework/examples/LL-star/SimpleCLexer.h
@@ -1,7 +1,7 @@
-// $ANTLR ${project.version} ${buildNumber} SimpleC.g 2011-05-06 13:53:12
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g 2012-02-16 17:39:19

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
#import <ANTLR/ANTLR.h>
@@ -11,8 +11,8 @@

/* Start cyclicDFAInterface */

-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
+#pragma mark Rule return scopes Interface start
+#pragma mark Rule return scopes Interface end
#pragma mark Tokens
#ifdef EOF
#undef EOF
@@ -36,12 +36,12 @@
#define INT 5
#define WS 6
/* interface lexer class */
-@interface SimpleCLexer : ANTLRLexer { // line 283
+@interface SimpleCLexer : Lexer { // line 283
/* ObjC start of actions.lexer.memVars */
/* ObjC end of actions.lexer.memVars */
}
+ (void) initialize;
-+ (SimpleCLexer *)newSimpleCLexerWithCharStream:(id<ANTLRCharStream>)anInput;
++ (SimpleCLexer *)newSimpleCLexerWithCharStream:(id<CharStream>)anInput;
/* ObjC start actions.lexer.methodsDecl */
/* ObjC end actions.lexer.methodsDecl */
- (void) mT__7 ;
diff --git a/runtime/ObjC/Framework/examples/LL-star/SimpleCLexer.m b/runtime/ObjC/Framework/examples/LL-star/SimpleCLexer.m
index b4e53ae..47a7f5a 100644
--- a/runtime/ObjC/Framework/examples/LL-star/SimpleCLexer.m
+++ b/runtime/ObjC/Framework/examples/LL-star/SimpleCLexer.m
@@ -1,8 +1,8 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : SimpleC.g
- *     -                            On : 2011-05-06 13:53:12
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g
+ *     -                            On : 2012-02-16 17:39:19
*     -                 for the lexer : SimpleCLexerLexer
*
* Editing it, at least manually, is not wise.
@@ -11,7 +11,7 @@
*
*
*/
-// $ANTLR ${project.version} ${buildNumber} SimpleC.g 2011-05-06 13:53:12
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g 2012-02-16 17:39:19


/* -----------------------------------------
@@ -31,7 +31,7 @@

+ (void) initialize
{
-    [ANTLRBaseRecognizer setGrammarFileName:@"SimpleC.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g"];
}

+ (NSString *) tokenNameForType:(NSInteger)aTokenType
@@ -39,14 +39,14 @@
return [[self getTokenNames] objectAtIndex:aTokenType];
}

-+ (SimpleCLexer *)newSimpleCLexerWithCharStream:(id<ANTLRCharStream>)anInput
++ (SimpleCLexer *)newSimpleCLexerWithCharStream:(id<CharStream>)anInput
{
return [[SimpleCLexer alloc] initWithCharStream:anInput];
}

-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
+- (id) initWithCharStream:(id<CharStream>)anInput
{
-    self = [super initWithCharStream:anInput State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:18+1] retain]];
+    self = [super initWithCharStream:anInput State:[RecognizerSharedState newRecognizerSharedStateWithRuleLen:18+1]];
if ( self != nil ) {
}
return self;
@@ -67,490 +67,507 @@
- (void) mT__7
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__7;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:7:6: ( '(' ) // ruleBlockSingleAlt
-        // SimpleC.g:7:8: '(' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:7:6: ( '(' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:7:8: '(' // alt
{
-        [self matchChar:'('];


+        [self matchChar:'('];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__7" */
-
// $ANTLR start "T__8"
- (void) mT__8
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__8;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:8:6: ( ')' ) // ruleBlockSingleAlt
-        // SimpleC.g:8:8: ')' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:8:6: ( ')' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:8:8: ')' // alt
{
-        [self matchChar:')'];


+        [self matchChar:')'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__8" */
-
// $ANTLR start "T__9"
- (void) mT__9
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__9;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:9:6: ( '+' ) // ruleBlockSingleAlt
-        // SimpleC.g:9:8: '+' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:9:6: ( '+' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:9:8: '+' // alt
{
-        [self matchChar:'+'];


+        [self matchChar:'+'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__9" */
-
// $ANTLR start "T__10"
- (void) mT__10
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__10;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:10:7: ( ',' ) // ruleBlockSingleAlt
-        // SimpleC.g:10:9: ',' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:10:7: ( ',' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:10:9: ',' // alt
{
-        [self matchChar:','];


+        [self matchChar:','];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__10" */
-
// $ANTLR start "T__11"
- (void) mT__11
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__11;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:11:7: ( ';' ) // ruleBlockSingleAlt
-        // SimpleC.g:11:9: ';' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:11:7: ( ';' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:11:9: ';' // alt
{
-        [self matchChar:';'];


+        [self matchChar:';'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__11" */
-
// $ANTLR start "T__12"
- (void) mT__12
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__12;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:12:7: ( '<' ) // ruleBlockSingleAlt
-        // SimpleC.g:12:9: '<' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:12:7: ( '<' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:12:9: '<' // alt
{
-        [self matchChar:'<'];


+        [self matchChar:'<'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__12" */
-
// $ANTLR start "T__13"
- (void) mT__13
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__13;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:13:7: ( '=' ) // ruleBlockSingleAlt
-        // SimpleC.g:13:9: '=' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:13:7: ( '=' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:13:9: '=' // alt
{
-        [self matchChar:'='];


+        [self matchChar:'='];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__13" */
-
// $ANTLR start "T__14"
- (void) mT__14
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__14;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:14:7: ( '==' ) // ruleBlockSingleAlt
-        // SimpleC.g:14:9: '==' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:14:7: ( '==' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:14:9: '==' // alt
{
-        [self matchString:@"=="];


+        [self matchString:@"=="];

+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__14" */
-
// $ANTLR start "T__15"
- (void) mT__15
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__15;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:15:7: ( 'char' ) // ruleBlockSingleAlt
-        // SimpleC.g:15:9: 'char' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:15:7: ( 'char' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:15:9: 'char' // alt
{
-        [self matchString:@"char"];


+        [self matchString:@"char"];
+

+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__15" */
-
// $ANTLR start "T__16"
- (void) mT__16
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__16;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:16:7: ( 'for' ) // ruleBlockSingleAlt
-        // SimpleC.g:16:9: 'for' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:16:7: ( 'for' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:16:9: 'for' // alt
{
-        [self matchString:@"for"];


+        [self matchString:@"for"];
+

+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__16" */
-
// $ANTLR start "T__17"
- (void) mT__17
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__17;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:17:7: ( 'int' ) // ruleBlockSingleAlt
-        // SimpleC.g:17:9: 'int' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:17:7: ( 'int' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:17:9: 'int' // alt
{
-        [self matchString:@"int"];


+        [self matchString:@"int"];

+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__17" */
-
// $ANTLR start "T__18"
- (void) mT__18
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__18;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:18:7: ( 'void' ) // ruleBlockSingleAlt
-        // SimpleC.g:18:9: 'void' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:18:7: ( 'void' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:18:9: 'void' // alt
{
-        [self matchString:@"void"];


+        [self matchString:@"void"];

+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__18" */
-
// $ANTLR start "T__19"
- (void) mT__19
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__19;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:19:7: ( '{' ) // ruleBlockSingleAlt
-        // SimpleC.g:19:9: '{' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:19:7: ( '{' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:19:9: '{' // alt
{
-        [self matchChar:'{'];


+        [self matchChar:'{'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__19" */
-
// $ANTLR start "T__20"
- (void) mT__20
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__20;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:20:7: ( '}' ) // ruleBlockSingleAlt
-        // SimpleC.g:20:9: '}' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:20:7: ( '}' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:20:9: '}' // alt
{
-        [self matchChar:'}'];


+        [self matchChar:'}'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__20" */
-
// $ANTLR start "ID"
- (void) mID
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = ID;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:94:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* ) // ruleBlockSingleAlt
-        // SimpleC.g:94:9: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:94:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:94:9: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* // alt
{
+
if ((([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
} else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

+

do {
NSInteger alt1=2;
@@ -562,17 +579,18 @@

switch (alt1) {
case 1 : ;
-                    // SimpleC.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g: // alt
{
+
if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))||(([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

@@ -582,38 +600,38 @@
} while (YES);
loop1: ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "ID" */
-
// $ANTLR start "INT"
- (void) mINT
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = INT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:97:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
-        // SimpleC.g:97:7: ( '0' .. '9' )+ // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:97:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:97:7: ( '0' .. '9' )+ // alt
{
-        // SimpleC.g:97:7: ( '0' .. '9' )+ // positiveClosureBlock
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:97:7: ( '0' .. '9' )+ // positiveClosureBlock
NSInteger cnt2 = 0;
do {
NSInteger alt2 = 2;
@@ -625,63 +643,64 @@

switch (alt2) {
case 1 : ;
-                    // SimpleC.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g: // alt
{
+
if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))) {
[input consume];
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

default :
if ( cnt2 >= 1 )
goto loop2;
-                    ANTLREarlyExitException *eee =
-                        [ANTLREarlyExitException newException:input decisionNumber:2];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:2];
@throw eee;
}
cnt2++;
} while (YES);
loop2: ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "INT" */
-
// $ANTLR start "WS"
- (void) mWS
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = WS;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:100:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ ) // ruleBlockSingleAlt
-        // SimpleC.g:100:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:100:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:100:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // alt
{
-        // SimpleC.g:100:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // positiveClosureBlock
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:100:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // positiveClosureBlock
NSInteger cnt3 = 0;
do {
NSInteger alt3 = 2;
@@ -693,55 +712,55 @@

switch (alt3) {
case 1 : ;
-                    // SimpleC.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g: // alt
{
+
if ((([input LA:1] >= '\t') && ([input LA:1] <= '\n'))||[input LA:1] == '\r'||[input LA:1] == ' ') {
[input consume];
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

default :
if ( cnt3 >= 1 )
goto loop3;
-                    ANTLREarlyExitException *eee =
-                        [ANTLREarlyExitException newException:input decisionNumber:3];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:3];
@throw eee;
}
cnt3++;
} while (YES);
loop3: ;

+

_channel=HIDDEN;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "WS" */
-
- (void) mTokens
{
-    // SimpleC.g:1:8: ( T__7 | T__8 | T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | ID | INT | WS ) //ruleblock
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:8: ( T__7 | T__8 | T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | ID | INT | WS ) //ruleblock
NSInteger alt4=17;
unichar charLA4 = [input LA:1];
switch (charLA4) {
@@ -992,7 +1011,7 @@
break;

default: ;
-        ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:4 state:0 stream:input];
+        NoViableAltException *nvae = [NoViableAltException newException:4 state:0 stream:input];
nvae.c = charLA4;
@throw nvae;

@@ -1000,156 +1019,190 @@

switch (alt4) {
case 1 : ;
-            // SimpleC.g:1:10: T__7 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:10: T__7 // alt
{
-            [self mT__7];


+            [self mT__7];
+

+
}
break;
case 2 : ;
-            // SimpleC.g:1:15: T__8 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:15: T__8 // alt
{
-            [self mT__8];


+            [self mT__8];

+
+
}
break;
case 3 : ;
-            // SimpleC.g:1:20: T__9 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:20: T__9 // alt
{
-            [self mT__9];


+            [self mT__9];
+

+
}
break;
case 4 : ;
-            // SimpleC.g:1:25: T__10 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:25: T__10 // alt
{
-            [self mT__10];


+            [self mT__10];
+

+
}
break;
case 5 : ;
-            // SimpleC.g:1:31: T__11 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:31: T__11 // alt
{
-            [self mT__11];


+            [self mT__11];
+

+
}
break;
case 6 : ;
-            // SimpleC.g:1:37: T__12 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:37: T__12 // alt
{
-            [self mT__12];


+            [self mT__12];

+
+
}
break;
case 7 : ;
-            // SimpleC.g:1:43: T__13 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:43: T__13 // alt
{
-            [self mT__13];


+            [self mT__13];

+
+
}
break;
case 8 : ;
-            // SimpleC.g:1:49: T__14 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:49: T__14 // alt
{
-            [self mT__14];


+            [self mT__14];
+

+
}
break;
case 9 : ;
-            // SimpleC.g:1:55: T__15 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:55: T__15 // alt
{
-            [self mT__15];


+            [self mT__15];

+
+
}
break;
case 10 : ;
-            // SimpleC.g:1:61: T__16 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:61: T__16 // alt
{
-            [self mT__16];


+            [self mT__16];
+

+
}
break;
case 11 : ;
-            // SimpleC.g:1:67: T__17 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:67: T__17 // alt
{
-            [self mT__17];


+            [self mT__17];
+

+
}
break;
case 12 : ;
-            // SimpleC.g:1:73: T__18 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:73: T__18 // alt
{
-            [self mT__18];


+            [self mT__18];
+

+
}
break;
case 13 : ;
-            // SimpleC.g:1:79: T__19 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:79: T__19 // alt
{
-            [self mT__19];


+            [self mT__19];
+

+
}
break;
case 14 : ;
-            // SimpleC.g:1:85: T__20 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:85: T__20 // alt
{
-            [self mT__20];


+            [self mT__20];
+

+
}
break;
case 15 : ;
-            // SimpleC.g:1:91: ID // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:91: ID // alt
{
-            [self mID];


+            [self mID];
+

+
}
break;
case 16 : ;
-            // SimpleC.g:1:94: INT // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:94: INT // alt
{
-            [self mINT];


+            [self mINT];
+

+
}
break;
case 17 : ;
-            // SimpleC.g:1:98: WS // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:1:98: WS // alt
{
-            [self mWS];


+            [self mWS];
+

+
}
break;

diff --git a/runtime/ObjC/Framework/examples/LL-star/SimpleCParser.h b/runtime/ObjC/Framework/examples/LL-star/SimpleCParser.h
index 6e3b2af..b9cc488 100644
--- a/runtime/ObjC/Framework/examples/LL-star/SimpleCParser.h
+++ b/runtime/ObjC/Framework/examples/LL-star/SimpleCParser.h
@@ -1,7 +1,7 @@
-// $ANTLR ${project.version} ${buildNumber} SimpleC.g 2011-05-06 13:53:12
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g 2012-02-16 17:39:18

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
#import <ANTLR/ANTLR.h>
@@ -23,10 +23,10 @@ typedef enum {
#endif

#pragma mark Cyclic DFA interface start DFA2
-@interface DFA2 : ANTLRDFA {
+@interface DFA2 : DFA {
}
-+ newDFA2WithRecognizer:(ANTLRBaseRecognizer *)theRecognizer;
-- initWithRecognizer:(ANTLRBaseRecognizer *)recognizer;
++ (DFA2 *) newDFA2WithRecognizer:(BaseRecognizer *)theRecognizer;
+- initWithRecognizer:(BaseRecognizer *)recognizer;
@end /* end of DFA2 interface  */

#pragma mark Cyclic DFA interface end DFA2
@@ -53,20 +53,16 @@ typedef enum {
#define ID 4
#define INT 5
#define WS 6
-#pragma mark Dynamic Global Scopes
-#pragma mark Dynamic Rule Scopes
-#pragma mark Rule Return Scopes start
+#pragma mark Dynamic Global Scopes globalAttributeScopeInterface
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeInterface
+#pragma mark Rule Return Scopes returnScopeInterface

/* Interface grammar class */
-@interface SimpleCParser : ANTLRParser { /* line 572 */
-/* ObjC start of ruleAttributeScopeMemVar */
+@interface SimpleCParser  : Parser { /* line 572 */
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeDecl
+#pragma mark Dynamic Global Rule Scopes globalAttributeScopeMemVar


-/* ObjC end of ruleAttributeScopeMemVar */
-/* ObjC start of globalAttributeScopeMemVar */
-
-
-/* ObjC end of globalAttributeScopeMemVar */
/* ObjC start of actions.(actionScope).memVars */
/* ObjC end of actions.(actionScope).memVars */
/* ObjC start of memVars */
@@ -81,7 +77,7 @@ DFA2 *dfa2;
/* ObjC end of properties */

+ (void) initialize;
-+ (id) newSimpleCParser:(id<ANTLRTokenStream>)aStream;
++ (id) newSimpleCParser:(id<TokenStream>)aStream;
/* ObjC start of actions.(actionScope).methodsDecl */
/* ObjC end of actions.(actionScope).methodsDecl */

diff --git a/runtime/ObjC/Framework/examples/LL-star/SimpleCParser.m b/runtime/ObjC/Framework/examples/LL-star/SimpleCParser.m
index e65a149..da605a8 100644
--- a/runtime/ObjC/Framework/examples/LL-star/SimpleCParser.m
+++ b/runtime/ObjC/Framework/examples/LL-star/SimpleCParser.m
@@ -1,8 +1,8 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : SimpleC.g
- *     -                            On : 2011-05-06 13:53:12
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g
+ *     -                            On : 2012-02-16 17:39:18
*     -                for the parser : SimpleCParserParser
*
* Editing it, at least manually, is not wise.
@@ -11,7 +11,7 @@
*
*
*/
-// $ANTLR ${project.version} ${buildNumber} SimpleC.g 2011-05-06 13:53:12
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g 2012-02-16 17:39:18


/* -----------------------------------------
@@ -26,41 +26,76 @@
* Start of recognizer
*/
#pragma mark Cyclic DFA implementation start DFA2
+
@implementation DFA2
const static NSInteger dfa2_eot[13] =
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const static NSInteger dfa2_eof[13] =
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const static unichar dfa2_min[13] =
-    {4,4,7,4,0,4,11,8,0,0,4,4,8};
+    {4,4,7,4,-1,4,11,8,-1,-1,4,4,8};
const static unichar dfa2_max[13] =
-    {18,4,11,18,0,4,19,10,0,0,18,4,10};
+    {18,4,11,18,-1,4,19,10,-1,-1,18,4,10};
const static NSInteger dfa2_accept[13] =
{-1,-1,-1,-1,1,-1,-1,-1,2,3,-1,-1,-1};
const static NSInteger dfa2_special[13] =
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static NSInteger dfa2_transition[] = {};
-const static NSInteger dfa2_transition0[] = {3, -1, -1, -1, 4};
-const static NSInteger dfa2_transition1[] = {6, -1, 10};
-const static NSInteger dfa2_transition2[] = {8, -1, -1, -1, -1, -1, -1,
- -1, 9};
-const static NSInteger dfa2_transition3[] = {2};
-const static NSInteger dfa2_transition4[] = {1, -1, -1, -1, -1, -1, -1,
- -1, -1, -1, -1, 1, -1, 1, 1};
-const static NSInteger dfa2_transition5[] = {7};
-const static NSInteger dfa2_transition6[] = {11, -1, -1, -1, -1, -1, -1,
- -1, -1, -1, -1, 11, -1, 11, 11};
-const static NSInteger dfa2_transition7[] = {12};
-const static NSInteger dfa2_transition8[] = {5, -1, -1, -1, 6, -1, -1, -1,
- -1, -1, -1, 5, -1, 5, 5};
-
-
-+ (id) newDFA2WithRecognizer:(ANTLRBaseRecognizer *)aRecognizer
+
+/** Used when there is no transition table entry for a particular state */
+#define dfa2_T_empty	    nil
+
+const static NSInteger dfa2_T0[] =
+{
+     3, -1, -1, -1, 4
+};
+const static NSInteger dfa2_T1[] =
+{
+     6, -1, 10
+};
+const static NSInteger dfa2_T2[] =
+{
+     8, -1, -1, -1, -1, -1, -1, -1, 9
+};
+const static NSInteger dfa2_T3[] =
+{
+     2
+};
+const static NSInteger dfa2_T4[] =
+{
+     1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1
+};
+const static NSInteger dfa2_T5[] =
+{
+     7
+};
+const static NSInteger dfa2_T6[] =
+{
+     11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, 11, 11
+};
+const static NSInteger dfa2_T7[] =
+{
+     12
+};
+const static NSInteger dfa2_T8[] =
+{
+     5, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, 5, -1, 5, 5
+};
+
+
+const static NSInteger *dfa2_transition[] =
+{
+    dfa2_T4, dfa2_T3, dfa2_T0, dfa2_T8, nil, dfa2_T5, dfa2_T2, dfa2_T1,
+    nil, nil, dfa2_T6, dfa2_T7, dfa2_T1
+};
+
+//const static NSInteger dfa2_transition[] = {};
+
++ (DFA2 *) newDFA2WithRecognizer:(BaseRecognizer *)aRecognizer
{
return [[[DFA2 alloc] initWithRecognizer:aRecognizer] retain];
}

-- (id) initWithRecognizer:(ANTLRBaseRecognizer *) theRecognizer
+- (id) initWithRecognizer:(BaseRecognizer *) theRecognizer
{
self = [super initWithRecognizer:theRecognizer];
if ( self != nil ) {
@@ -71,6 +106,8 @@ const static NSInteger dfa2_transition8[] = {5, -1, -1, -1, 6, -1, -1, -1,
max = dfa2_max;
accept = dfa2_accept;
special = dfa2_special;
+        transition = dfa2_transition;
+/*
if (!(transition = calloc(13, sizeof(void*)))) {
[self release];
return nil;
@@ -89,6 +126,7 @@ const static NSInteger dfa2_transition8[] = {5, -1, -1, -1, 6, -1, -1, -1,
transition[7] = dfa2_transition6;
transition[8] = dfa2_transition7;
transition[9] = dfa2_transition1;
+ */
}
return self;
}
@@ -222,106 +260,96 @@ static ANTLRBitSet *FOLLOW_8_in_atom579;
static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x0000000000000002LL};


-#pragma mark Dynamic Global Scopes
-
-#pragma mark Dynamic Rule Scopes
+#pragma mark Dynamic Global globalAttributeScopeImplementation

-#pragma mark Rule Return Scopes start
-//#pragma mark Rule return scopes start
-//
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation

-#pragma mark Rule return scopes start
+#pragma mark Rule Return Scopes returnScopeImplementation

@implementation SimpleCParser  // line 637

/* ObjC start of ruleAttributeScope */
-#pragma mark Dynamic Rule Scopes
+#pragma mark Dynamic Rule Scopes ruleAttributeScope
/* ObjC end of ruleAttributeScope */
-#pragma mark global Attribute Scopes
+#pragma mark global Attribute Scopes globalAttributeScope
/* ObjC start globalAttributeScope */
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */
-/* ObjC end actions.(actionScope).synthesize */
/* ObjC start synthesize() */
-/* ObjC end synthesize() */

+ (void) initialize
{
#pragma mark Bitsets
-    FOLLOW_declaration_in_program28 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declaration_in_program28_data Count:(NSUInteger)1] retain];
-    FOLLOW_variable_in_declaration50 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_declaration50_data Count:(NSUInteger)1] retain];
-    FOLLOW_functionHeader_in_declaration60 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration60_data Count:(NSUInteger)1] retain];
-    FOLLOW_11_in_declaration62 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_declaration62_data Count:(NSUInteger)1] retain];
-    FOLLOW_functionHeader_in_declaration75 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration75_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_declaration77 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_declaration77_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_variable99 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_variable99_data Count:(NSUInteger)1] retain];
-    FOLLOW_declarator_in_variable101 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_variable101_data Count:(NSUInteger)1] retain];
-    FOLLOW_11_in_variable103 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_variable103_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_declarator122 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_declarator122_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_functionHeader151 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_functionHeader151_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_functionHeader153 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_functionHeader153_data Count:(NSUInteger)1] retain];
-    FOLLOW_7_in_functionHeader155 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_functionHeader155_data Count:(NSUInteger)1] retain];
-    FOLLOW_formalParameter_in_functionHeader159 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader159_data Count:(NSUInteger)1] retain];
-    FOLLOW_10_in_functionHeader163 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_10_in_functionHeader163_data Count:(NSUInteger)1] retain];
-    FOLLOW_formalParameter_in_functionHeader165 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader165_data Count:(NSUInteger)1] retain];
-    FOLLOW_8_in_functionHeader173 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_functionHeader173_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_formalParameter195 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_formalParameter195_data Count:(NSUInteger)1] retain];
-    FOLLOW_declarator_in_formalParameter197 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_formalParameter197_data Count:(NSUInteger)1] retain];
-    FOLLOW_19_in_block286 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_block286_data Count:(NSUInteger)1] retain];
-    FOLLOW_variable_in_block300 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_block300_data Count:(NSUInteger)1] retain];
-    FOLLOW_stat_in_block315 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_stat_in_block315_data Count:(NSUInteger)1] retain];
-    FOLLOW_20_in_block326 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_20_in_block326_data Count:(NSUInteger)1] retain];
-    FOLLOW_forStat_in_stat338 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_forStat_in_stat338_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_stat346 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_stat346_data Count:(NSUInteger)1] retain];
-    FOLLOW_11_in_stat348 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_stat348_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_stat362 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_stat362_data Count:(NSUInteger)1] retain];
-    FOLLOW_assignStat_in_stat370 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_stat370_data Count:(NSUInteger)1] retain];
-    FOLLOW_11_in_stat372 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_stat372_data Count:(NSUInteger)1] retain];
-    FOLLOW_11_in_stat380 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_stat380_data Count:(NSUInteger)1] retain];
-    FOLLOW_16_in_forStat399 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_16_in_forStat399_data Count:(NSUInteger)1] retain];
-    FOLLOW_7_in_forStat401 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_forStat401_data Count:(NSUInteger)1] retain];
-    FOLLOW_assignStat_in_forStat403 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_forStat403_data Count:(NSUInteger)1] retain];
-    FOLLOW_11_in_forStat405 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_forStat405_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_forStat407 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat407_data Count:(NSUInteger)1] retain];
-    FOLLOW_11_in_forStat409 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_forStat409_data Count:(NSUInteger)1] retain];
-    FOLLOW_assignStat_in_forStat411 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_forStat411_data Count:(NSUInteger)1] retain];
-    FOLLOW_8_in_forStat413 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_forStat413_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_forStat415 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_forStat415_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_assignStat442 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_assignStat442_data Count:(NSUInteger)1] retain];
-    FOLLOW_13_in_assignStat444 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_13_in_assignStat444_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_assignStat446 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_assignStat446_data Count:(NSUInteger)1] retain];
-    FOLLOW_condExpr_in_expr468 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_condExpr_in_expr468_data Count:(NSUInteger)1] retain];
-    FOLLOW_aexpr_in_condExpr487 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_aexpr_in_condExpr487_data Count:(NSUInteger)1] retain];
-    FOLLOW_set_in_condExpr491 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_condExpr491_data Count:(NSUInteger)1] retain];
-    FOLLOW_aexpr_in_condExpr499 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_aexpr_in_condExpr499_data Count:(NSUInteger)1] retain];
-    FOLLOW_atom_in_aexpr521 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_aexpr521_data Count:(NSUInteger)1] retain];
-    FOLLOW_9_in_aexpr525 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_aexpr525_data Count:(NSUInteger)1] retain];
-    FOLLOW_atom_in_aexpr527 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_aexpr527_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_atom547 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_atom547_data Count:(NSUInteger)1] retain];
-    FOLLOW_INT_in_atom561 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_atom561_data Count:(NSUInteger)1] retain];
-    FOLLOW_7_in_atom575 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_atom575_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_atom577 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_atom577_data Count:(NSUInteger)1] retain];
-    FOLLOW_8_in_atom579 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_atom579_data Count:(NSUInteger)1] retain];
-
-    [ANTLRBaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
+    FOLLOW_declaration_in_program28 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_declaration_in_program28_data Count:(NSUInteger)1] retain];
+    FOLLOW_variable_in_declaration50 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_declaration50_data Count:(NSUInteger)1] retain];
+    FOLLOW_functionHeader_in_declaration60 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration60_data Count:(NSUInteger)1] retain];
+    FOLLOW_11_in_declaration62 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_declaration62_data Count:(NSUInteger)1] retain];
+    FOLLOW_functionHeader_in_declaration75 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration75_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_declaration77 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_declaration77_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_variable99 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_variable99_data Count:(NSUInteger)1] retain];
+    FOLLOW_declarator_in_variable101 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_variable101_data Count:(NSUInteger)1] retain];
+    FOLLOW_11_in_variable103 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_variable103_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_declarator122 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_declarator122_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_functionHeader151 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_functionHeader151_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_functionHeader153 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_functionHeader153_data Count:(NSUInteger)1] retain];
+    FOLLOW_7_in_functionHeader155 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_functionHeader155_data Count:(NSUInteger)1] retain];
+    FOLLOW_formalParameter_in_functionHeader159 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader159_data Count:(NSUInteger)1] retain];
+    FOLLOW_10_in_functionHeader163 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_10_in_functionHeader163_data Count:(NSUInteger)1] retain];
+    FOLLOW_formalParameter_in_functionHeader165 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader165_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_functionHeader173 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_functionHeader173_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_formalParameter195 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_formalParameter195_data Count:(NSUInteger)1] retain];
+    FOLLOW_declarator_in_formalParameter197 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_formalParameter197_data Count:(NSUInteger)1] retain];
+    FOLLOW_19_in_block286 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_block286_data Count:(NSUInteger)1] retain];
+    FOLLOW_variable_in_block300 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_block300_data Count:(NSUInteger)1] retain];
+    FOLLOW_stat_in_block315 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_stat_in_block315_data Count:(NSUInteger)1] retain];
+    FOLLOW_20_in_block326 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_20_in_block326_data Count:(NSUInteger)1] retain];
+    FOLLOW_forStat_in_stat338 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_forStat_in_stat338_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_stat346 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_stat346_data Count:(NSUInteger)1] retain];
+    FOLLOW_11_in_stat348 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_stat348_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_stat362 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_stat362_data Count:(NSUInteger)1] retain];
+    FOLLOW_assignStat_in_stat370 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_stat370_data Count:(NSUInteger)1] retain];
+    FOLLOW_11_in_stat372 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_stat372_data Count:(NSUInteger)1] retain];
+    FOLLOW_11_in_stat380 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_stat380_data Count:(NSUInteger)1] retain];
+    FOLLOW_16_in_forStat399 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_16_in_forStat399_data Count:(NSUInteger)1] retain];
+    FOLLOW_7_in_forStat401 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_forStat401_data Count:(NSUInteger)1] retain];
+    FOLLOW_assignStat_in_forStat403 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_forStat403_data Count:(NSUInteger)1] retain];
+    FOLLOW_11_in_forStat405 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_forStat405_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_forStat407 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat407_data Count:(NSUInteger)1] retain];
+    FOLLOW_11_in_forStat409 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_forStat409_data Count:(NSUInteger)1] retain];
+    FOLLOW_assignStat_in_forStat411 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_forStat411_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_forStat413 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_forStat413_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_forStat415 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_forStat415_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_assignStat442 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_assignStat442_data Count:(NSUInteger)1] retain];
+    FOLLOW_13_in_assignStat444 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_13_in_assignStat444_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_assignStat446 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_assignStat446_data Count:(NSUInteger)1] retain];
+    FOLLOW_condExpr_in_expr468 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_condExpr_in_expr468_data Count:(NSUInteger)1] retain];
+    FOLLOW_aexpr_in_condExpr487 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_aexpr_in_condExpr487_data Count:(NSUInteger)1] retain];
+    FOLLOW_set_in_condExpr491 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_condExpr491_data Count:(NSUInteger)1] retain];
+    FOLLOW_aexpr_in_condExpr499 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_aexpr_in_condExpr499_data Count:(NSUInteger)1] retain];
+    FOLLOW_atom_in_aexpr521 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_aexpr521_data Count:(NSUInteger)1] retain];
+    FOLLOW_9_in_aexpr525 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_aexpr525_data Count:(NSUInteger)1] retain];
+    FOLLOW_atom_in_aexpr527 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_aexpr527_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_atom547 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_atom547_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_atom561 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_atom561_data Count:(NSUInteger)1] retain];
+    FOLLOW_7_in_atom575 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_atom575_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_atom577 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_atom577_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_atom579 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_atom579_data Count:(NSUInteger)1] retain];
+
+    [BaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
@"ID", @"INT", @"WS", @"'('", @"')'", @"'+'", @"','", @"';'", @"'<'", @"'='",
@"'=='", @"'char'", @"'for'", @"'int'", @"'void'", @"'{'", @"'}'", nil] retain]];
-    [ANTLRBaseRecognizer setGrammarFileName:@"SimpleC.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g"];
}

-+ (SimpleCParser *)newSimpleCParser:(id<ANTLRTokenStream>)aStream
++ (SimpleCParser *)newSimpleCParser:(id<TokenStream>)aStream
{
return [[SimpleCParser alloc] initWithTokenStream:aStream];
-
-
}

-- (id) initWithTokenStream:(id<ANTLRTokenStream>)aStream
+- (id) initWithTokenStream:(id<TokenStream>)aStream
{
-    self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:15+1] retain]];
+    self = [super initWithTokenStream:aStream State:[[RecognizerSharedState newRecognizerSharedStateWithRuleLen:15+1] retain]];
if ( self != nil ) {
-
-
dfa2 = [DFA2 newDFA2WithRecognizer:self];
/* start of actions-actionScope-init */
/* start of init */
@@ -335,8 +363,6 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[super dealloc];
}

-/* ObjC start members */
-/* ObjC end members */
/* ObjC start actions.(actionScope).methods */
/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
@@ -344,18 +370,23 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
/* ObjC start rules */
/*
* $ANTLR start program
- * SimpleC.g:7:1: program : ( declaration )+ ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:7:1: program : ( declaration )+ ;
*/
- (void) program
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleC.g:8:5: ( ( declaration )+ ) // ruleBlockSingleAlt
-        // SimpleC.g:8:9: ( declaration )+ // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:8:5: ( ( declaration )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:8:9: ( declaration )+ // alt
{
-        // SimpleC.g:8:9: ( declaration )+ // positiveClosureBlock
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:8:9: ( declaration )+ // positiveClosureBlock
NSInteger cnt1 = 0;
do {
NSInteger alt1 = 2;
@@ -367,8 +398,9 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

switch (alt1) {
case 1 : ;
-                    // SimpleC.g:8:9: declaration // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:8:9: declaration // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_declaration_in_program28];
[self declaration];
@@ -376,35 +408,34 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
}
break;

default :
if ( cnt1 >= 1 )
goto loop1;
-                    ANTLREarlyExitException *eee =
-                        [ANTLREarlyExitException newException:input decisionNumber:1];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:1];
@throw eee;
}
cnt1++;
} while (YES);
loop1: ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -413,26 +444,29 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

/*
* $ANTLR start declaration
- * SimpleC.g:20:1: declaration : ( variable | functionHeader ';' | functionHeader block );
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:20:1: declaration : ( variable | functionHeader ';' | functionHeader block );
*/
- (void) declaration
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-         NSString * functionHeader1 = nil ;
-
-         NSString * functionHeader2 = nil ;
-
+        /* ruleLabelDefs entry */
+        NSString * functionHeader1 = nil ;
+
+        NSString * functionHeader2 = nil ;

-        // SimpleC.g:21:5: ( variable | functionHeader ';' | functionHeader block ) //ruleblock
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:21:5: ( variable | functionHeader ';' | functionHeader block ) //ruleblock
NSInteger alt2=3;
alt2 = [dfa2 predict:input];
switch (alt2) {
case 1 : ;
-                // SimpleC.g:21:9: variable // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:21:9: variable // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_variable_in_declaration50];
[self variable];
@@ -440,12 +474,13 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
}
break;
case 2 : ;
-                // SimpleC.g:22:9: functionHeader ';' // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:22:9: functionHeader ';' // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_functionHeader_in_declaration60];
functionHeader1 = [self functionHeader];
@@ -453,18 +488,20 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
[self match:input TokenType:11 Follow:FOLLOW_11_in_declaration62];
+

NSLog(@"%@ is a declaration\n", functionHeader1
);

-
+
}
break;
case 3 : ;
-                // SimpleC.g:24:9: functionHeader block // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:24:9: functionHeader block // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_functionHeader_in_declaration75];
functionHeader2 = [self functionHeader];
@@ -472,7 +509,7 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
/* ruleRef */
[self pushFollow:FOLLOW_block_in_declaration77];
[self block];
@@ -480,26 +517,26 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


+

NSLog(@"%@ is a definition\n", functionHeader2
);

-
+
}
break;

}
-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -508,17 +545,22 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

/*
* $ANTLR start variable
- * SimpleC.g:28:1: variable : type declarator ';' ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:28:1: variable : type declarator ';' ;
*/
- (void) variable
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleC.g:29:5: ( type declarator ';' ) // ruleBlockSingleAlt
-        // SimpleC.g:29:9: type declarator ';' // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:29:5: ( type declarator ';' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:29:9: type declarator ';' // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_type_in_variable99];
[self type];
@@ -526,7 +568,7 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
/* ruleRef */
[self pushFollow:FOLLOW_declarator_in_variable101];
[self declarator];
@@ -534,22 +576,21 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
[self match:input TokenType:11 Follow:FOLLOW_11_in_variable103];
-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -558,32 +599,36 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

/*
* $ANTLR start declarator
- * SimpleC.g:32:1: declarator : ID ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:32:1: declarator : ID ;
*/
- (void) declarator
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleC.g:33:5: ( ID ) // ruleBlockSingleAlt
-        // SimpleC.g:33:9: ID // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:33:5: ( ID ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:33:9: ID // alt
{
-        [self match:input TokenType:ID Follow:FOLLOW_ID_in_declarator122];

+        [self match:input TokenType:ID Follow:FOLLOW_ID_in_declarator122];
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -592,13 +637,13 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

/*
* $ANTLR start functionHeader
- * SimpleC.g:36:1: functionHeader returns [NSString *name] : type ID '(' ( formalParameter ( ',' formalParameter )* )? ')' ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:36:1: functionHeader returns [NSString *name] : type ID '(' ( formalParameter ( ',' formalParameter )* )? ')' ;
*/
- (NSString *) functionHeader
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

+    /* ruleDeclarations */
NSString * name = nil ;


@@ -606,11 +651,13 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
name=nil; // for now you must init here rather than in 'returns'

@try {
-        ANTLRCommonToken *ID3 = nil;
+        /* ruleLabelDefs entry */
+        CommonToken *ID3 = nil;

-        // SimpleC.g:40:5: ( type ID '(' ( formalParameter ( ',' formalParameter )* )? ')' ) // ruleBlockSingleAlt
-        // SimpleC.g:40:9: type ID '(' ( formalParameter ( ',' formalParameter )* )? ')' // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:40:5: ( type ID '(' ( formalParameter ( ',' formalParameter )* )? ')' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:40:9: type ID '(' ( formalParameter ( ',' formalParameter )* )? ')' // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_type_in_functionHeader151];
[self type];
@@ -618,12 +665,12 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
-        ID3=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_functionHeader153];
-
+
+        ID3=(CommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_functionHeader153];
+
[self match:input TokenType:7 Follow:FOLLOW_7_in_functionHeader155];
-
-        // SimpleC.g:40:21: ( formalParameter ( ',' formalParameter )* )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:40:21: ( formalParameter ( ',' formalParameter )* )? // block
NSInteger alt4=2;
NSInteger LA4_0 = [input LA:1];

@@ -632,8 +679,9 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
}
switch (alt4) {
case 1 : ;
-                // SimpleC.g:40:23: formalParameter ( ',' formalParameter )* // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:40:23: formalParameter ( ',' formalParameter )* // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_formalParameter_in_functionHeader159];
[self formalParameter];
@@ -641,6 +689,7 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


+

do {
NSInteger alt3=2;
@@ -652,10 +701,11 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

switch (alt3) {
case 1 : ;
-                            // SimpleC.g:40:41: ',' formalParameter // alt
+                            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:40:41: ',' formalParameter // alt
{
-                            [self match:input TokenType:10 Follow:FOLLOW_10_in_functionHeader163];

+                            [self match:input TokenType:10 Follow:FOLLOW_10_in_functionHeader163];
+
/* ruleRef */
[self pushFollow:FOLLOW_formalParameter_in_functionHeader165];
[self formalParameter];
@@ -663,7 +713,7 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
}
break;

@@ -673,32 +723,32 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
} while (YES);
loop3: ;

-
+
}
break;

}

-
+
[self match:input TokenType:8 Follow:FOLLOW_8_in_functionHeader173];
+

name =  (ID3!=nil?ID3.text:nil);


-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return name;
@@ -707,17 +757,22 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

/*
* $ANTLR start formalParameter
- * SimpleC.g:44:1: formalParameter : type declarator ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:44:1: formalParameter : type declarator ;
*/
- (void) formalParameter
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleC.g:45:5: ( type declarator ) // ruleBlockSingleAlt
-        // SimpleC.g:45:9: type declarator // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:45:5: ( type declarator ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:45:9: type declarator // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_type_in_formalParameter195];
[self type];
@@ -725,7 +780,7 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
/* ruleRef */
[self pushFollow:FOLLOW_declarator_in_formalParameter197];
[self declarator];
@@ -733,20 +788,19 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -755,39 +809,43 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

/*
* $ANTLR start type
- * SimpleC.g:48:1: type : ( 'int' | 'char' | 'void' | ID );
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:48:1: type : ( 'int' | 'char' | 'void' | ID );
*/
- (void) type
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleC.g:49:5: ( 'int' | 'char' | 'void' | ID ) // ruleBlockSingleAlt
-        // SimpleC.g: // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:49:5: ( 'int' | 'char' | 'void' | ID ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g: // alt
{
+
if ([input LA:1] == ID||[input LA:1] == 15||(([input LA:1] >= 17) && ([input LA:1] <= 18))) {
[input consume];
[state setIsErrorRecovery:NO];
} else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
@throw mse;
}

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -796,18 +854,24 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

/*
* $ANTLR start block
- * SimpleC.g:55:1: block : '{' ( variable )* ( stat )* '}' ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:55:1: block : '{' ( variable )* ( stat )* '}' ;
*/
- (void) block
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleC.g:56:5: ( '{' ( variable )* ( stat )* '}' ) // ruleBlockSingleAlt
-        // SimpleC.g:56:9: '{' ( variable )* ( stat )* '}' // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:56:5: ( '{' ( variable )* ( stat )* '}' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:56:9: '{' ( variable )* ( stat )* '}' // alt
{
+
[self match:input TokenType:19 Follow:FOLLOW_19_in_block286];
+

do {
NSInteger alt5=2;
@@ -827,8 +891,9 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

switch (alt5) {
case 1 : ;
-                    // SimpleC.g:57:13: variable // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:57:13: variable // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_variable_in_block300];
[self variable];
@@ -836,7 +901,7 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
}
break;

@@ -846,6 +911,7 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
} while (YES);
loop5: ;

+

do {
NSInteger alt6=2;
@@ -857,8 +923,9 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

switch (alt6) {
case 1 : ;
-                    // SimpleC.g:58:13: stat // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:58:13: stat // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_stat_in_block315];
[self stat];
@@ -866,7 +933,7 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
}
break;

@@ -876,22 +943,21 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
} while (YES);
loop6: ;

-
+
[self match:input TokenType:20 Follow:FOLLOW_20_in_block326];
-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -900,15 +966,19 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

/*
* $ANTLR start stat
- * SimpleC.g:62:1: stat : ( forStat | expr ';' | block | assignStat ';' | ';' );
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:62:1: stat : ( forStat | expr ';' | block | assignStat ';' | ';' );
*/
- (void) stat
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleC.g:62:5: ( forStat | expr ';' | block | assignStat ';' | ';' ) //ruleblock
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:62:5: ( forStat | expr ';' | block | assignStat ';' | ';' ) //ruleblock
NSInteger alt7=5;
unichar charLA7 = [input LA:1];
switch (charLA7) {
@@ -928,7 +998,7 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
alt7=2;
}
else {
-                    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:7 state:2 stream:input];
+                    NoViableAltException *nvae = [NoViableAltException newException:7 state:2 stream:input];
nvae.c = LA7_2;
@throw nvae;

@@ -953,7 +1023,7 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
break;

default: ;
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:7 state:0 stream:input];
+            NoViableAltException *nvae = [NoViableAltException newException:7 state:0 stream:input];
nvae.c = charLA7;
@throw nvae;

@@ -961,8 +1031,9 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

switch (alt7) {
case 1 : ;
-                // SimpleC.g:62:7: forStat // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:62:7: forStat // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_forStat_in_stat338];
[self forStat];
@@ -970,12 +1041,13 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
}
break;
case 2 : ;
-                // SimpleC.g:63:7: expr ';' // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:63:7: expr ';' // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_stat346];
[self expr];
@@ -983,14 +1055,15 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
[self match:input TokenType:11 Follow:FOLLOW_11_in_stat348];
-
+
}
break;
case 3 : ;
-                // SimpleC.g:64:7: block // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:64:7: block // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_block_in_stat362];
[self block];
@@ -998,12 +1071,13 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
}
break;
case 4 : ;
-                // SimpleC.g:65:7: assignStat ';' // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:65:7: assignStat ';' // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_assignStat_in_stat370];
[self assignStat];
@@ -1011,31 +1085,31 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
[self match:input TokenType:11 Follow:FOLLOW_11_in_stat372];
-
+
}
break;
case 5 : ;
-                // SimpleC.g:66:7: ';' // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:66:7: ';' // alt
{
-                [self match:input TokenType:11 Follow:FOLLOW_11_in_stat380];

+                [self match:input TokenType:11 Follow:FOLLOW_11_in_stat380];
+
}
break;

}
-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -1044,21 +1118,26 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

/*
* $ANTLR start forStat
- * SimpleC.g:69:1: forStat : 'for' '(' assignStat ';' expr ';' assignStat ')' block ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:69:1: forStat : 'for' '(' assignStat ';' expr ';' assignStat ')' block ;
*/
- (void) forStat
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleC.g:70:5: ( 'for' '(' assignStat ';' expr ';' assignStat ')' block ) // ruleBlockSingleAlt
-        // SimpleC.g:70:9: 'for' '(' assignStat ';' expr ';' assignStat ')' block // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:70:5: ( 'for' '(' assignStat ';' expr ';' assignStat ')' block ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:70:9: 'for' '(' assignStat ';' expr ';' assignStat ')' block // alt
{
-        [self match:input TokenType:16 Follow:FOLLOW_16_in_forStat399];

+        [self match:input TokenType:16 Follow:FOLLOW_16_in_forStat399];
+
[self match:input TokenType:7 Follow:FOLLOW_7_in_forStat401];
-
+
/* ruleRef */
[self pushFollow:FOLLOW_assignStat_in_forStat403];
[self assignStat];
@@ -1066,9 +1145,9 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
[self match:input TokenType:11 Follow:FOLLOW_11_in_forStat405];
-
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_forStat407];
[self expr];
@@ -1076,9 +1155,9 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
[self match:input TokenType:11 Follow:FOLLOW_11_in_forStat409];
-
+
/* ruleRef */
[self pushFollow:FOLLOW_assignStat_in_forStat411];
[self assignStat];
@@ -1086,9 +1165,9 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
[self match:input TokenType:8 Follow:FOLLOW_8_in_forStat413];
-
+
/* ruleRef */
[self pushFollow:FOLLOW_block_in_forStat415];
[self block];
@@ -1096,20 +1175,19 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -1118,21 +1196,26 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

/*
* $ANTLR start assignStat
- * SimpleC.g:73:1: assignStat : ID '=' expr ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:73:1: assignStat : ID '=' expr ;
*/
- (void) assignStat
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleC.g:74:5: ( ID '=' expr ) // ruleBlockSingleAlt
-        // SimpleC.g:74:9: ID '=' expr // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:74:5: ( ID '=' expr ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:74:9: ID '=' expr // alt
{
-        [self match:input TokenType:ID Follow:FOLLOW_ID_in_assignStat442];

+        [self match:input TokenType:ID Follow:FOLLOW_ID_in_assignStat442];
+
[self match:input TokenType:13 Follow:FOLLOW_13_in_assignStat444];
-
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_assignStat446];
[self expr];
@@ -1140,20 +1223,19 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -1162,17 +1244,22 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

/*
* $ANTLR start expr
- * SimpleC.g:77:1: expr : condExpr ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:77:1: expr : condExpr ;
*/
- (void) expr
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleC.g:77:5: ( condExpr ) // ruleBlockSingleAlt
-        // SimpleC.g:77:9: condExpr // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:77:5: ( condExpr ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:77:9: condExpr // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_condExpr_in_expr468];
[self condExpr];
@@ -1180,20 +1267,19 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -1202,17 +1288,22 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

/*
* $ANTLR start condExpr
- * SimpleC.g:80:1: condExpr : aexpr ( ( '==' | '<' ) aexpr )? ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:80:1: condExpr : aexpr ( ( '==' | '<' ) aexpr )? ;
*/
- (void) condExpr
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleC.g:81:5: ( aexpr ( ( '==' | '<' ) aexpr )? ) // ruleBlockSingleAlt
-        // SimpleC.g:81:9: aexpr ( ( '==' | '<' ) aexpr )? // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:81:5: ( aexpr ( ( '==' | '<' ) aexpr )? ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:81:9: aexpr ( ( '==' | '<' ) aexpr )? // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_aexpr_in_condExpr487];
[self aexpr];
@@ -1220,8 +1311,8 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
-        // SimpleC.g:81:15: ( ( '==' | '<' ) aexpr )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:81:15: ( ( '==' | '<' ) aexpr )? // block
NSInteger alt8=2;
NSInteger LA8_0 = [input LA:1];

@@ -1230,17 +1321,18 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
}
switch (alt8) {
case 1 : ;
-                // SimpleC.g:81:17: ( '==' | '<' ) aexpr // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:81:17: ( '==' | '<' ) aexpr // alt
{
+
if ([input LA:1] == 12||[input LA:1] == 14) {
[input consume];
[state setIsErrorRecovery:NO];
} else {
-                    ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                    MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
@throw mse;
}

-
+
/* ruleRef */
[self pushFollow:FOLLOW_aexpr_in_condExpr499];
[self aexpr];
@@ -1248,26 +1340,25 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
}
break;

}

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -1276,17 +1367,22 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

/*
* $ANTLR start aexpr
- * SimpleC.g:84:1: aexpr : atom ( '+' atom )* ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:84:1: aexpr : atom ( '+' atom )* ;
*/
- (void) aexpr
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleC.g:85:5: ( atom ( '+' atom )* ) // ruleBlockSingleAlt
-        // SimpleC.g:85:9: atom ( '+' atom )* // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:85:5: ( atom ( '+' atom )* ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:85:9: atom ( '+' atom )* // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_atom_in_aexpr521];
[self atom];
@@ -1294,6 +1390,7 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


+

do {
NSInteger alt9=2;
@@ -1305,10 +1402,11 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

switch (alt9) {
case 1 : ;
-                    // SimpleC.g:85:16: '+' atom // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:85:16: '+' atom // alt
{
-                    [self match:input TokenType:9 Follow:FOLLOW_9_in_aexpr525];

+                    [self match:input TokenType:9 Follow:FOLLOW_9_in_aexpr525];
+
/* ruleRef */
[self pushFollow:FOLLOW_atom_in_aexpr527];
[self atom];
@@ -1316,7 +1414,7 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
}
break;

@@ -1326,20 +1424,19 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
} while (YES);
loop9: ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -1348,15 +1445,19 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

/*
* $ANTLR start atom
- * SimpleC.g:88:1: atom : ( ID | INT | '(' expr ')' );
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:88:1: atom : ( ID | INT | '(' expr ')' );
*/
- (void) atom
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleC.g:89:5: ( ID | INT | '(' expr ')' ) //ruleblock
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:89:5: ( ID | INT | '(' expr ')' ) //ruleblock
NSInteger alt10=3;
unichar charLA10 = [input LA:1];
switch (charLA10) {
@@ -1377,7 +1478,7 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
break;

default: ;
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:10 state:0 stream:input];
+            NoViableAltException *nvae = [NoViableAltException newException:10 state:0 stream:input];
nvae.c = charLA10;
@throw nvae;

@@ -1385,24 +1486,27 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000

switch (alt10) {
case 1 : ;
-                // SimpleC.g:89:7: ID // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:89:7: ID // alt
{
-                [self match:input TokenType:ID Follow:FOLLOW_ID_in_atom547];

+                [self match:input TokenType:ID Follow:FOLLOW_ID_in_atom547];
+
}
break;
case 2 : ;
-                // SimpleC.g:90:7: INT // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:90:7: INT // alt
{
-                [self match:input TokenType:INT Follow:FOLLOW_INT_in_atom561];

+                [self match:input TokenType:INT Follow:FOLLOW_INT_in_atom561];
+
}
break;
case 3 : ;
-                // SimpleC.g:91:7: '(' expr ')' // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/SimpleC.g:91:7: '(' expr ')' // alt
{
-                [self match:input TokenType:7 Follow:FOLLOW_7_in_atom575];

+                [self match:input TokenType:7 Follow:FOLLOW_7_in_atom575];
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_atom577];
[self expr];
@@ -1410,24 +1514,23 @@ static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x000000000000000
[self popFollow];


-
+
[self match:input TokenType:8 Follow:FOLLOW_8_in_atom579];
-
+
}
break;

}
-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
diff --git a/runtime/ObjC/Framework/examples/LL-star/antlr3.h b/runtime/ObjC/Framework/examples/LL-star/antlr3.h
deleted file mode 100644
index 4f16279..0000000
--- a/runtime/ObjC/Framework/examples/LL-star/antlr3.h
+++ /dev/null
@@ -1,79 +0,0 @@
-#import <ANTLR/ANTLRBaseMapElement.h>
-#import <ANTLR/ANTLRBaseRecognizer.h>
-#import <ANTLR/ANTLRBaseStack.h>
-#import <ANTLR/ANTLRBaseTree.h>
-#import <ANTLR/ANTLRBaseTreeAdaptor.h>
-#import <ANTLR/ANTLRBitSet.h>
-#import <ANTLR/ANTLRBufferedTokenStream.h>
-#import <ANTLR/ANTLRBufferedTreeNodeStream.h>
-#import <ANTLR/ANTLRCharStream.h>
-#import <ANTLR/ANTLRCharStreamState.h>
-#import <ANTLR/ANTLRCommonErrorNode.h>
-#import <ANTLR/ANTLRCommonToken.h>
-#import <ANTLR/ANTLRCommonTokenStream.h>
-#import <ANTLR/ANTLRCommonTree.h>
-#import <ANTLR/ANTLRCommonTreeAdaptor.h>
-#import <ANTLR/ANTLRCommonTreeNodeStream.h>
-#import <ANTLR/ANTLRDFA.h>
-#import <ANTLR/ANTLRDebug.h>
-#import <ANTLR/ANTLRDebugEventProxy.h>
-#import <ANTLR/ANTLRDebugEventListener.h>
-#import <ANTLR/ANTLRDebugParser.h>
-#import <ANTLR/ANTLRDebugTokenStream.h>
-#import <ANTLR/ANTLRDebugTreeAdaptor.h>
-#import <ANTLR/ANTLRDebugTreeNodeStream.h>
-#import <ANTLR/ANTLRDebugTreeParser.h>
-#import <ANTLR/ANTLREarlyExitException.h>
-#import <ANTLR/ANTLRError.h>
-#import <ANTLR/ANTLRFailedPredicateException.h>
-#import <ANTLR/ANTLRFastQueue.h>
-#import <ANTLR/ANTLRHashMap.h>
-#import <ANTLR/ANTLRHashRule.h>
-#import <ANTLR/ANTLRIntArray.h>
-#import <ANTLR/ANTLRIntStream.h>
-#import <ANTLR/ANTLRLexer.h>
-#import <ANTLR/ANTLRLexerRuleReturnScope.h>
-#import <ANTLR/ANTLRLinkBase.h>
-#import <ANTLR/ANTLRLookaheadStream.h>
-#import <ANTLR/ANTLRMapElement.h>
-#import <ANTLR/ANTLRMap.h>
-#import <ANTLR/ANTLRMismatchedNotSetException.h>
-#import <ANTLR/ANTLRMismatchedRangeException.h>
-#import <ANTLR/ANTLRMismatchedSetException.h>
-#import <ANTLR/ANTLRMismatchedTokenException.h>
-#import <ANTLR/ANTLRMismatchedTreeNodeException.h>
-#import <ANTLR/ANTLRMissingTokenException.h>
-#import <ANTLR/ANTLRNodeMapElement.h>
-#import <ANTLR/ANTLRNoViableAltException.h>
-#import <ANTLR/ANTLRParser.h>
-#import <ANTLR/ANTLRParserRuleReturnScope.h>
-#import <ANTLR/ANTLRPtrBuffer.h>
-#import <ANTLR/ANTLRRecognitionException.h>
-#import <ANTLR/ANTLRRecognizerSharedState.h>
-#import <ANTLR/ANTLRRewriteRuleElementStream.h>
-#import <ANTLR/ANTLRRewriteRuleSubtreeStream.h>
-#import <ANTLR/ANTLRRewriteRuleTokenStream.h>
-#import <ANTLR/ANTLRRuleMemo.h>
-#import <ANTLR/ANTLRRuleStack.h>
-#import <ANTLR/ANTLRRuleReturnScope.h>
-#import <ANTLR/ANTLRRuntimeException.h>
-#import <ANTLR/ANTLRStreamEnumerator.h>
-#import <ANTLR/ANTLRStringStream.h>
-#import <ANTLR/ANTLRSymbolStack.h>
-#import <ANTLR/ANTLRToken+DebuggerSupport.h>
-#import <ANTLR/ANTLRToken.h>
-#import <ANTLR/ANTLRTokenRewriteStream.h>
-#import <ANTLR/ANTLRTokenSource.h>
-#import <ANTLR/ANTLRTokenStream.h>
-#import <ANTLR/ANTLRTree.h>
-#import <ANTLR/ANTLRTreeAdaptor.h>
-#import <ANTLR/ANTLRTreeException.h>
-#import <ANTLR/ANTLRTreeIterator.h>
-#import <ANTLR/ANTLRTreeNodeStream.h>
-#import <ANTLR/ANTLRTreeParser.h>
-#import <ANTLR/ANTLRTreeRuleReturnScope.h>
-#import <ANTLR/ANTLRUnbufferedTokenStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStreamState.h>
-#import <ANTLR/ANTLRUniqueIDMap.h>
-#import <ANTLR/ANTLRUnwantedTokenException.h>
diff --git a/runtime/ObjC/Framework/examples/LL-star/main.m b/runtime/ObjC/Framework/examples/LL-star/main.m
index 0a645be..7c15b8e 100644
--- a/runtime/ObjC/Framework/examples/LL-star/main.m
+++ b/runtime/ObjC/Framework/examples/LL-star/main.m
@@ -1,22 +1,24 @@
#import <Cocoa/Cocoa.h>
-#import <antlr3.h>
+#import <ANTLR/ANTLR.h>
#import "SimpleCLexer.h"
#import "SimpleCParser.h"

-int main() {
+int main()
+{
+    NSError *error;
NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

-	NSString *string = [NSString stringWithContentsOfFile:@"/Users/acondit/source/antlr3/acondit_localhost/code/antlr/antlr3-main/runtime/ObjC/Framework/examples/LL-star/input"];
+	NSString *string = [NSString stringWithContentsOfFile:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/LL-star/input" encoding:NSASCIIStringEncoding error:&error];
NSLog(@"input is: %@", string);
ANTLRStringStream *stream = [[ANTLRStringStream alloc] initWithStringNoCopy:string];
SimpleCLexer *lexer = [[SimpleCLexer alloc] initWithCharStream:stream];

-//	ANTLRCommonToken *currentToken;
-//	while ((currentToken = [lexer nextToken]) && [currentToken getType] != ANTLRTokenTypeEOF) {
+//	CommonToken *currentToken;
+//	while ((currentToken = [lexer nextToken]) && currentToken.type != TokenTypeEOF) {
//		NSLog(@"%@", [currentToken toString]);
//	}

-	ANTLRCommonTokenStream *tokens = [[ANTLRCommonTokenStream alloc] initWithTokenSource:lexer];
+	CommonTokenStream *tokens = [[CommonTokenStream alloc] initWithTokenSource:lexer];
SimpleCParser *parser = [[SimpleCParser alloc] initWithTokenStream:tokens];
[parser program];

diff --git a/runtime/ObjC/Framework/examples/combined/Combined.tokens b/runtime/ObjC/Framework/examples/combined/Combined.tokens
index b22f459..343392f 100644
--- a/runtime/ObjC/Framework/examples/combined/Combined.tokens
+++ b/runtime/ObjC/Framework/examples/combined/Combined.tokens
@@ -1,3 +1,3 @@
-WS=6
-INT=5
ID=4
+INT=5
+WS=6
diff --git a/runtime/ObjC/Framework/examples/combined/CombinedLexer.h b/runtime/ObjC/Framework/examples/combined/CombinedLexer.h
index b7faf3e..4899537 100644
--- a/runtime/ObjC/Framework/examples/combined/CombinedLexer.h
+++ b/runtime/ObjC/Framework/examples/combined/CombinedLexer.h
@@ -1,32 +1,39 @@
-// $ANTLR 3.2 Aug 24, 2010 10:45:57 Combined.g 2010-08-24 13:53:42
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g 2012-02-16 17:33:49

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
+#import <ANTLR/ANTLR.h>
/* End of standard antlr3 runtime definitions
* =============================================================================
*/

/* Start cyclicDFAInterface */

-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
+#pragma mark Rule return scopes Interface start
+#pragma mark Rule return scopes Interface end
#pragma mark Tokens
+#ifdef EOF
+#undef EOF
+#endif
+#define EOF -1
+#define ID 4
#define INT 5
#define WS 6
-#define ID 4
-#define EOF -1
-@interface CombinedLexer : ANTLRLexer { // line 283
-// start of actions.lexer.memVars
-// start of action-actionScope-memVars
+/* interface lexer class */
+@interface CombinedLexer : Lexer { // line 283
+/* ObjC start of actions.lexer.memVars */
+/* ObjC end of actions.lexer.memVars */
}
-+ (CombinedLexer *)newCombinedLexerWithCharStream:(id<ANTLRCharStream>)anInput;
-
-- (void)mID;
-- (void)mINT;
-- (void)mWS;
-- (void)mTokens;
++ (void) initialize;
++ (CombinedLexer *)newCombinedLexerWithCharStream:(id<CharStream>)anInput;
+/* ObjC start actions.lexer.methodsDecl */
+/* ObjC end actions.lexer.methodsDecl */
+- (void) mID ;
+- (void) mINT ;
+- (void) mWS ;
+- (void) mTokens ;

@end /* end of CombinedLexer interface */
+
diff --git a/runtime/ObjC/Framework/examples/combined/CombinedLexer.m b/runtime/ObjC/Framework/examples/combined/CombinedLexer.m
index 44be164..473e077 100644
--- a/runtime/ObjC/Framework/examples/combined/CombinedLexer.m
+++ b/runtime/ObjC/Framework/examples/combined/CombinedLexer.m
@@ -1,43 +1,18 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version 3.2 Aug 24, 2010 10:45:57
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : Combined.g
- *     -                            On : 2010-08-24 13:53:42
- *     -                 for the lexer : CombinedLexerLexer *
- * Editing it, at least manually, is not wise.
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g
+ *     -                            On : 2012-02-16 17:33:49
+ *     -                 for the lexer : CombinedLexerLexer
+ *
+ * Editing it, at least manually, is not wise.
*
* ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
*
*
*/
-// [The "BSD licence"]
-// Copyright (c) 2010 Alan Condit
-//
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. The name of the author may not be used to endorse or promote products
-//    derived from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// $ANTLR 3.2 Aug 24, 2010 10:45:57 Combined.g 2010-08-24 13:53:42
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g 2012-02-16 17:33:49
+

/* -----------------------------------------
* Include the ANTLR3 generated header file.
@@ -47,18 +22,16 @@


/* ============================================================================= */
-
/* =============================================================================
* Start of recognizer
*/

-
/** As per Terence: No returns for lexer rules! */
@implementation CombinedLexer // line 330

+ (void) initialize
{
-    [ANTLRBaseRecognizer setGrammarFileName:@"Combined.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g"];
}

+ (NSString *) tokenNameForType:(NSInteger)aTokenType
@@ -66,15 +39,15 @@
return [[self getTokenNames] objectAtIndex:aTokenType];
}

-+ (CombinedLexer *)newCombinedLexerWithCharStream:(id<ANTLRCharStream>)anInput
++ (CombinedLexer *)newCombinedLexerWithCharStream:(id<CharStream>)anInput
{
return [[CombinedLexer alloc] initWithCharStream:anInput];
}

-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
+- (id) initWithCharStream:(id<CharStream>)anInput
{
-    if ((self = [super initWithCharStream:anInput State:[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:4+1]]) != nil) {
-
+    self = [super initWithCharStream:anInput State:[RecognizerSharedState newRecognizerSharedStateWithRuleLen:4+1]];
+    if ( self != nil ) {
}
return self;
}
@@ -84,8 +57,10 @@
[super dealloc];
}

-/* Start of actions.lexer.methods */
-/* start methods() */
+/* ObjC Start of actions.lexer.methods */
+/* ObjC end of actions.lexer.methods */
+/* ObjC start methods() */
+/* ObjC end methods() */

/* Start of Rules */
// $ANTLR start "ID"
@@ -94,41 +69,47 @@
//
/* ruleScopeSetUp */

+    /* ruleDeclarations */
+
@try {
NSInteger _type = ID;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // Combined.g:14:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* ) // ruleBlockSingleAlt
-        // Combined.g:14:9: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:14:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:14:9: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* // alt
{
+
if ((([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
-
} else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
-            @throw mse;}
-          /* element() */
+            @throw mse;
+        }
+
+
+
do {
NSInteger alt1=2;
NSInteger LA1_0 = [input LA:1];
-            if ( ((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')) ) {
+            if ( ((LA1_0 >= '0' && LA1_0 <= '9')||(LA1_0 >= 'A' && LA1_0 <= 'Z')||LA1_0=='_'||(LA1_0 >= 'a' && LA1_0 <= 'z')) ) {
alt1=1;
}


switch (alt1) {
case 1 : ;
-                    // Combined.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g: // alt
{
+
if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))||(([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
-
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
-                        @throw mse;}
-                      /* element() */
-                     /* elements */
+                        @throw mse;
+                    }
+
+
}
break;

@@ -137,150 +118,171 @@
}
} while (YES);
loop1: ;
-          /* element() */
-         /* elements */
-        }

-        // token+rule list labels
+
+        }

-        [state setType:_type];
+        /* token+rule list labels */

+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* ruleScopeCleanUp */
+
}
return;
}
-// $ANTLR end "ID"
-
+/* $ANTLR end "ID" */
// $ANTLR start "INT"
- (void) mINT
{
//
/* ruleScopeSetUp */

+    /* ruleDeclarations */
+
@try {
NSInteger _type = INT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // Combined.g:17:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
-        // Combined.g:17:9: ( '0' .. '9' )+ // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:17:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:17:9: ( '0' .. '9' )+ // alt
{
-        // Combined.g:17:9: ( '0' .. '9' )+ // positiveClosureBlock
-        NSInteger cnt2=0;
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:17:9: ( '0' .. '9' )+ // positiveClosureBlock
+        NSInteger cnt2 = 0;
do {
-            NSInteger alt2=2;
+            NSInteger alt2 = 2;
NSInteger LA2_0 = [input LA:1];
-            if ( ((LA2_0>='0' && LA2_0<='9')) ) {
+            if ( ((LA2_0 >= '0' && LA2_0 <= '9')) ) {
alt2=1;
}


switch (alt2) {
case 1 : ;
-                    // Combined.g:17:10: '0' .. '9' // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g: // alt
{
-                    [self matchRangeFromChar:'0' to:'9'];   /* element() */
-                     /* elements */
+
+                    if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))) {
+                        [input consume];
+                    } else {
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
+                        [self recover:mse];
+                        @throw mse;
+                    }
+
+
}
break;

default :
if ( cnt2 >= 1 )
goto loop2;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:2];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:2];
@throw eee;
}
cnt2++;
} while (YES);
loop2: ;
-          /* element() */
-         /* elements */
-        }

-        // token+rule list labels
+
+        }

-        [state setType:_type];
+        /* token+rule list labels */

+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* ruleScopeCleanUp */
+
}
return;
}
-// $ANTLR end "INT"
-
+/* $ANTLR end "INT" */
// $ANTLR start "WS"
- (void) mWS
{
//
/* ruleScopeSetUp */

+    /* ruleDeclarations */
+
@try {
NSInteger _type = WS;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // Combined.g:20:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ ) // ruleBlockSingleAlt
-        // Combined.g:20:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:20:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:20:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // alt
{
-        // Combined.g:20:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // positiveClosureBlock
-        NSInteger cnt3=0;
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:20:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // positiveClosureBlock
+        NSInteger cnt3 = 0;
do {
-            NSInteger alt3=2;
+            NSInteger alt3 = 2;
NSInteger LA3_0 = [input LA:1];
-            if ( ((LA3_0>='\t' && LA3_0<='\n')||LA3_0=='\r'||LA3_0==' ') ) {
+            if ( ((LA3_0 >= '\t' && LA3_0 <= '\n')||LA3_0=='\r'||LA3_0==' ') ) {
alt3=1;
}


switch (alt3) {
case 1 : ;
-                    // Combined.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g: // alt
{
+
if ((([input LA:1] >= '\t') && ([input LA:1] <= '\n'))||[input LA:1] == '\r'||[input LA:1] == ' ') {
[input consume];
-
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
-                        @throw mse;}
-                      /* element() */
-                     /* elements */
+                        @throw mse;
+                    }
+
+
}
break;

default :
if ( cnt3 >= 1 )
goto loop3;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:3];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:3];
@throw eee;
}
cnt3++;
} while (YES);
loop3: ;
-          /* element() */
-         _channel=99;   /* element() */
-         /* elements */
-        }

-        // token+rule list labels
+
+
+         _channel=99;
+
+
+        }

-        [state setType:_type];
+        /* token+rule list labels */

+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* ruleScopeCleanUp */
+
}
return;
}
-// $ANTLR end "WS"
-
+/* $ANTLR end "WS" */
- (void) mTokens
{
-    // Combined.g:1:8: ( ID | INT | WS ) //ruleblock
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:1:8: ( ID | INT | WS ) //ruleblock
NSInteger alt4=3;
-    switch ([input LA:1]) {
+    unichar charLA4 = [input LA:1];
+    switch (charLA4) {
case 'A': ;
case 'B': ;
case 'C': ;
@@ -362,33 +364,44 @@
break;

default: ;
-        ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:4 state:0 stream:input];
+        NoViableAltException *nvae = [NoViableAltException newException:4 state:0 stream:input];
+        nvae.c = charLA4;
@throw nvae;
+
}

switch (alt4) {
case 1 : ;
-            // Combined.g:1:10: ID // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:1:10: ID // alt
{
-                [self mID];
-              /* element() */
-             /* elements */
+
+
+            [self mID];
+
+
+
}
break;
case 2 : ;
-            // Combined.g:1:13: INT // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:1:13: INT // alt
{
-                [self mINT];
-              /* element() */
-             /* elements */
+
+
+            [self mINT];
+
+
+
}
break;
case 3 : ;
-            // Combined.g:1:17: WS // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:1:17: WS // alt
{
-                [self mWS];
-              /* element() */
-             /* elements */
+
+
+            [self mWS];
+
+
+
}
break;

@@ -396,8 +409,4 @@

}

-@end /* end of CombinedLexer implementation line 397 */
-
-/* End of code
- * =============================================================================
- */
+@end /* end of CombinedLexer implementation line 397 */
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/examples/combined/CombinedParser.h b/runtime/ObjC/Framework/examples/combined/CombinedParser.h
index 2d48ff4..e907be0 100644
--- a/runtime/ObjC/Framework/examples/combined/CombinedParser.h
+++ b/runtime/ObjC/Framework/examples/combined/CombinedParser.h
@@ -1,41 +1,68 @@
-// $ANTLR 3.2 Aug 24, 2010 10:45:57 Combined.g 2010-08-24 13:53:42
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g 2012-02-16 17:33:49

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
+#import <ANTLR/ANTLR.h>
/* End of standard antlr3 runtime definitions
* =============================================================================
*/

/* parserHeaderFile */
+#ifndef ANTLR3TokenTypeAlreadyDefined
+#define ANTLR3TokenTypeAlreadyDefined
+typedef enum {
+    ANTLR_EOF = -1,
+    INVALID,
+    EOR,
+    DOWN,
+    UP,
+    MIN
+} ANTLR3TokenType;
+#endif
+
#pragma mark Tokens
-#define WS 6
-#define INT 5
-#define ID 4
+#ifdef EOF
+#undef EOF
+#endif
#define EOF -1
-#pragma mark Dynamic Global Scopes
-#pragma mark Dynamic Rule Scopes
-#pragma mark Rule Return Scopes start
-#pragma mark Rule return scopes end
-@interface CombinedParser : ANTLRParser { /* line 572 */
-// start of globalAttributeScopeMemVar
-
+#define ID 4
+#define INT 5
+#define WS 6
+#pragma mark Dynamic Global Scopes globalAttributeScopeInterface
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeInterface
+#pragma mark Rule Return Scopes returnScopeInterface

-// start of action-actionScope-memVars
-// start of ruleAttributeScopeMemVar
+/* Interface grammar class */
+@interface CombinedParser  : Parser { /* line 572 */
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeDecl
+#pragma mark Dynamic Global Rule Scopes globalAttributeScopeMemVar


-// Start of memVars
+/* ObjC start of actions.(actionScope).memVars */
+/* ObjC end of actions.(actionScope).memVars */
+/* ObjC start of memVars */
+/* ObjC end of memVars */

}

-// start of action-actionScope-methodsDecl
+/* ObjC start of actions.(actionScope).properties */
+/* ObjC end of actions.(actionScope).properties */
+/* ObjC start of properties */
+/* ObjC end of properties */

++ (void) initialize;
++ (id) newCombinedParser:(id<TokenStream>)aStream;
+/* ObjC start of actions.(actionScope).methodsDecl */
+/* ObjC end of actions.(actionScope).methodsDecl */
+
+/* ObjC start of methodsDecl */
+/* ObjC end of methodsDecl */

- (void)stat;
- (void)identifier;


@end /* end of CombinedParser interface */
+
diff --git a/runtime/ObjC/Framework/examples/combined/CombinedParser.m b/runtime/ObjC/Framework/examples/combined/CombinedParser.m
index cb5d6f0..355a7e7 100644
--- a/runtime/ObjC/Framework/examples/combined/CombinedParser.m
+++ b/runtime/ObjC/Framework/examples/combined/CombinedParser.m
@@ -1,43 +1,18 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version 3.2 Aug 24, 2010 10:45:57
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : Combined.g
- *     -                            On : 2010-08-24 13:53:42
- *     -                for the parser : CombinedParserParser *
- * Editing it, at least manually, is not wise.
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g
+ *     -                            On : 2012-02-16 17:33:49
+ *     -                for the parser : CombinedParserParser
+ *
+ * Editing it, at least manually, is not wise.
*
* ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
*
*
*/
-// [The "BSD licence"]
-// Copyright (c) 2010 Alan Condit
-//
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. The name of the author may not be used to endorse or promote products
-//    derived from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// $ANTLR 3.2 Aug 24, 2010 10:45:57 Combined.g 2010-08-24 13:53:42
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g 2012-02-16 17:33:49
+

/* -----------------------------------------
* Include the ANTLR3 generated header file.
@@ -47,13 +22,10 @@


/* ============================================================================= */
-
/* =============================================================================
* Start of recognizer
*/

-
-
#pragma mark Bitsets
static ANTLRBitSet *FOLLOW_identifier_in_stat20;
static const unsigned long long FOLLOW_identifier_in_stat20_data[] = { 0x0000000000000012LL};
@@ -61,41 +33,43 @@ static ANTLRBitSet *FOLLOW_ID_in_identifier35;
static const unsigned long long FOLLOW_ID_in_identifier35_data[] = { 0x0000000000000002LL};


-#pragma mark Dynamic Global Scopes
-
-#pragma mark Dynamic Rule Scopes
-
-#pragma mark Rule return scopes start
-/* returnScope */
-
-/* returnScope */
+#pragma mark Dynamic Global globalAttributeScopeImplementation

+#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation

+#pragma mark Rule Return Scopes returnScopeImplementation

@implementation CombinedParser  // line 637

+/* ObjC start of ruleAttributeScope */
+#pragma mark Dynamic Rule Scopes ruleAttributeScope
+/* ObjC end of ruleAttributeScope */
+#pragma mark global Attribute Scopes globalAttributeScope
+/* ObjC start globalAttributeScope */
+/* ObjC end globalAttributeScope */
+/* ObjC start actions.(actionScope).synthesize */
+/* ObjC start synthesize() */
+
+ (void) initialize
{
#pragma mark Bitsets
-    FOLLOW_identifier_in_stat20 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_identifier_in_stat20_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_identifier35 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_identifier35_data Count:(NSUInteger)1] retain];
+    FOLLOW_identifier_in_stat20 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_identifier_in_stat20_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_identifier35 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_identifier35_data Count:(NSUInteger)1] retain];

-    [ANTLRBaseRecognizer setTokenNames:[[[NSArray alloc] initWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
+    [BaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
@"ID", @"INT", @"WS", nil] retain]];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g"];
}

-+ (CombinedParser *)newCombinedParser:(id<ANTLRTokenStream>)aStream
++ (CombinedParser *)newCombinedParser:(id<TokenStream>)aStream
{
return [[CombinedParser alloc] initWithTokenStream:aStream];
-
}

-- (id) initWithTokenStream:(id<ANTLRTokenStream>)aStream
+- (id) initWithTokenStream:(id<TokenStream>)aStream
{
-    if ((self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:2+1] retain]]) != nil) {
-
-
-
+    self = [super initWithTokenStream:aStream State:[[RecognizerSharedState newRecognizerSharedStateWithRuleLen:2+1] retain]];
+    if ( self != nil ) {
/* start of actions-actionScope-init */
/* start of init */
}
@@ -106,25 +80,34 @@ static const unsigned long long FOLLOW_ID_in_identifier35_data[] = { 0x000000000
{
[super dealloc];
}
-// start actions.actionScope.methods
-// start methods()
-// start rules
+
+/* ObjC start actions.(actionScope).methods */
+/* ObjC end actions.(actionScope).methods */
+/* ObjC start methods() */
+/* ObjC end methods() */
+/* ObjC start rules */
/*
* $ANTLR start stat
- * Combined.g:7:1: stat : ( identifier )+ ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:7:1: stat : ( identifier )+ ;
*/
- (void) stat
{
/* ruleScopeSetUp */

+    /* ruleDeclarations */
+
@try {
-        // Combined.g:7:5: ( ( identifier )+ ) // ruleBlockSingleAlt
-        // Combined.g:7:7: ( identifier )+ // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:7:5: ( ( identifier )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:7:7: ( identifier )+ // alt
{
-        // Combined.g:7:7: ( identifier )+ // positiveClosureBlock
-        NSInteger cnt1=0;
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:7:7: ( identifier )+ // positiveClosureBlock
+        NSInteger cnt1 = 0;
do {
-            NSInteger alt1=2;
+            NSInteger alt1 = 2;
NSInteger LA1_0 = [input LA:1];
if ( (LA1_0==ID) ) {
alt1=1;
@@ -133,72 +116,87 @@ static const unsigned long long FOLLOW_ID_in_identifier35_data[] = { 0x000000000

switch (alt1) {
case 1 : ;
-                    // Combined.g:7:7: identifier // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:7:7: identifier // alt
{
+
+                    /* ruleRef */
[self pushFollow:FOLLOW_identifier_in_stat20];
[self identifier];
+
[self popFollow];

-                      /* element() */
-                     /* elements */
+
+
}
break;

default :
if ( cnt1 >= 1 )
goto loop1;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:1];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:1];
@throw eee;
}
cnt1++;
} while (YES);
loop1: ;
-          /* element() */
-         /* elements */
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
}
return ;
}
/* $ANTLR end stat */
+
/*
* $ANTLR start identifier
- * Combined.g:9:1: identifier : ID ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:9:1: identifier : ID ;
*/
- (void) identifier
{
/* ruleScopeSetUp */

+    /* ruleDeclarations */
+
@try {
-        // Combined.g:10:5: ( ID ) // ruleBlockSingleAlt
-        // Combined.g:10:7: ID // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:10:5: ( ID ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/combined/Combined.g:10:7: ID // alt
{
-        [self match:input TokenType:ID Follow:FOLLOW_ID_in_identifier35];   /* element() */
-         /* elements */
+
+        [self match:input TokenType:ID Follow:FOLLOW_ID_in_identifier35];
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
}
return ;
}
/* $ANTLR end identifier */
+/* ObjC end rules */

@end /* end of CombinedParser implementation line 692 */
-
-
-/* End of code
- * =============================================================================
- */
diff --git a/runtime/ObjC/Framework/examples/combined/antlr3.h b/runtime/ObjC/Framework/examples/combined/antlr3.h
deleted file mode 100644
index 4f16279..0000000
--- a/runtime/ObjC/Framework/examples/combined/antlr3.h
+++ /dev/null
@@ -1,79 +0,0 @@
-#import <ANTLR/ANTLRBaseMapElement.h>
-#import <ANTLR/ANTLRBaseRecognizer.h>
-#import <ANTLR/ANTLRBaseStack.h>
-#import <ANTLR/ANTLRBaseTree.h>
-#import <ANTLR/ANTLRBaseTreeAdaptor.h>
-#import <ANTLR/ANTLRBitSet.h>
-#import <ANTLR/ANTLRBufferedTokenStream.h>
-#import <ANTLR/ANTLRBufferedTreeNodeStream.h>
-#import <ANTLR/ANTLRCharStream.h>
-#import <ANTLR/ANTLRCharStreamState.h>
-#import <ANTLR/ANTLRCommonErrorNode.h>
-#import <ANTLR/ANTLRCommonToken.h>
-#import <ANTLR/ANTLRCommonTokenStream.h>
-#import <ANTLR/ANTLRCommonTree.h>
-#import <ANTLR/ANTLRCommonTreeAdaptor.h>
-#import <ANTLR/ANTLRCommonTreeNodeStream.h>
-#import <ANTLR/ANTLRDFA.h>
-#import <ANTLR/ANTLRDebug.h>
-#import <ANTLR/ANTLRDebugEventProxy.h>
-#import <ANTLR/ANTLRDebugEventListener.h>
-#import <ANTLR/ANTLRDebugParser.h>
-#import <ANTLR/ANTLRDebugTokenStream.h>
-#import <ANTLR/ANTLRDebugTreeAdaptor.h>
-#import <ANTLR/ANTLRDebugTreeNodeStream.h>
-#import <ANTLR/ANTLRDebugTreeParser.h>
-#import <ANTLR/ANTLREarlyExitException.h>
-#import <ANTLR/ANTLRError.h>
-#import <ANTLR/ANTLRFailedPredicateException.h>
-#import <ANTLR/ANTLRFastQueue.h>
-#import <ANTLR/ANTLRHashMap.h>
-#import <ANTLR/ANTLRHashRule.h>
-#import <ANTLR/ANTLRIntArray.h>
-#import <ANTLR/ANTLRIntStream.h>
-#import <ANTLR/ANTLRLexer.h>
-#import <ANTLR/ANTLRLexerRuleReturnScope.h>
-#import <ANTLR/ANTLRLinkBase.h>
-#import <ANTLR/ANTLRLookaheadStream.h>
-#import <ANTLR/ANTLRMapElement.h>
-#import <ANTLR/ANTLRMap.h>
-#import <ANTLR/ANTLRMismatchedNotSetException.h>
-#import <ANTLR/ANTLRMismatchedRangeException.h>
-#import <ANTLR/ANTLRMismatchedSetException.h>
-#import <ANTLR/ANTLRMismatchedTokenException.h>
-#import <ANTLR/ANTLRMismatchedTreeNodeException.h>
-#import <ANTLR/ANTLRMissingTokenException.h>
-#import <ANTLR/ANTLRNodeMapElement.h>
-#import <ANTLR/ANTLRNoViableAltException.h>
-#import <ANTLR/ANTLRParser.h>
-#import <ANTLR/ANTLRParserRuleReturnScope.h>
-#import <ANTLR/ANTLRPtrBuffer.h>
-#import <ANTLR/ANTLRRecognitionException.h>
-#import <ANTLR/ANTLRRecognizerSharedState.h>
-#import <ANTLR/ANTLRRewriteRuleElementStream.h>
-#import <ANTLR/ANTLRRewriteRuleSubtreeStream.h>
-#import <ANTLR/ANTLRRewriteRuleTokenStream.h>
-#import <ANTLR/ANTLRRuleMemo.h>
-#import <ANTLR/ANTLRRuleStack.h>
-#import <ANTLR/ANTLRRuleReturnScope.h>
-#import <ANTLR/ANTLRRuntimeException.h>
-#import <ANTLR/ANTLRStreamEnumerator.h>
-#import <ANTLR/ANTLRStringStream.h>
-#import <ANTLR/ANTLRSymbolStack.h>
-#import <ANTLR/ANTLRToken+DebuggerSupport.h>
-#import <ANTLR/ANTLRToken.h>
-#import <ANTLR/ANTLRTokenRewriteStream.h>
-#import <ANTLR/ANTLRTokenSource.h>
-#import <ANTLR/ANTLRTokenStream.h>
-#import <ANTLR/ANTLRTree.h>
-#import <ANTLR/ANTLRTreeAdaptor.h>
-#import <ANTLR/ANTLRTreeException.h>
-#import <ANTLR/ANTLRTreeIterator.h>
-#import <ANTLR/ANTLRTreeNodeStream.h>
-#import <ANTLR/ANTLRTreeParser.h>
-#import <ANTLR/ANTLRTreeRuleReturnScope.h>
-#import <ANTLR/ANTLRUnbufferedTokenStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStreamState.h>
-#import <ANTLR/ANTLRUniqueIDMap.h>
-#import <ANTLR/ANTLRUnwantedTokenException.h>
diff --git a/runtime/ObjC/Framework/examples/combined/main.m b/runtime/ObjC/Framework/examples/combined/main.m
index 7fb5bd2..580ae41 100644
--- a/runtime/ObjC/Framework/examples/combined/main.m
+++ b/runtime/ObjC/Framework/examples/combined/main.m
@@ -1,6 +1,6 @@
#import <Cocoa/Cocoa.h>
#import "CombinedLexer.h"
-#import "antlr3.h"
+#import <ANTLR/ANTLR.h>

int main(int argc, const char * argv[])
{
@@ -10,8 +10,8 @@ int main(int argc, const char * argv[])
NSLog(@"%@", string);
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:string];
CombinedLexer *lexer = [CombinedLexer newCombinedLexerWithCharStream:stream];
-	id<ANTLRToken> currentToken;
-	while ((currentToken = [lexer nextToken]) && [currentToken getType] != ANTLRTokenTypeEOF) {
+	id<Token> currentToken;
+	while ((currentToken = [lexer nextToken]) && currentToken.type != TokenTypeEOF) {
NSLog(@"%@", currentToken);
}
[lexer release];
diff --git a/runtime/ObjC/Framework/examples/combined/output1/Combined.tokens b/runtime/ObjC/Framework/examples/combined/output1/Combined.tokens
deleted file mode 100644
index b22f459..0000000
--- a/runtime/ObjC/Framework/examples/combined/output1/Combined.tokens
+++ /dev/null
@@ -1,3 +0,0 @@
-WS=6
-INT=5
-ID=4
diff --git a/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.h b/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.h
index 2b255a6..e97734f 100644
--- a/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.h
+++ b/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.h
@@ -1,7 +1,7 @@
-// $ANTLR ${project.version} ${buildNumber} /Users/acondit/source/antlr3/acondit_localhost/code/antlr/antlr3-main/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g 2011-05-05 22:05:01
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g 2012-02-16 17:34:08

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
#import <ANTLR/ANTLR.h>
@@ -11,8 +11,8 @@

/* Start cyclicDFAInterface */

-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
+#pragma mark Rule return scopes Interface start
+#pragma mark Rule return scopes Interface end
#pragma mark Tokens
#ifdef EOF
#undef EOF
@@ -37,7 +37,7 @@
#define TYPE 20
#define WS 21
/* interface lexer class */
-@interface Fuzzy : ANTLRLexer { // line 283
+@interface Fuzzy : Lexer { // line 283
SEL synpred9_FuzzySelector;
SEL synpred2_FuzzySelector;
SEL synpred7_FuzzySelector;
@@ -51,7 +51,7 @@ SEL synpred1_FuzzySelector;
/* ObjC end of actions.lexer.memVars */
}
+ (void) initialize;
-+ (Fuzzy *)newFuzzyWithCharStream:(id<ANTLRCharStream>)anInput;
++ (Fuzzy *)newFuzzyWithCharStream:(id<CharStream>)anInput;
/* ObjC start actions.lexer.methodsDecl */
/* ObjC end actions.lexer.methodsDecl */
- (void) mIMPORT ;
diff --git a/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.m b/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.m
index 665f412..151974c 100644
--- a/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.m
+++ b/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.m
@@ -1,8 +1,8 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : Fuzzy.g
- *     -                            On : 2011-05-06 11:47:46
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g
+ *     -                            On : 2012-02-16 17:34:08
*     -                 for the lexer : FuzzyLexer
*
* Editing it, at least manually, is not wise.
@@ -11,7 +11,7 @@
*
*
*/
-// $ANTLR ${project.version} ${buildNumber} Fuzzy.g 2011-05-06 11:47:46
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g 2012-02-16 17:34:08


/* -----------------------------------------
@@ -31,7 +31,7 @@

+ (void) initialize
{
-    [ANTLRBaseRecognizer setGrammarFileName:@"Fuzzy.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g"];
}

+ (NSString *) tokenNameForType:(NSInteger)aTokenType
@@ -39,14 +39,14 @@
return [[self getTokenNames] objectAtIndex:aTokenType];
}

-+ (Fuzzy *)newFuzzyWithCharStream:(id<ANTLRCharStream>)anInput
++ (Fuzzy *)newFuzzyWithCharStream:(id<CharStream>)anInput
{
return [[Fuzzy alloc] initWithCharStream:anInput];
}

-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
+- (id) initWithCharStream:(id<CharStream>)anInput
{
-    self = [super initWithCharStream:anInput State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:30+1] retain]];
+    self = [super initWithCharStream:anInput State:[RecognizerSharedState newRecognizerSharedStateWithRuleLen:30+1]];
if ( self != nil ) {
SEL synpred9_FuzzySelector = @selector(synpred9_Fuzzy_fragment);

@@ -80,17 +80,17 @@
/* ObjC start methods() */
/* ObjC end methods() */

-- (id<ANTLRToken>) nextToken
+- (id<Token>) nextToken
{
while (YES) {
-        if ( [input LA:1] == ANTLRCharStreamEOF ) {
-            return [ANTLRCommonToken eofToken];
+        if ( [input LA:1] == CharStreamEOF ) {
+            return [CommonToken eofToken];
}
state.token = nil;
-        state.channel = ANTLRTokenChannelDefault;
+        state.channel = TokenChannelDefault;
state.tokenStartCharIndex = input.index;
-        state.tokenStartCharPositionInLine = input.charPositionInLine;
-        state.tokenStartLine = input.line;
+        state.tokenStartCharPositionInLine = [input getCharPositionInLine];
+        state.tokenStartLine = [input getLine];
state.text = nil;
@try {
NSInteger m = [input mark];
@@ -108,7 +108,7 @@
return state.token;
}
}
-        @catch (ANTLRRecognitionException *re) {
+        @catch (RecognitionException *re) {
// shouldn't happen in backtracking mode, but...
[self reportError:re];
[self recover:re];
@@ -116,14 +116,14 @@
}
}

-- (void)memoize:(id<ANTLRIntStream>)anInput
+- (void)memoize:(id<IntStream>)anInput
RuleIndex:(NSInteger)ruleIndex
StartIndex:(NSInteger)ruleStartIndex
{
if ( state.backtracking > 1 ) [super memoize:anInput RuleIndex:ruleIndex StartIndex:ruleStartIndex];
}

-- (BOOL)alreadyParsedRule:(id<ANTLRIntStream>)anInput RuleIndex:(NSInteger)ruleIndex
+- (BOOL)alreadyParsedRule:(id<IntStream>)anInput RuleIndex:(NSInteger)ruleIndex
{
if ( state.backtracking > 1 ) return [super alreadyParsedRule:anInput RuleIndex:ruleIndex];
return NO;
@@ -133,33 +133,38 @@
- (void) mIMPORT
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = IMPORT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        ANTLRCommonToken *name=nil;
+        NSInteger _channel = TokenChannelDefault;
+        CommonToken *name=nil;

-        // Fuzzy.g:5:2: ( 'import' WS name= QIDStar ( WS )? ';' ) // ruleBlockSingleAlt
-        // Fuzzy.g:5:4: 'import' WS name= QIDStar ( WS )? ';' // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:5:2: ( 'import' WS name= QIDStar ( WS )? ';' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:5:4: 'import' WS name= QIDStar ( WS )? ';' // alt
{
+
+
[self matchString:@"import"]; if ( state.failed ) return ;


+

[self mWS]; if ( state.failed ) return ;


+

NSInteger nameStart31 = input.index;
[self mQIDStar]; if ( state.failed ) return ;

-        name = [[ANTLRCommonToken newToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart31 Stop:input.index-1] retain];
+        name = [[CommonToken newToken:input Type:TokenTypeInvalid Channel:TokenChannelDefault Start:nameStart31 Stop:input.index-1] retain];
name.line = self.line;

-
-        // Fuzzy.g:5:29: ( WS )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:5:29: ( WS )? // block
NSInteger alt1=2;
NSInteger LA1_0 = [input LA:1];

@@ -168,54 +173,59 @@
}
switch (alt1) {
case 1 : ;
-                // Fuzzy.g:5:29: WS // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:5:29: WS // alt
{
-                [self mWS]; if ( state.failed ) return ;


+                [self mWS]; if ( state.failed ) return ;

+
+
}
break;

}

+

[self matchChar:';']; if ( state.failed ) return ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "IMPORT" */
-
// $ANTLR start "RETURN"
- (void) mRETURN
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = RETURN;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // Fuzzy.g:10:2: ( 'return' ( options {greedy=false; } : . )* ';' ) // ruleBlockSingleAlt
-        // Fuzzy.g:10:4: 'return' ( options {greedy=false; } : . )* ';' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:10:2: ( 'return' ( options {greedy=false; } : . )* ';' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:10:4: 'return' ( options {greedy=false; } : . )* ';' // alt
{
+
+
[self matchString:@"return"]; if ( state.failed ) return ;


+

do {
NSInteger alt2=2;
@@ -230,11 +240,12 @@

switch (alt2) {
case 1 : ;
-                    // Fuzzy.g:10:38: . // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:10:38: . // alt
{
-                    [self matchAny]; if ( state.failed ) return ;

+                    [self matchAny]; if ( state.failed ) return ;

+
}
break;

@@ -244,58 +255,62 @@
} while (YES);
loop2: ;

+

[self matchChar:';']; if ( state.failed ) return ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "RETURN" */
-
// $ANTLR start "CLASS"
- (void) mCLASS
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = CLASS;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        ANTLRCommonToken *name=nil;
+        NSInteger _channel = TokenChannelDefault;
+        CommonToken *name=nil;

-        // Fuzzy.g:14:2: ( 'class' WS name= ID ( WS )? ( 'extends' WS QID ( WS )? )? ( 'implements' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? '{' ) // ruleBlockSingleAlt
-        // Fuzzy.g:14:4: 'class' WS name= ID ( WS )? ( 'extends' WS QID ( WS )? )? ( 'implements' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? '{' // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:14:2: ( 'class' WS name= ID ( WS )? ( 'extends' WS QID ( WS )? )? ( 'implements' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? '{' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:14:4: 'class' WS name= ID ( WS )? ( 'extends' WS QID ( WS )? )? ( 'implements' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? '{' // alt
{
+
+
[self matchString:@"class"]; if ( state.failed ) return ;


+

[self mWS]; if ( state.failed ) return ;


+

NSInteger nameStart81 = input.index;
[self mID]; if ( state.failed ) return ;

-        name = [[ANTLRCommonToken newToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart81 Stop:input.index-1] retain];
+        name = [[CommonToken newToken:input Type:TokenTypeInvalid Channel:TokenChannelDefault Start:nameStart81 Stop:input.index-1] retain];
name.line = self.line;

-
-        // Fuzzy.g:14:23: ( WS )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:14:23: ( WS )? // block
NSInteger alt3=2;
NSInteger LA3_0 = [input LA:1];

@@ -304,19 +319,21 @@
}
switch (alt3) {
case 1 : ;
-                // Fuzzy.g:14:23: WS // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:14:23: WS // alt
{
-                [self mWS]; if ( state.failed ) return ;


+                [self mWS]; if ( state.failed ) return ;
+

+
}
break;

}

-
-        // Fuzzy.g:14:27: ( 'extends' WS QID ( WS )? )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:14:27: ( 'extends' WS QID ( WS )? )? // block
NSInteger alt5=2;
NSInteger LA5_0 = [input LA:1];

@@ -325,21 +342,25 @@
}
switch (alt5) {
case 1 : ;
-                // Fuzzy.g:14:28: 'extends' WS QID ( WS )? // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:14:28: 'extends' WS QID ( WS )? // alt
{
+
+
[self matchString:@"extends"]; if ( state.failed ) return ;


+

[self mWS]; if ( state.failed ) return ;


+

[self mQID]; if ( state.failed ) return ;


-
-                // Fuzzy.g:14:45: ( WS )? // block
+
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:14:45: ( WS )? // block
NSInteger alt4=2;
NSInteger LA4_0 = [input LA:1];

@@ -348,25 +369,27 @@
}
switch (alt4) {
case 1 : ;
-                        // Fuzzy.g:14:45: WS // alt
+                        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:14:45: WS // alt
{
-                        [self mWS]; if ( state.failed ) return ;


+                        [self mWS]; if ( state.failed ) return ;

+
+
}
break;

}

-
+
}
break;

}

-
-        // Fuzzy.g:15:3: ( 'implements' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:15:3: ( 'implements' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? // block
NSInteger alt10=2;
NSInteger LA10_0 = [input LA:1];

@@ -375,21 +398,25 @@
}
switch (alt10) {
case 1 : ;
-                // Fuzzy.g:15:4: 'implements' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:15:4: 'implements' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* // alt
{
+
+
[self matchString:@"implements"]; if ( state.failed ) return ;


+

[self mWS]; if ( state.failed ) return ;


+

[self mQID]; if ( state.failed ) return ;


-
-                // Fuzzy.g:15:24: ( WS )? // block
+
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:15:24: ( WS )? // block
NSInteger alt6=2;
NSInteger LA6_0 = [input LA:1];

@@ -398,17 +425,20 @@
}
switch (alt6) {
case 1 : ;
-                        // Fuzzy.g:15:24: WS // alt
+                        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:15:24: WS // alt
{
-                        [self mWS]; if ( state.failed ) return ;


+                        [self mWS]; if ( state.failed ) return ;
+

+
}
break;

}

+

do {
NSInteger alt9=2;
@@ -420,12 +450,14 @@

switch (alt9) {
case 1 : ;
-                            // Fuzzy.g:15:29: ',' ( WS )? QID ( WS )? // alt
+                            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:15:29: ',' ( WS )? QID ( WS )? // alt
{
-                            [self matchChar:',']; if ( state.failed ) return ;


-                            // Fuzzy.g:15:33: ( WS )? // block
+                            [self matchChar:',']; if ( state.failed ) return ;
+
+
+                            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:15:33: ( WS )? // block
NSInteger alt7=2;
NSInteger LA7_0 = [input LA:1];

@@ -434,23 +466,26 @@
}
switch (alt7) {
case 1 : ;
-                                    // Fuzzy.g:15:33: WS // alt
+                                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:15:33: WS // alt
{
-                                    [self mWS]; if ( state.failed ) return ;


+                                    [self mWS]; if ( state.failed ) return ;
+

+
}
break;

}

+

[self mQID]; if ( state.failed ) return ;


-
-                            // Fuzzy.g:15:41: ( WS )? // block
+
+                            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:15:41: ( WS )? // block
NSInteger alt8=2;
NSInteger LA8_0 = [input LA:1];

@@ -459,18 +494,20 @@
}
switch (alt8) {
case 1 : ;
-                                    // Fuzzy.g:15:41: WS // alt
+                                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:15:41: WS // alt
{
-                                    [self mWS]; if ( state.failed ) return ;


+                                    [self mWS]; if ( state.failed ) return ;
+

+
}
break;

}

-
+
}
break;

@@ -480,69 +517,74 @@
} while (YES);
loop9: ;

-
+
}
break;

}

+

[self matchChar:'{']; if ( state.failed ) return ;

+

if ( state.backtracking == 1 ) {
NSLog(@"found class %@", (name!=nil?name.text:nil));
}

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "CLASS" */
-
// $ANTLR start "METHOD"
- (void) mMETHOD
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = METHOD;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        ANTLRCommonToken *name=nil;
+        NSInteger _channel = TokenChannelDefault;
+        CommonToken *name=nil;

-        // Fuzzy.g:20:5: ( TYPE WS name= ID ( WS )? '(' ( ARG ( WS )? ( ',' ( WS )? ARG ( WS )? )* )? ')' ( WS )? ( 'throws' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? '{' ) // ruleBlockSingleAlt
-        // Fuzzy.g:20:9: TYPE WS name= ID ( WS )? '(' ( ARG ( WS )? ( ',' ( WS )? ARG ( WS )? )* )? ')' ( WS )? ( 'throws' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? '{' // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:20:5: ( TYPE WS name= ID ( WS )? '(' ( ARG ( WS )? ( ',' ( WS )? ARG ( WS )? )* )? ')' ( WS )? ( 'throws' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? '{' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:20:9: TYPE WS name= ID ( WS )? '(' ( ARG ( WS )? ( ',' ( WS )? ARG ( WS )? )* )? ')' ( WS )? ( 'throws' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? '{' // alt
{
+
+
[self mTYPE]; if ( state.failed ) return ;


+

[self mWS]; if ( state.failed ) return ;


+

NSInteger nameStart158 = input.index;
[self mID]; if ( state.failed ) return ;

-        name = [[ANTLRCommonToken newToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart158 Stop:input.index-1] retain];
+        name = [[CommonToken newToken:input Type:TokenTypeInvalid Channel:TokenChannelDefault Start:nameStart158 Stop:input.index-1] retain];
name.line = self.line;

-
-        // Fuzzy.g:20:25: ( WS )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:20:25: ( WS )? // block
NSInteger alt11=2;
NSInteger LA11_0 = [input LA:1];

@@ -551,22 +593,25 @@
}
switch (alt11) {
case 1 : ;
-                // Fuzzy.g:20:25: WS // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:20:25: WS // alt
{
-                [self mWS]; if ( state.failed ) return ;


+                [self mWS]; if ( state.failed ) return ;
+

+
}
break;

}

+

[self matchChar:'(']; if ( state.failed ) return ;

-
-        // Fuzzy.g:20:33: ( ARG ( WS )? ( ',' ( WS )? ARG ( WS )? )* )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:20:33: ( ARG ( WS )? ( ',' ( WS )? ARG ( WS )? )* )? // block
NSInteger alt16=2;
NSInteger LA16_0 = [input LA:1];

@@ -575,13 +620,15 @@
}
switch (alt16) {
case 1 : ;
-                // Fuzzy.g:20:35: ARG ( WS )? ( ',' ( WS )? ARG ( WS )? )* // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:20:35: ARG ( WS )? ( ',' ( WS )? ARG ( WS )? )* // alt
{
-                [self mARG]; if ( state.failed ) return ;


+                [self mARG]; if ( state.failed ) return ;
+

-                // Fuzzy.g:20:39: ( WS )? // block
+
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:20:39: ( WS )? // block
NSInteger alt12=2;
NSInteger LA12_0 = [input LA:1];

@@ -590,17 +637,20 @@
}
switch (alt12) {
case 1 : ;
-                        // Fuzzy.g:20:39: WS // alt
+                        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:20:39: WS // alt
{
-                        [self mWS]; if ( state.failed ) return ;


+                        [self mWS]; if ( state.failed ) return ;
+

+
}
break;

}

+

do {
NSInteger alt15=2;
@@ -612,12 +662,14 @@

switch (alt15) {
case 1 : ;
-                            // Fuzzy.g:20:44: ',' ( WS )? ARG ( WS )? // alt
+                            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:20:44: ',' ( WS )? ARG ( WS )? // alt
{
-                            [self matchChar:',']; if ( state.failed ) return ;


-                            // Fuzzy.g:20:48: ( WS )? // block
+                            [self matchChar:',']; if ( state.failed ) return ;
+
+
+                            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:20:48: ( WS )? // block
NSInteger alt13=2;
NSInteger LA13_0 = [input LA:1];

@@ -626,23 +678,26 @@
}
switch (alt13) {
case 1 : ;
-                                    // Fuzzy.g:20:48: WS // alt
+                                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:20:48: WS // alt
{
-                                    [self mWS]; if ( state.failed ) return ;


+                                    [self mWS]; if ( state.failed ) return ;
+

+
}
break;

}

+

[self mARG]; if ( state.failed ) return ;


-
-                            // Fuzzy.g:20:56: ( WS )? // block
+
+                            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:20:56: ( WS )? // block
NSInteger alt14=2;
NSInteger LA14_0 = [input LA:1];

@@ -651,18 +706,20 @@
}
switch (alt14) {
case 1 : ;
-                                    // Fuzzy.g:20:56: WS // alt
+                                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:20:56: WS // alt
{
-                                    [self mWS]; if ( state.failed ) return ;


+                                    [self mWS]; if ( state.failed ) return ;
+

+
}
break;

}

-
+
}
break;

@@ -672,17 +729,18 @@
} while (YES);
loop15: ;

-
+
}
break;

}

+

[self matchChar:')']; if ( state.failed ) return ;

-
-        // Fuzzy.g:20:69: ( WS )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:20:69: ( WS )? // block
NSInteger alt17=2;
NSInteger LA17_0 = [input LA:1];

@@ -691,19 +749,21 @@
}
switch (alt17) {
case 1 : ;
-                // Fuzzy.g:20:69: WS // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:20:69: WS // alt
{
-                [self mWS]; if ( state.failed ) return ;


+                [self mWS]; if ( state.failed ) return ;

+
+
}
break;

}

-
-        // Fuzzy.g:21:8: ( 'throws' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:21:8: ( 'throws' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? // block
NSInteger alt22=2;
NSInteger LA22_0 = [input LA:1];

@@ -712,21 +772,25 @@
}
switch (alt22) {
case 1 : ;
-                // Fuzzy.g:21:9: 'throws' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:21:9: 'throws' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* // alt
{
+
+
[self matchString:@"throws"]; if ( state.failed ) return ;


+

[self mWS]; if ( state.failed ) return ;


+

[self mQID]; if ( state.failed ) return ;


-
-                // Fuzzy.g:21:25: ( WS )? // block
+
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:21:25: ( WS )? // block
NSInteger alt18=2;
NSInteger LA18_0 = [input LA:1];

@@ -735,17 +799,20 @@
}
switch (alt18) {
case 1 : ;
-                        // Fuzzy.g:21:25: WS // alt
+                        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:21:25: WS // alt
{
-                        [self mWS]; if ( state.failed ) return ;


+                        [self mWS]; if ( state.failed ) return ;
+

+
}
break;

}

+

do {
NSInteger alt21=2;
@@ -757,12 +824,14 @@

switch (alt21) {
case 1 : ;
-                            // Fuzzy.g:21:30: ',' ( WS )? QID ( WS )? // alt
+                            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:21:30: ',' ( WS )? QID ( WS )? // alt
{
-                            [self matchChar:',']; if ( state.failed ) return ;


-                            // Fuzzy.g:21:34: ( WS )? // block
+                            [self matchChar:',']; if ( state.failed ) return ;
+
+
+                            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:21:34: ( WS )? // block
NSInteger alt19=2;
NSInteger LA19_0 = [input LA:1];

@@ -771,23 +840,26 @@
}
switch (alt19) {
case 1 : ;
-                                    // Fuzzy.g:21:34: WS // alt
+                                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:21:34: WS // alt
{
-                                    [self mWS]; if ( state.failed ) return ;


+                                    [self mWS]; if ( state.failed ) return ;

+
+
}
break;

}

+

[self mQID]; if ( state.failed ) return ;


-
-                            // Fuzzy.g:21:42: ( WS )? // block
+
+                            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:21:42: ( WS )? // block
NSInteger alt20=2;
NSInteger LA20_0 = [input LA:1];

@@ -796,18 +868,20 @@
}
switch (alt20) {
case 1 : ;
-                                    // Fuzzy.g:21:42: WS // alt
+                                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:21:42: WS // alt
{
-                                    [self mWS]; if ( state.failed ) return ;


+                                    [self mWS]; if ( state.failed ) return ;
+

+
}
break;

}

-
+
}
break;

@@ -817,69 +891,74 @@
} while (YES);
loop21: ;

-
+
}
break;

}

+

[self matchChar:'{']; if ( state.failed ) return ;

+

if ( state.backtracking == 1 ) {
NSLog(@"found method %@", (name!=nil?name.text:nil));
}

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "METHOD" */
-
// $ANTLR start "FIELD"
- (void) mFIELD
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = FIELD;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        ANTLRCommonToken *name=nil;
+        NSInteger _channel = TokenChannelDefault;
+        CommonToken *name=nil;

-        // Fuzzy.g:26:5: ( TYPE WS name= ID ( '[]' )? ( WS )? ( ';' | '=' ) ) // ruleBlockSingleAlt
-        // Fuzzy.g:26:9: TYPE WS name= ID ( '[]' )? ( WS )? ( ';' | '=' ) // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:26:5: ( TYPE WS name= ID ( '[]' )? ( WS )? ( ';' | '=' ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:26:9: TYPE WS name= ID ( '[]' )? ( WS )? ( ';' | '=' ) // alt
{
+
+
[self mTYPE]; if ( state.failed ) return ;


+

[self mWS]; if ( state.failed ) return ;


+

NSInteger nameStart261 = input.index;
[self mID]; if ( state.failed ) return ;

-        name = [[ANTLRCommonToken newToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart261 Stop:input.index-1] retain];
+        name = [[CommonToken newToken:input Type:TokenTypeInvalid Channel:TokenChannelDefault Start:nameStart261 Stop:input.index-1] retain];
name.line = self.line;

-
-        // Fuzzy.g:26:25: ( '[]' )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:26:25: ( '[]' )? // block
NSInteger alt23=2;
NSInteger LA23_0 = [input LA:1];

@@ -888,19 +967,21 @@
}
switch (alt23) {
case 1 : ;
-                // Fuzzy.g:26:25: '[]' // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:26:25: '[]' // alt
{
-                [self matchString:@"[]"]; if ( state.failed ) return ;


+                [self matchString:@"[]"]; if ( state.failed ) return ;

+
+
}
break;

}

-
-        // Fuzzy.g:26:31: ( WS )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:26:31: ( WS )? // block
NSInteger alt24=2;
NSInteger LA24_0 = [input LA:1];

@@ -909,18 +990,20 @@
}
switch (alt24) {
case 1 : ;
-                // Fuzzy.g:26:31: WS // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:26:31: WS // alt
{
-                [self mWS]; if ( state.failed ) return ;


+                [self mWS]; if ( state.failed ) return ;
+

+
}
break;

}

-
+
if ([input LA:1] == ';'||[input LA:1] == '=') {
[input consume];
state.failed = NO;
@@ -928,48 +1011,49 @@
} else {
if ( state.backtracking > 0 ) { state.failed = YES; return ; }

-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

+

if ( state.backtracking == 1 ) {
NSLog(@"found var %@", (name!=nil?name.text:nil));
}

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "FIELD" */
-
// $ANTLR start "STAT"
- (void) mSTAT
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = STAT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // Fuzzy.g:30:5: ( ( 'if' | 'while' | 'switch' | 'for' ) ( WS )? '(' ) // ruleBlockSingleAlt
-        // Fuzzy.g:30:7: ( 'if' | 'while' | 'switch' | 'for' ) ( WS )? '(' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:30:5: ( ( 'if' | 'while' | 'switch' | 'for' ) ( WS )? '(' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:30:7: ( 'if' | 'while' | 'switch' | 'for' ) ( WS )? '(' // alt
{
-        // Fuzzy.g:30:7: ( 'if' | 'while' | 'switch' | 'for' ) // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:30:7: ( 'if' | 'while' | 'switch' | 'for' ) // block
NSInteger alt25=4;
unichar charLA25 = [input LA:1];
switch (charLA25) {
@@ -997,7 +1081,7 @@
default: ;
if ( state.backtracking > 0 ) { state.failed = YES; return ; }

-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:25 state:0 stream:input];
+            NoViableAltException *nvae = [NoViableAltException newException:25 state:0 stream:input];
nvae.c = charLA25;
@throw nvae;

@@ -1005,46 +1089,54 @@

switch (alt25) {
case 1 : ;
-                // Fuzzy.g:30:8: 'if' // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:30:8: 'if' // alt
{
-                [self matchString:@"if"]; if ( state.failed ) return ;


+                [self matchString:@"if"]; if ( state.failed ) return ;
+

+
}
break;
case 2 : ;
-                // Fuzzy.g:30:13: 'while' // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:30:13: 'while' // alt
{
-                [self matchString:@"while"]; if ( state.failed ) return ;


+                [self matchString:@"while"]; if ( state.failed ) return ;

+
+
}
break;
case 3 : ;
-                // Fuzzy.g:30:21: 'switch' // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:30:21: 'switch' // alt
{
-                [self matchString:@"switch"]; if ( state.failed ) return ;


+                [self matchString:@"switch"]; if ( state.failed ) return ;
+

+
}
break;
case 4 : ;
-                // Fuzzy.g:30:30: 'for' // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:30:30: 'for' // alt
{
-                [self matchString:@"for"]; if ( state.failed ) return ;


+                [self matchString:@"for"]; if ( state.failed ) return ;
+

+
}
break;

}

-
-        // Fuzzy.g:30:37: ( WS )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:30:37: ( WS )? // block
NSInteger alt26=2;
NSInteger LA26_0 = [input LA:1];

@@ -1053,61 +1145,65 @@
}
switch (alt26) {
case 1 : ;
-                // Fuzzy.g:30:37: WS // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:30:37: WS // alt
{
-                [self mWS]; if ( state.failed ) return ;


+                [self mWS]; if ( state.failed ) return ;

+
+
}
break;

}

+

[self matchChar:'(']; if ( state.failed ) return ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "STAT" */
-
// $ANTLR start "CALL"
- (void) mCALL
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = CALL;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        ANTLRCommonToken *name=nil;
+        NSInteger _channel = TokenChannelDefault;
+        CommonToken *name=nil;

-        // Fuzzy.g:33:5: (name= QID ( WS )? '(' ) // ruleBlockSingleAlt
-        // Fuzzy.g:33:9: name= QID ( WS )? '(' // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:33:5: (name= QID ( WS )? '(' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:33:9: name= QID ( WS )? '(' // alt
{
+
+
NSInteger nameStart326 = input.index;
[self mQID]; if ( state.failed ) return ;

-        name = [[ANTLRCommonToken newToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart326 Stop:input.index-1] retain];
+        name = [[CommonToken newToken:input Type:TokenTypeInvalid Channel:TokenChannelDefault Start:nameStart326 Stop:input.index-1] retain];
name.line = self.line;

-
-        // Fuzzy.g:33:18: ( WS )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:33:18: ( WS )? // block
NSInteger alt27=2;
NSInteger LA27_0 = [input LA:1];

@@ -1116,59 +1212,65 @@
}
switch (alt27) {
case 1 : ;
-                // Fuzzy.g:33:18: WS // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:33:18: WS // alt
{
-                [self mWS]; if ( state.failed ) return ;


+                [self mWS]; if ( state.failed ) return ;
+

+
}
break;

}

+

[self matchChar:'(']; if ( state.failed ) return ;

+

if ( state.backtracking == 1 ) {
/*ignore if this/super */ NSLog(@"found call %@",(name!=nil?name.text:nil));
}

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "CALL" */
-
// $ANTLR start "COMMENT"
- (void) mCOMMENT
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = COMMENT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // Fuzzy.g:38:5: ( '/*' ( options {greedy=false; } : . )* '*/' ) // ruleBlockSingleAlt
-        // Fuzzy.g:38:9: '/*' ( options {greedy=false; } : . )* '*/' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:38:5: ( '/*' ( options {greedy=false; } : . )* '*/' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:38:9: '/*' ( options {greedy=false; } : . )* '*/' // alt
{
+
+
[self matchString:@"/*"]; if ( state.failed ) return ;


+

do {
NSInteger alt28=2;
@@ -1191,11 +1293,12 @@

switch (alt28) {
case 1 : ;
-                    // Fuzzy.g:38:41: . // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:38:41: . // alt
{
-                    [self matchAny]; if ( state.failed ) return ;

+                    [self matchAny]; if ( state.failed ) return ;

+
}
break;

@@ -1205,49 +1308,53 @@
} while (YES);
loop28: ;

+

[self matchString:@"*/"]; if ( state.failed ) return ;


+

if ( state.backtracking == 1 ) {
NSLog(@"found comment %@", [self text]);
}

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "COMMENT" */
-
// $ANTLR start "SL_COMMENT"
- (void) mSL_COMMENT
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = SL_COMMENT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // Fuzzy.g:43:5: ( '//' ( options {greedy=false; } : . )* '\\n' ) // ruleBlockSingleAlt
-        // Fuzzy.g:43:9: '//' ( options {greedy=false; } : . )* '\\n' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:43:5: ( '//' ( options {greedy=false; } : . )* '\\n' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:43:9: '//' ( options {greedy=false; } : . )* '\\n' // alt
{
+
+
[self matchString:@"//"]; if ( state.failed ) return ;


+

do {
NSInteger alt29=2;
@@ -1262,11 +1369,12 @@

switch (alt29) {
case 1 : ;
-                    // Fuzzy.g:43:41: . // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:43:41: . // alt
{
-                    [self matchAny]; if ( state.failed ) return ;

+                    [self matchAny]; if ( state.failed ) return ;

+
}
break;

@@ -1276,47 +1384,51 @@
} while (YES);
loop29: ;

+

[self matchChar:'\n']; if ( state.failed ) return ;

+

if ( state.backtracking == 1 ) {
NSLog(@"found // comment %@", [self text]);
}

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "SL_COMMENT" */
-
// $ANTLR start "STRING"
- (void) mSTRING
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = STRING;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // Fuzzy.g:48:2: ( '\"' ( options {greedy=false; } : ESC | . )* '\"' ) // ruleBlockSingleAlt
-        // Fuzzy.g:48:4: '\"' ( options {greedy=false; } : ESC | . )* '\"' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:48:2: ( '\"' ( options {greedy=false; } : ESC | . )* '\"' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:48:4: '\"' ( options {greedy=false; } : ESC | . )* '\"' // alt
{
+
+
[self matchChar:'"']; if ( state.failed ) return ;

+

do {
NSInteger alt30=3;
@@ -1348,20 +1460,23 @@

switch (alt30) {
case 1 : ;
-                    // Fuzzy.g:48:34: ESC // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:48:34: ESC // alt
{
-                    [self mESC]; if ( state.failed ) return ;


+                    [self mESC]; if ( state.failed ) return ;
+

+
}
break;
case 2 : ;
-                    // Fuzzy.g:48:40: . // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:48:40: . // alt
{
-                    [self matchAny]; if ( state.failed ) return ;

+                    [self matchAny]; if ( state.failed ) return ;

+
}
break;

@@ -1371,42 +1486,45 @@
} while (YES);
loop30: ;

+

[self matchChar:'"']; if ( state.failed ) return ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "STRING" */
-
// $ANTLR start "CHAR"
- (void) mCHAR
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = CHAR;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // Fuzzy.g:52:2: ( '\\'' ( options {greedy=false; } : ESC | . )* '\\'' ) // ruleBlockSingleAlt
-        // Fuzzy.g:52:4: '\\'' ( options {greedy=false; } : ESC | . )* '\\'' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:52:2: ( '\\'' ( options {greedy=false; } : ESC | . )* '\\'' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:52:4: '\\'' ( options {greedy=false; } : ESC | . )* '\\'' // alt
{
+
+
[self matchChar:'\'']; if ( state.failed ) return ;

+

do {
NSInteger alt31=3;
@@ -1438,20 +1556,23 @@

switch (alt31) {
case 1 : ;
-                    // Fuzzy.g:52:35: ESC // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:52:35: ESC // alt
{
-                    [self mESC]; if ( state.failed ) return ;


+                    [self mESC]; if ( state.failed ) return ;

+
+
}
break;
case 2 : ;
-                    // Fuzzy.g:52:41: . // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:52:41: . // alt
{
-                    [self matchAny]; if ( state.failed ) return ;

+                    [self matchAny]; if ( state.failed ) return ;

+
}
break;

@@ -1461,41 +1582,42 @@
} while (YES);
loop31: ;

+

[self matchChar:'\'']; if ( state.failed ) return ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "CHAR" */
-
// $ANTLR start "WS"
- (void) mWS
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = WS;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // Fuzzy.g:55:5: ( ( ' ' | '\\t' | '\\n' )+ ) // ruleBlockSingleAlt
-        // Fuzzy.g:55:9: ( ' ' | '\\t' | '\\n' )+ // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:55:5: ( ( ' ' | '\\t' | '\\n' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:55:9: ( ' ' | '\\t' | '\\n' )+ // alt
{
-        // Fuzzy.g:55:9: ( ' ' | '\\t' | '\\n' )+ // positiveClosureBlock
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:55:9: ( ' ' | '\\t' | '\\n' )+ // positiveClosureBlock
NSInteger cnt32 = 0;
do {
NSInteger alt32 = 2;
@@ -1507,8 +1629,9 @@

switch (alt32) {
case 1 : ;
-                    // Fuzzy.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g: // alt
{
+
if ((([input LA:1] >= '\t') && ([input LA:1] <= '\n'))||[input LA:1] == ' ') {
[input consume];
state.failed = NO;
@@ -1516,12 +1639,12 @@
} else {
if ( state.backtracking > 0 ) { state.failed = YES; return ; }

-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

@@ -1530,46 +1653,48 @@
goto loop32;
if ( state.backtracking > 0 ) { state.failed = YES; return ; }

-                    ANTLREarlyExitException *eee =
-                        [ANTLREarlyExitException newException:input decisionNumber:32];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:32];
@throw eee;
}
cnt32++;
} while (YES);
loop32: ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "WS" */
-
// $ANTLR start "QID"
- (void) mQID
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // Fuzzy.g:59:5: ( ID ( '.' ID )* ) // ruleBlockSingleAlt
-        // Fuzzy.g:59:7: ID ( '.' ID )* // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:59:5: ( ID ( '.' ID )* ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:59:7: ID ( '.' ID )* // alt
{
+
+
[self mID]; if ( state.failed ) return ;


+

do {
NSInteger alt33=2;
@@ -1581,15 +1706,18 @@

switch (alt33) {
case 1 : ;
-                    // Fuzzy.g:59:11: '.' ID // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:59:11: '.' ID // alt
{
+
+
[self matchChar:'.']; if ( state.failed ) return ;

+

[self mID]; if ( state.failed ) return ;


-
+
}
break;

@@ -1599,35 +1727,37 @@
} while (YES);
loop33: ;

-
+
}


}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "QID" */
-
// $ANTLR start "QIDStar"
- (void) mQIDStar
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // Fuzzy.g:68:2: ( ID ( '.' ID )* ( '.*' )? ) // ruleBlockSingleAlt
-        // Fuzzy.g:68:4: ID ( '.' ID )* ( '.*' )? // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:68:2: ( ID ( '.' ID )* ( '.*' )? ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:68:4: ID ( '.' ID )* ( '.*' )? // alt
{
+
+
[self mID]; if ( state.failed ) return ;


+

do {
NSInteger alt34=2;
@@ -1644,15 +1774,18 @@

switch (alt34) {
case 1 : ;
-                    // Fuzzy.g:68:8: '.' ID // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:68:8: '.' ID // alt
{
+
+
[self matchChar:'.']; if ( state.failed ) return ;

+

[self mID]; if ( state.failed ) return ;


-
+
}
break;

@@ -1662,8 +1795,8 @@
} while (YES);
loop34: ;

-
-        // Fuzzy.g:68:17: ( '.*' )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:68:17: ( '.*' )? // block
NSInteger alt35=2;
NSInteger LA35_0 = [input LA:1];

@@ -1672,48 +1805,51 @@
}
switch (alt35) {
case 1 : ;
-                // Fuzzy.g:68:17: '.*' // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:68:17: '.*' // alt
{
-                [self matchString:@".*"]; if ( state.failed ) return ;


+                [self matchString:@".*"]; if ( state.failed ) return ;
+

+
}
break;

}

-
+
}


}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "QIDStar" */
-
// $ANTLR start "TYPE"
- (void) mTYPE
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // Fuzzy.g:72:5: ( QID ( '[]' )? ) // ruleBlockSingleAlt
-        // Fuzzy.g:72:9: QID ( '[]' )? // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:72:5: ( QID ( '[]' )? ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:72:9: QID ( '[]' )? // alt
{
-        [self mQID]; if ( state.failed ) return ;


+        [self mQID]; if ( state.failed ) return ;
+

-        // Fuzzy.g:72:13: ( '[]' )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:72:13: ( '[]' )? // block
NSInteger alt36=2;
NSInteger LA36_0 = [input LA:1];

@@ -1722,80 +1858,85 @@
}
switch (alt36) {
case 1 : ;
-                // Fuzzy.g:72:13: '[]' // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:72:13: '[]' // alt
{
-                [self matchString:@"[]"]; if ( state.failed ) return ;


+                [self matchString:@"[]"]; if ( state.failed ) return ;
+

+
}
break;

}

-
+
}


}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "TYPE" */
-
// $ANTLR start "ARG"
- (void) mARG
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // Fuzzy.g:76:5: ( TYPE WS ID ) // ruleBlockSingleAlt
-        // Fuzzy.g:76:9: TYPE WS ID // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:76:5: ( TYPE WS ID ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:76:9: TYPE WS ID // alt
{
+
+
[self mTYPE]; if ( state.failed ) return ;


+

[self mWS]; if ( state.failed ) return ;


+

[self mID]; if ( state.failed ) return ;


-
+
}


}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "ARG" */
-
// $ANTLR start "ID"
- (void) mID
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // Fuzzy.g:80:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* ) // ruleBlockSingleAlt
-        // Fuzzy.g:80:9: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:80:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:80:9: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* // alt
{
+
if ((([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
state.failed = NO;
@@ -1803,11 +1944,12 @@
} else {
if ( state.backtracking > 0 ) { state.failed = YES; return ; }

-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

+

do {
NSInteger alt37=2;
@@ -1819,8 +1961,9 @@

switch (alt37) {
case 1 : ;
-                    // Fuzzy.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g: // alt
{
+
if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))||(([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
state.failed = NO;
@@ -1828,12 +1971,12 @@
} else {
if ( state.backtracking > 0 ) { state.failed = YES; return ; }

-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

@@ -1843,35 +1986,36 @@
} while (YES);
loop37: ;

-
+
}


}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "ID" */
-
// $ANTLR start "ESC"
- (void) mESC
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // Fuzzy.g:84:5: ( '\\\\' ( '\"' | '\\'' | '\\\\' ) ) // ruleBlockSingleAlt
-        // Fuzzy.g:84:7: '\\\\' ( '\"' | '\\'' | '\\\\' ) // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:84:5: ( '\\\\' ( '\"' | '\\'' | '\\\\' ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:84:7: '\\\\' ( '\"' | '\\'' | '\\\\' ) // alt
{
-        [self matchChar:'\\']; if ( state.failed ) return ;


+        [self matchChar:'\\']; if ( state.failed ) return ;
+
+
if ([input LA:1] == '"'||[input LA:1] == '\''||[input LA:1] == '\\') {
[input consume];
state.failed = NO;
@@ -1879,29 +2023,27 @@
} else {
if ( state.backtracking > 0 ) { state.failed = YES; return ; }

-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}


}
@finally {
//
-        /* my stuff */
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "ESC" */
-
- (void) mTokens
{
-    // Fuzzy.g:1:39: ( IMPORT | RETURN | CLASS | METHOD | FIELD | STAT | CALL | COMMENT | SL_COMMENT | STRING | CHAR | WS ) //ruleblock
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:39: ( IMPORT | RETURN | CLASS | METHOD | FIELD | STAT | CALL | COMMENT | SL_COMMENT | STRING | CHAR | WS ) //ruleblock
NSInteger alt38=12;
unichar charLA38 = [input LA:1];
switch (charLA38) {
@@ -1927,7 +2069,7 @@
else {
if ( state.backtracking > 0 ) { state.failed = YES; return ; }

-                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:38 state:1 stream:input];
+                NoViableAltException *nvae = [NoViableAltException newException:38 state:1 stream:input];
nvae.c = LA38_1;
@throw nvae;

@@ -1953,7 +2095,7 @@
else {
if ( state.backtracking > 0 ) { state.failed = YES; return ; }

-                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:38 state:7 stream:input];
+                NoViableAltException *nvae = [NoViableAltException newException:38 state:7 stream:input];
nvae.c = LA38_7;
@throw nvae;

@@ -1979,7 +2121,7 @@
else {
if ( state.backtracking > 0 ) { state.failed = YES; return ; }

-                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:38 state:9 stream:input];
+                NoViableAltException *nvae = [NoViableAltException newException:38 state:9 stream:input];
nvae.c = LA38_9;
@throw nvae;

@@ -2007,7 +2149,7 @@
else {
if ( state.backtracking > 0 ) { state.failed = YES; return ; }

-                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:38 state:11 stream:input];
+                NoViableAltException *nvae = [NoViableAltException newException:38 state:11 stream:input];
nvae.c = LA38_11;
@throw nvae;

@@ -2076,7 +2218,7 @@
else {
if ( state.backtracking > 0 ) { state.failed = YES; return ; }

-                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:38 state:12 stream:input];
+                NoViableAltException *nvae = [NoViableAltException newException:38 state:12 stream:input];
nvae.c = LA38_12;
@throw nvae;

@@ -2096,7 +2238,7 @@
else {
if ( state.backtracking > 0 ) { state.failed = YES; return ; }

-                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:38 state:13 stream:input];
+                NoViableAltException *nvae = [NoViableAltException newException:38 state:13 stream:input];
nvae.c = LA38_13;
@throw nvae;

@@ -2124,7 +2266,7 @@
default: ;
if ( state.backtracking > 0 ) { state.failed = YES; return ; }

-        ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:38 state:0 stream:input];
+        NoViableAltException *nvae = [NoViableAltException newException:38 state:0 stream:input];
nvae.c = charLA38;
@throw nvae;

@@ -2132,240 +2274,300 @@

switch (alt38) {
case 1 : ;
-            // Fuzzy.g:1:41: IMPORT // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:41: IMPORT // alt
{
-            [self mIMPORT]; if ( state.failed ) return ;


+            [self mIMPORT]; if ( state.failed ) return ;
+

+
}
break;
case 2 : ;
-            // Fuzzy.g:1:48: RETURN // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:48: RETURN // alt
{
-            [self mRETURN]; if ( state.failed ) return ;


+            [self mRETURN]; if ( state.failed ) return ;
+

+
}
break;
case 3 : ;
-            // Fuzzy.g:1:55: CLASS // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:55: CLASS // alt
{
-            [self mCLASS]; if ( state.failed ) return ;


+            [self mCLASS]; if ( state.failed ) return ;

+
+
}
break;
case 4 : ;
-            // Fuzzy.g:1:61: METHOD // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:61: METHOD // alt
{
-            [self mMETHOD]; if ( state.failed ) return ;


+            [self mMETHOD]; if ( state.failed ) return ;
+

+
}
break;
case 5 : ;
-            // Fuzzy.g:1:68: FIELD // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:68: FIELD // alt
{
-            [self mFIELD]; if ( state.failed ) return ;


+            [self mFIELD]; if ( state.failed ) return ;
+

+
}
break;
case 6 : ;
-            // Fuzzy.g:1:74: STAT // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:74: STAT // alt
{
-            [self mSTAT]; if ( state.failed ) return ;


+            [self mSTAT]; if ( state.failed ) return ;
+

+
}
break;
case 7 : ;
-            // Fuzzy.g:1:79: CALL // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:79: CALL // alt
{
-            [self mCALL]; if ( state.failed ) return ;


+            [self mCALL]; if ( state.failed ) return ;
+

+
}
break;
case 8 : ;
-            // Fuzzy.g:1:84: COMMENT // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:84: COMMENT // alt
{
-            [self mCOMMENT]; if ( state.failed ) return ;


+            [self mCOMMENT]; if ( state.failed ) return ;

+
+
}
break;
case 9 : ;
-            // Fuzzy.g:1:92: SL_COMMENT // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:92: SL_COMMENT // alt
{
-            [self mSL_COMMENT]; if ( state.failed ) return ;


+            [self mSL_COMMENT]; if ( state.failed ) return ;
+

+
}
break;
case 10 : ;
-            // Fuzzy.g:1:103: STRING // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:103: STRING // alt
{
-            [self mSTRING]; if ( state.failed ) return ;


+            [self mSTRING]; if ( state.failed ) return ;
+

+
}
break;
case 11 : ;
-            // Fuzzy.g:1:110: CHAR // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:110: CHAR // alt
{
-            [self mCHAR]; if ( state.failed ) return ;


+            [self mCHAR]; if ( state.failed ) return ;
+

+
}
break;
case 12 : ;
-            // Fuzzy.g:1:115: WS // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:115: WS // alt
{
-            [self mWS]; if ( state.failed ) return ;


+            [self mWS]; if ( state.failed ) return ;
+

+
}
break;

}

}
-
// $ANTLR start synpred1_Fuzzy_fragment
- (void) synpred1_Fuzzy_fragment
{
-    // Fuzzy.g:1:41: ( IMPORT ) // ruleBlockSingleAlt
-    // Fuzzy.g:1:41: IMPORT // alt
+    /* ruleLabelDefs entry */
+
+
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:41: ( IMPORT ) // ruleBlockSingleAlt
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:41: IMPORT // alt
{
-    [self mIMPORT]; if ( state.failed ) return ;


+    [self mIMPORT]; if ( state.failed ) return ;
+

+
}

} // $ANTLR end synpred1_Fuzzy_fragment
-
// $ANTLR start synpred2_Fuzzy_fragment
- (void) synpred2_Fuzzy_fragment
{
-    // Fuzzy.g:1:48: ( RETURN ) // ruleBlockSingleAlt
-    // Fuzzy.g:1:48: RETURN // alt
+    /* ruleLabelDefs entry */
+
+
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:48: ( RETURN ) // ruleBlockSingleAlt
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:48: RETURN // alt
{
-    [self mRETURN]; if ( state.failed ) return ;


+    [self mRETURN]; if ( state.failed ) return ;
+

+
}

} // $ANTLR end synpred2_Fuzzy_fragment
-
// $ANTLR start synpred3_Fuzzy_fragment
- (void) synpred3_Fuzzy_fragment
{
-    // Fuzzy.g:1:55: ( CLASS ) // ruleBlockSingleAlt
-    // Fuzzy.g:1:55: CLASS // alt
+    /* ruleLabelDefs entry */
+
+
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:55: ( CLASS ) // ruleBlockSingleAlt
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:55: CLASS // alt
{
-    [self mCLASS]; if ( state.failed ) return ;


+    [self mCLASS]; if ( state.failed ) return ;

+
+
}

} // $ANTLR end synpred3_Fuzzy_fragment
-
// $ANTLR start synpred4_Fuzzy_fragment
- (void) synpred4_Fuzzy_fragment
{
-    // Fuzzy.g:1:61: ( METHOD ) // ruleBlockSingleAlt
-    // Fuzzy.g:1:61: METHOD // alt
+    /* ruleLabelDefs entry */
+
+
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:61: ( METHOD ) // ruleBlockSingleAlt
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:61: METHOD // alt
{
-    [self mMETHOD]; if ( state.failed ) return ;


+    [self mMETHOD]; if ( state.failed ) return ;
+

+
}

} // $ANTLR end synpred4_Fuzzy_fragment
-
// $ANTLR start synpred5_Fuzzy_fragment
- (void) synpred5_Fuzzy_fragment
{
-    // Fuzzy.g:1:68: ( FIELD ) // ruleBlockSingleAlt
-    // Fuzzy.g:1:68: FIELD // alt
+    /* ruleLabelDefs entry */
+
+
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:68: ( FIELD ) // ruleBlockSingleAlt
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:68: FIELD // alt
{
-    [self mFIELD]; if ( state.failed ) return ;


+    [self mFIELD]; if ( state.failed ) return ;
+

+
}

} // $ANTLR end synpred5_Fuzzy_fragment
-
// $ANTLR start synpred6_Fuzzy_fragment
- (void) synpred6_Fuzzy_fragment
{
-    // Fuzzy.g:1:74: ( STAT ) // ruleBlockSingleAlt
-    // Fuzzy.g:1:74: STAT // alt
+    /* ruleLabelDefs entry */
+
+
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:74: ( STAT ) // ruleBlockSingleAlt
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:74: STAT // alt
{
-    [self mSTAT]; if ( state.failed ) return ;


+    [self mSTAT]; if ( state.failed ) return ;
+

+
}

} // $ANTLR end synpred6_Fuzzy_fragment
-
// $ANTLR start synpred7_Fuzzy_fragment
- (void) synpred7_Fuzzy_fragment
{
-    // Fuzzy.g:1:79: ( CALL ) // ruleBlockSingleAlt
-    // Fuzzy.g:1:79: CALL // alt
+    /* ruleLabelDefs entry */
+
+
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:79: ( CALL ) // ruleBlockSingleAlt
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:79: CALL // alt
{
-    [self mCALL]; if ( state.failed ) return ;


+    [self mCALL]; if ( state.failed ) return ;
+

+
}

} // $ANTLR end synpred7_Fuzzy_fragment
-
// $ANTLR start synpred8_Fuzzy_fragment
- (void) synpred8_Fuzzy_fragment
{
-    // Fuzzy.g:1:84: ( COMMENT ) // ruleBlockSingleAlt
-    // Fuzzy.g:1:84: COMMENT // alt
+    /* ruleLabelDefs entry */
+
+
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:84: ( COMMENT ) // ruleBlockSingleAlt
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:84: COMMENT // alt
{
-    [self mCOMMENT]; if ( state.failed ) return ;


+    [self mCOMMENT]; if ( state.failed ) return ;

+
+
}

} // $ANTLR end synpred8_Fuzzy_fragment
-
// $ANTLR start synpred9_Fuzzy_fragment
- (void) synpred9_Fuzzy_fragment
{
-    // Fuzzy.g:1:92: ( SL_COMMENT ) // ruleBlockSingleAlt
-    // Fuzzy.g:1:92: SL_COMMENT // alt
+    /* ruleLabelDefs entry */
+
+
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:92: ( SL_COMMENT ) // ruleBlockSingleAlt
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g:1:92: SL_COMMENT // alt
{
-    [self mSL_COMMENT]; if ( state.failed ) return ;


+    [self mSL_COMMENT]; if ( state.failed ) return ;
+

+
}

} // $ANTLR end synpred9_Fuzzy_fragment
diff --git a/runtime/ObjC/Framework/examples/fuzzy/antlr3.h b/runtime/ObjC/Framework/examples/fuzzy/antlr3.h
deleted file mode 100644
index 4f16279..0000000
--- a/runtime/ObjC/Framework/examples/fuzzy/antlr3.h
+++ /dev/null
@@ -1,79 +0,0 @@
-#import <ANTLR/ANTLRBaseMapElement.h>
-#import <ANTLR/ANTLRBaseRecognizer.h>
-#import <ANTLR/ANTLRBaseStack.h>
-#import <ANTLR/ANTLRBaseTree.h>
-#import <ANTLR/ANTLRBaseTreeAdaptor.h>
-#import <ANTLR/ANTLRBitSet.h>
-#import <ANTLR/ANTLRBufferedTokenStream.h>
-#import <ANTLR/ANTLRBufferedTreeNodeStream.h>
-#import <ANTLR/ANTLRCharStream.h>
-#import <ANTLR/ANTLRCharStreamState.h>
-#import <ANTLR/ANTLRCommonErrorNode.h>
-#import <ANTLR/ANTLRCommonToken.h>
-#import <ANTLR/ANTLRCommonTokenStream.h>
-#import <ANTLR/ANTLRCommonTree.h>
-#import <ANTLR/ANTLRCommonTreeAdaptor.h>
-#import <ANTLR/ANTLRCommonTreeNodeStream.h>
-#import <ANTLR/ANTLRDFA.h>
-#import <ANTLR/ANTLRDebug.h>
-#import <ANTLR/ANTLRDebugEventProxy.h>
-#import <ANTLR/ANTLRDebugEventListener.h>
-#import <ANTLR/ANTLRDebugParser.h>
-#import <ANTLR/ANTLRDebugTokenStream.h>
-#import <ANTLR/ANTLRDebugTreeAdaptor.h>
-#import <ANTLR/ANTLRDebugTreeNodeStream.h>
-#import <ANTLR/ANTLRDebugTreeParser.h>
-#import <ANTLR/ANTLREarlyExitException.h>
-#import <ANTLR/ANTLRError.h>
-#import <ANTLR/ANTLRFailedPredicateException.h>
-#import <ANTLR/ANTLRFastQueue.h>
-#import <ANTLR/ANTLRHashMap.h>
-#import <ANTLR/ANTLRHashRule.h>
-#import <ANTLR/ANTLRIntArray.h>
-#import <ANTLR/ANTLRIntStream.h>
-#import <ANTLR/ANTLRLexer.h>
-#import <ANTLR/ANTLRLexerRuleReturnScope.h>
-#import <ANTLR/ANTLRLinkBase.h>
-#import <ANTLR/ANTLRLookaheadStream.h>
-#import <ANTLR/ANTLRMapElement.h>
-#import <ANTLR/ANTLRMap.h>
-#import <ANTLR/ANTLRMismatchedNotSetException.h>
-#import <ANTLR/ANTLRMismatchedRangeException.h>
-#import <ANTLR/ANTLRMismatchedSetException.h>
-#import <ANTLR/ANTLRMismatchedTokenException.h>
-#import <ANTLR/ANTLRMismatchedTreeNodeException.h>
-#import <ANTLR/ANTLRMissingTokenException.h>
-#import <ANTLR/ANTLRNodeMapElement.h>
-#import <ANTLR/ANTLRNoViableAltException.h>
-#import <ANTLR/ANTLRParser.h>
-#import <ANTLR/ANTLRParserRuleReturnScope.h>
-#import <ANTLR/ANTLRPtrBuffer.h>
-#import <ANTLR/ANTLRRecognitionException.h>
-#import <ANTLR/ANTLRRecognizerSharedState.h>
-#import <ANTLR/ANTLRRewriteRuleElementStream.h>
-#import <ANTLR/ANTLRRewriteRuleSubtreeStream.h>
-#import <ANTLR/ANTLRRewriteRuleTokenStream.h>
-#import <ANTLR/ANTLRRuleMemo.h>
-#import <ANTLR/ANTLRRuleStack.h>
-#import <ANTLR/ANTLRRuleReturnScope.h>
-#import <ANTLR/ANTLRRuntimeException.h>
-#import <ANTLR/ANTLRStreamEnumerator.h>
-#import <ANTLR/ANTLRStringStream.h>
-#import <ANTLR/ANTLRSymbolStack.h>
-#import <ANTLR/ANTLRToken+DebuggerSupport.h>
-#import <ANTLR/ANTLRToken.h>
-#import <ANTLR/ANTLRTokenRewriteStream.h>
-#import <ANTLR/ANTLRTokenSource.h>
-#import <ANTLR/ANTLRTokenStream.h>
-#import <ANTLR/ANTLRTree.h>
-#import <ANTLR/ANTLRTreeAdaptor.h>
-#import <ANTLR/ANTLRTreeException.h>
-#import <ANTLR/ANTLRTreeIterator.h>
-#import <ANTLR/ANTLRTreeNodeStream.h>
-#import <ANTLR/ANTLRTreeParser.h>
-#import <ANTLR/ANTLRTreeRuleReturnScope.h>
-#import <ANTLR/ANTLRUnbufferedTokenStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStreamState.h>
-#import <ANTLR/ANTLRUniqueIDMap.h>
-#import <ANTLR/ANTLRUnwantedTokenException.h>
diff --git a/runtime/ObjC/Framework/examples/fuzzy/main.m b/runtime/ObjC/Framework/examples/fuzzy/main.m
index 379a519..2360f94 100644
--- a/runtime/ObjC/Framework/examples/fuzzy/main.m
+++ b/runtime/ObjC/Framework/examples/fuzzy/main.m
@@ -1,20 +1,20 @@
#import <Cocoa/Cocoa.h>
#import "Fuzzy.h"
-#import "antlr3.h"
+#import <ANTLR/ANTLR.h>

int main(int argc, const char * argv[])
{
NSError *error;
NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
-	NSString *input = [NSString stringWithContentsOfFile:@"/Users/acondit/source/antlr3/acondit_localhost/code/antlr/antlr3-main/runtime/ObjC/Framework/examples/fuzzy/input"  encoding:NSASCIIStringEncoding error:&error];
+	NSString *input = [NSString stringWithContentsOfFile:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/fuzzy/input"  encoding:NSASCIIStringEncoding error:&error];
NSLog(@"%@", input);
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:input];
Fuzzy *lex = [Fuzzy newFuzzyWithCharStream:stream];
-	ANTLRCommonTokenStream *tokens = [ANTLRCommonTokenStream newANTLRCommonTokenStreamWithTokenSource:lex];
+	CommonTokenStream *tokens = [CommonTokenStream newCommonTokenStreamWithTokenSource:lex];
NSLog( [tokens toString] );

-	id<ANTLRToken> currentToken;
-	while ((currentToken = [lex nextToken]) && [currentToken getType] != ANTLRTokenTypeEOF) {
+	id<Token> currentToken;
+	while ((currentToken = [lex nextToken]) && currentToken.type != TokenTypeEOF) {
NSLog(@"### %@", [currentToken toString]);
}

diff --git a/runtime/ObjC/Framework/examples/fuzzy/output1/Fuzzy.m b/runtime/ObjC/Framework/examples/fuzzy/output1/Fuzzy.m
deleted file mode 100644
index 908a214..0000000
--- a/runtime/ObjC/Framework/examples/fuzzy/output1/Fuzzy.m
+++ /dev/null
@@ -1,2162 +0,0 @@
-/** \file
- *  This OBJC source file was generated by $ANTLR version 3.2 Aug 20, 2010 13:39:32
- *
- *     -  From the grammar source file : /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g
- *     -                            On : 2010-08-20 13:40:15
- *     -                 for the lexer : FuzzyLexer *
- * Editing it, at least manually, is not wise.
- *
- * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
- *
- *
-*/
-// [The "BSD licence"]
-// Copyright (c) 2010 Alan Condit
-//
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. The name of the author may not be used to endorse or promote products
-//    derived from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// $ANTLR 3.2 Aug 20, 2010 13:39:32 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g 2010-08-20 13:40:15
-
-/* -----------------------------------------
- * Include the ANTLR3 generated header file.
- */
-#import "Fuzzy.h"
-/* ----------------------------------------- */
-
-
-/* ============================================================================= */
-
-/* =============================================================================
- * Start of recognizer
- */
-
-#pragma mark Cyclic DFA implementation start DFA38
-@implementation DFA38
-const static NSInteger dfa38_eot[19] =
-    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static NSInteger dfa38_eof[19] =
-    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static unichar dfa38_min[19] =
-    {9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
-const static unichar dfa38_max[19] =
-    {122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
-const static NSInteger dfa38_accept[19] =
-    {-1,-1,4,5,7,-1,2,-1,8,9,-1,3,-1,1,6,10,-1,12,11};
-const static NSInteger dfa38_special[19] =
-    {-1,0,-1,-1,-1,1,-1,2,-1,-1,3,-1,4,-1,-1,-1,5,-1,-1};
-const static NSInteger dfa38_transition[] = {};
-const static NSInteger dfa38_transition0[] = {17, 17, -1, -1, -1, -1, -1,
- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1,
- 15, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1,
- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1,
- 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1,
- 1, -1, 1, 1, 10, 1, 1, 16, 1, 1, 12, 1, 1, 1, 1, 1, 1, 1, 1, 5, 16, 1,
- 1, 1, 16, 1, 1, 1};
-const static NSInteger dfa38_transition1[] = {-1};
-
-
-+ () newDFA38WithRecognizer:(ANTLRBaseRecognizer *)aRecognizer
-{
-    return [[[DFA38 alloc] initWithRecognizer:aRecognizer] retain];
-}
-
-- (id) initWithRecognizer:(ANTLRBaseRecognizer *) theRecognizer
-{
-    if ((self = [super initWithRecognizer:theRecognizer]) != nil) {
-        decisionNumber = 38;
-        eot = dfa38_eot;
-        eof = dfa38_eof;
-        min = dfa38_min;
-        max = dfa38_max;
-        accept = dfa38_accept;
-        special = dfa38_special;
-        if (!(transition = calloc(19, sizeof(void*)))) {
-            [self release];
-            return nil;
-        }
-        len = 19;
-        transition[0] = dfa38_transition0;
-        transition[1] = dfa38_transition1;
-        transition[2] = dfa38_transition;
-        transition[3] = dfa38_transition;
-        transition[4] = dfa38_transition;
-        transition[5] = dfa38_transition1;
-        transition[6] = dfa38_transition;
-        transition[7] = dfa38_transition1;
-        transition[8] = dfa38_transition;
-        transition[9] = dfa38_transition;
-        transition[10] = dfa38_transition1;
-        transition[11] = dfa38_transition;
-        transition[12] = dfa38_transition1;
-        transition[13] = dfa38_transition;
-        transition[14] = dfa38_transition;
-        transition[15] = dfa38_transition;
-        transition[16] = dfa38_transition1;
-        transition[17] = dfa38_transition;
-        transition[18] = dfa38_transition;
-    }
-    return self;
-}
-
-/* start dfa.specialStateSTs */
-- (NSInteger) specialStateTransition:(NSInteger)s Stream:(id<ANTLRIntStream>)anInput
-{
-    id<ANTLRIntStream> input = anInput;
-    switch (s) {
-                case 0 : ;
-                    /* cyclicDFAState */
-                    NSInteger LA38_1 = [input LA:1];
-
-
-                    NSInteger index38_1 = [input getIndex];
-                    [input rewind];
-                    s = -1;
-                    /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred4_Fuzzy_fragment)]) { s = 2;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred5_Fuzzy_fragment)]) { s = 3;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred7_Fuzzy_fragment)]) { s = 4;}
-
-
-                    [input seek:index38_1];
-                    if ( s >= 0 )
-                        return s;
-                     break;
-                case 1 : ;
-                    /* cyclicDFAState */
-                    NSInteger LA38_5 = [input LA:1];
-
-
-                    NSInteger index38_5 = [input getIndex];
-                    [input rewind];
-                    s = -1;
-                    /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred2_Fuzzy_fragment)]) { s = 6;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred4_Fuzzy_fragment)]) { s = 2;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred5_Fuzzy_fragment)]) { s = 3;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred7_Fuzzy_fragment)]) { s = 4;}
-
-
-                    [input seek:index38_5];
-                    if ( s >= 0 )
-                        return s;
-                     break;
-                case 2 : ;
-                    /* cyclicDFAState */
-                    NSInteger LA38_7 = [input LA:1];
-
-
-                    NSInteger index38_7 = [input getIndex];
-                    [input rewind];
-                    s = -1;
-                    /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred8_Fuzzy_fragment)]) { s = 8;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred9_Fuzzy_fragment)]) { s = 9;}
-
-
-                    [input seek:index38_7];
-                    if ( s >= 0 )
-                        return s;
-                     break;
-                case 3 : ;
-                    /* cyclicDFAState */
-                    NSInteger LA38_10 = [input LA:1];
-
-
-                    NSInteger index38_10 = [input getIndex];
-                    [input rewind];
-                    s = -1;
-                    /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred3_Fuzzy_fragment)]) { s = 11;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred4_Fuzzy_fragment)]) { s = 2;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred5_Fuzzy_fragment)]) { s = 3;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred7_Fuzzy_fragment)]) { s = 4;}
-
-
-                    [input seek:index38_10];
-                    if ( s >= 0 )
-                        return s;
-                     break;
-                case 4 : ;
-                    /* cyclicDFAState */
-                    NSInteger LA38_12 = [input LA:1];
-
-
-                    NSInteger index38_12 = [input getIndex];
-                    [input rewind];
-                    s = -1;
-                    /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred1_Fuzzy_fragment)]) { s = 13;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred4_Fuzzy_fragment)]) { s = 2;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred5_Fuzzy_fragment)]) { s = 3;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred6_Fuzzy_fragment)]) { s = 14;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred7_Fuzzy_fragment)]) { s = 4;}
-
-
-                    [input seek:index38_12];
-                    if ( s >= 0 )
-                        return s;
-                     break;
-                case 5 : ;
-                    /* cyclicDFAState */
-                    NSInteger LA38_16 = [input LA:1];
-
-
-                    NSInteger index38_16 = [input getIndex];
-                    [input rewind];
-                    s = -1;
-                    /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred4_Fuzzy_fragment)]) { s = 2;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred5_Fuzzy_fragment)]) { s = 3;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred6_Fuzzy_fragment)]) { s = 14;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred7_Fuzzy_fragment)]) { s = 4;}
-
-
-                    [input seek:index38_16];
-                    if ( s >= 0 )
-                        return s;
-                     break;
-    }
-    if ( [recognizer getBacktrackingLevel] > 0 ) { [recognizer setFailed:YES]; return -1; }
-    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:38 state:s stream:[recognizer getInput]];
-    /* [self error:nvae]; */
-    @throw nvae;
-}
-
-/* end dfa.specialStateSTs */
-- (void) dealloc
-{
-    free(transition);
-    [super dealloc];
-}
-
-- (NSString *) description
-{
-    return @"1:1: Tokens options {k=1; backtrack=true; } : ( IMPORT | RETURN | CLASS | METHOD | FIELD | STAT | CALL | COMMENT | SL_COMMENT | STRING | CHAR | WS );";
-}
-
-
-@end
-#pragma mark Cyclic DFA implementation end DFA38
-
-
-
-/** As per Terence: No returns for lexer rules!
-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
-*/
-@implementation Fuzzy // line 330
-
-+ (void) initialize
-{
-    [ANTLRBaseRecognizer setGrammarFileName:@"/usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g"];
-}
-
-+ (NSString *) tokenNameForType:(NSInteger)aTokenType
-{
-    return [[self getTokenNames] objectAtIndex:aTokenType];
-}
-
-+ (Fuzzy *)newFuzzy:(id<ANTLRCharStream>)anInput
-{
-    return [[Fuzzy alloc] initWithCharStream:anInput];
-}
-
-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
-{
-    if ((self = [super initWithCharStream:anInput State:[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:30+1]]) != nil) {
-        SEL synpred9_FuzzySelector = @selector(synpred9_Fuzzy_fragment);
-
-        SEL synpred2_FuzzySelector = @selector(synpred2_Fuzzy_fragment);
-
-        SEL synpred7_FuzzySelector = @selector(synpred7_Fuzzy_fragment);
-
-        SEL synpred4_FuzzySelector = @selector(synpred4_Fuzzy_fragment);
-
-        SEL synpred8_FuzzySelector = @selector(synpred8_Fuzzy_fragment);
-
-        SEL synpred6_FuzzySelector = @selector(synpred6_Fuzzy_fragment);
-
-        SEL synpred5_FuzzySelector = @selector(synpred5_Fuzzy_fragment);
-
-        SEL synpred3_FuzzySelector = @selector(synpred3_Fuzzy_fragment);
-
-        SEL synpred1_FuzzySelector = @selector(synpred1_Fuzzy_fragment);
-
-        dfa38 = [DFA38 newDFA38WithRecognizer:self];
-    }
-    return self;
-}
-
-- (void) dealloc
-{
-    [dfa38 release];
-    [super dealloc];
-}
-
-// Start of actions.lexer.methods
-// start methods()
-
-- (id<ANTLRToken>) nextToken
-{
-    while (YES) {
-        if ( [input LA:1] == ANTLRCharStreamEOF ) {
-            return [ANTLRCommonToken eofToken]; // should really be a +eofToken call here -> go figure
-        }
-        state.token = nil;
-        state.channel = ANTLRTokenChannelDefault;
-        state.tokenStartCharIndex = [input getIndex];
-        state.tokenStartCharPositionInLine = [input getCharPositionInLine];
-        state.tokenStartLine = [input getLine];
-        state.text = nil;
-        @try {
-            NSInteger m = [input mark];
-            state.backtracking = 1; /* means we won't throw slow exception */
-            state.failed = NO;
-            [self mTokens];
-            state.backtracking = 0;
-            /* mTokens backtracks with synpred at backtracking==2
-               and we set the synpredgate to allow actions at level 1. */
-            if ( state.failed == YES ) {
-                [input rewind:m];
-                [input consume]; /* advance one char and try again */
-            } else {
-                [self emit];
-                return state.token;
-            }
-        }
-        @catch (ANTLRRecognitionException *re) {
-            // shouldn't happen in backtracking mode, but...
-            [self reportError:re];
-            [self recover:re];
-        }
-    }
-}
-
-- (void)memoize:(id<ANTLRIntStream>)anInput
-      RuleIndex:(NSInteger)ruleIndex
-     StartIndex:(NSInteger)ruleStartIndex
-{
-    if ( state.backtracking > 1 ) [super memoize:anInput RuleIndex:ruleIndex StartIndex:ruleStartIndex];
-}
-
-- (BOOL)alreadyParsedRule:(id<ANTLRIntStream>)anInput RuleIndex:(NSInteger)ruleIndex
-{
-    if ( state.backtracking > 1 ) return [super alreadyParsedRule:anInput RuleIndex:ruleIndex];
-    return NO;
-}
-// Start of Rules
-// $ANTLR start "IMPORT"
-- (void) mIMPORT
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = IMPORT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        id<ANTLRToken> name=nil;
-
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:5:2: ( 'import' WS name= QIDStar ( WS )? ';' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:5:4: 'import' WS name= QIDStar ( WS )? ';' // alt
-        {
-        [self matchString:@"import"]; if ( state.failed == YES ) return ;
-          /* element() */
-            [self mWS]; if ( state.failed == YES ) return ;
-          /* element() */
-        NSInteger nameStart31 = [self getIndex];
-        [self mQIDStar]; if ( state.failed == YES ) return ;
-
-        name = [[ANTLRCommonToken newANTLRCommonToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart31 Stop:[self getIndex]-1] retain];
-        [name setLine:[self getLine]];  /* element() */
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:5:29: ( WS )? // block
-        NSInteger alt1=2;
-        NSInteger LA1_0 = [input LA:1];
-
-        if ( ((LA1_0>='\t' && LA1_0<='\n')||LA1_0==' ') ) {
-            alt1=1;
-        }
-        switch (alt1) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:5:29: WS // alt
-                {
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-        [self matchChar:';']; if ( state.failed == YES ) return ;
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "IMPORT"
-
-// $ANTLR start "RETURN"
-- (void) mRETURN
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = RETURN;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:10:2: ( 'return' ( options {greedy=false; } : . )* ';' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:10:4: 'return' ( options {greedy=false; } : . )* ';' // alt
-        {
-        [self matchString:@"return"]; if ( state.failed == YES ) return ;
-          /* element() */
-        do {
-            NSInteger alt2=2;
-            NSInteger LA2_0 = [input LA:1];
-            if ( (LA2_0==';') ) {
-                alt2=2;
-            }
-            else if ( ((LA2_0>=0x0000 && LA2_0<=':')||(LA2_0>='<' && LA2_0<=0xFFFF)) ) {
-                alt2=1;
-            }
-
-
-            switch (alt2) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:10:38: . // alt
-                    {
-                    [self matchAny]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop2;
-            }
-        } while (YES);
-        loop2: ;
-          /* element() */
-        [self matchChar:';']; if ( state.failed == YES ) return ;
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "RETURN"
-
-// $ANTLR start "CLASS"
-- (void) mCLASS
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = CLASS;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        id<ANTLRToken> name=nil;
-
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:14:2: ( 'class' WS name= ID ( WS )? ( 'extends' WS QID ( WS )? )? ( 'implements' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? '{' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:14:4: 'class' WS name= ID ( WS )? ( 'extends' WS QID ( WS )? )? ( 'implements' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? '{' // alt
-        {
-        [self matchString:@"class"]; if ( state.failed == YES ) return ;
-          /* element() */
-            [self mWS]; if ( state.failed == YES ) return ;
-          /* element() */
-        NSInteger nameStart81 = [self getIndex];
-        [self mID]; if ( state.failed == YES ) return ;
-
-        name = [[ANTLRCommonToken newANTLRCommonToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart81 Stop:[self getIndex]-1] retain];
-        [name setLine:[self getLine]];  /* element() */
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:14:23: ( WS )? // block
-        NSInteger alt3=2;
-        NSInteger LA3_0 = [input LA:1];
-
-        if ( ((LA3_0>='\t' && LA3_0<='\n')||LA3_0==' ') ) {
-            alt3=1;
-        }
-        switch (alt3) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:14:23: WS // alt
-                {
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:14:27: ( 'extends' WS QID ( WS )? )? // block
-        NSInteger alt5=2;
-        NSInteger LA5_0 = [input LA:1];
-
-        if ( (LA5_0=='e') ) {
-            alt5=1;
-        }
-        switch (alt5) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:14:28: 'extends' WS QID ( WS )? // alt
-                {
-                [self matchString:@"extends"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                    [self mQID]; if ( state.failed == YES ) return ;
-                  /* element() */
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:14:45: ( WS )? // block
-                NSInteger alt4=2;
-                NSInteger LA4_0 = [input LA:1];
-
-                if ( ((LA4_0>='\t' && LA4_0<='\n')||LA4_0==' ') ) {
-                    alt4=1;
-                }
-                switch (alt4) {
-                    case 1 : ;
-                        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:14:45: WS // alt
-                        {
-                            [self mWS]; if ( state.failed == YES ) return ;
-                          /* element() */
-                         /* elements */
-                        }
-                        break;
-
-                }
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:15:3: ( 'implements' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? // block
-        NSInteger alt10=2;
-        NSInteger LA10_0 = [input LA:1];
-
-        if ( (LA10_0=='i') ) {
-            alt10=1;
-        }
-        switch (alt10) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:15:4: 'implements' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* // alt
-                {
-                [self matchString:@"implements"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                    [self mQID]; if ( state.failed == YES ) return ;
-                  /* element() */
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:15:24: ( WS )? // block
-                NSInteger alt6=2;
-                NSInteger LA6_0 = [input LA:1];
-
-                if ( ((LA6_0>='\t' && LA6_0<='\n')||LA6_0==' ') ) {
-                    alt6=1;
-                }
-                switch (alt6) {
-                    case 1 : ;
-                        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:15:24: WS // alt
-                        {
-                            [self mWS]; if ( state.failed == YES ) return ;
-                          /* element() */
-                         /* elements */
-                        }
-                        break;
-
-                }
-                  /* element() */
-                do {
-                    NSInteger alt9=2;
-                    NSInteger LA9_0 = [input LA:1];
-                    if ( (LA9_0==',') ) {
-                        alt9=1;
-                    }
-
-
-                    switch (alt9) {
-                        case 1 : ;
-                            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:15:29: ',' ( WS )? QID ( WS )? // alt
-                            {
-                            [self matchChar:',']; if ( state.failed == YES ) return ;
-                              /* element() */
-                            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:15:33: ( WS )? // block
-                            NSInteger alt7=2;
-                            NSInteger LA7_0 = [input LA:1];
-
-                            if ( ((LA7_0>='\t' && LA7_0<='\n')||LA7_0==' ') ) {
-                                alt7=1;
-                            }
-                            switch (alt7) {
-                                case 1 : ;
-                                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:15:33: WS // alt
-                                    {
-                                        [self mWS]; if ( state.failed == YES ) return ;
-                                      /* element() */
-                                     /* elements */
-                                    }
-                                    break;
-
-                            }
-                              /* element() */
-                                [self mQID]; if ( state.failed == YES ) return ;
-                              /* element() */
-                            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:15:41: ( WS )? // block
-                            NSInteger alt8=2;
-                            NSInteger LA8_0 = [input LA:1];
-
-                            if ( ((LA8_0>='\t' && LA8_0<='\n')||LA8_0==' ') ) {
-                                alt8=1;
-                            }
-                            switch (alt8) {
-                                case 1 : ;
-                                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:15:41: WS // alt
-                                    {
-                                        [self mWS]; if ( state.failed == YES ) return ;
-                                      /* element() */
-                                     /* elements */
-                                    }
-                                    break;
-
-                            }
-                              /* element() */
-                             /* elements */
-                            }
-                            break;
-
-                        default :
-                            goto loop9;
-                    }
-                } while (YES);
-                loop9: ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-        [self matchChar:'{']; if ( state.failed == YES ) return ;
-          /* element() */
-        if ( state.backtracking == 1 ) {
-            NSLog(@"found class %@", (name!=nil?[name getText]:0));
-        }  /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "CLASS"
-
-// $ANTLR start "METHOD"
-- (void) mMETHOD
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = METHOD;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        id<ANTLRToken> name=nil;
-
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:20:5: ( TYPE WS name= ID ( WS )? '(' ( ARG ( WS )? ( ',' ( WS )? ARG ( WS )? )* )? ')' ( WS )? ( 'throws' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? '{' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:20:9: TYPE WS name= ID ( WS )? '(' ( ARG ( WS )? ( ',' ( WS )? ARG ( WS )? )* )? ')' ( WS )? ( 'throws' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? '{' // alt
-        {
-            [self mTYPE]; if ( state.failed == YES ) return ;
-          /* element() */
-            [self mWS]; if ( state.failed == YES ) return ;
-          /* element() */
-        NSInteger nameStart158 = [self getIndex];
-        [self mID]; if ( state.failed == YES ) return ;
-
-        name = [[ANTLRCommonToken newANTLRCommonToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart158 Stop:[self getIndex]-1] retain];
-        [name setLine:[self getLine]];  /* element() */
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:20:25: ( WS )? // block
-        NSInteger alt11=2;
-        NSInteger LA11_0 = [input LA:1];
-
-        if ( ((LA11_0>='\t' && LA11_0<='\n')||LA11_0==' ') ) {
-            alt11=1;
-        }
-        switch (alt11) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:20:25: WS // alt
-                {
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-        [self matchChar:'(']; if ( state.failed == YES ) return ;
-          /* element() */
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:20:33: ( ARG ( WS )? ( ',' ( WS )? ARG ( WS )? )* )? // block
-        NSInteger alt16=2;
-        NSInteger LA16_0 = [input LA:1];
-
-        if ( ((LA16_0>='A' && LA16_0<='Z')||LA16_0=='_'||(LA16_0>='a' && LA16_0<='z')) ) {
-            alt16=1;
-        }
-        switch (alt16) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:20:35: ARG ( WS )? ( ',' ( WS )? ARG ( WS )? )* // alt
-                {
-                    [self mARG]; if ( state.failed == YES ) return ;
-                  /* element() */
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:20:39: ( WS )? // block
-                NSInteger alt12=2;
-                NSInteger LA12_0 = [input LA:1];
-
-                if ( ((LA12_0>='\t' && LA12_0<='\n')||LA12_0==' ') ) {
-                    alt12=1;
-                }
-                switch (alt12) {
-                    case 1 : ;
-                        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:20:39: WS // alt
-                        {
-                            [self mWS]; if ( state.failed == YES ) return ;
-                          /* element() */
-                         /* elements */
-                        }
-                        break;
-
-                }
-                  /* element() */
-                do {
-                    NSInteger alt15=2;
-                    NSInteger LA15_0 = [input LA:1];
-                    if ( (LA15_0==',') ) {
-                        alt15=1;
-                    }
-
-
-                    switch (alt15) {
-                        case 1 : ;
-                            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:20:44: ',' ( WS )? ARG ( WS )? // alt
-                            {
-                            [self matchChar:',']; if ( state.failed == YES ) return ;
-                              /* element() */
-                            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:20:48: ( WS )? // block
-                            NSInteger alt13=2;
-                            NSInteger LA13_0 = [input LA:1];
-
-                            if ( ((LA13_0>='\t' && LA13_0<='\n')||LA13_0==' ') ) {
-                                alt13=1;
-                            }
-                            switch (alt13) {
-                                case 1 : ;
-                                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:20:48: WS // alt
-                                    {
-                                        [self mWS]; if ( state.failed == YES ) return ;
-                                      /* element() */
-                                     /* elements */
-                                    }
-                                    break;
-
-                            }
-                              /* element() */
-                                [self mARG]; if ( state.failed == YES ) return ;
-                              /* element() */
-                            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:20:56: ( WS )? // block
-                            NSInteger alt14=2;
-                            NSInteger LA14_0 = [input LA:1];
-
-                            if ( ((LA14_0>='\t' && LA14_0<='\n')||LA14_0==' ') ) {
-                                alt14=1;
-                            }
-                            switch (alt14) {
-                                case 1 : ;
-                                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:20:56: WS // alt
-                                    {
-                                        [self mWS]; if ( state.failed == YES ) return ;
-                                      /* element() */
-                                     /* elements */
-                                    }
-                                    break;
-
-                            }
-                              /* element() */
-                             /* elements */
-                            }
-                            break;
-
-                        default :
-                            goto loop15;
-                    }
-                } while (YES);
-                loop15: ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-        [self matchChar:')']; if ( state.failed == YES ) return ;
-          /* element() */
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:20:69: ( WS )? // block
-        NSInteger alt17=2;
-        NSInteger LA17_0 = [input LA:1];
-
-        if ( ((LA17_0>='\t' && LA17_0<='\n')||LA17_0==' ') ) {
-            alt17=1;
-        }
-        switch (alt17) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:20:69: WS // alt
-                {
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:21:8: ( 'throws' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? // block
-        NSInteger alt22=2;
-        NSInteger LA22_0 = [input LA:1];
-
-        if ( (LA22_0=='t') ) {
-            alt22=1;
-        }
-        switch (alt22) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:21:9: 'throws' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* // alt
-                {
-                [self matchString:@"throws"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                    [self mQID]; if ( state.failed == YES ) return ;
-                  /* element() */
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:21:25: ( WS )? // block
-                NSInteger alt18=2;
-                NSInteger LA18_0 = [input LA:1];
-
-                if ( ((LA18_0>='\t' && LA18_0<='\n')||LA18_0==' ') ) {
-                    alt18=1;
-                }
-                switch (alt18) {
-                    case 1 : ;
-                        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:21:25: WS // alt
-                        {
-                            [self mWS]; if ( state.failed == YES ) return ;
-                          /* element() */
-                         /* elements */
-                        }
-                        break;
-
-                }
-                  /* element() */
-                do {
-                    NSInteger alt21=2;
-                    NSInteger LA21_0 = [input LA:1];
-                    if ( (LA21_0==',') ) {
-                        alt21=1;
-                    }
-
-
-                    switch (alt21) {
-                        case 1 : ;
-                            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:21:30: ',' ( WS )? QID ( WS )? // alt
-                            {
-                            [self matchChar:',']; if ( state.failed == YES ) return ;
-                              /* element() */
-                            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:21:34: ( WS )? // block
-                            NSInteger alt19=2;
-                            NSInteger LA19_0 = [input LA:1];
-
-                            if ( ((LA19_0>='\t' && LA19_0<='\n')||LA19_0==' ') ) {
-                                alt19=1;
-                            }
-                            switch (alt19) {
-                                case 1 : ;
-                                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:21:34: WS // alt
-                                    {
-                                        [self mWS]; if ( state.failed == YES ) return ;
-                                      /* element() */
-                                     /* elements */
-                                    }
-                                    break;
-
-                            }
-                              /* element() */
-                                [self mQID]; if ( state.failed == YES ) return ;
-                              /* element() */
-                            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:21:42: ( WS )? // block
-                            NSInteger alt20=2;
-                            NSInteger LA20_0 = [input LA:1];
-
-                            if ( ((LA20_0>='\t' && LA20_0<='\n')||LA20_0==' ') ) {
-                                alt20=1;
-                            }
-                            switch (alt20) {
-                                case 1 : ;
-                                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:21:42: WS // alt
-                                    {
-                                        [self mWS]; if ( state.failed == YES ) return ;
-                                      /* element() */
-                                     /* elements */
-                                    }
-                                    break;
-
-                            }
-                              /* element() */
-                             /* elements */
-                            }
-                            break;
-
-                        default :
-                            goto loop21;
-                    }
-                } while (YES);
-                loop21: ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-        [self matchChar:'{']; if ( state.failed == YES ) return ;
-          /* element() */
-        if ( state.backtracking == 1 ) {
-            NSLog(@"found method %@", (name!=nil?[name getText]:0));
-        }  /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "METHOD"
-
-// $ANTLR start "FIELD"
-- (void) mFIELD
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = FIELD;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        id<ANTLRToken> name=nil;
-
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:26:5: ( TYPE WS name= ID ( '[]' )? ( WS )? ( ';' | '=' ) ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:26:9: TYPE WS name= ID ( '[]' )? ( WS )? ( ';' | '=' ) // alt
-        {
-            [self mTYPE]; if ( state.failed == YES ) return ;
-          /* element() */
-            [self mWS]; if ( state.failed == YES ) return ;
-          /* element() */
-        NSInteger nameStart261 = [self getIndex];
-        [self mID]; if ( state.failed == YES ) return ;
-
-        name = [[ANTLRCommonToken newANTLRCommonToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart261 Stop:[self getIndex]-1] retain];
-        [name setLine:[self getLine]];  /* element() */
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:26:25: ( '[]' )? // block
-        NSInteger alt23=2;
-        NSInteger LA23_0 = [input LA:1];
-
-        if ( (LA23_0=='[') ) {
-            alt23=1;
-        }
-        switch (alt23) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:26:25: '[]' // alt
-                {
-                [self matchString:@"[]"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:26:31: ( WS )? // block
-        NSInteger alt24=2;
-        NSInteger LA24_0 = [input LA:1];
-
-        if ( ((LA24_0>='\t' && LA24_0<='\n')||LA24_0==' ') ) {
-            alt24=1;
-        }
-        switch (alt24) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:26:31: WS // alt
-                {
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-        if ([input LA:1] == ';'||[input LA:1] == '=') {
-            [input consume];
-        state.failed = NO;
-
-        } else {
-            if ( state.backtracking > 0 ) { state.failed = YES; return ; }
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
-            [self recover:mse];
-            @throw mse;}
-          /* element() */
-        if ( state.backtracking == 1 ) {
-            NSLog(@"found var %@", (name!=nil?[name getText]:0));
-        }  /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "FIELD"
-
-// $ANTLR start "STAT"
-- (void) mSTAT
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = STAT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:30:5: ( ( 'if' | 'while' | 'switch' | 'for' ) ( WS )? '(' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:30:7: ( 'if' | 'while' | 'switch' | 'for' ) ( WS )? '(' // alt
-        {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:30:7: ( 'if' | 'while' | 'switch' | 'for' ) // block
-        NSInteger alt25=4;
-        switch ([input LA:1]) {
-            case 'i': ;
-                {
-                alt25=1;
-                }
-                break;
-            case 'w': ;
-                {
-                alt25=2;
-                }
-                break;
-            case 's': ;
-                {
-                alt25=3;
-                }
-                break;
-            case 'f': ;
-                {
-                alt25=4;
-                }
-                break;
-
-        default: ;
-            if ( state.backtracking > 0 ) { state.failed = YES; return ; }
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:25 state:0 stream:input];
-            @throw nvae;
-        }
-
-        switch (alt25) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:30:8: 'if' // alt
-                {
-                [self matchString:@"if"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-            case 2 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:30:13: 'while' // alt
-                {
-                [self matchString:@"while"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-            case 3 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:30:21: 'switch' // alt
-                {
-                [self matchString:@"switch"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-            case 4 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:30:30: 'for' // alt
-                {
-                [self matchString:@"for"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:30:37: ( WS )? // block
-        NSInteger alt26=2;
-        NSInteger LA26_0 = [input LA:1];
-
-        if ( ((LA26_0>='\t' && LA26_0<='\n')||LA26_0==' ') ) {
-            alt26=1;
-        }
-        switch (alt26) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:30:37: WS // alt
-                {
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-        [self matchChar:'(']; if ( state.failed == YES ) return ;
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "STAT"
-
-// $ANTLR start "CALL"
-- (void) mCALL
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = CALL;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        id<ANTLRToken> name=nil;
-
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:33:5: (name= QID ( WS )? '(' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:33:9: name= QID ( WS )? '(' // alt
-        {
-        NSInteger nameStart326 = [self getIndex];
-        [self mQID]; if ( state.failed == YES ) return ;
-
-        name = [[ANTLRCommonToken newANTLRCommonToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart326 Stop:[self getIndex]-1] retain];
-        [name setLine:[self getLine]];  /* element() */
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:33:18: ( WS )? // block
-        NSInteger alt27=2;
-        NSInteger LA27_0 = [input LA:1];
-
-        if ( ((LA27_0>='\t' && LA27_0<='\n')||LA27_0==' ') ) {
-            alt27=1;
-        }
-        switch (alt27) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:33:18: WS // alt
-                {
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-        [self matchChar:'(']; if ( state.failed == YES ) return ;
-          /* element() */
-        if ( state.backtracking == 1 ) {
-            /*ignore if this/super */ NSLog(@"found call %@",(name!=nil?[name getText]:0));
-        }  /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "CALL"
-
-// $ANTLR start "COMMENT"
-- (void) mCOMMENT
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = COMMENT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:38:5: ( '/*' ( options {greedy=false; } : . )* '*/' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:38:9: '/*' ( options {greedy=false; } : . )* '*/' // alt
-        {
-        [self matchString:@"/*"]; if ( state.failed == YES ) return ;
-          /* element() */
-        do {
-            NSInteger alt28=2;
-            NSInteger LA28_0 = [input LA:1];
-            if ( (LA28_0=='*') ) {
-                NSInteger LA28_1 = [input LA:2];
-                if ( (LA28_1=='/') ) {
-                    alt28=2;
-                }
-                else if ( ((LA28_1>=0x0000 && LA28_1<='.')||(LA28_1>='0' && LA28_1<=0xFFFF)) ) {
-                    alt28=1;
-                }
-
-
-            }
-            else if ( ((LA28_0>=0x0000 && LA28_0<=')')||(LA28_0>='+' && LA28_0<=0xFFFF)) ) {
-                alt28=1;
-            }
-
-
-            switch (alt28) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:38:41: . // alt
-                    {
-                    [self matchAny]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop28;
-            }
-        } while (YES);
-        loop28: ;
-          /* element() */
-        [self matchString:@"*/"]; if ( state.failed == YES ) return ;
-          /* element() */
-        if ( state.backtracking == 1 ) {
-            NSLog(@"found comment %@", [self getText]);
-        }  /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "COMMENT"
-
-// $ANTLR start "SL_COMMENT"
-- (void) mSL_COMMENT
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = SL_COMMENT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:43:5: ( '//' ( options {greedy=false; } : . )* '\\n' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:43:9: '//' ( options {greedy=false; } : . )* '\\n' // alt
-        {
-        [self matchString:@"//"]; if ( state.failed == YES ) return ;
-          /* element() */
-        do {
-            NSInteger alt29=2;
-            NSInteger LA29_0 = [input LA:1];
-            if ( (LA29_0=='\n') ) {
-                alt29=2;
-            }
-            else if ( ((LA29_0>=0x0000 && LA29_0<='\t')||(LA29_0>=0x000B && LA29_0<=0xFFFF)) ) {
-                alt29=1;
-            }
-
-
-            switch (alt29) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:43:41: . // alt
-                    {
-                    [self matchAny]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop29;
-            }
-        } while (YES);
-        loop29: ;
-          /* element() */
-        [self matchChar:'\n']; if ( state.failed == YES ) return ;
-          /* element() */
-        if ( state.backtracking == 1 ) {
-            NSLog(@"found // comment %@", [self getText]);
-        }  /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "SL_COMMENT"
-
-// $ANTLR start "STRING"
-- (void) mSTRING
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = STRING;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:48:2: ( '\"' ( options {greedy=false; } : ESC | . )* '\"' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:48:4: '\"' ( options {greedy=false; } : ESC | . )* '\"' // alt
-        {
-        [self matchChar:'"']; if ( state.failed == YES ) return ;
-          /* element() */
-        do {
-            NSInteger alt30=3;
-            NSInteger LA30_0 = [input LA:1];
-            if ( (LA30_0=='"') ) {
-                alt30=3;
-            }
-            else if ( (LA30_0=='\\') ) {
-                NSInteger LA30_2 = [input LA:2];
-                if ( (LA30_2=='"') ) {
-                    alt30=1;
-                }
-                else if ( (LA30_2=='\\') ) {
-                    alt30=1;
-                }
-                else if ( (LA30_2=='\'') ) {
-                    alt30=1;
-                }
-                else if ( ((LA30_2>=0x0000 && LA30_2<='!')||(LA30_2>='#' && LA30_2<='&')||(LA30_2>='(' && LA30_2<='[')||(LA30_2>=']' && LA30_2<=0xFFFF)) ) {
-                    alt30=2;
-                }
-
-
-            }
-            else if ( ((LA30_0>=0x0000 && LA30_0<='!')||(LA30_0>='#' && LA30_0<='[')||(LA30_0>=']' && LA30_0<=0xFFFF)) ) {
-                alt30=2;
-            }
-
-
-            switch (alt30) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:48:34: ESC // alt
-                    {
-                        [self mESC]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-                case 2 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:48:40: . // alt
-                    {
-                    [self matchAny]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop30;
-            }
-        } while (YES);
-        loop30: ;
-          /* element() */
-        [self matchChar:'"']; if ( state.failed == YES ) return ;
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "STRING"
-
-// $ANTLR start "CHAR"
-- (void) mCHAR
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = CHAR;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:52:2: ( '\\'' ( options {greedy=false; } : ESC | . )* '\\'' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:52:4: '\\'' ( options {greedy=false; } : ESC | . )* '\\'' // alt
-        {
-        [self matchChar:'\'']; if ( state.failed == YES ) return ;
-          /* element() */
-        do {
-            NSInteger alt31=3;
-            NSInteger LA31_0 = [input LA:1];
-            if ( (LA31_0=='\'') ) {
-                alt31=3;
-            }
-            else if ( (LA31_0=='\\') ) {
-                NSInteger LA31_2 = [input LA:2];
-                if ( (LA31_2=='\'') ) {
-                    alt31=1;
-                }
-                else if ( (LA31_2=='\\') ) {
-                    alt31=1;
-                }
-                else if ( (LA31_2=='"') ) {
-                    alt31=1;
-                }
-                else if ( ((LA31_2>=0x0000 && LA31_2<='!')||(LA31_2>='#' && LA31_2<='&')||(LA31_2>='(' && LA31_2<='[')||(LA31_2>=']' && LA31_2<=0xFFFF)) ) {
-                    alt31=2;
-                }
-
-
-            }
-            else if ( ((LA31_0>=0x0000 && LA31_0<='&')||(LA31_0>='(' && LA31_0<='[')||(LA31_0>=']' && LA31_0<=0xFFFF)) ) {
-                alt31=2;
-            }
-
-
-            switch (alt31) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:52:35: ESC // alt
-                    {
-                        [self mESC]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-                case 2 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:52:41: . // alt
-                    {
-                    [self matchAny]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop31;
-            }
-        } while (YES);
-        loop31: ;
-          /* element() */
-        [self matchChar:'\'']; if ( state.failed == YES ) return ;
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "CHAR"
-
-// $ANTLR start "WS"
-- (void) mWS
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = WS;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:55:5: ( ( ' ' | '\\t' | '\\n' )+ ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:55:9: ( ' ' | '\\t' | '\\n' )+ // alt
-        {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:55:9: ( ' ' | '\\t' | '\\n' )+ // positiveClosureBlock
-        NSInteger cnt32=0;
-        do {
-            NSInteger alt32=2;
-            NSInteger LA32_0 = [input LA:1];
-            if ( ((LA32_0>='\t' && LA32_0<='\n')||LA32_0==' ') ) {
-                alt32=1;
-            }
-
-
-            switch (alt32) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g: // alt
-                    {
-                    if ((([input LA:1] >= '\t') && ([input LA:1] <= '\n'))||[input LA:1] == ' ') {
-                        [input consume];
-                    state.failed = NO;
-
-                    } else {
-                        if ( state.backtracking > 0 ) { state.failed = YES; return ; }
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
-                        [self recover:mse];
-                        @throw mse;}
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    if ( cnt32 >= 1 )
-                        goto loop32;
-                    if ( state.backtracking > 0 ) { state.failed = YES; return ; }            ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:32];
-                    @throw eee;
-            }
-            cnt32++;
-        } while (YES);
-        loop32: ;
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "WS"
-
-// $ANTLR start "QID"
-- (void) mQID
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:59:5: ( ID ( '.' ID )* ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:59:7: ID ( '.' ID )* // alt
-        {
-            [self mID]; if ( state.failed == YES ) return ;
-          /* element() */
-        do {
-            NSInteger alt33=2;
-            NSInteger LA33_0 = [input LA:1];
-            if ( (LA33_0=='.') ) {
-                alt33=1;
-            }
-
-
-            switch (alt33) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:59:11: '.' ID // alt
-                    {
-                    [self matchChar:'.']; if ( state.failed == YES ) return ;
-                      /* element() */
-                        [self mID]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop33;
-            }
-        } while (YES);
-        loop33: ;
-          /* element() */
-         /* elements */
-        }
-
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "QID"
-
-// $ANTLR start "QIDStar"
-- (void) mQIDStar
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:68:2: ( ID ( '.' ID )* ( '.*' )? ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:68:4: ID ( '.' ID )* ( '.*' )? // alt
-        {
-            [self mID]; if ( state.failed == YES ) return ;
-          /* element() */
-        do {
-            NSInteger alt34=2;
-            NSInteger LA34_0 = [input LA:1];
-            if ( (LA34_0=='.') ) {
-                NSInteger LA34_1 = [input LA:2];
-                if ( ((LA34_1>='A' && LA34_1<='Z')||LA34_1=='_'||(LA34_1>='a' && LA34_1<='z')) ) {
-                    alt34=1;
-                }
-
-
-            }
-
-
-            switch (alt34) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:68:8: '.' ID // alt
-                    {
-                    [self matchChar:'.']; if ( state.failed == YES ) return ;
-                      /* element() */
-                        [self mID]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop34;
-            }
-        } while (YES);
-        loop34: ;
-          /* element() */
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:68:17: ( '.*' )? // block
-        NSInteger alt35=2;
-        NSInteger LA35_0 = [input LA:1];
-
-        if ( (LA35_0=='.') ) {
-            alt35=1;
-        }
-        switch (alt35) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:68:17: '.*' // alt
-                {
-                [self matchString:@".*"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-         /* elements */
-        }
-
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "QIDStar"
-
-// $ANTLR start "TYPE"
-- (void) mTYPE
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:72:5: ( QID ( '[]' )? ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:72:9: QID ( '[]' )? // alt
-        {
-            [self mQID]; if ( state.failed == YES ) return ;
-          /* element() */
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:72:13: ( '[]' )? // block
-        NSInteger alt36=2;
-        NSInteger LA36_0 = [input LA:1];
-
-        if ( (LA36_0=='[') ) {
-            alt36=1;
-        }
-        switch (alt36) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:72:13: '[]' // alt
-                {
-                [self matchString:@"[]"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-         /* elements */
-        }
-
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "TYPE"
-
-// $ANTLR start "ARG"
-- (void) mARG
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:76:5: ( TYPE WS ID ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:76:9: TYPE WS ID // alt
-        {
-            [self mTYPE]; if ( state.failed == YES ) return ;
-          /* element() */
-            [self mWS]; if ( state.failed == YES ) return ;
-          /* element() */
-            [self mID]; if ( state.failed == YES ) return ;
-          /* element() */
-         /* elements */
-        }
-
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "ARG"
-
-// $ANTLR start "ID"
-- (void) mID
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:80:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:80:9: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* // alt
-        {
-        if ((([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
-            [input consume];
-        state.failed = NO;
-
-        } else {
-            if ( state.backtracking > 0 ) { state.failed = YES; return ; }
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
-            [self recover:mse];
-            @throw mse;}
-          /* element() */
-        do {
-            NSInteger alt37=2;
-            NSInteger LA37_0 = [input LA:1];
-            if ( ((LA37_0>='0' && LA37_0<='9')||(LA37_0>='A' && LA37_0<='Z')||LA37_0=='_'||(LA37_0>='a' && LA37_0<='z')) ) {
-                alt37=1;
-            }
-
-
-            switch (alt37) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g: // alt
-                    {
-                    if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))||(([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
-                        [input consume];
-                    state.failed = NO;
-
-                    } else {
-                        if ( state.backtracking > 0 ) { state.failed = YES; return ; }
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
-                        [self recover:mse];
-                        @throw mse;}
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop37;
-            }
-        } while (YES);
-        loop37: ;
-          /* element() */
-         /* elements */
-        }
-
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "ID"
-
-// $ANTLR start "ESC"
-- (void) mESC
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:84:5: ( '\\\\' ( '\"' | '\\'' | '\\\\' ) ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:84:7: '\\\\' ( '\"' | '\\'' | '\\\\' ) // alt
-        {
-        [self matchChar:'\\']; if ( state.failed == YES ) return ;
-          /* element() */
-        if ([input LA:1] == '"'||[input LA:1] == '\''||[input LA:1] == '\\') {
-            [input consume];
-        state.failed = NO;
-
-        } else {
-            if ( state.backtracking > 0 ) { state.failed = YES; return ; }
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
-            [self recover:mse];
-            @throw mse;}
-          /* element() */
-         /* elements */
-        }
-
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "ESC"
-
-- (void) mTokens
-{
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:39: ( IMPORT | RETURN | CLASS | METHOD | FIELD | STAT | CALL | COMMENT | SL_COMMENT | STRING | CHAR | WS ) //ruleblock
-    NSInteger alt38=12;
-    alt38 = [dfa38 predict:input];
-    switch (alt38) {
-        case 1 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:41: IMPORT // alt
-            {
-                [self mIMPORT]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 2 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:48: RETURN // alt
-            {
-                [self mRETURN]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 3 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:55: CLASS // alt
-            {
-                [self mCLASS]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 4 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:61: METHOD // alt
-            {
-                [self mMETHOD]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 5 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:68: FIELD // alt
-            {
-                [self mFIELD]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 6 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:74: STAT // alt
-            {
-                [self mSTAT]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 7 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:79: CALL // alt
-            {
-                [self mCALL]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 8 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:84: COMMENT // alt
-            {
-                [self mCOMMENT]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 9 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:92: SL_COMMENT // alt
-            {
-                [self mSL_COMMENT]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 10 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:103: STRING // alt
-            {
-                [self mSTRING]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 11 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:110: CHAR // alt
-            {
-                [self mCHAR]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 12 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:115: WS // alt
-            {
-                [self mWS]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
-            }
-            break;
-
-    }
-
-}
-
-// $ANTLR start synpred1_Fuzzy_fragment
-- (void) synpred1_Fuzzy_fragment
-{
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:41: ( IMPORT ) // ruleBlockSingleAlt
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:41: IMPORT // alt
-    {
-        [self mIMPORT]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
-    }
-} // $ANTLR end synpred1_Fuzzy_fragment
-
-// $ANTLR start synpred2_Fuzzy_fragment
-- (void) synpred2_Fuzzy_fragment
-{
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:48: ( RETURN ) // ruleBlockSingleAlt
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:48: RETURN // alt
-    {
-        [self mRETURN]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
-    }
-} // $ANTLR end synpred2_Fuzzy_fragment
-
-// $ANTLR start synpred3_Fuzzy_fragment
-- (void) synpred3_Fuzzy_fragment
-{
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:55: ( CLASS ) // ruleBlockSingleAlt
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:55: CLASS // alt
-    {
-        [self mCLASS]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
-    }
-} // $ANTLR end synpred3_Fuzzy_fragment
-
-// $ANTLR start synpred4_Fuzzy_fragment
-- (void) synpred4_Fuzzy_fragment
-{
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:61: ( METHOD ) // ruleBlockSingleAlt
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:61: METHOD // alt
-    {
-        [self mMETHOD]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
-    }
-} // $ANTLR end synpred4_Fuzzy_fragment
-
-// $ANTLR start synpred5_Fuzzy_fragment
-- (void) synpred5_Fuzzy_fragment
-{
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:68: ( FIELD ) // ruleBlockSingleAlt
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:68: FIELD // alt
-    {
-        [self mFIELD]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
-    }
-} // $ANTLR end synpred5_Fuzzy_fragment
-
-// $ANTLR start synpred6_Fuzzy_fragment
-- (void) synpred6_Fuzzy_fragment
-{
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:74: ( STAT ) // ruleBlockSingleAlt
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:74: STAT // alt
-    {
-        [self mSTAT]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
-    }
-} // $ANTLR end synpred6_Fuzzy_fragment
-
-// $ANTLR start synpred7_Fuzzy_fragment
-- (void) synpred7_Fuzzy_fragment
-{
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:79: ( CALL ) // ruleBlockSingleAlt
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:79: CALL // alt
-    {
-        [self mCALL]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
-    }
-} // $ANTLR end synpred7_Fuzzy_fragment
-
-// $ANTLR start synpred8_Fuzzy_fragment
-- (void) synpred8_Fuzzy_fragment
-{
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:84: ( COMMENT ) // ruleBlockSingleAlt
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:84: COMMENT // alt
-    {
-        [self mCOMMENT]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
-    }
-} // $ANTLR end synpred8_Fuzzy_fragment
-
-// $ANTLR start synpred9_Fuzzy_fragment
-- (void) synpred9_Fuzzy_fragment
-{
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:92: ( SL_COMMENT ) // ruleBlockSingleAlt
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g:1:92: SL_COMMENT // alt
-    {
-        [self mSL_COMMENT]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
-    }
-} // $ANTLR end synpred9_Fuzzy_fragment
-
-@end // end of Fuzzy implementation // line 397
-
-/* End of code
- * =============================================================================
- */
diff --git a/runtime/ObjC/Framework/examples/fuzzy/output1/Fuzzy.tokens b/runtime/ObjC/Framework/examples/fuzzy/output1/Fuzzy.tokens
deleted file mode 100644
index 3a7034c..0000000
--- a/runtime/ObjC/Framework/examples/fuzzy/output1/Fuzzy.tokens
+++ /dev/null
@@ -1,18 +0,0 @@
-STAT=15
-CLASS=10
-ESC=19
-CHAR=21
-ID=8
-QID=9
-TYPE=11
-IMPORT=6
-WS=4
-ARG=12
-QIDStar=5
-SL_COMMENT=18
-RETURN=7
-FIELD=14
-CALL=16
-COMMENT=17
-METHOD=13
-STRING=20
diff --git a/runtime/ObjC/Framework/examples/fuzzy/output1/FuzzyLexer.h b/runtime/ObjC/Framework/examples/fuzzy/output1/FuzzyLexer.h
deleted file mode 100644
index 9a4b194..0000000
--- a/runtime/ObjC/Framework/examples/fuzzy/output1/FuzzyLexer.h
+++ /dev/null
@@ -1,87 +0,0 @@
-// $ANTLR 3.2 Aug 20, 2010 13:39:32 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/fuzzy/Fuzzy.g 2010-08-20 13:40:15
-
-/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
- */
-#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
-/* End of standard antlr3 runtime definitions
- * =============================================================================
- */
-
-/* Start cyclicDFAInterface */
-#pragma mark Cyclic DFA interface start DFA38
-@interface DFA38 : ANTLRDFA {
-}
-+ newDFA38WithRecognizer:(ANTLRBaseRecognizer *)theRecognizer;
-- initWithRecognizer:(ANTLRBaseRecognizer *)recognizer;
-@end
-
-#pragma mark Cyclic DFA interface end DFA38
-
-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
-#pragma mark Tokens
-#define STAT 15
-#define CLASS 10
-#define ESC 19
-#define CHAR 21
-#define ID 8
-#define EOF -1
-#define QID 9
-#define TYPE 11
-#define IMPORT 6
-#define WS 4
-#define ARG 12
-#define QIDStar 5
-#define SL_COMMENT 18
-#define RETURN 7
-#define FIELD 14
-#define CALL 16
-#define COMMENT 17
-#define METHOD 13
-#define STRING 20
-@interface Fuzzy : ANTLRLexer { // line 283
-    DFA38 *dfa38;
-    SEL synpred9_FuzzySelector;
-    SEL synpred2_FuzzySelector;
-    SEL synpred7_FuzzySelector;
-    SEL synpred4_FuzzySelector;
-    SEL synpred8_FuzzySelector;
-    SEL synpred6_FuzzySelector;
-    SEL synpred5_FuzzySelector;
-    SEL synpred3_FuzzySelector;
-    SEL synpred1_FuzzySelector;
-}
-+ (Fuzzy *)newFuzzy:(id<ANTLRCharStream>)anInput;
-
-- (void)mIMPORT;
-- (void)mRETURN;
-- (void)mCLASS;
-- (void)mMETHOD;
-- (void)mFIELD;
-- (void)mSTAT;
-- (void)mCALL;
-- (void)mCOMMENT;
-- (void)mSL_COMMENT;
-- (void)mSTRING;
-- (void)mCHAR;
-- (void)mWS;
-- (void)mQID;
-- (void)mQIDStar;
-- (void)mTYPE;
-- (void)mARG;
-- (void)mID;
-- (void)mESC;
-- (void)mTokens;
-- (void)synpred1_Fuzzy_fragment;
-- (void)synpred2_Fuzzy_fragment;
-- (void)synpred3_Fuzzy_fragment;
-- (void)synpred4_Fuzzy_fragment;
-- (void)synpred5_Fuzzy_fragment;
-- (void)synpred6_Fuzzy_fragment;
-- (void)synpred7_Fuzzy_fragment;
-- (void)synpred8_Fuzzy_fragment;
-- (void)synpred9_Fuzzy_fragment;
-
-@end // end of Fuzzy interface
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/examples/hoistedPredicates/TLexer.h b/runtime/ObjC/Framework/examples/hoistedPredicates/TLexer.h
index 9f5067d..76eb0b0 100644
--- a/runtime/ObjC/Framework/examples/hoistedPredicates/TLexer.h
+++ b/runtime/ObjC/Framework/examples/hoistedPredicates/TLexer.h
@@ -1,7 +1,7 @@
-// $ANTLR ${project.version} ${buildNumber} T.g 2011-05-06 19:14:23
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g 2012-02-16 17:34:26

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
#import <ANTLR/ANTLR.h>
@@ -11,8 +11,8 @@

/* Start cyclicDFAInterface */

-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
+#pragma mark Rule return scopes Interface start
+#pragma mark Rule return scopes Interface end
#pragma mark Tokens
#ifdef EOF
#undef EOF
@@ -23,12 +23,12 @@
#define INT 5
#define WS 6
/* interface lexer class */
-@interface TLexer : ANTLRLexer { // line 283
+@interface TLexer : Lexer { // line 283
/* ObjC start of actions.lexer.memVars */
/* ObjC end of actions.lexer.memVars */
}
+ (void) initialize;
-+ (TLexer *)newTLexerWithCharStream:(id<ANTLRCharStream>)anInput;
++ (TLexer *)newTLexerWithCharStream:(id<CharStream>)anInput;
/* ObjC start actions.lexer.methodsDecl */
/* ObjC end actions.lexer.methodsDecl */
- (void) mT__7 ;
diff --git a/runtime/ObjC/Framework/examples/hoistedPredicates/TLexer.m b/runtime/ObjC/Framework/examples/hoistedPredicates/TLexer.m
index b55e539..a19b3df 100644
--- a/runtime/ObjC/Framework/examples/hoistedPredicates/TLexer.m
+++ b/runtime/ObjC/Framework/examples/hoistedPredicates/TLexer.m
@@ -1,8 +1,8 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : T.g
- *     -                            On : 2011-05-06 19:14:23
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g
+ *     -                            On : 2012-02-16 17:34:26
*     -                 for the lexer : TLexerLexer
*
* Editing it, at least manually, is not wise.
@@ -11,7 +11,7 @@
*
*
*/
-// $ANTLR ${project.version} ${buildNumber} T.g 2011-05-06 19:14:23
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g 2012-02-16 17:34:26


/* -----------------------------------------
@@ -31,7 +31,7 @@

+ (void) initialize
{
-    [ANTLRBaseRecognizer setGrammarFileName:@"T.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g"];
}

+ (NSString *) tokenNameForType:(NSInteger)aTokenType
@@ -39,14 +39,14 @@
return [[self getTokenNames] objectAtIndex:aTokenType];
}

-+ (TLexer *)newTLexerWithCharStream:(id<ANTLRCharStream>)anInput
++ (TLexer *)newTLexerWithCharStream:(id<CharStream>)anInput
{
return [[TLexer alloc] initWithCharStream:anInput];
}

-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
+- (id) initWithCharStream:(id<CharStream>)anInput
{
-    self = [super initWithCharStream:anInput State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:5+1] retain]];
+    self = [super initWithCharStream:anInput State:[RecognizerSharedState newRecognizerSharedStateWithRuleLen:5+1]];
if ( self != nil ) {
}
return self;
@@ -67,56 +67,61 @@
- (void) mT__7
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__7;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // T.g:7:6: ( 'enum' ) // ruleBlockSingleAlt
-        // T.g:7:8: 'enum' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:7:6: ( 'enum' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:7:8: 'enum' // alt
{
-        [self matchString:@"enum"];


+        [self matchString:@"enum"];

+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__7" */
-
// $ANTLR start "ID"
- (void) mID
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = ID;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // T.g:37:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* ) // ruleBlockSingleAlt
-        // T.g:37:9: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:37:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:37:9: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* // alt
{
+
if ((([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
} else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

+

do {
NSInteger alt1=2;
@@ -128,17 +133,18 @@

switch (alt1) {
case 1 : ;
-                    // T.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g: // alt
{
+
if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))||(([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

@@ -148,37 +154,38 @@
} while (YES);
loop1: ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "ID" */
-
// $ANTLR start "INT"
- (void) mINT
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = INT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // T.g:40:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
-        // T.g:40:7: ( '0' .. '9' )+ // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:40:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:40:7: ( '0' .. '9' )+ // alt
{
-        // T.g:40:7: ( '0' .. '9' )+ // positiveClosureBlock
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:40:7: ( '0' .. '9' )+ // positiveClosureBlock
NSInteger cnt2 = 0;
do {
NSInteger alt2 = 2;
@@ -190,62 +197,64 @@

switch (alt2) {
case 1 : ;
-                    // T.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g: // alt
{
+
if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))) {
[input consume];
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

default :
if ( cnt2 >= 1 )
goto loop2;
-                    ANTLREarlyExitException *eee =
-                        [ANTLREarlyExitException newException:input decisionNumber:2];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:2];
@throw eee;
}
cnt2++;
} while (YES);
loop2: ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "INT" */
-
// $ANTLR start "WS"
- (void) mWS
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = WS;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // T.g:43:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ ) // ruleBlockSingleAlt
-        // T.g:43:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:43:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:43:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // alt
{
-        // T.g:43:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // positiveClosureBlock
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:43:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // positiveClosureBlock
NSInteger cnt3 = 0;
do {
NSInteger alt3 = 2;
@@ -257,54 +266,55 @@

switch (alt3) {
case 1 : ;
-                    // T.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g: // alt
{
+
if ((([input LA:1] >= '\t') && ([input LA:1] <= '\n'))||[input LA:1] == '\r'||[input LA:1] == ' ') {
[input consume];
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

default :
if ( cnt3 >= 1 )
goto loop3;
-                    ANTLREarlyExitException *eee =
-                        [ANTLREarlyExitException newException:input decisionNumber:3];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:3];
@throw eee;
}
cnt3++;
} while (YES);
loop3: ;

+

_channel=99;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "WS" */
-
- (void) mTokens
{
-    // T.g:1:8: ( T__7 | ID | INT | WS ) //ruleblock
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:1:8: ( T__7 | ID | INT | WS ) //ruleblock
NSInteger alt4=4;
unichar charLA4 = [input LA:1];
switch (charLA4) {
@@ -421,7 +431,7 @@
break;

default: ;
-        ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:4 state:0 stream:input];
+        NoViableAltException *nvae = [NoViableAltException newException:4 state:0 stream:input];
nvae.c = charLA4;
@throw nvae;

@@ -429,39 +439,47 @@

switch (alt4) {
case 1 : ;
-            // T.g:1:10: T__7 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:1:10: T__7 // alt
{
-            [self mT__7];


+            [self mT__7];
+

+
}
break;
case 2 : ;
-            // T.g:1:15: ID // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:1:15: ID // alt
{
-            [self mID];


+            [self mID];
+

+
}
break;
case 3 : ;
-            // T.g:1:18: INT // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:1:18: INT // alt
{
-            [self mINT];


+            [self mINT];
+

+
}
break;
case 4 : ;
-            // T.g:1:22: WS // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:1:22: WS // alt
{
-            [self mWS];


+            [self mWS];
+

+
}
break;

diff --git a/runtime/ObjC/Framework/examples/hoistedPredicates/TParser.h b/runtime/ObjC/Framework/examples/hoistedPredicates/TParser.h
index 898d0de..31dddec 100644
--- a/runtime/ObjC/Framework/examples/hoistedPredicates/TParser.h
+++ b/runtime/ObjC/Framework/examples/hoistedPredicates/TParser.h
@@ -1,7 +1,7 @@
-// $ANTLR ${project.version} ${buildNumber} T.g 2011-05-06 19:14:23
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g 2012-02-16 17:34:26

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
#import <ANTLR/ANTLR.h>
@@ -31,20 +31,16 @@ typedef enum {
#define ID 4
#define INT 5
#define WS 6
-#pragma mark Dynamic Global Scopes
-#pragma mark Dynamic Rule Scopes
-#pragma mark Rule Return Scopes start
+#pragma mark Dynamic Global Scopes globalAttributeScopeInterface
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeInterface
+#pragma mark Rule Return Scopes returnScopeInterface

/* Interface grammar class */
-@interface TParser : ANTLRParser { /* line 572 */
-/* ObjC start of ruleAttributeScopeMemVar */
+@interface TParser  : Parser { /* line 572 */
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeDecl
+#pragma mark Dynamic Global Rule Scopes globalAttributeScopeMemVar


-/* ObjC end of ruleAttributeScopeMemVar */
-/* ObjC start of globalAttributeScopeMemVar */
-
-
-/* ObjC end of globalAttributeScopeMemVar */
/* ObjC start of actions.(actionScope).memVars */

/* With this true, enum is seen as a keyword.  False, it's an identifier */
@@ -62,7 +58,7 @@ BOOL enableEnum;
/* ObjC end of properties */

+ (void) initialize;
-+ (id) newTParser:(id<ANTLRTokenStream>)aStream;
++ (id) newTParser:(id<TokenStream>)aStream;
/* ObjC start of actions.(actionScope).methodsDecl */
/* ObjC end of actions.(actionScope).methodsDecl */

diff --git a/runtime/ObjC/Framework/examples/hoistedPredicates/TParser.m b/runtime/ObjC/Framework/examples/hoistedPredicates/TParser.m
index e440290..2aae318 100644
--- a/runtime/ObjC/Framework/examples/hoistedPredicates/TParser.m
+++ b/runtime/ObjC/Framework/examples/hoistedPredicates/TParser.m
@@ -1,8 +1,8 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : T.g
- *     -                            On : 2011-05-06 19:14:23
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g
+ *     -                            On : 2012-02-16 17:34:26
*     -                for the parser : TParserParser
*
* Editing it, at least manually, is not wise.
@@ -11,7 +11,7 @@
*
*
*/
-// $ANTLR ${project.version} ${buildNumber} T.g 2011-05-06 19:14:23
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g 2012-02-16 17:34:26


/* -----------------------------------------
@@ -49,57 +49,47 @@ static ANTLRBitSet *FOLLOW_7_in_enumAsID100;
static const unsigned long long FOLLOW_7_in_enumAsID100_data[] = { 0x0000000000000002LL};


-#pragma mark Dynamic Global Scopes
+#pragma mark Dynamic Global globalAttributeScopeImplementation

-#pragma mark Dynamic Rule Scopes
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation

-#pragma mark Rule Return Scopes start
-//#pragma mark Rule return scopes start
-//
-
-#pragma mark Rule return scopes start
+#pragma mark Rule Return Scopes returnScopeImplementation

@implementation TParser  // line 637

/* ObjC start of ruleAttributeScope */
-#pragma mark Dynamic Rule Scopes
+#pragma mark Dynamic Rule Scopes ruleAttributeScope
/* ObjC end of ruleAttributeScope */
-#pragma mark global Attribute Scopes
+#pragma mark global Attribute Scopes globalAttributeScope
/* ObjC start globalAttributeScope */
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */
-/* ObjC end actions.(actionScope).synthesize */
/* ObjC start synthesize() */
-/* ObjC end synthesize() */

+ (void) initialize
{
#pragma mark Bitsets
-    FOLLOW_identifier_in_stat34 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_identifier_in_stat34_data Count:(NSUInteger)1] retain];
-    FOLLOW_enumAsKeyword_in_stat47 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_enumAsKeyword_in_stat47_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_identifier66 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_identifier66_data Count:(NSUInteger)1] retain];
-    FOLLOW_enumAsID_in_identifier74 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_enumAsID_in_identifier74_data Count:(NSUInteger)1] retain];
-    FOLLOW_7_in_enumAsKeyword89 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_enumAsKeyword89_data Count:(NSUInteger)1] retain];
-    FOLLOW_7_in_enumAsID100 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_enumAsID100_data Count:(NSUInteger)1] retain];
-
-    [ANTLRBaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
+    FOLLOW_identifier_in_stat34 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_identifier_in_stat34_data Count:(NSUInteger)1] retain];
+    FOLLOW_enumAsKeyword_in_stat47 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_enumAsKeyword_in_stat47_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_identifier66 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_identifier66_data Count:(NSUInteger)1] retain];
+    FOLLOW_enumAsID_in_identifier74 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_enumAsID_in_identifier74_data Count:(NSUInteger)1] retain];
+    FOLLOW_7_in_enumAsKeyword89 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_enumAsKeyword89_data Count:(NSUInteger)1] retain];
+    FOLLOW_7_in_enumAsID100 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_enumAsID100_data Count:(NSUInteger)1] retain];
+
+    [BaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
@"ID", @"INT", @"WS", @"'enum'", nil] retain]];
-    [ANTLRBaseRecognizer setGrammarFileName:@"T.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g"];
}

-+ (TParser *)newTParser:(id<ANTLRTokenStream>)aStream
++ (TParser *)newTParser:(id<TokenStream>)aStream
{
return [[TParser alloc] initWithTokenStream:aStream];
-
-
}

-- (id) initWithTokenStream:(id<ANTLRTokenStream>)aStream
+- (id) initWithTokenStream:(id<TokenStream>)aStream
{
-    self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:4+1] retain]];
+    self = [super initWithTokenStream:aStream State:[[RecognizerSharedState newRecognizerSharedStateWithRuleLen:4+1] retain]];
if ( self != nil ) {
-
-
/* start of actions-actionScope-init */

enableEnum = NO;
@@ -114,8 +104,6 @@ static const unsigned long long FOLLOW_7_in_enumAsID100_data[] = { 0x00000000000
[super dealloc];
}

-/* ObjC start members */
-/* ObjC end members */
/* ObjC start actions.(actionScope).methods */
/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
@@ -123,15 +111,19 @@ static const unsigned long long FOLLOW_7_in_enumAsID100_data[] = { 0x00000000000
/* ObjC start rules */
/*
* $ANTLR start stat
- * T.g:24:1: stat : ( identifier | enumAsKeyword );
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:24:1: stat : ( identifier | enumAsKeyword );
*/
- (void) stat
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // T.g:24:5: ( identifier | enumAsKeyword ) //ruleblock
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:24:5: ( identifier | enumAsKeyword ) //ruleblock
NSInteger alt1=2;
NSInteger LA1_0 = [input LA:1];

@@ -148,22 +140,23 @@ static const unsigned long long FOLLOW_7_in_enumAsID100_data[] = { 0x00000000000
alt1=2;
}
else {
-                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:1 state:2 stream:input];
+                NoViableAltException *nvae = [NoViableAltException newException:1 state:2 stream:input];
nvae.c = LA1_2;
@throw nvae;

}
}
else {
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:1 state:0 stream:input];
+            NoViableAltException *nvae = [NoViableAltException newException:1 state:0 stream:input];
nvae.c = LA1_0;
@throw nvae;

}
switch (alt1) {
case 1 : ;
-                // T.g:24:7: identifier // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:24:7: identifier // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_identifier_in_stat34];
[self identifier];
@@ -171,15 +164,17 @@ static const unsigned long long FOLLOW_7_in_enumAsID100_data[] = { 0x00000000000
[self popFollow];


+

NSLog(@"enum is an ID");

-
+
}
break;
case 2 : ;
-                // T.g:25:7: enumAsKeyword // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:25:7: enumAsKeyword // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_enumAsKeyword_in_stat47];
[self enumAsKeyword];
@@ -187,24 +182,25 @@ static const unsigned long long FOLLOW_7_in_enumAsID100_data[] = { 0x00000000000
[self popFollow];


+

NSLog(@"enum is a keyword");

-
+
}
break;

}
-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -213,15 +209,19 @@ static const unsigned long long FOLLOW_7_in_enumAsID100_data[] = { 0x00000000000

/*
* $ANTLR start identifier
- * T.g:28:1: identifier : ( ID | enumAsID );
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:28:1: identifier : ( ID | enumAsID );
*/
- (void) identifier
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // T.g:29:5: ( ID | enumAsID ) //ruleblock
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:29:5: ( ID | enumAsID ) //ruleblock
NSInteger alt2=2;
NSInteger LA2_0 = [input LA:1];

@@ -232,22 +232,24 @@ static const unsigned long long FOLLOW_7_in_enumAsID100_data[] = { 0x00000000000
alt2=2;
}
else {
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:2 state:0 stream:input];
+            NoViableAltException *nvae = [NoViableAltException newException:2 state:0 stream:input];
nvae.c = LA2_0;
@throw nvae;

}
switch (alt2) {
case 1 : ;
-                // T.g:29:7: ID // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:29:7: ID // alt
{
-                [self match:input TokenType:ID Follow:FOLLOW_ID_in_identifier66];

+                [self match:input TokenType:ID Follow:FOLLOW_ID_in_identifier66];
+
}
break;
case 2 : ;
-                // T.g:30:7: enumAsID // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:30:7: enumAsID // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_enumAsID_in_identifier74];
[self enumAsID];
@@ -255,21 +257,21 @@ static const unsigned long long FOLLOW_7_in_enumAsID100_data[] = { 0x00000000000
[self popFollow];


-
+
}
break;

}
-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -278,35 +280,40 @@ static const unsigned long long FOLLOW_7_in_enumAsID100_data[] = { 0x00000000000

/*
* $ANTLR start enumAsKeyword
- * T.g:33:1: enumAsKeyword :{...}? 'enum' ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:33:1: enumAsKeyword :{...}? 'enum' ;
*/
- (void) enumAsKeyword
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // T.g:33:15: ({...}? 'enum' ) // ruleBlockSingleAlt
-        // T.g:33:17: {...}? 'enum' // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:33:15: ({...}? 'enum' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:33:17: {...}? 'enum' // alt
{
+
if ( !((enableEnum)) ) {
-            @throw [ANTLRFailedPredicateException newException:@"enumAsKeyword" predicate:@"enableEnum" stream:input];
+            @throw [FailedPredicateException newException:@"enumAsKeyword" predicate:@"enableEnum" stream:input];
}
-
+
[self match:input TokenType:7 Follow:FOLLOW_7_in_enumAsKeyword89];
-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -315,35 +322,40 @@ static const unsigned long long FOLLOW_7_in_enumAsID100_data[] = { 0x00000000000

/*
* $ANTLR start enumAsID
- * T.g:35:1: enumAsID :{...}? 'enum' ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:35:1: enumAsID :{...}? 'enum' ;
*/
- (void) enumAsID
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // T.g:35:10: ({...}? 'enum' ) // ruleBlockSingleAlt
-        // T.g:35:12: {...}? 'enum' // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:35:10: ({...}? 'enum' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/T.g:35:12: {...}? 'enum' // alt
{
+
if ( !((!enableEnum)) ) {
-            @throw [ANTLRFailedPredicateException newException:@"enumAsID" predicate:@"!enableEnum" stream:input];
+            @throw [FailedPredicateException newException:@"enumAsID" predicate:@"!enableEnum" stream:input];
}
-
+
[self match:input TokenType:7 Follow:FOLLOW_7_in_enumAsID100];
-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
diff --git a/runtime/ObjC/Framework/examples/hoistedPredicates/antlr3.h b/runtime/ObjC/Framework/examples/hoistedPredicates/antlr3.h
deleted file mode 100644
index 4f16279..0000000
--- a/runtime/ObjC/Framework/examples/hoistedPredicates/antlr3.h
+++ /dev/null
@@ -1,79 +0,0 @@
-#import <ANTLR/ANTLRBaseMapElement.h>
-#import <ANTLR/ANTLRBaseRecognizer.h>
-#import <ANTLR/ANTLRBaseStack.h>
-#import <ANTLR/ANTLRBaseTree.h>
-#import <ANTLR/ANTLRBaseTreeAdaptor.h>
-#import <ANTLR/ANTLRBitSet.h>
-#import <ANTLR/ANTLRBufferedTokenStream.h>
-#import <ANTLR/ANTLRBufferedTreeNodeStream.h>
-#import <ANTLR/ANTLRCharStream.h>
-#import <ANTLR/ANTLRCharStreamState.h>
-#import <ANTLR/ANTLRCommonErrorNode.h>
-#import <ANTLR/ANTLRCommonToken.h>
-#import <ANTLR/ANTLRCommonTokenStream.h>
-#import <ANTLR/ANTLRCommonTree.h>
-#import <ANTLR/ANTLRCommonTreeAdaptor.h>
-#import <ANTLR/ANTLRCommonTreeNodeStream.h>
-#import <ANTLR/ANTLRDFA.h>
-#import <ANTLR/ANTLRDebug.h>
-#import <ANTLR/ANTLRDebugEventProxy.h>
-#import <ANTLR/ANTLRDebugEventListener.h>
-#import <ANTLR/ANTLRDebugParser.h>
-#import <ANTLR/ANTLRDebugTokenStream.h>
-#import <ANTLR/ANTLRDebugTreeAdaptor.h>
-#import <ANTLR/ANTLRDebugTreeNodeStream.h>
-#import <ANTLR/ANTLRDebugTreeParser.h>
-#import <ANTLR/ANTLREarlyExitException.h>
-#import <ANTLR/ANTLRError.h>
-#import <ANTLR/ANTLRFailedPredicateException.h>
-#import <ANTLR/ANTLRFastQueue.h>
-#import <ANTLR/ANTLRHashMap.h>
-#import <ANTLR/ANTLRHashRule.h>
-#import <ANTLR/ANTLRIntArray.h>
-#import <ANTLR/ANTLRIntStream.h>
-#import <ANTLR/ANTLRLexer.h>
-#import <ANTLR/ANTLRLexerRuleReturnScope.h>
-#import <ANTLR/ANTLRLinkBase.h>
-#import <ANTLR/ANTLRLookaheadStream.h>
-#import <ANTLR/ANTLRMapElement.h>
-#import <ANTLR/ANTLRMap.h>
-#import <ANTLR/ANTLRMismatchedNotSetException.h>
-#import <ANTLR/ANTLRMismatchedRangeException.h>
-#import <ANTLR/ANTLRMismatchedSetException.h>
-#import <ANTLR/ANTLRMismatchedTokenException.h>
-#import <ANTLR/ANTLRMismatchedTreeNodeException.h>
-#import <ANTLR/ANTLRMissingTokenException.h>
-#import <ANTLR/ANTLRNodeMapElement.h>
-#import <ANTLR/ANTLRNoViableAltException.h>
-#import <ANTLR/ANTLRParser.h>
-#import <ANTLR/ANTLRParserRuleReturnScope.h>
-#import <ANTLR/ANTLRPtrBuffer.h>
-#import <ANTLR/ANTLRRecognitionException.h>
-#import <ANTLR/ANTLRRecognizerSharedState.h>
-#import <ANTLR/ANTLRRewriteRuleElementStream.h>
-#import <ANTLR/ANTLRRewriteRuleSubtreeStream.h>
-#import <ANTLR/ANTLRRewriteRuleTokenStream.h>
-#import <ANTLR/ANTLRRuleMemo.h>
-#import <ANTLR/ANTLRRuleStack.h>
-#import <ANTLR/ANTLRRuleReturnScope.h>
-#import <ANTLR/ANTLRRuntimeException.h>
-#import <ANTLR/ANTLRStreamEnumerator.h>
-#import <ANTLR/ANTLRStringStream.h>
-#import <ANTLR/ANTLRSymbolStack.h>
-#import <ANTLR/ANTLRToken+DebuggerSupport.h>
-#import <ANTLR/ANTLRToken.h>
-#import <ANTLR/ANTLRTokenRewriteStream.h>
-#import <ANTLR/ANTLRTokenSource.h>
-#import <ANTLR/ANTLRTokenStream.h>
-#import <ANTLR/ANTLRTree.h>
-#import <ANTLR/ANTLRTreeAdaptor.h>
-#import <ANTLR/ANTLRTreeException.h>
-#import <ANTLR/ANTLRTreeIterator.h>
-#import <ANTLR/ANTLRTreeNodeStream.h>
-#import <ANTLR/ANTLRTreeParser.h>
-#import <ANTLR/ANTLRTreeRuleReturnScope.h>
-#import <ANTLR/ANTLRUnbufferedTokenStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStreamState.h>
-#import <ANTLR/ANTLRUniqueIDMap.h>
-#import <ANTLR/ANTLRUnwantedTokenException.h>
diff --git a/runtime/ObjC/Framework/examples/hoistedPredicates/main.m b/runtime/ObjC/Framework/examples/hoistedPredicates/main.m
index 747bdb8..4f0222c 100644
--- a/runtime/ObjC/Framework/examples/hoistedPredicates/main.m
+++ b/runtime/ObjC/Framework/examples/hoistedPredicates/main.m
@@ -7,17 +7,17 @@ int main() {
NSError *error;
NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

-	NSString *string = [NSString stringWithContentsOfFile:@"/Users/acondit/source/antlr3/acondit_localhost/code/antlr/antlr3-main/runtime/ObjC/Framework/examples/hoistedPredicates/input" encoding:NSASCIIStringEncoding error:&error];
+	NSString *string = [NSString stringWithContentsOfFile:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/hoistedPredicates/input" encoding:NSASCIIStringEncoding error:&error];
NSLog(@"input is : %@", string);
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:string];
TLexer *lexer = [TLexer newTLexerWithCharStream:stream];

-	//	ANTLRToken *currentToken;
-	//	while ((currentToken = [lexer nextToken]) && [currentToken type] != ANTLRTokenTypeEOF) {
+	//	Token *currentToken;
+	//	while ((currentToken = [lexer nextToken]) && [currentToken type] != TokenTypeEOF) {
//		NSLog(@"%@", currentToken);
//	}

-	ANTLRCommonTokenStream *tokenStream = [ANTLRCommonTokenStream newANTLRCommonTokenStreamWithTokenSource:lexer];
+	CommonTokenStream *tokenStream = [CommonTokenStream newCommonTokenStreamWithTokenSource:lexer];
TParser *parser = [[TParser alloc] initWithTokenStream:tokenStream];
[parser stat];
[lexer release];
diff --git a/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.h b/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.h
index 40c0fde..9e0d1cd 100644
--- a/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.h
+++ b/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.h
@@ -1,26 +1,39 @@
-// $ANTLR 3.2 Aug 07, 2010 22:08:38 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/lexertest-simple/Test.g 2010-08-11 13:24:39
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.g 2012-02-16 17:36:38

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
+#import <ANTLR/ANTLR.h>
/* End of standard antlr3 runtime definitions
* =============================================================================
*/

+/* Start cyclicDFAInterface */

-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
+#pragma mark Rule return scopes Interface start
+#pragma mark Rule return scopes Interface end
#pragma mark Tokens
-#define DIGIT 5
-#define ID 6
+#ifdef EOF
+#undef EOF
+#endif
#define EOF -1
-#define LETTER 4
-@interface TestLexer : ANTLRLexer {
+#define DIGIT 4
+#define ID 5
+#define LETTER 6
+/* interface lexer class */
+@interface TestLexer : Lexer { // line 283
+/* ObjC start of actions.lexer.memVars */
+/* ObjC end of actions.lexer.memVars */
}
-- (void) mID;
-- (void) mDIGIT;
-- (void) mLETTER;
-- (void) mTokens;
-@end // end of Test interface
\ No newline at end of file
++ (void) initialize;
++ (TestLexer *)newTestLexerWithCharStream:(id<CharStream>)anInput;
+/* ObjC start actions.lexer.methodsDecl */
+/* ObjC end actions.lexer.methodsDecl */
+- (void) mID ;
+- (void) mDIGIT ;
+- (void) mLETTER ;
+- (void) mTokens ;
+
+@end /* end of TestLexer interface */
+
diff --git a/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.h.old b/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.h.old
deleted file mode 100755
index f8252ca..0000000
--- a/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.h.old
+++ /dev/null
@@ -1,29 +0,0 @@
-// $ANTLR 3.0 Test.gl 2007-08-04 15:59:43
-
-#import <Cocoa/Cocoa.h>
-#import <ANTLR/ANTLR.h>
-
-
-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
-
-#pragma mark Tokens
-#define TestLexer_LETTER	4
-#define TestLexer_EOF	-1
-#define TestLexer_Tokens	7
-#define TestLexer_DIGIT	5
-#define TestLexer_ID	6
-
-@interface TestLexer : ANTLRLexer {
-    NSInteger _tokenType;
-}
-
-
-- (void) mID;
-- (void) mDIGIT;
-- (void) mLETTER;
-- (void) mTokens;
-
-
-
-@end
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.m b/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.m
index bb95f66..8ef23fe 100644
--- a/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.m
+++ b/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.m
@@ -1,8 +1,8 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : TestLexer.g
- *     -                            On : 2011-05-06 19:16:22
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.g
+ *     -                            On : 2012-02-16 17:36:38
*     -                 for the lexer : TestLexerLexer
*
* Editing it, at least manually, is not wise.
@@ -11,7 +11,7 @@
*
*
*/
-// $ANTLR ${project.version} ${buildNumber} TestLexer.g 2011-05-06 19:16:22
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.g 2012-02-16 17:36:38


/* -----------------------------------------
@@ -31,7 +31,7 @@

+ (void) initialize
{
-    [ANTLRBaseRecognizer setGrammarFileName:@"TestLexer.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.g"];
}

+ (NSString *) tokenNameForType:(NSInteger)aTokenType
@@ -39,14 +39,14 @@
return [[self getTokenNames] objectAtIndex:aTokenType];
}

-+ (TestLexer *)newTestLexerWithCharStream:(id<ANTLRCharStream>)anInput
++ (TestLexer *)newTestLexerWithCharStream:(id<CharStream>)anInput
{
return [[TestLexer alloc] initWithCharStream:anInput];
}

-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
+- (id) initWithCharStream:(id<CharStream>)anInput
{
-    self = [super initWithCharStream:anInput State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:4+1] retain]];
+    self = [super initWithCharStream:anInput State:[RecognizerSharedState newRecognizerSharedStateWithRuleLen:4+1]];
if ( self != nil ) {
}
return self;
@@ -67,18 +67,22 @@
- (void) mID
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = ID;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // TestLexer.g:8:4: ( LETTER ( LETTER | DIGIT )* ) // ruleBlockSingleAlt
-        // TestLexer.g:8:6: LETTER ( LETTER | DIGIT )* // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.g:8:4: ( LETTER ( LETTER | DIGIT )* ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.g:8:6: LETTER ( LETTER | DIGIT )* // alt
{
+
+
[self mLETTER];


+

do {
NSInteger alt1=2;
@@ -90,17 +94,18 @@

switch (alt1) {
case 1 : ;
-                    // TestLexer.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.g: // alt
{
+
if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))||(([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

@@ -110,98 +115,101 @@
} while (YES);
loop1: ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "ID" */
-
// $ANTLR start "DIGIT"
- (void) mDIGIT
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // TestLexer.g:11:16: ( '0' .. '9' ) // ruleBlockSingleAlt
-        // TestLexer.g: // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.g:11:16: ( '0' .. '9' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.g: // alt
{
+
if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))) {
[input consume];
} else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}


}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "DIGIT" */
-
// $ANTLR start "LETTER"
- (void) mLETTER
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // TestLexer.g:15:2: ( 'a' .. 'z' | 'A' .. 'Z' ) // ruleBlockSingleAlt
-        // TestLexer.g: // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.g:15:2: ( 'a' .. 'z' | 'A' .. 'Z' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.g: // alt
{
+
if ((([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
} else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}


}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "LETTER" */
-
- (void) mTokens
{
-    // TestLexer.g:1:8: ( ID ) // ruleBlockSingleAlt
-    // TestLexer.g:1:10: ID // alt
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.g:1:8: ( ID ) // ruleBlockSingleAlt
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.g:1:10: ID // alt
{
-    [self mID];


+    [self mID];
+

+
}


diff --git a/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.m.old b/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.m.old
deleted file mode 100755
index a48de92..0000000
--- a/runtime/ObjC/Framework/examples/lexertest-simple/TestLexer.m.old
+++ /dev/null
@@ -1,157 +0,0 @@
-// $ANTLR 3.0 Test.gl 2007-08-04 15:59:43
-
-#import "TestLexer.h"
-
-/** As per Terence: No returns for lexer rules!
-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
-*/
-@implementation TestLexer
-
-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
-{
-	if ((self = [super initWithCharStream:anInput]) != nil) {
-	}
-	return self;
-}
-
-- (void) dealloc
-{
-	[super dealloc];
-}
-
-+ (NSString *) tokenNameForType:(NSInteger)aTokenType
-{
-    return nil;
-}
-
-- (NSString *) grammarFileName
-{
-	return @"Test.gl";
-}
-
-
-- (void) mID
-{
-    @try {
-        ruleNestingLevel++;
-        int _type = TestLexer_ID;
-        // Test.gl:8:6: ( LETTER ( LETTER | DIGIT )* ) // ruleBlockSingleAlt
-        // Test.gl:8:6: LETTER ( LETTER | DIGIT )* // alt
-        {
-        [self mLETTER];
-
-
-        do {
-            int alt1=2;
-            {
-            	int LA1_0 = [input LA:1];
-            	if ( (LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||(LA1_0>='a' && LA1_0<='z') ) {
-            		alt1 = 1;
-            	}
-
-            }
-            switch (alt1) {
-        	case 1 :
-        	    // Test.gl: // alt
-        	    {
-        	    if (([input LA:1]>='0' && [input LA:1]<='9')||([input LA:1]>='A' && [input LA:1]<='Z')||([input LA:1]>='a' && [input LA:1]<='z')) {
-        	    	[input consume];
-
-        	    } else {
-        	    	ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
-        	    	[self recover:mse];	@throw mse;
-        	    }
-
-
-        	    }
-        	    break;
-
-        	default :
-        	    goto loop1;
-            }
-        } while (YES); loop1: ;
-
-
-        }
-
-        self->_tokenType = _type;
-    }
-    @finally {
-        ruleNestingLevel--;
-        // rule cleanup
-        // token+rule list labels
-
-    }
-    return;
-}
-// $ANTLR end ID
-
-
-- (void) mDIGIT
-{
-    @try {
-        ruleNestingLevel++;
-        // Test.gl:11:18: ( '0' .. '9' ) // ruleBlockSingleAlt
-        // Test.gl:11:18: '0' .. '9' // alt
-        {
-        [self matchRangeFromChar:'0' to:'9'];
-
-        }
-
-    }
-    @finally {
-        ruleNestingLevel--;
-        // rule cleanup
-        // token+rule list labels
-
-    }
-    return;
-}
-// $ANTLR end DIGIT
-
-
-- (void) mLETTER
-{
-    @try {
-        ruleNestingLevel++;
-        // Test.gl:15:4: ( 'a' .. 'z' | 'A' .. 'Z' ) // ruleBlockSingleAlt
-        // Test.gl: // alt
-        {
-        if (([input LA:1]>='A' && [input LA:1]<='Z')||([input LA:1]>='a' && [input LA:1]<='z')) {
-        	[input consume];
-
-        } else {
-        	ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
-        	[self recover:mse];	@throw mse;
-        }
-
-
-        }
-
-    }
-    @finally {
-        ruleNestingLevel--;
-        // rule cleanup
-        // token+rule list labels
-
-    }
-    return;
-}
-// $ANTLR end LETTER
-
-- (void) mTokens
-{
-    // Test.gl:1:10: ( ID ) // ruleBlockSingleAlt
-    // Test.gl:1:10: ID // alt
-    {
-    [self mID];
-
-
-
-    }
-
-
-}
-
-@end
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/examples/lexertest-simple/TestLexerLexer.h b/runtime/ObjC/Framework/examples/lexertest-simple/TestLexerLexer.h
deleted file mode 100644
index cdd1cee..0000000
--- a/runtime/ObjC/Framework/examples/lexertest-simple/TestLexerLexer.h
+++ /dev/null
@@ -1,39 +0,0 @@
-// $ANTLR ${project.version} ${buildNumber} TestLexer.g 2011-05-06 19:16:22
-
-/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
- */
-#import <Cocoa/Cocoa.h>
-#import <ANTLR/ANTLR.h>
-/* End of standard antlr3 runtime definitions
- * =============================================================================
- */
-
-/* Start cyclicDFAInterface */
-
-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
-#pragma mark Tokens
-#ifdef EOF
-#undef EOF
-#endif
-#define EOF -1
-#define DIGIT 4
-#define ID 5
-#define LETTER 6
-/* interface lexer class */
-@interface TestLexer : ANTLRLexer { // line 283
-/* ObjC start of actions.lexer.memVars */
-/* ObjC end of actions.lexer.memVars */
-}
-+ (void) initialize;
-+ (TestLexer *)newTestLexerWithCharStream:(id<ANTLRCharStream>)anInput;
-/* ObjC start actions.lexer.methodsDecl */
-/* ObjC end actions.lexer.methodsDecl */
-- (void) mID ;
-- (void) mDIGIT ;
-- (void) mLETTER ;
-- (void) mTokens ;
-
-@end /* end of TestLexer interface */
-
diff --git a/runtime/ObjC/Framework/examples/lexertest-simple/antlr3.h b/runtime/ObjC/Framework/examples/lexertest-simple/antlr3.h
deleted file mode 100644
index 4f16279..0000000
--- a/runtime/ObjC/Framework/examples/lexertest-simple/antlr3.h
+++ /dev/null
@@ -1,79 +0,0 @@
-#import <ANTLR/ANTLRBaseMapElement.h>
-#import <ANTLR/ANTLRBaseRecognizer.h>
-#import <ANTLR/ANTLRBaseStack.h>
-#import <ANTLR/ANTLRBaseTree.h>
-#import <ANTLR/ANTLRBaseTreeAdaptor.h>
-#import <ANTLR/ANTLRBitSet.h>
-#import <ANTLR/ANTLRBufferedTokenStream.h>
-#import <ANTLR/ANTLRBufferedTreeNodeStream.h>
-#import <ANTLR/ANTLRCharStream.h>
-#import <ANTLR/ANTLRCharStreamState.h>
-#import <ANTLR/ANTLRCommonErrorNode.h>
-#import <ANTLR/ANTLRCommonToken.h>
-#import <ANTLR/ANTLRCommonTokenStream.h>
-#import <ANTLR/ANTLRCommonTree.h>
-#import <ANTLR/ANTLRCommonTreeAdaptor.h>
-#import <ANTLR/ANTLRCommonTreeNodeStream.h>
-#import <ANTLR/ANTLRDFA.h>
-#import <ANTLR/ANTLRDebug.h>
-#import <ANTLR/ANTLRDebugEventProxy.h>
-#import <ANTLR/ANTLRDebugEventListener.h>
-#import <ANTLR/ANTLRDebugParser.h>
-#import <ANTLR/ANTLRDebugTokenStream.h>
-#import <ANTLR/ANTLRDebugTreeAdaptor.h>
-#import <ANTLR/ANTLRDebugTreeNodeStream.h>
-#import <ANTLR/ANTLRDebugTreeParser.h>
-#import <ANTLR/ANTLREarlyExitException.h>
-#import <ANTLR/ANTLRError.h>
-#import <ANTLR/ANTLRFailedPredicateException.h>
-#import <ANTLR/ANTLRFastQueue.h>
-#import <ANTLR/ANTLRHashMap.h>
-#import <ANTLR/ANTLRHashRule.h>
-#import <ANTLR/ANTLRIntArray.h>
-#import <ANTLR/ANTLRIntStream.h>
-#import <ANTLR/ANTLRLexer.h>
-#import <ANTLR/ANTLRLexerRuleReturnScope.h>
-#import <ANTLR/ANTLRLinkBase.h>
-#import <ANTLR/ANTLRLookaheadStream.h>
-#import <ANTLR/ANTLRMapElement.h>
-#import <ANTLR/ANTLRMap.h>
-#import <ANTLR/ANTLRMismatchedNotSetException.h>
-#import <ANTLR/ANTLRMismatchedRangeException.h>
-#import <ANTLR/ANTLRMismatchedSetException.h>
-#import <ANTLR/ANTLRMismatchedTokenException.h>
-#import <ANTLR/ANTLRMismatchedTreeNodeException.h>
-#import <ANTLR/ANTLRMissingTokenException.h>
-#import <ANTLR/ANTLRNodeMapElement.h>
-#import <ANTLR/ANTLRNoViableAltException.h>
-#import <ANTLR/ANTLRParser.h>
-#import <ANTLR/ANTLRParserRuleReturnScope.h>
-#import <ANTLR/ANTLRPtrBuffer.h>
-#import <ANTLR/ANTLRRecognitionException.h>
-#import <ANTLR/ANTLRRecognizerSharedState.h>
-#import <ANTLR/ANTLRRewriteRuleElementStream.h>
-#import <ANTLR/ANTLRRewriteRuleSubtreeStream.h>
-#import <ANTLR/ANTLRRewriteRuleTokenStream.h>
-#import <ANTLR/ANTLRRuleMemo.h>
-#import <ANTLR/ANTLRRuleStack.h>
-#import <ANTLR/ANTLRRuleReturnScope.h>
-#import <ANTLR/ANTLRRuntimeException.h>
-#import <ANTLR/ANTLRStreamEnumerator.h>
-#import <ANTLR/ANTLRStringStream.h>
-#import <ANTLR/ANTLRSymbolStack.h>
-#import <ANTLR/ANTLRToken+DebuggerSupport.h>
-#import <ANTLR/ANTLRToken.h>
-#import <ANTLR/ANTLRTokenRewriteStream.h>
-#import <ANTLR/ANTLRTokenSource.h>
-#import <ANTLR/ANTLRTokenStream.h>
-#import <ANTLR/ANTLRTree.h>
-#import <ANTLR/ANTLRTreeAdaptor.h>
-#import <ANTLR/ANTLRTreeException.h>
-#import <ANTLR/ANTLRTreeIterator.h>
-#import <ANTLR/ANTLRTreeNodeStream.h>
-#import <ANTLR/ANTLRTreeParser.h>
-#import <ANTLR/ANTLRTreeRuleReturnScope.h>
-#import <ANTLR/ANTLRUnbufferedTokenStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStreamState.h>
-#import <ANTLR/ANTLRUniqueIDMap.h>
-#import <ANTLR/ANTLRUnwantedTokenException.h>
diff --git a/runtime/ObjC/Framework/examples/lexertest-simple/main.m b/runtime/ObjC/Framework/examples/lexertest-simple/main.m
index 464c319..60110a7 100644
--- a/runtime/ObjC/Framework/examples/lexertest-simple/main.m
+++ b/runtime/ObjC/Framework/examples/lexertest-simple/main.m
@@ -1,6 +1,6 @@
#import <Cocoa/Cocoa.h>
#import "TestLexer.h"
-#import "antlr3.h"
+#import <ANTLR/ANTLR.h>
#import <unistd.h>

int main(int argc, const char * argv[])
@@ -9,8 +9,8 @@ int main(int argc, const char * argv[])

ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"abB9Cdd44"];
TestLexer *lexer = [[TestLexer alloc] initWithCharStream:stream];
-	id<ANTLRToken> currentToken;
-	while ((currentToken = [[lexer nextToken] retain]) && [currentToken getType] != ANTLRTokenTypeEOF) {
+	id<Token> currentToken;
+	while ((currentToken = [[lexer nextToken] retain]) && currentToken.type != TokenTypeEOF) {
NSLog(@"%@", currentToken);
}
[lexer release];
diff --git a/runtime/ObjC/Framework/examples/lexertest-simple/output1/Test.tokens b/runtime/ObjC/Framework/examples/lexertest-simple/output1/Test.tokens
deleted file mode 100644
index 2100fc5..0000000
--- a/runtime/ObjC/Framework/examples/lexertest-simple/output1/Test.tokens
+++ /dev/null
@@ -1,3 +0,0 @@
-DIGIT=5
-ID=6
-LETTER=4
diff --git a/runtime/ObjC/Framework/examples/lexertest-simple/output1/TestLexer.h b/runtime/ObjC/Framework/examples/lexertest-simple/output1/TestLexer.h
deleted file mode 100644
index 61f1691..0000000
--- a/runtime/ObjC/Framework/examples/lexertest-simple/output1/TestLexer.h
+++ /dev/null
@@ -1,26 +0,0 @@
-// $ANTLR 3.2 Aug 07, 2010 22:08:38 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/lexertest-simple/Test.g 2010-08-11 13:24:39
-
-/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
- */
-#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
-/* End of standard antlr3 runtime definitions
- * =============================================================================
- */
-
-
-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
-#pragma mark Tokens
-#define DIGIT 5
-#define ID 6
-#define EOF -1
-#define LETTER 4
-@interface Test : ANTLRLexer {
-}
-- (void) mID;
-- (void) mDIGIT;
-- (void) mLETTER;
-- (void) mTokens;
-@end // end of Test interface
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/examples/lexertest-simple/output1/TestLexer.tokens b/runtime/ObjC/Framework/examples/lexertest-simple/output1/TestLexer.tokens
deleted file mode 100644
index 2100fc5..0000000
--- a/runtime/ObjC/Framework/examples/lexertest-simple/output1/TestLexer.tokens
+++ /dev/null
@@ -1,3 +0,0 @@
-DIGIT=5
-ID=6
-LETTER=4
diff --git a/runtime/ObjC/Framework/examples/lexertest-simple/output1/TestLexerLexer.h b/runtime/ObjC/Framework/examples/lexertest-simple/output1/TestLexerLexer.h
deleted file mode 100644
index 1170ab3..0000000
--- a/runtime/ObjC/Framework/examples/lexertest-simple/output1/TestLexerLexer.h
+++ /dev/null
@@ -1,26 +0,0 @@
-// $ANTLR 3.2 Aug 07, 2010 22:08:38 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/lexertest-simple/TestLexer.g 2010-08-11 13:41:44
-
-/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
- */
-#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
-/* End of standard antlr3 runtime definitions
- * =============================================================================
- */
-
-
-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
-#pragma mark Tokens
-#define DIGIT 5
-#define ID 6
-#define EOF -1
-#define LETTER 4
-@interface TestLexer : ANTLRLexer {
-}
-- (void) mID;
-- (void) mDIGIT;
-- (void) mLETTER;
-- (void) mTokens;
-@end // end of TestLexer interface
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/examples/lexertest-simple/output1/Testlexer.m b/runtime/ObjC/Framework/examples/lexertest-simple/output1/Testlexer.m
deleted file mode 100644
index 3bb398b..0000000
--- a/runtime/ObjC/Framework/examples/lexertest-simple/output1/Testlexer.m
+++ /dev/null
@@ -1,216 +0,0 @@
-/** \file
- *  This OBJC source file was generated by $ANTLR version 3.2 Aug 07, 2010 22:08:38
- *
- *     -  From the grammar source file : /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/lexertest-simple/TestLexer.g
- *     -                            On : 2010-08-11 13:41:44
- *     -                 for the lexer : TestLexerLexer *
- * Editing it, at least manually, is not wise.
- *
- * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
- *
- *
-*/
-// [The "BSD licence"]
-// Copyright (c) 2010 Alan Condit
-//
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. The name of the author may not be used to endorse or promote products
-//    derived from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// $ANTLR 3.2 Aug 07, 2010 22:08:38 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/lexertest-simple/TestLexer.g 2010-08-11 13:41:44
-
-/* -----------------------------------------
- * Include the ANTLR3 generated header file.
- */
-#import "TestLexer.h"
-/* ----------------------------------------- */
-
-
-/* ============================================================================= */
-
-/* =============================================================================
- * Start of recognizer
- */
-
-
-/** As per Terence: No returns for lexer rules!
-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
-*/
-@implementation TestLexer
-
-
-+ (void) initialize
-{
-    [ANTLRBaseRecognizer setGrammarFileName:@"/usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/lexertest-simple/TestLexer.g"];
-}
-
-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
-{
-    if ((self = [super initWithCharStream:anInput State:[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:4+1]]) != nil) {
-    }
-    return self;
-}
-
-- (void) dealloc
-{
-    [super dealloc];
-}
-
-+ (NSString *) tokenNameForType:(NSInteger)aTokenType
-{
-    return [[self getTokenNames] objectAtIndex:aTokenType];
-}
-
-// $ANTLR start "ID"
-- (void) mID
-{
-    //
-    // This is not in the Java.stg
-
-    @try {
-        NSInteger _type = ID;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/lexertest-simple/TestLexer.g:8:4: ( LETTER ( LETTER | DIGIT )* ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/lexertest-simple/TestLexer.g:8:6: LETTER ( LETTER | DIGIT )* // alt
-        {
-            [self mLETTER];
-
-          /* element() */
-        do {
-            NSInteger alt1=2;
-            {
-                NSInteger LA1_0 = [input LA:1];
-                if ( (LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||(LA1_0>='a' && LA1_0<='z') ) {
-                    alt1=1;
-                }
-
-            }
-            switch (alt1) {
-                case 1 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/lexertest-simple/TestLexer.g: // alt
-                    {
-                    if (([input LA:1]>='0' && [input LA:1]<='9')||([input LA:1]>='A' && [input LA:1]<='Z')||([input LA:1]>='a' && [input LA:1]<='z')) {
-                        [input consume];
-
-                    } else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
-                        [self recover:mse];
-                        @throw mse;}
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop1;
-            }
-        } while (YES);
-        loop1: ;
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end ID
-
-// $ANTLR start "DIGIT"
-- (void) mDIGIT
-{
-    //
-    // This is not in the Java.stg
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/lexertest-simple/TestLexer.g:11:16: ( '0' .. '9' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/lexertest-simple/TestLexer.g:11:18: '0' .. '9' // alt
-        {
-        [self matchRangeFromChar:'0' to:'9'];   /* element() */
-         /* elements */
-        }
-
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end DIGIT
-
-// $ANTLR start "LETTER"
-- (void) mLETTER
-{
-    //
-    // This is not in the Java.stg
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/lexertest-simple/TestLexer.g:15:2: ( 'a' .. 'z' | 'A' .. 'Z' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/lexertest-simple/TestLexer.g: // alt
-        {
-        if (([input LA:1]>='A' && [input LA:1]<='Z')||([input LA:1]>='a' && [input LA:1]<='z')) {
-            [input consume];
-
-        } else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
-            [self recover:mse];
-            @throw mse;}
-          /* element() */
-         /* elements */
-        }
-
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end LETTER
-
-- (void) mTokens
-{
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/lexertest-simple/TestLexer.g:1:8: ( ID ) // ruleBlockSingleAlt
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/lexertest-simple/TestLexer.g:1:10: ID // alt
-    {
-        [self mID];
-
-      /* element() */
-     /* elements */
-    }
-
-
-}
-
-@end // end of TestLexer implementation
-
-/* End of code
- * =============================================================================
- */
diff --git a/runtime/ObjC/Framework/examples/polydiff/Poly.g b/runtime/ObjC/Framework/examples/polydiff/Poly.g
new file mode 100644
index 0000000..30ad7c3
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/Poly.g
@@ -0,0 +1,27 @@
+grammar Poly;
+options {
+    output=AST;
+    language=ObjC;
+    }
+tokens { MULT; } // imaginary token
+
+poly: term ('+'^ term)*
+    ;
+
+term: INT ID  -> ^(MULT[@"*"] INT ID)
+    | INT exp -> ^(MULT[@"*"] INT exp)
+    | exp
+    | INT
+	| ID
+    ;
+
+exp : ID '^'^ INT
+    ;
+
+ID  returns [NSString *value]
+    : 'a'..'z'+ ;
+
+INT  returns [NSString *value]
+    : '0'..'9'+ ;
+
+WS	: (' '|'\t'|'\r'|'\n')+ { $channel=HIDDEN; } ;
diff --git a/runtime/ObjC/Framework/examples/polydiff/Poly.tokens b/runtime/ObjC/Framework/examples/polydiff/Poly.tokens
new file mode 100644
index 0000000..c711b35
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/Poly.tokens
@@ -0,0 +1,8 @@
+T__8=8
+T__9=9
+ID=4
+INT=5
+MULT=6
+WS=7
+'+'=8
+'^'=9
diff --git a/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g b/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g
new file mode 100644
index 0000000..642c511
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g
@@ -0,0 +1,26 @@
+tree grammar PolyDifferentiator;
+options {
+	tokenVocab=Poly;
+    language=ObjC;
+	ASTLabelType=CommonTree;
+	output=AST;
+//	rewrite=true; // works either in rewrite or normal mode
+}
+
+poly:	^('+' poly poly)
+	|	^(MULT INT ID)		-> INT
+	|	^(MULT c=INT ^('^' ID e=INT))
+		{
+		NSString *c2 = [NSString stringWithFormat:@"\%d", $c.int*$e.int];
+		NSString *e2 = [NSString stringWithFormat:@"\%d", $e.int-1];
+		}
+							-> ^(MULT[@"*"] INT[c2] ^('^' ID INT[e2]))
+	|	^('^' ID e=INT)
+		{
+		NSString *c2 = [NSString stringWithFormat:@"\%d", $e.int];
+		NSString *e2 = [NSString stringWithFormat:@"\%d", $e.int-1];
+		}
+							-> ^(MULT[@"*"] INT[c2] ^('^' ID INT[e2]))
+	|	INT					-> INT[@"0"]
+	|	ID					-> INT[@"1"]
+	;
diff --git a/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.h b/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.h
new file mode 100644
index 0000000..449799a
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.h
@@ -0,0 +1,107 @@
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g 2012-02-16 18:10:53
+
+/* =============================================================================
+ * Standard antlr OBJC runtime definitions
+ */
+#import <Cocoa/Cocoa.h>
+#import <ANTLR/ANTLR.h>
+/* End of standard antlr3 runtime definitions
+ * =============================================================================
+ */
+
+/* treeParserHeaderFile */
+#ifndef ANTLR3TokenTypeAlreadyDefined
+#define ANTLR3TokenTypeAlreadyDefined
+typedef enum {
+    ANTLR_EOF = -1,
+    INVALID,
+    EOR,
+    DOWN,
+    UP,
+    MIN
+} ANTLR3TokenType;
+#endif
+
+#pragma mark Tokens
+#ifdef EOF
+#undef EOF
+#endif
+#define EOF -1
+#define T__8 8
+#define T__9 9
+#define ID 4
+#define INT 5
+#define MULT 6
+#define WS 7
+#pragma mark Dynamic Global Scopes globalAttributeScopeInterface
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeInterface
+#pragma mark Rule Return Scopes returnScopeInterface
+/* returnScopeInterface PolyDifferentiator_poly_return */
+@interface PolyDifferentiator_poly_return : TreeRuleReturnScope { /* returnScopeInterface line 1838 */
+/* ASTTreeParser returnScopeInterface.memVars */
+CommonTree *tree; /* ObjC start of memVars() */
+
+}
+/* start property declarations */
+/* AST returnScopeInterface.properties */
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
++ (PolyDifferentiator_poly_return *)newPolyDifferentiator_poly_return;
+/* this is start of set and get methods */
+/* ASTTreeParser returnScopeInterface.methodsDecl */
+- (CommonTree *)getTree;
+- (void) setTree:(CommonTree *)aTree;
+  /* methodsDecl */
+
+@end /* end of returnScopeInterface interface */
+
+
+
+/* Interface grammar class */
+@interface PolyDifferentiator  : TreeParser { /* line 572 */
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeDecl
+#pragma mark Dynamic Global Rule Scopes globalAttributeScopeMemVar
+
+
+/* ObjC start of actions.(actionScope).memVars */
+/* ObjC end of actions.(actionScope).memVars */
+/* ObjC start of memVars */
+/* AST parserHeaderFile.memVars */
+NSInteger ruleLevel;
+NSArray *ruleNames;
+  /* AST super.memVars */
+/* AST parserMemVars */
+id<TreeAdaptor> treeAdaptor;   /* AST parserMemVars */
+/* ObjC end of memVars */
+
+ }
+
+/* ObjC start of actions.(actionScope).properties */
+/* ObjC end of actions.(actionScope).properties */
+/* ObjC start of properties */
+/* AST parserHeaderFile.properties */
+  /* AST super.properties */
+/* AST parserProperties */
+@property (retain, getter=getTreeAdaptor, setter=setTreeAdaptor:) id<TreeAdaptor> treeAdaptor;   /* AST parserproperties */
+/* ObjC end of properties */
+
++ (void) initialize;
++ (id) newPolyDifferentiator:(id<TreeNodeStream>)aStream;
+/* ObjC start of actions.(actionScope).methodsDecl */
+/* ObjC end of actions.(actionScope).methodsDecl */
+
+/* ObjC start of methodsDecl */
+/* AST parserHeaderFile.methodsDecl */
+  /* AST super.methodsDecl */
+/* AST parserMethodsDecl */
+- (id<TreeAdaptor>) getTreeAdaptor;
+- (void) setTreeAdaptor:(id<TreeAdaptor>)theTreeAdaptor;   /* AST parsermethodsDecl */
+/* ObjC end of methodsDecl */
+
+- (PolyDifferentiator_poly_return *)poly;
+
+
+@end /* end of PolyDifferentiator interface */
+
diff --git a/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.m b/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.m
new file mode 100644
index 0000000..7b90e62
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.m
@@ -0,0 +1,791 @@
+/** \file
+ *  This OBJC source file was generated by $ANTLR version 3.4
+ *
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g
+ *     -                            On : 2012-02-16 18:10:53
+ *     -           for the tree parser : PolyDifferentiatorTreeParser
+ *
+ * Editing it, at least manually, is not wise.
+ *
+ * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
+ *
+ *
+*/
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g 2012-02-16 18:10:53
+
+
+/* -----------------------------------------
+ * Include the ANTLR3 generated header file.
+ */
+#import "PolyDifferentiator.h"
+/* ----------------------------------------- */
+
+
+/* ============================================================================= */
+/* =============================================================================
+ * Start of recognizer
+ */
+
+#pragma mark Bitsets
+static ANTLRBitSet *FOLLOW_8_in_poly44;
+static const unsigned long long FOLLOW_8_in_poly44_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_poly_in_poly46;
+static const unsigned long long FOLLOW_poly_in_poly46_data[] = { 0x0000000000000370LL};
+static ANTLRBitSet *FOLLOW_poly_in_poly48;
+static const unsigned long long FOLLOW_poly_in_poly48_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_MULT_in_poly55;
+static const unsigned long long FOLLOW_MULT_in_poly55_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_INT_in_poly57;
+static const unsigned long long FOLLOW_INT_in_poly57_data[] = { 0x0000000000000010LL};
+static ANTLRBitSet *FOLLOW_ID_in_poly59;
+static const unsigned long long FOLLOW_ID_in_poly59_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_MULT_in_poly71;
+static const unsigned long long FOLLOW_MULT_in_poly71_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_INT_in_poly75;
+static const unsigned long long FOLLOW_INT_in_poly75_data[] = { 0x0000000000000200LL};
+static ANTLRBitSet *FOLLOW_9_in_poly78;
+static const unsigned long long FOLLOW_9_in_poly78_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_ID_in_poly80;
+static const unsigned long long FOLLOW_ID_in_poly80_data[] = { 0x0000000000000020LL};
+static ANTLRBitSet *FOLLOW_INT_in_poly84;
+static const unsigned long long FOLLOW_INT_in_poly84_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_9_in_poly122;
+static const unsigned long long FOLLOW_9_in_poly122_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_ID_in_poly124;
+static const unsigned long long FOLLOW_ID_in_poly124_data[] = { 0x0000000000000020LL};
+static ANTLRBitSet *FOLLOW_INT_in_poly128;
+static const unsigned long long FOLLOW_INT_in_poly128_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_INT_in_poly164;
+static const unsigned long long FOLLOW_INT_in_poly164_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_ID_in_poly178;
+static const unsigned long long FOLLOW_ID_in_poly178_data[] = { 0x0000000000000002LL};
+
+
+#pragma mark Dynamic Global globalAttributeScopeImplementation
+
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation
+
+#pragma mark Rule Return Scopes returnScopeImplementation
+@implementation PolyDifferentiator_poly_return /* returnScopeImplementation */
+/* AST returnScope.synthesize */
+@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
++ (PolyDifferentiator_poly_return *)newPolyDifferentiator_poly_return
+{
+return [[[PolyDifferentiator_poly_return alloc] init] retain];
+}
+
+- (id) init
+{
+self = [super init];
+return self;
+}
+
+/* AST returnScope.methods */
+- (CommonTree *)getTree
+{
+    return tree;
+}
+
+- (void) setTree:(CommonTree *)aTree
+{
+    if (tree != aTree) {
+        if (tree != nil) [tree release];
+        if (aTree != nil) [aTree retain];
+        tree = aTree;
+    }
+}
+
+- (void) dealloc
+{
+    self.tree = nil;
+    [super dealloc];
+}
+
+
+@end /* end of returnScope implementation */
+
+
+
+@implementation PolyDifferentiator  // line 637
+
+/* ObjC start of ruleAttributeScope */
+#pragma mark Dynamic Rule Scopes ruleAttributeScope
+/* ObjC end of ruleAttributeScope */
+#pragma mark global Attribute Scopes globalAttributeScope
+/* ObjC start globalAttributeScope */
+/* ObjC end globalAttributeScope */
+/* ObjC start actions.(actionScope).synthesize */
+/* ObjC start synthesize() */
+/* AST genericParser.synthesize */
+/* AST parserProperties */
+@synthesize treeAdaptor;
+
++ (void) initialize
+{
+    #pragma mark Bitsets
+    FOLLOW_8_in_poly44 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_poly44_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_poly46 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly46_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_poly48 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly48_data Count:(NSUInteger)1] retain];
+    FOLLOW_MULT_in_poly55 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_MULT_in_poly55_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_poly57 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_poly57_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_poly59 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_poly59_data Count:(NSUInteger)1] retain];
+    FOLLOW_MULT_in_poly71 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_MULT_in_poly71_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_poly75 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_poly75_data Count:(NSUInteger)1] retain];
+    FOLLOW_9_in_poly78 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_poly78_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_poly80 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_poly80_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_poly84 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_poly84_data Count:(NSUInteger)1] retain];
+    FOLLOW_9_in_poly122 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_poly122_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_poly124 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_poly124_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_poly128 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_poly128_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_poly164 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_poly164_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_poly178 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_poly178_data Count:(NSUInteger)1] retain];
+
+    [BaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
+ @"ID", @"INT", @"MULT", @"WS", @"'+'", @"'^'", nil] retain]];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g"];
+}
+
++ (PolyDifferentiator *)newPolyDifferentiator:(id<TreeNodeStream>)aStream
+{
+    return [[PolyDifferentiator alloc] initWithStream:aStream];
+}
+
+- (id) initWithStream:(id<TreeNodeStream>)aStream
+{
+    self = [super initWithStream:aStream State:[[RecognizerSharedState newRecognizerSharedStateWithRuleLen:1+1] retain]];
+    if ( self != nil ) {
+        /* start of actions-actionScope-init */
+        /* start of init */
+        /* AST genericParser.init */
+        [self setTreeAdaptor:[[CommonTreeAdaptor newTreeAdaptor] retain]];
+    }
+    return self;
+}
+
+- (void) dealloc
+{
+    /* AST genericParser.dealloc */
+    [self setTreeAdaptor:nil];
+
+    [super dealloc];
+}
+
+/* ObjC start actions.(actionScope).methods */
+/* ObjC end actions.(actionScope).methods */
+/* ObjC start methods() */
+/* AST genericParser.methods */
+/* AST parserMethods */
+- (id<TreeAdaptor>) getTreeAdaptor
+{
+	return treeAdaptor;
+}
+
+- (void) setTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor
+{
+	if (aTreeAdaptor != treeAdaptor) {
+		treeAdaptor = aTreeAdaptor;
+	}
+}
+/* ObjC end methods() */
+/* ObjC start rules */
+/*
+ * $ANTLR start poly
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g:10:1: poly : ( ^( '+' poly poly ) | ^( MULT INT ID ) -> INT | ^( MULT c= INT ^( '^' ID e= INT ) ) -> ^( MULT[@\"*\"] INT[c2] ^( '^' ID INT[e2] ) ) | ^( '^' ID e= INT ) -> ^( MULT[@\"*\"] INT[c2] ^( '^' ID INT[e2] ) ) | INT -> INT[@\"0\"] | ID -> INT[@\"1\"] );
+ */
+- (PolyDifferentiator_poly_return *) poly
+{
+    /* ruleScopeSetUp */
+
+    /* ASTTreeParser ruleDeclarations */
+    /* AST ruleDeclarations */
+    /* ruleDeclarations */
+    PolyDifferentiator_poly_return * retval = [PolyDifferentiator_poly_return newPolyDifferentiator_poly_return];
+    [retval setStart:[input LT:1]];
+
+
+    CommonTree *root_0 = nil;
+
+    CommonTree *_first_0 = nil;
+    CommonTree *_last = nil;
+
+    @try {
+        /* AST ruleLabelDefs */
+        /* ruleLabelDefs entry */
+        CommonTree *c = nil;
+        CommonTree *e = nil;
+        CommonTree *char_literal1 = nil;
+        CommonTree *MULT4 = nil;
+        CommonTree *INT5 = nil;
+        CommonTree *ID6 = nil;
+        CommonTree *MULT7 = nil;
+        CommonTree *char_literal8 = nil;
+        CommonTree *ID9 = nil;
+        CommonTree *char_literal10 = nil;
+        CommonTree *ID11 = nil;
+        CommonTree *INT12 = nil;
+        CommonTree *ID13 = nil;PolyDifferentiator_poly_return * poly2 = nil ;
+
+        PolyDifferentiator_poly_return * poly3 = nil ;
+
+
+        CommonTree *c_tree=nil;
+        CommonTree *e_tree=nil;
+        CommonTree *char_literal1_tree=nil;
+        CommonTree *MULT4_tree=nil;
+        CommonTree *INT5_tree=nil;
+        CommonTree *ID6_tree=nil;
+        CommonTree *MULT7_tree=nil;
+        CommonTree *char_literal8_tree=nil;
+        CommonTree *ID9_tree=nil;
+        CommonTree *char_literal10_tree=nil;
+        CommonTree *ID11_tree=nil;
+        CommonTree *INT12_tree=nil;
+        CommonTree *ID13_tree=nil;
+        RewriteRuleTokenStream *stream_INT =
+            [[RewriteRuleNodeStream newRewriteRuleNodeStream:treeAdaptor
+                                                             description:@"token INT"] retain];
+        RewriteRuleTokenStream *stream_MULT =
+            [[RewriteRuleNodeStream newRewriteRuleNodeStream:treeAdaptor
+                                                             description:@"token MULT"] retain];
+        RewriteRuleTokenStream *stream_ID =
+            [[RewriteRuleNodeStream newRewriteRuleNodeStream:treeAdaptor
+                                                             description:@"token ID"] retain];
+        RewriteRuleTokenStream *stream_9 =
+            [[RewriteRuleNodeStream newRewriteRuleNodeStream:treeAdaptor
+                                                             description:@"token 9"] retain];
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g:10:5: ( ^( '+' poly poly ) | ^( MULT INT ID ) -> INT | ^( MULT c= INT ^( '^' ID e= INT ) ) -> ^( MULT[@\"*\"] INT[c2] ^( '^' ID INT[e2] ) ) | ^( '^' ID e= INT ) -> ^( MULT[@\"*\"] INT[c2] ^( '^' ID INT[e2] ) ) | INT -> INT[@\"0\"] | ID -> INT[@\"1\"] ) //ruleblock
+        NSInteger alt1=6;
+        unichar charLA1 = [input LA:1];
+        switch (charLA1) {
+            case 8: ;
+                {
+                alt1=1;
+                }
+                break;
+            case MULT: ;
+                {
+                NSInteger LA1_2 = [input LA:2];
+
+                if ( (LA1_2==DOWN) ) {
+                    NSInteger LA1_6 = [input LA:3];
+
+                    if ( (LA1_6==INT) ) {
+                        NSInteger LA1_7 = [input LA:4];
+
+                        if ( (LA1_7==ID) ) {
+                            alt1=2;
+                        }
+                        else if ( (LA1_7==9) ) {
+                            alt1=3;
+                        }
+                        else {
+                            NoViableAltException *nvae = [NoViableAltException newException:1 state:7 stream:input];
+                            nvae.c = LA1_7;
+                            @throw nvae;
+
+                        }
+                    }
+                    else {
+                        NoViableAltException *nvae = [NoViableAltException newException:1 state:6 stream:input];
+                        nvae.c = LA1_6;
+                        @throw nvae;
+
+                    }
+                }
+                else {
+                    NoViableAltException *nvae = [NoViableAltException newException:1 state:2 stream:input];
+                    nvae.c = LA1_2;
+                    @throw nvae;
+
+                }
+                }
+                break;
+            case 9: ;
+                {
+                alt1=4;
+                }
+                break;
+            case INT: ;
+                {
+                alt1=5;
+                }
+                break;
+            case ID: ;
+                {
+                alt1=6;
+                }
+                break;
+
+        default: ;
+            NoViableAltException *nvae = [NoViableAltException newException:1 state:0 stream:input];
+            nvae.c = charLA1;
+            @throw nvae;
+
+        }
+
+        switch (alt1) {
+            case 1 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g:10:7: ^( '+' poly poly ) // alt
+                {
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+
+
+                /* ASTTreeParser tree */
+                _last = (CommonTree *)[input LT:1];
+                {
+                CommonTree *_save_last_1 = _last;
+                CommonTree *_first_1 = nil;
+                CommonTree *root_1 = [[[treeAdaptor class] newEmptyTree] retain];
+
+                /* ASTTreeParser tokenRefRuleRoot */
+                _last = (CommonTree *)[input LT:1];
+                char_literal1=(CommonTree *)[self match:input TokenType:8 Follow:FOLLOW_8_in_poly44];
+                char_literal1_tree = (CommonTree *)[treeAdaptor dupNode:char_literal1];
+
+
+                root_1 = (CommonTree *)[treeAdaptor becomeRoot:char_literal1_tree old:root_1];
+
+
+                [self match:input TokenType:TokenTypeDOWN Follow:nil];
+
+                /* ASTTreeParser ruleRef */
+                _last = (CommonTree *)[input LT:1];
+                /* ruleRef */
+                [self pushFollow:FOLLOW_poly_in_poly46];
+                poly2 = [self poly];
+
+                [self popFollow];
+
+
+                    [treeAdaptor addChild:poly2.tree toTree:root_1];
+
+
+                /* ASTTreeParser ruleRef */
+                _last = (CommonTree *)[input LT:1];
+                /* ruleRef */
+                [self pushFollow:FOLLOW_poly_in_poly48];
+                poly3 = [self poly];
+
+                [self popFollow];
+
+
+                    [treeAdaptor addChild:poly3.tree toTree:root_1];
+
+
+                [self match:input TokenType:TokenTypeUP Follow:nil];
+                [treeAdaptor addChild:root_1 toTree:root_0];
+                _last = _save_last_1;
+                }
+
+
+                /* ASTTreeParser noRewrite */
+
+                }
+                break;
+            case 2 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g:11:4: ^( MULT INT ID ) // alt
+                {
+
+                /* ASTTreeParser tree */
+                _last = (CommonTree *)[input LT:1];
+                {
+                CommonTree *_save_last_1 = _last;
+                CommonTree *_first_1 = nil;
+                CommonTree *root_1 = [[[treeAdaptor class] newEmptyTree] retain];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                MULT4=(CommonTree *)[self match:input TokenType:MULT Follow:FOLLOW_MULT_in_poly55];
+                    [stream_MULT addElement:MULT4];
+
+
+                [self match:input TokenType:TokenTypeDOWN Follow:nil];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                INT5=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_poly57];
+                    [stream_INT addElement:INT5];
+
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                ID6=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_poly59];
+                    [stream_ID addElement:ID6];
+
+
+                [self match:input TokenType:TokenTypeUP Follow:nil];
+                [treeAdaptor addChild:root_1 toTree:root_0];
+                _last = _save_last_1;
+                }
+
+
+                // AST REWRITE
+                // elements: INT
+                // token labels:
+                // rule labels: retval
+                // token list labels:
+                // rule list labels:
+                // wildcard labels:
+                retval.tree = root_0;
+
+                RewriteRuleSubtreeStream *stream_retval =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];
+
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+                // 11:20: -> INT
+                {
+                     // TODO: args:
+                    [treeAdaptor addChild:/* ASTTreeParser createRewriteNodeFromElement */
+                    [stream_INT nextNode]
+                     toTree:root_0];
+
+                }
+
+
+                retval.tree = root_0;
+
+
+                }
+                break;
+            case 3 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g:12:4: ^( MULT c= INT ^( '^' ID e= INT ) ) // alt
+                {
+
+                /* ASTTreeParser tree */
+                _last = (CommonTree *)[input LT:1];
+                {
+                CommonTree *_save_last_1 = _last;
+                CommonTree *_first_1 = nil;
+                CommonTree *root_1 = [[[treeAdaptor class] newEmptyTree] retain];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                MULT7=(CommonTree *)[self match:input TokenType:MULT Follow:FOLLOW_MULT_in_poly71];
+                    [stream_MULT addElement:MULT7];
+
+
+                [self match:input TokenType:TokenTypeDOWN Follow:nil];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                c=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_poly75];
+                    [stream_INT addElement:c];
+
+
+                /* ASTTreeParser tree */
+                _last = (CommonTree *)[input LT:1];
+                {
+                CommonTree *_save_last_2 = _last;
+                CommonTree *_first_2 = nil;
+                CommonTree *root_2 = [[[treeAdaptor class] newEmptyTree] retain];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                char_literal8=(CommonTree *)[self match:input TokenType:9 Follow:FOLLOW_9_in_poly78];
+                    [stream_9 addElement:char_literal8];
+
+
+                [self match:input TokenType:TokenTypeDOWN Follow:nil];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                ID9=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_poly80];
+                    [stream_ID addElement:ID9];
+
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                e=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_poly84];
+                    [stream_INT addElement:e];
+
+
+                [self match:input TokenType:TokenTypeUP Follow:nil];
+                [treeAdaptor addChild:root_2 toTree:root_1];
+                _last = _save_last_2;
+                }
+
+
+                [self match:input TokenType:TokenTypeUP Follow:nil];
+                [treeAdaptor addChild:root_1 toTree:root_0];
+                _last = _save_last_1;
+                }
+
+
+
+
+                		NSString *c2 = [NSString stringWithFormat:@"%d", (c!=nil?[c.text integerValue]:0)*(e!=nil?[e.text integerValue]:0)];
+                		NSString *e2 = [NSString stringWithFormat:@"%d", (e!=nil?[e.text integerValue]:0)-1];
+
+
+
+                // AST REWRITE
+                // elements: INT, 9, INT, ID, MULT
+                // token labels:
+                // rule labels: retval
+                // token list labels:
+                // rule list labels:
+                // wildcard labels:
+                retval.tree = root_0;
+
+                RewriteRuleSubtreeStream *stream_retval =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];
+
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+                // 17:8: -> ^( MULT[@\"*\"] INT[c2] ^( '^' ID INT[e2] ) )
+                {
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g:17:11: ^( MULT[@\"*\"] INT[c2] ^( '^' ID INT[e2] ) )
+                    {
+                        CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                        root_1 = (CommonTree *)[treeAdaptor becomeRoot:
+                                [[treeAdaptor createTree:MULT FromToken:@"*" Text:@"MULT"] retain]
+                         old:root_1];
+
+                        [treeAdaptor addChild:
+                                [[treeAdaptor createTree:INT FromToken:c2 Text:@"INT"] retain]
+                         toTree:root_1];
+
+                        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g:17:32: ^( '^' ID INT[e2] )
+                        {
+                            CommonTree *root_2 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                            root_2 = (CommonTree *)[treeAdaptor becomeRoot:/* ASTTreeParser createRewriteNodeFromElement */
+                            [stream_9 nextNode]
+                             old:root_2];
+
+                             // TODO: args:
+                            [treeAdaptor addChild:/* ASTTreeParser createRewriteNodeFromElement */
+                            [stream_ID nextNode]
+                             toTree:root_2];
+
+                            [treeAdaptor addChild:
+                                    [[treeAdaptor createTree:INT FromToken:e2 Text:@"INT"] retain]
+                             toTree:root_2];
+
+                            [treeAdaptor addChild:root_2 toTree:root_1];
+                        }
+
+                        [treeAdaptor addChild:root_1 toTree:root_0];
+                    }
+
+                }
+
+
+                retval.tree = root_0;
+
+
+                }
+                break;
+            case 4 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g:18:4: ^( '^' ID e= INT ) // alt
+                {
+
+                /* ASTTreeParser tree */
+                _last = (CommonTree *)[input LT:1];
+                {
+                CommonTree *_save_last_1 = _last;
+                CommonTree *_first_1 = nil;
+                CommonTree *root_1 = [[[treeAdaptor class] newEmptyTree] retain];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                char_literal10=(CommonTree *)[self match:input TokenType:9 Follow:FOLLOW_9_in_poly122];
+                    [stream_9 addElement:char_literal10];
+
+
+                [self match:input TokenType:TokenTypeDOWN Follow:nil];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                ID11=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_poly124];
+                    [stream_ID addElement:ID11];
+
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                e=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_poly128];
+                    [stream_INT addElement:e];
+
+
+                [self match:input TokenType:TokenTypeUP Follow:nil];
+                [treeAdaptor addChild:root_1 toTree:root_0];
+                _last = _save_last_1;
+                }
+
+
+
+
+                		NSString *c2 = [NSString stringWithFormat:@"%d", (e!=nil?[e.text integerValue]:0)];
+                		NSString *e2 = [NSString stringWithFormat:@"%d", (e!=nil?[e.text integerValue]:0)-1];
+
+
+
+                // AST REWRITE
+                // elements: INT, 9, INT, ID
+                // token labels:
+                // rule labels: retval
+                // token list labels:
+                // rule list labels:
+                // wildcard labels:
+                retval.tree = root_0;
+
+                RewriteRuleSubtreeStream *stream_retval =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];
+
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+                // 23:8: -> ^( MULT[@\"*\"] INT[c2] ^( '^' ID INT[e2] ) )
+                {
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g:23:11: ^( MULT[@\"*\"] INT[c2] ^( '^' ID INT[e2] ) )
+                    {
+                        CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                        root_1 = (CommonTree *)[treeAdaptor becomeRoot:
+                                [[treeAdaptor createTree:MULT FromToken:@"*" Text:@"MULT"] retain]
+                         old:root_1];
+
+                        [treeAdaptor addChild:
+                                [[treeAdaptor createTree:INT FromToken:c2 Text:@"INT"] retain]
+                         toTree:root_1];
+
+                        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g:23:32: ^( '^' ID INT[e2] )
+                        {
+                            CommonTree *root_2 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                            root_2 = (CommonTree *)[treeAdaptor becomeRoot:/* ASTTreeParser createRewriteNodeFromElement */
+                            [stream_9 nextNode]
+                             old:root_2];
+
+                             // TODO: args:
+                            [treeAdaptor addChild:/* ASTTreeParser createRewriteNodeFromElement */
+                            [stream_ID nextNode]
+                             toTree:root_2];
+
+                            [treeAdaptor addChild:
+                                    [[treeAdaptor createTree:INT FromToken:e2 Text:@"INT"] retain]
+                             toTree:root_2];
+
+                            [treeAdaptor addChild:root_2 toTree:root_1];
+                        }
+
+                        [treeAdaptor addChild:root_1 toTree:root_0];
+                    }
+
+                }
+
+
+                retval.tree = root_0;
+
+
+                }
+                break;
+            case 5 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g:24:4: INT // alt
+                {
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                INT12=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_poly164];
+                    [stream_INT addElement:INT12];
+
+
+                // AST REWRITE
+                // elements: INT
+                // token labels:
+                // rule labels: retval
+                // token list labels:
+                // rule list labels:
+                // wildcard labels:
+                retval.tree = root_0;
+
+                RewriteRuleSubtreeStream *stream_retval =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];
+
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+                // 24:12: -> INT[@\"0\"]
+                {
+                    [treeAdaptor addChild:
+                            [[treeAdaptor createTree:INT FromToken:@"0" Text:@"INT"] retain]
+                     toTree:root_0];
+
+                }
+
+
+                retval.tree = root_0;
+
+
+                }
+                break;
+            case 6 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.g:25:4: ID // alt
+                {
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                ID13=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_poly178];
+                    [stream_ID addElement:ID13];
+
+
+                // AST REWRITE
+                // elements:
+                // token labels:
+                // rule labels: retval
+                // token list labels:
+                // rule list labels:
+                // wildcard labels:
+                retval.tree = root_0;
+
+                RewriteRuleSubtreeStream *stream_retval =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];
+
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+                // 25:11: -> INT[@\"1\"]
+                {
+                    [treeAdaptor addChild:
+                            [[treeAdaptor createTree:INT FromToken:@"1" Text:@"INT"] retain]
+                     toTree:root_0];
+
+                }
+
+
+                retval.tree = root_0;
+
+
+                }
+                break;
+
+        }
+        /* ASTTreeParser ruleCleanUp */
+        /* AST ruleCleanUp */
+        /* token+rule list labels */
+
+        [stream_INT release];
+        [stream_MULT release];
+        [stream_ID release];
+        [stream_9 release];
+
+        retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return retval;
+}
+/* $ANTLR end poly */
+/* ObjC end rules */
+
+@end /* end of PolyDifferentiator implementation line 692 */
diff --git a/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.tokens b/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.tokens
new file mode 100644
index 0000000..c711b35
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/PolyDifferentiator.tokens
@@ -0,0 +1,8 @@
+T__8=8
+T__9=9
+ID=4
+INT=5
+MULT=6
+WS=7
+'+'=8
+'^'=9
diff --git a/runtime/ObjC/Framework/examples/polydiff/PolyLexer.h b/runtime/ObjC/Framework/examples/polydiff/PolyLexer.h
new file mode 100644
index 0000000..ca69ffa
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/PolyLexer.h
@@ -0,0 +1,44 @@
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g 2012-02-16 18:10:11
+
+/* =============================================================================
+ * Standard antlr OBJC runtime definitions
+ */
+#import <Cocoa/Cocoa.h>
+#import <ANTLR/ANTLR.h>
+/* End of standard antlr3 runtime definitions
+ * =============================================================================
+ */
+
+/* Start cyclicDFAInterface */
+
+#pragma mark Rule return scopes Interface start
+#pragma mark Rule return scopes Interface end
+#pragma mark Tokens
+#ifdef EOF
+#undef EOF
+#endif
+#define EOF -1
+#define T__8 8
+#define T__9 9
+#define ID 4
+#define INT 5
+#define MULT 6
+#define WS 7
+/* interface lexer class */
+@interface PolyLexer : Lexer { // line 283
+/* ObjC start of actions.lexer.memVars */
+/* ObjC end of actions.lexer.memVars */
+}
++ (void) initialize;
++ (PolyLexer *)newPolyLexerWithCharStream:(id<CharStream>)anInput;
+/* ObjC start actions.lexer.methodsDecl */
+/* ObjC end actions.lexer.methodsDecl */
+- (void) mT__8 ;
+- (void) mT__9 ;
+- (NSString *) mID ;
+- (NSString *) mINT ;
+- (void) mWS ;
+- (void) mTokens ;
+
+@end /* end of PolyLexer interface */
+
diff --git a/runtime/ObjC/Framework/examples/polydiff/PolyLexer.m b/runtime/ObjC/Framework/examples/polydiff/PolyLexer.m
new file mode 100644
index 0000000..1be0324
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/PolyLexer.m
@@ -0,0 +1,486 @@
+/** \file
+ *  This OBJC source file was generated by $ANTLR version 3.4
+ *
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g
+ *     -                            On : 2012-02-16 18:10:11
+ *     -                 for the lexer : PolyLexerLexer
+ *
+ * Editing it, at least manually, is not wise.
+ *
+ * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
+ *
+ *
+*/
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g 2012-02-16 18:10:11
+
+
+/* -----------------------------------------
+ * Include the ANTLR3 generated header file.
+ */
+#import "PolyLexer.h"
+/* ----------------------------------------- */
+
+
+/* ============================================================================= */
+/* =============================================================================
+ * Start of recognizer
+ */
+
+/** As per Terence: No returns for lexer rules! */
+@implementation PolyLexer // line 330
+
++ (void) initialize
+{
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g"];
+}
+
++ (NSString *) tokenNameForType:(NSInteger)aTokenType
+{
+    return [[self getTokenNames] objectAtIndex:aTokenType];
+}
+
++ (PolyLexer *)newPolyLexerWithCharStream:(id<CharStream>)anInput
+{
+    return [[PolyLexer alloc] initWithCharStream:anInput];
+}
+
+- (id) initWithCharStream:(id<CharStream>)anInput
+{
+    self = [super initWithCharStream:anInput State:[RecognizerSharedState newRecognizerSharedStateWithRuleLen:6+1]];
+    if ( self != nil ) {
+    }
+    return self;
+}
+
+- (void) dealloc
+{
+    [super dealloc];
+}
+
+/* ObjC Start of actions.lexer.methods */
+/* ObjC end of actions.lexer.methods */
+/* ObjC start methods() */
+/* ObjC end methods() */
+
+/* Start of Rules */
+// $ANTLR start "T__8"
+- (void) mT__8
+{
+    //
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+
+    @try {
+        NSInteger _type = T__8;
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:7:6: ( '+' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:7:8: '+' // alt
+        {
+
+
+        [self matchChar:'+'];
+
+
+        }
+
+        /* token+rule list labels */
+
+        state.type = _type;
+        state.channel = _channel;
+    }
+    @finally {
+        //
+        /* ruleScopeCleanUp */
+
+    }
+    return;
+}
+/* $ANTLR end "T__8" */
+// $ANTLR start "T__9"
+- (void) mT__9
+{
+    //
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+
+    @try {
+        NSInteger _type = T__9;
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:8:6: ( '^' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:8:8: '^' // alt
+        {
+
+
+        [self matchChar:'^'];
+
+
+        }
+
+        /* token+rule list labels */
+
+        state.type = _type;
+        state.channel = _channel;
+    }
+    @finally {
+        //
+        /* ruleScopeCleanUp */
+
+    }
+    return;
+}
+/* $ANTLR end "T__9" */
+// $ANTLR start "ID"
+- (void) mID
+{
+    //
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+    NSString * value = nil ;
+
+
+    @try {
+        NSInteger _type = ID;
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:22:5: ( ( 'a' .. 'z' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:22:7: ( 'a' .. 'z' )+ // alt
+        {
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:22:7: ( 'a' .. 'z' )+ // positiveClosureBlock
+        NSInteger cnt1 = 0;
+        do {
+            NSInteger alt1 = 2;
+            NSInteger LA1_0 = [input LA:1];
+            if ( ((LA1_0 >= 'a' && LA1_0 <= 'z')) ) {
+                alt1=1;
+            }
+
+
+            switch (alt1) {
+                case 1 : ;
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g: // alt
+                    {
+
+                    if ((([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
+                        [input consume];
+                    } else {
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
+                        [self recover:mse];
+                        @throw mse;
+                    }
+
+
+                    }
+                    break;
+
+                default :
+                    if ( cnt1 >= 1 )
+                        goto loop1;
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:1];
+                    @throw eee;
+            }
+            cnt1++;
+        } while (YES);
+        loop1: ;
+
+
+        }
+
+        /* token+rule list labels */
+
+        state.type = _type;
+        state.channel = _channel;
+    }
+    @finally {
+        //
+        /* ruleScopeCleanUp */
+
+    }
+    return;
+}
+/* $ANTLR end "ID" */
+// $ANTLR start "INT"
+- (void) mINT
+{
+    //
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+    NSString * value = nil ;
+
+
+    @try {
+        NSInteger _type = INT;
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:25:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:25:7: ( '0' .. '9' )+ // alt
+        {
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:25:7: ( '0' .. '9' )+ // positiveClosureBlock
+        NSInteger cnt2 = 0;
+        do {
+            NSInteger alt2 = 2;
+            NSInteger LA2_0 = [input LA:1];
+            if ( ((LA2_0 >= '0' && LA2_0 <= '9')) ) {
+                alt2=1;
+            }
+
+
+            switch (alt2) {
+                case 1 : ;
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g: // alt
+                    {
+
+                    if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))) {
+                        [input consume];
+                    } else {
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
+                        [self recover:mse];
+                        @throw mse;
+                    }
+
+
+                    }
+                    break;
+
+                default :
+                    if ( cnt2 >= 1 )
+                        goto loop2;
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:2];
+                    @throw eee;
+            }
+            cnt2++;
+        } while (YES);
+        loop2: ;
+
+
+        }
+
+        /* token+rule list labels */
+
+        state.type = _type;
+        state.channel = _channel;
+    }
+    @finally {
+        //
+        /* ruleScopeCleanUp */
+
+    }
+    return;
+}
+/* $ANTLR end "INT" */
+// $ANTLR start "WS"
+- (void) mWS
+{
+    //
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+
+    @try {
+        NSInteger _type = WS;
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:27:4: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:27:6: ( ' ' | '\\t' | '\\r' | '\\n' )+ // alt
+        {
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:27:6: ( ' ' | '\\t' | '\\r' | '\\n' )+ // positiveClosureBlock
+        NSInteger cnt3 = 0;
+        do {
+            NSInteger alt3 = 2;
+            NSInteger LA3_0 = [input LA:1];
+            if ( ((LA3_0 >= '\t' && LA3_0 <= '\n')||LA3_0=='\r'||LA3_0==' ') ) {
+                alt3=1;
+            }
+
+
+            switch (alt3) {
+                case 1 : ;
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g: // alt
+                    {
+
+                    if ((([input LA:1] >= '\t') && ([input LA:1] <= '\n'))||[input LA:1] == '\r'||[input LA:1] == ' ') {
+                        [input consume];
+                    } else {
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
+                        [self recover:mse];
+                        @throw mse;
+                    }
+
+
+                    }
+                    break;
+
+                default :
+                    if ( cnt3 >= 1 )
+                        goto loop3;
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:3];
+                    @throw eee;
+            }
+            cnt3++;
+        } while (YES);
+        loop3: ;
+
+
+
+         _channel=HIDDEN;
+
+
+        }
+
+        /* token+rule list labels */
+
+        state.type = _type;
+        state.channel = _channel;
+    }
+    @finally {
+        //
+        /* ruleScopeCleanUp */
+
+    }
+    return;
+}
+/* $ANTLR end "WS" */
+- (void) mTokens
+{
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:1:8: ( T__8 | T__9 | ID | INT | WS ) //ruleblock
+    NSInteger alt4=5;
+    unichar charLA4 = [input LA:1];
+    switch (charLA4) {
+        case '+': ;
+            {
+            alt4=1;
+            }
+            break;
+        case '^': ;
+            {
+            alt4=2;
+            }
+            break;
+        case 'a': ;
+        case 'b': ;
+        case 'c': ;
+        case 'd': ;
+        case 'e': ;
+        case 'f': ;
+        case 'g': ;
+        case 'h': ;
+        case 'i': ;
+        case 'j': ;
+        case 'k': ;
+        case 'l': ;
+        case 'm': ;
+        case 'n': ;
+        case 'o': ;
+        case 'p': ;
+        case 'q': ;
+        case 'r': ;
+        case 's': ;
+        case 't': ;
+        case 'u': ;
+        case 'v': ;
+        case 'w': ;
+        case 'x': ;
+        case 'y': ;
+        case 'z': ;
+            {
+            alt4=3;
+            }
+            break;
+        case '0': ;
+        case '1': ;
+        case '2': ;
+        case '3': ;
+        case '4': ;
+        case '5': ;
+        case '6': ;
+        case '7': ;
+        case '8': ;
+        case '9': ;
+            {
+            alt4=4;
+            }
+            break;
+        case '\t': ;
+        case '\n': ;
+        case '\r': ;
+        case ' ': ;
+            {
+            alt4=5;
+            }
+            break;
+
+    default: ;
+        NoViableAltException *nvae = [NoViableAltException newException:4 state:0 stream:input];
+        nvae.c = charLA4;
+        @throw nvae;
+
+    }
+
+    switch (alt4) {
+        case 1 : ;
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:1:10: T__8 // alt
+            {
+
+
+            [self mT__8];
+
+
+
+            }
+            break;
+        case 2 : ;
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:1:15: T__9 // alt
+            {
+
+
+            [self mT__9];
+
+
+
+            }
+            break;
+        case 3 : ;
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:1:20: ID // alt
+            {
+
+
+            [self mID];
+
+
+
+            }
+            break;
+        case 4 : ;
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:1:23: INT // alt
+            {
+
+
+            [self mINT];
+
+
+
+            }
+            break;
+        case 5 : ;
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:1:27: WS // alt
+            {
+
+
+            [self mWS];
+
+
+
+            }
+            break;
+
+    }
+
+}
+
+@end /* end of PolyLexer implementation line 397 */
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/examples/polydiff/PolyParser.h b/runtime/ObjC/Framework/examples/polydiff/PolyParser.h
new file mode 100644
index 0000000..7d769b5
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/PolyParser.h
@@ -0,0 +1,156 @@
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g 2012-02-16 18:10:10
+
+/* =============================================================================
+ * Standard antlr OBJC runtime definitions
+ */
+#import <Cocoa/Cocoa.h>
+#import <ANTLR/ANTLR.h>
+/* End of standard antlr3 runtime definitions
+ * =============================================================================
+ */
+
+/* parserHeaderFile */
+#ifndef ANTLR3TokenTypeAlreadyDefined
+#define ANTLR3TokenTypeAlreadyDefined
+typedef enum {
+    ANTLR_EOF = -1,
+    INVALID,
+    EOR,
+    DOWN,
+    UP,
+    MIN
+} ANTLR3TokenType;
+#endif
+
+#pragma mark Tokens
+#ifdef EOF
+#undef EOF
+#endif
+#define EOF -1
+#define T__8 8
+#define T__9 9
+#define ID 4
+#define INT 5
+#define MULT 6
+#define WS 7
+#pragma mark Dynamic Global Scopes globalAttributeScopeInterface
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeInterface
+#pragma mark Rule Return Scopes returnScopeInterface
+/* returnScopeInterface PolyParser_poly_return */
+@interface PolyParser_poly_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
+/* AST returnScopeInterface.memVars */
+CommonTree *tree; /* ObjC start of memVars() */
+
+}
+/* start property declarations */
+/* AST returnScopeInterface.properties */
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
++ (PolyParser_poly_return *)newPolyParser_poly_return;
+/* this is start of set and get methods */
+/* AST returnScopeInterface.methodsDecl */
+- (CommonTree *)getTree;
+
+- (void) setTree:(CommonTree *)aTree;
+  /* methodsDecl */
+
+@end /* end of returnScopeInterface interface */
+
+
+/* returnScopeInterface PolyParser_term_return */
+@interface PolyParser_term_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
+/* AST returnScopeInterface.memVars */
+CommonTree *tree; /* ObjC start of memVars() */
+
+}
+/* start property declarations */
+/* AST returnScopeInterface.properties */
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
++ (PolyParser_term_return *)newPolyParser_term_return;
+/* this is start of set and get methods */
+/* AST returnScopeInterface.methodsDecl */
+- (CommonTree *)getTree;
+
+- (void) setTree:(CommonTree *)aTree;
+  /* methodsDecl */
+
+@end /* end of returnScopeInterface interface */
+
+
+/* returnScopeInterface PolyParser_exp_return */
+@interface PolyParser_exp_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
+/* AST returnScopeInterface.memVars */
+CommonTree *tree; /* ObjC start of memVars() */
+
+}
+/* start property declarations */
+/* AST returnScopeInterface.properties */
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
++ (PolyParser_exp_return *)newPolyParser_exp_return;
+/* this is start of set and get methods */
+/* AST returnScopeInterface.methodsDecl */
+- (CommonTree *)getTree;
+
+- (void) setTree:(CommonTree *)aTree;
+  /* methodsDecl */
+
+@end /* end of returnScopeInterface interface */
+
+
+
+/* Interface grammar class */
+@interface PolyParser  : Parser { /* line 572 */
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeDecl
+#pragma mark Dynamic Global Rule Scopes globalAttributeScopeMemVar
+
+
+/* ObjC start of actions.(actionScope).memVars */
+/* ObjC end of actions.(actionScope).memVars */
+/* ObjC start of memVars */
+/* AST parserHeaderFile.memVars */
+NSInteger ruleLevel;
+NSArray *ruleNames;
+  /* AST super.memVars */
+/* AST parserMemVars */
+id<TreeAdaptor> treeAdaptor;   /* AST parserMemVars */
+/* ObjC end of memVars */
+
+ }
+
+/* ObjC start of actions.(actionScope).properties */
+/* ObjC end of actions.(actionScope).properties */
+/* ObjC start of properties */
+/* AST parserHeaderFile.properties */
+  /* AST super.properties */
+/* AST parserProperties */
+@property (retain, getter=getTreeAdaptor, setter=setTreeAdaptor:) id<TreeAdaptor> treeAdaptor;   /* AST parserproperties */
+/* ObjC end of properties */
+
++ (void) initialize;
++ (id) newPolyParser:(id<TokenStream>)aStream;
+/* ObjC start of actions.(actionScope).methodsDecl */
+/* ObjC end of actions.(actionScope).methodsDecl */
+
+/* ObjC start of methodsDecl */
+/* AST parserHeaderFile.methodsDecl */
+  /* AST super.methodsDecl */
+/* AST parserMethodsDecl */
+- (id<TreeAdaptor>) getTreeAdaptor;
+- (void) setTreeAdaptor:(id<TreeAdaptor>)theTreeAdaptor;   /* AST parsermethodsDecl */
+/* ObjC end of methodsDecl */
+
+- (PolyParser_poly_return *)poly;
+- (PolyParser_term_return *)term;
+- (PolyParser_exp_return *)exp;
+
+
+@end /* end of PolyParser interface */
+
diff --git a/runtime/ObjC/Framework/examples/polydiff/PolyParser.m b/runtime/ObjC/Framework/examples/polydiff/PolyParser.m
new file mode 100644
index 0000000..4b80147
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/PolyParser.m
@@ -0,0 +1,757 @@
+/** \file
+ *  This OBJC source file was generated by $ANTLR version 3.4
+ *
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g
+ *     -                            On : 2012-02-16 18:10:10
+ *     -                for the parser : PolyParserParser
+ *
+ * Editing it, at least manually, is not wise.
+ *
+ * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
+ *
+ *
+*/
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g 2012-02-16 18:10:10
+
+
+/* -----------------------------------------
+ * Include the ANTLR3 generated header file.
+ */
+#import "PolyParser.h"
+/* ----------------------------------------- */
+
+
+/* ============================================================================= */
+/* =============================================================================
+ * Start of recognizer
+ */
+
+#pragma mark Bitsets
+static ANTLRBitSet *FOLLOW_term_in_poly43;
+static const unsigned long long FOLLOW_term_in_poly43_data[] = { 0x0000000000000102LL};
+static ANTLRBitSet *FOLLOW_8_in_poly46;
+static const unsigned long long FOLLOW_8_in_poly46_data[] = { 0x0000000000000030LL};
+static ANTLRBitSet *FOLLOW_term_in_poly49;
+static const unsigned long long FOLLOW_term_in_poly49_data[] = { 0x0000000000000102LL};
+static ANTLRBitSet *FOLLOW_INT_in_term63;
+static const unsigned long long FOLLOW_INT_in_term63_data[] = { 0x0000000000000010LL};
+static ANTLRBitSet *FOLLOW_ID_in_term65;
+static const unsigned long long FOLLOW_ID_in_term65_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_INT_in_term85;
+static const unsigned long long FOLLOW_INT_in_term85_data[] = { 0x0000000000000010LL};
+static ANTLRBitSet *FOLLOW_exp_in_term87;
+static const unsigned long long FOLLOW_exp_in_term87_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_exp_in_term106;
+static const unsigned long long FOLLOW_exp_in_term106_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_INT_in_term114;
+static const unsigned long long FOLLOW_INT_in_term114_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_ID_in_term119;
+static const unsigned long long FOLLOW_ID_in_term119_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_ID_in_exp132;
+static const unsigned long long FOLLOW_ID_in_exp132_data[] = { 0x0000000000000200LL};
+static ANTLRBitSet *FOLLOW_9_in_exp134;
+static const unsigned long long FOLLOW_9_in_exp134_data[] = { 0x0000000000000020LL};
+static ANTLRBitSet *FOLLOW_INT_in_exp137;
+static const unsigned long long FOLLOW_INT_in_exp137_data[] = { 0x0000000000000002LL};
+
+
+#pragma mark Dynamic Global globalAttributeScopeImplementation
+
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation
+
+#pragma mark Rule Return Scopes returnScopeImplementation
+@implementation PolyParser_poly_return /* returnScopeImplementation */
+/* AST returnScope.synthesize */
+@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
++ (PolyParser_poly_return *)newPolyParser_poly_return
+{
+return [[[PolyParser_poly_return alloc] init] retain];
+}
+
+- (id) init
+{
+self = [super init];
+return self;
+}
+
+/* AST returnScope.methods */
+- (CommonTree *)getTree
+{
+    return tree;
+}
+
+- (void) setTree:(CommonTree *)aTree
+{
+    if (tree != aTree) {
+        if (tree != nil) [tree release];
+        if (aTree != nil) [aTree retain];
+        tree = aTree;
+    }
+}
+
+- (void) dealloc
+{
+    self.tree = nil;
+    [super dealloc];
+}
+
+
+@end /* end of returnScope implementation */
+
+@implementation PolyParser_term_return /* returnScopeImplementation */
+/* AST returnScope.synthesize */
+@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
++ (PolyParser_term_return *)newPolyParser_term_return
+{
+return [[[PolyParser_term_return alloc] init] retain];
+}
+
+- (id) init
+{
+self = [super init];
+return self;
+}
+
+/* AST returnScope.methods */
+- (CommonTree *)getTree
+{
+    return tree;
+}
+
+- (void) setTree:(CommonTree *)aTree
+{
+    if (tree != aTree) {
+        if (tree != nil) [tree release];
+        if (aTree != nil) [aTree retain];
+        tree = aTree;
+    }
+}
+
+- (void) dealloc
+{
+    self.tree = nil;
+    [super dealloc];
+}
+
+
+@end /* end of returnScope implementation */
+
+@implementation PolyParser_exp_return /* returnScopeImplementation */
+/* AST returnScope.synthesize */
+@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
++ (PolyParser_exp_return *)newPolyParser_exp_return
+{
+return [[[PolyParser_exp_return alloc] init] retain];
+}
+
+- (id) init
+{
+self = [super init];
+return self;
+}
+
+/* AST returnScope.methods */
+- (CommonTree *)getTree
+{
+    return tree;
+}
+
+- (void) setTree:(CommonTree *)aTree
+{
+    if (tree != aTree) {
+        if (tree != nil) [tree release];
+        if (aTree != nil) [aTree retain];
+        tree = aTree;
+    }
+}
+
+- (void) dealloc
+{
+    self.tree = nil;
+    [super dealloc];
+}
+
+
+@end /* end of returnScope implementation */
+
+
+
+@implementation PolyParser  // line 637
+
+/* ObjC start of ruleAttributeScope */
+#pragma mark Dynamic Rule Scopes ruleAttributeScope
+/* ObjC end of ruleAttributeScope */
+#pragma mark global Attribute Scopes globalAttributeScope
+/* ObjC start globalAttributeScope */
+/* ObjC end globalAttributeScope */
+/* ObjC start actions.(actionScope).synthesize */
+/* ObjC start synthesize() */
+/* AST genericParser.synthesize */
+/* AST parserProperties */
+@synthesize treeAdaptor;
+
++ (void) initialize
+{
+    #pragma mark Bitsets
+    FOLLOW_term_in_poly43 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_term_in_poly43_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_poly46 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_poly46_data Count:(NSUInteger)1] retain];
+    FOLLOW_term_in_poly49 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_term_in_poly49_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_term63 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_term63_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_term65 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_term65_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_term85 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_term85_data Count:(NSUInteger)1] retain];
+    FOLLOW_exp_in_term87 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_exp_in_term87_data Count:(NSUInteger)1] retain];
+    FOLLOW_exp_in_term106 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_exp_in_term106_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_term114 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_term114_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_term119 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_term119_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_exp132 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_exp132_data Count:(NSUInteger)1] retain];
+    FOLLOW_9_in_exp134 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_exp134_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_exp137 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_exp137_data Count:(NSUInteger)1] retain];
+
+    [BaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
+ @"ID", @"INT", @"MULT", @"WS", @"'+'", @"'^'", nil] retain]];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g"];
+}
+
++ (PolyParser *)newPolyParser:(id<TokenStream>)aStream
+{
+    return [[PolyParser alloc] initWithTokenStream:aStream];
+}
+
+- (id) initWithTokenStream:(id<TokenStream>)aStream
+{
+    self = [super initWithTokenStream:aStream State:[[RecognizerSharedState newRecognizerSharedStateWithRuleLen:3+1] retain]];
+    if ( self != nil ) {
+        /* start of actions-actionScope-init */
+        /* start of init */
+        /* AST genericParser.init */
+        [self setTreeAdaptor:[[CommonTreeAdaptor newTreeAdaptor] retain]];
+    }
+    return self;
+}
+
+- (void) dealloc
+{
+    /* AST genericParser.dealloc */
+    [self setTreeAdaptor:nil];
+
+    [super dealloc];
+}
+
+/* ObjC start actions.(actionScope).methods */
+/* ObjC end actions.(actionScope).methods */
+/* ObjC start methods() */
+/* AST genericParser.methods */
+/* AST parserMethods */
+- (id<TreeAdaptor>) getTreeAdaptor
+{
+	return treeAdaptor;
+}
+
+- (void) setTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor
+{
+	if (aTreeAdaptor != treeAdaptor) {
+		treeAdaptor = aTreeAdaptor;
+	}
+}
+/* ObjC end methods() */
+/* ObjC start rules */
+/*
+ * $ANTLR start poly
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:8:1: poly : term ( '+' ^ term )* ;
+ */
+- (PolyParser_poly_return *) poly
+{
+    /* ruleScopeSetUp */
+
+    /* AST ruleDeclarations */
+    /* ruleDeclarations */
+    PolyParser_poly_return * retval = [PolyParser_poly_return newPolyParser_poly_return];
+    [retval setStart:[input LT:1]];
+
+
+    CommonTree *root_0 = nil;
+
+    @try {
+        /* AST ruleLabelDefs */
+        /* ruleLabelDefs entry */
+        CommonToken *char_literal2 = nil;PolyParser_term_return * term1 = nil ;
+
+        PolyParser_term_return * term3 = nil ;
+
+
+        CommonTree *char_literal2_tree=nil;
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:8:5: ( term ( '+' ^ term )* ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:8:7: term ( '+' ^ term )* // alt
+        {
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+
+
+        /* ASTParser ruleRef */
+        /* ruleRef */
+        [self pushFollow:FOLLOW_term_in_poly43];
+        term1 = [self term];
+
+        [self popFollow];
+
+
+        [treeAdaptor addChild:[term1 getTree] toTree:root_0];
+
+
+        do {
+            NSInteger alt1=2;
+            NSInteger LA1_0 = [input LA:1];
+            if ( (LA1_0==8) ) {
+                alt1=1;
+            }
+
+
+            switch (alt1) {
+                case 1 : ;
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:8:13: '+' ^ term // alt
+                    {
+
+                    char_literal2=(CommonToken *)[self match:input TokenType:8 Follow:FOLLOW_8_in_poly46];
+                    char_literal2_tree = /* ASTParser createNodeFromToken */
+                    (CommonTree *)[[treeAdaptor create:char_literal2] retain]
+                    ;
+                    root_0 = (CommonTree *)[treeAdaptor becomeRoot:char_literal2_tree old:root_0];
+
+
+                    /* ASTParser ruleRef */
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_term_in_poly49];
+                    term3 = [self term];
+
+                    [self popFollow];
+
+
+                    [treeAdaptor addChild:[term3 getTree] toTree:root_0];
+
+                    }
+                    break;
+
+                default :
+                    goto loop1;
+            }
+        } while (YES);
+        loop1: ;
+
+
+        }
+
+        /* ASTParser ruleCleanUp */
+        /* AST ruleCleanUp */
+        /* token+rule list labels */
+        [retval setStop:[input LT:-1]];
+
+
+
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            [treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+        /* ASTParser rule.setErrorReturnValue */
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return retval;
+}
+/* $ANTLR end poly */
+
+/*
+ * $ANTLR start term
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:11:1: term : ( INT ID -> ^( MULT[@\"*\"] INT ID ) | INT exp -> ^( MULT[@\"*\"] INT exp ) | exp | INT | ID );
+ */
+- (PolyParser_term_return *) term
+{
+    /* ruleScopeSetUp */
+
+    /* AST ruleDeclarations */
+    /* ruleDeclarations */
+    PolyParser_term_return * retval = [PolyParser_term_return newPolyParser_term_return];
+    [retval setStart:[input LT:1]];
+
+
+    CommonTree *root_0 = nil;
+
+    @try {
+        /* AST ruleLabelDefs */
+        /* ruleLabelDefs entry */
+        CommonToken *INT4 = nil;
+        CommonToken *ID5 = nil;
+        CommonToken *INT6 = nil;
+        CommonToken *INT9 = nil;
+        CommonToken *ID10 = nil;PolyParser_exp_return * exp7 = nil ;
+
+        PolyParser_exp_return * exp8 = nil ;
+
+
+        CommonTree *INT4_tree=nil;
+        CommonTree *ID5_tree=nil;
+        CommonTree *INT6_tree=nil;
+        CommonTree *INT9_tree=nil;
+        CommonTree *ID10_tree=nil;
+        RewriteRuleTokenStream *stream_INT =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
+                                                             description:@"token INT"] retain];
+        RewriteRuleTokenStream *stream_ID =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
+                                                             description:@"token ID"] retain];
+        RewriteRuleSubtreeStream *stream_exp =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                                                                description:@"rule exp"] retain];
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:11:5: ( INT ID -> ^( MULT[@\"*\"] INT ID ) | INT exp -> ^( MULT[@\"*\"] INT exp ) | exp | INT | ID ) //ruleblock
+        NSInteger alt2=5;
+        NSInteger LA2_0 = [input LA:1];
+
+        if ( (LA2_0==INT) ) {
+            NSInteger LA2_1 = [input LA:2];
+
+            if ( (LA2_1==ID) ) {
+                NSInteger LA2_3 = [input LA:3];
+
+                if ( (LA2_3==9) ) {
+                    alt2=2;
+                }
+                else if ( (LA2_3==EOF||LA2_3==8) ) {
+                    alt2=1;
+                }
+                else {
+                    NoViableAltException *nvae = [NoViableAltException newException:2 state:3 stream:input];
+                    nvae.c = LA2_3;
+                    @throw nvae;
+
+                }
+            }
+            else if ( (LA2_1==EOF||LA2_1==8) ) {
+                alt2=4;
+            }
+            else {
+                NoViableAltException *nvae = [NoViableAltException newException:2 state:1 stream:input];
+                nvae.c = LA2_1;
+                @throw nvae;
+
+            }
+        }
+        else if ( (LA2_0==ID) ) {
+            NSInteger LA2_2 = [input LA:2];
+
+            if ( (LA2_2==9) ) {
+                alt2=3;
+            }
+            else if ( (LA2_2==EOF||LA2_2==8) ) {
+                alt2=5;
+            }
+            else {
+                NoViableAltException *nvae = [NoViableAltException newException:2 state:2 stream:input];
+                nvae.c = LA2_2;
+                @throw nvae;
+
+            }
+        }
+        else {
+            NoViableAltException *nvae = [NoViableAltException newException:2 state:0 stream:input];
+            nvae.c = LA2_0;
+            @throw nvae;
+
+        }
+        switch (alt2) {
+            case 1 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:11:7: INT ID // alt
+                {
+
+                INT4=(CommonToken *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_term63];
+                    [stream_INT addElement:INT4];
+
+
+                ID5=(CommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_term65];
+                    [stream_ID addElement:ID5];
+
+
+                // AST REWRITE
+                // elements: ID, INT
+                // token labels:
+                // rule labels: retval
+                // token list labels:
+                // rule list labels:
+                // wildcard labels:
+                retval.tree = root_0;
+
+                RewriteRuleSubtreeStream *stream_retval =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];
+
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+                // 11:15: -> ^( MULT[@\"*\"] INT ID )
+                {
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:11:18: ^( MULT[@\"*\"] INT ID )
+                    {
+                        CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                        root_1 = (CommonTree *)[treeAdaptor becomeRoot:
+                                [[treeAdaptor createTree:MULT FromToken:@"*" Text:@"MULT"] retain]
+                         old:root_1];
+
+                         // TODO: args:
+                        [treeAdaptor addChild:
+                                    [stream_INT nextNode]
+                         toTree:root_1];
+
+                         // TODO: args:
+                        [treeAdaptor addChild:
+                                    [stream_ID nextNode]
+                         toTree:root_1];
+
+                        [treeAdaptor addChild:root_1 toTree:root_0];
+                    }
+
+                }
+
+
+                retval.tree = root_0;
+
+
+                }
+                break;
+            case 2 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:12:7: INT exp // alt
+                {
+
+                INT6=(CommonToken *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_term85];
+                    [stream_INT addElement:INT6];
+
+
+                /* ruleRef */
+                [self pushFollow:FOLLOW_exp_in_term87];
+                exp7 = [self exp];
+
+                [self popFollow];
+
+
+                [stream_exp addElement:[exp7 getTree]];
+
+                // AST REWRITE
+                // elements: exp, INT
+                // token labels:
+                // rule labels: retval
+                // token list labels:
+                // rule list labels:
+                // wildcard labels:
+                retval.tree = root_0;
+
+                RewriteRuleSubtreeStream *stream_retval =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];
+
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+                // 12:15: -> ^( MULT[@\"*\"] INT exp )
+                {
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:12:18: ^( MULT[@\"*\"] INT exp )
+                    {
+                        CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                        root_1 = (CommonTree *)[treeAdaptor becomeRoot:
+                                [[treeAdaptor createTree:MULT FromToken:@"*" Text:@"MULT"] retain]
+                         old:root_1];
+
+                         // TODO: args:
+                        [treeAdaptor addChild:
+                                    [stream_INT nextNode]
+                         toTree:root_1];
+
+                        [treeAdaptor addChild:[stream_exp nextTree] toTree:root_1];
+
+                        [treeAdaptor addChild:root_1 toTree:root_0];
+                    }
+
+                }
+
+
+                retval.tree = root_0;
+
+
+                }
+                break;
+            case 3 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:13:7: exp // alt
+                {
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+
+
+                /* ASTParser ruleRef */
+                /* ruleRef */
+                [self pushFollow:FOLLOW_exp_in_term106];
+                exp8 = [self exp];
+
+                [self popFollow];
+
+
+                [treeAdaptor addChild:[exp8 getTree] toTree:root_0];
+
+                }
+                break;
+            case 4 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:14:7: INT // alt
+                {
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+
+
+                /* ASTParser tokenRef */
+                INT9=(CommonToken *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_term114];
+                INT9_tree = /* ASTParser createNodeFromToken */
+                (CommonTree *)[[treeAdaptor create:INT9] retain]
+                ;
+                [treeAdaptor addChild:INT9_tree  toTree:root_0];
+
+
+                }
+                break;
+            case 5 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:15:4: ID // alt
+                {
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+
+
+                /* ASTParser tokenRef */
+                ID10=(CommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_term119];
+                ID10_tree = /* ASTParser createNodeFromToken */
+                (CommonTree *)[[treeAdaptor create:ID10] retain]
+                ;
+                [treeAdaptor addChild:ID10_tree  toTree:root_0];
+
+
+                }
+                break;
+
+        }
+        /* ASTParser ruleCleanUp */
+        /* AST ruleCleanUp */
+        /* token+rule list labels */
+        [retval setStop:[input LT:-1]];
+
+
+        [stream_INT release];
+        [stream_ID release];
+        [stream_exp release];
+
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            [treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+        /* ASTParser rule.setErrorReturnValue */
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return retval;
+}
+/* $ANTLR end term */
+
+/*
+ * $ANTLR start exp
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:18:1: exp : ID '^' ^ INT ;
+ */
+- (PolyParser_exp_return *) exp
+{
+    /* ruleScopeSetUp */
+
+    /* AST ruleDeclarations */
+    /* ruleDeclarations */
+    PolyParser_exp_return * retval = [PolyParser_exp_return newPolyParser_exp_return];
+    [retval setStart:[input LT:1]];
+
+
+    CommonTree *root_0 = nil;
+
+    @try {
+        /* AST ruleLabelDefs */
+        /* ruleLabelDefs entry */
+        CommonToken *ID11 = nil;
+        CommonToken *char_literal12 = nil;
+        CommonToken *INT13 = nil;
+
+        CommonTree *ID11_tree=nil;
+        CommonTree *char_literal12_tree=nil;
+        CommonTree *INT13_tree=nil;
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:18:5: ( ID '^' ^ INT ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Poly.g:18:7: ID '^' ^ INT // alt
+        {
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+
+
+        /* ASTParser tokenRef */
+        ID11=(CommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_exp132];
+        ID11_tree = /* ASTParser createNodeFromToken */
+        (CommonTree *)[[treeAdaptor create:ID11] retain]
+        ;
+        [treeAdaptor addChild:ID11_tree  toTree:root_0];
+
+
+        char_literal12=(CommonToken *)[self match:input TokenType:9 Follow:FOLLOW_9_in_exp134];
+        char_literal12_tree = /* ASTParser createNodeFromToken */
+        (CommonTree *)[[treeAdaptor create:char_literal12] retain]
+        ;
+        root_0 = (CommonTree *)[treeAdaptor becomeRoot:char_literal12_tree old:root_0];
+
+
+        /* ASTParser tokenRef */
+        INT13=(CommonToken *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_exp137];
+        INT13_tree = /* ASTParser createNodeFromToken */
+        (CommonTree *)[[treeAdaptor create:INT13] retain]
+        ;
+        [treeAdaptor addChild:INT13_tree  toTree:root_0];
+
+
+        }
+
+        /* ASTParser ruleCleanUp */
+        /* AST ruleCleanUp */
+        /* token+rule list labels */
+        [retval setStop:[input LT:-1]];
+
+
+
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            [treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+        /* ASTParser rule.setErrorReturnValue */
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return retval;
+}
+/* $ANTLR end exp */
+/* ObjC end rules */
+
+@end /* end of PolyParser implementation line 692 */
diff --git a/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.g b/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.g
new file mode 100644
index 0000000..cdb3168
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.g
@@ -0,0 +1,14 @@
+tree grammar PolyPrinter;
+options {
+	tokenVocab=Poly;
+    language=ObjC;
+	ASTLabelType=CommonTree;
+	output=template;
+}
+
+poly:	^('+'  a=poly b=poly)	-> template(a={$a.st} b:b={$b.st}) "<a>+<b>"
+	|	^(MULT a=poly b=poly)	-> template(a={$a.st} b:b={$b.st}) "<a><b>"
+	|	^('^'  a=poly b=poly)	-> template(a={$a.st} b:b={$b.st}) "<a>^<b>"
+	|	INT						-> {%{$INT.text}}
+	|	ID						-> {%{$ID.text}}
+	;
diff --git a/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.h b/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.h
new file mode 100644
index 0000000..7ca63e5
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.h
@@ -0,0 +1,74 @@
+// $ANTLR 3.3.1-SNAPSHOT Jan 30, 2011 08:28:24 PolyPrinter.g 2011-01-30 08:45:32
+
+/* =============================================================================
+ * Standard antlr3 OBJC runtime definitions
+ */
+#import <Cocoa/Cocoa.h>
+#import <ANTLR/ANTLR.h>
+#import <ST4/ST.h>
+
+/* End of standard antlr3 runtime definitions
+ * =============================================================================
+ */
+
+/* treeParserHeaderFile */
+
+#ifndef ANTLR3TokenTypeAlreadyDefined
+#define ANTLR3TokenTypeAlreadyDefined
+typedef enum {
+    ANTLR_EOF = -1,
+    INVALID,
+    EOR,
+    DOWN,
+    UP,
+    MIN
+} ANTLR3TokenType;
+#endif
+
+#pragma mark Tokens
+#ifdef EOF
+#undef EOF
+#endif
+#define EOF -1
+#define T__8 8
+#define T__9 9
+#define MULT 4
+#define INT 5
+#define ID 6
+#define WS 7
+#pragma mark Dynamic Global Scopes
+#pragma mark Dynamic Rule Scopes
+#pragma mark Rule Return Scopes start
+/* returnScopeInterface */
+@interface PolyPrinter_poly_return :TreeRuleReturnScope { /* returnScopeInterface line 1838 */
+ST *st; /* start of memVars() */
+}
+ /* start properties */
++ (PolyPrinter_poly_return *)newPolyPrinter_poly_return;
+/* this is start of set and get methods */
+/* AST returnScopeInterface.methodsdecl */
+- (id) getTemplate;  /* methodsDecl */
+@end /* end of returnScopeInterface interface */
+
+#pragma mark Rule return scopes end
+@interface PolyPrinter : TreeParser { /* line 572 */
+// start of globalAttributeScopeMemVar
+
+
+// start of action-actionScope-memVars
+// start of ruleAttributeScopeMemVar
+
+
+// Start of memVars
+
+ }
+
+// start of action-actionScope-methodsDecl
++ (id) newPolyPrinter:(id<TreeNodeStream>)aStream;
+
+
+
+- (PolyPrinter_poly_return *)poly;
+
+
+@end /* end of PolyPrinter interface */
diff --git a/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.m b/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.m
new file mode 100644
index 0000000..f0af6ef
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.m
@@ -0,0 +1,390 @@
+/** \file
+ *  This OBJC source file was generated by $ANTLR version 3.3.1-SNAPSHOT Jan 30, 2011 08:28:24
+ *
+ *     -  From the grammar source file : PolyPrinter.g
+ *     -                            On : 2011-01-30 08:45:32
+ *     -           for the tree parser : PolyPrinterTreeParser *
+ * Editing it, at least manually, is not wise.
+ *
+ * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
+ *
+ *
+*/
+// [The "BSD licence"]
+// Copyright (c) 2010 Alan Condit
+//
+// All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions
+// are met:
+// 1. Redistributions of source code must retain the above copyright
+//    notice, this list of conditions and the following disclaimer.
+// 2. Redistributions in binary form must reproduce the above copyright
+//    notice, this list of conditions and the following disclaimer in the
+//    documentation and/or other materials provided with the distribution.
+// 3. The name of the author may not be used to endorse or promote products
+//    derived from this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+// $ANTLR 3.3.1-SNAPSHOT Jan 30, 2011 08:28:24 PolyPrinter.g 2011-01-30 08:45:32
+
+/* -----------------------------------------
+ * Include the ANTLR3 generated header file.
+ */
+#import <ST4/ST.h>
+#import <ST4/STGroup.h>
+#import "PolyPrinter.h"
+/* ----------------------------------------- */
+
+
+/* ============================================================================= */
+
+/* =============================================================================
+ * Start of recognizer
+ */
+
+
+
+#pragma mark Bitsets
+static ANTLRBitSet *FOLLOW_8_in_poly43;
+static const unsigned long long FOLLOW_8_in_poly43_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_poly_in_poly48;
+static const unsigned long long FOLLOW_poly_in_poly48_data[] = { 0x0000000000000370LL};
+static ANTLRBitSet *FOLLOW_poly_in_poly52;
+static const unsigned long long FOLLOW_poly_in_poly52_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_MULT_in_poly74;
+static const unsigned long long FOLLOW_MULT_in_poly74_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_poly_in_poly78;
+static const unsigned long long FOLLOW_poly_in_poly78_data[] = { 0x0000000000000370LL};
+static ANTLRBitSet *FOLLOW_poly_in_poly82;
+static const unsigned long long FOLLOW_poly_in_poly82_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_9_in_poly104;
+static const unsigned long long FOLLOW_9_in_poly104_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_poly_in_poly109;
+static const unsigned long long FOLLOW_poly_in_poly109_data[] = { 0x0000000000000370LL};
+static ANTLRBitSet *FOLLOW_poly_in_poly113;
+static const unsigned long long FOLLOW_poly_in_poly113_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_INT_in_poly134;
+static const unsigned long long FOLLOW_INT_in_poly134_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_ID_in_poly148;
+static const unsigned long long FOLLOW_ID_in_poly148_data[] = { 0x0000000000000002LL};
+
+
+#pragma mark Dynamic Global Scopes
+
+#pragma mark Dynamic Rule Scopes
+
+#pragma mark Rule return scopes start
+@implementation PolyPrinter_poly_return /* returnScope */
+ /* start of synthesize -- OBJC-Line 1837 */
++ (PolyPrinter_poly_return *)newPolyPrinter_poly_return
+{
+    return [[[PolyPrinter_poly_return alloc] init] retain];
+}
+
+- (id) getTemplate { return st; }
+
+//public StringTemplate st;
+//public Object getTemplate() { return st; }
+//public String toString() { return st==null?null:st.toString(); }
+
+@end /* end of returnScope implementation */
+
+
+
+@implementation PolyPrinter  // line 637
+
++ (void) initialize
+{
+    #pragma mark Bitsets
+    FOLLOW_8_in_poly43 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_poly43_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_poly48 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly48_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_poly52 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly52_data Count:(NSUInteger)1] retain];
+    FOLLOW_MULT_in_poly74 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_MULT_in_poly74_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_poly78 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly78_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_poly82 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly82_data Count:(NSUInteger)1] retain];
+    FOLLOW_9_in_poly104 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_poly104_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_poly109 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly109_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_poly113 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly113_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_poly134 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_poly134_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_poly148 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_poly148_data Count:(NSUInteger)1] retain];
+
+    [BaseRecognizer setTokenNames:[[NSArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
+ @"MULT", @"INT", @"ID", @"WS", @"'+'", @"'^'", nil] retain]];
+    [BaseRecognizer setGrammarFileName:@"PolyPrinter.g"];
+}
+
++ (PolyPrinter *)newPolyPrinter:(id<TreeNodeStream>)aStream
+{
+
+    return [[PolyPrinter alloc] initWithStream:aStream];
+
+}
+
+
+- (id) initWithStream:(id<TreeNodeStream>)aStream
+{
+    if ((self = [super initWithStream:aStream State:[[RecognizerSharedState newRecognizerSharedStateWithRuleLen:1+1] retain]]) != nil) {
+
+
+        /* start of actions-actionScope-init */
+        /* start of init */
+    }
+    return self;
+}
+
+- (void) dealloc
+{
+    [super dealloc];
+}
+
+/* members */
+
+
+/* start actions.actionScope.methods */
+/* start methods() */
+/*protected StringTemplateGroup templateLib = new StringTemplateGroup("PolyPrinterTemplates", AngleBracketTemplateLexer.class); */
+STGroup *templateLib = [STGroup newSTGroup];
+
+//public void setTemplateLib(StringTemplateGroup templateLib) {
+//  this.templateLib = templateLib;
+//}
+//public StringTemplateGroup getTemplateLib() {
+//  return templateLib;
+//}
+- (void) setTemplateLib:(STGroup *)aTemplateLib { templateLib = aTemplateLib; }
+- (STGroup *)getTemplateLib { return templateLib; }
+/** allows convenient multi-value initialization:
+ *  "new STAttrMap().put(...).put(...)"
+ */
+/*
+public static class STAttrMap extends HashMap {
+  public STAttrMap put(String attrName, Object value) {
+    super.put(attrName, value);
+    return this;
+  }
+  public STAttrMap put(String attrName, int value) {
+    super.put(attrName, new Integer(value));
+    return this;
+  }
+}
+ */
+// start rules
+/*
+ * $ANTLR start poly
+ * PolyPrinter.g:9:1: poly : ( ^( '+' a= poly b= poly ) -> template(a=$a.stb=$b.st) \"<a>+<b>\" | ^( MULT a= poly b= poly ) -> template(a=$a.stb=$b.st) \"<a><b>\" | ^( '^' a= poly b= poly ) -> template(a=$a.stb=$b.st) \"<a>^<b>\" | INT -> {%{$INT.text}} | ID -> {%{$ID.text}});
+ */
+- (PolyPrinter_poly_return *) poly
+{
+    /* ruleScopeSetUp */
+
+    PolyPrinter_poly_return * retval = [PolyPrinter_poly_return newPolyPrinter_poly_return];
+    [retval setStart:[input LT:1]];
+
+    @try {
+        CommonTree *INT1 = nil;
+        CommonTree *ID2 = nil;
+        PolyPrinter_poly_return * a = nil;
+
+        PolyPrinter_poly_return * b = nil;
+
+
+        // PolyPrinter.g:9:5: ( ^( '+' a= poly b= poly ) -> template(a=$a.stb=$b.st) \"<a>+<b>\" | ^( MULT a= poly b= poly ) -> template(a=$a.stb=$b.st) \"<a><b>\" | ^( '^' a= poly b= poly ) -> template(a=$a.stb=$b.st) \"<a>^<b>\" | INT -> {%{$INT.text}} | ID -> {%{$ID.text}}) //ruleblock
+        NSInteger alt1=5;
+        switch ([input LA:1]) {
+            case 8: ;
+                {
+                alt1=1;
+                }
+                break;
+            case MULT: ;
+                {
+                alt1=2;
+                }
+                break;
+            case 9: ;
+                {
+                alt1=3;
+                }
+                break;
+            case INT: ;
+                {
+                alt1=4;
+                }
+                break;
+            case ID: ;
+                {
+                alt1=5;
+                }
+                break;
+
+        default: ;
+            NoViableAltException *nvae = [NoViableAltException newException:1 state:0 stream:input];
+            @throw nvae;
+        }
+
+        switch (alt1) {
+            case 1 : ;
+                // PolyPrinter.g:9:7: ^( '+' a= poly b= poly ) // alt
+                {
+                [self match:input TokenType:8 Follow:FOLLOW_8_in_poly43];
+
+                    [self match:input TokenType:DOWN Follow:nil];
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_poly_in_poly48];
+                    a = [self poly];
+
+                    [self popFollow];
+
+
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_poly_in_poly52];
+                    b = [self poly];
+
+                    [self popFollow];
+
+
+
+                    [self match:input TokenType:UP Follow:nil];
+
+
+                // TEMPLATE REWRITE
+                // 9:29: -> template(a=$a.stb=$b.st) \"<a>+<b>\"
+                {
+                    retval.st = new StringTemplate(templateLib, "<a>+<b>",
+                  new STAttrMap().put("a", (a!=nil?[a st]:nil)).put("b", (b!=nil?[b st]:nil)));
+                }
+
+
+                }
+                break;
+            case 2 : ;
+                // PolyPrinter.g:10:4: ^( MULT a= poly b= poly ) // alt
+                {
+                [self match:input TokenType:MULT Follow:FOLLOW_MULT_in_poly74];
+
+                    [self match:input TokenType:DOWN Follow:nil];
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_poly_in_poly78];
+                    a = [self poly];
+
+                    [self popFollow];
+
+
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_poly_in_poly82];
+                    b = [self poly];
+
+                    [self popFollow];
+
+
+
+                    [self match:input TokenType:UP Follow:nil];
+
+
+                // TEMPLATE REWRITE
+                // 10:26: -> template(a=$a.stb=$b.st) \"<a><b>\"
+                {
+                    retval.st = new StringTemplate(templateLib, "<a><b>",
+                  new STAttrMap().put("a", (a!=nil?[a st]:nil)).put("b", (b!=nil?[b st]:nil)));
+                }
+
+
+                }
+                break;
+            case 3 : ;
+                // PolyPrinter.g:11:4: ^( '^' a= poly b= poly ) // alt
+                {
+                [self match:input TokenType:9 Follow:FOLLOW_9_in_poly104];
+
+                    [self match:input TokenType:DOWN Follow:nil];
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_poly_in_poly109];
+                    a = [self poly];
+
+                    [self popFollow];
+
+
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_poly_in_poly113];
+                    b = [self poly];
+
+                    [self popFollow];
+
+
+
+                    [self match:input TokenType:UP Follow:nil];
+
+
+                // TEMPLATE REWRITE
+                // 11:26: -> template(a=$a.stb=$b.st) \"<a>^<b>\"
+                {
+                    retval.st = [ST newST:@"<a>^<b>"];
+                    [retval.st add:@"a" value:@"b"];
+                }
+
+
+                }
+                break;
+            case 4 : ;
+                // PolyPrinter.g:12:4: INT // alt
+                {
+                INT1=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_poly134];
+
+
+                // TEMPLATE REWRITE
+                // 12:13: -> {%{$INT.text}}
+                {
+                    retval.st = [ST newST:(INT1!=nil?INT1.text:nil)];
+                }
+
+
+                }
+                break;
+            case 5 : ;
+                // PolyPrinter.g:13:4: ID // alt
+                {
+                ID2=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_poly148];
+
+
+                // TEMPLATE REWRITE
+                // 13:12: -> {%{$ID.text}}
+                {
+                    retval.st = [ST newST:ID2!=nil?[ID2.text]:nil];
+                }
+
+
+                }
+                break;
+
+        }
+        // token+rule list labels
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+    }
+    @finally {
+    }
+    return retval;
+}
+/* $ANTLR end poly */
+
+@end /* end of PolyPrinter implementation line 692 */
+
+
+/* End of code
+ * =============================================================================
+ */
diff --git a/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.tokens b/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.tokens
new file mode 100644
index 0000000..6b157bd
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/PolyPrinter.tokens
@@ -0,0 +1,8 @@
+T__8=8
+T__9=9
+MULT=4
+INT=5
+ID=6
+WS=7
+'+'=8
+'^'=9
diff --git a/runtime/ObjC/Framework/examples/polydiff/Simplifier.g b/runtime/ObjC/Framework/examples/polydiff/Simplifier.g
new file mode 100644
index 0000000..e927e90
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/Simplifier.g
@@ -0,0 +1,37 @@
+tree grammar Simplifier;
+options {
+	tokenVocab=Poly;
+    language=ObjC;
+	ASTLabelType=CommonTree;
+	output=AST;
+	backtrack=true;
+//	rewrite=true; // works either in rewrite or normal mode
+}
+
+/** Match some common patterns that we can reduce via identity
+ *  definitions.  Since this is only run once, it will not be
+ *  perfect.  We'd need to run the tree into this until nothing
+ *  changed to make it correct.
+ */
+poly:	^('+' a=INT b=INT)	-> INT[[NSString stringWithFormat:@"\%d", ($a.int+$b.int)\]]
+
+	|	^('+' ^('+' a=INT p=poly) b=INT)
+							-> ^('+' $p INT[[NSString stringWithFormat:@"\%d", ($a.int+$b.int)\]])
+
+	|	^('+' ^('+' p=poly a=INT) b=INT)
+							-> ^('+' $p INT[[NSString stringWithFormat:@"\%d", ($a.int+$b.int)\]])
+
+	|	^('+' p=poly q=poly)-> { [[$p.tree toStringTree] isEqualToString:@"0"] }? $q
+							-> { [[$q.tree toStringTree] isEqualToString:@"0"] }? $p
+							-> ^('+' $p $q)
+
+	|	^(MULT INT poly)	-> {$INT.int==1}? poly
+							-> ^(MULT INT poly)
+
+	|	^('^' ID e=INT)		-> {$e.int==1}? ID
+							-> {$e.int==0}? INT[@"1"]
+							-> ^('^' ID INT)
+
+	|	INT
+	|	ID
+	;
diff --git a/runtime/ObjC/Framework/examples/polydiff/Simplifier.h b/runtime/ObjC/Framework/examples/polydiff/Simplifier.h
new file mode 100644
index 0000000..ca033c6
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/Simplifier.h
@@ -0,0 +1,203 @@
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g 2012-02-16 18:11:30
+
+/* =============================================================================
+ * Standard antlr OBJC runtime definitions
+ */
+#import <Cocoa/Cocoa.h>
+#import <ANTLR/ANTLR.h>
+/* End of standard antlr3 runtime definitions
+ * =============================================================================
+ */
+
+/* treeParserHeaderFile */
+#ifndef ANTLR3TokenTypeAlreadyDefined
+#define ANTLR3TokenTypeAlreadyDefined
+typedef enum {
+    ANTLR_EOF = -1,
+    INVALID,
+    EOR,
+    DOWN,
+    UP,
+    MIN
+} ANTLR3TokenType;
+#endif
+
+#pragma mark Tokens
+#ifdef EOF
+#undef EOF
+#endif
+#define EOF -1
+#define T__8 8
+#define T__9 9
+#define ID 4
+#define INT 5
+#define MULT 6
+#define WS 7
+#pragma mark Dynamic Global Scopes globalAttributeScopeInterface
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeInterface
+#pragma mark Rule Return Scopes returnScopeInterface
+/* returnScopeInterface Simplifier_poly_return */
+@interface Simplifier_poly_return : TreeRuleReturnScope { /* returnScopeInterface line 1838 */
+/* ASTTreeParser returnScopeInterface.memVars */
+CommonTree *tree; /* ObjC start of memVars() */
+
+}
+/* start property declarations */
+/* AST returnScopeInterface.properties */
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
++ (Simplifier_poly_return *)newSimplifier_poly_return;
+/* this is start of set and get methods */
+/* ASTTreeParser returnScopeInterface.methodsDecl */
+- (CommonTree *)getTree;
+- (void) setTree:(CommonTree *)aTree;
+  /* methodsDecl */
+
+@end /* end of returnScopeInterface interface */
+
+
+/* returnScopeInterface Simplifier_synpred1_Simplifier_return */
+@interface Simplifier_synpred1_Simplifier_return : TreeRuleReturnScope { /* returnScopeInterface line 1838 */
+/* ASTTreeParser returnScopeInterface.memVars */
+CommonTree *tree; /* ObjC start of memVars() */
+
+}
+/* start property declarations */
+/* AST returnScopeInterface.properties */
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
++ (Simplifier_synpred1_Simplifier_return *)newSimplifier_synpred1_Simplifier_return;
+/* this is start of set and get methods */
+/* ASTTreeParser returnScopeInterface.methodsDecl */
+- (CommonTree *)getTree;
+- (void) setTree:(CommonTree *)aTree;
+  /* methodsDecl */
+
+@end /* end of returnScopeInterface interface */
+
+
+/* returnScopeInterface Simplifier_synpred2_Simplifier_return */
+@interface Simplifier_synpred2_Simplifier_return : TreeRuleReturnScope { /* returnScopeInterface line 1838 */
+/* ASTTreeParser returnScopeInterface.memVars */
+CommonTree *tree; /* ObjC start of memVars() */
+
+}
+/* start property declarations */
+/* AST returnScopeInterface.properties */
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
++ (Simplifier_synpred2_Simplifier_return *)newSimplifier_synpred2_Simplifier_return;
+/* this is start of set and get methods */
+/* ASTTreeParser returnScopeInterface.methodsDecl */
+- (CommonTree *)getTree;
+- (void) setTree:(CommonTree *)aTree;
+  /* methodsDecl */
+
+@end /* end of returnScopeInterface interface */
+
+
+/* returnScopeInterface Simplifier_synpred3_Simplifier_return */
+@interface Simplifier_synpred3_Simplifier_return : TreeRuleReturnScope { /* returnScopeInterface line 1838 */
+/* ASTTreeParser returnScopeInterface.memVars */
+CommonTree *tree; /* ObjC start of memVars() */
+
+}
+/* start property declarations */
+/* AST returnScopeInterface.properties */
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
++ (Simplifier_synpred3_Simplifier_return *)newSimplifier_synpred3_Simplifier_return;
+/* this is start of set and get methods */
+/* ASTTreeParser returnScopeInterface.methodsDecl */
+- (CommonTree *)getTree;
+- (void) setTree:(CommonTree *)aTree;
+  /* methodsDecl */
+
+@end /* end of returnScopeInterface interface */
+
+
+/* returnScopeInterface Simplifier_synpred4_Simplifier_return */
+@interface Simplifier_synpred4_Simplifier_return : TreeRuleReturnScope { /* returnScopeInterface line 1838 */
+/* ASTTreeParser returnScopeInterface.memVars */
+CommonTree *tree; /* ObjC start of memVars() */
+
+}
+/* start property declarations */
+/* AST returnScopeInterface.properties */
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
++ (Simplifier_synpred4_Simplifier_return *)newSimplifier_synpred4_Simplifier_return;
+/* this is start of set and get methods */
+/* ASTTreeParser returnScopeInterface.methodsDecl */
+- (CommonTree *)getTree;
+- (void) setTree:(CommonTree *)aTree;
+  /* methodsDecl */
+
+@end /* end of returnScopeInterface interface */
+
+
+
+/* Interface grammar class */
+@interface Simplifier  : TreeParser { /* line 572 */
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeDecl
+#pragma mark Dynamic Global Rule Scopes globalAttributeScopeMemVar
+
+
+/* ObjC start of actions.(actionScope).memVars */
+/* ObjC end of actions.(actionScope).memVars */
+/* ObjC start of memVars */
+/* AST parserHeaderFile.memVars */
+NSInteger ruleLevel;
+NSArray *ruleNames;
+  /* AST super.memVars */
+/* AST parserMemVars */
+id<TreeAdaptor> treeAdaptor;   /* AST parserMemVars */
+/* ObjC end of memVars */
+
+SEL synpred2_SimplifierSelector;
+SEL synpred1_SimplifierSelector;
+SEL synpred4_SimplifierSelector;
+SEL synpred3_SimplifierSelector;
+ }
+
+/* ObjC start of actions.(actionScope).properties */
+/* ObjC end of actions.(actionScope).properties */
+/* ObjC start of properties */
+/* AST parserHeaderFile.properties */
+  /* AST super.properties */
+/* AST parserProperties */
+@property (retain, getter=getTreeAdaptor, setter=setTreeAdaptor:) id<TreeAdaptor> treeAdaptor;   /* AST parserproperties */
+/* ObjC end of properties */
+
++ (void) initialize;
++ (id) newSimplifier:(id<TreeNodeStream>)aStream;
+/* ObjC start of actions.(actionScope).methodsDecl */
+/* ObjC end of actions.(actionScope).methodsDecl */
+
+/* ObjC start of methodsDecl */
+/* AST parserHeaderFile.methodsDecl */
+  /* AST super.methodsDecl */
+/* AST parserMethodsDecl */
+- (id<TreeAdaptor>) getTreeAdaptor;
+- (void) setTreeAdaptor:(id<TreeAdaptor>)theTreeAdaptor;   /* AST parsermethodsDecl */
+/* ObjC end of methodsDecl */
+
+- (Simplifier_poly_return *)poly;
+- (void)synpred1_Simplifier_fragment;
+- (void)synpred2_Simplifier_fragment;
+- (void)synpred3_Simplifier_fragment;
+- (void)synpred4_Simplifier_fragment;
+
+
+@end /* end of Simplifier interface */
+
diff --git a/runtime/ObjC/Framework/examples/polydiff/Simplifier.m b/runtime/ObjC/Framework/examples/polydiff/Simplifier.m
new file mode 100644
index 0000000..9474c94
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/Simplifier.m
@@ -0,0 +1,1397 @@
+/** \file
+ *  This OBJC source file was generated by $ANTLR version 3.4
+ *
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g
+ *     -                            On : 2012-02-16 18:11:30
+ *     -           for the tree parser : SimplifierTreeParser
+ *
+ * Editing it, at least manually, is not wise.
+ *
+ * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
+ *
+ *
+*/
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g 2012-02-16 18:11:30
+
+
+/* -----------------------------------------
+ * Include the ANTLR3 generated header file.
+ */
+#import "Simplifier.h"
+/* ----------------------------------------- */
+
+
+/* ============================================================================= */
+/* =============================================================================
+ * Start of recognizer
+ */
+
+#pragma mark Bitsets
+static ANTLRBitSet *FOLLOW_8_in_poly52;
+static const unsigned long long FOLLOW_8_in_poly52_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_INT_in_poly56;
+static const unsigned long long FOLLOW_INT_in_poly56_data[] = { 0x0000000000000020LL};
+static ANTLRBitSet *FOLLOW_INT_in_poly60;
+static const unsigned long long FOLLOW_INT_in_poly60_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_8_in_poly73;
+static const unsigned long long FOLLOW_8_in_poly73_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_8_in_poly76;
+static const unsigned long long FOLLOW_8_in_poly76_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_INT_in_poly80;
+static const unsigned long long FOLLOW_INT_in_poly80_data[] = { 0x0000000000000370LL};
+static ANTLRBitSet *FOLLOW_poly_in_poly84;
+static const unsigned long long FOLLOW_poly_in_poly84_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_INT_in_poly89;
+static const unsigned long long FOLLOW_INT_in_poly89_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_8_in_poly117;
+static const unsigned long long FOLLOW_8_in_poly117_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_8_in_poly120;
+static const unsigned long long FOLLOW_8_in_poly120_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_poly_in_poly124;
+static const unsigned long long FOLLOW_poly_in_poly124_data[] = { 0x0000000000000020LL};
+static ANTLRBitSet *FOLLOW_INT_in_poly128;
+static const unsigned long long FOLLOW_INT_in_poly128_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_INT_in_poly133;
+static const unsigned long long FOLLOW_INT_in_poly133_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_8_in_poly161;
+static const unsigned long long FOLLOW_8_in_poly161_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_poly_in_poly165;
+static const unsigned long long FOLLOW_poly_in_poly165_data[] = { 0x0000000000000370LL};
+static ANTLRBitSet *FOLLOW_poly_in_poly169;
+static const unsigned long long FOLLOW_poly_in_poly169_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_MULT_in_poly216;
+static const unsigned long long FOLLOW_MULT_in_poly216_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_INT_in_poly218;
+static const unsigned long long FOLLOW_INT_in_poly218_data[] = { 0x0000000000000370LL};
+static ANTLRBitSet *FOLLOW_poly_in_poly220;
+static const unsigned long long FOLLOW_poly_in_poly220_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_9_in_poly251;
+static const unsigned long long FOLLOW_9_in_poly251_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_ID_in_poly253;
+static const unsigned long long FOLLOW_ID_in_poly253_data[] = { 0x0000000000000020LL};
+static ANTLRBitSet *FOLLOW_INT_in_poly257;
+static const unsigned long long FOLLOW_INT_in_poly257_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_INT_in_poly302;
+static const unsigned long long FOLLOW_INT_in_poly302_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_ID_in_poly307;
+static const unsigned long long FOLLOW_ID_in_poly307_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_8_in_synpred1_Simplifier52;
+static const unsigned long long FOLLOW_8_in_synpred1_Simplifier52_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_INT_in_synpred1_Simplifier56;
+static const unsigned long long FOLLOW_INT_in_synpred1_Simplifier56_data[] = { 0x0000000000000020LL};
+static ANTLRBitSet *FOLLOW_INT_in_synpred1_Simplifier60;
+static const unsigned long long FOLLOW_INT_in_synpred1_Simplifier60_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_8_in_synpred2_Simplifier73;
+static const unsigned long long FOLLOW_8_in_synpred2_Simplifier73_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_8_in_synpred2_Simplifier76;
+static const unsigned long long FOLLOW_8_in_synpred2_Simplifier76_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_INT_in_synpred2_Simplifier80;
+static const unsigned long long FOLLOW_INT_in_synpred2_Simplifier80_data[] = { 0x0000000000000370LL};
+static ANTLRBitSet *FOLLOW_poly_in_synpred2_Simplifier84;
+static const unsigned long long FOLLOW_poly_in_synpred2_Simplifier84_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_INT_in_synpred2_Simplifier89;
+static const unsigned long long FOLLOW_INT_in_synpred2_Simplifier89_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_8_in_synpred3_Simplifier117;
+static const unsigned long long FOLLOW_8_in_synpred3_Simplifier117_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_8_in_synpred3_Simplifier120;
+static const unsigned long long FOLLOW_8_in_synpred3_Simplifier120_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_poly_in_synpred3_Simplifier124;
+static const unsigned long long FOLLOW_poly_in_synpred3_Simplifier124_data[] = { 0x0000000000000020LL};
+static ANTLRBitSet *FOLLOW_INT_in_synpred3_Simplifier128;
+static const unsigned long long FOLLOW_INT_in_synpred3_Simplifier128_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_INT_in_synpred3_Simplifier133;
+static const unsigned long long FOLLOW_INT_in_synpred3_Simplifier133_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_8_in_synpred4_Simplifier161;
+static const unsigned long long FOLLOW_8_in_synpred4_Simplifier161_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_poly_in_synpred4_Simplifier165;
+static const unsigned long long FOLLOW_poly_in_synpred4_Simplifier165_data[] = { 0x0000000000000370LL};
+static ANTLRBitSet *FOLLOW_poly_in_synpred4_Simplifier169;
+static const unsigned long long FOLLOW_poly_in_synpred4_Simplifier169_data[] = { 0x0000000000000008LL};
+
+
+#pragma mark Dynamic Global globalAttributeScopeImplementation
+
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation
+
+#pragma mark Rule Return Scopes returnScopeImplementation
+@implementation Simplifier_poly_return /* returnScopeImplementation */
+/* AST returnScope.synthesize */
+@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
++ (Simplifier_poly_return *)newSimplifier_poly_return
+{
+return [[[Simplifier_poly_return alloc] init] retain];
+}
+
+- (id) init
+{
+self = [super init];
+return self;
+}
+
+/* AST returnScope.methods */
+- (CommonTree *)getTree
+{
+    return tree;
+}
+
+- (void) setTree:(CommonTree *)aTree
+{
+    if (tree != aTree) {
+        if (tree != nil) [tree release];
+        if (aTree != nil) [aTree retain];
+        tree = aTree;
+    }
+}
+
+- (void) dealloc
+{
+    self.tree = nil;
+    [super dealloc];
+}
+
+
+@end /* end of returnScope implementation */
+
+@implementation Simplifier_synpred1_Simplifier_return /* returnScopeImplementation */
+/* AST returnScope.synthesize */
+@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
++ (Simplifier_synpred1_Simplifier_return *)newSimplifier_synpred1_Simplifier_return
+{
+return [[[Simplifier_synpred1_Simplifier_return alloc] init] retain];
+}
+
+- (id) init
+{
+self = [super init];
+return self;
+}
+
+/* AST returnScope.methods */
+- (CommonTree *)getTree
+{
+    return tree;
+}
+
+- (void) setTree:(CommonTree *)aTree
+{
+    if (tree != aTree) {
+        if (tree != nil) [tree release];
+        if (aTree != nil) [aTree retain];
+        tree = aTree;
+    }
+}
+
+- (void) dealloc
+{
+    self.tree = nil;
+    [super dealloc];
+}
+
+
+@end /* end of returnScope implementation */
+
+@implementation Simplifier_synpred2_Simplifier_return /* returnScopeImplementation */
+/* AST returnScope.synthesize */
+@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
++ (Simplifier_synpred2_Simplifier_return *)newSimplifier_synpred2_Simplifier_return
+{
+return [[[Simplifier_synpred2_Simplifier_return alloc] init] retain];
+}
+
+- (id) init
+{
+self = [super init];
+return self;
+}
+
+/* AST returnScope.methods */
+- (CommonTree *)getTree
+{
+    return tree;
+}
+
+- (void) setTree:(CommonTree *)aTree
+{
+    if (tree != aTree) {
+        if (tree != nil) [tree release];
+        if (aTree != nil) [aTree retain];
+        tree = aTree;
+    }
+}
+
+- (void) dealloc
+{
+    self.tree = nil;
+    [super dealloc];
+}
+
+
+@end /* end of returnScope implementation */
+
+@implementation Simplifier_synpred3_Simplifier_return /* returnScopeImplementation */
+/* AST returnScope.synthesize */
+@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
++ (Simplifier_synpred3_Simplifier_return *)newSimplifier_synpred3_Simplifier_return
+{
+return [[[Simplifier_synpred3_Simplifier_return alloc] init] retain];
+}
+
+- (id) init
+{
+self = [super init];
+return self;
+}
+
+/* AST returnScope.methods */
+- (CommonTree *)getTree
+{
+    return tree;
+}
+
+- (void) setTree:(CommonTree *)aTree
+{
+    if (tree != aTree) {
+        if (tree != nil) [tree release];
+        if (aTree != nil) [aTree retain];
+        tree = aTree;
+    }
+}
+
+- (void) dealloc
+{
+    self.tree = nil;
+    [super dealloc];
+}
+
+
+@end /* end of returnScope implementation */
+
+@implementation Simplifier_synpred4_Simplifier_return /* returnScopeImplementation */
+/* AST returnScope.synthesize */
+@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
++ (Simplifier_synpred4_Simplifier_return *)newSimplifier_synpred4_Simplifier_return
+{
+return [[[Simplifier_synpred4_Simplifier_return alloc] init] retain];
+}
+
+- (id) init
+{
+self = [super init];
+return self;
+}
+
+/* AST returnScope.methods */
+- (CommonTree *)getTree
+{
+    return tree;
+}
+
+- (void) setTree:(CommonTree *)aTree
+{
+    if (tree != aTree) {
+        if (tree != nil) [tree release];
+        if (aTree != nil) [aTree retain];
+        tree = aTree;
+    }
+}
+
+- (void) dealloc
+{
+    self.tree = nil;
+    [super dealloc];
+}
+
+
+@end /* end of returnScope implementation */
+
+
+
+@implementation Simplifier  // line 637
+
+/* ObjC start of ruleAttributeScope */
+#pragma mark Dynamic Rule Scopes ruleAttributeScope
+/* ObjC end of ruleAttributeScope */
+#pragma mark global Attribute Scopes globalAttributeScope
+/* ObjC start globalAttributeScope */
+/* ObjC end globalAttributeScope */
+/* ObjC start actions.(actionScope).synthesize */
+/* ObjC start synthesize() */
+/* AST genericParser.synthesize */
+/* AST parserProperties */
+@synthesize treeAdaptor;
+
++ (void) initialize
+{
+    #pragma mark Bitsets
+    FOLLOW_8_in_poly52 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_poly52_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_poly56 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_poly56_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_poly60 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_poly60_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_poly73 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_poly73_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_poly76 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_poly76_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_poly80 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_poly80_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_poly84 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly84_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_poly89 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_poly89_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_poly117 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_poly117_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_poly120 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_poly120_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_poly124 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly124_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_poly128 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_poly128_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_poly133 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_poly133_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_poly161 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_poly161_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_poly165 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly165_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_poly169 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly169_data Count:(NSUInteger)1] retain];
+    FOLLOW_MULT_in_poly216 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_MULT_in_poly216_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_poly218 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_poly218_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_poly220 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_poly220_data Count:(NSUInteger)1] retain];
+    FOLLOW_9_in_poly251 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_poly251_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_poly253 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_poly253_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_poly257 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_poly257_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_poly302 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_poly302_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_poly307 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_poly307_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_synpred1_Simplifier52 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_synpred1_Simplifier52_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_synpred1_Simplifier56 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_synpred1_Simplifier56_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_synpred1_Simplifier60 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_synpred1_Simplifier60_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_synpred2_Simplifier73 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_synpred2_Simplifier73_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_synpred2_Simplifier76 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_synpred2_Simplifier76_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_synpred2_Simplifier80 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_synpred2_Simplifier80_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_synpred2_Simplifier84 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_synpred2_Simplifier84_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_synpred2_Simplifier89 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_synpred2_Simplifier89_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_synpred3_Simplifier117 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_synpred3_Simplifier117_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_synpred3_Simplifier120 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_synpred3_Simplifier120_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_synpred3_Simplifier124 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_synpred3_Simplifier124_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_synpred3_Simplifier128 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_synpred3_Simplifier128_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_synpred3_Simplifier133 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_synpred3_Simplifier133_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_synpred4_Simplifier161 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_synpred4_Simplifier161_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_synpred4_Simplifier165 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_synpred4_Simplifier165_data Count:(NSUInteger)1] retain];
+    FOLLOW_poly_in_synpred4_Simplifier169 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_poly_in_synpred4_Simplifier169_data Count:(NSUInteger)1] retain];
+
+    [BaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
+ @"ID", @"INT", @"MULT", @"WS", @"'+'", @"'^'", nil] retain]];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g"];
+    SEL synpred2_SimplifierSelector = @selector(synpred2_Simplifier_fragment);
+    SEL synpred1_SimplifierSelector = @selector(synpred1_Simplifier_fragment);
+    SEL synpred4_SimplifierSelector = @selector(synpred4_Simplifier_fragment);
+    SEL synpred3_SimplifierSelector = @selector(synpred3_Simplifier_fragment);
+
+}
+
++ (Simplifier *)newSimplifier:(id<TreeNodeStream>)aStream
+{
+    return [[Simplifier alloc] initWithStream:aStream];
+}
+
+- (id) initWithStream:(id<TreeNodeStream>)aStream
+{
+    self = [super initWithStream:aStream State:[[RecognizerSharedState newRecognizerSharedStateWithRuleLen:8+1] retain]];
+    if ( self != nil ) {
+        /* start of actions-actionScope-init */
+        /* start of init */
+        /* AST genericParser.init */
+        [self setTreeAdaptor:[[CommonTreeAdaptor newTreeAdaptor] retain]];
+    }
+    return self;
+}
+
+- (void) dealloc
+{
+    /* AST genericParser.dealloc */
+    [self setTreeAdaptor:nil];
+
+    [super dealloc];
+}
+
+/* ObjC start actions.(actionScope).methods */
+/* ObjC end actions.(actionScope).methods */
+/* ObjC start methods() */
+/* AST genericParser.methods */
+/* AST parserMethods */
+- (id<TreeAdaptor>) getTreeAdaptor
+{
+	return treeAdaptor;
+}
+
+- (void) setTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor
+{
+	if (aTreeAdaptor != treeAdaptor) {
+		treeAdaptor = aTreeAdaptor;
+	}
+}
+/* ObjC end methods() */
+/* ObjC start rules */
+/*
+ * $ANTLR start poly
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:16:1: poly : ( ^( '+' a= INT b= INT ) -> INT[[NSString stringWithFormat:@\"\\%d\", ($a.int+$b.int)]] | ^( '+' ^( '+' a= INT p= poly ) b= INT ) -> ^( '+' $p INT[[NSString stringWithFormat:@\"\\%d\", ($a.int+$b.int)]] ) | ^( '+' ^( '+' p= poly a= INT ) b= INT ) -> ^( '+' $p INT[[NSString stringWithFormat:@\"\\%d\", ($a.int+$b.int)]] ) | ^( '+' p= poly q= poly ) -> { [[$p.tree toStringTree] isEqualToString:@\"0\"] }? $q -> { [[$q.tree toStringTree] isEqualToString:@\"0\"] }? $p -> ^( '+' $p $q) | ^( MULT INT poly ) -> {$INT.int==1}? poly -> ^( MULT INT poly ) | ^( '^' ID e= INT ) -> {$e.int==1}? ID -> {$e.int==0}? INT[@\"1\"] -> ^( '^' ID INT ) | INT | ID );
+ */
+- (Simplifier_poly_return *) poly
+{
+    /* ruleScopeSetUp */
+
+    /* ASTTreeParser ruleDeclarations */
+    /* AST ruleDeclarations */
+    /* ruleDeclarations */
+    Simplifier_poly_return * retval = [Simplifier_poly_return newSimplifier_poly_return];
+    [retval setStart:[input LT:1]];
+
+
+    CommonTree *root_0 = nil;
+
+    CommonTree *_first_0 = nil;
+    CommonTree *_last = nil;
+
+    @try {
+        /* AST ruleLabelDefs */
+        /* ruleLabelDefs entry */
+        CommonTree *a = nil;
+        CommonTree *b = nil;
+        CommonTree *e = nil;
+        CommonTree *char_literal1 = nil;
+        CommonTree *char_literal2 = nil;
+        CommonTree *char_literal3 = nil;
+        CommonTree *char_literal4 = nil;
+        CommonTree *char_literal5 = nil;
+        CommonTree *char_literal6 = nil;
+        CommonTree *MULT7 = nil;
+        CommonTree *INT8 = nil;
+        CommonTree *char_literal10 = nil;
+        CommonTree *ID11 = nil;
+        CommonTree *INT12 = nil;
+        CommonTree *ID13 = nil;Simplifier_poly_return * p = nil ;
+
+        Simplifier_poly_return * q = nil ;
+
+        Simplifier_poly_return * poly9 = nil ;
+
+
+        CommonTree *a_tree=nil;
+        CommonTree *b_tree=nil;
+        CommonTree *e_tree=nil;
+        CommonTree *char_literal1_tree=nil;
+        CommonTree *char_literal2_tree=nil;
+        CommonTree *char_literal3_tree=nil;
+        CommonTree *char_literal4_tree=nil;
+        CommonTree *char_literal5_tree=nil;
+        CommonTree *char_literal6_tree=nil;
+        CommonTree *MULT7_tree=nil;
+        CommonTree *INT8_tree=nil;
+        CommonTree *char_literal10_tree=nil;
+        CommonTree *ID11_tree=nil;
+        CommonTree *INT12_tree=nil;
+        CommonTree *ID13_tree=nil;
+        RewriteRuleTokenStream *stream_INT =
+            [[RewriteRuleNodeStream newRewriteRuleNodeStream:treeAdaptor
+                                                             description:@"token INT"] retain];
+        RewriteRuleTokenStream *stream_MULT =
+            [[RewriteRuleNodeStream newRewriteRuleNodeStream:treeAdaptor
+                                                             description:@"token MULT"] retain];
+        RewriteRuleTokenStream *stream_ID =
+            [[RewriteRuleNodeStream newRewriteRuleNodeStream:treeAdaptor
+                                                             description:@"token ID"] retain];
+        RewriteRuleTokenStream *stream_9 =
+            [[RewriteRuleNodeStream newRewriteRuleNodeStream:treeAdaptor
+                                                             description:@"token 9"] retain];
+        RewriteRuleTokenStream *stream_8 =
+            [[RewriteRuleNodeStream newRewriteRuleNodeStream:treeAdaptor
+                                                             description:@"token 8"] retain];
+        RewriteRuleSubtreeStream *stream_poly =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                                                                description:@"rule poly"] retain];
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:16:5: ( ^( '+' a= INT b= INT ) -> INT[[NSString stringWithFormat:@\"\\%d\", ($a.int+$b.int)]] | ^( '+' ^( '+' a= INT p= poly ) b= INT ) -> ^( '+' $p INT[[NSString stringWithFormat:@\"\\%d\", ($a.int+$b.int)]] ) | ^( '+' ^( '+' p= poly a= INT ) b= INT ) -> ^( '+' $p INT[[NSString stringWithFormat:@\"\\%d\", ($a.int+$b.int)]] ) | ^( '+' p= poly q= poly ) -> { [[$p.tree toStringTree] isEqualToString:@\"0\"] }? $q -> { [[$q.tree toStringTree] isEqualToString:@\"0\"] }? $p -> ^( '+' $p $q) | ^( MULT INT poly ) -> {$INT.int==1}? poly -> ^( MULT INT poly ) | ^( '^' ID e= INT ) -> {$e.int==1}? ID -> {$e.int==0}? INT[@\"1\"] -> ^( '^' ID INT ) | INT | ID ) //ruleblock
+        NSInteger alt1=8;
+        unichar charLA1 = [input LA:1];
+        switch (charLA1) {
+            case 8: ;
+                {
+                NSInteger LA1_1 = [input LA:2];
+
+                if ( ([self evaluateSyntacticPredicate:@selector(synpred1_Simplifier_fragment)]) ) {
+                    alt1=1;
+                }
+                else if ( ([self evaluateSyntacticPredicate:@selector(synpred2_Simplifier_fragment)]) ) {
+                    alt1=2;
+                }
+                else if ( ([self evaluateSyntacticPredicate:@selector(synpred3_Simplifier_fragment)]) ) {
+                    alt1=3;
+                }
+                else if ( ([self evaluateSyntacticPredicate:@selector(synpred4_Simplifier_fragment)]) ) {
+                    alt1=4;
+                }
+                else {
+                    if ( state.backtracking > 0 ) { state.failed = YES; return retval; }
+
+                    NoViableAltException *nvae = [NoViableAltException newException:1 state:1 stream:input];
+                    nvae.c = LA1_1;
+                    @throw nvae;
+
+                }
+                }
+                break;
+            case MULT: ;
+                {
+                alt1=5;
+                }
+                break;
+            case 9: ;
+                {
+                alt1=6;
+                }
+                break;
+            case INT: ;
+                {
+                alt1=7;
+                }
+                break;
+            case ID: ;
+                {
+                alt1=8;
+                }
+                break;
+
+        default: ;
+            if ( state.backtracking > 0 ) { state.failed = YES; return retval; }
+
+            NoViableAltException *nvae = [NoViableAltException newException:1 state:0 stream:input];
+            nvae.c = charLA1;
+            @throw nvae;
+
+        }
+
+        switch (alt1) {
+            case 1 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:16:7: ^( '+' a= INT b= INT ) // alt
+                {
+
+                /* ASTTreeParser tree */
+                _last = (CommonTree *)[input LT:1];
+                {
+                CommonTree *_save_last_1 = _last;
+                CommonTree *_first_1 = nil;
+                CommonTree *root_1 = [[[treeAdaptor class] newEmptyTree] retain];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                char_literal1=(CommonTree *)[self match:input TokenType:8 Follow:FOLLOW_8_in_poly52]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_8 addElement:char_literal1];
+
+
+                [self match:input TokenType:TokenTypeDOWN Follow:nil]; if ( state.failed ) return retval;
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                a=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_poly56]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_INT addElement:a];
+
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                b=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_poly60]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_INT addElement:b];
+
+
+                [self match:input TokenType:TokenTypeUP Follow:nil]; if ( state.failed ) return retval;
+                [treeAdaptor addChild:root_1 toTree:root_0];
+                _last = _save_last_1;
+                }
+
+
+                // AST REWRITE
+                // elements: INT
+                // token labels:
+                // rule labels: retval
+                // token list labels:
+                // rule list labels:
+                // wildcard labels:
+                if ( state.backtracking == 0 ) {
+
+                retval.tree = root_0;
+
+                RewriteRuleSubtreeStream *stream_retval =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];
+
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+                // 16:26: -> INT[[NSString stringWithFormat:@\"\\%d\", ($a.int+$b.int)]]
+                {
+                    [treeAdaptor addChild:
+                            [[treeAdaptor createTree:INT FromToken:[NSString stringWithFormat:@"%d", ((a!=nil?[a.text integerValue]:0)+(b!=nil?[b.text integerValue]:0))] Text:@"INT"] retain]
+                     toTree:root_0];
+
+                }
+
+
+                retval.tree = root_0;
+
+                }
+
+                }
+                break;
+            case 2 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:18:4: ^( '+' ^( '+' a= INT p= poly ) b= INT ) // alt
+                {
+
+                /* ASTTreeParser tree */
+                _last = (CommonTree *)[input LT:1];
+                {
+                CommonTree *_save_last_1 = _last;
+                CommonTree *_first_1 = nil;
+                CommonTree *root_1 = [[[treeAdaptor class] newEmptyTree] retain];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                char_literal2=(CommonTree *)[self match:input TokenType:8 Follow:FOLLOW_8_in_poly73]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_8 addElement:char_literal2];
+
+
+                [self match:input TokenType:TokenTypeDOWN Follow:nil]; if ( state.failed ) return retval;
+
+                /* ASTTreeParser tree */
+                _last = (CommonTree *)[input LT:1];
+                {
+                CommonTree *_save_last_2 = _last;
+                CommonTree *_first_2 = nil;
+                CommonTree *root_2 = [[[treeAdaptor class] newEmptyTree] retain];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                char_literal3=(CommonTree *)[self match:input TokenType:8 Follow:FOLLOW_8_in_poly76]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_8 addElement:char_literal3];
+
+
+                [self match:input TokenType:TokenTypeDOWN Follow:nil]; if ( state.failed ) return retval;
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                a=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_poly80]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_INT addElement:a];
+
+
+                /* ASTTreeParser ruleRefTrack */
+                _last = (CommonTree *)[input LT:1];
+                /* ruleRef */
+                [self pushFollow:FOLLOW_poly_in_poly84];
+                p = [self poly];
+
+                [self popFollow];
+                if ( state.failed ) return retval;
+
+                if ( state.backtracking == 0 )
+                [stream_poly addElement:[p getTree]];
+
+                [self match:input TokenType:TokenTypeUP Follow:nil]; if ( state.failed ) return retval;
+                [treeAdaptor addChild:root_2 toTree:root_1];
+                _last = _save_last_2;
+                }
+
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                b=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_poly89]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_INT addElement:b];
+
+
+                [self match:input TokenType:TokenTypeUP Follow:nil]; if ( state.failed ) return retval;
+                [treeAdaptor addChild:root_1 toTree:root_0];
+                _last = _save_last_1;
+                }
+
+
+                // AST REWRITE
+                // elements: INT, p, 8
+                // token labels:
+                // rule labels: retval, p
+                // token list labels:
+                // rule list labels:
+                // wildcard labels:
+                if ( state.backtracking == 0 ) {
+
+                retval.tree = root_0;
+
+                RewriteRuleSubtreeStream *stream_retval =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];
+                RewriteRuleSubtreeStream *stream_p =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token p" element:p!=nil?[p getTree]:nil] retain];
+
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+                // 19:8: -> ^( '+' $p INT[[NSString stringWithFormat:@\"\\%d\", ($a.int+$b.int)]] )
+                {
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:19:11: ^( '+' $p INT[[NSString stringWithFormat:@\"\\%d\", ($a.int+$b.int)]] )
+                    {
+                        CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                        root_1 = (CommonTree *)[treeAdaptor becomeRoot:/* ASTTreeParser createRewriteNodeFromElement */
+                        [stream_8 nextNode]
+                         old:root_1];
+
+                        [treeAdaptor addChild:[stream_p nextTree] toTree:root_1];
+
+                        [treeAdaptor addChild:
+                                [[treeAdaptor createTree:INT FromToken:[NSString stringWithFormat:@"%d", ((a!=nil?[a.text integerValue]:0)+(b!=nil?[b.text integerValue]:0))] Text:@"INT"] retain]
+                         toTree:root_1];
+
+                        [treeAdaptor addChild:root_1 toTree:root_0];
+                    }
+
+                }
+
+
+                retval.tree = root_0;
+
+                }
+
+                }
+                break;
+            case 3 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:21:4: ^( '+' ^( '+' p= poly a= INT ) b= INT ) // alt
+                {
+
+                /* ASTTreeParser tree */
+                _last = (CommonTree *)[input LT:1];
+                {
+                CommonTree *_save_last_1 = _last;
+                CommonTree *_first_1 = nil;
+                CommonTree *root_1 = [[[treeAdaptor class] newEmptyTree] retain];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                char_literal4=(CommonTree *)[self match:input TokenType:8 Follow:FOLLOW_8_in_poly117]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_8 addElement:char_literal4];
+
+
+                [self match:input TokenType:TokenTypeDOWN Follow:nil]; if ( state.failed ) return retval;
+
+                /* ASTTreeParser tree */
+                _last = (CommonTree *)[input LT:1];
+                {
+                CommonTree *_save_last_2 = _last;
+                CommonTree *_first_2 = nil;
+                CommonTree *root_2 = [[[treeAdaptor class] newEmptyTree] retain];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                char_literal5=(CommonTree *)[self match:input TokenType:8 Follow:FOLLOW_8_in_poly120]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_8 addElement:char_literal5];
+
+
+                [self match:input TokenType:TokenTypeDOWN Follow:nil]; if ( state.failed ) return retval;
+
+                /* ASTTreeParser ruleRefTrack */
+                _last = (CommonTree *)[input LT:1];
+                /* ruleRef */
+                [self pushFollow:FOLLOW_poly_in_poly124];
+                p = [self poly];
+
+                [self popFollow];
+                if ( state.failed ) return retval;
+
+                if ( state.backtracking == 0 )
+                [stream_poly addElement:[p getTree]];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                a=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_poly128]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_INT addElement:a];
+
+
+                [self match:input TokenType:TokenTypeUP Follow:nil]; if ( state.failed ) return retval;
+                [treeAdaptor addChild:root_2 toTree:root_1];
+                _last = _save_last_2;
+                }
+
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                b=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_poly133]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_INT addElement:b];
+
+
+                [self match:input TokenType:TokenTypeUP Follow:nil]; if ( state.failed ) return retval;
+                [treeAdaptor addChild:root_1 toTree:root_0];
+                _last = _save_last_1;
+                }
+
+
+                // AST REWRITE
+                // elements: INT, 8, p
+                // token labels:
+                // rule labels: retval, p
+                // token list labels:
+                // rule list labels:
+                // wildcard labels:
+                if ( state.backtracking == 0 ) {
+
+                retval.tree = root_0;
+
+                RewriteRuleSubtreeStream *stream_retval =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];
+                RewriteRuleSubtreeStream *stream_p =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token p" element:p!=nil?[p getTree]:nil] retain];
+
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+                // 22:8: -> ^( '+' $p INT[[NSString stringWithFormat:@\"\\%d\", ($a.int+$b.int)]] )
+                {
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:22:11: ^( '+' $p INT[[NSString stringWithFormat:@\"\\%d\", ($a.int+$b.int)]] )
+                    {
+                        CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                        root_1 = (CommonTree *)[treeAdaptor becomeRoot:/* ASTTreeParser createRewriteNodeFromElement */
+                        [stream_8 nextNode]
+                         old:root_1];
+
+                        [treeAdaptor addChild:[stream_p nextTree] toTree:root_1];
+
+                        [treeAdaptor addChild:
+                                [[treeAdaptor createTree:INT FromToken:[NSString stringWithFormat:@"%d", ((a!=nil?[a.text integerValue]:0)+(b!=nil?[b.text integerValue]:0))] Text:@"INT"] retain]
+                         toTree:root_1];
+
+                        [treeAdaptor addChild:root_1 toTree:root_0];
+                    }
+
+                }
+
+
+                retval.tree = root_0;
+
+                }
+
+                }
+                break;
+            case 4 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:24:4: ^( '+' p= poly q= poly ) // alt
+                {
+
+                /* ASTTreeParser tree */
+                _last = (CommonTree *)[input LT:1];
+                {
+                CommonTree *_save_last_1 = _last;
+                CommonTree *_first_1 = nil;
+                CommonTree *root_1 = [[[treeAdaptor class] newEmptyTree] retain];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                char_literal6=(CommonTree *)[self match:input TokenType:8 Follow:FOLLOW_8_in_poly161]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_8 addElement:char_literal6];
+
+
+                [self match:input TokenType:TokenTypeDOWN Follow:nil]; if ( state.failed ) return retval;
+
+                /* ASTTreeParser ruleRefTrack */
+                _last = (CommonTree *)[input LT:1];
+                /* ruleRef */
+                [self pushFollow:FOLLOW_poly_in_poly165];
+                p = [self poly];
+
+                [self popFollow];
+                if ( state.failed ) return retval;
+
+                if ( state.backtracking == 0 )
+                [stream_poly addElement:[p getTree]];
+
+                /* ASTTreeParser ruleRefTrack */
+                _last = (CommonTree *)[input LT:1];
+                /* ruleRef */
+                [self pushFollow:FOLLOW_poly_in_poly169];
+                q = [self poly];
+
+                [self popFollow];
+                if ( state.failed ) return retval;
+
+                if ( state.backtracking == 0 )
+                [stream_poly addElement:[q getTree]];
+
+                [self match:input TokenType:TokenTypeUP Follow:nil]; if ( state.failed ) return retval;
+                [treeAdaptor addChild:root_1 toTree:root_0];
+                _last = _save_last_1;
+                }
+
+
+                // AST REWRITE
+                // elements: 8, p, q, p, q
+                // token labels:
+                // rule labels: retval, q, p
+                // token list labels:
+                // rule list labels:
+                // wildcard labels:
+                if ( state.backtracking == 0 ) {
+
+                retval.tree = root_0;
+
+                RewriteRuleSubtreeStream *stream_retval =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];
+                RewriteRuleSubtreeStream *stream_q =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token q" element:q!=nil?[q getTree]:nil] retain];
+                RewriteRuleSubtreeStream *stream_p =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token p" element:p!=nil?[p getTree]:nil] retain];
+
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+                // 24:24: -> { [[$p.tree toStringTree] isEqualToString:@\"0\"] }? $q
+                if ( [[(p!=nil?((CommonTree *)p.tree):nil) toStringTree] isEqualToString:@"0"] ) {
+                    [treeAdaptor addChild:[stream_q nextTree] toTree:root_0];
+
+                }
+
+                else // 25:8: -> { [[$q.tree toStringTree] isEqualToString:@\"0\"] }? $p
+                if ( [[(q!=nil?((CommonTree *)q.tree):nil) toStringTree] isEqualToString:@"0"] ) {
+                    [treeAdaptor addChild:[stream_p nextTree] toTree:root_0];
+
+                }
+
+                else // 26:8: -> ^( '+' $p $q)
+                {
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:26:11: ^( '+' $p $q)
+                    {
+                        CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                        root_1 = (CommonTree *)[treeAdaptor becomeRoot:/* ASTTreeParser createRewriteNodeFromElement */
+                        [stream_8 nextNode]
+                         old:root_1];
+
+                        [treeAdaptor addChild:[stream_p nextTree] toTree:root_1];
+
+                        [treeAdaptor addChild:[stream_q nextTree] toTree:root_1];
+
+                        [treeAdaptor addChild:root_1 toTree:root_0];
+                    }
+
+                }
+
+
+                retval.tree = root_0;
+
+                }
+
+                }
+                break;
+            case 5 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:28:4: ^( MULT INT poly ) // alt
+                {
+
+                /* ASTTreeParser tree */
+                _last = (CommonTree *)[input LT:1];
+                {
+                CommonTree *_save_last_1 = _last;
+                CommonTree *_first_1 = nil;
+                CommonTree *root_1 = [[[treeAdaptor class] newEmptyTree] retain];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                MULT7=(CommonTree *)[self match:input TokenType:MULT Follow:FOLLOW_MULT_in_poly216]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_MULT addElement:MULT7];
+
+
+                [self match:input TokenType:TokenTypeDOWN Follow:nil]; if ( state.failed ) return retval;
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                INT8=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_poly218]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_INT addElement:INT8];
+
+
+                /* ASTTreeParser ruleRefTrack */
+                _last = (CommonTree *)[input LT:1];
+                /* ruleRef */
+                [self pushFollow:FOLLOW_poly_in_poly220];
+                poly9 = [self poly];
+
+                [self popFollow];
+                if ( state.failed ) return retval;
+
+                if ( state.backtracking == 0 )
+                [stream_poly addElement:[poly9 getTree]];
+
+                [self match:input TokenType:TokenTypeUP Follow:nil]; if ( state.failed ) return retval;
+                [treeAdaptor addChild:root_1 toTree:root_0];
+                _last = _save_last_1;
+                }
+
+
+                // AST REWRITE
+                // elements: INT, poly, poly, MULT
+                // token labels:
+                // rule labels: retval
+                // token list labels:
+                // rule list labels:
+                // wildcard labels:
+                if ( state.backtracking == 0 ) {
+
+                retval.tree = root_0;
+
+                RewriteRuleSubtreeStream *stream_retval =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];
+
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+                // 28:21: -> {$INT.int==1}? poly
+                if ((INT8!=nil?[INT8.text integerValue]:0)==1) {
+                    [treeAdaptor addChild:[stream_poly nextTree] toTree:root_0];
+
+                }
+
+                else // 29:8: -> ^( MULT INT poly )
+                {
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:29:11: ^( MULT INT poly )
+                    {
+                        CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                        root_1 = (CommonTree *)[treeAdaptor becomeRoot:/* ASTTreeParser createRewriteNodeFromElement */
+                        [stream_MULT nextNode]
+                         old:root_1];
+
+                         // TODO: args:
+                        [treeAdaptor addChild:/* ASTTreeParser createRewriteNodeFromElement */
+                        [stream_INT nextNode]
+                         toTree:root_1];
+
+                        [treeAdaptor addChild:[stream_poly nextTree] toTree:root_1];
+
+                        [treeAdaptor addChild:root_1 toTree:root_0];
+                    }
+
+                }
+
+
+                retval.tree = root_0;
+
+                }
+
+                }
+                break;
+            case 6 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:31:4: ^( '^' ID e= INT ) // alt
+                {
+
+                /* ASTTreeParser tree */
+                _last = (CommonTree *)[input LT:1];
+                {
+                CommonTree *_save_last_1 = _last;
+                CommonTree *_first_1 = nil;
+                CommonTree *root_1 = [[[treeAdaptor class] newEmptyTree] retain];
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                char_literal10=(CommonTree *)[self match:input TokenType:9 Follow:FOLLOW_9_in_poly251]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_9 addElement:char_literal10];
+
+
+                [self match:input TokenType:TokenTypeDOWN Follow:nil]; if ( state.failed ) return retval;
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                ID11=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_poly253]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_ID addElement:ID11];
+
+
+                /* ASTTreeParser tokenRefBang */
+                _last = (CommonTree *)[input LT:1];
+                e=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_poly257]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) [stream_INT addElement:e];
+
+
+                [self match:input TokenType:TokenTypeUP Follow:nil]; if ( state.failed ) return retval;
+                [treeAdaptor addChild:root_1 toTree:root_0];
+                _last = _save_last_1;
+                }
+
+
+                // AST REWRITE
+                // elements: INT, ID, INT, 9, ID
+                // token labels:
+                // rule labels: retval
+                // token list labels:
+                // rule list labels:
+                // wildcard labels:
+                if ( state.backtracking == 0 ) {
+
+                retval.tree = root_0;
+
+                RewriteRuleSubtreeStream *stream_retval =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
+                        description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];
+
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+                // 31:21: -> {$e.int==1}? ID
+                if ((e!=nil?[e.text integerValue]:0)==1) {
+                     // TODO: args:
+                    [treeAdaptor addChild:/* ASTTreeParser createRewriteNodeFromElement */
+                    [stream_ID nextNode]
+                     toTree:root_0];
+
+                }
+
+                else // 32:8: -> {$e.int==0}? INT[@\"1\"]
+                if ((e!=nil?[e.text integerValue]:0)==0) {
+                    [treeAdaptor addChild:
+                            [[treeAdaptor createTree:INT FromToken:@"1" Text:@"INT"] retain]
+                     toTree:root_0];
+
+                }
+
+                else // 33:8: -> ^( '^' ID INT )
+                {
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:33:11: ^( '^' ID INT )
+                    {
+                        CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                        root_1 = (CommonTree *)[treeAdaptor becomeRoot:/* ASTTreeParser createRewriteNodeFromElement */
+                        [stream_9 nextNode]
+                         old:root_1];
+
+                         // TODO: args:
+                        [treeAdaptor addChild:/* ASTTreeParser createRewriteNodeFromElement */
+                        [stream_ID nextNode]
+                         toTree:root_1];
+
+                         // TODO: args:
+                        [treeAdaptor addChild:/* ASTTreeParser createRewriteNodeFromElement */
+                        [stream_INT nextNode]
+                         toTree:root_1];
+
+                        [treeAdaptor addChild:root_1 toTree:root_0];
+                    }
+
+                }
+
+
+                retval.tree = root_0;
+
+                }
+
+                }
+                break;
+            case 7 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:35:4: INT // alt
+                {
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+
+
+                /* ASTTreeParser tokenRef */
+                _last = (CommonTree *)[input LT:1];
+                INT12=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_poly302]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) {
+                    INT12_tree = (CommonTree *)[treeAdaptor dupNode:INT12];
+
+
+                    [treeAdaptor addChild:INT12_tree toTree:root_0];
+                }
+
+
+                /* ASTTreeParser noRewrite */
+                if ( state.backtracking == 0 ) {
+                }
+                }
+                break;
+            case 8 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:36:4: ID // alt
+                {
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+
+
+
+                /* ASTTreeParser tokenRef */
+                _last = (CommonTree *)[input LT:1];
+                ID13=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_poly307]; if ( state.failed ) return retval;
+                if ( state.backtracking == 0 ) {
+                    ID13_tree = (CommonTree *)[treeAdaptor dupNode:ID13];
+
+
+                    [treeAdaptor addChild:ID13_tree toTree:root_0];
+                }
+
+
+                /* ASTTreeParser noRewrite */
+                if ( state.backtracking == 0 ) {
+                }
+                }
+                break;
+
+        }
+        /* ASTTreeParser ruleCleanUp */
+        /* AST ruleCleanUp */
+        /* token+rule list labels */
+
+        [stream_INT release];
+        [stream_MULT release];
+        [stream_ID release];
+        [stream_9 release];
+        [stream_8 release];
+        [stream_poly release];
+
+        if ( state.backtracking == 0 ) {
+
+        retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
+        }
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return retval;
+}
+/* $ANTLR end poly */
+// $ANTLR start synpred1_Simplifier_fragment
+- (void) synpred1_Simplifier_fragment
+{
+    /* ruleLabelDefs entry */
+    CommonTree *a = nil;
+    CommonTree *b = nil;
+
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:16:7: ( ^( '+' a= INT b= INT ) ) // ruleBlockSingleAlt
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:16:7: ^( '+' a= INT b= INT ) // alt
+    {
+
+
+    [self match:input TokenType:8 Follow:FOLLOW_8_in_synpred1_Simplifier52]; if ( state.failed ) return ;
+
+        [self match:input TokenType:DOWN Follow:nil]; if ( state.failed ) return ;
+
+        a=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_synpred1_Simplifier56]; if ( state.failed ) return ;
+
+        b=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_synpred1_Simplifier60]; if ( state.failed ) return ;
+
+        [self match:input TokenType:UP Follow:nil]; if ( state.failed ) return ;
+
+
+    }
+
+} // $ANTLR end synpred1_Simplifier_fragment
+// $ANTLR start synpred2_Simplifier_fragment
+- (void) synpred2_Simplifier_fragment
+{
+    /* ruleLabelDefs entry */
+    CommonTree *a = nil;
+    CommonTree *b = nil;Simplifier_poly_return * p = nil ;
+
+
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:18:4: ( ^( '+' ^( '+' a= INT p= poly ) b= INT ) ) // ruleBlockSingleAlt
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:18:4: ^( '+' ^( '+' a= INT p= poly ) b= INT ) // alt
+    {
+
+
+    [self match:input TokenType:8 Follow:FOLLOW_8_in_synpred2_Simplifier73]; if ( state.failed ) return ;
+
+        [self match:input TokenType:DOWN Follow:nil]; if ( state.failed ) return ;
+
+
+        [self match:input TokenType:8 Follow:FOLLOW_8_in_synpred2_Simplifier76]; if ( state.failed ) return ;
+
+            [self match:input TokenType:DOWN Follow:nil]; if ( state.failed ) return ;
+
+            a=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_synpred2_Simplifier80]; if ( state.failed ) return ;
+
+            /* ruleRef */
+            [self pushFollow:FOLLOW_poly_in_synpred2_Simplifier84];
+            p = [self poly];
+
+            [self popFollow];
+            if ( state.failed ) return ;
+
+
+            [self match:input TokenType:UP Follow:nil]; if ( state.failed ) return ;
+
+
+        b=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_synpred2_Simplifier89]; if ( state.failed ) return ;
+
+        [self match:input TokenType:UP Follow:nil]; if ( state.failed ) return ;
+
+
+    }
+
+} // $ANTLR end synpred2_Simplifier_fragment
+// $ANTLR start synpred3_Simplifier_fragment
+- (void) synpred3_Simplifier_fragment
+{
+    /* ruleLabelDefs entry */
+    CommonTree *a = nil;
+    CommonTree *b = nil;Simplifier_poly_return * p = nil ;
+
+
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:21:4: ( ^( '+' ^( '+' p= poly a= INT ) b= INT ) ) // ruleBlockSingleAlt
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:21:4: ^( '+' ^( '+' p= poly a= INT ) b= INT ) // alt
+    {
+
+
+    [self match:input TokenType:8 Follow:FOLLOW_8_in_synpred3_Simplifier117]; if ( state.failed ) return ;
+
+        [self match:input TokenType:DOWN Follow:nil]; if ( state.failed ) return ;
+
+
+        [self match:input TokenType:8 Follow:FOLLOW_8_in_synpred3_Simplifier120]; if ( state.failed ) return ;
+
+            [self match:input TokenType:DOWN Follow:nil]; if ( state.failed ) return ;
+
+            /* ruleRef */
+            [self pushFollow:FOLLOW_poly_in_synpred3_Simplifier124];
+            p = [self poly];
+
+            [self popFollow];
+            if ( state.failed ) return ;
+
+
+            a=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_synpred3_Simplifier128]; if ( state.failed ) return ;
+
+            [self match:input TokenType:UP Follow:nil]; if ( state.failed ) return ;
+
+
+        b=(CommonTree *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_synpred3_Simplifier133]; if ( state.failed ) return ;
+
+        [self match:input TokenType:UP Follow:nil]; if ( state.failed ) return ;
+
+
+    }
+
+} // $ANTLR end synpred3_Simplifier_fragment
+// $ANTLR start synpred4_Simplifier_fragment
+- (void) synpred4_Simplifier_fragment
+{
+    /* ruleLabelDefs entry */
+    Simplifier_poly_return * p = nil ;
+
+    Simplifier_poly_return * q = nil ;
+
+
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:24:4: ( ^( '+' p= poly q= poly ) ) // ruleBlockSingleAlt
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/polydiff/Simplifier.g:24:4: ^( '+' p= poly q= poly ) // alt
+    {
+
+
+    [self match:input TokenType:8 Follow:FOLLOW_8_in_synpred4_Simplifier161]; if ( state.failed ) return ;
+
+        [self match:input TokenType:DOWN Follow:nil]; if ( state.failed ) return ;
+
+        /* ruleRef */
+        [self pushFollow:FOLLOW_poly_in_synpred4_Simplifier165];
+        p = [self poly];
+
+        [self popFollow];
+        if ( state.failed ) return ;
+
+
+        /* ruleRef */
+        [self pushFollow:FOLLOW_poly_in_synpred4_Simplifier169];
+        q = [self poly];
+
+        [self popFollow];
+        if ( state.failed ) return ;
+
+
+        [self match:input TokenType:UP Follow:nil]; if ( state.failed ) return ;
+
+
+    }
+
+} // $ANTLR end synpred4_Simplifier_fragment
+/* ObjC end rules */
+
+@end /* end of Simplifier implementation line 692 */
diff --git a/runtime/ObjC/Framework/examples/polydiff/Simplifier.tokens b/runtime/ObjC/Framework/examples/polydiff/Simplifier.tokens
new file mode 100644
index 0000000..c711b35
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/Simplifier.tokens
@@ -0,0 +1,8 @@
+T__8=8
+T__9=9
+ID=4
+INT=5
+MULT=6
+WS=7
+'+'=8
+'^'=9
diff --git a/runtime/ObjC/Framework/examples/polydiff/files b/runtime/ObjC/Framework/examples/polydiff/files
new file mode 100644
index 0000000..f061d0c
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/files
@@ -0,0 +1,7 @@
+Poly.g
+PolyDifferentiator.g
+Simplifier.g
+PolyPrinter.g
+Main.java
+input
+output
diff --git a/runtime/ObjC/Framework/examples/polydiff/input b/runtime/ObjC/Framework/examples/polydiff/input
new file mode 100644
index 0000000..530a4c8
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/input
@@ -0,0 +1 @@
+2x^3 + x^5 + 4x + 10x + 8x + x + 2
diff --git a/runtime/ObjC/Framework/examples/polydiff/main.m b/runtime/ObjC/Framework/examples/polydiff/main.m
new file mode 100644
index 0000000..94b38d7
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/main.m
@@ -0,0 +1,50 @@
+#import <Cocoa/Cocoa.h>
+#import <ANTLR/ANTLR.h>
+#import "PolyLexer.h"
+#import "PolyParser.h"
+// #import "PolyDifferentiator.h"
+// #import "PolyPrinter.h"
+// #import "Simplifier.h"
+
+
+int main(int argc, const char *argv[])
+{
+    NSError *error;
+    NSLog(@"starting polydiff\n");
+	NSString *input = [NSString stringWithContentsOfFile:@"../../examples/polydiff/input"  encoding:NSASCIIStringEncoding error:&error];
+	ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:input];
+	NSLog(@"%@", input);
+
+// BUILD AST
+    PolyLexer *lex = [PolyLexer newPolyLexerWithCharStream:stream];
+    CommonTokenStream *tokens = [CommonTokenStream newCommonTokenStreamWithTokenSource:lex];
+    PolyParser *parser = [PolyParser newPolyParser:tokens];
+    PolyParser_poly_return *r = [parser poly];
+    NSLog(@"tree=%@", [r.tree toStringTree]);
+
+#ifdef DONTUSENOMO
+// DIFFERENTIATE
+    CommonTreeNodeStream *nodes = [CommonTreeNodeStream newCommonTreeNodeStream:r.tree];
+    [nodes setTokenStream:tokens];
+    PolyDifferentiator *differ = [PolyDifferentiator newPolyDifferentiator:nodes];
+    PolyDifferentiator_poly_return *r2 = [differ poly];
+    NSLog("d/dx=%@", [r2.tree toStringTree]);
+
+// SIMPLIFY / NORMALIZE
+    nodes = [CommonTreeNodeStream newCommonTreeNodeStream:r2.tree];
+    [nodes setTokenStream:tokens];
+    Simplifier *reducer = [Simplifier newSimplifier:nodes];
+    Simplifier_poly_return *r3 = [reducer poly];
+    NSLog("simplified=%@", [r3.tree toStringTree]);
+
+// CONVERT BACK TO POLYNOMIAL
+    nodes = [CommonTreeNodeStream newCommonTreeNodeStream:r3.tree];
+    [nodes setTokenStream:tokens];
+    PolyPrinter *printer = [PolyPrinter newPolyPrinter:nodes];
+    PolyPrinter_poly_return *r4 = [printer poly];
+    NSLog( [r4.st toString]);
+#endif
+
+    NSLog(@"exiting PolyDiff\n");
+    return 0;
+}
diff --git a/runtime/ObjC/Framework/examples/polydiff/output b/runtime/ObjC/Framework/examples/polydiff/output
new file mode 100644
index 0000000..e525030
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/polydiff/output
@@ -0,0 +1,4 @@
+tree=(+ (+ (+ (+ (+ (+ (* 2 (^ x 3)) (^ x 5)) (* 4 x)) (* 10 x)) (* 8 x)) x) 2)
+d/dx=(+ (+ (+ (+ (+ (+ (* 6 (^ x 2)) (* 5 (^ x 4))) 4) 10) 8) 1) 0)
+simplified=(+ (+ (+ (+ (* 6 (^ x 2)) (* 5 (^ x 4))) 4) 18) 1)
+6x^2+5x^4+4+18+1
diff --git a/runtime/ObjC/Framework/examples/scopes/SymbolTable.g b/runtime/ObjC/Framework/examples/scopes/SymbolTable.g
index 3001d02..db37fc8 100644
--- a/runtime/ObjC/Framework/examples/scopes/SymbolTable.g
+++ b/runtime/ObjC/Framework/examples/scopes/SymbolTable.g
@@ -11,7 +11,7 @@ options {
}

scope Symbols {
-  ANTLRPtrBuffer *names;
+  PtrBuffer *names;
}

@memVars {
@@ -31,7 +31,7 @@ globals
scope Symbols;
@init {
level++;
-    $Symbols::names = [ANTLRPtrBuffer newANTLRPtrBufferWithLen:10];
+    $Symbols::names = [PtrBuffer newPtrBufferWithLen:10];
}
:   (decl)*
{
@@ -48,7 +48,7 @@ block
scope Symbols;
@init {
level++;
-    $Symbols::names = [ANTLRPtrBuffer newANTLRPtrBufferWithLen:10];
+    $Symbols::names = [PtrBuffer newPtrBufferWithLen:10];
}
:   '{' (decl)* (stat)* '}'
{
diff --git a/runtime/ObjC/Framework/examples/scopes/SymbolTableLexer.h b/runtime/ObjC/Framework/examples/scopes/SymbolTableLexer.h
index 2689521..336caec 100644
--- a/runtime/ObjC/Framework/examples/scopes/SymbolTableLexer.h
+++ b/runtime/ObjC/Framework/examples/scopes/SymbolTableLexer.h
@@ -1,7 +1,7 @@
-// $ANTLR ${project.version} ${buildNumber} SymbolTable.g 2011-05-06 15:04:43
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g 2012-02-16 17:50:30

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
#import <ANTLR/ANTLR.h>
@@ -11,8 +11,8 @@

/* Start cyclicDFAInterface */

-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
+#pragma mark Rule return scopes Interface start
+#pragma mark Rule return scopes Interface end
#pragma mark Tokens
#ifdef EOF
#undef EOF
@@ -30,12 +30,12 @@
#define INT 5
#define WS 6
/* interface lexer class */
-@interface SymbolTableLexer : ANTLRLexer { // line 283
+@interface SymbolTableLexer : Lexer { // line 283
/* ObjC start of actions.lexer.memVars */
/* ObjC end of actions.lexer.memVars */
}
+ (void) initialize;
-+ (SymbolTableLexer *)newSymbolTableLexerWithCharStream:(id<ANTLRCharStream>)anInput;
++ (SymbolTableLexer *)newSymbolTableLexerWithCharStream:(id<CharStream>)anInput;
/* ObjC start actions.lexer.methodsDecl */
/* ObjC end actions.lexer.methodsDecl */
- (void) mT__7 ;
diff --git a/runtime/ObjC/Framework/examples/scopes/SymbolTableLexer.m b/runtime/ObjC/Framework/examples/scopes/SymbolTableLexer.m
index 9daf547..d32d85c 100644
--- a/runtime/ObjC/Framework/examples/scopes/SymbolTableLexer.m
+++ b/runtime/ObjC/Framework/examples/scopes/SymbolTableLexer.m
@@ -1,8 +1,8 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : SymbolTable.g
- *     -                            On : 2011-05-06 15:04:43
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g
+ *     -                            On : 2012-02-16 17:50:30
*     -                 for the lexer : SymbolTableLexerLexer
*
* Editing it, at least manually, is not wise.
@@ -11,7 +11,7 @@
*
*
*/
-// $ANTLR ${project.version} ${buildNumber} SymbolTable.g 2011-05-06 15:04:43
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g 2012-02-16 17:50:30


/* -----------------------------------------
@@ -31,7 +31,7 @@

+ (void) initialize
{
-    [ANTLRBaseRecognizer setGrammarFileName:@"SymbolTable.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g"];
}

+ (NSString *) tokenNameForType:(NSInteger)aTokenType
@@ -39,14 +39,14 @@
return [[self getTokenNames] objectAtIndex:aTokenType];
}

-+ (SymbolTableLexer *)newSymbolTableLexerWithCharStream:(id<ANTLRCharStream>)anInput
++ (SymbolTableLexer *)newSymbolTableLexerWithCharStream:(id<CharStream>)anInput
{
return [[SymbolTableLexer alloc] initWithCharStream:anInput];
}

-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
+- (id) initWithCharStream:(id<CharStream>)anInput
{
-    self = [super initWithCharStream:anInput State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:12+1] retain]];
+    self = [super initWithCharStream:anInput State:[RecognizerSharedState newRecognizerSharedStateWithRuleLen:12+1]];
if ( self != nil ) {
}
return self;
@@ -67,274 +67,292 @@
- (void) mT__7
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__7;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:7:6: ( '(' ) // ruleBlockSingleAlt
-        // SymbolTable.g:7:8: '(' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:7:6: ( '(' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:7:8: '(' // alt
{
-        [self matchChar:'('];


+        [self matchChar:'('];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__7" */
-
// $ANTLR start "T__8"
- (void) mT__8
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__8;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:8:6: ( ')' ) // ruleBlockSingleAlt
-        // SymbolTable.g:8:8: ')' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:8:6: ( ')' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:8:8: ')' // alt
{
-        [self matchChar:')'];


+        [self matchChar:')'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__8" */
-
// $ANTLR start "T__9"
- (void) mT__9
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__9;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:9:6: ( ';' ) // ruleBlockSingleAlt
-        // SymbolTable.g:9:8: ';' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:9:6: ( ';' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:9:8: ';' // alt
{
-        [self matchChar:';'];


+        [self matchChar:';'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__9" */
-
// $ANTLR start "T__10"
- (void) mT__10
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__10;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:10:7: ( '=' ) // ruleBlockSingleAlt
-        // SymbolTable.g:10:9: '=' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:10:7: ( '=' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:10:9: '=' // alt
{
-        [self matchChar:'='];


+        [self matchChar:'='];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__10" */
-
// $ANTLR start "T__11"
- (void) mT__11
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__11;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:11:7: ( 'int' ) // ruleBlockSingleAlt
-        // SymbolTable.g:11:9: 'int' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:11:7: ( 'int' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:11:9: 'int' // alt
{
-        [self matchString:@"int"];


+        [self matchString:@"int"];
+

+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__11" */
-
// $ANTLR start "T__12"
- (void) mT__12
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__12;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:12:7: ( 'method' ) // ruleBlockSingleAlt
-        // SymbolTable.g:12:9: 'method' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:12:7: ( 'method' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:12:9: 'method' // alt
{
-        [self matchString:@"method"];


+        [self matchString:@"method"];
+

+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__12" */
-
// $ANTLR start "T__13"
- (void) mT__13
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__13;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:13:7: ( '{' ) // ruleBlockSingleAlt
-        // SymbolTable.g:13:9: '{' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:13:7: ( '{' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:13:9: '{' // alt
{
-        [self matchChar:'{'];


+        [self matchChar:'{'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__13" */
-
// $ANTLR start "T__14"
- (void) mT__14
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__14;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:14:7: ( '}' ) // ruleBlockSingleAlt
-        // SymbolTable.g:14:9: '}' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:14:7: ( '}' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:14:9: '}' // alt
{
-        [self matchChar:'}'];


+        [self matchChar:'}'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__14" */
-
// $ANTLR start "ID"
- (void) mID
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = ID;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:68:5: ( ( 'a' .. 'z' )+ ) // ruleBlockSingleAlt
-        // SymbolTable.g:68:9: ( 'a' .. 'z' )+ // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:68:5: ( ( 'a' .. 'z' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:68:9: ( 'a' .. 'z' )+ // alt
{
-        // SymbolTable.g:68:9: ( 'a' .. 'z' )+ // positiveClosureBlock
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:68:9: ( 'a' .. 'z' )+ // positiveClosureBlock
NSInteger cnt1 = 0;
do {
NSInteger alt1 = 2;
@@ -346,62 +364,64 @@

switch (alt1) {
case 1 : ;
-                    // SymbolTable.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g: // alt
{
+
if ((([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

default :
if ( cnt1 >= 1 )
goto loop1;
-                    ANTLREarlyExitException *eee =
-                        [ANTLREarlyExitException newException:input decisionNumber:1];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:1];
@throw eee;
}
cnt1++;
} while (YES);
loop1: ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "ID" */
-
// $ANTLR start "INT"
- (void) mINT
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = INT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:71:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
-        // SymbolTable.g:71:9: ( '0' .. '9' )+ // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:71:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:71:9: ( '0' .. '9' )+ // alt
{
-        // SymbolTable.g:71:9: ( '0' .. '9' )+ // positiveClosureBlock
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:71:9: ( '0' .. '9' )+ // positiveClosureBlock
NSInteger cnt2 = 0;
do {
NSInteger alt2 = 2;
@@ -413,62 +433,64 @@

switch (alt2) {
case 1 : ;
-                    // SymbolTable.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g: // alt
{
+
if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))) {
[input consume];
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

default :
if ( cnt2 >= 1 )
goto loop2;
-                    ANTLREarlyExitException *eee =
-                        [ANTLREarlyExitException newException:input decisionNumber:2];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:2];
@throw eee;
}
cnt2++;
} while (YES);
loop2: ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "INT" */
-
// $ANTLR start "WS"
- (void) mWS
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = WS;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:74:5: ( ( ' ' | '\\n' | '\\r' )+ ) // ruleBlockSingleAlt
-        // SymbolTable.g:74:9: ( ' ' | '\\n' | '\\r' )+ // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:74:5: ( ( ' ' | '\\n' | '\\r' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:74:9: ( ' ' | '\\n' | '\\r' )+ // alt
{
-        // SymbolTable.g:74:9: ( ' ' | '\\n' | '\\r' )+ // positiveClosureBlock
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:74:9: ( ' ' | '\\n' | '\\r' )+ // positiveClosureBlock
NSInteger cnt3 = 0;
do {
NSInteger alt3 = 2;
@@ -480,54 +502,55 @@

switch (alt3) {
case 1 : ;
-                    // SymbolTable.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g: // alt
{
+
if ([input LA:1] == '\n'||[input LA:1] == '\r'||[input LA:1] == ' ') {
[input consume];
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

default :
if ( cnt3 >= 1 )
goto loop3;
-                    ANTLREarlyExitException *eee =
-                        [ANTLREarlyExitException newException:input decisionNumber:3];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:3];
@throw eee;
}
cnt3++;
} while (YES);
loop3: ;

+

_channel=HIDDEN;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "WS" */
-
- (void) mTokens
{
-    // SymbolTable.g:1:8: ( T__7 | T__8 | T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | ID | INT | WS ) //ruleblock
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:1:8: ( T__7 | T__8 | T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | ID | INT | WS ) //ruleblock
NSInteger alt4=11;
unichar charLA4 = [input LA:1];
switch (charLA4) {
@@ -685,7 +708,7 @@
break;

default: ;
-        ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:4 state:0 stream:input];
+        NoViableAltException *nvae = [NoViableAltException newException:4 state:0 stream:input];
nvae.c = charLA4;
@throw nvae;

@@ -693,102 +716,124 @@

switch (alt4) {
case 1 : ;
-            // SymbolTable.g:1:10: T__7 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:1:10: T__7 // alt
{
-            [self mT__7];


+            [self mT__7];
+

+
}
break;
case 2 : ;
-            // SymbolTable.g:1:15: T__8 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:1:15: T__8 // alt
{
-            [self mT__8];


+            [self mT__8];
+

+
}
break;
case 3 : ;
-            // SymbolTable.g:1:20: T__9 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:1:20: T__9 // alt
{
-            [self mT__9];


+            [self mT__9];
+

+
}
break;
case 4 : ;
-            // SymbolTable.g:1:25: T__10 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:1:25: T__10 // alt
{
-            [self mT__10];


+            [self mT__10];

+
+
}
break;
case 5 : ;
-            // SymbolTable.g:1:31: T__11 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:1:31: T__11 // alt
{
-            [self mT__11];


+            [self mT__11];
+

+
}
break;
case 6 : ;
-            // SymbolTable.g:1:37: T__12 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:1:37: T__12 // alt
{
-            [self mT__12];


+            [self mT__12];

+
+
}
break;
case 7 : ;
-            // SymbolTable.g:1:43: T__13 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:1:43: T__13 // alt
{
-            [self mT__13];


+            [self mT__13];

+
+
}
break;
case 8 : ;
-            // SymbolTable.g:1:49: T__14 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:1:49: T__14 // alt
{
-            [self mT__14];


+            [self mT__14];
+

+
}
break;
case 9 : ;
-            // SymbolTable.g:1:55: ID // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:1:55: ID // alt
{
-            [self mID];


+            [self mID];
+

+
}
break;
case 10 : ;
-            // SymbolTable.g:1:58: INT // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:1:58: INT // alt
{
-            [self mINT];


+            [self mINT];
+

+
}
break;
case 11 : ;
-            // SymbolTable.g:1:62: WS // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:1:62: WS // alt
{
-            [self mWS];


+            [self mWS];
+

+
}
break;

diff --git a/runtime/ObjC/Framework/examples/scopes/SymbolTableParser.h b/runtime/ObjC/Framework/examples/scopes/SymbolTableParser.h
index e67094b..9698660 100644
--- a/runtime/ObjC/Framework/examples/scopes/SymbolTableParser.h
+++ b/runtime/ObjC/Framework/examples/scopes/SymbolTableParser.h
@@ -1,7 +1,7 @@
-// $ANTLR ${project.version} ${buildNumber} SymbolTable.g 2011-05-06 15:04:42
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g 2012-02-16 17:50:30

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
#import <ANTLR/ANTLR.h>
@@ -38,46 +38,34 @@ typedef enum {
#define ID 4
#define INT 5
#define WS 6
-#pragma mark Dynamic Global Scopes
+#pragma mark Dynamic Global Scopes globalAttributeScopeInterface
/* globalAttributeScopeInterface */
-@interface Symbols_Scope : ANTLRSymbolsScope {
-ANTLRPtrBuffer * names;
-
-}
+@interface Symbols_Scope : SymbolsScope {
+PtrBuffer * names;
+ }
/* start of globalAttributeScopeInterface properties */
-
-@property (assign, getter=getnames, setter=setnames:) ANTLRPtrBuffer * names;
-
+@property (assign, getter=getnames, setter=setnames:) PtrBuffer * names;
/* end globalAttributeScopeInterface properties */
-
-
+ (Symbols_Scope *)newSymbols_Scope;
- (id) init;
/* start of globalAttributeScopeInterface methodsDecl */
-
-- (ANTLRPtrBuffer *)getnames;
-- (void)setnames:(ANTLRPtrBuffer *)aVal;
-
+- (PtrBuffer *)getnames;
+- (void)setnames:(PtrBuffer *)aVal;
/* End of globalAttributeScopeInterface methodsDecl */
-
@end /* end of Symbols_Scope interface */

-#pragma mark Dynamic Rule Scopes
-#pragma mark Rule Return Scopes start
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeInterface
+#pragma mark Rule Return Scopes returnScopeInterface

/* Interface grammar class */
-@interface SymbolTableParser : ANTLRParser { /* line 572 */
-/* ObjC start of ruleAttributeScopeMemVar */
-
-
-/* ObjC end of ruleAttributeScopeMemVar */
-/* ObjC start of globalAttributeScopeMemVar */
+@interface SymbolTableParser  : Parser { /* line 572 */
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeDecl
+#pragma mark Dynamic Global Rule Scopes globalAttributeScopeMemVar
/* globalAttributeScopeMemVar */
-//ANTLRSymbolStack *gStack;
-ANTLRSymbolStack *Symbols_stack;
+SymbolStack *Symbols_stack;
Symbols_Scope *Symbols_scope;

-/* ObjC end of globalAttributeScopeMemVar */
+
/* ObjC start of actions.(actionScope).memVars */

int level;
@@ -94,7 +82,7 @@ int level;
/* ObjC end of properties */

+ (void) initialize;
-+ (id) newSymbolTableParser:(id<ANTLRTokenStream>)aStream;
++ (id) newSymbolTableParser:(id<TokenStream>)aStream;
/* ObjC start of actions.(actionScope).methodsDecl */
/* ObjC end of actions.(actionScope).methodsDecl */

diff --git a/runtime/ObjC/Framework/examples/scopes/SymbolTableParser.m b/runtime/ObjC/Framework/examples/scopes/SymbolTableParser.m
index cc2b37e..2f144f8 100644
--- a/runtime/ObjC/Framework/examples/scopes/SymbolTableParser.m
+++ b/runtime/ObjC/Framework/examples/scopes/SymbolTableParser.m
@@ -1,8 +1,8 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : SymbolTable.g
- *     -                            On : 2011-05-06 15:04:42
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g
+ *     -                            On : 2012-02-16 17:50:30
*     -                for the parser : SymbolTableParserParser
*
* Editing it, at least manually, is not wise.
@@ -11,7 +11,7 @@
*
*
*/
-// $ANTLR ${project.version} ${buildNumber} SymbolTable.g 2011-05-06 15:04:42
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g 2012-02-16 17:50:30


/* -----------------------------------------
@@ -69,103 +69,93 @@ static ANTLRBitSet *FOLLOW_9_in_decl223;
static const unsigned long long FOLLOW_9_in_decl223_data[] = { 0x0000000000000002LL};


-#pragma mark Dynamic Global Scopes
+#pragma mark Dynamic Global globalAttributeScopeImplementation
@implementation Symbols_Scope  /* globalAttributeScopeImplementation */
/* start of synthesize -- OBJC-Line 1750 */
-
-@synthesize names;
+@synthesize names;

+ (Symbols_Scope *)newSymbols_Scope
{
-    return [[[Symbols_Scope alloc] init] retain];
+return [[Symbols_Scope alloc] init];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* start of iterate get and set functions */
-
-- (ANTLRPtrBuffer *)getnames { return( names ); }
-
-- (void)setnames:(ANTLRPtrBuffer *)aVal { names = aVal; }
+- (PtrBuffer *)getnames { return( names ); }
+- (void)setnames:(PtrBuffer *)aVal { names = aVal; }

/* End of iterate get and set functions */
-
@end /* end of Symbols_Scope implementation */


-#pragma mark Dynamic Rule Scopes

-#pragma mark Rule Return Scopes start
-//#pragma mark Rule return scopes start
-//
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation

-#pragma mark Rule return scopes start
+#pragma mark Rule Return Scopes returnScopeImplementation

@implementation SymbolTableParser  // line 637

/* ObjC start of ruleAttributeScope */
-#pragma mark Dynamic Rule Scopes
+#pragma mark Dynamic Rule Scopes ruleAttributeScope
/* ObjC end of ruleAttributeScope */
-#pragma mark global Attribute Scopes
+#pragma mark global Attribute Scopes globalAttributeScope
/* ObjC start globalAttributeScope */
-static _stack;
-
+static SymbolStack *Symbols_stack;
+
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */
-/* ObjC end actions.(actionScope).synthesize */
/* ObjC start synthesize() */
-/* ObjC end synthesize() */

+ (void) initialize
{
#pragma mark Bitsets
-    FOLLOW_globals_in_prog50 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_globals_in_prog50_data Count:(NSUInteger)1] retain];
-    FOLLOW_method_in_prog53 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_method_in_prog53_data Count:(NSUInteger)1] retain];
-    FOLLOW_decl_in_globals85 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_decl_in_globals85_data Count:(NSUInteger)1] retain];
-    FOLLOW_12_in_method116 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_12_in_method116_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_method118 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_method118_data Count:(NSUInteger)1] retain];
-    FOLLOW_7_in_method120 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_method120_data Count:(NSUInteger)1] retain];
-    FOLLOW_8_in_method122 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_method122_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_method124 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_method124_data Count:(NSUInteger)1] retain];
-    FOLLOW_13_in_block153 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_13_in_block153_data Count:(NSUInteger)1] retain];
-    FOLLOW_decl_in_block156 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_decl_in_block156_data Count:(NSUInteger)1] retain];
-    FOLLOW_stat_in_block161 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_stat_in_block161_data Count:(NSUInteger)1] retain];
-    FOLLOW_14_in_block165 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_14_in_block165_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_stat189 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_stat189_data Count:(NSUInteger)1] retain];
-    FOLLOW_10_in_stat191 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_10_in_stat191_data Count:(NSUInteger)1] retain];
-    FOLLOW_INT_in_stat193 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_stat193_data Count:(NSUInteger)1] retain];
-    FOLLOW_9_in_stat195 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_stat195_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_stat205 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_stat205_data Count:(NSUInteger)1] retain];
-    FOLLOW_11_in_decl219 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_decl219_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_decl221 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_decl221_data Count:(NSUInteger)1] retain];
-    FOLLOW_9_in_decl223 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_decl223_data Count:(NSUInteger)1] retain];
-
-    [ANTLRBaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
+    FOLLOW_globals_in_prog50 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_globals_in_prog50_data Count:(NSUInteger)1] retain];
+    FOLLOW_method_in_prog53 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_method_in_prog53_data Count:(NSUInteger)1] retain];
+    FOLLOW_decl_in_globals85 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_decl_in_globals85_data Count:(NSUInteger)1] retain];
+    FOLLOW_12_in_method116 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_12_in_method116_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_method118 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_method118_data Count:(NSUInteger)1] retain];
+    FOLLOW_7_in_method120 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_method120_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_method122 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_method122_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_method124 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_method124_data Count:(NSUInteger)1] retain];
+    FOLLOW_13_in_block153 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_13_in_block153_data Count:(NSUInteger)1] retain];
+    FOLLOW_decl_in_block156 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_decl_in_block156_data Count:(NSUInteger)1] retain];
+    FOLLOW_stat_in_block161 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_stat_in_block161_data Count:(NSUInteger)1] retain];
+    FOLLOW_14_in_block165 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_14_in_block165_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_stat189 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_stat189_data Count:(NSUInteger)1] retain];
+    FOLLOW_10_in_stat191 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_10_in_stat191_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_stat193 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_stat193_data Count:(NSUInteger)1] retain];
+    FOLLOW_9_in_stat195 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_stat195_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_stat205 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_stat205_data Count:(NSUInteger)1] retain];
+    FOLLOW_11_in_decl219 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_decl219_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_decl221 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_decl221_data Count:(NSUInteger)1] retain];
+    FOLLOW_9_in_decl223 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_decl223_data Count:(NSUInteger)1] retain];
+
+    [BaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
@"ID", @"INT", @"WS", @"'('", @"')'", @"';'", @"'='", @"'int'", @"'method'",
@"'{'", @"'}'", nil] retain]];
-    [ANTLRBaseRecognizer setGrammarFileName:@"SymbolTable.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g"];
}

-+ (SymbolTableParser *)newSymbolTableParser:(id<ANTLRTokenStream>)aStream
++ (SymbolTableParser *)newSymbolTableParser:(id<TokenStream>)aStream
{
return [[SymbolTableParser alloc] initWithTokenStream:aStream];
-
-
}

-- (id) initWithTokenStream:(id<ANTLRTokenStream>)aStream
+- (id) initWithTokenStream:(id<TokenStream>)aStream
{
-    self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:6+1] retain]];
+    self = [super initWithTokenStream:aStream State:[[RecognizerSharedState newRecognizerSharedStateWithRuleLen:6+1] retain]];
if ( self != nil ) {
-
-
/* globalAttributeScopeInit */
+
Symbols_scope = [Symbols_Scope newSymbols_Scope];
-        Symbols_stack = [ANTLRSymbolStack newANTLRSymbolStackWithLen:30];
+
+        Symbols_stack = [SymbolStack newSymbolStackWithLen:30];
+
/* start of actions-actionScope-init */

level = 0;
@@ -178,11 +168,10 @@ static _stack;
- (void) dealloc
{
[Symbols_stack release];
+
[super dealloc];
}

-/* ObjC start members */
-/* ObjC end members */
/* ObjC start actions.(actionScope).methods */
/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
@@ -190,17 +179,22 @@ static _stack;
/* ObjC start rules */
/*
* $ANTLR start prog
- * SymbolTable.g:25:1: prog : globals ( method )* ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:25:1: prog : globals ( method )* ;
*/
- (void) prog
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SymbolTable.g:27:5: ( globals ( method )* ) // ruleBlockSingleAlt
-        // SymbolTable.g:27:9: globals ( method )* // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:27:5: ( globals ( method )* ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:27:9: globals ( method )* // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_globals_in_prog50];
[self globals];
@@ -208,6 +202,7 @@ static _stack;
[self popFollow];


+

do {
NSInteger alt1=2;
@@ -219,8 +214,9 @@ static _stack;

switch (alt1) {
case 1 : ;
-                    // SymbolTable.g:27:18: method // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:27:18: method // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_method_in_prog53];
[self method];
@@ -228,7 +224,7 @@ static _stack;
[self popFollow];


-
+
}
break;

@@ -238,19 +234,19 @@ static _stack;
} while (YES);
loop1: ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -259,22 +255,28 @@ static _stack;

/*
* $ANTLR start globals
- * SymbolTable.g:30:1: globals : ( decl )* ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:30:1: globals : ( decl )* ;
*/
- (void) globals
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
-    [Symbols_stack push:[[Symbols_Scope newSymbols_Scope] retain]];
+    /* ruleScopeSetUp */
+    [Symbols_stack push:[Symbols_Scope newSymbols_Scope]];
+
+    /* ruleDeclarations */


level++;
-        /* scopeSetAttributeRef */((Symbols_Scope *)[Symbols_stack peek]).names =  [ANTLRPtrBuffer newANTLRPtrBufferWithLen:10];
+        /* scopeSetAttributeRef */((Symbols_Scope *)[Symbols_stack peek]).names =  [PtrBuffer newPtrBufferWithLen:10];

@try {
-        // SymbolTable.g:36:5: ( ( decl )* ) // ruleBlockSingleAlt
-        // SymbolTable.g:36:9: ( decl )* // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:36:5: ( ( decl )* ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:36:9: ( decl )* // alt
{
+
+
do {
NSInteger alt2=2;
NSInteger LA2_0 = [input LA:1];
@@ -285,8 +287,9 @@ static _stack;

switch (alt2) {
case 1 : ;
-                    // SymbolTable.g:36:10: decl // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:36:10: decl // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_decl_in_globals85];
[self decl];
@@ -294,7 +297,7 @@ static _stack;
[self popFollow];


-
+
}
break;

@@ -304,25 +307,26 @@ static _stack;
} while (YES);
loop2: ;

+


NSLog( @"globals: %@", [((Symbols_Scope *)[Symbols_stack peek]).names toString] );
level--;


-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */
[Symbols_stack pop];

}
@@ -332,25 +336,30 @@ static _stack;

/*
* $ANTLR start method
- * SymbolTable.g:43:1: method : 'method' ID '(' ')' block ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:43:1: method : 'method' ID '(' ')' block ;
*/
- (void) method
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SymbolTable.g:44:5: ( 'method' ID '(' ')' block ) // ruleBlockSingleAlt
-        // SymbolTable.g:44:9: 'method' ID '(' ')' block // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:44:5: ( 'method' ID '(' ')' block ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:44:9: 'method' ID '(' ')' block // alt
{
-        [self match:input TokenType:12 Follow:FOLLOW_12_in_method116];

+        [self match:input TokenType:12 Follow:FOLLOW_12_in_method116];
+
[self match:input TokenType:ID Follow:FOLLOW_ID_in_method118];
-
+
[self match:input TokenType:7 Follow:FOLLOW_7_in_method120];
-
+
[self match:input TokenType:8 Follow:FOLLOW_8_in_method122];
-
+
/* ruleRef */
[self pushFollow:FOLLOW_block_in_method124];
[self block];
@@ -358,19 +367,19 @@ static _stack;
[self popFollow];


-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -379,23 +388,29 @@ static _stack;

/*
* $ANTLR start block
- * SymbolTable.g:47:1: block : '{' ( decl )* ( stat )* '}' ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:47:1: block : '{' ( decl )* ( stat )* '}' ;
*/
- (void) block
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
-    [Symbols_stack push:[[Symbols_Scope newSymbols_Scope] retain]];
+    /* ruleScopeSetUp */
+    [Symbols_stack push:[Symbols_Scope newSymbols_Scope]];
+
+    /* ruleDeclarations */


level++;
-        /* scopeSetAttributeRef */((Symbols_Scope *)[Symbols_stack peek]).names =  [ANTLRPtrBuffer newANTLRPtrBufferWithLen:10];
+        /* scopeSetAttributeRef */((Symbols_Scope *)[Symbols_stack peek]).names =  [PtrBuffer newPtrBufferWithLen:10];

@try {
-        // SymbolTable.g:53:5: ( '{' ( decl )* ( stat )* '}' ) // ruleBlockSingleAlt
-        // SymbolTable.g:53:9: '{' ( decl )* ( stat )* '}' // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:53:5: ( '{' ( decl )* ( stat )* '}' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:53:9: '{' ( decl )* ( stat )* '}' // alt
{
+
[self match:input TokenType:13 Follow:FOLLOW_13_in_block153];
+

do {
NSInteger alt3=2;
@@ -407,8 +422,9 @@ static _stack;

switch (alt3) {
case 1 : ;
-                    // SymbolTable.g:53:14: decl // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:53:14: decl // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_decl_in_block156];
[self decl];
@@ -416,7 +432,7 @@ static _stack;
[self popFollow];


-
+
}
break;

@@ -426,6 +442,7 @@ static _stack;
} while (YES);
loop3: ;

+

do {
NSInteger alt4=2;
@@ -437,8 +454,9 @@ static _stack;

switch (alt4) {
case 1 : ;
-                    // SymbolTable.g:53:22: stat // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:53:22: stat // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_stat_in_block161];
[self stat];
@@ -446,7 +464,7 @@ static _stack;
[self popFollow];


-
+
}
break;

@@ -456,27 +474,28 @@ static _stack;
} while (YES);
loop4: ;

-
+
[self match:input TokenType:14 Follow:FOLLOW_14_in_block165];
+


NSLog( @"level %d symbols: %@", level, [((Symbols_Scope *)[Symbols_stack peek]).names toString] );
level--;


-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */
[Symbols_stack pop];

}
@@ -486,15 +505,19 @@ static _stack;

/*
* $ANTLR start stat
- * SymbolTable.g:60:1: stat : ( ID '=' INT ';' | block );
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:60:1: stat : ( ID '=' INT ';' | block );
*/
- (void) stat
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SymbolTable.g:60:5: ( ID '=' INT ';' | block ) //ruleblock
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:60:5: ( ID '=' INT ';' | block ) //ruleblock
NSInteger alt5=2;
NSInteger LA5_0 = [input LA:1];

@@ -505,28 +528,30 @@ static _stack;
alt5=2;
}
else {
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:5 state:0 stream:input];
+            NoViableAltException *nvae = [NoViableAltException newException:5 state:0 stream:input];
nvae.c = LA5_0;
@throw nvae;

}
switch (alt5) {
case 1 : ;
-                // SymbolTable.g:60:9: ID '=' INT ';' // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:60:9: ID '=' INT ';' // alt
{
-                [self match:input TokenType:ID Follow:FOLLOW_ID_in_stat189];

+                [self match:input TokenType:ID Follow:FOLLOW_ID_in_stat189];
+
[self match:input TokenType:10 Follow:FOLLOW_10_in_stat191];
-
+
[self match:input TokenType:INT Follow:FOLLOW_INT_in_stat193];
-
+
[self match:input TokenType:9 Follow:FOLLOW_9_in_stat195];
-
+
}
break;
case 2 : ;
-                // SymbolTable.g:61:9: block // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:61:9: block // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_block_in_stat205];
[self block];
@@ -534,21 +559,21 @@ static _stack;
[self popFollow];


-
+
}
break;

}
-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -557,40 +582,44 @@ static _stack;

/*
* $ANTLR start decl
- * SymbolTable.g:64:1: decl : 'int' ID ';' ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:64:1: decl : 'int' ID ';' ;
*/
- (void) decl
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        ANTLRCommonToken *ID1 = nil;
+        /* ruleLabelDefs entry */
+        CommonToken *ID1 = nil;

-        // SymbolTable.g:64:5: ( 'int' ID ';' ) // ruleBlockSingleAlt
-        // SymbolTable.g:64:9: 'int' ID ';' // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:64:5: ( 'int' ID ';' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/SymbolTable.g:64:9: 'int' ID ';' // alt
{
-        [self match:input TokenType:11 Follow:FOLLOW_11_in_decl219];
-
-        ID1=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_decl221];

+        [self match:input TokenType:11 Follow:FOLLOW_11_in_decl219];
+
+        ID1=(CommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_decl221];
+
[self match:input TokenType:9 Follow:FOLLOW_9_in_decl223];
+

[((Symbols_Scope *)[Symbols_stack peek]).names addObject:ID1];

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
diff --git a/runtime/ObjC/Framework/examples/scopes/antlr3.h b/runtime/ObjC/Framework/examples/scopes/antlr3.h
deleted file mode 100644
index 4f16279..0000000
--- a/runtime/ObjC/Framework/examples/scopes/antlr3.h
+++ /dev/null
@@ -1,79 +0,0 @@
-#import <ANTLR/ANTLRBaseMapElement.h>
-#import <ANTLR/ANTLRBaseRecognizer.h>
-#import <ANTLR/ANTLRBaseStack.h>
-#import <ANTLR/ANTLRBaseTree.h>
-#import <ANTLR/ANTLRBaseTreeAdaptor.h>
-#import <ANTLR/ANTLRBitSet.h>
-#import <ANTLR/ANTLRBufferedTokenStream.h>
-#import <ANTLR/ANTLRBufferedTreeNodeStream.h>
-#import <ANTLR/ANTLRCharStream.h>
-#import <ANTLR/ANTLRCharStreamState.h>
-#import <ANTLR/ANTLRCommonErrorNode.h>
-#import <ANTLR/ANTLRCommonToken.h>
-#import <ANTLR/ANTLRCommonTokenStream.h>
-#import <ANTLR/ANTLRCommonTree.h>
-#import <ANTLR/ANTLRCommonTreeAdaptor.h>
-#import <ANTLR/ANTLRCommonTreeNodeStream.h>
-#import <ANTLR/ANTLRDFA.h>
-#import <ANTLR/ANTLRDebug.h>
-#import <ANTLR/ANTLRDebugEventProxy.h>
-#import <ANTLR/ANTLRDebugEventListener.h>
-#import <ANTLR/ANTLRDebugParser.h>
-#import <ANTLR/ANTLRDebugTokenStream.h>
-#import <ANTLR/ANTLRDebugTreeAdaptor.h>
-#import <ANTLR/ANTLRDebugTreeNodeStream.h>
-#import <ANTLR/ANTLRDebugTreeParser.h>
-#import <ANTLR/ANTLREarlyExitException.h>
-#import <ANTLR/ANTLRError.h>
-#import <ANTLR/ANTLRFailedPredicateException.h>
-#import <ANTLR/ANTLRFastQueue.h>
-#import <ANTLR/ANTLRHashMap.h>
-#import <ANTLR/ANTLRHashRule.h>
-#import <ANTLR/ANTLRIntArray.h>
-#import <ANTLR/ANTLRIntStream.h>
-#import <ANTLR/ANTLRLexer.h>
-#import <ANTLR/ANTLRLexerRuleReturnScope.h>
-#import <ANTLR/ANTLRLinkBase.h>
-#import <ANTLR/ANTLRLookaheadStream.h>
-#import <ANTLR/ANTLRMapElement.h>
-#import <ANTLR/ANTLRMap.h>
-#import <ANTLR/ANTLRMismatchedNotSetException.h>
-#import <ANTLR/ANTLRMismatchedRangeException.h>
-#import <ANTLR/ANTLRMismatchedSetException.h>
-#import <ANTLR/ANTLRMismatchedTokenException.h>
-#import <ANTLR/ANTLRMismatchedTreeNodeException.h>
-#import <ANTLR/ANTLRMissingTokenException.h>
-#import <ANTLR/ANTLRNodeMapElement.h>
-#import <ANTLR/ANTLRNoViableAltException.h>
-#import <ANTLR/ANTLRParser.h>
-#import <ANTLR/ANTLRParserRuleReturnScope.h>
-#import <ANTLR/ANTLRPtrBuffer.h>
-#import <ANTLR/ANTLRRecognitionException.h>
-#import <ANTLR/ANTLRRecognizerSharedState.h>
-#import <ANTLR/ANTLRRewriteRuleElementStream.h>
-#import <ANTLR/ANTLRRewriteRuleSubtreeStream.h>
-#import <ANTLR/ANTLRRewriteRuleTokenStream.h>
-#import <ANTLR/ANTLRRuleMemo.h>
-#import <ANTLR/ANTLRRuleStack.h>
-#import <ANTLR/ANTLRRuleReturnScope.h>
-#import <ANTLR/ANTLRRuntimeException.h>
-#import <ANTLR/ANTLRStreamEnumerator.h>
-#import <ANTLR/ANTLRStringStream.h>
-#import <ANTLR/ANTLRSymbolStack.h>
-#import <ANTLR/ANTLRToken+DebuggerSupport.h>
-#import <ANTLR/ANTLRToken.h>
-#import <ANTLR/ANTLRTokenRewriteStream.h>
-#import <ANTLR/ANTLRTokenSource.h>
-#import <ANTLR/ANTLRTokenStream.h>
-#import <ANTLR/ANTLRTree.h>
-#import <ANTLR/ANTLRTreeAdaptor.h>
-#import <ANTLR/ANTLRTreeException.h>
-#import <ANTLR/ANTLRTreeIterator.h>
-#import <ANTLR/ANTLRTreeNodeStream.h>
-#import <ANTLR/ANTLRTreeParser.h>
-#import <ANTLR/ANTLRTreeRuleReturnScope.h>
-#import <ANTLR/ANTLRUnbufferedTokenStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStreamState.h>
-#import <ANTLR/ANTLRUniqueIDMap.h>
-#import <ANTLR/ANTLRUnwantedTokenException.h>
diff --git a/runtime/ObjC/Framework/examples/scopes/main.m b/runtime/ObjC/Framework/examples/scopes/main.m
index edd9a23..be9ea8f 100644
--- a/runtime/ObjC/Framework/examples/scopes/main.m
+++ b/runtime/ObjC/Framework/examples/scopes/main.m
@@ -1,22 +1,24 @@
#import <Cocoa/Cocoa.h>
-#import <antlr3.h>
+#import <ANTLR/ANTLR.h>
#import "SymbolTableLexer.h"
#import "SymbolTableParser.h"

-int main() {
+int main()
+{
+    NSError *error;
NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

-	NSString *string = [NSString stringWithContentsOfFile:@"/Users/acondit/source/antlr3/acondit_localhost/code/antlr/antlr3-main/runtime/ObjC/Framework/examples/scopes/input"];
+	NSString *string = [NSString stringWithContentsOfFile:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/scopes/input" encoding:NSASCIIStringEncoding error:&error];
NSLog(@"input is : %@", string);
ANTLRStringStream *stream = [[ANTLRStringStream alloc] initWithStringNoCopy:string];
SymbolTableLexer *lexer = [[SymbolTableLexer alloc] initWithCharStream:stream];

-//	ANTLRCommonToken *currentToken;
-//	while ((currentToken = [lexer nextToken]) && [currentToken getType] != ANTLRTokenTypeEOF) {
+//	CommonToken *currentToken;
+//	while ((currentToken = [lexer nextToken]) && currentToken.type != TokenTypeEOF) {
//		NSLog(@"%@", currentToken);
//	}

-	ANTLRCommonTokenStream *tokens = [[ANTLRCommonTokenStream alloc] initWithTokenSource:lexer];
+	CommonTokenStream *tokens = [[CommonTokenStream alloc] initWithTokenSource:lexer];
SymbolTableParser *parser = [[SymbolTableParser alloc] initWithTokenStream:tokens];
[parser prog];

diff --git a/runtime/ObjC/Framework/examples/scopes/output1/SymbolTable.tokens b/runtime/ObjC/Framework/examples/scopes/output1/SymbolTable.tokens
deleted file mode 100644
index 6740901..0000000
--- a/runtime/ObjC/Framework/examples/scopes/output1/SymbolTable.tokens
+++ /dev/null
@@ -1,19 +0,0 @@
-WS=6
-T__12=12
-T__11=11
-T__14=14
-T__13=13
-T__10=10
-INT=5
-ID=4
-T__9=9
-T__8=8
-T__7=7
-';'=13
-'}'=11
-'='=12
-'int'=14
-'('=8
-'method'=7
-')'=9
-'{'=10
diff --git a/runtime/ObjC/Framework/examples/scopes/output1/SymbolTableLexer.h b/runtime/ObjC/Framework/examples/scopes/output1/SymbolTableLexer.h
deleted file mode 100644
index 47276a3..0000000
--- a/runtime/ObjC/Framework/examples/scopes/output1/SymbolTableLexer.h
+++ /dev/null
@@ -1,53 +0,0 @@
-// $ANTLR 3.2 Aug 19, 2010 17:16:04 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g 2010-08-19 17:16:47
-
-/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
- */
-#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
-/* End of standard antlr3 runtime definitions
- * =============================================================================
- */
-
-#pragma mark Cyclic DFA interface start DFA4
-@interface DFA4 : ANTLRDFA {
-}
-+ newDFA4WithRecognizer:(ANTLRBaseRecognizer *)theRecognizer;
-- initWithRecognizer:(ANTLRBaseRecognizer *)recognizer;
-@end
-
-#pragma mark Cyclic DFA interface end DFA4
-
-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
-#pragma mark Tokens
-#define WS 6
-#define T__12 12
-#define T__11 11
-#define T__14 14
-#define T__13 13
-#define T__10 10
-#define INT 5
-#define ID 4
-#define EOF -1
-#define T__9 9
-#define T__8 8
-#define T__7 7
-@interface SymbolTableLexer : ANTLRLexer { // line 283
-    DFA4 *dfa4;
-}
-+ (SymbolTableLexer *)newSymbolTableLexer:(id<ANTLRCharStream>)anInput;
-
-- (void) mT__7;
-- (void) mT__8;
-- (void) mT__9;
-- (void) mT__10;
-- (void) mT__11;
-- (void) mT__12;
-- (void) mT__13;
-- (void) mT__14;
-- (void) mID;
-- (void) mINT;
-- (void) mWS;
-- (void) mTokens;
-@end // end of SymbolTableLexer interface
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/examples/scopes/output1/SymbolTableLexer.m b/runtime/ObjC/Framework/examples/scopes/output1/SymbolTableLexer.m
deleted file mode 100644
index baf9292..0000000
--- a/runtime/ObjC/Framework/examples/scopes/output1/SymbolTableLexer.m
+++ /dev/null
@@ -1,712 +0,0 @@
-/** \file
- *  This OBJC source file was generated by $ANTLR version 3.2 Aug 19, 2010 17:16:04
- *
- *     -  From the grammar source file : /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g
- *     -                            On : 2010-08-19 17:16:47
- *     -                 for the lexer : SymbolTableLexerLexer *
- * Editing it, at least manually, is not wise.
- *
- * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
- *
- *
-*/
-// [The "BSD licence"]
-// Copyright (c) 2010 Alan Condit
-//
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. The name of the author may not be used to endorse or promote products
-//    derived from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// $ANTLR 3.2 Aug 19, 2010 17:16:04 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g 2010-08-19 17:16:47
-
-/* -----------------------------------------
- * Include the ANTLR3 generated header file.
- */
-#import "SymbolTableLexer.h"
-/* ----------------------------------------- */
-
-
-/* ============================================================================= */
-
-/* =============================================================================
- * Start of recognizer
- */
-
-#pragma mark Cyclic DFA implementation start DFA4
-@implementation DFA4
-const static NSInteger dfa4_eot[21] =
-    {-1,9,-1,-1,-1,-1,-1,-1,9,-1,-1,-1,9,9,9,17,9,-1,9,20,-1};
-const static NSInteger dfa4_eof[21] =
-    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static unichar dfa4_min[21] =
-    {10,101,0,0,0,0,0,0,110,0,0,0,116,116,104,97,111,0,100,97,0};
-const static unichar dfa4_max[21] =
-    {125,101,0,0,0,0,0,0,110,0,0,0,116,116,104,122,111,0,100,122,0};
-const static NSInteger dfa4_accept[21] =
-    {-1,-1,2,3,4,5,6,7,-1,9,10,11,-1,-1,-1,-1,-1,8,-1,-1,1};
-const static NSInteger dfa4_special[21] =
-    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static NSInteger dfa4_transition[] = {};
-const static NSInteger dfa4_transition0[] = {11, -1, -1, 11, -1, -1, -1,
- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1,
- -1, -1, -1, -1, -1, 2, 3, -1, -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10,
- 10, 10, 10, 10, -1, 7, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
- -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 1, 9, 9, 9,
- 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, -1, 5};
-const static NSInteger dfa4_transition1[] = {19};
-const static NSInteger dfa4_transition2[] = {16};
-const static NSInteger dfa4_transition3[] = {18};
-const static NSInteger dfa4_transition4[] = {13};
-const static NSInteger dfa4_transition5[] = {15};
-const static NSInteger dfa4_transition6[] = {12};
-const static NSInteger dfa4_transition7[] = {14};
-const static NSInteger dfa4_transition8[] = {9, 9, 9, 9, 9, 9, 9, 9, 9,
- 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
-
-
-+ () newDFA4WithRecognizer:(ANTLRBaseRecognizer *)aRecognizer
-{
-    return [[[DFA4 alloc] initWithRecognizer:aRecognizer] retain];
-}
-
-- (id) initWithRecognizer:(ANTLRBaseRecognizer *) theRecognizer
-{
-    if ((self = [super initWithRecognizer:theRecognizer]) != nil) {
-        decisionNumber = 4;
-        eot = dfa4_eot;
-        eof = dfa4_eof;
-        min = dfa4_min;
-        max = dfa4_max;
-        accept = dfa4_accept;
-        special = dfa4_special;
-        if (!(transition = calloc(21, sizeof(void*)))) {
-            [self release];
-            return nil;
-        }
-        len = 21;
-        transition[0] = dfa4_transition0;
-        transition[1] = dfa4_transition6;
-        transition[2] = dfa4_transition;
-        transition[3] = dfa4_transition;
-        transition[4] = dfa4_transition;
-        transition[5] = dfa4_transition;
-        transition[6] = dfa4_transition;
-        transition[7] = dfa4_transition;
-        transition[8] = dfa4_transition4;
-        transition[9] = dfa4_transition;
-        transition[10] = dfa4_transition;
-        transition[11] = dfa4_transition;
-        transition[12] = dfa4_transition7;
-        transition[13] = dfa4_transition5;
-        transition[14] = dfa4_transition2;
-        transition[15] = dfa4_transition8;
-        transition[16] = dfa4_transition3;
-        transition[17] = dfa4_transition;
-        transition[18] = dfa4_transition1;
-        transition[19] = dfa4_transition8;
-        transition[20] = dfa4_transition;
-    }
-    return self;
-}
-
-- (void) dealloc
-{
-    free(transition);
-    [super dealloc];
-}
-
-- (NSString *) description
-{
-    return @"1:1: Tokens : ( T__7 | T__8 | T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | ID | INT | WS );";
-}
-
-
-@end
-#pragma mark Cyclic DFA implementation end DFA4
-
-
-
-/** As per Terence: No returns for lexer rules!
-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
-*/
-@implementation SymbolTableLexer // line 330
-
-+ (void) initialize
-{
-    [ANTLRBaseRecognizer setGrammarFileName:@"/usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g"];
-}
-
-+ (NSString *) tokenNameForType:(NSInteger)aTokenType
-{
-    return [[self getTokenNames] objectAtIndex:aTokenType];
-}
-
-+ (SymbolTableLexer *)newSymbolTableLexer:(id<ANTLRCharStream>)anInput
-{
-    return [[SymbolTableLexer alloc] initWithCharStream:anInput];
-}
-
-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
-{
-    if ((self = [super initWithCharStream:anInput State:[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:12+1]]) != nil) {
-
-        dfa4 = [DFA4 newDFA4WithRecognizer:self];
-    }
-    return self;
-}
-
-- (void) dealloc
-{
-    [dfa4 release];
-    [super dealloc];
-}
-
-// Start of actions.lexer.methods
-// start methods()
-
-// Start of Rules
-// $ANTLR start "T__7"
-- (void) mT__7
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = T__7;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:7:6: ( 'method' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:7:8: 'method' // alt
-        {
-        [self matchString:@"method"];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "T__7"
-
-// $ANTLR start "T__8"
-- (void) mT__8
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = T__8;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:8:6: ( '(' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:8:8: '(' // alt
-        {
-        [self matchChar:'('];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "T__8"
-
-// $ANTLR start "T__9"
-- (void) mT__9
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = T__9;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:9:6: ( ')' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:9:8: ')' // alt
-        {
-        [self matchChar:')'];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "T__9"
-
-// $ANTLR start "T__10"
-- (void) mT__10
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = T__10;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:10:7: ( '{' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:10:9: '{' // alt
-        {
-        [self matchChar:'{'];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "T__10"
-
-// $ANTLR start "T__11"
-- (void) mT__11
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = T__11;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:11:7: ( '}' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:11:9: '}' // alt
-        {
-        [self matchChar:'}'];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "T__11"
-
-// $ANTLR start "T__12"
-- (void) mT__12
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = T__12;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:12:7: ( '=' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:12:9: '=' // alt
-        {
-        [self matchChar:'='];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "T__12"
-
-// $ANTLR start "T__13"
-- (void) mT__13
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = T__13;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:13:7: ( ';' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:13:9: ';' // alt
-        {
-        [self matchChar:';'];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "T__13"
-
-// $ANTLR start "T__14"
-- (void) mT__14
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = T__14;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:14:7: ( 'int' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:14:9: 'int' // alt
-        {
-        [self matchString:@"int"];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "T__14"
-
-// $ANTLR start "ID"
-- (void) mID
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = ID;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:66:5: ( ( 'a' .. 'z' )+ ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:66:9: ( 'a' .. 'z' )+ // alt
-        {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:66:9: ( 'a' .. 'z' )+ // positiveClosureBlock
-        NSInteger cnt1=0;
-        do {
-            NSInteger alt1=2;
-            NSInteger LA1_0 = [input LA:1];
-            if ( ((LA1_0>='a' && LA1_0<='z')) ) {
-                alt1=1;
-            }
-
-
-            switch (alt1) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:66:10: 'a' .. 'z' // alt
-                    {
-                    [self matchRangeFromChar:'a' to:'z'];   /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    if ( cnt1 >= 1 )
-                        goto loop1;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:1];
-                    @throw eee;
-            }
-            cnt1++;
-        } while (YES);
-        loop1: ;
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "ID"
-
-// $ANTLR start "INT"
-- (void) mINT
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = INT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:69:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:69:9: ( '0' .. '9' )+ // alt
-        {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:69:9: ( '0' .. '9' )+ // positiveClosureBlock
-        NSInteger cnt2=0;
-        do {
-            NSInteger alt2=2;
-            NSInteger LA2_0 = [input LA:1];
-            if ( ((LA2_0>='0' && LA2_0<='9')) ) {
-                alt2=1;
-            }
-
-
-            switch (alt2) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:69:10: '0' .. '9' // alt
-                    {
-                    [self matchRangeFromChar:'0' to:'9'];   /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    if ( cnt2 >= 1 )
-                        goto loop2;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:2];
-                    @throw eee;
-            }
-            cnt2++;
-        } while (YES);
-        loop2: ;
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "INT"
-
-// $ANTLR start "WS"
-- (void) mWS
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = WS;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:72:5: ( ( ' ' | '\\n' | '\\r' )+ ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:72:9: ( ' ' | '\\n' | '\\r' )+ // alt
-        {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:72:9: ( ' ' | '\\n' | '\\r' )+ // positiveClosureBlock
-        NSInteger cnt3=0;
-        do {
-            NSInteger alt3=2;
-            NSInteger LA3_0 = [input LA:1];
-            if ( (LA3_0=='\n'||LA3_0=='\r'||LA3_0==' ') ) {
-                alt3=1;
-            }
-
-
-            switch (alt3) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g: // alt
-                    {
-                    if ([input LA:1] == '\n'||[input LA:1] == '\r'||[input LA:1] == ' ') {
-                        [input consume];
-
-                    } else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
-                        [self recover:mse];
-                        @throw mse;}
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    if ( cnt3 >= 1 )
-                        goto loop3;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:3];
-                    @throw eee;
-            }
-            cnt3++;
-        } while (YES);
-        loop3: ;
-          /* element() */
-        state.channel=99;  /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "WS"
-
-- (void) mTokens
-{
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:1:8: ( T__7 | T__8 | T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | ID | INT | WS ) //ruleblock
-    NSInteger alt4=11;
-    alt4 = [dfa4 predict:input];
-    switch (alt4) {
-        case 1 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:1:10: T__7 // alt
-            {
-                [self mT__7];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 2 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:1:15: T__8 // alt
-            {
-                [self mT__8];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 3 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:1:20: T__9 // alt
-            {
-                [self mT__9];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 4 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:1:25: T__10 // alt
-            {
-                [self mT__10];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 5 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:1:31: T__11 // alt
-            {
-                [self mT__11];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 6 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:1:37: T__12 // alt
-            {
-                [self mT__12];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 7 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:1:43: T__13 // alt
-            {
-                [self mT__13];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 8 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:1:49: T__14 // alt
-            {
-                [self mT__14];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 9 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:1:55: ID // alt
-            {
-                [self mID];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 10 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:1:58: INT // alt
-            {
-                [self mINT];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 11 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:1:62: WS // alt
-            {
-                [self mWS];
-              /* element() */
-             /* elements */
-            }
-            break;
-
-    }
-
-}
-
-@end // end of SymbolTableLexer implementation // line 397
-
-/* End of code
- * =============================================================================
- */
diff --git a/runtime/ObjC/Framework/examples/scopes/output1/SymbolTableParser.h b/runtime/ObjC/Framework/examples/scopes/output1/SymbolTableParser.h
deleted file mode 100644
index 6f22956..0000000
--- a/runtime/ObjC/Framework/examples/scopes/output1/SymbolTableParser.h
+++ /dev/null
@@ -1,75 +0,0 @@
-// $ANTLR 3.2 Aug 19, 2010 17:16:04 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g 2010-08-19 17:16:47
-
-/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
- */
-#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
-/* End of standard antlr3 runtime definitions
- * =============================================================================
- */
-
-#pragma mark Tokens
-#define WS 6
-#define T__12 12
-#define T__11 11
-#define T__14 14
-#define T__13 13
-#define T__10 10
-#define INT 5
-#define ID 4
-#define EOF -1
-#define T__9 9
-#define T__8 8
-#define T__7 7
-#pragma mark Dynamic Global Scopes
-@interface Symbols_Scope : ANTLRSymbolsScope {  /* globalAttributeScopeDecl */
-ANTLRHashMap * names;
-}
-/* start of properties */
-
-@property (retain, getter=getnames, setter=setnames:) ANTLRHashMap * names;
-
-/* end properties */
-
-+ (Symbols_Scope *)newSymbols_Scope;
-/* start of iterated get and set functions */
-
-- (ANTLRHashMap *)getnames;
-- (void)setnames:(ANTLRHashMap *)aVal;
-
-/* End of iterated get and set functions */
-
-@end
-#pragma mark Dynamic Rule Scopes
-#pragma mark Rule Return Scopes start
-#pragma mark Rule return scopes end
-@interface SymbolTableParser : ANTLRParser { // line 529
-// start of globalAttributeScopeMemVar
-/* globalAttributeScopeMemVar */
-ANTLRSymbolStack *gStack;
-Symbols_Scope *Symbols_scope;
-
-// start of action-actionScope-memVars
-
-int level;
-
-// start of ruleAttributeScopeMemVar
-
-
-// Start of memVars
-
- }
-
-// start of action-actionScope-methodsDecl
-
-
-- (void)prog;
-- (void)globals;
-- (void)method;
-- (void)block;
-- (void)stat;
-- (void)decl;
-
-
-@end // end of SymbolTableParser
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/examples/scopes/output1/SymbolTableParser.m b/runtime/ObjC/Framework/examples/scopes/output1/SymbolTableParser.m
deleted file mode 100644
index 100592a..0000000
--- a/runtime/ObjC/Framework/examples/scopes/output1/SymbolTableParser.m
+++ /dev/null
@@ -1,579 +0,0 @@
-/** \file
- *  This OBJC source file was generated by $ANTLR version 3.2 Aug 19, 2010 17:16:04
- *
- *     -  From the grammar source file : /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g
- *     -                            On : 2010-08-19 17:16:47
- *     -                for the parser : SymbolTableParserParser *
- * Editing it, at least manually, is not wise.
- *
- * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
- *
- *
-*/
-// [The "BSD licence"]
-// Copyright (c) 2010 Alan Condit
-//
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. The name of the author may not be used to endorse or promote products
-//    derived from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// $ANTLR 3.2 Aug 19, 2010 17:16:04 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g 2010-08-19 17:16:47
-
-/* -----------------------------------------
- * Include the ANTLR3 generated header file.
- */
-#import "SymbolTableParser.h"
-/* ----------------------------------------- */
-
-
-/* ============================================================================= */
-
-/* =============================================================================
- * Start of recognizer
- */
-
-
-
-#pragma mark Bitsets
-static ANTLRBitSet *FOLLOW_globals_in_prog44;
-
-const unsigned long long FOLLOW_globals_in_prog44_data[] = { 0x0000000000000082LL};
-
-static ANTLRBitSet *FOLLOW_method_in_prog47;
-
-const unsigned long long FOLLOW_method_in_prog47_data[] = { 0x0000000000000082LL};
-
-static ANTLRBitSet *FOLLOW_decl_in_globals79;
-
-const unsigned long long FOLLOW_decl_in_globals79_data[] = { 0x0000000000004002LL};
-
-static ANTLRBitSet *FOLLOW_7_in_method110;
-
-const unsigned long long FOLLOW_7_in_method110_data[] = { 0x0000000000000010LL};
-
-static ANTLRBitSet *FOLLOW_ID_in_method112;
-
-const unsigned long long FOLLOW_ID_in_method112_data[] = { 0x0000000000000100LL};
-
-static ANTLRBitSet *FOLLOW_8_in_method114;
-
-const unsigned long long FOLLOW_8_in_method114_data[] = { 0x0000000000000200LL};
-
-static ANTLRBitSet *FOLLOW_9_in_method116;
-
-const unsigned long long FOLLOW_9_in_method116_data[] = { 0x0000000000000400LL};
-
-static ANTLRBitSet *FOLLOW_block_in_method118;
-
-const unsigned long long FOLLOW_block_in_method118_data[] = { 0x0000000000000002LL};
-
-static ANTLRBitSet *FOLLOW_10_in_block147;
-
-const unsigned long long FOLLOW_10_in_block147_data[] = { 0x0000000000004C10LL};
-
-static ANTLRBitSet *FOLLOW_decl_in_block150;
-
-const unsigned long long FOLLOW_decl_in_block150_data[] = { 0x0000000000004C10LL};
-
-static ANTLRBitSet *FOLLOW_stat_in_block155;
-
-const unsigned long long FOLLOW_stat_in_block155_data[] = { 0x0000000000000C10LL};
-
-static ANTLRBitSet *FOLLOW_11_in_block159;
-
-const unsigned long long FOLLOW_11_in_block159_data[] = { 0x0000000000000002LL};
-
-static ANTLRBitSet *FOLLOW_ID_in_stat183;
-
-const unsigned long long FOLLOW_ID_in_stat183_data[] = { 0x0000000000001000LL};
-
-static ANTLRBitSet *FOLLOW_12_in_stat185;
-
-const unsigned long long FOLLOW_12_in_stat185_data[] = { 0x0000000000000020LL};
-
-static ANTLRBitSet *FOLLOW_INT_in_stat187;
-
-const unsigned long long FOLLOW_INT_in_stat187_data[] = { 0x0000000000002000LL};
-
-static ANTLRBitSet *FOLLOW_13_in_stat189;
-
-const unsigned long long FOLLOW_13_in_stat189_data[] = { 0x0000000000000002LL};
-
-static ANTLRBitSet *FOLLOW_block_in_stat199;
-
-const unsigned long long FOLLOW_block_in_stat199_data[] = { 0x0000000000000002LL};
-
-static ANTLRBitSet *FOLLOW_14_in_decl213;
-
-const unsigned long long FOLLOW_14_in_decl213_data[] = { 0x0000000000000010LL};
-
-static ANTLRBitSet *FOLLOW_ID_in_decl215;
-
-const unsigned long long FOLLOW_ID_in_decl215_data[] = { 0x0000000000002000LL};
-
-static ANTLRBitSet *FOLLOW_13_in_decl217;
-
-const unsigned long long FOLLOW_13_in_decl217_data[] = { 0x0000000000000002LL};
-
-
-
-#pragma mark Dynamic Global Scopes
-@implementation Symbols_Scope  /* globalAttributeScopeImpl */
-/* start of synthesize -- OBJC-Line 1750 */
-
-@synthesize names;
-+ (Symbols_Scope *)newSymbols_Scope
-{
-    return [[[Symbols_Scope alloc] init] retain];
-}
-/* start of iterate get and set functions */
-
-- (ANTLRHashMap *)getnames { return( names ); }
-
-- (void)setnames:(ANTLRHashMap *)aVal { names = aVal; }
-
-
-
-/* End of iterate get and set functions */
-
-@end
-
-#pragma mark Dynamic Rule Scopes
-
-#pragma mark Rule return scopes start
-
-@implementation SymbolTableParser  // line 610
-
-+ (void) initialize
-{
-    FOLLOW_globals_in_prog44 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_globals_in_prog44_data Count:(NSUInteger)1] retain];
-    FOLLOW_method_in_prog47 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_method_in_prog47_data Count:(NSUInteger)1] retain];
-    FOLLOW_decl_in_globals79 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_decl_in_globals79_data Count:(NSUInteger)1] retain];
-    FOLLOW_7_in_method110 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_method110_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_method112 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_method112_data Count:(NSUInteger)1] retain];
-    FOLLOW_8_in_method114 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_method114_data Count:(NSUInteger)1] retain];
-    FOLLOW_9_in_method116 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_method116_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_method118 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_method118_data Count:(NSUInteger)1] retain];
-    FOLLOW_10_in_block147 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_10_in_block147_data Count:(NSUInteger)1] retain];
-    FOLLOW_decl_in_block150 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_decl_in_block150_data Count:(NSUInteger)1] retain];
-    FOLLOW_stat_in_block155 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_stat_in_block155_data Count:(NSUInteger)1] retain];
-    FOLLOW_11_in_block159 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_block159_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_stat183 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_stat183_data Count:(NSUInteger)1] retain];
-    FOLLOW_12_in_stat185 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_12_in_stat185_data Count:(NSUInteger)1] retain];
-    FOLLOW_INT_in_stat187 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_stat187_data Count:(NSUInteger)1] retain];
-    FOLLOW_13_in_stat189 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_13_in_stat189_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_stat199 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_stat199_data Count:(NSUInteger)1] retain];
-    FOLLOW_14_in_decl213 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_14_in_decl213_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_decl215 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_decl215_data Count:(NSUInteger)1] retain];
-    FOLLOW_13_in_decl217 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_13_in_decl217_data Count:(NSUInteger)1] retain];
-
-    [ANTLRBaseRecognizer setTokenNames:[[[NSArray alloc] initWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
- @"ID", @"INT", @"WS", @"'method'", @"'('", @"')'", @"'{'", @"'}'", @"'='",
- @"';'", @"'int'", nil] retain]];
-}
-
-+ (SymbolTableParser *)newSymbolTableParser:(id<ANTLRTokenStream>)aStream
-{
-    return [[SymbolTableParser alloc] initWithTokenStream:aStream];
-
-}
-
-- (id) initWithTokenStream:(id<ANTLRTokenStream>)aStream
-{
-    if ((self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:6+1] retain]]) != nil) {
-
-
-        (Symbols_Scope *)Symbols_scope = [Symbols_Scope newSymbols_Scope];
-
-        // start of actions-actionScope-init
-
-        level = 0;
-
-        // start of init
-    }
-    return self;
-}
-
-- (void) dealloc
-{
-    [Symbols_scope release];
-    [super dealloc];
-}
-// start actions.actionScope.methods
-// start methods()
-// start rules
-/*
- * $ANTLR start prog
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:25:1: prog : globals ( method )* ;
- */
-- (void) prog
-{
-    // ruleScopeSetUp
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:25:5: ( globals ( method )* ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:25:9: globals ( method )* // alt
-        {
-        [self pushFollow:FOLLOW_globals_in_prog44];
-        [self globals];
-        [self popFollow];
-
-          /* element() */
-        do {
-            NSInteger alt1=2;
-            NSInteger LA1_0 = [input LA:1];
-            if ( (LA1_0==7) ) {
-                alt1=1;
-            }
-
-
-            switch (alt1) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:25:18: method // alt
-                    {
-                    [self pushFollow:FOLLOW_method_in_prog47];
-                    [self method];
-                    [self popFollow];
-
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop1;
-            }
-        } while (YES);
-        loop1: ;
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-    }
-    return ;
-}
-/* $ANTLR end prog */
-/*
- * $ANTLR start globals
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:28:1: globals : ( decl )* ;
- */
-- (void) globals
-{
-    // ruleScopeSetUp
-    gStack = [ANTLRSymbolStack newANTLRSymbolStackWithLen:30];
-    Symbols_scope = [[Symbols_Scope newSymbols_Scope] retain];
-    [gStack push:Symbols_scope];
-
-
-        level++;
-        /* scopeSetAttributeRef */
-    ((Symbols_Scope *)[gStack peek]).names =  [ANTLRHashMap newANTLRHashMapWithLen:101];
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:34:5: ( ( decl )* ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:34:9: ( decl )* // alt
-        {
-        do {
-            NSInteger alt2=2;
-            NSInteger LA2_0 = [input LA:1];
-            if ( (LA2_0==14) ) {
-                alt2=1;
-            }
-
-
-            switch (alt2) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:34:10: decl // alt
-                    {
-                    [self pushFollow:FOLLOW_decl_in_globals79];
-                    [self decl];
-                    [self popFollow];
-
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop2;
-            }
-        } while (YES);
-        loop2: ;
-          /* element() */
-
-                NSLog(@"globals: %@", /* scopeAttributeRef */
-        ((Symbols_Scope *)[gStack peek]).names);
-                level--;
-                  /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-        [gStack pop];
-
-    }
-    return ;
-}
-/* $ANTLR end globals */
-/*
- * $ANTLR start method
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:41:1: method : 'method' ID '(' ')' block ;
- */
-- (void) method
-{
-    // ruleScopeSetUp
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:42:5: ( 'method' ID '(' ')' block ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:42:9: 'method' ID '(' ')' block // alt
-        {
-        [self match:input TokenType:7 Follow:FOLLOW_7_in_method110];   /* element() */
-        [self match:input TokenType:ID Follow:FOLLOW_ID_in_method112];   /* element() */
-        [self match:input TokenType:8 Follow:FOLLOW_8_in_method114];   /* element() */
-        [self match:input TokenType:9 Follow:FOLLOW_9_in_method116];   /* element() */
-        [self pushFollow:FOLLOW_block_in_method118];
-        [self block];
-        [self popFollow];
-
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-    }
-    return ;
-}
-/* $ANTLR end method */
-/*
- * $ANTLR start block
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:45:1: block : '{' ( decl )* ( stat )* '}' ;
- */
-- (void) block
-{
-    // ruleScopeSetUp
-    gStack = [ANTLRSymbolStack newANTLRSymbolStackWithLen:30];
-    Symbols_scope = [[Symbols_Scope newSymbols_Scope] retain];
-    [gStack push:Symbols_scope];
-
-
-        level++;
-        /* scopeSetAttributeRef */
-    ((Symbols_Scope *)[gStack peek]).names =  [ANTLRHashMap newANTLRHashMapWithLen:101];
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:51:5: ( '{' ( decl )* ( stat )* '}' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:51:9: '{' ( decl )* ( stat )* '}' // alt
-        {
-        [self match:input TokenType:10 Follow:FOLLOW_10_in_block147];   /* element() */
-        do {
-            NSInteger alt3=2;
-            NSInteger LA3_0 = [input LA:1];
-            if ( (LA3_0==14) ) {
-                alt3=1;
-            }
-
-
-            switch (alt3) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:51:14: decl // alt
-                    {
-                    [self pushFollow:FOLLOW_decl_in_block150];
-                    [self decl];
-                    [self popFollow];
-
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop3;
-            }
-        } while (YES);
-        loop3: ;
-          /* element() */
-        do {
-            NSInteger alt4=2;
-            NSInteger LA4_0 = [input LA:1];
-            if ( (LA4_0==ID||LA4_0==10) ) {
-                alt4=1;
-            }
-
-
-            switch (alt4) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:51:22: stat // alt
-                    {
-                    [self pushFollow:FOLLOW_stat_in_block155];
-                    [self stat];
-                    [self popFollow];
-
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop4;
-            }
-        } while (YES);
-        loop4: ;
-          /* element() */
-        [self match:input TokenType:11 Follow:FOLLOW_11_in_block159];   /* element() */
-
-                NSLog(@"level %d symbols: %@", level, /* scopeAttributeRef */
-        ((Symbols_Scope *)[gStack peek]).names);
-                level--;
-                  /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-        [gStack pop];
-
-    }
-    return ;
-}
-/* $ANTLR end block */
-/*
- * $ANTLR start stat
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:58:1: stat : ( ID '=' INT ';' | block );
- */
-- (void) stat
-{
-    // ruleScopeSetUp
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:58:5: ( ID '=' INT ';' | block ) //ruleblock
-        NSInteger alt5=2;
-        NSInteger LA5_0 = [input LA:1];
-
-        if ( (LA5_0==ID) ) {
-            alt5=1;
-        }
-        else if ( (LA5_0==10) ) {
-            alt5=2;
-        }
-        else {
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:5 state:0 stream:input];
-            @throw nvae;
-        }
-        switch (alt5) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:58:9: ID '=' INT ';' // alt
-                {
-                [self match:input TokenType:ID Follow:FOLLOW_ID_in_stat183];   /* element() */
-                [self match:input TokenType:12 Follow:FOLLOW_12_in_stat185];   /* element() */
-                [self match:input TokenType:INT Follow:FOLLOW_INT_in_stat187];   /* element() */
-                [self match:input TokenType:13 Follow:FOLLOW_13_in_stat189];   /* element() */
-                 /* elements */
-                }
-                break;
-            case 2 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:59:9: block // alt
-                {
-                [self pushFollow:FOLLOW_block_in_stat199];
-                [self block];
-                [self popFollow];
-
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-    }
-    return ;
-}
-/* $ANTLR end stat */
-/*
- * $ANTLR start decl
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:62:1: decl : 'int' ID ';' ;
- */
-- (void) decl
-{
-    // ruleScopeSetUp
-
-    @try {
-        id<ANTLRToken> ID1 = nil;
-
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:62:5: ( 'int' ID ';' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/scopes/SymbolTable.g:62:9: 'int' ID ';' // alt
-        {
-        [self match:input TokenType:14 Follow:FOLLOW_14_in_decl213];   /* element() */
-        ID1=(id<ANTLRToken>)[self match:input TokenType:ID Follow:FOLLOW_ID_in_decl215];   /* element() */
-        [self match:input TokenType:13 Follow:FOLLOW_13_in_decl217];   /* element() */
-        [/* scopeAttributeRef */
-        ((Symbols_Scope *)[gStack peek]).names addObject:ID1];  /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-    }
-    return ;
-}
-/* $ANTLR end decl */
-
-@end // end of SymbolTableParser implementation line 669
-
-/* End of code
- * =============================================================================
- */
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCLexer.h b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCLexer.h
index 6c33456..e0b550b 100644
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCLexer.h
+++ b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCLexer.h
@@ -1,7 +1,7 @@
-// $ANTLR ${project.version} ${buildNumber} SimpleC.g 2011-05-06 15:09:17
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g 2012-02-16 17:40:52

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
#import <ANTLR/ANTLR.h>
@@ -11,8 +11,8 @@

/* Start cyclicDFAInterface */

-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
+#pragma mark Rule return scopes Interface start
+#pragma mark Rule return scopes Interface end
#pragma mark Tokens
#ifdef EOF
#undef EOF
@@ -42,12 +42,12 @@
#define VAR_DEF 25
#define WS 26
/* interface lexer class */
-@interface SimpleCLexer : ANTLRLexer { // line 283
+@interface SimpleCLexer : Lexer { // line 283
/* ObjC start of actions.lexer.memVars */
/* ObjC end of actions.lexer.memVars */
}
+ (void) initialize;
-+ (SimpleCLexer *)newSimpleCLexerWithCharStream:(id<ANTLRCharStream>)anInput;
++ (SimpleCLexer *)newSimpleCLexerWithCharStream:(id<CharStream>)anInput;
/* ObjC start actions.lexer.methodsDecl */
/* ObjC end actions.lexer.methodsDecl */
- (void) mK_FOR ;
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCLexer.java b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCLexer.java
index 58cff4e..e8e76fa 100644
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCLexer.java
+++ b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCLexer.java
@@ -1,4 +1,4 @@
-// $ANTLR 3.2 Aug 13, 2010 14:19:31 SimpleC.g 2010-08-13 14:29:19
+// $ANTLR 3.2 Aug 13, 2010 19:41:25 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g 2010-08-13 19:42:18

import org.antlr.runtime.*;
import java.util.Stack;
@@ -42,15 +42,15 @@ public class SimpleCLexer extends Lexer {
super(input,state);

}
-    public String getGrammarFileName() { return "SimpleC.g"; }
+    public String getGrammarFileName() { return "/usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g"; }

// $ANTLR start "T__21"
public final void mT__21() throws RecognitionException {
try {
int _type = T__21;
int _channel = DEFAULT_TOKEN_CHANNEL;
-            // SimpleC.g:7:7: ( ';' )
-            // SimpleC.g:7:9: ';'
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:7:7: ( ';' )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:7:9: ';'
{
match(';');

@@ -69,8 +69,8 @@ public class SimpleCLexer extends Lexer {
try {
int _type = T__22;
int _channel = DEFAULT_TOKEN_CHANNEL;
-            // SimpleC.g:8:7: ( '(' )
-            // SimpleC.g:8:9: '('
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:8:7: ( '(' )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:8:9: '('
{
match('(');

@@ -89,8 +89,8 @@ public class SimpleCLexer extends Lexer {
try {
int _type = T__23;
int _channel = DEFAULT_TOKEN_CHANNEL;
-            // SimpleC.g:9:7: ( ',' )
-            // SimpleC.g:9:9: ','
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:9:7: ( ',' )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:9:9: ','
{
match(',');

@@ -109,8 +109,8 @@ public class SimpleCLexer extends Lexer {
try {
int _type = T__24;
int _channel = DEFAULT_TOKEN_CHANNEL;
-            // SimpleC.g:10:7: ( ')' )
-            // SimpleC.g:10:9: ')'
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:10:7: ( ')' )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:10:9: ')'
{
match(')');

@@ -129,8 +129,8 @@ public class SimpleCLexer extends Lexer {
try {
int _type = T__25;
int _channel = DEFAULT_TOKEN_CHANNEL;
-            // SimpleC.g:11:7: ( '{' )
-            // SimpleC.g:11:9: '{'
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:11:7: ( '{' )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:11:9: '{'
{
match('{');

@@ -149,8 +149,8 @@ public class SimpleCLexer extends Lexer {
try {
int _type = T__26;
int _channel = DEFAULT_TOKEN_CHANNEL;
-            // SimpleC.g:12:7: ( '}' )
-            // SimpleC.g:12:9: '}'
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:12:7: ( '}' )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:12:9: '}'
{
match('}');

@@ -169,8 +169,8 @@ public class SimpleCLexer extends Lexer {
try {
int _type = FOR;
int _channel = DEFAULT_TOKEN_CHANNEL;
-            // SimpleC.g:91:5: ( 'for' )
-            // SimpleC.g:91:7: 'for'
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:91:5: ( 'for' )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:91:7: 'for'
{
match("for");

@@ -190,8 +190,8 @@ public class SimpleCLexer extends Lexer {
try {
int _type = INT_TYPE;
int _channel = DEFAULT_TOKEN_CHANNEL;
-            // SimpleC.g:92:10: ( 'int' )
-            // SimpleC.g:92:12: 'int'
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:92:10: ( 'int' )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:92:12: 'int'
{
match("int");

@@ -211,8 +211,8 @@ public class SimpleCLexer extends Lexer {
try {
int _type = CHAR;
int _channel = DEFAULT_TOKEN_CHANNEL;
-            // SimpleC.g:93:5: ( 'char' )
-            // SimpleC.g:93:7: 'char'
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:93:5: ( 'char' )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:93:7: 'char'
{
match("char");

@@ -232,8 +232,8 @@ public class SimpleCLexer extends Lexer {
try {
int _type = VOID;
int _channel = DEFAULT_TOKEN_CHANNEL;
-            // SimpleC.g:94:5: ( 'void' )
-            // SimpleC.g:94:7: 'void'
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:94:5: ( 'void' )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:94:7: 'void'
{
match("void");

@@ -253,8 +253,8 @@ public class SimpleCLexer extends Lexer {
try {
int _type = ID;
int _channel = DEFAULT_TOKEN_CHANNEL;
-            // SimpleC.g:96:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
-            // SimpleC.g:96:9: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:96:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:96:9: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
{
if ( (input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {
input.consume();
@@ -265,7 +265,7 @@ public class SimpleCLexer extends Lexer {
recover(mse);
throw mse;}

-            // SimpleC.g:96:33: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:96:33: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
loop1:
do {
int alt1=2;
@@ -278,7 +278,7 @@ public class SimpleCLexer extends Lexer {

switch (alt1) {
case 1 :
-            	    // SimpleC.g:
+            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:
{
if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {
input.consume();
@@ -316,10 +316,10 @@ public class SimpleCLexer extends Lexer {
int _channel = DEFAULT_TOKEN_CHANNEL;
CommonToken int=null;
List list_int=null;
-            // SimpleC.g:99:5: ( (int+= ( '0' .. '9' ) )+ )
-            // SimpleC.g:99:7: (int+= ( '0' .. '9' ) )+
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:5: ( (int+= ( '0' .. '9' ) )+ )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:7: (int+= ( '0' .. '9' ) )+
{
-            // SimpleC.g:99:10: (int+= ( '0' .. '9' ) )+
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:10: (int+= ( '0' .. '9' ) )+
int cnt2=0;
loop2:
do {
@@ -333,10 +333,10 @@ public class SimpleCLexer extends Lexer {

switch (alt2) {
case 1 :
-            	    // SimpleC.g:99:10: int+= ( '0' .. '9' )
+            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:10: int+= ( '0' .. '9' )
{
-            	    // SimpleC.g:99:12: ( '0' .. '9' )
-            	    // SimpleC.g:99:13: '0' .. '9'
+            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:12: ( '0' .. '9' )
+            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:13: '0' .. '9'
{
matchRange('0','9');

@@ -372,8 +372,8 @@ public class SimpleCLexer extends Lexer {
try {
int _type = EQ;
int _channel = DEFAULT_TOKEN_CHANNEL;
-            // SimpleC.g:102:6: ( '=' )
-            // SimpleC.g:102:8: '='
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:102:6: ( '=' )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:102:8: '='
{
match('=');

@@ -392,8 +392,8 @@ public class SimpleCLexer extends Lexer {
try {
int _type = EQEQ;
int _channel = DEFAULT_TOKEN_CHANNEL;
-            // SimpleC.g:103:6: ( '==' )
-            // SimpleC.g:103:8: '=='
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:103:6: ( '==' )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:103:8: '=='
{
match("==");

@@ -413,8 +413,8 @@ public class SimpleCLexer extends Lexer {
try {
int _type = LT;
int _channel = DEFAULT_TOKEN_CHANNEL;
-            // SimpleC.g:104:6: ( '<' )
-            // SimpleC.g:104:8: '<'
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:104:6: ( '<' )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:104:8: '<'
{
match('<');

@@ -433,8 +433,8 @@ public class SimpleCLexer extends Lexer {
try {
int _type = PLUS;
int _channel = DEFAULT_TOKEN_CHANNEL;
-            // SimpleC.g:105:6: ( '+' )
-            // SimpleC.g:105:8: '+'
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:105:6: ( '+' )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:105:8: '+'
{
match('+');

@@ -453,10 +453,10 @@ public class SimpleCLexer extends Lexer {
try {
int _type = WS;
int _channel = DEFAULT_TOKEN_CHANNEL;
-            // SimpleC.g:107:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
-            // SimpleC.g:107:9: ( ' ' | '\\t' | '\\r' | '\\n' )+
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:107:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:107:9: ( ' ' | '\\t' | '\\r' | '\\n' )+
{
-            // SimpleC.g:107:9: ( ' ' | '\\t' | '\\r' | '\\n' )+
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:107:9: ( ' ' | '\\t' | '\\r' | '\\n' )+
int cnt3=0;
loop3:
do {
@@ -470,7 +470,7 @@ public class SimpleCLexer extends Lexer {

switch (alt3) {
case 1 :
-            	    // SimpleC.g:
+            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:
{
if ( (input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ' ) {
input.consume();
@@ -507,124 +507,124 @@ public class SimpleCLexer extends Lexer {
// $ANTLR end "WS"

public void mTokens() throws RecognitionException {
-        // SimpleC.g:1:8: ( T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | FOR | INT_TYPE | CHAR | VOID | ID | INT | EQ | EQEQ | LT | PLUS | WS )
+        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:8: ( T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | FOR | INT_TYPE | CHAR | VOID | ID | INT | EQ | EQEQ | LT | PLUS | WS )
int alt4=17;
alt4 = dfa4.predict(input);
switch (alt4) {
case 1 :
-                // SimpleC.g:1:10: T__21
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:10: T__21
{
mT__21();

}
break;
case 2 :
-                // SimpleC.g:1:16: T__22
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:16: T__22
{
mT__22();

}
break;
case 3 :
-                // SimpleC.g:1:22: T__23
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:22: T__23
{
mT__23();

}
break;
case 4 :
-                // SimpleC.g:1:28: T__24
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:28: T__24
{
mT__24();

}
break;
case 5 :
-                // SimpleC.g:1:34: T__25
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:34: T__25
{
mT__25();

}
break;
case 6 :
-                // SimpleC.g:1:40: T__26
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:40: T__26
{
mT__26();

}
break;
case 7 :
-                // SimpleC.g:1:46: FOR
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:46: FOR
{
mFOR();

}
break;
case 8 :
-                // SimpleC.g:1:50: INT_TYPE
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:50: INT_TYPE
{
mINT_TYPE();

}
break;
case 9 :
-                // SimpleC.g:1:59: CHAR
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:59: CHAR
{
mCHAR();

}
break;
case 10 :
-                // SimpleC.g:1:64: VOID
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:64: VOID
{
mVOID();

}
break;
case 11 :
-                // SimpleC.g:1:69: ID
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:69: ID
{
mID();

}
break;
case 12 :
-                // SimpleC.g:1:72: INT
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:72: INT
{
mINT();

}
break;
case 13 :
-                // SimpleC.g:1:76: EQ
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:76: EQ
{
mEQ();

}
break;
case 14 :
-                // SimpleC.g:1:79: EQEQ
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:79: EQEQ
{
mEQEQ();

}
break;
case 15 :
-                // SimpleC.g:1:84: LT
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:84: LT
{
mLT();

}
break;
case 16 :
-                // SimpleC.g:1:87: PLUS
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:87: PLUS
{
mPLUS();

}
break;
case 17 :
-                // SimpleC.g:1:92: WS
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:92: WS
{
mWS();

diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCLexer.m b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCLexer.m
index ce506e1..3f20dff 100644
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCLexer.m
+++ b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCLexer.m
@@ -1,8 +1,8 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : SimpleC.g
- *     -                            On : 2011-05-06 15:09:17
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g
+ *     -                            On : 2012-02-16 17:40:52
*     -                 for the lexer : SimpleCLexerLexer
*
* Editing it, at least manually, is not wise.
@@ -11,7 +11,7 @@
*
*
*/
-// $ANTLR ${project.version} ${buildNumber} SimpleC.g 2011-05-06 15:09:17
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g 2012-02-16 17:40:52


/* -----------------------------------------
@@ -31,7 +31,7 @@

+ (void) initialize
{
-    [ANTLRBaseRecognizer setGrammarFileName:@"SimpleC.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g"];
}

+ (NSString *) tokenNameForType:(NSInteger)aTokenType
@@ -39,14 +39,14 @@
return [[self getTokenNames] objectAtIndex:aTokenType];
}

-+ (SimpleCLexer *)newSimpleCLexerWithCharStream:(id<ANTLRCharStream>)anInput
++ (SimpleCLexer *)newSimpleCLexerWithCharStream:(id<CharStream>)anInput
{
return [[SimpleCLexer alloc] initWithCharStream:anInput];
}

-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
+- (id) initWithCharStream:(id<CharStream>)anInput
{
-    self = [super initWithCharStream:anInput State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:18+1] retain]];
+    self = [super initWithCharStream:anInput State:[RecognizerSharedState newRecognizerSharedStateWithRuleLen:18+1]];
if ( self != nil ) {
}
return self;
@@ -67,155 +67,166 @@
- (void) mK_FOR
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = K_FOR;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:91:7: ( 'for' ) // ruleBlockSingleAlt
-        // SimpleC.g:91:9: 'for' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:91:7: ( 'for' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:91:9: 'for' // alt
{
-        [self matchString:@"for"];


+        [self matchString:@"for"];

+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "K_FOR" */
-
// $ANTLR start "K_CHAR"
- (void) mK_CHAR
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = K_CHAR;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:92:7: ( 'char' ) // ruleBlockSingleAlt
-        // SimpleC.g:92:9: 'char' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:92:7: ( 'char' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:92:9: 'char' // alt
{
-        [self matchString:@"char"];


+        [self matchString:@"char"];
+

+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "K_CHAR" */
-
// $ANTLR start "K_INT_TYPE"
- (void) mK_INT_TYPE
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = K_INT_TYPE;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:93:12: ( 'int' ) // ruleBlockSingleAlt
-        // SimpleC.g:93:14: 'int' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:93:12: ( 'int' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:93:14: 'int' // alt
{
-        [self matchString:@"int"];


+        [self matchString:@"int"];
+

+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "K_INT_TYPE" */
-
// $ANTLR start "K_VOID"
- (void) mK_VOID
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = K_VOID;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:94:7: ( 'void' ) // ruleBlockSingleAlt
-        // SimpleC.g:94:9: 'void' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:94:7: ( 'void' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:94:9: 'void' // alt
{
-        [self matchString:@"void"];


+        [self matchString:@"void"];

+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "K_VOID" */
-
// $ANTLR start "K_ID"
- (void) mK_ID
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = K_ID;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:96:7: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* ) // ruleBlockSingleAlt
-        // SimpleC.g:96:11: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:96:7: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:96:11: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* // alt
{
+
if ((([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
} else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

+

do {
NSInteger alt1=2;
@@ -227,17 +238,18 @@

switch (alt1) {
case 1 : ;
-                    // SimpleC.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g: // alt
{
+
if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))||(([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

@@ -247,39 +259,40 @@
} while (YES);
loop1: ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "K_ID" */
-
// $ANTLR start "K_INT"
- (void) mK_INT
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = K_INT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        ANTLRCommonToken *anInt=nil;
+        NSInteger _channel = TokenChannelDefault;
+        CommonToken *anInt=nil;
AMutableArray *list_anInt=nil;
-        // SimpleC.g:99:7: ( (anInt+= ( '0' .. '9' ) )+ ) // ruleBlockSingleAlt
-        // SimpleC.g:99:9: (anInt+= ( '0' .. '9' ) )+ // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:99:7: ( (anInt+= ( '0' .. '9' ) )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:99:9: (anInt+= ( '0' .. '9' ) )+ // alt
{
-        // SimpleC.g:99:14: (anInt+= ( '0' .. '9' ) )+ // positiveClosureBlock
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:99:14: (anInt+= ( '0' .. '9' ) )+ // positiveClosureBlock
NSInteger cnt2 = 0;
do {
NSInteger alt2 = 2;
@@ -291,41 +304,44 @@

switch (alt2) {
case 1 : ;
-                    // SimpleC.g:99:14: anInt+= ( '0' .. '9' ) // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:99:14: anInt+= ( '0' .. '9' ) // alt
{
+
+
anInt = [input LA:1];

if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))) {
[input consume];
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
mse.c = anInt;
[self recover:mse];
@throw mse;
}

-
+
}
break;

default :
if ( cnt2 >= 1 )
goto loop2;
-                    ANTLREarlyExitException *eee =
-                        [ANTLREarlyExitException newException:input decisionNumber:2];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:2];
@throw eee;
}
cnt2++;
} while (YES);
loop2: ;

+

NSLog(@"%@", list_anInt);

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */
[list_anInt release];

state.type = _type;
@@ -333,348 +349,369 @@
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "K_INT" */
-
// $ANTLR start "K_LCURVE"
- (void) mK_LCURVE
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = K_LCURVE;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:102:10: ( '(' ) // ruleBlockSingleAlt
-        // SimpleC.g:102:12: '(' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:102:10: ( '(' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:102:12: '(' // alt
{
-        [self matchChar:'('];


+        [self matchChar:'('];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "K_LCURVE" */
-
// $ANTLR start "K_RCURVE"
- (void) mK_RCURVE
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = K_RCURVE;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:103:10: ( ')' ) // ruleBlockSingleAlt
-        // SimpleC.g:103:12: ')' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:103:10: ( ')' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:103:12: ')' // alt
{
-        [self matchChar:')'];


+        [self matchChar:')'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "K_RCURVE" */
-
// $ANTLR start "K_PLUS"
- (void) mK_PLUS
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = K_PLUS;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:104:8: ( '+' ) // ruleBlockSingleAlt
-        // SimpleC.g:104:10: '+' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:104:8: ( '+' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:104:10: '+' // alt
{
-        [self matchChar:'+'];


+        [self matchChar:'+'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "K_PLUS" */
-
// $ANTLR start "K_COMMA"
- (void) mK_COMMA
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = K_COMMA;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:105:9: ( ',' ) // ruleBlockSingleAlt
-        // SimpleC.g:105:11: ',' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:105:9: ( ',' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:105:11: ',' // alt
{
-        [self matchChar:','];


+        [self matchChar:','];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "K_COMMA" */
-
// $ANTLR start "K_SEMICOLON"
- (void) mK_SEMICOLON
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = K_SEMICOLON;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:106:13: ( ';' ) // ruleBlockSingleAlt
-        // SimpleC.g:106:15: ';' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:106:13: ( ';' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:106:15: ';' // alt
{
-        [self matchChar:';'];


+        [self matchChar:';'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "K_SEMICOLON" */
-
// $ANTLR start "K_LT"
- (void) mK_LT
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = K_LT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:107:8: ( '<' ) // ruleBlockSingleAlt
-        // SimpleC.g:107:10: '<' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:107:8: ( '<' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:107:10: '<' // alt
{
-        [self matchChar:'<'];


+        [self matchChar:'<'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "K_LT" */
-
// $ANTLR start "K_EQ"
- (void) mK_EQ
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = K_EQ;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:108:8: ( '=' ) // ruleBlockSingleAlt
-        // SimpleC.g:108:10: '=' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:108:8: ( '=' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:108:10: '=' // alt
{
-        [self matchChar:'='];


+        [self matchChar:'='];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "K_EQ" */
-
// $ANTLR start "K_EQEQ"
- (void) mK_EQEQ
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = K_EQEQ;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:109:8: ( '==' ) // ruleBlockSingleAlt
-        // SimpleC.g:109:10: '==' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:109:8: ( '==' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:109:10: '==' // alt
{
-        [self matchString:@"=="];


+        [self matchString:@"=="];
+

+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "K_EQEQ" */
-
// $ANTLR start "K_LCURLY"
- (void) mK_LCURLY
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = K_LCURLY;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:110:10: ( '{' ) // ruleBlockSingleAlt
-        // SimpleC.g:110:12: '{' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:110:10: ( '{' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:110:12: '{' // alt
{
-        [self matchChar:'{'];


+        [self matchChar:'{'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "K_LCURLY" */
-
// $ANTLR start "K_RCURLY"
- (void) mK_RCURLY
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = K_RCURLY;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:111:10: ( '}' ) // ruleBlockSingleAlt
-        // SimpleC.g:111:12: '}' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:111:10: ( '}' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:111:12: '}' // alt
{
-        [self matchChar:'}'];


+        [self matchChar:'}'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "K_RCURLY" */
-
// $ANTLR start "WS"
- (void) mWS
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = WS;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:113:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ ) // ruleBlockSingleAlt
-        // SimpleC.g:113:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:113:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:113:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // alt
{
-        // SimpleC.g:113:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // positiveClosureBlock
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:113:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // positiveClosureBlock
NSInteger cnt3 = 0;
do {
NSInteger alt3 = 2;
@@ -686,54 +723,55 @@

switch (alt3) {
case 1 : ;
-                    // SimpleC.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g: // alt
{
+
if ((([input LA:1] >= '\t') && ([input LA:1] <= '\n'))||[input LA:1] == '\r'||[input LA:1] == ' ') {
[input consume];
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

default :
if ( cnt3 >= 1 )
goto loop3;
-                    ANTLREarlyExitException *eee =
-                        [ANTLREarlyExitException newException:input decisionNumber:3];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:3];
@throw eee;
}
cnt3++;
} while (YES);
loop3: ;

+

_channel=HIDDEN;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "WS" */
-
- (void) mTokens
{
-    // SimpleC.g:1:8: ( K_FOR | K_CHAR | K_INT_TYPE | K_VOID | K_ID | K_INT | K_LCURVE | K_RCURVE | K_PLUS | K_COMMA | K_SEMICOLON | K_LT | K_EQ | K_EQEQ | K_LCURLY | K_RCURLY | WS ) //ruleblock
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:8: ( K_FOR | K_CHAR | K_INT_TYPE | K_VOID | K_ID | K_INT | K_LCURVE | K_RCURVE | K_PLUS | K_COMMA | K_SEMICOLON | K_LT | K_EQ | K_EQEQ | K_LCURLY | K_RCURLY | WS ) //ruleblock
NSInteger alt4=17;
unichar charLA4 = [input LA:1];
switch (charLA4) {
@@ -984,7 +1022,7 @@
break;

default: ;
-        ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:4 state:0 stream:input];
+        NoViableAltException *nvae = [NoViableAltException newException:4 state:0 stream:input];
nvae.c = charLA4;
@throw nvae;

@@ -992,156 +1030,190 @@

switch (alt4) {
case 1 : ;
-            // SimpleC.g:1:10: K_FOR // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:10: K_FOR // alt
{
-            [self mK_FOR];


+            [self mK_FOR];

+
+
}
break;
case 2 : ;
-            // SimpleC.g:1:16: K_CHAR // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:16: K_CHAR // alt
{
-            [self mK_CHAR];


+            [self mK_CHAR];
+

+
}
break;
case 3 : ;
-            // SimpleC.g:1:23: K_INT_TYPE // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:23: K_INT_TYPE // alt
{
-            [self mK_INT_TYPE];


+            [self mK_INT_TYPE];

+
+
}
break;
case 4 : ;
-            // SimpleC.g:1:34: K_VOID // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:34: K_VOID // alt
{
-            [self mK_VOID];


+            [self mK_VOID];
+

+
}
break;
case 5 : ;
-            // SimpleC.g:1:41: K_ID // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:41: K_ID // alt
{
-            [self mK_ID];


+            [self mK_ID];
+

+
}
break;
case 6 : ;
-            // SimpleC.g:1:46: K_INT // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:46: K_INT // alt
{
-            [self mK_INT];


+            [self mK_INT];
+

+
}
break;
case 7 : ;
-            // SimpleC.g:1:52: K_LCURVE // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:52: K_LCURVE // alt
{
-            [self mK_LCURVE];


+            [self mK_LCURVE];
+

+
}
break;
case 8 : ;
-            // SimpleC.g:1:61: K_RCURVE // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:61: K_RCURVE // alt
{
-            [self mK_RCURVE];


+            [self mK_RCURVE];
+

+
}
break;
case 9 : ;
-            // SimpleC.g:1:70: K_PLUS // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:70: K_PLUS // alt
{
-            [self mK_PLUS];


+            [self mK_PLUS];
+

+
}
break;
case 10 : ;
-            // SimpleC.g:1:77: K_COMMA // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:77: K_COMMA // alt
{
-            [self mK_COMMA];


+            [self mK_COMMA];
+

+
}
break;
case 11 : ;
-            // SimpleC.g:1:85: K_SEMICOLON // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:85: K_SEMICOLON // alt
{
-            [self mK_SEMICOLON];


+            [self mK_SEMICOLON];
+

+
}
break;
case 12 : ;
-            // SimpleC.g:1:97: K_LT // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:97: K_LT // alt
{
-            [self mK_LT];


+            [self mK_LT];
+

+
}
break;
case 13 : ;
-            // SimpleC.g:1:102: K_EQ // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:102: K_EQ // alt
{
-            [self mK_EQ];


+            [self mK_EQ];
+

+
}
break;
case 14 : ;
-            // SimpleC.g:1:107: K_EQEQ // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:107: K_EQEQ // alt
{
-            [self mK_EQEQ];


+            [self mK_EQEQ];
+

+
}
break;
case 15 : ;
-            // SimpleC.g:1:114: K_LCURLY // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:114: K_LCURLY // alt
{
-            [self mK_LCURLY];


+            [self mK_LCURLY];
+

+
}
break;
case 16 : ;
-            // SimpleC.g:1:123: K_RCURLY // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:123: K_RCURLY // alt
{
-            [self mK_RCURLY];


+            [self mK_RCURLY];
+

+
}
break;
case 17 : ;
-            // SimpleC.g:1:132: WS // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:1:132: WS // alt
{
-            [self mWS];


+            [self mWS];
+

+
}
break;

diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCParser.h b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCParser.h
index a5420cc..0f125d1 100644
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCParser.h
+++ b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCParser.h
@@ -1,7 +1,7 @@
-// $ANTLR ${project.version} ${buildNumber} SimpleC.g 2011-05-06 15:09:17
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g 2012-02-16 17:40:52

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
#import <ANTLR/ANTLR.h>
@@ -23,10 +23,10 @@ typedef enum {
#endif

#pragma mark Cyclic DFA interface start DFA2
-@interface DFA2 : ANTLRDFA {
+@interface DFA2 : DFA {
}
-+ newDFA2WithRecognizer:(ANTLRBaseRecognizer *)theRecognizer;
-- initWithRecognizer:(ANTLRBaseRecognizer *)recognizer;
++ (DFA2 *) newDFA2WithRecognizer:(BaseRecognizer *)theRecognizer;
+- initWithRecognizer:(BaseRecognizer *)recognizer;
@end /* end of DFA2 interface  */

#pragma mark Cyclic DFA interface end DFA2
@@ -59,305 +59,361 @@ typedef enum {
#define K_VOID 24
#define VAR_DEF 25
#define WS 26
-#pragma mark Dynamic Global Scopes
-#pragma mark Dynamic Rule Scopes
-#pragma mark Rule Return Scopes start
+#pragma mark Dynamic Global Scopes globalAttributeScopeInterface
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeInterface
+#pragma mark Rule Return Scopes returnScopeInterface
/* returnScopeInterface SimpleCParser_program_return */
-@interface SimpleCParser_program_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface SimpleCParser_program_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (SimpleCParser_program_return *)newSimpleCParser_program_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface SimpleCParser_declaration_return */
-@interface SimpleCParser_declaration_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface SimpleCParser_declaration_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (SimpleCParser_declaration_return *)newSimpleCParser_declaration_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface SimpleCParser_variable_return */
-@interface SimpleCParser_variable_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface SimpleCParser_variable_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (SimpleCParser_variable_return *)newSimpleCParser_variable_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface SimpleCParser_declarator_return */
-@interface SimpleCParser_declarator_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface SimpleCParser_declarator_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (SimpleCParser_declarator_return *)newSimpleCParser_declarator_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface SimpleCParser_functionHeader_return */
-@interface SimpleCParser_functionHeader_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface SimpleCParser_functionHeader_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (SimpleCParser_functionHeader_return *)newSimpleCParser_functionHeader_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface SimpleCParser_formalParameter_return */
-@interface SimpleCParser_formalParameter_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface SimpleCParser_formalParameter_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (SimpleCParser_formalParameter_return *)newSimpleCParser_formalParameter_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface SimpleCParser_type_return */
-@interface SimpleCParser_type_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface SimpleCParser_type_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (SimpleCParser_type_return *)newSimpleCParser_type_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface SimpleCParser_block_return */
-@interface SimpleCParser_block_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface SimpleCParser_block_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (SimpleCParser_block_return *)newSimpleCParser_block_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface SimpleCParser_stat_return */
-@interface SimpleCParser_stat_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface SimpleCParser_stat_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (SimpleCParser_stat_return *)newSimpleCParser_stat_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface SimpleCParser_forStat_return */
-@interface SimpleCParser_forStat_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface SimpleCParser_forStat_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (SimpleCParser_forStat_return *)newSimpleCParser_forStat_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface SimpleCParser_assignStat_return */
-@interface SimpleCParser_assignStat_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface SimpleCParser_assignStat_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (SimpleCParser_assignStat_return *)newSimpleCParser_assignStat_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface SimpleCParser_expr_return */
-@interface SimpleCParser_expr_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface SimpleCParser_expr_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (SimpleCParser_expr_return *)newSimpleCParser_expr_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface SimpleCParser_condExpr_return */
-@interface SimpleCParser_condExpr_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface SimpleCParser_condExpr_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (SimpleCParser_condExpr_return *)newSimpleCParser_condExpr_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface SimpleCParser_aexpr_return */
-@interface SimpleCParser_aexpr_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface SimpleCParser_aexpr_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (SimpleCParser_aexpr_return *)newSimpleCParser_aexpr_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface SimpleCParser_atom_return */
-@interface SimpleCParser_atom_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface SimpleCParser_atom_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (SimpleCParser_atom_return *)newSimpleCParser_atom_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */



/* Interface grammar class */
-@interface SimpleCParser : ANTLRParser { /* line 572 */
-/* ObjC start of ruleAttributeScopeMemVar */
-
-
-/* ObjC end of ruleAttributeScopeMemVar */
-/* ObjC start of globalAttributeScopeMemVar */
+@interface SimpleCParser  : Parser { /* line 572 */
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeDecl
+#pragma mark Dynamic Global Rule Scopes globalAttributeScopeMemVar


-/* ObjC end of globalAttributeScopeMemVar */
/* ObjC start of actions.(actionScope).memVars */
/* ObjC end of actions.(actionScope).memVars */
/* ObjC start of memVars */
@@ -366,7 +422,7 @@ NSInteger ruleLevel;
NSArray *ruleNames;
/* AST super.memVars */
/* AST parserMemVars */
-id<ANTLRTreeAdaptor> treeAdaptor;   /* AST parserMemVars */
+id<TreeAdaptor> treeAdaptor;   /* AST parserMemVars */
/* ObjC end of memVars */

DFA2 *dfa2;
@@ -378,11 +434,11 @@ DFA2 *dfa2;
/* AST parserHeaderFile.properties */
/* AST super.properties */
/* AST parserProperties */
-@property (retain, getter=getTreeAdaptor, setter=setTreeAdaptor:) id<ANTLRTreeAdaptor> treeAdaptor;   /* AST parserproperties */
+@property (retain, getter=getTreeAdaptor, setter=setTreeAdaptor:) id<TreeAdaptor> treeAdaptor;   /* AST parserproperties */
/* ObjC end of properties */

+ (void) initialize;
-+ (id) newSimpleCParser:(id<ANTLRTokenStream>)aStream;
++ (id) newSimpleCParser:(id<TokenStream>)aStream;
/* ObjC start of actions.(actionScope).methodsDecl */
/* ObjC end of actions.(actionScope).methodsDecl */

@@ -390,8 +446,8 @@ DFA2 *dfa2;
/* AST parserHeaderFile.methodsDecl */
/* AST super.methodsDecl */
/* AST parserMethodsDecl */
-- (id<ANTLRTreeAdaptor>) getTreeAdaptor;
-- (void) setTreeAdaptor:(id<ANTLRTreeAdaptor>)theTreeAdaptor;   /* AST parsermethodsDecl */
+- (id<TreeAdaptor>) getTreeAdaptor;
+- (void) setTreeAdaptor:(id<TreeAdaptor>)theTreeAdaptor;   /* AST parsermethodsDecl */
/* ObjC end of methodsDecl */

- (SimpleCParser_program_return *)program;
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCParser.java b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCParser.java
index 4744ee1..51bab3d 100644
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCParser.java
+++ b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCParser.java
@@ -1,4 +1,4 @@
-// $ANTLR 3.2 Aug 13, 2010 14:19:31 SimpleC.g 2010-08-13 14:29:19
+// $ANTLR 3.2 Aug 13, 2010 19:41:25 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g 2010-08-13 19:42:18

import org.antlr.runtime.*;
import java.util.Stack;
@@ -59,7 +59,7 @@ public class SimpleCParser extends Parser {
}

public String[] getTokenNames() { return SimpleCParser.tokenNames; }
-    public String getGrammarFileName() { return "SimpleC.g"; }
+    public String getGrammarFileName() { return "/usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g"; }


public static class program_return extends ParserRuleReturnScope {
@@ -68,7 +68,7 @@ public class SimpleCParser extends Parser {
};

// $ANTLR start "program"
-    // SimpleC.g:16:1: program : ( declaration )+ ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:16:1: program : ( declaration )+ ;
public final SimpleCParser.program_return program() throws RecognitionException {
SimpleCParser.program_return retval = new SimpleCParser.program_return();
retval.start = input.LT(1);
@@ -80,12 +80,12 @@ public class SimpleCParser extends Parser {


try {
-            // SimpleC.g:17:5: ( ( declaration )+ )
-            // SimpleC.g:17:9: ( declaration )+
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:17:5: ( ( declaration )+ )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:17:9: ( declaration )+
{
root_0 = (Object)adaptor.nil();

-            // SimpleC.g:17:9: ( declaration )+
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:17:9: ( declaration )+
int cnt1=0;
loop1:
do {
@@ -99,7 +99,7 @@ public class SimpleCParser extends Parser {

switch (alt1) {
case 1 :
-            	    // SimpleC.g:17:9: declaration
+            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:17:9: declaration
{
pushFollow(FOLLOW_declaration_in_program85);
declaration1=declaration();
@@ -147,7 +147,7 @@ public class SimpleCParser extends Parser {
};

// $ANTLR start "declaration"
-    // SimpleC.g:20:1: declaration : ( variable | functionHeader ';' -> ^( FUNC_DECL functionHeader ) | functionHeader block -> ^( FUNC_DEF functionHeader block ) );
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:20:1: declaration : ( variable | functionHeader ';' -> ^( FUNC_DECL functionHeader ) | functionHeader block -> ^( FUNC_DEF functionHeader block ) );
public final SimpleCParser.declaration_return declaration() throws RecognitionException {
SimpleCParser.declaration_return retval = new SimpleCParser.declaration_return();
retval.start = input.LT(1);
@@ -169,12 +169,12 @@ public class SimpleCParser extends Parser {
RewriteRuleSubtreeStream stream_functionHeader=new RewriteRuleSubtreeStream(adaptor,"rule functionHeader");
RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
try {
-            // SimpleC.g:21:5: ( variable | functionHeader ';' -> ^( FUNC_DECL functionHeader ) | functionHeader block -> ^( FUNC_DEF functionHeader block ) )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:21:5: ( variable | functionHeader ';' -> ^( FUNC_DECL functionHeader ) | functionHeader block -> ^( FUNC_DEF functionHeader block ) )
int alt2=3;
alt2 = dfa2.predict(input);
switch (alt2) {
case 1 :
-                    // SimpleC.g:21:9: variable
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:21:9: variable
{
root_0 = (Object)adaptor.nil();

@@ -188,7 +188,7 @@ public class SimpleCParser extends Parser {
}
break;
case 2 :
-                    // SimpleC.g:22:9: functionHeader ';'
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:22:9: functionHeader ';'
{
pushFollow(FOLLOW_functionHeader_in_declaration115);
functionHeader3=functionHeader();
@@ -214,7 +214,7 @@ public class SimpleCParser extends Parser {
root_0 = (Object)adaptor.nil();
// 22:28: -> ^( FUNC_DECL functionHeader )
{
-                        // SimpleC.g:22:31: ^( FUNC_DECL functionHeader )
+                        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:22:31: ^( FUNC_DECL functionHeader )
{
Object root_1 = (Object)adaptor.nil();
root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FUNC_DECL, "FUNC_DECL"), root_1);
@@ -230,7 +230,7 @@ public class SimpleCParser extends Parser {
}
break;
case 3 :
-                    // SimpleC.g:23:9: functionHeader block
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:23:9: functionHeader block
{
pushFollow(FOLLOW_functionHeader_in_declaration135);
functionHeader5=functionHeader();
@@ -247,7 +247,7 @@ public class SimpleCParser extends Parser {


// AST REWRITE
-                    // elements: block, functionHeader
+                    // elements: functionHeader, block
// token labels:
// rule labels: retval
// token list labels:
@@ -259,7 +259,7 @@ public class SimpleCParser extends Parser {
root_0 = (Object)adaptor.nil();
// 23:30: -> ^( FUNC_DEF functionHeader block )
{
-                        // SimpleC.g:23:33: ^( FUNC_DEF functionHeader block )
+                        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:23:33: ^( FUNC_DEF functionHeader block )
{
Object root_1 = (Object)adaptor.nil();
root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FUNC_DEF, "FUNC_DEF"), root_1);
@@ -301,7 +301,7 @@ public class SimpleCParser extends Parser {
};

// $ANTLR start "variable"
-    // SimpleC.g:26:1: variable : type declarator ';' -> ^( VAR_DEF type declarator ) ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:26:1: variable : type declarator ';' -> ^( VAR_DEF type declarator ) ;
public final SimpleCParser.variable_return variable() throws RecognitionException {
SimpleCParser.variable_return retval = new SimpleCParser.variable_return();
retval.start = input.LT(1);
@@ -319,8 +319,8 @@ public class SimpleCParser extends Parser {
RewriteRuleSubtreeStream stream_declarator=new RewriteRuleSubtreeStream(adaptor,"rule declarator");
RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
try {
-            // SimpleC.g:27:5: ( type declarator ';' -> ^( VAR_DEF type declarator ) )
-            // SimpleC.g:27:9: type declarator ';'
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:27:5: ( type declarator ';' -> ^( VAR_DEF type declarator ) )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:27:9: type declarator ';'
{
pushFollow(FOLLOW_type_in_variable166);
type7=type();
@@ -340,7 +340,7 @@ public class SimpleCParser extends Parser {


// AST REWRITE
-            // elements: declarator, type
+            // elements: type, declarator
// token labels:
// rule labels: retval
// token list labels:
@@ -352,7 +352,7 @@ public class SimpleCParser extends Parser {
root_0 = (Object)adaptor.nil();
// 27:29: -> ^( VAR_DEF type declarator )
{
-                // SimpleC.g:27:32: ^( VAR_DEF type declarator )
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:27:32: ^( VAR_DEF type declarator )
{
Object root_1 = (Object)adaptor.nil();
root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VAR_DEF, "VAR_DEF"), root_1);
@@ -392,7 +392,7 @@ public class SimpleCParser extends Parser {
};

// $ANTLR start "declarator"
-    // SimpleC.g:30:1: declarator : ID ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:30:1: declarator : ID ;
public final SimpleCParser.declarator_return declarator() throws RecognitionException {
SimpleCParser.declarator_return retval = new SimpleCParser.declarator_return();
retval.start = input.LT(1);
@@ -404,8 +404,8 @@ public class SimpleCParser extends Parser {
Object ID10_tree=null;

try {
-            // SimpleC.g:31:5: ( ID )
-            // SimpleC.g:31:9: ID
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:31:5: ( ID )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:31:9: ID
{
root_0 = (Object)adaptor.nil();

@@ -440,7 +440,7 @@ public class SimpleCParser extends Parser {
};

// $ANTLR start "functionHeader"
-    // SimpleC.g:34:1: functionHeader : type ID '(' ( formalParameter ( ',' formalParameter )* )? ')' -> ^( FUNC_HDR type ID ( formalParameter )+ ) ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:34:1: functionHeader : type ID '(' ( formalParameter ( ',' formalParameter )* )? ')' -> ^( FUNC_HDR type ID ( formalParameter )+ ) ;
public final SimpleCParser.functionHeader_return functionHeader() throws RecognitionException {
SimpleCParser.functionHeader_return retval = new SimpleCParser.functionHeader_return();
retval.start = input.LT(1);
@@ -469,8 +469,8 @@ public class SimpleCParser extends Parser {
RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");
RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
try {
-            // SimpleC.g:35:5: ( type ID '(' ( formalParameter ( ',' formalParameter )* )? ')' -> ^( FUNC_HDR type ID ( formalParameter )+ ) )
-            // SimpleC.g:35:9: type ID '(' ( formalParameter ( ',' formalParameter )* )? ')'
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:5: ( type ID '(' ( formalParameter ( ',' formalParameter )* )? ')' -> ^( FUNC_HDR type ID ( formalParameter )+ ) )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:9: type ID '(' ( formalParameter ( ',' formalParameter )* )? ')'
{
pushFollow(FOLLOW_type_in_functionHeader219);
type11=type();
@@ -484,7 +484,7 @@ public class SimpleCParser extends Parser {
char_literal13=(Token)match(input,22,FOLLOW_22_in_functionHeader223);
stream_22.add(char_literal13);

-            // SimpleC.g:35:21: ( formalParameter ( ',' formalParameter )* )?
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:21: ( formalParameter ( ',' formalParameter )* )?
int alt4=2;
int LA4_0 = input.LA(1);

@@ -493,7 +493,7 @@ public class SimpleCParser extends Parser {
}
switch (alt4) {
case 1 :
-                    // SimpleC.g:35:23: formalParameter ( ',' formalParameter )*
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:23: formalParameter ( ',' formalParameter )*
{
pushFollow(FOLLOW_formalParameter_in_functionHeader227);
formalParameter14=formalParameter();
@@ -501,7 +501,7 @@ public class SimpleCParser extends Parser {
state._fsp--;

stream_formalParameter.add(formalParameter14.getTree());
-                    // SimpleC.g:35:39: ( ',' formalParameter )*
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:39: ( ',' formalParameter )*
loop3:
do {
int alt3=2;
@@ -514,7 +514,7 @@ public class SimpleCParser extends Parser {

switch (alt3) {
case 1 :
-                    	    // SimpleC.g:35:41: ',' formalParameter
+                    	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:41: ',' formalParameter
{
char_literal15=(Token)match(input,23,FOLLOW_23_in_functionHeader231);
stream_23.add(char_literal15);
@@ -546,7 +546,7 @@ public class SimpleCParser extends Parser {


// AST REWRITE
-            // elements: ID, formalParameter, type
+            // elements: formalParameter, ID, type
// token labels:
// rule labels: retval
// token list labels:
@@ -558,7 +558,7 @@ public class SimpleCParser extends Parser {
root_0 = (Object)adaptor.nil();
// 36:9: -> ^( FUNC_HDR type ID ( formalParameter )+ )
{
-                // SimpleC.g:36:12: ^( FUNC_HDR type ID ( formalParameter )+ )
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:36:12: ^( FUNC_HDR type ID ( formalParameter )+ )
{
Object root_1 = (Object)adaptor.nil();
root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FUNC_HDR, "FUNC_HDR"), root_1);
@@ -606,7 +606,7 @@ public class SimpleCParser extends Parser {
};

// $ANTLR start "formalParameter"
-    // SimpleC.g:39:1: formalParameter : type declarator -> ^( ARG_DEF type declarator ) ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:39:1: formalParameter : type declarator -> ^( ARG_DEF type declarator ) ;
public final SimpleCParser.formalParameter_return formalParameter() throws RecognitionException {
SimpleCParser.formalParameter_return retval = new SimpleCParser.formalParameter_return();
retval.start = input.LT(1);
@@ -621,8 +621,8 @@ public class SimpleCParser extends Parser {
RewriteRuleSubtreeStream stream_declarator=new RewriteRuleSubtreeStream(adaptor,"rule declarator");
RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
try {
-            // SimpleC.g:40:5: ( type declarator -> ^( ARG_DEF type declarator ) )
-            // SimpleC.g:40:9: type declarator
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:40:5: ( type declarator -> ^( ARG_DEF type declarator ) )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:40:9: type declarator
{
pushFollow(FOLLOW_type_in_formalParameter281);
type18=type();
@@ -651,7 +651,7 @@ public class SimpleCParser extends Parser {
root_0 = (Object)adaptor.nil();
// 40:25: -> ^( ARG_DEF type declarator )
{
-                // SimpleC.g:40:28: ^( ARG_DEF type declarator )
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:40:28: ^( ARG_DEF type declarator )
{
Object root_1 = (Object)adaptor.nil();
root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARG_DEF, "ARG_DEF"), root_1);
@@ -691,7 +691,7 @@ public class SimpleCParser extends Parser {
};

// $ANTLR start "type"
-    // SimpleC.g:43:1: type : ( 'int' | 'char' | 'void' | ID );
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:43:1: type : ( 'int' | 'char' | 'void' | ID );
public final SimpleCParser.type_return type() throws RecognitionException {
SimpleCParser.type_return retval = new SimpleCParser.type_return();
retval.start = input.LT(1);
@@ -703,8 +703,8 @@ public class SimpleCParser extends Parser {
Object set20_tree=null;

try {
-            // SimpleC.g:44:5: ( 'int' | 'char' | 'void' | ID )
-            // SimpleC.g:
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:44:5: ( 'int' | 'char' | 'void' | ID )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:
{
root_0 = (Object)adaptor.nil();

@@ -746,7 +746,7 @@ public class SimpleCParser extends Parser {
};

// $ANTLR start "block"
-    // SimpleC.g:50:1: block : lc= '{' ( variable )* ( stat )* '}' -> ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* ) ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:50:1: block : lc= '{' ( variable )* ( stat )* '}' -> ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* ) ;
public final SimpleCParser.block_return block() throws RecognitionException {
SimpleCParser.block_return retval = new SimpleCParser.block_return();
retval.start = input.LT(1);
@@ -767,13 +767,13 @@ public class SimpleCParser extends Parser {
RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
RewriteRuleSubtreeStream stream_stat=new RewriteRuleSubtreeStream(adaptor,"rule stat");
try {
-            // SimpleC.g:51:5: (lc= '{' ( variable )* ( stat )* '}' -> ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* ) )
-            // SimpleC.g:51:9: lc= '{' ( variable )* ( stat )* '}'
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:51:5: (lc= '{' ( variable )* ( stat )* '}' -> ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* ) )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:51:9: lc= '{' ( variable )* ( stat )* '}'
{
lc=(Token)match(input,25,FOLLOW_25_in_block376);
stream_25.add(lc);

-            // SimpleC.g:52:13: ( variable )*
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:52:13: ( variable )*
loop5:
do {
int alt5=2;
@@ -795,7 +795,7 @@ public class SimpleCParser extends Parser {

switch (alt5) {
case 1 :
-            	    // SimpleC.g:52:13: variable
+            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:52:13: variable
{
pushFollow(FOLLOW_variable_in_block390);
variable21=variable();
@@ -812,7 +812,7 @@ public class SimpleCParser extends Parser {
}
} while (true);

-            // SimpleC.g:53:13: ( stat )*
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:53:13: ( stat )*
loop6:
do {
int alt6=2;
@@ -825,7 +825,7 @@ public class SimpleCParser extends Parser {

switch (alt6) {
case 1 :
-            	    // SimpleC.g:53:13: stat
+            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:53:13: stat
{
pushFollow(FOLLOW_stat_in_block405);
stat22=stat();
@@ -848,7 +848,7 @@ public class SimpleCParser extends Parser {


// AST REWRITE
-            // elements: stat, variable
+            // elements: variable, stat
// token labels:
// rule labels: retval
// token list labels:
@@ -860,18 +860,18 @@ public class SimpleCParser extends Parser {
root_0 = (Object)adaptor.nil();
// 55:9: -> ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* )
{
-                // SimpleC.g:55:12: ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* )
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:55:12: ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* )
{
Object root_1 = (Object)adaptor.nil();
root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, lc, @"BLOCK"), root_1);

-                // SimpleC.g:55:34: ( variable )*
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:55:34: ( variable )*
while ( stream_variable.hasNext() ) {
adaptor.addChild(root_1, stream_variable.nextTree());

}
stream_variable.reset();
-                // SimpleC.g:55:44: ( stat )*
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:55:44: ( stat )*
while ( stream_stat.hasNext() ) {
adaptor.addChild(root_1, stream_stat.nextTree());

@@ -910,7 +910,7 @@ public class SimpleCParser extends Parser {
};

// $ANTLR start "stat"
-    // SimpleC.g:58:1: stat : ( forStat | expr ';' | block | assignStat ';' | ';' );
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:58:1: stat : ( forStat | expr ';' | block | assignStat ';' | ';' );
public final SimpleCParser.stat_return stat() throws RecognitionException {
SimpleCParser.stat_return retval = new SimpleCParser.stat_return();
retval.start = input.LT(1);
@@ -934,7 +934,7 @@ public class SimpleCParser extends Parser {
Object char_literal30_tree=null;

try {
-            // SimpleC.g:58:5: ( forStat | expr ';' | block | assignStat ';' | ';' )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:58:5: ( forStat | expr ';' | block | assignStat ';' | ';' )
int alt7=5;
switch ( input.LA(1) ) {
case FOR:
@@ -985,7 +985,7 @@ public class SimpleCParser extends Parser {

switch (alt7) {
case 1 :
-                    // SimpleC.g:58:7: forStat
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:58:7: forStat
{
root_0 = (Object)adaptor.nil();

@@ -999,7 +999,7 @@ public class SimpleCParser extends Parser {
}
break;
case 2 :
-                    // SimpleC.g:59:7: expr ';'
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:59:7: expr ';'
{
root_0 = (Object)adaptor.nil();

@@ -1014,7 +1014,7 @@ public class SimpleCParser extends Parser {
}
break;
case 3 :
-                    // SimpleC.g:60:7: block
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:60:7: block
{
root_0 = (Object)adaptor.nil();

@@ -1028,7 +1028,7 @@ public class SimpleCParser extends Parser {
}
break;
case 4 :
-                    // SimpleC.g:61:7: assignStat ';'
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:61:7: assignStat ';'
{
root_0 = (Object)adaptor.nil();

@@ -1043,7 +1043,7 @@ public class SimpleCParser extends Parser {
}
break;
case 5 :
-                    // SimpleC.g:62:7: ';'
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:62:7: ';'
{
root_0 = (Object)adaptor.nil();

@@ -1077,7 +1077,7 @@ public class SimpleCParser extends Parser {
};

// $ANTLR start "forStat"
-    // SimpleC.g:65:1: forStat : 'for' '(' start= assignStat ';' expr ';' next= assignStat ')' block -> ^( 'for' $start expr $next block ) ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:65:1: forStat : 'for' '(' start= assignStat ';' expr ';' next= assignStat ')' block -> ^( 'for' $start expr $next block ) ;
public final SimpleCParser.forStat_return forStat() throws RecognitionException {
SimpleCParser.forStat_return retval = new SimpleCParser.forStat_return();
retval.start = input.LT(1);
@@ -1111,8 +1111,8 @@ public class SimpleCParser extends Parser {
RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
try {
-            // SimpleC.g:66:5: ( 'for' '(' start= assignStat ';' expr ';' next= assignStat ')' block -> ^( 'for' $start expr $next block ) )
-            // SimpleC.g:66:9: 'for' '(' start= assignStat ';' expr ';' next= assignStat ')' block
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:66:5: ( 'for' '(' start= assignStat ';' expr ';' next= assignStat ')' block -> ^( 'for' $start expr $next block ) )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:66:9: 'for' '(' start= assignStat ';' expr ';' next= assignStat ')' block
{
string_literal31=(Token)match(input,FOR,FOLLOW_FOR_in_forStat507);
stream_FOR.add(string_literal31);
@@ -1156,7 +1156,7 @@ public class SimpleCParser extends Parser {


// AST REWRITE
-            // elements: next, start, FOR, block, expr
+            // elements: block, expr, FOR, start, next
// token labels:
// rule labels: retval, start, next
// token list labels:
@@ -1170,7 +1170,7 @@ public class SimpleCParser extends Parser {
root_0 = (Object)adaptor.nil();
// 67:9: -> ^( 'for' $start expr $next block )
{
-                // SimpleC.g:67:12: ^( 'for' $start expr $next block )
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:67:12: ^( 'for' $start expr $next block )
{
Object root_1 = (Object)adaptor.nil();
root_1 = (Object)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
@@ -1212,7 +1212,7 @@ public class SimpleCParser extends Parser {
};

// $ANTLR start "assignStat"
-    // SimpleC.g:70:1: assignStat : ID EQ expr -> ^( EQ ID expr ) ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:70:1: assignStat : ID EQ expr -> ^( EQ ID expr ) ;
public final SimpleCParser.assignStat_return assignStat() throws RecognitionException {
SimpleCParser.assignStat_return retval = new SimpleCParser.assignStat_return();
retval.start = input.LT(1);
@@ -1230,8 +1230,8 @@ public class SimpleCParser extends Parser {
RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
try {
-            // SimpleC.g:71:5: ( ID EQ expr -> ^( EQ ID expr ) )
-            // SimpleC.g:71:9: ID EQ expr
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:71:5: ( ID EQ expr -> ^( EQ ID expr ) )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:71:9: ID EQ expr
{
ID38=(Token)match(input,ID,FOLLOW_ID_in_assignStat570);
stream_ID.add(ID38);
@@ -1248,7 +1248,7 @@ public class SimpleCParser extends Parser {


// AST REWRITE
-            // elements: EQ, ID, expr
+            // elements: EQ, expr, ID
// token labels:
// rule labels: retval
// token list labels:
@@ -1260,7 +1260,7 @@ public class SimpleCParser extends Parser {
root_0 = (Object)adaptor.nil();
// 71:20: -> ^( EQ ID expr )
{
-                // SimpleC.g:71:23: ^( EQ ID expr )
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:71:23: ^( EQ ID expr )
{
Object root_1 = (Object)adaptor.nil();
root_1 = (Object)adaptor.becomeRoot(stream_EQ.nextNode(), root_1);
@@ -1300,7 +1300,7 @@ public class SimpleCParser extends Parser {
};

// $ANTLR start "expr"
-    // SimpleC.g:74:1: expr : condExpr ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:74:1: expr : condExpr ;
public final SimpleCParser.expr_return expr() throws RecognitionException {
SimpleCParser.expr_return retval = new SimpleCParser.expr_return();
retval.start = input.LT(1);
@@ -1312,8 +1312,8 @@ public class SimpleCParser extends Parser {


try {
-            // SimpleC.g:74:5: ( condExpr )
-            // SimpleC.g:74:9: condExpr
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:74:5: ( condExpr )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:74:9: condExpr
{
root_0 = (Object)adaptor.nil();

@@ -1350,7 +1350,7 @@ public class SimpleCParser extends Parser {
};

// $ANTLR start "condExpr"
-    // SimpleC.g:77:1: condExpr : aexpr ( ( '==' | '<' ) aexpr )? ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:77:1: condExpr : aexpr ( ( '==' | '<' ) aexpr )? ;
public final SimpleCParser.condExpr_return condExpr() throws RecognitionException {
SimpleCParser.condExpr_return retval = new SimpleCParser.condExpr_return();
retval.start = input.LT(1);
@@ -1368,8 +1368,8 @@ public class SimpleCParser extends Parser {
Object char_literal44_tree=null;

try {
-            // SimpleC.g:78:5: ( aexpr ( ( '==' | '<' ) aexpr )? )
-            // SimpleC.g:78:9: aexpr ( ( '==' | '<' ) aexpr )?
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:5: ( aexpr ( ( '==' | '<' ) aexpr )? )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:9: aexpr ( ( '==' | '<' ) aexpr )?
{
root_0 = (Object)adaptor.nil();

@@ -1379,7 +1379,7 @@ public class SimpleCParser extends Parser {
state._fsp--;

adaptor.addChild(root_0, aexpr42.getTree());
-            // SimpleC.g:78:15: ( ( '==' | '<' ) aexpr )?
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:15: ( ( '==' | '<' ) aexpr )?
int alt9=2;
int LA9_0 = input.LA(1);

@@ -1388,9 +1388,9 @@ public class SimpleCParser extends Parser {
}
switch (alt9) {
case 1 :
-                    // SimpleC.g:78:17: ( '==' | '<' ) aexpr
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:17: ( '==' | '<' ) aexpr
{
-                    // SimpleC.g:78:17: ( '==' | '<' )
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:17: ( '==' | '<' )
int alt8=2;
int LA8_0 = input.LA(1);

@@ -1408,7 +1408,7 @@ public class SimpleCParser extends Parser {
}
switch (alt8) {
case 1 :
-                            // SimpleC.g:78:18: '=='
+                            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:18: '=='
{
string_literal43=(Token)match(input,EQEQ,FOLLOW_EQEQ_in_condExpr622);
string_literal43_tree = (Object)adaptor.create(string_literal43);
@@ -1418,7 +1418,7 @@ public class SimpleCParser extends Parser {
}
break;
case 2 :
-                            // SimpleC.g:78:26: '<'
+                            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:26: '<'
{
char_literal44=(Token)match(input,LT,FOLLOW_LT_in_condExpr627);
char_literal44_tree = (Object)adaptor.create(char_literal44);
@@ -1469,7 +1469,7 @@ public class SimpleCParser extends Parser {
};

// $ANTLR start "aexpr"
-    // SimpleC.g:81:1: aexpr : atom ( '+' atom )* ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:81:1: aexpr : atom ( '+' atom )* ;
public final SimpleCParser.aexpr_return aexpr() throws RecognitionException {
SimpleCParser.aexpr_return retval = new SimpleCParser.aexpr_return();
retval.start = input.LT(1);
@@ -1485,8 +1485,8 @@ public class SimpleCParser extends Parser {
Object char_literal47_tree=null;

try {
-            // SimpleC.g:82:5: ( atom ( '+' atom )* )
-            // SimpleC.g:82:9: atom ( '+' atom )*
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:82:5: ( atom ( '+' atom )* )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:82:9: atom ( '+' atom )*
{
root_0 = (Object)adaptor.nil();

@@ -1496,7 +1496,7 @@ public class SimpleCParser extends Parser {
state._fsp--;

adaptor.addChild(root_0, atom46.getTree());
-            // SimpleC.g:82:14: ( '+' atom )*
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:82:14: ( '+' atom )*
loop10:
do {
int alt10=2;
@@ -1509,7 +1509,7 @@ public class SimpleCParser extends Parser {

switch (alt10) {
case 1 :
-            	    // SimpleC.g:82:16: '+' atom
+            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:82:16: '+' atom
{
char_literal47=(Token)match(input,PLUS,FOLLOW_PLUS_in_aexpr657);
char_literal47_tree = (Object)adaptor.create(char_literal47);
@@ -1557,7 +1557,7 @@ public class SimpleCParser extends Parser {
};

// $ANTLR start "atom"
-    // SimpleC.g:85:1: atom : ( ID | INT | '(' expr ')' -> expr );
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:85:1: atom : ( ID | INT | '(' expr ')' -> expr );
public final SimpleCParser.atom_return atom() throws RecognitionException {
SimpleCParser.atom_return retval = new SimpleCParser.atom_return();
retval.start = input.LT(1);
@@ -1579,7 +1579,7 @@ public class SimpleCParser extends Parser {
RewriteRuleTokenStream stream_24=new RewriteRuleTokenStream(adaptor,"token 24");
RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
try {
-            // SimpleC.g:86:5: ( ID | INT | '(' expr ')' -> expr )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:86:5: ( ID | INT | '(' expr ')' -> expr )
int alt11=3;
switch ( input.LA(1) ) {
case ID:
@@ -1606,7 +1606,7 @@ public class SimpleCParser extends Parser {

switch (alt11) {
case 1 :
-                    // SimpleC.g:86:7: ID
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:86:7: ID
{
root_0 = (Object)adaptor.nil();

@@ -1618,7 +1618,7 @@ public class SimpleCParser extends Parser {
}
break;
case 2 :
-                    // SimpleC.g:87:7: INT
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:87:7: INT
{
root_0 = (Object)adaptor.nil();

@@ -1630,7 +1630,7 @@ public class SimpleCParser extends Parser {
}
break;
case 3 :
-                    // SimpleC.g:88:7: '(' expr ')'
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:88:7: '(' expr ')'
{
char_literal51=(Token)match(input,22,FOLLOW_22_in_atom708);
stream_22.add(char_literal51);
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCParser.m b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCParser.m
index 882a065..a8935a3 100644
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCParser.m
+++ b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCParser.m
@@ -1,8 +1,8 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : SimpleC.g
- *     -                            On : 2011-05-06 15:09:17
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g
+ *     -                            On : 2012-02-16 17:40:52
*     -                for the parser : SimpleCParserParser
*
* Editing it, at least manually, is not wise.
@@ -11,7 +11,7 @@
*
*
*/
-// $ANTLR ${project.version} ${buildNumber} SimpleC.g 2011-05-06 15:09:17
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g 2012-02-16 17:40:52


/* -----------------------------------------
@@ -26,41 +26,76 @@
* Start of recognizer
*/
#pragma mark Cyclic DFA implementation start DFA2
+
@implementation DFA2
const static NSInteger dfa2_eot[13] =
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const static NSInteger dfa2_eof[13] =
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const static unichar dfa2_min[13] =
-    {9,14,18,9,0,14,17,10,0,0,9,14,10};
+    {9,14,18,9,-1,14,17,10,-1,-1,9,14,10};
const static unichar dfa2_max[13] =
-    {24,14,23,24,0,14,23,22,0,0,24,14,22};
+    {24,14,23,24,-1,14,23,22,-1,-1,24,14,22};
const static NSInteger dfa2_accept[13] =
{-1,-1,-1,-1,1,-1,-1,-1,2,3,-1,-1,-1};
const static NSInteger dfa2_special[13] =
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static NSInteger dfa2_transition[] = {};
-const static NSInteger dfa2_transition0[] = {9, -1, -1, -1, -1, -1, 8};
-const static NSInteger dfa2_transition1[] = {10, -1, -1, -1, -1, -1, -1,
- -1, -1, -1, -1, -1, 6};
-const static NSInteger dfa2_transition2[] = {5, -1, -1, -1, -1, 5, -1, 5,
- -1, -1, -1, -1, -1, 6, -1, 5};
-const static NSInteger dfa2_transition3[] = {11, -1, -1, -1, -1, 11, -1,
- 11, -1, -1, -1, -1, -1, -1, -1, 11};
-const static NSInteger dfa2_transition4[] = {3, -1, -1, -1, -1, 4};
-const static NSInteger dfa2_transition5[] = {1, -1, -1, -1, -1, 1, -1, 1,
- -1, -1, -1, -1, -1, -1, -1, 1};
-const static NSInteger dfa2_transition6[] = {7};
-const static NSInteger dfa2_transition7[] = {12};
-const static NSInteger dfa2_transition8[] = {2};
-
-
-+ (id) newDFA2WithRecognizer:(ANTLRBaseRecognizer *)aRecognizer
+
+/** Used when there is no transition table entry for a particular state */
+#define dfa2_T_empty	    nil
+
+const static NSInteger dfa2_T0[] =
+{
+     9, -1, -1, -1, -1, -1, 8
+};
+const static NSInteger dfa2_T1[] =
+{
+     10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6
+};
+const static NSInteger dfa2_T2[] =
+{
+     5, -1, -1, -1, -1, 5, -1, 5, -1, -1, -1, -1, -1, 6, -1, 5
+};
+const static NSInteger dfa2_T3[] =
+{
+     11, -1, -1, -1, -1, 11, -1, 11, -1, -1, -1, -1, -1, -1, -1, 11
+};
+const static NSInteger dfa2_T4[] =
+{
+     3, -1, -1, -1, -1, 4
+};
+const static NSInteger dfa2_T5[] =
+{
+     1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1
+};
+const static NSInteger dfa2_T6[] =
+{
+     7
+};
+const static NSInteger dfa2_T7[] =
+{
+     12
+};
+const static NSInteger dfa2_T8[] =
+{
+     2
+};
+
+
+const static NSInteger *dfa2_transition[] =
+{
+    dfa2_T5, dfa2_T8, dfa2_T4, dfa2_T2, nil, dfa2_T6, dfa2_T0, dfa2_T1,
+    nil, nil, dfa2_T3, dfa2_T7, dfa2_T1
+};
+
+//const static NSInteger dfa2_transition[] = {};
+
++ (DFA2 *) newDFA2WithRecognizer:(BaseRecognizer *)aRecognizer
{
return [[[DFA2 alloc] initWithRecognizer:aRecognizer] retain];
}

-- (id) initWithRecognizer:(ANTLRBaseRecognizer *) theRecognizer
+- (id) initWithRecognizer:(BaseRecognizer *) theRecognizer
{
self = [super initWithRecognizer:theRecognizer];
if ( self != nil ) {
@@ -71,6 +106,8 @@ const static NSInteger dfa2_transition8[] = {2};
max = dfa2_max;
accept = dfa2_accept;
special = dfa2_special;
+        transition = dfa2_transition;
+/*
if (!(transition = calloc(13, sizeof(void*)))) {
[self release];
return nil;
@@ -89,6 +126,7 @@ const static NSInteger dfa2_transition8[] = {2};
transition[7] = dfa2_transition3;
transition[8] = dfa2_transition7;
transition[9] = dfa2_transition1;
+ */
}
return self;
}
@@ -224,32 +262,32 @@ static ANTLRBitSet *FOLLOW_K_RCURVE_in_atom712;
static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x0000000000000002LL};


-#pragma mark Dynamic Global Scopes
+#pragma mark Dynamic Global globalAttributeScopeImplementation

-#pragma mark Dynamic Rule Scopes
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation

-#pragma mark Rule Return Scopes start
-@implementation SimpleCParser_program_return /* returnScope */
+#pragma mark Rule Return Scopes returnScopeImplementation
+@implementation SimpleCParser_program_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (SimpleCParser_program_return *)newSimpleCParser_program_return
{
-    return [[[SimpleCParser_program_return alloc] init] retain];
+return [[[SimpleCParser_program_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -265,31 +303,29 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}


-
@end /* end of returnScope implementation */

-
-@implementation SimpleCParser_declaration_return /* returnScope */
+@implementation SimpleCParser_declaration_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (SimpleCParser_declaration_return *)newSimpleCParser_declaration_return
{
-    return [[[SimpleCParser_declaration_return alloc] init] retain];
+return [[[SimpleCParser_declaration_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -305,31 +341,29 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}


-
@end /* end of returnScope implementation */

-
-@implementation SimpleCParser_variable_return /* returnScope */
+@implementation SimpleCParser_variable_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (SimpleCParser_variable_return *)newSimpleCParser_variable_return
{
-    return [[[SimpleCParser_variable_return alloc] init] retain];
+return [[[SimpleCParser_variable_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -345,31 +379,29 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}


-
@end /* end of returnScope implementation */

-
-@implementation SimpleCParser_declarator_return /* returnScope */
+@implementation SimpleCParser_declarator_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (SimpleCParser_declarator_return *)newSimpleCParser_declarator_return
{
-    return [[[SimpleCParser_declarator_return alloc] init] retain];
+return [[[SimpleCParser_declarator_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -385,31 +417,29 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}


-
@end /* end of returnScope implementation */

-
-@implementation SimpleCParser_functionHeader_return /* returnScope */
+@implementation SimpleCParser_functionHeader_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (SimpleCParser_functionHeader_return *)newSimpleCParser_functionHeader_return
{
-    return [[[SimpleCParser_functionHeader_return alloc] init] retain];
+return [[[SimpleCParser_functionHeader_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -425,31 +455,29 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}


-
@end /* end of returnScope implementation */

-
-@implementation SimpleCParser_formalParameter_return /* returnScope */
+@implementation SimpleCParser_formalParameter_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (SimpleCParser_formalParameter_return *)newSimpleCParser_formalParameter_return
{
-    return [[[SimpleCParser_formalParameter_return alloc] init] retain];
+return [[[SimpleCParser_formalParameter_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -465,31 +493,29 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}


-
@end /* end of returnScope implementation */

-
-@implementation SimpleCParser_type_return /* returnScope */
+@implementation SimpleCParser_type_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (SimpleCParser_type_return *)newSimpleCParser_type_return
{
-    return [[[SimpleCParser_type_return alloc] init] retain];
+return [[[SimpleCParser_type_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -505,31 +531,29 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}


-
@end /* end of returnScope implementation */

-
-@implementation SimpleCParser_block_return /* returnScope */
+@implementation SimpleCParser_block_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (SimpleCParser_block_return *)newSimpleCParser_block_return
{
-    return [[[SimpleCParser_block_return alloc] init] retain];
+return [[[SimpleCParser_block_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -545,31 +569,29 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}


-
@end /* end of returnScope implementation */

-
-@implementation SimpleCParser_stat_return /* returnScope */
+@implementation SimpleCParser_stat_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (SimpleCParser_stat_return *)newSimpleCParser_stat_return
{
-    return [[[SimpleCParser_stat_return alloc] init] retain];
+return [[[SimpleCParser_stat_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -585,31 +607,29 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}


-
@end /* end of returnScope implementation */

-
-@implementation SimpleCParser_forStat_return /* returnScope */
+@implementation SimpleCParser_forStat_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (SimpleCParser_forStat_return *)newSimpleCParser_forStat_return
{
-    return [[[SimpleCParser_forStat_return alloc] init] retain];
+return [[[SimpleCParser_forStat_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -625,31 +645,29 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}


-
@end /* end of returnScope implementation */

-
-@implementation SimpleCParser_assignStat_return /* returnScope */
+@implementation SimpleCParser_assignStat_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (SimpleCParser_assignStat_return *)newSimpleCParser_assignStat_return
{
-    return [[[SimpleCParser_assignStat_return alloc] init] retain];
+return [[[SimpleCParser_assignStat_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -665,31 +683,29 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}


-
@end /* end of returnScope implementation */

-
-@implementation SimpleCParser_expr_return /* returnScope */
+@implementation SimpleCParser_expr_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (SimpleCParser_expr_return *)newSimpleCParser_expr_return
{
-    return [[[SimpleCParser_expr_return alloc] init] retain];
+return [[[SimpleCParser_expr_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -705,31 +721,29 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}


-
@end /* end of returnScope implementation */

-
-@implementation SimpleCParser_condExpr_return /* returnScope */
+@implementation SimpleCParser_condExpr_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (SimpleCParser_condExpr_return *)newSimpleCParser_condExpr_return
{
-    return [[[SimpleCParser_condExpr_return alloc] init] retain];
+return [[[SimpleCParser_condExpr_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -745,31 +759,29 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}


-
@end /* end of returnScope implementation */

-
-@implementation SimpleCParser_aexpr_return /* returnScope */
+@implementation SimpleCParser_aexpr_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (SimpleCParser_aexpr_return *)newSimpleCParser_aexpr_return
{
-    return [[[SimpleCParser_aexpr_return alloc] init] retain];
+return [[[SimpleCParser_aexpr_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -785,31 +797,29 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}


-
@end /* end of returnScope implementation */

-
-@implementation SimpleCParser_atom_return /* returnScope */
+@implementation SimpleCParser_atom_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (SimpleCParser_atom_return *)newSimpleCParser_atom_return
{
-    return [[[SimpleCParser_atom_return alloc] init] retain];
+return [[[SimpleCParser_atom_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -825,116 +835,105 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}


-
@end /* end of returnScope implementation */


-//#pragma mark Rule return scopes start
-//
-
-#pragma mark Rule return scopes start

@implementation SimpleCParser  // line 637

/* ObjC start of ruleAttributeScope */
-#pragma mark Dynamic Rule Scopes
+#pragma mark Dynamic Rule Scopes ruleAttributeScope
/* ObjC end of ruleAttributeScope */
-#pragma mark global Attribute Scopes
+#pragma mark global Attribute Scopes globalAttributeScope
/* ObjC start globalAttributeScope */
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */
-/* ObjC end actions.(actionScope).synthesize */
/* ObjC start synthesize() */
/* AST genericParser.synthesize */
/* AST parserProperties */
@synthesize treeAdaptor;
-/* ObjC end synthesize() */

+ (void) initialize
{
#pragma mark Bitsets
-    FOLLOW_declaration_in_program85 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declaration_in_program85_data Count:(NSUInteger)1] retain];
-    FOLLOW_variable_in_declaration105 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_declaration105_data Count:(NSUInteger)1] retain];
-    FOLLOW_functionHeader_in_declaration115 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration115_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_SEMICOLON_in_declaration117 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_SEMICOLON_in_declaration117_data Count:(NSUInteger)1] retain];
-    FOLLOW_functionHeader_in_declaration135 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration135_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_declaration137 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_declaration137_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_variable166 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_variable166_data Count:(NSUInteger)1] retain];
-    FOLLOW_declarator_in_variable168 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_variable168_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_SEMICOLON_in_variable170 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_SEMICOLON_in_variable170_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_ID_in_declarator199 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_declarator199_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_functionHeader219 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_functionHeader219_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_ID_in_functionHeader221 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_functionHeader221_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_LCURVE_in_functionHeader223 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_LCURVE_in_functionHeader223_data Count:(NSUInteger)1] retain];
-    FOLLOW_formalParameter_in_functionHeader227 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader227_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_COMMA_in_functionHeader231 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_COMMA_in_functionHeader231_data Count:(NSUInteger)1] retain];
-    FOLLOW_formalParameter_in_functionHeader233 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader233_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_RCURVE_in_functionHeader241 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_RCURVE_in_functionHeader241_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_formalParameter281 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_formalParameter281_data Count:(NSUInteger)1] retain];
-    FOLLOW_declarator_in_formalParameter283 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_formalParameter283_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_LCURLY_in_block376 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_LCURLY_in_block376_data Count:(NSUInteger)1] retain];
-    FOLLOW_variable_in_block390 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_block390_data Count:(NSUInteger)1] retain];
-    FOLLOW_stat_in_block405 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_stat_in_block405_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_RCURLY_in_block416 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_RCURLY_in_block416_data Count:(NSUInteger)1] retain];
-    FOLLOW_forStat_in_stat449 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_forStat_in_stat449_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_stat457 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_stat457_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_SEMICOLON_in_stat459 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_SEMICOLON_in_stat459_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_stat468 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_stat468_data Count:(NSUInteger)1] retain];
-    FOLLOW_assignStat_in_stat476 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_stat476_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_SEMICOLON_in_stat478 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_SEMICOLON_in_stat478_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_SEMICOLON_in_stat487 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_SEMICOLON_in_stat487_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_FOR_in_forStat507 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_FOR_in_forStat507_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_LCURVE_in_forStat509 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_LCURVE_in_forStat509_data Count:(NSUInteger)1] retain];
-    FOLLOW_assignStat_in_forStat513 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_forStat513_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_SEMICOLON_in_forStat515 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_SEMICOLON_in_forStat515_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_forStat517 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat517_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_SEMICOLON_in_forStat519 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_SEMICOLON_in_forStat519_data Count:(NSUInteger)1] retain];
-    FOLLOW_assignStat_in_forStat523 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_forStat523_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_RCURVE_in_forStat525 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_RCURVE_in_forStat525_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_forStat527 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_forStat527_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_ID_in_assignStat570 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_assignStat570_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_EQ_in_assignStat572 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_EQ_in_assignStat572_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_assignStat574 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_assignStat574_data Count:(NSUInteger)1] retain];
-    FOLLOW_condExpr_in_expr598 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_condExpr_in_expr598_data Count:(NSUInteger)1] retain];
-    FOLLOW_aexpr_in_condExpr617 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_aexpr_in_condExpr617_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_EQEQ_in_condExpr622 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_EQEQ_in_condExpr622_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_LT_in_condExpr627 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_LT_in_condExpr627_data Count:(NSUInteger)1] retain];
-    FOLLOW_aexpr_in_condExpr631 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_aexpr_in_condExpr631_data Count:(NSUInteger)1] retain];
-    FOLLOW_atom_in_aexpr653 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_aexpr653_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_PLUS_in_aexpr657 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_PLUS_in_aexpr657_data Count:(NSUInteger)1] retain];
-    FOLLOW_atom_in_aexpr660 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_aexpr660_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_ID_in_atom680 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_atom680_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_INT_in_atom694 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_INT_in_atom694_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_LCURVE_in_atom708 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_LCURVE_in_atom708_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_atom710 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_atom710_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_RCURVE_in_atom712 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_RCURVE_in_atom712_data Count:(NSUInteger)1] retain];
-
-    [ANTLRBaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
+    FOLLOW_declaration_in_program85 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_declaration_in_program85_data Count:(NSUInteger)1] retain];
+    FOLLOW_variable_in_declaration105 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_declaration105_data Count:(NSUInteger)1] retain];
+    FOLLOW_functionHeader_in_declaration115 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration115_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_SEMICOLON_in_declaration117 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_SEMICOLON_in_declaration117_data Count:(NSUInteger)1] retain];
+    FOLLOW_functionHeader_in_declaration135 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration135_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_declaration137 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_declaration137_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_variable166 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_variable166_data Count:(NSUInteger)1] retain];
+    FOLLOW_declarator_in_variable168 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_variable168_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_SEMICOLON_in_variable170 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_SEMICOLON_in_variable170_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_ID_in_declarator199 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_declarator199_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_functionHeader219 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_functionHeader219_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_ID_in_functionHeader221 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_functionHeader221_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_LCURVE_in_functionHeader223 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_LCURVE_in_functionHeader223_data Count:(NSUInteger)1] retain];
+    FOLLOW_formalParameter_in_functionHeader227 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader227_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_COMMA_in_functionHeader231 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_COMMA_in_functionHeader231_data Count:(NSUInteger)1] retain];
+    FOLLOW_formalParameter_in_functionHeader233 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader233_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_RCURVE_in_functionHeader241 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_RCURVE_in_functionHeader241_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_formalParameter281 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_formalParameter281_data Count:(NSUInteger)1] retain];
+    FOLLOW_declarator_in_formalParameter283 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_formalParameter283_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_LCURLY_in_block376 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_LCURLY_in_block376_data Count:(NSUInteger)1] retain];
+    FOLLOW_variable_in_block390 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_block390_data Count:(NSUInteger)1] retain];
+    FOLLOW_stat_in_block405 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_stat_in_block405_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_RCURLY_in_block416 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_RCURLY_in_block416_data Count:(NSUInteger)1] retain];
+    FOLLOW_forStat_in_stat449 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_forStat_in_stat449_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_stat457 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_stat457_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_SEMICOLON_in_stat459 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_SEMICOLON_in_stat459_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_stat468 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_stat468_data Count:(NSUInteger)1] retain];
+    FOLLOW_assignStat_in_stat476 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_stat476_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_SEMICOLON_in_stat478 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_SEMICOLON_in_stat478_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_SEMICOLON_in_stat487 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_SEMICOLON_in_stat487_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_FOR_in_forStat507 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_FOR_in_forStat507_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_LCURVE_in_forStat509 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_LCURVE_in_forStat509_data Count:(NSUInteger)1] retain];
+    FOLLOW_assignStat_in_forStat513 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_forStat513_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_SEMICOLON_in_forStat515 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_SEMICOLON_in_forStat515_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_forStat517 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat517_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_SEMICOLON_in_forStat519 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_SEMICOLON_in_forStat519_data Count:(NSUInteger)1] retain];
+    FOLLOW_assignStat_in_forStat523 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_forStat523_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_RCURVE_in_forStat525 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_RCURVE_in_forStat525_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_forStat527 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_forStat527_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_ID_in_assignStat570 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_assignStat570_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_EQ_in_assignStat572 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_EQ_in_assignStat572_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_assignStat574 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_assignStat574_data Count:(NSUInteger)1] retain];
+    FOLLOW_condExpr_in_expr598 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_condExpr_in_expr598_data Count:(NSUInteger)1] retain];
+    FOLLOW_aexpr_in_condExpr617 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_aexpr_in_condExpr617_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_EQEQ_in_condExpr622 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_EQEQ_in_condExpr622_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_LT_in_condExpr627 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_LT_in_condExpr627_data Count:(NSUInteger)1] retain];
+    FOLLOW_aexpr_in_condExpr631 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_aexpr_in_condExpr631_data Count:(NSUInteger)1] retain];
+    FOLLOW_atom_in_aexpr653 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_aexpr653_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_PLUS_in_aexpr657 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_PLUS_in_aexpr657_data Count:(NSUInteger)1] retain];
+    FOLLOW_atom_in_aexpr660 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_aexpr660_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_ID_in_atom680 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_atom680_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_INT_in_atom694 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_INT_in_atom694_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_LCURVE_in_atom708 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_LCURVE_in_atom708_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_atom710 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_atom710_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_RCURVE_in_atom712 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_RCURVE_in_atom712_data Count:(NSUInteger)1] retain];
+
+    [BaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
@"ARG_DEF", @"BLOCK", @"FUNC_DECL", @"FUNC_DEF", @"FUNC_HDR", @"K_CHAR",
@"K_COMMA", @"K_EQ", @"K_EQEQ", @"K_FOR", @"K_ID", @"K_INT", @"K_INT_TYPE",
@"K_LCURLY", @"K_LCURVE", @"K_LT", @"K_PLUS", @"K_RCURLY", @"K_RCURVE",
@"K_SEMICOLON", @"K_VOID", @"VAR_DEF", @"WS", nil] retain]];
-    [ANTLRBaseRecognizer setGrammarFileName:@"SimpleC.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g"];
}

-+ (SimpleCParser *)newSimpleCParser:(id<ANTLRTokenStream>)aStream
++ (SimpleCParser *)newSimpleCParser:(id<TokenStream>)aStream
{
return [[SimpleCParser alloc] initWithTokenStream:aStream];
-
-
}

-- (id) initWithTokenStream:(id<ANTLRTokenStream>)aStream
+- (id) initWithTokenStream:(id<TokenStream>)aStream
{
-    self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:15+1] retain]];
+    self = [super initWithTokenStream:aStream State:[[RecognizerSharedState newRecognizerSharedStateWithRuleLen:15+1] retain]];
if ( self != nil ) {
-
-
dfa2 = [DFA2 newDFA2WithRecognizer:self];
/* start of actions-actionScope-init */
/* start of init */
/* AST genericParser.init */
-        [self setTreeAdaptor:[[ANTLRCommonTreeAdaptor newTreeAdaptor] retain]];
+        [self setTreeAdaptor:[[CommonTreeAdaptor newTreeAdaptor] retain]];
}
return self;
}
@@ -948,19 +947,17 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
[super dealloc];
}

-/* ObjC start members */
-/* ObjC end members */
/* ObjC start actions.(actionScope).methods */
/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
/* AST genericParser.methods */
/* AST parserMethods */
-- (id<ANTLRTreeAdaptor>) getTreeAdaptor
+- (id<TreeAdaptor>) getTreeAdaptor
{
return treeAdaptor;
}

-- (void) setTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor
+- (void) setTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor
{
if (aTreeAdaptor != treeAdaptor) {
treeAdaptor = aTreeAdaptor;
@@ -970,33 +967,35 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
/* ObjC start rules */
/*
* $ANTLR start program
- * SimpleC.g:16:1: program : ( declaration )+ ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:16:1: program : ( declaration )+ ;
*/
- (SimpleCParser_program_return *) program
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
SimpleCParser_program_return * retval = [SimpleCParser_program_return newSimpleCParser_program_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-         SimpleCParser_declaration_return * declaration1 = nil ;
-
+        /* ruleLabelDefs entry */
+        SimpleCParser_declaration_return * declaration1 = nil ;


-        // SimpleC.g:17:5: ( ( declaration )+ ) // ruleBlockSingleAlt
-        // SimpleC.g:17:9: ( declaration )+ // alt
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:17:5: ( ( declaration )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:17:9: ( declaration )+ // alt
{
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+


-        // SimpleC.g:17:9: ( declaration )+ // positiveClosureBlock
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:17:9: ( declaration )+ // positiveClosureBlock
NSInteger cnt1 = 0;
do {
NSInteger alt1 = 2;
@@ -1008,8 +1007,9 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

switch (alt1) {
case 1 : ;
-                    // SimpleC.g:17:9: declaration // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:17:9: declaration // alt
{
+
/* ASTParser ruleRef */
/* ruleRef */
[self pushFollow:FOLLOW_declaration_in_program85];
@@ -1019,45 +1019,45 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[treeAdaptor addChild:[declaration1 getTree] toTree:root_0];
-
+
}
break;

default :
if ( cnt1 >= 1 )
goto loop1;
-                    ANTLREarlyExitException *eee =
-                        [ANTLREarlyExitException newException:input decisionNumber:1];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:1];
@throw eee;
}
cnt1++;
} while (YES);
loop1: ;

-
+
}

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];



-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -1066,50 +1066,51 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/*
* $ANTLR start declaration
- * SimpleC.g:20:1: declaration : ( variable | functionHeader K_SEMICOLON -> ^( FUNC_DECL functionHeader ) | functionHeader block -> ^( FUNC_DEF functionHeader block ) );
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:20:1: declaration : ( variable | functionHeader K_SEMICOLON -> ^( FUNC_DECL functionHeader ) | functionHeader block -> ^( FUNC_DEF functionHeader block ) );
*/
- (SimpleCParser_declaration_return *) declaration
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
SimpleCParser_declaration_return * retval = [SimpleCParser_declaration_return newSimpleCParser_declaration_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-        ANTLRCommonToken *K_SEMICOLON4 = nil;
-         SimpleCParser_variable_return * variable2 = nil ;
-
-         SimpleCParser_functionHeader_return * functionHeader3 = nil ;
-
-         SimpleCParser_functionHeader_return * functionHeader5 = nil ;
-
-         SimpleCParser_block_return * block6 = nil ;
-
+        /* ruleLabelDefs entry */
+        CommonToken *K_SEMICOLON4 = nil;SimpleCParser_variable_return * variable2 = nil ;

-        ANTLRCommonTree *K_SEMICOLON4_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_K_SEMICOLON =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        SimpleCParser_functionHeader_return * functionHeader3 = nil ;
+
+        SimpleCParser_functionHeader_return * functionHeader5 = nil ;
+
+        SimpleCParser_block_return * block6 = nil ;
+
+
+        CommonTree *K_SEMICOLON4_tree=nil;
+        RewriteRuleTokenStream *stream_K_SEMICOLON =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token K_SEMICOLON"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_functionHeader =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_functionHeader =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule functionHeader"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_block =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_block =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule block"] retain];
-        // SimpleC.g:21:5: ( variable | functionHeader K_SEMICOLON -> ^( FUNC_DECL functionHeader ) | functionHeader block -> ^( FUNC_DEF functionHeader block ) ) //ruleblock
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:21:5: ( variable | functionHeader K_SEMICOLON -> ^( FUNC_DECL functionHeader ) | functionHeader block -> ^( FUNC_DEF functionHeader block ) ) //ruleblock
NSInteger alt2=3;
alt2 = [dfa2 predict:input];
switch (alt2) {
case 1 : ;
-                // SimpleC.g:21:9: variable // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:21:9: variable // alt
{
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+


/* ASTParser ruleRef */
@@ -1121,12 +1122,13 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[treeAdaptor addChild:[variable2 getTree] toTree:root_0];
-
+
}
break;
case 2 : ;
-                // SimpleC.g:22:9: functionHeader K_SEMICOLON // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:22:9: functionHeader K_SEMICOLON // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_functionHeader_in_declaration115];
functionHeader3 = [self functionHeader];
@@ -1135,11 +1137,11 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_functionHeader addElement:[functionHeader3 getTree]];
-
-                K_SEMICOLON4=(ANTLRCommonToken *)[self match:input TokenType:K_SEMICOLON Follow:FOLLOW_K_SEMICOLON_in_declaration117];
+
+                K_SEMICOLON4=(CommonToken *)[self match:input TokenType:K_SEMICOLON Follow:FOLLOW_K_SEMICOLON_in_declaration117];
[stream_K_SEMICOLON addElement:K_SEMICOLON4];

-
+
// AST REWRITE
// elements: functionHeader
// token labels:
@@ -1149,19 +1151,19 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
// wildcard labels:
retval.tree = root_0;

-                ANTLRRewriteRuleSubtreeStream *stream_retval =
-                    [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+                RewriteRuleSubtreeStream *stream_retval =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];

-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];

// 22:36: -> ^( FUNC_DECL functionHeader )
{
-                    // SimpleC.g:22:39: ^( FUNC_DECL functionHeader )
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:22:39: ^( FUNC_DECL functionHeader )
{
-                        ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                        root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:
-                                [treeAdaptor createTree:FUNC_DECL Text:@"FUNC_DECL"]
+                        CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                        root_1 = (CommonTree *)[treeAdaptor becomeRoot:
+                                [[treeAdaptor createTree:FUNC_DECL Text:@"FUNC_DECL"] retain]
old:root_1];

[treeAdaptor addChild:[stream_functionHeader nextTree] toTree:root_1];
@@ -1178,8 +1180,9 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}
break;
case 3 : ;
-                // SimpleC.g:23:9: functionHeader block // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:23:9: functionHeader block // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_functionHeader_in_declaration135];
functionHeader5 = [self functionHeader];
@@ -1188,7 +1191,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_functionHeader addElement:[functionHeader5 getTree]];
-
+
/* ruleRef */
[self pushFollow:FOLLOW_block_in_declaration137];
block6 = [self block];
@@ -1197,7 +1200,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_block addElement:[block6 getTree]];
-
+
// AST REWRITE
// elements: functionHeader, block
// token labels:
@@ -1207,19 +1210,19 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
// wildcard labels:
retval.tree = root_0;

-                ANTLRRewriteRuleSubtreeStream *stream_retval =
-                    [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+                RewriteRuleSubtreeStream *stream_retval =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];

-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];

// 23:30: -> ^( FUNC_DEF functionHeader block )
{
-                    // SimpleC.g:23:33: ^( FUNC_DEF functionHeader block )
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:23:33: ^( FUNC_DEF functionHeader block )
{
-                        ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                        root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:
-                                [treeAdaptor createTree:FUNC_DEF Text:@"FUNC_DEF"]
+                        CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                        root_1 = (CommonTree *)[treeAdaptor becomeRoot:
+                                [[treeAdaptor createTree:FUNC_DEF Text:@"FUNC_DEF"] retain]
old:root_1];

[treeAdaptor addChild:[stream_functionHeader nextTree] toTree:root_1];
@@ -1241,7 +1244,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}
/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];


@@ -1249,20 +1252,20 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
[stream_functionHeader release];
[stream_block release];

-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -1271,41 +1274,42 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/*
* $ANTLR start variable
- * SimpleC.g:26:1: variable : type declarator K_SEMICOLON -> ^( VAR_DEF type declarator ) ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:26:1: variable : type declarator K_SEMICOLON -> ^( VAR_DEF type declarator ) ;
*/
- (SimpleCParser_variable_return *) variable
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
SimpleCParser_variable_return * retval = [SimpleCParser_variable_return newSimpleCParser_variable_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-        ANTLRCommonToken *K_SEMICOLON9 = nil;
-         SimpleCParser_type_return * type7 = nil ;
-
-         SimpleCParser_declarator_return * declarator8 = nil ;
-
+        /* ruleLabelDefs entry */
+        CommonToken *K_SEMICOLON9 = nil;SimpleCParser_type_return * type7 = nil ;
+
+        SimpleCParser_declarator_return * declarator8 = nil ;
+

-        ANTLRCommonTree *K_SEMICOLON9_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_K_SEMICOLON =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        CommonTree *K_SEMICOLON9_tree=nil;
+        RewriteRuleTokenStream *stream_K_SEMICOLON =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token K_SEMICOLON"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_declarator =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_declarator =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule declarator"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_type =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_type =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule type"] retain];
-        // SimpleC.g:27:5: ( type declarator K_SEMICOLON -> ^( VAR_DEF type declarator ) ) // ruleBlockSingleAlt
-        // SimpleC.g:27:9: type declarator K_SEMICOLON // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:27:5: ( type declarator K_SEMICOLON -> ^( VAR_DEF type declarator ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:27:9: type declarator K_SEMICOLON // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_type_in_variable166];
type7 = [self type];
@@ -1314,7 +1318,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_type addElement:[type7 getTree]];
-
+
/* ruleRef */
[self pushFollow:FOLLOW_declarator_in_variable168];
declarator8 = [self declarator];
@@ -1323,11 +1327,11 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_declarator addElement:[declarator8 getTree]];
-
-        K_SEMICOLON9=(ANTLRCommonToken *)[self match:input TokenType:K_SEMICOLON Follow:FOLLOW_K_SEMICOLON_in_variable170];
+
+        K_SEMICOLON9=(CommonToken *)[self match:input TokenType:K_SEMICOLON Follow:FOLLOW_K_SEMICOLON_in_variable170];
[stream_K_SEMICOLON addElement:K_SEMICOLON9];

-
+
// AST REWRITE
// elements: declarator, type
// token labels:
@@ -1337,19 +1341,19 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
// wildcard labels:
retval.tree = root_0;

-        ANTLRRewriteRuleSubtreeStream *stream_retval =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_retval =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];

-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];

// 27:37: -> ^( VAR_DEF type declarator )
{
-            // SimpleC.g:27:40: ^( VAR_DEF type declarator )
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:27:40: ^( VAR_DEF type declarator )
{
-                ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:
-                        [treeAdaptor createTree:VAR_DEF Text:@"VAR_DEF"]
+                CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_1 = (CommonTree *)[treeAdaptor becomeRoot:
+                        [[treeAdaptor createTree:VAR_DEF Text:@"VAR_DEF"] retain]
old:root_1];

[treeAdaptor addChild:[stream_type nextTree] toTree:root_1];
@@ -1369,7 +1373,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];


@@ -1377,20 +1381,20 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
[stream_declarator release];
[stream_type release];

-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -1399,63 +1403,65 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/*
* $ANTLR start declarator
- * SimpleC.g:30:1: declarator : K_ID ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:30:1: declarator : K_ID ;
*/
- (SimpleCParser_declarator_return *) declarator
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
SimpleCParser_declarator_return * retval = [SimpleCParser_declarator_return newSimpleCParser_declarator_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-        ANTLRCommonToken *K_ID10 = nil;
+        /* ruleLabelDefs entry */
+        CommonToken *K_ID10 = nil;

-        ANTLRCommonTree *K_ID10_tree=nil;
+        CommonTree *K_ID10_tree=nil;

-        // SimpleC.g:31:5: ( K_ID ) // ruleBlockSingleAlt
-        // SimpleC.g:31:9: K_ID // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:31:5: ( K_ID ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:31:9: K_ID // alt
{
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+


/* ASTParser tokenRef */
-        K_ID10=(ANTLRCommonToken *)[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_declarator199];
+        K_ID10=(CommonToken *)[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_declarator199];
K_ID10_tree = /* ASTParser createNodeFromToken */
-        (ANTLRCommonTree *)[[treeAdaptor create:K_ID10] retain]
+        (CommonTree *)[[treeAdaptor create:K_ID10] retain]
;
[treeAdaptor addChild:K_ID10_tree  toTree:root_0];

-
+
}

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];



-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -1464,58 +1470,59 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/*
* $ANTLR start functionHeader
- * SimpleC.g:34:1: functionHeader : type K_ID K_LCURVE ( formalParameter ( K_COMMA formalParameter )* )? K_RCURVE -> ^( FUNC_HDR type K_ID ( formalParameter )+ ) ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:34:1: functionHeader : type K_ID K_LCURVE ( formalParameter ( K_COMMA formalParameter )* )? K_RCURVE -> ^( FUNC_HDR type K_ID ( formalParameter )+ ) ;
*/
- (SimpleCParser_functionHeader_return *) functionHeader
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
SimpleCParser_functionHeader_return * retval = [SimpleCParser_functionHeader_return newSimpleCParser_functionHeader_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-        ANTLRCommonToken *K_ID12 = nil;
-        ANTLRCommonToken *K_LCURVE13 = nil;
-        ANTLRCommonToken *K_COMMA15 = nil;
-        ANTLRCommonToken *K_RCURVE17 = nil;
-         SimpleCParser_type_return * type11 = nil ;
-
-         SimpleCParser_formalParameter_return * formalParameter14 = nil ;
-
-         SimpleCParser_formalParameter_return * formalParameter16 = nil ;
-
+        /* ruleLabelDefs entry */
+        CommonToken *K_ID12 = nil;
+        CommonToken *K_LCURVE13 = nil;
+        CommonToken *K_COMMA15 = nil;
+        CommonToken *K_RCURVE17 = nil;SimpleCParser_type_return * type11 = nil ;
+
+        SimpleCParser_formalParameter_return * formalParameter14 = nil ;
+
+        SimpleCParser_formalParameter_return * formalParameter16 = nil ;
+

-        ANTLRCommonTree *K_ID12_tree=nil;
-        ANTLRCommonTree *K_LCURVE13_tree=nil;
-        ANTLRCommonTree *K_COMMA15_tree=nil;
-        ANTLRCommonTree *K_RCURVE17_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_K_ID =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        CommonTree *K_ID12_tree=nil;
+        CommonTree *K_LCURVE13_tree=nil;
+        CommonTree *K_COMMA15_tree=nil;
+        CommonTree *K_RCURVE17_tree=nil;
+        RewriteRuleTokenStream *stream_K_ID =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token K_ID"] retain];
-        ANTLRRewriteRuleTokenStream *stream_K_LCURVE =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        RewriteRuleTokenStream *stream_K_LCURVE =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token K_LCURVE"] retain];
-        ANTLRRewriteRuleTokenStream *stream_K_RCURVE =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        RewriteRuleTokenStream *stream_K_RCURVE =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token K_RCURVE"] retain];
-        ANTLRRewriteRuleTokenStream *stream_K_COMMA =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        RewriteRuleTokenStream *stream_K_COMMA =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token K_COMMA"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_formalParameter =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_formalParameter =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule formalParameter"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_type =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_type =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule type"] retain];
-        // SimpleC.g:35:5: ( type K_ID K_LCURVE ( formalParameter ( K_COMMA formalParameter )* )? K_RCURVE -> ^( FUNC_HDR type K_ID ( formalParameter )+ ) ) // ruleBlockSingleAlt
-        // SimpleC.g:35:9: type K_ID K_LCURVE ( formalParameter ( K_COMMA formalParameter )* )? K_RCURVE // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:35:5: ( type K_ID K_LCURVE ( formalParameter ( K_COMMA formalParameter )* )? K_RCURVE -> ^( FUNC_HDR type K_ID ( formalParameter )+ ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:35:9: type K_ID K_LCURVE ( formalParameter ( K_COMMA formalParameter )* )? K_RCURVE // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_type_in_functionHeader219];
type11 = [self type];
@@ -1524,16 +1531,16 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_type addElement:[type11 getTree]];
-
-        K_ID12=(ANTLRCommonToken *)[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_functionHeader221];
+
+        K_ID12=(CommonToken *)[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_functionHeader221];
[stream_K_ID addElement:K_ID12];

-
-        K_LCURVE13=(ANTLRCommonToken *)[self match:input TokenType:K_LCURVE Follow:FOLLOW_K_LCURVE_in_functionHeader223];
+
+        K_LCURVE13=(CommonToken *)[self match:input TokenType:K_LCURVE Follow:FOLLOW_K_LCURVE_in_functionHeader223];
[stream_K_LCURVE addElement:K_LCURVE13];

-
-        // SimpleC.g:35:28: ( formalParameter ( K_COMMA formalParameter )* )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:35:28: ( formalParameter ( K_COMMA formalParameter )* )? // block
NSInteger alt4=2;
NSInteger LA4_0 = [input LA:1];

@@ -1542,8 +1549,9 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}
switch (alt4) {
case 1 : ;
-                // SimpleC.g:35:30: formalParameter ( K_COMMA formalParameter )* // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:35:30: formalParameter ( K_COMMA formalParameter )* // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_formalParameter_in_functionHeader227];
formalParameter14 = [self formalParameter];
@@ -1552,6 +1560,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_formalParameter addElement:[formalParameter14 getTree]];
+

do {
NSInteger alt3=2;
@@ -1563,12 +1572,13 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

switch (alt3) {
case 1 : ;
-                            // SimpleC.g:35:48: K_COMMA formalParameter // alt
+                            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:35:48: K_COMMA formalParameter // alt
{
-                            K_COMMA15=(ANTLRCommonToken *)[self match:input TokenType:K_COMMA Follow:FOLLOW_K_COMMA_in_functionHeader231];
-                                [stream_K_COMMA addElement:K_COMMA15];

+                            K_COMMA15=(CommonToken *)[self match:input TokenType:K_COMMA Follow:FOLLOW_K_COMMA_in_functionHeader231];
+                                [stream_K_COMMA addElement:K_COMMA15];

+
/* ruleRef */
[self pushFollow:FOLLOW_formalParameter_in_functionHeader233];
formalParameter16 = [self formalParameter];
@@ -1577,7 +1587,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_formalParameter addElement:[formalParameter16 getTree]];
-
+
}
break;

@@ -1587,19 +1597,19 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
} while (YES);
loop3: ;

-
+
}
break;

}

-
-        K_RCURVE17=(ANTLRCommonToken *)[self match:input TokenType:K_RCURVE Follow:FOLLOW_K_RCURVE_in_functionHeader241];
+
+        K_RCURVE17=(CommonToken *)[self match:input TokenType:K_RCURVE Follow:FOLLOW_K_RCURVE_in_functionHeader241];
[stream_K_RCURVE addElement:K_RCURVE17];

-
+
// AST REWRITE
-        // elements: formalParameter, type, K_ID
+        // elements: K_ID, type, formalParameter
// token labels:
// rule labels: retval
// token list labels:
@@ -1607,19 +1617,19 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
// wildcard labels:
retval.tree = root_0;

-        ANTLRRewriteRuleSubtreeStream *stream_retval =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_retval =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];

-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];

// 36:9: -> ^( FUNC_HDR type K_ID ( formalParameter )+ )
{
-            // SimpleC.g:36:12: ^( FUNC_HDR type K_ID ( formalParameter )+ )
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:36:12: ^( FUNC_HDR type K_ID ( formalParameter )+ )
{
-                ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:
-                        [treeAdaptor createTree:FUNC_HDR Text:@"FUNC_HDR"]
+                CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_1 = (CommonTree *)[treeAdaptor becomeRoot:
+                        [[treeAdaptor createTree:FUNC_HDR Text:@"FUNC_HDR"] retain]
old:root_1];

[treeAdaptor addChild:[stream_type nextTree] toTree:root_1];
@@ -1629,10 +1639,10 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
[stream_K_ID nextNode]
toTree:root_1];

-                // SimpleC.g:36:33: ( formalParameter )+
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:36:33: ( formalParameter )+
{
if ( !([stream_formalParameter hasNext]) ) {
-                    @throw [ANTLRRewriteEarlyExitException newException];
+                    @throw [RewriteEarlyExitException newException];
}
while ( [stream_formalParameter hasNext] ) {
[treeAdaptor addChild:[stream_formalParameter nextTree] toTree:root_1];
@@ -1654,7 +1664,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];


@@ -1665,20 +1675,20 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
[stream_formalParameter release];
[stream_type release];

-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -1687,36 +1697,38 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/*
* $ANTLR start formalParameter
- * SimpleC.g:39:1: formalParameter : type declarator -> ^( ARG_DEF type declarator ) ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:39:1: formalParameter : type declarator -> ^( ARG_DEF type declarator ) ;
*/
- (SimpleCParser_formalParameter_return *) formalParameter
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
SimpleCParser_formalParameter_return * retval = [SimpleCParser_formalParameter_return newSimpleCParser_formalParameter_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-         SimpleCParser_type_return * type18 = nil ;
-
-         SimpleCParser_declarator_return * declarator19 = nil ;
-
+        /* ruleLabelDefs entry */
+        SimpleCParser_type_return * type18 = nil ;
+
+        SimpleCParser_declarator_return * declarator19 = nil ;

-        ANTLRRewriteRuleSubtreeStream *stream_declarator =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+
+        RewriteRuleSubtreeStream *stream_declarator =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule declarator"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_type =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_type =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule type"] retain];
-        // SimpleC.g:40:5: ( type declarator -> ^( ARG_DEF type declarator ) ) // ruleBlockSingleAlt
-        // SimpleC.g:40:9: type declarator // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:40:5: ( type declarator -> ^( ARG_DEF type declarator ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:40:9: type declarator // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_type_in_formalParameter281];
type18 = [self type];
@@ -1725,7 +1737,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_type addElement:[type18 getTree]];
-
+
/* ruleRef */
[self pushFollow:FOLLOW_declarator_in_formalParameter283];
declarator19 = [self declarator];
@@ -1734,9 +1746,9 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_declarator addElement:[declarator19 getTree]];
-
+
// AST REWRITE
-        // elements: declarator, type
+        // elements: type, declarator
// token labels:
// rule labels: retval
// token list labels:
@@ -1744,19 +1756,19 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
// wildcard labels:
retval.tree = root_0;

-        ANTLRRewriteRuleSubtreeStream *stream_retval =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_retval =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];

-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];

// 40:25: -> ^( ARG_DEF type declarator )
{
-            // SimpleC.g:40:28: ^( ARG_DEF type declarator )
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:40:28: ^( ARG_DEF type declarator )
{
-                ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:
-                        [treeAdaptor createTree:ARG_DEF Text:@"ARG_DEF"]
+                CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_1 = (CommonTree *)[treeAdaptor becomeRoot:
+                        [[treeAdaptor createTree:ARG_DEF Text:@"ARG_DEF"] retain]
old:root_1];

[treeAdaptor addChild:[stream_type nextTree] toTree:root_1];
@@ -1776,27 +1788,27 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];


[stream_declarator release];
[stream_type release];

-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -1805,71 +1817,73 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/*
* $ANTLR start type
- * SimpleC.g:43:1: type : ( K_INT_TYPE | K_CHAR | K_VOID | K_ID );
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:43:1: type : ( K_INT_TYPE | K_CHAR | K_VOID | K_ID );
*/
- (SimpleCParser_type_return *) type
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
SimpleCParser_type_return * retval = [SimpleCParser_type_return newSimpleCParser_type_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-        ANTLRCommonToken *set20 = nil;
+        /* ruleLabelDefs entry */
+        CommonToken *set20 = nil;

-        ANTLRCommonTree *set20_tree=nil;
+        CommonTree *set20_tree=nil;

-        // SimpleC.g:44:5: ( K_INT_TYPE | K_CHAR | K_VOID | K_ID ) // ruleBlockSingleAlt
-        // SimpleC.g: // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:44:5: ( K_INT_TYPE | K_CHAR | K_VOID | K_ID ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g: // alt
{
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+


/* ASTParser matchRuleBlockSet */
/* ASTParser matchSet */
-        set20 = (ANTLRCommonToken *)[input LT:1]; /* matchSet */
+        set20 = (CommonToken *)[input LT:1]; /* matchSet */

if ([input LA:1] == K_CHAR||[input LA:1] == K_ID||[input LA:1] == K_INT_TYPE||[input LA:1] == K_VOID) {
[input consume];
[treeAdaptor addChild:/* ASTParser createNodeFromToken */
-            (ANTLRCommonTree *)[[treeAdaptor create:set20] retain]
+            (CommonTree *)[[treeAdaptor create:set20] retain]
toTree:root_0 ];
[state setIsErrorRecovery:NO];
} else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
@throw mse;
}

-
+
}

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];



-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -1878,49 +1892,51 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/*
* $ANTLR start block
- * SimpleC.g:50:1: block : lc= K_LCURLY ( variable )* ( stat )* K_RCURLY -> ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* ) ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:50:1: block : lc= K_LCURLY ( variable )* ( stat )* K_RCURLY -> ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* ) ;
*/
- (SimpleCParser_block_return *) block
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
SimpleCParser_block_return * retval = [SimpleCParser_block_return newSimpleCParser_block_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-        ANTLRCommonToken *lc = nil;
-        ANTLRCommonToken *K_RCURLY23 = nil;
-         SimpleCParser_variable_return * variable21 = nil ;
-
-         SimpleCParser_stat_return * stat22 = nil ;
-
+        /* ruleLabelDefs entry */
+        CommonToken *lc = nil;
+        CommonToken *K_RCURLY23 = nil;SimpleCParser_variable_return * variable21 = nil ;

-        ANTLRCommonTree *lc_tree=nil;
-        ANTLRCommonTree *K_RCURLY23_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_K_LCURLY =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        SimpleCParser_stat_return * stat22 = nil ;
+
+
+        CommonTree *lc_tree=nil;
+        CommonTree *K_RCURLY23_tree=nil;
+        RewriteRuleTokenStream *stream_K_LCURLY =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token K_LCURLY"] retain];
-        ANTLRRewriteRuleTokenStream *stream_K_RCURLY =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        RewriteRuleTokenStream *stream_K_RCURLY =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token K_RCURLY"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_variable =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_variable =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule variable"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_stat =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_stat =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule stat"] retain];
-        // SimpleC.g:51:5: (lc= K_LCURLY ( variable )* ( stat )* K_RCURLY -> ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* ) ) // ruleBlockSingleAlt
-        // SimpleC.g:51:9: lc= K_LCURLY ( variable )* ( stat )* K_RCURLY // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:51:5: (lc= K_LCURLY ( variable )* ( stat )* K_RCURLY -> ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:51:9: lc= K_LCURLY ( variable )* ( stat )* K_RCURLY // alt
{
-        lc=(ANTLRCommonToken *)[self match:input TokenType:K_LCURLY Follow:FOLLOW_K_LCURLY_in_block376];
+
+        lc=(CommonToken *)[self match:input TokenType:K_LCURLY Follow:FOLLOW_K_LCURLY_in_block376];
[stream_K_LCURLY addElement:lc];

+

do {
NSInteger alt5=2;
@@ -1940,8 +1956,9 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

switch (alt5) {
case 1 : ;
-                    // SimpleC.g:52:13: variable // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:52:13: variable // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_variable_in_block390];
variable21 = [self variable];
@@ -1950,7 +1967,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_variable addElement:[variable21 getTree]];
-
+
}
break;

@@ -1960,6 +1977,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
} while (YES);
loop5: ;

+

do {
NSInteger alt6=2;
@@ -1971,8 +1989,9 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

switch (alt6) {
case 1 : ;
-                    // SimpleC.g:53:13: stat // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:53:13: stat // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_stat_in_block405];
stat22 = [self stat];
@@ -1981,7 +2000,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_stat addElement:[stat22 getTree]];
-
+
}
break;

@@ -1991,11 +2010,11 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
} while (YES);
loop6: ;

-
-        K_RCURLY23=(ANTLRCommonToken *)[self match:input TokenType:K_RCURLY Follow:FOLLOW_K_RCURLY_in_block416];
+
+        K_RCURLY23=(CommonToken *)[self match:input TokenType:K_RCURLY Follow:FOLLOW_K_RCURLY_in_block416];
[stream_K_RCURLY addElement:K_RCURLY23];

-
+
// AST REWRITE
// elements: stat, variable
// token labels:
@@ -2005,29 +2024,29 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
// wildcard labels:
retval.tree = root_0;

-        ANTLRRewriteRuleSubtreeStream *stream_retval =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_retval =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];

-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];

// 55:9: -> ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* )
{
-            // SimpleC.g:55:12: ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* )
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:55:12: ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* )
{
-                ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:
-                        [treeAdaptor createTree:BLOCK FromToken:lc Text:@"BLOCK"]
+                CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_1 = (CommonTree *)[treeAdaptor becomeRoot:
+                        [[treeAdaptor createTree:BLOCK FromToken:lc Text:@"BLOCK"] retain]
old:root_1];

-                // SimpleC.g:55:34: ( variable )*
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:55:34: ( variable )*
while ( [stream_variable hasNext] ) {
[treeAdaptor addChild:[stream_variable nextTree] toTree:root_1];

}
[stream_variable reset];

-                // SimpleC.g:55:44: ( stat )*
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:55:44: ( stat )*
while ( [stream_stat hasNext] ) {
[treeAdaptor addChild:[stream_stat nextTree] toTree:root_1];

@@ -2047,7 +2066,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];


@@ -2056,20 +2075,20 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
[stream_variable release];
[stream_stat release];

-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -2078,39 +2097,39 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/*
* $ANTLR start stat
- * SimpleC.g:58:1: stat : ( forStat | expr K_SEMICOLON !| block | assignStat K_SEMICOLON !| K_SEMICOLON !);
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:58:1: stat : ( forStat | expr K_SEMICOLON !| block | assignStat K_SEMICOLON !| K_SEMICOLON !);
*/
- (SimpleCParser_stat_return *) stat
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
SimpleCParser_stat_return * retval = [SimpleCParser_stat_return newSimpleCParser_stat_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-        ANTLRCommonToken *K_SEMICOLON26 = nil;
-        ANTLRCommonToken *K_SEMICOLON29 = nil;
-        ANTLRCommonToken *K_SEMICOLON30 = nil;
-         SimpleCParser_forStat_return * forStat24 = nil ;
-
-         SimpleCParser_expr_return * expr25 = nil ;
-
-         SimpleCParser_block_return * block27 = nil ;
-
-         SimpleCParser_assignStat_return * assignStat28 = nil ;
-
+        /* ruleLabelDefs entry */
+        CommonToken *K_SEMICOLON26 = nil;
+        CommonToken *K_SEMICOLON29 = nil;
+        CommonToken *K_SEMICOLON30 = nil;SimpleCParser_forStat_return * forStat24 = nil ;
+
+        SimpleCParser_expr_return * expr25 = nil ;
+
+        SimpleCParser_block_return * block27 = nil ;
+
+        SimpleCParser_assignStat_return * assignStat28 = nil ;

-        ANTLRCommonTree *K_SEMICOLON26_tree=nil;
-        ANTLRCommonTree *K_SEMICOLON29_tree=nil;
-        ANTLRCommonTree *K_SEMICOLON30_tree=nil;

-        // SimpleC.g:58:5: ( forStat | expr K_SEMICOLON !| block | assignStat K_SEMICOLON !| K_SEMICOLON !) //ruleblock
+        CommonTree *K_SEMICOLON26_tree=nil;
+        CommonTree *K_SEMICOLON29_tree=nil;
+        CommonTree *K_SEMICOLON30_tree=nil;
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:58:5: ( forStat | expr K_SEMICOLON !| block | assignStat K_SEMICOLON !| K_SEMICOLON !) //ruleblock
NSInteger alt7=5;
unichar charLA7 = [input LA:1];
switch (charLA7) {
@@ -2130,7 +2149,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
alt7=2;
}
else {
-                    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:7 state:2 stream:input];
+                    NoViableAltException *nvae = [NoViableAltException newException:7 state:2 stream:input];
nvae.c = LA7_2;
@throw nvae;

@@ -2155,7 +2174,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
break;

default: ;
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:7 state:0 stream:input];
+            NoViableAltException *nvae = [NoViableAltException newException:7 state:0 stream:input];
nvae.c = charLA7;
@throw nvae;

@@ -2163,9 +2182,10 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

switch (alt7) {
case 1 : ;
-                // SimpleC.g:58:7: forStat // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:58:7: forStat // alt
{
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+


/* ASTParser ruleRef */
@@ -2177,13 +2197,14 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[treeAdaptor addChild:[forStat24 getTree] toTree:root_0];
-
+
}
break;
case 2 : ;
-                // SimpleC.g:59:7: expr K_SEMICOLON ! // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:59:7: expr K_SEMICOLON ! // alt
{
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+


/* ASTParser ruleRef */
@@ -2195,15 +2216,16 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[treeAdaptor addChild:[expr25 getTree] toTree:root_0];
-
-                K_SEMICOLON26=(ANTLRCommonToken *)[self match:input TokenType:K_SEMICOLON Follow:FOLLOW_K_SEMICOLON_in_stat459];
-
+
+                K_SEMICOLON26=(CommonToken *)[self match:input TokenType:K_SEMICOLON Follow:FOLLOW_K_SEMICOLON_in_stat459];
+
}
break;
case 3 : ;
-                // SimpleC.g:60:7: block // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:60:7: block // alt
{
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+


/* ASTParser ruleRef */
@@ -2215,13 +2237,14 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[treeAdaptor addChild:[block27 getTree] toTree:root_0];
-
+
}
break;
case 4 : ;
-                // SimpleC.g:61:7: assignStat K_SEMICOLON ! // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:61:7: assignStat K_SEMICOLON ! // alt
{
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+


/* ASTParser ruleRef */
@@ -2233,44 +2256,45 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[treeAdaptor addChild:[assignStat28 getTree] toTree:root_0];
-
-                K_SEMICOLON29=(ANTLRCommonToken *)[self match:input TokenType:K_SEMICOLON Follow:FOLLOW_K_SEMICOLON_in_stat478];
-
+
+                K_SEMICOLON29=(CommonToken *)[self match:input TokenType:K_SEMICOLON Follow:FOLLOW_K_SEMICOLON_in_stat478];
+
}
break;
case 5 : ;
-                // SimpleC.g:62:7: K_SEMICOLON ! // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:62:7: K_SEMICOLON ! // alt
{
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];


-                K_SEMICOLON30=(ANTLRCommonToken *)[self match:input TokenType:K_SEMICOLON Follow:FOLLOW_K_SEMICOLON_in_stat487];

+                K_SEMICOLON30=(CommonToken *)[self match:input TokenType:K_SEMICOLON Follow:FOLLOW_K_SEMICOLON_in_stat487];
+
}
break;

}
/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];



-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -2279,73 +2303,74 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/*
* $ANTLR start forStat
- * SimpleC.g:65:1: forStat : K_FOR K_LCURVE start= assignStat K_SEMICOLON expr K_SEMICOLON next= assignStat K_RCURVE block -> ^( K_FOR $start expr $next block ) ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:65:1: forStat : K_FOR K_LCURVE start= assignStat K_SEMICOLON expr K_SEMICOLON next= assignStat K_RCURVE block -> ^( K_FOR $start expr $next block ) ;
*/
- (SimpleCParser_forStat_return *) forStat
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
SimpleCParser_forStat_return * retval = [SimpleCParser_forStat_return newSimpleCParser_forStat_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-        ANTLRCommonToken *K_FOR31 = nil;
-        ANTLRCommonToken *K_LCURVE32 = nil;
-        ANTLRCommonToken *K_SEMICOLON33 = nil;
-        ANTLRCommonToken *K_SEMICOLON35 = nil;
-        ANTLRCommonToken *K_RCURVE36 = nil;
-         SimpleCParser_assignStat_return * start = nil ;
-
-         SimpleCParser_assignStat_return * next = nil ;
-
-         SimpleCParser_expr_return * expr34 = nil ;
-
-         SimpleCParser_block_return * block37 = nil ;
-
+        /* ruleLabelDefs entry */
+        CommonToken *K_FOR31 = nil;
+        CommonToken *K_LCURVE32 = nil;
+        CommonToken *K_SEMICOLON33 = nil;
+        CommonToken *K_SEMICOLON35 = nil;
+        CommonToken *K_RCURVE36 = nil;SimpleCParser_assignStat_return * start = nil ;
+
+        SimpleCParser_assignStat_return * next = nil ;

-        ANTLRCommonTree *K_FOR31_tree=nil;
-        ANTLRCommonTree *K_LCURVE32_tree=nil;
-        ANTLRCommonTree *K_SEMICOLON33_tree=nil;
-        ANTLRCommonTree *K_SEMICOLON35_tree=nil;
-        ANTLRCommonTree *K_RCURVE36_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_K_LCURVE =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        SimpleCParser_expr_return * expr34 = nil ;
+
+        SimpleCParser_block_return * block37 = nil ;
+
+
+        CommonTree *K_FOR31_tree=nil;
+        CommonTree *K_LCURVE32_tree=nil;
+        CommonTree *K_SEMICOLON33_tree=nil;
+        CommonTree *K_SEMICOLON35_tree=nil;
+        CommonTree *K_RCURVE36_tree=nil;
+        RewriteRuleTokenStream *stream_K_LCURVE =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token K_LCURVE"] retain];
-        ANTLRRewriteRuleTokenStream *stream_K_RCURVE =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        RewriteRuleTokenStream *stream_K_RCURVE =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token K_RCURVE"] retain];
-        ANTLRRewriteRuleTokenStream *stream_K_SEMICOLON =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        RewriteRuleTokenStream *stream_K_SEMICOLON =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token K_SEMICOLON"] retain];
-        ANTLRRewriteRuleTokenStream *stream_K_FOR =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        RewriteRuleTokenStream *stream_K_FOR =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token K_FOR"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_assignStat =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_assignStat =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule assignStat"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_block =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_block =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule block"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_expr =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_expr =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule expr"] retain];
-        // SimpleC.g:66:5: ( K_FOR K_LCURVE start= assignStat K_SEMICOLON expr K_SEMICOLON next= assignStat K_RCURVE block -> ^( K_FOR $start expr $next block ) ) // ruleBlockSingleAlt
-        // SimpleC.g:66:9: K_FOR K_LCURVE start= assignStat K_SEMICOLON expr K_SEMICOLON next= assignStat K_RCURVE block // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:66:5: ( K_FOR K_LCURVE start= assignStat K_SEMICOLON expr K_SEMICOLON next= assignStat K_RCURVE block -> ^( K_FOR $start expr $next block ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:66:9: K_FOR K_LCURVE start= assignStat K_SEMICOLON expr K_SEMICOLON next= assignStat K_RCURVE block // alt
{
-        K_FOR31=(ANTLRCommonToken *)[self match:input TokenType:K_FOR Follow:FOLLOW_K_FOR_in_forStat507];
-            [stream_K_FOR addElement:K_FOR31];

+        K_FOR31=(CommonToken *)[self match:input TokenType:K_FOR Follow:FOLLOW_K_FOR_in_forStat507];
+            [stream_K_FOR addElement:K_FOR31];

-        K_LCURVE32=(ANTLRCommonToken *)[self match:input TokenType:K_LCURVE Follow:FOLLOW_K_LCURVE_in_forStat509];
+
+        K_LCURVE32=(CommonToken *)[self match:input TokenType:K_LCURVE Follow:FOLLOW_K_LCURVE_in_forStat509];
[stream_K_LCURVE addElement:K_LCURVE32];

-
+
/* ruleRef */
[self pushFollow:FOLLOW_assignStat_in_forStat513];
start = [self assignStat];
@@ -2354,11 +2379,11 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_assignStat addElement:[start getTree]];
-
-        K_SEMICOLON33=(ANTLRCommonToken *)[self match:input TokenType:K_SEMICOLON Follow:FOLLOW_K_SEMICOLON_in_forStat515];
+
+        K_SEMICOLON33=(CommonToken *)[self match:input TokenType:K_SEMICOLON Follow:FOLLOW_K_SEMICOLON_in_forStat515];
[stream_K_SEMICOLON addElement:K_SEMICOLON33];

-
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_forStat517];
expr34 = [self expr];
@@ -2367,11 +2392,11 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_expr addElement:[expr34 getTree]];
-
-        K_SEMICOLON35=(ANTLRCommonToken *)[self match:input TokenType:K_SEMICOLON Follow:FOLLOW_K_SEMICOLON_in_forStat519];
+
+        K_SEMICOLON35=(CommonToken *)[self match:input TokenType:K_SEMICOLON Follow:FOLLOW_K_SEMICOLON_in_forStat519];
[stream_K_SEMICOLON addElement:K_SEMICOLON35];

-
+
/* ruleRef */
[self pushFollow:FOLLOW_assignStat_in_forStat523];
next = [self assignStat];
@@ -2380,11 +2405,11 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_assignStat addElement:[next getTree]];
-
-        K_RCURVE36=(ANTLRCommonToken *)[self match:input TokenType:K_RCURVE Follow:FOLLOW_K_RCURVE_in_forStat525];
+
+        K_RCURVE36=(CommonToken *)[self match:input TokenType:K_RCURVE Follow:FOLLOW_K_RCURVE_in_forStat525];
[stream_K_RCURVE addElement:K_RCURVE36];

-
+
/* ruleRef */
[self pushFollow:FOLLOW_block_in_forStat527];
block37 = [self block];
@@ -2393,9 +2418,9 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_block addElement:[block37 getTree]];
-
+
// AST REWRITE
-        // elements: start, next, expr, block, K_FOR
+        // elements: block, start, K_FOR, next, expr
// token labels:
// rule labels: retval, start, next
// token list labels:
@@ -2403,24 +2428,24 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
// wildcard labels:
retval.tree = root_0;

-        ANTLRRewriteRuleSubtreeStream *stream_retval =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_retval =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_start =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_start =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"token start" element:start!=nil?[start getTree]:nil] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_next =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_next =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"token next" element:next!=nil?[next getTree]:nil] retain];

-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];

// 67:9: -> ^( K_FOR $start expr $next block )
{
-            // SimpleC.g:67:12: ^( K_FOR $start expr $next block )
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:67:12: ^( K_FOR $start expr $next block )
{
-                ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:
+                CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_1 = (CommonTree *)[treeAdaptor becomeRoot:
[stream_K_FOR nextNode]
old:root_1];

@@ -2445,7 +2470,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];


@@ -2457,20 +2482,20 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
[stream_block release];
[stream_expr release];

-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -2479,49 +2504,50 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/*
* $ANTLR start assignStat
- * SimpleC.g:70:1: assignStat : K_ID K_EQ expr -> ^( K_EQ K_ID expr ) ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:70:1: assignStat : K_ID K_EQ expr -> ^( K_EQ K_ID expr ) ;
*/
- (SimpleCParser_assignStat_return *) assignStat
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
SimpleCParser_assignStat_return * retval = [SimpleCParser_assignStat_return newSimpleCParser_assignStat_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-        ANTLRCommonToken *K_ID38 = nil;
-        ANTLRCommonToken *K_EQ39 = nil;
-         SimpleCParser_expr_return * expr40 = nil ;
-
+        /* ruleLabelDefs entry */
+        CommonToken *K_ID38 = nil;
+        CommonToken *K_EQ39 = nil;SimpleCParser_expr_return * expr40 = nil ;

-        ANTLRCommonTree *K_ID38_tree=nil;
-        ANTLRCommonTree *K_EQ39_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_K_ID =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+
+        CommonTree *K_ID38_tree=nil;
+        CommonTree *K_EQ39_tree=nil;
+        RewriteRuleTokenStream *stream_K_ID =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token K_ID"] retain];
-        ANTLRRewriteRuleTokenStream *stream_K_EQ =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        RewriteRuleTokenStream *stream_K_EQ =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token K_EQ"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_expr =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_expr =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule expr"] retain];
-        // SimpleC.g:71:5: ( K_ID K_EQ expr -> ^( K_EQ K_ID expr ) ) // ruleBlockSingleAlt
-        // SimpleC.g:71:9: K_ID K_EQ expr // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:71:5: ( K_ID K_EQ expr -> ^( K_EQ K_ID expr ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:71:9: K_ID K_EQ expr // alt
{
-        K_ID38=(ANTLRCommonToken *)[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_assignStat570];
-            [stream_K_ID addElement:K_ID38];

+        K_ID38=(CommonToken *)[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_assignStat570];
+            [stream_K_ID addElement:K_ID38];

-        K_EQ39=(ANTLRCommonToken *)[self match:input TokenType:K_EQ Follow:FOLLOW_K_EQ_in_assignStat572];
+
+        K_EQ39=(CommonToken *)[self match:input TokenType:K_EQ Follow:FOLLOW_K_EQ_in_assignStat572];
[stream_K_EQ addElement:K_EQ39];

-
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_assignStat574];
expr40 = [self expr];
@@ -2530,9 +2556,9 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_expr addElement:[expr40 getTree]];
-
+
// AST REWRITE
-        // elements: K_ID, K_EQ, expr
+        // elements: expr, K_ID, K_EQ
// token labels:
// rule labels: retval
// token list labels:
@@ -2540,18 +2566,18 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
// wildcard labels:
retval.tree = root_0;

-        ANTLRRewriteRuleSubtreeStream *stream_retval =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_retval =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];

-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];

// 71:24: -> ^( K_EQ K_ID expr )
{
-            // SimpleC.g:71:27: ^( K_EQ K_ID expr )
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:71:27: ^( K_EQ K_ID expr )
{
-                ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:
+                CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_1 = (CommonTree *)[treeAdaptor becomeRoot:
[stream_K_EQ nextNode]
old:root_1];

@@ -2575,7 +2601,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];


@@ -2583,20 +2609,20 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
[stream_K_EQ release];
[stream_expr release];

-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -2605,30 +2631,32 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/*
* $ANTLR start expr
- * SimpleC.g:74:1: expr : condExpr ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:74:1: expr : condExpr ;
*/
- (SimpleCParser_expr_return *) expr
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
SimpleCParser_expr_return * retval = [SimpleCParser_expr_return newSimpleCParser_expr_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-         SimpleCParser_condExpr_return * condExpr41 = nil ;
-
+        /* ruleLabelDefs entry */
+        SimpleCParser_condExpr_return * condExpr41 = nil ;
+


-        // SimpleC.g:74:5: ( condExpr ) // ruleBlockSingleAlt
-        // SimpleC.g:74:9: condExpr // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:74:5: ( condExpr ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:74:9: condExpr // alt
{
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+


/* ASTParser ruleRef */
@@ -2640,30 +2668,30 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[treeAdaptor addChild:[condExpr41 getTree] toTree:root_0];
-
+
}

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];



-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -2672,36 +2700,37 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/*
* $ANTLR start condExpr
- * SimpleC.g:77:1: condExpr : aexpr ( ( K_EQEQ ^| K_LT ^) aexpr )? ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:77:1: condExpr : aexpr ( ( K_EQEQ ^| K_LT ^) aexpr )? ;
*/
- (SimpleCParser_condExpr_return *) condExpr
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
SimpleCParser_condExpr_return * retval = [SimpleCParser_condExpr_return newSimpleCParser_condExpr_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-        ANTLRCommonToken *K_EQEQ43 = nil;
-        ANTLRCommonToken *K_LT44 = nil;
-         SimpleCParser_aexpr_return * aexpr42 = nil ;
-
-         SimpleCParser_aexpr_return * aexpr45 = nil ;
-
+        /* ruleLabelDefs entry */
+        CommonToken *K_EQEQ43 = nil;
+        CommonToken *K_LT44 = nil;SimpleCParser_aexpr_return * aexpr42 = nil ;
+
+        SimpleCParser_aexpr_return * aexpr45 = nil ;

-        ANTLRCommonTree *K_EQEQ43_tree=nil;
-        ANTLRCommonTree *K_LT44_tree=nil;

-        // SimpleC.g:78:5: ( aexpr ( ( K_EQEQ ^| K_LT ^) aexpr )? ) // ruleBlockSingleAlt
-        // SimpleC.g:78:9: aexpr ( ( K_EQEQ ^| K_LT ^) aexpr )? // alt
+        CommonTree *K_EQEQ43_tree=nil;
+        CommonTree *K_LT44_tree=nil;
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:78:5: ( aexpr ( ( K_EQEQ ^| K_LT ^) aexpr )? ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:78:9: aexpr ( ( K_EQEQ ^| K_LT ^) aexpr )? // alt
{
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+


/* ASTParser ruleRef */
@@ -2713,8 +2742,8 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[treeAdaptor addChild:[aexpr42 getTree] toTree:root_0];
-
-        // SimpleC.g:78:15: ( ( K_EQEQ ^| K_LT ^) aexpr )? // block
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:78:15: ( ( K_EQEQ ^| K_LT ^) aexpr )? // block
NSInteger alt9=2;
NSInteger LA9_0 = [input LA:1];

@@ -2723,9 +2752,10 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}
switch (alt9) {
case 1 : ;
-                // SimpleC.g:78:17: ( K_EQEQ ^| K_LT ^) aexpr // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:78:17: ( K_EQEQ ^| K_LT ^) aexpr // alt
{
-                // SimpleC.g:78:17: ( K_EQEQ ^| K_LT ^) // block
+
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:78:17: ( K_EQEQ ^| K_LT ^) // block
NSInteger alt8=2;
NSInteger LA8_0 = [input LA:1];

@@ -2736,40 +2766,42 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
alt8=2;
}
else {
-                    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:8 state:0 stream:input];
+                    NoViableAltException *nvae = [NoViableAltException newException:8 state:0 stream:input];
nvae.c = LA8_0;
@throw nvae;

}
switch (alt8) {
case 1 : ;
-                        // SimpleC.g:78:18: K_EQEQ ^ // alt
+                        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:78:18: K_EQEQ ^ // alt
{
-                        K_EQEQ43=(ANTLRCommonToken *)[self match:input TokenType:K_EQEQ Follow:FOLLOW_K_EQEQ_in_condExpr622];
+
+                        K_EQEQ43=(CommonToken *)[self match:input TokenType:K_EQEQ Follow:FOLLOW_K_EQEQ_in_condExpr622];
K_EQEQ43_tree = /* ASTParser createNodeFromToken */
-                        (ANTLRCommonTree *)[[treeAdaptor create:K_EQEQ43] retain]
+                        (CommonTree *)[[treeAdaptor create:K_EQEQ43] retain]
;
-                        root_0 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:K_EQEQ43_tree old:root_0];
-
+                        root_0 = (CommonTree *)[treeAdaptor becomeRoot:K_EQEQ43_tree old:root_0];

+
}
break;
case 2 : ;
-                        // SimpleC.g:78:28: K_LT ^ // alt
+                        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:78:28: K_LT ^ // alt
{
-                        K_LT44=(ANTLRCommonToken *)[self match:input TokenType:K_LT Follow:FOLLOW_K_LT_in_condExpr627];
+
+                        K_LT44=(CommonToken *)[self match:input TokenType:K_LT Follow:FOLLOW_K_LT_in_condExpr627];
K_LT44_tree = /* ASTParser createNodeFromToken */
-                        (ANTLRCommonTree *)[[treeAdaptor create:K_LT44] retain]
+                        (CommonTree *)[[treeAdaptor create:K_LT44] retain]
;
-                        root_0 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:K_LT44_tree old:root_0];
-
+                        root_0 = (CommonTree *)[treeAdaptor becomeRoot:K_LT44_tree old:root_0];

+
}
break;

}

-
+
/* ASTParser ruleRef */
/* ruleRef */
[self pushFollow:FOLLOW_aexpr_in_condExpr631];
@@ -2779,36 +2811,36 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[treeAdaptor addChild:[aexpr45 getTree] toTree:root_0];
-
+
}
break;

}

-
+
}

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];



-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -2817,34 +2849,35 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/*
* $ANTLR start aexpr
- * SimpleC.g:81:1: aexpr : atom ( K_PLUS ^ atom )* ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:81:1: aexpr : atom ( K_PLUS ^ atom )* ;
*/
- (SimpleCParser_aexpr_return *) aexpr
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
SimpleCParser_aexpr_return * retval = [SimpleCParser_aexpr_return newSimpleCParser_aexpr_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-        ANTLRCommonToken *K_PLUS47 = nil;
-         SimpleCParser_atom_return * atom46 = nil ;
-
-         SimpleCParser_atom_return * atom48 = nil ;
-
+        /* ruleLabelDefs entry */
+        CommonToken *K_PLUS47 = nil;SimpleCParser_atom_return * atom46 = nil ;

-        ANTLRCommonTree *K_PLUS47_tree=nil;
+        SimpleCParser_atom_return * atom48 = nil ;

-        // SimpleC.g:82:5: ( atom ( K_PLUS ^ atom )* ) // ruleBlockSingleAlt
-        // SimpleC.g:82:9: atom ( K_PLUS ^ atom )* // alt
+
+        CommonTree *K_PLUS47_tree=nil;
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:82:5: ( atom ( K_PLUS ^ atom )* ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:82:9: atom ( K_PLUS ^ atom )* // alt
{
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+


/* ASTParser ruleRef */
@@ -2856,6 +2889,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[treeAdaptor addChild:[atom46 getTree] toTree:root_0];
+

do {
NSInteger alt10=2;
@@ -2867,15 +2901,16 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

switch (alt10) {
case 1 : ;
-                    // SimpleC.g:82:16: K_PLUS ^ atom // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:82:16: K_PLUS ^ atom // alt
{
-                    K_PLUS47=(ANTLRCommonToken *)[self match:input TokenType:K_PLUS Follow:FOLLOW_K_PLUS_in_aexpr657];
+
+                    K_PLUS47=(CommonToken *)[self match:input TokenType:K_PLUS Follow:FOLLOW_K_PLUS_in_aexpr657];
K_PLUS47_tree = /* ASTParser createNodeFromToken */
-                    (ANTLRCommonTree *)[[treeAdaptor create:K_PLUS47] retain]
+                    (CommonTree *)[[treeAdaptor create:K_PLUS47] retain]
;
-                    root_0 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:K_PLUS47_tree old:root_0];
-
+                    root_0 = (CommonTree *)[treeAdaptor becomeRoot:K_PLUS47_tree old:root_0];

+
/* ASTParser ruleRef */
/* ruleRef */
[self pushFollow:FOLLOW_atom_in_aexpr660];
@@ -2885,7 +2920,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[treeAdaptor addChild:[atom48 getTree] toTree:root_0];
-
+
}
break;

@@ -2895,30 +2930,30 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
} while (YES);
loop10: ;

-
+
}

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];



-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -2927,43 +2962,43 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

/*
* $ANTLR start atom
- * SimpleC.g:85:1: atom : ( K_ID | K_INT | K_LCURVE expr K_RCURVE -> expr );
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:85:1: atom : ( K_ID | K_INT | K_LCURVE expr K_RCURVE -> expr );
*/
- (SimpleCParser_atom_return *) atom
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
SimpleCParser_atom_return * retval = [SimpleCParser_atom_return newSimpleCParser_atom_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-        ANTLRCommonToken *K_ID49 = nil;
-        ANTLRCommonToken *K_INT50 = nil;
-        ANTLRCommonToken *K_LCURVE51 = nil;
-        ANTLRCommonToken *K_RCURVE53 = nil;
-         SimpleCParser_expr_return * expr52 = nil ;
-
-
-        ANTLRCommonTree *K_ID49_tree=nil;
-        ANTLRCommonTree *K_INT50_tree=nil;
-        ANTLRCommonTree *K_LCURVE51_tree=nil;
-        ANTLRCommonTree *K_RCURVE53_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_K_LCURVE =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        /* ruleLabelDefs entry */
+        CommonToken *K_ID49 = nil;
+        CommonToken *K_INT50 = nil;
+        CommonToken *K_LCURVE51 = nil;
+        CommonToken *K_RCURVE53 = nil;SimpleCParser_expr_return * expr52 = nil ;
+
+
+        CommonTree *K_ID49_tree=nil;
+        CommonTree *K_INT50_tree=nil;
+        CommonTree *K_LCURVE51_tree=nil;
+        CommonTree *K_RCURVE53_tree=nil;
+        RewriteRuleTokenStream *stream_K_LCURVE =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token K_LCURVE"] retain];
-        ANTLRRewriteRuleTokenStream *stream_K_RCURVE =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        RewriteRuleTokenStream *stream_K_RCURVE =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token K_RCURVE"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_expr =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_expr =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule expr"] retain];
-        // SimpleC.g:86:5: ( K_ID | K_INT | K_LCURVE expr K_RCURVE -> expr ) //ruleblock
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:86:5: ( K_ID | K_INT | K_LCURVE expr K_RCURVE -> expr ) //ruleblock
NSInteger alt11=3;
unichar charLA11 = [input LA:1];
switch (charLA11) {
@@ -2984,7 +3019,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
break;

default: ;
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:11 state:0 stream:input];
+            NoViableAltException *nvae = [NoViableAltException newException:11 state:0 stream:input];
nvae.c = charLA11;
@throw nvae;

@@ -2992,44 +3027,47 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000

switch (alt11) {
case 1 : ;
-                // SimpleC.g:86:7: K_ID // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:86:7: K_ID // alt
{
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+


/* ASTParser tokenRef */
-                K_ID49=(ANTLRCommonToken *)[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_atom680];
+                K_ID49=(CommonToken *)[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_atom680];
K_ID49_tree = /* ASTParser createNodeFromToken */
-                (ANTLRCommonTree *)[[treeAdaptor create:K_ID49] retain]
+                (CommonTree *)[[treeAdaptor create:K_ID49] retain]
;
[treeAdaptor addChild:K_ID49_tree  toTree:root_0];

-
+
}
break;
case 2 : ;
-                // SimpleC.g:87:7: K_INT // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:87:7: K_INT // alt
{
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+


/* ASTParser tokenRef */
-                K_INT50=(ANTLRCommonToken *)[self match:input TokenType:K_INT Follow:FOLLOW_K_INT_in_atom694];
+                K_INT50=(CommonToken *)[self match:input TokenType:K_INT Follow:FOLLOW_K_INT_in_atom694];
K_INT50_tree = /* ASTParser createNodeFromToken */
-                (ANTLRCommonTree *)[[treeAdaptor create:K_INT50] retain]
+                (CommonTree *)[[treeAdaptor create:K_INT50] retain]
;
[treeAdaptor addChild:K_INT50_tree  toTree:root_0];

-
+
}
break;
case 3 : ;
-                // SimpleC.g:88:7: K_LCURVE expr K_RCURVE // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleC.g:88:7: K_LCURVE expr K_RCURVE // alt
{
-                K_LCURVE51=(ANTLRCommonToken *)[self match:input TokenType:K_LCURVE Follow:FOLLOW_K_LCURVE_in_atom708];
-                    [stream_K_LCURVE addElement:K_LCURVE51];

+                K_LCURVE51=(CommonToken *)[self match:input TokenType:K_LCURVE Follow:FOLLOW_K_LCURVE_in_atom708];
+                    [stream_K_LCURVE addElement:K_LCURVE51];

+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_atom710];
expr52 = [self expr];
@@ -3038,11 +3076,11 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000


[stream_expr addElement:[expr52 getTree]];
-
-                K_RCURVE53=(ANTLRCommonToken *)[self match:input TokenType:K_RCURVE Follow:FOLLOW_K_RCURVE_in_atom712];
+
+                K_RCURVE53=(CommonToken *)[self match:input TokenType:K_RCURVE Follow:FOLLOW_K_RCURVE_in_atom712];
[stream_K_RCURVE addElement:K_RCURVE53];

-
+
// AST REWRITE
// elements: expr
// token labels:
@@ -3052,11 +3090,11 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
// wildcard labels:
retval.tree = root_0;

-                ANTLRRewriteRuleSubtreeStream *stream_retval =
-                    [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+                RewriteRuleSubtreeStream *stream_retval =
+                    [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];

-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];

// 88:30: -> expr
{
@@ -3074,7 +3112,7 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
}
/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];


@@ -3082,20 +3120,20 @@ static const unsigned long long FOLLOW_K_RCURVE_in_atom712_data[] = { 0x00000000
[stream_K_RCURVE release];
[stream_expr release];

-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g
index c1f89b8..a3a6293 100644
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g
+++ b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g
@@ -7,7 +7,7 @@ options {

scope Symbols
{
-ANTLRCommonTree *tree;
+CommonTree *tree;
}

program
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.h b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.h
index 2832b66..3808ac9 100644
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.h
+++ b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.h
@@ -1,7 +1,7 @@
-// $ANTLR ${project.version} ${buildNumber} SimpleCTP.g 2011-05-06 15:09:28
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g 2012-02-16 17:41:10

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
#import <ANTLR/ANTLR.h>
@@ -50,58 +50,51 @@ typedef enum {
#define K_VOID 24
#define VAR_DEF 25
#define WS 26
-#pragma mark Dynamic Global Scopes
+#pragma mark Dynamic Global Scopes globalAttributeScopeInterface
/* globalAttributeScopeInterface */
-@interface Symbols_Scope : ANTLRSymbolsScope {
+@interface Symbols_Scope : SymbolsScope {
ANTLRCommonTree * tree;
-
-}
+ }
/* start of globalAttributeScopeInterface properties */
-
@property (assign, getter=gettree, setter=settree:) ANTLRCommonTree * tree;
-
/* end globalAttributeScopeInterface properties */
-
-
+ (Symbols_Scope *)newSymbols_Scope;
- (id) init;
/* start of globalAttributeScopeInterface methodsDecl */
-
- (ANTLRCommonTree *)gettree;
- (void)settree:(ANTLRCommonTree *)aVal;
-
/* End of globalAttributeScopeInterface methodsDecl */
-
@end /* end of Symbols_Scope interface */

-#pragma mark Dynamic Rule Scopes
-#pragma mark Rule Return Scopes start
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeInterface
+#pragma mark Rule Return Scopes returnScopeInterface
/* returnScopeInterface SimpleCTP_expr_return */
-@interface SimpleCTP_expr_return :ANTLRTreeRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface SimpleCTP_expr_return : TreeRuleReturnScope { /* returnScopeInterface line 1838 */
/* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
+
+
+/* start of method declarations */
+
+ (SimpleCTP_expr_return *)newSimpleCTP_expr_return;
/* this is start of set and get methods */
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */



/* Interface grammar class */
-@interface SimpleCTP : ANTLRTreeParser { /* line 572 */
-/* ObjC start of ruleAttributeScopeMemVar */
-
-
-/* ObjC end of ruleAttributeScopeMemVar */
-/* ObjC start of globalAttributeScopeMemVar */
+@interface SimpleCTP  : TreeParser { /* line 572 */
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeDecl
+#pragma mark Dynamic Global Rule Scopes globalAttributeScopeMemVar
/* globalAttributeScopeMemVar */
-//ANTLRSymbolStack *gStack;
-ANTLRSymbolStack *Symbols_stack;
+SymbolStack *Symbols_stack;
Symbols_Scope *Symbols_scope;

-/* ObjC end of globalAttributeScopeMemVar */
+
/* ObjC start of actions.(actionScope).memVars */
/* ObjC end of actions.(actionScope).memVars */
/* ObjC start of memVars */
@@ -115,7 +108,7 @@ Symbols_Scope *Symbols_scope;
/* ObjC end of properties */

+ (void) initialize;
-+ (id) newSimpleCTP:(id<ANTLRTreeNodeStream>)aStream;
++ (id) newSimpleCTP:(id<TreeNodeStream>)aStream;
/* ObjC start of actions.(actionScope).methodsDecl */
/* ObjC end of actions.(actionScope).methodsDecl */

diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.java b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.java
index e2e0d1c..4c3ccc2 100644
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.java
+++ b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.java
@@ -1,4 +1,4 @@
-// $ANTLR 3.2 Aug 13, 2010 14:19:31 SimpleCTP.g 2010-08-13 14:29:19
+// $ANTLR 3.2 Aug 13, 2010 19:41:25 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g 2010-08-13 19:42:13

import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;import java.util.Stack;
@@ -48,18 +48,18 @@ public class SimpleCTP extends TreeParser {


public String[] getTokenNames() { return SimpleCTP.tokenNames; }
-    public String getGrammarFileName() { return "SimpleCTP.g"; }
+    public String getGrammarFileName() { return "/usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g"; }



// $ANTLR start "program"
-    // SimpleCTP.g:8:1: program : ( declaration )+ ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:8:1: program : ( declaration )+ ;
public final void program() throws RecognitionException {
try {
-            // SimpleCTP.g:9:5: ( ( declaration )+ )
-            // SimpleCTP.g:9:9: ( declaration )+
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:9:5: ( ( declaration )+ )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:9:9: ( declaration )+
{
-            // SimpleCTP.g:9:9: ( declaration )+
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:9:9: ( declaration )+
int cnt1=0;
loop1:
do {
@@ -73,7 +73,7 @@ public class SimpleCTP extends TreeParser {

switch (alt1) {
case 1 :
-            	    // SimpleCTP.g:9:9: declaration
+            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:9:9: declaration
{
pushFollow(FOLLOW_declaration_in_program43);
declaration();
@@ -109,10 +109,10 @@ public class SimpleCTP extends TreeParser {


// $ANTLR start "declaration"
-    // SimpleCTP.g:12:1: declaration : ( variable | ^( FUNC_DECL functionHeader ) | ^( FUNC_DEF functionHeader block ) );
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:12:1: declaration : ( variable | ^( FUNC_DECL functionHeader ) | ^( FUNC_DEF functionHeader block ) );
public final void declaration() throws RecognitionException {
try {
-            // SimpleCTP.g:13:5: ( variable | ^( FUNC_DECL functionHeader ) | ^( FUNC_DEF functionHeader block ) )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:13:5: ( variable | ^( FUNC_DECL functionHeader ) | ^( FUNC_DEF functionHeader block ) )
int alt2=3;
switch ( input.LA(1) ) {
case VAR_DEF:
@@ -139,7 +139,7 @@ public class SimpleCTP extends TreeParser {

switch (alt2) {
case 1 :
-                    // SimpleCTP.g:13:9: variable
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:13:9: variable
{
pushFollow(FOLLOW_variable_in_declaration63);
variable();
@@ -150,7 +150,7 @@ public class SimpleCTP extends TreeParser {
}
break;
case 2 :
-                    // SimpleCTP.g:14:9: ^( FUNC_DECL functionHeader )
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:14:9: ^( FUNC_DECL functionHeader )
{
match(input,FUNC_DECL,FOLLOW_FUNC_DECL_in_declaration74);

@@ -166,7 +166,7 @@ public class SimpleCTP extends TreeParser {
}
break;
case 3 :
-                    // SimpleCTP.g:15:9: ^( FUNC_DEF functionHeader block )
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:15:9: ^( FUNC_DEF functionHeader block )
{
match(input,FUNC_DEF,FOLLOW_FUNC_DEF_in_declaration88);

@@ -201,11 +201,11 @@ public class SimpleCTP extends TreeParser {


// $ANTLR start "variable"
-    // SimpleCTP.g:18:1: variable : ^( VAR_DEF type declarator ) ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:18:1: variable : ^( VAR_DEF type declarator ) ;
public final void variable() throws RecognitionException {
try {
-            // SimpleCTP.g:19:5: ( ^( VAR_DEF type declarator ) )
-            // SimpleCTP.g:19:9: ^( VAR_DEF type declarator )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:19:5: ( ^( VAR_DEF type declarator ) )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:19:9: ^( VAR_DEF type declarator )
{
match(input,VAR_DEF,FOLLOW_VAR_DEF_in_variable113);

@@ -238,11 +238,11 @@ public class SimpleCTP extends TreeParser {


// $ANTLR start "declarator"
-    // SimpleCTP.g:22:1: declarator : ID ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:22:1: declarator : ID ;
public final void declarator() throws RecognitionException {
try {
-            // SimpleCTP.g:23:5: ( ID )
-            // SimpleCTP.g:23:9: ID
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:23:5: ( ID )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:23:9: ID
{
match(input,ID,FOLLOW_ID_in_declarator137);

@@ -261,11 +261,11 @@ public class SimpleCTP extends TreeParser {


// $ANTLR start "functionHeader"
-    // SimpleCTP.g:26:1: functionHeader : ^( FUNC_HDR type ID ( formalParameter )+ ) ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:26:1: functionHeader : ^( FUNC_HDR type ID ( formalParameter )+ ) ;
public final void functionHeader() throws RecognitionException {
try {
-            // SimpleCTP.g:27:5: ( ^( FUNC_HDR type ID ( formalParameter )+ ) )
-            // SimpleCTP.g:27:9: ^( FUNC_HDR type ID ( formalParameter )+ )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:27:5: ( ^( FUNC_HDR type ID ( formalParameter )+ ) )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:27:9: ^( FUNC_HDR type ID ( formalParameter )+ )
{
match(input,FUNC_HDR,FOLLOW_FUNC_HDR_in_functionHeader158);

@@ -276,7 +276,7 @@ public class SimpleCTP extends TreeParser {
state._fsp--;

match(input,ID,FOLLOW_ID_in_functionHeader162);
-            // SimpleCTP.g:27:28: ( formalParameter )+
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:27:28: ( formalParameter )+
int cnt3=0;
loop3:
do {
@@ -290,7 +290,7 @@ public class SimpleCTP extends TreeParser {

switch (alt3) {
case 1 :
-            	    // SimpleCTP.g:27:28: formalParameter
+            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:27:28: formalParameter
{
pushFollow(FOLLOW_formalParameter_in_functionHeader164);
formalParameter();
@@ -328,11 +328,11 @@ public class SimpleCTP extends TreeParser {


// $ANTLR start "formalParameter"
-    // SimpleCTP.g:30:1: formalParameter : ^( ARG_DEF type declarator ) ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:30:1: formalParameter : ^( ARG_DEF type declarator ) ;
public final void formalParameter() throws RecognitionException {
try {
-            // SimpleCTP.g:31:5: ( ^( ARG_DEF type declarator ) )
-            // SimpleCTP.g:31:9: ^( ARG_DEF type declarator )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:31:5: ( ^( ARG_DEF type declarator ) )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:31:9: ^( ARG_DEF type declarator )
{
match(input,ARG_DEF,FOLLOW_ARG_DEF_in_formalParameter186);

@@ -365,11 +365,11 @@ public class SimpleCTP extends TreeParser {


// $ANTLR start "type"
-    // SimpleCTP.g:34:1: type : ( 'int' | 'char' | 'void' | ID );
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:34:1: type : ( 'int' | 'char' | 'void' | ID );
public final void type() throws RecognitionException {
try {
-            // SimpleCTP.g:35:5: ( 'int' | 'char' | 'void' | ID )
-            // SimpleCTP.g:
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:35:5: ( 'int' | 'char' | 'void' | ID )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:
{
if ( input.LA(1)==ID||(input.LA(1)>=INT_TYPE && input.LA(1)<=VOID) ) {
input.consume();
@@ -396,17 +396,17 @@ public class SimpleCTP extends TreeParser {


// $ANTLR start "block"
-    // SimpleCTP.g:41:1: block : ^( BLOCK ( variable )* ( stat )* ) ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:41:1: block : ^( BLOCK ( variable )* ( stat )* ) ;
public final void block() throws RecognitionException {
try {
-            // SimpleCTP.g:42:5: ( ^( BLOCK ( variable )* ( stat )* ) )
-            // SimpleCTP.g:42:9: ^( BLOCK ( variable )* ( stat )* )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:42:5: ( ^( BLOCK ( variable )* ( stat )* ) )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:42:9: ^( BLOCK ( variable )* ( stat )* )
{
match(input,BLOCK,FOLLOW_BLOCK_in_block273);

if ( input.LA(1)==Token.DOWN ) {
match(input, Token.DOWN, null);
-                // SimpleCTP.g:42:17: ( variable )*
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:42:17: ( variable )*
loop4:
do {
int alt4=2;
@@ -419,7 +419,7 @@ public class SimpleCTP extends TreeParser {

switch (alt4) {
case 1 :
-                	    // SimpleCTP.g:42:17: variable
+                	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:42:17: variable
{
pushFollow(FOLLOW_variable_in_block275);
variable();
@@ -435,7 +435,7 @@ public class SimpleCTP extends TreeParser {
}
} while (true);

-                // SimpleCTP.g:42:27: ( stat )*
+                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:42:27: ( stat )*
loop5:
do {
int alt5=2;
@@ -448,7 +448,7 @@ public class SimpleCTP extends TreeParser {

switch (alt5) {
case 1 :
-                	    // SimpleCTP.g:42:27: stat
+                	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:42:27: stat
{
pushFollow(FOLLOW_stat_in_block278);
stat();
@@ -483,10 +483,10 @@ public class SimpleCTP extends TreeParser {


// $ANTLR start "stat"
-    // SimpleCTP.g:45:1: stat : ( forStat | expr | block );
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:45:1: stat : ( forStat | expr | block );
public final void stat() throws RecognitionException {
try {
-            // SimpleCTP.g:45:5: ( forStat | expr | block )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:45:5: ( forStat | expr | block )
int alt6=3;
switch ( input.LA(1) ) {
case FOR:
@@ -518,7 +518,7 @@ public class SimpleCTP extends TreeParser {

switch (alt6) {
case 1 :
-                    // SimpleCTP.g:45:7: forStat
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:45:7: forStat
{
pushFollow(FOLLOW_forStat_in_stat292);
forStat();
@@ -529,7 +529,7 @@ public class SimpleCTP extends TreeParser {
}
break;
case 2 :
-                    // SimpleCTP.g:46:7: expr
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:46:7: expr
{
pushFollow(FOLLOW_expr_in_stat300);
expr();
@@ -540,7 +540,7 @@ public class SimpleCTP extends TreeParser {
}
break;
case 3 :
-                    // SimpleCTP.g:47:7: block
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:47:7: block
{
pushFollow(FOLLOW_block_in_stat308);
block();
@@ -565,11 +565,11 @@ public class SimpleCTP extends TreeParser {


// $ANTLR start "forStat"
-    // SimpleCTP.g:50:1: forStat : ^( 'for' expr expr expr block ) ;
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:50:1: forStat : ^( 'for' expr expr expr block ) ;
public final void forStat() throws RecognitionException {
try {
-            // SimpleCTP.g:51:5: ( ^( 'for' expr expr expr block ) )
-            // SimpleCTP.g:51:9: ^( 'for' expr expr expr block )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:51:5: ( ^( 'for' expr expr expr block ) )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:51:9: ^( 'for' expr expr expr block )
{
match(input,FOR,FOLLOW_FOR_in_forStat328);

@@ -614,7 +614,7 @@ public class SimpleCTP extends TreeParser {
};

// $ANTLR start "expr"
-    // SimpleCTP.g:54:1: expr : ( ^( EQEQ expr expr ) | ^( LT expr expr ) | ^( PLUS expr expr ) | ^( EQ ID e= expr ) | atom );
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:54:1: expr : ( ^( EQEQ expr expr ) | ^( LT expr expr ) | ^( PLUS expr expr ) | ^( EQ ID e= expr ) | atom );
public final SimpleCTP.expr_return expr() throws RecognitionException {
SimpleCTP.expr_return retval = new SimpleCTP.expr_return();
retval.start = input.LT(1);
@@ -624,7 +624,7 @@ public class SimpleCTP extends TreeParser {


try {
-            // SimpleCTP.g:54:5: ( ^( EQEQ expr expr ) | ^( LT expr expr ) | ^( PLUS expr expr ) | ^( EQ ID e= expr ) | atom )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:54:5: ( ^( EQEQ expr expr ) | ^( LT expr expr ) | ^( PLUS expr expr ) | ^( EQ ID e= expr ) | atom )
int alt7=5;
switch ( input.LA(1) ) {
case EQEQ:
@@ -662,7 +662,7 @@ public class SimpleCTP extends TreeParser {

switch (alt7) {
case 1 :
-                    // SimpleCTP.g:54:9: ^( EQEQ expr expr )
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:54:9: ^( EQEQ expr expr )
{
match(input,EQEQ,FOLLOW_EQEQ_in_expr352);

@@ -683,7 +683,7 @@ public class SimpleCTP extends TreeParser {
}
break;
case 2 :
-                    // SimpleCTP.g:55:9: ^( LT expr expr )
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:55:9: ^( LT expr expr )
{
match(input,LT,FOLLOW_LT_in_expr368);

@@ -704,7 +704,7 @@ public class SimpleCTP extends TreeParser {
}
break;
case 3 :
-                    // SimpleCTP.g:56:9: ^( PLUS expr expr )
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:56:9: ^( PLUS expr expr )
{
match(input,PLUS,FOLLOW_PLUS_in_expr384);

@@ -725,7 +725,7 @@ public class SimpleCTP extends TreeParser {
}
break;
case 4 :
-                    // SimpleCTP.g:57:9: ^( EQ ID e= expr )
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:57:9: ^( EQ ID e= expr )
{
match(input,EQ,FOLLOW_EQ_in_expr400);

@@ -745,7 +745,7 @@ public class SimpleCTP extends TreeParser {
}
break;
case 5 :
-                    // SimpleCTP.g:58:9: atom
+                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:58:9: atom
{
pushFollow(FOLLOW_atom_in_expr419);
atom();
@@ -770,11 +770,11 @@ public class SimpleCTP extends TreeParser {


// $ANTLR start "atom"
-    // SimpleCTP.g:61:1: atom : ( ID | INT );
+    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:61:1: atom : ( ID | INT );
public final void atom() throws RecognitionException {
try {
-            // SimpleCTP.g:62:5: ( ID | INT )
-            // SimpleCTP.g:
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:62:5: ( ID | INT )
+            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:
{
if ( input.LA(1)==ID||input.LA(1)==INT ) {
input.consume();
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.m b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.m
index a9100eb..de4a62c 100644
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.m
+++ b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.m
@@ -1,8 +1,8 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : SimpleCTP.g
- *     -                            On : 2011-05-06 15:09:28
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g
+ *     -                            On : 2012-02-16 17:41:10
*     -           for the tree parser : SimpleCTPTreeParser
*
* Editing it, at least manually, is not wise.
@@ -11,7 +11,7 @@
*
*
*/
-// $ANTLR ${project.version} ${buildNumber} SimpleCTP.g 2011-05-06 15:09:28
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g 2012-02-16 17:41:10


/* -----------------------------------------
@@ -113,48 +113,45 @@ static ANTLRBitSet *FOLLOW_atom_in_expr429;
static const unsigned long long FOLLOW_atom_in_expr429_data[] = { 0x0000000000000002LL};


-#pragma mark Dynamic Global Scopes
+#pragma mark Dynamic Global globalAttributeScopeImplementation
@implementation Symbols_Scope  /* globalAttributeScopeImplementation */
/* start of synthesize -- OBJC-Line 1750 */
-
-@synthesize tree;
+@synthesize tree;

+ (Symbols_Scope *)newSymbols_Scope
{
-    return [[[Symbols_Scope alloc] init] retain];
+return [[Symbols_Scope alloc] init];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* start of iterate get and set functions */
-
- (ANTLRCommonTree *)gettree { return( tree ); }
-
- (void)settree:(ANTLRCommonTree *)aVal { tree = aVal; }

/* End of iterate get and set functions */
-
@end /* end of Symbols_Scope implementation */


-#pragma mark Dynamic Rule Scopes

-#pragma mark Rule Return Scopes start
-@implementation SimpleCTP_expr_return /* returnScope */
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation
+
+#pragma mark Rule Return Scopes returnScopeImplementation
+@implementation SimpleCTP_expr_return /* returnScopeImplementation */
/* start of synthesize -- OBJC-Line 1837 */
+ (SimpleCTP_expr_return *)newSimpleCTP_expr_return
{
-    return [[[SimpleCTP_expr_return alloc] init] retain];
+return [[[SimpleCTP_expr_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}


@@ -162,96 +159,89 @@ static const unsigned long long FOLLOW_atom_in_expr429_data[] = { 0x000000000000
@end /* end of returnScope implementation */


-//#pragma mark Rule return scopes start
-//
-
-#pragma mark Rule return scopes start

@implementation SimpleCTP  // line 637

/* ObjC start of ruleAttributeScope */
-#pragma mark Dynamic Rule Scopes
+#pragma mark Dynamic Rule Scopes ruleAttributeScope
/* ObjC end of ruleAttributeScope */
-#pragma mark global Attribute Scopes
+#pragma mark global Attribute Scopes globalAttributeScope
/* ObjC start globalAttributeScope */
static _stack;
-
+
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */
-/* ObjC end actions.(actionScope).synthesize */
/* ObjC start synthesize() */
-/* ObjC end synthesize() */

+ (void) initialize
{
#pragma mark Bitsets
-    FOLLOW_declaration_in_program56 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declaration_in_program56_data Count:(NSUInteger)1] retain];
-    FOLLOW_variable_in_declaration76 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_declaration76_data Count:(NSUInteger)1] retain];
-    FOLLOW_FUNC_DECL_in_declaration87 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_FUNC_DECL_in_declaration87_data Count:(NSUInteger)1] retain];
-    FOLLOW_functionHeader_in_declaration89 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration89_data Count:(NSUInteger)1] retain];
-    FOLLOW_FUNC_DEF_in_declaration101 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_FUNC_DEF_in_declaration101_data Count:(NSUInteger)1] retain];
-    FOLLOW_functionHeader_in_declaration103 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration103_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_declaration105 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_declaration105_data Count:(NSUInteger)1] retain];
-    FOLLOW_VAR_DEF_in_variable126 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_VAR_DEF_in_variable126_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_variable128 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_variable128_data Count:(NSUInteger)1] retain];
-    FOLLOW_declarator_in_variable130 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_variable130_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_ID_in_declarator150 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_declarator150_data Count:(NSUInteger)1] retain];
-    FOLLOW_FUNC_HDR_in_functionHeader171 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_FUNC_HDR_in_functionHeader171_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_functionHeader173 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_functionHeader173_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_ID_in_functionHeader175 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_functionHeader175_data Count:(NSUInteger)1] retain];
-    FOLLOW_formalParameter_in_functionHeader177 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader177_data Count:(NSUInteger)1] retain];
-    FOLLOW_ARG_DEF_in_formalParameter199 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ARG_DEF_in_formalParameter199_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_formalParameter201 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_formalParameter201_data Count:(NSUInteger)1] retain];
-    FOLLOW_declarator_in_formalParameter203 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_formalParameter203_data Count:(NSUInteger)1] retain];
-    FOLLOW_BLOCK_in_block283 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_BLOCK_in_block283_data Count:(NSUInteger)1] retain];
-    FOLLOW_variable_in_block285 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_block285_data Count:(NSUInteger)1] retain];
-    FOLLOW_stat_in_block288 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_stat_in_block288_data Count:(NSUInteger)1] retain];
-    FOLLOW_forStat_in_stat302 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_forStat_in_stat302_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_stat310 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_stat310_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_stat318 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_stat318_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_FOR_in_forStat338 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_FOR_in_forStat338_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_forStat340 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat340_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_forStat342 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat342_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_forStat344 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat344_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_forStat346 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_forStat346_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_EQEQ_in_expr362 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_EQEQ_in_expr362_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_expr364 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr364_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_expr366 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr366_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_LT_in_expr378 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_LT_in_expr378_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_expr380 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr380_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_expr382 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr382_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_PLUS_in_expr394 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_PLUS_in_expr394_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_expr396 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr396_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_expr398 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr398_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_EQ_in_expr410 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_EQ_in_expr410_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_ID_in_expr412 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_expr412_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_expr416 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr416_data Count:(NSUInteger)1] retain];
-    FOLLOW_atom_in_expr429 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_expr429_data Count:(NSUInteger)1] retain];
-
-    [ANTLRBaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
+    FOLLOW_declaration_in_program56 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_declaration_in_program56_data Count:(NSUInteger)1] retain];
+    FOLLOW_variable_in_declaration76 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_declaration76_data Count:(NSUInteger)1] retain];
+    FOLLOW_FUNC_DECL_in_declaration87 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_FUNC_DECL_in_declaration87_data Count:(NSUInteger)1] retain];
+    FOLLOW_functionHeader_in_declaration89 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration89_data Count:(NSUInteger)1] retain];
+    FOLLOW_FUNC_DEF_in_declaration101 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_FUNC_DEF_in_declaration101_data Count:(NSUInteger)1] retain];
+    FOLLOW_functionHeader_in_declaration103 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration103_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_declaration105 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_declaration105_data Count:(NSUInteger)1] retain];
+    FOLLOW_VAR_DEF_in_variable126 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_VAR_DEF_in_variable126_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_variable128 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_variable128_data Count:(NSUInteger)1] retain];
+    FOLLOW_declarator_in_variable130 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_variable130_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_ID_in_declarator150 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_declarator150_data Count:(NSUInteger)1] retain];
+    FOLLOW_FUNC_HDR_in_functionHeader171 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_FUNC_HDR_in_functionHeader171_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_functionHeader173 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_functionHeader173_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_ID_in_functionHeader175 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_functionHeader175_data Count:(NSUInteger)1] retain];
+    FOLLOW_formalParameter_in_functionHeader177 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader177_data Count:(NSUInteger)1] retain];
+    FOLLOW_ARG_DEF_in_formalParameter199 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ARG_DEF_in_formalParameter199_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_formalParameter201 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_formalParameter201_data Count:(NSUInteger)1] retain];
+    FOLLOW_declarator_in_formalParameter203 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_formalParameter203_data Count:(NSUInteger)1] retain];
+    FOLLOW_BLOCK_in_block283 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_BLOCK_in_block283_data Count:(NSUInteger)1] retain];
+    FOLLOW_variable_in_block285 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_block285_data Count:(NSUInteger)1] retain];
+    FOLLOW_stat_in_block288 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_stat_in_block288_data Count:(NSUInteger)1] retain];
+    FOLLOW_forStat_in_stat302 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_forStat_in_stat302_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_stat310 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_stat310_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_stat318 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_stat318_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_FOR_in_forStat338 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_FOR_in_forStat338_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_forStat340 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat340_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_forStat342 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat342_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_forStat344 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat344_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_forStat346 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_forStat346_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_EQEQ_in_expr362 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_EQEQ_in_expr362_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_expr364 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr364_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_expr366 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr366_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_LT_in_expr378 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_LT_in_expr378_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_expr380 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr380_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_expr382 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr382_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_PLUS_in_expr394 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_PLUS_in_expr394_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_expr396 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr396_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_expr398 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr398_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_EQ_in_expr410 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_EQ_in_expr410_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_ID_in_expr412 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_expr412_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_expr416 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr416_data Count:(NSUInteger)1] retain];
+    FOLLOW_atom_in_expr429 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_expr429_data Count:(NSUInteger)1] retain];
+
+    [BaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
@"ARG_DEF", @"BLOCK", @"FUNC_DECL", @"FUNC_DEF", @"FUNC_HDR", @"K_CHAR",
@"K_COMMA", @"K_EQ", @"K_EQEQ", @"K_FOR", @"K_ID", @"K_INT", @"K_INT_TYPE",
@"K_LCURLY", @"K_LCURVE", @"K_LT", @"K_PLUS", @"K_RCURLY", @"K_RCURVE",
@"K_SEMICOLON", @"K_VOID", @"VAR_DEF", @"WS", nil] retain]];
-    [ANTLRBaseRecognizer setGrammarFileName:@"SimpleCTP.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g"];
}

-+ (SimpleCTP *)newSimpleCTP:(id<ANTLRTreeNodeStream>)aStream
++ (SimpleCTP *)newSimpleCTP:(id<TreeNodeStream>)aStream
{
return [[SimpleCTP alloc] initWithStream:aStream];
-
-
}

-- (id) initWithStream:(id<ANTLRTreeNodeStream>)aStream
+- (id) initWithStream:(id<TreeNodeStream>)aStream
{
-    self = [super initWithStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:12+1] retain]];
+    self = [super initWithStream:aStream State:[[RecognizerSharedState newRecognizerSharedStateWithRuleLen:12+1] retain]];
if ( self != nil ) {
-
-
/* globalAttributeScopeInit */
+
Symbols_scope = [Symbols_Scope newSymbols_Scope];
-        Symbols_stack = [ANTLRSymbolStack newANTLRSymbolStackWithLen:30];
+
+        Symbols_stack = [SymbolStack newSymbolStackWithLen:30];
+
/* start of actions-actionScope-init */
/* start of init */
}
@@ -261,11 +251,10 @@ static _stack;
- (void) dealloc
{
[Symbols_stack release];
+
[super dealloc];
}

-/* ObjC start members */
-/* ObjC end members */
/* ObjC start actions.(actionScope).methods */
/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
@@ -273,18 +262,23 @@ static _stack;
/* ObjC start rules */
/*
* $ANTLR start program
- * SimpleCTP.g:13:1: program : ( declaration )+ ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:13:1: program : ( declaration )+ ;
*/
- (void) program
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleCTP.g:14:5: ( ( declaration )+ ) // ruleBlockSingleAlt
-        // SimpleCTP.g:14:9: ( declaration )+ // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:14:5: ( ( declaration )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:14:9: ( declaration )+ // alt
{
-        // SimpleCTP.g:14:9: ( declaration )+ // positiveClosureBlock
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:14:9: ( declaration )+ // positiveClosureBlock
NSInteger cnt1 = 0;
do {
NSInteger alt1 = 2;
@@ -296,8 +290,9 @@ static _stack;

switch (alt1) {
case 1 : ;
-                    // SimpleCTP.g:14:9: declaration // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:14:9: declaration // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_declaration_in_program56];
[self declaration];
@@ -305,34 +300,34 @@ static _stack;
[self popFollow];


-
+
}
break;

default :
if ( cnt1 >= 1 )
goto loop1;
-                    ANTLREarlyExitException *eee =
-                        [ANTLREarlyExitException newException:input decisionNumber:1];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:1];
@throw eee;
}
cnt1++;
} while (YES);
loop1: ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -341,15 +336,19 @@ static _stack;

/*
* $ANTLR start declaration
- * SimpleCTP.g:17:1: declaration : ( variable | ^( FUNC_DECL functionHeader ) | ^( FUNC_DEF functionHeader block ) );
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:17:1: declaration : ( variable | ^( FUNC_DECL functionHeader ) | ^( FUNC_DEF functionHeader block ) );
*/
- (void) declaration
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleCTP.g:18:5: ( variable | ^( FUNC_DECL functionHeader ) | ^( FUNC_DEF functionHeader block ) ) //ruleblock
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:18:5: ( variable | ^( FUNC_DECL functionHeader ) | ^( FUNC_DEF functionHeader block ) ) //ruleblock
NSInteger alt2=3;
unichar charLA2 = [input LA:1];
switch (charLA2) {
@@ -370,7 +369,7 @@ static _stack;
break;

default: ;
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:2 state:0 stream:input];
+            NoViableAltException *nvae = [NoViableAltException newException:2 state:0 stream:input];
nvae.c = charLA2;
@throw nvae;

@@ -378,8 +377,9 @@ static _stack;

switch (alt2) {
case 1 : ;
-                // SimpleCTP.g:18:9: variable // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:18:9: variable // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_variable_in_declaration76];
[self variable];
@@ -387,15 +387,18 @@ static _stack;
[self popFollow];


-
+
}
break;
case 2 : ;
-                // SimpleCTP.g:19:9: ^( FUNC_DECL functionHeader ) // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:19:9: ^( FUNC_DECL functionHeader ) // alt
{
-                [self match:input TokenType:FUNC_DECL Follow:FOLLOW_FUNC_DECL_in_declaration87];

+
+                [self match:input TokenType:FUNC_DECL Follow:FOLLOW_FUNC_DECL_in_declaration87];
+
[self match:input TokenType:DOWN Follow:nil];
+
/* ruleRef */
[self pushFollow:FOLLOW_functionHeader_in_declaration89];
[self functionHeader];
@@ -403,18 +406,21 @@ static _stack;
[self popFollow];


-
+
[self match:input TokenType:UP Follow:nil];

-
+
}
break;
case 3 : ;
-                // SimpleCTP.g:20:9: ^( FUNC_DEF functionHeader block ) // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:20:9: ^( FUNC_DEF functionHeader block ) // alt
{
-                [self match:input TokenType:FUNC_DEF Follow:FOLLOW_FUNC_DEF_in_declaration101];

+
+                [self match:input TokenType:FUNC_DEF Follow:FOLLOW_FUNC_DEF_in_declaration101];
+
[self match:input TokenType:DOWN Follow:nil];
+
/* ruleRef */
[self pushFollow:FOLLOW_functionHeader_in_declaration103];
[self functionHeader];
@@ -422,7 +428,7 @@ static _stack;
[self popFollow];


-
+
/* ruleRef */
[self pushFollow:FOLLOW_block_in_declaration105];
[self block];
@@ -430,24 +436,24 @@ static _stack;
[self popFollow];


-
+
[self match:input TokenType:UP Follow:nil];

-
+
}
break;

}
-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -456,20 +462,27 @@ static _stack;

/*
* $ANTLR start variable
- * SimpleCTP.g:23:1: variable : ^( VAR_DEF type declarator ) ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:23:1: variable : ^( VAR_DEF type declarator ) ;
*/
- (void) variable
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleCTP.g:24:5: ( ^( VAR_DEF type declarator ) ) // ruleBlockSingleAlt
-        // SimpleCTP.g:24:9: ^( VAR_DEF type declarator ) // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:24:5: ( ^( VAR_DEF type declarator ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:24:9: ^( VAR_DEF type declarator ) // alt
{
-        [self match:input TokenType:VAR_DEF Follow:FOLLOW_VAR_DEF_in_variable126];

+
+        [self match:input TokenType:VAR_DEF Follow:FOLLOW_VAR_DEF_in_variable126];
+
[self match:input TokenType:DOWN Follow:nil];
+
/* ruleRef */
[self pushFollow:FOLLOW_type_in_variable128];
[self type];
@@ -477,7 +490,7 @@ static _stack;
[self popFollow];


-
+
/* ruleRef */
[self pushFollow:FOLLOW_declarator_in_variable130];
[self declarator];
@@ -485,22 +498,22 @@ static _stack;
[self popFollow];


-
+
[self match:input TokenType:UP Follow:nil];

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -509,31 +522,36 @@ static _stack;

/*
* $ANTLR start declarator
- * SimpleCTP.g:27:1: declarator : K_ID ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:27:1: declarator : K_ID ;
*/
- (void) declarator
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleCTP.g:28:5: ( K_ID ) // ruleBlockSingleAlt
-        // SimpleCTP.g:28:9: K_ID // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:28:5: ( K_ID ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:28:9: K_ID // alt
{
-        [self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_declarator150];

+        [self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_declarator150];
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -542,20 +560,27 @@ static _stack;

/*
* $ANTLR start functionHeader
- * SimpleCTP.g:31:1: functionHeader : ^( FUNC_HDR type K_ID ( formalParameter )+ ) ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:31:1: functionHeader : ^( FUNC_HDR type K_ID ( formalParameter )+ ) ;
*/
- (void) functionHeader
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleCTP.g:32:5: ( ^( FUNC_HDR type K_ID ( formalParameter )+ ) ) // ruleBlockSingleAlt
-        // SimpleCTP.g:32:9: ^( FUNC_HDR type K_ID ( formalParameter )+ ) // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:32:5: ( ^( FUNC_HDR type K_ID ( formalParameter )+ ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:32:9: ^( FUNC_HDR type K_ID ( formalParameter )+ ) // alt
{
-        [self match:input TokenType:FUNC_HDR Follow:FOLLOW_FUNC_HDR_in_functionHeader171];

+
+        [self match:input TokenType:FUNC_HDR Follow:FOLLOW_FUNC_HDR_in_functionHeader171];
+
[self match:input TokenType:DOWN Follow:nil];
+
/* ruleRef */
[self pushFollow:FOLLOW_type_in_functionHeader173];
[self type];
@@ -563,10 +588,10 @@ static _stack;
[self popFollow];


-
+
[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_functionHeader175];
-
-            // SimpleCTP.g:32:30: ( formalParameter )+ // positiveClosureBlock
+
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:32:30: ( formalParameter )+ // positiveClosureBlock
NSInteger cnt3 = 0;
do {
NSInteger alt3 = 2;
@@ -578,8 +603,9 @@ static _stack;

switch (alt3) {
case 1 : ;
-                        // SimpleCTP.g:32:30: formalParameter // alt
+                        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:32:30: formalParameter // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_formalParameter_in_functionHeader177];
[self formalParameter];
@@ -587,37 +613,37 @@ static _stack;
[self popFollow];


-
+
}
break;

default :
if ( cnt3 >= 1 )
goto loop3;
-                        ANTLREarlyExitException *eee =
-                            [ANTLREarlyExitException newException:input decisionNumber:3];
+                        EarlyExitException *eee =
+                            [EarlyExitException newException:input decisionNumber:3];
@throw eee;
}
cnt3++;
} while (YES);
loop3: ;

-
+
[self match:input TokenType:UP Follow:nil];

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -626,20 +652,27 @@ static _stack;

/*
* $ANTLR start formalParameter
- * SimpleCTP.g:35:1: formalParameter : ^( ARG_DEF type declarator ) ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:35:1: formalParameter : ^( ARG_DEF type declarator ) ;
*/
- (void) formalParameter
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleCTP.g:36:5: ( ^( ARG_DEF type declarator ) ) // ruleBlockSingleAlt
-        // SimpleCTP.g:36:9: ^( ARG_DEF type declarator ) // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:36:5: ( ^( ARG_DEF type declarator ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:36:9: ^( ARG_DEF type declarator ) // alt
{
-        [self match:input TokenType:ARG_DEF Follow:FOLLOW_ARG_DEF_in_formalParameter199];

+
+        [self match:input TokenType:ARG_DEF Follow:FOLLOW_ARG_DEF_in_formalParameter199];
+
[self match:input TokenType:DOWN Follow:nil];
+
/* ruleRef */
[self pushFollow:FOLLOW_type_in_formalParameter201];
[self type];
@@ -647,7 +680,7 @@ static _stack;
[self popFollow];


-
+
/* ruleRef */
[self pushFollow:FOLLOW_declarator_in_formalParameter203];
[self declarator];
@@ -655,22 +688,22 @@ static _stack;
[self popFollow];


-
+
[self match:input TokenType:UP Follow:nil];

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -679,38 +712,43 @@ static _stack;

/*
* $ANTLR start type
- * SimpleCTP.g:39:1: type : ( K_INT_TYPE | K_CHAR | K_VOID | K_ID );
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:39:1: type : ( K_INT_TYPE | K_CHAR | K_VOID | K_ID );
*/
- (void) type
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleCTP.g:40:5: ( K_INT_TYPE | K_CHAR | K_VOID | K_ID ) // ruleBlockSingleAlt
-        // SimpleCTP.g: // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:40:5: ( K_INT_TYPE | K_CHAR | K_VOID | K_ID ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g: // alt
{
+
if ([input LA:1] == K_CHAR||[input LA:1] == K_ID||[input LA:1] == K_INT_TYPE||[input LA:1] == K_VOID) {
[input consume];
[state setIsErrorRecovery:NO];
} else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
@throw mse;
}

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -719,21 +757,29 @@ static _stack;

/*
* $ANTLR start block
- * SimpleCTP.g:46:1: block : ^( BLOCK ( variable )* ( stat )* ) ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:46:1: block : ^( BLOCK ( variable )* ( stat )* ) ;
*/
- (void) block
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleCTP.g:47:5: ( ^( BLOCK ( variable )* ( stat )* ) ) // ruleBlockSingleAlt
-        // SimpleCTP.g:47:9: ^( BLOCK ( variable )* ( stat )* ) // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:47:5: ( ^( BLOCK ( variable )* ( stat )* ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:47:9: ^( BLOCK ( variable )* ( stat )* ) // alt
{
-        [self match:input TokenType:BLOCK Follow:FOLLOW_BLOCK_in_block283];

+
+        [self match:input TokenType:BLOCK Follow:FOLLOW_BLOCK_in_block283];
+
if ( [input LA:1] == DOWN ) {
[self match:input TokenType:DOWN Follow:nil];
+
+
do {
NSInteger alt4=2;
NSInteger LA4_0 = [input LA:1];
@@ -744,8 +790,9 @@ static _stack;

switch (alt4) {
case 1 : ;
-                        // SimpleCTP.g:47:17: variable // alt
+                        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:47:17: variable // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_variable_in_block285];
[self variable];
@@ -753,7 +800,7 @@ static _stack;
[self popFollow];


-
+
}
break;

@@ -763,6 +810,7 @@ static _stack;
} while (YES);
loop4: ;

+

do {
NSInteger alt5=2;
@@ -774,8 +822,9 @@ static _stack;

switch (alt5) {
case 1 : ;
-                        // SimpleCTP.g:47:27: stat // alt
+                        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:47:27: stat // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_stat_in_block288];
[self stat];
@@ -783,7 +832,7 @@ static _stack;
[self popFollow];


-
+
}
break;

@@ -793,23 +842,23 @@ static _stack;
} while (YES);
loop5: ;

-
+
[self match:input TokenType:UP Follow:nil];
}

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -818,15 +867,19 @@ static _stack;

/*
* $ANTLR start stat
- * SimpleCTP.g:50:1: stat : ( forStat | expr | block );
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:50:1: stat : ( forStat | expr | block );
*/
- (void) stat
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleCTP.g:50:5: ( forStat | expr | block ) //ruleblock
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:50:5: ( forStat | expr | block ) //ruleblock
NSInteger alt6=3;
unichar charLA6 = [input LA:1];
switch (charLA6) {
@@ -852,7 +905,7 @@ static _stack;
break;

default: ;
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:6 state:0 stream:input];
+            NoViableAltException *nvae = [NoViableAltException newException:6 state:0 stream:input];
nvae.c = charLA6;
@throw nvae;

@@ -860,8 +913,9 @@ static _stack;

switch (alt6) {
case 1 : ;
-                // SimpleCTP.g:50:7: forStat // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:50:7: forStat // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_forStat_in_stat302];
[self forStat];
@@ -869,12 +923,13 @@ static _stack;
[self popFollow];


-
+
}
break;
case 2 : ;
-                // SimpleCTP.g:51:7: expr // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:51:7: expr // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_stat310];
[self expr];
@@ -882,12 +937,13 @@ static _stack;
[self popFollow];


-
+
}
break;
case 3 : ;
-                // SimpleCTP.g:52:7: block // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:52:7: block // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_block_in_stat318];
[self block];
@@ -895,21 +951,21 @@ static _stack;
[self popFollow];


-
+
}
break;

}
-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -918,20 +974,27 @@ static _stack;

/*
* $ANTLR start forStat
- * SimpleCTP.g:55:1: forStat : ^( K_FOR expr expr expr block ) ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:55:1: forStat : ^( K_FOR expr expr expr block ) ;
*/
- (void) forStat
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleCTP.g:56:5: ( ^( K_FOR expr expr expr block ) ) // ruleBlockSingleAlt
-        // SimpleCTP.g:56:9: ^( K_FOR expr expr expr block ) // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:56:5: ( ^( K_FOR expr expr expr block ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:56:9: ^( K_FOR expr expr expr block ) // alt
{
-        [self match:input TokenType:K_FOR Follow:FOLLOW_K_FOR_in_forStat338];

+
+        [self match:input TokenType:K_FOR Follow:FOLLOW_K_FOR_in_forStat338];
+
[self match:input TokenType:DOWN Follow:nil];
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_forStat340];
[self expr];
@@ -939,7 +1002,7 @@ static _stack;
[self popFollow];


-
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_forStat342];
[self expr];
@@ -947,7 +1010,7 @@ static _stack;
[self popFollow];


-
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_forStat344];
[self expr];
@@ -955,7 +1018,7 @@ static _stack;
[self popFollow];


-
+
/* ruleRef */
[self pushFollow:FOLLOW_block_in_forStat346];
[self block];
@@ -963,22 +1026,22 @@ static _stack;
[self popFollow];


-
+
[self match:input TokenType:UP Follow:nil];

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -987,23 +1050,23 @@ static _stack;

/*
* $ANTLR start expr
- * SimpleCTP.g:59:1: expr : ( ^( K_EQEQ expr expr ) | ^( K_LT expr expr ) | ^( K_PLUS expr expr ) | ^( K_EQ K_ID e= expr ) | atom );
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:59:1: expr : ( ^( K_EQEQ expr expr ) | ^( K_LT expr expr ) | ^( K_PLUS expr expr ) | ^( K_EQ K_ID e= expr ) | atom );
*/
- (SimpleCTP_expr_return *) expr
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

+    /* ruleDeclarations */
SimpleCTP_expr_return * retval = [SimpleCTP_expr_return newSimpleCTP_expr_return];
[retval setStart:[input LT:1]];


@try {
-        ANTLRCommonTree *K_ID1 = nil;
-         SimpleCTP_expr_return * e = nil ;
-
+        /* ruleLabelDefs entry */
+        ANTLRCommonTree *K_ID1 = nil;SimpleCTP_expr_return * e = nil ;
+

-        // SimpleCTP.g:59:5: ( ^( K_EQEQ expr expr ) | ^( K_LT expr expr ) | ^( K_PLUS expr expr ) | ^( K_EQ K_ID e= expr ) | atom ) //ruleblock
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:59:5: ( ^( K_EQEQ expr expr ) | ^( K_LT expr expr ) | ^( K_PLUS expr expr ) | ^( K_EQ K_ID e= expr ) | atom ) //ruleblock
NSInteger alt7=5;
unichar charLA7 = [input LA:1];
switch (charLA7) {
@@ -1035,7 +1098,7 @@ static _stack;
break;

default: ;
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:7 state:0 stream:input];
+            NoViableAltException *nvae = [NoViableAltException newException:7 state:0 stream:input];
nvae.c = charLA7;
@throw nvae;

@@ -1043,11 +1106,14 @@ static _stack;

switch (alt7) {
case 1 : ;
-                // SimpleCTP.g:59:9: ^( K_EQEQ expr expr ) // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:59:9: ^( K_EQEQ expr expr ) // alt
{
-                [self match:input TokenType:K_EQEQ Follow:FOLLOW_K_EQEQ_in_expr362];

+
+                [self match:input TokenType:K_EQEQ Follow:FOLLOW_K_EQEQ_in_expr362];
+
[self match:input TokenType:DOWN Follow:nil];
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_expr364];
[self expr];
@@ -1055,7 +1121,7 @@ static _stack;
[self popFollow];


-
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_expr366];
[self expr];
@@ -1063,18 +1129,21 @@ static _stack;
[self popFollow];


-
+
[self match:input TokenType:UP Follow:nil];

-
+
}
break;
case 2 : ;
-                // SimpleCTP.g:60:9: ^( K_LT expr expr ) // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:60:9: ^( K_LT expr expr ) // alt
{
-                [self match:input TokenType:K_LT Follow:FOLLOW_K_LT_in_expr378];

+
+                [self match:input TokenType:K_LT Follow:FOLLOW_K_LT_in_expr378];
+
[self match:input TokenType:DOWN Follow:nil];
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_expr380];
[self expr];
@@ -1082,7 +1151,7 @@ static _stack;
[self popFollow];


-
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_expr382];
[self expr];
@@ -1090,18 +1159,21 @@ static _stack;
[self popFollow];


-
+
[self match:input TokenType:UP Follow:nil];

-
+
}
break;
case 3 : ;
-                // SimpleCTP.g:61:9: ^( K_PLUS expr expr ) // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:61:9: ^( K_PLUS expr expr ) // alt
{
-                [self match:input TokenType:K_PLUS Follow:FOLLOW_K_PLUS_in_expr394];

+
+                [self match:input TokenType:K_PLUS Follow:FOLLOW_K_PLUS_in_expr394];
+
[self match:input TokenType:DOWN Follow:nil];
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_expr396];
[self expr];
@@ -1109,7 +1181,7 @@ static _stack;
[self popFollow];


-
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_expr398];
[self expr];
@@ -1117,20 +1189,23 @@ static _stack;
[self popFollow];


-
+
[self match:input TokenType:UP Follow:nil];

-
+
}
break;
case 4 : ;
-                // SimpleCTP.g:62:9: ^( K_EQ K_ID e= expr ) // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:62:9: ^( K_EQ K_ID e= expr ) // alt
{
-                [self match:input TokenType:K_EQ Follow:FOLLOW_K_EQ_in_expr410];

+
+                [self match:input TokenType:K_EQ Follow:FOLLOW_K_EQ_in_expr410];
+
[self match:input TokenType:DOWN Follow:nil];
-                    K_ID1=(ANTLRCommonTree *)[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_expr412];

+                    K_ID1=(ANTLRCommonTree *)[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_expr412];
+
/* ruleRef */
[self pushFollow:FOLLOW_expr_in_expr416];
e = [self expr];
@@ -1138,18 +1213,20 @@ static _stack;
[self popFollow];


-
+
[self match:input TokenType:UP Follow:nil];

+

NSLog(@"assigning %@ to variable %@", (e!=nil?[[input getTokenStream] toStringFromStart:[[input getTreeAdaptor] getTokenStartIndex:[e getStart]]ToEnd:[[input getTreeAdaptor] getTokenStopIndex:[e getStart]]]:0), (K_ID1!=nil?K_ID1.text:nil));

-
+
}
break;
case 5 : ;
-                // SimpleCTP.g:63:9: atom // alt
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:63:9: atom // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_atom_in_expr429];
[self atom];
@@ -1157,21 +1234,21 @@ static _stack;
[self popFollow];


-
+
}
break;

}
-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -1180,38 +1257,43 @@ static _stack;

/*
* $ANTLR start atom
- * SimpleCTP.g:66:1: atom : ( K_ID | K_INT );
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:66:1: atom : ( K_ID | K_INT );
*/
- (void) atom
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // SimpleCTP.g:67:5: ( K_ID | K_INT ) // ruleBlockSingleAlt
-        // SimpleCTP.g: // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g:67:5: ( K_ID | K_INT ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCTP.g: // alt
{
+
if ((([input LA:1] >= K_ID) && ([input LA:1] <= K_INT))) {
[input consume];
[state setIsErrorRecovery:NO];
} else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
@throw mse;
}

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g
new file mode 100644
index 0000000..b6d6474
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g
@@ -0,0 +1,69 @@
+tree grammar SimpleCWalker;
+options {
+    tokenVocab = SimpleC;
+	language = ObjC;
+	ASTLabelType = CommonTree;
+}
+
+scope Symbols
+{
+CommonTree *tree;
+}
+
+program
+    :   declaration+
+    ;
+
+declaration
+    :   variable
+    |   ^(FUNC_DECL functionHeader)
+    |   ^(FUNC_DEF functionHeader block)
+    ;
+
+variable
+    :   ^(VAR_DEF type declarator)
+    ;
+
+declarator
+    :   K_ID
+    ;
+
+functionHeader
+    :   ^(FUNC_HDR type K_ID formalParameter+)
+    ;
+
+formalParameter
+    :   ^(ARG_DEF type declarator)
+    ;
+
+type
+    :   K_INT_TYPE
+    |   K_CHAR
+    |   K_VOID
+    |   K_ID
+    ;
+
+block
+    :   ^(BLOCK variable* stat*)
+    ;
+
+stat: forStat
+    | expr
+    | block
+    ;
+
+forStat
+    :   ^(K_FOR expr expr expr block)
+    ;
+
+expr:   ^(K_EQEQ expr expr)
+    |   ^(K_LT expr expr)
+    |   ^(K_PLUS expr expr)
+    |   ^(K_EQ K_ID e=expr) { NSLog(@"assigning \%@ to variable \%@", $e.text, $K_ID.text); }
+    |   atom
+    ;
+
+atom
+    : K_ID
+    | K_INT
+    ;
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.h b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.h
new file mode 100644
index 0000000..400a294
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.h
@@ -0,0 +1,133 @@
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g 2012-02-16 17:56:35
+
+/* =============================================================================
+ * Standard antlr OBJC runtime definitions
+ */
+#import <Cocoa/Cocoa.h>
+#import <ANTLR/ANTLR.h>
+/* End of standard antlr3 runtime definitions
+ * =============================================================================
+ */
+
+/* treeParserHeaderFile */
+#ifndef ANTLR3TokenTypeAlreadyDefined
+#define ANTLR3TokenTypeAlreadyDefined
+typedef enum {
+    ANTLR_EOF = -1,
+    INVALID,
+    EOR,
+    DOWN,
+    UP,
+    MIN
+} ANTLR3TokenType;
+#endif
+
+#pragma mark Tokens
+#ifdef EOF
+#undef EOF
+#endif
+#define EOF -1
+#define ARG_DEF 4
+#define BLOCK 5
+#define FUNC_DECL 6
+#define FUNC_DEF 7
+#define FUNC_HDR 8
+#define K_CHAR 9
+#define K_COMMA 10
+#define K_EQ 11
+#define K_EQEQ 12
+#define K_FOR 13
+#define K_ID 14
+#define K_INT 15
+#define K_INT_TYPE 16
+#define K_LCURLY 17
+#define K_LCURVE 18
+#define K_LT 19
+#define K_PLUS 20
+#define K_RCURLY 21
+#define K_RCURVE 22
+#define K_SEMICOLON 23
+#define K_VOID 24
+#define VAR_DEF 25
+#define WS 26
+#pragma mark Dynamic Global Scopes globalAttributeScopeInterface
+/* globalAttributeScopeInterface */
+@interface Symbols_Scope : SymbolsScope {
+CommonTree * tree;
+ }
+/* start of globalAttributeScopeInterface properties */
+@property (assign, getter=gettree, setter=settree:) CommonTree * tree;
+/* end globalAttributeScopeInterface properties */
++ (Symbols_Scope *)newSymbols_Scope;
+- (id) init;
+/* start of globalAttributeScopeInterface methodsDecl */
+- (CommonTree *)gettree;
+- (void)settree:(CommonTree *)aVal;
+/* End of globalAttributeScopeInterface methodsDecl */
+@end /* end of Symbols_Scope interface */
+
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeInterface
+#pragma mark Rule Return Scopes returnScopeInterface
+/* returnScopeInterface SimpleCWalker_expr_return */
+@interface SimpleCWalker_expr_return : TreeRuleReturnScope { /* returnScopeInterface line 1838 */
+ /* ObjC start of memVars() */
+
+}
+/* start property declarations */
+
+
+/* start of method declarations */
+
++ (SimpleCWalker_expr_return *)newSimpleCWalker_expr_return;
+/* this is start of set and get methods */
+  /* methodsDecl */
+
+@end /* end of returnScopeInterface interface */
+
+
+
+/* Interface grammar class */
+@interface SimpleCWalker  : TreeParser { /* line 572 */
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeDecl
+#pragma mark Dynamic Global Rule Scopes globalAttributeScopeMemVar
+/* globalAttributeScopeMemVar */
+SymbolStack *Symbols_stack;
+Symbols_Scope *Symbols_scope;
+
+
+/* ObjC start of actions.(actionScope).memVars */
+/* ObjC end of actions.(actionScope).memVars */
+/* ObjC start of memVars */
+/* ObjC end of memVars */
+
+ }
+
+/* ObjC start of actions.(actionScope).properties */
+/* ObjC end of actions.(actionScope).properties */
+/* ObjC start of properties */
+/* ObjC end of properties */
+
++ (void) initialize;
++ (id) newSimpleCWalker:(id<TreeNodeStream>)aStream;
+/* ObjC start of actions.(actionScope).methodsDecl */
+/* ObjC end of actions.(actionScope).methodsDecl */
+
+/* ObjC start of methodsDecl */
+/* ObjC end of methodsDecl */
+
+- (void)program;
+- (void)declaration;
+- (void)variable;
+- (void)declarator;
+- (void)functionHeader;
+- (void)formalParameter;
+- (void)type;
+- (void)block;
+- (void)stat;
+- (void)forStat;
+- (SimpleCWalker_expr_return *)expr;
+- (void)atom;
+
+
+@end /* end of SimpleCWalker interface */
+
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.m b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.m
new file mode 100644
index 0000000..c7d4cd4
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.m
@@ -0,0 +1,1304 @@
+/** \file
+ *  This OBJC source file was generated by $ANTLR version 3.4
+ *
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g
+ *     -                            On : 2012-02-16 17:56:35
+ *     -           for the tree parser : SimpleCWalkerTreeParser
+ *
+ * Editing it, at least manually, is not wise.
+ *
+ * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
+ *
+ *
+*/
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g 2012-02-16 17:56:35
+
+
+/* -----------------------------------------
+ * Include the ANTLR3 generated header file.
+ */
+#import "SimpleCWalker.h"
+/* ----------------------------------------- */
+
+
+/* ============================================================================= */
+/* =============================================================================
+ * Start of recognizer
+ */
+
+#pragma mark Bitsets
+static ANTLRBitSet *FOLLOW_declaration_in_program56;
+static const unsigned long long FOLLOW_declaration_in_program56_data[] = { 0x00000000020000C2LL};
+static ANTLRBitSet *FOLLOW_variable_in_declaration76;
+static const unsigned long long FOLLOW_variable_in_declaration76_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_FUNC_DECL_in_declaration87;
+static const unsigned long long FOLLOW_FUNC_DECL_in_declaration87_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_functionHeader_in_declaration89;
+static const unsigned long long FOLLOW_functionHeader_in_declaration89_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_FUNC_DEF_in_declaration101;
+static const unsigned long long FOLLOW_FUNC_DEF_in_declaration101_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_functionHeader_in_declaration103;
+static const unsigned long long FOLLOW_functionHeader_in_declaration103_data[] = { 0x0000000000000020LL};
+static ANTLRBitSet *FOLLOW_block_in_declaration105;
+static const unsigned long long FOLLOW_block_in_declaration105_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_VAR_DEF_in_variable126;
+static const unsigned long long FOLLOW_VAR_DEF_in_variable126_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_type_in_variable128;
+static const unsigned long long FOLLOW_type_in_variable128_data[] = { 0x0000000000004000LL};
+static ANTLRBitSet *FOLLOW_declarator_in_variable130;
+static const unsigned long long FOLLOW_declarator_in_variable130_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_K_ID_in_declarator150;
+static const unsigned long long FOLLOW_K_ID_in_declarator150_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_FUNC_HDR_in_functionHeader171;
+static const unsigned long long FOLLOW_FUNC_HDR_in_functionHeader171_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_type_in_functionHeader173;
+static const unsigned long long FOLLOW_type_in_functionHeader173_data[] = { 0x0000000000004000LL};
+static ANTLRBitSet *FOLLOW_K_ID_in_functionHeader175;
+static const unsigned long long FOLLOW_K_ID_in_functionHeader175_data[] = { 0x0000000000000010LL};
+static ANTLRBitSet *FOLLOW_formalParameter_in_functionHeader177;
+static const unsigned long long FOLLOW_formalParameter_in_functionHeader177_data[] = { 0x0000000000000018LL};
+static ANTLRBitSet *FOLLOW_ARG_DEF_in_formalParameter199;
+static const unsigned long long FOLLOW_ARG_DEF_in_formalParameter199_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_type_in_formalParameter201;
+static const unsigned long long FOLLOW_type_in_formalParameter201_data[] = { 0x0000000000004000LL};
+static ANTLRBitSet *FOLLOW_declarator_in_formalParameter203;
+static const unsigned long long FOLLOW_declarator_in_formalParameter203_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_BLOCK_in_block283;
+static const unsigned long long FOLLOW_BLOCK_in_block283_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_variable_in_block285;
+static const unsigned long long FOLLOW_variable_in_block285_data[] = { 0x000000000218F828LL};
+static ANTLRBitSet *FOLLOW_stat_in_block288;
+static const unsigned long long FOLLOW_stat_in_block288_data[] = { 0x000000000018F828LL};
+static ANTLRBitSet *FOLLOW_forStat_in_stat302;
+static const unsigned long long FOLLOW_forStat_in_stat302_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_expr_in_stat310;
+static const unsigned long long FOLLOW_expr_in_stat310_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_block_in_stat318;
+static const unsigned long long FOLLOW_block_in_stat318_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_K_FOR_in_forStat338;
+static const unsigned long long FOLLOW_K_FOR_in_forStat338_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_expr_in_forStat340;
+static const unsigned long long FOLLOW_expr_in_forStat340_data[] = { 0x000000000018D800LL};
+static ANTLRBitSet *FOLLOW_expr_in_forStat342;
+static const unsigned long long FOLLOW_expr_in_forStat342_data[] = { 0x000000000018D800LL};
+static ANTLRBitSet *FOLLOW_expr_in_forStat344;
+static const unsigned long long FOLLOW_expr_in_forStat344_data[] = { 0x0000000000000020LL};
+static ANTLRBitSet *FOLLOW_block_in_forStat346;
+static const unsigned long long FOLLOW_block_in_forStat346_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_K_EQEQ_in_expr362;
+static const unsigned long long FOLLOW_K_EQEQ_in_expr362_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_expr_in_expr364;
+static const unsigned long long FOLLOW_expr_in_expr364_data[] = { 0x000000000018D800LL};
+static ANTLRBitSet *FOLLOW_expr_in_expr366;
+static const unsigned long long FOLLOW_expr_in_expr366_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_K_LT_in_expr378;
+static const unsigned long long FOLLOW_K_LT_in_expr378_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_expr_in_expr380;
+static const unsigned long long FOLLOW_expr_in_expr380_data[] = { 0x000000000018D800LL};
+static ANTLRBitSet *FOLLOW_expr_in_expr382;
+static const unsigned long long FOLLOW_expr_in_expr382_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_K_PLUS_in_expr394;
+static const unsigned long long FOLLOW_K_PLUS_in_expr394_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_expr_in_expr396;
+static const unsigned long long FOLLOW_expr_in_expr396_data[] = { 0x000000000018D800LL};
+static ANTLRBitSet *FOLLOW_expr_in_expr398;
+static const unsigned long long FOLLOW_expr_in_expr398_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_K_EQ_in_expr410;
+static const unsigned long long FOLLOW_K_EQ_in_expr410_data[] = { 0x0000000000000004LL};
+static ANTLRBitSet *FOLLOW_K_ID_in_expr412;
+static const unsigned long long FOLLOW_K_ID_in_expr412_data[] = { 0x000000000018D800LL};
+static ANTLRBitSet *FOLLOW_expr_in_expr416;
+static const unsigned long long FOLLOW_expr_in_expr416_data[] = { 0x0000000000000008LL};
+static ANTLRBitSet *FOLLOW_atom_in_expr429;
+static const unsigned long long FOLLOW_atom_in_expr429_data[] = { 0x0000000000000002LL};
+
+
+#pragma mark Dynamic Global globalAttributeScopeImplementation
+@implementation Symbols_Scope  /* globalAttributeScopeImplementation */
+/* start of synthesize -- OBJC-Line 1750 */
+@synthesize tree;
+
++ (Symbols_Scope *)newSymbols_Scope
+{
+return [[Symbols_Scope alloc] init];
+}
+
+- (id) init
+{
+self = [super init];
+return self;
+}
+
+/* start of iterate get and set functions */
+- (CommonTree *)gettree { return( tree ); }
+- (void)settree:(CommonTree *)aVal { tree = aVal; }
+
+/* End of iterate get and set functions */
+@end /* end of Symbols_Scope implementation */
+
+
+
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation
+
+#pragma mark Rule Return Scopes returnScopeImplementation
+@implementation SimpleCWalker_expr_return /* returnScopeImplementation */
+ /* start of synthesize -- OBJC-Line 1837 */
++ (SimpleCWalker_expr_return *)newSimpleCWalker_expr_return
+{
+return [[[SimpleCWalker_expr_return alloc] init] retain];
+}
+
+- (id) init
+{
+self = [super init];
+return self;
+}
+
+
+
+@end /* end of returnScope implementation */
+
+
+
+@implementation SimpleCWalker  // line 637
+
+/* ObjC start of ruleAttributeScope */
+#pragma mark Dynamic Rule Scopes ruleAttributeScope
+/* ObjC end of ruleAttributeScope */
+#pragma mark global Attribute Scopes globalAttributeScope
+/* ObjC start globalAttributeScope */
+static _stack;
+
+/* ObjC end globalAttributeScope */
+/* ObjC start actions.(actionScope).synthesize */
+/* ObjC start synthesize() */
+
++ (void) initialize
+{
+    #pragma mark Bitsets
+    FOLLOW_declaration_in_program56 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_declaration_in_program56_data Count:(NSUInteger)1] retain];
+    FOLLOW_variable_in_declaration76 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_declaration76_data Count:(NSUInteger)1] retain];
+    FOLLOW_FUNC_DECL_in_declaration87 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_FUNC_DECL_in_declaration87_data Count:(NSUInteger)1] retain];
+    FOLLOW_functionHeader_in_declaration89 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration89_data Count:(NSUInteger)1] retain];
+    FOLLOW_FUNC_DEF_in_declaration101 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_FUNC_DEF_in_declaration101_data Count:(NSUInteger)1] retain];
+    FOLLOW_functionHeader_in_declaration103 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration103_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_declaration105 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_declaration105_data Count:(NSUInteger)1] retain];
+    FOLLOW_VAR_DEF_in_variable126 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_VAR_DEF_in_variable126_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_variable128 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_variable128_data Count:(NSUInteger)1] retain];
+    FOLLOW_declarator_in_variable130 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_variable130_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_ID_in_declarator150 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_declarator150_data Count:(NSUInteger)1] retain];
+    FOLLOW_FUNC_HDR_in_functionHeader171 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_FUNC_HDR_in_functionHeader171_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_functionHeader173 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_functionHeader173_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_ID_in_functionHeader175 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_functionHeader175_data Count:(NSUInteger)1] retain];
+    FOLLOW_formalParameter_in_functionHeader177 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader177_data Count:(NSUInteger)1] retain];
+    FOLLOW_ARG_DEF_in_formalParameter199 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ARG_DEF_in_formalParameter199_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_formalParameter201 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_formalParameter201_data Count:(NSUInteger)1] retain];
+    FOLLOW_declarator_in_formalParameter203 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_formalParameter203_data Count:(NSUInteger)1] retain];
+    FOLLOW_BLOCK_in_block283 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_BLOCK_in_block283_data Count:(NSUInteger)1] retain];
+    FOLLOW_variable_in_block285 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_block285_data Count:(NSUInteger)1] retain];
+    FOLLOW_stat_in_block288 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_stat_in_block288_data Count:(NSUInteger)1] retain];
+    FOLLOW_forStat_in_stat302 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_forStat_in_stat302_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_stat310 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_stat310_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_stat318 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_stat318_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_FOR_in_forStat338 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_FOR_in_forStat338_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_forStat340 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat340_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_forStat342 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat342_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_forStat344 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat344_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_forStat346 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_forStat346_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_EQEQ_in_expr362 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_EQEQ_in_expr362_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_expr364 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr364_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_expr366 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr366_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_LT_in_expr378 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_LT_in_expr378_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_expr380 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr380_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_expr382 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr382_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_PLUS_in_expr394 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_PLUS_in_expr394_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_expr396 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr396_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_expr398 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr398_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_EQ_in_expr410 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_EQ_in_expr410_data Count:(NSUInteger)1] retain];
+    FOLLOW_K_ID_in_expr412 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_expr412_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_expr416 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr416_data Count:(NSUInteger)1] retain];
+    FOLLOW_atom_in_expr429 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_expr429_data Count:(NSUInteger)1] retain];
+
+    [BaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
+ @"ARG_DEF", @"BLOCK", @"FUNC_DECL", @"FUNC_DEF", @"FUNC_HDR", @"K_CHAR",
+ @"K_COMMA", @"K_EQ", @"K_EQEQ", @"K_FOR", @"K_ID", @"K_INT", @"K_INT_TYPE",
+ @"K_LCURLY", @"K_LCURVE", @"K_LT", @"K_PLUS", @"K_RCURLY", @"K_RCURVE",
+ @"K_SEMICOLON", @"K_VOID", @"VAR_DEF", @"WS", nil] retain]];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g"];
+}
+
++ (SimpleCWalker *)newSimpleCWalker:(id<TreeNodeStream>)aStream
+{
+    return [[SimpleCWalker alloc] initWithStream:aStream];
+}
+
+- (id) initWithStream:(id<TreeNodeStream>)aStream
+{
+    self = [super initWithStream:aStream State:[[RecognizerSharedState newRecognizerSharedStateWithRuleLen:12+1] retain]];
+    if ( self != nil ) {
+        /* globalAttributeScopeInit */
+
+        Symbols_scope = [Symbols_Scope newSymbols_Scope];
+
+        Symbols_stack = [SymbolStack newSymbolStackWithLen:30];
+
+        /* start of actions-actionScope-init */
+        /* start of init */
+    }
+    return self;
+}
+
+- (void) dealloc
+{
+    [Symbols_stack release];
+
+    [super dealloc];
+}
+
+/* ObjC start actions.(actionScope).methods */
+/* ObjC end actions.(actionScope).methods */
+/* ObjC start methods() */
+/* ObjC end methods() */
+/* ObjC start rules */
+/*
+ * $ANTLR start program
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:13:1: program : ( declaration )+ ;
+ */
+- (void) program
+{
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+
+    @try {
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:14:5: ( ( declaration )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:14:9: ( declaration )+ // alt
+        {
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:14:9: ( declaration )+ // positiveClosureBlock
+        NSInteger cnt1 = 0;
+        do {
+            NSInteger alt1 = 2;
+            NSInteger LA1_0 = [input LA:1];
+            if ( ((LA1_0 >= FUNC_DECL && LA1_0 <= FUNC_DEF)||LA1_0==VAR_DEF) ) {
+                alt1=1;
+            }
+
+
+            switch (alt1) {
+                case 1 : ;
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:14:9: declaration // alt
+                    {
+
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_declaration_in_program56];
+                    [self declaration];
+
+                    [self popFollow];
+
+
+
+                    }
+                    break;
+
+                default :
+                    if ( cnt1 >= 1 )
+                        goto loop1;
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:1];
+                    @throw eee;
+            }
+            cnt1++;
+        } while (YES);
+        loop1: ;
+
+
+        }
+
+        /* token+rule list labels */
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return ;
+}
+/* $ANTLR end program */
+
+/*
+ * $ANTLR start declaration
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:17:1: declaration : ( variable | ^( FUNC_DECL functionHeader ) | ^( FUNC_DEF functionHeader block ) );
+ */
+- (void) declaration
+{
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+
+    @try {
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:18:5: ( variable | ^( FUNC_DECL functionHeader ) | ^( FUNC_DEF functionHeader block ) ) //ruleblock
+        NSInteger alt2=3;
+        unichar charLA2 = [input LA:1];
+        switch (charLA2) {
+            case VAR_DEF: ;
+                {
+                alt2=1;
+                }
+                break;
+            case FUNC_DECL: ;
+                {
+                alt2=2;
+                }
+                break;
+            case FUNC_DEF: ;
+                {
+                alt2=3;
+                }
+                break;
+
+        default: ;
+            NoViableAltException *nvae = [NoViableAltException newException:2 state:0 stream:input];
+            nvae.c = charLA2;
+            @throw nvae;
+
+        }
+
+        switch (alt2) {
+            case 1 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:18:9: variable // alt
+                {
+
+                /* ruleRef */
+                [self pushFollow:FOLLOW_variable_in_declaration76];
+                [self variable];
+
+                [self popFollow];
+
+
+
+                }
+                break;
+            case 2 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:19:9: ^( FUNC_DECL functionHeader ) // alt
+                {
+
+
+                [self match:input TokenType:FUNC_DECL Follow:FOLLOW_FUNC_DECL_in_declaration87];
+
+                    [self match:input TokenType:DOWN Follow:nil];
+
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_functionHeader_in_declaration89];
+                    [self functionHeader];
+
+                    [self popFollow];
+
+
+
+                    [self match:input TokenType:UP Follow:nil];
+
+
+                }
+                break;
+            case 3 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:20:9: ^( FUNC_DEF functionHeader block ) // alt
+                {
+
+
+                [self match:input TokenType:FUNC_DEF Follow:FOLLOW_FUNC_DEF_in_declaration101];
+
+                    [self match:input TokenType:DOWN Follow:nil];
+
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_functionHeader_in_declaration103];
+                    [self functionHeader];
+
+                    [self popFollow];
+
+
+
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_block_in_declaration105];
+                    [self block];
+
+                    [self popFollow];
+
+
+
+                    [self match:input TokenType:UP Follow:nil];
+
+
+                }
+                break;
+
+        }
+        /* token+rule list labels */
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return ;
+}
+/* $ANTLR end declaration */
+
+/*
+ * $ANTLR start variable
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:23:1: variable : ^( VAR_DEF type declarator ) ;
+ */
+- (void) variable
+{
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+
+    @try {
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:24:5: ( ^( VAR_DEF type declarator ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:24:9: ^( VAR_DEF type declarator ) // alt
+        {
+
+
+        [self match:input TokenType:VAR_DEF Follow:FOLLOW_VAR_DEF_in_variable126];
+
+            [self match:input TokenType:DOWN Follow:nil];
+
+            /* ruleRef */
+            [self pushFollow:FOLLOW_type_in_variable128];
+            [self type];
+
+            [self popFollow];
+
+
+
+            /* ruleRef */
+            [self pushFollow:FOLLOW_declarator_in_variable130];
+            [self declarator];
+
+            [self popFollow];
+
+
+
+            [self match:input TokenType:UP Follow:nil];
+
+
+        }
+
+        /* token+rule list labels */
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return ;
+}
+/* $ANTLR end variable */
+
+/*
+ * $ANTLR start declarator
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:27:1: declarator : K_ID ;
+ */
+- (void) declarator
+{
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+
+    @try {
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:28:5: ( K_ID ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:28:9: K_ID // alt
+        {
+
+        [self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_declarator150];
+
+        }
+
+        /* token+rule list labels */
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return ;
+}
+/* $ANTLR end declarator */
+
+/*
+ * $ANTLR start functionHeader
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:31:1: functionHeader : ^( FUNC_HDR type K_ID ( formalParameter )+ ) ;
+ */
+- (void) functionHeader
+{
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+
+    @try {
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:32:5: ( ^( FUNC_HDR type K_ID ( formalParameter )+ ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:32:9: ^( FUNC_HDR type K_ID ( formalParameter )+ ) // alt
+        {
+
+
+        [self match:input TokenType:FUNC_HDR Follow:FOLLOW_FUNC_HDR_in_functionHeader171];
+
+            [self match:input TokenType:DOWN Follow:nil];
+
+            /* ruleRef */
+            [self pushFollow:FOLLOW_type_in_functionHeader173];
+            [self type];
+
+            [self popFollow];
+
+
+
+            [self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_functionHeader175];
+
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:32:30: ( formalParameter )+ // positiveClosureBlock
+            NSInteger cnt3 = 0;
+            do {
+                NSInteger alt3 = 2;
+                NSInteger LA3_0 = [input LA:1];
+                if ( (LA3_0==ARG_DEF) ) {
+                    alt3=1;
+                }
+
+
+                switch (alt3) {
+                    case 1 : ;
+                        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:32:30: formalParameter // alt
+                        {
+
+                        /* ruleRef */
+                        [self pushFollow:FOLLOW_formalParameter_in_functionHeader177];
+                        [self formalParameter];
+
+                        [self popFollow];
+
+
+
+                        }
+                        break;
+
+                    default :
+                        if ( cnt3 >= 1 )
+                            goto loop3;
+                        EarlyExitException *eee =
+                            [EarlyExitException newException:input decisionNumber:3];
+                        @throw eee;
+                }
+                cnt3++;
+            } while (YES);
+            loop3: ;
+
+
+            [self match:input TokenType:UP Follow:nil];
+
+
+        }
+
+        /* token+rule list labels */
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return ;
+}
+/* $ANTLR end functionHeader */
+
+/*
+ * $ANTLR start formalParameter
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:35:1: formalParameter : ^( ARG_DEF type declarator ) ;
+ */
+- (void) formalParameter
+{
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+
+    @try {
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:36:5: ( ^( ARG_DEF type declarator ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:36:9: ^( ARG_DEF type declarator ) // alt
+        {
+
+
+        [self match:input TokenType:ARG_DEF Follow:FOLLOW_ARG_DEF_in_formalParameter199];
+
+            [self match:input TokenType:DOWN Follow:nil];
+
+            /* ruleRef */
+            [self pushFollow:FOLLOW_type_in_formalParameter201];
+            [self type];
+
+            [self popFollow];
+
+
+
+            /* ruleRef */
+            [self pushFollow:FOLLOW_declarator_in_formalParameter203];
+            [self declarator];
+
+            [self popFollow];
+
+
+
+            [self match:input TokenType:UP Follow:nil];
+
+
+        }
+
+        /* token+rule list labels */
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return ;
+}
+/* $ANTLR end formalParameter */
+
+/*
+ * $ANTLR start type
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:39:1: type : ( K_INT_TYPE | K_CHAR | K_VOID | K_ID );
+ */
+- (void) type
+{
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+
+    @try {
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:40:5: ( K_INT_TYPE | K_CHAR | K_VOID | K_ID ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g: // alt
+        {
+
+        if ([input LA:1] == K_CHAR||[input LA:1] == K_ID||[input LA:1] == K_INT_TYPE||[input LA:1] == K_VOID) {
+            [input consume];
+            [state setIsErrorRecovery:NO];
+        } else {
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
+            @throw mse;
+        }
+
+
+        }
+
+        /* token+rule list labels */
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return ;
+}
+/* $ANTLR end type */
+
+/*
+ * $ANTLR start block
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:46:1: block : ^( BLOCK ( variable )* ( stat )* ) ;
+ */
+- (void) block
+{
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+
+    @try {
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:47:5: ( ^( BLOCK ( variable )* ( stat )* ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:47:9: ^( BLOCK ( variable )* ( stat )* ) // alt
+        {
+
+
+        [self match:input TokenType:BLOCK Follow:FOLLOW_BLOCK_in_block283];
+
+        if ( [input LA:1] == DOWN ) {
+            [self match:input TokenType:DOWN Follow:nil];
+
+
+            do {
+                NSInteger alt4=2;
+                NSInteger LA4_0 = [input LA:1];
+                if ( (LA4_0==VAR_DEF) ) {
+                    alt4=1;
+                }
+
+
+                switch (alt4) {
+                    case 1 : ;
+                        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:47:17: variable // alt
+                        {
+
+                        /* ruleRef */
+                        [self pushFollow:FOLLOW_variable_in_block285];
+                        [self variable];
+
+                        [self popFollow];
+
+
+
+                        }
+                        break;
+
+                    default :
+                        goto loop4;
+                }
+            } while (YES);
+            loop4: ;
+
+
+
+            do {
+                NSInteger alt5=2;
+                NSInteger LA5_0 = [input LA:1];
+                if ( (LA5_0==BLOCK||(LA5_0 >= K_EQ && LA5_0 <= K_INT)||(LA5_0 >= K_LT && LA5_0 <= K_PLUS)) ) {
+                    alt5=1;
+                }
+
+
+                switch (alt5) {
+                    case 1 : ;
+                        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:47:27: stat // alt
+                        {
+
+                        /* ruleRef */
+                        [self pushFollow:FOLLOW_stat_in_block288];
+                        [self stat];
+
+                        [self popFollow];
+
+
+
+                        }
+                        break;
+
+                    default :
+                        goto loop5;
+                }
+            } while (YES);
+            loop5: ;
+
+
+            [self match:input TokenType:UP Follow:nil];
+        }
+
+
+        }
+
+        /* token+rule list labels */
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return ;
+}
+/* $ANTLR end block */
+
+/*
+ * $ANTLR start stat
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:50:1: stat : ( forStat | expr | block );
+ */
+- (void) stat
+{
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+
+    @try {
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:50:5: ( forStat | expr | block ) //ruleblock
+        NSInteger alt6=3;
+        unichar charLA6 = [input LA:1];
+        switch (charLA6) {
+            case K_FOR: ;
+                {
+                alt6=1;
+                }
+                break;
+            case K_EQ: ;
+            case K_EQEQ: ;
+            case K_ID: ;
+            case K_INT: ;
+            case K_LT: ;
+            case K_PLUS: ;
+                {
+                alt6=2;
+                }
+                break;
+            case BLOCK: ;
+                {
+                alt6=3;
+                }
+                break;
+
+        default: ;
+            NoViableAltException *nvae = [NoViableAltException newException:6 state:0 stream:input];
+            nvae.c = charLA6;
+            @throw nvae;
+
+        }
+
+        switch (alt6) {
+            case 1 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:50:7: forStat // alt
+                {
+
+                /* ruleRef */
+                [self pushFollow:FOLLOW_forStat_in_stat302];
+                [self forStat];
+
+                [self popFollow];
+
+
+
+                }
+                break;
+            case 2 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:51:7: expr // alt
+                {
+
+                /* ruleRef */
+                [self pushFollow:FOLLOW_expr_in_stat310];
+                [self expr];
+
+                [self popFollow];
+
+
+
+                }
+                break;
+            case 3 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:52:7: block // alt
+                {
+
+                /* ruleRef */
+                [self pushFollow:FOLLOW_block_in_stat318];
+                [self block];
+
+                [self popFollow];
+
+
+
+                }
+                break;
+
+        }
+        /* token+rule list labels */
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return ;
+}
+/* $ANTLR end stat */
+
+/*
+ * $ANTLR start forStat
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:55:1: forStat : ^( K_FOR expr expr expr block ) ;
+ */
+- (void) forStat
+{
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+
+    @try {
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:56:5: ( ^( K_FOR expr expr expr block ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:56:9: ^( K_FOR expr expr expr block ) // alt
+        {
+
+
+        [self match:input TokenType:K_FOR Follow:FOLLOW_K_FOR_in_forStat338];
+
+            [self match:input TokenType:DOWN Follow:nil];
+
+            /* ruleRef */
+            [self pushFollow:FOLLOW_expr_in_forStat340];
+            [self expr];
+
+            [self popFollow];
+
+
+
+            /* ruleRef */
+            [self pushFollow:FOLLOW_expr_in_forStat342];
+            [self expr];
+
+            [self popFollow];
+
+
+
+            /* ruleRef */
+            [self pushFollow:FOLLOW_expr_in_forStat344];
+            [self expr];
+
+            [self popFollow];
+
+
+
+            /* ruleRef */
+            [self pushFollow:FOLLOW_block_in_forStat346];
+            [self block];
+
+            [self popFollow];
+
+
+
+            [self match:input TokenType:UP Follow:nil];
+
+
+        }
+
+        /* token+rule list labels */
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return ;
+}
+/* $ANTLR end forStat */
+
+/*
+ * $ANTLR start expr
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:59:1: expr : ( ^( K_EQEQ expr expr ) | ^( K_LT expr expr ) | ^( K_PLUS expr expr ) | ^( K_EQ K_ID e= expr ) | atom );
+ */
+- (SimpleCWalker_expr_return *) expr
+{
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+    SimpleCWalker_expr_return * retval = [SimpleCWalker_expr_return newSimpleCWalker_expr_return];
+    [retval setStart:[input LT:1]];
+
+
+    @try {
+        /* ruleLabelDefs entry */
+        CommonTree *K_ID1 = nil;SimpleCWalker_expr_return * e = nil ;
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:59:5: ( ^( K_EQEQ expr expr ) | ^( K_LT expr expr ) | ^( K_PLUS expr expr ) | ^( K_EQ K_ID e= expr ) | atom ) //ruleblock
+        NSInteger alt7=5;
+        unichar charLA7 = [input LA:1];
+        switch (charLA7) {
+            case K_EQEQ: ;
+                {
+                alt7=1;
+                }
+                break;
+            case K_LT: ;
+                {
+                alt7=2;
+                }
+                break;
+            case K_PLUS: ;
+                {
+                alt7=3;
+                }
+                break;
+            case K_EQ: ;
+                {
+                alt7=4;
+                }
+                break;
+            case K_ID: ;
+            case K_INT: ;
+                {
+                alt7=5;
+                }
+                break;
+
+        default: ;
+            NoViableAltException *nvae = [NoViableAltException newException:7 state:0 stream:input];
+            nvae.c = charLA7;
+            @throw nvae;
+
+        }
+
+        switch (alt7) {
+            case 1 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:59:9: ^( K_EQEQ expr expr ) // alt
+                {
+
+
+                [self match:input TokenType:K_EQEQ Follow:FOLLOW_K_EQEQ_in_expr362];
+
+                    [self match:input TokenType:DOWN Follow:nil];
+
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_expr_in_expr364];
+                    [self expr];
+
+                    [self popFollow];
+
+
+
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_expr_in_expr366];
+                    [self expr];
+
+                    [self popFollow];
+
+
+
+                    [self match:input TokenType:UP Follow:nil];
+
+
+                }
+                break;
+            case 2 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:60:9: ^( K_LT expr expr ) // alt
+                {
+
+
+                [self match:input TokenType:K_LT Follow:FOLLOW_K_LT_in_expr378];
+
+                    [self match:input TokenType:DOWN Follow:nil];
+
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_expr_in_expr380];
+                    [self expr];
+
+                    [self popFollow];
+
+
+
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_expr_in_expr382];
+                    [self expr];
+
+                    [self popFollow];
+
+
+
+                    [self match:input TokenType:UP Follow:nil];
+
+
+                }
+                break;
+            case 3 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:61:9: ^( K_PLUS expr expr ) // alt
+                {
+
+
+                [self match:input TokenType:K_PLUS Follow:FOLLOW_K_PLUS_in_expr394];
+
+                    [self match:input TokenType:DOWN Follow:nil];
+
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_expr_in_expr396];
+                    [self expr];
+
+                    [self popFollow];
+
+
+
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_expr_in_expr398];
+                    [self expr];
+
+                    [self popFollow];
+
+
+
+                    [self match:input TokenType:UP Follow:nil];
+
+
+                }
+                break;
+            case 4 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:62:9: ^( K_EQ K_ID e= expr ) // alt
+                {
+
+
+                [self match:input TokenType:K_EQ Follow:FOLLOW_K_EQ_in_expr410];
+
+                    [self match:input TokenType:DOWN Follow:nil];
+
+                    K_ID1=(CommonTree *)[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_expr412];
+
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_expr_in_expr416];
+                    e = [self expr];
+
+                    [self popFollow];
+
+
+
+                    [self match:input TokenType:UP Follow:nil];
+
+
+
+                 NSLog(@"assigning %@ to variable %@", (e!=nil?[[input getTokenStream] toStringFromStart:[[input getTreeAdaptor] getTokenStartIndex:[e getStart]]ToEnd:[[input getTreeAdaptor] getTokenStopIndex:[e getStart]]]:0), (K_ID1!=nil?K_ID1.text:nil));
+
+
+                }
+                break;
+            case 5 : ;
+                // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:63:9: atom // alt
+                {
+
+                /* ruleRef */
+                [self pushFollow:FOLLOW_atom_in_expr429];
+                [self atom];
+
+                [self popFollow];
+
+
+
+                }
+                break;
+
+        }
+        /* token+rule list labels */
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return retval;
+}
+/* $ANTLR end expr */
+
+/*
+ * $ANTLR start atom
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:66:1: atom : ( K_ID | K_INT );
+ */
+- (void) atom
+{
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */
+
+    @try {
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g:67:5: ( K_ID | K_INT ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.g: // alt
+        {
+
+        if ((([input LA:1] >= K_ID) && ([input LA:1] <= K_INT))) {
+            [input consume];
+            [state setIsErrorRecovery:NO];
+        } else {
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
+            @throw mse;
+        }
+
+
+        }
+
+        /* token+rule list labels */
+
+    }
+    @catch (RecognitionException *re) {
+        [self reportError:re];
+        [self recover:input Exception:re];
+    }
+
+    @finally {
+        /* ruleScopeCleanUp */
+
+    }
+    return ;
+}
+/* $ANTLR end atom */
+/* ObjC end rules */
+
+@end /* end of SimpleCWalker implementation line 692 */
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.tokens b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.tokens
new file mode 100644
index 0000000..965ef1f
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/simplecTreeParser/SimpleCWalker.tokens
@@ -0,0 +1,23 @@
+ARG_DEF=4
+BLOCK=5
+FUNC_DECL=6
+FUNC_DEF=7
+FUNC_HDR=8
+K_CHAR=9
+K_COMMA=10
+K_EQ=11
+K_EQEQ=12
+K_FOR=13
+K_ID=14
+K_INT=15
+K_INT_TYPE=16
+K_LCURLY=17
+K_LCURVE=18
+K_LT=19
+K_PLUS=20
+K_RCURLY=21
+K_RCURVE=22
+K_SEMICOLON=23
+K_VOID=24
+VAR_DEF=25
+WS=26
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/antlr3.h b/runtime/ObjC/Framework/examples/simplecTreeParser/antlr3.h
deleted file mode 100644
index 4f16279..0000000
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/antlr3.h
+++ /dev/null
@@ -1,79 +0,0 @@
-#import <ANTLR/ANTLRBaseMapElement.h>
-#import <ANTLR/ANTLRBaseRecognizer.h>
-#import <ANTLR/ANTLRBaseStack.h>
-#import <ANTLR/ANTLRBaseTree.h>
-#import <ANTLR/ANTLRBaseTreeAdaptor.h>
-#import <ANTLR/ANTLRBitSet.h>
-#import <ANTLR/ANTLRBufferedTokenStream.h>
-#import <ANTLR/ANTLRBufferedTreeNodeStream.h>
-#import <ANTLR/ANTLRCharStream.h>
-#import <ANTLR/ANTLRCharStreamState.h>
-#import <ANTLR/ANTLRCommonErrorNode.h>
-#import <ANTLR/ANTLRCommonToken.h>
-#import <ANTLR/ANTLRCommonTokenStream.h>
-#import <ANTLR/ANTLRCommonTree.h>
-#import <ANTLR/ANTLRCommonTreeAdaptor.h>
-#import <ANTLR/ANTLRCommonTreeNodeStream.h>
-#import <ANTLR/ANTLRDFA.h>
-#import <ANTLR/ANTLRDebug.h>
-#import <ANTLR/ANTLRDebugEventProxy.h>
-#import <ANTLR/ANTLRDebugEventListener.h>
-#import <ANTLR/ANTLRDebugParser.h>
-#import <ANTLR/ANTLRDebugTokenStream.h>
-#import <ANTLR/ANTLRDebugTreeAdaptor.h>
-#import <ANTLR/ANTLRDebugTreeNodeStream.h>
-#import <ANTLR/ANTLRDebugTreeParser.h>
-#import <ANTLR/ANTLREarlyExitException.h>
-#import <ANTLR/ANTLRError.h>
-#import <ANTLR/ANTLRFailedPredicateException.h>
-#import <ANTLR/ANTLRFastQueue.h>
-#import <ANTLR/ANTLRHashMap.h>
-#import <ANTLR/ANTLRHashRule.h>
-#import <ANTLR/ANTLRIntArray.h>
-#import <ANTLR/ANTLRIntStream.h>
-#import <ANTLR/ANTLRLexer.h>
-#import <ANTLR/ANTLRLexerRuleReturnScope.h>
-#import <ANTLR/ANTLRLinkBase.h>
-#import <ANTLR/ANTLRLookaheadStream.h>
-#import <ANTLR/ANTLRMapElement.h>
-#import <ANTLR/ANTLRMap.h>
-#import <ANTLR/ANTLRMismatchedNotSetException.h>
-#import <ANTLR/ANTLRMismatchedRangeException.h>
-#import <ANTLR/ANTLRMismatchedSetException.h>
-#import <ANTLR/ANTLRMismatchedTokenException.h>
-#import <ANTLR/ANTLRMismatchedTreeNodeException.h>
-#import <ANTLR/ANTLRMissingTokenException.h>
-#import <ANTLR/ANTLRNodeMapElement.h>
-#import <ANTLR/ANTLRNoViableAltException.h>
-#import <ANTLR/ANTLRParser.h>
-#import <ANTLR/ANTLRParserRuleReturnScope.h>
-#import <ANTLR/ANTLRPtrBuffer.h>
-#import <ANTLR/ANTLRRecognitionException.h>
-#import <ANTLR/ANTLRRecognizerSharedState.h>
-#import <ANTLR/ANTLRRewriteRuleElementStream.h>
-#import <ANTLR/ANTLRRewriteRuleSubtreeStream.h>
-#import <ANTLR/ANTLRRewriteRuleTokenStream.h>
-#import <ANTLR/ANTLRRuleMemo.h>
-#import <ANTLR/ANTLRRuleStack.h>
-#import <ANTLR/ANTLRRuleReturnScope.h>
-#import <ANTLR/ANTLRRuntimeException.h>
-#import <ANTLR/ANTLRStreamEnumerator.h>
-#import <ANTLR/ANTLRStringStream.h>
-#import <ANTLR/ANTLRSymbolStack.h>
-#import <ANTLR/ANTLRToken+DebuggerSupport.h>
-#import <ANTLR/ANTLRToken.h>
-#import <ANTLR/ANTLRTokenRewriteStream.h>
-#import <ANTLR/ANTLRTokenSource.h>
-#import <ANTLR/ANTLRTokenStream.h>
-#import <ANTLR/ANTLRTree.h>
-#import <ANTLR/ANTLRTreeAdaptor.h>
-#import <ANTLR/ANTLRTreeException.h>
-#import <ANTLR/ANTLRTreeIterator.h>
-#import <ANTLR/ANTLRTreeNodeStream.h>
-#import <ANTLR/ANTLRTreeParser.h>
-#import <ANTLR/ANTLRTreeRuleReturnScope.h>
-#import <ANTLR/ANTLRUnbufferedTokenStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStreamState.h>
-#import <ANTLR/ANTLRUniqueIDMap.h>
-#import <ANTLR/ANTLRUnwantedTokenException.h>
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/main.m b/runtime/ObjC/Framework/examples/simplecTreeParser/main.m
index f735ac3..0cc7397 100644
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/main.m
+++ b/runtime/ObjC/Framework/examples/simplecTreeParser/main.m
@@ -1,5 +1,5 @@
#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
+#import <ANTLR/ANTLR.h>
#import "SimpleCLexer.h"
#import "SimpleCParser.h"
#import "SimpleCWalker.h"
@@ -9,7 +9,7 @@
int main(int argc, const char * argv[]) {
NSError *anError;
NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
-    char *inp = "/Users/acondit/source/antlr3/acondit_localhost/code/antlr/antlr3-main/runtime/ObjC/Framework/examples/simplecTreeParser/input";
+    char *inp = "/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/simplecTreeParser/input";

/*
if (argc < 2) {
@@ -34,14 +34,14 @@ int main(int argc, const char * argv[]) {

// For fun, you could print all tokens the lexer recognized, but we can only do it once. After that
// we would need to reset the lexer, and lex again.
-//    id<ANTLRToken> currentToken;
-//    while ((currentToken = [lexer nextToken]) && [currentToken type] != ANTLRTokenTypeEOF) {
+//    id<Token> currentToken;
+//    while ((currentToken = [lexer nextToken]) && [currentToken type] != TokenTypeEOF) {
//        NSLog(@"%@", currentToken);
//    }
//	  [lexer reset];

// Since the parser needs to scan back and forth over the tokens, we put them into a stream, too.
-	ANTLRCommonTokenStream *tokenStream = [ANTLRCommonTokenStream newANTLRCommonTokenStreamWithTokenSource:lexer];
+	CommonTokenStream *tokenStream = [CommonTokenStream newCommonTokenStreamWithTokenSource:lexer];

// Construct a parser and feed it the token stream.
SimpleCParser *parser = [[SimpleCParser alloc] initWithTokenStream:tokenStream];
@@ -52,14 +52,14 @@ int main(int argc, const char * argv[]) {
// initialized when you call a specific parser rule).
// This is a simple example, so we just call the top-most rule 'program'.
// Since we want to parse the AST the parser builds, we just ask the returned object for that.
-	ANTLRCommonTree *program_tree = [[parser program] getTree];
+	CommonTree *program_tree = [[parser program] getTree];

NSLog(@"Reached end of first parse\n");
// Print the matched tree as a Lisp-style string
NSLog(@"tree: %@", [program_tree treeDescription]);

// Create a new tree node stream that's feeding off of the root node (thus seeing the whole tree)
-	ANTLRCommonTreeNodeStream *treeStream = [ANTLRCommonTreeNodeStream newANTLRCommonTreeNodeStream:program_tree];
+	CommonTreeNodeStream *treeStream = [CommonTreeNodeStream newCommonTreeNodeStream:program_tree];
// tell the TreeNodeStream where the tokens originally came from, so we can retrieve arbitrary tokens and their text.
[treeStream setTokenStream:tokenStream];

diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleC.tokens b/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleC.tokens
deleted file mode 100644
index 6d06db9..0000000
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleC.tokens
+++ /dev/null
@@ -1,29 +0,0 @@
-K_ID=10
-T__26=26
-T__25=25
-T__24=24
-T__23=23
-K_EQEQ=16
-T__22=22
-K_INT=11
-T__21=21
-K_FOR=14
-FUNC_HDR=6
-FUNC_DEF=8
-K_INT_TYPE=19
-FUNC_DECL=7
-ARG_DEF=5
-WS=20
-K_EQ=15
-BLOCK=9
-K_LT=17
-K_CHAR=12
-K_VOID=13
-VAR_DEF=4
-K_PLUS=18
-';'=21
-'}'=26
-'('=22
-','=23
-')'=24
-'{'=25
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCLexer.h b/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCLexer.h
deleted file mode 100644
index 6972a44..0000000
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCLexer.h
+++ /dev/null
@@ -1,75 +0,0 @@
-// $ANTLR 3.2 Aug 23, 2010 07:48:06 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g 2010-08-23 07:54:47
-
-/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
- */
-#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
-/* End of standard antlr3 runtime definitions
- * =============================================================================
- */
-
-/* Start cyclicDFAInterface */
-#pragma mark Cyclic DFA interface start DFA4
-@interface DFA4 : ANTLRDFA {
-}
-+ newDFA4WithRecognizer:(ANTLRBaseRecognizer *)theRecognizer;
-- initWithRecognizer:(ANTLRBaseRecognizer *)recognizer;
-@end /* end of DFA4 interface  */
-
-#pragma mark Cyclic DFA interface end DFA4
-
-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
-#pragma mark Tokens
-#define K_ID 10
-#define T__26 26
-#define T__25 25
-#define T__24 24
-#define T__23 23
-#define K_EQEQ 16
-#define T__22 22
-#define K_INT 11
-#define T__21 21
-#define K_FOR 14
-#define FUNC_HDR 6
-#define FUNC_DEF 8
-#define EOF -1
-#define K_INT_TYPE 19
-#define FUNC_DECL 7
-#define ARG_DEF 5
-#define WS 20
-#define K_EQ 15
-#define BLOCK 9
-#define K_LT 17
-#define K_CHAR 12
-#define K_VOID 13
-#define VAR_DEF 4
-#define K_PLUS 18
-@interface SimpleCLexer : ANTLRLexer { // line 283
-DFA4 *dfa4;
-// start of actions.lexer.memVars
-// start of action-actionScope-memVars
-}
-+ (SimpleCLexer *)newSimpleCLexer:(id<ANTLRCharStream>)anInput;
-
-- (void)mT__21;
-- (void)mT__22;
-- (void)mT__23;
-- (void)mT__24;
-- (void)mT__25;
-- (void)mT__26;
-- (void)mK_FOR;
-- (void)mK_INT_TYPE;
-- (void)mK_CHAR;
-- (void)mK_VOID;
-- (void)mK_ID;
-- (void)mK_INT;
-- (void)mK_EQ;
-- (void)mK_EQEQ;
-- (void)mK_LT;
-- (void)mK_PLUS;
-- (void)mWS;
-- (void)mTokens;
-
-@end /* end of SimpleCLexer interface */
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCLexer.java b/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCLexer.java
deleted file mode 100644
index e8e76fa..0000000
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCLexer.java
+++ /dev/null
@@ -1,730 +0,0 @@
-// $ANTLR 3.2 Aug 13, 2010 19:41:25 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g 2010-08-13 19:42:18
-
-import org.antlr.runtime.*;
-import java.util.Stack;
-import java.util.List;
-import java.util.ArrayList;
-
-public class SimpleCLexer extends Lexer {
-    public static final int LT=18;
-    public static final int T__26=26;
-    public static final int T__25=25;
-    public static final int T__24=24;
-    public static final int T__23=23;
-    public static final int T__22=22;
-    public static final int T__21=21;
-    public static final int CHAR=15;
-    public static final int FOR=13;
-    public static final int FUNC_HDR=6;
-    public static final int INT=12;
-    public static final int FUNC_DEF=8;
-    public static final int INT_TYPE=14;
-    public static final int ID=10;
-    public static final int EOF=-1;
-    public static final int FUNC_DECL=7;
-    public static final int ARG_DEF=5;
-    public static final int WS=20;
-    public static final int BLOCK=9;
-    public static final int PLUS=19;
-    public static final int VOID=16;
-    public static final int EQ=11;
-    public static final int VAR_DEF=4;
-    public static final int EQEQ=17;
-
-    // delegates
-    // delegators
-
-    public SimpleCLexer() {;}
-    public SimpleCLexer(CharStream input) {
-        this(input, new RecognizerSharedState());
-    }
-    public SimpleCLexer(CharStream input, RecognizerSharedState state) {
-        super(input,state);
-
-    }
-    public String getGrammarFileName() { return "/usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g"; }
-
-    // $ANTLR start "T__21"
-    public final void mT__21() throws RecognitionException {
-        try {
-            int _type = T__21;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:7:7: ( ';' )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:7:9: ';'
-            {
-            match(';');
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "T__21"
-
-    // $ANTLR start "T__22"
-    public final void mT__22() throws RecognitionException {
-        try {
-            int _type = T__22;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:8:7: ( '(' )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:8:9: '('
-            {
-            match('(');
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "T__22"
-
-    // $ANTLR start "T__23"
-    public final void mT__23() throws RecognitionException {
-        try {
-            int _type = T__23;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:9:7: ( ',' )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:9:9: ','
-            {
-            match(',');
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "T__23"
-
-    // $ANTLR start "T__24"
-    public final void mT__24() throws RecognitionException {
-        try {
-            int _type = T__24;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:10:7: ( ')' )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:10:9: ')'
-            {
-            match(')');
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "T__24"
-
-    // $ANTLR start "T__25"
-    public final void mT__25() throws RecognitionException {
-        try {
-            int _type = T__25;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:11:7: ( '{' )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:11:9: '{'
-            {
-            match('{');
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "T__25"
-
-    // $ANTLR start "T__26"
-    public final void mT__26() throws RecognitionException {
-        try {
-            int _type = T__26;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:12:7: ( '}' )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:12:9: '}'
-            {
-            match('}');
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "T__26"
-
-    // $ANTLR start "FOR"
-    public final void mFOR() throws RecognitionException {
-        try {
-            int _type = FOR;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:91:5: ( 'for' )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:91:7: 'for'
-            {
-            match("for");
-
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "FOR"
-
-    // $ANTLR start "INT_TYPE"
-    public final void mINT_TYPE() throws RecognitionException {
-        try {
-            int _type = INT_TYPE;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:92:10: ( 'int' )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:92:12: 'int'
-            {
-            match("int");
-
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "INT_TYPE"
-
-    // $ANTLR start "CHAR"
-    public final void mCHAR() throws RecognitionException {
-        try {
-            int _type = CHAR;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:93:5: ( 'char' )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:93:7: 'char'
-            {
-            match("char");
-
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "CHAR"
-
-    // $ANTLR start "VOID"
-    public final void mVOID() throws RecognitionException {
-        try {
-            int _type = VOID;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:94:5: ( 'void' )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:94:7: 'void'
-            {
-            match("void");
-
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "VOID"
-
-    // $ANTLR start "ID"
-    public final void mID() throws RecognitionException {
-        try {
-            int _type = ID;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:96:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:96:9: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
-            {
-            if ( (input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {
-                input.consume();
-
-            }
-            else {
-                MismatchedSetException mse = new MismatchedSetException(null,input);
-                recover(mse);
-                throw mse;}
-
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:96:33: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
-            loop1:
-            do {
-                int alt1=2;
-                int LA1_0 = input.LA(1);
-
-                if ( ((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')) ) {
-                    alt1=1;
-                }
-
-
-                switch (alt1) {
-            	case 1 :
-            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:
-            	    {
-            	    if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z') ) {
-            	        input.consume();
-
-            	    }
-            	    else {
-            	        MismatchedSetException mse = new MismatchedSetException(null,input);
-            	        recover(mse);
-            	        throw mse;}
-
-
-            	    }
-            	    break;
-
-            	default :
-            	    break loop1;
-                }
-            } while (true);
-
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "ID"
-
-    // $ANTLR start "INT"
-    public final void mINT() throws RecognitionException {
-        try {
-            int _type = INT;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            CommonToken int=null;
-            List list_int=null;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:5: ( (int+= ( '0' .. '9' ) )+ )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:7: (int+= ( '0' .. '9' ) )+
-            {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:10: (int+= ( '0' .. '9' ) )+
-            int cnt2=0;
-            loop2:
-            do {
-                int alt2=2;
-                int LA2_0 = input.LA(1);
-
-                if ( ((LA2_0>='0' && LA2_0<='9')) ) {
-                    alt2=1;
-                }
-
-
-                switch (alt2) {
-            	case 1 :
-            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:10: int+= ( '0' .. '9' )
-            	    {
-            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:12: ( '0' .. '9' )
-            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:13: '0' .. '9'
-            	    {
-            	    matchRange('0','9');
-
-            	    }
-
-
-            	    }
-            	    break;
-
-            	default :
-            	    if ( cnt2 >= 1 ) break loop2;
-                        EarlyExitException eee =
-                            new EarlyExitException(2, input);
-                        throw eee;
-                }
-                cnt2++;
-            } while (true);
-
-            NSLog(@"%@", list_int);
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "INT"
-
-    // $ANTLR start "EQ"
-    public final void mEQ() throws RecognitionException {
-        try {
-            int _type = EQ;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:102:6: ( '=' )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:102:8: '='
-            {
-            match('=');
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "EQ"
-
-    // $ANTLR start "EQEQ"
-    public final void mEQEQ() throws RecognitionException {
-        try {
-            int _type = EQEQ;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:103:6: ( '==' )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:103:8: '=='
-            {
-            match("==");
-
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "EQEQ"
-
-    // $ANTLR start "LT"
-    public final void mLT() throws RecognitionException {
-        try {
-            int _type = LT;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:104:6: ( '<' )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:104:8: '<'
-            {
-            match('<');
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "LT"
-
-    // $ANTLR start "PLUS"
-    public final void mPLUS() throws RecognitionException {
-        try {
-            int _type = PLUS;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:105:6: ( '+' )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:105:8: '+'
-            {
-            match('+');
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "PLUS"
-
-    // $ANTLR start "WS"
-    public final void mWS() throws RecognitionException {
-        try {
-            int _type = WS;
-            int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:107:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:107:9: ( ' ' | '\\t' | '\\r' | '\\n' )+
-            {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:107:9: ( ' ' | '\\t' | '\\r' | '\\n' )+
-            int cnt3=0;
-            loop3:
-            do {
-                int alt3=2;
-                int LA3_0 = input.LA(1);
-
-                if ( ((LA3_0>='\t' && LA3_0<='\n')||LA3_0=='\r'||LA3_0==' ') ) {
-                    alt3=1;
-                }
-
-
-                switch (alt3) {
-            	case 1 :
-            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:
-            	    {
-            	    if ( (input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ' ) {
-            	        input.consume();
-
-            	    }
-            	    else {
-            	        MismatchedSetException mse = new MismatchedSetException(null,input);
-            	        recover(mse);
-            	        throw mse;}
-
-
-            	    }
-            	    break;
-
-            	default :
-            	    if ( cnt3 >= 1 ) break loop3;
-                        EarlyExitException eee =
-                            new EarlyExitException(3, input);
-                        throw eee;
-                }
-                cnt3++;
-            } while (true);
-
-             _channel=99;
-
-            }
-
-            state.type = _type;
-            state.channel = _channel;
-        }
-        finally {
-        }
-    }
-    // $ANTLR end "WS"
-
-    public void mTokens() throws RecognitionException {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:8: ( T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | FOR | INT_TYPE | CHAR | VOID | ID | INT | EQ | EQEQ | LT | PLUS | WS )
-        int alt4=17;
-        alt4 = dfa4.predict(input);
-        switch (alt4) {
-            case 1 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:10: T__21
-                {
-                mT__21();
-
-                }
-                break;
-            case 2 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:16: T__22
-                {
-                mT__22();
-
-                }
-                break;
-            case 3 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:22: T__23
-                {
-                mT__23();
-
-                }
-                break;
-            case 4 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:28: T__24
-                {
-                mT__24();
-
-                }
-                break;
-            case 5 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:34: T__25
-                {
-                mT__25();
-
-                }
-                break;
-            case 6 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:40: T__26
-                {
-                mT__26();
-
-                }
-                break;
-            case 7 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:46: FOR
-                {
-                mFOR();
-
-                }
-                break;
-            case 8 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:50: INT_TYPE
-                {
-                mINT_TYPE();
-
-                }
-                break;
-            case 9 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:59: CHAR
-                {
-                mCHAR();
-
-                }
-                break;
-            case 10 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:64: VOID
-                {
-                mVOID();
-
-                }
-                break;
-            case 11 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:69: ID
-                {
-                mID();
-
-                }
-                break;
-            case 12 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:72: INT
-                {
-                mINT();
-
-                }
-                break;
-            case 13 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:76: EQ
-                {
-                mEQ();
-
-                }
-                break;
-            case 14 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:79: EQEQ
-                {
-                mEQEQ();
-
-                }
-                break;
-            case 15 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:84: LT
-                {
-                mLT();
-
-                }
-                break;
-            case 16 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:87: PLUS
-                {
-                mPLUS();
-
-                }
-                break;
-            case 17 :
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:92: WS
-                {
-                mWS();
-
-                }
-                break;
-
-        }
-
-    }
-
-
-    protected DFA4 dfa4 = new DFA4(this);
-    static final String DFA4_eotS =
-        "\7\uffff\4\13\2\uffff\1\26\3\uffff\4\13\2\uffff\1\33\1\34\2\13\2"+
-        "\uffff\1\37\1\40\2\uffff";
-    static final String DFA4_eofS =
-        "\41\uffff";
-    static final String DFA4_minS =
-        "\1\11\6\uffff\1\157\1\156\1\150\1\157\2\uffff\1\75\3\uffff\1\162"+
-        "\1\164\1\141\1\151\2\uffff\2\60\1\162\1\144\2\uffff\2\60\2\uffff";
-    static final String DFA4_maxS =
-        "\1\175\6\uffff\1\157\1\156\1\150\1\157\2\uffff\1\75\3\uffff\1\162"+
-        "\1\164\1\141\1\151\2\uffff\2\172\1\162\1\144\2\uffff\2\172\2\uffff";
-    static final String DFA4_acceptS =
-        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\4\uffff\1\13\1\14\1\uffff\1\17"+
-        "\1\20\1\21\4\uffff\1\16\1\15\4\uffff\1\7\1\10\2\uffff\1\11\1\12";
-    static final String DFA4_specialS =
-        "\41\uffff}>";
-    static final String[] DFA4_transitionS = {
-            "\2\20\2\uffff\1\20\22\uffff\1\20\7\uffff\1\2\1\4\1\uffff\1\17"+
-            "\1\3\3\uffff\12\14\1\uffff\1\1\1\16\1\15\3\uffff\32\13\4\uffff"+
-            "\1\13\1\uffff\2\13\1\11\2\13\1\7\2\13\1\10\14\13\1\12\4\13\1"+
-            "\5\1\uffff\1\6",
-            "",
-            "",
-            "",
-            "",
-            "",
-            "",
-            "\1\21",
-            "\1\22",
-            "\1\23",
-            "\1\24",
-            "",
-            "",
-            "\1\25",
-            "",
-            "",
-            "",
-            "\1\27",
-            "\1\30",
-            "\1\31",
-            "\1\32",
-            "",
-            "",
-            "\12\13\7\uffff\32\13\4\uffff\1\13\1\uffff\32\13",
-            "\12\13\7\uffff\32\13\4\uffff\1\13\1\uffff\32\13",
-            "\1\35",
-            "\1\36",
-            "",
-            "",
-            "\12\13\7\uffff\32\13\4\uffff\1\13\1\uffff\32\13",
-            "\12\13\7\uffff\32\13\4\uffff\1\13\1\uffff\32\13",
-            "",
-            ""
-    };
-
-    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
-    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
-    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
-    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
-    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
-    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
-    static final short[][] DFA4_transition;
-
-    static {
-        int numStates = DFA4_transitionS.length;
-        DFA4_transition = new short[numStates][];
-        for (int i=0; i<numStates; i++) {
-            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
-        }
-    }
-
-    class DFA4 extends DFA {
-
-        public DFA4(BaseRecognizer recognizer) {
-            this.recognizer = recognizer;
-            this.decisionNumber = 4;
-            this.eot = DFA4_eot;
-            this.eof = DFA4_eof;
-            this.min = DFA4_min;
-            this.max = DFA4_max;
-            this.accept = DFA4_accept;
-            this.special = DFA4_special;
-            this.transition = DFA4_transition;
-        }
-        public String getDescription() {
-            return "1:1: Tokens : ( T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | FOR | INT_TYPE | CHAR | VOID | ID | INT | EQ | EQEQ | LT | PLUS | WS );";
-        }
-    }
-
-
-}
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCLexer.m b/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCLexer.m
deleted file mode 100644
index f8d4cfe..0000000
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCLexer.m
+++ /dev/null
@@ -1,985 +0,0 @@
-/** \file
- *  This OBJC source file was generated by $ANTLR version 3.2 Aug 23, 2010 07:48:06
- *
- *     -  From the grammar source file : /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g
- *     -                            On : 2010-08-23 07:54:47
- *     -                 for the lexer : SimpleCLexerLexer *
- * Editing it, at least manually, is not wise.
- *
- * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
- *
- *
-*/
-// [The "BSD licence"]
-// Copyright (c) 2010 Alan Condit
-//
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. The name of the author may not be used to endorse or promote products
-//    derived from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// $ANTLR 3.2 Aug 23, 2010 07:48:06 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g 2010-08-23 07:54:47
-
-/* -----------------------------------------
- * Include the ANTLR3 generated header file.
- */
-#import "SimpleCLexer.h"
-/* ----------------------------------------- */
-
-
-/* ============================================================================= */
-
-/* =============================================================================
- * Start of recognizer
- */
-
-#pragma mark Cyclic DFA implementation start DFA4
-@implementation DFA4
-const static NSInteger dfa4_eot[33] =
-    {-1,-1,-1,-1,-1,-1,-1,11,11,11,11,-1,-1,22,-1,-1,-1,11,11,11,11,-1,-1,
-     27,28,11,11,-1,-1,31,32,-1,-1};
-const static NSInteger dfa4_eof[33] =
-    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static unichar dfa4_min[33] =
-    {9,0,0,0,0,0,0,111,110,104,111,0,0,61,0,0,0,114,116,97,105,0,0,48,48,
-     114,100,0,0,48,48,0,0};
-const static unichar dfa4_max[33] =
-    {125,0,0,0,0,0,0,111,110,104,111,0,0,61,0,0,0,114,116,97,105,0,0,122,
-     122,114,100,0,0,122,122,0,0};
-const static NSInteger dfa4_accept[33] =
-    {-1,1,2,3,4,5,6,-1,-1,-1,-1,11,12,-1,15,16,17,-1,-1,-1,-1,14,13,-1,-1,
-     -1,-1,7,8,-1,-1,9,10};
-const static NSInteger dfa4_special[33] =
-    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static NSInteger dfa4_transition[] = {};
-const static NSInteger dfa4_transition0[] = {24};
-const static NSInteger dfa4_transition1[] = {26};
-const static NSInteger dfa4_transition2[] = {29};
-const static NSInteger dfa4_transition3[] = {20};
-const static NSInteger dfa4_transition4[] = {25};
-const static NSInteger dfa4_transition5[] = {16, 16, -1, -1, 16, -1, -1,
- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1,
- -1, -1, -1, -1, -1, -1, 2, 4, -1, 15, 3, -1, -1, -1, 12, 12, 12, 12, 12,
- 12, 12, 12, 12, 12, -1, 1, 14, 13, -1, -1, -1, 11, 11, 11, 11, 11, 11,
- 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
- 11, 11, -1, -1, -1, -1, 11, -1, 11, 11, 9, 11, 11, 7, 11, 11, 8, 11, 11,
- 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 5, -1, 6};
-const static NSInteger dfa4_transition6[] = {21};
-const static NSInteger dfa4_transition7[] = {11, 11, 11, 11, 11, 11, 11,
- 11, 11, 11, -1, -1, -1, -1, -1, -1, -1, 11, 11, 11, 11, 11, 11, 11, 11,
- 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
- -1, -1, -1, -1, 11, -1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
- 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11};
-const static NSInteger dfa4_transition8[] = {18};
-const static NSInteger dfa4_transition9[] = {19};
-const static NSInteger dfa4_transition10[] = {23};
-const static NSInteger dfa4_transition11[] = {17};
-const static NSInteger dfa4_transition12[] = {30};
-
-
-+ () newDFA4WithRecognizer:(ANTLRBaseRecognizer *)aRecognizer
-{
-    return [[[DFA4 alloc] initWithRecognizer:aRecognizer] retain];
-}
-
-- (id) initWithRecognizer:(ANTLRBaseRecognizer *) theRecognizer
-{
-    if ((self = [super initWithRecognizer:theRecognizer]) != nil) {
-        decisionNumber = 4;
-        eot = dfa4_eot;
-        eof = dfa4_eof;
-        min = dfa4_min;
-        max = dfa4_max;
-        accept = dfa4_accept;
-        special = dfa4_special;
-        if (!(transition = calloc(33, sizeof(void*)))) {
-            [self release];
-            return nil;
-        }
-        len = 33;
-        transition[0] = dfa4_transition5;
-        transition[1] = dfa4_transition;
-        transition[2] = dfa4_transition;
-        transition[3] = dfa4_transition;
-        transition[4] = dfa4_transition;
-        transition[5] = dfa4_transition;
-        transition[6] = dfa4_transition;
-        transition[7] = dfa4_transition11;
-        transition[8] = dfa4_transition8;
-        transition[9] = dfa4_transition9;
-        transition[10] = dfa4_transition3;
-        transition[11] = dfa4_transition;
-        transition[12] = dfa4_transition;
-        transition[13] = dfa4_transition6;
-        transition[14] = dfa4_transition;
-        transition[15] = dfa4_transition;
-        transition[16] = dfa4_transition;
-        transition[17] = dfa4_transition10;
-        transition[18] = dfa4_transition0;
-        transition[19] = dfa4_transition4;
-        transition[20] = dfa4_transition1;
-        transition[21] = dfa4_transition;
-        transition[22] = dfa4_transition;
-        transition[23] = dfa4_transition7;
-        transition[24] = dfa4_transition7;
-        transition[25] = dfa4_transition2;
-        transition[26] = dfa4_transition12;
-        transition[27] = dfa4_transition;
-        transition[28] = dfa4_transition;
-        transition[29] = dfa4_transition7;
-        transition[30] = dfa4_transition7;
-        transition[31] = dfa4_transition;
-        transition[32] = dfa4_transition;
-    }
-    return self;
-}
-
-- (void) dealloc
-{
-    free(transition);
-    [super dealloc];
-}
-
-- (NSString *) description
-{
-    return @"1:1: Tokens : ( T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | K_FOR | K_INT_TYPE | K_CHAR | K_VOID | K_ID | K_INT | K_EQ | K_EQEQ | K_LT | K_PLUS | WS );";
-}
-
-
-@end /* end DFA4 implementation */
-
-#pragma mark Cyclic DFA implementation end DFA4
-
-
-
-/** As per Terence: No returns for lexer rules!
-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
-*/
-@implementation SimpleCLexer // line 330
-
-+ (void) initialize
-{
-    [ANTLRBaseRecognizer setGrammarFileName:@"/usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g"];
-}
-
-+ (NSString *) tokenNameForType:(NSInteger)aTokenType
-{
-    return [[self getTokenNames] objectAtIndex:aTokenType];
-}
-
-+ (SimpleCLexer *)newSimpleCLexer:(id<ANTLRCharStream>)anInput
-{
-    return [[SimpleCLexer alloc] initWithCharStream:anInput];
-}
-
-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
-{
-    if ((self = [super initWithCharStream:anInput State:[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:18+1]]) != nil) {
-
-        dfa4 = [DFA4 newDFA4WithRecognizer:self];
-    }
-    return self;
-}
-
-- (void) dealloc
-{
-    [dfa4 release];
-    [super dealloc];
-}
-
-/* Start of actions.lexer.methods */
-/* start methods() */
-
-/* Start of Rules */
-// $ANTLR start "T__21"
-- (void) mT__21
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = T__21;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:7:7: ( ';' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:7:9: ';' // alt
-        {
-        [self matchChar:';'];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "T__21"
-
-// $ANTLR start "T__22"
-- (void) mT__22
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = T__22;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:8:7: ( '(' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:8:9: '(' // alt
-        {
-        [self matchChar:'('];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "T__22"
-
-// $ANTLR start "T__23"
-- (void) mT__23
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = T__23;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:9:7: ( ',' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:9:9: ',' // alt
-        {
-        [self matchChar:','];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "T__23"
-
-// $ANTLR start "T__24"
-- (void) mT__24
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = T__24;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:10:7: ( ')' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:10:9: ')' // alt
-        {
-        [self matchChar:')'];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "T__24"
-
-// $ANTLR start "T__25"
-- (void) mT__25
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = T__25;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:11:7: ( '{' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:11:9: '{' // alt
-        {
-        [self matchChar:'{'];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "T__25"
-
-// $ANTLR start "T__26"
-- (void) mT__26
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = T__26;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:12:7: ( '}' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:12:9: '}' // alt
-        {
-        [self matchChar:'}'];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "T__26"
-
-// $ANTLR start "K_FOR"
-- (void) mK_FOR
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = K_FOR;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:91:7: ( 'for' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:91:9: 'for' // alt
-        {
-        [self matchString:@"for"];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "K_FOR"
-
-// $ANTLR start "K_INT_TYPE"
-- (void) mK_INT_TYPE
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = K_INT_TYPE;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:92:12: ( 'int' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:92:14: 'int' // alt
-        {
-        [self matchString:@"int"];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "K_INT_TYPE"
-
-// $ANTLR start "K_CHAR"
-- (void) mK_CHAR
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = K_CHAR;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:93:7: ( 'char' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:93:9: 'char' // alt
-        {
-        [self matchString:@"char"];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "K_CHAR"
-
-// $ANTLR start "K_VOID"
-- (void) mK_VOID
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = K_VOID;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:94:7: ( 'void' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:94:9: 'void' // alt
-        {
-        [self matchString:@"void"];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "K_VOID"
-
-// $ANTLR start "K_ID"
-- (void) mK_ID
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = K_ID;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:96:7: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:96:11: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* // alt
-        {
-        if ((([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
-            [input consume];
-
-        } else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
-            [self recover:mse];
-            @throw mse;}
-          /* element() */
-        do {
-            NSInteger alt1=2;
-            NSInteger LA1_0 = [input LA:1];
-            if ( ((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')) ) {
-                alt1=1;
-            }
-
-
-            switch (alt1) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g: // alt
-                    {
-                    if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))||(([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
-                        [input consume];
-
-                    } else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
-                        [self recover:mse];
-                        @throw mse;}
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop1;
-            }
-        } while (YES);
-        loop1: ;
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "K_ID"
-
-// $ANTLR start "K_INT"
-- (void) mK_INT
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = K_INT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        id<ANTLRToken> *int=nil;
-        NSMutableArray *list_int=nil;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:7: ( (int+= ( '0' .. '9' ) )+ ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:9: (int+= ( '0' .. '9' ) )+ // alt
-        {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:12: (int+= ( '0' .. '9' ) )+ // positiveClosureBlock
-        NSInteger cnt2=0;
-        do {
-            NSInteger alt2=2;
-            NSInteger LA2_0 = [input LA:1];
-            if ( ((LA2_0>='0' && LA2_0<='9')) ) {
-                alt2=1;
-            }
-
-
-            switch (alt2) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:12: int+= ( '0' .. '9' ) // alt
-                    {
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:14: ( '0' .. '9' ) // blockSingleAlt
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:99:15: '0' .. '9' // alt
-                    {
-                    [self matchRangeFromChar:'0' to:'9'];   /* element() */
-                     /* elements */
-                    }
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    if ( cnt2 >= 1 )
-                        goto loop2;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:2];
-                    @throw eee;
-            }
-            cnt2++;
-        } while (YES);
-        loop2: ;
-          /* element() */
-        NSLog(@"%@", list_int);  /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-        [list_int release];
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "K_INT"
-
-// $ANTLR start "K_EQ"
-- (void) mK_EQ
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = K_EQ;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:102:8: ( '=' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:102:10: '=' // alt
-        {
-        [self matchChar:'='];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "K_EQ"
-
-// $ANTLR start "K_EQEQ"
-- (void) mK_EQEQ
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = K_EQEQ;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:103:8: ( '==' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:103:10: '==' // alt
-        {
-        [self matchString:@"=="];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "K_EQEQ"
-
-// $ANTLR start "K_LT"
-- (void) mK_LT
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = K_LT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:104:8: ( '<' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:104:10: '<' // alt
-        {
-        [self matchChar:'<'];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "K_LT"
-
-// $ANTLR start "K_PLUS"
-- (void) mK_PLUS
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = K_PLUS;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:105:8: ( '+' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:105:10: '+' // alt
-        {
-        [self matchChar:'+'];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "K_PLUS"
-
-// $ANTLR start "WS"
-- (void) mWS
-{
-    //
-    /* ruleScopeSetUp */
-
-    @try {
-        NSInteger _type = WS;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:107:5: ( ( ' ' | '\\t' | '\\r' | '\\n' )+ ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:107:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // alt
-        {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:107:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // positiveClosureBlock
-        NSInteger cnt3=0;
-        do {
-            NSInteger alt3=2;
-            NSInteger LA3_0 = [input LA:1];
-            if ( ((LA3_0>='\t' && LA3_0<='\n')||LA3_0=='\r'||LA3_0==' ') ) {
-                alt3=1;
-            }
-
-
-            switch (alt3) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g: // alt
-                    {
-                    if ((([input LA:1] >= '\t') && ([input LA:1] <= '\n'))||[input LA:1] == '\r'||[input LA:1] == ' ') {
-                        [input consume];
-
-                    } else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
-                        [self recover:mse];
-                        @throw mse;}
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    if ( cnt3 >= 1 )
-                        goto loop3;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:3];
-                    @throw eee;
-            }
-            cnt3++;
-        } while (YES);
-        loop3: ;
-          /* element() */
-         state.channel=99;   /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "WS"
-
-- (void) mTokens
-{
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:8: ( T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | K_FOR | K_INT_TYPE | K_CHAR | K_VOID | K_ID | K_INT | K_EQ | K_EQEQ | K_LT | K_PLUS | WS ) //ruleblock
-    NSInteger alt4=17;
-    alt4 = [dfa4 predict:input];
-    switch (alt4) {
-        case 1 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:10: T__21 // alt
-            {
-                [self mT__21];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 2 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:16: T__22 // alt
-            {
-                [self mT__22];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 3 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:22: T__23 // alt
-            {
-                [self mT__23];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 4 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:28: T__24 // alt
-            {
-                [self mT__24];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 5 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:34: T__25 // alt
-            {
-                [self mT__25];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 6 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:40: T__26 // alt
-            {
-                [self mT__26];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 7 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:46: K_FOR // alt
-            {
-                [self mK_FOR];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 8 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:52: K_INT_TYPE // alt
-            {
-                [self mK_INT_TYPE];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 9 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:63: K_CHAR // alt
-            {
-                [self mK_CHAR];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 10 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:70: K_VOID // alt
-            {
-                [self mK_VOID];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 11 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:77: K_ID // alt
-            {
-                [self mK_ID];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 12 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:82: K_INT // alt
-            {
-                [self mK_INT];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 13 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:88: K_EQ // alt
-            {
-                [self mK_EQ];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 14 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:93: K_EQEQ // alt
-            {
-                [self mK_EQEQ];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 15 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:100: K_LT // alt
-            {
-                [self mK_LT];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 16 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:105: K_PLUS // alt
-            {
-                [self mK_PLUS];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 17 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:1:112: WS // alt
-            {
-                [self mWS];
-              /* element() */
-             /* elements */
-            }
-            break;
-
-    }
-
-}
-
-@end /* end of SimpleCLexer implementation line 397 */
-
-/* End of code
- * =============================================================================
- */
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCParser.h b/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCParser.h
deleted file mode 100644
index 6d4f180..0000000
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCParser.h
+++ /dev/null
@@ -1,300 +0,0 @@
-// $ANTLR 3.2 Aug 23, 2010 07:48:06 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g 2010-08-23 07:54:46
-
-/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
- */
-#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
-/* End of standard antlr3 runtime definitions
- * =============================================================================
- */
-
-#pragma mark Cyclic DFA interface start DFA2
-@interface DFA2 : ANTLRDFA {
-}
-+ newDFA2WithRecognizer:(ANTLRBaseRecognizer *)theRecognizer;
-- initWithRecognizer:(ANTLRBaseRecognizer *)recognizer;
-@end /* end of DFA2 interface  */
-
-#pragma mark Cyclic DFA interface end DFA2
-#pragma mark Tokens
-#define K_ID 10
-#define T__26 26
-#define T__25 25
-#define T__24 24
-#define T__23 23
-#define K_EQEQ 16
-#define T__22 22
-#define K_INT 11
-#define T__21 21
-#define K_FOR 14
-#define FUNC_HDR 6
-#define FUNC_DEF 8
-#define EOF -1
-#define K_INT_TYPE 19
-#define FUNC_DECL 7
-#define ARG_DEF 5
-#define WS 20
-#define K_EQ 15
-#define BLOCK 9
-#define K_LT 17
-#define K_CHAR 12
-#define K_VOID 13
-#define VAR_DEF 4
-#define K_PLUS 18
-#pragma mark Dynamic Global Scopes
-#pragma mark Dynamic Rule Scopes
-#pragma mark Rule Return Scopes start
-@interface SimpleCParser_program_return :ANTLRParserRuleReturnScope { // line 1672
-/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (SimpleCParser_program_return *)newSimpleCParser_program_return;
-// this is start of set and get methods
-/* AST returnScopeInterface.methodsdecl */
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end /* end of returnScopeInterface interface */
-@interface SimpleCParser_declaration_return :ANTLRParserRuleReturnScope { // line 1672
-/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (SimpleCParser_declaration_return *)newSimpleCParser_declaration_return;
-// this is start of set and get methods
-/* AST returnScopeInterface.methodsdecl */
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end /* end of returnScopeInterface interface */
-@interface SimpleCParser_variable_return :ANTLRParserRuleReturnScope { // line 1672
-/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (SimpleCParser_variable_return *)newSimpleCParser_variable_return;
-// this is start of set and get methods
-/* AST returnScopeInterface.methodsdecl */
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end /* end of returnScopeInterface interface */
-@interface SimpleCParser_declarator_return :ANTLRParserRuleReturnScope { // line 1672
-/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (SimpleCParser_declarator_return *)newSimpleCParser_declarator_return;
-// this is start of set and get methods
-/* AST returnScopeInterface.methodsdecl */
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end /* end of returnScopeInterface interface */
-@interface SimpleCParser_functionHeader_return :ANTLRParserRuleReturnScope { // line 1672
-/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (SimpleCParser_functionHeader_return *)newSimpleCParser_functionHeader_return;
-// this is start of set and get methods
-/* AST returnScopeInterface.methodsdecl */
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end /* end of returnScopeInterface interface */
-@interface SimpleCParser_formalParameter_return :ANTLRParserRuleReturnScope { // line 1672
-/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (SimpleCParser_formalParameter_return *)newSimpleCParser_formalParameter_return;
-// this is start of set and get methods
-/* AST returnScopeInterface.methodsdecl */
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end /* end of returnScopeInterface interface */
-@interface SimpleCParser_type_return :ANTLRParserRuleReturnScope { // line 1672
-/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (SimpleCParser_type_return *)newSimpleCParser_type_return;
-// this is start of set and get methods
-/* AST returnScopeInterface.methodsdecl */
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end /* end of returnScopeInterface interface */
-@interface SimpleCParser_block_return :ANTLRParserRuleReturnScope { // line 1672
-/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (SimpleCParser_block_return *)newSimpleCParser_block_return;
-// this is start of set and get methods
-/* AST returnScopeInterface.methodsdecl */
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end /* end of returnScopeInterface interface */
-@interface SimpleCParser_stat_return :ANTLRParserRuleReturnScope { // line 1672
-/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (SimpleCParser_stat_return *)newSimpleCParser_stat_return;
-// this is start of set and get methods
-/* AST returnScopeInterface.methodsdecl */
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end /* end of returnScopeInterface interface */
-@interface SimpleCParser_forStat_return :ANTLRParserRuleReturnScope { // line 1672
-/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (SimpleCParser_forStat_return *)newSimpleCParser_forStat_return;
-// this is start of set and get methods
-/* AST returnScopeInterface.methodsdecl */
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end /* end of returnScopeInterface interface */
-@interface SimpleCParser_assignStat_return :ANTLRParserRuleReturnScope { // line 1672
-/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (SimpleCParser_assignStat_return *)newSimpleCParser_assignStat_return;
-// this is start of set and get methods
-/* AST returnScopeInterface.methodsdecl */
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end /* end of returnScopeInterface interface */
-@interface SimpleCParser_expr_return :ANTLRParserRuleReturnScope { // line 1672
-/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (SimpleCParser_expr_return *)newSimpleCParser_expr_return;
-// this is start of set and get methods
-/* AST returnScopeInterface.methodsdecl */
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end /* end of returnScopeInterface interface */
-@interface SimpleCParser_condExpr_return :ANTLRParserRuleReturnScope { // line 1672
-/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (SimpleCParser_condExpr_return *)newSimpleCParser_condExpr_return;
-// this is start of set and get methods
-/* AST returnScopeInterface.methodsdecl */
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end /* end of returnScopeInterface interface */
-@interface SimpleCParser_aexpr_return :ANTLRParserRuleReturnScope { // line 1672
-/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (SimpleCParser_aexpr_return *)newSimpleCParser_aexpr_return;
-// this is start of set and get methods
-/* AST returnScopeInterface.methodsdecl */
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end /* end of returnScopeInterface interface */
-@interface SimpleCParser_atom_return :ANTLRParserRuleReturnScope { // line 1672
-/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (SimpleCParser_atom_return *)newSimpleCParser_atom_return;
-// this is start of set and get methods
-/* AST returnScopeInterface.methodsdecl */
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end /* end of returnScopeInterface interface */
-
-#pragma mark Rule return scopes end
-@interface SimpleCParser : ANTLRParser { // line 529
-// start of globalAttributeScopeMemVar
-
-
-// start of action-actionScope-memVars
-// start of ruleAttributeScopeMemVar
-
-
-// Start of memVars
-/* AST parserHeaderFile.memVars */
-/* AST parsermemVars */
-id<ANTLRTreeAdaptor> treeAdaptor;
-
-DFA2 *dfa2;
- }
-
-// start of action-actionScope-methodsDecl
-
-/* AST parserHeaderFile.methodsdecl */
-/* AST parserMethodsDecl */
-- (id<ANTLRTreeAdaptor>) getTreeAdaptor;
-- (void) setTreeAdaptor:(id<ANTLRTreeAdaptor>)theTreeAdaptor;
-
-- (SimpleCParser_program_return *)program;
-- (SimpleCParser_declaration_return *)declaration;
-- (SimpleCParser_variable_return *)variable;
-- (SimpleCParser_declarator_return *)declarator;
-- (SimpleCParser_functionHeader_return *)functionHeader;
-- (SimpleCParser_formalParameter_return *)formalParameter;
-- (SimpleCParser_type_return *)type;
-- (SimpleCParser_block_return *)block;
-- (SimpleCParser_stat_return *)stat;
-- (SimpleCParser_forStat_return *)forStat;
-- (SimpleCParser_assignStat_return *)assignStat;
-- (SimpleCParser_expr_return *)expr;
-- (SimpleCParser_condExpr_return *)condExpr;
-- (SimpleCParser_aexpr_return *)aexpr;
-- (SimpleCParser_atom_return *)atom;
-
-
-@end /* end of SimpleCParser interface */
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCParser.java b/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCParser.java
deleted file mode 100644
index 51bab3d..0000000
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCParser.java
+++ /dev/null
@@ -1,1814 +0,0 @@
-// $ANTLR 3.2 Aug 13, 2010 19:41:25 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g 2010-08-13 19:42:18
-
-import org.antlr.runtime.*;
-import java.util.Stack;
-import java.util.List;
-import java.util.ArrayList;
-
-
-import org.antlr.runtime.tree.*;
-
-public class SimpleCParser extends Parser {
-    public static final String[] tokenNames = new String[] {
-        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "VAR_DEF", "ARG_DEF", "FUNC_HDR", "FUNC_DECL", "FUNC_DEF", "BLOCK", "ID", "EQ", "INT", "FOR", "INT_TYPE", "CHAR", "VOID", "EQEQ", "LT", "PLUS", "WS", "';'", "'('", "','", "')'", "'{'", "'}'"
-    };
-    public static final int LT=18;
-    public static final int T__26=26;
-    public static final int T__25=25;
-    public static final int T__24=24;
-    public static final int T__23=23;
-    public static final int T__22=22;
-    public static final int T__21=21;
-    public static final int CHAR=15;
-    public static final int FOR=13;
-    public static final int FUNC_HDR=6;
-    public static final int INT=12;
-    public static final int FUNC_DEF=8;
-    public static final int INT_TYPE=14;
-    public static final int ID=10;
-    public static final int EOF=-1;
-    public static final int FUNC_DECL=7;
-    public static final int ARG_DEF=5;
-    public static final int WS=20;
-    public static final int BLOCK=9;
-    public static final int PLUS=19;
-    public static final int VOID=16;
-    public static final int EQ=11;
-    public static final int VAR_DEF=4;
-    public static final int EQEQ=17;
-
-    // delegates
-    // delegators
-
-
-        public SimpleCParser(TokenStream input) {
-            this(input, new RecognizerSharedState());
-        }
-        public SimpleCParser(TokenStream input, RecognizerSharedState state) {
-            super(input, state);
-
-        }
-
-    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
-
-    public void setTreeAdaptor(TreeAdaptor adaptor) {
-        this.adaptor = adaptor;
-    }
-    public TreeAdaptor getTreeAdaptor() {
-        return adaptor;
-    }
-
-    public String[] getTokenNames() { return SimpleCParser.tokenNames; }
-    public String getGrammarFileName() { return "/usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g"; }
-
-
-    public static class program_return extends ParserRuleReturnScope {
-        Object tree;
-        public Object getTree() { return tree; }
-    };
-
-    // $ANTLR start "program"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:16:1: program : ( declaration )+ ;
-    public final SimpleCParser.program_return program() throws RecognitionException {
-        SimpleCParser.program_return retval = new SimpleCParser.program_return();
-        retval.start = input.LT(1);
-
-        Object root_0 = null;
-
-        SimpleCParser.declaration_return declaration1 = null;
-
-
-
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:17:5: ( ( declaration )+ )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:17:9: ( declaration )+
-            {
-            root_0 = (Object)adaptor.nil();
-
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:17:9: ( declaration )+
-            int cnt1=0;
-            loop1:
-            do {
-                int alt1=2;
-                int LA1_0 = input.LA(1);
-
-                if ( (LA1_0==ID||(LA1_0>=INT_TYPE && LA1_0<=VOID)) ) {
-                    alt1=1;
-                }
-
-
-                switch (alt1) {
-            	case 1 :
-            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:17:9: declaration
-            	    {
-            	    pushFollow(FOLLOW_declaration_in_program85);
-            	    declaration1=declaration();
-
-            	    state._fsp--;
-
-            	    adaptor.addChild(root_0, declaration1.getTree());
-
-            	    }
-            	    break;
-
-            	default :
-            	    if ( cnt1 >= 1 ) break loop1;
-                        EarlyExitException eee =
-                            new EarlyExitException(1, input);
-                        throw eee;
-                }
-                cnt1++;
-            } while (true);
-
-
-            }
-
-            retval.stop = input.LT(-1);
-
-            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-
-        }
-        finally {
-        }
-        return retval;
-    }
-    // $ANTLR end "program"
-
-    public static class declaration_return extends ParserRuleReturnScope {
-        Object tree;
-        public Object getTree() { return tree; }
-    };
-
-    // $ANTLR start "declaration"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:20:1: declaration : ( variable | functionHeader ';' -> ^( FUNC_DECL functionHeader ) | functionHeader block -> ^( FUNC_DEF functionHeader block ) );
-    public final SimpleCParser.declaration_return declaration() throws RecognitionException {
-        SimpleCParser.declaration_return retval = new SimpleCParser.declaration_return();
-        retval.start = input.LT(1);
-
-        Object root_0 = null;
-
-        Token char_literal4=null;
-        SimpleCParser.variable_return variable2 = null;
-
-        SimpleCParser.functionHeader_return functionHeader3 = null;
-
-        SimpleCParser.functionHeader_return functionHeader5 = null;
-
-        SimpleCParser.block_return block6 = null;
-
-
-        Object char_literal4_tree=null;
-        RewriteRuleTokenStream stream_21=new RewriteRuleTokenStream(adaptor,"token 21");
-        RewriteRuleSubtreeStream stream_functionHeader=new RewriteRuleSubtreeStream(adaptor,"rule functionHeader");
-        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:21:5: ( variable | functionHeader ';' -> ^( FUNC_DECL functionHeader ) | functionHeader block -> ^( FUNC_DEF functionHeader block ) )
-            int alt2=3;
-            alt2 = dfa2.predict(input);
-            switch (alt2) {
-                case 1 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:21:9: variable
-                    {
-                    root_0 = (Object)adaptor.nil();
-
-                    pushFollow(FOLLOW_variable_in_declaration105);
-                    variable2=variable();
-
-                    state._fsp--;
-
-                    adaptor.addChild(root_0, variable2.getTree());
-
-                    }
-                    break;
-                case 2 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:22:9: functionHeader ';'
-                    {
-                    pushFollow(FOLLOW_functionHeader_in_declaration115);
-                    functionHeader3=functionHeader();
-
-                    state._fsp--;
-
-                    stream_functionHeader.add(functionHeader3.getTree());
-                    char_literal4=(Token)match(input,21,FOLLOW_21_in_declaration117);
-                    stream_21.add(char_literal4);
-
-
-
-                    // AST REWRITE
-                    // elements: functionHeader
-                    // token labels:
-                    // rule labels: retval
-                    // token list labels:
-                    // rule list labels:
-                    // wildcard labels:
-                    retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
-
-                    root_0 = (Object)adaptor.nil();
-                    // 22:28: -> ^( FUNC_DECL functionHeader )
-                    {
-                        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:22:31: ^( FUNC_DECL functionHeader )
-                        {
-                        Object root_1 = (Object)adaptor.nil();
-                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FUNC_DECL, "FUNC_DECL"), root_1);
-
-                        adaptor.addChild(root_1, stream_functionHeader.nextTree());
-
-                        adaptor.addChild(root_0, root_1);
-                        }
-
-                    }
-
-                    retval.tree = root_0;
-                    }
-                    break;
-                case 3 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:23:9: functionHeader block
-                    {
-                    pushFollow(FOLLOW_functionHeader_in_declaration135);
-                    functionHeader5=functionHeader();
-
-                    state._fsp--;
-
-                    stream_functionHeader.add(functionHeader5.getTree());
-                    pushFollow(FOLLOW_block_in_declaration137);
-                    block6=block();
-
-                    state._fsp--;
-
-                    stream_block.add(block6.getTree());
-
-
-                    // AST REWRITE
-                    // elements: functionHeader, block
-                    // token labels:
-                    // rule labels: retval
-                    // token list labels:
-                    // rule list labels:
-                    // wildcard labels:
-                    retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
-
-                    root_0 = (Object)adaptor.nil();
-                    // 23:30: -> ^( FUNC_DEF functionHeader block )
-                    {
-                        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:23:33: ^( FUNC_DEF functionHeader block )
-                        {
-                        Object root_1 = (Object)adaptor.nil();
-                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FUNC_DEF, "FUNC_DEF"), root_1);
-
-                        adaptor.addChild(root_1, stream_functionHeader.nextTree());
-                        adaptor.addChild(root_1, stream_block.nextTree());
-
-                        adaptor.addChild(root_0, root_1);
-                        }
-
-                    }
-
-                    retval.tree = root_0;
-                    }
-                    break;
-
-            }
-            retval.stop = input.LT(-1);
-
-            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-
-        }
-        finally {
-        }
-        return retval;
-    }
-    // $ANTLR end "declaration"
-
-    public static class variable_return extends ParserRuleReturnScope {
-        Object tree;
-        public Object getTree() { return tree; }
-    };
-
-    // $ANTLR start "variable"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:26:1: variable : type declarator ';' -> ^( VAR_DEF type declarator ) ;
-    public final SimpleCParser.variable_return variable() throws RecognitionException {
-        SimpleCParser.variable_return retval = new SimpleCParser.variable_return();
-        retval.start = input.LT(1);
-
-        Object root_0 = null;
-
-        Token char_literal9=null;
-        SimpleCParser.type_return type7 = null;
-
-        SimpleCParser.declarator_return declarator8 = null;
-
-
-        Object char_literal9_tree=null;
-        RewriteRuleTokenStream stream_21=new RewriteRuleTokenStream(adaptor,"token 21");
-        RewriteRuleSubtreeStream stream_declarator=new RewriteRuleSubtreeStream(adaptor,"rule declarator");
-        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:27:5: ( type declarator ';' -> ^( VAR_DEF type declarator ) )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:27:9: type declarator ';'
-            {
-            pushFollow(FOLLOW_type_in_variable166);
-            type7=type();
-
-            state._fsp--;
-
-            stream_type.add(type7.getTree());
-            pushFollow(FOLLOW_declarator_in_variable168);
-            declarator8=declarator();
-
-            state._fsp--;
-
-            stream_declarator.add(declarator8.getTree());
-            char_literal9=(Token)match(input,21,FOLLOW_21_in_variable170);
-            stream_21.add(char_literal9);
-
-
-
-            // AST REWRITE
-            // elements: type, declarator
-            // token labels:
-            // rule labels: retval
-            // token list labels:
-            // rule list labels:
-            // wildcard labels:
-            retval.tree = root_0;
-            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
-
-            root_0 = (Object)adaptor.nil();
-            // 27:29: -> ^( VAR_DEF type declarator )
-            {
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:27:32: ^( VAR_DEF type declarator )
-                {
-                Object root_1 = (Object)adaptor.nil();
-                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VAR_DEF, "VAR_DEF"), root_1);
-
-                adaptor.addChild(root_1, stream_type.nextTree());
-                adaptor.addChild(root_1, stream_declarator.nextTree());
-
-                adaptor.addChild(root_0, root_1);
-                }
-
-            }
-
-            retval.tree = root_0;
-            }
-
-            retval.stop = input.LT(-1);
-
-            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-
-        }
-        finally {
-        }
-        return retval;
-    }
-    // $ANTLR end "variable"
-
-    public static class declarator_return extends ParserRuleReturnScope {
-        Object tree;
-        public Object getTree() { return tree; }
-    };
-
-    // $ANTLR start "declarator"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:30:1: declarator : ID ;
-    public final SimpleCParser.declarator_return declarator() throws RecognitionException {
-        SimpleCParser.declarator_return retval = new SimpleCParser.declarator_return();
-        retval.start = input.LT(1);
-
-        Object root_0 = null;
-
-        Token ID10=null;
-
-        Object ID10_tree=null;
-
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:31:5: ( ID )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:31:9: ID
-            {
-            root_0 = (Object)adaptor.nil();
-
-            ID10=(Token)match(input,ID,FOLLOW_ID_in_declarator199);
-            ID10_tree = (Object)adaptor.create(ID10);
-            adaptor.addChild(root_0, ID10_tree);
-
-
-            }
-
-            retval.stop = input.LT(-1);
-
-            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-
-        }
-        finally {
-        }
-        return retval;
-    }
-    // $ANTLR end "declarator"
-
-    public static class functionHeader_return extends ParserRuleReturnScope {
-        Object tree;
-        public Object getTree() { return tree; }
-    };
-
-    // $ANTLR start "functionHeader"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:34:1: functionHeader : type ID '(' ( formalParameter ( ',' formalParameter )* )? ')' -> ^( FUNC_HDR type ID ( formalParameter )+ ) ;
-    public final SimpleCParser.functionHeader_return functionHeader() throws RecognitionException {
-        SimpleCParser.functionHeader_return retval = new SimpleCParser.functionHeader_return();
-        retval.start = input.LT(1);
-
-        Object root_0 = null;
-
-        Token ID12=null;
-        Token char_literal13=null;
-        Token char_literal15=null;
-        Token char_literal17=null;
-        SimpleCParser.type_return type11 = null;
-
-        SimpleCParser.formalParameter_return formalParameter14 = null;
-
-        SimpleCParser.formalParameter_return formalParameter16 = null;
-
-
-        Object ID12_tree=null;
-        Object char_literal13_tree=null;
-        Object char_literal15_tree=null;
-        Object char_literal17_tree=null;
-        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
-        RewriteRuleTokenStream stream_22=new RewriteRuleTokenStream(adaptor,"token 22");
-        RewriteRuleTokenStream stream_23=new RewriteRuleTokenStream(adaptor,"token 23");
-        RewriteRuleTokenStream stream_24=new RewriteRuleTokenStream(adaptor,"token 24");
-        RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");
-        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:5: ( type ID '(' ( formalParameter ( ',' formalParameter )* )? ')' -> ^( FUNC_HDR type ID ( formalParameter )+ ) )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:9: type ID '(' ( formalParameter ( ',' formalParameter )* )? ')'
-            {
-            pushFollow(FOLLOW_type_in_functionHeader219);
-            type11=type();
-
-            state._fsp--;
-
-            stream_type.add(type11.getTree());
-            ID12=(Token)match(input,ID,FOLLOW_ID_in_functionHeader221);
-            stream_ID.add(ID12);
-
-            char_literal13=(Token)match(input,22,FOLLOW_22_in_functionHeader223);
-            stream_22.add(char_literal13);
-
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:21: ( formalParameter ( ',' formalParameter )* )?
-            int alt4=2;
-            int LA4_0 = input.LA(1);
-
-            if ( (LA4_0==ID||(LA4_0>=INT_TYPE && LA4_0<=VOID)) ) {
-                alt4=1;
-            }
-            switch (alt4) {
-                case 1 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:23: formalParameter ( ',' formalParameter )*
-                    {
-                    pushFollow(FOLLOW_formalParameter_in_functionHeader227);
-                    formalParameter14=formalParameter();
-
-                    state._fsp--;
-
-                    stream_formalParameter.add(formalParameter14.getTree());
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:39: ( ',' formalParameter )*
-                    loop3:
-                    do {
-                        int alt3=2;
-                        int LA3_0 = input.LA(1);
-
-                        if ( (LA3_0==23) ) {
-                            alt3=1;
-                        }
-
-
-                        switch (alt3) {
-                    	case 1 :
-                    	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:41: ',' formalParameter
-                    	    {
-                    	    char_literal15=(Token)match(input,23,FOLLOW_23_in_functionHeader231);
-                    	    stream_23.add(char_literal15);
-
-                    	    pushFollow(FOLLOW_formalParameter_in_functionHeader233);
-                    	    formalParameter16=formalParameter();
-
-                    	    state._fsp--;
-
-                    	    stream_formalParameter.add(formalParameter16.getTree());
-
-                    	    }
-                    	    break;
-
-                    	default :
-                    	    break loop3;
-                        }
-                    } while (true);
-
-
-                    }
-                    break;
-
-            }
-
-            char_literal17=(Token)match(input,24,FOLLOW_24_in_functionHeader241);
-            stream_24.add(char_literal17);
-
-
-
-            // AST REWRITE
-            // elements: formalParameter, ID, type
-            // token labels:
-            // rule labels: retval
-            // token list labels:
-            // rule list labels:
-            // wildcard labels:
-            retval.tree = root_0;
-            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
-
-            root_0 = (Object)adaptor.nil();
-            // 36:9: -> ^( FUNC_HDR type ID ( formalParameter )+ )
-            {
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:36:12: ^( FUNC_HDR type ID ( formalParameter )+ )
-                {
-                Object root_1 = (Object)adaptor.nil();
-                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FUNC_HDR, "FUNC_HDR"), root_1);
-
-                adaptor.addChild(root_1, stream_type.nextTree());
-                adaptor.addChild(root_1, stream_ID.nextNode());
-                if ( !(stream_formalParameter.hasNext()) ) {
-                    throw new RewriteEarlyExitException();
-                }
-                while ( stream_formalParameter.hasNext() ) {
-                    adaptor.addChild(root_1, stream_formalParameter.nextTree());
-
-                }
-                stream_formalParameter.reset();
-
-                adaptor.addChild(root_0, root_1);
-                }
-
-            }
-
-            retval.tree = root_0;
-            }
-
-            retval.stop = input.LT(-1);
-
-            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-
-        }
-        finally {
-        }
-        return retval;
-    }
-    // $ANTLR end "functionHeader"
-
-    public static class formalParameter_return extends ParserRuleReturnScope {
-        Object tree;
-        public Object getTree() { return tree; }
-    };
-
-    // $ANTLR start "formalParameter"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:39:1: formalParameter : type declarator -> ^( ARG_DEF type declarator ) ;
-    public final SimpleCParser.formalParameter_return formalParameter() throws RecognitionException {
-        SimpleCParser.formalParameter_return retval = new SimpleCParser.formalParameter_return();
-        retval.start = input.LT(1);
-
-        Object root_0 = null;
-
-        SimpleCParser.type_return type18 = null;
-
-        SimpleCParser.declarator_return declarator19 = null;
-
-
-        RewriteRuleSubtreeStream stream_declarator=new RewriteRuleSubtreeStream(adaptor,"rule declarator");
-        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:40:5: ( type declarator -> ^( ARG_DEF type declarator ) )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:40:9: type declarator
-            {
-            pushFollow(FOLLOW_type_in_formalParameter281);
-            type18=type();
-
-            state._fsp--;
-
-            stream_type.add(type18.getTree());
-            pushFollow(FOLLOW_declarator_in_formalParameter283);
-            declarator19=declarator();
-
-            state._fsp--;
-
-            stream_declarator.add(declarator19.getTree());
-
-
-            // AST REWRITE
-            // elements: declarator, type
-            // token labels:
-            // rule labels: retval
-            // token list labels:
-            // rule list labels:
-            // wildcard labels:
-            retval.tree = root_0;
-            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
-
-            root_0 = (Object)adaptor.nil();
-            // 40:25: -> ^( ARG_DEF type declarator )
-            {
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:40:28: ^( ARG_DEF type declarator )
-                {
-                Object root_1 = (Object)adaptor.nil();
-                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARG_DEF, "ARG_DEF"), root_1);
-
-                adaptor.addChild(root_1, stream_type.nextTree());
-                adaptor.addChild(root_1, stream_declarator.nextTree());
-
-                adaptor.addChild(root_0, root_1);
-                }
-
-            }
-
-            retval.tree = root_0;
-            }
-
-            retval.stop = input.LT(-1);
-
-            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-
-        }
-        finally {
-        }
-        return retval;
-    }
-    // $ANTLR end "formalParameter"
-
-    public static class type_return extends ParserRuleReturnScope {
-        Object tree;
-        public Object getTree() { return tree; }
-    };
-
-    // $ANTLR start "type"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:43:1: type : ( 'int' | 'char' | 'void' | ID );
-    public final SimpleCParser.type_return type() throws RecognitionException {
-        SimpleCParser.type_return retval = new SimpleCParser.type_return();
-        retval.start = input.LT(1);
-
-        Object root_0 = null;
-
-        Token set20=null;
-
-        Object set20_tree=null;
-
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:44:5: ( 'int' | 'char' | 'void' | ID )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:
-            {
-            root_0 = (Object)adaptor.nil();
-
-            set20=(Token)input.LT(1);
-            if ( input.LA(1)==ID||(input.LA(1)>=INT_TYPE && input.LA(1)<=VOID) ) {
-                input.consume();
-                adaptor.addChild(root_0, (Object)adaptor.create(set20));
-                state.errorRecovery=false;
-            }
-            else {
-                MismatchedSetException mse = new MismatchedSetException(null,input);
-                throw mse;
-            }
-
-
-            }
-
-            retval.stop = input.LT(-1);
-
-            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-
-        }
-        finally {
-        }
-        return retval;
-    }
-    // $ANTLR end "type"
-
-    public static class block_return extends ParserRuleReturnScope {
-        Object tree;
-        public Object getTree() { return tree; }
-    };
-
-    // $ANTLR start "block"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:50:1: block : lc= '{' ( variable )* ( stat )* '}' -> ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* ) ;
-    public final SimpleCParser.block_return block() throws RecognitionException {
-        SimpleCParser.block_return retval = new SimpleCParser.block_return();
-        retval.start = input.LT(1);
-
-        Object root_0 = null;
-
-        Token lc=null;
-        Token char_literal23=null;
-        SimpleCParser.variable_return variable21 = null;
-
-        SimpleCParser.stat_return stat22 = null;
-
-
-        Object lc_tree=null;
-        Object char_literal23_tree=null;
-        RewriteRuleTokenStream stream_25=new RewriteRuleTokenStream(adaptor,"token 25");
-        RewriteRuleTokenStream stream_26=new RewriteRuleTokenStream(adaptor,"token 26");
-        RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
-        RewriteRuleSubtreeStream stream_stat=new RewriteRuleSubtreeStream(adaptor,"rule stat");
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:51:5: (lc= '{' ( variable )* ( stat )* '}' -> ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* ) )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:51:9: lc= '{' ( variable )* ( stat )* '}'
-            {
-            lc=(Token)match(input,25,FOLLOW_25_in_block376);
-            stream_25.add(lc);
-
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:52:13: ( variable )*
-            loop5:
-            do {
-                int alt5=2;
-                int LA5_0 = input.LA(1);
-
-                if ( (LA5_0==ID) ) {
-                    int LA5_2 = input.LA(2);
-
-                    if ( (LA5_2==ID) ) {
-                        alt5=1;
-                    }
-
-
-                }
-                else if ( ((LA5_0>=INT_TYPE && LA5_0<=VOID)) ) {
-                    alt5=1;
-                }
-
-
-                switch (alt5) {
-            	case 1 :
-            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:52:13: variable
-            	    {
-            	    pushFollow(FOLLOW_variable_in_block390);
-            	    variable21=variable();
-
-            	    state._fsp--;
-
-            	    stream_variable.add(variable21.getTree());
-
-            	    }
-            	    break;
-
-            	default :
-            	    break loop5;
-                }
-            } while (true);
-
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:53:13: ( stat )*
-            loop6:
-            do {
-                int alt6=2;
-                int LA6_0 = input.LA(1);
-
-                if ( (LA6_0==ID||(LA6_0>=INT && LA6_0<=FOR)||(LA6_0>=21 && LA6_0<=22)||LA6_0==25) ) {
-                    alt6=1;
-                }
-
-
-                switch (alt6) {
-            	case 1 :
-            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:53:13: stat
-            	    {
-            	    pushFollow(FOLLOW_stat_in_block405);
-            	    stat22=stat();
-
-            	    state._fsp--;
-
-            	    stream_stat.add(stat22.getTree());
-
-            	    }
-            	    break;
-
-            	default :
-            	    break loop6;
-                }
-            } while (true);
-
-            char_literal23=(Token)match(input,26,FOLLOW_26_in_block416);
-            stream_26.add(char_literal23);
-
-
-
-            // AST REWRITE
-            // elements: variable, stat
-            // token labels:
-            // rule labels: retval
-            // token list labels:
-            // rule list labels:
-            // wildcard labels:
-            retval.tree = root_0;
-            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
-
-            root_0 = (Object)adaptor.nil();
-            // 55:9: -> ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* )
-            {
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:55:12: ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* )
-                {
-                Object root_1 = (Object)adaptor.nil();
-                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, lc, @"BLOCK"), root_1);
-
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:55:34: ( variable )*
-                while ( stream_variable.hasNext() ) {
-                    adaptor.addChild(root_1, stream_variable.nextTree());
-
-                }
-                stream_variable.reset();
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:55:44: ( stat )*
-                while ( stream_stat.hasNext() ) {
-                    adaptor.addChild(root_1, stream_stat.nextTree());
-
-                }
-                stream_stat.reset();
-
-                adaptor.addChild(root_0, root_1);
-                }
-
-            }
-
-            retval.tree = root_0;
-            }
-
-            retval.stop = input.LT(-1);
-
-            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-
-        }
-        finally {
-        }
-        return retval;
-    }
-    // $ANTLR end "block"
-
-    public static class stat_return extends ParserRuleReturnScope {
-        Object tree;
-        public Object getTree() { return tree; }
-    };
-
-    // $ANTLR start "stat"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:58:1: stat : ( forStat | expr ';' | block | assignStat ';' | ';' );
-    public final SimpleCParser.stat_return stat() throws RecognitionException {
-        SimpleCParser.stat_return retval = new SimpleCParser.stat_return();
-        retval.start = input.LT(1);
-
-        Object root_0 = null;
-
-        Token char_literal26=null;
-        Token char_literal29=null;
-        Token char_literal30=null;
-        SimpleCParser.forStat_return forStat24 = null;
-
-        SimpleCParser.expr_return expr25 = null;
-
-        SimpleCParser.block_return block27 = null;
-
-        SimpleCParser.assignStat_return assignStat28 = null;
-
-
-        Object char_literal26_tree=null;
-        Object char_literal29_tree=null;
-        Object char_literal30_tree=null;
-
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:58:5: ( forStat | expr ';' | block | assignStat ';' | ';' )
-            int alt7=5;
-            switch ( input.LA(1) ) {
-            case FOR:
-                {
-                alt7=1;
-                }
-                break;
-            case ID:
-                {
-                int LA7_2 = input.LA(2);
-
-                if ( (LA7_2==EQ) ) {
-                    alt7=4;
-                }
-                else if ( ((LA7_2>=EQEQ && LA7_2<=PLUS)||LA7_2==21) ) {
-                    alt7=2;
-                }
-                else {
-                    NoViableAltException nvae =
-                        new NoViableAltException("", 7, 2, input);
-
-                    throw nvae;
-                }
-                }
-                break;
-            case INT:
-            case 22:
-                {
-                alt7=2;
-                }
-                break;
-            case 25:
-                {
-                alt7=3;
-                }
-                break;
-            case 21:
-                {
-                alt7=5;
-                }
-                break;
-            default:
-                NoViableAltException nvae =
-                    new NoViableAltException("", 7, 0, input);
-
-                throw nvae;
-            }
-
-            switch (alt7) {
-                case 1 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:58:7: forStat
-                    {
-                    root_0 = (Object)adaptor.nil();
-
-                    pushFollow(FOLLOW_forStat_in_stat449);
-                    forStat24=forStat();
-
-                    state._fsp--;
-
-                    adaptor.addChild(root_0, forStat24.getTree());
-
-                    }
-                    break;
-                case 2 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:59:7: expr ';'
-                    {
-                    root_0 = (Object)adaptor.nil();
-
-                    pushFollow(FOLLOW_expr_in_stat457);
-                    expr25=expr();
-
-                    state._fsp--;
-
-                    adaptor.addChild(root_0, expr25.getTree());
-                    char_literal26=(Token)match(input,21,FOLLOW_21_in_stat459);
-
-                    }
-                    break;
-                case 3 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:60:7: block
-                    {
-                    root_0 = (Object)adaptor.nil();
-
-                    pushFollow(FOLLOW_block_in_stat468);
-                    block27=block();
-
-                    state._fsp--;
-
-                    adaptor.addChild(root_0, block27.getTree());
-
-                    }
-                    break;
-                case 4 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:61:7: assignStat ';'
-                    {
-                    root_0 = (Object)adaptor.nil();
-
-                    pushFollow(FOLLOW_assignStat_in_stat476);
-                    assignStat28=assignStat();
-
-                    state._fsp--;
-
-                    adaptor.addChild(root_0, assignStat28.getTree());
-                    char_literal29=(Token)match(input,21,FOLLOW_21_in_stat478);
-
-                    }
-                    break;
-                case 5 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:62:7: ';'
-                    {
-                    root_0 = (Object)adaptor.nil();
-
-                    char_literal30=(Token)match(input,21,FOLLOW_21_in_stat487);
-
-                    }
-                    break;
-
-            }
-            retval.stop = input.LT(-1);
-
-            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-
-        }
-        finally {
-        }
-        return retval;
-    }
-    // $ANTLR end "stat"
-
-    public static class forStat_return extends ParserRuleReturnScope {
-        Object tree;
-        public Object getTree() { return tree; }
-    };
-
-    // $ANTLR start "forStat"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:65:1: forStat : 'for' '(' start= assignStat ';' expr ';' next= assignStat ')' block -> ^( 'for' $start expr $next block ) ;
-    public final SimpleCParser.forStat_return forStat() throws RecognitionException {
-        SimpleCParser.forStat_return retval = new SimpleCParser.forStat_return();
-        retval.start = input.LT(1);
-
-        Object root_0 = null;
-
-        Token string_literal31=null;
-        Token char_literal32=null;
-        Token char_literal33=null;
-        Token char_literal35=null;
-        Token char_literal36=null;
-        SimpleCParser.assignStat_return start = null;
-
-        SimpleCParser.assignStat_return next = null;
-
-        SimpleCParser.expr_return expr34 = null;
-
-        SimpleCParser.block_return block37 = null;
-
-
-        Object string_literal31_tree=null;
-        Object char_literal32_tree=null;
-        Object char_literal33_tree=null;
-        Object char_literal35_tree=null;
-        Object char_literal36_tree=null;
-        RewriteRuleTokenStream stream_21=new RewriteRuleTokenStream(adaptor,"token 21");
-        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
-        RewriteRuleTokenStream stream_22=new RewriteRuleTokenStream(adaptor,"token 22");
-        RewriteRuleTokenStream stream_24=new RewriteRuleTokenStream(adaptor,"token 24");
-        RewriteRuleSubtreeStream stream_assignStat=new RewriteRuleSubtreeStream(adaptor,"rule assignStat");
-        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
-        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:66:5: ( 'for' '(' start= assignStat ';' expr ';' next= assignStat ')' block -> ^( 'for' $start expr $next block ) )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:66:9: 'for' '(' start= assignStat ';' expr ';' next= assignStat ')' block
-            {
-            string_literal31=(Token)match(input,FOR,FOLLOW_FOR_in_forStat507);
-            stream_FOR.add(string_literal31);
-
-            char_literal32=(Token)match(input,22,FOLLOW_22_in_forStat509);
-            stream_22.add(char_literal32);
-
-            pushFollow(FOLLOW_assignStat_in_forStat513);
-            start=assignStat();
-
-            state._fsp--;
-
-            stream_assignStat.add(start.getTree());
-            char_literal33=(Token)match(input,21,FOLLOW_21_in_forStat515);
-            stream_21.add(char_literal33);
-
-            pushFollow(FOLLOW_expr_in_forStat517);
-            expr34=expr();
-
-            state._fsp--;
-
-            stream_expr.add(expr34.getTree());
-            char_literal35=(Token)match(input,21,FOLLOW_21_in_forStat519);
-            stream_21.add(char_literal35);
-
-            pushFollow(FOLLOW_assignStat_in_forStat523);
-            next=assignStat();
-
-            state._fsp--;
-
-            stream_assignStat.add(next.getTree());
-            char_literal36=(Token)match(input,24,FOLLOW_24_in_forStat525);
-            stream_24.add(char_literal36);
-
-            pushFollow(FOLLOW_block_in_forStat527);
-            block37=block();
-
-            state._fsp--;
-
-            stream_block.add(block37.getTree());
-
-
-            // AST REWRITE
-            // elements: block, expr, FOR, start, next
-            // token labels:
-            // rule labels: retval, start, next
-            // token list labels:
-            // rule list labels:
-            // wildcard labels:
-            retval.tree = root_0;
-            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
-            RewriteRuleSubtreeStream stream_start=new RewriteRuleSubtreeStream(adaptor,"rule start",start!=null?start.tree:null);
-            RewriteRuleSubtreeStream stream_next=new RewriteRuleSubtreeStream(adaptor,"rule next",next!=null?next.tree:null);
-
-            root_0 = (Object)adaptor.nil();
-            // 67:9: -> ^( 'for' $start expr $next block )
-            {
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:67:12: ^( 'for' $start expr $next block )
-                {
-                Object root_1 = (Object)adaptor.nil();
-                root_1 = (Object)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
-
-                adaptor.addChild(root_1, stream_start.nextTree());
-                adaptor.addChild(root_1, stream_expr.nextTree());
-                adaptor.addChild(root_1, stream_next.nextTree());
-                adaptor.addChild(root_1, stream_block.nextTree());
-
-                adaptor.addChild(root_0, root_1);
-                }
-
-            }
-
-            retval.tree = root_0;
-            }
-
-            retval.stop = input.LT(-1);
-
-            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-
-        }
-        finally {
-        }
-        return retval;
-    }
-    // $ANTLR end "forStat"
-
-    public static class assignStat_return extends ParserRuleReturnScope {
-        Object tree;
-        public Object getTree() { return tree; }
-    };
-
-    // $ANTLR start "assignStat"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:70:1: assignStat : ID EQ expr -> ^( EQ ID expr ) ;
-    public final SimpleCParser.assignStat_return assignStat() throws RecognitionException {
-        SimpleCParser.assignStat_return retval = new SimpleCParser.assignStat_return();
-        retval.start = input.LT(1);
-
-        Object root_0 = null;
-
-        Token ID38=null;
-        Token EQ39=null;
-        SimpleCParser.expr_return expr40 = null;
-
-
-        Object ID38_tree=null;
-        Object EQ39_tree=null;
-        RewriteRuleTokenStream stream_EQ=new RewriteRuleTokenStream(adaptor,"token EQ");
-        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
-        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:71:5: ( ID EQ expr -> ^( EQ ID expr ) )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:71:9: ID EQ expr
-            {
-            ID38=(Token)match(input,ID,FOLLOW_ID_in_assignStat570);
-            stream_ID.add(ID38);
-
-            EQ39=(Token)match(input,EQ,FOLLOW_EQ_in_assignStat572);
-            stream_EQ.add(EQ39);
-
-            pushFollow(FOLLOW_expr_in_assignStat574);
-            expr40=expr();
-
-            state._fsp--;
-
-            stream_expr.add(expr40.getTree());
-
-
-            // AST REWRITE
-            // elements: EQ, expr, ID
-            // token labels:
-            // rule labels: retval
-            // token list labels:
-            // rule list labels:
-            // wildcard labels:
-            retval.tree = root_0;
-            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
-
-            root_0 = (Object)adaptor.nil();
-            // 71:20: -> ^( EQ ID expr )
-            {
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:71:23: ^( EQ ID expr )
-                {
-                Object root_1 = (Object)adaptor.nil();
-                root_1 = (Object)adaptor.becomeRoot(stream_EQ.nextNode(), root_1);
-
-                adaptor.addChild(root_1, stream_ID.nextNode());
-                adaptor.addChild(root_1, stream_expr.nextTree());
-
-                adaptor.addChild(root_0, root_1);
-                }
-
-            }
-
-            retval.tree = root_0;
-            }
-
-            retval.stop = input.LT(-1);
-
-            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-
-        }
-        finally {
-        }
-        return retval;
-    }
-    // $ANTLR end "assignStat"
-
-    public static class expr_return extends ParserRuleReturnScope {
-        Object tree;
-        public Object getTree() { return tree; }
-    };
-
-    // $ANTLR start "expr"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:74:1: expr : condExpr ;
-    public final SimpleCParser.expr_return expr() throws RecognitionException {
-        SimpleCParser.expr_return retval = new SimpleCParser.expr_return();
-        retval.start = input.LT(1);
-
-        Object root_0 = null;
-
-        SimpleCParser.condExpr_return condExpr41 = null;
-
-
-
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:74:5: ( condExpr )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:74:9: condExpr
-            {
-            root_0 = (Object)adaptor.nil();
-
-            pushFollow(FOLLOW_condExpr_in_expr598);
-            condExpr41=condExpr();
-
-            state._fsp--;
-
-            adaptor.addChild(root_0, condExpr41.getTree());
-
-            }
-
-            retval.stop = input.LT(-1);
-
-            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-
-        }
-        finally {
-        }
-        return retval;
-    }
-    // $ANTLR end "expr"
-
-    public static class condExpr_return extends ParserRuleReturnScope {
-        Object tree;
-        public Object getTree() { return tree; }
-    };
-
-    // $ANTLR start "condExpr"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:77:1: condExpr : aexpr ( ( '==' | '<' ) aexpr )? ;
-    public final SimpleCParser.condExpr_return condExpr() throws RecognitionException {
-        SimpleCParser.condExpr_return retval = new SimpleCParser.condExpr_return();
-        retval.start = input.LT(1);
-
-        Object root_0 = null;
-
-        Token string_literal43=null;
-        Token char_literal44=null;
-        SimpleCParser.aexpr_return aexpr42 = null;
-
-        SimpleCParser.aexpr_return aexpr45 = null;
-
-
-        Object string_literal43_tree=null;
-        Object char_literal44_tree=null;
-
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:5: ( aexpr ( ( '==' | '<' ) aexpr )? )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:9: aexpr ( ( '==' | '<' ) aexpr )?
-            {
-            root_0 = (Object)adaptor.nil();
-
-            pushFollow(FOLLOW_aexpr_in_condExpr617);
-            aexpr42=aexpr();
-
-            state._fsp--;
-
-            adaptor.addChild(root_0, aexpr42.getTree());
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:15: ( ( '==' | '<' ) aexpr )?
-            int alt9=2;
-            int LA9_0 = input.LA(1);
-
-            if ( ((LA9_0>=EQEQ && LA9_0<=LT)) ) {
-                alt9=1;
-            }
-            switch (alt9) {
-                case 1 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:17: ( '==' | '<' ) aexpr
-                    {
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:17: ( '==' | '<' )
-                    int alt8=2;
-                    int LA8_0 = input.LA(1);
-
-                    if ( (LA8_0==EQEQ) ) {
-                        alt8=1;
-                    }
-                    else if ( (LA8_0==LT) ) {
-                        alt8=2;
-                    }
-                    else {
-                        NoViableAltException nvae =
-                            new NoViableAltException("", 8, 0, input);
-
-                        throw nvae;
-                    }
-                    switch (alt8) {
-                        case 1 :
-                            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:18: '=='
-                            {
-                            string_literal43=(Token)match(input,EQEQ,FOLLOW_EQEQ_in_condExpr622);
-                            string_literal43_tree = (Object)adaptor.create(string_literal43);
-                            root_0 = (Object)adaptor.becomeRoot(string_literal43_tree, root_0);
-
-
-                            }
-                            break;
-                        case 2 :
-                            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:26: '<'
-                            {
-                            char_literal44=(Token)match(input,LT,FOLLOW_LT_in_condExpr627);
-                            char_literal44_tree = (Object)adaptor.create(char_literal44);
-                            root_0 = (Object)adaptor.becomeRoot(char_literal44_tree, root_0);
-
-
-                            }
-                            break;
-
-                    }
-
-                    pushFollow(FOLLOW_aexpr_in_condExpr631);
-                    aexpr45=aexpr();
-
-                    state._fsp--;
-
-                    adaptor.addChild(root_0, aexpr45.getTree());
-
-                    }
-                    break;
-
-            }
-
-
-            }
-
-            retval.stop = input.LT(-1);
-
-            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-
-        }
-        finally {
-        }
-        return retval;
-    }
-    // $ANTLR end "condExpr"
-
-    public static class aexpr_return extends ParserRuleReturnScope {
-        Object tree;
-        public Object getTree() { return tree; }
-    };
-
-    // $ANTLR start "aexpr"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:81:1: aexpr : atom ( '+' atom )* ;
-    public final SimpleCParser.aexpr_return aexpr() throws RecognitionException {
-        SimpleCParser.aexpr_return retval = new SimpleCParser.aexpr_return();
-        retval.start = input.LT(1);
-
-        Object root_0 = null;
-
-        Token char_literal47=null;
-        SimpleCParser.atom_return atom46 = null;
-
-        SimpleCParser.atom_return atom48 = null;
-
-
-        Object char_literal47_tree=null;
-
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:82:5: ( atom ( '+' atom )* )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:82:9: atom ( '+' atom )*
-            {
-            root_0 = (Object)adaptor.nil();
-
-            pushFollow(FOLLOW_atom_in_aexpr653);
-            atom46=atom();
-
-            state._fsp--;
-
-            adaptor.addChild(root_0, atom46.getTree());
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:82:14: ( '+' atom )*
-            loop10:
-            do {
-                int alt10=2;
-                int LA10_0 = input.LA(1);
-
-                if ( (LA10_0==PLUS) ) {
-                    alt10=1;
-                }
-
-
-                switch (alt10) {
-            	case 1 :
-            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:82:16: '+' atom
-            	    {
-            	    char_literal47=(Token)match(input,PLUS,FOLLOW_PLUS_in_aexpr657);
-            	    char_literal47_tree = (Object)adaptor.create(char_literal47);
-            	    root_0 = (Object)adaptor.becomeRoot(char_literal47_tree, root_0);
-
-            	    pushFollow(FOLLOW_atom_in_aexpr660);
-            	    atom48=atom();
-
-            	    state._fsp--;
-
-            	    adaptor.addChild(root_0, atom48.getTree());
-
-            	    }
-            	    break;
-
-            	default :
-            	    break loop10;
-                }
-            } while (true);
-
-
-            }
-
-            retval.stop = input.LT(-1);
-
-            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-
-        }
-        finally {
-        }
-        return retval;
-    }
-    // $ANTLR end "aexpr"
-
-    public static class atom_return extends ParserRuleReturnScope {
-        Object tree;
-        public Object getTree() { return tree; }
-    };
-
-    // $ANTLR start "atom"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:85:1: atom : ( ID | INT | '(' expr ')' -> expr );
-    public final SimpleCParser.atom_return atom() throws RecognitionException {
-        SimpleCParser.atom_return retval = new SimpleCParser.atom_return();
-        retval.start = input.LT(1);
-
-        Object root_0 = null;
-
-        Token ID49=null;
-        Token INT50=null;
-        Token char_literal51=null;
-        Token char_literal53=null;
-        SimpleCParser.expr_return expr52 = null;
-
-
-        Object ID49_tree=null;
-        Object INT50_tree=null;
-        Object char_literal51_tree=null;
-        Object char_literal53_tree=null;
-        RewriteRuleTokenStream stream_22=new RewriteRuleTokenStream(adaptor,"token 22");
-        RewriteRuleTokenStream stream_24=new RewriteRuleTokenStream(adaptor,"token 24");
-        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:86:5: ( ID | INT | '(' expr ')' -> expr )
-            int alt11=3;
-            switch ( input.LA(1) ) {
-            case ID:
-                {
-                alt11=1;
-                }
-                break;
-            case INT:
-                {
-                alt11=2;
-                }
-                break;
-            case 22:
-                {
-                alt11=3;
-                }
-                break;
-            default:
-                NoViableAltException nvae =
-                    new NoViableAltException("", 11, 0, input);
-
-                throw nvae;
-            }
-
-            switch (alt11) {
-                case 1 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:86:7: ID
-                    {
-                    root_0 = (Object)adaptor.nil();
-
-                    ID49=(Token)match(input,ID,FOLLOW_ID_in_atom680);
-                    ID49_tree = (Object)adaptor.create(ID49);
-                    adaptor.addChild(root_0, ID49_tree);
-
-
-                    }
-                    break;
-                case 2 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:87:7: INT
-                    {
-                    root_0 = (Object)adaptor.nil();
-
-                    INT50=(Token)match(input,INT,FOLLOW_INT_in_atom694);
-                    INT50_tree = (Object)adaptor.create(INT50);
-                    adaptor.addChild(root_0, INT50_tree);
-
-
-                    }
-                    break;
-                case 3 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:88:7: '(' expr ')'
-                    {
-                    char_literal51=(Token)match(input,22,FOLLOW_22_in_atom708);
-                    stream_22.add(char_literal51);
-
-                    pushFollow(FOLLOW_expr_in_atom710);
-                    expr52=expr();
-
-                    state._fsp--;
-
-                    stream_expr.add(expr52.getTree());
-                    char_literal53=(Token)match(input,24,FOLLOW_24_in_atom712);
-                    stream_24.add(char_literal53);
-
-
-
-                    // AST REWRITE
-                    // elements: expr
-                    // token labels:
-                    // rule labels: retval
-                    // token list labels:
-                    // rule list labels:
-                    // wildcard labels:
-                    retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
-
-                    root_0 = (Object)adaptor.nil();
-                    // 88:20: -> expr
-                    {
-                        adaptor.addChild(root_0, stream_expr.nextTree());
-
-                    }
-
-                    retval.tree = root_0;
-                    }
-                    break;
-
-            }
-            retval.stop = input.LT(-1);
-
-            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
-            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
-
-        }
-        finally {
-        }
-        return retval;
-    }
-    // $ANTLR end "atom"
-
-    // Delegated rules
-
-
-    protected DFA2 dfa2 = new DFA2(this);
-    static final String DFA2_eotS =
-        "\15\uffff";
-    static final String DFA2_eofS =
-        "\15\uffff";
-    static final String DFA2_minS =
-        "\2\12\1\25\1\12\1\uffff\1\12\1\25\1\27\2\uffff\2\12\1\27";
-    static final String DFA2_maxS =
-        "\1\20\1\12\1\26\1\30\1\uffff\1\12\1\31\1\30\2\uffff\1\20\1\12\1"+
-        "\30";
-    static final String DFA2_acceptS =
-        "\4\uffff\1\1\3\uffff\1\3\1\2\3\uffff";
-    static final String DFA2_specialS =
-        "\15\uffff}>";
-    static final String[] DFA2_transitionS = {
-            "\1\1\3\uffff\3\1",
-            "\1\2",
-            "\1\4\1\3",
-            "\1\5\3\uffff\3\5\7\uffff\1\6",
-            "",
-            "\1\7",
-            "\1\11\3\uffff\1\10",
-            "\1\12\1\6",
-            "",
-            "",
-            "\1\13\3\uffff\3\13",
-            "\1\14",
-            "\1\12\1\6"
-    };
-
-    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
-    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
-    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
-    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
-    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
-    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
-    static final short[][] DFA2_transition;
-
-    static {
-        int numStates = DFA2_transitionS.length;
-        DFA2_transition = new short[numStates][];
-        for (int i=0; i<numStates; i++) {
-            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
-        }
-    }
-
-    class DFA2 extends DFA {
-
-        public DFA2(BaseRecognizer recognizer) {
-            this.recognizer = recognizer;
-            this.decisionNumber = 2;
-            this.eot = DFA2_eot;
-            this.eof = DFA2_eof;
-            this.min = DFA2_min;
-            this.max = DFA2_max;
-            this.accept = DFA2_accept;
-            this.special = DFA2_special;
-            this.transition = DFA2_transition;
-        }
-        public String getDescription() {
-            return "20:1: declaration : ( variable | functionHeader ';' -> ^( FUNC_DECL functionHeader ) | functionHeader block -> ^( FUNC_DEF functionHeader block ) );";
-        }
-    }
-
-
-    public static final BitSet FOLLOW_declaration_in_program85 = new BitSet(new long[]{0x000000000001C402L});
-    public static final BitSet FOLLOW_variable_in_declaration105 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_functionHeader_in_declaration115 = new BitSet(new long[]{0x0000000000200000L});
-    public static final BitSet FOLLOW_21_in_declaration117 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_functionHeader_in_declaration135 = new BitSet(new long[]{0x0000000002000000L});
-    public static final BitSet FOLLOW_block_in_declaration137 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_type_in_variable166 = new BitSet(new long[]{0x0000000000000400L});
-    public static final BitSet FOLLOW_declarator_in_variable168 = new BitSet(new long[]{0x0000000000200000L});
-    public static final BitSet FOLLOW_21_in_variable170 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_ID_in_declarator199 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_type_in_functionHeader219 = new BitSet(new long[]{0x0000000000000400L});
-    public static final BitSet FOLLOW_ID_in_functionHeader221 = new BitSet(new long[]{0x0000000000400000L});
-    public static final BitSet FOLLOW_22_in_functionHeader223 = new BitSet(new long[]{0x000000000101C400L});
-    public static final BitSet FOLLOW_formalParameter_in_functionHeader227 = new BitSet(new long[]{0x0000000001800000L});
-    public static final BitSet FOLLOW_23_in_functionHeader231 = new BitSet(new long[]{0x000000000001C400L});
-    public static final BitSet FOLLOW_formalParameter_in_functionHeader233 = new BitSet(new long[]{0x0000000001800000L});
-    public static final BitSet FOLLOW_24_in_functionHeader241 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_type_in_formalParameter281 = new BitSet(new long[]{0x0000000000000400L});
-    public static final BitSet FOLLOW_declarator_in_formalParameter283 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_set_in_type0 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_25_in_block376 = new BitSet(new long[]{0x000000000661F400L});
-    public static final BitSet FOLLOW_variable_in_block390 = new BitSet(new long[]{0x000000000661F400L});
-    public static final BitSet FOLLOW_stat_in_block405 = new BitSet(new long[]{0x0000000006603400L});
-    public static final BitSet FOLLOW_26_in_block416 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_forStat_in_stat449 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_expr_in_stat457 = new BitSet(new long[]{0x0000000000200000L});
-    public static final BitSet FOLLOW_21_in_stat459 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_block_in_stat468 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_assignStat_in_stat476 = new BitSet(new long[]{0x0000000000200000L});
-    public static final BitSet FOLLOW_21_in_stat478 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_21_in_stat487 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_FOR_in_forStat507 = new BitSet(new long[]{0x0000000000400000L});
-    public static final BitSet FOLLOW_22_in_forStat509 = new BitSet(new long[]{0x0000000000000400L});
-    public static final BitSet FOLLOW_assignStat_in_forStat513 = new BitSet(new long[]{0x0000000000200000L});
-    public static final BitSet FOLLOW_21_in_forStat515 = new BitSet(new long[]{0x0000000000401400L});
-    public static final BitSet FOLLOW_expr_in_forStat517 = new BitSet(new long[]{0x0000000000200000L});
-    public static final BitSet FOLLOW_21_in_forStat519 = new BitSet(new long[]{0x0000000000000400L});
-    public static final BitSet FOLLOW_assignStat_in_forStat523 = new BitSet(new long[]{0x0000000001000000L});
-    public static final BitSet FOLLOW_24_in_forStat525 = new BitSet(new long[]{0x0000000002000000L});
-    public static final BitSet FOLLOW_block_in_forStat527 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_ID_in_assignStat570 = new BitSet(new long[]{0x0000000000000800L});
-    public static final BitSet FOLLOW_EQ_in_assignStat572 = new BitSet(new long[]{0x0000000000401400L});
-    public static final BitSet FOLLOW_expr_in_assignStat574 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_condExpr_in_expr598 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_aexpr_in_condExpr617 = new BitSet(new long[]{0x0000000000060002L});
-    public static final BitSet FOLLOW_EQEQ_in_condExpr622 = new BitSet(new long[]{0x0000000000401400L});
-    public static final BitSet FOLLOW_LT_in_condExpr627 = new BitSet(new long[]{0x0000000000401400L});
-    public static final BitSet FOLLOW_aexpr_in_condExpr631 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_atom_in_aexpr653 = new BitSet(new long[]{0x0000000000080002L});
-    public static final BitSet FOLLOW_PLUS_in_aexpr657 = new BitSet(new long[]{0x0000000000401400L});
-    public static final BitSet FOLLOW_atom_in_aexpr660 = new BitSet(new long[]{0x0000000000080002L});
-    public static final BitSet FOLLOW_ID_in_atom680 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_INT_in_atom694 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_22_in_atom708 = new BitSet(new long[]{0x0000000000401400L});
-    public static final BitSet FOLLOW_expr_in_atom710 = new BitSet(new long[]{0x0000000001000000L});
-    public static final BitSet FOLLOW_24_in_atom712 = new BitSet(new long[]{0x0000000000000002L});
-
-}
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCParser.m b/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCParser.m
deleted file mode 100644
index 386640a..0000000
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCParser.m
+++ /dev/null
@@ -1,2763 +0,0 @@
-/** \file
- *  This OBJC source file was generated by $ANTLR version 3.2 Aug 23, 2010 07:48:06
- *
- *     -  From the grammar source file : /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g
- *     -                            On : 2010-08-23 07:54:46
- *     -                for the parser : SimpleCParserParser *
- * Editing it, at least manually, is not wise.
- *
- * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
- *
- *
-*/
-// [The "BSD licence"]
-// Copyright (c) 2010 Alan Condit
-//
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. The name of the author may not be used to endorse or promote products
-//    derived from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// $ANTLR 3.2 Aug 23, 2010 07:48:06 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g 2010-08-23 07:54:46
-
-/* -----------------------------------------
- * Include the ANTLR3 generated header file.
- */
-#import "SimpleCParser.h"
-/* ----------------------------------------- */
-
-
-/* ============================================================================= */
-
-/* =============================================================================
- * Start of recognizer
- */
-
-
-#pragma mark Cyclic DFA implementation start DFA2
-@implementation DFA2
-const static NSInteger dfa2_eot[13] =
-    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static NSInteger dfa2_eof[13] =
-    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static unichar dfa2_min[13] =
-    {10,10,21,10,0,10,21,23,0,0,10,10,23};
-const static unichar dfa2_max[13] =
-    {13,10,22,24,0,10,25,24,0,0,13,10,24};
-const static NSInteger dfa2_accept[13] =
-    {-1,-1,-1,-1,1,-1,-1,-1,3,2,-1,-1,-1};
-const static NSInteger dfa2_special[13] =
-    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static NSInteger dfa2_transition[] = {};
-const static NSInteger dfa2_transition0[] = {9, -1, -1, -1, 8};
-const static NSInteger dfa2_transition1[] = {10, 6};
-const static NSInteger dfa2_transition2[] = {5, 5, 5, 5, -1, -1, -1, -1,
- -1, -1, -1, -1, -1, -1, 6};
-const static NSInteger dfa2_transition3[] = {11, 11, 11, 11};
-const static NSInteger dfa2_transition4[] = {4, 3};
-const static NSInteger dfa2_transition5[] = {1, 1, 1, 1};
-const static NSInteger dfa2_transition6[] = {7};
-const static NSInteger dfa2_transition7[] = {12};
-const static NSInteger dfa2_transition8[] = {2};
-
-
-+ () newDFA2WithRecognizer:(ANTLRBaseRecognizer *)aRecognizer
-{
-    return [[[DFA2 alloc] initWithRecognizer:aRecognizer] retain];
-}
-
-- (id) initWithRecognizer:(ANTLRBaseRecognizer *) theRecognizer
-{
-    if ((self = [super initWithRecognizer:theRecognizer]) != nil) {
-        decisionNumber = 2;
-        eot = dfa2_eot;
-        eof = dfa2_eof;
-        min = dfa2_min;
-        max = dfa2_max;
-        accept = dfa2_accept;
-        special = dfa2_special;
-        if (!(transition = calloc(13, sizeof(void*)))) {
-            [self release];
-            return nil;
-        }
-        len = 13;
-        transition[0] = dfa2_transition5;
-        transition[1] = dfa2_transition8;
-        transition[2] = dfa2_transition4;
-        transition[3] = dfa2_transition2;
-        transition[4] = dfa2_transition;
-        transition[5] = dfa2_transition6;
-        transition[6] = dfa2_transition0;
-        transition[7] = dfa2_transition1;
-        transition[8] = dfa2_transition;
-        transition[9] = dfa2_transition;
-        transition[10] = dfa2_transition3;
-        transition[11] = dfa2_transition7;
-        transition[12] = dfa2_transition1;
-    }
-    return self;
-}
-
-- (void) dealloc
-{
-    free(transition);
-    [super dealloc];
-}
-
-- (NSString *) description
-{
-    return @"20:1: declaration : ( variable | functionHeader ';' -> ^( FUNC_DECL functionHeader ) | functionHeader block -> ^( FUNC_DEF functionHeader block ) );";
-}
-
-
-@end /* end DFA2 implementation */
-
-#pragma mark Cyclic DFA implementation end DFA2
-
-
-
-#pragma mark Bitsets
-static ANTLRBitSet *FOLLOW_declaration_in_program85;
-static const unsigned long long FOLLOW_declaration_in_program85_data[] = { 0x0000000000003C02LL};
-static ANTLRBitSet *FOLLOW_variable_in_declaration105;
-static const unsigned long long FOLLOW_variable_in_declaration105_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_functionHeader_in_declaration115;
-static const unsigned long long FOLLOW_functionHeader_in_declaration115_data[] = { 0x0000000000200000LL};
-static ANTLRBitSet *FOLLOW_21_in_declaration117;
-static const unsigned long long FOLLOW_21_in_declaration117_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_functionHeader_in_declaration135;
-static const unsigned long long FOLLOW_functionHeader_in_declaration135_data[] = { 0x0000000002000000LL};
-static ANTLRBitSet *FOLLOW_block_in_declaration137;
-static const unsigned long long FOLLOW_block_in_declaration137_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_type_in_variable166;
-static const unsigned long long FOLLOW_type_in_variable166_data[] = { 0x0000000000000400LL};
-static ANTLRBitSet *FOLLOW_declarator_in_variable168;
-static const unsigned long long FOLLOW_declarator_in_variable168_data[] = { 0x0000000000200000LL};
-static ANTLRBitSet *FOLLOW_21_in_variable170;
-static const unsigned long long FOLLOW_21_in_variable170_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_K_ID_in_declarator199;
-static const unsigned long long FOLLOW_K_ID_in_declarator199_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_type_in_functionHeader219;
-static const unsigned long long FOLLOW_type_in_functionHeader219_data[] = { 0x0000000000000400LL};
-static ANTLRBitSet *FOLLOW_K_ID_in_functionHeader221;
-static const unsigned long long FOLLOW_K_ID_in_functionHeader221_data[] = { 0x0000000000400000LL};
-static ANTLRBitSet *FOLLOW_22_in_functionHeader223;
-static const unsigned long long FOLLOW_22_in_functionHeader223_data[] = { 0x0000000001003C00LL};
-static ANTLRBitSet *FOLLOW_formalParameter_in_functionHeader227;
-static const unsigned long long FOLLOW_formalParameter_in_functionHeader227_data[] = { 0x0000000001800000LL};
-static ANTLRBitSet *FOLLOW_23_in_functionHeader231;
-static const unsigned long long FOLLOW_23_in_functionHeader231_data[] = { 0x0000000000003C00LL};
-static ANTLRBitSet *FOLLOW_formalParameter_in_functionHeader233;
-static const unsigned long long FOLLOW_formalParameter_in_functionHeader233_data[] = { 0x0000000001800000LL};
-static ANTLRBitSet *FOLLOW_24_in_functionHeader241;
-static const unsigned long long FOLLOW_24_in_functionHeader241_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_type_in_formalParameter281;
-static const unsigned long long FOLLOW_type_in_formalParameter281_data[] = { 0x0000000000000400LL};
-static ANTLRBitSet *FOLLOW_declarator_in_formalParameter283;
-static const unsigned long long FOLLOW_declarator_in_formalParameter283_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_set_in_type0;
-static const unsigned long long FOLLOW_set_in_type0_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_25_in_block376;
-static const unsigned long long FOLLOW_25_in_block376_data[] = { 0x0000000006607C00LL};
-static ANTLRBitSet *FOLLOW_variable_in_block390;
-static const unsigned long long FOLLOW_variable_in_block390_data[] = { 0x0000000006607C00LL};
-static ANTLRBitSet *FOLLOW_stat_in_block405;
-static const unsigned long long FOLLOW_stat_in_block405_data[] = { 0x0000000006604C00LL};
-static ANTLRBitSet *FOLLOW_26_in_block416;
-static const unsigned long long FOLLOW_26_in_block416_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_forStat_in_stat449;
-static const unsigned long long FOLLOW_forStat_in_stat449_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_expr_in_stat457;
-static const unsigned long long FOLLOW_expr_in_stat457_data[] = { 0x0000000000200000LL};
-static ANTLRBitSet *FOLLOW_21_in_stat459;
-static const unsigned long long FOLLOW_21_in_stat459_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_block_in_stat468;
-static const unsigned long long FOLLOW_block_in_stat468_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_assignStat_in_stat476;
-static const unsigned long long FOLLOW_assignStat_in_stat476_data[] = { 0x0000000000200000LL};
-static ANTLRBitSet *FOLLOW_21_in_stat478;
-static const unsigned long long FOLLOW_21_in_stat478_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_21_in_stat487;
-static const unsigned long long FOLLOW_21_in_stat487_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_K_FOR_in_forStat507;
-static const unsigned long long FOLLOW_K_FOR_in_forStat507_data[] = { 0x0000000000400000LL};
-static ANTLRBitSet *FOLLOW_22_in_forStat509;
-static const unsigned long long FOLLOW_22_in_forStat509_data[] = { 0x0000000000000400LL};
-static ANTLRBitSet *FOLLOW_assignStat_in_forStat513;
-static const unsigned long long FOLLOW_assignStat_in_forStat513_data[] = { 0x0000000000200000LL};
-static ANTLRBitSet *FOLLOW_21_in_forStat515;
-static const unsigned long long FOLLOW_21_in_forStat515_data[] = { 0x0000000000400C00LL};
-static ANTLRBitSet *FOLLOW_expr_in_forStat517;
-static const unsigned long long FOLLOW_expr_in_forStat517_data[] = { 0x0000000000200000LL};
-static ANTLRBitSet *FOLLOW_21_in_forStat519;
-static const unsigned long long FOLLOW_21_in_forStat519_data[] = { 0x0000000000000400LL};
-static ANTLRBitSet *FOLLOW_assignStat_in_forStat523;
-static const unsigned long long FOLLOW_assignStat_in_forStat523_data[] = { 0x0000000001000000LL};
-static ANTLRBitSet *FOLLOW_24_in_forStat525;
-static const unsigned long long FOLLOW_24_in_forStat525_data[] = { 0x0000000002000000LL};
-static ANTLRBitSet *FOLLOW_block_in_forStat527;
-static const unsigned long long FOLLOW_block_in_forStat527_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_K_ID_in_assignStat570;
-static const unsigned long long FOLLOW_K_ID_in_assignStat570_data[] = { 0x0000000000008000LL};
-static ANTLRBitSet *FOLLOW_K_EQ_in_assignStat572;
-static const unsigned long long FOLLOW_K_EQ_in_assignStat572_data[] = { 0x0000000000400C00LL};
-static ANTLRBitSet *FOLLOW_expr_in_assignStat574;
-static const unsigned long long FOLLOW_expr_in_assignStat574_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_condExpr_in_expr598;
-static const unsigned long long FOLLOW_condExpr_in_expr598_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_aexpr_in_condExpr617;
-static const unsigned long long FOLLOW_aexpr_in_condExpr617_data[] = { 0x0000000000030002LL};
-static ANTLRBitSet *FOLLOW_K_EQEQ_in_condExpr622;
-static const unsigned long long FOLLOW_K_EQEQ_in_condExpr622_data[] = { 0x0000000000400C00LL};
-static ANTLRBitSet *FOLLOW_K_LT_in_condExpr627;
-static const unsigned long long FOLLOW_K_LT_in_condExpr627_data[] = { 0x0000000000400C00LL};
-static ANTLRBitSet *FOLLOW_aexpr_in_condExpr631;
-static const unsigned long long FOLLOW_aexpr_in_condExpr631_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_atom_in_aexpr653;
-static const unsigned long long FOLLOW_atom_in_aexpr653_data[] = { 0x0000000000040002LL};
-static ANTLRBitSet *FOLLOW_K_PLUS_in_aexpr657;
-static const unsigned long long FOLLOW_K_PLUS_in_aexpr657_data[] = { 0x0000000000400C00LL};
-static ANTLRBitSet *FOLLOW_atom_in_aexpr660;
-static const unsigned long long FOLLOW_atom_in_aexpr660_data[] = { 0x0000000000040002LL};
-static ANTLRBitSet *FOLLOW_K_ID_in_atom680;
-static const unsigned long long FOLLOW_K_ID_in_atom680_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_K_INT_in_atom694;
-static const unsigned long long FOLLOW_K_INT_in_atom694_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_22_in_atom708;
-static const unsigned long long FOLLOW_22_in_atom708_data[] = { 0x0000000000400C00LL};
-static ANTLRBitSet *FOLLOW_expr_in_atom710;
-static const unsigned long long FOLLOW_expr_in_atom710_data[] = { 0x0000000001000000LL};
-static ANTLRBitSet *FOLLOW_24_in_atom712;
-static const unsigned long long FOLLOW_24_in_atom712_data[] = { 0x0000000000000002LL};
-
-
-#pragma mark Dynamic Global Scopes
-
-#pragma mark Dynamic Rule Scopes
-
-#pragma mark Rule return scopes start
-@implementation SimpleCParser_program_return
-+ (SimpleCParser_program_return *)newSimpleCParser_program_return
-{
-    return [[[SimpleCParser_program_return alloc] init] retain];
-}
-
-/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end /* end of returnScope implementation */
-
-@implementation SimpleCParser_declaration_return
-+ (SimpleCParser_declaration_return *)newSimpleCParser_declaration_return
-{
-    return [[[SimpleCParser_declaration_return alloc] init] retain];
-}
-
-/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end /* end of returnScope implementation */
-
-@implementation SimpleCParser_variable_return
-+ (SimpleCParser_variable_return *)newSimpleCParser_variable_return
-{
-    return [[[SimpleCParser_variable_return alloc] init] retain];
-}
-
-/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end /* end of returnScope implementation */
-
-@implementation SimpleCParser_declarator_return
-+ (SimpleCParser_declarator_return *)newSimpleCParser_declarator_return
-{
-    return [[[SimpleCParser_declarator_return alloc] init] retain];
-}
-
-/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end /* end of returnScope implementation */
-
-@implementation SimpleCParser_functionHeader_return
-+ (SimpleCParser_functionHeader_return *)newSimpleCParser_functionHeader_return
-{
-    return [[[SimpleCParser_functionHeader_return alloc] init] retain];
-}
-
-/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end /* end of returnScope implementation */
-
-@implementation SimpleCParser_formalParameter_return
-+ (SimpleCParser_formalParameter_return *)newSimpleCParser_formalParameter_return
-{
-    return [[[SimpleCParser_formalParameter_return alloc] init] retain];
-}
-
-/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end /* end of returnScope implementation */
-
-@implementation SimpleCParser_type_return
-+ (SimpleCParser_type_return *)newSimpleCParser_type_return
-{
-    return [[[SimpleCParser_type_return alloc] init] retain];
-}
-
-/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end /* end of returnScope implementation */
-
-@implementation SimpleCParser_block_return
-+ (SimpleCParser_block_return *)newSimpleCParser_block_return
-{
-    return [[[SimpleCParser_block_return alloc] init] retain];
-}
-
-/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end /* end of returnScope implementation */
-
-@implementation SimpleCParser_stat_return
-+ (SimpleCParser_stat_return *)newSimpleCParser_stat_return
-{
-    return [[[SimpleCParser_stat_return alloc] init] retain];
-}
-
-/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end /* end of returnScope implementation */
-
-@implementation SimpleCParser_forStat_return
-+ (SimpleCParser_forStat_return *)newSimpleCParser_forStat_return
-{
-    return [[[SimpleCParser_forStat_return alloc] init] retain];
-}
-
-/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end /* end of returnScope implementation */
-
-@implementation SimpleCParser_assignStat_return
-+ (SimpleCParser_assignStat_return *)newSimpleCParser_assignStat_return
-{
-    return [[[SimpleCParser_assignStat_return alloc] init] retain];
-}
-
-/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end /* end of returnScope implementation */
-
-@implementation SimpleCParser_expr_return
-+ (SimpleCParser_expr_return *)newSimpleCParser_expr_return
-{
-    return [[[SimpleCParser_expr_return alloc] init] retain];
-}
-
-/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end /* end of returnScope implementation */
-
-@implementation SimpleCParser_condExpr_return
-+ (SimpleCParser_condExpr_return *)newSimpleCParser_condExpr_return
-{
-    return [[[SimpleCParser_condExpr_return alloc] init] retain];
-}
-
-/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end /* end of returnScope implementation */
-
-@implementation SimpleCParser_aexpr_return
-+ (SimpleCParser_aexpr_return *)newSimpleCParser_aexpr_return
-{
-    return [[[SimpleCParser_aexpr_return alloc] init] retain];
-}
-
-/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end /* end of returnScope implementation */
-
-@implementation SimpleCParser_atom_return
-+ (SimpleCParser_atom_return *)newSimpleCParser_atom_return
-{
-    return [[[SimpleCParser_atom_return alloc] init] retain];
-}
-
-/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end /* end of returnScope implementation */
-
-
-
-@implementation SimpleCParser  // line 610
-
-+ (void) initialize
-{
-    #pragma mark Bitsets
-    FOLLOW_declaration_in_program85 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declaration_in_program85_data Count:(NSUInteger)1] retain];
-    FOLLOW_variable_in_declaration105 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_declaration105_data Count:(NSUInteger)1] retain];
-    FOLLOW_functionHeader_in_declaration115 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration115_data Count:(NSUInteger)1] retain];
-    FOLLOW_21_in_declaration117 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_21_in_declaration117_data Count:(NSUInteger)1] retain];
-    FOLLOW_functionHeader_in_declaration135 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration135_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_declaration137 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_declaration137_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_variable166 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_variable166_data Count:(NSUInteger)1] retain];
-    FOLLOW_declarator_in_variable168 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_variable168_data Count:(NSUInteger)1] retain];
-    FOLLOW_21_in_variable170 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_21_in_variable170_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_ID_in_declarator199 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_declarator199_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_functionHeader219 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_functionHeader219_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_ID_in_functionHeader221 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_functionHeader221_data Count:(NSUInteger)1] retain];
-    FOLLOW_22_in_functionHeader223 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_22_in_functionHeader223_data Count:(NSUInteger)1] retain];
-    FOLLOW_formalParameter_in_functionHeader227 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader227_data Count:(NSUInteger)1] retain];
-    FOLLOW_23_in_functionHeader231 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_23_in_functionHeader231_data Count:(NSUInteger)1] retain];
-    FOLLOW_formalParameter_in_functionHeader233 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader233_data Count:(NSUInteger)1] retain];
-    FOLLOW_24_in_functionHeader241 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_24_in_functionHeader241_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_formalParameter281 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_formalParameter281_data Count:(NSUInteger)1] retain];
-    FOLLOW_declarator_in_formalParameter283 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_formalParameter283_data Count:(NSUInteger)1] retain];
-    FOLLOW_set_in_type0 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_type0_data Count:(NSUInteger)1] retain];
-    FOLLOW_25_in_block376 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_25_in_block376_data Count:(NSUInteger)1] retain];
-    FOLLOW_variable_in_block390 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_block390_data Count:(NSUInteger)1] retain];
-    FOLLOW_stat_in_block405 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_stat_in_block405_data Count:(NSUInteger)1] retain];
-    FOLLOW_26_in_block416 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_26_in_block416_data Count:(NSUInteger)1] retain];
-    FOLLOW_forStat_in_stat449 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_forStat_in_stat449_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_stat457 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_stat457_data Count:(NSUInteger)1] retain];
-    FOLLOW_21_in_stat459 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_21_in_stat459_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_stat468 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_stat468_data Count:(NSUInteger)1] retain];
-    FOLLOW_assignStat_in_stat476 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_stat476_data Count:(NSUInteger)1] retain];
-    FOLLOW_21_in_stat478 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_21_in_stat478_data Count:(NSUInteger)1] retain];
-    FOLLOW_21_in_stat487 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_21_in_stat487_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_FOR_in_forStat507 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_FOR_in_forStat507_data Count:(NSUInteger)1] retain];
-    FOLLOW_22_in_forStat509 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_22_in_forStat509_data Count:(NSUInteger)1] retain];
-    FOLLOW_assignStat_in_forStat513 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_forStat513_data Count:(NSUInteger)1] retain];
-    FOLLOW_21_in_forStat515 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_21_in_forStat515_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_forStat517 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat517_data Count:(NSUInteger)1] retain];
-    FOLLOW_21_in_forStat519 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_21_in_forStat519_data Count:(NSUInteger)1] retain];
-    FOLLOW_assignStat_in_forStat523 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_forStat523_data Count:(NSUInteger)1] retain];
-    FOLLOW_24_in_forStat525 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_24_in_forStat525_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_forStat527 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_forStat527_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_ID_in_assignStat570 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_assignStat570_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_EQ_in_assignStat572 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_EQ_in_assignStat572_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_assignStat574 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_assignStat574_data Count:(NSUInteger)1] retain];
-    FOLLOW_condExpr_in_expr598 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_condExpr_in_expr598_data Count:(NSUInteger)1] retain];
-    FOLLOW_aexpr_in_condExpr617 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_aexpr_in_condExpr617_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_EQEQ_in_condExpr622 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_EQEQ_in_condExpr622_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_LT_in_condExpr627 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_LT_in_condExpr627_data Count:(NSUInteger)1] retain];
-    FOLLOW_aexpr_in_condExpr631 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_aexpr_in_condExpr631_data Count:(NSUInteger)1] retain];
-    FOLLOW_atom_in_aexpr653 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_aexpr653_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_PLUS_in_aexpr657 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_PLUS_in_aexpr657_data Count:(NSUInteger)1] retain];
-    FOLLOW_atom_in_aexpr660 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_aexpr660_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_ID_in_atom680 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_atom680_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_INT_in_atom694 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_INT_in_atom694_data Count:(NSUInteger)1] retain];
-    FOLLOW_22_in_atom708 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_22_in_atom708_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_atom710 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_atom710_data Count:(NSUInteger)1] retain];
-    FOLLOW_24_in_atom712 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_24_in_atom712_data Count:(NSUInteger)1] retain];
-
-    [ANTLRBaseRecognizer setTokenNames:[[[NSArray alloc] initWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
- @"VAR_DEF", @"ARG_DEF", @"FUNC_HDR", @"FUNC_DECL", @"FUNC_DEF", @"BLOCK",
- @"K_ID", @"K_INT", @"K_CHAR", @"K_VOID", @"K_FOR", @"K_EQ", @"K_EQEQ",
- @"K_LT", @"K_PLUS", @"K_INT_TYPE", @"WS", @"';'", @"'('", @"','", @"')'",
- @"'{'", @"'}'", nil] retain]];
-}
-
-+ (SimpleCParser *)newSimpleCParser:(id<ANTLRTokenStream>)aStream
-{
-    return [[SimpleCParser alloc] initWithTokenStream:aStream];
-
-}
-
-- (id) initWithTokenStream:(id<ANTLRTokenStream>)aStream
-{
-    if ((self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:15+1] retain]]) != nil) {
-
-
-        dfa2 = [DFA2 newDFA2WithRecognizer:self];
-
-        /* start of actions-actionScope-init */
-        /* start of init */
-        /* AST genericParser.init */
-        [self setTreeAdaptor:[[ANTLRCommonTreeAdaptor newANTLRCommonTreeAdaptor] retain]];
-    }
-    return self;
-}
-
-- (void) dealloc
-{
-    [dfa2 release];
-    /* AST genericParser.dealloc */
-    [self setTreeAdaptor:nil];
-
-    [super dealloc];
-}
-// start actions.actionScope.methods
-// start methods()
-/* AST genericParser.methods */
-/* AST parserMethods */
-- (id<ANTLRTreeAdaptor>) getTreeAdaptor
-{
-	return treeAdaptor;
-}
-
-- (void) setTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor
-{
-	if (aTreeAdaptor != treeAdaptor) {
-		treeAdaptor = aTreeAdaptor;
-	}
-}
-// start rules
-/*
- * $ANTLR start program
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:16:1: program : ( declaration )+ ;
- */
-- (SimpleCParser_program_return *) program
-{
-    /* ruleScopeSetUp */
-
-    /* AST ruleDeclarations */
-    SimpleCParser_program_return * retval = [SimpleCParser_program_return newSimpleCParser_program_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        /* AST ruleLabelDefs */
-        SimpleCParser_declaration_return * declaration1 = nil;
-
-
-
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:17:5: ( ( declaration )+ ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:17:9: ( declaration )+ // alt
-        {
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:17:9: ( declaration )+ // positiveClosureBlock
-        NSInteger cnt1=0;
-        do {
-            NSInteger alt1=2;
-            NSInteger LA1_0 = [input LA:1];
-            if ( ((LA1_0>=K_ID && LA1_0<=K_VOID)) ) {
-                alt1=1;
-            }
-
-
-            switch (alt1) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:17:9: declaration // alt
-                    {
-                    /* ASTParser ruleRef */
-                    [self pushFollow:FOLLOW_declaration_in_program85];
-                    declaration1 = [self declaration];
-                    [self popFollow];
-
-
-                    [treeAdaptor addChild:[declaration1 getTree] toTree:root_0];  /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    if ( cnt1 >= 1 )
-                        goto loop1;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:1];
-                    @throw eee;
-            }
-            cnt1++;
-        } while (YES);
-        loop1: ;
-          /* element() */
-         /* elements */
-        }
-
-        /* ASTParser ruleCleanUp */
-        /* AST ruleCleanUp */
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-
-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-            [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        /* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end program */
-/*
- * $ANTLR start declaration
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:20:1: declaration : ( variable | functionHeader ';' -> ^( FUNC_DECL functionHeader ) | functionHeader block -> ^( FUNC_DEF functionHeader block ) );
- */
-- (SimpleCParser_declaration_return *) declaration
-{
-    /* ruleScopeSetUp */
-
-    /* AST ruleDeclarations */
-    SimpleCParser_declaration_return * retval = [SimpleCParser_declaration_return newSimpleCParser_declaration_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        /* AST ruleLabelDefs */
-        ANTLRCommonToken *char_literal4 = nil;
-        SimpleCParser_variable_return * variable2 = nil;
-
-        SimpleCParser_functionHeader_return * functionHeader3 = nil;
-
-        SimpleCParser_functionHeader_return * functionHeader5 = nil;
-
-        SimpleCParser_block_return * block6 = nil;
-
-
-        ANTLRCommonTree *char_literal4_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_21 =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token 21"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_functionHeader =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"rule functionHeader"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_block =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"rule block"] retain];
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:21:5: ( variable | functionHeader ';' -> ^( FUNC_DECL functionHeader ) | functionHeader block -> ^( FUNC_DEF functionHeader block ) ) //ruleblock
-        NSInteger alt2=3;
-        alt2 = [dfa2 predict:input];
-        switch (alt2) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:21:9: variable // alt
-                {
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-                /* ASTParser ruleRef */
-                [self pushFollow:FOLLOW_variable_in_declaration105];
-                variable2 = [self variable];
-                [self popFollow];
-
-
-                [treeAdaptor addChild:[variable2 getTree] toTree:root_0];  /* element() */
-                 /* elements */
-                }
-                break;
-            case 2 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:22:9: functionHeader ';' // alt
-                {
-                [self pushFollow:FOLLOW_functionHeader_in_declaration115];
-                functionHeader3 = [self functionHeader];
-                [self popFollow];
-
-
-                [stream_functionHeader addElement:[functionHeader3 getTree]];  /* element() */
-                char_literal4=(ANTLRCommonToken *)[self match:input TokenType:21 Follow:FOLLOW_21_in_declaration117];
-                    [stream_21 addElement:char_literal4];
-                  /* element() */
-                 /* elements */
-
-                // AST REWRITE
-                // elements: functionHeader
-                // token labels:
-                // rule labels: retval
-                // token list labels:
-                // rule list labels:
-                // wildcard labels:
-                 [retval setTree:root_0];
-
-                retval.tree = root_0;
-
-                ANTLRRewriteRuleSubtreeStream *stream_retval =
-                    [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                        description:@"token retval"
-                                                                            element:retval!=nil?[retval getTree]:nil] retain];
-
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-                // 22:28: -> ^( FUNC_DECL functionHeader )
-                {
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:22:31: ^( FUNC_DECL functionHeader )
-                    {
-                        ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                        root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:[[treeAdaptor createTree:(NSInteger)FUNC_DECL Text:[[ANTLRBaseRecognizer getTokenNames] objectAtIndex:(NSUInteger)FUNC_DECL]] retain]
-                                                                               old:root_1];
-
-                        [treeAdaptor addChild:[stream_functionHeader nextTree] toTree:root_1];
-
-                        [treeAdaptor addChild:root_1 toTree:root_0];
-                    }
-
-                }
-
-                retval.tree = root_0;
-
-                }
-                break;
-            case 3 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:23:9: functionHeader block // alt
-                {
-                [self pushFollow:FOLLOW_functionHeader_in_declaration135];
-                functionHeader5 = [self functionHeader];
-                [self popFollow];
-
-
-                [stream_functionHeader addElement:[functionHeader5 getTree]];  /* element() */
-                [self pushFollow:FOLLOW_block_in_declaration137];
-                block6 = [self block];
-                [self popFollow];
-
-
-                [stream_block addElement:[block6 getTree]];  /* element() */
-                 /* elements */
-
-                // AST REWRITE
-                // elements: functionHeader, block
-                // token labels:
-                // rule labels: retval
-                // token list labels:
-                // rule list labels:
-                // wildcard labels:
-                 [retval setTree:root_0];
-
-                retval.tree = root_0;
-
-                ANTLRRewriteRuleSubtreeStream *stream_retval =
-                    [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                        description:@"token retval"
-                                                                            element:retval!=nil?[retval getTree]:nil] retain];
-
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-                // 23:30: -> ^( FUNC_DEF functionHeader block )
-                {
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:23:33: ^( FUNC_DEF functionHeader block )
-                    {
-                        ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                        root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:[[treeAdaptor createTree:(NSInteger)FUNC_DEF Text:[[ANTLRBaseRecognizer getTokenNames] objectAtIndex:(NSUInteger)FUNC_DEF]] retain]
-                                                                               old:root_1];
-
-                        [treeAdaptor addChild:[stream_functionHeader nextTree] toTree:root_1];
-                        [treeAdaptor addChild:[stream_block nextTree] toTree:root_1];
-
-                        [treeAdaptor addChild:root_1 toTree:root_0];
-                    }
-
-                }
-
-                retval.tree = root_0;
-
-                }
-                break;
-
-        }
-        /* ASTParser ruleCleanUp */
-        /* AST ruleCleanUp */
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-        [stream_21 release];
-        [stream_functionHeader release];
-        [stream_block release];
-
-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-            [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        /* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end declaration */
-/*
- * $ANTLR start variable
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:26:1: variable : type declarator ';' -> ^( VAR_DEF type declarator ) ;
- */
-- (SimpleCParser_variable_return *) variable
-{
-    /* ruleScopeSetUp */
-
-    /* AST ruleDeclarations */
-    SimpleCParser_variable_return * retval = [SimpleCParser_variable_return newSimpleCParser_variable_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        /* AST ruleLabelDefs */
-        ANTLRCommonToken *char_literal9 = nil;
-        SimpleCParser_type_return * type7 = nil;
-
-        SimpleCParser_declarator_return * declarator8 = nil;
-
-
-        ANTLRCommonTree *char_literal9_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_21 =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token 21"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_declarator =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"rule declarator"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_type =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"rule type"] retain];
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:27:5: ( type declarator ';' -> ^( VAR_DEF type declarator ) ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:27:9: type declarator ';' // alt
-        {
-        [self pushFollow:FOLLOW_type_in_variable166];
-        type7 = [self type];
-        [self popFollow];
-
-
-        [stream_type addElement:[type7 getTree]];  /* element() */
-        [self pushFollow:FOLLOW_declarator_in_variable168];
-        declarator8 = [self declarator];
-        [self popFollow];
-
-
-        [stream_declarator addElement:[declarator8 getTree]];  /* element() */
-        char_literal9=(ANTLRCommonToken *)[self match:input TokenType:21 Follow:FOLLOW_21_in_variable170];
-            [stream_21 addElement:char_literal9];
-          /* element() */
-         /* elements */
-
-        // AST REWRITE
-        // elements: type, declarator
-        // token labels:
-        // rule labels: retval
-        // token list labels:
-        // rule list labels:
-        // wildcard labels:
-         [retval setTree:root_0];
-
-        retval.tree = root_0;
-
-        ANTLRRewriteRuleSubtreeStream *stream_retval =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"token retval"
-                                                                    element:retval!=nil?[retval getTree]:nil] retain];
-
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-        // 27:29: -> ^( VAR_DEF type declarator )
-        {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:27:32: ^( VAR_DEF type declarator )
-            {
-                ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:[[treeAdaptor createTree:(NSInteger)VAR_DEF Text:[[ANTLRBaseRecognizer getTokenNames] objectAtIndex:(NSUInteger)VAR_DEF]] retain]
-                                                                       old:root_1];
-
-                [treeAdaptor addChild:[stream_type nextTree] toTree:root_1];
-                [treeAdaptor addChild:[stream_declarator nextTree] toTree:root_1];
-
-                [treeAdaptor addChild:root_1 toTree:root_0];
-            }
-
-        }
-
-        retval.tree = root_0;
-
-        }
-
-        /* ASTParser ruleCleanUp */
-        /* AST ruleCleanUp */
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-        [stream_21 release];
-        [stream_declarator release];
-        [stream_type release];
-
-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-            [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        /* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end variable */
-/*
- * $ANTLR start declarator
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:30:1: declarator : K_ID ;
- */
-- (SimpleCParser_declarator_return *) declarator
-{
-    /* ruleScopeSetUp */
-
-    /* AST ruleDeclarations */
-    SimpleCParser_declarator_return * retval = [SimpleCParser_declarator_return newSimpleCParser_declarator_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        /* AST ruleLabelDefs */
-        ANTLRCommonToken *K_ID10 = nil;
-
-        ANTLRCommonTree *K_ID10_tree=nil;
-
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:31:5: ( K_ID ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:31:9: K_ID // alt
-        {
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-        /* ASTParser tokenRef */
-        K_ID10=(ANTLRCommonToken *)[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_declarator199];
-        K_ID10_tree = /* ASTParser createNodeFromToken */
-        (ANTLRCommonTree *)[[treeAdaptor createTree:K_ID10] retain];
-        [treeAdaptor addChild:K_ID10_tree  toTree:root_0];
-          /* element() */
-         /* elements */
-        }
-
-        /* ASTParser ruleCleanUp */
-        /* AST ruleCleanUp */
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-
-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-            [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        /* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end declarator */
-/*
- * $ANTLR start functionHeader
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:34:1: functionHeader : type K_ID '(' ( formalParameter ( ',' formalParameter )* )? ')' -> ^( FUNC_HDR type K_ID ( formalParameter )+ ) ;
- */
-- (SimpleCParser_functionHeader_return *) functionHeader
-{
-    /* ruleScopeSetUp */
-
-    /* AST ruleDeclarations */
-    SimpleCParser_functionHeader_return * retval = [SimpleCParser_functionHeader_return newSimpleCParser_functionHeader_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        /* AST ruleLabelDefs */
-        ANTLRCommonToken *K_ID12 = nil;
-        ANTLRCommonToken *char_literal13 = nil;
-        ANTLRCommonToken *char_literal15 = nil;
-        ANTLRCommonToken *char_literal17 = nil;
-        SimpleCParser_type_return * type11 = nil;
-
-        SimpleCParser_formalParameter_return * formalParameter14 = nil;
-
-        SimpleCParser_formalParameter_return * formalParameter16 = nil;
-
-
-        ANTLRCommonTree *K_ID12_tree=nil;
-        ANTLRCommonTree *char_literal13_tree=nil;
-        ANTLRCommonTree *char_literal15_tree=nil;
-        ANTLRCommonTree *char_literal17_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_K_ID =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token K_ID"] retain];
-        ANTLRRewriteRuleTokenStream *stream_22 =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token 22"] retain];
-        ANTLRRewriteRuleTokenStream *stream_23 =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token 23"] retain];
-        ANTLRRewriteRuleTokenStream *stream_24 =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token 24"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_formalParameter =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"rule formalParameter"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_type =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"rule type"] retain];
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:5: ( type K_ID '(' ( formalParameter ( ',' formalParameter )* )? ')' -> ^( FUNC_HDR type K_ID ( formalParameter )+ ) ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:9: type K_ID '(' ( formalParameter ( ',' formalParameter )* )? ')' // alt
-        {
-        [self pushFollow:FOLLOW_type_in_functionHeader219];
-        type11 = [self type];
-        [self popFollow];
-
-
-        [stream_type addElement:[type11 getTree]];  /* element() */
-        K_ID12=(ANTLRCommonToken *)[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_functionHeader221];
-            [stream_K_ID addElement:K_ID12];
-          /* element() */
-        char_literal13=(ANTLRCommonToken *)[self match:input TokenType:22 Follow:FOLLOW_22_in_functionHeader223];
-            [stream_22 addElement:char_literal13];
-          /* element() */
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:23: ( formalParameter ( ',' formalParameter )* )? // block
-        NSInteger alt4=2;
-        NSInteger LA4_0 = [input LA:1];
-
-        if ( ((LA4_0>=K_ID && LA4_0<=K_VOID)) ) {
-            alt4=1;
-        }
-        switch (alt4) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:25: formalParameter ( ',' formalParameter )* // alt
-                {
-                [self pushFollow:FOLLOW_formalParameter_in_functionHeader227];
-                formalParameter14 = [self formalParameter];
-                [self popFollow];
-
-
-                [stream_formalParameter addElement:[formalParameter14 getTree]];  /* element() */
-                do {
-                    NSInteger alt3=2;
-                    NSInteger LA3_0 = [input LA:1];
-                    if ( (LA3_0==23) ) {
-                        alt3=1;
-                    }
-
-
-                    switch (alt3) {
-                        case 1 : ;
-                            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:35:43: ',' formalParameter // alt
-                            {
-                            char_literal15=(ANTLRCommonToken *)[self match:input TokenType:23 Follow:FOLLOW_23_in_functionHeader231];
-                                [stream_23 addElement:char_literal15];
-                              /* element() */
-                            [self pushFollow:FOLLOW_formalParameter_in_functionHeader233];
-                            formalParameter16 = [self formalParameter];
-                            [self popFollow];
-
-
-                            [stream_formalParameter addElement:[formalParameter16 getTree]];  /* element() */
-                             /* elements */
-                            }
-                            break;
-
-                        default :
-                            goto loop3;
-                    }
-                } while (YES);
-                loop3: ;
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-        char_literal17=(ANTLRCommonToken *)[self match:input TokenType:24 Follow:FOLLOW_24_in_functionHeader241];
-            [stream_24 addElement:char_literal17];
-          /* element() */
-         /* elements */
-
-        // AST REWRITE
-        // elements: K_ID, formalParameter, type
-        // token labels:
-        // rule labels: retval
-        // token list labels:
-        // rule list labels:
-        // wildcard labels:
-         [retval setTree:root_0];
-
-        retval.tree = root_0;
-
-        ANTLRRewriteRuleSubtreeStream *stream_retval =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"token retval"
-                                                                    element:retval!=nil?[retval getTree]:nil] retain];
-
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-        // 36:9: -> ^( FUNC_HDR type K_ID ( formalParameter )+ )
-        {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:36:12: ^( FUNC_HDR type K_ID ( formalParameter )+ )
-            {
-                ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:[[treeAdaptor createTree:(NSInteger)FUNC_HDR Text:[[ANTLRBaseRecognizer getTokenNames] objectAtIndex:(NSUInteger)FUNC_HDR]] retain]
-                                                                       old:root_1];
-
-                [treeAdaptor addChild:[stream_type nextTree] toTree:root_1];
-                 // TODO: args:
-                [treeAdaptor addChild:[stream_K_ID nextNode] toTree:root_1];
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:36:33: ( formalParameter )+
-                {
-                if ( !([stream_formalParameter hasNext]) ) {
-                    @throw [NSException exceptionWithName:@"RewriteEarlyExitException" reason:nil userInfo:nil];
-                }
-                while ( [stream_formalParameter hasNext] ) {
-                    [treeAdaptor addChild:[stream_formalParameter nextTree] toTree:root_1];
-
-                }
-                [stream_formalParameter reset];
-
-                }
-                [treeAdaptor addChild:root_1 toTree:root_0];
-            }
-
-        }
-
-        retval.tree = root_0;
-
-        }
-
-        /* ASTParser ruleCleanUp */
-        /* AST ruleCleanUp */
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-        [stream_K_ID release];
-        [stream_22 release];
-        [stream_23 release];
-        [stream_24 release];
-        [stream_formalParameter release];
-        [stream_type release];
-
-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-            [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        /* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end functionHeader */
-/*
- * $ANTLR start formalParameter
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:39:1: formalParameter : type declarator -> ^( ARG_DEF type declarator ) ;
- */
-- (SimpleCParser_formalParameter_return *) formalParameter
-{
-    /* ruleScopeSetUp */
-
-    /* AST ruleDeclarations */
-    SimpleCParser_formalParameter_return * retval = [SimpleCParser_formalParameter_return newSimpleCParser_formalParameter_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        /* AST ruleLabelDefs */
-        SimpleCParser_type_return * type18 = nil;
-
-        SimpleCParser_declarator_return * declarator19 = nil;
-
-
-        ANTLRRewriteRuleSubtreeStream *stream_declarator =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"rule declarator"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_type =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"rule type"] retain];
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:40:5: ( type declarator -> ^( ARG_DEF type declarator ) ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:40:9: type declarator // alt
-        {
-        [self pushFollow:FOLLOW_type_in_formalParameter281];
-        type18 = [self type];
-        [self popFollow];
-
-
-        [stream_type addElement:[type18 getTree]];  /* element() */
-        [self pushFollow:FOLLOW_declarator_in_formalParameter283];
-        declarator19 = [self declarator];
-        [self popFollow];
-
-
-        [stream_declarator addElement:[declarator19 getTree]];  /* element() */
-         /* elements */
-
-        // AST REWRITE
-        // elements: declarator, type
-        // token labels:
-        // rule labels: retval
-        // token list labels:
-        // rule list labels:
-        // wildcard labels:
-         [retval setTree:root_0];
-
-        retval.tree = root_0;
-
-        ANTLRRewriteRuleSubtreeStream *stream_retval =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"token retval"
-                                                                    element:retval!=nil?[retval getTree]:nil] retain];
-
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-        // 40:25: -> ^( ARG_DEF type declarator )
-        {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:40:28: ^( ARG_DEF type declarator )
-            {
-                ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:[[treeAdaptor createTree:(NSInteger)ARG_DEF Text:[[ANTLRBaseRecognizer getTokenNames] objectAtIndex:(NSUInteger)ARG_DEF]] retain]
-                                                                       old:root_1];
-
-                [treeAdaptor addChild:[stream_type nextTree] toTree:root_1];
-                [treeAdaptor addChild:[stream_declarator nextTree] toTree:root_1];
-
-                [treeAdaptor addChild:root_1 toTree:root_0];
-            }
-
-        }
-
-        retval.tree = root_0;
-
-        }
-
-        /* ASTParser ruleCleanUp */
-        /* AST ruleCleanUp */
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-        [stream_declarator release];
-        [stream_type release];
-
-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-            [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        /* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end formalParameter */
-/*
- * $ANTLR start type
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:43:1: type : ( K_INT | K_CHAR | K_VOID | K_ID );
- */
-- (SimpleCParser_type_return *) type
-{
-    /* ruleScopeSetUp */
-
-    /* AST ruleDeclarations */
-    SimpleCParser_type_return * retval = [SimpleCParser_type_return newSimpleCParser_type_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        /* AST ruleLabelDefs */
-        ANTLRCommonToken *set20 = nil;
-
-        ANTLRCommonTree *set20_tree=nil;
-
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:44:5: ( K_INT | K_CHAR | K_VOID | K_ID ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g: // alt
-        {
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-        /* ASTParser matchRuleBlockSet */
-        /* ASTParser matchSet */
-        set20 = (ANTLRCommonToken *)[input LT:1];
-        if ((([input LA:1] >= K_ID) && ([input LA:1] <= K_VOID))) {
-            [input consume];
-                [treeAdaptor addChild:/* ASTParser createNodeFromToken */
-            (ANTLRCommonTree *)[[treeAdaptor createTree:set20] retain] toTree:root_0 ];
-            [state setIsErrorRecovery:NO];
-        } else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
-            @throw mse;
-        }
-          /* element() */
-         /* elements */
-        }
-
-        /* ASTParser ruleCleanUp */
-        /* AST ruleCleanUp */
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-
-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-            [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        /* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end type */
-/*
- * $ANTLR start block
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:50:1: block : lc= '{' ( variable )* ( stat )* '}' -> ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* ) ;
- */
-- (SimpleCParser_block_return *) block
-{
-    /* ruleScopeSetUp */
-
-    /* AST ruleDeclarations */
-    SimpleCParser_block_return * retval = [SimpleCParser_block_return newSimpleCParser_block_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        /* AST ruleLabelDefs */
-        ANTLRCommonToken *lc = nil;
-        ANTLRCommonToken *char_literal23 = nil;
-        SimpleCParser_variable_return * variable21 = nil;
-
-        SimpleCParser_stat_return * stat22 = nil;
-
-
-        ANTLRCommonTree *lc_tree=nil;
-        ANTLRCommonTree *char_literal23_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_25 =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token 25"] retain];
-        ANTLRRewriteRuleTokenStream *stream_26 =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token 26"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_variable =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"rule variable"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_stat =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"rule stat"] retain];
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:51:5: (lc= '{' ( variable )* ( stat )* '}' -> ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* ) ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:51:9: lc= '{' ( variable )* ( stat )* '}' // alt
-        {
-        lc=(ANTLRCommonToken *)[self match:input TokenType:25 Follow:FOLLOW_25_in_block376];
-            [stream_25 addElement:lc];
-          /* element() */
-        do {
-            NSInteger alt5=2;
-            switch ([input LA:1]) {
-                case K_ID: ;
-                    {
-                    NSInteger LA5_2 = [input LA:2];
-                    if ( (LA5_2==K_ID) ) {
-                        alt5=1;
-                    }
-
-
-                    }
-                    break;
-                case K_INT: ;
-                    {
-                    NSInteger LA5_3 = [input LA:2];
-                    if ( (LA5_3==K_ID) ) {
-                        alt5=1;
-                    }
-
-
-                    }
-                    break;
-                case K_CHAR: ;
-                case K_VOID: ;
-                    {
-                    alt5=1;
-                    }
-                    break;
-
-            }
-
-            switch (alt5) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:52:13: variable // alt
-                    {
-                    [self pushFollow:FOLLOW_variable_in_block390];
-                    variable21 = [self variable];
-                    [self popFollow];
-
-
-                    [stream_variable addElement:[variable21 getTree]];  /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop5;
-            }
-        } while (YES);
-        loop5: ;
-          /* element() */
-        do {
-            NSInteger alt6=2;
-            NSInteger LA6_0 = [input LA:1];
-            if ( ((LA6_0>=K_ID && LA6_0<=K_INT)||LA6_0==K_FOR||(LA6_0>=21 && LA6_0<=22)||LA6_0==25) ) {
-                alt6=1;
-            }
-
-
-            switch (alt6) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:53:13: stat // alt
-                    {
-                    [self pushFollow:FOLLOW_stat_in_block405];
-                    stat22 = [self stat];
-                    [self popFollow];
-
-
-                    [stream_stat addElement:[stat22 getTree]];  /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop6;
-            }
-        } while (YES);
-        loop6: ;
-          /* element() */
-        char_literal23=(ANTLRCommonToken *)[self match:input TokenType:26 Follow:FOLLOW_26_in_block416];
-            [stream_26 addElement:char_literal23];
-          /* element() */
-         /* elements */
-
-        // AST REWRITE
-        // elements: stat, variable
-        // token labels:
-        // rule labels: retval
-        // token list labels:
-        // rule list labels:
-        // wildcard labels:
-         [retval setTree:root_0];
-
-        retval.tree = root_0;
-
-        ANTLRRewriteRuleSubtreeStream *stream_retval =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"token retval"
-                                                                    element:retval!=nil?[retval getTree]:nil] retain];
-
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-        // 55:9: -> ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* )
-        {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:55:12: ^( BLOCK[$lc,@\"BLOCK\"] ( variable )* ( stat )* )
-            {
-                ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:[[treeAdaptor createTree:(NSInteger)BLOCK Text:[[ANTLRBaseRecognizer getTokenNames] objectAtIndex:(NSUInteger)BLOCK]] retain]
-                                                                       old:root_1];
-
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:55:34: ( variable )*
-                while ( [stream_variable hasNext] ) {
-                    [treeAdaptor addChild:[stream_variable nextTree] toTree:root_1];
-
-                }
-                [stream_variable reset];
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:55:44: ( stat )*
-                while ( [stream_stat hasNext] ) {
-                    [treeAdaptor addChild:[stream_stat nextTree] toTree:root_1];
-
-                }
-                [stream_stat reset];
-
-                [treeAdaptor addChild:root_1 toTree:root_0];
-            }
-
-        }
-
-        retval.tree = root_0;
-
-        }
-
-        /* ASTParser ruleCleanUp */
-        /* AST ruleCleanUp */
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-        [stream_25 release];
-        [stream_26 release];
-        [stream_variable release];
-        [stream_stat release];
-
-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-            [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        /* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end block */
-/*
- * $ANTLR start stat
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:58:1: stat : ( forStat | expr ';' | block | assignStat ';' | ';' );
- */
-- (SimpleCParser_stat_return *) stat
-{
-    /* ruleScopeSetUp */
-
-    /* AST ruleDeclarations */
-    SimpleCParser_stat_return * retval = [SimpleCParser_stat_return newSimpleCParser_stat_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        /* AST ruleLabelDefs */
-        ANTLRCommonToken *char_literal26 = nil;
-        ANTLRCommonToken *char_literal29 = nil;
-        ANTLRCommonToken *char_literal30 = nil;
-        SimpleCParser_forStat_return * forStat24 = nil;
-
-        SimpleCParser_expr_return * expr25 = nil;
-
-        SimpleCParser_block_return * block27 = nil;
-
-        SimpleCParser_assignStat_return * assignStat28 = nil;
-
-
-        ANTLRCommonTree *char_literal26_tree=nil;
-        ANTLRCommonTree *char_literal29_tree=nil;
-        ANTLRCommonTree *char_literal30_tree=nil;
-
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:58:5: ( forStat | expr ';' | block | assignStat ';' | ';' ) //ruleblock
-        NSInteger alt7=5;
-        switch ([input LA:1]) {
-            case K_FOR: ;
-                {
-                alt7=1;
-                }
-                break;
-            case K_ID: ;
-                {
-                NSInteger LA7_2 = [input LA:2];
-
-                if ( (LA7_2==K_EQ) ) {
-                    alt7=4;
-                }
-                else if ( ((LA7_2>=K_EQEQ && LA7_2<=K_PLUS)||LA7_2==21) ) {
-                    alt7=2;
-                }
-                else {
-                    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:7 state:2 stream:input];
-                    @throw nvae;
-                }
-                }
-                break;
-            case K_INT: ;
-            case 22: ;
-                {
-                alt7=2;
-                }
-                break;
-            case 25: ;
-                {
-                alt7=3;
-                }
-                break;
-            case 21: ;
-                {
-                alt7=5;
-                }
-                break;
-
-        default: ;
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:7 state:0 stream:input];
-            @throw nvae;
-        }
-
-        switch (alt7) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:58:7: forStat // alt
-                {
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-                /* ASTParser ruleRef */
-                [self pushFollow:FOLLOW_forStat_in_stat449];
-                forStat24 = [self forStat];
-                [self popFollow];
-
-
-                [treeAdaptor addChild:[forStat24 getTree] toTree:root_0];  /* element() */
-                 /* elements */
-                }
-                break;
-            case 2 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:59:7: expr ';' // alt
-                {
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-                /* ASTParser ruleRef */
-                [self pushFollow:FOLLOW_expr_in_stat457];
-                expr25 = [self expr];
-                [self popFollow];
-
-
-                [treeAdaptor addChild:[expr25 getTree] toTree:root_0];  /* element() */
-                char_literal26=(ANTLRCommonToken *)[self match:input TokenType:21 Follow:FOLLOW_21_in_stat459];   /* element() */
-                 /* elements */
-                }
-                break;
-            case 3 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:60:7: block // alt
-                {
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-                /* ASTParser ruleRef */
-                [self pushFollow:FOLLOW_block_in_stat468];
-                block27 = [self block];
-                [self popFollow];
-
-
-                [treeAdaptor addChild:[block27 getTree] toTree:root_0];  /* element() */
-                 /* elements */
-                }
-                break;
-            case 4 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:61:7: assignStat ';' // alt
-                {
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-                /* ASTParser ruleRef */
-                [self pushFollow:FOLLOW_assignStat_in_stat476];
-                assignStat28 = [self assignStat];
-                [self popFollow];
-
-
-                [treeAdaptor addChild:[assignStat28 getTree] toTree:root_0];  /* element() */
-                char_literal29=(ANTLRCommonToken *)[self match:input TokenType:21 Follow:FOLLOW_21_in_stat478];   /* element() */
-                 /* elements */
-                }
-                break;
-            case 5 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:62:7: ';' // alt
-                {
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-                char_literal30=(ANTLRCommonToken *)[self match:input TokenType:21 Follow:FOLLOW_21_in_stat487];   /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-        /* ASTParser ruleCleanUp */
-        /* AST ruleCleanUp */
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-
-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-            [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        /* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end stat */
-/*
- * $ANTLR start forStat
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:65:1: forStat : K_FOR '(' start= assignStat ';' expr ';' next= assignStat ')' block -> ^( K_FOR $start expr $next block ) ;
- */
-- (SimpleCParser_forStat_return *) forStat
-{
-    /* ruleScopeSetUp */
-
-    /* AST ruleDeclarations */
-    SimpleCParser_forStat_return * retval = [SimpleCParser_forStat_return newSimpleCParser_forStat_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        /* AST ruleLabelDefs */
-        ANTLRCommonToken *K_FOR31 = nil;
-        ANTLRCommonToken *char_literal32 = nil;
-        ANTLRCommonToken *char_literal33 = nil;
-        ANTLRCommonToken *char_literal35 = nil;
-        ANTLRCommonToken *char_literal36 = nil;
-        SimpleCParser_assignStat_return * start = nil;
-
-        SimpleCParser_assignStat_return * next = nil;
-
-        SimpleCParser_expr_return * expr34 = nil;
-
-        SimpleCParser_block_return * block37 = nil;
-
-
-        ANTLRCommonTree *K_FOR31_tree=nil;
-        ANTLRCommonTree *char_literal32_tree=nil;
-        ANTLRCommonTree *char_literal33_tree=nil;
-        ANTLRCommonTree *char_literal35_tree=nil;
-        ANTLRCommonTree *char_literal36_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_21 =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token 21"] retain];
-        ANTLRRewriteRuleTokenStream *stream_22 =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token 22"] retain];
-        ANTLRRewriteRuleTokenStream *stream_24 =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token 24"] retain];
-        ANTLRRewriteRuleTokenStream *stream_K_FOR =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token K_FOR"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_assignStat =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"rule assignStat"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_block =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"rule block"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_expr =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"rule expr"] retain];
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:66:5: ( K_FOR '(' start= assignStat ';' expr ';' next= assignStat ')' block -> ^( K_FOR $start expr $next block ) ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:66:9: K_FOR '(' start= assignStat ';' expr ';' next= assignStat ')' block // alt
-        {
-        K_FOR31=(ANTLRCommonToken *)[self match:input TokenType:K_FOR Follow:FOLLOW_K_FOR_in_forStat507];
-            [stream_K_FOR addElement:K_FOR31];
-          /* element() */
-        char_literal32=(ANTLRCommonToken *)[self match:input TokenType:22 Follow:FOLLOW_22_in_forStat509];
-            [stream_22 addElement:char_literal32];
-          /* element() */
-        [self pushFollow:FOLLOW_assignStat_in_forStat513];
-        start = [self assignStat];
-        [self popFollow];
-
-
-        [stream_assignStat addElement:[start getTree]];  /* element() */
-        char_literal33=(ANTLRCommonToken *)[self match:input TokenType:21 Follow:FOLLOW_21_in_forStat515];
-            [stream_21 addElement:char_literal33];
-          /* element() */
-        [self pushFollow:FOLLOW_expr_in_forStat517];
-        expr34 = [self expr];
-        [self popFollow];
-
-
-        [stream_expr addElement:[expr34 getTree]];  /* element() */
-        char_literal35=(ANTLRCommonToken *)[self match:input TokenType:21 Follow:FOLLOW_21_in_forStat519];
-            [stream_21 addElement:char_literal35];
-          /* element() */
-        [self pushFollow:FOLLOW_assignStat_in_forStat523];
-        next = [self assignStat];
-        [self popFollow];
-
-
-        [stream_assignStat addElement:[next getTree]];  /* element() */
-        char_literal36=(ANTLRCommonToken *)[self match:input TokenType:24 Follow:FOLLOW_24_in_forStat525];
-            [stream_24 addElement:char_literal36];
-          /* element() */
-        [self pushFollow:FOLLOW_block_in_forStat527];
-        block37 = [self block];
-        [self popFollow];
-
-
-        [stream_block addElement:[block37 getTree]];  /* element() */
-         /* elements */
-
-        // AST REWRITE
-        // elements: K_FOR, expr, start, next, block
-        // token labels:
-        // rule labels: retval, start, next
-        // token list labels:
-        // rule list labels:
-        // wildcard labels:
-         [retval setTree:root_0];
-
-        retval.tree = root_0;
-
-        ANTLRRewriteRuleSubtreeStream *stream_retval =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"token retval"
-                                                                    element:retval!=nil?[retval getTree]:nil] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_start =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"token start"
-                                                                    element:start!=nil?[start getTree]:nil] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_next =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"token next"
-                                                                    element:next!=nil?[next getTree]:nil] retain];
-
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-        // 67:9: -> ^( K_FOR $start expr $next block )
-        {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:67:12: ^( K_FOR $start expr $next block )
-            {
-                ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:[stream_K_FOR nextNode] old:root_1];
-
-                [treeAdaptor addChild:[stream_start nextTree] toTree:root_1];
-                [treeAdaptor addChild:[stream_expr nextTree] toTree:root_1];
-                [treeAdaptor addChild:[stream_next nextTree] toTree:root_1];
-                [treeAdaptor addChild:[stream_block nextTree] toTree:root_1];
-
-                [treeAdaptor addChild:root_1 toTree:root_0];
-            }
-
-        }
-
-        retval.tree = root_0;
-
-        }
-
-        /* ASTParser ruleCleanUp */
-        /* AST ruleCleanUp */
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-        [stream_21 release];
-        [stream_22 release];
-        [stream_24 release];
-        [stream_K_FOR release];
-        [stream_assignStat release];
-        [stream_block release];
-        [stream_expr release];
-
-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-            [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        /* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end forStat */
-/*
- * $ANTLR start assignStat
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:70:1: assignStat : K_ID K_EQ expr -> ^( K_EQ K_ID expr ) ;
- */
-- (SimpleCParser_assignStat_return *) assignStat
-{
-    /* ruleScopeSetUp */
-
-    /* AST ruleDeclarations */
-    SimpleCParser_assignStat_return * retval = [SimpleCParser_assignStat_return newSimpleCParser_assignStat_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        /* AST ruleLabelDefs */
-        ANTLRCommonToken *K_ID38 = nil;
-        ANTLRCommonToken *K_EQ39 = nil;
-        SimpleCParser_expr_return * expr40 = nil;
-
-
-        ANTLRCommonTree *K_ID38_tree=nil;
-        ANTLRCommonTree *K_EQ39_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_K_ID =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token K_ID"] retain];
-        ANTLRRewriteRuleTokenStream *stream_K_EQ =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token K_EQ"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_expr =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"rule expr"] retain];
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:71:5: ( K_ID K_EQ expr -> ^( K_EQ K_ID expr ) ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:71:9: K_ID K_EQ expr // alt
-        {
-        K_ID38=(ANTLRCommonToken *)[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_assignStat570];
-            [stream_K_ID addElement:K_ID38];
-          /* element() */
-        K_EQ39=(ANTLRCommonToken *)[self match:input TokenType:K_EQ Follow:FOLLOW_K_EQ_in_assignStat572];
-            [stream_K_EQ addElement:K_EQ39];
-          /* element() */
-        [self pushFollow:FOLLOW_expr_in_assignStat574];
-        expr40 = [self expr];
-        [self popFollow];
-
-
-        [stream_expr addElement:[expr40 getTree]];  /* element() */
-         /* elements */
-
-        // AST REWRITE
-        // elements: K_EQ, K_ID, expr
-        // token labels:
-        // rule labels: retval
-        // token list labels:
-        // rule list labels:
-        // wildcard labels:
-         [retval setTree:root_0];
-
-        retval.tree = root_0;
-
-        ANTLRRewriteRuleSubtreeStream *stream_retval =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"token retval"
-                                                                    element:retval!=nil?[retval getTree]:nil] retain];
-
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-        // 71:24: -> ^( K_EQ K_ID expr )
-        {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:71:27: ^( K_EQ K_ID expr )
-            {
-                ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:[stream_K_EQ nextNode] old:root_1];
-
-                 // TODO: args:
-                [treeAdaptor addChild:[stream_K_ID nextNode] toTree:root_1];
-                [treeAdaptor addChild:[stream_expr nextTree] toTree:root_1];
-
-                [treeAdaptor addChild:root_1 toTree:root_0];
-            }
-
-        }
-
-        retval.tree = root_0;
-
-        }
-
-        /* ASTParser ruleCleanUp */
-        /* AST ruleCleanUp */
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-        [stream_K_ID release];
-        [stream_K_EQ release];
-        [stream_expr release];
-
-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-            [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        /* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end assignStat */
-/*
- * $ANTLR start expr
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:74:1: expr : condExpr ;
- */
-- (SimpleCParser_expr_return *) expr
-{
-    /* ruleScopeSetUp */
-
-    /* AST ruleDeclarations */
-    SimpleCParser_expr_return * retval = [SimpleCParser_expr_return newSimpleCParser_expr_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        /* AST ruleLabelDefs */
-        SimpleCParser_condExpr_return * condExpr41 = nil;
-
-
-
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:74:5: ( condExpr ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:74:9: condExpr // alt
-        {
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-        /* ASTParser ruleRef */
-        [self pushFollow:FOLLOW_condExpr_in_expr598];
-        condExpr41 = [self condExpr];
-        [self popFollow];
-
-
-        [treeAdaptor addChild:[condExpr41 getTree] toTree:root_0];  /* element() */
-         /* elements */
-        }
-
-        /* ASTParser ruleCleanUp */
-        /* AST ruleCleanUp */
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-
-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-            [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        /* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end expr */
-/*
- * $ANTLR start condExpr
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:77:1: condExpr : aexpr ( ( K_EQEQ | K_LT ) aexpr )? ;
- */
-- (SimpleCParser_condExpr_return *) condExpr
-{
-    /* ruleScopeSetUp */
-
-    /* AST ruleDeclarations */
-    SimpleCParser_condExpr_return * retval = [SimpleCParser_condExpr_return newSimpleCParser_condExpr_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        /* AST ruleLabelDefs */
-        ANTLRCommonToken *K_EQEQ43 = nil;
-        ANTLRCommonToken *K_LT44 = nil;
-        SimpleCParser_aexpr_return * aexpr42 = nil;
-
-        SimpleCParser_aexpr_return * aexpr45 = nil;
-
-
-        ANTLRCommonTree *K_EQEQ43_tree=nil;
-        ANTLRCommonTree *K_LT44_tree=nil;
-
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:5: ( aexpr ( ( K_EQEQ | K_LT ) aexpr )? ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:9: aexpr ( ( K_EQEQ | K_LT ) aexpr )? // alt
-        {
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-        /* ASTParser ruleRef */
-        [self pushFollow:FOLLOW_aexpr_in_condExpr617];
-        aexpr42 = [self aexpr];
-        [self popFollow];
-
-
-        [treeAdaptor addChild:[aexpr42 getTree] toTree:root_0];  /* element() */
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:15: ( ( K_EQEQ | K_LT ) aexpr )? // block
-        NSInteger alt9=2;
-        NSInteger LA9_0 = [input LA:1];
-
-        if ( ((LA9_0>=K_EQEQ && LA9_0<=K_LT)) ) {
-            alt9=1;
-        }
-        switch (alt9) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:17: ( K_EQEQ | K_LT ) aexpr // alt
-                {
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:17: ( K_EQEQ | K_LT ) // block
-                NSInteger alt8=2;
-                NSInteger LA8_0 = [input LA:1];
-
-                if ( (LA8_0==K_EQEQ) ) {
-                    alt8=1;
-                }
-                else if ( (LA8_0==K_LT) ) {
-                    alt8=2;
-                }
-                else {
-                    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:8 state:0 stream:input];
-                    @throw nvae;
-                }
-                switch (alt8) {
-                    case 1 : ;
-                        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:18: K_EQEQ // alt
-                        {
-                        K_EQEQ43=(ANTLRCommonToken *)[self match:input TokenType:K_EQEQ Follow:FOLLOW_K_EQEQ_in_condExpr622];
-                        K_EQEQ43_tree = /* ASTParser createNodeFromToken */
-                        (ANTLRCommonTree *)[[treeAdaptor createTree:K_EQEQ43] retain];
-                        root_0 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:K_EQEQ43_tree old:root_0];
-                          /* element() */
-                         /* elements */
-                        }
-                        break;
-                    case 2 : ;
-                        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:78:28: K_LT // alt
-                        {
-                        K_LT44=(ANTLRCommonToken *)[self match:input TokenType:K_LT Follow:FOLLOW_K_LT_in_condExpr627];
-                        K_LT44_tree = /* ASTParser createNodeFromToken */
-                        (ANTLRCommonTree *)[[treeAdaptor createTree:K_LT44] retain];
-                        root_0 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:K_LT44_tree old:root_0];
-                          /* element() */
-                         /* elements */
-                        }
-                        break;
-
-                }
-                  /* element() */
-                /* ASTParser ruleRef */
-                [self pushFollow:FOLLOW_aexpr_in_condExpr631];
-                aexpr45 = [self aexpr];
-                [self popFollow];
-
-
-                [treeAdaptor addChild:[aexpr45 getTree] toTree:root_0];  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-          /* element() */
-         /* elements */
-        }
-
-        /* ASTParser ruleCleanUp */
-        /* AST ruleCleanUp */
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-
-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-            [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        /* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end condExpr */
-/*
- * $ANTLR start aexpr
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:81:1: aexpr : atom ( K_PLUS atom )* ;
- */
-- (SimpleCParser_aexpr_return *) aexpr
-{
-    /* ruleScopeSetUp */
-
-    /* AST ruleDeclarations */
-    SimpleCParser_aexpr_return * retval = [SimpleCParser_aexpr_return newSimpleCParser_aexpr_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        /* AST ruleLabelDefs */
-        ANTLRCommonToken *K_PLUS47 = nil;
-        SimpleCParser_atom_return * atom46 = nil;
-
-        SimpleCParser_atom_return * atom48 = nil;
-
-
-        ANTLRCommonTree *K_PLUS47_tree=nil;
-
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:82:5: ( atom ( K_PLUS atom )* ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:82:9: atom ( K_PLUS atom )* // alt
-        {
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-        /* ASTParser ruleRef */
-        [self pushFollow:FOLLOW_atom_in_aexpr653];
-        atom46 = [self atom];
-        [self popFollow];
-
-
-        [treeAdaptor addChild:[atom46 getTree] toTree:root_0];  /* element() */
-        do {
-            NSInteger alt10=2;
-            NSInteger LA10_0 = [input LA:1];
-            if ( (LA10_0==K_PLUS) ) {
-                alt10=1;
-            }
-
-
-            switch (alt10) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:82:16: K_PLUS atom // alt
-                    {
-                    K_PLUS47=(ANTLRCommonToken *)[self match:input TokenType:K_PLUS Follow:FOLLOW_K_PLUS_in_aexpr657];
-                    K_PLUS47_tree = /* ASTParser createNodeFromToken */
-                    (ANTLRCommonTree *)[[treeAdaptor createTree:K_PLUS47] retain];
-                    root_0 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:K_PLUS47_tree old:root_0];
-                      /* element() */
-                    /* ASTParser ruleRef */
-                    [self pushFollow:FOLLOW_atom_in_aexpr660];
-                    atom48 = [self atom];
-                    [self popFollow];
-
-
-                    [treeAdaptor addChild:[atom48 getTree] toTree:root_0];  /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    goto loop10;
-            }
-        } while (YES);
-        loop10: ;
-          /* element() */
-         /* elements */
-        }
-
-        /* ASTParser ruleCleanUp */
-        /* AST ruleCleanUp */
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-
-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-            [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        /* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end aexpr */
-/*
- * $ANTLR start atom
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:85:1: atom : ( K_ID | K_INT | '(' expr ')' -> expr );
- */
-- (SimpleCParser_atom_return *) atom
-{
-    /* ruleScopeSetUp */
-
-    /* AST ruleDeclarations */
-    SimpleCParser_atom_return * retval = [SimpleCParser_atom_return newSimpleCParser_atom_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        /* AST ruleLabelDefs */
-        ANTLRCommonToken *K_ID49 = nil;
-        ANTLRCommonToken *K_INT50 = nil;
-        ANTLRCommonToken *char_literal51 = nil;
-        ANTLRCommonToken *char_literal53 = nil;
-        SimpleCParser_expr_return * expr52 = nil;
-
-
-        ANTLRCommonTree *K_ID49_tree=nil;
-        ANTLRCommonTree *K_INT50_tree=nil;
-        ANTLRCommonTree *char_literal51_tree=nil;
-        ANTLRCommonTree *char_literal53_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_22 =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token 22"] retain];
-        ANTLRRewriteRuleTokenStream *stream_24 =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token 24"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_expr =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"rule expr"] retain];
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:86:5: ( K_ID | K_INT | '(' expr ')' -> expr ) //ruleblock
-        NSInteger alt11=3;
-        switch ([input LA:1]) {
-            case K_ID: ;
-                {
-                alt11=1;
-                }
-                break;
-            case K_INT: ;
-                {
-                alt11=2;
-                }
-                break;
-            case 22: ;
-                {
-                alt11=3;
-                }
-                break;
-
-        default: ;
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:11 state:0 stream:input];
-            @throw nvae;
-        }
-
-        switch (alt11) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:86:7: K_ID // alt
-                {
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-                /* ASTParser tokenRef */
-                K_ID49=(ANTLRCommonToken *)[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_atom680];
-                K_ID49_tree = /* ASTParser createNodeFromToken */
-                (ANTLRCommonTree *)[[treeAdaptor createTree:K_ID49] retain];
-                [treeAdaptor addChild:K_ID49_tree  toTree:root_0];
-                  /* element() */
-                 /* elements */
-                }
-                break;
-            case 2 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:87:7: K_INT // alt
-                {
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-                /* ASTParser tokenRef */
-                K_INT50=(ANTLRCommonToken *)[self match:input TokenType:K_INT Follow:FOLLOW_K_INT_in_atom694];
-                K_INT50_tree = /* ASTParser createNodeFromToken */
-                (ANTLRCommonTree *)[[treeAdaptor createTree:K_INT50] retain];
-                [treeAdaptor addChild:K_INT50_tree  toTree:root_0];
-                  /* element() */
-                 /* elements */
-                }
-                break;
-            case 3 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleC.g:88:7: '(' expr ')' // alt
-                {
-                char_literal51=(ANTLRCommonToken *)[self match:input TokenType:22 Follow:FOLLOW_22_in_atom708];
-                    [stream_22 addElement:char_literal51];
-                  /* element() */
-                [self pushFollow:FOLLOW_expr_in_atom710];
-                expr52 = [self expr];
-                [self popFollow];
-
-
-                [stream_expr addElement:[expr52 getTree]];  /* element() */
-                char_literal53=(ANTLRCommonToken *)[self match:input TokenType:24 Follow:FOLLOW_24_in_atom712];
-                    [stream_24 addElement:char_literal53];
-                  /* element() */
-                 /* elements */
-
-                // AST REWRITE
-                // elements: expr
-                // token labels:
-                // rule labels: retval
-                // token list labels:
-                // rule list labels:
-                // wildcard labels:
-                 [retval setTree:root_0];
-
-                retval.tree = root_0;
-
-                ANTLRRewriteRuleSubtreeStream *stream_retval =
-                    [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                        description:@"token retval"
-                                                                            element:retval!=nil?[retval getTree]:nil] retain];
-
-                root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-                // 88:20: -> expr
-                {
-                    [treeAdaptor addChild:[stream_expr nextTree] toTree:root_0];
-
-                }
-
-                retval.tree = root_0;
-
-                }
-                break;
-
-        }
-        /* ASTParser ruleCleanUp */
-        /* AST ruleCleanUp */
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-        [stream_22 release];
-        [stream_24 release];
-        [stream_expr release];
-
-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-            [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        /* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end atom */
-
-@end /* end of SimpleCParser implementation line 669 */
-
-
-/* End of code
- * =============================================================================
- */
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCTP.h b/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCTP.h
deleted file mode 100644
index fd59407..0000000
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCTP.h
+++ /dev/null
@@ -1,102 +0,0 @@
-// $ANTLR 3.2 Aug 23, 2010 07:48:06 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g 2010-08-23 07:55:04
-
-/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
- */
-#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
-/* End of standard antlr3 runtime definitions
- * =============================================================================
- */
-
-#pragma mark Tokens
-#define K_ID 10
-#define T__26 26
-#define T__25 25
-#define T__24 24
-#define T__23 23
-#define K_EQEQ 16
-#define T__22 22
-#define K_INT 11
-#define T__21 21
-#define K_FOR 14
-#define FUNC_HDR 6
-#define FUNC_DEF 8
-#define EOF -1
-#define K_INT_TYPE 19
-#define FUNC_DECL 7
-#define ARG_DEF 5
-#define WS 20
-#define K_EQ 15
-#define BLOCK 9
-#define K_LT 17
-#define K_CHAR 12
-#define K_VOID 13
-#define VAR_DEF 4
-#define K_PLUS 18
-#pragma mark Dynamic Global Scopes
-@interface Symbols_Scope : ANTLRSymbolsScope {  /* globalAttributeScopeDecl */
-ANTLRCommonTree * tree;
-}
-/* start of properties */
-
-@property (retain, getter=gettree, setter=settree:) ANTLRCommonTree * tree;
-
-/* end properties */
-
-+ (Symbols_Scope *)newSymbols_Scope;
-/* start of iterated get and set functions */
-
-- (ANTLRCommonTree *)gettree;
-- (void)settree:(ANTLRCommonTree *)aVal;
-
-/* End of iterated get and set functions */
-
-@end /* end of Symbols_Scope interface */
-
-#pragma mark Dynamic Rule Scopes
-#pragma mark Rule Return Scopes start
-@interface SimpleCTP_expr_return :ANTLRTreeRuleReturnScope { // line 1672
- // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (SimpleCTP_expr_return *)newSimpleCTP_expr_return;
-// this is start of set and get methods
-  // methodsDecl
-@end /* end of returnScopeInterface interface */
-
-#pragma mark Rule return scopes end
-@interface SimpleCTP : ANTLRTreeParser { // line 529
-// start of globalAttributeScopeMemVar
-/* globalAttributeScopeMemVar */
-ANTLRSymbolStack *gStack;
-Symbols_Scope *Symbols_scope;
-
-// start of action-actionScope-memVars
-// start of ruleAttributeScopeMemVar
-
-
-// Start of memVars
-
- }
-
-// start of action-actionScope-methodsDecl
-
-
-- (void)program;
-- (void)declaration;
-- (void)variable;
-- (void)declarator;
-- (void)functionHeader;
-- (void)formalParameter;
-- (void)type;
-- (void)block;
-- (void)stat;
-- (void)forStat;
-- (SimpleCTP_expr_return *)expr;
-- (void)atom;
-
-
-@end /* end of SimpleCTP interface */
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCTP.java b/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCTP.java
deleted file mode 100644
index 4c3ccc2..0000000
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCTP.java
+++ /dev/null
@@ -1,852 +0,0 @@
-// $ANTLR 3.2 Aug 13, 2010 19:41:25 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g 2010-08-13 19:42:13
-
-import org.antlr.runtime.*;
-import org.antlr.runtime.tree.*;import java.util.Stack;
-import java.util.List;
-import java.util.ArrayList;
-
-public class SimpleCTP extends TreeParser {
-    public static final String[] tokenNames = new String[] {
-        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "VAR_DEF", "ARG_DEF", "FUNC_HDR", "FUNC_DECL", "FUNC_DEF", "BLOCK", "ID", "EQ", "INT", "FOR", "INT_TYPE", "CHAR", "VOID", "EQEQ", "LT", "PLUS", "WS", "';'", "'('", "','", "')'", "'{'", "'}'"
-    };
-    public static final int LT=18;
-    public static final int T__26=26;
-    public static final int T__25=25;
-    public static final int T__24=24;
-    public static final int T__23=23;
-    public static final int T__22=22;
-    public static final int T__21=21;
-    public static final int CHAR=15;
-    public static final int FOR=13;
-    public static final int FUNC_HDR=6;
-    public static final int INT=12;
-    public static final int FUNC_DEF=8;
-    public static final int INT_TYPE=14;
-    public static final int ID=10;
-    public static final int EOF=-1;
-    public static final int FUNC_DECL=7;
-    public static final int ARG_DEF=5;
-    public static final int WS=20;
-    public static final int BLOCK=9;
-    public static final int PLUS=19;
-    public static final int VOID=16;
-    public static final int EQ=11;
-    public static final int VAR_DEF=4;
-    public static final int EQEQ=17;
-
-    // delegates
-    // delegators
-
-
-        public SimpleCTP(TreeNodeStream input) {
-            this(input, new RecognizerSharedState());
-        }
-        public SimpleCTP(TreeNodeStream input, RecognizerSharedState state) {
-            super(input, state);
-
-        }
-
-
-    public String[] getTokenNames() { return SimpleCTP.tokenNames; }
-    public String getGrammarFileName() { return "/usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g"; }
-
-
-
-    // $ANTLR start "program"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:8:1: program : ( declaration )+ ;
-    public final void program() throws RecognitionException {
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:9:5: ( ( declaration )+ )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:9:9: ( declaration )+
-            {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:9:9: ( declaration )+
-            int cnt1=0;
-            loop1:
-            do {
-                int alt1=2;
-                int LA1_0 = input.LA(1);
-
-                if ( (LA1_0==VAR_DEF||(LA1_0>=FUNC_DECL && LA1_0<=FUNC_DEF)) ) {
-                    alt1=1;
-                }
-
-
-                switch (alt1) {
-            	case 1 :
-            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:9:9: declaration
-            	    {
-            	    pushFollow(FOLLOW_declaration_in_program43);
-            	    declaration();
-
-            	    state._fsp--;
-
-
-            	    }
-            	    break;
-
-            	default :
-            	    if ( cnt1 >= 1 ) break loop1;
-                        EarlyExitException eee =
-                            new EarlyExitException(1, input);
-                        throw eee;
-                }
-                cnt1++;
-            } while (true);
-
-
-            }
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-        }
-        finally {
-        }
-        return ;
-    }
-    // $ANTLR end "program"
-
-
-    // $ANTLR start "declaration"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:12:1: declaration : ( variable | ^( FUNC_DECL functionHeader ) | ^( FUNC_DEF functionHeader block ) );
-    public final void declaration() throws RecognitionException {
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:13:5: ( variable | ^( FUNC_DECL functionHeader ) | ^( FUNC_DEF functionHeader block ) )
-            int alt2=3;
-            switch ( input.LA(1) ) {
-            case VAR_DEF:
-                {
-                alt2=1;
-                }
-                break;
-            case FUNC_DECL:
-                {
-                alt2=2;
-                }
-                break;
-            case FUNC_DEF:
-                {
-                alt2=3;
-                }
-                break;
-            default:
-                NoViableAltException nvae =
-                    new NoViableAltException("", 2, 0, input);
-
-                throw nvae;
-            }
-
-            switch (alt2) {
-                case 1 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:13:9: variable
-                    {
-                    pushFollow(FOLLOW_variable_in_declaration63);
-                    variable();
-
-                    state._fsp--;
-
-
-                    }
-                    break;
-                case 2 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:14:9: ^( FUNC_DECL functionHeader )
-                    {
-                    match(input,FUNC_DECL,FOLLOW_FUNC_DECL_in_declaration74);
-
-                    match(input, Token.DOWN, null);
-                    pushFollow(FOLLOW_functionHeader_in_declaration76);
-                    functionHeader();
-
-                    state._fsp--;
-
-
-                    match(input, Token.UP, null);
-
-                    }
-                    break;
-                case 3 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:15:9: ^( FUNC_DEF functionHeader block )
-                    {
-                    match(input,FUNC_DEF,FOLLOW_FUNC_DEF_in_declaration88);
-
-                    match(input, Token.DOWN, null);
-                    pushFollow(FOLLOW_functionHeader_in_declaration90);
-                    functionHeader();
-
-                    state._fsp--;
-
-                    pushFollow(FOLLOW_block_in_declaration92);
-                    block();
-
-                    state._fsp--;
-
-
-                    match(input, Token.UP, null);
-
-                    }
-                    break;
-
-            }
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-        }
-        finally {
-        }
-        return ;
-    }
-    // $ANTLR end "declaration"
-
-
-    // $ANTLR start "variable"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:18:1: variable : ^( VAR_DEF type declarator ) ;
-    public final void variable() throws RecognitionException {
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:19:5: ( ^( VAR_DEF type declarator ) )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:19:9: ^( VAR_DEF type declarator )
-            {
-            match(input,VAR_DEF,FOLLOW_VAR_DEF_in_variable113);
-
-            match(input, Token.DOWN, null);
-            pushFollow(FOLLOW_type_in_variable115);
-            type();
-
-            state._fsp--;
-
-            pushFollow(FOLLOW_declarator_in_variable117);
-            declarator();
-
-            state._fsp--;
-
-
-            match(input, Token.UP, null);
-
-            }
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-        }
-        finally {
-        }
-        return ;
-    }
-    // $ANTLR end "variable"
-
-
-    // $ANTLR start "declarator"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:22:1: declarator : ID ;
-    public final void declarator() throws RecognitionException {
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:23:5: ( ID )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:23:9: ID
-            {
-            match(input,ID,FOLLOW_ID_in_declarator137);
-
-            }
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-        }
-        finally {
-        }
-        return ;
-    }
-    // $ANTLR end "declarator"
-
-
-    // $ANTLR start "functionHeader"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:26:1: functionHeader : ^( FUNC_HDR type ID ( formalParameter )+ ) ;
-    public final void functionHeader() throws RecognitionException {
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:27:5: ( ^( FUNC_HDR type ID ( formalParameter )+ ) )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:27:9: ^( FUNC_HDR type ID ( formalParameter )+ )
-            {
-            match(input,FUNC_HDR,FOLLOW_FUNC_HDR_in_functionHeader158);
-
-            match(input, Token.DOWN, null);
-            pushFollow(FOLLOW_type_in_functionHeader160);
-            type();
-
-            state._fsp--;
-
-            match(input,ID,FOLLOW_ID_in_functionHeader162);
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:27:28: ( formalParameter )+
-            int cnt3=0;
-            loop3:
-            do {
-                int alt3=2;
-                int LA3_0 = input.LA(1);
-
-                if ( (LA3_0==ARG_DEF) ) {
-                    alt3=1;
-                }
-
-
-                switch (alt3) {
-            	case 1 :
-            	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:27:28: formalParameter
-            	    {
-            	    pushFollow(FOLLOW_formalParameter_in_functionHeader164);
-            	    formalParameter();
-
-            	    state._fsp--;
-
-
-            	    }
-            	    break;
-
-            	default :
-            	    if ( cnt3 >= 1 ) break loop3;
-                        EarlyExitException eee =
-                            new EarlyExitException(3, input);
-                        throw eee;
-                }
-                cnt3++;
-            } while (true);
-
-
-            match(input, Token.UP, null);
-
-            }
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-        }
-        finally {
-        }
-        return ;
-    }
-    // $ANTLR end "functionHeader"
-
-
-    // $ANTLR start "formalParameter"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:30:1: formalParameter : ^( ARG_DEF type declarator ) ;
-    public final void formalParameter() throws RecognitionException {
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:31:5: ( ^( ARG_DEF type declarator ) )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:31:9: ^( ARG_DEF type declarator )
-            {
-            match(input,ARG_DEF,FOLLOW_ARG_DEF_in_formalParameter186);
-
-            match(input, Token.DOWN, null);
-            pushFollow(FOLLOW_type_in_formalParameter188);
-            type();
-
-            state._fsp--;
-
-            pushFollow(FOLLOW_declarator_in_formalParameter190);
-            declarator();
-
-            state._fsp--;
-
-
-            match(input, Token.UP, null);
-
-            }
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-        }
-        finally {
-        }
-        return ;
-    }
-    // $ANTLR end "formalParameter"
-
-
-    // $ANTLR start "type"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:34:1: type : ( 'int' | 'char' | 'void' | ID );
-    public final void type() throws RecognitionException {
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:35:5: ( 'int' | 'char' | 'void' | ID )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:
-            {
-            if ( input.LA(1)==ID||(input.LA(1)>=INT_TYPE && input.LA(1)<=VOID) ) {
-                input.consume();
-                state.errorRecovery=false;
-            }
-            else {
-                MismatchedSetException mse = new MismatchedSetException(null,input);
-                throw mse;
-            }
-
-
-            }
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-        }
-        finally {
-        }
-        return ;
-    }
-    // $ANTLR end "type"
-
-
-    // $ANTLR start "block"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:41:1: block : ^( BLOCK ( variable )* ( stat )* ) ;
-    public final void block() throws RecognitionException {
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:42:5: ( ^( BLOCK ( variable )* ( stat )* ) )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:42:9: ^( BLOCK ( variable )* ( stat )* )
-            {
-            match(input,BLOCK,FOLLOW_BLOCK_in_block273);
-
-            if ( input.LA(1)==Token.DOWN ) {
-                match(input, Token.DOWN, null);
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:42:17: ( variable )*
-                loop4:
-                do {
-                    int alt4=2;
-                    int LA4_0 = input.LA(1);
-
-                    if ( (LA4_0==VAR_DEF) ) {
-                        alt4=1;
-                    }
-
-
-                    switch (alt4) {
-                	case 1 :
-                	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:42:17: variable
-                	    {
-                	    pushFollow(FOLLOW_variable_in_block275);
-                	    variable();
-
-                	    state._fsp--;
-
-
-                	    }
-                	    break;
-
-                	default :
-                	    break loop4;
-                    }
-                } while (true);
-
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:42:27: ( stat )*
-                loop5:
-                do {
-                    int alt5=2;
-                    int LA5_0 = input.LA(1);
-
-                    if ( ((LA5_0>=BLOCK && LA5_0<=FOR)||(LA5_0>=EQEQ && LA5_0<=PLUS)) ) {
-                        alt5=1;
-                    }
-
-
-                    switch (alt5) {
-                	case 1 :
-                	    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:42:27: stat
-                	    {
-                	    pushFollow(FOLLOW_stat_in_block278);
-                	    stat();
-
-                	    state._fsp--;
-
-
-                	    }
-                	    break;
-
-                	default :
-                	    break loop5;
-                    }
-                } while (true);
-
-
-                match(input, Token.UP, null);
-            }
-
-            }
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-        }
-        finally {
-        }
-        return ;
-    }
-    // $ANTLR end "block"
-
-
-    // $ANTLR start "stat"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:45:1: stat : ( forStat | expr | block );
-    public final void stat() throws RecognitionException {
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:45:5: ( forStat | expr | block )
-            int alt6=3;
-            switch ( input.LA(1) ) {
-            case FOR:
-                {
-                alt6=1;
-                }
-                break;
-            case ID:
-            case EQ:
-            case INT:
-            case EQEQ:
-            case LT:
-            case PLUS:
-                {
-                alt6=2;
-                }
-                break;
-            case BLOCK:
-                {
-                alt6=3;
-                }
-                break;
-            default:
-                NoViableAltException nvae =
-                    new NoViableAltException("", 6, 0, input);
-
-                throw nvae;
-            }
-
-            switch (alt6) {
-                case 1 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:45:7: forStat
-                    {
-                    pushFollow(FOLLOW_forStat_in_stat292);
-                    forStat();
-
-                    state._fsp--;
-
-
-                    }
-                    break;
-                case 2 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:46:7: expr
-                    {
-                    pushFollow(FOLLOW_expr_in_stat300);
-                    expr();
-
-                    state._fsp--;
-
-
-                    }
-                    break;
-                case 3 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:47:7: block
-                    {
-                    pushFollow(FOLLOW_block_in_stat308);
-                    block();
-
-                    state._fsp--;
-
-
-                    }
-                    break;
-
-            }
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-        }
-        finally {
-        }
-        return ;
-    }
-    // $ANTLR end "stat"
-
-
-    // $ANTLR start "forStat"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:50:1: forStat : ^( 'for' expr expr expr block ) ;
-    public final void forStat() throws RecognitionException {
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:51:5: ( ^( 'for' expr expr expr block ) )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:51:9: ^( 'for' expr expr expr block )
-            {
-            match(input,FOR,FOLLOW_FOR_in_forStat328);
-
-            match(input, Token.DOWN, null);
-            pushFollow(FOLLOW_expr_in_forStat330);
-            expr();
-
-            state._fsp--;
-
-            pushFollow(FOLLOW_expr_in_forStat332);
-            expr();
-
-            state._fsp--;
-
-            pushFollow(FOLLOW_expr_in_forStat334);
-            expr();
-
-            state._fsp--;
-
-            pushFollow(FOLLOW_block_in_forStat336);
-            block();
-
-            state._fsp--;
-
-
-            match(input, Token.UP, null);
-
-            }
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-        }
-        finally {
-        }
-        return ;
-    }
-    // $ANTLR end "forStat"
-
-    public static class expr_return extends TreeRuleReturnScope {
-    };
-
-    // $ANTLR start "expr"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:54:1: expr : ( ^( EQEQ expr expr ) | ^( LT expr expr ) | ^( PLUS expr expr ) | ^( EQ ID e= expr ) | atom );
-    public final SimpleCTP.expr_return expr() throws RecognitionException {
-        SimpleCTP.expr_return retval = new SimpleCTP.expr_return();
-        retval.start = input.LT(1);
-
-        ANTLRCommonTree ID1=null;
-        SimpleCTP.expr_return e = null;
-
-
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:54:5: ( ^( EQEQ expr expr ) | ^( LT expr expr ) | ^( PLUS expr expr ) | ^( EQ ID e= expr ) | atom )
-            int alt7=5;
-            switch ( input.LA(1) ) {
-            case EQEQ:
-                {
-                alt7=1;
-                }
-                break;
-            case LT:
-                {
-                alt7=2;
-                }
-                break;
-            case PLUS:
-                {
-                alt7=3;
-                }
-                break;
-            case EQ:
-                {
-                alt7=4;
-                }
-                break;
-            case ID:
-            case INT:
-                {
-                alt7=5;
-                }
-                break;
-            default:
-                NoViableAltException nvae =
-                    new NoViableAltException("", 7, 0, input);
-
-                throw nvae;
-            }
-
-            switch (alt7) {
-                case 1 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:54:9: ^( EQEQ expr expr )
-                    {
-                    match(input,EQEQ,FOLLOW_EQEQ_in_expr352);
-
-                    match(input, Token.DOWN, null);
-                    pushFollow(FOLLOW_expr_in_expr354);
-                    expr();
-
-                    state._fsp--;
-
-                    pushFollow(FOLLOW_expr_in_expr356);
-                    expr();
-
-                    state._fsp--;
-
-
-                    match(input, Token.UP, null);
-
-                    }
-                    break;
-                case 2 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:55:9: ^( LT expr expr )
-                    {
-                    match(input,LT,FOLLOW_LT_in_expr368);
-
-                    match(input, Token.DOWN, null);
-                    pushFollow(FOLLOW_expr_in_expr370);
-                    expr();
-
-                    state._fsp--;
-
-                    pushFollow(FOLLOW_expr_in_expr372);
-                    expr();
-
-                    state._fsp--;
-
-
-                    match(input, Token.UP, null);
-
-                    }
-                    break;
-                case 3 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:56:9: ^( PLUS expr expr )
-                    {
-                    match(input,PLUS,FOLLOW_PLUS_in_expr384);
-
-                    match(input, Token.DOWN, null);
-                    pushFollow(FOLLOW_expr_in_expr386);
-                    expr();
-
-                    state._fsp--;
-
-                    pushFollow(FOLLOW_expr_in_expr388);
-                    expr();
-
-                    state._fsp--;
-
-
-                    match(input, Token.UP, null);
-
-                    }
-                    break;
-                case 4 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:57:9: ^( EQ ID e= expr )
-                    {
-                    match(input,EQ,FOLLOW_EQ_in_expr400);
-
-                    match(input, Token.DOWN, null);
-                    ID1=(ANTLRCommonTree)match(input,ID,FOLLOW_ID_in_expr402);
-                    pushFollow(FOLLOW_expr_in_expr406);
-                    e=expr();
-
-                    state._fsp--;
-
-
-                    match(input, Token.UP, null);
-                     NSLog(@"assigning %@ to variable %@", (e!=null?(input.getTokenStream().toString(
-                      input.getTreeAdaptor().getTokenStartIndex(e.start),
-                      input.getTreeAdaptor().getTokenStopIndex(e.start))):null), (ID1!=null?ID1.getText():null));
-
-                    }
-                    break;
-                case 5 :
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:58:9: atom
-                    {
-                    pushFollow(FOLLOW_atom_in_expr419);
-                    atom();
-
-                    state._fsp--;
-
-
-                    }
-                    break;
-
-            }
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-        }
-        finally {
-        }
-        return retval;
-    }
-    // $ANTLR end "expr"
-
-
-    // $ANTLR start "atom"
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:61:1: atom : ( ID | INT );
-    public final void atom() throws RecognitionException {
-        try {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:62:5: ( ID | INT )
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:
-            {
-            if ( input.LA(1)==ID||input.LA(1)==INT ) {
-                input.consume();
-                state.errorRecovery=false;
-            }
-            else {
-                MismatchedSetException mse = new MismatchedSetException(null,input);
-                throw mse;
-            }
-
-
-            }
-
-        }
-        catch (RecognitionException re) {
-            reportError(re);
-            recover(input,re);
-        }
-        finally {
-        }
-        return ;
-    }
-    // $ANTLR end "atom"
-
-    // Delegated rules
-
-
-
-
-    public static final BitSet FOLLOW_declaration_in_program43 = new BitSet(new long[]{0x0000000000000192L});
-    public static final BitSet FOLLOW_variable_in_declaration63 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_FUNC_DECL_in_declaration74 = new BitSet(new long[]{0x0000000000000004L});
-    public static final BitSet FOLLOW_functionHeader_in_declaration76 = new BitSet(new long[]{0x0000000000000008L});
-    public static final BitSet FOLLOW_FUNC_DEF_in_declaration88 = new BitSet(new long[]{0x0000000000000004L});
-    public static final BitSet FOLLOW_functionHeader_in_declaration90 = new BitSet(new long[]{0x0000000000000200L});
-    public static final BitSet FOLLOW_block_in_declaration92 = new BitSet(new long[]{0x0000000000000008L});
-    public static final BitSet FOLLOW_VAR_DEF_in_variable113 = new BitSet(new long[]{0x0000000000000004L});
-    public static final BitSet FOLLOW_type_in_variable115 = new BitSet(new long[]{0x0000000000000400L});
-    public static final BitSet FOLLOW_declarator_in_variable117 = new BitSet(new long[]{0x0000000000000008L});
-    public static final BitSet FOLLOW_ID_in_declarator137 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_FUNC_HDR_in_functionHeader158 = new BitSet(new long[]{0x0000000000000004L});
-    public static final BitSet FOLLOW_type_in_functionHeader160 = new BitSet(new long[]{0x0000000000000400L});
-    public static final BitSet FOLLOW_ID_in_functionHeader162 = new BitSet(new long[]{0x0000000000000020L});
-    public static final BitSet FOLLOW_formalParameter_in_functionHeader164 = new BitSet(new long[]{0x0000000000000028L});
-    public static final BitSet FOLLOW_ARG_DEF_in_formalParameter186 = new BitSet(new long[]{0x0000000000000004L});
-    public static final BitSet FOLLOW_type_in_formalParameter188 = new BitSet(new long[]{0x0000000000000400L});
-    public static final BitSet FOLLOW_declarator_in_formalParameter190 = new BitSet(new long[]{0x0000000000000008L});
-    public static final BitSet FOLLOW_set_in_type0 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_BLOCK_in_block273 = new BitSet(new long[]{0x0000000000000004L});
-    public static final BitSet FOLLOW_variable_in_block275 = new BitSet(new long[]{0x00000000000E3E18L});
-    public static final BitSet FOLLOW_stat_in_block278 = new BitSet(new long[]{0x00000000000E3E08L});
-    public static final BitSet FOLLOW_forStat_in_stat292 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_expr_in_stat300 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_block_in_stat308 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_FOR_in_forStat328 = new BitSet(new long[]{0x0000000000000004L});
-    public static final BitSet FOLLOW_expr_in_forStat330 = new BitSet(new long[]{0x00000000000E1C00L});
-    public static final BitSet FOLLOW_expr_in_forStat332 = new BitSet(new long[]{0x00000000000E1C00L});
-    public static final BitSet FOLLOW_expr_in_forStat334 = new BitSet(new long[]{0x0000000000000200L});
-    public static final BitSet FOLLOW_block_in_forStat336 = new BitSet(new long[]{0x0000000000000008L});
-    public static final BitSet FOLLOW_EQEQ_in_expr352 = new BitSet(new long[]{0x0000000000000004L});
-    public static final BitSet FOLLOW_expr_in_expr354 = new BitSet(new long[]{0x00000000000E1C00L});
-    public static final BitSet FOLLOW_expr_in_expr356 = new BitSet(new long[]{0x0000000000000008L});
-    public static final BitSet FOLLOW_LT_in_expr368 = new BitSet(new long[]{0x0000000000000004L});
-    public static final BitSet FOLLOW_expr_in_expr370 = new BitSet(new long[]{0x00000000000E1C00L});
-    public static final BitSet FOLLOW_expr_in_expr372 = new BitSet(new long[]{0x0000000000000008L});
-    public static final BitSet FOLLOW_PLUS_in_expr384 = new BitSet(new long[]{0x0000000000000004L});
-    public static final BitSet FOLLOW_expr_in_expr386 = new BitSet(new long[]{0x00000000000E1C00L});
-    public static final BitSet FOLLOW_expr_in_expr388 = new BitSet(new long[]{0x0000000000000008L});
-    public static final BitSet FOLLOW_EQ_in_expr400 = new BitSet(new long[]{0x0000000000000004L});
-    public static final BitSet FOLLOW_ID_in_expr402 = new BitSet(new long[]{0x00000000000E1C00L});
-    public static final BitSet FOLLOW_expr_in_expr406 = new BitSet(new long[]{0x0000000000000008L});
-    public static final BitSet FOLLOW_atom_in_expr419 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_set_in_atom0 = new BitSet(new long[]{0x0000000000000002L});
-
-}
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCTP.m b/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCTP.m
deleted file mode 100644
index 1ac0952..0000000
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCTP.m
+++ /dev/null
@@ -1,1059 +0,0 @@
-/** \file
- *  This OBJC source file was generated by $ANTLR version 3.2 Aug 23, 2010 07:48:06
- *
- *     -  From the grammar source file : /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g
- *     -                            On : 2010-08-23 07:55:04
- *     -           for the tree parser : SimpleCTPTreeParser *
- * Editing it, at least manually, is not wise.
- *
- * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
- *
- *
-*/
-// [The "BSD licence"]
-// Copyright (c) 2010 Alan Condit
-//
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. The name of the author may not be used to endorse or promote products
-//    derived from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// $ANTLR 3.2 Aug 23, 2010 07:48:06 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g 2010-08-23 07:55:04
-
-/* -----------------------------------------
- * Include the ANTLR3 generated header file.
- */
-#import "SimpleCTP.h"
-/* ----------------------------------------- */
-
-
-/* ============================================================================= */
-
-/* =============================================================================
- * Start of recognizer
- */
-
-
-
-#pragma mark Bitsets
-static ANTLRBitSet *FOLLOW_declaration_in_program56;
-static const unsigned long long FOLLOW_declaration_in_program56_data[] = { 0x0000000000000192LL};
-static ANTLRBitSet *FOLLOW_variable_in_declaration76;
-static const unsigned long long FOLLOW_variable_in_declaration76_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_FUNC_DECL_in_declaration87;
-static const unsigned long long FOLLOW_FUNC_DECL_in_declaration87_data[] = { 0x0000000000000004LL};
-static ANTLRBitSet *FOLLOW_functionHeader_in_declaration89;
-static const unsigned long long FOLLOW_functionHeader_in_declaration89_data[] = { 0x0000000000000008LL};
-static ANTLRBitSet *FOLLOW_FUNC_DEF_in_declaration101;
-static const unsigned long long FOLLOW_FUNC_DEF_in_declaration101_data[] = { 0x0000000000000004LL};
-static ANTLRBitSet *FOLLOW_functionHeader_in_declaration103;
-static const unsigned long long FOLLOW_functionHeader_in_declaration103_data[] = { 0x0000000000000200LL};
-static ANTLRBitSet *FOLLOW_block_in_declaration105;
-static const unsigned long long FOLLOW_block_in_declaration105_data[] = { 0x0000000000000008LL};
-static ANTLRBitSet *FOLLOW_VAR_DEF_in_variable126;
-static const unsigned long long FOLLOW_VAR_DEF_in_variable126_data[] = { 0x0000000000000004LL};
-static ANTLRBitSet *FOLLOW_type_in_variable128;
-static const unsigned long long FOLLOW_type_in_variable128_data[] = { 0x0000000000000400LL};
-static ANTLRBitSet *FOLLOW_declarator_in_variable130;
-static const unsigned long long FOLLOW_declarator_in_variable130_data[] = { 0x0000000000000008LL};
-static ANTLRBitSet *FOLLOW_K_ID_in_declarator150;
-static const unsigned long long FOLLOW_K_ID_in_declarator150_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_FUNC_HDR_in_functionHeader171;
-static const unsigned long long FOLLOW_FUNC_HDR_in_functionHeader171_data[] = { 0x0000000000000004LL};
-static ANTLRBitSet *FOLLOW_type_in_functionHeader173;
-static const unsigned long long FOLLOW_type_in_functionHeader173_data[] = { 0x0000000000000400LL};
-static ANTLRBitSet *FOLLOW_K_ID_in_functionHeader175;
-static const unsigned long long FOLLOW_K_ID_in_functionHeader175_data[] = { 0x0000000000000020LL};
-static ANTLRBitSet *FOLLOW_formalParameter_in_functionHeader177;
-static const unsigned long long FOLLOW_formalParameter_in_functionHeader177_data[] = { 0x0000000000000028LL};
-static ANTLRBitSet *FOLLOW_ARG_DEF_in_formalParameter199;
-static const unsigned long long FOLLOW_ARG_DEF_in_formalParameter199_data[] = { 0x0000000000000004LL};
-static ANTLRBitSet *FOLLOW_type_in_formalParameter201;
-static const unsigned long long FOLLOW_type_in_formalParameter201_data[] = { 0x0000000000000400LL};
-static ANTLRBitSet *FOLLOW_declarator_in_formalParameter203;
-static const unsigned long long FOLLOW_declarator_in_formalParameter203_data[] = { 0x0000000000000008LL};
-static ANTLRBitSet *FOLLOW_set_in_type0;
-static const unsigned long long FOLLOW_set_in_type0_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_BLOCK_in_block286;
-static const unsigned long long FOLLOW_BLOCK_in_block286_data[] = { 0x0000000000000004LL};
-static ANTLRBitSet *FOLLOW_variable_in_block288;
-static const unsigned long long FOLLOW_variable_in_block288_data[] = { 0x000000000007CE18LL};
-static ANTLRBitSet *FOLLOW_stat_in_block291;
-static const unsigned long long FOLLOW_stat_in_block291_data[] = { 0x000000000007CE08LL};
-static ANTLRBitSet *FOLLOW_forStat_in_stat305;
-static const unsigned long long FOLLOW_forStat_in_stat305_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_expr_in_stat313;
-static const unsigned long long FOLLOW_expr_in_stat313_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_block_in_stat321;
-static const unsigned long long FOLLOW_block_in_stat321_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_K_FOR_in_forStat341;
-static const unsigned long long FOLLOW_K_FOR_in_forStat341_data[] = { 0x0000000000000004LL};
-static ANTLRBitSet *FOLLOW_expr_in_forStat343;
-static const unsigned long long FOLLOW_expr_in_forStat343_data[] = { 0x0000000000078C00LL};
-static ANTLRBitSet *FOLLOW_expr_in_forStat345;
-static const unsigned long long FOLLOW_expr_in_forStat345_data[] = { 0x0000000000078C00LL};
-static ANTLRBitSet *FOLLOW_expr_in_forStat347;
-static const unsigned long long FOLLOW_expr_in_forStat347_data[] = { 0x0000000000000200LL};
-static ANTLRBitSet *FOLLOW_block_in_forStat349;
-static const unsigned long long FOLLOW_block_in_forStat349_data[] = { 0x0000000000000008LL};
-static ANTLRBitSet *FOLLOW_K_EQEQ_in_expr365;
-static const unsigned long long FOLLOW_K_EQEQ_in_expr365_data[] = { 0x0000000000000004LL};
-static ANTLRBitSet *FOLLOW_expr_in_expr367;
-static const unsigned long long FOLLOW_expr_in_expr367_data[] = { 0x0000000000078C00LL};
-static ANTLRBitSet *FOLLOW_expr_in_expr369;
-static const unsigned long long FOLLOW_expr_in_expr369_data[] = { 0x0000000000000008LL};
-static ANTLRBitSet *FOLLOW_K_LT_in_expr381;
-static const unsigned long long FOLLOW_K_LT_in_expr381_data[] = { 0x0000000000000004LL};
-static ANTLRBitSet *FOLLOW_expr_in_expr383;
-static const unsigned long long FOLLOW_expr_in_expr383_data[] = { 0x0000000000078C00LL};
-static ANTLRBitSet *FOLLOW_expr_in_expr385;
-static const unsigned long long FOLLOW_expr_in_expr385_data[] = { 0x0000000000000008LL};
-static ANTLRBitSet *FOLLOW_K_PLUS_in_expr397;
-static const unsigned long long FOLLOW_K_PLUS_in_expr397_data[] = { 0x0000000000000004LL};
-static ANTLRBitSet *FOLLOW_expr_in_expr399;
-static const unsigned long long FOLLOW_expr_in_expr399_data[] = { 0x0000000000078C00LL};
-static ANTLRBitSet *FOLLOW_expr_in_expr401;
-static const unsigned long long FOLLOW_expr_in_expr401_data[] = { 0x0000000000000008LL};
-static ANTLRBitSet *FOLLOW_K_EQ_in_expr413;
-static const unsigned long long FOLLOW_K_EQ_in_expr413_data[] = { 0x0000000000000004LL};
-static ANTLRBitSet *FOLLOW_K_ID_in_expr415;
-static const unsigned long long FOLLOW_K_ID_in_expr415_data[] = { 0x0000000000078C00LL};
-static ANTLRBitSet *FOLLOW_expr_in_expr419;
-static const unsigned long long FOLLOW_expr_in_expr419_data[] = { 0x0000000000000008LL};
-static ANTLRBitSet *FOLLOW_atom_in_expr432;
-static const unsigned long long FOLLOW_atom_in_expr432_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_set_in_atom0;
-static const unsigned long long FOLLOW_set_in_atom0_data[] = { 0x0000000000000002LL};
-
-
-#pragma mark Dynamic Global Scopes
-@implementation Symbols_Scope  /* globalAttributeScopeImpl */
-/* start of synthesize -- OBJC-Line 1750 */
-
-@synthesize tree;
-+ (Symbols_Scope *)newSymbols_Scope
-{
-    return [[[Symbols_Scope alloc] init] retain];
-}
-/* start of iterate get and set functions */
-
-- (ANTLRCommonTree *)gettree { return( tree ); }
-
-- (void)settree:(ANTLRCommonTree *)aVal { tree = aVal; }
-
-
-
-/* End of iterate get and set functions */
-
-@end /* end of Symbols_Scope implementation */
-
-
-#pragma mark Dynamic Rule Scopes
-
-#pragma mark Rule return scopes start
-@implementation SimpleCTP_expr_return
-+ (SimpleCTP_expr_return *)newSimpleCTP_expr_return
-{
-    return [[[SimpleCTP_expr_return alloc] init] retain];
-}
-
-
-
-
-@end /* end of returnScope implementation */
-
-
-
-@implementation SimpleCTP  // line 610
-
-+ (void) initialize
-{
-    #pragma mark Bitsets
-    FOLLOW_declaration_in_program56 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declaration_in_program56_data Count:(NSUInteger)1] retain];
-    FOLLOW_variable_in_declaration76 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_declaration76_data Count:(NSUInteger)1] retain];
-    FOLLOW_FUNC_DECL_in_declaration87 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_FUNC_DECL_in_declaration87_data Count:(NSUInteger)1] retain];
-    FOLLOW_functionHeader_in_declaration89 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration89_data Count:(NSUInteger)1] retain];
-    FOLLOW_FUNC_DEF_in_declaration101 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_FUNC_DEF_in_declaration101_data Count:(NSUInteger)1] retain];
-    FOLLOW_functionHeader_in_declaration103 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration103_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_declaration105 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_declaration105_data Count:(NSUInteger)1] retain];
-    FOLLOW_VAR_DEF_in_variable126 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_VAR_DEF_in_variable126_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_variable128 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_variable128_data Count:(NSUInteger)1] retain];
-    FOLLOW_declarator_in_variable130 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_variable130_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_ID_in_declarator150 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_declarator150_data Count:(NSUInteger)1] retain];
-    FOLLOW_FUNC_HDR_in_functionHeader171 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_FUNC_HDR_in_functionHeader171_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_functionHeader173 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_functionHeader173_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_ID_in_functionHeader175 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_functionHeader175_data Count:(NSUInteger)1] retain];
-    FOLLOW_formalParameter_in_functionHeader177 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader177_data Count:(NSUInteger)1] retain];
-    FOLLOW_ARG_DEF_in_formalParameter199 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ARG_DEF_in_formalParameter199_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_formalParameter201 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_formalParameter201_data Count:(NSUInteger)1] retain];
-    FOLLOW_declarator_in_formalParameter203 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_formalParameter203_data Count:(NSUInteger)1] retain];
-    FOLLOW_set_in_type0 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_type0_data Count:(NSUInteger)1] retain];
-    FOLLOW_BLOCK_in_block286 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_BLOCK_in_block286_data Count:(NSUInteger)1] retain];
-    FOLLOW_variable_in_block288 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_block288_data Count:(NSUInteger)1] retain];
-    FOLLOW_stat_in_block291 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_stat_in_block291_data Count:(NSUInteger)1] retain];
-    FOLLOW_forStat_in_stat305 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_forStat_in_stat305_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_stat313 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_stat313_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_stat321 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_stat321_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_FOR_in_forStat341 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_FOR_in_forStat341_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_forStat343 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat343_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_forStat345 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat345_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_forStat347 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat347_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_forStat349 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_forStat349_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_EQEQ_in_expr365 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_EQEQ_in_expr365_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_expr367 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr367_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_expr369 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr369_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_LT_in_expr381 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_LT_in_expr381_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_expr383 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr383_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_expr385 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr385_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_PLUS_in_expr397 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_PLUS_in_expr397_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_expr399 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr399_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_expr401 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr401_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_EQ_in_expr413 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_EQ_in_expr413_data Count:(NSUInteger)1] retain];
-    FOLLOW_K_ID_in_expr415 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_K_ID_in_expr415_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_expr419 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr419_data Count:(NSUInteger)1] retain];
-    FOLLOW_atom_in_expr432 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_expr432_data Count:(NSUInteger)1] retain];
-    FOLLOW_set_in_atom0 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_atom0_data Count:(NSUInteger)1] retain];
-
-    [ANTLRBaseRecognizer setTokenNames:[[[NSArray alloc] initWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
- @"VAR_DEF", @"ARG_DEF", @"FUNC_HDR", @"FUNC_DECL", @"FUNC_DEF", @"BLOCK",
- @"K_ID", @"K_INT", @"K_CHAR", @"K_VOID", @"K_FOR", @"K_EQ", @"K_EQEQ",
- @"K_LT", @"K_PLUS", @"K_INT_TYPE", @"WS", @"';'", @"'('", @"','", @"')'",
- @"'{'", @"'}'", nil] retain]];
-}
-
-+ (SimpleCTP *)newSimpleCTP:(id<ANTLRTreeNodeStream>)aStream
-{
-
-    return [[SimpleCTP alloc] initWithStream:aStream];
-
-}
-
-
-- (id) initWithStream:(id<ANTLRTreeNodeStream>)aStream
-{
-    if ((self = [super initWithStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:12+1] retain]]) != nil) {
-
-
-
-        /* start of actions-actionScope-init */
-        /* start of init */
-    }
-    return self;
-}
-
-- (void) dealloc
-{
-    [Symbols_scope release];
-    [super dealloc];
-}
-// start actions.actionScope.methods
-// start methods()
-// start rules
-/*
- * $ANTLR start program
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:13:1: program : ( declaration )+ ;
- */
-- (void) program
-{
-    /* ruleScopeSetUp */
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:14:5: ( ( declaration )+ ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:14:9: ( declaration )+ // alt
-        {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:14:9: ( declaration )+ // positiveClosureBlock
-        NSInteger cnt1=0;
-        do {
-            NSInteger alt1=2;
-            NSInteger LA1_0 = [input LA:1];
-            if ( (LA1_0==VAR_DEF||(LA1_0>=FUNC_DECL && LA1_0<=FUNC_DEF)) ) {
-                alt1=1;
-            }
-
-
-            switch (alt1) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:14:9: declaration // alt
-                    {
-                    [self pushFollow:FOLLOW_declaration_in_program56];
-                    [self declaration];
-                    [self popFollow];
-
-                      /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    if ( cnt1 >= 1 )
-                        goto loop1;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:1];
-                    @throw eee;
-            }
-            cnt1++;
-        } while (YES);
-        loop1: ;
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-    }
-    return ;
-}
-/* $ANTLR end program */
-/*
- * $ANTLR start declaration
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:17:1: declaration : ( variable | ^( FUNC_DECL functionHeader ) | ^( FUNC_DEF functionHeader block ) );
- */
-- (void) declaration
-{
-    /* ruleScopeSetUp */
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:18:5: ( variable | ^( FUNC_DECL functionHeader ) | ^( FUNC_DEF functionHeader block ) ) //ruleblock
-        NSInteger alt2=3;
-        switch ([input LA:1]) {
-            case VAR_DEF: ;
-                {
-                alt2=1;
-                }
-                break;
-            case FUNC_DECL: ;
-                {
-                alt2=2;
-                }
-                break;
-            case FUNC_DEF: ;
-                {
-                alt2=3;
-                }
-                break;
-
-        default: ;
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:2 state:0 stream:input];
-            @throw nvae;
-        }
-
-        switch (alt2) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:18:9: variable // alt
-                {
-                [self pushFollow:FOLLOW_variable_in_declaration76];
-                [self variable];
-                [self popFollow];
-
-                  /* element() */
-                 /* elements */
-                }
-                break;
-            case 2 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:19:9: ^( FUNC_DECL functionHeader ) // alt
-                {
-                [self match:input TokenType:FUNC_DECL Follow:FOLLOW_FUNC_DECL_in_declaration87];   /* element() */
-
-                    [self match:input TokenType:ANTLRTokenTypeDOWN Follow:nil];
-                    [self pushFollow:FOLLOW_functionHeader_in_declaration89];
-                    [self functionHeader];
-                    [self popFollow];
-
-                      /* element() */
-
-                    [self match:input TokenType:ANTLRTokenTypeUP Follow:nil];   /* element() */
-                 /* elements */
-                }
-                break;
-            case 3 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:20:9: ^( FUNC_DEF functionHeader block ) // alt
-                {
-                [self match:input TokenType:FUNC_DEF Follow:FOLLOW_FUNC_DEF_in_declaration101];   /* element() */
-
-                    [self match:input TokenType:ANTLRTokenTypeDOWN Follow:nil];
-                    [self pushFollow:FOLLOW_functionHeader_in_declaration103];
-                    [self functionHeader];
-                    [self popFollow];
-
-                      /* element() */
-                    [self pushFollow:FOLLOW_block_in_declaration105];
-                    [self block];
-                    [self popFollow];
-
-                      /* element() */
-
-                    [self match:input TokenType:ANTLRTokenTypeUP Follow:nil];   /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-    }
-    return ;
-}
-/* $ANTLR end declaration */
-/*
- * $ANTLR start variable
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:23:1: variable : ^( VAR_DEF type declarator ) ;
- */
-- (void) variable
-{
-    /* ruleScopeSetUp */
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:24:5: ( ^( VAR_DEF type declarator ) ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:24:9: ^( VAR_DEF type declarator ) // alt
-        {
-        [self match:input TokenType:VAR_DEF Follow:FOLLOW_VAR_DEF_in_variable126];   /* element() */
-
-            [self match:input TokenType:ANTLRTokenTypeDOWN Follow:nil];
-            [self pushFollow:FOLLOW_type_in_variable128];
-            [self type];
-            [self popFollow];
-
-              /* element() */
-            [self pushFollow:FOLLOW_declarator_in_variable130];
-            [self declarator];
-            [self popFollow];
-
-              /* element() */
-
-            [self match:input TokenType:ANTLRTokenTypeUP Follow:nil];   /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-    }
-    return ;
-}
-/* $ANTLR end variable */
-/*
- * $ANTLR start declarator
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:27:1: declarator : K_ID ;
- */
-- (void) declarator
-{
-    /* ruleScopeSetUp */
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:28:5: ( K_ID ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:28:9: K_ID // alt
-        {
-        [self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_declarator150];   /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-    }
-    return ;
-}
-/* $ANTLR end declarator */
-/*
- * $ANTLR start functionHeader
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:31:1: functionHeader : ^( FUNC_HDR type K_ID ( formalParameter )+ ) ;
- */
-- (void) functionHeader
-{
-    /* ruleScopeSetUp */
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:32:5: ( ^( FUNC_HDR type K_ID ( formalParameter )+ ) ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:32:9: ^( FUNC_HDR type K_ID ( formalParameter )+ ) // alt
-        {
-        [self match:input TokenType:FUNC_HDR Follow:FOLLOW_FUNC_HDR_in_functionHeader171];   /* element() */
-
-            [self match:input TokenType:ANTLRTokenTypeDOWN Follow:nil];
-            [self pushFollow:FOLLOW_type_in_functionHeader173];
-            [self type];
-            [self popFollow];
-
-              /* element() */
-            [self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_functionHeader175];   /* element() */
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:32:30: ( formalParameter )+ // positiveClosureBlock
-            NSInteger cnt3=0;
-            do {
-                NSInteger alt3=2;
-                NSInteger LA3_0 = [input LA:1];
-                if ( (LA3_0==ARG_DEF) ) {
-                    alt3=1;
-                }
-
-
-                switch (alt3) {
-                    case 1 : ;
-                        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:32:30: formalParameter // alt
-                        {
-                        [self pushFollow:FOLLOW_formalParameter_in_functionHeader177];
-                        [self formalParameter];
-                        [self popFollow];
-
-                          /* element() */
-                         /* elements */
-                        }
-                        break;
-
-                    default :
-                        if ( cnt3 >= 1 )
-                            goto loop3;
-                        ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:3];
-                        @throw eee;
-                }
-                cnt3++;
-            } while (YES);
-            loop3: ;
-              /* element() */
-
-            [self match:input TokenType:ANTLRTokenTypeUP Follow:nil];   /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-    }
-    return ;
-}
-/* $ANTLR end functionHeader */
-/*
- * $ANTLR start formalParameter
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:35:1: formalParameter : ^( ARG_DEF type declarator ) ;
- */
-- (void) formalParameter
-{
-    /* ruleScopeSetUp */
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:36:5: ( ^( ARG_DEF type declarator ) ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:36:9: ^( ARG_DEF type declarator ) // alt
-        {
-        [self match:input TokenType:ARG_DEF Follow:FOLLOW_ARG_DEF_in_formalParameter199];   /* element() */
-
-            [self match:input TokenType:ANTLRTokenTypeDOWN Follow:nil];
-            [self pushFollow:FOLLOW_type_in_formalParameter201];
-            [self type];
-            [self popFollow];
-
-              /* element() */
-            [self pushFollow:FOLLOW_declarator_in_formalParameter203];
-            [self declarator];
-            [self popFollow];
-
-              /* element() */
-
-            [self match:input TokenType:ANTLRTokenTypeUP Follow:nil];   /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-    }
-    return ;
-}
-/* $ANTLR end formalParameter */
-/*
- * $ANTLR start type
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:39:1: type : ( K_INT | K_CHAR | K_VOID | K_ID );
- */
-- (void) type
-{
-    /* ruleScopeSetUp */
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:40:5: ( K_INT | K_CHAR | K_VOID | K_ID ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g: // alt
-        {
-        if ((([input LA:1] >= K_ID) && ([input LA:1] <= K_VOID))) {
-            [input consume];
-            [state setIsErrorRecovery:NO];
-        } else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
-            @throw mse;
-        }
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-    }
-    return ;
-}
-/* $ANTLR end type */
-/*
- * $ANTLR start block
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:46:1: block : ^( BLOCK ( variable )* ( stat )* ) ;
- */
-- (void) block
-{
-    /* ruleScopeSetUp */
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:47:5: ( ^( BLOCK ( variable )* ( stat )* ) ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:47:9: ^( BLOCK ( variable )* ( stat )* ) // alt
-        {
-        [self match:input TokenType:BLOCK Follow:FOLLOW_BLOCK_in_block286];   /* element() */
-
-        if ( [input LA:1] == ANTLRTokenTypeDOWN ) {
-            [self match:input TokenType:ANTLRTokenTypeDOWN Follow:nil];
-            do {
-                NSInteger alt4=2;
-                NSInteger LA4_0 = [input LA:1];
-                if ( (LA4_0==VAR_DEF) ) {
-                    alt4=1;
-                }
-
-
-                switch (alt4) {
-                    case 1 : ;
-                        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:47:17: variable // alt
-                        {
-                        [self pushFollow:FOLLOW_variable_in_block288];
-                        [self variable];
-                        [self popFollow];
-
-                          /* element() */
-                         /* elements */
-                        }
-                        break;
-
-                    default :
-                        goto loop4;
-                }
-            } while (YES);
-            loop4: ;
-              /* element() */
-            do {
-                NSInteger alt5=2;
-                NSInteger LA5_0 = [input LA:1];
-                if ( ((LA5_0>=BLOCK && LA5_0<=K_INT)||(LA5_0>=K_FOR && LA5_0<=K_PLUS)) ) {
-                    alt5=1;
-                }
-
-
-                switch (alt5) {
-                    case 1 : ;
-                        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:47:27: stat // alt
-                        {
-                        [self pushFollow:FOLLOW_stat_in_block291];
-                        [self stat];
-                        [self popFollow];
-
-                          /* element() */
-                         /* elements */
-                        }
-                        break;
-
-                    default :
-                        goto loop5;
-                }
-            } while (YES);
-            loop5: ;
-              /* element() */
-
-            [self match:input TokenType:ANTLRTokenTypeUP Follow:nil];
-        }  /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-    }
-    return ;
-}
-/* $ANTLR end block */
-/*
- * $ANTLR start stat
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:50:1: stat : ( forStat | expr | block );
- */
-- (void) stat
-{
-    /* ruleScopeSetUp */
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:50:5: ( forStat | expr | block ) //ruleblock
-        NSInteger alt6=3;
-        switch ([input LA:1]) {
-            case K_FOR: ;
-                {
-                alt6=1;
-                }
-                break;
-            case K_ID: ;
-            case K_INT: ;
-            case K_EQ: ;
-            case K_EQEQ: ;
-            case K_LT: ;
-            case K_PLUS: ;
-                {
-                alt6=2;
-                }
-                break;
-            case BLOCK: ;
-                {
-                alt6=3;
-                }
-                break;
-
-        default: ;
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:6 state:0 stream:input];
-            @throw nvae;
-        }
-
-        switch (alt6) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:50:7: forStat // alt
-                {
-                [self pushFollow:FOLLOW_forStat_in_stat305];
-                [self forStat];
-                [self popFollow];
-
-                  /* element() */
-                 /* elements */
-                }
-                break;
-            case 2 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:51:7: expr // alt
-                {
-                [self pushFollow:FOLLOW_expr_in_stat313];
-                [self expr];
-                [self popFollow];
-
-                  /* element() */
-                 /* elements */
-                }
-                break;
-            case 3 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:52:7: block // alt
-                {
-                [self pushFollow:FOLLOW_block_in_stat321];
-                [self block];
-                [self popFollow];
-
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-    }
-    return ;
-}
-/* $ANTLR end stat */
-/*
- * $ANTLR start forStat
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:55:1: forStat : ^( K_FOR expr expr expr block ) ;
- */
-- (void) forStat
-{
-    /* ruleScopeSetUp */
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:56:5: ( ^( K_FOR expr expr expr block ) ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:56:9: ^( K_FOR expr expr expr block ) // alt
-        {
-        [self match:input TokenType:K_FOR Follow:FOLLOW_K_FOR_in_forStat341];   /* element() */
-
-            [self match:input TokenType:ANTLRTokenTypeDOWN Follow:nil];
-            [self pushFollow:FOLLOW_expr_in_forStat343];
-            [self expr];
-            [self popFollow];
-
-              /* element() */
-            [self pushFollow:FOLLOW_expr_in_forStat345];
-            [self expr];
-            [self popFollow];
-
-              /* element() */
-            [self pushFollow:FOLLOW_expr_in_forStat347];
-            [self expr];
-            [self popFollow];
-
-              /* element() */
-            [self pushFollow:FOLLOW_block_in_forStat349];
-            [self block];
-            [self popFollow];
-
-              /* element() */
-
-            [self match:input TokenType:ANTLRTokenTypeUP Follow:nil];   /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-    }
-    return ;
-}
-/* $ANTLR end forStat */
-/*
- * $ANTLR start expr
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:59:1: expr : ( ^( K_EQEQ expr expr ) | ^( K_LT expr expr ) | ^( K_PLUS expr expr ) | ^( K_EQ K_ID e= expr ) | atom );
- */
-- (SimpleCTP_expr_return *) expr
-{
-    /* ruleScopeSetUp */
-
-    SimpleCTP_expr_return * retval = [SimpleCTP_expr_return newSimpleCTP_expr_return];
-    [retval setStart:[input LT:1]];
-
-    @try {
-        ANTLRCommonTree *K_ID1 = nil;
-        SimpleCTP_expr_return * e = nil;
-
-
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:59:5: ( ^( K_EQEQ expr expr ) | ^( K_LT expr expr ) | ^( K_PLUS expr expr ) | ^( K_EQ K_ID e= expr ) | atom ) //ruleblock
-        NSInteger alt7=5;
-        switch ([input LA:1]) {
-            case K_EQEQ: ;
-                {
-                alt7=1;
-                }
-                break;
-            case K_LT: ;
-                {
-                alt7=2;
-                }
-                break;
-            case K_PLUS: ;
-                {
-                alt7=3;
-                }
-                break;
-            case K_EQ: ;
-                {
-                alt7=4;
-                }
-                break;
-            case K_ID: ;
-            case K_INT: ;
-                {
-                alt7=5;
-                }
-                break;
-
-        default: ;
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:7 state:0 stream:input];
-            @throw nvae;
-        }
-
-        switch (alt7) {
-            case 1 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:59:9: ^( K_EQEQ expr expr ) // alt
-                {
-                [self match:input TokenType:K_EQEQ Follow:FOLLOW_K_EQEQ_in_expr365];   /* element() */
-
-                    [self match:input TokenType:ANTLRTokenTypeDOWN Follow:nil];
-                    [self pushFollow:FOLLOW_expr_in_expr367];
-                    [self expr];
-                    [self popFollow];
-
-                      /* element() */
-                    [self pushFollow:FOLLOW_expr_in_expr369];
-                    [self expr];
-                    [self popFollow];
-
-                      /* element() */
-
-                    [self match:input TokenType:ANTLRTokenTypeUP Follow:nil];   /* element() */
-                 /* elements */
-                }
-                break;
-            case 2 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:60:9: ^( K_LT expr expr ) // alt
-                {
-                [self match:input TokenType:K_LT Follow:FOLLOW_K_LT_in_expr381];   /* element() */
-
-                    [self match:input TokenType:ANTLRTokenTypeDOWN Follow:nil];
-                    [self pushFollow:FOLLOW_expr_in_expr383];
-                    [self expr];
-                    [self popFollow];
-
-                      /* element() */
-                    [self pushFollow:FOLLOW_expr_in_expr385];
-                    [self expr];
-                    [self popFollow];
-
-                      /* element() */
-
-                    [self match:input TokenType:ANTLRTokenTypeUP Follow:nil];   /* element() */
-                 /* elements */
-                }
-                break;
-            case 3 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:61:9: ^( K_PLUS expr expr ) // alt
-                {
-                [self match:input TokenType:K_PLUS Follow:FOLLOW_K_PLUS_in_expr397];   /* element() */
-
-                    [self match:input TokenType:ANTLRTokenTypeDOWN Follow:nil];
-                    [self pushFollow:FOLLOW_expr_in_expr399];
-                    [self expr];
-                    [self popFollow];
-
-                      /* element() */
-                    [self pushFollow:FOLLOW_expr_in_expr401];
-                    [self expr];
-                    [self popFollow];
-
-                      /* element() */
-
-                    [self match:input TokenType:ANTLRTokenTypeUP Follow:nil];   /* element() */
-                 /* elements */
-                }
-                break;
-            case 4 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:62:9: ^( K_EQ K_ID e= expr ) // alt
-                {
-                [self match:input TokenType:K_EQ Follow:FOLLOW_K_EQ_in_expr413];   /* element() */
-
-                    [self match:input TokenType:ANTLRTokenTypeDOWN Follow:nil];
-                    K_ID1=(ANTLRCommonTree *)[self match:input TokenType:K_ID Follow:FOLLOW_K_ID_in_expr415];   /* element() */
-                    [self pushFollow:FOLLOW_expr_in_expr419];
-                    e = [self expr];
-                    [self popFollow];
-
-                      /* element() */
-
-                    [self match:input TokenType:ANTLRTokenTypeUP Follow:nil];   /* element() */
-                 NSLog(@"assigning %@ to variable %@", (e!=nil?[[input getTokenStream] toStringFromStart:[[input getTreeAdaptor] getTokenStartIndex:[e getStart]]
-                         ToEnd:[[input getTreeAdaptor] getTokenStopIndex:[e getStart]]]:nil), (K_ID1!=nil?[K_ID1 getText]:0));   /* element() */
-                 /* elements */
-                }
-                break;
-            case 5 : ;
-                // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:63:9: atom // alt
-                {
-                [self pushFollow:FOLLOW_atom_in_expr432];
-                [self atom];
-                [self popFollow];
-
-                  /* element() */
-                 /* elements */
-                }
-                break;
-
-        }
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end expr */
-/*
- * $ANTLR start atom
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:66:1: atom : ( K_ID | K_INT );
- */
-- (void) atom
-{
-    /* ruleScopeSetUp */
-
-    @try {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g:67:5: ( K_ID | K_INT ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/simplecTreeParser/SimpleCTP.g: // alt
-        {
-        if ((([input LA:1] >= K_ID) && ([input LA:1] <= K_INT))) {
-            [input consume];
-            [state setIsErrorRecovery:NO];
-        } else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
-            @throw mse;
-        }
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-    }    @finally {
-    }
-    return ;
-}
-/* $ANTLR end atom */
-
-@end /* end of SimpleCTP implementation line 669 */
-
-
-/* End of code
- * =============================================================================
- */
diff --git a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCTP.tokens b/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCTP.tokens
deleted file mode 100644
index 6d06db9..0000000
--- a/runtime/ObjC/Framework/examples/simplecTreeParser/output1/SimpleCTP.tokens
+++ /dev/null
@@ -1,29 +0,0 @@
-K_ID=10
-T__26=26
-T__25=25
-T__24=24
-T__23=23
-K_EQEQ=16
-T__22=22
-K_INT=11
-T__21=21
-K_FOR=14
-FUNC_HDR=6
-FUNC_DEF=8
-K_INT_TYPE=19
-FUNC_DECL=7
-ARG_DEF=5
-WS=20
-K_EQ=15
-BLOCK=9
-K_LT=17
-K_CHAR=12
-K_VOID=13
-VAR_DEF=4
-K_PLUS=18
-';'=21
-'}'=26
-'('=22
-','=23
-')'=24
-'{'=25
diff --git a/runtime/ObjC/Framework/examples/treeparser/Lang.g b/runtime/ObjC/Framework/examples/treeparser/Lang.g
index 90a2512..b2a5f0f 100755
--- a/runtime/ObjC/Framework/examples/treeparser/Lang.g
+++ b/runtime/ObjC/Framework/examples/treeparser/Lang.g
@@ -2,7 +2,7 @@ grammar Lang;
options {
output=AST;
language = ObjC;
-	ASTLabelType=ANTLRCommonTree;
+	ASTLabelType=CommonTree;
}

tokens {DECL;} // an imaginary node
diff --git a/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g b/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g
index 07d3e39..5524f12 100755
--- a/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g
+++ b/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g
@@ -2,7 +2,7 @@ tree grammar LangDumpDecl;
options {
tokenVocab=Lang;
language = ObjC;
-    ASTLabelType = ANTLRCommonTree;
+    ASTLabelType = CommonTree;
}

decl : ^(DECL type declarator)
diff --git a/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.h b/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.h
index daaa14d..eb5cd77 100644
--- a/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.h
+++ b/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.h
@@ -1,7 +1,7 @@
-// $ANTLR ${project.version} ${buildNumber} LangDumpDecl.g 2011-05-06 17:39:09
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g 2012-02-16 17:59:08

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
#import <ANTLR/ANTLR.h>
@@ -34,32 +34,33 @@ typedef enum {
#define INT 7
#define INTTYPE 8
#define WS 9
-#pragma mark Dynamic Global Scopes
-#pragma mark Dynamic Rule Scopes
-#pragma mark Rule Return Scopes start
+#pragma mark Dynamic Global Scopes globalAttributeScopeInterface
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeInterface
+#pragma mark Rule Return Scopes returnScopeInterface
/* returnScopeInterface LangDumpDecl_declarator_return */
-@interface LangDumpDecl_declarator_return :ANTLRTreeRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface LangDumpDecl_declarator_return : TreeRuleReturnScope { /* returnScopeInterface line 1838 */
/* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
+
+
+/* start of method declarations */
+
+ (LangDumpDecl_declarator_return *)newLangDumpDecl_declarator_return;
/* this is start of set and get methods */
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */



/* Interface grammar class */
-@interface LangDumpDecl : ANTLRTreeParser { /* line 572 */
-/* ObjC start of ruleAttributeScopeMemVar */
-
-
-/* ObjC end of ruleAttributeScopeMemVar */
-/* ObjC start of globalAttributeScopeMemVar */
+@interface LangDumpDecl  : TreeParser { /* line 572 */
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeDecl
+#pragma mark Dynamic Global Rule Scopes globalAttributeScopeMemVar


-/* ObjC end of globalAttributeScopeMemVar */
/* ObjC start of actions.(actionScope).memVars */
/* ObjC end of actions.(actionScope).memVars */
/* ObjC start of memVars */
@@ -73,7 +74,7 @@ typedef enum {
/* ObjC end of properties */

+ (void) initialize;
-+ (id) newLangDumpDecl:(id<ANTLRTreeNodeStream>)aStream;
++ (id) newLangDumpDecl:(id<TreeNodeStream>)aStream;
/* ObjC start of actions.(actionScope).methodsDecl */
/* ObjC end of actions.(actionScope).methodsDecl */

diff --git a/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.m b/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.m
index 72bd695..cd0eac5 100644
--- a/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.m
+++ b/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.m
@@ -1,8 +1,8 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : LangDumpDecl.g
- *     -                            On : 2011-05-06 17:39:09
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g
+ *     -                            On : 2012-02-16 17:59:08
*     -           for the tree parser : LangDumpDeclTreeParser
*
* Editing it, at least manually, is not wise.
@@ -11,7 +11,7 @@
*
*
*/
-// $ANTLR ${project.version} ${buildNumber} LangDumpDecl.g 2011-05-06 17:39:09
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g 2012-02-16 17:59:08


/* -----------------------------------------
@@ -39,22 +39,22 @@ static ANTLRBitSet *FOLLOW_ID_in_declarator95;
static const unsigned long long FOLLOW_ID_in_declarator95_data[] = { 0x0000000000000002LL};


-#pragma mark Dynamic Global Scopes
+#pragma mark Dynamic Global globalAttributeScopeImplementation

-#pragma mark Dynamic Rule Scopes
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation

-#pragma mark Rule Return Scopes start
-@implementation LangDumpDecl_declarator_return /* returnScope */
+#pragma mark Rule Return Scopes returnScopeImplementation
+@implementation LangDumpDecl_declarator_return /* returnScopeImplementation */
/* start of synthesize -- OBJC-Line 1837 */
+ (LangDumpDecl_declarator_return *)newLangDumpDecl_declarator_return
{
-    return [[[LangDumpDecl_declarator_return alloc] init] retain];
+return [[[LangDumpDecl_declarator_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}


@@ -62,51 +62,41 @@ static const unsigned long long FOLLOW_ID_in_declarator95_data[] = { 0x000000000
@end /* end of returnScope implementation */


-//#pragma mark Rule return scopes start
-//
-
-#pragma mark Rule return scopes start

@implementation LangDumpDecl  // line 637

/* ObjC start of ruleAttributeScope */
-#pragma mark Dynamic Rule Scopes
+#pragma mark Dynamic Rule Scopes ruleAttributeScope
/* ObjC end of ruleAttributeScope */
-#pragma mark global Attribute Scopes
+#pragma mark global Attribute Scopes globalAttributeScope
/* ObjC start globalAttributeScope */
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */
-/* ObjC end actions.(actionScope).synthesize */
/* ObjC start synthesize() */
-/* ObjC end synthesize() */

+ (void) initialize
{
#pragma mark Bitsets
-    FOLLOW_DECL_in_decl45 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_DECL_in_decl45_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_decl47 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_decl47_data Count:(NSUInteger)1] retain];
-    FOLLOW_declarator_in_decl49 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_decl49_data Count:(NSUInteger)1] retain];
-    FOLLOW_INTTYPE_in_type81 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INTTYPE_in_type81_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_declarator95 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_declarator95_data Count:(NSUInteger)1] retain];
+    FOLLOW_DECL_in_decl45 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_DECL_in_decl45_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_decl47 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_decl47_data Count:(NSUInteger)1] retain];
+    FOLLOW_declarator_in_decl49 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_decl49_data Count:(NSUInteger)1] retain];
+    FOLLOW_INTTYPE_in_type81 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INTTYPE_in_type81_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_declarator95 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_declarator95_data Count:(NSUInteger)1] retain];

-    [ANTLRBaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
+    [BaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
@"DECL", @"FLOATTYPE", @"ID", @"INT", @"INTTYPE", @"WS", @"';'", nil] retain]];
-    [ANTLRBaseRecognizer setGrammarFileName:@"LangDumpDecl.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g"];
}

-+ (LangDumpDecl *)newLangDumpDecl:(id<ANTLRTreeNodeStream>)aStream
++ (LangDumpDecl *)newLangDumpDecl:(id<TreeNodeStream>)aStream
{
return [[LangDumpDecl alloc] initWithStream:aStream];
-
-
}

-- (id) initWithStream:(id<ANTLRTreeNodeStream>)aStream
+- (id) initWithStream:(id<TreeNodeStream>)aStream
{
-    self = [super initWithStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:3+1] retain]];
+    self = [super initWithStream:aStream State:[[RecognizerSharedState newRecognizerSharedStateWithRuleLen:3+1] retain]];
if ( self != nil ) {
-
-
/* start of actions-actionScope-init */
/* start of init */
}
@@ -118,8 +108,6 @@ static const unsigned long long FOLLOW_ID_in_declarator95_data[] = { 0x000000000
[super dealloc];
}

-/* ObjC start members */
-/* ObjC end members */
/* ObjC start actions.(actionScope).methods */
/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
@@ -127,23 +115,28 @@ static const unsigned long long FOLLOW_ID_in_declarator95_data[] = { 0x000000000
/* ObjC start rules */
/*
* $ANTLR start decl
- * LangDumpDecl.g:8:1: decl : ^( DECL type declarator ) ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g:8:1: decl : ^( DECL type declarator ) ;
*/
- (void) decl
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-         LangDumpDecl_declarator_return * declarator1 = nil ;
-
+        /* ruleLabelDefs entry */
+        LangDumpDecl_declarator_return * declarator1 = nil ;

-        // LangDumpDecl.g:8:6: ( ^( DECL type declarator ) ) // ruleBlockSingleAlt
-        // LangDumpDecl.g:8:8: ^( DECL type declarator ) // alt
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g:8:6: ( ^( DECL type declarator ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g:8:8: ^( DECL type declarator ) // alt
{
-        [self match:input TokenType:DECL Follow:FOLLOW_DECL_in_decl45];

+
+        [self match:input TokenType:DECL Follow:FOLLOW_DECL_in_decl45];
+
[self match:input TokenType:DOWN Follow:nil];
+
/* ruleRef */
[self pushFollow:FOLLOW_type_in_decl47];
[self type];
@@ -151,7 +144,7 @@ static const unsigned long long FOLLOW_ID_in_declarator95_data[] = { 0x000000000
[self popFollow];


-
+
/* ruleRef */
[self pushFollow:FOLLOW_declarator_in_decl49];
declarator1 = [self declarator];
@@ -159,25 +152,26 @@ static const unsigned long long FOLLOW_ID_in_declarator95_data[] = { 0x000000000
[self popFollow];


-
+
[self match:input TokenType:UP Follow:nil];

+

NSLog(@"int %@", (declarator1!=nil?[[input getTokenStream] toStringFromStart:[[input getTreeAdaptor] getTokenStartIndex:[declarator1 getStart]]ToEnd:[[input getTreeAdaptor] getTokenStopIndex:[declarator1 getStart]]]:0));

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -186,31 +180,36 @@ static const unsigned long long FOLLOW_ID_in_declarator95_data[] = { 0x000000000

/*
* $ANTLR start type
- * LangDumpDecl.g:13:1: type : INTTYPE ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g:13:1: type : INTTYPE ;
*/
- (void) type
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
-        // LangDumpDecl.g:13:6: ( INTTYPE ) // ruleBlockSingleAlt
-        // LangDumpDecl.g:13:8: INTTYPE // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g:13:6: ( INTTYPE ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g:13:8: INTTYPE // alt
{
-        [self match:input TokenType:INTTYPE Follow:FOLLOW_INTTYPE_in_type81];

+        [self match:input TokenType:INTTYPE Follow:FOLLOW_INTTYPE_in_type81];
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return ;
@@ -219,35 +218,39 @@ static const unsigned long long FOLLOW_ID_in_declarator95_data[] = { 0x000000000

/*
* $ANTLR start declarator
- * LangDumpDecl.g:15:1: declarator : ID ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g:15:1: declarator : ID ;
*/
- (LangDumpDecl_declarator_return *) declarator
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

+    /* ruleDeclarations */
LangDumpDecl_declarator_return * retval = [LangDumpDecl_declarator_return newLangDumpDecl_declarator_return];
[retval setStart:[input LT:1]];


@try {
-        // LangDumpDecl.g:16:6: ( ID ) // ruleBlockSingleAlt
-        // LangDumpDecl.g:16:8: ID // alt
+        /* ruleLabelDefs entry */
+
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g:16:6: ( ID ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/LangDumpDecl.g:16:8: ID // alt
{
-        [self match:input TokenType:ID Follow:FOLLOW_ID_in_declarator95];

+        [self match:input TokenType:ID Follow:FOLLOW_ID_in_declarator95];
+
}

-        // token+rule list labels
+        /* token+rule list labels */

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
diff --git a/runtime/ObjC/Framework/examples/treeparser/LangLexer.h b/runtime/ObjC/Framework/examples/treeparser/LangLexer.h
index d647d13..458cb0d 100644
--- a/runtime/ObjC/Framework/examples/treeparser/LangLexer.h
+++ b/runtime/ObjC/Framework/examples/treeparser/LangLexer.h
@@ -1,7 +1,7 @@
-// $ANTLR ${project.version} ${buildNumber} Lang.g 2011-05-06 17:38:52
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g 2012-02-16 17:58:54

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
#import <ANTLR/ANTLR.h>
@@ -11,8 +11,8 @@

/* Start cyclicDFAInterface */

-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
+#pragma mark Rule return scopes Interface start
+#pragma mark Rule return scopes Interface end
#pragma mark Tokens
#ifdef EOF
#undef EOF
@@ -26,12 +26,12 @@
#define INTTYPE 8
#define WS 9
/* interface lexer class */
-@interface LangLexer : ANTLRLexer { // line 283
+@interface LangLexer : Lexer { // line 283
/* ObjC start of actions.lexer.memVars */
/* ObjC end of actions.lexer.memVars */
}
+ (void) initialize;
-+ (LangLexer *)newLangLexerWithCharStream:(id<ANTLRCharStream>)anInput;
++ (LangLexer *)newLangLexerWithCharStream:(id<CharStream>)anInput;
/* ObjC start actions.lexer.methodsDecl */
/* ObjC end actions.lexer.methodsDecl */
- (void) mT__10 ;
diff --git a/runtime/ObjC/Framework/examples/treeparser/LangLexer.m b/runtime/ObjC/Framework/examples/treeparser/LangLexer.m
index 12cf90c..bba84cd 100644
--- a/runtime/ObjC/Framework/examples/treeparser/LangLexer.m
+++ b/runtime/ObjC/Framework/examples/treeparser/LangLexer.m
@@ -1,8 +1,8 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : Lang.g
- *     -                            On : 2011-05-06 17:38:52
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g
+ *     -                            On : 2012-02-16 17:58:54
*     -                 for the lexer : LangLexerLexer
*
* Editing it, at least manually, is not wise.
@@ -11,7 +11,7 @@
*
*
*/
-// $ANTLR ${project.version} ${buildNumber} Lang.g 2011-05-06 17:38:52
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g 2012-02-16 17:58:54


/* -----------------------------------------
@@ -31,7 +31,7 @@

+ (void) initialize
{
-    [ANTLRBaseRecognizer setGrammarFileName:@"Lang.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g"];
}

+ (NSString *) tokenNameForType:(NSInteger)aTokenType
@@ -39,14 +39,14 @@
return [[self getTokenNames] objectAtIndex:aTokenType];
}

-+ (LangLexer *)newLangLexerWithCharStream:(id<ANTLRCharStream>)anInput
++ (LangLexer *)newLangLexerWithCharStream:(id<CharStream>)anInput
{
return [[LangLexer alloc] initWithCharStream:anInput];
}

-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
+- (id) initWithCharStream:(id<CharStream>)anInput
{
-    self = [super initWithCharStream:anInput State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:7+1] retain]];
+    self = [super initWithCharStream:anInput State:[RecognizerSharedState newRecognizerSharedStateWithRuleLen:7+1]];
if ( self != nil ) {
}
return self;
@@ -67,114 +67,122 @@
- (void) mT__10
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = T__10;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // Lang.g:7:7: ( ';' ) // ruleBlockSingleAlt
-        // Lang.g:7:9: ';' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:7:7: ( ';' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:7:9: ';' // alt
{
-        [self matchChar:';'];


+        [self matchChar:';'];
+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "T__10" */
-
// $ANTLR start "INTTYPE"
- (void) mINTTYPE
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = INTTYPE;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // Lang.g:18:9: ( 'int' ) // ruleBlockSingleAlt
-        // Lang.g:18:11: 'int' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:18:9: ( 'int' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:18:11: 'int' // alt
{
-        [self matchString:@"int"];


+        [self matchString:@"int"];
+

+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "INTTYPE" */
-
// $ANTLR start "FLOATTYPE"
- (void) mFLOATTYPE
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = FLOATTYPE;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // Lang.g:19:11: ( 'float' ) // ruleBlockSingleAlt
-        // Lang.g:19:13: 'float' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:19:11: ( 'float' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:19:13: 'float' // alt
{
-        [self matchString:@"float"];


+        [self matchString:@"float"];

+
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "FLOATTYPE" */
-
// $ANTLR start "ID"
- (void) mID
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = ID;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // Lang.g:20:4: ( ( 'a' .. 'z' )+ ) // ruleBlockSingleAlt
-        // Lang.g:20:6: ( 'a' .. 'z' )+ // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:20:4: ( ( 'a' .. 'z' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:20:6: ( 'a' .. 'z' )+ // alt
{
-        // Lang.g:20:6: ( 'a' .. 'z' )+ // positiveClosureBlock
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:20:6: ( 'a' .. 'z' )+ // positiveClosureBlock
NSInteger cnt1 = 0;
do {
NSInteger alt1 = 2;
@@ -186,62 +194,64 @@

switch (alt1) {
case 1 : ;
-                    // Lang.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g: // alt
{
+
if ((([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

default :
if ( cnt1 >= 1 )
goto loop1;
-                    ANTLREarlyExitException *eee =
-                        [ANTLREarlyExitException newException:input decisionNumber:1];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:1];
@throw eee;
}
cnt1++;
} while (YES);
loop1: ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "ID" */
-
// $ANTLR start "INT"
- (void) mINT
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = INT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // Lang.g:21:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
-        // Lang.g:21:7: ( '0' .. '9' )+ // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:21:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:21:7: ( '0' .. '9' )+ // alt
{
-        // Lang.g:21:7: ( '0' .. '9' )+ // positiveClosureBlock
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:21:7: ( '0' .. '9' )+ // positiveClosureBlock
NSInteger cnt2 = 0;
do {
NSInteger alt2 = 2;
@@ -253,92 +263,94 @@

switch (alt2) {
case 1 : ;
-                    // Lang.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g: // alt
{
+
if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))) {
[input consume];
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

default :
if ( cnt2 >= 1 )
goto loop2;
-                    ANTLREarlyExitException *eee =
-                        [ANTLREarlyExitException newException:input decisionNumber:2];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:2];
@throw eee;
}
cnt2++;
} while (YES);
loop2: ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "INT" */
-
// $ANTLR start "WS"
- (void) mWS
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = WS;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // Lang.g:22:4: ( ( ' ' | '\\n' ) ) // ruleBlockSingleAlt
-        // Lang.g:22:6: ( ' ' | '\\n' ) // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:22:4: ( ( ' ' | '\\n' ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:22:6: ( ' ' | '\\n' ) // alt
{
+
if ([input LA:1] == '\n'||[input LA:1] == ' ') {
[input consume];
} else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

+

_channel=HIDDEN;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "WS" */
-
- (void) mTokens
{
-    // Lang.g:1:8: ( T__10 | INTTYPE | FLOATTYPE | ID | INT | WS ) //ruleblock
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:1:8: ( T__10 | INTTYPE | FLOATTYPE | ID | INT | WS ) //ruleblock
NSInteger alt3=6;
unichar charLA3 = [input LA:1];
switch (charLA3) {
@@ -463,7 +475,7 @@
break;

default: ;
-        ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:3 state:0 stream:input];
+        NoViableAltException *nvae = [NoViableAltException newException:3 state:0 stream:input];
nvae.c = charLA3;
@throw nvae;

@@ -471,57 +483,69 @@

switch (alt3) {
case 1 : ;
-            // Lang.g:1:10: T__10 // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:1:10: T__10 // alt
{
-            [self mT__10];


+            [self mT__10];
+

+
}
break;
case 2 : ;
-            // Lang.g:1:16: INTTYPE // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:1:16: INTTYPE // alt
{
-            [self mINTTYPE];


+            [self mINTTYPE];
+

+
}
break;
case 3 : ;
-            // Lang.g:1:24: FLOATTYPE // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:1:24: FLOATTYPE // alt
{
-            [self mFLOATTYPE];


+            [self mFLOATTYPE];
+

+
}
break;
case 4 : ;
-            // Lang.g:1:34: ID // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:1:34: ID // alt
{
-            [self mID];


+            [self mID];
+

+
}
break;
case 5 : ;
-            // Lang.g:1:37: INT // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:1:37: INT // alt
{
-            [self mINT];


+            [self mINT];
+

+
}
break;
case 6 : ;
-            // Lang.g:1:41: WS // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:1:41: WS // alt
{
-            [self mWS];


+            [self mWS];
+

+
}
break;

diff --git a/runtime/ObjC/Framework/examples/treeparser/LangParser.h b/runtime/ObjC/Framework/examples/treeparser/LangParser.h
index ba51fba..6bfbfc2 100644
--- a/runtime/ObjC/Framework/examples/treeparser/LangParser.h
+++ b/runtime/ObjC/Framework/examples/treeparser/LangParser.h
@@ -1,7 +1,7 @@
-// $ANTLR ${project.version} ${buildNumber} Lang.g 2011-05-06 17:38:52
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g 2012-02-16 17:58:54

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
#import <ANTLR/ANTLR.h>
@@ -34,77 +34,85 @@ typedef enum {
#define INT 7
#define INTTYPE 8
#define WS 9
-#pragma mark Dynamic Global Scopes
-#pragma mark Dynamic Rule Scopes
-#pragma mark Rule Return Scopes start
+#pragma mark Dynamic Global Scopes globalAttributeScopeInterface
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeInterface
+#pragma mark Rule Return Scopes returnScopeInterface
/* returnScopeInterface LangParser_start_return */
-@interface LangParser_start_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface LangParser_start_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (LangParser_start_return *)newLangParser_start_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface LangParser_decl_return */
-@interface LangParser_decl_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface LangParser_decl_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (LangParser_decl_return *)newLangParser_decl_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface LangParser_type_return */
-@interface LangParser_type_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface LangParser_type_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (LangParser_type_return *)newLangParser_type_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */



/* Interface grammar class */
-@interface LangParser : ANTLRParser { /* line 572 */
-/* ObjC start of ruleAttributeScopeMemVar */
-
-
-/* ObjC end of ruleAttributeScopeMemVar */
-/* ObjC start of globalAttributeScopeMemVar */
+@interface LangParser  : Parser { /* line 572 */
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeDecl
+#pragma mark Dynamic Global Rule Scopes globalAttributeScopeMemVar


-/* ObjC end of globalAttributeScopeMemVar */
/* ObjC start of actions.(actionScope).memVars */
/* ObjC end of actions.(actionScope).memVars */
/* ObjC start of memVars */
@@ -113,7 +121,7 @@ NSInteger ruleLevel;
NSArray *ruleNames;
/* AST super.memVars */
/* AST parserMemVars */
-id<ANTLRTreeAdaptor> treeAdaptor;   /* AST parserMemVars */
+id<TreeAdaptor> treeAdaptor;   /* AST parserMemVars */
/* ObjC end of memVars */

}
@@ -124,11 +132,11 @@ id<ANTLRTreeAdaptor> treeAdaptor;   /* AST parserMemVars */
/* AST parserHeaderFile.properties */
/* AST super.properties */
/* AST parserProperties */
-@property (retain, getter=getTreeAdaptor, setter=setTreeAdaptor:) id<ANTLRTreeAdaptor> treeAdaptor;   /* AST parserproperties */
+@property (retain, getter=getTreeAdaptor, setter=setTreeAdaptor:) id<TreeAdaptor> treeAdaptor;   /* AST parserproperties */
/* ObjC end of properties */

+ (void) initialize;
-+ (id) newLangParser:(id<ANTLRTokenStream>)aStream;
++ (id) newLangParser:(id<TokenStream>)aStream;
/* ObjC start of actions.(actionScope).methodsDecl */
/* ObjC end of actions.(actionScope).methodsDecl */

@@ -136,8 +144,8 @@ id<ANTLRTreeAdaptor> treeAdaptor;   /* AST parserMemVars */
/* AST parserHeaderFile.methodsDecl */
/* AST super.methodsDecl */
/* AST parserMethodsDecl */
-- (id<ANTLRTreeAdaptor>) getTreeAdaptor;
-- (void) setTreeAdaptor:(id<ANTLRTreeAdaptor>)theTreeAdaptor;   /* AST parsermethodsDecl */
+- (id<TreeAdaptor>) getTreeAdaptor;
+- (void) setTreeAdaptor:(id<TreeAdaptor>)theTreeAdaptor;   /* AST parsermethodsDecl */
/* ObjC end of methodsDecl */

- (LangParser_start_return *)start;
diff --git a/runtime/ObjC/Framework/examples/treeparser/LangParser.m b/runtime/ObjC/Framework/examples/treeparser/LangParser.m
index 6c49d09..e879b2b 100644
--- a/runtime/ObjC/Framework/examples/treeparser/LangParser.m
+++ b/runtime/ObjC/Framework/examples/treeparser/LangParser.m
@@ -1,8 +1,8 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : Lang.g
- *     -                            On : 2011-05-06 17:38:52
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g
+ *     -                            On : 2012-02-16 17:58:54
*     -                for the parser : LangParserParser
*
* Editing it, at least manually, is not wise.
@@ -11,7 +11,7 @@
*
*
*/
-// $ANTLR ${project.version} ${buildNumber} Lang.g 2011-05-06 17:38:52
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g 2012-02-16 17:58:54


/* -----------------------------------------
@@ -37,32 +37,32 @@ static ANTLRBitSet *FOLLOW_10_in_decl54;
static const unsigned long long FOLLOW_10_in_decl54_data[] = { 0x0000000000000002LL};


-#pragma mark Dynamic Global Scopes
+#pragma mark Dynamic Global globalAttributeScopeImplementation

-#pragma mark Dynamic Rule Scopes
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation

-#pragma mark Rule Return Scopes start
-@implementation LangParser_start_return /* returnScope */
+#pragma mark Rule Return Scopes returnScopeImplementation
+@implementation LangParser_start_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (LangParser_start_return *)newLangParser_start_return
{
-    return [[[LangParser_start_return alloc] init] retain];
+return [[[LangParser_start_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -78,31 +78,29 @@ static const unsigned long long FOLLOW_10_in_decl54_data[] = { 0x000000000000000
}


-
@end /* end of returnScope implementation */

-
-@implementation LangParser_decl_return /* returnScope */
+@implementation LangParser_decl_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (LangParser_decl_return *)newLangParser_decl_return
{
-    return [[[LangParser_decl_return alloc] init] retain];
+return [[[LangParser_decl_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -118,31 +116,29 @@ static const unsigned long long FOLLOW_10_in_decl54_data[] = { 0x000000000000000
}


-
@end /* end of returnScope implementation */

-
-@implementation LangParser_type_return /* returnScope */
+@implementation LangParser_type_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (LangParser_type_return *)newLangParser_type_return
{
-    return [[[LangParser_type_return alloc] init] retain];
+return [[[LangParser_type_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -158,61 +154,50 @@ static const unsigned long long FOLLOW_10_in_decl54_data[] = { 0x000000000000000
}


-
@end /* end of returnScope implementation */


-//#pragma mark Rule return scopes start
-//
-
-#pragma mark Rule return scopes start

@implementation LangParser  // line 637

/* ObjC start of ruleAttributeScope */
-#pragma mark Dynamic Rule Scopes
+#pragma mark Dynamic Rule Scopes ruleAttributeScope
/* ObjC end of ruleAttributeScope */
-#pragma mark global Attribute Scopes
+#pragma mark global Attribute Scopes globalAttributeScope
/* ObjC start globalAttributeScope */
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */
-/* ObjC end actions.(actionScope).synthesize */
/* ObjC start synthesize() */
/* AST genericParser.synthesize */
/* AST parserProperties */
@synthesize treeAdaptor;
-/* ObjC end synthesize() */

+ (void) initialize
{
#pragma mark Bitsets
-    FOLLOW_decl_in_start41 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_decl_in_start41_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_decl50 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_decl50_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_decl52 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_decl52_data Count:(NSUInteger)1] retain];
-    FOLLOW_10_in_decl54 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_10_in_decl54_data Count:(NSUInteger)1] retain];
+    FOLLOW_decl_in_start41 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_decl_in_start41_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_decl50 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_decl50_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_decl52 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_decl52_data Count:(NSUInteger)1] retain];
+    FOLLOW_10_in_decl54 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_10_in_decl54_data Count:(NSUInteger)1] retain];

-    [ANTLRBaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
+    [BaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
@"DECL", @"FLOATTYPE", @"ID", @"INT", @"INTTYPE", @"WS", @"';'", nil] retain]];
-    [ANTLRBaseRecognizer setGrammarFileName:@"Lang.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g"];
}

-+ (LangParser *)newLangParser:(id<ANTLRTokenStream>)aStream
++ (LangParser *)newLangParser:(id<TokenStream>)aStream
{
return [[LangParser alloc] initWithTokenStream:aStream];
-
-
}

-- (id) initWithTokenStream:(id<ANTLRTokenStream>)aStream
+- (id) initWithTokenStream:(id<TokenStream>)aStream
{
-    self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:3+1] retain]];
+    self = [super initWithTokenStream:aStream State:[[RecognizerSharedState newRecognizerSharedStateWithRuleLen:3+1] retain]];
if ( self != nil ) {
-
-
/* start of actions-actionScope-init */
/* start of init */
/* AST genericParser.init */
-        [self setTreeAdaptor:[[ANTLRCommonTreeAdaptor newTreeAdaptor] retain]];
+        [self setTreeAdaptor:[[CommonTreeAdaptor newTreeAdaptor] retain]];
}
return self;
}
@@ -225,19 +210,17 @@ static const unsigned long long FOLLOW_10_in_decl54_data[] = { 0x000000000000000
[super dealloc];
}

-/* ObjC start members */
-/* ObjC end members */
/* ObjC start actions.(actionScope).methods */
/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
/* AST genericParser.methods */
/* AST parserMethods */
-- (id<ANTLRTreeAdaptor>) getTreeAdaptor
+- (id<TreeAdaptor>) getTreeAdaptor
{
return treeAdaptor;
}

-- (void) setTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor
+- (void) setTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor
{
if (aTreeAdaptor != treeAdaptor) {
treeAdaptor = aTreeAdaptor;
@@ -247,30 +230,32 @@ static const unsigned long long FOLLOW_10_in_decl54_data[] = { 0x000000000000000
/* ObjC start rules */
/*
* $ANTLR start start
- * Lang.g:10:1: start : decl ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:10:1: start : decl ;
*/
- (LangParser_start_return *) start
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
LangParser_start_return * retval = [LangParser_start_return newLangParser_start_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-         LangParser_decl_return * decl1 = nil ;
-
+        /* ruleLabelDefs entry */
+        LangParser_decl_return * decl1 = nil ;
+


-        // Lang.g:10:7: ( decl ) // ruleBlockSingleAlt
-        // Lang.g:10:9: decl // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:10:7: ( decl ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:10:9: decl // alt
{
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+


/* ASTParser ruleRef */
@@ -282,30 +267,30 @@ static const unsigned long long FOLLOW_10_in_decl54_data[] = { 0x000000000000000


[treeAdaptor addChild:[decl1 getTree] toTree:root_0];
-
+
}

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];



-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -314,41 +299,42 @@ static const unsigned long long FOLLOW_10_in_decl54_data[] = { 0x000000000000000

/*
* $ANTLR start decl
- * Lang.g:12:1: decl : type ID ';' -> ^( DECL type ID ) ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:12:1: decl : type ID ';' -> ^( DECL type ID ) ;
*/
- (LangParser_decl_return *) decl
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
LangParser_decl_return * retval = [LangParser_decl_return newLangParser_decl_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-        ANTLRCommonToken *ID3 = nil;
-        ANTLRCommonToken *char_literal4 = nil;
-         LangParser_type_return * type2 = nil ;
-
+        /* ruleLabelDefs entry */
+        CommonToken *ID3 = nil;
+        CommonToken *char_literal4 = nil;LangParser_type_return * type2 = nil ;

-        ANTLRCommonTree *ID3_tree=nil;
-        ANTLRCommonTree *char_literal4_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_10 =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+
+        CommonTree *ID3_tree=nil;
+        CommonTree *char_literal4_tree=nil;
+        RewriteRuleTokenStream *stream_10 =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token 10"] retain];
-        ANTLRRewriteRuleTokenStream *stream_ID =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        RewriteRuleTokenStream *stream_ID =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token ID"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_type =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_type =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule type"] retain];
-        // Lang.g:12:6: ( type ID ';' -> ^( DECL type ID ) ) // ruleBlockSingleAlt
-        // Lang.g:12:8: type ID ';' // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:12:6: ( type ID ';' -> ^( DECL type ID ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:12:8: type ID ';' // alt
{
+
/* ruleRef */
[self pushFollow:FOLLOW_type_in_decl50];
type2 = [self type];
@@ -357,17 +343,17 @@ static const unsigned long long FOLLOW_10_in_decl54_data[] = { 0x000000000000000


[stream_type addElement:[type2 getTree]];
-
-        ID3=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_decl52];
+
+        ID3=(CommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_decl52];
[stream_ID addElement:ID3];

-
-        char_literal4=(ANTLRCommonToken *)[self match:input TokenType:10 Follow:FOLLOW_10_in_decl54];
+
+        char_literal4=(CommonToken *)[self match:input TokenType:10 Follow:FOLLOW_10_in_decl54];
[stream_10 addElement:char_literal4];

-
+
// AST REWRITE
-        // elements: ID, type
+        // elements: type, ID
// token labels:
// rule labels: retval
// token list labels:
@@ -375,19 +361,19 @@ static const unsigned long long FOLLOW_10_in_decl54_data[] = { 0x000000000000000
// wildcard labels:
retval.tree = root_0;

-        ANTLRRewriteRuleSubtreeStream *stream_retval =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_retval =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];

-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];

// 12:20: -> ^( DECL type ID )
{
-            // Lang.g:12:23: ^( DECL type ID )
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:12:23: ^( DECL type ID )
{
-                ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:
-                        [treeAdaptor createTree:DECL Text:@"DECL"]
+                CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_1 = (CommonTree *)[treeAdaptor becomeRoot:
+                        [[treeAdaptor createTree:DECL Text:@"DECL"] retain]
old:root_1];

[treeAdaptor addChild:[stream_type nextTree] toTree:root_1];
@@ -410,7 +396,7 @@ static const unsigned long long FOLLOW_10_in_decl54_data[] = { 0x000000000000000

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];


@@ -418,20 +404,20 @@ static const unsigned long long FOLLOW_10_in_decl54_data[] = { 0x000000000000000
[stream_ID release];
[stream_type release];

-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -440,71 +426,73 @@ static const unsigned long long FOLLOW_10_in_decl54_data[] = { 0x000000000000000

/*
* $ANTLR start type
- * Lang.g:14:1: type : ( INTTYPE | FLOATTYPE );
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:14:1: type : ( INTTYPE | FLOATTYPE );
*/
- (LangParser_type_return *) type
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
LangParser_type_return * retval = [LangParser_type_return newLangParser_type_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-        ANTLRCommonToken *set5 = nil;
+        /* ruleLabelDefs entry */
+        CommonToken *set5 = nil;

-        ANTLRCommonTree *set5_tree=nil;
+        CommonTree *set5_tree=nil;

-        // Lang.g:14:6: ( INTTYPE | FLOATTYPE ) // ruleBlockSingleAlt
-        // Lang.g: // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g:14:6: ( INTTYPE | FLOATTYPE ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/Lang.g: // alt
{
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+


/* ASTParser matchRuleBlockSet */
/* ASTParser matchSet */
-        set5 = (ANTLRCommonToken *)[input LT:1]; /* matchSet */
+        set5 = (CommonToken *)[input LT:1]; /* matchSet */

if ([input LA:1] == FLOATTYPE||[input LA:1] == INTTYPE) {
[input consume];
[treeAdaptor addChild:/* ASTParser createNodeFromToken */
-            (ANTLRCommonTree *)[[treeAdaptor create:set5] retain]
+            (CommonTree *)[[treeAdaptor create:set5] retain]
toTree:root_0 ];
[state setIsErrorRecovery:NO];
} else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+            MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
@throw mse;
}

-
+
}

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];



-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
diff --git a/runtime/ObjC/Framework/examples/treeparser/main.m b/runtime/ObjC/Framework/examples/treeparser/main.m
index d1eeaf1..11201b6 100644
--- a/runtime/ObjC/Framework/examples/treeparser/main.m
+++ b/runtime/ObjC/Framework/examples/treeparser/main.m
@@ -1,5 +1,5 @@
#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
+#import <ANTLR/ANTLR.h>
#import "LangLexer.h"
#import "LangParser.h"
#import "LangDumpDecl.h"
@@ -33,19 +33,19 @@ int main(int argc, const char * argv[])
{
NSError *error;
NSLog(@"starting treeparser\n");
-    NSString *dir = @"/Users/acondit/source/antlr3/acondit_localhost/code/antlr/main/runtime/ObjC/Framework/examples/treeparser/input";
+    NSString *dir = @"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treeparser/input";
NSString *string = [NSString stringWithContentsOfFile:dir  encoding:NSASCIIStringEncoding error:&error];
NSLog(@"input = %@", string);
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:string];
LangLexer *lex = [LangLexer newLangLexerWithCharStream:stream];
-    ANTLRCommonTokenStream *tokens = [ANTLRCommonTokenStream newANTLRCommonTokenStreamWithTokenSource:lex];
+    CommonTokenStream *tokens = [CommonTokenStream newCommonTokenStreamWithTokenSource:lex];
LangParser *parser = [LangParser newLangParser:tokens];
//    LangParser_decl_return *r = [parser decl];
LangParser_start_return *r = [parser start];
NSLog( @"tree: %@", [r.tree toStringTree]);
-    ANTLRCommonTree *r0 = [r getTree];
+    CommonTree *r0 = [r getTree];

-    ANTLRCommonTreeNodeStream *nodes = [ANTLRCommonTreeNodeStream newANTLRCommonTreeNodeStream:r0];
+    CommonTreeNodeStream *nodes = [CommonTreeNodeStream newCommonTreeNodeStream:r0];
[nodes setTokenStream:tokens];
LangDumpDecl *walker = [LangDumpDecl newLangDumpDecl:nodes];
[walker decl];
diff --git a/runtime/ObjC/Framework/examples/treerewrite/TreeRewriteLexer.h b/runtime/ObjC/Framework/examples/treerewrite/TreeRewriteLexer.h
index f51686c..380e161 100644
--- a/runtime/ObjC/Framework/examples/treerewrite/TreeRewriteLexer.h
+++ b/runtime/ObjC/Framework/examples/treerewrite/TreeRewriteLexer.h
@@ -1,7 +1,7 @@
-// $ANTLR ${project.version} ${buildNumber} TreeRewrite.g 2011-05-06 18:56:28
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g 2012-02-16 17:42:35

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
#import <ANTLR/ANTLR.h>
@@ -11,8 +11,8 @@

/* Start cyclicDFAInterface */

-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
+#pragma mark Rule return scopes Interface start
+#pragma mark Rule return scopes Interface end
#pragma mark Tokens
#ifdef EOF
#undef EOF
@@ -21,12 +21,12 @@
#define INT 4
#define WS 5
/* interface lexer class */
-@interface TreeRewriteLexer : ANTLRLexer { // line 283
+@interface TreeRewriteLexer : Lexer { // line 283
/* ObjC start of actions.lexer.memVars */
/* ObjC end of actions.lexer.memVars */
}
+ (void) initialize;
-+ (TreeRewriteLexer *)newTreeRewriteLexerWithCharStream:(id<ANTLRCharStream>)anInput;
++ (TreeRewriteLexer *)newTreeRewriteLexerWithCharStream:(id<CharStream>)anInput;
/* ObjC start actions.lexer.methodsDecl */
/* ObjC end actions.lexer.methodsDecl */
- (void) mINT ;
diff --git a/runtime/ObjC/Framework/examples/treerewrite/TreeRewriteLexer.m b/runtime/ObjC/Framework/examples/treerewrite/TreeRewriteLexer.m
index 0d9d31a..136f01f 100644
--- a/runtime/ObjC/Framework/examples/treerewrite/TreeRewriteLexer.m
+++ b/runtime/ObjC/Framework/examples/treerewrite/TreeRewriteLexer.m
@@ -1,8 +1,8 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : TreeRewrite.g
- *     -                            On : 2011-05-06 18:56:28
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g
+ *     -                            On : 2012-02-16 17:42:35
*     -                 for the lexer : TreeRewriteLexerLexer
*
* Editing it, at least manually, is not wise.
@@ -11,7 +11,7 @@
*
*
*/
-// $ANTLR ${project.version} ${buildNumber} TreeRewrite.g 2011-05-06 18:56:28
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g 2012-02-16 17:42:35


/* -----------------------------------------
@@ -31,7 +31,7 @@

+ (void) initialize
{
-    [ANTLRBaseRecognizer setGrammarFileName:@"TreeRewrite.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g"];
}

+ (NSString *) tokenNameForType:(NSInteger)aTokenType
@@ -39,14 +39,14 @@
return [[self getTokenNames] objectAtIndex:aTokenType];
}

-+ (TreeRewriteLexer *)newTreeRewriteLexerWithCharStream:(id<ANTLRCharStream>)anInput
++ (TreeRewriteLexer *)newTreeRewriteLexerWithCharStream:(id<CharStream>)anInput
{
return [[TreeRewriteLexer alloc] initWithCharStream:anInput];
}

-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
+- (id) initWithCharStream:(id<CharStream>)anInput
{
-    self = [super initWithCharStream:anInput State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:3+1] retain]];
+    self = [super initWithCharStream:anInput State:[RecognizerSharedState newRecognizerSharedStateWithRuleLen:3+1]];
if ( self != nil ) {
}
return self;
@@ -67,16 +67,18 @@
- (void) mINT
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = INT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // TreeRewrite.g:15:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
-        // TreeRewrite.g:15:7: ( '0' .. '9' )+ // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g:15:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g:15:7: ( '0' .. '9' )+ // alt
{
-        // TreeRewrite.g:15:7: ( '0' .. '9' )+ // positiveClosureBlock
+
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g:15:7: ( '0' .. '9' )+ // positiveClosureBlock
NSInteger cnt1 = 0;
do {
NSInteger alt1 = 2;
@@ -88,86 +90,89 @@

switch (alt1) {
case 1 : ;
-                    // TreeRewrite.g: // alt
+                    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g: // alt
{
+
if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))) {
[input consume];
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
[self recover:mse];
@throw mse;
}

-
+
}
break;

default :
if ( cnt1 >= 1 )
goto loop1;
-                    ANTLREarlyExitException *eee =
-                        [ANTLREarlyExitException newException:input decisionNumber:1];
+                    EarlyExitException *eee =
+                        [EarlyExitException newException:input decisionNumber:1];
@throw eee;
}
cnt1++;
} while (YES);
loop1: ;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "INT" */
-
// $ANTLR start "WS"
- (void) mWS
{
//
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */
+
+    /* ruleDeclarations */

@try {
NSInteger _type = WS;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // TreeRewrite.g:18:5: ( ' ' ) // ruleBlockSingleAlt
-        // TreeRewrite.g:18:9: ' ' // alt
+        NSInteger _channel = TokenChannelDefault;
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g:18:5: ( ' ' ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g:18:9: ' ' // alt
{
+
+
[self matchChar:' '];

+

_channel=HIDDEN;

-
+
}

-        // token+rule list labels
+        /* token+rule list labels */

state.type = _type;
state.channel = _channel;
}
@finally {
//
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return;
}
/* $ANTLR end "WS" */
-
- (void) mTokens
{
-    // TreeRewrite.g:1:8: ( INT | WS ) //ruleblock
+    // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g:1:8: ( INT | WS ) //ruleblock
NSInteger alt2=2;
NSInteger LA2_0 = [input LA:1];

@@ -178,28 +183,32 @@
alt2=2;
}
else {
-        ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:2 state:0 stream:input];
+        NoViableAltException *nvae = [NoViableAltException newException:2 state:0 stream:input];
nvae.c = LA2_0;
@throw nvae;

}
switch (alt2) {
case 1 : ;
-            // TreeRewrite.g:1:10: INT // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g:1:10: INT // alt
{
-            [self mINT];


+            [self mINT];
+

+
}
break;
case 2 : ;
-            // TreeRewrite.g:1:14: WS // alt
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g:1:14: WS // alt
{
-            [self mWS];


+            [self mWS];
+

+
}
break;

diff --git a/runtime/ObjC/Framework/examples/treerewrite/TreeRewriteParser.h b/runtime/ObjC/Framework/examples/treerewrite/TreeRewriteParser.h
index f587cdd..e8af0a6 100644
--- a/runtime/ObjC/Framework/examples/treerewrite/TreeRewriteParser.h
+++ b/runtime/ObjC/Framework/examples/treerewrite/TreeRewriteParser.h
@@ -1,7 +1,7 @@
-// $ANTLR ${project.version} ${buildNumber} TreeRewrite.g 2011-05-06 18:56:28
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g 2012-02-16 17:42:35

/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
+ * Standard antlr OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
#import <ANTLR/ANTLR.h>
@@ -29,58 +29,62 @@ typedef enum {
#define EOF -1
#define INT 4
#define WS 5
-#pragma mark Dynamic Global Scopes
-#pragma mark Dynamic Rule Scopes
-#pragma mark Rule Return Scopes start
+#pragma mark Dynamic Global Scopes globalAttributeScopeInterface
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeInterface
+#pragma mark Rule Return Scopes returnScopeInterface
/* returnScopeInterface TreeRewriteParser_rule_return */
-@interface TreeRewriteParser_rule_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface TreeRewriteParser_rule_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (TreeRewriteParser_rule_return *)newTreeRewriteParser_rule_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */


/* returnScopeInterface TreeRewriteParser_subrule_return */
-@interface TreeRewriteParser_subrule_return :ANTLRParserRuleReturnScope { /* returnScopeInterface line 1838 */
+@interface TreeRewriteParser_subrule_return : ParserRuleReturnScope { /* returnScopeInterface line 1838 */
/* AST returnScopeInterface.memVars */
-ANTLRCommonTree *tree; /* ObjC start of memVars() */
+CommonTree *tree; /* ObjC start of memVars() */
+
}
-/* start properties */
+/* start property declarations */
/* AST returnScopeInterface.properties */
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
+@property (retain, getter=getTree, setter=setTree:) CommonTree *tree;
+
+/* start of method declarations */
+
+ (TreeRewriteParser_subrule_return *)newTreeRewriteParser_subrule_return;
/* this is start of set and get methods */
/* AST returnScopeInterface.methodsDecl */
-- (ANTLRCommonTree *)getTree;
+- (CommonTree *)getTree;

-- (void) setTree:(ANTLRCommonTree *)aTree;
+- (void) setTree:(CommonTree *)aTree;
/* methodsDecl */
-@end /* end of returnScopeInterface interface */

+@end /* end of returnScopeInterface interface */



/* Interface grammar class */
-@interface TreeRewriteParser : ANTLRParser { /* line 572 */
-/* ObjC start of ruleAttributeScopeMemVar */
-
-
-/* ObjC end of ruleAttributeScopeMemVar */
-/* ObjC start of globalAttributeScopeMemVar */
+@interface TreeRewriteParser  : Parser { /* line 572 */
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeDecl
+#pragma mark Dynamic Global Rule Scopes globalAttributeScopeMemVar


-/* ObjC end of globalAttributeScopeMemVar */
/* ObjC start of actions.(actionScope).memVars */
/* ObjC end of actions.(actionScope).memVars */
/* ObjC start of memVars */
@@ -89,7 +93,7 @@ NSInteger ruleLevel;
NSArray *ruleNames;
/* AST super.memVars */
/* AST parserMemVars */
-id<ANTLRTreeAdaptor> treeAdaptor;   /* AST parserMemVars */
+id<TreeAdaptor> treeAdaptor;   /* AST parserMemVars */
/* ObjC end of memVars */

}
@@ -100,11 +104,11 @@ id<ANTLRTreeAdaptor> treeAdaptor;   /* AST parserMemVars */
/* AST parserHeaderFile.properties */
/* AST super.properties */
/* AST parserProperties */
-@property (retain, getter=getTreeAdaptor, setter=setTreeAdaptor:) id<ANTLRTreeAdaptor> treeAdaptor;   /* AST parserproperties */
+@property (retain, getter=getTreeAdaptor, setter=setTreeAdaptor:) id<TreeAdaptor> treeAdaptor;   /* AST parserproperties */
/* ObjC end of properties */

+ (void) initialize;
-+ (id) newTreeRewriteParser:(id<ANTLRTokenStream>)aStream;
++ (id) newTreeRewriteParser:(id<TokenStream>)aStream;
/* ObjC start of actions.(actionScope).methodsDecl */
/* ObjC end of actions.(actionScope).methodsDecl */

@@ -112,8 +116,8 @@ id<ANTLRTreeAdaptor> treeAdaptor;   /* AST parserMemVars */
/* AST parserHeaderFile.methodsDecl */
/* AST super.methodsDecl */
/* AST parserMethodsDecl */
-- (id<ANTLRTreeAdaptor>) getTreeAdaptor;
-- (void) setTreeAdaptor:(id<ANTLRTreeAdaptor>)theTreeAdaptor;   /* AST parsermethodsDecl */
+- (id<TreeAdaptor>) getTreeAdaptor;
+- (void) setTreeAdaptor:(id<TreeAdaptor>)theTreeAdaptor;   /* AST parsermethodsDecl */
/* ObjC end of methodsDecl */

- (TreeRewriteParser_rule_return *)rule;
diff --git a/runtime/ObjC/Framework/examples/treerewrite/TreeRewriteParser.m b/runtime/ObjC/Framework/examples/treerewrite/TreeRewriteParser.m
index 9340e6e..b4d635d 100644
--- a/runtime/ObjC/Framework/examples/treerewrite/TreeRewriteParser.m
+++ b/runtime/ObjC/Framework/examples/treerewrite/TreeRewriteParser.m
@@ -1,8 +1,8 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
+ *  This OBJC source file was generated by $ANTLR version 3.4
*
- *     -  From the grammar source file : TreeRewrite.g
- *     -                            On : 2011-05-06 18:56:28
+ *     -  From the grammar source file : /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g
+ *     -                            On : 2012-02-16 17:42:35
*     -                for the parser : TreeRewriteParserParser
*
* Editing it, at least manually, is not wise.
@@ -11,7 +11,7 @@
*
*
*/
-// $ANTLR ${project.version} ${buildNumber} TreeRewrite.g 2011-05-06 18:56:28
+// $ANTLR 3.4 /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g 2012-02-16 17:42:35


/* -----------------------------------------
@@ -35,32 +35,32 @@ static ANTLRBitSet *FOLLOW_INT_in_subrule53;
static const unsigned long long FOLLOW_INT_in_subrule53_data[] = { 0x0000000000000002LL};


-#pragma mark Dynamic Global Scopes
+#pragma mark Dynamic Global globalAttributeScopeImplementation

-#pragma mark Dynamic Rule Scopes
+#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation

-#pragma mark Rule Return Scopes start
-@implementation TreeRewriteParser_rule_return /* returnScope */
+#pragma mark Rule Return Scopes returnScopeImplementation
+@implementation TreeRewriteParser_rule_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (TreeRewriteParser_rule_return *)newTreeRewriteParser_rule_return
{
-    return [[[TreeRewriteParser_rule_return alloc] init] retain];
+return [[[TreeRewriteParser_rule_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -76,31 +76,29 @@ static const unsigned long long FOLLOW_INT_in_subrule53_data[] = { 0x00000000000
}


-
@end /* end of returnScope implementation */

-
-@implementation TreeRewriteParser_subrule_return /* returnScope */
+@implementation TreeRewriteParser_subrule_return /* returnScopeImplementation */
/* AST returnScope.synthesize */
@synthesize tree; /* start of synthesize -- OBJC-Line 1837 */
+ (TreeRewriteParser_subrule_return *)newTreeRewriteParser_subrule_return
{
-    return [[[TreeRewriteParser_subrule_return alloc] init] retain];
+return [[[TreeRewriteParser_subrule_return alloc] init] retain];
}

- (id) init
{
-    self = [super init];
-    return self;
+self = [super init];
+return self;
}

/* AST returnScope.methods */
-- (ANTLRCommonTree *)getTree
+- (CommonTree *)getTree
{
return tree;
}

-- (void) setTree:(ANTLRCommonTree *)aTree
+- (void) setTree:(CommonTree *)aTree
{
if (tree != aTree) {
if (tree != nil) [tree release];
@@ -116,60 +114,49 @@ static const unsigned long long FOLLOW_INT_in_subrule53_data[] = { 0x00000000000
}


-
@end /* end of returnScope implementation */


-//#pragma mark Rule return scopes start
-//
-
-#pragma mark Rule return scopes start

@implementation TreeRewriteParser  // line 637

/* ObjC start of ruleAttributeScope */
-#pragma mark Dynamic Rule Scopes
+#pragma mark Dynamic Rule Scopes ruleAttributeScope
/* ObjC end of ruleAttributeScope */
-#pragma mark global Attribute Scopes
+#pragma mark global Attribute Scopes globalAttributeScope
/* ObjC start globalAttributeScope */
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */
-/* ObjC end actions.(actionScope).synthesize */
/* ObjC start synthesize() */
/* AST genericParser.synthesize */
/* AST parserProperties */
@synthesize treeAdaptor;
-/* ObjC end synthesize() */

+ (void) initialize
{
#pragma mark Bitsets
-    FOLLOW_INT_in_rule26 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_rule26_data Count:(NSUInteger)1] retain];
-    FOLLOW_subrule_in_rule28 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_subrule_in_rule28_data Count:(NSUInteger)1] retain];
-    FOLLOW_INT_in_subrule53 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_subrule53_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_rule26 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_rule26_data Count:(NSUInteger)1] retain];
+    FOLLOW_subrule_in_rule28 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_subrule_in_rule28_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_subrule53 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_subrule53_data Count:(NSUInteger)1] retain];

-    [ANTLRBaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
+    [BaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
@"INT", @"WS", nil] retain]];
-    [ANTLRBaseRecognizer setGrammarFileName:@"TreeRewrite.g"];
+    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g"];
}

-+ (TreeRewriteParser *)newTreeRewriteParser:(id<ANTLRTokenStream>)aStream
++ (TreeRewriteParser *)newTreeRewriteParser:(id<TokenStream>)aStream
{
return [[TreeRewriteParser alloc] initWithTokenStream:aStream];
-
-
}

-- (id) initWithTokenStream:(id<ANTLRTokenStream>)aStream
+- (id) initWithTokenStream:(id<TokenStream>)aStream
{
-    self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:2+1] retain]];
+    self = [super initWithTokenStream:aStream State:[[RecognizerSharedState newRecognizerSharedStateWithRuleLen:2+1] retain]];
if ( self != nil ) {
-
-
/* start of actions-actionScope-init */
/* start of init */
/* AST genericParser.init */
-        [self setTreeAdaptor:[[ANTLRCommonTreeAdaptor newTreeAdaptor] retain]];
+        [self setTreeAdaptor:[[CommonTreeAdaptor newTreeAdaptor] retain]];
}
return self;
}
@@ -182,19 +169,17 @@ static const unsigned long long FOLLOW_INT_in_subrule53_data[] = { 0x00000000000
[super dealloc];
}

-/* ObjC start members */
-/* ObjC end members */
/* ObjC start actions.(actionScope).methods */
/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
/* AST genericParser.methods */
/* AST parserMethods */
-- (id<ANTLRTreeAdaptor>) getTreeAdaptor
+- (id<TreeAdaptor>) getTreeAdaptor
{
return treeAdaptor;
}

-- (void) setTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor
+- (void) setTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor
{
if (aTreeAdaptor != treeAdaptor) {
treeAdaptor = aTreeAdaptor;
@@ -204,40 +189,41 @@ static const unsigned long long FOLLOW_INT_in_subrule53_data[] = { 0x00000000000
/* ObjC start rules */
/*
* $ANTLR start rule
- * TreeRewrite.g:8:1: rule : INT subrule -> ^( subrule INT ) ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g:8:1: rule : INT subrule -> ^( subrule INT ) ;
*/
- (TreeRewriteParser_rule_return *) rule
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
TreeRewriteParser_rule_return * retval = [TreeRewriteParser_rule_return newTreeRewriteParser_rule_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-        ANTLRCommonToken *INT1 = nil;
-         TreeRewriteParser_subrule_return * subrule2 = nil ;
-
+        /* ruleLabelDefs entry */
+        CommonToken *INT1 = nil;TreeRewriteParser_subrule_return * subrule2 = nil ;
+

-        ANTLRCommonTree *INT1_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_INT =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
+        CommonTree *INT1_tree=nil;
+        RewriteRuleTokenStream *stream_INT =
+            [[RewriteRuleTokenStream newRewriteRuleTokenStream:treeAdaptor
description:@"token INT"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_subrule =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_subrule =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"rule subrule"] retain];
-        // TreeRewrite.g:8:5: ( INT subrule -> ^( subrule INT ) ) // ruleBlockSingleAlt
-        // TreeRewrite.g:8:7: INT subrule // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g:8:5: ( INT subrule -> ^( subrule INT ) ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g:8:7: INT subrule // alt
{
-        INT1=(ANTLRCommonToken *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_rule26];
-            [stream_INT addElement:INT1];

+        INT1=(CommonToken *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_rule26];
+            [stream_INT addElement:INT1];

+
/* ruleRef */
[self pushFollow:FOLLOW_subrule_in_rule28];
subrule2 = [self subrule];
@@ -246,7 +232,7 @@ static const unsigned long long FOLLOW_INT_in_subrule53_data[] = { 0x00000000000


[stream_subrule addElement:[subrule2 getTree]];
-
+
// AST REWRITE
// elements: subrule, INT
// token labels:
@@ -256,18 +242,18 @@ static const unsigned long long FOLLOW_INT_in_subrule53_data[] = { 0x00000000000
// wildcard labels:
retval.tree = root_0;

-        ANTLRRewriteRuleSubtreeStream *stream_retval =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
+        RewriteRuleSubtreeStream *stream_retval =
+            [[RewriteRuleSubtreeStream newRewriteRuleSubtreeStream:treeAdaptor
description:@"token retval" element:retval!=nil?[retval getTree]:nil] retain];

-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];

// 8:19: -> ^( subrule INT )
{
-            // TreeRewrite.g:8:22: ^( subrule INT )
+            // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g:8:22: ^( subrule INT )
{
-                ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:(id<ANTLRTree>)[stream_subrule nextNode] old:root_1];
+                CommonTree *root_1 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+                root_1 = (CommonTree *)[treeAdaptor becomeRoot:(id<Tree>)[stream_subrule nextNode] old:root_1];

// TODO: args:
[treeAdaptor addChild:
@@ -287,27 +273,27 @@ static const unsigned long long FOLLOW_INT_in_subrule53_data[] = { 0x00000000000

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];


[stream_INT release];
[stream_subrule release];

-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
@@ -316,63 +302,65 @@ static const unsigned long long FOLLOW_INT_in_subrule53_data[] = { 0x00000000000

/*
* $ANTLR start subrule
- * TreeRewrite.g:11:1: subrule : INT ;
+ * /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g:11:1: subrule : INT ;
*/
- (TreeRewriteParser_subrule_return *) subrule
{
-    /* my ruleScopeSetUp */
-    /* Terence's stuff */
+    /* ruleScopeSetUp */

/* AST ruleDeclarations */
+    /* ruleDeclarations */
TreeRewriteParser_subrule_return * retval = [TreeRewriteParser_subrule_return newTreeRewriteParser_subrule_return];
[retval setStart:[input LT:1]];


-    ANTLRCommonTree *root_0 = nil;
+    CommonTree *root_0 = nil;

@try {
/* AST ruleLabelDefs */
-        ANTLRCommonToken *INT3 = nil;
+        /* ruleLabelDefs entry */
+        CommonToken *INT3 = nil;

-        ANTLRCommonTree *INT3_tree=nil;
+        CommonTree *INT3_tree=nil;

-        // TreeRewrite.g:12:5: ( INT ) // ruleBlockSingleAlt
-        // TreeRewrite.g:12:9: INT // alt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g:12:5: ( INT ) // ruleBlockSingleAlt
+        // /Users/acondit/source/antlr/code/antlr3/runtime/ObjC/Framework/examples/treerewrite/TreeRewrite.g:12:9: INT // alt
{
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+        root_0 = (CommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
+


/* ASTParser tokenRef */
-        INT3=(ANTLRCommonToken *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_subrule53];
+        INT3=(CommonToken *)[self match:input TokenType:INT Follow:FOLLOW_INT_in_subrule53];
INT3_tree = /* ASTParser createNodeFromToken */
-        (ANTLRCommonTree *)[[treeAdaptor create:INT3] retain]
+        (CommonTree *)[[treeAdaptor create:INT3] retain]
;
[treeAdaptor addChild:INT3_tree  toTree:root_0];

-
+
}

/* ASTParser ruleCleanUp */
/* AST ruleCleanUp */
-        // token+rule list labels
+        /* token+rule list labels */
[retval setStop:[input LT:-1]];



-            retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
+            retval.tree = (CommonTree *)[treeAdaptor rulePostProcessing:root_0];
[treeAdaptor setTokenBoundaries:retval.tree From:retval.start To:retval.stopToken];

}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
/* ASTParser rule.setErrorReturnValue */
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];
+        retval.tree = (CommonTree *)[treeAdaptor errorNode:input From:retval.start To:[input LT:-1] Exception:re];

}

@finally {
-        /* Terence's stuff */
+        /* ruleScopeCleanUp */

}
return retval;
diff --git a/runtime/ObjC/Framework/examples/treerewrite/antlr3.h b/runtime/ObjC/Framework/examples/treerewrite/antlr3.h
deleted file mode 100644
index 4f16279..0000000
--- a/runtime/ObjC/Framework/examples/treerewrite/antlr3.h
+++ /dev/null
@@ -1,79 +0,0 @@
-#import <ANTLR/ANTLRBaseMapElement.h>
-#import <ANTLR/ANTLRBaseRecognizer.h>
-#import <ANTLR/ANTLRBaseStack.h>
-#import <ANTLR/ANTLRBaseTree.h>
-#import <ANTLR/ANTLRBaseTreeAdaptor.h>
-#import <ANTLR/ANTLRBitSet.h>
-#import <ANTLR/ANTLRBufferedTokenStream.h>
-#import <ANTLR/ANTLRBufferedTreeNodeStream.h>
-#import <ANTLR/ANTLRCharStream.h>
-#import <ANTLR/ANTLRCharStreamState.h>
-#import <ANTLR/ANTLRCommonErrorNode.h>
-#import <ANTLR/ANTLRCommonToken.h>
-#import <ANTLR/ANTLRCommonTokenStream.h>
-#import <ANTLR/ANTLRCommonTree.h>
-#import <ANTLR/ANTLRCommonTreeAdaptor.h>
-#import <ANTLR/ANTLRCommonTreeNodeStream.h>
-#import <ANTLR/ANTLRDFA.h>
-#import <ANTLR/ANTLRDebug.h>
-#import <ANTLR/ANTLRDebugEventProxy.h>
-#import <ANTLR/ANTLRDebugEventListener.h>
-#import <ANTLR/ANTLRDebugParser.h>
-#import <ANTLR/ANTLRDebugTokenStream.h>
-#import <ANTLR/ANTLRDebugTreeAdaptor.h>
-#import <ANTLR/ANTLRDebugTreeNodeStream.h>
-#import <ANTLR/ANTLRDebugTreeParser.h>
-#import <ANTLR/ANTLREarlyExitException.h>
-#import <ANTLR/ANTLRError.h>
-#import <ANTLR/ANTLRFailedPredicateException.h>
-#import <ANTLR/ANTLRFastQueue.h>
-#import <ANTLR/ANTLRHashMap.h>
-#import <ANTLR/ANTLRHashRule.h>
-#import <ANTLR/ANTLRIntArray.h>
-#import <ANTLR/ANTLRIntStream.h>
-#import <ANTLR/ANTLRLexer.h>
-#import <ANTLR/ANTLRLexerRuleReturnScope.h>
-#import <ANTLR/ANTLRLinkBase.h>
-#import <ANTLR/ANTLRLookaheadStream.h>
-#import <ANTLR/ANTLRMapElement.h>
-#import <ANTLR/ANTLRMap.h>
-#import <ANTLR/ANTLRMismatchedNotSetException.h>
-#import <ANTLR/ANTLRMismatchedRangeException.h>
-#import <ANTLR/ANTLRMismatchedSetException.h>
-#import <ANTLR/ANTLRMismatchedTokenException.h>
-#import <ANTLR/ANTLRMismatchedTreeNodeException.h>
-#import <ANTLR/ANTLRMissingTokenException.h>
-#import <ANTLR/ANTLRNodeMapElement.h>
-#import <ANTLR/ANTLRNoViableAltException.h>
-#import <ANTLR/ANTLRParser.h>
-#import <ANTLR/ANTLRParserRuleReturnScope.h>
-#import <ANTLR/ANTLRPtrBuffer.h>
-#import <ANTLR/ANTLRRecognitionException.h>
-#import <ANTLR/ANTLRRecognizerSharedState.h>
-#import <ANTLR/ANTLRRewriteRuleElementStream.h>
-#import <ANTLR/ANTLRRewriteRuleSubtreeStream.h>
-#import <ANTLR/ANTLRRewriteRuleTokenStream.h>
-#import <ANTLR/ANTLRRuleMemo.h>
-#import <ANTLR/ANTLRRuleStack.h>
-#import <ANTLR/ANTLRRuleReturnScope.h>
-#import <ANTLR/ANTLRRuntimeException.h>
-#import <ANTLR/ANTLRStreamEnumerator.h>
-#import <ANTLR/ANTLRStringStream.h>
-#import <ANTLR/ANTLRSymbolStack.h>
-#import <ANTLR/ANTLRToken+DebuggerSupport.h>
-#import <ANTLR/ANTLRToken.h>
-#import <ANTLR/ANTLRTokenRewriteStream.h>
-#import <ANTLR/ANTLRTokenSource.h>
-#import <ANTLR/ANTLRTokenStream.h>
-#import <ANTLR/ANTLRTree.h>
-#import <ANTLR/ANTLRTreeAdaptor.h>
-#import <ANTLR/ANTLRTreeException.h>
-#import <ANTLR/ANTLRTreeIterator.h>
-#import <ANTLR/ANTLRTreeNodeStream.h>
-#import <ANTLR/ANTLRTreeParser.h>
-#import <ANTLR/ANTLRTreeRuleReturnScope.h>
-#import <ANTLR/ANTLRUnbufferedTokenStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStreamState.h>
-#import <ANTLR/ANTLRUniqueIDMap.h>
-#import <ANTLR/ANTLRUnwantedTokenException.h>
diff --git a/runtime/ObjC/Framework/examples/treerewrite/main.m b/runtime/ObjC/Framework/examples/treerewrite/main.m
index cd8f9e1..b84c7c5 100644
--- a/runtime/ObjC/Framework/examples/treerewrite/main.m
+++ b/runtime/ObjC/Framework/examples/treerewrite/main.m
@@ -1,5 +1,5 @@
#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
+#import <ANTLR/ANTLR.h>
#import "TreeRewriteLexer.h"
#import "TreeRewriteParser.h"
//#import "stdio.h"
@@ -11,16 +11,16 @@ int main() {
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"23 42"];
TreeRewriteLexer *lexer = [TreeRewriteLexer newTreeRewriteLexerWithCharStream:stream];

-//    id<ANTLRToken> currentToken;
-//    while ((currentToken = [lexer nextToken]) && [currentToken type] != ANTLRTokenTypeEOF) {
+//    id<Token> currentToken;
+//    while ((currentToken = [lexer nextToken]) && [currentToken type] != TokenTypeEOF) {
//        NSLog(@"%@", currentToken);
//    }

-	ANTLRCommonTokenStream *tokenStream = [ANTLRCommonTokenStream newANTLRCommonTokenStreamWithTokenSource:lexer];
+	CommonTokenStream *tokenStream = [CommonTokenStream newCommonTokenStreamWithTokenSource:lexer];
TreeRewriteParser *parser = [[TreeRewriteParser alloc] initWithTokenStream:tokenStream];
-	ANTLRCommonTree *rule_tree = [[parser rule] getTree];
+	CommonTree *rule_tree = [[parser rule] getTree];
NSLog(@"tree: %@", [rule_tree treeDescription]);
-//	ANTLRCommonTreeNodeStream *treeStream = [[ANTLRCommonTreeNodeStream alloc] initWithTree:program_tree];
+//	CommonTreeNodeStream *treeStream = [[CommonTreeNodeStream alloc] initWithTree:program_tree];
//	SimpleCTP *walker = [[SimpleCTP alloc] initWithTreeNodeStream:treeStream];
//	[walker program];

diff --git a/runtime/ObjC/Framework/examples/treerewrite/output1/TreeRewrite.tokens b/runtime/ObjC/Framework/examples/treerewrite/output1/TreeRewrite.tokens
deleted file mode 100644
index eb18cc6..0000000
--- a/runtime/ObjC/Framework/examples/treerewrite/output1/TreeRewrite.tokens
+++ /dev/null
@@ -1,2 +0,0 @@
-WS=5
-INT=4
diff --git a/runtime/ObjC/Framework/examples/treerewrite/output1/TreeRewriteLexer.h b/runtime/ObjC/Framework/examples/treerewrite/output1/TreeRewriteLexer.h
deleted file mode 100644
index c97f099..0000000
--- a/runtime/ObjC/Framework/examples/treerewrite/output1/TreeRewriteLexer.h
+++ /dev/null
@@ -1,30 +0,0 @@
-// $ANTLR 3.2 Aug 20, 2010 15:00:19 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g 2010-08-20 15:03:14
-
-/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
- */
-#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
-/* End of standard antlr3 runtime definitions
- * =============================================================================
- */
-
-/* Start cyclicDFAInterface */
-
-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
-#pragma mark Tokens
-#define INT 4
-#define WS 5
-#define EOF -1
-@interface TreeRewriteLexer : ANTLRLexer { // line 283
-// start of actions.lexer.memVars
-// start of action-actionScope-memVars
-}
-+ (TreeRewriteLexer *)newTreeRewriteLexer:(id<ANTLRCharStream>)anInput;
-
-- (void)mINT;
-- (void)mWS;
-- (void)mTokens;
-
-@end /* end of TreeRewriteLexer interface */
diff --git a/runtime/ObjC/Framework/examples/treerewrite/output1/TreeRewriteLexer.m b/runtime/ObjC/Framework/examples/treerewrite/output1/TreeRewriteLexer.m
deleted file mode 100644
index 3b52b07..0000000
--- a/runtime/ObjC/Framework/examples/treerewrite/output1/TreeRewriteLexer.m
+++ /dev/null
@@ -1,224 +0,0 @@
-/** \file
- *  This OBJC source file was generated by $ANTLR version 3.2 Aug 20, 2010 15:00:19
- *
- *     -  From the grammar source file : /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g
- *     -                            On : 2010-08-20 15:03:14
- *     -                 for the lexer : TreeRewriteLexerLexer *
- * Editing it, at least manually, is not wise.
- *
- * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
- *
- *
-*/
-// [The "BSD licence"]
-// Copyright (c) 2010 Alan Condit
-//
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. The name of the author may not be used to endorse or promote products
-//    derived from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// $ANTLR 3.2 Aug 20, 2010 15:00:19 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g 2010-08-20 15:03:14
-
-/* -----------------------------------------
- * Include the ANTLR3 generated header file.
- */
-#import "TreeRewriteLexer.h"
-/* ----------------------------------------- */
-
-
-/* ============================================================================= */
-
-/* =============================================================================
- * Start of recognizer
- */
-
-
-/** As per Terence: No returns for lexer rules!
-#pragma mark Rule return scopes start
-#pragma mark Rule return scopes end
-*/
-@implementation TreeRewriteLexer // line 330
-
-+ (void) initialize
-{
-    [ANTLRBaseRecognizer setGrammarFileName:@"/usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g"];
-}
-
-+ (NSString *) tokenNameForType:(NSInteger)aTokenType
-{
-    return [[self getTokenNames] objectAtIndex:aTokenType];
-}
-
-+ (TreeRewriteLexer *)newTreeRewriteLexer:(id<ANTLRCharStream>)anInput
-{
-    return [[TreeRewriteLexer alloc] initWithCharStream:anInput];
-}
-
-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
-{
-    if ((self = [super initWithCharStream:anInput State:[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:3+1]]) != nil) {
-
-    }
-    return self;
-}
-
-- (void) dealloc
-{
-    [super dealloc];
-}
-
-// Start of actions.lexer.methods
-// start methods()
-
-// Start of Rules
-// $ANTLR start "INT"
-- (void) mINT
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = INT;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g:15:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g:15:7: ( '0' .. '9' )+ // alt
-        {
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g:15:7: ( '0' .. '9' )+ // positiveClosureBlock
-        NSInteger cnt1=0;
-        do {
-            NSInteger alt1=2;
-            NSInteger LA1_0 = [input LA:1];
-            if ( ((LA1_0>='0' && LA1_0<='9')) ) {
-                alt1=1;
-            }
-
-
-            switch (alt1) {
-                case 1 : ;
-                    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g:15:8: '0' .. '9' // alt
-                    {
-                    [self matchRangeFromChar:'0' to:'9'];   /* element() */
-                     /* elements */
-                    }
-                    break;
-
-                default :
-                    if ( cnt1 >= 1 )
-                        goto loop1;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:1];
-                    @throw eee;
-            }
-            cnt1++;
-        } while (YES);
-        loop1: ;
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "INT"
-
-// $ANTLR start "WS"
-- (void) mWS
-{
-    //
-    // ruleScopeSetUp
-
-    @try {
-        NSInteger _type = WS;
-        NSInteger _channel = ANTLRTokenChannelDefault;
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g:18:5: ( ' ' ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g:18:9: ' ' // alt
-        {
-        [self matchChar:' '];
-          /* element() */
-        state.channel=99;  /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-
-        [state setType:_type];
-
-        state.channel = _channel;
-    }
-    @finally {
-        //
-    }
-    return;
-}
-// $ANTLR end "WS"
-
-- (void) mTokens
-{
-    // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g:1:8: ( INT | WS ) //ruleblock
-    NSInteger alt2=2;
-    NSInteger LA2_0 = [input LA:1];
-
-    if ( ((LA2_0>='0' && LA2_0<='9')) ) {
-        alt2=1;
-    }
-    else if ( (LA2_0==' ') ) {
-        alt2=2;
-    }
-    else {
-        ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:2 state:0 stream:input];
-        @throw nvae;
-    }
-    switch (alt2) {
-        case 1 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g:1:10: INT // alt
-            {
-                [self mINT];
-              /* element() */
-             /* elements */
-            }
-            break;
-        case 2 : ;
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g:1:14: WS // alt
-            {
-                [self mWS];
-              /* element() */
-             /* elements */
-            }
-            break;
-
-    }
-
-}
-
-@end // end of TreeRewriteLexer implementation // line 397
-
-/* End of code
- * =============================================================================
- */
diff --git a/runtime/ObjC/Framework/examples/treerewrite/output1/TreeRewriteParser.h b/runtime/ObjC/Framework/examples/treerewrite/output1/TreeRewriteParser.h
deleted file mode 100644
index 058e7af..0000000
--- a/runtime/ObjC/Framework/examples/treerewrite/output1/TreeRewriteParser.h
+++ /dev/null
@@ -1,75 +0,0 @@
-// $ANTLR 3.2 Aug 20, 2010 15:00:19 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g 2010-08-20 15:03:14
-
-/* =============================================================================
- * Standard antlr3 OBJC runtime definitions
- */
-#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
-/* End of standard antlr3 runtime definitions
- * =============================================================================
- */
-
-#pragma mark Tokens
-#define WS 5
-#define INT 4
-#define EOF -1
-#pragma mark Dynamic Global Scopes
-#pragma mark Dynamic Rule Scopes
-#pragma mark Rule Return Scopes start
-@interface TreeRewriteParser_rule_return :ANTLRParserRuleReturnScope { // line 1672
-// returnScopeInterface.memVars
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (TreeRewriteParser_rule_return *)newTreeRewriteParser_rule_return;
-// this is start of set and get methods
-// returnScopeInterface.methodsdecl
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end
-@interface TreeRewriteParser_subrule_return :ANTLRParserRuleReturnScope { // line 1672
-// returnScopeInterface.memVars
-ANTLRCommonTree *tree; // start of memVars()
-}
-
-// start properties
-@property (retain, getter=getTree, setter=setTree:) ANTLRCommonTree *tree;
-+ (TreeRewriteParser_subrule_return *)newTreeRewriteParser_subrule_return;
-// this is start of set and get methods
-// returnScopeInterface.methodsdecl
-- (ANTLRCommonTree *)getTree;
-- (void) setTree:(ANTLRCommonTree *)aTree;
-  // methodsDecl
-@end
-
-#pragma mark Rule return scopes end
-@interface TreeRewriteParser : ANTLRParser { // line 529
-// start of globalAttributeScopeMemVar
-
-
-// start of action-actionScope-memVars
-// start of ruleAttributeScopeMemVar
-
-
-// Start of memVars
-// parserHeaderFile.memVars
-// parsermemVars
-id<ANTLRTreeAdaptor> treeAdaptor;
-
- }
-
-// start of action-actionScope-methodsDecl
-
-// parserHeaderFile.methodsdecl
-// parserMethodsDecl
-- (id<ANTLRTreeAdaptor>) getTreeAdaptor;
-- (void) setTreeAdaptor:(id<ANTLRTreeAdaptor>)theTreeAdaptor;
-
-- (TreeRewriteParser_rule_return *)mrule;
-- (TreeRewriteParser_subrule_return *)msubrule;
-
-
-@end /* end of TreeRewriteParser interface */
diff --git a/runtime/ObjC/Framework/examples/treerewrite/output1/TreeRewriteParser.m b/runtime/ObjC/Framework/examples/treerewrite/output1/TreeRewriteParser.m
deleted file mode 100644
index efd085f..0000000
--- a/runtime/ObjC/Framework/examples/treerewrite/output1/TreeRewriteParser.m
+++ /dev/null
@@ -1,354 +0,0 @@
-/** \file
- *  This OBJC source file was generated by $ANTLR version 3.2 Aug 20, 2010 15:00:19
- *
- *     -  From the grammar source file : /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g
- *     -                            On : 2010-08-20 15:03:14
- *     -                for the parser : TreeRewriteParserParser *
- * Editing it, at least manually, is not wise.
- *
- * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
- *
- *
-*/
-// [The "BSD licence"]
-// Copyright (c) 2010 Alan Condit
-//
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. The name of the author may not be used to endorse or promote products
-//    derived from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// $ANTLR 3.2 Aug 20, 2010 15:00:19 /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g 2010-08-20 15:03:14
-
-/* -----------------------------------------
- * Include the ANTLR3 generated header file.
- */
-#import "TreeRewriteParser.h"
-/* ----------------------------------------- */
-
-
-/* ============================================================================= */
-
-/* =============================================================================
- * Start of recognizer
- */
-
-
-
-#pragma mark Bitsets
-static ANTLRBitSet *FOLLOW_INT_in_rule26;
-
-const unsigned long long FOLLOW_INT_in_rule26_data[] = { 0x0000000000000010LL};
-
-static ANTLRBitSet *FOLLOW_subrule_in_rule28;
-
-const unsigned long long FOLLOW_subrule_in_rule28_data[] = { 0x0000000000000002LL};
-
-static ANTLRBitSet *FOLLOW_INT_in_subrule53;
-
-const unsigned long long FOLLOW_INT_in_subrule53_data[] = { 0x0000000000000002LL};
-
-
-
-#pragma mark Dynamic Global Scopes
-
-#pragma mark Dynamic Rule Scopes
-
-#pragma mark Rule return scopes start
-@implementation TreeRewriteParser_rule_return
-@synthesize tree;
-+ (TreeRewriteParser_rule_return *)newTreeRewriteParser_rule_return
-{
-    return [[[TreeRewriteParser_rule_return alloc] init] retain];
-}
-
-// returnScope.methods
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end
-
-@implementation TreeRewriteParser_subrule_return
-@synthesize tree;
-+ (TreeRewriteParser_subrule_return *)newTreeRewriteParser_subrule_return
-{
-    return [[[TreeRewriteParser_subrule_return alloc] init] retain];
-}
-
-// returnScope.methods
-- (ANTLRCommonTree *)getTree
-{
-    return tree;
-}
-
-- (void) setTree:(ANTLRCommonTree *)aTree
-{
-    if (tree != aTree) {
-        if (tree != nil) [tree release];
-        if (aTree != nil) [aTree retain];
-        tree = aTree;
-    }
-}
-
-- (void) dealloc
-{
-    [self setTree:nil];
-    [super dealloc];
-}
-
-
-
-
-@end
-
-
-
-@implementation TreeRewriteParser  // line 610
-
-+ (void) initialize
-{
-    FOLLOW_INT_in_rule26 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_rule26_data Count:(NSUInteger)1] retain];
-    FOLLOW_subrule_in_rule28 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_subrule_in_rule28_data Count:(NSUInteger)1] retain];
-    FOLLOW_INT_in_subrule53 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_subrule53_data Count:(NSUInteger)1] retain];
-
-    [ANTLRBaseRecognizer setTokenNames:[[[NSArray alloc] initWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
- @"INT", @"WS", nil] retain]];
-}
-
-+ (TreeRewriteParser *)newTreeRewriteParser:(id<ANTLRTokenStream>)aStream
-{
-    return [[TreeRewriteParser alloc] initWithTokenStream:aStream];
-
-}
-
-- (id) initWithTokenStream:(id<ANTLRTokenStream>)aStream
-{
-    if ((self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:2+1] retain]]) != nil) {
-
-
-
-        // start of actions-actionScope-init
-        // start of init
-        // genericParser.init
-        [self setTreeAdaptor:[[ANTLRCommonTreeAdaptor newANTLRCommonTreeAdaptor] retain]];
-    }
-    return self;
-}
-
-- (void) dealloc
-{
-    [self setTreeAdaptor:nil];
-
-    [super dealloc];
-}
-// start actions.actionScope.methods
-// start methods()
-// genericParser.methods
-// parserMethods
-- (id<ANTLRTreeAdaptor>) getTreeAdaptor
-{
-	return treeAdaptor;
-}
-
-- (void) setTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor
-{
-	if (aTreeAdaptor != treeAdaptor) {
-		treeAdaptor = aTreeAdaptor;
-	}
-}
-// start rules
-/*
- * $ANTLR start rule
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g:8:1: rule : INT subrule -> ^( subrule INT ) ;
- */
-- (TreeRewriteParser_rule_return *) rule
-{
-    // ruleScopeSetUp
-
-    // ruleDeclarations
-    TreeRewriteParser_rule_return * retval = [TreeRewriteParser_rule_return newTreeRewriteParser_rule_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        // ruleLabelDefs
-        id<ANTLRToken> INT1 = nil;
-        TreeRewriteParser_subrule_return * subrule2 = nil;
-
-
-        ANTLRCommonTree *INT1_tree=nil;
-        ANTLRRewriteRuleTokenStream *stream_INT =
-            [[ANTLRRewriteRuleTokenStream newANTLRRewriteRuleTokenStream:treeAdaptor
-                                                             description:@"token INT"] retain];
-        ANTLRRewriteRuleSubtreeStream *stream_subrule =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"rule subrule"] retain];
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g:8:5: ( INT subrule -> ^( subrule INT ) ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g:8:7: INT subrule // alt
-        {
-        INT1=(id<ANTLRToken>)[self match:input TokenType:INT Follow:FOLLOW_INT_in_rule26];
-            [stream_INT addElement:INT1];
-          /* element() */
-        [self pushFollow:FOLLOW_subrule_in_rule28];
-        subrule2 = [self subrule];
-        [self popFollow];
-
-
-        [stream_subrule addElement:[subrule2 getTree]];  /* element() */
-         /* elements */
-
-        // AST REWRITE
-        // elements: INT, subrule
-        // token labels:
-        // rule labels: retval
-        // token list labels:
-        // rule list labels:
-        // wildcard labels:
-         [retval setTree:root_0];
-
-        retval.tree = root_0;
-
-        ANTLRRewriteRuleSubtreeStream *stream_retval =
-            [[ANTLRRewriteRuleSubtreeStream newANTLRRewriteRuleSubtreeStream:treeAdaptor
-                                                                description:@"token retval"
-                                                                    element:retval!=nil?[retval getTree]:nil] retain];
-
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-        // 8:19: -> ^( subrule INT )
-        {
-            // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g:8:22: ^( subrule INT )
-            {
-                ANTLRCommonTree *root_1 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-                root_1 = (ANTLRCommonTree *)[treeAdaptor becomeRoot:(id<ANTLRTree>)[stream_subrule nextNode]
-                                                                         old:root_1];
-
-                 // TODO: args:
-                [treeAdaptor addChild:[stream_INT nextNode] toTree:root_1];
-
-                [treeAdaptor addChild:root_1 toTree:root_0];
-            }
-
-        }
-
-        retval.tree = root_0;
-
-        }
-
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-        [stream_INT release];
-        [stream_subrule release];
-
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-        [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end rule */
-/*
- * $ANTLR start subrule
- * /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g:11:1: subrule : INT ;
- */
-- (TreeRewriteParser_subrule_return *) subrule
-{
-    // ruleScopeSetUp
-
-    // ruleDeclarations
-    TreeRewriteParser_subrule_return * retval = [TreeRewriteParser_subrule_return newTreeRewriteParser_subrule_return];
-    [retval setStart:[input LT:1]];
-
-    ANTLRCommonTree *root_0 = nil;
-
-    @try {
-        // ruleLabelDefs
-        id<ANTLRToken> INT3 = nil;
-
-        ANTLRCommonTree *INT3_tree=nil;
-
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g:12:5: ( INT ) // ruleBlockSingleAlt
-        // /usr/local/ANTLR3-ObjC2.0-Runtime/Framework/examples/treerewrite/TreeRewrite.g:12:9: INT // alt
-        {
-        root_0 = (ANTLRCommonTree *)[[[treeAdaptor class] newEmptyTree] retain];
-
-        INT3=(id<ANTLRToken>)[self match:input TokenType:INT Follow:FOLLOW_INT_in_subrule53];
-        INT3_tree = (ANTLRCommonTree *)[[treeAdaptor createTree:INT3] retain];
-        [treeAdaptor addChild:INT3_tree  toTree:root_0];
-          /* element() */
-         /* elements */
-        }
-
-        // token+rule list labels
-        [retval setStop:[input LT:-1]];
-
-
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor rulePostProcessing:root_0];
-        [treeAdaptor setTokenBoundaries:retval.tree From:retval.startToken To:retval.stopToken];
-
-    }
-    @catch (ANTLRRecognitionException *re) {
-        [self reportError:re];
-        [self recover:input Exception:re];
-        retval.tree = (ANTLRCommonTree *)[treeAdaptor errorNode:input From:retval.startToken To:[input LT:-1] Exception:re];
-
-    }    @finally {
-    }
-    return retval;
-}
-/* $ANTLR end subrule */
-
-@end /* end of TreeRewriteParser implementation line 669 */
-
-
-/* End of code
- * =============================================================================
- */

