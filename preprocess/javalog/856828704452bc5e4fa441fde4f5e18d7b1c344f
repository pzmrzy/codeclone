commit 856828704452bc5e4fa441fde4f5e18d7b1c344f
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Sat Jul 30 10:05:48 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Sat Jul 30 10:05:48 2011 -0800

(C# 3) Fix lookahead info for NoViableAltException thrown during fixed-k analysis (was already working inside DFA.Predict)

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8947]

diff --git a/runtime/CSharp3/Sources/Antlr3.Runtime/NoViableAltException.cs b/runtime/CSharp3/Sources/Antlr3.Runtime/NoViableAltException.cs
index 6478c6f..4f37001 100644
--- a/runtime/CSharp3/Sources/Antlr3.Runtime/NoViableAltException.cs
+++ b/runtime/CSharp3/Sources/Antlr3.Runtime/NoViableAltException.cs
@@ -1,10 +1,10 @@
/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -66,7 +66,12 @@ namespace Antlr.Runtime
}

public NoViableAltException(string grammarDecisionDescription, int decisionNumber, int stateNumber, IIntStream input)
-            : base(input)
+            : this(grammarDecisionDescription, decisionNumber, stateNumber, input, 1)
+        {
+        }
+
+        public NoViableAltException(string grammarDecisionDescription, int decisionNumber, int stateNumber, IIntStream input, int k)
+            : base(input, k)
{
this._grammarDecisionDescription = grammarDecisionDescription;
this._decisionNumber = decisionNumber;
@@ -74,7 +79,12 @@ namespace Antlr.Runtime
}

public NoViableAltException(string message, string grammarDecisionDescription, int decisionNumber, int stateNumber, IIntStream input)
-            : base(message, input)
+            : this(message, grammarDecisionDescription, decisionNumber, stateNumber, input, 1)
+        {
+        }
+
+        public NoViableAltException(string message, string grammarDecisionDescription, int decisionNumber, int stateNumber, IIntStream input, int k)
+            : base(message, input, k)
{
this._grammarDecisionDescription = grammarDecisionDescription;
this._decisionNumber = decisionNumber;
@@ -82,7 +92,12 @@ namespace Antlr.Runtime
}

public NoViableAltException(string message, string grammarDecisionDescription, int decisionNumber, int stateNumber, IIntStream input, Exception innerException)
-            : base(message, input, innerException)
+            : this(message, grammarDecisionDescription, decisionNumber, stateNumber, input, 1, innerException)
+        {
+        }
+
+        public NoViableAltException(string message, string grammarDecisionDescription, int decisionNumber, int stateNumber, IIntStream input, int k, Exception innerException)
+            : base(message, input, k, innerException)
{
this._grammarDecisionDescription = grammarDecisionDescription;
this._decisionNumber = decisionNumber;
diff --git a/runtime/CSharp3/Sources/Antlr3.Runtime/RecognitionException.cs b/runtime/CSharp3/Sources/Antlr3.Runtime/RecognitionException.cs
index f0c5662..861769f 100644
--- a/runtime/CSharp3/Sources/Antlr3.Runtime/RecognitionException.cs
+++ b/runtime/CSharp3/Sources/Antlr3.Runtime/RecognitionException.cs
@@ -1,10 +1,10 @@
/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -78,6 +78,11 @@ namespace Antlr.Runtime
/** <summary>What input stream did the error occur in?</summary> */
private IIntStream _input;

+        /// <summary>
+        /// What was the lookahead index when this exception was thrown?
+        /// </summary>
+        private int _k;
+
/** <summary>What is index of token/char were we looking at when the error occurred?</summary> */
private int _index;

@@ -127,8 +132,13 @@ namespace Antlr.Runtime
{
}

-        public RecognitionException( IIntStream input )
-            : this("A recognition error occurred.", input, null)
+        public RecognitionException(IIntStream input)
+            : this("A recognition error occurred.", input, 1, null)
+        {
+        }
+
+        public RecognitionException(IIntStream input, int k)
+            : this("A recognition error occurred.", input, k, null)
{
}

@@ -138,7 +148,12 @@ namespace Antlr.Runtime
}

public RecognitionException(string message, IIntStream input)
-            : this(message, input, null)
+            : this(message, input, 1, null)
+        {
+        }
+
+        public RecognitionException(string message, IIntStream input, int k)
+            : this(message, input, k, null)
{
}

@@ -148,15 +163,21 @@ namespace Antlr.Runtime
}

public RecognitionException(string message, IIntStream input, Exception innerException)
+            : this(message, input, 1, innerException)
+        {
+        }
+
+        public RecognitionException(string message, IIntStream input, int k, Exception innerException)
: base(message, innerException)
{
this._input = input;
+            this._k = k;
if (input != null)
{
-                this._index = input.Index;
+                this._index = input.Index + k - 1;
if (input is ITokenStream)
{
-                    this._token = ((ITokenStream)input).LT(1);
+                    this._token = ((ITokenStream)input).LT(k);
this._line = _token.Line;
this._charPositionInLine = _token.CharPositionInLine;
}
@@ -164,20 +185,31 @@ namespace Antlr.Runtime
ITreeNodeStream tns = input as ITreeNodeStream;
if (tns != null)
{
-                    ExtractInformationFromTreeNodeStream(tns);
+                    ExtractInformationFromTreeNodeStream(tns, k);
}
else
{
ICharStream charStream = input as ICharStream;
if (charStream != null)
{
-                        this._c = input.LA(1);
-                        this._line = ((ICharStream)input).Line;
-                        this._charPositionInLine = ((ICharStream)input).CharPositionInLine;
+                        int mark = input.Mark();
+                        try
+                        {
+                            for (int i = 0; i < k - 1; i++)
+                                input.Consume();
+
+                            this._c = input.LA(1);
+                            this._line = ((ICharStream)input).Line;
+                            this._charPositionInLine = ((ICharStream)input).CharPositionInLine;
+                        }
+                        finally
+                        {
+                            input.Rewind(mark);
+                        }
}
else
{
-                        this._c = input.LA(1);
+                        this._c = input.LA(k);
}
}
}
@@ -241,6 +273,14 @@ namespace Antlr.Runtime
}
}

+        public int Lookahead
+        {
+            get
+            {
+                return _k;
+            }
+        }
+
public IToken Token
{
get
@@ -400,5 +440,21 @@ namespace Antlr.Runtime
}
}
}
+
+        protected virtual void ExtractInformationFromTreeNodeStream(ITreeNodeStream input, int k)
+        {
+            int mark = input.Mark();
+            try
+            {
+                for (int i = 0; i < k - 1; i++)
+                    input.Consume();
+
+                ExtractInformationFromTreeNodeStream(input);
+            }
+            finally
+            {
+                input.Rewind(mark);
+            }
+        }
}
}
diff --git a/tool/src/main/resources/org/antlr/codegen/templates/CSharp2/CSharp2.stg b/tool/src/main/resources/org/antlr/codegen/templates/CSharp2/CSharp2.stg
index 8e5d603..50d190d 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/CSharp2/CSharp2.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/CSharp2/CSharp2.stg
@@ -1140,7 +1140,7 @@ else
alt<decisionNumber> = <eotPredictsAlt>;
<else>
<ruleBacktrackFailure()>
-	NoViableAltException nvae = new NoViableAltException("<description>", <decisionNumber>, <stateNumber>, input);
+	NoViableAltException nvae = new NoViableAltException("<description>", <decisionNumber>, <stateNumber>, input, <k>);
DebugRecognitionException(nvae);
<@noViableAltException()>
throw nvae;
@@ -1209,7 +1209,7 @@ default:
<else>
{
<ruleBacktrackFailure()>
-		NoViableAltException nvae = new NoViableAltException("<description>", <decisionNumber>, <stateNumber>, input);
+		NoViableAltException nvae = new NoViableAltException("<description>", <decisionNumber>, <stateNumber>, input, <k>);
DebugRecognitionException(nvae);
<@noViableAltException()>
throw nvae;
diff --git a/tool/src/main/resources/org/antlr/codegen/templates/CSharp3/CSharp3.stg b/tool/src/main/resources/org/antlr/codegen/templates/CSharp3/CSharp3.stg
index 29c8fae..6ab1f1a 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/CSharp3/CSharp3.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/CSharp3/CSharp3.stg
@@ -1119,7 +1119,7 @@ else
alt<decisionNumber> = <eotPredictsAlt>;
<else>
<ruleBacktrackFailure()>
-	NoViableAltException nvae = new NoViableAltException("<description>", <decisionNumber>, <stateNumber>, input);
+	NoViableAltException nvae = new NoViableAltException("<description>", <decisionNumber>, <stateNumber>, input, <k>);
DebugRecognitionException(nvae);
<@noViableAltException()>
throw nvae;
@@ -1188,7 +1188,7 @@ default:
<else>
{
<ruleBacktrackFailure()>
-		NoViableAltException nvae = new NoViableAltException("<description>", <decisionNumber>, <stateNumber>, input);
+		NoViableAltException nvae = new NoViableAltException("<description>", <decisionNumber>, <stateNumber>, input, <k>);
DebugRecognitionException(nvae);
<@noViableAltException()>
throw nvae;

