commit 37c557ffb82978c000da76cb24de8b3fea781a03
Author:     parrt <parrt@antlr.org>
AuthorDate: Thu Apr 14 15:01:33 2011 -0800
Commit:     parrt <parrt@antlr.org>
CommitDate: Thu Apr 14 15:01:33 2011 -0800

mod Ruby for STv4 upgrade

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8233]

diff --git a/tool/src/main/resources/org/antlr/codegen/templates/Ruby/AST.stg b/tool/src/main/resources/org/antlr/codegen/templates/Ruby/AST.stg
index b798077..21c2a9b 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/Ruby/AST.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/Ruby/AST.stg
@@ -1,5 +1,3 @@
-group AST;
-
@parserBody.mixins() ::= <<
<@super.mixins()>
include ANTLR3::ASTBuilder
@@ -23,11 +21,11 @@ root_0 = nil<\n>
ruleLabelDefs() ::= <<
<super.ruleLabelDefs()>
<[ruleDescriptor.tokenLabels,ruleDescriptor.wildcardTreeLabels,ruleDescriptor.wildcardTreeListLabels,ruleDescriptor.tokenListLabels]
-    :{tree_for_<it.label.text> = nil}; separator="\n">
+    :{int |tree_for_<it.label.text> = nil}; separator="\n">
<ruleDescriptor.allTokenRefsInAltsWithRewrites
-    :{stream_<it> = ANTLR3::AST::RewriteRule<rewriteElementType>Stream.new( @adaptor, "token <it>" )}; separator="\n">
+    :{int |stream_<it> = ANTLR3::AST::RewriteRule<rewriteElementType>Stream.new( @adaptor, "token <it>" )}; separator="\n">
<ruleDescriptor.allRuleRefsInAltsWithRewrites
-    :{stream_<it> = ANTLR3::AST::RewriteRuleSubtreeStream.new( @adaptor, "rule <it>" )}; separator="\n">
+    :{int |stream_<it> = ANTLR3::AST::RewriteRuleSubtreeStream.new( @adaptor, "rule <it>" )}; separator="\n">
>>

alt(elements,altNum,description,autoAST,outerAlt,treeLevel,rew) ::= <<
@@ -129,22 +127,22 @@ root_0 = @adaptor.create_flat_list

rewriteCodeLabels() ::= <<
<referencedTokenLabels:
-{stream_<it> = <rewriteElementType; format="snakecase">_stream( "token <it>", <it; format="label"> )};
+{it | stream_<it> = <rewriteElementType; format="snakecase">_stream( "token <it>", <it; format="label"> )};
separator="\n">
<referencedTokenListLabels:
-{stream_<it> = <rewriteElementType; format="snakecase">_stream( "token <it>", list_of_<it; format="label"> )};
+{it | stream_<it> = <rewriteElementType; format="snakecase">_stream( "token <it>", list_of_<it; format="label"> )};
separator="\n">
<referencedWildcardLabels:
-{stream_<it> = subtree_stream( "wildcard <it>", <it; format="label"> )};
+{it | stream_<it> = subtree_stream( "wildcard <it>", <it; format="label"> )};
separator="\n">
<referencedWildcardListLabels:
-{stream_<it> = subtree_stream( "wildcard <it>", list_of_<it; format="label"> )};
+{it | stream_<it> = subtree_stream( "wildcard <it>", list_of_<it; format="label"> )};
separator="\n">
<referencedRuleLabels:
-{stream_<it> = <it; format="label"> ? subtree_stream( "rule <it>", <it; format="label">.tree ) : subtree_stream( "token <it>" )};
+{it | stream_<it> = <it; format="label"> ? subtree_stream( "rule <it>", <it; format="label">.tree ) : subtree_stream( "token <it>" )};
separator="\n">
<referencedRuleListLabels:
-{stream_<it> = subtree_stream( "token <it>", list_of_<it; format="label"> )};
+{it | stream_<it> = subtree_stream( "token <it>", list_of_<it; format="label"> )};
separator="\n">
>>

diff --git a/tool/src/main/resources/org/antlr/codegen/templates/Ruby/ASTDbg.stg b/tool/src/main/resources/org/antlr/codegen/templates/Ruby/ASTDbg.stg
index f5674cf..a9309b8 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/Ruby/ASTDbg.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/Ruby/ASTDbg.stg
@@ -1,5 +1,3 @@
-group ASTDbg;
-
@parserBody.additionalMembers() ::= <<
def self.return_scope_members
super.push( :tree )
diff --git a/tool/src/main/resources/org/antlr/codegen/templates/Ruby/ASTParser.stg b/tool/src/main/resources/org/antlr/codegen/templates/Ruby/ASTParser.stg
index 81d33cd..a79788f 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/Ruby/ASTParser.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/Ruby/ASTParser.stg
@@ -1,4 +1,3 @@
-group ASTParser;
gatedAction(block) ::= <<
<if(backtracking)>
if <actions.(actionScope).synpredgate>
@@ -21,7 +20,7 @@ tree_for_<label> = <createNodeFromToken(...)>
})>
>>

-tokenRefBang(token,label,elementIndex) ::= "<super.tokenRef(...)>"
+tokenRefBang(token,label,elementIndex,terminalOptions) ::= "<super.tokenRef(...)>"

tokenRefRuleRoot(token,label,elementIndex,terminalOptions) ::= <<
<super.tokenRef(...)>
@@ -47,7 +46,7 @@ tokenRefRuleRootAndListLabel(token,label,terminalOptions,elementIndex) ::= <<
>>

matchSet(s,label,terminalOptions,elementIndex,postmatchCode) ::= <<
-<super.matchSet(..., postmatchCode={<gatedAction({@adaptor.add_child( root_0, <createNodeFromToken(...)> )})>})>
+<super.matchSet(postmatchCode={<gatedAction({@adaptor.add_child( root_0, <createNodeFromToken(...)> )})>}, ...)>
>>

matchRuleBlockSet(s,label,terminalOptions,elementIndex,postmatchCode,treeLevel="0") ::= <<
@@ -61,7 +60,7 @@ matchSetRuleRoot(s,label,terminalOptions,elementIndex,debug) ::= <<
<if(label)>
<label; format="label"> = @input.look<\n>
<endif>
-<super.matchSet(..., postmatchCode={<gatedAction({root_0 = @adaptor.become_root( <createNodeFromToken(...)>, root_0 )})>})>
+<super.matchSet(postmatchCode={<gatedAction({root_0 = @adaptor.become_root( <createNodeFromToken(...)>, root_0 )})>}, ...)>
>>
matchSetRuleRootAndListLabel(s,label,terminalOptions,elementIndex,debug) ::= <<
<matchSetRuleRoot(...)>
@@ -107,7 +106,7 @@ ruleRefRuleRootAndListLabel(rule,label,elementIndex,args,scope) ::= <<
<addToList(elem={<label; format="label">.tree},...)>
>>

-wildcard(label,elementIndex) ::= <<
+wildcard(token,label,elementIndex,terminalOptions) ::= <<
<super.wildcard(...)>
<gatedAction({
tree_for_<label> = @adaptor.create_with_payload( <label; format="label"> )
@@ -115,9 +114,9 @@ tree_for_<label> = @adaptor.create_with_payload( <label; format="label"> )
})>
>>

-wildcardBang(label,elementIndex) ::= "<super.wildcard(...)>"
+wildcardBang(token,label,elementIndex,terminalOptions) ::= "<super.wildcard(...)>"

-wildcardRuleRoot(label,elementIndex) ::= <<
+wildcardRuleRoot(token,label,elementIndex,terminalOptions) ::= <<
<super.wildcard(...)>
<gatedAction({
tree_for_<label> = @adaptor.create_with_payload( <label; format="label"> )
diff --git a/tool/src/main/resources/org/antlr/codegen/templates/Ruby/ASTTreeParser.stg b/tool/src/main/resources/org/antlr/codegen/templates/Ruby/ASTTreeParser.stg
index e05456b..70938cd 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/Ruby/ASTTreeParser.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/Ruby/ASTTreeParser.stg
@@ -1,4 +1,3 @@
-group ASTTreeParser;
gatedAction(block) ::= <<
<if(backtracking)>
if <actions.(actionScope).synpredgate>
@@ -61,7 +60,7 @@ _last = _save_last_<treeLevel>

>>

-tokenRefBang(token,label,elementIndex) ::= <<
+tokenRefBang(token,label,elementIndex,terminalOptions) ::= <<
_last = @input.look
<super.tokenRef(...)>
>>
@@ -129,7 +128,7 @@ _first_<treeLevel> and _first_<treeLevel> = <label; format="label">

matchSet(s,label,terminalOptions,elementIndex,postmatchCode) ::= <<
_last = @input.look
-<super.matchSet(..., postmatchCode={
+<super.matchSet(postmatchCode={
<if(!rewriteMode)>
<gatedAction({
<if(terminalOptions.node)>
@@ -140,25 +139,25 @@ tree_for_<label> = @adaptor.copy_node( <label; format="label"> )
@adaptor.add_child( root_<treeLevel>, tree_for_<label> )
})>
<endif>
-})>
+}, ...)>
>>



matchRuleBlockSet(s,label,terminalOptions,elementIndex,postmatchCode,treeLevel="0") ::= <<
<matchSet(...)>
-<noRewrite()>
+<noRewrite(...)>
>>



-matchSetBang(s,label,elementIndex,postmatchCode) ::= <<
+matchSetBang(s,label,terminalOptions,elementIndex,postmatchCode) ::= <<
_last = @input.look
<super.matchSet(...)>
>>

matchSetRuleRoot(s,label,terminalOptions,elementIndex,debug) ::= <<
-<super.matchSet(..., postmatchCode={
+<super.matchSet(postmatchCode={
<if(!rewriteMode)>
<gatedAction({
<if(terminalOptions.node)>
@@ -169,7 +168,7 @@ tree_for_<label> = @adaptor.copy_node( <label; format="label"> )
root_<treeLevel> = @adaptor.become_root( tree_for_<label>, root_<treeLevel> )
})>
<endif>
-})>
+}, ...)>
>>

ruleRef(rule,label,elementIndex,args,scope) ::= <<
diff --git a/tool/src/main/resources/org/antlr/codegen/templates/Ruby/Dbg.stg b/tool/src/main/resources/org/antlr/codegen/templates/Ruby/Dbg.stg
index d3b2590..6d90fb2 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/Ruby/Dbg.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/Ruby/Dbg.stg
@@ -143,12 +143,12 @@ end
>>


-@altSwitchCase.prealt() ::= "<enterAlt(n=i)>"
+@altSwitchCase.prealt() ::= "<enterAlt(altNum)>"  // altNum is arg of altSwitchCase


-element() ::= <<
-@debug_listener.location(<it.line>, <it.pos>)
-<super.element()>
+element(e) ::= <<
+@debug_listener.location(<e.line>, <e.pos>) // e is arg of element
+<super.element(e)>
>>


diff --git a/tool/src/main/resources/org/antlr/codegen/templates/Ruby/ST.stg b/tool/src/main/resources/org/antlr/codegen/templates/Ruby/ST.stg
index b39ca53..5fe366b 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/Ruby/ST.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/Ruby/ST.stg
@@ -1,5 +1,3 @@
-group ST;
-
@parserBody.mixins() ::= <<
<@super.mixins()>
<if(rewriteMode)>

