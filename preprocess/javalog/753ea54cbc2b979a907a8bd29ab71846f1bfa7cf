commit 753ea54cbc2b979a907a8bd29ab71846f1bfa7cf
Author:     Martin Traverso <martint@fb.com>
AuthorDate: Sat May 26 20:32:08 2012 -0700
Commit:     Martin Traverso <martint@fb.com>
CommitDate: Sat Sep 15 15:49:19 2012 -0700

LT(-1) was not being tracked properly when using seek/rewind

prevElement now only tracks the token that has fallen off the edge of the buffer in case
we need to rewind to the first element. For all other positions, we calculate LT(-1) based
on the current value of p.

diff --git a/runtime/Java/src/main/java/org/antlr/runtime/misc/LookaheadStream.java b/runtime/Java/src/main/java/org/antlr/runtime/misc/LookaheadStream.java
index 0d303c7..205d125 100644
--- a/runtime/Java/src/main/java/org/antlr/runtime/misc/LookaheadStream.java
+++ b/runtime/Java/src/main/java/org/antlr/runtime/misc/LookaheadStream.java
@@ -79,6 +79,7 @@ public abstract class LookaheadStream<T> extends FastQueue<T> {
p++;
// have we hit end of buffer and not backtracking?
if ( p == data.size() && markDepth==0 ) {
+          prevElement = o;
// if so, it's an opportunity to start filling at index 0 again
clear(); // size goes to 0, but retains memory
}
@@ -88,7 +89,7 @@ public abstract class LookaheadStream<T> extends FastQueue<T> {
/** Make sure we have at least one element to remove, even if EOF */
public void consume() {
syncAhead(1);
-        prevElement = remove();
+        remove();
currentElementIndex++;
}

@@ -168,8 +169,13 @@ public abstract class LookaheadStream<T> extends FastQueue<T> {
currentElementIndex = index;
}

-    protected T LB(int k) {
-        if ( k==1 ) return prevElement;
-        throw new NoSuchElementException("can't look backwards more than one token in this stream");
+  protected T LB(int k) {
+    if (p - k == -1) {
+      return prevElement;
}
+    else if (p > 0) {
+      return elementAt(-1);
+    }
+    throw new NoSuchElementException("can't look backwards past the beginning of this stream's buffer");
+  }
}
\ No newline at end of file
diff --git a/runtime/Java/src/test/java/org/antlr/runtime/TestLookaheadStream.java b/runtime/Java/src/test/java/org/antlr/runtime/TestLookaheadStream.java
index 8891ace..13c8add 100644
--- a/runtime/Java/src/test/java/org/antlr/runtime/TestLookaheadStream.java
+++ b/runtime/Java/src/test/java/org/antlr/runtime/TestLookaheadStream.java
@@ -8,18 +8,22 @@ public class TestLookaheadStream extends TestCase {
UnbufferedTokenStream stream = new UnbufferedTokenStream(createTokenSource());

stream.consume();
+    assertEquals(0, stream.LA(-1));
assertEquals(1, stream.LA(1));

stream.mark();

stream.consume();
+    assertEquals(1, stream.LA(-1));
assertEquals(2, stream.LA(1));

int index = stream.index();
stream.rewind();
+    assertEquals(0, stream.LA(-1));
assertEquals(1, stream.LA(1));

stream.seek(index);
+    assertEquals(1, stream.LA(-1));
assertEquals(2, stream.LA(1));
}


