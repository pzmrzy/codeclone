commit df4d1c62b2c8a41106c51af5a163d22d44f17f2f
Author:     acondit <acondit@parrt.spork>
AuthorDate: Thu May 12 18:14:53 2011 -0800
Commit:     acondit <acondit@parrt.spork>
CommitDate: Thu May 12 18:14:53 2011 -0800

More work on ANTLR3.4 revision and XCode4 LLVM2.0 compiler

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8468]

diff --git a/runtime/ObjC/Framework/ACBTree.m b/runtime/ObjC/Framework/ACBTree.m
index 5827bec..99c0cda 100644
--- a/runtime/ObjC/Framework/ACBTree.m
+++ b/runtime/ObjC/Framework/ACBTree.m
@@ -712,6 +712,9 @@ ACBTree *t;

- (void)dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ACBTree" );
+#endif
[super dealloc];
}

diff --git a/runtime/ObjC/Framework/AMutableArray.m b/runtime/ObjC/Framework/AMutableArray.m
index 557e2f6..c392f0e 100644
--- a/runtime/ObjC/Framework/AMutableArray.m
+++ b/runtime/ObjC/Framework/AMutableArray.m
@@ -8,7 +8,7 @@
#import "AMutableArray.h"
#import "ArrayIterator.h"

-#define BUFFSIZE 101
+#define BUFFSIZE 25

@implementation AMutableArray

@@ -32,8 +32,8 @@
{
self=[super init];
if ( self != nil ) {
-        BuffSize  = BUFFSIZE;
-        buffer = [[NSMutableData dataWithLength:(NSUInteger)BuffSize * sizeof(id)] retain];
+        BuffSize = BUFFSIZE;
+        buffer = [[NSMutableData dataWithLength:(BuffSize * sizeof(id))] retain];
ptrBuffer = (id *)[buffer mutableBytes];
for( int idx = 0; idx < BuffSize; idx++ ) {
ptrBuffer[idx] = nil;
@@ -46,8 +46,8 @@
{
self=[super init];
if ( self != nil ) {
-        BuffSize  = ((len>=25)?len:25);
-        buffer = [[NSMutableData dataWithLength:(NSUInteger)BuffSize * sizeof(id)] retain];
+        BuffSize = (len >= BUFFSIZE) ? len : BUFFSIZE;
+        buffer = [[NSMutableData dataWithLength:(BuffSize * sizeof(id))] retain];
ptrBuffer = (id *)[buffer mutableBytes];
for( int idx = 0; idx < BuffSize; idx++ ) {
ptrBuffer[idx] = nil;
@@ -56,6 +56,16 @@
return self;
}

+- (void) dealloc
+{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in AMutableArray" );
+#endif
+    if ( count ) [self removeAllObjects];
+    if ( buffer ) [buffer release];
+    [super dealloc];
+}
+
- (id) copyWithZone:(NSZone *)aZone
{
AMutableArray *copy;
@@ -284,11 +294,4 @@
}
}

-- (void) dealloc
-{
-    if ( count ) [self removeAllObjects];
-    if ( buffer ) [buffer release];
-    [super dealloc];
-}
-
@end
diff --git a/runtime/ObjC/Framework/AMutableDictionary.h b/runtime/ObjC/Framework/AMutableDictionary.h
index 5bc8e46..d47209e 100644
--- a/runtime/ObjC/Framework/AMutableDictionary.h
+++ b/runtime/ObjC/Framework/AMutableDictionary.h
@@ -37,6 +37,7 @@

- (id) init;
- (id) initWithCapacity:(NSUInteger)numItems;
+- (void) dealloc;

- (BOOL) isEqual:(id)object;
- (id) objectForKey:(id)aKey;
diff --git a/runtime/ObjC/Framework/AMutableDictionary.m b/runtime/ObjC/Framework/AMutableDictionary.m
index 952264e..75b2b11 100644
--- a/runtime/ObjC/Framework/AMutableDictionary.m
+++ b/runtime/ObjC/Framework/AMutableDictionary.m
@@ -76,8 +76,11 @@
return self;
}

-- (void)dealloc
+- (void) dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in AMutableDictionary" );
+#endif
if ( root ) [root release];
[super dealloc];
}
diff --git a/runtime/ObjC/Framework/ANTLRBaseRecognizer.h b/runtime/ObjC/Framework/ANTLRBaseRecognizer.h
index 9bd69f2..346a857 100644
--- a/runtime/ObjC/Framework/ANTLRBaseRecognizer.h
+++ b/runtime/ObjC/Framework/ANTLRBaseRecognizer.h
@@ -97,7 +97,7 @@
*
*  This is ignored for lexers.
*/
-- (id) getInput;
+- (id) input;

- (void)skip;

diff --git a/runtime/ObjC/Framework/ANTLRBaseRecognizer.m b/runtime/ObjC/Framework/ANTLRBaseRecognizer.m
index d88f297..e57a776 100644
--- a/runtime/ObjC/Framework/ANTLRBaseRecognizer.m
+++ b/runtime/ObjC/Framework/ANTLRBaseRecognizer.m
@@ -147,8 +147,11 @@ static NSString *NEXT_TOKEN_RULE_NAME;
return self;
}

-- (void) dealloc
+- (void)dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRBaseRecognizer" );
+#endif
[state release];
[super dealloc];
}
@@ -200,7 +203,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
}
}

-- (id)getInput
+- (id)input
{
return nil; // Must be overriden in inheriting class
}
@@ -447,7 +450,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
s = @"<EOF>";
}
else {
-            s = [NSString stringWithFormat:@"<%@>", [t getType]];
+            s = [NSString stringWithFormat:@"<%@>", t.type];
}
}
s = [s stringByReplacingOccurrencesOfString:@"\n" withString:@"\\\\n"];
@@ -1092,8 +1095,8 @@ static NSString *NEXT_TOKEN_RULE_NAME;
id<ANTLRIntStream> input;

state.backtracking++;
-    // input = [((ANTLRCommonToken*)state.token) getInput];
-    input = [self getInput];
+    // input = state.token.input;
+    input = self.input;
int start = [input mark];
@try {
[self performSelector:synpredFragment];
diff --git a/runtime/ObjC/Framework/ANTLRBaseStack.m b/runtime/ObjC/Framework/ANTLRBaseStack.m
index cd8b545..7bd2282 100644
--- a/runtime/ObjC/Framework/ANTLRBaseStack.m
+++ b/runtime/ObjC/Framework/ANTLRBaseStack.m
@@ -68,8 +68,11 @@
return( self );
}

--(void)dealloc
+- (void)dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRBaseStack" );
+#endif
[super dealloc];
}

diff --git a/runtime/ObjC/Framework/ANTLRBaseTree.h b/runtime/ObjC/Framework/ANTLRBaseTree.h
index 57fa400..68fddaf 100755
--- a/runtime/ObjC/Framework/ANTLRBaseTree.h
+++ b/runtime/ObjC/Framework/ANTLRBaseTree.h
@@ -81,11 +81,11 @@
- (id) deepCopyWithZone:(NSZone *)aZone;

#pragma mark Tree Parser support
-- (NSInteger) getType;
-- (NSString *) text;
+- (NSInteger)type;
+- (NSString *)text;
// In case we don't have a token payload, what is the line for errors?
-- (NSUInteger) line;
-- (NSUInteger) charPositionInLine;
+- (NSUInteger)line;
+- (NSUInteger)charPositionInLine;


#pragma mark Informational
@@ -157,12 +157,12 @@
- (id) deepCopyWithZone:(NSZone *)aZone;

// Return a token type; needed for tree parsing
-- (NSInteger) getType;
-- (NSString *) text;
+- (NSInteger)type;
+- (NSString *)text;

// In case we don't have a token payload, what is the line for errors?
-- (NSUInteger) line;
-- (NSUInteger) charPositionInLine;
+- (NSUInteger)line;
+- (NSUInteger)charPositionInLine;
- (void) setCharPositionInLine:(NSUInteger)pos;

- (NSString *) treeDescription;
@@ -183,6 +183,7 @@
@interface ANTLRTreeNavigationNodeDown : ANTLRTreeNavigationNode {
}
+ (ANTLRTreeNavigationNodeDown *) getNavigationNodeDown;
+- (id) init;
- (NSInteger) tokenType;
- (NSString *) description;
@end
@@ -190,6 +191,7 @@
@interface ANTLRTreeNavigationNodeUp : ANTLRTreeNavigationNode {
}
+ (ANTLRTreeNavigationNodeUp *) getNavigationNodeUp;
+- (id) init;
- (NSInteger) tokenType;
- (NSString *) description;
@end
@@ -197,6 +199,7 @@
@interface ANTLRTreeNavigationNodeEOF : ANTLRTreeNavigationNode {
}
+ (ANTLRTreeNavigationNodeEOF *) getNavigationNodeEOF;
+- (id) init;
- (NSInteger) tokenType;
- (NSString *) description;
@end
diff --git a/runtime/ObjC/Framework/ANTLRBaseTree.m b/runtime/ObjC/Framework/ANTLRBaseTree.m
index da44202..3a9c72b 100755
--- a/runtime/ObjC/Framework/ANTLRBaseTree.m
+++ b/runtime/ObjC/Framework/ANTLRBaseTree.m
@@ -124,11 +124,11 @@ static id<ANTLRBaseTree> invalidNode = nil;
children = anArray;
}

-- (id<ANTLRBaseTree>) getFirstChildWithType:(NSInteger) type
+- (id<ANTLRBaseTree>) getFirstChildWithType:(NSInteger) aType
{
for (NSUInteger i = 0; children != nil && i < [children count]; i++) {
id<ANTLRBaseTree> t = (id<ANTLRBaseTree>) [children objectAtIndex:i];
-        if ( [t getType] == type ) {
+        if ( t.type == aType ) {
return t;
}
}
@@ -412,7 +412,7 @@ static id<ANTLRBaseTree> invalidNode = nil;
id<ANTLRBaseTree> t = (id<ANTLRBaseTree>)self;
t = (id<ANTLRBaseTree>)[t getParent];
while ( t != nil ) {
-        if ( [t getType]==ttype )
+        if ( t.type == ttype )
return t;
t = (id<ANTLRBaseTree>)[t getParent];
}
@@ -436,22 +436,22 @@ static id<ANTLRBaseTree> invalidNode = nil;
return ancestors;
}

-- (NSInteger) getType
+- (NSInteger)type
{
return ANTLRTokenTypeInvalid;
}

-- (NSString *) text
+- (NSString *)text
{
return nil;
}

-- (NSUInteger) line
+- (NSUInteger)line
{
return 0;
}

-- (NSUInteger) charPositionInLine
+- (NSUInteger)charPositionInLine
{
return 0;
}
diff --git a/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.h b/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.h
index 40788af..f8ed0d2 100644
--- a/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.h
+++ b/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.h
@@ -121,7 +121,7 @@

- (id<ANTLRToken>)getToken:(ANTLRCommonTree *)t;

-- (NSString *)getText:(id<ANTLRBaseTree>)aTree;
+- (NSString *)getText:(ANTLRCommonTree *)aTree;

- (void) setText:(id<ANTLRBaseTree>)aTree Text:(NSString *)theText;

diff --git a/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.m b/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.m
index df64481..245261c 100644
--- a/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.m
+++ b/runtime/ObjC/Framework/ANTLRBaseTreeAdaptor.m
@@ -249,9 +249,9 @@
return t;
}

-- (NSInteger) getType:(id) t
+- (NSInteger) getType:(ANTLRCommonTree *) t
{
-    return [(id)t getType];
+    return t.type;
}

- (void) setType:(id)t Type:(NSInteger)type
@@ -271,9 +271,9 @@
return nil; // no idea what to do
}

-- (NSString *)getText:(id)t
+- (NSString *)getText:(ANTLRCommonTree *)t
{
-    return [(id)t text];
+    return t.text;
}

- (void) setText:(id)t Text:(NSString *)text
diff --git a/runtime/ObjC/Framework/ANTLRBitSet.m b/runtime/ObjC/Framework/ANTLRBitSet.m
index 00a0fb7..3f77e36 100644
--- a/runtime/ObjC/Framework/ANTLRBitSet.m
+++ b/runtime/ObjC/Framework/ANTLRBitSet.m
@@ -178,8 +178,11 @@
return self;
}

-- (void) dealloc
+- (void)dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRBitSet" );
+#endif
CFRelease(bitVector);
[super dealloc];
}
diff --git a/runtime/ObjC/Framework/ANTLRBufferedTokenStream.m b/runtime/ObjC/Framework/ANTLRBufferedTokenStream.m
index 4b71f91..0ca396c 100644
--- a/runtime/ObjC/Framework/ANTLRBufferedTokenStream.m
+++ b/runtime/ObjC/Framework/ANTLRBufferedTokenStream.m
@@ -89,7 +89,11 @@ extern NSInteger debug;

- (void)dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRBufferedTokenStream" );
+#endif
if ( tokens ) [tokens release];
+	[super dealloc];
}

- (NSUInteger)line
@@ -193,7 +197,7 @@ extern NSInteger debug;
[t setTokenIndex:[tokens count]];
if (debug > 1) NSLog(@"adding %@ at index %d\n", [t text], [tokens count]);
[tokens addObject:t];
-        if ( [t getType] == ANTLRTokenTypeEOF )
+        if ( t.type == ANTLRTokenTypeEOF )
break;
}
}
@@ -220,7 +224,7 @@ extern NSInteger debug;
stopIndex = [tokens count]-1;
for (NSInteger i = startIndex; i <= stopIndex; i++) {
id<ANTLRToken>t = [tokens objectAtIndex:i];
-        if ( [t getType] == ANTLRTokenTypeEOF )
+        if ( t.type == ANTLRTokenTypeEOF )
break;
[subset addObject:t];
}
@@ -229,7 +233,7 @@ extern NSInteger debug;

- (NSInteger) LA:(NSInteger)i
{
-    return [[self LT:i] getType];
+    return [[self LT:i] type];
}

- (id<ANTLRToken>) LB:(NSInteger)k
@@ -307,7 +311,7 @@ extern NSInteger debug;
AMutableArray *filteredTokens = [AMutableArray arrayWithCapacity:5];
for (NSInteger i = startIndex; i <= stopIndex; i++) {
id<ANTLRToken>t = [tokens objectAtIndex:i];
-        if ( types == nil || [types member:[t getType]] ) {
+        if ( types == nil || [types member:t.type] ) {
[filteredTokens addObject:t];
}
}
@@ -354,7 +358,7 @@ extern NSInteger debug;
NSMutableString *buf = [NSMutableString stringWithCapacity:5];
for (NSInteger i = startIdx; i <= stopIdx; i++) {
id<ANTLRToken>t = [tokens objectAtIndex:i];
-        if ( [t getType] == ANTLRTokenTypeEOF )
+        if ( t.type == ANTLRTokenTypeEOF )
break;
[buf appendString:[t text]];
}
@@ -373,12 +377,12 @@ extern NSInteger debug;
- (void) fill
{
if ( index == -1 ) [self setup];
-    if ( [[tokens objectAtIndex:index] getType] == ANTLRTokenTypeEOF )
+    if ( [((ANTLRCommonToken *)[tokens objectAtIndex:index]) type] == ANTLRTokenTypeEOF )
return;

NSInteger i = index+1;
[self sync:i];
-    while ( [[tokens objectAtIndex:i] getType] != ANTLRTokenTypeEOF ) {
+    while ( [((ANTLRCommonToken *)[tokens objectAtIndex:i]) type] != ANTLRTokenTypeEOF ) {
i++;
[self sync:i];
}
diff --git a/runtime/ObjC/Framework/ANTLRCommonErrorNode.h b/runtime/ObjC/Framework/ANTLRCommonErrorNode.h
index 0f6d4ec..5060bd8 100644
--- a/runtime/ObjC/Framework/ANTLRCommonErrorNode.h
+++ b/runtime/ObjC/Framework/ANTLRCommonErrorNode.h
@@ -54,11 +54,9 @@ ANTLRRecognitionException *trappedException;
Exception:(ANTLRRecognitionException *) e;
- (BOOL) isNil;

-- (NSInteger) getType;
-
-- (NSString *) text;
-
-- (NSString *) toString;
+- (NSInteger)type;
+- (NSString *)text;
+- (NSString *)toString;

@property (retain) id<ANTLRIntStream> input;
@property (retain) id<ANTLRToken> startToken;
diff --git a/runtime/ObjC/Framework/ANTLRCommonErrorNode.m b/runtime/ObjC/Framework/ANTLRCommonErrorNode.m
index e0035ef..ffaaa00 100644
--- a/runtime/ObjC/Framework/ANTLRCommonErrorNode.m
+++ b/runtime/ObjC/Framework/ANTLRCommonErrorNode.m
@@ -59,8 +59,8 @@
if ((self = [super init]) != nil ) {
//System.out.println("aStartToken: "+aStartToken+", aStopToken: "+aStopToken);
if ( aStopToken == nil ||
-        ([ aStopToken getTokenIndex] < [aStartToken getTokenIndex] &&
-         [aStopToken getType] != ANTLRTokenTypeEOF) )
+        ([aStopToken getTokenIndex] < [aStartToken getTokenIndex] &&
+         aStopToken.type != ANTLRTokenTypeEOF) )
{
// sometimes resync does not consume a token (when LT(1) is
// in follow set.  So, aStopToken will be 1 to left to aStartToken. adjust.
@@ -81,7 +81,7 @@
return NO;
}

-- (NSInteger) getType
+- (NSInteger)type
{
return ANTLRTokenTypeInvalid;
}
@@ -92,7 +92,7 @@
if ( [startToken isKindOfClass:[self class]] ) {
int i = [(id<ANTLRToken>)startToken getTokenIndex];
int j = [(id<ANTLRToken>)stopToken getTokenIndex];
-        if ( [(id<ANTLRToken>)stopToken getType] == ANTLRTokenTypeEOF ) {
+        if ( stopToken.type == ANTLRTokenTypeEOF ) {
j = [(id<ANTLRTokenStream>)input size];
}
badText = [(id<ANTLRTokenStream>)input toStringFromStart:i ToEnd:j];
diff --git a/runtime/ObjC/Framework/ANTLRCommonToken.h b/runtime/ObjC/Framework/ANTLRCommonToken.h
index b37b26d..948e129 100644
--- a/runtime/ObjC/Framework/ANTLRCommonToken.h
+++ b/runtime/ObjC/Framework/ANTLRCommonToken.h
@@ -79,36 +79,36 @@
//----------------------------------------------------------
//  text
//----------------------------------------------------------
-- (NSString *) text;
-- (void) setText: (NSString *) aText;
+- (NSString *)text;
+- (void) setText:(NSString *)aText;

//----------------------------------------------------------
//  type
//----------------------------------------------------------
-- (NSInteger) getType;
-- (void) setType: (NSInteger) aType;
+- (NSInteger)type;
+- (void) setType:(NSInteger)aType;

//----------------------------------------------------------
//  channel
//----------------------------------------------------------
-- (NSUInteger) getChannel;
-- (void) setChannel: (NSUInteger) aChannel;
+- (NSUInteger)channel;
+- (void) setChannel:(NSUInteger)aChannel;

//----------------------------------------------------------
//  input
//----------------------------------------------------------
-- (id<ANTLRCharStream>) getInput;
-- (void) setInput: (id<ANTLRCharStream>) anInput;
+- (id<ANTLRCharStream>)input;
+- (void) setInput:(id<ANTLRCharStream>)anInput;

-- (NSInteger) getStart;
-- (void) setStart: (NSInteger) aStart;
+- (NSInteger)getStart;
+- (void) setStart: (NSInteger)aStart;

-- (NSInteger) getStop;
+- (NSInteger)getStop;
- (void) setStop: (NSInteger) aStop;

// the index of this Token into the TokenStream
-- (NSInteger) getTokenIndex;
-- (void) setTokenIndex: (NSInteger) aTokenIndex;
+- (NSInteger)getTokenIndex;
+- (void) setTokenIndex:(NSInteger)aTokenIndex;

// conform to NSCopying
- (id) copyWithZone:(NSZone *)theZone;
diff --git a/runtime/ObjC/Framework/ANTLRCommonToken.m b/runtime/ObjC/Framework/ANTLRCommonToken.m
index 46a9754..1e50231 100644
--- a/runtime/ObjC/Framework/ANTLRCommonToken.m
+++ b/runtime/ObjC/Framework/ANTLRCommonToken.m
@@ -198,11 +198,14 @@ static ANTLRCommonToken *INVALID_TOKEN;
return self;
}

-- (void) dealloc
+- (void)dealloc
{
-    [self setInput:nil];
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRCommonToken" );
+#endif
+    input = nil;
[self setText:nil];
-    [super dealloc];
+	[super dealloc];
}

// create a copy, including the text if available
@@ -265,7 +268,7 @@ static ANTLRCommonToken *INVALID_TOKEN;
return [input substringWithRange:NSMakeRange(startIndex, (stopIndex-startIndex)+1)];
}

-- (void) setText: (NSString *) aText
+- (void) setText:(NSString *)aText
{
if (text != aText) {
if ( text ) [text release];
@@ -278,12 +281,12 @@ static ANTLRCommonToken *INVALID_TOKEN;
//----------------------------------------------------------
//  type
//----------------------------------------------------------
-- (NSInteger) getType
+- (NSInteger)type
{
return type;
}

-- (void) setType: (NSInteger) aType
+- (void) setType:(NSInteger)aType
{
type = aType;
}
@@ -291,12 +294,12 @@ static ANTLRCommonToken *INVALID_TOKEN;
//----------------------------------------------------------
//  channel
//----------------------------------------------------------
-- (NSUInteger) getChannel
+- (NSUInteger)channel
{
return channel;
}

-- (void) setChannel: (NSUInteger) aChannel
+- (void) setChannel:(NSUInteger)aChannel
{
channel = aChannel;
}
@@ -305,7 +308,7 @@ static ANTLRCommonToken *INVALID_TOKEN;
//----------------------------------------------------------
//  input
//----------------------------------------------------------
-- (id<ANTLRCharStream>) getInput
+- (id<ANTLRCharStream>) input
{
return input;
}
diff --git a/runtime/ObjC/Framework/ANTLRCommonTokenStream.h b/runtime/ObjC/Framework/ANTLRCommonTokenStream.h
index 3cffe13..c26130e 100644
--- a/runtime/ObjC/Framework/ANTLRCommonTokenStream.h
+++ b/runtime/ObjC/Framework/ANTLRCommonTokenStream.h
@@ -40,7 +40,7 @@
}

@property (retain, getter=getChannelOverride,setter=setChannelOverride:) AMutableDictionary *channelOverride;
-@property (assign, getter=getChannel,setter=setChannel:) NSUInteger channel;
+@property (assign, getter=channel,setter=setChannel:) NSUInteger channel;

+ (ANTLRCommonTokenStream *)newANTLRCommonTokenStream;
+ (ANTLRCommonTokenStream *)newANTLRCommonTokenStreamWithTokenSource:(id<ANTLRTokenSource>)theTokenSource;
@@ -65,10 +65,10 @@
// - (id<ANTLRTokenSource>) getTokenSource;
- (void) setTokenSource: (id<ANTLRTokenSource>) aTokenSource;

-- (NSUInteger)getChannel;
+- (NSUInteger)channel;
- (void)setChannel:(NSUInteger)aChannel;

-- (AMutableDictionary *)getChannelOverride;
+- (AMutableDictionary *)channelOverride;
- (void)setChannelOverride:(AMutableDictionary *)anOverride;

- (id) copyWithZone:(NSZone *)aZone;
diff --git a/runtime/ObjC/Framework/ANTLRCommonTokenStream.m b/runtime/ObjC/Framework/ANTLRCommonTokenStream.m
index 4e80fde..9ebc325 100644
--- a/runtime/ObjC/Framework/ANTLRCommonTokenStream.m
+++ b/runtime/ObjC/Framework/ANTLRCommonTokenStream.m
@@ -79,6 +79,9 @@

- (void) dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRCommonTokenStream" );
+#endif
if ( channelOverride ) [channelOverride release];
if ( tokens ) [tokens release];
[self setTokenSource:nil];
@@ -91,7 +94,7 @@
if (index == -1) [self setup];
index++;
[self sync:index];
-    while ( [[tokens objectAtIndex:index] getChannel] != channel ) {
+    while ( ((ANTLRCommonToken *)[tokens objectAtIndex:index]).channel != channel ) {
index++;
[self sync:index];
}
@@ -131,7 +134,7 @@
//	if ( i >= (NSInteger)[tokens count] ) {
//		return [ANTLRCommonToken eofToken];
//	}
-    if (i > range) range = i;
+    if ( i > range ) range = i;
return [tokens objectAtIndex:i];
}

@@ -140,7 +143,7 @@
- (NSInteger) skipOffChannelTokens:(NSInteger) idx
{
[self sync:idx];
-	while ( [[tokens objectAtIndex:idx] getChannel] != channel ) {
+	while ( ((ANTLRCommonToken *)[tokens objectAtIndex:idx]).channel != channel ) {
idx++;
[self sync:idx];
}
@@ -149,7 +152,7 @@

- (NSInteger) skipOffChannelTokensReverse:(NSInteger) i
{
-	while ( i >= 0 && [(id<ANTLRToken>)[tokens objectAtIndex:i] getChannel] != channel ) {
+	while ( i >= 0 && ((ANTLRCommonToken *)[tokens objectAtIndex:i]).channel != channel ) {
i--;
}
return i;
@@ -160,7 +163,7 @@
index = 0;
[self sync:0];
int i = 0;
-    while ( [((id<ANTLRToken>)[tokens objectAtIndex:i]) getChannel] != channel ) {
+    while ( ((ANTLRCommonToken *)[tokens objectAtIndex:i]).channel != channel ) {
i++;
[self sync:i];
}
@@ -173,10 +176,10 @@
NSInteger n = 0;
[self fill];
for( int i = 0; i < [tokens count]; i++ ) {
-        id<ANTLRToken> t = [tokens objectAtIndex:i];
-        if ( [t getChannel] == channel )
+        ANTLRCommonToken *t = [tokens objectAtIndex:i];
+        if ( t.channel == channel )
n++;
-        if ( [t getType] == ANTLRTokenTypeEOF )
+        if ( t.type == ANTLRTokenTypeEOF )
break;
}
return n;
@@ -201,7 +204,7 @@
return copy;
}

-- (NSUInteger)getChannel
+- (NSUInteger)channel
{
return channel;
}
@@ -211,7 +214,7 @@
channel = aChannel;
}

-- (AMutableDictionary *)getChannelOverride
+- (AMutableDictionary *)channelOverride
{
return channelOverride;
}
@@ -250,9 +253,8 @@
unsigned int i=0;
for (i = startIndex; i<=stopIndex; i++) {
id<ANTLRToken> token = [tokens objectAtIndex:i];
-		if (aBitSet == nil || [aBitSet member:[token getType]]) {
+		if (aBitSet == nil || [aBitSet member:token.type]) {
[filteredTokens addObject:token];
-            [token retain];
}
}
if ([filteredTokens count]) {
diff --git a/runtime/ObjC/Framework/ANTLRCommonTree.h b/runtime/ObjC/Framework/ANTLRCommonTree.h
index a4d1309..2becb76 100644
--- a/runtime/ObjC/Framework/ANTLRCommonTree.h
+++ b/runtime/ObjC/Framework/ANTLRCommonTree.h
@@ -56,11 +56,11 @@
- (ANTLRCommonToken *) getToken;
- (void) setToken:(ANTLRCommonToken *)aToken;
- (ANTLRCommonToken *) dupNode;
-- (NSInteger) getType;
-- (NSString *) text;
-- (NSUInteger) line;
+- (NSInteger)type;
+- (NSString *)text;
+- (NSUInteger)line;
- (void) setLine:(NSUInteger)aLine;
-- (NSUInteger) charPositionInLine;
+- (NSUInteger)charPositionInLine;
- (void) setCharPositionInLine:(NSUInteger)pos;
- (ANTLRCommonTree *) getParent;
- (void) setParent:(ANTLRCommonTree *) t;
diff --git a/runtime/ObjC/Framework/ANTLRCommonTree.m b/runtime/ObjC/Framework/ANTLRCommonTree.m
index 78ba090..9b825b8 100644
--- a/runtime/ObjC/Framework/ANTLRCommonTree.m
+++ b/runtime/ObjC/Framework/ANTLRCommonTree.m
@@ -181,21 +181,21 @@
return [ANTLRCommonTree newTreeWithTree:self ];
}

-- (NSInteger) getType
+- (NSInteger)type
{
if (token)
-		return [token getType];
+		return token.type;
return ANTLRTokenTypeInvalid;
}

-- (NSString *) text
+- (NSString *)text
{
if (token)
-		return [token text];
+		return token.text;
return nil;
}

-- (NSUInteger) line
+- (NSUInteger)line
{
if (token)
return token.line;
@@ -208,7 +208,7 @@
token.line = aLine;
}

-- (NSUInteger) charPositionInLine
+- (NSUInteger)charPositionInLine
{
if (token)
return token.charPositionInLine;
@@ -320,7 +320,7 @@
if ( [self isNil] ) {
return @"nil";
}
-    if ( [self getType] == ANTLRTokenTypeInvalid ) {
+    if ( [self type] == ANTLRTokenTypeInvalid ) {
return @"<errornode>";
}
if ( token==nil ) {
diff --git a/runtime/ObjC/Framework/ANTLRCommonTreeAdaptor.m b/runtime/ObjC/Framework/ANTLRCommonTreeAdaptor.m
index e1dd459..740a164 100644
--- a/runtime/ObjC/Framework/ANTLRCommonTreeAdaptor.m
+++ b/runtime/ObjC/Framework/ANTLRCommonTreeAdaptor.m
@@ -152,7 +152,7 @@
{
if ( t==nil )
return ANTLRTokenTypeInvalid;
-    return [(id<ANTLRBaseTree>) t getType];
+    return [(id<ANTLRBaseTree>) t type];
}

- (void) setType:(id<ANTLRBaseTree>)t Type:(NSInteger)tokenType
diff --git a/runtime/ObjC/Framework/ANTLRCommonTreeNodeStream.m b/runtime/ObjC/Framework/ANTLRCommonTreeNodeStream.m
index d75d0ab..3f5340d 100644
--- a/runtime/ObjC/Framework/ANTLRCommonTreeNodeStream.m
+++ b/runtime/ObjC/Framework/ANTLRCommonTreeNodeStream.m
@@ -30,6 +30,10 @@
#import "ANTLRCharStream.h"
#import "AMutableArray.h"

+#ifndef DEBUG_DEALLOC
+#define DEBUG_DEALLOC
+#endif
+
@implementation ANTLRCommonTreeNodeStream

@synthesize root;
@@ -50,6 +54,7 @@
- (id) initWithTree:(ANTLRCommonTree *)theTree
{
if ((self = [super init]) != nil ) {
+        navigationNodeEOF = [[adaptor createTree:ANTLRTokenTypeEOF Text:@"EOF"] retain]; // set EOF
root = theTree;
adaptor = [[ANTLRCommonTreeAdaptor newTreeAdaptor] retain];
it = [[ANTLRTreeIterator newANTRLTreeIteratorWithAdaptor:adaptor andTree:root] retain];
@@ -64,9 +69,9 @@
- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)anAdaptor Tree:(ANTLRCommonTree *)theTree
{
if ((self = [super init]) != nil ) {
-        [adaptor createTree:ANTLRTokenTypeEOF Text:@"EOF"]; // set EOF
-        root = theTree;
adaptor = [anAdaptor retain];
+        navigationNodeEOF = [[adaptor createTree:ANTLRTokenTypeEOF Text:@"EOF"] retain]; // set EOF
+        root = theTree;
//    it = [root objectEnumerator];
it = [[ANTLRTreeIterator newANTRLTreeIteratorWithAdaptor:adaptor andTree:root] retain];
calls = [[ANTLRIntArray newArrayWithLen:INITIAL_CALL_STACK_SIZE] retain];
@@ -78,6 +83,19 @@
return self;
}

+- (void)dealloc
+{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRCommonTreeNodeStream" );
+#endif
+    if ( root ) [root release];
+    if ( tokens ) [tokens release];
+    if ( adaptor ) [adaptor release];
+    if ( it ) [it release];
+    if ( calls ) [calls release];
+    [super dealloc];
+}
+
- (void) reset
{
[super reset];
diff --git a/runtime/ObjC/Framework/ANTLRDebugTokenStream.h b/runtime/ObjC/Framework/ANTLRDebugTokenStream.h
index 335b002..9f6c438 100644
--- a/runtime/ObjC/Framework/ANTLRDebugTokenStream.h
+++ b/runtime/ObjC/Framework/ANTLRDebugTokenStream.h
@@ -44,7 +44,7 @@
- (id<ANTLRDebugEventListener>) debugListener;
- (void) setDebugListener: (id<ANTLRDebugEventListener>) aDebugListener;

-- (id<ANTLRTokenStream>) getInput;
+- (id<ANTLRTokenStream>) input;
- (void) setInput:(id<ANTLRTokenStream>)aTokenStream;

- (void) consume;
diff --git a/runtime/ObjC/Framework/ANTLRDebugTokenStream.m b/runtime/ObjC/Framework/ANTLRDebugTokenStream.m
index ec6b059..8a294c9 100644
--- a/runtime/ObjC/Framework/ANTLRDebugTokenStream.m
+++ b/runtime/ObjC/Framework/ANTLRDebugTokenStream.m
@@ -36,7 +36,7 @@
if (self) {
[self setDebugListener:debugger];
[self setInput:theStream];
-		[[self getInput] LT:1];	// force reading first on-channel token
+		[self.input LT:1];	// force reading first on-channel token
initialStreamState = YES;
}
return self;
@@ -45,7 +45,7 @@
- (void) dealloc
{
[self setDebugListener:nil];
-    [self setInput:nil];
+    self.input = nil;
[super dealloc];
}

@@ -64,7 +64,7 @@
}
}

-- (id<ANTLRTokenStream>) getInput
+- (id<ANTLRTokenStream>) input
{
return input;
}
@@ -93,7 +93,7 @@
// forwarded to the actual token stream
- (void) forwardInvocation:(NSInvocation *)anInvocation
{
-	[anInvocation invokeWithTarget:[self getInput]];
+	[anInvocation invokeWithTarget:self.input];
}

- (void) consume
diff --git a/runtime/ObjC/Framework/ANTLRDebugTreeAdaptor.m b/runtime/ObjC/Framework/ANTLRDebugTreeAdaptor.m
index 7c413c1..01c4c6e 100644
--- a/runtime/ObjC/Framework/ANTLRDebugTreeAdaptor.m
+++ b/runtime/ObjC/Framework/ANTLRDebugTreeAdaptor.m
@@ -175,7 +175,7 @@
- (id<ANTLRBaseTree>) newANTLRTreeWithToken:(id<ANTLRToken>)fromToken text:(NSString *)tokenText
{
id<ANTLRBaseTree> newTree = [treeAdaptor newANTLRTreeWithToken:fromToken text:tokenText];
-	[debugListener createNode:[treeAdaptor uniqueIdForTree:newTree] text:tokenText type:[fromToken getType]];
+	[debugListener createNode:[treeAdaptor uniqueIdForTree:newTree] text:tokenText type:fromToken.type];
return newTree;
}

diff --git a/runtime/ObjC/Framework/ANTLRDebugTreeNodeStream.h b/runtime/ObjC/Framework/ANTLRDebugTreeNodeStream.h
index 70f9939..733f6fd 100644
--- a/runtime/ObjC/Framework/ANTLRDebugTreeNodeStream.h
+++ b/runtime/ObjC/Framework/ANTLRDebugTreeNodeStream.h
@@ -41,7 +41,7 @@
- (id<ANTLRDebugEventListener>) debugListener;
- (void) setDebugListener: (id<ANTLRDebugEventListener>) aDebugListener;

-- (id<ANTLRTreeNodeStream>) getInput;
+- (id<ANTLRTreeNodeStream>) input;
- (void) setInput: (id<ANTLRTreeNodeStream>) aTreeNodeStream;

- (id<ANTLRTreeAdaptor>) getTreeAdaptor;
diff --git a/runtime/ObjC/Framework/ANTLRDebugTreeNodeStream.m b/runtime/ObjC/Framework/ANTLRDebugTreeNodeStream.m
index 7fad04c..acf9cf8 100644
--- a/runtime/ObjC/Framework/ANTLRDebugTreeNodeStream.m
+++ b/runtime/ObjC/Framework/ANTLRDebugTreeNodeStream.m
@@ -44,7 +44,7 @@
{
[self setDebugListener: nil];
[self setTreeAdaptor: nil];
-    [self setInput: nil];
+    input = nil;
[super dealloc];
}

@@ -78,18 +78,18 @@
}


-- (id<ANTLRTreeNodeStream>) getInput
+- (id<ANTLRTreeNodeStream>) input
{
return input;
}

-- (void) setInput: (id<ANTLRTreeNodeStream>) aTreeNodeStream
+- (void) setInput:(id<ANTLRTreeNodeStream>) aTreeNodeStream
{
if (input != aTreeNodeStream) {
+        [input release];
[(id<ANTLRTreeNodeStream,NSObject>)aTreeNodeStream retain];
-        [(id<ANTLRTreeNodeStream,NSObject>)input release];
-        input = aTreeNodeStream;
}
+    input = aTreeNodeStream;
}


@@ -116,9 +116,9 @@
id node = [input LT:1];
[input consume];
unsigned hash = [treeAdaptor uniqueIdForTree:node];
-	NSString *text = [treeAdaptor textForNode:node];
-	int type = [treeAdaptor tokenTypeForNode:node];
-	[debugListener consumeNode:hash ofType:type text:text];
+	NSString *theText = [treeAdaptor textForNode:node];
+	int aType = [treeAdaptor tokenTypeForNode:node];
+	[debugListener consumeNode:hash ofType:aType text:theText];
}

- (NSInteger) LA:(NSUInteger) i
diff --git a/runtime/ObjC/Framework/ANTLRDoubleKeyMap.m b/runtime/ObjC/Framework/ANTLRDoubleKeyMap.m
index 7c850b7..3642ef0 100644
--- a/runtime/ObjC/Framework/ANTLRDoubleKeyMap.m
+++ b/runtime/ObjC/Framework/ANTLRDoubleKeyMap.m
@@ -88,7 +88,11 @@
return s;
}

-- (void) dealloc {
+- (void) dealloc
+{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRCommonToken" );
+#endif
[data release];
[super dealloc];
}
diff --git a/runtime/ObjC/Framework/ANTLRFailedPredicateException.m b/runtime/ObjC/Framework/ANTLRFailedPredicateException.m
index fadb5d1..caf7716 100644
--- a/runtime/ObjC/Framework/ANTLRFailedPredicateException.m
+++ b/runtime/ObjC/Framework/ANTLRFailedPredicateException.m
@@ -48,6 +48,9 @@

- (void) dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRFailedPredicateException" );
+#endif
[self setPredicate:nil];
[self setRuleName:nil];
[super dealloc];
diff --git a/runtime/ObjC/Framework/ANTLRFastQueue.h b/runtime/ObjC/Framework/ANTLRFastQueue.h
index b11c8c5..7de4f51 100644
--- a/runtime/ObjC/Framework/ANTLRFastQueue.h
+++ b/runtime/ObjC/Framework/ANTLRFastQueue.h
@@ -34,13 +34,11 @@

@interface ANTLRFastQueue : NSObject <NSCopying>
{
-//	NSAutoreleasePool *pool;
-	__strong AMutableArray *data;
-	NSUInteger p;
+    __strong AMutableArray *data;
+    NSUInteger p;
NSUInteger range;
}

-//@property (retain, getter=getPool, setter=setPool:) NSAutoreleasePool *pool;
@property (retain) AMutableArray *data;
@property (assign) NSUInteger p;
@property (assign) NSUInteger range;
@@ -62,7 +60,5 @@
- (void) clear;
- (NSString *) toString;
- (NSString *) description;
-//- (NSAutoreleasePool *) getPool;
-//- (void) setPool:(NSAutoreleasePool *)aPool;

@end
diff --git a/runtime/ObjC/Framework/ANTLRFastQueue.m b/runtime/ObjC/Framework/ANTLRFastQueue.m
index a04ec36..4fb5c9b 100644
--- a/runtime/ObjC/Framework/ANTLRFastQueue.m
+++ b/runtime/ObjC/Framework/ANTLRFastQueue.m
@@ -47,8 +47,8 @@

- (id) init
{
-	if ((self = [super init]) != nil ) {
-//		pool = [NSAutoreleasePool new];
+	self = [super init];
+	if ( self != nil ) {
data = [[AMutableArray arrayWithCapacity:100] retain];
p = 0;
range = -1;
@@ -58,7 +58,10 @@

- (void) dealloc
{
-//	[pool drain];
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRFastQueue" );
+#endif
+	if ( data ) [data release];
[super dealloc];
}

@@ -67,9 +70,9 @@
ANTLRFastQueue *copy;

copy = [[[self class] allocWithZone:aZone] init];
-//    copy.pool = pool;
copy.data = [data copyWithZone:nil];
copy.p = p;
+    copy.range = range;
return copy;
}

@@ -91,8 +94,7 @@
id o = [self objectAtIndex:0];
p++;
// check to see if we have hit the end of the buffer
-	if ( p == [data count] )
-	{
+	if ( p == [data count] ) {
// if we have, then we need to clear it out
[self clear];
}
@@ -101,7 +103,6 @@

- (void) addObject:(id) o
{
-	[o retain];
[data addObject:o];
}

diff --git a/runtime/ObjC/Framework/ANTLRHashMap.m b/runtime/ObjC/Framework/ANTLRHashMap.m
index 707415b..e56841b 100644
--- a/runtime/ObjC/Framework/ANTLRHashMap.m
+++ b/runtime/ObjC/Framework/ANTLRHashMap.m
@@ -98,6 +98,9 @@ static NSInteger itIndex;

-(void)dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRHashMap" );
+#endif
ANTLRMapElement *tmp, *rtmp;
NSInteger idx;

diff --git a/runtime/ObjC/Framework/ANTLRHashRule.m b/runtime/ObjC/Framework/ANTLRHashRule.m
index f0fd2ef..478abaf 100644
--- a/runtime/ObjC/Framework/ANTLRHashRule.m
+++ b/runtime/ObjC/Framework/ANTLRHashRule.m
@@ -69,6 +69,9 @@

-(void)dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRHashRule" );
+#endif
ANTLRRuleMemo *tmp, *rtmp;
int Index;

diff --git a/runtime/ObjC/Framework/ANTLRIntArray.h b/runtime/ObjC/Framework/ANTLRIntArray.h
index d1c872b..9182377 100644
--- a/runtime/ObjC/Framework/ANTLRIntArray.h
+++ b/runtime/ObjC/Framework/ANTLRIntArray.h
@@ -28,13 +28,17 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRPtrBuffer.h"

#define ANTLR_INT_ARRAY_INITIAL_SIZE 10

-@interface ANTLRIntArray : ANTLRPtrBuffer
+@interface ANTLRIntArray : NSObject
{
-    NSUInteger *ip;
+    NSUInteger BuffSize;
+    NSUInteger count;
+    NSInteger idx;
+    NSMutableData *buffer;
+    __strong NSInteger *intBuffer;
+    BOOL SPARSE;
}

+ (ANTLRIntArray *)newArray;
@@ -47,16 +51,24 @@

- (id) copyWithZone:(NSZone *)aZone;

-- (void) addInteger:(NSInteger) v;
-- (void) push:(NSInteger) v;
+- (void) addInteger:(NSInteger) value;
- (NSInteger) pop;
-- (NSInteger) integerAtIndex:(NSUInteger) i;
-- (void) insertInteger:(NSInteger)anInteger AtIndex:(NSUInteger) idx;
+- (void) push:(NSInteger) value;
+- (NSInteger) integerAtIndex:(NSUInteger) index;
+- (void) insertInteger:(NSInteger)anInteger AtIndex:(NSUInteger) anIndex;
+- (NSInteger)removeIntegerAtIndex:(NSUInteger) anIndex;
+- (void)replaceInteger:(NSInteger)aValue AtIndex:(NSUInteger)anIndex;
- (void) reset;

- (NSUInteger) count;
- (NSUInteger) size;
-- (void) ensureCapacity:(NSUInteger) index;
+- (void) ensureCapacity:(NSUInteger) anIndex;
+
+@property (assign) NSUInteger BuffSize;
+@property (assign) NSUInteger count;
+@property (assign) NSInteger idx;
+@property (retain) NSMutableData *buffer;
+@property (assign) NSInteger *intBuffer;
+@property (assign) BOOL SPARSE;

-@property NSUInteger *ip;
@end
diff --git a/runtime/ObjC/Framework/ANTLRIntArray.m b/runtime/ObjC/Framework/ANTLRIntArray.m
index 05a78e8..f66ecc1 100644
--- a/runtime/ObjC/Framework/ANTLRIntArray.m
+++ b/runtime/ObjC/Framework/ANTLRIntArray.m
@@ -29,10 +29,17 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import "ANTLRIntArray.h"
-
+#import "ANTLRRuntimeException.h"

@implementation ANTLRIntArray

+@synthesize BuffSize;
+@synthesize count;
+@synthesize idx;
+@synthesize buffer;
+@synthesize intBuffer;
+@synthesize SPARSE;
+
+ (ANTLRIntArray *)newArray
{
return [[ANTLRIntArray alloc] init];
@@ -43,100 +50,150 @@
return [[ANTLRIntArray alloc] initWithLen:aLen];
}

--(id) init
+- (id)init
{
-	self = [super initWithLen:ANTLR_INT_ARRAY_INITIAL_SIZE];
+    self = [super init];
if ( self != nil ) {
-        ip = (NSUInteger *)ptrBuffer;
-	}
-	return self;
+        BuffSize  = (ANTLR_INT_ARRAY_INITIAL_SIZE * (sizeof(NSInteger)/sizeof(id)));
+        count == 0;
+        idx = -1;
+        buffer = [[NSMutableData dataWithLength:(NSUInteger)BuffSize * sizeof(id)] retain];
+        intBuffer = (NSInteger *)[buffer mutableBytes];
+        SPARSE = NO;
+    }
+    return self;
}

--(id) initWithLen:(NSUInteger)aLen
+- (id)initWithLen:(NSUInteger)aLen
{
-	self = [super initWithLen:aLen];
+    self = [super init];
if ( self != nil ) {
-        ip = (NSUInteger *)ptrBuffer;
-	}
-	return self;
+        BuffSize  = (ANTLR_INT_ARRAY_INITIAL_SIZE * (sizeof(NSInteger)/sizeof(id)));
+        count = 0;
+        idx = -1;
+        buffer = [[NSMutableData dataWithLength:(NSUInteger)BuffSize * sizeof(id)] retain];
+        intBuffer = (NSInteger *)[buffer mutableBytes];
+        SPARSE = NO;
+    }
+    return self;
}

--(void) dealloc
+- (void)dealloc
{
-	[super dealloc];
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRIntArray" );
+#endif
+    if ( buffer ) [buffer release];
+    [super dealloc];
}

-- (id) copyWithZone:(NSZone *)aZone
+- (id)copyWithZone:(NSZone *)aZone
{
ANTLRIntArray *copy;

-    copy = [super copyWithZone:aZone];
+    copy = [[[self class] alloc] initWithLen:BuffSize];
+    copy.idx = self.idx;
+    NSInteger anIndex;
+    for ( anIndex = 0; anIndex < BuffSize; anIndex++ ) {
+        [copy addInteger:intBuffer[anIndex]];
+    }
return copy;
}

- (NSUInteger)count
{
-    return ptr;
+    return count;
}

// FIXME: Java runtime returns p, I'm not so sure it's right so have added p + 1 to show true size!
--(NSUInteger) size
+- (NSUInteger)size
{
-	return (ptr * sizeof(NSUInteger));
+    if ( count > 0 )
+        return ( count * sizeof(NSInteger));
+    return 0;
}

--(void) addInteger:(NSInteger) v
+- (void)addInteger:(NSInteger) value
{
-	[self ensureCapacity:ptr];
-	ip[ptr++] = (NSInteger) v;
+    [self ensureCapacity:idx+1];
+    intBuffer[++idx] = (NSInteger) value;
+    count++;
}

--(void) push:(NSInteger) v
+- (NSInteger)pop
{
-	[self addInteger:v];
+    if ( idx < 0 ) {
+        @throw [ANTLRIllegalArgumentException newException:[NSString stringWithFormat:@"Nothing to pop, count = %d", count]];
+    }
+    NSInteger value = (NSInteger) intBuffer[idx--];
+    count--;
+    return value;
}

--(NSInteger) pop
+- (void)push:(NSInteger)aValue
{
-	NSInteger v = (NSInteger) ip[--ptr];
-	return v;
+    [self addInteger:aValue];
}

--(NSInteger) integerAtIndex:(NSUInteger) i
+- (NSInteger)integerAtIndex:(NSUInteger) anIndex
{
-    if (i >= BuffSize) {
+    if ( SPARSE==NO  && anIndex > idx ) {
+        @throw [ANTLRIllegalArgumentException newException:[NSString stringWithFormat:@"Index %d must be less than count %d", anIndex, count]];
+    }
+    else if ( SPARSE == YES && anIndex >= BuffSize ) {
+        @throw [ANTLRIllegalArgumentException newException:[NSString stringWithFormat:@"Index %d must be less than BuffSize %d", anIndex, BuffSize]];
+    }
+    return intBuffer[anIndex];
+}
+
+- (void)insertInteger:(NSInteger)aValue AtIndex:(NSUInteger)anIndex
+{
+    [self replaceInteger:aValue AtIndex:anIndex];
+    count++;
+}
+
+- (NSInteger)removeIntegerAtIndex:(NSUInteger) anIndex
+{
+    if ( SPARSE==NO && anIndex > idx ) {
+        @throw [ANTLRIllegalArgumentException newException:[NSString stringWithFormat:@"Index %d must be less than count %d", anIndex, count]];
return (NSInteger)-1;
+    } else if ( SPARSE==YES && anIndex >= BuffSize ) {
+        @throw [ANTLRIllegalArgumentException newException:[NSString stringWithFormat:@"Index %d must be less than BuffSize %d", anIndex, BuffSize]];
}
-	return (NSInteger) ip[i];
+    count--;
+    return intBuffer[anIndex];
}

--(void) insertInteger:(NSInteger)anInteger AtIndex:(NSUInteger)idx
+- (void)replaceInteger:(NSInteger)aValue AtIndex:(NSUInteger)anIndex
{
-    if ( idx >= BuffSize ) {
-        [self ensureCapacity:idx];
+    if ( SPARSE == NO && anIndex > idx ) {
+        @throw [ANTLRIllegalArgumentException newException:[NSString stringWithFormat:@"Index %d must be less than count %d", anIndex, count]];
+    }
+    else if ( SPARSE == YES && anIndex >= BuffSize ) {
+        @throw [ANTLRIllegalArgumentException newException:[NSString stringWithFormat:@"Index %d must be less than BuffSize %d", anIndex, BuffSize]];
}
-    ip[idx] = (NSInteger) anInteger;
+    intBuffer[anIndex] = aValue;
}
+
-(void) reset
{
-	ptr = 0;
+    count = 0;
+    idx = -1;
}

- (void) ensureCapacity:(NSUInteger) anIndex
{
-	if ((anIndex * sizeof(NSUInteger)) >= [buffer length])
-	{
-		NSUInteger newSize = ([buffer length] / sizeof(NSUInteger)) * 2;
-		if (anIndex > newSize) {
-			newSize = anIndex + 1;
-		}
+    if ( (anIndex * sizeof(NSUInteger)) >= [buffer length] )
+    {
+        NSUInteger newSize = ([buffer length] / sizeof(NSInteger)) * 2;
+        if (anIndex > newSize) {
+            newSize = anIndex + 1;
+        }
BuffSize = newSize;
-		[buffer setLength:(BuffSize * sizeof(NSUInteger))];
-        ptrBuffer = (id *)[buffer mutableBytes];
-        ip = (NSUInteger *)ptrBuffer;
-	}
+        [buffer setLength:(BuffSize * sizeof(NSUInteger))];
+        intBuffer = (NSInteger *)[buffer mutableBytes];
+    }
}

-@synthesize ip;
@end

diff --git a/runtime/ObjC/Framework/ANTLRIntStream.h b/runtime/ObjC/Framework/ANTLRIntStream.h
index 742dc6b..e37f907 100644
--- a/runtime/ObjC/Framework/ANTLRIntStream.h
+++ b/runtime/ObjC/Framework/ANTLRIntStream.h
@@ -24,6 +24,10 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

+#ifndef DEBUG_DEALLOC
+#define DEBUG_DEALLOC
+#endif
+
@protocol ANTLRIntStream < NSObject, NSCopying >

- (void) consume;
diff --git a/runtime/ObjC/Framework/ANTLRLexer.h b/runtime/ObjC/Framework/ANTLRLexer.h
index 5da5fee..cd985cc 100644
--- a/runtime/ObjC/Framework/ANTLRLexer.h
+++ b/runtime/ObjC/Framework/ANTLRLexer.h
@@ -41,7 +41,7 @@
NSUInteger ruleNestingLevel;
}

-@property (retain, getter=getInput, setter=setInput:) id<ANTLRCharStream> input;
+@property (retain, getter=input, setter=setInput:) id<ANTLRCharStream> input;
@property (getter=getRuleNestingLevel, setter=setRuleNestingLevel:) NSUInteger ruleNestingLevel;

#pragma mark Initializer
@@ -60,7 +60,7 @@
- (id<ANTLRToken>) nextToken;
- (void) mTokens;		// abstract, defined in generated sources
- (void) skip;
-- (id<ANTLRCharStream>) getInput;
+- (id<ANTLRCharStream>) input;
- (void) setInput:(id<ANTLRCharStream>)aCharStream;

- (void) emit;
diff --git a/runtime/ObjC/Framework/ANTLRLexer.m b/runtime/ObjC/Framework/ANTLRLexer.m
index f6609a3..de1a0a3 100644
--- a/runtime/ObjC/Framework/ANTLRLexer.m
+++ b/runtime/ObjC/Framework/ANTLRLexer.m
@@ -37,7 +37,7 @@
{
self = [super initWithState:[[ANTLRRecognizerSharedState alloc] init]];
if ( self != nil ) {
-        input = anInput;
+        input = [anInput retain];
if (state.token != nil)
[((ANTLRCommonToken *)state.token) setInput:anInput];
ruleNestingLevel = 0;
@@ -49,7 +49,7 @@
{
self = [super initWithState:aState];
if ( self != nil ) {
-        input = anInput;
+        input = [anInput retain];
if (state.token != nil)
[((ANTLRCommonToken *)state.token) setInput:anInput];
ruleNestingLevel = 0;
@@ -59,9 +59,7 @@

- (void) dealloc
{
-    [self setToken:nil];
-    [self setInput:nil];
-    [self setText:nil];
+    if ( input ) [input release];
[super dealloc];
}

@@ -107,6 +105,7 @@
- (void) setToken: (id<ANTLRToken>) aToken
{
if (state.token != aToken) {
+        [aToken retain];
state.token = aToken;
}
}
@@ -165,16 +164,20 @@
state.token = [ANTLRCommonToken skipToken];
}

-- (id<ANTLRCharStream>) getInput
+- (id<ANTLRCharStream>) input
{
return input;
}

- (void) setInput:(id<ANTLRCharStream>) anInput
{
+    if ( anInput != input ) {
+        if ( input ) [input release];
+    }
input = nil;
[self reset];
input = anInput;
+    [input retain];
}

/** Currently does not support multiple emits per nextToken invocation
diff --git a/runtime/ObjC/Framework/ANTLRLexerState.h b/runtime/ObjC/Framework/ANTLRLexerState.h
index e91ffbb..00475d3 100644
--- a/runtime/ObjC/Framework/ANTLRLexerState.h
+++ b/runtime/ObjC/Framework/ANTLRLexerState.h
@@ -36,19 +36,19 @@
- (id<ANTLRToken>) getToken;
- (void) setToken:(id<ANTLRToken>) theToken;

-- (unsigned int) getTokenType;
+- (NSUInteger) getTokenType;
- (void) setTokenType:(unsigned int) theTokenType;

-- (unsigned int) getChannel;
+- (NSUInteger) getChannel;
- (void) setChannel:(unsigned int) theChannel;

-- (unsigned int) getTokenStartLine;
+- (NSUInteger) getTokenStartLine;
- (void) setTokenStartLine:(unsigned int) theTokenStartLine;

-- (unsigned int) getTokenCharPositionInLine;
+- (NSUInteger) getTokenCharPositionInLine;
- (void) setTokenCharPositionInLine:(unsigned int) theCharPosition;

-- (int) getTokenStartCharIndex;
+- (NSInteger) getTokenStartCharIndex;
- (void) setTokenStartCharIndex:(int) theTokenStartCharIndex;

- (NSString *) text;
diff --git a/runtime/ObjC/Framework/ANTLRLexerState.m b/runtime/ObjC/Framework/ANTLRLexerState.m
index 8ed1f68..88284b7 100644
--- a/runtime/ObjC/Framework/ANTLRLexerState.m
+++ b/runtime/ObjC/Framework/ANTLRLexerState.m
@@ -51,6 +51,9 @@

- (void) dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRLexerState" );
+#endif
[self setText:nil];
[self setToken:nil];
[super dealloc];
@@ -70,32 +73,32 @@
}


-- (unsigned int) getTokenType
+- (NSUInteger) getTokenType
{
return type;
}

-- (void) setTokenType:(unsigned int) theTokenType
+- (void) setTokenType:(NSUInteger) theTokenType
{
type = theTokenType;
}

-- (unsigned int) getChannel
+- (NSUInteger)channel
{
return channel;
}

-- (void) setChannel:(unsigned int) theChannel
+- (void) setChannel:(NSUInteger) theChannel
{
channel = theChannel;
}

-- (unsigned int) getTokenStartLine
+- (NSUInteger) getTokenStartLine
{
return tokenStartLine;
}

-- (void) setTokenStartLine:(unsigned int) theTokenStartLine
+- (void) setTokenStartLine:(NSUInteger) theTokenStartLine
{
tokenStartLine = theTokenStartLine;
}
diff --git a/runtime/ObjC/Framework/ANTLRLinkBase.h b/runtime/ObjC/Framework/ANTLRLinkBase.h
index 856791f..f4c337e 100644
--- a/runtime/ObjC/Framework/ANTLRLinkBase.h
+++ b/runtime/ObjC/Framework/ANTLRLinkBase.h
@@ -31,6 +31,10 @@

#import <Cocoa/Cocoa.h>

+#ifndef DEBUG_DEALLOC
+#define DEBUG_DEALLOC
+#endif
+
@protocol ANTLRLinkList <NSObject>

+ (id<ANTLRLinkList>)newANTLRLinkBase;
diff --git a/runtime/ObjC/Framework/ANTLRLinkBase.m b/runtime/ObjC/Framework/ANTLRLinkBase.m
index 01b9d7b..d352993 100644
--- a/runtime/ObjC/Framework/ANTLRLinkBase.m
+++ b/runtime/ObjC/Framework/ANTLRLinkBase.m
@@ -66,6 +66,9 @@

-(void)dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRLinkBase" );
+#endif
if (fNext) [fNext dealloc];
if (fPrev) [fPrev dealloc];
[super dealloc];
@@ -81,8 +84,6 @@
return( copy );
}

-
-
-(id<ANTLRLinkList>)append:(id<ANTLRLinkList>)node
{
node.fPrev = (id<ANTLRLinkList>)self;
diff --git a/runtime/ObjC/Framework/ANTLRLookaheadStream.m b/runtime/ObjC/Framework/ANTLRLookaheadStream.m
index 48c095f..a5ef8bd 100644
--- a/runtime/ObjC/Framework/ANTLRLookaheadStream.m
+++ b/runtime/ObjC/Framework/ANTLRLookaheadStream.m
@@ -47,7 +47,7 @@
-(id) init
{
if ((self = [super init]) != nil) {
-        eof = [ANTLRCommonToken eofToken];
+        eof = [[ANTLRCommonToken eofToken] retain];
eofElementIndex = UNITIALIZED_EOF_ELEMENT_INDEX;
markDepth = 0;
index = 0;
@@ -58,7 +58,7 @@
-(id) initWithEOF:(id) obj
{
if ((self = [super init]) != nil) {
-		self.eof = obj;
+		self.eof = [obj retain];
}
return self;
}
@@ -87,6 +87,7 @@
// if so, it's an opportunity to start filling at index 0 again
[self clear]; // size goes to 0, but retains memory
}
+    [o release];
return o;
}

diff --git a/runtime/ObjC/Framework/ANTLRMap.m b/runtime/ObjC/Framework/ANTLRMap.m
index 0834442..6bfb088 100644
--- a/runtime/ObjC/Framework/ANTLRMap.m
+++ b/runtime/ObjC/Framework/ANTLRMap.m
@@ -76,6 +76,9 @@

-(void)dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRMMap" );
+#endif
ANTLRMapElement *tmp, *rtmp;
NSInteger idx;

@@ -264,7 +267,7 @@
{
if ( [np getfNext] != nil )
[self delete_chain:[np getfNext]];
-	[np dealloc];
+	[np release];
}

#ifdef DONTUSEYET
@@ -305,7 +308,7 @@
ANTLRMapElement *np;
NSInteger idx;

-    idx = [(id<ANTLRBaseTree>)aNode getType];
+    idx = [(id<ANTLRBaseTree>)aNode type];
idx %= HASHSIZE;
np = ptrBuffer[idx];
return( [(NSNumber *)np.node integerValue] );
diff --git a/runtime/ObjC/Framework/ANTLRParseTree.h b/runtime/ObjC/Framework/ANTLRParseTree.h
index 070a94f..5331005 100644
--- a/runtime/ObjC/Framework/ANTLRParseTree.h
+++ b/runtime/ObjC/Framework/ANTLRParseTree.h
@@ -47,7 +47,7 @@
- (id)initWithLabel:(id<ANTLRToken>)label;

- (id<ANTLRBaseTree>)dupNode;
-- (NSInteger)getType;
+- (NSInteger)type;
- (NSString *)text;
- (NSInteger)getTokenStartIndex;
- (void)setTokenStartIndex:(NSInteger)index;
diff --git a/runtime/ObjC/Framework/ANTLRParseTree.m b/runtime/ObjC/Framework/ANTLRParseTree.m
index ee9e578..4bc0a0e 100644
--- a/runtime/ObjC/Framework/ANTLRParseTree.m
+++ b/runtime/ObjC/Framework/ANTLRParseTree.m
@@ -56,7 +56,7 @@
return nil;
}

-- (NSInteger)getType
+- (NSInteger)type
{
return 0;
}
@@ -88,7 +88,7 @@
{
if ( [payload isKindOfClass:[ANTLRCommonToken class]] ) {
id<ANTLRToken> t = (id<ANTLRToken>)payload;
-        if ( [t getType] == ANTLRTokenTypeEOF ) {
+        if ( t.type == ANTLRTokenTypeEOF ) {
return @"<EOF>";
}
return [t text];
diff --git a/runtime/ObjC/Framework/ANTLRParser.h b/runtime/ObjC/Framework/ANTLRParser.h
index 5ddaf50..067b313 100644
--- a/runtime/ObjC/Framework/ANTLRParser.h
+++ b/runtime/ObjC/Framework/ANTLRParser.h
@@ -39,7 +39,7 @@
- (id) initWithTokenStream:(id<ANTLRTokenStream>)theStream;
- (id) initWithTokenStream:(id<ANTLRTokenStream>)theStream State:(ANTLRRecognizerSharedState *)aState;

-- (id<ANTLRTokenStream>) getInput;
+- (id<ANTLRTokenStream>) input;
- (void) setInput: (id<ANTLRTokenStream>) anInput;

- (void) reset;
diff --git a/runtime/ObjC/Framework/ANTLRParser.m b/runtime/ObjC/Framework/ANTLRParser.m
index 5cb4601..5f0d3d5 100644
--- a/runtime/ObjC/Framework/ANTLRParser.m
+++ b/runtime/ObjC/Framework/ANTLRParser.m
@@ -65,6 +65,9 @@

- (void) dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRParser" );
+#endif
[self setInput:nil];
[super dealloc];
}
@@ -72,7 +75,7 @@
//----------------------------------------------------------
//  input
//----------------------------------------------------------
-- (id<ANTLRTokenStream>) getInput
+- (id<ANTLRTokenStream>) input
{
return input;
}
@@ -80,10 +83,10 @@
- (void) setInput: (id<ANTLRTokenStream>) anInput
{
if (input != anInput) {
-        [anInput retain];
if ( input ) [input release];
-        input = anInput;
+        [anInput retain];
}
+    input = anInput;
}

- (id) getCurrentInputSymbol:(id<ANTLRTokenStream>)anInput
@@ -104,7 +107,7 @@
tokenText = [NSString stringWithFormat:@"<missing %@>\n",[[ANTLRBaseRecognizer getTokenNames] objectAtIndex:expectedTokenType]];
ANTLRCommonToken *t = [[ANTLRCommonToken newToken:expectedTokenType Text:tokenText] retain];
ANTLRCommonToken *current = [anInput LT:1];
-    if ( [current getType] == ANTLRTokenTypeEOF ) {
+    if ( [current type] == ANTLRTokenTypeEOF ) {
current = [anInput LT:-1];
}
t.line = current.line;
diff --git a/runtime/ObjC/Framework/ANTLRPtrBuffer.m b/runtime/ObjC/Framework/ANTLRPtrBuffer.m
index 9e1e793..392a7b7 100644
--- a/runtime/ObjC/Framework/ANTLRPtrBuffer.m
+++ b/runtime/ObjC/Framework/ANTLRPtrBuffer.m
@@ -94,6 +94,9 @@

-(void)dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRPtrBuffer" );
+#endif
ANTLRLinkBase *tmp, *rtmp;
NSInteger idx;

@@ -106,7 +109,7 @@
tmp = (id)tmp.fNext;
else
tmp = nil;
-                [rtmp dealloc];
+                [rtmp release];
}
}
}
diff --git a/runtime/ObjC/Framework/ANTLRPtrStack.m b/runtime/ObjC/Framework/ANTLRPtrStack.m
index fc5b007..5b180f2 100644
--- a/runtime/ObjC/Framework/ANTLRPtrStack.m
+++ b/runtime/ObjC/Framework/ANTLRPtrStack.m
@@ -44,6 +44,9 @@

-(void)dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRPtrStack" );
+#endif
[super dealloc];
}

diff --git a/runtime/ObjC/Framework/ANTLRRecognitionException.m b/runtime/ObjC/Framework/ANTLRRecognitionException.m
index f565560..58496a3 100644
--- a/runtime/ObjC/Framework/ANTLRRecognitionException.m
+++ b/runtime/ObjC/Framework/ANTLRRecognitionException.m
@@ -71,8 +71,8 @@
charPositionInLine = token.charPositionInLine;
} else if ([inputClass conformsToProtocol:@protocol(ANTLRCharStream)]) {
c = (unichar)[input LA:1];
-			line = (id<ANTLRCharStream>)input.line;
-			charPositionInLine = (id<ANTLRCharStream>)input.charPositionInLine;
+			line = ((id<ANTLRCharStream>)input).line;
+			charPositionInLine = ((id<ANTLRCharStream>)input).charPositionInLine;
} else if ([inputClass conformsToProtocol:@protocol(ANTLRTreeNodeStream)]) {
[self setNode:[(id<ANTLRTreeNodeStream>)input LT:1]];
line = [node line];
@@ -100,6 +100,9 @@

- (void) dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRRecognitionException" );
+#endif
[self setStream:nil];
[self setToken:nil];
[self setNode:nil];
@@ -109,9 +112,9 @@
- (NSInteger) unexpectedType
{
if (token) {
-		return [token getType];
+		return token.type;
} else if (node) {
-        return [node getType];
+        return [node type];
} else {
return c;
}
diff --git a/runtime/ObjC/Framework/ANTLRRecognizerSharedState.h b/runtime/ObjC/Framework/ANTLRRecognizerSharedState.h
index 59e9398..0878dba 100755
--- a/runtime/ObjC/Framework/ANTLRRecognizerSharedState.h
+++ b/runtime/ObjC/Framework/ANTLRRecognizerSharedState.h
@@ -58,8 +58,8 @@
@property (assign, getter=getBacktracking, setter=setBacktracking:) NSInteger backtracking;
@property (retain, getter=getRuleMemo, setter=setRuleMemo:) ANTLRRuleStack *ruleMemo;
@property (copy, getter=getToken, setter=setToken:) id<ANTLRToken> token;
-@property (getter=getType,setter=setType:) NSUInteger type;
-@property (getter=getChannel,setter=setChannel:) NSUInteger channel;
+@property (getter=type,setter=setType:) NSUInteger type;
+@property (getter=channel,setter=setChannel:) NSUInteger channel;
@property (getter=getTokenStartLine,setter=setTokenStartLine:) NSUInteger tokenStartLine;
@property (getter=charPositionInLine,setter=setCharPositionInLine:) NSUInteger tokenStartCharPositionInLine;
@property (getter=getTokenStartCharIndex,setter=setTokenStartCharIndex:) NSInteger tokenStartCharIndex;
@@ -76,10 +76,10 @@
- (id<ANTLRToken>) getToken;
- (void) setToken:(id<ANTLRToken>) theToken;

-- (NSUInteger) getType;
+- (NSUInteger)type;
- (void) setType:(NSUInteger) theTokenType;

-- (NSUInteger) getChannel;
+- (NSUInteger)channel;
- (void) setChannel:(NSUInteger) theChannel;

- (NSUInteger) getTokenStartLine;
@@ -91,7 +91,7 @@
- (NSInteger) getTokenStartCharIndex;
- (void) setTokenStartCharIndex:(NSInteger) theTokenStartCharIndex;

-- (NSString *) text;
+- (NSString *)text;
- (void) setText:(NSString *) theText;


diff --git a/runtime/ObjC/Framework/ANTLRRecognizerSharedState.m b/runtime/ObjC/Framework/ANTLRRecognizerSharedState.m
index 9a12379..79dda2d 100755
--- a/runtime/ObjC/Framework/ANTLRRecognizerSharedState.m
+++ b/runtime/ObjC/Framework/ANTLRRecognizerSharedState.m
@@ -67,7 +67,7 @@
{
ANTLRHashRule *aHashRule;
if ((self = [super init]) != nil ) {
-        following = [AMutableArray arrayWithCapacity:10];
+        following = [[AMutableArray arrayWithCapacity:10] retain];
_fsp = -1;
errorRecovery = NO;			// are we recovering?
lastErrorIndex = -1;
@@ -169,6 +169,10 @@

- (void) dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRRecognizerSharedState" );
+#endif
+    if ( token ) [token release];
if ( following ) [following release];
if ( ruleMemo ) [ruleMemo release];
[super dealloc];
@@ -191,7 +195,7 @@
}
}

-- (NSUInteger) getChannel
+- (NSUInteger)channel
{
return channel;
}
@@ -244,6 +248,10 @@

- (void)setFollowing:(AMutableArray *)aFollow
{
+    if ( following != aFollow ) {
+        if ( following ) [following release];
+        [aFollow retain];
+    }
following = aFollow;
}

@@ -254,6 +262,10 @@

- (void)setRuleMemo:(ANTLRRuleStack *)aRuleMemo
{
+    if ( ruleMemo != aRuleMemo ) {
+        if ( ruleMemo ) [ruleMemo release];
+        [aRuleMemo retain];
+    }
ruleMemo = aRuleMemo;
}

diff --git a/runtime/ObjC/Framework/ANTLRRewriteRuleElementStream.m b/runtime/ObjC/Framework/ANTLRRewriteRuleElementStream.m
index 46c1307..ab06c40 100644
--- a/runtime/ObjC/Framework/ANTLRRewriteRuleElementStream.m
+++ b/runtime/ObjC/Framework/ANTLRRewriteRuleElementStream.m
@@ -110,6 +110,9 @@

- (void) dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRRewriteRuleElementStream" );
+#endif
if ( singleElement && isSingleElement ) [singleElement release];
else if ( elements && !isSingleElement ) [elements release];
[self setDescription:nil];
diff --git a/runtime/ObjC/Framework/ANTLRRuleStack.m b/runtime/ObjC/Framework/ANTLRRuleStack.m
index c59924a..5aef433 100644
--- a/runtime/ObjC/Framework/ANTLRRuleStack.m
+++ b/runtime/ObjC/Framework/ANTLRRuleStack.m
@@ -68,6 +68,9 @@ extern NSInteger debug;

- (void)dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRRuleStack" );
+#endif
[super dealloc];
}

diff --git a/runtime/ObjC/Framework/ANTLRStringStream.m b/runtime/ObjC/Framework/ANTLRStringStream.m
index 191cfb8..e08ab33 100644
--- a/runtime/ObjC/Framework/ANTLRStringStream.m
+++ b/runtime/ObjC/Framework/ANTLRStringStream.m
@@ -129,6 +129,9 @@ extern NSInteger debug;

- (void) dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRStringStream" );
+#endif
if ( markers && [markers count] ) {
[markers removeAllObjects];
[markers release];
diff --git a/runtime/ObjC/Framework/ANTLRSymbolStack.m b/runtime/ObjC/Framework/ANTLRSymbolStack.m
index 2443e5d..3c43ebb 100644
--- a/runtime/ObjC/Framework/ANTLRSymbolStack.m
+++ b/runtime/ObjC/Framework/ANTLRSymbolStack.m
@@ -83,6 +83,9 @@

-(void)dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRSymbolStack" );
+#endif
[super dealloc];
}

diff --git a/runtime/ObjC/Framework/ANTLRToken+DebuggerSupport.m b/runtime/ObjC/Framework/ANTLRToken+DebuggerSupport.m
index b512da8..114b236 100644
--- a/runtime/ObjC/Framework/ANTLRToken+DebuggerSupport.m
+++ b/runtime/ObjC/Framework/ANTLRToken+DebuggerSupport.m
@@ -50,10 +50,10 @@
// format is tokenIndex, type, channel, line, col, (escaped)text
return [NSString stringWithFormat:@"%u %d %u %u %u \"%@",
[self getTokenIndex],
-		[self getType],
-		[self getChannel],
-		[self line],
-		[self charPositionInLine],
+		self.type,
+		self.channel,
+		self.line,
+		self.charPositionInLine,
escapedText
];
}
diff --git a/runtime/ObjC/Framework/ANTLRToken.h b/runtime/ObjC/Framework/ANTLRToken.h
index 98d1d9b..04724bd 100644
--- a/runtime/ObjC/Framework/ANTLRToken.h
+++ b/runtime/ObjC/Framework/ANTLRToken.h
@@ -27,17 +27,21 @@

#import <Cocoa/Cocoa.h>

+#ifndef DEBUG_DEALLOC
+#define DEBUG_DEALLOC
+#endif
+
typedef enum {
-	ANTLRTokenTypeEOF = -1,
-	ANTLRTokenTypeInvalid,
-	ANTLRTokenTypeEOR,
-	ANTLRTokenTypeDOWN,
-	ANTLRTokenTypeUP,
-	ANTLRTokenTypeMIN
+    ANTLRTokenTypeEOF = -1,
+    ANTLRTokenTypeInvalid,
+    ANTLRTokenTypeEOR,
+    ANTLRTokenTypeDOWN,
+    ANTLRTokenTypeUP,
+    ANTLRTokenTypeMIN
} ANTLRTokenType;

typedef enum {
-	ANTLRTokenChannelDefault = 0,
+    ANTLRTokenChannelDefault = 0,
ANTLRTokenChannelHidden = 99
} ANTLRTokenChannel;

@@ -59,21 +63,21 @@ typedef enum {
- (NSString *) text;
- (void) setText:(NSString *)theText;

-- (NSInteger) getType;
+- (NSInteger)type;
- (void) setType: (NSInteger) aType;

// ANTLR v3 provides automatic line and position tracking. Subclasses do not need to
// override these, if they do not want to store line/pos tracking information
-- (NSUInteger) line;
+- (NSUInteger)line;
- (void) setLine: (NSUInteger) aLine;

-- (NSUInteger) charPositionInLine;
+- (NSUInteger)charPositionInLine;
- (void) setCharPositionInLine:(NSUInteger)aCharPositionInLine;

// explicitely change the channel this Token is on. The default parser implementation
// just sees the defaultChannel
// Common idiom is to put whitespace tokens on channel 99.
-- (NSUInteger) getChannel;
+- (NSUInteger)channel;
- (void) setChannel: (NSUInteger) aChannel;

// the index of this Token into the TokenStream
diff --git a/runtime/ObjC/Framework/ANTLRTokenRewriteStream.m b/runtime/ObjC/Framework/ANTLRTokenRewriteStream.m
index 7e3f74d..6106fb1 100644
--- a/runtime/ObjC/Framework/ANTLRTokenRewriteStream.m
+++ b/runtime/ObjC/Framework/ANTLRTokenRewriteStream.m
@@ -111,7 +111,7 @@ extern NSInteger debug;
- (NSInteger) execute:(NSMutableString *)buf
{
[buf appendString:text];
-    if ( [[tokens objectAtIndex:rwIndex] getType] != ANTLRTokenTypeEOF ) {
+    if ( [[tokens objectAtIndex:rwIndex] type] != ANTLRTokenTypeEOF ) {
[buf appendString:[[tokens objectAtIndex:rwIndex] text]];
}
return rwIndex+1;
@@ -433,7 +433,7 @@ extern NSInteger debug;
{
NSMutableString *buf = [NSMutableString stringWithCapacity:100];
for (int i = start; i >= MIN_TOKEN_INDEX && i <= end && i< [tokens count]; i++) {
-        if ( [[lastRewriteTokenIndexes objectAtIndex:i] getType] != ANTLRTokenTypeEOF )
+        if ( [[lastRewriteTokenIndexes objectAtIndex:i] type] != ANTLRTokenTypeEOF )
[buf appendString:[[tokens objectAtIndex:i] text]];
}
return [NSString stringWithString:buf];
@@ -481,8 +481,8 @@ extern NSInteger debug;
id<ANTLRToken>t = (id<ANTLRToken>) [tokens objectAtIndex:i];
if ( op == nil ) {
// no operation at that rwIndex, just dump token
-            if ( [t getType] != ANTLRTokenTypeEOF )
-                [buf appendString:[t text]];
+            if ( t.type != ANTLRTokenTypeEOF )
+                [buf appendString:t.text];
i++; // move to next token
}
else {
diff --git a/runtime/ObjC/Framework/ANTLRTree.h b/runtime/ObjC/Framework/ANTLRTree.h
index 68b9dfd..32f603a 100644
--- a/runtime/ObjC/Framework/ANTLRTree.h
+++ b/runtime/ObjC/Framework/ANTLRTree.h
@@ -24,6 +24,10 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

+#ifndef DEBUG_DEALLOC
+#define DEBUG_DEALLOC
+#endif
+
#import "AMutableArray.h"

@protocol ANTLRTree < NSObject, NSCopying >
@@ -110,11 +114,11 @@
- (id) deepCopyWithZone:(NSZone *)aZone;

#pragma mark Tree Parser support
-- (NSInteger) getType;
-- (NSString *) text;
+- (NSInteger)type;
+- (NSString *)text;
// In case we don't have a token payload, what is the line for errors?
-- (NSUInteger) line;
-- (NSUInteger) charPositionInLine;
+- (NSUInteger)line;
+- (NSUInteger)charPositionInLine;
- (void) setCharPositionInLine:(NSUInteger)pos;

#pragma mark Informational
diff --git a/runtime/ObjC/Framework/ANTLRTreeException.m b/runtime/ObjC/Framework/ANTLRTreeException.m
index 40af57e..b61d29c 100644
--- a/runtime/ObjC/Framework/ANTLRTreeException.m
+++ b/runtime/ObjC/Framework/ANTLRTreeException.m
@@ -51,6 +51,9 @@

- (void) dealloc
{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRTreeException" );
+#endif
[self setOldRoot:nil];
[self setNewRoot:nil];
[super dealloc];
diff --git a/runtime/ObjC/Framework/ANTLRTreeParser.h b/runtime/ObjC/Framework/ANTLRTreeParser.h
index 7fa7472..9d2d5c6 100644
--- a/runtime/ObjC/Framework/ANTLRTreeParser.h
+++ b/runtime/ObjC/Framework/ANTLRTreeParser.h
@@ -34,7 +34,7 @@
id<ANTLRTreeNodeStream> input;
}

-@property (retain, getter=getInput, setter=setInput:) id<ANTLRTreeNodeStream> input;
+@property (retain, getter=input, setter=setInput:) id<ANTLRTreeNodeStream> input;

+ (id) newANTLRTreeParser:(id<ANTLRTreeNodeStream>)anInput;
+ (id) newANTLRTreeParser:(id<ANTLRTreeNodeStream>)anInput State:(ANTLRRecognizerSharedState *)state;
@@ -44,7 +44,7 @@
State:(ANTLRRecognizerSharedState *)state;


-- (id<ANTLRTreeNodeStream>)getInput;
+- (id<ANTLRTreeNodeStream>)input;
- (void) setInput:(id<ANTLRTreeNodeStream>)anInput;

- (void) setTreeNodeStream:(id<ANTLRTreeNodeStream>) anInput;
diff --git a/runtime/ObjC/Framework/ANTLRTreeParser.m b/runtime/ObjC/Framework/ANTLRTreeParser.m
index 4069b12..599ec7c 100644
--- a/runtime/ObjC/Framework/ANTLRTreeParser.m
+++ b/runtime/ObjC/Framework/ANTLRTreeParser.m
@@ -59,7 +59,10 @@

- (void) dealloc
{
-	[self setInput:nil];
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ANTLRTreeParser" );
+#endif
+	if ( input ) [input release];
[super dealloc];
}

diff --git a/runtime/ObjC/Framework/ANTLRTreeWizard.m b/runtime/ObjC/Framework/ANTLRTreeWizard.m
index ad7e6eb..49fdfad 100644
--- a/runtime/ObjC/Framework/ANTLRTreeWizard.m
+++ b/runtime/ObjC/Framework/ANTLRTreeWizard.m
@@ -355,7 +355,7 @@
{
return nil;
}
-    int rootTokenType = [tpattern getType];
+    int rootTokenType = [tpattern type];
#ifdef DONTUSENOMO
visit(t, rootTokenType, new TreeWizard.ContextVisitor() {
public void visit(Object t, Object parent, int childIndex, Map labels) {
@@ -430,7 +430,7 @@
return;
}
ANTLRMapElement *labels = [ANTLRMap newANTLRMap]; // reused for each _parse
-    int rootTokenType = [tpattern getType];
+    int rootTokenType = [tpattern type];
#pragma warning This is another one of those screwy nested constructs that I have to figure out
#ifdef DONTUSENOMO
visit(t, rootTokenType, new TreeWizard.ContextVisitor() {
@@ -508,7 +508,7 @@
}
// check roots (wildcard matches anything)
if ( [tpattern class] != [ANTLRWildcardTreePattern class] ) {
-        if ( [adaptor getType:t1] != [tpattern getType] )
+        if ( [adaptor getType:t1] != [tpattern type] )
return NO;
// if pattern has text, check node text
if ( tpattern.hasTextArg && ![[adaptor getText:t1] isEqualToString:[tpattern text]] ) {
diff --git a/runtime/ObjC/Framework/ANTLRUnbufferedTokenStream.h b/runtime/ObjC/Framework/ANTLRUnbufferedTokenStream.h
index 9d702a7..84d8f43 100644
--- a/runtime/ObjC/Framework/ANTLRUnbufferedTokenStream.h
+++ b/runtime/ObjC/Framework/ANTLRUnbufferedTokenStream.h
@@ -43,7 +43,7 @@

@property (retain, getter=getTokenSource, setter=setTokenSource:) id<ANTLRTokenSource> tokenSource;
@property (getter=getTokenIndex, setter=setTokenIndex:) NSInteger tokenIndex;
-@property (getter=getChannel, setter=setChannel:) NSInteger channel;
+@property (getter=channel, setter=setChannel:) NSInteger channel;

+ (ANTLRUnbufferedTokenStream *)newANTLRUnbufferedTokenStream:(id<ANTLRTokenSource>)aTokenSource;
- (id) init;
diff --git a/runtime/ObjC/Framework/ANTLRUnbufferedTokenStream.m b/runtime/ObjC/Framework/ANTLRUnbufferedTokenStream.m
index 3bb2d16..fe6dbb7 100644
--- a/runtime/ObjC/Framework/ANTLRUnbufferedTokenStream.m
+++ b/runtime/ObjC/Framework/ANTLRUnbufferedTokenStream.m
@@ -71,7 +71,7 @@

- (BOOL)isEOF:(id<ANTLRToken>)aToken
{
-    return [aToken getType] == ANTLRTokenTypeEOF;
+    return (aToken.type == ANTLRTokenTypeEOF);
}

- (id<ANTLRTokenSource>)getTokenSource
@@ -91,7 +91,7 @@

- (NSInteger)LA:(NSInteger)anIdx
{
-    return [[self LT:anIdx] getType];
+    return [[self LT:anIdx] type];
}

- (id<ANTLRToken>)objectAtIndex:(NSInteger)anIdx
diff --git a/runtime/ObjC/Framework/ANTLRUniqueIDMap.m b/runtime/ObjC/Framework/ANTLRUniqueIDMap.m
index e5c2998..7c6d98f 100644
--- a/runtime/ObjC/Framework/ANTLRUniqueIDMap.m
+++ b/runtime/ObjC/Framework/ANTLRUniqueIDMap.m
@@ -152,7 +152,7 @@
ANTLRNodeMapElement *np;
NSInteger idx;

-    idx = [(id<ANTLRBaseTree>)aNode getType];
+    idx = [(id<ANTLRBaseTree>)aNode type];
np = ptrBuffer[idx];
while ( np != nil ) {
if (np.node == aNode) {
@@ -168,7 +168,7 @@
ANTLRNodeMapElement *np, *np1;
NSInteger idx;

-    idx = [(id<ANTLRBaseTree>)aNode getType];
+    idx = [(id<ANTLRBaseTree>)aNode type];
idx %= HASHSIZE;
np = [ANTLRNodeMapElement newANTLRNodeMapElementWithIndex:anID Node:aNode];
np1 = ptrBuffer[idx];
diff --git a/runtime/ObjC/Framework/ArrayIterator.m b/runtime/ObjC/Framework/ArrayIterator.m
index 4bb449f..0ae5317 100644
--- a/runtime/ObjC/Framework/ArrayIterator.m
+++ b/runtime/ObjC/Framework/ArrayIterator.m
@@ -110,6 +110,15 @@
return self;
}

+- (void)dealloc
+{
+#ifdef DEBUG_DEALLOC
+    NSLog( @"called dealloc in ArrayIterator" );
+#endif
+    if ( anArray ) [anArray release];
+    [super dealloc];
+}
+
- (BOOL) hasNext
{
if ( peekObj == nil ) {
@@ -170,10 +179,4 @@
count = cnt;
}

-- (void) dealloc
-{
-    if ( anArray ) [anArray release];
-    [super dealloc];
-}
-
@end

