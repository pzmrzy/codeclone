commit 0440c1eae98953a6ba76a57a321cfe9c251729c4
Author:     Alan Condit <acondit@ipns.com>
AuthorDate: Wed Mar 28 06:57:52 2012 -0700
Commit:     Alan Condit <acondit@ipns.com>
CommitDate: Wed Mar 28 06:57:52 2012 -0700

Add BOOL approximateLineInfo to match changes in java source.

diff --git a/runtime/ObjC/Framework/RecognitionException.h b/runtime/ObjC/Framework/RecognitionException.h
index 4929cc9..5f23ff7 100644
--- a/runtime/ObjC/Framework/RecognitionException.h
+++ b/runtime/ObjC/Framework/RecognitionException.h
@@ -39,6 +39,7 @@
unichar c;
NSUInteger line;
NSUInteger charPositionInLine;
+	BOOL approximateLineInfo;
}

@property (retain, getter=getStream, setter=setStream:) id<IntStream> input;
@@ -48,6 +49,7 @@
@property (assign) unichar c;
@property (assign) NSUInteger line;
@property (assign) NSUInteger charPositionInLine;
+@property (assign) BOOL approximateLineInfo;

+ (id) newException;
+ (id) newException:(id<IntStream>) anInputStream;
diff --git a/runtime/ObjC/Framework/RecognitionException.m b/runtime/ObjC/Framework/RecognitionException.m
index b7b0711..f1c2615 100644
--- a/runtime/ObjC/Framework/RecognitionException.m
+++ b/runtime/ObjC/Framework/RecognitionException.m
@@ -24,17 +24,22 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

+#import "Foundation/NSObjCRuntime.h"
#import "RecognitionException.h"
#import "TokenStream.h"
#import "TreeNodeStream.h"
+#import "BufferedTokenStream.h"

@implementation RecognitionException

@synthesize input;
+@synthesize index;
@synthesize token;
@synthesize node;
+@synthesize c;
@synthesize line;
@synthesize charPositionInLine;
+@synthesize approximateLineInfo;

+ (id) newException
{
@@ -90,6 +95,26 @@
{
self = [super initWithName:NSStringFromClass([self class]) reason:@"Runtime Exception" userInfo:nil];
if ( self != nil ) {
+        self.input = anInputStream;
+        self.index = input.index;
+        if ( [anInputStream isKindOfClass:[BufferedTokenStream class]] ) {
+            self.token = [(id<TokenStream>)anInputStream LT:1];
+            self.line = [token line];
+            self.charPositionInLine = [token charPositionInLine];
+           if ( [input conformsToProtocol:objc_getProtocol("TreeNodeStream")] ) {
+               [self extractInformationFromTreeNodeStream:anInputStream];
+           }
+           else if ( [[anInputStream class] instancesRespondToSelector:@selector(LA1:)] ) {
+               c = [anInputStream LA:1];
+               if ( [[anInputStream class] instancesRespondToSelector:@selector(getLine)] )
+                   line = [anInputStream getLine];
+               if ( [[anInputStream class] instancesRespondToSelector:@selector(getCharPositionInLine)] )
+                   charPositionInLine = [anInputStream getCharPositionInLine];
+           }
+           else {
+               c = [anInputStream LA:1];
+           }
+        }
}
return self;
}
@@ -113,6 +138,50 @@
[super dealloc];
}

+- (void) extractInformationFromTreeNodeStream:(id<TreeNodeStream>)input
+{
+    id<TreeNodeStream> nodes = input;
+    node = [nodes LT:1];
+    id<TreeAdaptor> adaptor = [nodes getTreeAdaptor];
+    id<Token> payload = [adaptor getToken:node];
+    if ( payload != nil ) {
+        token = payload;
+        if ( payload.line <= 0 ) {
+            // imaginary node; no line/pos info; scan backwards
+            int i = -1;
+            id priorNode = [nodes LT:i];
+            while ( priorNode != nil ) {
+                id<Token> priorPayload = [adaptor getToken:priorNode];
+                if ( priorPayload!=nil && priorPayload.line > 0 ) {
+                    // we found the most recent real line / pos info
+                    line = priorPayload.line;
+                    charPositionInLine = priorPayload.charPositionInLine;
+                    approximateLineInfo = YES;
+                    break;
+                }
+                --i;
+                priorNode = [nodes LT:i];
+            }
+        }
+        else { // node created from real token
+            line = payload.line;
+            charPositionInLine = payload.charPositionInLine;
+        }
+    }
+    else if ( [self.node isKindOfClass:[CommonTree class]] ) {
+        line = ((id<Tree>)node).line;
+        charPositionInLine = ((id<Tree>)node).charPositionInLine;
+        if ( [node isMemberOfClass:[CommonTree class]]) {
+            token = ((CommonTree *)node).token;
+        }
+    }
+    else {
+        NSInteger type = [adaptor getType:node];
+        NSString *text = [adaptor getText:node];
+        self.token = [CommonToken newToken:type Text:text];
+    }
+}
+
- (NSInteger) unexpectedType
{
if (token) {
@@ -210,6 +279,4 @@
charPositionInLine = aPos;
}

-@synthesize index;
-@synthesize c;
@end

