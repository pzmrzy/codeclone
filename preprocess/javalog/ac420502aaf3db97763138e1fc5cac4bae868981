commit ac420502aaf3db97763138e1fc5cac4bae868981
Author:     Sam Harwell <sam@tunnelvisionlabs.com>
AuthorDate: Tue Feb 21 20:32:25 2012 -0600
Commit:     Sam Harwell <sam@tunnelvisionlabs.com>
CommitDate: Wed Feb 22 12:25:39 2012 -0600

Use .isEmpty() instead of .size()==0

diff --git a/runtime/Java/src/main/java/org/antlr/runtime/BufferedTokenStream.java b/runtime/Java/src/main/java/org/antlr/runtime/BufferedTokenStream.java
index a805de0..86c4282 100644
--- a/runtime/Java/src/main/java/org/antlr/runtime/BufferedTokenStream.java
+++ b/runtime/Java/src/main/java/org/antlr/runtime/BufferedTokenStream.java
@@ -227,7 +227,7 @@ public class BufferedTokenStream implements TokenStream {
filteredTokens.add(t);
}
}
-        if ( filteredTokens.size()==0 ) {
+        if ( filteredTokens.isEmpty() ) {
filteredTokens = null;
}
return filteredTokens;
diff --git a/runtime/Java/src/main/java/org/antlr/runtime/LegacyCommonTokenStream.java b/runtime/Java/src/main/java/org/antlr/runtime/LegacyCommonTokenStream.java
index d2a63bf..1dc916f 100644
--- a/runtime/Java/src/main/java/org/antlr/runtime/LegacyCommonTokenStream.java
+++ b/runtime/Java/src/main/java/org/antlr/runtime/LegacyCommonTokenStream.java
@@ -219,7 +219,7 @@ public class LegacyCommonTokenStream implements TokenStream {
filteredTokens.add(t);
}
}
-		if ( filteredTokens.size()==0 ) {
+		if ( filteredTokens.isEmpty() ) {
filteredTokens = null;
}
return filteredTokens;
diff --git a/runtime/Java/src/main/java/org/antlr/runtime/TokenRewriteStream.java b/runtime/Java/src/main/java/org/antlr/runtime/TokenRewriteStream.java
index 4e6a8a6..a3ecdfb 100644
--- a/runtime/Java/src/main/java/org/antlr/runtime/TokenRewriteStream.java
+++ b/runtime/Java/src/main/java/org/antlr/runtime/TokenRewriteStream.java
@@ -371,7 +371,7 @@ public class TokenRewriteStream extends CommonTokenStream {
if ( end>tokens.size()-1 ) end = tokens.size()-1;
if ( start<0 ) start = 0;

-        if ( rewrites==null || rewrites.size()==0 ) {
+        if ( rewrites==null || rewrites.isEmpty() ) {
return toOriginalString(start,end); // no instructions to execute
}
StringBuffer buf = new StringBuffer();
diff --git a/runtime/Java/src/main/java/org/antlr/runtime/tree/BaseTree.java b/runtime/Java/src/main/java/org/antlr/runtime/tree/BaseTree.java
index ee22d28..0be3179 100644
--- a/runtime/Java/src/main/java/org/antlr/runtime/tree/BaseTree.java
+++ b/runtime/Java/src/main/java/org/antlr/runtime/tree/BaseTree.java
@@ -359,7 +359,7 @@ public abstract class BaseTree implements Tree {
/** Print out a whole tree not just a node */
@Override
public String toStringTree() {
-		if ( children==null || children.size()==0 ) {
+		if ( children==null || children.isEmpty() ) {
return this.toString();
}
StringBuffer buf = new StringBuffer();
diff --git a/tool/src/main/java/org/antlr/analysis/DFA.java b/tool/src/main/java/org/antlr/analysis/DFA.java
index 93e5dd5..742869f 100644
--- a/tool/src/main/java/org/antlr/analysis/DFA.java
+++ b/tool/src/main/java/org/antlr/analysis/DFA.java
@@ -327,7 +327,7 @@ public class DFA {
public List getJavaCompressedMax() { return getRunLengthEncoding(max); }
public List getJavaCompressedSpecial() { return getRunLengthEncoding(special); }
public List getJavaCompressedTransition() {
-		if ( transition==null || transition.size()==0 ) {
+		if ( transition==null || transition.isEmpty() ) {
return null;
}
List encoded = new ArrayList(transition.size());
@@ -350,7 +350,7 @@ public class DFA {
*  only target bad enough to need it.
*/
public List getRunLengthEncoding(List data) {
-		if ( data==null || data.size()==0 ) {
+		if ( data==null || data.isEmpty() ) {
// for states with no transitions we want an empty string ""
// to hold its place in the transitions array.
List empty = new ArrayList();
diff --git a/tool/src/main/java/org/antlr/analysis/DFAState.java b/tool/src/main/java/org/antlr/analysis/DFAState.java
index 3de1a6d..a9d256e 100644
--- a/tool/src/main/java/org/antlr/analysis/DFAState.java
+++ b/tool/src/main/java/org/antlr/analysis/DFAState.java
@@ -637,7 +637,7 @@ public class DFAState extends State {
}
}

-		if ( nondeterministicAlts.size()==0 ) {
+		if ( nondeterministicAlts.isEmpty() ) {
return null;
}
return nondeterministicAlts;
@@ -653,7 +653,7 @@ public class DFAState extends State {
NFAConfiguration configuration = (NFAConfiguration) nfaConfigurations.get(i);
alts.add(Utils.integer(configuration.alt));
}
-		if ( alts.size()==0 ) {
+		if ( alts.isEmpty() ) {
return null;
}
return alts;
@@ -673,7 +673,7 @@ public class DFAState extends State {
synpreds.add(configuration.semanticContext);
}
}
-		if ( synpreds.size()==0 ) {
+		if ( synpreds.isEmpty() ) {
return null;
}
return synpreds;
diff --git a/tool/src/main/java/org/antlr/analysis/DecisionProbe.java b/tool/src/main/java/org/antlr/analysis/DecisionProbe.java
index efba97d..b420e85 100644
--- a/tool/src/main/java/org/antlr/analysis/DecisionProbe.java
+++ b/tool/src/main/java/org/antlr/analysis/DecisionProbe.java
@@ -190,9 +190,9 @@ public class DecisionProbe {
*  no nondeterminisms unresolved by syn preds, all is ok with decision.
*/
public boolean isDeterministic() {
-		if ( danglingStates.size()==0 &&
-			 statesWithSyntacticallyAmbiguousAltsSet.size()==0 &&
-			 dfa.getUnreachableAlts().size()==0 )
+		if ( danglingStates.isEmpty() &&
+			 statesWithSyntacticallyAmbiguousAltsSet.isEmpty() &&
+			 dfa.getUnreachableAlts().isEmpty() )
{
return true;
}
diff --git a/tool/src/main/java/org/antlr/analysis/NFAToDFAConverter.java b/tool/src/main/java/org/antlr/analysis/NFAToDFAConverter.java
index 3c926aa..8851671 100644
--- a/tool/src/main/java/org/antlr/analysis/NFAToDFAConverter.java
+++ b/tool/src/main/java/org/antlr/analysis/NFAToDFAConverter.java
@@ -1355,7 +1355,7 @@ public class NFAToDFAConverter {
Map<Integer, SemanticContext> altToPredMap =
getPredicatesPerNonDeterministicAlt(d, nondeterministicAlts);

-		if ( altToPredMap.size()==0 ) {
+		if ( altToPredMap.isEmpty() ) {
return false;
}

diff --git a/tool/src/main/java/org/antlr/analysis/SemanticContext.java b/tool/src/main/java/org/antlr/analysis/SemanticContext.java
index 0c59585..0bfd91c 100644
--- a/tool/src/main/java/org/antlr/analysis/SemanticContext.java
+++ b/tool/src/main/java/org/antlr/analysis/SemanticContext.java
@@ -731,11 +731,11 @@ public abstract class SemanticContext {

HashSet<SemanticContext> result = new HashSet<SemanticContext>(opsA);
result.retainAll(opsB);
-		if (result.size() == 0)
+		if (result.isEmpty())
return new SemanticContext[] { EMPTY_SEMANTIC_CONTEXT, a, b };

opsA.removeAll(result);
-		if (opsA.size() == 0)
+		if (opsA.isEmpty())
a = new TruePredicate();
else if (opsA.size() == 1)
a = opsA.iterator().next();
@@ -743,7 +743,7 @@ public abstract class SemanticContext {
a = new AND(opsA);

opsB.removeAll(result);
-		if (opsB.size() == 0)
+		if (opsB.isEmpty())
b = new TruePredicate();
else if (opsB.size() == 1)
b = opsB.iterator().next();
@@ -764,11 +764,11 @@ public abstract class SemanticContext {

HashSet<SemanticContext> result = new HashSet<SemanticContext>(opsA);
result.retainAll(opsB);
-		if (result.size() == 0)
+		if (result.isEmpty())
return new SemanticContext[] { EMPTY_SEMANTIC_CONTEXT, a, b };

opsA.removeAll(result);
-		if (opsA.size() == 0)
+		if (opsA.isEmpty())
a = new FalsePredicate();
else if (opsA.size() == 1)
a = opsA.iterator().next();
@@ -776,7 +776,7 @@ public abstract class SemanticContext {
a = new OR(opsA);

opsB.removeAll(result);
-		if (opsB.size() == 0)
+		if (opsB.isEmpty())
b = new FalsePredicate();
else if (opsB.size() == 1)
b = opsB.iterator().next();
diff --git a/tool/src/main/java/org/antlr/codegen/CodeGenerator.java b/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
index ac6a9f6..695b72c 100644
--- a/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
+++ b/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
@@ -760,7 +760,7 @@ public class CodeGenerator {
throw new IllegalArgumentException("unable to generate expressions for non IntervalSet objects");
}
IntervalSet iset = (IntervalSet)set;
-		if ( iset.getIntervals()==null || iset.getIntervals().size()==0 ) {
+		if ( iset.getIntervals()==null || iset.getIntervals().isEmpty() ) {
ST emptyST = new ST(templates, "");
emptyST.impl.name = "empty-set-expr";
return emptyST;
@@ -925,7 +925,7 @@ public class CodeGenerator {
translatedArgs.add(catST);
}
}
-		if ( translatedArgs.size()==0 ) {
+		if ( translatedArgs.isEmpty() ) {
return null;
}
return translatedArgs;
diff --git a/tool/src/main/java/org/antlr/codegen/PythonTarget.java b/tool/src/main/java/org/antlr/codegen/PythonTarget.java
index 498db63..259f3a7 100644
--- a/tool/src/main/java/org/antlr/codegen/PythonTarget.java
+++ b/tool/src/main/java/org/antlr/codegen/PythonTarget.java
@@ -111,7 +111,7 @@ public class PythonTarget extends Target {

if ( chunk instanceof String ) {
String text = (String)chunks.get(i);
-				if ( nChunks.size() == 0 && actionToken.getCharPositionInLine() >= 0 ) {
+				if ( nChunks.isEmpty() && actionToken.getCharPositionInLine() >= 0 ) {
// first chunk and some 'virtual' WS at beginning
// prepend to this chunk

@@ -129,7 +129,7 @@ public class PythonTarget extends Target {
}
}
else {
-				if ( nChunks.size() == 0 && actionToken.getCharPositionInLine() >= 0 ) {
+				if ( nChunks.isEmpty() && actionToken.getCharPositionInLine() >= 0 ) {
// first chunk and some 'virtual' WS at beginning
// add as a chunk of its own

diff --git a/tool/src/main/java/org/antlr/misc/IntervalSet.java b/tool/src/main/java/org/antlr/misc/IntervalSet.java
index 53f2bf6..3da43d7 100644
--- a/tool/src/main/java/org/antlr/misc/IntervalSet.java
+++ b/tool/src/main/java/org/antlr/misc/IntervalSet.java
@@ -507,7 +507,7 @@ public class IntervalSet implements IntSet {
/** return true if this set has no members */
@Override
public boolean isNil() {
-        return intervals==null || intervals.size()==0;
+        return intervals==null || intervals.isEmpty();
}

/** If this set is a single integer, return it otherwise Label.INVALID */
@@ -574,7 +574,7 @@ public class IntervalSet implements IntSet {
@Override
public String toString(Grammar g) {
StringBuffer buf = new StringBuffer();
-		if ( this.intervals==null || this.intervals.size()==0 ) {
+		if ( this.intervals==null || this.intervals.isEmpty() ) {
return "{}";
}
if ( this.intervals.size()>1 ) {
diff --git a/tool/src/main/java/org/antlr/tool/AttributeScope.java b/tool/src/main/java/org/antlr/tool/AttributeScope.java
index 6339197..778d6d6 100644
--- a/tool/src/main/java/org/antlr/tool/AttributeScope.java
+++ b/tool/src/main/java/org/antlr/tool/AttributeScope.java
@@ -181,7 +181,7 @@ public class AttributeScope {
inter.add(key);
}
}
-		if ( inter.size()==0 ) {
+		if ( inter.isEmpty() ) {
return null;
}
return inter;
diff --git a/tool/src/main/java/org/antlr/tool/BuildDependencyGenerator.java b/tool/src/main/java/org/antlr/tool/BuildDependencyGenerator.java
index 844046e..fcb0d64 100644
--- a/tool/src/main/java/org/antlr/tool/BuildDependencyGenerator.java
+++ b/tool/src/main/java/org/antlr/tool/BuildDependencyGenerator.java
@@ -148,7 +148,7 @@ public class BuildDependencyGenerator {
files.add(new File(fname));
}

-        if (files.size() == 0) {
+        if (files.isEmpty()) {
return null;
}
return files;
@@ -172,7 +172,7 @@ public class BuildDependencyGenerator {
files.add(new File(fileName));
}

-        if (files.size() == 0) {
+        if (files.isEmpty()) {
return null;
}
return files;
diff --git a/tool/src/main/java/org/antlr/tool/Grammar.java b/tool/src/main/java/org/antlr/tool/Grammar.java
index 443f96a..b084b3e 100644
--- a/tool/src/main/java/org/antlr/tool/Grammar.java
+++ b/tool/src/main/java/org/antlr/tool/Grammar.java
@@ -997,7 +997,7 @@ public class Grammar {
return;
}
//System.out.println("### build "+getGrammarTypeString()+" grammar "+name+" NFAs");
-		if ( getRules().size()==0 ) {
+		if ( getRules().isEmpty() ) {
return;
}

diff --git a/tool/src/main/java/org/antlr/tool/GrammarSpelunker.java b/tool/src/main/java/org/antlr/tool/GrammarSpelunker.java
index d7986ec..6e6a83d 100644
--- a/tool/src/main/java/org/antlr/tool/GrammarSpelunker.java
+++ b/tool/src/main/java/org/antlr/tool/GrammarSpelunker.java
@@ -135,7 +135,7 @@ public class GrammarSpelunker {
consume();
}
match(";");
-        if ( importedGrammars.size()==0 ) importedGrammars = null;
+        if ( importedGrammars.isEmpty() ) importedGrammars = null;
}

public String getGrammarModifier() { return grammarModifier; }
diff --git a/tool/src/main/java/org/antlr/tool/NFAFactory.java b/tool/src/main/java/org/antlr/tool/NFAFactory.java
index 259a2b7..6353df0 100644
--- a/tool/src/main/java/org/antlr/tool/NFAFactory.java
+++ b/tool/src/main/java/org/antlr/tool/NFAFactory.java
@@ -387,7 +387,7 @@ public class NFAFactory {
public StateCluster build_AlternativeBlock(List alternativeStateClusters)
{
StateCluster result;
-        if ( alternativeStateClusters==null || alternativeStateClusters.size()==0 ) {
+        if ( alternativeStateClusters==null || alternativeStateClusters.isEmpty() ) {
return null;
}

diff --git a/tool/src/test/java/org/antlr/test/TestCharDFAConversion.java b/tool/src/test/java/org/antlr/test/TestCharDFAConversion.java
index 15e1100..4e65816 100644
--- a/tool/src/test/java/org/antlr/test/TestCharDFAConversion.java
+++ b/tool/src/test/java/org/antlr/test/TestCharDFAConversion.java
@@ -531,7 +531,7 @@ public class TestCharDFAConversion extends BaseTest {

// first make sure nondeterministic alts are as expected
if ( expectingUnreachableAlts==null ) {
-			if ( nonDetAlts!=null && nonDetAlts.size()!=0 ) {
+			if ( nonDetAlts!=null && !nonDetAlts.isEmpty() ) {
System.err.println("nondeterministic alts (should be empty): "+nonDetAlts);
}
assertEquals("unreachable alts mismatch", 0, nonDetAlts!=null?nonDetAlts.size():0);
diff --git a/tool/src/test/java/org/antlr/test/TestTemplates.java b/tool/src/test/java/org/antlr/test/TestTemplates.java
index 8026319..44bcc5e 100644
--- a/tool/src/test/java/org/antlr/test/TestTemplates.java
+++ b/tool/src/test/java/org/antlr/test/TestTemplates.java
@@ -369,6 +369,6 @@ public class TestTemplates extends BaseTest {

// S U P P O R T
private void assertNoErrors(ErrorQueue equeue) {
-		assertTrue("unexpected errors: "+equeue, equeue.errors.size()==0);
+		assertTrue("unexpected errors: "+equeue, equeue.errors.isEmpty());
}
}

