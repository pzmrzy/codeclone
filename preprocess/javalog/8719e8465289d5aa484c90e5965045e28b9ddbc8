commit 8719e8465289d5aa484c90e5965045e28b9ddbc8
Author:     Sam Harwell <sam@tunnelvisionlabs.com>
AuthorDate: Thu Dec 13 14:08:07 2012 -0600
Commit:     Sam Harwell <sam@tunnelvisionlabs.com>
CommitDate: Thu Dec 13 14:08:07 2012 -0600

Add the PositionTrackingStream interface to help get location information from unbuffered streams containing nodes without position information

diff --git a/runtime/Java/src/main/java/org/antlr/runtime/RecognitionException.java b/runtime/Java/src/main/java/org/antlr/runtime/RecognitionException.java
index 0a8b411..c3f811d 100644
--- a/runtime/Java/src/main/java/org/antlr/runtime/RecognitionException.java
+++ b/runtime/Java/src/main/java/org/antlr/runtime/RecognitionException.java
@@ -122,9 +122,20 @@ public class RecognitionException extends Exception {

protected void extractInformationFromTreeNodeStream(IntStream input) {
TreeNodeStream nodes = (TreeNodeStream)input;
+
this.node = nodes.LT(1);
+
+		Object positionNode = null;
+		if (nodes instanceof PositionTrackingStream) {
+			positionNode = ((PositionTrackingStream<?>)nodes).getKnownPositionElement(false);
+			if (positionNode == null) {
+				positionNode = ((PositionTrackingStream<?>)nodes).getKnownPositionElement(true);
+				this.approximateLineInfo = positionNode != null;
+			}
+		}
+
TreeAdaptor adaptor = nodes.getTreeAdaptor();
-		Token payload = adaptor.getToken(node);
+		Token payload = adaptor.getToken(positionNode != null ? positionNode : this.node);
if ( payload!=null ) {
this.token = payload;
if ( payload.getLine()<= 0 ) {
diff --git a/runtime/Java/src/main/java/org/antlr/runtime/tree/CommonTreeNodeStream.java b/runtime/Java/src/main/java/org/antlr/runtime/tree/CommonTreeNodeStream.java
index f6c0c14..29b9546 100644
--- a/runtime/Java/src/main/java/org/antlr/runtime/tree/CommonTreeNodeStream.java
+++ b/runtime/Java/src/main/java/org/antlr/runtime/tree/CommonTreeNodeStream.java
@@ -27,12 +27,13 @@
*/
package org.antlr.runtime.tree;

+import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenStream;
import org.antlr.runtime.misc.LookaheadStream;
import org.antlr.runtime.misc.IntArray;

-public class CommonTreeNodeStream extends LookaheadStream<Object> implements TreeNodeStream {
+public class CommonTreeNodeStream extends LookaheadStream<Object> implements TreeNodeStream, PositionTrackingStream<Object> {
public static final int DEFAULT_INITIAL_BUFFER_SIZE = 100;
public static final int INITIAL_CALL_STACK_SIZE = 10;

@@ -57,6 +58,17 @@ public class CommonTreeNodeStream extends LookaheadStream<Object> implements Tre
/** Tracks tree depth.  Level=0 means we're at root node level. */
protected int level = 0;

+	/**
+	 * Tracks the last node before the start of {@link #data} which contains
+	 * position information to provide information for error reporting. This is
+	 * tracked in addition to {@link #prevElement} which may or may not contain
+	 * position information.
+	 *
+	 * @see #hasPositionInformation
+	 * @see RecognitionException#extractInformationFromTreeNodeStream
+	 */
+	protected Object previousLocationElement;
+
public CommonTreeNodeStream(Object tree) {
this(new CommonTreeAdaptor(), tree);
}
@@ -73,6 +85,7 @@ public class CommonTreeNodeStream extends LookaheadStream<Object> implements Tre
it.reset();
hasNilRoot = false;
level = 0;
+		previousLocationElement = null;
if ( calls != null ) calls.clear();
}

@@ -98,6 +111,16 @@ public class CommonTreeNodeStream extends LookaheadStream<Object> implements Tre
}

@Override
+	public Object remove() {
+		Object result = super.remove();
+		if (p == 0 && hasPositionInformation(prevElement)) {
+			previousLocationElement = prevElement;
+		}
+
+		return result;
+	}
+
+	@Override
public boolean isEOF(Object o) { return adaptor.getType(o) == Token.EOF; }

@Override
@@ -147,6 +170,48 @@ public class CommonTreeNodeStream extends LookaheadStream<Object> implements Tre
return ret;
}

+	/**
+	 * Returns an element containing position information. If {@code allowApproximateLocation} is {@code false}, then
+	 * this method will return the {@code LT(1)} element if it contains position information, and otherwise return {@code null}.
+	 * If {@code allowApproximateLocation} is {@code true}, then this method will return the last known element containing position information.
+	 *
+	 * @see #hasPositionInformation
+	 */
+	@Override
+	public Object getKnownPositionElement(boolean allowApproximateLocation) {
+		Object node = data.get(p);
+		if (hasPositionInformation(node)) {
+			return node;
+		}
+
+		if (!allowApproximateLocation) {
+			return null;
+		}
+
+		for (int index = p - 1; index >= 0; index--) {
+			node = data.get(index);
+			if (hasPositionInformation(node)) {
+				return node;
+			}
+		}
+
+		return previousLocationElement;
+	}
+
+	@Override
+	public boolean hasPositionInformation(Object node) {
+		Token token = adaptor.getToken(node);
+		if (token == null) {
+			return false;
+		}
+
+		if (token.getLine() <= 0) {
+			return false;
+		}
+
+		return true;
+	}
+
// TREE REWRITE INTERFACE

@Override
diff --git a/runtime/Java/src/main/java/org/antlr/runtime/tree/PositionTrackingStream.java b/runtime/Java/src/main/java/org/antlr/runtime/tree/PositionTrackingStream.java
new file mode 100644
index 0000000..233548a
--- /dev/null
+++ b/runtime/Java/src/main/java/org/antlr/runtime/tree/PositionTrackingStream.java
@@ -0,0 +1,57 @@
+/*
+ [The "BSD license"]
+ Copyright (c) 2012 Terence Parr
+ Copyright (c) 2012 Sam Harwell
+ All rights reserved.
+
+ Redistribution and use in source and binary forms, with or without
+ modification, are permitted provided that the following conditions
+ are met:
+ 1. Redistributions of source code must retain the above copyright
+     notice, this list of conditions and the following disclaimer.
+ 2. Redistributions in binary form must reproduce the above copyright
+     notice, this list of conditions and the following disclaimer in the
+     documentation and/or other materials provided with the distribution.
+ 3. The name of the author may not be used to endorse or promote products
+     derived from this software without specific prior written permission.
+
+ THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.antlr.runtime.tree;
+
+/**
+ *
+ * @author Sam Harwell
+ */
+public interface PositionTrackingStream<T> {
+
+	/**
+	 * Returns an element containing concrete information about the current
+	 * position in the stream.
+	 *
+	 * @param allowApproximateLocation if {@code false}, this method returns
+	 * {@code null} if an element containing exact information about the current
+	 * position is not available
+	 */
+	T getKnownPositionElement(boolean allowApproximateLocation);
+
+	/**
+	 * Determines if the specified {@code element} contains concrete position
+	 * information.
+	 *
+	 * @param element the element to check
+	 * @return {@code true} if {@code element} contains concrete position
+	 * information, otherwise {@code false}
+	 */
+	boolean hasPositionInformation(T element);
+
+}

