commit 9f21f656fa20fc6ddcff42394599c25604eb7caf
Author:     Zannick <jokeserver@gmail.com>
AuthorDate: Mon Jun 25 20:46:55 2012 -0700
Commit:     Zannick <jokeserver@gmail.com>
CommitDate: Tue Jun 26 23:09:33 2012 -0700

Add a pylintrc and fix some problems pylint found.

- Use super().__init__() in classes that derive from other classes.
- Fix some references to nonexistent variables that would have caused
crashes had any of the tests run into them.
- Delete a function never used because later in the same class it was
redefined. Delete the second instance of an abstract function
similarly defined, but move its doc comment into the other instance.
- Give BaseRecognizer a default grammarFileName of None.
- Remove unused import CommonToken in streams.
- Move standard line and charPositionInLine properties to CharStream.
- Fix a few more % formatting and old-style super calls.

diff --git a/runtime/Python3/antlr3/debug.py b/runtime/Python3/antlr3/debug.py
index 22a1751..54ecf7c 100644
--- a/runtime/Python3/antlr3/debug.py
+++ b/runtime/Python3/antlr3/debug.py
@@ -29,6 +29,8 @@
# end[licence]

import socket
+import sys
+from .constants import INVALID_TOKEN_TYPE
from .exceptions import RecognitionException
from .recognizers import Parser
from .streams import TokenStream
@@ -78,7 +80,7 @@ class DebugParser(Parser):


def endBacktrack(self, level, successful):
-        self._dbg.endBacktrack(level,successful)
+        self._dbg.endBacktrack(level, successful)


def reportError(self, exc):
@@ -90,6 +92,7 @@ class DebugParser(Parser):

class DebugTokenStream(TokenStream):
def __init__(self, input, dbg=None):
+        super().__init__()
self.input = input
self.initialStreamState = True
# Track the last mark() call result value for use in rewind().
@@ -216,6 +219,7 @@ class DebugTreeAdaptor(TreeAdaptor):
"""

def __init__(self, dbg, adaptor):
+        super().__init__()
self.dbg = dbg
self.adaptor = adaptor

@@ -241,9 +245,9 @@ class DebugTreeAdaptor(TreeAdaptor):


def errorNode(self, input, start, stop, exc):
-        node = selfadaptor.errorNode(input, start, stop, exc)
+        node = self.adaptor.errorNode(input, start, stop, exc)
if node is not None:
-            dbg.errorNode(node)
+            self.dbg.errorNode(node)

return node

@@ -387,7 +391,7 @@ class DebugTreeAdaptor(TreeAdaptor):
## support

def getDebugListener(self):
-        return dbg
+        return self.dbg

def setDebugListener(self, dbg):
self.dbg = dbg
@@ -486,6 +490,9 @@ class DebugEventListener(object):
what token was seen at that depth.  A remote debugger cannot look
ahead into a file it doesn't have so LT events must pass the token
even if the info is redundant.
+        For tree parsers, if the type is UP or DOWN,
+        then the ID is not really meaningful as it's fixed--there is
+        just one UP node and one DOWN navigation node.
"""
pass

@@ -645,15 +652,6 @@ class DebugEventListener(object):
pass


-    def LT(self, i, t):
-        """The tree parser lookedahead.  If the type is UP or DOWN,
-        then the ID is not really meaningful as it's fixed--there is
-        just one UP node and one DOWN navigation node.
-        """
-        pass
-
-
-
## A S T  E v e n t s

def nilNode(self, t):
@@ -1071,11 +1069,10 @@ class DebugEventSocketProxy(DebugEventListener):
def errorNode(self, t):
self.transmit('errorNode\t{}\t{}\t"{}'.format(
self.adaptor.getUniqueID(t),
-             Token.INVALID_TOKEN_TYPE,
+             INVALID_TOKEN_TYPE,
self.escapeNewlines(t.toString())))


-
def createNode(self, node, token=None):
if token is not None:
self.transmit("createNode\t{}\t{}".format(
diff --git a/runtime/Python3/antlr3/recognizers.py b/runtime/Python3/antlr3/recognizers.py
index d9bc761..3bb5f7b 100644
--- a/runtime/Python3/antlr3/recognizers.py
+++ b/runtime/Python3/antlr3/recognizers.py
@@ -141,6 +141,7 @@ class BaseRecognizer(object):
HIDDEN = HIDDEN_CHANNEL

# overridden by generated subclasses
+    grammarFileName = None
tokenNames = None

# The api_version attribute has been introduced in 3.3. If it is not
@@ -1436,6 +1437,7 @@ class ParserRuleReturnScope(RuleReturnScope):
"""

def __init__(self):
+        super().__init__()
self.start = None
self.stop = None
self.tree = None  # only used when output=AST
diff --git a/runtime/Python3/antlr3/streams.py b/runtime/Python3/antlr3/streams.py
index 2cfd77c..e676967 100644
--- a/runtime/Python3/antlr3/streams.py
+++ b/runtime/Python3/antlr3/streams.py
@@ -33,7 +33,7 @@
from io import StringIO

from .constants import DEFAULT_CHANNEL, EOF
-from .tokens import Token, CommonToken
+from .tokens import Token


############################################################################
@@ -191,6 +191,14 @@ class CharStream(IntStream):

EOF = -1

+    def __init__(self):
+        # line number 1..n within the input
+        self._line = 1
+
+        # The index of the character relative to the beginning of the
+        # line 0..n-1
+        self._charPositionInLine = 0
+

def substring(self, start, stop):
"""
@@ -213,30 +221,29 @@ class CharStream(IntStream):
raise NotImplementedError


-    def getLine(self):
+    @property
+    def line(self):
"""ANTLR tracks the line information automatically"""
+        return self._line

-        raise NotImplementedError
-
-
-    def setLine(self, line):
+    @line.setter
+    def line(self, value):
"""
Because this stream can rewind, we need to be able to reset the line
"""
-
-        raise NotImplementedError
+        self._line = value


-    def getCharPositionInLine(self):
+    @property
+    def charPositionInLine(self):
"""
The index of the character relative to the beginning of the line 0..n-1
"""
+        return self._charPositionInLine

-        raise NotImplementedError
-
-
-    def setCharPositionInLine(self, pos):
-        raise NotImplementedError
+    @charPositionInLine.setter
+    def charPositionInLine(self, pos):
+        self._charPositionInLine = pos


class TokenStream(IntStream):
@@ -349,13 +356,6 @@ class ANTLRStringStream(CharStream):
# 0..n-1 index into string of next char
self.p = 0

-        # line number 1..n within the input
-        self._line = 1
-
-        # The index of the character relative to the beginning of the
-        # line 0..n-1
-        self._charPositionInLine = 0
-
# A list of CharStreamState objects that tracks the stream state
# values line, charPositionInLine, and p that can change as you
# move through the input stream.  Indexed from 0..markDepth-1.
@@ -488,21 +488,6 @@ class ANTLRStringStream(CharStream):
return self.strdata[start:stop + 1]


-    @property
-    def line(self):
-        return self._line
-
-
-
-    @property
-    def charPositionInLine(self):
-        return self._charPositionInLine
-
-    @charPositionInLine.setter
-    def charPositionInLine(self, pos):
-        self._charPositionInLine = pos
-
-
def getSourceName(self):
return self.name

@@ -1390,8 +1375,8 @@ class TokenRewriteStream(CommonTokenStream):

elif not disjoint and not same:
raise ValueError(
-                        "replace op boundaries of %s overlap with previous %s"
-                        % (rop, prevRop))
+                        "replace op boundaries of {} overlap with previous {}"
+                        .format(rop, prevRop))

# WALK INSERTS
for i, iop in enumerate(rewrites):
@@ -1421,8 +1406,8 @@ class TokenRewriteStream(CommonTokenStream):

if iop.index >= rop.index and iop.index <= rop.lastIndex:
raise ValueError(
-                        "insert op %s within boundaries of previous %s"
-                        % (iop, rop))
+                        "insert op {} within boundaries of previous {}"
+                        .format(iop, rop))

m = {}
for i, op in enumerate(rewrites):
diff --git a/runtime/Python3/antlr3/tokens.py b/runtime/Python3/antlr3/tokens.py
index a2bd169..11747af 100644
--- a/runtime/Python3/antlr3/tokens.py
+++ b/runtime/Python3/antlr3/tokens.py
@@ -211,7 +211,7 @@ class CommonToken(Token):
return None

if self.start < self.input.size() and self.stop < self.input.size():
-          return self.input.substring(self.start, self.stop)
+            return self.input.substring(self.start, self.stop)

return '<EOF>'

diff --git a/runtime/Python3/antlr3/tree.py b/runtime/Python3/antlr3/tree.py
index c06a89e..ca5754b 100644
--- a/runtime/Python3/antlr3/tree.py
+++ b/runtime/Python3/antlr3/tree.py
@@ -614,8 +614,7 @@ class TreeAdaptor(object):

if (len(args) == 2
and isinstance(args[0], int)
-            and isinstance(args[1], Token)
-            ):
+            and isinstance(args[1], Token)):
# Object create(int tokenType, Token fromToken);
##             warnings.warn(
##                 "Using create() is deprecated, use createFromToken()",
@@ -627,8 +626,7 @@ class TreeAdaptor(object):
if (len(args) == 3
and isinstance(args[0], int)
and isinstance(args[1], Token)
-            and isinstance(args[2], str)
-            ):
+            and isinstance(args[2], str)):
# Object create(int tokenType, Token fromToken, String text);
##             warnings.warn(
##                 "Using create() is deprecated, use createFromToken()",
@@ -639,8 +637,7 @@ class TreeAdaptor(object):

if (len(args) == 2
and isinstance(args[0], int)
-            and isinstance(args[1], str)
-            ):
+            and isinstance(args[1], str)):
# Object create(int tokenType, String text);
##             warnings.warn(
##                 "Using create() is deprecated, use createFromType()",
@@ -650,9 +647,8 @@ class TreeAdaptor(object):
return self.createFromType(args[0], args[1])

raise TypeError(
-            "No create method with this signature found: %s"
-            % (', '.join(type(v).__name__ for v in args))
-            )
+            "No create method with this signature found: {}"
+            .format(', '.join(type(v).__name__ for v in args)))


############################################################################
@@ -690,7 +686,7 @@ class BaseTree(Tree):
be copied as the children are not considered part of this node.
"""

-        Tree.__init__(self)
+        super().__init__()
self.children = []
self.parent = None
self.childIndex = 0
@@ -799,8 +795,7 @@ class BaseTree(Tree):
"""

if (startChildIndex >= len(self.children)
-            or stopChildIndex >= len(self.children)
-            ):
+            or stopChildIndex >= len(self.children)):
raise IndexError("indexes invalid")

replacingHowMany = stopChildIndex - startChildIndex + 1
@@ -849,15 +844,13 @@ class BaseTree(Tree):
def sanityCheckParentAndChildIndexes(self, parent=None, i=-1):
if parent != self.parent:
raise ValueError(
-                "parents don't match; expected %r found %r"
-                % (parent, self.parent)
-                )
+                "parents don't match; expected {!r} found {!r}"
+                .format(parent, self.parent))

if i != self.childIndex:
raise ValueError(
-                "child indexes don't match; expected %d found %d"
-                % (i, self.childIndex)
-                )
+                "child indexes don't match; expected {} found {}"
+                .format(i, self.childIndex))

for idx, child in enumerate(self.children):
child.sanityCheckParentAndChildIndexes(self, idx)
@@ -906,7 +899,7 @@ class BaseTree(Tree):
The first node of list is the root and the last is the parent of
this node.
"""
-        if selfgetParent() is None:
+        if self.getParent() is None:
return None

ancestors = []
@@ -1382,7 +1375,7 @@ class CommonTree(BaseTree):

ret = ''
if not self.isNil():
-            ret += '(%s ' % (self.toString())
+            ret += '({!s} '.format(self)

ret += ' '.join([child.toStringTree() for child in self.children])

@@ -1855,10 +1848,6 @@ class CommonTreeNodeStream(TreeNodeStream):
self.calls = []


-    def __iter__(self):
-        return TreeIterator(self.root, self.adaptor)
-
-
def fillBuffer(self):
"""Walk tree with depth-first-search and fill nodes buffer.
Don't do DOWN, UP nodes if its a list (t is isNil).
@@ -2239,8 +2228,8 @@ class TreeParser(BaseRecognizer):
node to be the root.
"""

-        return _inContext(
-            self.input.getTreeAdaptor(), self.getTokenNames(),
+        return self._inContext(
+            self.input.getTreeAdaptor(), self.tokenNames,
self.input.LT(1), context)

@classmethod
@@ -2825,6 +2814,7 @@ class TreeRuleReturnScope(RuleReturnScope):
"""

def __init__(self):
+        super().__init__()
self.start = None
self.tree = None

diff --git a/runtime/Python3/pylintrc b/runtime/Python3/pylintrc
new file mode 100644
index 0000000..1ded626
--- /dev/null
+++ b/runtime/Python3/pylintrc
@@ -0,0 +1,253 @@
+# lint Python modules using external checkers
+
+[MASTER]
+
+# Specify a configuration file.
+#rcfile=
+
+# Python code to execute, usually for sys.path manipulation such as
+# pygtk.require().
+#init-hook=
+
+# Profiled execution.
+profile=no
+
+# Add <file or directory> to the black list. It should be a base name, not a
+# path. You may set this option multiple times.
+ignore=CVS
+
+# Pickle collected data for later comparisons.
+persistent=yes
+
+# List of plugins (as comma separated values of python modules names) to load,
+# usually to register additional checkers.
+load-plugins=
+
+
+[MESSAGES CONTROL]
+
+# Enable the message, report, category or checker with the given id(s). You can
+# either give multiple identifier separated by comma (,) or put this option
+# multiple time.
+#enable=
+
+# Disable the message, report, category or checker with the given id(s). You
+# can either give multiple identifier separated by comma (,) or put this option
+# multiple time (only on the command line, not in the configuration file where
+# it should appear only once).
+# W0622: Redefining built-in '...'
+# C0103: Invalid name
+# R0904: Too many public methods
+# R0201: Method could be a function
+# C0302: Too many lines in a module
+# R0902: Too many instance attributes
+# R0913: Too many arguments
+# R0912: Too many branches
+# R0903: Too few public methods
+# C0111: Missing docstring
+# W0403: Relative import
+# W0401: Wildcard import
+# W0142: */** magic
+disable=W0622,C0103,R0904,R0201,C0302,R0902,R0913,R0912,R0903,C0111,W0403,W0401,W0142
+
+
+[REPORTS]
+
+# Set the output format. Available formats are text, parseable, colorized, msvs
+# (visual studio) and html
+output-format=text
+
+# Include message's id in output
+include-ids=yes
+
+# Put messages in a separate file for each module / package specified on the
+# command line instead of printing them on stdout. Reports (if any) will be
+# written in a file name "pylint_global.[txt|html]".
+files-output=no
+
+# Tells whether to display a full report or only the messages
+reports=yes
+
+# Python expression which should return a note less than 10 (10 is the highest
+# note). You have access to the variables errors warning, statement which
+# respectively contain the number of errors / warnings messages and the total
+# number of statements analyzed. This is used by the global evaluation report
+# (RP0004).
+evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)
+
+# Add a comment according to your evaluation note. This is used by the global
+# evaluation report (RP0004).
+comment=no
+
+
+[BASIC]
+
+# Required attributes for module, separated by a comma
+required-attributes=
+
+# List of builtins function names that should not be used, separated by a comma
+bad-functions=map,filter,apply,input
+
+# Regular expression which should only match correct module names
+module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$
+
+# Regular expression which should only match correct module level names
+const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$
+
+# Regular expression which should only match correct class names
+class-rgx=[A-Z_][a-zA-Z0-9]+$
+
+# Regular expression which should only match correct function names
+function-rgx=[a-z_][a-z0-9_]{2,30}$
+
+# Regular expression which should only match correct method names
+method-rgx=[a-z_][a-z0-9_]{2,30}$
+
+# Regular expression which should only match correct instance attribute names
+attr-rgx=[a-z_][a-z0-9_]{2,30}$
+
+# Regular expression which should only match correct argument names
+argument-rgx=[a-z_][a-z0-9_]{2,30}$
+
+# Regular expression which should only match correct variable names
+variable-rgx=[a-z_][a-z0-9_]{2,30}$
+
+# Regular expression which should only match correct list comprehension /
+# generator expression variable names
+inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$
+
+# Good variable names which should always be accepted, separated by a comma
+good-names=i,j,k,ex,Run,_
+
+# Bad variable names which should always be refused, separated by a comma
+bad-names=foo,bar,baz,toto,tutu,tata
+
+# Regular expression which should only match functions or classes name which do
+# not require a docstring
+no-docstring-rgx=__.*__
+
+
+[FORMAT]
+
+# Maximum number of characters on a single line.
+max-line-length=80
+
+# Maximum number of lines in a module
+max-module-lines=1000
+
+# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
+# tab).
+indent-string='    '
+
+
+[MISCELLANEOUS]
+
+# List of note tags to take in consideration, separated by a comma.
+notes=FIXME,XXX,TODO
+
+
+[VARIABLES]
+
+# Tells whether we should check for unused import in __init__ files.
+init-import=no
+
+# A regular expression matching the beginning of the name of dummy variables
+# (i.e. not used).
+dummy-variables-rgx=_|dummy
+
+# List of additional names supposed to be defined in builtins. Remember that
+# you should avoid to define new builtins when possible.
+additional-builtins=
+
+
+[SIMILARITIES]
+
+# Minimum lines number of a similarity.
+min-similarity-lines=4
+
+# Ignore comments when computing similarities.
+ignore-comments=yes
+
+# Ignore docstrings when computing similarities.
+ignore-docstrings=yes
+
+
+[TYPECHECK]
+
+# Tells whether missing members accessed in mixin class should be ignored. A
+# mixin class is detected if its name ends with "mixin" (case insensitive).
+ignore-mixin-members=yes
+
+# List of classes names for which member attributes should not be checked
+# (useful for classes with attributes dynamically set).
+ignored-classes=SQLObject
+
+# When zope mode is activated, add a predefined set of Zope acquired attributes
+# to generated-members.
+zope=no
+
+# List of members which are set dynamically and missed by pylint inference
+# system, and so shouldn't trigger E0201 when accessed.
+generated-members=REQUEST,acl_users,aq_parent
+
+
+[CLASSES]
+
+# List of interface methods to ignore, separated by a comma. This is used for
+# instance to not check methods defines in Zope's Interface base class.
+ignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by
+
+# List of method names used to declare (i.e. assign) instance attributes.
+defining-attr-methods=__init__,__new__,setUp
+
+
+[DESIGN]
+
+# Maximum number of arguments for function / method
+max-args=5
+
+# Argument names that match this expression will be ignored. Default to name
+# with leading underscore
+ignored-argument-names=_.*
+
+# Maximum number of locals for function / method body
+max-locals=15
+
+# Maximum number of return / yield for function / method body
+max-returns=6
+
+# Maximum number of branch for function / method body
+max-branchs=12
+
+# Maximum number of statements in function / method body
+max-statements=50
+
+# Maximum number of parents for a class (see R0901).
+max-parents=7
+
+# Maximum number of attributes for a class (see R0902).
+max-attributes=7
+
+# Minimum number of public methods for a class (see R0903).
+min-public-methods=2
+
+# Maximum number of public methods for a class (see R0904).
+max-public-methods=20
+
+
+[IMPORTS]
+
+# Deprecated modules which should not be used, separated by a comma
+deprecated-modules=regsub,string,TERMIOS,Bastion,rexec
+
+# Create a graph of every (i.e. internal and external) dependencies in the
+# given file (report RP0402 must not be disabled)
+import-graph=
+
+# Create a graph of external dependencies in the given file (report RP0402 must
+# not be disabled)
+ext-import-graph=
+
+# Create a graph of internal dependencies in the given file (report RP0402 must
+# not be disabled)
+int-import-graph=

