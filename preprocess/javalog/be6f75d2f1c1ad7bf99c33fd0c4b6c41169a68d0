commit be6f75d2f1c1ad7bf99c33fd0c4b6c41169a68d0
Author:     Alan Condit <acondit@ipns.com>
AuthorDate: Wed Mar 14 15:13:04 2012 -0700
Commit:     Alan Condit <acondit@ipns.com>
CommitDate: Wed Mar 14 15:13:04 2012 -0700

Changed ANTLRReaderStream and ANTLRInputStream to use NSInputStream instead of NSFileHandle

diff --git a/runtime/ObjC/Framework/ANTLRInputStream.h b/runtime/ObjC/Framework/ANTLRInputStream.h
index 7bbdd6f..8f1714f 100644
--- a/runtime/ObjC/Framework/ANTLRInputStream.h
+++ b/runtime/ObjC/Framework/ANTLRInputStream.h
@@ -16,15 +16,15 @@
@property (assign) NSStringEncoding encoding;

+ (id) newANTLRInputStream;
-+ (id) newANTLRInputStream:(NSFileHandle *)anInput;
-+ (id) newANTLRInputStream:(NSFileHandle *)anInput size:(NSInteger)theSize;
-+ (id) newANTLRInputStream:(NSFileHandle *)anInput encoding:(NSStringEncoding)theEncoding;
-+ (id) newANTLRInputStream:(NSFileHandle *)anInput
++ (id) newANTLRInputStream:(NSInputStream *)anInput;
++ (id) newANTLRInputStream:(NSInputStream *)anInput size:(NSInteger)theSize;
++ (id) newANTLRInputStream:(NSInputStream *)anInput encoding:(NSStringEncoding)theEncoding;
++ (id) newANTLRInputStream:(NSInputStream *)anInput
size:(NSInteger)theSize
readBufferSize:(NSInteger)theRBSize
encoding:(NSStringEncoding)theEncoding;
- (id) init;
-- (id) initWithInput:(NSFileHandle *)anInput
+- (id) initWithInput:(NSInputStream *)anInput
size:(NSInteger)theSize
readBufferSize:(NSInteger)theRBSize
encoding:(NSStringEncoding)theEncoding;
diff --git a/runtime/ObjC/Framework/ANTLRInputStream.m b/runtime/ObjC/Framework/ANTLRInputStream.m
index 3d041c5..f9aee0a 100644
--- a/runtime/ObjC/Framework/ANTLRInputStream.m
+++ b/runtime/ObjC/Framework/ANTLRInputStream.m
@@ -19,22 +19,22 @@
return [[ANTLRInputStream alloc] init];
}

-+ (id) newANTLRInputStream:(NSFileHandle *)anInput
++ (id) newANTLRInputStream:(NSInputStream *)anInput
{
return [[ANTLRInputStream alloc] initWithInput:anInput size:ANTLRReaderStream.INITIAL_BUFFER_SIZE readBufferSize:ANTLRReaderStream.READ_BUFFER_SIZE encoding:NSASCIIStringEncoding];
}

-+ (id) newANTLRInputStream:(NSFileHandle *)anInput size:(NSInteger)theSize
++ (id) newANTLRInputStream:(NSInputStream *)anInput size:(NSInteger)theSize
{
return [[ANTLRInputStream alloc] initWithInput:anInput size:theSize readBufferSize:ANTLRReaderStream.READ_BUFFER_SIZE encoding:NSASCIIStringEncoding];
}

-+ (id) newANTLRInputStream:(NSFileHandle *)anInput encoding:(NSStringEncoding)theEncoding
++ (id) newANTLRInputStream:(NSInputStream *)anInput encoding:(NSStringEncoding)theEncoding
{
return [[ANTLRInputStream alloc] initWithInput:anInput size:ANTLRReaderStream.INITIAL_BUFFER_SIZE readBufferSize:ANTLRReaderStream.READ_BUFFER_SIZE encoding:theEncoding];
}

-+ (id) newANTLRInputStream:(NSFileHandle *)anInput
++ (id) newANTLRInputStream:(NSInputStream *)anInput
size:(NSInteger)theSize
readBufferSize:(NSInteger)theRBSize
encoding:(NSStringEncoding)theEncoding
@@ -48,14 +48,14 @@
return self;
}

-- (id) initWithInput:(NSFileHandle *)anInput
+- (id) initWithInput:(NSInputStream *)anInput
size:(NSInteger)theSize
readBufferSize:(NSInteger)theRBSize
encoding:(NSStringEncoding)theEncoding
{
-    ;self = [super initWithReader:anInput size:theSize readBufferSize:theRBSize];
+    self = [super initWithReader:anInput size:theSize readBufferSize:theRBSize];
if ( self != nil ) {
-        //[self load:theSize readBufferSize:theRBSize];
+        //[self load:theSize readBufferSize:theRBSize]; // load called in super class
}
return self;
}
diff --git a/runtime/ObjC/Framework/ANTLRReaderStream.h b/runtime/ObjC/Framework/ANTLRReaderStream.h
index 1dd19d1..4494a87 100644
--- a/runtime/ObjC/Framework/ANTLRReaderStream.h
+++ b/runtime/ObjC/Framework/ANTLRReaderStream.h
@@ -10,13 +10,14 @@
#import "ANTLRStringStream.h"

@interface ANTLRReaderStream : ANTLRStringStream {
-    NSFileHandle *fh;
+    NSInputStream *is;
NSInteger size;
NSInteger rbSize;
//NSData *data; /* ANTLRStringStream has NSString *data */
+    NSInteger p1;
}

-@property (retain) NSFileHandle *fh;
+@property (retain) NSInputStream *is;
@property (assign) NSInteger size;
@property (assign) NSInteger rbSize;
//@property (retain) NSData *data;
@@ -25,11 +26,13 @@
+ (NSInteger) INITIAL_BUFFER_SIZE;

+ (id) newANTLRReaderStream;
-+ (id) newANTLRReaderStream:(NSFileHandle *)r;
-+ (id) newANTLRReaderStream:(NSFileHandle *)r size:(NSInteger)aSize;
-+ (id) newANTLRReaderStream:(NSFileHandle *)r size:(NSInteger)aSize readBufferSize:(NSInteger)aReadChunkSize;
-- (id) initWithReader:(NSFileHandle *)r size:(NSInteger)aSize readBufferSize:(NSInteger)aReadChunkSize;
++ (id) newANTLRReaderStream:(NSInputStream *)r;
++ (id) newANTLRReaderStream:(NSInputStream *)r size:(NSInteger)aSize;
++ (id) newANTLRReaderStream:(NSInputStream *)r size:(NSInteger)aSize readBufferSize:(NSInteger)aReadChunkSize;
+- (id) initWithReader:(NSInputStream *)r size:(NSInteger)aSize readBufferSize:(NSInteger)aReadChunkSize;
- (void) load:(NSInteger)aSize readBufferSize:(NSInteger)aReadChunkSize;
+- (void) setUpStreamForFile;
+- (void) stream:(NSStream *)stream handleEvent:(NSStreamEvent)eventCode;
- (void) close;

@end
diff --git a/runtime/ObjC/Framework/ANTLRReaderStream.m b/runtime/ObjC/Framework/ANTLRReaderStream.m
index a71b827..e24cbd7 100644
--- a/runtime/ObjC/Framework/ANTLRReaderStream.m
+++ b/runtime/ObjC/Framework/ANTLRReaderStream.m
@@ -11,7 +11,7 @@

@implementation ANTLRReaderStream

-@synthesize fh;
+@synthesize is;
@synthesize size;
@synthesize rbSize;

@@ -33,17 +33,17 @@ static NSInteger INITIAL_BUFFER_SIZE = 1024;
return [[ANTLRReaderStream alloc] init];
}

-+ (id) newANTLRReaderStream:(NSFileHandle *)r
++ (id) newANTLRReaderStream:(NSInputStream *)r
{
return [[ANTLRReaderStream alloc] initWithReader:r size:INITIAL_BUFFER_SIZE readBufferSize:READ_BUFFER_SIZE];
}

-+ (id) newANTLRReaderStream:(NSFileHandle *)r size:(NSInteger)aSize
++ (id) newANTLRReaderStream:(NSInputStream *)r size:(NSInteger)aSize
{
return [[ANTLRReaderStream alloc] initWithReader:r size:aSize readBufferSize:READ_BUFFER_SIZE];
}

-+ (id) newANTLRReaderStream:(NSFileHandle *)r size:(NSInteger)aSize readBufferSize:(NSInteger)aReadChunkSize
++ (id) newANTLRReaderStream:(NSInputStream *)r size:(NSInteger)aSize readBufferSize:(NSInteger)aReadChunkSize
{
//    load(r, aSize, aReadChunkSize);
return [[ANTLRReaderStream alloc] initWithReader:r size:aSize readBufferSize:aReadChunkSize];
@@ -53,29 +53,36 @@ static NSInteger INITIAL_BUFFER_SIZE = 1024;
{
self = [super init];
if ( self != nil ) {
-        fh = nil;
+        int p1 = n;  // init from ANTLRStringStream val
+        is = nil;
rbSize = READ_BUFFER_SIZE;
size = INITIAL_BUFFER_SIZE;
}
return self;
}

-- (id) initWithReader:(NSFileHandle *)r size:(NSInteger)aSize readBufferSize:(NSInteger)aReadChunkSize
+- (id) initWithReader:(NSInputStream *)r size:(NSInteger)aSize readBufferSize:(NSInteger)aReadChunkSize
{
self = [super init];
if ( self != nil ) {
-        fh = r;
+        int p1 = n;  // init from ANTLRStringStream val
+        is = r;
rbSize = aSize;
size = aReadChunkSize;
-        [self load:aSize readBufferSize:aReadChunkSize];
+        [is open];
+//        [self setUpStreamForFile];
+        if ( [is hasBytesAvailable] ) {
+            [self load:aSize readBufferSize:aReadChunkSize];
+        }
}
return self;
}

- (void) load:(NSInteger)aSize readBufferSize:(NSInteger)aReadChunkSize
{
-    NSData *retData = nil;
-    if ( fh==nil ) {
+    NSMutableData *retData = nil;
+    uint8_t buf[1024];
+    if ( is==nil ) {
return;
}
if ( aSize<=0 ) {
@@ -87,46 +94,49 @@ static NSInteger INITIAL_BUFFER_SIZE = 1024;
#pragma mark fix these NSLog calls
@try {
int numRead=0;
-        int p1 = 0;
-        retData = [fh readDataToEndOfFile];
-        numRead = [retData length];
+        numRead = [is read:buf maxLength:aReadChunkSize];
+        retData = [NSMutableData dataWithCapacity:numRead];
+        [retData appendBytes:(const void *)buf length:numRead];
NSLog( @"read %d chars; p was %d is now %d", n, p1, (p1+numRead) );
p1 += numRead;
n = p1;
data = [[NSString alloc] initWithData:retData encoding:NSASCIIStringEncoding];
-        NSLog( @"n=%d", n );
+        NSLog( @"n=%d\n", n );
}
@finally {
-        [fh closeFile];
+        [self close];
}
}

-- (void)setUpStreamForFile:(NSString *)path {
+- (void)setUpStreamForFile
+{
// iStream is NSInputStream instance variable
-    NSInputStream *iStream = [[NSInputStream alloc] initWithFileAtPath:path];
-//    [iStream setDelegate:self];
-    [iStream scheduleInRunLoop:[NSRunLoop currentRunLoop]
+//    if ( is == nil )
+//        is = [[NSInputStream alloc] initWithFileAtPath:path];
+    [is setDelegate:self];
+    [is scheduleInRunLoop:[NSRunLoop currentRunLoop]
forMode:NSDefaultRunLoopMode];
-    [iStream open];
+    [is open];
}

- (void)stream:(NSStream *)stream handleEvent:(NSStreamEvent)eventCode
{
NSMutableData *myData = nil;
NSNumber *bytesRead = [NSNumber numberWithInteger:0];
+    uint8_t buf[1024];
switch(eventCode) {
case NSStreamEventHasBytesAvailable:
{
if(!myData) {
myData = [[NSMutableData data] retain];
}
-            uint8_t buf[1024];
unsigned int len = 0;
len = [(NSInputStream *)stream read:buf maxLength:1024];
if(len) {
[myData appendBytes:(const void *)buf length:len];
// bytesRead is an instance variable of type NSNumber.
bytesRead = [NSNumber numberWithInteger:[bytesRead intValue]+len];
+                data = [[NSString alloc] initWithData:myData encoding:NSASCIIStringEncoding];
} else {
NSLog(@"no buffer!");
}
@@ -141,13 +151,14 @@ static NSInteger INITIAL_BUFFER_SIZE = 1024;
stream = nil; // stream is ivar, so reinit it
break;
}
-            // continued
+        // continued
}
}

- (void) close
{
-    [fh closeFile];
+    [is close];
+    is = nil;
}

@end

