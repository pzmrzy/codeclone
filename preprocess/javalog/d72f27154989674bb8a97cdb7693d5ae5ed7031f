commit d72f27154989674bb8a97cdb7693d5ae5ed7031f
Author:     Sam Harwell <sam@tunnelvisionlabs.com>
AuthorDate: Thu Dec 13 17:43:07 2012 -0600
Commit:     Sam Harwell <sam@tunnelvisionlabs.com>
CommitDate: Thu Dec 13 18:00:49 2012 -0600

Clean up return statements (remove extra whitespace, suppress the statement at the end of a method with no return value)

diff --git a/tool/src/main/resources/org/antlr/codegen/templates/Java/Java.stg b/tool/src/main/resources/org/antlr/codegen/templates/Java/Java.stg
index 0632150..4017988 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/Java/Java.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/Java/Java.stg
@@ -346,18 +346,18 @@ lexerSynpred(name) ::= <<

ruleMemoization(name) ::= <<
<if(memoize)>
-if ( state.backtracking>0 && alreadyParsedRule(input, <ruleDescriptor.index>) ) { return <ruleReturnValue()>; }
+if ( state.backtracking>0 && alreadyParsedRule(input, <ruleDescriptor.index>) ) { <returnStatement(({<ruleReturnValue()>}))> }
<endif>
>>

/** How to test for failure and return from rule */
checkRuleBacktrackFailure() ::= <<
-<if(backtracking)>if (state.failed) return <ruleReturnValue()>;<endif>
+<if(backtracking)>if (state.failed) <returnStatement(({<ruleReturnValue()>}))><endif>
>>

/** This rule has failed, exit indicating failure during backtrack */
ruleBacktrackFailure() ::= <<
-<if(backtracking)>if (state.backtracking>0) {state.failed=true; return <ruleReturnValue()>;}<endif>
+<if(backtracking)>if (state.backtracking>0) {state.failed=true; <returnStatement(({<ruleReturnValue()>}))>}<endif>
>>

/** How to generate code for a rule.  This includes any return type
@@ -405,11 +405,19 @@ public final <returnType(ruleDescriptor)> <ruleName>(<ruleDescriptor.parameterSc
<finally>
}
<@postamble()>
-	return <ruleReturnValue()>;
+	<returnStatement(({<ruleReturnValue()>}), false)>
}
// $ANTLR end "<ruleName>"
>>

+returnStatement(returnValue, force=true) ::= <%
+<if(!isEmptyString.(returnValue))>
+	return <returnValue>;
+<elseif(force)>
+	return;
+<endif>
+%>
+
catch(decl,action) ::= <<
catch (<e.decl>) {
<e.action>
@@ -1436,3 +1444,8 @@ codeFileExtension() ::= ".java"

true_value() ::= "true"
false_value() ::= "false"
+
+isEmptyString ::= [
+	"" : true,
+	default : false
+]

