commit b515a97575868eed9d561e699a7092c02e8c95df
Author:     acondit <acondit@parrt.spork>
AuthorDate: Thu Jan 26 14:09:25 2012 -0800
Commit:     acondit <acondit@parrt.spork>
CommitDate: Thu Jan 26 14:09:25 2012 -0800

Edits required to match name changes from renaming files to match java srcs

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 9903]

diff --git a/runtime/ObjC/Framework/ACBTree.m b/runtime/ObjC/Framework/ACBTree.m
index 99c0cda..aac25e1 100644
--- a/runtime/ObjC/Framework/ACBTree.m
+++ b/runtime/ObjC/Framework/ACBTree.m
@@ -9,7 +9,7 @@
#import <Cocoa/Cocoa.h>
#import "ACBTree.h"
#import "AMutableDictionary.h"
-#import "ANTLRRuntimeException.h"
+#import "RuntimeException.h"

@class AMutableDictionary;

diff --git a/runtime/ObjC/Framework/ANTLR.h b/runtime/ObjC/Framework/ANTLR.h
index 3c81fc2..61a730c 100644
--- a/runtime/ObjC/Framework/ANTLR.h
+++ b/runtime/ObjC/Framework/ANTLR.h
@@ -27,88 +27,88 @@
#import <ANTLR/ACBTree.h>
#import <ANTLR/AMutableArray.h>
#import <ANTLR/AMutableDictionary.h>
-#import <ANTLR/ANTLRBaseMapElement.h>
-#import <ANTLR/ANTLRBaseRecognizer.h>
-#import <ANTLR/ANTLRBaseStack.h>
-#import <ANTLR/ANTLRBaseTree.h>
-#import <ANTLR/ANTLRBaseTreeAdaptor.h>
+#import <ANTLR/BaseMapElement.h>
+#import <ANTLR/BaseRecognizer.h>
+#import <ANTLR/BaseStack.h>
+#import <ANTLR/BaseTree.h>
+#import <ANTLR/BaseTreeAdaptor.h>
#import <ANTLR/ANTLRBitSet.h>
-#import <ANTLR/ANTLRBufferedTokenStream.h>
-#import <ANTLR/ANTLRBufferedTreeNodeStream.h>
-#import <ANTLR/ANTLRCharStream.h>
-#import <ANTLR/ANTLRCharStreamState.h>
-#import <ANTLR/ANTLRCommonErrorNode.h>
-#import <ANTLR/ANTLRCommonToken.h>
-#import <ANTLR/ANTLRCommonTokenStream.h>
-#import <ANTLR/ANTLRCommonTree.h>
-#import <ANTLR/ANTLRCommonTreeAdaptor.h>
-#import <ANTLR/ANTLRCommonTreeNodeStream.h>
-#import <ANTLR/ANTLRDFA.h>
-#import <ANTLR/ANTLRDebug.h>
-#import <ANTLR/ANTLRDebugEventProxy.h>
-#import <ANTLR/ANTLRDebugEventListener.h>
-#import <ANTLR/ANTLRDebugParser.h>
-#import <ANTLR/ANTLRDebugTokenStream.h>
-#import <ANTLR/ANTLRDebugTreeAdaptor.h>
-#import <ANTLR/ANTLRDebugTreeNodeStream.h>
-#import <ANTLR/ANTLRDebugTreeParser.h>
-#import <ANTLR/ANTLRDoubleKeyMap.h>
-#import <ANTLR/ANTLREarlyExitException.h>
+#import <ANTLR/BufferedTokenStream.h>
+#import <ANTLR/BufferedTreeNodeStream.h>
+#import <ANTLR/CharStream.h>
+#import <ANTLR/CharStreamState.h>
+#import <ANTLR/CommonErrorNode.h>
+#import <ANTLR/CommonToken.h>
+#import <ANTLR/CommonTokenStream.h>
+#import <ANTLR/CommonTree.h>
+#import <ANTLR/CommonTreeAdaptor.h>
+#import <ANTLR/CommonTreeNodeStream.h>
+#import <ANTLR/DFA.h>
+#import <ANTLR/Debug.h>
+#import <ANTLR/DebugEventSocketProxy.h>
+#import <ANTLR/DebugEventListener.h>
+#import <ANTLR/DebugParser.h>
+#import <ANTLR/DebugTokenStream.h>
+#import <ANTLR/DebugTreeAdaptor.h>
+#import <ANTLR/DebugTreeNodeStream.h>
+#import <ANTLR/DebugTreeParser.h>
+#import <ANTLR/DoubleKeyMap.h>
+#import <ANTLR/EarlyExitException.h>
#import <ANTLR/ANTLRError.h>
-#import <ANTLR/ANTLRFailedPredicateException.h>
-#import <ANTLR/ANTLRFastQueue.h>
+#import <ANTLR/FailedPredicateException.h>
+#import <ANTLR/FastQueue.h>
#import <ANTLR/ANTLRFileStream.h>
-#import <ANTLR/ANTLRHashMap.h>
-#import <ANTLR/ANTLRHashRule.h>
+#import <ANTLR/HashMap.h>
+#import <ANTLR/HashRule.h>
#import <ANTLR/ANTLRInputStream.h>
-#import <ANTLR/ANTLRIntArray.h>
-#import <ANTLR/ANTLRIntStream.h>
-#import <ANTLR/ANTLRLexer.h>
-#import <ANTLR/ANTLRLexerRuleReturnScope.h>
-#import <ANTLR/ANTLRLinkBase.h>
-#import <ANTLR/ANTLRLookaheadStream.h>
-#import <ANTLR/ANTLRMapElement.h>
-#import <ANTLR/ANTLRMap.h>
-#import <ANTLR/ANTLRMismatchedNotSetException.h>
-#import <ANTLR/ANTLRMismatchedRangeException.h>
-#import <ANTLR/ANTLRMismatchedSetException.h>
-#import <ANTLR/ANTLRMismatchedTokenException.h>
-#import <ANTLR/ANTLRMismatchedTreeNodeException.h>
-#import <ANTLR/ANTLRMissingTokenException.h>
-#import <ANTLR/ANTLRNodeMapElement.h>
-#import <ANTLR/ANTLRNoViableAltException.h>
-#import <ANTLR/ANTLRParser.h>
-#import <ANTLR/ANTLRParserRuleReturnScope.h>
-#import <ANTLR/ANTLRPtrBuffer.h>
+#import <ANTLR/IntArray.h>
+#import <ANTLR/IntStream.h>
+#import <ANTLR/Lexer.h>
+#import <ANTLR/LexerRuleReturnScope.h>
+#import <ANTLR/LinkBase.h>
+#import <ANTLR/LookaheadStream.h>
+#import <ANTLR/MapElement.h>
+#import <ANTLR/Map.h>
+#import <ANTLR/MismatchedNotSetException.h>
+#import <ANTLR/MismatchedRangeException.h>
+#import <ANTLR/MismatchedSetException.h>
+#import <ANTLR/MismatchedTokenException.h>
+#import <ANTLR/MismatchedTreeNodeException.h>
+#import <ANTLR/MissingTokenException.h>
+#import <ANTLR/NodeMapElement.h>
+#import <ANTLR/NoViableAltException.h>
+#import <ANTLR/Parser.h>
+#import <ANTLR/ParserRuleReturnScope.h>
+#import <ANTLR/PtrBuffer.h>
#import <ANTLR/ANTLRReaderStream.h>
-#import <ANTLR/ANTLRRecognitionException.h>
-#import <ANTLR/ANTLRRecognizerSharedState.h>
-#import <ANTLR/ANTLRRewriteRuleElementStream.h>
-#import <ANTLR/ANTLRRewriteRuleNodeStream.h>
-#import <ANTLR/ANTLRRewriteRuleSubtreeStream.h>
-#import <ANTLR/ANTLRRewriteRuleTokenStream.h>
-#import <ANTLR/ANTLRRuleMemo.h>
-#import <ANTLR/ANTLRRuleStack.h>
-#import <ANTLR/ANTLRRuleReturnScope.h>
-#import <ANTLR/ANTLRRuntimeException.h>
-#import <ANTLR/ANTLRStreamEnumerator.h>
+#import <ANTLR/RecognitionException.h>
+#import <ANTLR/RecognizerSharedState.h>
+#import <ANTLR/RewriteRuleElementStream.h>
+#import <ANTLR/RewriteRuleNodeStream.h>
+#import <ANTLR/RewriteRuleSubtreeStream.h>
+#import <ANTLR/RewriteRuleTokenStream.h>
+#import <ANTLR/RuleMemo.h>
+#import <ANTLR/RuleStack.h>
+#import <ANTLR/RuleReturnScope.h>
+#import <ANTLR/RuntimeException.h>
+#import <ANTLR/StreamEnumerator.h>
#import <ANTLR/ANTLRStringStream.h>
-#import <ANTLR/ANTLRSymbolStack.h>
-#import <ANTLR/ANTLRToken+DebuggerSupport.h>
-#import <ANTLR/ANTLRToken.h>
-#import <ANTLR/ANTLRTokenRewriteStream.h>
-#import <ANTLR/ANTLRTokenSource.h>
-#import <ANTLR/ANTLRTokenStream.h>
-#import <ANTLR/ANTLRTree.h>
-#import <ANTLR/ANTLRTreeAdaptor.h>
-#import <ANTLR/ANTLRTreeException.h>
-#import <ANTLR/ANTLRTreeIterator.h>
-#import <ANTLR/ANTLRTreeNodeStream.h>
-#import <ANTLR/ANTLRTreeParser.h>
-#import <ANTLR/ANTLRTreeRuleReturnScope.h>
-#import <ANTLR/ANTLRUnbufferedTokenStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStreamState.h>
-#import <ANTLR/ANTLRUniqueIDMap.h>
-#import <ANTLR/ANTLRUnwantedTokenException.h>
+#import <ANTLR/SymbolStack.h>
+#import <ANTLR/Token+DebuggerSupport.h>
+#import <ANTLR/Token.h>
+#import <ANTLR/TokenRewriteStream.h>
+#import <ANTLR/TokenSource.h>
+#import <ANTLR/TokenStream.h>
+#import <ANTLR/Tree.h>
+#import <ANTLR/TreeAdaptor.h>
+#import <ANTLR/TreeException.h>
+#import <ANTLR/TreeIterator.h>
+#import <ANTLR/TreeNodeStream.h>
+#import <ANTLR/TreeParser.h>
+#import <ANTLR/TreeRuleReturnScope.h>
+#import <ANTLR/UnbufferedTokenStream.h>
+//#import <ANTLR/UnbufferedCommonTreeNodeStream.h>
+//#import <ANTLR/UnbufferedCommonTreeNodeStreamState.h>
+#import <ANTLR/UniqueIDMap.h>
+#import <ANTLR/UnwantedTokenException.h>
#import <ANTLR/ArrayIterator.h>
diff --git a/runtime/ObjC/Framework/ANTLRBitSet.h b/runtime/ObjC/Framework/ANTLRBitSet.h
index 8fd75b1..12aa00f 100644
--- a/runtime/ObjC/Framework/ANTLRBitSet.h
+++ b/runtime/ObjC/Framework/ANTLRBitSet.h
@@ -27,7 +27,7 @@

#import <Cocoa/Cocoa.h>
#import <CoreFoundation/CoreFoundation.h>
-#import "ANTLRToken.h"
+#import "Token.h"
#import "AMutableArray.h"

#define BITS (sizeof(NSUInteger) * 8)
@@ -43,14 +43,14 @@

#pragma mark Class Methods

-+ (ANTLRBitSet *) newANTLRBitSet;
-+ (ANTLRBitSet *) newANTLRBitSetWithType:(ANTLRTokenType)type;
++ (ANTLRBitSet *) newBitSet;
++ (ANTLRBitSet *) newBitSetWithType:(TokenType)type;
/** Construct a ANTLRBitSet given the size
* @param nbits The size of the ANTLRBitSet in bits
*/
-+ (ANTLRBitSet *) newANTLRBitSetWithNBits:(NSUInteger)nbits;
-+ (ANTLRBitSet *) newANTLRBitSetWithArray:(AMutableArray *)types;
-+ (ANTLRBitSet *) newANTLRBitSetWithBits:(const unsigned long long *)theBits Count:(NSUInteger)longCount;
++ (ANTLRBitSet *) newBitSetWithNBits:(NSUInteger)nbits;
++ (ANTLRBitSet *) newBitSetWithArray:(AMutableArray *)types;
++ (ANTLRBitSet *) newBitSetWithBits:(const unsigned long long *)theBits Count:(NSUInteger)longCount;

+ (ANTLRBitSet *) of:(NSUInteger)el;
+ (ANTLRBitSet *) of:(NSUInteger)a And2:(NSUInteger)b;
@@ -60,7 +60,7 @@
#pragma mark Initializer

- (ANTLRBitSet *) init;
-- (ANTLRBitSet *) initWithType:(ANTLRTokenType)type;
+- (ANTLRBitSet *) initWithType:(TokenType)type;
- (ANTLRBitSet *) initWithNBits:(NSUInteger)nbits;
- (ANTLRBitSet *) initWithBitVector:(CFMutableBitVectorRef)theBitVector;
- (ANTLRBitSet *) initWithBits:(const unsigned long long const*)theBits Count:(NSUInteger)theCount;
diff --git a/runtime/ObjC/Framework/ANTLRBitSet.m b/runtime/ObjC/Framework/ANTLRBitSet.m
index 3f77e36..170584b 100644
--- a/runtime/ObjC/Framework/ANTLRBitSet.m
+++ b/runtime/ObjC/Framework/ANTLRBitSet.m
@@ -29,12 +29,12 @@
@implementation ANTLRBitSet
#pragma mark Class Methods

-+ (ANTLRBitSet *) newANTLRBitSet
++ (ANTLRBitSet *) newBitSet
{
return [[ANTLRBitSet alloc] init];
}

-+ (ANTLRBitSet *) newANTLRBitSetWithType:(ANTLRTokenType)type
++ (ANTLRBitSet *) newBitSetWithType:(TokenType)type
{
return [[ANTLRBitSet alloc] initWithType:type];
}
@@ -42,17 +42,17 @@
/** Construct a ANTLRBitSet given the size
* @param nbits The size of the ANTLRBitSet in bits
*/
-+ (ANTLRBitSet *) newANTLRBitSetWithNBits:(NSUInteger)nbits
++ (ANTLRBitSet *) newBitSetWithNBits:(NSUInteger)nbits
{
return [[ANTLRBitSet alloc] initWithNBits:nbits];
}

-+ (ANTLRBitSet *) newANTLRBitSetWithArray:(AMutableArray *)types
++ (ANTLRBitSet *) newBitSetWithArray:(AMutableArray *)types
{
return [[ANTLRBitSet alloc] initWithArrayOfBits:types];
}

-+ (ANTLRBitSet *) newANTLRBitSetWithBits:(const unsigned long long *)theBits Count:(NSUInteger)longCount
++ (ANTLRBitSet *) newBitSetWithBits:(const unsigned long long *)theBits Count:(NSUInteger)longCount
{
return [[ANTLRBitSet alloc] initWithBits:theBits Count:longCount];
}
@@ -60,7 +60,7 @@

+ (ANTLRBitSet *) of:(NSUInteger) el
{
-    ANTLRBitSet *s = [ANTLRBitSet newANTLRBitSetWithNBits:(el + 1)];
+    ANTLRBitSet *s = [ANTLRBitSet newBitSetWithNBits:(el + 1)];
[s add:el];
return s;
}
@@ -68,7 +68,7 @@
+ (ANTLRBitSet *) of:(NSUInteger) a And2:(NSUInteger) b
{
NSInteger c = (((a>b)?a:b)+1);
-    ANTLRBitSet *s = [ANTLRBitSet newANTLRBitSetWithNBits:c];
+    ANTLRBitSet *s = [ANTLRBitSet newBitSetWithNBits:c];
[s add:a];
[s add:b];
return s;
@@ -78,7 +78,7 @@
{
NSUInteger d = ((a>b)?a:b);
d = ((c>d)?c:d)+1;
-    ANTLRBitSet *s = [ANTLRBitSet newANTLRBitSetWithNBits:d];
+    ANTLRBitSet *s = [ANTLRBitSet newBitSetWithNBits:d];
[s add:a];
[s add:b];
[s add:c];
@@ -90,7 +90,7 @@
NSUInteger e = ((a>b)?a:b);
NSUInteger f = ((c>d)?c:d);
e = ((e>f)?e:f)+1;
-    ANTLRBitSet *s = [ANTLRBitSet newANTLRBitSetWithNBits:e];
+    ANTLRBitSet *s = [ANTLRBitSet newBitSetWithNBits:e];
[s add:a];
[s add:b];
[s add:c];
@@ -109,7 +109,7 @@
return self;
}

-- (ANTLRBitSet *) initWithType:(ANTLRTokenType)type
+- (ANTLRBitSet *) initWithType:(TokenType)type
{
if ((self = [super init]) != nil) {
bitVector = CFBitVectorCreateMutable(kCFAllocatorDefault,0);
diff --git a/runtime/ObjC/Framework/ANTLRFileStream.h b/runtime/ObjC/Framework/ANTLRFileStream.h
index 6c9a881..a4a931d 100644
--- a/runtime/ObjC/Framework/ANTLRFileStream.h
+++ b/runtime/ObjC/Framework/ANTLRFileStream.h
@@ -29,7 +29,7 @@

/** This is a char buffer stream that is loaded from a file
*  all at once when you construct the object.  This looks very
- *  much like an ANTLReader or ANTLRInputStream, but it's a special case
+ *  much like an ANTLRReader or ANTLRInputStream, but it's a special case
*  since we know the exact size of the object to load.  We can avoid lots
*  of data copying.
*/
diff --git a/runtime/ObjC/Framework/ANTLRFileStream.m b/runtime/ObjC/Framework/ANTLRFileStream.m
index f0e5417..bbb6fb2 100644
--- a/runtime/ObjC/Framework/ANTLRFileStream.m
+++ b/runtime/ObjC/Framework/ANTLRFileStream.m
@@ -28,7 +28,7 @@

/** This is a char buffer stream that is loaded from a file
*  all at once when you construct the object.  This looks very
- *  much like an ANTLReader or ANTLRInputStream, but it's a special case
+ *  much like an ANTLRReader or ANTLRInputStream, but it's a special case
*  since we know the exact size of the object to load.  We can avoid lots
*  of data copying.
*/
diff --git a/runtime/ObjC/Framework/ANTLRStringStream.h b/runtime/ObjC/Framework/ANTLRStringStream.h
index e004a15..e2a9fc0 100644
--- a/runtime/ObjC/Framework/ANTLRStringStream.h
+++ b/runtime/ObjC/Framework/ANTLRStringStream.h
@@ -26,21 +26,21 @@


#import <Cocoa/Cocoa.h>
-#import "ANTLRCharStream.h"
-#import "ANTLRCharStreamState.h"
-#import "ANTLRPtrBuffer.h"
+#import "CharStream.h"
+#import "CharStreamState.h"
+#import "PtrBuffer.h"

-@interface ANTLRStringStream : NSObject < ANTLRCharStream > {
+@interface ANTLRStringStream : NSObject < CharStream > {
NSString *data;
NSInteger n;
NSInteger index;
NSUInteger line;
NSUInteger charPositionInLine;
NSInteger markDepth;
-	ANTLRPtrBuffer *markers;
+	PtrBuffer *markers;
NSInteger lastMarker;
NSString *name;
-    ANTLRCharStreamState *charState;
+    CharStreamState *charState;
}

+ newANTLRStringStream;
@@ -86,8 +86,13 @@
- (NSString *) substring:(NSInteger)startIndex To:(NSInteger)stopIndex;
- (NSString *) substringWithRange:(NSRange) theRange;

-- (ANTLRPtrBuffer *)getMarkers;
-- (void) setMarkers:(ANTLRPtrBuffer *)aMarkerList;
+- (NSUInteger) getLine;
+- (NSUInteger) getCharPositionInLine;
+- (void) setLine:(NSUInteger) aLine;
+- (void) setCharPositionInLine:(NSUInteger) pos;
+
+- (PtrBuffer *)getMarkers;
+- (void) setMarkers:(PtrBuffer *)aMarkerList;

- (NSString *)getSourceName;

@@ -101,9 +106,9 @@
@property (assign) NSUInteger line;
@property (assign) NSUInteger charPositionInLine;
@property (assign) NSInteger markDepth;
-@property (retain) ANTLRPtrBuffer *markers;
+@property (retain) PtrBuffer *markers;
@property (assign) NSInteger lastMarker;
@property (retain) NSString *name;
-@property (retain) ANTLRCharStreamState *charState;
+@property (retain) CharStreamState *charState;

@end
diff --git a/runtime/ObjC/Framework/ANTLRStringStream.m b/runtime/ObjC/Framework/ANTLRStringStream.m
index 1e1da4d..9010b4a 100644
--- a/runtime/ObjC/Framework/ANTLRStringStream.m
+++ b/runtime/ObjC/Framework/ANTLRStringStream.m
@@ -67,10 +67,10 @@ extern NSInteger debug;
line = 1;
charPositionInLine = 0;
markDepth = 0;
-		markers = [ANTLRPtrBuffer newANTLRPtrBufferWithLen:10];
+		markers = [PtrBuffer newPtrBufferWithLen:10];
[markers retain];
[markers addObject:[NSNull null]]; // ANTLR generates code that assumes markers to be 1-based,
-        charState = [[ANTLRCharStreamState newANTLRCharStreamState] retain];
+        charState = [[CharStreamState newCharStreamState] retain];
}
return self;
}
@@ -85,9 +85,9 @@ extern NSInteger debug;
line = 1;
charPositionInLine = 0;
markDepth = 0;
-		markers = [[ANTLRPtrBuffer newANTLRPtrBufferWithLen:10] retain];
+		markers = [[PtrBuffer newPtrBufferWithLen:10] retain];
[markers addObject:[NSNull null]]; // ANTLR generates code that assumes markers to be 1-based,
-        charState = [[ANTLRCharStreamState newANTLRCharStreamState] retain];
+        charState = [[CharStreamState newCharStreamState] retain];
}
return self;
}
@@ -102,10 +102,10 @@ extern NSInteger debug;
line = 1;
charPositionInLine = 0;
markDepth = 0;
-		markers = [ANTLRPtrBuffer newANTLRPtrBufferWithLen:100];
+		markers = [PtrBuffer newPtrBufferWithLen:100];
[markers retain];
[markers addObject:[NSNull null]]; // ANTLR generates code that assumes markers to be 1-based,
-        charState = [[ANTLRCharStreamState newANTLRCharStreamState] retain];
+        charState = [[CharStreamState newCharStreamState] retain];
}
return self;
}
@@ -119,10 +119,10 @@ extern NSInteger debug;
line = 1;
charPositionInLine = 0;
markDepth = 0;
-		markers = [ANTLRPtrBuffer newANTLRPtrBufferWithLen:100];
+		markers = [PtrBuffer newPtrBufferWithLen:100];
[markers retain];
[markers addObject:[NSNull null]]; // ANTLR generates code that assumes markers to be 1-based,
-        charState = [[ANTLRCharStreamState newANTLRCharStreamState] retain];
+        charState = [[CharStreamState newCharStreamState] retain];
}
return( self );
}
@@ -204,11 +204,11 @@ extern NSInteger debug;
if ( i < 0 ) {
i++;
if ( index+i-1 < 0 ) {
-		    return ANTLRCharStreamEOF;
+		    return CharStreamEOF;
}
}
if ( (index+i-1) >= n ) {
-		return ANTLRCharStreamEOF;
+		return CharStreamEOF;
}
c = [data characterAtIndex:index+i-1];
return (NSInteger)c;
@@ -231,15 +231,15 @@ extern NSInteger debug;
{
if (debug > 1) NSLog(@"mark entry -- markers=%x, markDepth=%d\n", (int)markers, markDepth);
if ( markers == nil ) {
-        markers = [ANTLRPtrBuffer newANTLRPtrBufferWithLen:100];
+        markers = [PtrBuffer newPtrBufferWithLen:100];
[markers addObject:[NSNull null]]; // ANTLR generates code that assumes markers to be 1-based,
markDepth = markers.ptr;
}
markDepth++;
-	ANTLRCharStreamState *State = nil;
+	CharStreamState *State = nil;
if ( (markDepth) >= [markers count] ) {
if ( markDepth > 1 ) {
-            State = [ANTLRCharStreamState newANTLRCharStreamState];
+            State = [CharStreamState newCharStreamState];
[State retain];
}
if ( markDepth == 1 )
@@ -251,7 +251,7 @@ extern NSInteger debug;
if (debug > 1) NSLog(@"mark retrieve markers=%x markDepth=%d\n", (NSUInteger)markers, markDepth);
State = [markers objectAtIndex:markDepth];
[State retain];
-        State = (ANTLRCharStreamState *)[markers objectAtIndex:markDepth];
+        State = (CharStreamState *)[markers objectAtIndex:markDepth];
if (debug > 1) NSLog(@"mark retrieve charState %x from %d, index=%d, line=%d, charPositionInLine=%d\n", (NSUInteger)State, markDepth, State.index, State.line, State.charPositionInLine);
}
State.index = index;
@@ -264,12 +264,12 @@ extern NSInteger debug;

- (void) rewind:(NSInteger) marker
{
-    ANTLRCharStreamState *State;
+    CharStreamState *State;
if (debug > 1) NSLog(@"rewind entry -- markers=%x marker=%d\n", (NSUInteger)markers, marker);
if ( marker == 1 )
State = charState;
else
-        State = (ANTLRCharStreamState *)[markers objectAtIndex:marker];
+        State = (CharStreamState *)[markers objectAtIndex:marker];
if (debug > 1) NSLog(@"rewind entry -- marker=%d charState=%x, index=%d, line=%d, charPositionInLine=%d\n", marker, (NSUInteger)charState, charState.index, charState.line, charState.charPositionInLine);
// restore stream charState
[self seek:State.index];
@@ -327,12 +327,32 @@ extern NSInteger debug;
}


-- (ANTLRPtrBuffer *)getMarkers
+- (NSUInteger) getLine
+{
+    return line;
+}
+
+- (NSUInteger) getCharPositionInLine
+{
+    return charPositionInLine;
+}
+
+- (void) setLine:(NSUInteger) aLine
+{
+    line = aLine;
+}
+
+- (void) setCharPositionInLine:(NSUInteger) pos
+{
+    charPositionInLine = pos;
+}
+
+- (PtrBuffer *)getMarkers
{
return markers;
}

-- (void) setMarkers:(ANTLRPtrBuffer *)aMarkerList
+- (void) setMarkers:(PtrBuffer *)aMarkerList
{
markers = aMarkerList;
}
@@ -352,12 +372,12 @@ extern NSInteger debug;
}


-- (ANTLRCharStreamState *)getCharState
+- (CharStreamState *)getCharState
{
return charState;
}

-- (void) setCharState:(ANTLRCharStreamState *)aCharState
+- (void) setCharState:(CharStreamState *)aCharState
{
charState = aCharState;
}
diff --git a/runtime/ObjC/Framework/ArrayIterator.m b/runtime/ObjC/Framework/ArrayIterator.m
index 45d1e6a..42d3f7a 100644
--- a/runtime/ObjC/Framework/ArrayIterator.m
+++ b/runtime/ObjC/Framework/ArrayIterator.m
@@ -27,7 +27,7 @@
*/
#import "AMutableArray.h"
#import "ArrayIterator.h"
-#import "ANTLRRuntimeException.h"
+#import "RuntimeException.h"

@class AMutableArray;

@@ -167,7 +167,7 @@

- (void) removeObjectAtIndex:(NSInteger)idx
{
-    @throw [ANTLRUnsupportedOperationException newException:@"Cant remove object from ArrayIterator"];
+    @throw [UnsupportedOperationException newException:@"Cant remove object from ArrayIterator"];
}

- (NSInteger) count
diff --git a/runtime/ObjC/Framework/BaseRecognizer.h b/runtime/ObjC/Framework/BaseRecognizer.h
index 346a857..c2c769e 100644
--- a/runtime/ObjC/Framework/BaseRecognizer.h
+++ b/runtime/ObjC/Framework/BaseRecognizer.h
@@ -28,7 +28,7 @@
#import <Cocoa/Cocoa.h>
#import <Foundation/Foundation.h>

-#import "ANTLRIntStream.h"
+#import "IntStream.h"
#import "AMutableArray.h"

// This is an abstract superclass for lexers and parsers.
@@ -37,23 +37,23 @@
#define ANTLR_MEMO_RULE_UNKNOWN -1
#define ANTLR_INITIAL_FOLLOW_STACK_SIZE 100

-#import "ANTLRMapElement.h"
+#import "MapElement.h"
#import "ANTLRBitSet.h"
-#import "ANTLRToken.h"
-#import "ANTLRRecognizerSharedState.h"
-#import "ANTLRRecognitionException.h"
-#import "ANTLRMissingTokenException.h"
-#import "ANTLRMismatchedTokenException.h"
-#import "ANTLRMismatchedTreeNodeException.h"
-#import "ANTLRUnwantedTokenException.h"
-#import "ANTLRNoViableAltException.h"
-#import "ANTLREarlyExitException.h"
-#import "ANTLRMismatchedSetException.h"
-#import "ANTLRMismatchedNotSetException.h"
-#import "ANTLRFailedPredicateException.h"
-
-@interface ANTLRBaseRecognizer : NSObject {
-    __strong ANTLRRecognizerSharedState *state;  // the state of this recognizer. Might be shared with other recognizers, e.g. in grammar import scenarios.
+#import "Token.h"
+#import "RecognizerSharedState.h"
+#import "RecognitionException.h"
+#import "MissingTokenException.h"
+#import "MismatchedTokenException.h"
+#import "MismatchedTreeNodeException.h"
+#import "UnwantedTokenException.h"
+#import "NoViableAltException.h"
+#import "EarlyExitException.h"
+#import "MismatchedSetException.h"
+#import "MismatchedNotSetException.h"
+#import "FailedPredicateException.h"
+
+@interface BaseRecognizer : NSObject {
+    __strong RecognizerSharedState *state;  // the state of this recognizer. Might be shared with other recognizers, e.g. in grammar import scenarios.
__strong NSString *grammarFileName;          // where did the grammar come from. filled in by codegeneration
__strong NSString *sourceName;
__strong AMutableArray *tokenNames;
@@ -61,9 +61,9 @@

+ (void) initialize;

-+ (ANTLRBaseRecognizer *) newANTLRBaseRecognizer;
-+ (ANTLRBaseRecognizer *) newANTLRBaseRecognizerWithRuleLen:(NSInteger)aLen;
-+ (ANTLRBaseRecognizer *) newANTLRBaseRecognizer:(ANTLRRecognizerSharedState *)aState;
++ (BaseRecognizer *) newBaseRecognizer;
++ (BaseRecognizer *) newBaseRecognizerWithRuleLen:(NSInteger)aLen;
++ (BaseRecognizer *) newBaseRecognizer:(RecognizerSharedState *)aState;

+ (AMutableArray *)getTokenNames;
+ (void)setTokenNames:(NSArray *)aTokNamArray;
@@ -71,7 +71,7 @@

- (id) init;
- (id) initWithLen:(NSInteger)aLen;
-- (id) initWithState:(ANTLRRecognizerSharedState *)aState;
+- (id) initWithState:(RecognizerSharedState *)aState;

- (void) dealloc;

@@ -82,8 +82,8 @@
- (BOOL) getFailed;
- (void) setFailed: (BOOL) flag;

-- (ANTLRRecognizerSharedState *) getState;
-- (void) setState:(ANTLRRecognizerSharedState *) theState;
+- (RecognizerSharedState *) getState;
+- (void) setState:(RecognizerSharedState *) theState;

// reset this recognizer - might be extended by codegeneration/grammar
- (void) reset;
@@ -102,20 +102,20 @@
- (void)skip;

// do actual matching of tokens/characters
-- (id) match:(id<ANTLRIntStream>)anInput TokenType:(NSInteger)ttype Follow:(ANTLRBitSet *)follow;
-- (void) matchAny:(id<ANTLRIntStream>)anInput;
-- (BOOL) mismatchIsUnwantedToken:(id<ANTLRIntStream>)anInput TokenType:(NSInteger) ttype;
-- (BOOL) mismatchIsMissingToken:(id<ANTLRIntStream>)anInput Follow:(ANTLRBitSet *)follow;
+- (id) match:(id<IntStream>)anInput TokenType:(NSInteger)ttype Follow:(ANTLRBitSet *)follow;
+- (void) matchAny:(id<IntStream>)anInput;
+- (BOOL) mismatchIsUnwantedToken:(id<IntStream>)anInput TokenType:(NSInteger) ttype;
+- (BOOL) mismatchIsMissingToken:(id<IntStream>)anInput Follow:(ANTLRBitSet *)follow;

// error reporting and recovery
-- (void) reportError:(ANTLRRecognitionException *)e;
-- (void) displayRecognitionError:(AMutableArray *)theTokNams Exception:(ANTLRRecognitionException *)e;
-- (NSString *)getErrorMessage:(ANTLRRecognitionException *)e TokenNames:(AMutableArray *)theTokNams;
+- (void) reportError:(RecognitionException *)e;
+- (void) displayRecognitionError:(AMutableArray *)theTokNams Exception:(RecognitionException *)e;
+- (NSString *)getErrorMessage:(RecognitionException *)e TokenNames:(AMutableArray *)theTokNams;
- (NSInteger) getNumberOfSyntaxErrors;
-- (NSString *)getErrorHeader:(ANTLRRecognitionException *)e;
-- (NSString *)getTokenErrorDisplay:(id<ANTLRToken>)t;
+- (NSString *)getErrorHeader:(RecognitionException *)e;
+- (NSString *)getTokenErrorDisplay:(id<Token>)t;
- (void) emitErrorMessage:(NSString *)msg;
-- (void) recover:(id<ANTLRIntStream>)anInput Exception:(ANTLRRecognitionException *)e;
+- (void) recover:(id<IntStream>)anInput Exception:(RecognitionException *)e;

// begin hooks for debugger
- (void) beginResync;
@@ -127,29 +127,29 @@
- (ANTLRBitSet *)computeContextSensitiveRuleFOLLOW;
- (ANTLRBitSet *)combineFollows:(BOOL) exact;

-- (id<ANTLRToken>) recoverFromMismatchedToken:(id<ANTLRIntStream>)anInput
+- (id<Token>) recoverFromMismatchedToken:(id<IntStream>)anInput
TokenType:(NSInteger)ttype
Follow:(ANTLRBitSet *)follow;

-- (id<ANTLRToken>)recoverFromMismatchedSet:(id<ANTLRIntStream>)anInput
-                                    Exception:(ANTLRRecognitionException *)e
+- (id<Token>)recoverFromMismatchedSet:(id<IntStream>)anInput
+                                    Exception:(RecognitionException *)e
Follow:(ANTLRBitSet *)follow;

-- (id) getCurrentInputSymbol:(id<ANTLRIntStream>)anInput;
-- (id) getMissingSymbol:(id<ANTLRIntStream>)anInput
-              Exception:(ANTLRRecognitionException *)e
+- (id) getCurrentInputSymbol:(id<IntStream>)anInput;
+- (id) getMissingSymbol:(id<IntStream>)anInput
+              Exception:(RecognitionException *)e
TokenType:(NSInteger) expectedTokenType
Follow:(ANTLRBitSet *)follow;

// helper methods for recovery. try to resync somewhere
-- (void) consumeUntilTType:(id<ANTLRIntStream>)anInput TokenType:(NSInteger)ttype;
-- (void) consumeUntilFollow:(id<ANTLRIntStream>)anInput Follow:(ANTLRBitSet *)bitSet;
+- (void) consumeUntilTType:(id<IntStream>)anInput TokenType:(NSInteger)ttype;
+- (void) consumeUntilFollow:(id<IntStream>)anInput Follow:(ANTLRBitSet *)bitSet;
- (void) pushFollow:(ANTLRBitSet *)fset;
- (ANTLRBitSet *)popFollow;

// to be used by the debugger to do reporting. maybe hook in incremental stuff here, too.
- (AMutableArray *) getRuleInvocationStack;
-- (AMutableArray *) getRuleInvocationStack:(ANTLRRecognitionException *)exception
+- (AMutableArray *) getRuleInvocationStack:(RecognitionException *)exception
Recognizer:(NSString *)recognizerClassName;

- (AMutableArray *) getTokenNames;
@@ -158,8 +158,8 @@
- (AMutableArray *) toStrings:(NSArray *)tokens;
// support for memoization
- (NSInteger) getRuleMemoization:(NSInteger)ruleIndex StartIndex:(NSInteger)ruleStartIndex;
-- (BOOL) alreadyParsedRule:(id<ANTLRIntStream>)anInput RuleIndex:(NSInteger)ruleIndex;
-- (void) memoize:(id<ANTLRIntStream>)anInput
+- (BOOL) alreadyParsedRule:(id<IntStream>)anInput RuleIndex:(NSInteger)ruleIndex;
+- (void) memoize:(id<IntStream>)anInput
RuleIndex:(NSInteger)ruleIndex
StartIndex:(NSInteger)ruleStartIndex;
- (NSInteger) getRuleMemoizationCacheSize;
@@ -170,9 +170,9 @@
// support for syntactic predicates. these are called indirectly to support funky stuff in grammars,
// like supplying selectors instead of writing code directly into the actions of the grammar.
- (BOOL) evaluateSyntacticPredicate:(SEL)synpredFragment;
-// stream:(id<ANTLRIntStream>)anInput;
+// stream:(id<IntStream>)anInput;

-@property (retain) ANTLRRecognizerSharedState *state;
+@property (retain) RecognizerSharedState *state;
@property (retain) NSString *grammarFileName;
@property (retain) NSString *sourceName;
@property (retain) AMutableArray *tokenNames;
diff --git a/runtime/ObjC/Framework/BaseRecognizer.m b/runtime/ObjC/Framework/BaseRecognizer.m
index 573e0dc..62a4ed5 100644
--- a/runtime/ObjC/Framework/BaseRecognizer.m
+++ b/runtime/ObjC/Framework/BaseRecognizer.m
@@ -1,5 +1,5 @@
//
-//  ANTLRBaseRecognizer.m
+//  BaseRecognizer.m
//  ANTLR
//
//  Created by Alan Condit on 6/16/10.
@@ -29,15 +29,15 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRBaseRecognizer.h"
-#import "ANTLRHashRule.h"
-#import "ANTLRRuleMemo.h"
-#import "ANTLRCommonToken.h"
-#import "ANTLRMap.h"
+#import "BaseRecognizer.h"
+#import "HashRule.h"
+#import "RuleMemo.h"
+#import "CommonToken.h"
+#import "Map.h"

extern NSInteger debug;

-@implementation ANTLRBaseRecognizer
+@implementation BaseRecognizer

static AMutableArray *_tokenNames;
static NSString *_grammarFileName;
@@ -56,19 +56,19 @@ static NSString *NEXT_TOKEN_RULE_NAME;
[NEXT_TOKEN_RULE_NAME retain];
}

-+ (ANTLRBaseRecognizer *) newANTLRBaseRecognizer
++ (BaseRecognizer *) newBaseRecognizer
{
-    return [[ANTLRBaseRecognizer alloc] init];
+    return [[BaseRecognizer alloc] init];
}

-+ (ANTLRBaseRecognizer *) newANTLRBaseRecognizerWithRuleLen:(NSInteger)aLen
++ (BaseRecognizer *) newBaseRecognizerWithRuleLen:(NSInteger)aLen
{
-    return [[ANTLRBaseRecognizer alloc] initWithLen:aLen];
+    return [[BaseRecognizer alloc] initWithLen:aLen];
}

-+ (ANTLRBaseRecognizer *) newANTLRBaseRecognizer:(ANTLRRecognizerSharedState *)aState
++ (BaseRecognizer *) newBaseRecognizer:(RecognizerSharedState *)aState
{
-	return [[ANTLRBaseRecognizer alloc] initWithState:aState];
+	return [[BaseRecognizer alloc] initWithState:aState];
}

+ (AMutableArray *)getTokenNames
@@ -98,7 +98,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
{
if ((self = [super init]) != nil) {
if (state == nil) {
-            state = [[ANTLRRecognizerSharedState newANTLRRecognizerSharedState] retain];
+            state = [[RecognizerSharedState newRecognizerSharedState] retain];
}
tokenNames = _tokenNames;
if ( tokenNames ) [tokenNames retain];
@@ -119,7 +119,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
{
if ((self = [super init]) != nil) {
if (state == nil) {
-            state = [[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:aLen] retain];
+            state = [[RecognizerSharedState newRecognizerSharedStateWithRuleLen:aLen] retain];
}
tokenNames = _tokenNames;
if ( tokenNames ) [tokenNames retain];
@@ -136,12 +136,12 @@ static NSString *NEXT_TOKEN_RULE_NAME;
return self;
}

-- (id) initWithState:(ANTLRRecognizerSharedState *)aState
+- (id) initWithState:(RecognizerSharedState *)aState
{
if ((self = [super init]) != nil) {
state = aState;
if (state == nil) {
-            state = [ANTLRRecognizerSharedState newANTLRRecognizerSharedState];
+            state = [RecognizerSharedState newRecognizerSharedState];
}
[state retain];
tokenNames = _tokenNames;
@@ -162,7 +162,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
- (void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRBaseRecognizer" );
+    NSLog( @"called dealloc in BaseRecognizer" );
#endif
if ( grammarFileName ) [grammarFileName release];
if ( tokenNames ) [tokenNames release];
@@ -203,12 +203,12 @@ static NSString *NEXT_TOKEN_RULE_NAME;
[state setFailed:flag];
}

-- (ANTLRRecognizerSharedState *) getState
+- (RecognizerSharedState *) getState
{
return state;
}

-- (void) setState:(ANTLRRecognizerSharedState *) theState
+- (void) setState:(RecognizerSharedState *) theState
{
if (state != theState) {
if ( state ) [state release];
@@ -227,7 +227,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
return;
}

--(id) match:(id<ANTLRIntStream>)anInput TokenType:(NSInteger)ttype Follow:(ANTLRBitSet *)follow
+-(id) match:(id<IntStream>)anInput TokenType:(NSInteger)ttype Follow:(ANTLRBitSet *)follow
{
id matchedSymbol = [self getCurrentInputSymbol:anInput];
if ([anInput LA:1] == ttype) {
@@ -244,19 +244,19 @@ static NSString *NEXT_TOKEN_RULE_NAME;
return matchedSymbol;
}

--(void) matchAny:(id<ANTLRIntStream>)anInput
+-(void) matchAny:(id<IntStream>)anInput
{
state.errorRecovery = NO;
state.failed = NO;
[anInput consume];
}

--(BOOL) mismatchIsUnwantedToken:(id<ANTLRIntStream>)anInput TokenType:(NSInteger)ttype
+-(BOOL) mismatchIsUnwantedToken:(id<IntStream>)anInput TokenType:(NSInteger)ttype
{
return [anInput LA:2] == ttype;
}

--(BOOL) mismatchIsMissingToken:(id<ANTLRIntStream>)anInput Follow:(ANTLRBitSet *) follow
+-(BOOL) mismatchIsMissingToken:(id<IntStream>)anInput Follow:(ANTLRBitSet *) follow
{
if ( follow == nil ) {
// we have no information about the follow; we can only consume
@@ -264,11 +264,11 @@ static NSString *NEXT_TOKEN_RULE_NAME;
return NO;
}
// compute what can follow this grammar element reference
-    if ( [follow member:ANTLRTokenTypeEOR] ) {
+    if ( [follow member:TokenTypeEOR] ) {
ANTLRBitSet *viableTokensFollowingThisRule = [self computeContextSensitiveRuleFOLLOW];
follow = [follow or:viableTokensFollowingThisRule];
if ( state._fsp >= 0 ) { // remove EOR if we're not the start symbol
-            [follow remove:(ANTLRTokenTypeEOR)];
+            [follow remove:(TokenTypeEOR)];
}
}
// if current token is consistent with what could come after set
@@ -281,7 +281,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
// BitSet cannot handle negative numbers like -1 (EOF) so I leave EOR
// in follow set to indicate that the fall of the start symbol is
// in the set (EOF can follow).
-    if ( [follow member:[anInput LA:1]] || [follow member:ANTLRTokenTypeEOR] ) {
+    if ( [follow member:[anInput LA:1]] || [follow member:TokenTypeEOR] ) {
//System.out.println("LT(1)=="+((TokenStream)input).LT(1)+" is consistent with what follows; inserting...");
return YES;
}
@@ -303,7 +303,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
*
*  If you override, make sure to update syntaxErrors if you care about that.
*/
--(void) reportError:(ANTLRRecognitionException *) e
+-(void) reportError:(RecognitionException *) e
{
// if we've already reported an error and have not matched a token
// yet successfully, don't report any errors.
@@ -317,7 +317,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
[self displayRecognitionError:[self getTokenNames] Exception:e];
}

--(void) displayRecognitionError:(AMutableArray *)theTokNams Exception:(ANTLRRecognitionException *)e
+-(void) displayRecognitionError:(AMutableArray *)theTokNams Exception:(RecognitionException *)e
{
NSString *hdr = [self getErrorHeader:e];
NSString *msg = [self getErrorMessage:e TokenNames:theTokNams];
@@ -346,14 +346,14 @@ static NSString *NEXT_TOKEN_RULE_NAME;
*  Override this to change the message generated for one or more
*  exception types.
*/
-- (NSString *)getErrorMessage:(ANTLRRecognitionException *)e TokenNames:(AMutableArray *)theTokNams
+- (NSString *)getErrorMessage:(RecognitionException *)e TokenNames:(AMutableArray *)theTokNams
{
// NSString *msg = [e getMessage];
NSString *msg;
-    if ( [e isKindOfClass:[ANTLRUnwantedTokenException class]] ) {
-        ANTLRUnwantedTokenException *ute = (ANTLRUnwantedTokenException *)e;
+    if ( [e isKindOfClass:[UnwantedTokenException class]] ) {
+        UnwantedTokenException *ute = (UnwantedTokenException *)e;
NSString *tokenName=@"<unknown>";
-        if ( ute.expecting == ANTLRTokenTypeEOF ) {
+        if ( ute.expecting == TokenTypeEOF ) {
tokenName = @"EOF";
}
else {
@@ -362,10 +362,10 @@ static NSString *NEXT_TOKEN_RULE_NAME;
msg = [NSString stringWithFormat:@"extraneous input %@ expecting %@", [self getTokenErrorDisplay:[ute getUnexpectedToken]],
tokenName];
}
-    else if ( [e isKindOfClass:[ANTLRMissingTokenException class] ] ) {
-        ANTLRMissingTokenException *mte = (ANTLRMissingTokenException *)e;
+    else if ( [e isKindOfClass:[MissingTokenException class] ] ) {
+        MissingTokenException *mte = (MissingTokenException *)e;
NSString *tokenName=@"<unknown>";
-        if ( mte.expecting== ANTLRTokenTypeEOF ) {
+        if ( mte.expecting== TokenTypeEOF ) {
tokenName = @"EOF";
}
else {
@@ -373,10 +373,10 @@ static NSString *NEXT_TOKEN_RULE_NAME;
}
msg = [NSString stringWithFormat:@"missing %@ at %@", tokenName, [self getTokenErrorDisplay:(e.token)] ];
}
-    else if ( [e isKindOfClass:[ANTLRMismatchedTokenException class]] ) {
-        ANTLRMismatchedTokenException *mte = (ANTLRMismatchedTokenException *)e;
+    else if ( [e isKindOfClass:[MismatchedTokenException class]] ) {
+        MismatchedTokenException *mte = (MismatchedTokenException *)e;
NSString *tokenName=@"<unknown>";
-        if ( mte.expecting== ANTLRTokenTypeEOF ) {
+        if ( mte.expecting== TokenTypeEOF ) {
tokenName = @"EOF";
}
else {
@@ -384,10 +384,10 @@ static NSString *NEXT_TOKEN_RULE_NAME;
}
msg = [NSString stringWithFormat:@"mismatched input %@ expecting %@",[self getTokenErrorDisplay:(e.token)], tokenName];
}
-    else if ( [e isKindOfClass:[ANTLRMismatchedTreeNodeException class]] ) {
-        ANTLRMismatchedTreeNodeException *mtne = (ANTLRMismatchedTreeNodeException *)e;
+    else if ( [e isKindOfClass:[MismatchedTreeNodeException class]] ) {
+        MismatchedTreeNodeException *mtne = (MismatchedTreeNodeException *)e;
NSString *tokenName=@"<unknown>";
-        if ( mtne.expecting==ANTLRTokenTypeEOF ) {
+        if ( mtne.expecting==TokenTypeEOF ) {
tokenName = @"EOF";
}
else {
@@ -395,33 +395,33 @@ static NSString *NEXT_TOKEN_RULE_NAME;
}
msg = [NSString stringWithFormat:@"mismatched tree node: %@ expecting %@", mtne.node, tokenName];
}
-    else if ( [e isKindOfClass:[ANTLRNoViableAltException class]] ) {
+    else if ( [e isKindOfClass:[NoViableAltException class]] ) {
//NoViableAltException *nvae = (NoViableAltException *)e;
// for development, can add "decision=<<"+nvae.grammarDecisionDescription+">>"
// and "(decision="+nvae.decisionNumber+") and
// "state "+nvae.stateNumber
msg = [NSString stringWithFormat:@"no viable alternative at input %@", [self getTokenErrorDisplay:e.token]];
}
-    else if ( [e isKindOfClass:[ANTLREarlyExitException class]] ) {
-        //ANTLREarlyExitException *eee = (ANTLREarlyExitException *)e;
+    else if ( [e isKindOfClass:[EarlyExitException class]] ) {
+        //EarlyExitException *eee = (EarlyExitException *)e;
// for development, can add "(decision="+eee.decisionNumber+")"
msg =[NSString stringWithFormat: @"required (...)+ loop did not match anything at input ", [self getTokenErrorDisplay:e.token]];
}
-    else if ( [e isKindOfClass:[ANTLRMismatchedSetException class]] ) {
-        ANTLRMismatchedSetException *mse = (ANTLRMismatchedSetException *)e;
+    else if ( [e isKindOfClass:[MismatchedSetException class]] ) {
+        MismatchedSetException *mse = (MismatchedSetException *)e;
msg = [NSString stringWithFormat:@"mismatched input %@ expecting set %@",
[self getTokenErrorDisplay:(e.token)],
mse.expecting];
}
#pragma warning NotSet not yet implemented.
-    else if ( [e isKindOfClass:[ANTLRMismatchedNotSetException class] ] ) {
-        ANTLRMismatchedNotSetException *mse = (ANTLRMismatchedNotSetException *)e;
+    else if ( [e isKindOfClass:[MismatchedNotSetException class] ] ) {
+        MismatchedNotSetException *mse = (MismatchedNotSetException *)e;
msg = [NSString stringWithFormat:@"mismatched input %@ expecting set %@",
[self getTokenErrorDisplay:(e.token)],
mse.expecting];
}
-    else if ( [e isKindOfClass:[ANTLRFailedPredicateException class]] ) {
-        ANTLRFailedPredicateException *fpe = (ANTLRFailedPredicateException *)e;
+    else if ( [e isKindOfClass:[FailedPredicateException class]] ) {
+        FailedPredicateException *fpe = (FailedPredicateException *)e;
msg = [NSString stringWithFormat:@"rule %@ failed predicate: { %@ }?", fpe.ruleName, fpe.predicate];
}
else {
@@ -443,7 +443,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
}

/** What is the error header, normally line/character position information? */
-- (NSString *)getErrorHeader:(ANTLRRecognitionException *)e
+- (NSString *)getErrorHeader:(RecognitionException *)e
{
return [NSString stringWithFormat:@"line %d:%d", e.line, e.charPositionInLine];
}
@@ -456,11 +456,11 @@ static NSString *NEXT_TOKEN_RULE_NAME;
*  your token objects because you don't have to go modify your lexer
*  so that it creates a new Java type.
*/
-- (NSString *)getTokenErrorDisplay:(id<ANTLRToken>)t
+- (NSString *)getTokenErrorDisplay:(id<Token>)t
{
NSString *s = t.text;
if ( s == nil ) {
-        if ( t.type == ANTLRTokenTypeEOF ) {
+        if ( t.type == TokenTypeEOF ) {
s = @"<EOF>";
}
else {
@@ -486,7 +486,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
*  handle mismatched symbol exceptions but there could be a mismatched
*  token that the match() routine could not recover from.
*/
-- (void)recover:(id<ANTLRIntStream>)anInput Exception:(ANTLRRecognitionException *)re
+- (void)recover:(id<IntStream>)anInput Exception:(RecognitionException *)re
{
if ( state.lastErrorIndex == anInput.index ) {
// uh oh, another error at same token index; must be a case
@@ -672,7 +672,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
- (ANTLRBitSet *)combineFollows:(BOOL) exact
{
NSInteger top = state._fsp;
-    ANTLRBitSet *followSet = [[ANTLRBitSet newANTLRBitSet] retain];
+    ANTLRBitSet *followSet = [[ANTLRBitSet newBitSet] retain];
for (int i = top; i >= 0; i--) {
ANTLRBitSet *localFollowSet = (ANTLRBitSet *)[state.following objectAtIndex:i];
/*
@@ -682,11 +682,11 @@ static NSString *NEXT_TOKEN_RULE_NAME;
[followSet orInPlace:localFollowSet];
if ( exact ) {
// can we see end of rule?
-            if ( [localFollowSet member:ANTLRTokenTypeEOR] ) {
+            if ( [localFollowSet member:TokenTypeEOR] ) {
// Only leave EOR in set if at top (start rule); this lets
// us know if have to include follow(start rule); i.e., EOF
if ( i > 0 ) {
-                    [followSet remove:ANTLRTokenTypeEOR];
+                    [followSet remove:TokenTypeEOR];
}
}
else { // can't see end of rule, quit
@@ -726,14 +726,14 @@ static NSString *NEXT_TOKEN_RULE_NAME;
*  is in the set of tokens that can follow the ')' token
*  reference in rule atom.  It can assume that you forgot the ')'.
*/
-- (id<ANTLRToken>)recoverFromMismatchedToken:(id<ANTLRIntStream>)anInput
+- (id<Token>)recoverFromMismatchedToken:(id<IntStream>)anInput
TokenType:(NSInteger)ttype
Follow:(ANTLRBitSet *)follow
{
-    ANTLRRecognitionException *e = nil;
+    RecognitionException *e = nil;
// if next token is what we are looking for then "delete" this token
if ( [self mismatchIsUnwantedToken:anInput TokenType:ttype] ) {
-        e = [ANTLRUnwantedTokenException newException:ttype Stream:anInput];
+        e = [UnwantedTokenException newException:ttype Stream:anInput];
/*
System.err.println("recoverFromMismatchedToken deleting "+
((TokenStream)input).LT(1)+
@@ -750,26 +750,26 @@ static NSString *NEXT_TOKEN_RULE_NAME;
}
// can't recover with single token deletion, try insertion
if ( [self mismatchIsMissingToken:anInput Follow:follow] ) {
-        id<ANTLRToken> inserted = [self getMissingSymbol:anInput Exception:e TokenType:ttype Follow:follow];
-        e = [ANTLRMissingTokenException newException:ttype Stream:anInput With:inserted];
+        id<Token> inserted = [self getMissingSymbol:anInput Exception:e TokenType:ttype Follow:follow];
+        e = [MissingTokenException newException:ttype Stream:anInput With:inserted];
[self reportError:e];  // report after inserting so AW sees the token in the exception
return inserted;
}
// even that didn't work; must throw the exception
-    e = [ANTLRMismatchedTokenException newException:ttype Stream:anInput];
+    e = [MismatchedTokenException newException:ttype Stream:anInput];
@throw e;
}

/** Not currently used */
--(id) recoverFromMismatchedSet:(id<ANTLRIntStream>)anInput
-                     Exception:(ANTLRRecognitionException *)e
+-(id) recoverFromMismatchedSet:(id<IntStream>)anInput
+                     Exception:(RecognitionException *)e
Follow:(ANTLRBitSet *) follow
{
if ( [self mismatchIsMissingToken:anInput Follow:follow] ) {
// System.out.println("missing token");
[self reportError:e];
// we don't know how to conjure up a token for sets yet
-        return [self getMissingSymbol:anInput Exception:e TokenType:ANTLRTokenTypeInvalid Follow:follow];
+        return [self getMissingSymbol:anInput Exception:e TokenType:TokenTypeInvalid Follow:follow];
}
// TODO do single token deletion like above for Token mismatch
@throw e;
@@ -784,7 +784,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
*
*  This is ignored for lexers.
*/
-- (id) getCurrentInputSymbol:(id<ANTLRIntStream>)anInput
+- (id) getCurrentInputSymbol:(id<IntStream>)anInput
{
return nil;
}
@@ -808,8 +808,8 @@ static NSString *NEXT_TOKEN_RULE_NAME;
*  If you change what tokens must be created by the lexer,
*  override this method to create the appropriate tokens.
*/
-- (id)getMissingSymbol:(id<ANTLRIntStream>)anInput
-             Exception:(ANTLRRecognitionException *)e
+- (id)getMissingSymbol:(id<IntStream>)anInput
+             Exception:(RecognitionException *)e
TokenType:(NSInteger)expectedTokenType
Follow:(ANTLRBitSet *)follow
{
@@ -817,22 +817,22 @@ static NSString *NEXT_TOKEN_RULE_NAME;
}


--(void) consumeUntilTType:(id<ANTLRIntStream>)anInput TokenType:(NSInteger)tokenType
+-(void) consumeUntilTType:(id<IntStream>)anInput TokenType:(NSInteger)tokenType
{
//System.out.println("consumeUntil "+tokenType);
int ttype = [anInput LA:1];
-    while (ttype != ANTLRTokenTypeEOF && ttype != tokenType) {
+    while (ttype != TokenTypeEOF && ttype != tokenType) {
[anInput consume];
ttype = [anInput LA:1];
}
}

/** Consume tokens until one matches the given token set */
--(void) consumeUntilFollow:(id<ANTLRIntStream>)anInput Follow:(ANTLRBitSet *)set
+-(void) consumeUntilFollow:(id<IntStream>)anInput Follow:(ANTLRBitSet *)set
{
//System.out.println("consumeUntil("+set.toString(getTokenNames())+")");
int ttype = [anInput LA:1];
-    while (ttype != ANTLRTokenTypeEOF && ![set member:ttype] ) {
+    while (ttype != TokenTypeEOF && ![set member:ttype] ) {
//System.out.println("consume during recover LA(1)="+getTokenNames()[input.LA(1)]);
[anInput consume];
ttype = [anInput LA:1];
@@ -881,7 +881,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
- (AMutableArray *)getRuleInvocationStack
{
NSString *parserClassName = [[self className] retain];
-    return [self getRuleInvocationStack:[ANTLRRecognitionException newException] Recognizer:parserClassName];
+    return [self getRuleInvocationStack:[RecognitionException newException] Recognizer:parserClassName];
}

/** A more general version of getRuleInvocationStack where you can
@@ -891,7 +891,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
*
*  TODO: move to a utility class or something; weird having lexer call this
*/
-- (AMutableArray *)getRuleInvocationStack:(ANTLRRecognitionException *)e
+- (AMutableArray *)getRuleInvocationStack:(RecognitionException *)e
Recognizer:(NSString *)recognizerClassName
{
// char *name;
@@ -999,9 +999,9 @@ static NSString *NEXT_TOKEN_RULE_NAME;
- (NSInteger)getRuleMemoization:(NSInteger)ruleIndex StartIndex:(NSInteger)ruleStartIndex
{
NSNumber *stopIndexI;
-    ANTLRHashRule *aHashRule;
+    HashRule *aHashRule;
if ( (aHashRule = [state.ruleMemo objectAtIndex:ruleIndex]) == nil ) {
-        aHashRule = [ANTLRHashRule newANTLRHashRuleWithLen:17];
+        aHashRule = [HashRule newHashRuleWithLen:17];
[state.ruleMemo insertObject:aHashRule atIndex:ruleIndex];
}
stopIndexI = [aHashRule getRuleMemoStopIndex:ruleStartIndex];
@@ -1020,7 +1020,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
*  this rule and successfully parsed before, then seek ahead to
*  1 past the stop token matched for this rule last time.
*/
-- (BOOL)alreadyParsedRule:(id<ANTLRIntStream>)anInput RuleIndex:(NSInteger)ruleIndex
+- (BOOL)alreadyParsedRule:(id<IntStream>)anInput RuleIndex:(NSInteger)ruleIndex
{
NSInteger aStopIndex = [self getRuleMemoization:ruleIndex StartIndex:anInput.index];
if ( aStopIndex == ANTLR_MEMO_RULE_UNKNOWN ) {
@@ -1041,11 +1041,11 @@ static NSString *NEXT_TOKEN_RULE_NAME;
/** Record whether or not this rule parsed the input at this position
*  successfully.  Use a standard java hashtable for now.
*/
-- (void)memoize:(id<ANTLRIntStream>)anInput
+- (void)memoize:(id<IntStream>)anInput
RuleIndex:(NSInteger)ruleIndex
StartIndex:(NSInteger)ruleStartIndex
{
-    ANTLRRuleStack *aRuleStack;
+    RuleStack *aRuleStack;
NSInteger stopTokenIndex;

aRuleStack = state.ruleMemo;
@@ -1069,8 +1069,8 @@ static NSString *NEXT_TOKEN_RULE_NAME;
*/
- (NSInteger)getRuleMemoizationCacheSize
{
-    ANTLRRuleStack *aRuleStack;
-    ANTLRHashRule *aHashRule;
+    RuleStack *aRuleStack;
+    HashRule *aHashRule;

int aCnt = 0;
aRuleStack = state.ruleMemo;
@@ -1104,9 +1104,9 @@ static NSString *NEXT_TOKEN_RULE_NAME;


// call a syntactic predicate methods using its selector. this way we can support arbitrary synpreds.
-- (BOOL) evaluateSyntacticPredicate:(SEL)synpredFragment // stream:(id<ANTLRIntStream>)input
+- (BOOL) evaluateSyntacticPredicate:(SEL)synpredFragment // stream:(id<IntStream>)input
{
-    id<ANTLRIntStream> input;
+    id<IntStream> input;

state.backtracking++;
// input = state.token.input;
@@ -1115,7 +1115,7 @@ static NSString *NEXT_TOKEN_RULE_NAME;
@try {
[self performSelector:synpredFragment];
}
-    @catch (ANTLRRecognitionException *re) {
+    @catch (RecognitionException *re) {
NSLog(@"impossible synpred: %@", re.name);
}
BOOL success = (state.failed == NO);
diff --git a/runtime/ObjC/Framework/BaseStack.h b/runtime/ObjC/Framework/BaseStack.h
index 2356178..a9e923c 100644
--- a/runtime/ObjC/Framework/BaseStack.h
+++ b/runtime/ObjC/Framework/BaseStack.h
@@ -1,5 +1,5 @@
//
-//  ANTLRBaseRecognizer.m
+//  BaseRecognizer.m
//  ANTLR
//
//  Created by Alan Condit on 6/16/10.
@@ -30,25 +30,25 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRPtrBuffer.h"
+#import "PtrBuffer.h"

//#define GLOBAL_SCOPE       0
//#define LOCAL_SCOPE        1
#define HASHSIZE         101
#define HBUFSIZE      0x2000

-@interface ANTLRBaseStack : ANTLRPtrBuffer {
-	//ANTLRRuleStack *fNext;
+@interface BaseStack : PtrBuffer {
+	//RuleStack *fNext;
// TStringPool *fPool;
NSInteger LastHash;
}

-//@property (copy) ANTLRRuleStack *fNext;
+//@property (copy) RuleStack *fNext;
@property (getter=getLastHash, setter=setLastHash:) NSInteger LastHash;

// Contruction/Destruction
-+ (ANTLRBaseStack *)newANTLRBaseStack;
-+ (ANTLRBaseStack *)newANTLRBaseStackWithLen:(NSInteger)cnt;
++ (BaseStack *)newBaseStack;
++ (BaseStack *)newBaseStackWithLen:(NSInteger)cnt;
- (id)init;
- (id)initWithLen:(NSInteger)cnt;
- (void)dealloc;
diff --git a/runtime/ObjC/Framework/BaseStack.m b/runtime/ObjC/Framework/BaseStack.m
index 7bd2282..c622060 100644
--- a/runtime/ObjC/Framework/BaseStack.m
+++ b/runtime/ObjC/Framework/BaseStack.m
@@ -1,5 +1,5 @@
//
-//  ANTLRBaseRecognizer.m
+//  BaseRecognizer.m
//  ANTLR
//
//  Created by Alan Condit on 6/16/10.
@@ -32,24 +32,24 @@
#define SUCCESS (0)
#define FAILURE (-1)

-#import "ANTLRBaseStack.h"
-#import "ANTLRTree.h"
+#import "BaseStack.h"
+#import "Tree.h"

/*
- * Start of ANTLRBaseStack
+ * Start of BaseStack
*/
-@implementation ANTLRBaseStack
+@implementation BaseStack

@synthesize LastHash;

-+(ANTLRBaseStack *)newANTLRBaseStack
++(BaseStack *)newBaseStack
{
-    return [[ANTLRBaseStack alloc] init];
+    return [[BaseStack alloc] init];
}

-+(ANTLRBaseStack *)newANTLRBaseStackWithLen:(NSInteger)cnt
++(BaseStack *)newBaseStackWithLen:(NSInteger)cnt
{
-    return [[ANTLRBaseStack alloc] initWithLen:cnt];
+    return [[BaseStack alloc] initWithLen:cnt];
}

-(id)init
@@ -71,14 +71,14 @@
- (void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRBaseStack" );
+    NSLog( @"called dealloc in BaseStack" );
#endif
[super dealloc];
}

- (id) copyWithZone:(NSZone *)aZone
{
-    ANTLRBaseStack *copy;
+    BaseStack *copy;

copy = [super copyWithZone:aZone];
return copy;
@@ -101,14 +101,14 @@
return BuffSize;
}

--(void)deleteANTLRBaseStack:(ANTLRBaseStack *)np
+-(void)deleteBaseStack:(BaseStack *)np
{
id tmp, rtmp;
NSInteger idx;

if ( self.fNext != nil ) {
for( idx = 0; idx < BuffSize; idx++ ) {
-            tmp = (ANTLRLinkBase *)ptrBuffer[idx];
+            tmp = (LinkBase *)ptrBuffer[idx];
while ( tmp ) {
rtmp = tmp;
tmp = [tmp getfNext];
diff --git a/runtime/ObjC/Framework/BaseTree.h b/runtime/ObjC/Framework/BaseTree.h
index 1139cd0..bdab055 100755
--- a/runtime/ObjC/Framework/BaseTree.h
+++ b/runtime/ObjC/Framework/BaseTree.h
@@ -24,34 +24,34 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRTree.h"
-#import "ANTLRCommonToken.h"
+#import "Tree.h"
+#import "CommonToken.h"
#import "AMutableArray.h"

-@protocol ANTLRBaseTree <ANTLRTree>
+@protocol BaseTree <Tree>

-+ (id<ANTLRBaseTree>) INVALID_NODE;
++ (id<BaseTree>) INVALID_NODE;

-+ (id<ANTLRBaseTree>) newTree;
-+ (id<ANTLRBaseTree>) newTree:(id<ANTLRBaseTree>)node;
++ (id<BaseTree>) newTree;
++ (id<BaseTree>) newTree:(id<BaseTree>)node;

-- (id<ANTLRBaseTree>) init;
-- (id<ANTLRBaseTree>) initWith:(id<ANTLRBaseTree>)node;
+- (id<BaseTree>) init;
+- (id<BaseTree>) initWith:(id<BaseTree>)node;

-- (id<ANTLRBaseTree>) getChild:(NSUInteger)i;
+- (id<BaseTree>) getChild:(NSUInteger)i;
- (AMutableArray *)children;
- (void) setChildren:(AMutableArray *)anArray;
-- (id<ANTLRBaseTree>)getFirstChildWithType:(NSInteger)type;
+- (id<BaseTree>)getFirstChildWithType:(NSInteger)type;
- (NSUInteger) getChildCount;

// Add t as a child to this node.  If t is null, do nothing.  If t
//  is nil, add all children of t to this' children.

-- (void) addChild:(id<ANTLRBaseTree>) tree;
+- (void) addChild:(id<BaseTree>) tree;
- (void) addChildren:(NSArray *) theChildren;
//- (void) removeAllChildren;

-- (void) setChild:(NSInteger) i With:(id<ANTLRBaseTree>)t;
+- (void) setChild:(NSInteger) i With:(id<BaseTree>)t;
- (id) deleteChild:(NSInteger) i;
- (AMutableArray *) createChildrenList;
- (void) replaceChildrenFrom:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id) t;
@@ -67,12 +67,12 @@
- (void) freshenParentAndChildIndexes;
- (void) freshenParentAndChildIndexes:(NSInteger) offset;
- (void) sanityCheckParentAndChildIndexes;
-- (void) sanityCheckParentAndChildIndexes:(id<ANTLRBaseTree>) parent At:(NSInteger) i;
+- (void) sanityCheckParentAndChildIndexes:(id<BaseTree>) parent At:(NSInteger) i;

- (NSInteger) getChildIndex;
- (void) setChildIndex:(NSInteger)i;

-- (id<ANTLRBaseTree>)getAncestor:(NSInteger)ttype;
+- (id<BaseTree>)getAncestor:(NSInteger)ttype;
- (AMutableArray *)getAncestors;

#pragma mark Copying
@@ -100,23 +100,23 @@

@end

-@interface ANTLRBaseTree : NSObject <ANTLRTree>
+@interface BaseTree : NSObject <Tree>
{
__strong AMutableArray *children;
__strong NSException *anException;
}

-+ (id<ANTLRBaseTree>) INVALID_NODE;
-+ (id<ANTLRBaseTree>) newTree;
-+ (id<ANTLRBaseTree>) newTree:(id<ANTLRBaseTree>)node;
++ (id<BaseTree>) INVALID_NODE;
++ (id<BaseTree>) newTree;
++ (id<BaseTree>) newTree:(id<BaseTree>)node;

-- (id<ANTLRBaseTree>) init;
-- (id<ANTLRBaseTree>) initWith:(id<ANTLRBaseTree>)node;
+- (id<BaseTree>) init;
+- (id<BaseTree>) initWith:(id<BaseTree>)node;

-- (id<ANTLRBaseTree>) getChild:(NSUInteger)i;
+- (id<BaseTree>) getChild:(NSUInteger)i;
- (AMutableArray *)children;
- (void) setChildren:(AMutableArray *)anArray;
-- (id<ANTLRBaseTree>)getFirstChildWithType:(NSInteger)type;
+- (id<BaseTree>)getFirstChildWithType:(NSInteger)type;
- (NSUInteger) getChildCount;

//- (void) removeAllChildren;
@@ -124,10 +124,10 @@
// Add t as a child to this node.  If t is null, do nothing.  If t
//  is nil, add all children of t to this' children.

-- (void) addChild:(id<ANTLRBaseTree>) tree;
+- (void) addChild:(id<BaseTree>) tree;
- (void) addChildren:(NSArray *) theChildren;

-- (void) setChild:(NSUInteger) i With:(id<ANTLRBaseTree>)t;
+- (void) setChild:(NSUInteger) i With:(id<BaseTree>)t;
- (id) deleteChild:(NSUInteger) idx;
- (AMutableArray *) createChildrenList;
- (void) replaceChildrenFrom:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id) t;
@@ -143,13 +143,13 @@
- (void) freshenParentAndChildIndexes;
- (void) freshenParentAndChildIndexes:(NSInteger) offset;
- (void) sanityCheckParentAndChildIndexes;
-- (void) sanityCheckParentAndChildIndexes:(id<ANTLRBaseTree>)parent At:(NSInteger) i;
+- (void) sanityCheckParentAndChildIndexes:(id<BaseTree>)parent At:(NSInteger) i;

- (NSInteger) getChildIndex;
- (void) setChildIndex:(NSInteger)i;

- (BOOL) hasAncestor:(NSInteger) ttype;
-- (id<ANTLRBaseTree>)getAncestor:(NSInteger)ttype;
+- (id<BaseTree>)getAncestor:(NSInteger)ttype;
- (AMutableArray *)getAncestors;

- (id) copyWithZone:(NSZone *)aZone;
@@ -175,36 +175,36 @@

@end

-@interface ANTLRTreeNavigationNode : ANTLRBaseTree {
+@interface TreeNavigationNode : BaseTree {
}
- (id) init;
- (id) copyWithZone:(NSZone *)aZone;
@end

-@interface ANTLRTreeNavigationNodeDown : ANTLRTreeNavigationNode {
+@interface TreeNavigationNodeDown : TreeNavigationNode {
}
-+ (ANTLRTreeNavigationNodeDown *) getNavigationNodeDown;
++ (TreeNavigationNodeDown *) getNavigationNodeDown;
- (id) init;
- (NSInteger) tokenType;
- (NSString *) description;
@end

-@interface ANTLRTreeNavigationNodeUp : ANTLRTreeNavigationNode {
+@interface TreeNavigationNodeUp : TreeNavigationNode {
}
-+ (ANTLRTreeNavigationNodeUp *) getNavigationNodeUp;
++ (TreeNavigationNodeUp *) getNavigationNodeUp;
- (id) init;
- (NSInteger) tokenType;
- (NSString *) description;
@end

-@interface ANTLRTreeNavigationNodeEOF : ANTLRTreeNavigationNode {
+@interface TreeNavigationNodeEOF : TreeNavigationNode {
}
-+ (ANTLRTreeNavigationNodeEOF *) getNavigationNodeEOF;
++ (TreeNavigationNodeEOF *) getNavigationNodeEOF;
- (id) init;
- (NSInteger) tokenType;
- (NSString *) description;
@end

-extern ANTLRTreeNavigationNodeDown *navigationNodeDown;
-extern ANTLRTreeNavigationNodeUp *navigationNodeUp;
-extern ANTLRTreeNavigationNodeEOF *navigationNodeEOF;
+extern TreeNavigationNodeDown *navigationNodeDown;
+extern TreeNavigationNodeUp *navigationNodeUp;
+extern TreeNavigationNodeEOF *navigationNodeEOF;
diff --git a/runtime/ObjC/Framework/BaseTree.m b/runtime/ObjC/Framework/BaseTree.m
index 5ba4eac..72e0180 100755
--- a/runtime/ObjC/Framework/BaseTree.m
+++ b/runtime/ObjC/Framework/BaseTree.m
@@ -24,55 +24,55 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRBaseTree.h"
-#import "ANTLRBaseTreeAdaptor.h"
-#import "ANTLRToken.h"
+#import "BaseTree.h"
+#import "BaseTreeAdaptor.h"
+#import "Token.h"
// TODO: this shouldn't be here...but needed for invalidNode
#import "AMutableArray.h"
-#import "ANTLRCommonTree.h"
-#import "ANTLRRuntimeException.h"
+#import "CommonTree.h"
+#import "RuntimeException.h"
#import "ANTLRError.h"

#pragma mark - Navigation Nodes
-ANTLRTreeNavigationNodeDown *navigationNodeDown = nil;
-ANTLRTreeNavigationNodeUp *navigationNodeUp = nil;
-ANTLRTreeNavigationNodeEOF *navigationNodeEOF = nil;
+TreeNavigationNodeDown *navigationNodeDown = nil;
+TreeNavigationNodeUp *navigationNodeUp = nil;
+TreeNavigationNodeEOF *navigationNodeEOF = nil;


-@implementation ANTLRBaseTree
+@implementation BaseTree

-static id<ANTLRBaseTree> invalidNode = nil;
+static id<BaseTree> invalidNode = nil;

-#pragma mark ANTLRTree protocol conformance
+#pragma mark Tree protocol conformance

-+ (id<ANTLRBaseTree>) INVALID_NODE
++ (id<BaseTree>) INVALID_NODE
{
if ( invalidNode == nil ) {
-		invalidNode = [[ANTLRCommonTree alloc] initWithTokenType:ANTLRTokenTypeInvalid];
+		invalidNode = [[CommonTree alloc] initWithTokenType:TokenTypeInvalid];
}
return invalidNode;
}

-+ (id<ANTLRBaseTree>) invalidNode
++ (id<BaseTree>) invalidNode
{
if ( invalidNode == nil ) {
-		invalidNode = [[ANTLRCommonTree alloc] initWithTokenType:ANTLRTokenTypeInvalid];
+		invalidNode = [[CommonTree alloc] initWithTokenType:TokenTypeInvalid];
}
return invalidNode;
}

+ newTree
{
-    return [[ANTLRBaseTree alloc] init];
+    return [[BaseTree alloc] init];
}

-/** Create a new node from an existing node does nothing for ANTLRBaseTree
+/** Create a new node from an existing node does nothing for BaseTree
*  as there are no fields other than the children list, which cannot
*  be copied as the children are not considered part of this node.
*/
-+ newTree:(id<ANTLRBaseTree>) node
++ newTree:(id<BaseTree>) node
{
-    return [[ANTLRBaseTree alloc] initWith:(id<ANTLRBaseTree>) node];
+    return [[BaseTree alloc] initWith:(id<BaseTree>) node];
}

- (id) init
@@ -85,7 +85,7 @@ static id<ANTLRBaseTree> invalidNode = nil;
return nil;
}

-- (id) initWith:(id<ANTLRBaseTree>)node
+- (id) initWith:(id<BaseTree>)node
{
self = [super init];
if ( self != nil ) {
@@ -100,18 +100,18 @@ static id<ANTLRBaseTree> invalidNode = nil;
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRBaseTree" );
+    NSLog( @"called dealloc in BaseTree" );
#endif
if ( children ) [children release];
[super dealloc];
}

-- (id<ANTLRBaseTree>) getChild:(NSUInteger)i
+- (id<BaseTree>) getChild:(NSUInteger)i
{
if ( children == nil || i >= [children count] ) {
return nil;
}
-    return (id<ANTLRBaseTree>)[children objectAtIndex:i];
+    return (id<BaseTree>)[children objectAtIndex:i];
}

/** Get the children internal List; note that if you directly mess with
@@ -131,10 +131,10 @@ static id<ANTLRBaseTree> invalidNode = nil;
children = anArray;
}

-- (id<ANTLRBaseTree>) getFirstChildWithType:(NSInteger) aType
+- (id<BaseTree>) getFirstChildWithType:(NSInteger) aType
{
for (NSUInteger i = 0; children != nil && i < [children count]; i++) {
-        id<ANTLRBaseTree> t = (id<ANTLRBaseTree>) [children objectAtIndex:i];
+        id<BaseTree> t = (id<BaseTree>) [children objectAtIndex:i];
if ( t.type == aType ) {
return t;
}
@@ -156,29 +156,29 @@ static id<ANTLRBaseTree> invalidNode = nil;
*  and child isNil then this routine moves children to t via
*  t.children = child.children; i.e., without copying the array.
*/
-- (void) addChild:(id<ANTLRBaseTree>) t
+- (void) addChild:(id<BaseTree>) t
{
//System.out.println("add child "+t.toStringTree()+" "+self.toStringTree());
//System.out.println("existing children: "+children);
if ( t == nil ) {
return; // do nothing upon addChild(nil)
}
-    if ( self == (ANTLRBaseTree *)t )
-        @throw [ANTLRIllegalArgumentException newException:@"ANTLRBaseTree Can't add self to self as child"];
-    id<ANTLRBaseTree> childTree = (id<ANTLRBaseTree>) t;
+    if ( self == (BaseTree *)t )
+        @throw [ANTLRIllegalArgumentException newException:@"BaseTree Can't add self to self as child"];
+    id<BaseTree> childTree = (id<BaseTree>) t;
if ( [childTree isNil] ) { // t is an empty node possibly with children
if ( children != nil && children == childTree.children ) {
-            @throw [ANTLRRuntimeException newException:@"ANTLRBaseTree add child list to itself"];
+            @throw [RuntimeException newException:@"BaseTree add child list to itself"];
}
// just add all of childTree's children to this
if ( childTree.children != nil ) {
if ( children != nil ) { // must copy, this has children already
int n = [childTree.children count];
for ( int i = 0; i < n; i++) {
-                    id<ANTLRBaseTree> c = (id<ANTLRBaseTree>)[childTree.children objectAtIndex:i];
+                    id<BaseTree> c = (id<BaseTree>)[childTree.children objectAtIndex:i];
[children addObject:c];
// handle double-link stuff for each child of nil root
-                    [c setParent:(id<ANTLRBaseTree>)self];
+                    [c setParent:(id<BaseTree>)self];
[c setChildIndex:[children count]-1];
}
}
@@ -195,7 +195,7 @@ static id<ANTLRBaseTree> invalidNode = nil;
children = [[AMutableArray arrayWithCapacity:5] retain]; // create children list on demand
}
[children addObject:t];
-        [childTree setParent:(id<ANTLRBaseTree>)self];
+        [childTree setParent:(id<BaseTree>)self];
[childTree setChildIndex:[children count]-1];
}
// System.out.println("now children are: "+children);
@@ -205,18 +205,18 @@ static id<ANTLRBaseTree> invalidNode = nil;
- (void) addChildren:(AMutableArray *) kids
{
for (NSUInteger i = 0; i < [kids count]; i++) {
-        id<ANTLRBaseTree> t = (id<ANTLRBaseTree>) [kids objectAtIndex:i];
+        id<BaseTree> t = (id<BaseTree>) [kids objectAtIndex:i];
[self addChild:t];
}
}

-- (void) setChild:(NSUInteger) i With:(id<ANTLRBaseTree>)t
+- (void) setChild:(NSUInteger) i With:(id<BaseTree>)t
{
if ( t == nil ) {
return;
}
if ( [t isNil] ) {
-        @throw [ANTLRIllegalArgumentException newException:@"ANTLRBaseTree Can't set single child to a list"];
+        @throw [ANTLRIllegalArgumentException newException:@"BaseTree Can't set single child to a list"];
}
if ( children == nil ) {
children = [[AMutableArray arrayWithCapacity:5] retain];
@@ -227,7 +227,7 @@ static id<ANTLRBaseTree> invalidNode = nil;
else {
[children insertObject:t atIndex:i];
}
-    [t setParent:(id<ANTLRBaseTree>)self];
+    [t setParent:(id<BaseTree>)self];
[t setChildIndex:i];
}

@@ -236,7 +236,7 @@ static id<ANTLRBaseTree> invalidNode = nil;
if ( children == nil ) {
return nil;
}
-    id<ANTLRBaseTree> killed = (id<ANTLRBaseTree>)[children objectAtIndex:idx];
+    id<BaseTree> killed = (id<BaseTree>)[children objectAtIndex:idx];
[children removeObjectAtIndex:idx];
// walk rest and decrement their child indexes
[self freshenParentAndChildIndexes:idx];
@@ -244,7 +244,7 @@ static id<ANTLRBaseTree> invalidNode = nil;
}

/** Delete children from start to stop and replace with t even if t is
- *  a list (nil-root ANTLRTree).  num of children can increase or decrease.
+ *  a list (nil-root Tree).  num of children can increase or decrease.
*  For huge child lists, inserting children can force walking rest of
*  children to set their childindex; could be slow.
*/
@@ -252,15 +252,15 @@ static id<ANTLRBaseTree> invalidNode = nil;
{
/*
System.out.println("replaceChildren "+startChildIndex+", "+stopChildIndex+
-     " with "+((ANTLRBaseTree)t).toStringTree());
+     " with "+((BaseTree)t).toStringTree());
System.out.println("in="+toStringTree());
*/
if ( children == nil ) {
-        @throw [ANTLRIllegalArgumentException newException:@"ANTLRBaseTree Invalid Indexes; no children in list"];
+        @throw [ANTLRIllegalArgumentException newException:@"BaseTree Invalid Indexes; no children in list"];
}
int replacingHowMany = stopChildIndex - startChildIndex + 1;
int replacingWithHowMany;
-    id<ANTLRBaseTree> newTree = (id<ANTLRBaseTree>) t;
+    id<BaseTree> newTree = (id<BaseTree>) t;
AMutableArray *newChildren = nil;
// normalize to a list of children to add: newChildren
if ( [newTree isNil] ) {
@@ -277,9 +277,9 @@ static id<ANTLRBaseTree> invalidNode = nil;
if ( delta == 0 ) {
int j = 0; // index into new children
for (int i=startChildIndex; i <= stopChildIndex; i++) {
-            id<ANTLRBaseTree> child = (id<ANTLRBaseTree>)[newChildren objectAtIndex:j];
+            id<BaseTree> child = (id<BaseTree>)[newChildren objectAtIndex:j];
[children replaceObjectAtIndex:i withObject:(id)child];
-            [child setParent:(id<ANTLRBaseTree>)self];
+            [child setParent:(id<BaseTree>)self];
[child setChildIndex:i];
j++;
}
@@ -331,9 +331,9 @@ static id<ANTLRBaseTree> invalidNode = nil;
{
int n = [self getChildCount];
for (int i = offset; i < n; i++) {
-        id<ANTLRBaseTree> child = (id<ANTLRBaseTree>)[self getChild:i];
+        id<BaseTree> child = (id<BaseTree>)[self getChild:i];
[child setChildIndex:i];
-        [child setParent:(id<ANTLRBaseTree>)self];
+        [child setParent:(id<BaseTree>)self];
}
}

@@ -342,7 +342,7 @@ static id<ANTLRBaseTree> invalidNode = nil;
[self sanityCheckParentAndChildIndexes:nil At:-1];
}

-- (void) sanityCheckParentAndChildIndexes:(id<ANTLRBaseTree>)aParent At:(NSInteger) i
+- (void) sanityCheckParentAndChildIndexes:(id<BaseTree>)aParent At:(NSInteger) i
{
if ( aParent != [self getParent] ) {
@throw [ANTLRIllegalStateException newException:[NSString stringWithFormat:@"parents don't match; expected %s found %s", aParent, [self getParent]]];
@@ -352,8 +352,8 @@ static id<ANTLRBaseTree> invalidNode = nil;
}
int n = [self getChildCount];
for (int c = 0; c < n; c++) {
-        id<ANTLRBaseTree> child = (id<ANTLRBaseTree>)[self getChild:c];
-        [child sanityCheckParentAndChildIndexes:(id<ANTLRBaseTree>)self At:c];
+        id<BaseTree> child = (id<BaseTree>)[self getChild:c];
+        [child sanityCheckParentAndChildIndexes:(id<BaseTree>)self At:c];
}
}

@@ -381,13 +381,13 @@ static id<ANTLRBaseTree> invalidNode = nil;
{
}

-- (id<ANTLRBaseTree>) dupNode
+- (id<BaseTree>) dupNode
{
return nil;
}


-/** ANTLRBaseTree doesn't track child indexes. */
+/** BaseTree doesn't track child indexes. */
- (NSInteger) getChildIndex
{
return 0;
@@ -397,13 +397,13 @@ static id<ANTLRBaseTree> invalidNode = nil;
{
}

-/** ANTLRBaseTree doesn't track parent pointers. */
-- (id<ANTLRBaseTree>) getParent
+/** BaseTree doesn't track parent pointers. */
+- (id<BaseTree>) getParent
{
return nil;
}

-- (void) setParent:(id<ANTLRBaseTree>) t
+- (void) setParent:(id<BaseTree>) t
{
}

@@ -414,14 +414,14 @@ static id<ANTLRBaseTree> invalidNode = nil;
}

/** Walk upwards and get first ancestor with this token type. */
-- (id<ANTLRBaseTree>) getAncestor:(NSInteger) ttype
+- (id<BaseTree>) getAncestor:(NSInteger) ttype
{
-    id<ANTLRBaseTree> t = (id<ANTLRBaseTree>)self;
-    t = (id<ANTLRBaseTree>)[t getParent];
+    id<BaseTree> t = (id<BaseTree>)self;
+    t = (id<BaseTree>)[t getParent];
while ( t != nil ) {
if ( t.type == ttype )
return t;
-        t = (id<ANTLRBaseTree>)[t getParent];
+        t = (id<BaseTree>)[t getParent];
}
return nil;
}
@@ -434,18 +434,18 @@ static id<ANTLRBaseTree> invalidNode = nil;
if ( [self getParent] == nil )
return nil;
AMutableArray *ancestors = [AMutableArray arrayWithCapacity:5];
-    id<ANTLRBaseTree> t = (id<ANTLRBaseTree>)self;
-    t = (id<ANTLRBaseTree>)[t getParent];
+    id<BaseTree> t = (id<BaseTree>)self;
+    t = (id<BaseTree>)[t getParent];
while ( t != nil ) {
[ancestors insertObject:t atIndex:0]; // insert at start
-        t = (id<ANTLRBaseTree>)[t getParent];
+        t = (id<BaseTree>)[t getParent];
}
return ancestors;
}

- (NSInteger)type
{
-    return ANTLRTokenTypeInvalid;
+    return TokenTypeInvalid;
}

- (NSString *)text
@@ -472,7 +472,7 @@ static id<ANTLRBaseTree> invalidNode = nil;
// the children themselves are not copied here!
- (id) copyWithZone:(NSZone *)aZone
{
-    id<ANTLRBaseTree> theCopy = [[[self class] allocWithZone:aZone] init];
+    id<BaseTree> theCopy = [[[self class] allocWithZone:aZone] init];
[theCopy addChildren:self.children];
return theCopy;
}
@@ -484,13 +484,13 @@ static id<ANTLRBaseTree> invalidNode = nil;

- (id) deepCopyWithZone:(NSZone *)aZone
{
-    id<ANTLRBaseTree> theCopy = [self copyWithZone:aZone];
+    id<BaseTree> theCopy = [self copyWithZone:aZone];

if ( [theCopy.children count] )
[theCopy.children removeAllObjects];
AMutableArray *childrenCopy = theCopy.children;
for (id loopItem in children) {
-        id<ANTLRBaseTree> childCopy = [loopItem deepCopyWithZone:aZone];
+        id<BaseTree> childCopy = [loopItem deepCopyWithZone:aZone];
[theCopy addChild:childCopy];
}
if ( childrenCopy ) [childrenCopy release];
@@ -509,11 +509,11 @@ static id<ANTLRBaseTree> invalidNode = nil;
[buf appendString:@" "];
}
for (int i = 0; children != nil && i < [children count]; i++) {
-        id<ANTLRBaseTree> t = (id<ANTLRBaseTree>)[children objectAtIndex:i];
+        id<BaseTree> t = (id<BaseTree>)[children objectAtIndex:i];
if ( i > 0 ) {
[buf appendString:@" "];
}
-        [buf appendString:[(id<ANTLRBaseTree>)t toStringTree]];
+        [buf appendString:[(id<BaseTree>)t toStringTree]];
}
if ( ![self isNil] ) {
[buf appendString:@")"];
@@ -545,10 +545,10 @@ static id<ANTLRBaseTree> invalidNode = nil;

#pragma mark -

-@implementation ANTLRTreeNavigationNode
+@implementation TreeNavigationNode
- (id)init
{
-    self = (ANTLRTreeNavigationNode *)[super init];
+    self = (TreeNavigationNode *)[super init];
return self;
}

@@ -558,11 +558,11 @@ static id<ANTLRBaseTree> invalidNode = nil;
}
@end

-@implementation ANTLRTreeNavigationNodeDown
-+ (ANTLRTreeNavigationNodeDown *) getNavigationNodeDown
+@implementation TreeNavigationNodeDown
++ (TreeNavigationNodeDown *) getNavigationNodeDown
{
if ( navigationNodeDown == nil )
-        navigationNodeDown = [[ANTLRTreeNavigationNodeDown alloc] init];
+        navigationNodeDown = [[TreeNavigationNodeDown alloc] init];
return navigationNodeDown;
}

@@ -572,15 +572,15 @@ static id<ANTLRBaseTree> invalidNode = nil;
return self;
}

-- (NSInteger) tokenType { return ANTLRTokenTypeDOWN; }
+- (NSInteger) tokenType { return TokenTypeDOWN; }
- (NSString *) description { return @"DOWN"; }
@end

-@implementation ANTLRTreeNavigationNodeUp
-+ (ANTLRTreeNavigationNodeUp *) getNavigationNodeUp
+@implementation TreeNavigationNodeUp
++ (TreeNavigationNodeUp *) getNavigationNodeUp
{
if ( navigationNodeUp == nil )
-        navigationNodeUp = [[ANTLRTreeNavigationNodeUp alloc] init];
+        navigationNodeUp = [[TreeNavigationNodeUp alloc] init];
return navigationNodeUp;
}

@@ -591,15 +591,15 @@ static id<ANTLRBaseTree> invalidNode = nil;
return self;
}

-- (NSInteger) tokenType { return ANTLRTokenTypeUP; }
+- (NSInteger) tokenType { return TokenTypeUP; }
- (NSString *) description { return @"UP"; }
@end

-@implementation ANTLRTreeNavigationNodeEOF
-+ (ANTLRTreeNavigationNodeEOF *) getNavigationNodeEOF
+@implementation TreeNavigationNodeEOF
++ (TreeNavigationNodeEOF *) getNavigationNodeEOF
{
if ( navigationNodeEOF == nil )
-        navigationNodeEOF = [[ANTLRTreeNavigationNodeEOF alloc] init];
+        navigationNodeEOF = [[TreeNavigationNodeEOF alloc] init];
return navigationNodeEOF;
}

@@ -609,7 +609,7 @@ static id<ANTLRBaseTree> invalidNode = nil;
return self;
}

-- (NSInteger) tokenType { return ANTLRTokenTypeEOF; }
+- (NSInteger) tokenType { return TokenTypeEOF; }
- (NSString *) description { return @"EOF"; }

@end
diff --git a/runtime/ObjC/Framework/BaseTreeAdaptor.h b/runtime/ObjC/Framework/BaseTreeAdaptor.h
index f8ed0d2..bcad849 100644
--- a/runtime/ObjC/Framework/BaseTreeAdaptor.h
+++ b/runtime/ObjC/Framework/BaseTreeAdaptor.h
@@ -25,12 +25,12 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRTreeAdaptor.h"
-#import "ANTLRCommonErrorNode.h"
-#import "ANTLRUniqueIDMap.h"
+#import "TreeAdaptor.h"
+#import "CommonErrorNode.h"
+#import "UniqueIDMap.h"

-@interface ANTLRBaseTreeAdaptor : NSObject <ANTLRTreeAdaptor, NSCopying> {
-    ANTLRUniqueIDMap *treeToUniqueIDMap;
+@interface BaseTreeAdaptor : NSObject <TreeAdaptor, NSCopying> {
+    UniqueIDMap *treeToUniqueIDMap;
NSInteger uniqueNodeID;
}

@@ -53,21 +53,21 @@
*  You don't have to subclass CommonErrorNode; you will likely need to
*  subclass your own tree node class to avoid class cast exception.
*/
-- (id) errorNode:(id<ANTLRTokenStream>)anInput
-            From:(id<ANTLRToken>)startToken
-              To:(id<ANTLRToken>)stopToken
+- (id) errorNode:(id<TokenStream>)anInput
+            From:(id<Token>)startToken
+              To:(id<Token>)stopToken
Exception:(NSException *) e;

-- (BOOL) isNil:(id<ANTLRBaseTree>) aTree;
+- (BOOL) isNil:(id<BaseTree>) aTree;

-- (id<ANTLRBaseTree>)dupTree:(id<ANTLRBaseTree>)aTree;
+- (id<BaseTree>)dupTree:(id<BaseTree>)aTree;

/** This is generic in the sense that it will work with any kind of
*  tree (not just Tree interface).  It invokes the adaptor routines
*  not the tree node routines to do the construction.
*/
-- (id<ANTLRBaseTree>)dupTree:(id<ANTLRBaseTree>)aTree Parent:(id<ANTLRBaseTree>)parent;
-- (id<ANTLRBaseTree>)dupNode:(id<ANTLRBaseTree>)aNode;
+- (id<BaseTree>)dupTree:(id<BaseTree>)aTree Parent:(id<BaseTree>)parent;
+- (id<BaseTree>)dupNode:(id<BaseTree>)aNode;
/** Add a child to the tree t.  If child is a flat tree (a list), make all
*  in list children of t.  Warning: if t has no children, but child does
*  and child isNil then you can decide it is ok to move children to t via
@@ -75,7 +75,7 @@
*  make sure that this is consistent with have the user will build
*  ASTs.
*/
-- (void) addChild:(id<ANTLRBaseTree>)aChild toTree:(id<ANTLRBaseTree>)aTree;
+- (void) addChild:(id<BaseTree>)aChild toTree:(id<BaseTree>)aTree;

/** If oldRoot is a nil root, just copy or move the children to newRoot.
*  If not a nil root, make oldRoot a child of newRoot.
@@ -103,39 +103,39 @@
*  constructing these nodes so we should have this control for
*  efficiency.
*/
-- (id<ANTLRBaseTree>)becomeRoot:(id<ANTLRBaseTree>)aNewRoot old:(id<ANTLRBaseTree>)oldRoot;
+- (id<BaseTree>)becomeRoot:(id<BaseTree>)aNewRoot old:(id<BaseTree>)oldRoot;

/** Transform ^(nil x) to x and nil to null */
-- (id<ANTLRBaseTree>)rulePostProcessing:(id<ANTLRBaseTree>)aRoot;
+- (id<BaseTree>)rulePostProcessing:(id<BaseTree>)aRoot;

-- (id<ANTLRBaseTree>)becomeRootfromToken:(id<ANTLRToken>)aNewRoot old:(id<ANTLRBaseTree>)oldRoot;
+- (id<BaseTree>)becomeRootfromToken:(id<Token>)aNewRoot old:(id<BaseTree>)oldRoot;

-- (id<ANTLRBaseTree>) create:(id<ANTLRToken>)payload;
-- (id<ANTLRBaseTree>) createTree:(NSInteger)aTType FromToken:(id<ANTLRToken>)aFromToken;
-- (id<ANTLRBaseTree>) createTree:(NSInteger)aTType FromToken:(id<ANTLRToken>)aFromToken Text:(NSString *)theText;
-- (id<ANTLRBaseTree>) createTree:(NSInteger)aTType Text:(NSString *)theText;
+- (id<BaseTree>) create:(id<Token>)payload;
+- (id<BaseTree>) createTree:(NSInteger)aTType FromToken:(id<Token>)aFromToken;
+- (id<BaseTree>) createTree:(NSInteger)aTType FromToken:(id<Token>)aFromToken Text:(NSString *)theText;
+- (id<BaseTree>) createTree:(NSInteger)aTType Text:(NSString *)theText;

-- (NSInteger) getType:(id<ANTLRBaseTree>)aTree;
+- (NSInteger) getType:(id<BaseTree>)aTree;

-- (void) setType:(id<ANTLRBaseTree>)aTree Type:(NSInteger)type;
+- (void) setType:(id<BaseTree>)aTree Type:(NSInteger)type;

-- (id<ANTLRToken>)getToken:(ANTLRCommonTree *)t;
+- (id<Token>)getToken:(CommonTree *)t;

-- (NSString *)getText:(ANTLRCommonTree *)aTree;
+- (NSString *)getText:(CommonTree *)aTree;

-- (void) setText:(id<ANTLRBaseTree>)aTree Text:(NSString *)theText;
+- (void) setText:(id<BaseTree>)aTree Text:(NSString *)theText;

-- (id<ANTLRBaseTree>) getChild:(id<ANTLRBaseTree>)aTree At:(NSInteger)i;
+- (id<BaseTree>) getChild:(id<BaseTree>)aTree At:(NSInteger)i;

-- (void) setChild:(id<ANTLRBaseTree>)aTree At:(NSInteger)index Child:(id<ANTLRBaseTree>)aChild;
+- (void) setChild:(id<BaseTree>)aTree At:(NSInteger)index Child:(id<BaseTree>)aChild;

-- (id<ANTLRBaseTree>) deleteChild:(id<ANTLRBaseTree>)aTree Index:(NSInteger)index;
+- (id<BaseTree>) deleteChild:(id<BaseTree>)aTree Index:(NSInteger)index;

-- (NSInteger) getChildCount:(id<ANTLRBaseTree>)aTree;
+- (NSInteger) getChildCount:(id<BaseTree>)aTree;

-- (id<ANTLRBaseTree>) getParent:(id<ANTLRBaseTree>) t;
+- (id<BaseTree>) getParent:(id<BaseTree>) t;

-- (void) setParent:(id<ANTLRBaseTree>)t With:(id<ANTLRBaseTree>) parent;
+- (void) setParent:(id<BaseTree>)t With:(id<BaseTree>) parent;

/** What index is this node in the child list? Range: 0..n-1
*  If your node type doesn't handle this, it's ok but the tree rewrites
@@ -146,16 +146,16 @@

- (void) replaceChildren:(id)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id)t;

-- (NSInteger) getUniqueID:(id<ANTLRBaseTree>)node;
+- (NSInteger) getUniqueID:(id<BaseTree>)node;

#ifdef DONTUSENOMO
- (NSInteger) getUniqueID;

- (void) setUniqueNodeID:(NSInteger)aUniqueNodeID;

-- (ANTLRUniqueIDMap *)getTreeToUniqueIDMap;
+- (UniqueIDMap *)getTreeToUniqueIDMap;

-- (void) setTreeToUniqueIDMap:(ANTLRUniqueIDMap *)aMapNode;
+- (void) setTreeToUniqueIDMap:(UniqueIDMap *)aMapNode;
#endif

/** Tell me how to create a token for use with imaginary token nodes.
@@ -172,11 +172,11 @@
*  If you care what the token payload objects' type is, you should
*  override this method and any other createToken variant.
*/
-- (id<ANTLRToken>)createToken:(NSInteger)aTType Text:(NSString *)theText;
+- (id<Token>)createToken:(NSInteger)aTType Text:(NSString *)theText;

-- (id<ANTLRToken>)createToken:(id<ANTLRToken>)aFromToken;
+- (id<Token>)createToken:(id<Token>)aFromToken;

-@property (retain) ANTLRUniqueIDMap *treeToUniqueIDMap;
+@property (retain) UniqueIDMap *treeToUniqueIDMap;
@property (assign) NSInteger uniqueNodeID;

@end
diff --git a/runtime/ObjC/Framework/BaseTreeAdaptor.m b/runtime/ObjC/Framework/BaseTreeAdaptor.m
index 58b181d..6974e9a 100644
--- a/runtime/ObjC/Framework/BaseTreeAdaptor.m
+++ b/runtime/ObjC/Framework/BaseTreeAdaptor.m
@@ -24,20 +24,20 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRBaseTreeAdaptor.h"
-#import "ANTLRRuntimeException.h"
-#import "ANTLRUniqueIDMap.h"
-#import "ANTLRMapElement.h"
-#import "ANTLRCommonTree.h"
+#import "BaseTreeAdaptor.h"
+#import "RuntimeException.h"
+#import "UniqueIDMap.h"
+#import "MapElement.h"
+#import "CommonTree.h"

-@implementation ANTLRBaseTreeAdaptor
+@implementation BaseTreeAdaptor

@synthesize treeToUniqueIDMap;
@synthesize uniqueNodeID;

-+ (id<ANTLRTree>) newEmptyTree
++ (id<Tree>) newEmptyTree
{
-    return [[ANTLRCommonTree alloc] init];
+    return [[CommonTree alloc] init];
}

- (id) init
@@ -50,7 +50,7 @@

- (id) copyWithZone:(NSZone *)aZone
{
-    ANTLRBaseTreeAdaptor *copy;
+    BaseTreeAdaptor *copy;

copy = [[[self class] alloc] init];
if (treeToUniqueIDMap)
@@ -62,12 +62,12 @@

- (id) createNil
{
-    return [ANTLRCommonTree newTreeWithToken:nil];
+    return [CommonTree newTreeWithToken:nil];
}

- (id) emptyNode
{
-    return [ANTLRCommonTree newTreeWithToken:nil];
+    return [CommonTree newTreeWithToken:nil];
}

/** create tree node that holds the start and stop tokens associated
@@ -81,13 +81,13 @@
*  You don't have to subclass CommonErrorNode; you will likely need to
*  subclass your own tree node class to avoid class cast exception.
*/
-- (id) errorNode:(id<ANTLRTokenStream>)anInput
-            From:(id<ANTLRToken>)startToken
-              To:(id<ANTLRToken>)stopToken
-       Exception:(ANTLRRecognitionException *) e;
+- (id) errorNode:(id<TokenStream>)anInput
+            From:(id<Token>)startToken
+              To:(id<Token>)stopToken
+       Exception:(RecognitionException *) e;
{
//System.out.println("returning error node '"+t+"' @index="+anInput.index());
-    return [ANTLRCommonErrorNode newANTLRCommonErrorNode:anInput
+    return [CommonErrorNode newCommonErrorNode:anInput
From:startToken
To:stopToken
Exception:e];
@@ -183,7 +183,7 @@
if ( nc == 1 ) newRootTree = [(id)newRootTree getChild:0];
else if ( nc > 1 ) {
// TODO: make tree run time exceptions hierarchy
-            @throw [ANTLRRuntimeException newException:NSStringFromClass([self class]) reason:@"more than one node as root (TODO: make exception hierarchy)"];
+            @throw [RuntimeException newException:NSStringFromClass([self class]) reason:@"more than one node as root (TODO: make exception hierarchy)"];
}
}
// add oldRoot to newRoot; addChild takes care of case where oldRoot
@@ -212,17 +212,17 @@
return r;
}

-- (id)becomeRootfromToken:(id<ANTLRToken>)newRoot old:(id)oldRoot
+- (id)becomeRootfromToken:(id<Token>)newRoot old:(id)oldRoot
{
return [self becomeRoot:(id)[self create:newRoot] old:oldRoot];
}

-- (id) create:(id<ANTLRToken>)aToken
+- (id) create:(id<Token>)aToken
{
-    return [ANTLRCommonTree newTreeWithToken:aToken];
+    return [CommonTree newTreeWithToken:aToken];
}

-- (id)createTree:(NSInteger)tokenType FromToken:(id<ANTLRToken>)fromToken
+- (id)createTree:(NSInteger)tokenType FromToken:(id<Token>)fromToken
{
fromToken = [self createToken:fromToken];
//((ClassicToken)fromToken).setType(tokenType);
@@ -231,7 +231,7 @@
return t;
}

-- (id)createTree:(NSInteger)tokenType FromToken:(id<ANTLRToken>)fromToken Text:(NSString *)text
+- (id)createTree:(NSInteger)tokenType FromToken:(id<Token>)fromToken Text:(NSString *)text
{
if (fromToken == nil)
return [self createTree:tokenType Text:text];
@@ -244,41 +244,41 @@

- (id)createTree:(NSInteger)tokenType Text:(NSString *)text
{
-    id<ANTLRToken> fromToken = [self createToken:tokenType Text:text];
+    id<Token> fromToken = [self createToken:tokenType Text:text];
id t = (id)[self create:fromToken];
return t;
}

-- (NSInteger) getType:(ANTLRCommonTree *) t
+- (NSInteger) getType:(CommonTree *) t
{
return [t type];
}

- (void) setType:(id)t Type:(NSInteger)type
{
-    @throw [ANTLRNoSuchElementException newException:@"don't know enough about Tree node"];
+    @throw [NoSuchElementException newException:@"don't know enough about Tree node"];
}

/** What is the Token associated with this node?  If
- *  you are not using ANTLRCommonTree, then you must
+ *  you are not using CommonTree, then you must
*  override this in your own adaptor.
*/
-- (id<ANTLRToken>) getToken:(ANTLRCommonTree *) t
+- (id<Token>) getToken:(CommonTree *) t
{
-    if ( [t isKindOfClass:[ANTLRCommonTree class]] ) {
+    if ( [t isKindOfClass:[CommonTree class]] ) {
return [t getToken];
}
return nil; // no idea what to do
}

-- (NSString *)getText:(ANTLRCommonTree *)t
+- (NSString *)getText:(CommonTree *)t
{
return [t text];
}

- (void) setText:(id)t Text:(NSString *)text
{
-    @throw [ANTLRNoSuchElementException newException:@"don't know enough about Tree node"];
+    @throw [NoSuchElementException newException:@"don't know enough about Tree node"];
}

- (id) getChild:(id)t At:(NSInteger)index
@@ -301,17 +301,17 @@
return [(id)t getChildCount];
}

-- (id<ANTLRBaseTree>) getParent:(id<ANTLRBaseTree>) t
+- (id<BaseTree>) getParent:(id<BaseTree>) t
{
if ( t == nil )
return nil;
-    return (id<ANTLRBaseTree>)[t getParent];
+    return (id<BaseTree>)[t getParent];
}

-- (void) setParent:(id<ANTLRBaseTree>)t With:(id<ANTLRBaseTree>) parent
+- (void) setParent:(id<BaseTree>)t With:(id<BaseTree>) parent
{
if ( t != nil )
-        [(id<ANTLRBaseTree>) t setParent:(id<ANTLRBaseTree>)parent];
+        [(id<BaseTree>) t setParent:(id<BaseTree>)parent];
}

/** What index is this node in the child list? Range: 0..n-1
@@ -320,12 +320,12 @@
*/
- (NSInteger) getChildIndex:(id)t
{
-    return ((ANTLRCommonTree *)t).childIndex;
+    return ((CommonTree *)t).childIndex;
}

- (void) setChildIndex:(id)t With:(NSInteger)index
{
-    ((ANTLRCommonTree *)t).childIndex = index;
+    ((CommonTree *)t).childIndex = index;
}

- (void) replaceChildren:(id)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id)t
@@ -336,14 +336,14 @@
- (NSInteger) getUniqueID:(id)node
{
if ( treeToUniqueIDMap == nil ) {
-        treeToUniqueIDMap = [ANTLRUniqueIDMap newANTLRUniqueIDMap];
+        treeToUniqueIDMap = [UniqueIDMap newUniqueIDMap];
}
NSNumber *prevID = [treeToUniqueIDMap getNode:node];
if ( prevID != nil ) {
return [prevID integerValue];
}
NSInteger anID = uniqueNodeID;
-    // ANTLRMapElement *aMapNode = [ANTLRMapElement newANTLRMapElementWithObj1:[NSNumber numberWithInteger:anID] Obj2:node];
+    // MapElement *aMapNode = [MapElement newMapElementWithObj1:[NSNumber numberWithInteger:anID] Obj2:node];
[treeToUniqueIDMap putID:[NSNumber numberWithInteger:anID] Node:node];
uniqueNodeID++;
return anID;
@@ -359,7 +359,7 @@
*  If you care what the token payload objects' type is, you should
*  override this method and any other createToken variant.
*/
-- (id<ANTLRToken>) createToken:(NSInteger)aTType Text:(NSString *)text
+- (id<Token>) createToken:(NSInteger)aTType Text:(NSString *)text
{
return nil;
}
@@ -378,7 +378,7 @@
*  If you care what the token payload objects' type is, you should
*  override this method and any other createToken variant.
*/
-- (id<ANTLRToken>) createToken:(id<ANTLRToken>) fromToken
+- (id<Token>) createToken:(id<Token>) fromToken
{
return nil;
}
@@ -388,7 +388,7 @@
*  seems like this will yield start=i and stop=i-1 in a nil node.
*  Might be useful info so I'll not force to be i..i.
*/
-- (void) setTokenBoundaries:(id)aTree From:(id<ANTLRToken>)startToken To:(id<ANTLRToken>)stopToken
+- (void) setTokenBoundaries:(id)aTree From:(id<Token>)startToken To:(id<Token>)stopToken
{
return;
}
@@ -414,12 +414,12 @@
uniqueNodeID = aUniqueNodeID;
}

-- (ANTLRUniqueIDMap *)getTreeToUniqueIDMap
+- (UniqueIDMap *)getTreeToUniqueIDMap
{
return treeToUniqueIDMap;
}

-- (void) setTreeToUniqueIDMap:(ANTLRUniqueIDMap *)aMapListNode
+- (void) setTreeToUniqueIDMap:(UniqueIDMap *)aMapListNode
{
treeToUniqueIDMap = aMapListNode;
}
diff --git a/runtime/ObjC/Framework/BufferedTokenStream.h b/runtime/ObjC/Framework/BufferedTokenStream.h
index 28d1418..b02f237 100644
--- a/runtime/ObjC/Framework/BufferedTokenStream.h
+++ b/runtime/ObjC/Framework/BufferedTokenStream.h
@@ -25,15 +25,15 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRTokenStream.h"
-#import "ANTLRTokenSource.h"
+#import "TokenStream.h"
+#import "TokenSource.h"
#import "ANTLRBitSet.h"
-#import "ANTLRCommonToken.h"
+#import "CommonToken.h"
#import "AMutableArray.h"

-@interface ANTLRBufferedTokenStream : NSObject <ANTLRTokenStream>
+@interface BufferedTokenStream : NSObject <TokenStream>
{
-__strong id<ANTLRTokenSource> tokenSource;
+__strong id<TokenSource> tokenSource;

/** Record every single token pulled from the source so we can reproduce
*  chunks of it later.  The buffer in LookaheadStream overlaps sometimes
@@ -55,15 +55,15 @@ NSInteger index;
NSInteger range; // how deep have we gone?

}
-@property (retain, getter=getTokenSource,setter=setTokenSource:) id<ANTLRTokenSource> tokenSource;
+@property (retain, getter=getTokenSource,setter=setTokenSource:) id<TokenSource> tokenSource;
@property (retain, getter=getTokens,setter=setTokens:) AMutableArray *tokens;
@property (assign, getter=getLastMarker,setter=setLastMarker:) NSInteger lastMarker;
@property (assign) NSInteger index;
@property (assign, getter=getRange,setter=setRange:) NSInteger range;

-+ (ANTLRBufferedTokenStream *) newANTLRBufferedTokenStream;
-+ (ANTLRBufferedTokenStream *) newANTLRBufferedTokenStreamWith:(id<ANTLRTokenSource>)aSource;
-- (id) initWithTokenSource:(id<ANTLRTokenSource>)aSource;
++ (BufferedTokenStream *) newBufferedTokenStream;
++ (BufferedTokenStream *) newBufferedTokenStreamWith:(id<TokenSource>)aSource;
+- (id) initWithTokenSource:(id<TokenSource>)aSource;
- (void)dealloc;
- (id) copyWithZone:(NSZone *)aZone;
- (NSUInteger)charPositionInLine;
@@ -80,14 +80,14 @@ NSInteger range; // how deep have we gone?
- (void) consume;
- (void) sync:(NSInteger) i;
- (void) fetch:(NSInteger) n;
-- (id<ANTLRToken>) getToken:(NSInteger) i;
+- (id<Token>) getToken:(NSInteger) i;
- (AMutableArray *)getFrom:(NSInteger)startIndex To:(NSInteger) stopIndex;
- (NSInteger) LA:(NSInteger)i;
-- (id<ANTLRToken>) LB:(NSInteger) k;
-- (id<ANTLRToken>) LT:(NSInteger) k;
+- (id<Token>) LB:(NSInteger) k;
+- (id<Token>) LT:(NSInteger) k;
- (void) setup;
-- (id<ANTLRTokenSource>) getTokenSource;
-- (void) setTokenSource:(id<ANTLRTokenSource>) aTokenSource;
+- (id<TokenSource>) getTokenSource;
+- (void) setTokenSource:(id<TokenSource>) aTokenSource;
- (AMutableArray *)getTokens;
- (NSString *) getSourceName;
- (AMutableArray *)getTokensFrom:(NSInteger)startIndex To:(NSInteger)stopIndex;
@@ -96,7 +96,7 @@ NSInteger range; // how deep have we gone?
- (AMutableArray *)getTokensFrom:(NSInteger)startIndex To:(NSInteger)stopIndex WithType:(NSInteger)ttype;
- (NSString *) toString;
- (NSString *) toStringFromStart:(NSInteger)startIndex ToEnd:(NSInteger)stopIndex;
-- (NSString *) toStringFromToken:(id<ANTLRToken>)startIndex ToToken:(id<ANTLRToken>)stopIndex;
+- (NSString *) toStringFromToken:(id<Token>)startIndex ToToken:(id<Token>)stopIndex;
- (void) fill;

@end
diff --git a/runtime/ObjC/Framework/BufferedTokenStream.m b/runtime/ObjC/Framework/BufferedTokenStream.m
index 94802b5..17ed16e 100644
--- a/runtime/ObjC/Framework/BufferedTokenStream.m
+++ b/runtime/ObjC/Framework/BufferedTokenStream.m
@@ -24,14 +24,14 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRBufferedTokenStream.h"
-#import "ANTLRTokenSource.h"
-#import "ANTLRCommonTreeAdaptor.h"
-#import "ANTLRRuntimeException.h"
+#import "BufferedTokenStream.h"
+#import "TokenSource.h"
+#import "CommonTreeAdaptor.h"
+#import "RuntimeException.h"

extern NSInteger debug;

-@implementation ANTLRBufferedTokenStream
+@implementation BufferedTokenStream

@synthesize tokenSource;
@synthesize tokens;
@@ -39,17 +39,17 @@ extern NSInteger debug;
@synthesize index;
@synthesize range;

-+ (ANTLRBufferedTokenStream *) newANTLRBufferedTokenStream
++ (BufferedTokenStream *) newBufferedTokenStream
{
-    return [[ANTLRBufferedTokenStream alloc] init];
+    return [[BufferedTokenStream alloc] init];
}

-+ (ANTLRBufferedTokenStream *) newANTLRBufferedTokenStreamWith:(id<ANTLRTokenSource>)aSource
++ (BufferedTokenStream *) newBufferedTokenStreamWith:(id<TokenSource>)aSource
{
-    return [[ANTLRBufferedTokenStream alloc] initWithTokenSource:aSource];
+    return [[BufferedTokenStream alloc] initWithTokenSource:aSource];
}

-- (ANTLRBufferedTokenStream *) init
+- (BufferedTokenStream *) init
{
if ((self = [super init]) != nil)
{
@@ -61,7 +61,7 @@ extern NSInteger debug;
return self;
}

--(id) initWithTokenSource:(id<ANTLRTokenSource>)aSource
+-(id) initWithTokenSource:(id<TokenSource>)aSource
{
if ((self = [super init]) != nil)
{
@@ -75,7 +75,7 @@ extern NSInteger debug;

- (id) copyWithZone:(NSZone *)aZone
{
-    ANTLRBufferedTokenStream *copy;
+    BufferedTokenStream *copy;

copy = [[[self class] allocWithZone:aZone] init];
copy.tokenSource = self.tokenSource;
@@ -90,7 +90,7 @@ extern NSInteger debug;
- (void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRBufferedTokenStream" );
+    NSLog( @"called dealloc in BufferedTokenStream" );
#endif
if ( tokens ) [tokens release];
if ( tokenSource ) [tokenSource release];
@@ -99,15 +99,15 @@ extern NSInteger debug;

- (NSUInteger)line
{
-    return ((ANTLRCommonToken *)[tokens objectAtIndex:index]).line;
+    return ((CommonToken *)[tokens objectAtIndex:index]).line;
}

- (NSUInteger)charPositionInLine
{
-    return ((ANTLRCommonToken *)[tokens objectAtIndex:index]).charPositionInLine;
+    return ((CommonToken *)[tokens objectAtIndex:index]).charPositionInLine;
}

-- (id<ANTLRTokenSource>) getTokenSource
+- (id<TokenSource>) getTokenSource
{
return tokenSource;
}
@@ -194,19 +194,19 @@ extern NSInteger debug;
- (void) fetch:(NSInteger)n
{
for (NSInteger i=1; i <= n; i++) {
-        id<ANTLRToken> t = [tokenSource nextToken];
+        id<Token> t = [tokenSource nextToken];
[t setTokenIndex:[tokens count]];
if (debug > 1) NSLog(@"adding %@ at index %d\n", [t text], [tokens count]);
[tokens addObject:t];
-        if ( t.type == ANTLRTokenTypeEOF )
+        if ( t.type == TokenTypeEOF )
break;
}
}

-- (id<ANTLRToken>) getToken:(NSInteger) i
+- (id<Token>) getToken:(NSInteger) i
{
if ( i < 0 || i >= [tokens count] ) {
-        @throw [ANTLRNoSuchElementException newException:[NSString stringWithFormat:@"token index %d out of range 0..%d", i, [tokens count]-1]];
+        @throw [NoSuchElementException newException:[NSString stringWithFormat:@"token index %d out of range 0..%d", i, [tokens count]-1]];
}
return [tokens objectAtIndex:i];
}
@@ -224,8 +224,8 @@ extern NSInteger debug;
if ( stopIndex >= [tokens count] )
stopIndex = [tokens count]-1;
for (NSInteger i = startIndex; i <= stopIndex; i++) {
-        id<ANTLRToken>t = [tokens objectAtIndex:i];
-        if ( t.type == ANTLRTokenTypeEOF )
+        id<Token>t = [tokens objectAtIndex:i];
+        if ( t.type == TokenTypeEOF )
break;
[subset addObject:t];
}
@@ -237,14 +237,14 @@ extern NSInteger debug;
return [[self LT:i] type];
}

-- (id<ANTLRToken>) LB:(NSInteger)k
+- (id<Token>) LB:(NSInteger)k
{
if ( (index - k) < 0 )
return nil;
return [tokens objectAtIndex:(index-k)];
}

-- (id<ANTLRToken>) LT:(NSInteger)k
+- (id<Token>) LT:(NSInteger)k
{
if ( index == -1 ) {
[self setup];
@@ -273,7 +273,7 @@ extern NSInteger debug;
}

/** Reset this token stream by setting its token source. */
-- (void) setTokenSource:(id<ANTLRTokenSource>) aTokenSource
+- (void) setTokenSource:(id<TokenSource>) aTokenSource
{
tokenSource = aTokenSource;
if ( [tokens count] )
@@ -311,7 +311,7 @@ extern NSInteger debug;
// list = tokens[start:stop]:{Token t, t.getType() in types}
AMutableArray *filteredTokens = [AMutableArray arrayWithCapacity:5];
for (NSInteger i = startIndex; i <= stopIndex; i++) {
-        id<ANTLRToken>t = [tokens objectAtIndex:i];
+        id<Token>t = [tokens objectAtIndex:i];
if ( types == nil || [types member:t.type] ) {
[filteredTokens addObject:t];
}
@@ -329,7 +329,7 @@ extern NSInteger debug;

- (AMutableArray *)getTokensFrom:(NSInteger)startIndex To:(NSInteger)stopIndex WithList:(AMutableArray *)types
{
-    return [self getTokensFrom:startIndex To:stopIndex With:[ANTLRBitSet newANTLRBitSetWithArray:types]];
+    return [self getTokensFrom:startIndex To:stopIndex With:[ANTLRBitSet newBitSetWithArray:types]];
}

- (NSString *)getSourceName
@@ -358,15 +358,15 @@ extern NSInteger debug;
stopIdx = [tokens count]-1;
NSMutableString *buf = [NSMutableString stringWithCapacity:5];
for (NSInteger i = startIdx; i <= stopIdx; i++) {
-        id<ANTLRToken>t = [tokens objectAtIndex:i];
-        if ( t.type == ANTLRTokenTypeEOF )
+        id<Token>t = [tokens objectAtIndex:i];
+        if ( t.type == TokenTypeEOF )
break;
[buf appendString:[t text]];
}
return buf;
}

-- (NSString *) toStringFromToken:(id<ANTLRToken>)startToken ToToken:(id<ANTLRToken>)stopToken
+- (NSString *) toStringFromToken:(id<Token>)startToken ToToken:(id<Token>)stopToken
{
if ( startToken != nil && stopToken != nil ) {
return [self toStringFromStart:[startToken getTokenIndex] ToEnd:[stopToken getTokenIndex]];
@@ -378,12 +378,12 @@ extern NSInteger debug;
- (void) fill
{
if ( index == -1 ) [self setup];
-    if ( [((ANTLRCommonToken *)[tokens objectAtIndex:index]) type] == ANTLRTokenTypeEOF )
+    if ( [((CommonToken *)[tokens objectAtIndex:index]) type] == TokenTypeEOF )
return;

NSInteger i = index+1;
[self sync:i];
-    while ( [((ANTLRCommonToken *)[tokens objectAtIndex:i]) type] != ANTLRTokenTypeEOF ) {
+    while ( [((CommonToken *)[tokens objectAtIndex:i]) type] != TokenTypeEOF ) {
i++;
[self sync:i];
}
diff --git a/runtime/ObjC/Framework/BufferedTreeNodeStream.h b/runtime/ObjC/Framework/BufferedTreeNodeStream.h
index 07555a5..55b0e3c 100644
--- a/runtime/ObjC/Framework/BufferedTreeNodeStream.h
+++ b/runtime/ObjC/Framework/BufferedTreeNodeStream.h
@@ -1,5 +1,5 @@
//
-//  ANTLRBufferedTreeNodeStream.h
+//  BufferedTreeNodeStream.h
//  ANTLR
//
// [The "BSD licence"]
@@ -29,29 +29,29 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRTree.h"
-#import "ANTLRCommonTreeAdaptor.h"
-#import "ANTLRTokenStream.h"
-#import "ANTLRCommonTreeNodeStream.h"
-#import "ANTLRLookaheadStream.h"
-#import "ANTLRTreeIterator.h"
-#import "ANTLRIntArray.h"
+#import "Tree.h"
+#import "CommonTreeAdaptor.h"
+#import "TokenStream.h"
+#import "CommonTreeNodeStream.h"
+#import "LookaheadStream.h"
+#import "TreeIterator.h"
+#import "IntArray.h"
#import "AMutableArray.h"

#define DEFAULT_INITIAL_BUFFER_SIZE 100
#define INITIAL_CALL_STACK_SIZE 10

#ifdef DONTUSENOMO
-@interface ANTLRStreamIterator : ANTLRTreeIterator
+@interface StreamIterator : TreeIterator
{
NSInteger idx;
-    __strong ANTLRBufferedTreeNodeStream *input;
+    __strong BufferedTreeNodeStream *input;
__strong AMutableArray *nodes;
}

-+ (id) newANTLRStreamIterator:(ANTLRBufferedTreeNodeStream *) theStream;
++ (id) newStreamIterator:(BufferedTreeNodeStream *) theStream;

-- (id) initWithStream:(ANTLRBufferedTreeNodeStream *) theStream;
+- (id) initWithStream:(BufferedTreeNodeStream *) theStream;

- (BOOL) hasNext;
- (id) next;
@@ -59,7 +59,7 @@
@end
#endif

-@interface ANTLRBufferedTreeNodeStream : NSObject <ANTLRTreeNodeStream>
+@interface BufferedTreeNodeStream : NSObject <TreeNodeStream>
{
id up;
id down;
@@ -69,13 +69,13 @@

id root; // root

-	id<ANTLRTokenStream> tokens;
-	ANTLRCommonTreeAdaptor *adaptor;
+	id<TokenStream> tokens;
+	CommonTreeAdaptor *adaptor;

BOOL uniqueNavigationNodes;
NSInteger index;
NSInteger lastMarker;
-	ANTLRIntArray *calls;
+	IntArray *calls;

NSEnumerator *e;
id currentSymbol;
@@ -87,23 +87,23 @@
@property (retain, getter=eof, setter=setEof:) id eof;
@property (retain, getter=getNodes, setter=setNodes:) AMutableArray *nodes;
@property (retain, getter=getTreeSource, setter=setTreeSource:) id root;
-@property (retain, getter=getTokenStream, setter=setTokenStream:) id<ANTLRTokenStream> tokens;
-@property (retain, getter=getAdaptor, setter=setAdaptor:) ANTLRCommonTreeAdaptor *adaptor;
+@property (retain, getter=getTokenStream, setter=setTokenStream:) id<TokenStream> tokens;
+@property (retain, getter=getAdaptor, setter=setAdaptor:) CommonTreeAdaptor *adaptor;
@property (assign, getter=getUniqueNavigationNodes, setter=setUniqueNavigationNodes:) BOOL uniqueNavigationNodes;
@property (assign) NSInteger index;
@property (assign, getter=getLastMarker, setter=setLastMarker:) NSInteger lastMarker;
-@property (retain, getter=getCalls, setter=setCalls:) ANTLRIntArray *calls;
+@property (retain, getter=getCalls, setter=setCalls:) IntArray *calls;
@property (retain, getter=getEnum, setter=setEnum:) NSEnumerator *e;
@property (retain, getter=getCurrentSymbol, setter=setCurrentSymbol:) id currentSymbol;

-+ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(ANTLRCommonTree *)tree;
-+ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(id<ANTLRTreeAdaptor>)adaptor Tree:(ANTLRCommonTree *)tree;
-+ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(id<ANTLRTreeAdaptor>)adaptor Tree:(ANTLRCommonTree *)tree withBufferSize:(NSInteger)initialBufferSize;
++ (BufferedTreeNodeStream *) newBufferedTreeNodeStream:(CommonTree *)tree;
++ (BufferedTreeNodeStream *) newBufferedTreeNodeStream:(id<TreeAdaptor>)adaptor Tree:(CommonTree *)tree;
++ (BufferedTreeNodeStream *) newBufferedTreeNodeStream:(id<TreeAdaptor>)adaptor Tree:(CommonTree *)tree withBufferSize:(NSInteger)initialBufferSize;

#pragma mark Constructor
-- (id) initWithTree:(ANTLRCommonTree *)tree;
-- (id) initWithTreeAdaptor:(ANTLRCommonTreeAdaptor *)anAdaptor Tree:(ANTLRCommonTree *)tree;
-- (id) initWithTreeAdaptor:(ANTLRCommonTreeAdaptor *)anAdaptor Tree:(ANTLRCommonTree *)tree WithBufferSize:(NSInteger)bufferSize;
+- (id) initWithTree:(CommonTree *)tree;
+- (id) initWithTreeAdaptor:(CommonTreeAdaptor *)anAdaptor Tree:(CommonTree *)tree;
+- (id) initWithTreeAdaptor:(CommonTreeAdaptor *)anAdaptor Tree:(CommonTree *)tree WithBufferSize:(NSInteger)bufferSize;

- (void)dealloc;
- (id) copyWithZone:(NSZone *)aZone;
@@ -111,20 +111,20 @@
// protected methods. DO NOT USE
#pragma mark Protected Methods
- (void) fillBuffer;
-- (void) fillBufferWithTree:(ANTLRCommonTree *) tree;
-- (NSInteger) getNodeIndex:(ANTLRCommonTree *) node;
+- (void) fillBufferWithTree:(CommonTree *) tree;
+- (NSInteger) getNodeIndex:(CommonTree *) node;
- (void) addNavigationNode:(NSInteger) type;
-- (id) getNode:(NSUInteger) i;
+- (id) get:(NSUInteger) i;
- (id) LT:(NSInteger) k;
- (id) getCurrentSymbol;
- (id) LB:(NSInteger) i;
#pragma mark General Methods
- (NSString *) getSourceName;

-- (id<ANTLRTokenStream>) getTokenStream;
-- (void) setTokenStream:(id<ANTLRTokenStream>) tokens;
-- (id<ANTLRTreeAdaptor>) getTreeAdaptor;
-- (void) setTreeAdaptor:(id<ANTLRTreeAdaptor>) anAdaptor;
+- (id<TokenStream>) getTokenStream;
+- (void) setTokenStream:(id<TokenStream>) tokens;
+- (id<TreeAdaptor>) getTreeAdaptor;
+- (void) setTreeAdaptor:(id<TreeAdaptor>) anAdaptor;

- (BOOL)getUniqueNavigationNodes;
- (void) setUniqueNavigationNodes:(BOOL)aVal;
diff --git a/runtime/ObjC/Framework/BufferedTreeNodeStream.m b/runtime/ObjC/Framework/BufferedTreeNodeStream.m
index a8f73d8..bf41026 100644
--- a/runtime/ObjC/Framework/BufferedTreeNodeStream.m
+++ b/runtime/ObjC/Framework/BufferedTreeNodeStream.m
@@ -1,5 +1,5 @@
//
-//  ANTLRBufferedTreeNodeStream.m
+//  BufferedTreeNodeStream.m
//  ANTLR
//
// [The "BSD licence"]
@@ -28,20 +28,20 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRBufferedTreeNodeStream.h"
-#import "ANTLRStreamEnumerator.h"
-#import "ANTLRCommonTreeAdaptor.h"
+#import "BufferedTreeNodeStream.h"
+#import "StreamEnumerator.h"
+#import "CommonTreeAdaptor.h"

extern NSInteger debug;

#ifdef DONTUSENOMO
-@implementation ANTLRTreeStreamIterator
-+ newANTLRTreeStreamIteratorWithNodes:(ANTLRBufferedTreeNodeStream *)theStream
+@implementation TreeStreamIterator
++ newTreeStreamIteratorWithNodes:(BufferedTreeNodeStream *)theStream
{
-    return[[ANTLRTreeStreamIterator alloc] initWithStream:theStream];
+    return[[TreeStreamIterator alloc] initWithStream:theStream];
}

-- (id) initWithStream:(ANTLRBufferedTreeNodeStream *)theStream
+- (id) initWithStream:(BufferedTreeNodeStream *)theStream
{
if ((self = [super init]) != nil) {
idx = 0;
@@ -67,13 +67,13 @@ extern NSInteger debug;

- (void) remove
{
-	@throw [ANTLRRuntimeException newException:@"cannot remove nodes from stream"];
+	@throw [RuntimeException newException:@"cannot remove nodes from stream"];
}

@end
#endif

-@implementation ANTLRBufferedTreeNodeStream
+@implementation BufferedTreeNodeStream

@synthesize up;
@synthesize down;
@@ -89,39 +89,39 @@ extern NSInteger debug;
@synthesize e;
@synthesize currentSymbol;

-+ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(ANTLRCommonTree *) aTree
++ (BufferedTreeNodeStream *) newBufferedTreeNodeStream:(CommonTree *) aTree
{
-    return [((ANTLRBufferedTreeNodeStream *)[ANTLRBufferedTreeNodeStream alloc]) initWithTree:(ANTLRCommonTree *)aTree];
+    return [((BufferedTreeNodeStream *)[BufferedTreeNodeStream alloc]) initWithTree:(CommonTree *)aTree];
}

-+ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(id<ANTLRTreeAdaptor>)adaptor Tree:(ANTLRCommonTree *)aTree
++ (BufferedTreeNodeStream *) newBufferedTreeNodeStream:(id<TreeAdaptor>)adaptor Tree:(CommonTree *)aTree
{
-    return [[ANTLRBufferedTreeNodeStream alloc] initWithTreeAdaptor:adaptor Tree:(ANTLRCommonTree *)aTree];
+    return [[BufferedTreeNodeStream alloc] initWithTreeAdaptor:adaptor Tree:(CommonTree *)aTree];
}

-+ (ANTLRBufferedTreeNodeStream *) newANTLRBufferedTreeNodeStream:(id<ANTLRTreeAdaptor>)adaptor Tree:(ANTLRCommonTree *)aTree withBufferSize:(NSInteger)initialBufferSize
++ (BufferedTreeNodeStream *) newBufferedTreeNodeStream:(id<TreeAdaptor>)adaptor Tree:(CommonTree *)aTree withBufferSize:(NSInteger)initialBufferSize
{
-    return [[ANTLRBufferedTreeNodeStream alloc] initWithTreeAdaptor:adaptor Tree:(ANTLRCommonTree *)aTree WithBufferSize:initialBufferSize];
+    return [[BufferedTreeNodeStream alloc] initWithTreeAdaptor:adaptor Tree:(CommonTree *)aTree WithBufferSize:initialBufferSize];
}

--(ANTLRBufferedTreeNodeStream *) init
+-(BufferedTreeNodeStream *) init
{
self = [super init];
if (self) {
index = -1;
uniqueNavigationNodes = NO;
-        root = [[ANTLRCommonTree alloc] init];
+        root = [[CommonTree alloc] init];
//		tokens = tree;
-        adaptor = [[[ANTLRCommonTreeAdaptor alloc] init] retain];
+        adaptor = [[[CommonTreeAdaptor alloc] init] retain];
nodes = [[AMutableArray arrayWithCapacity:DEFAULT_INITIAL_BUFFER_SIZE] retain];
-        down = [[adaptor createTree:ANTLRTokenTypeDOWN Text:@"DOWN"] retain];
-        up = [[adaptor createTree:ANTLRTokenTypeUP Text:@"UP"] retain];
-        eof = [[adaptor createTree:ANTLRTokenTypeEOF Text:@"EOF"] retain];
+        down = [[adaptor createTree:TokenTypeDOWN Text:@"DOWN"] retain];
+        up = [[adaptor createTree:TokenTypeUP Text:@"UP"] retain];
+        eof = [[adaptor createTree:TokenTypeEOF Text:@"EOF"] retain];
}
return self;
}

-- (ANTLRBufferedTreeNodeStream *)initWithTree:(ANTLRCommonTree *) aTree
+- (BufferedTreeNodeStream *)initWithTree:(CommonTree *) aTree
{
self = [super init];
if (self) {
@@ -129,16 +129,16 @@ extern NSInteger debug;
uniqueNavigationNodes = NO;
root = aTree;
//		tokens = aTree;
-        adaptor = [[[ANTLRCommonTreeAdaptor alloc] init] retain];
+        adaptor = [[[CommonTreeAdaptor alloc] init] retain];
nodes = [[AMutableArray arrayWithCapacity:DEFAULT_INITIAL_BUFFER_SIZE] retain];
-        down = [[adaptor createTree:ANTLRTokenTypeDOWN Text:@"DOWN"] retain];
-        up = [[adaptor createTree:ANTLRTokenTypeUP Text:@"UP"] retain];
-        eof = [[adaptor createTree:ANTLRTokenTypeEOF Text:@"EOF"] retain];
+        down = [[adaptor createTree:TokenTypeDOWN Text:@"DOWN"] retain];
+        up = [[adaptor createTree:TokenTypeUP Text:@"UP"] retain];
+        eof = [[adaptor createTree:TokenTypeEOF Text:@"EOF"] retain];
}
return self;
}

--(ANTLRBufferedTreeNodeStream *) initWithTreeAdaptor:(ANTLRCommonTreeAdaptor *)anAdaptor Tree:(ANTLRCommonTree *)aTree
+-(BufferedTreeNodeStream *) initWithTreeAdaptor:(CommonTreeAdaptor *)anAdaptor Tree:(CommonTree *)aTree
{
self = [super init];
if (self) {
@@ -148,29 +148,29 @@ extern NSInteger debug;
//		tokens = aTree;
adaptor = [anAdaptor retain];
nodes = [[AMutableArray arrayWithCapacity:DEFAULT_INITIAL_BUFFER_SIZE] retain];
-        down = [[adaptor createTree:ANTLRTokenTypeDOWN Text:@"DOWN"] retain];
-        up = [[adaptor createTree:ANTLRTokenTypeUP Text:@"UP"] retain];
-        eof = [[adaptor createTree:ANTLRTokenTypeEOF Text:@"EOF"] retain];
+        down = [[adaptor createTree:TokenTypeDOWN Text:@"DOWN"] retain];
+        up = [[adaptor createTree:TokenTypeUP Text:@"UP"] retain];
+        eof = [[adaptor createTree:TokenTypeEOF Text:@"EOF"] retain];
}
return self;
}

--(ANTLRBufferedTreeNodeStream *) initWithTreeAdaptor:(ANTLRCommonTreeAdaptor *)anAdaptor Tree:(ANTLRCommonTree *)aTree WithBufferSize:(NSInteger)bufferSize
+-(BufferedTreeNodeStream *) initWithTreeAdaptor:(CommonTreeAdaptor *)anAdaptor Tree:(CommonTree *)aTree WithBufferSize:(NSInteger)bufferSize
{
self = [super init];
if (self) {
-        //		down = [adaptor createToken:ANTLRTokenTypeDOWN withText:@"DOWN"];
-        //		up = [adaptor createToken:ANTLRTokenTypeDOWN withText:@"UP"];
-        //		eof = [adaptor createToken:ANTLRTokenTypeDOWN withText:@"EOF"];
+        //		down = [adaptor createToken:TokenTypeDOWN withText:@"DOWN"];
+        //		up = [adaptor createToken:TokenTypeDOWN withText:@"UP"];
+        //		eof = [adaptor createToken:TokenTypeDOWN withText:@"EOF"];
index = -1;
uniqueNavigationNodes = NO;
root = aTree;
//		tokens = aTree;
adaptor = [anAdaptor retain];
nodes = [[AMutableArray arrayWithCapacity:bufferSize] retain];
-        down = [[adaptor createTree:ANTLRTokenTypeDOWN Text:@"DOWN"] retain];
-        up = [[adaptor createTree:ANTLRTokenTypeUP Text:@"UP"] retain];
-        eof = [[adaptor createTree:ANTLRTokenTypeEOF Text:@"EOF"] retain];
+        down = [[adaptor createTree:TokenTypeDOWN Text:@"DOWN"] retain];
+        up = [[adaptor createTree:TokenTypeUP Text:@"UP"] retain];
+        eof = [[adaptor createTree:TokenTypeEOF Text:@"EOF"] retain];
}
return self;
}
@@ -178,7 +178,7 @@ extern NSInteger debug;
- (void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRBufferedTreeNodeStream" );
+    NSLog( @"called dealloc in BufferedTreeNodeStream" );
#endif
if ( adaptor ) [adaptor release];
if ( nodes ) [nodes release];
@@ -191,7 +191,7 @@ extern NSInteger debug;

- (id) copyWithZone:(NSZone *)aZone
{
-    ANTLRBufferedTreeNodeStream *copy;
+    BufferedTreeNodeStream *copy;

copy = [[[self class] allocWithZone:aZone] init];
if ( up )
@@ -225,26 +225,26 @@ extern NSInteger debug;
index = 0; // buffer of nodes intialized now
}

--(void) fillBufferWithTree:(ANTLRCommonTree *) aTree
+-(void) fillBufferWithTree:(CommonTree *) aTree
{
-	BOOL empty = [adaptor isNil:aTree];
+	BOOL empty = [adaptor isNil:(id<BaseTree>)aTree];
if (!empty) {
[nodes addObject:aTree];
}
NSInteger n = [adaptor getChildCount:aTree];
if (!empty && n > 0) {
-		[self addNavigationNode:ANTLRTokenTypeDOWN];
+		[self addNavigationNode:TokenTypeDOWN];
}
for (NSInteger c = 0; c < n; c++) {
id child = [adaptor getChild:aTree At:c];
[self fillBufferWithTree:child];
}
if (!empty && n > 0) {
-		[self addNavigationNode:ANTLRTokenTypeUP];
+		[self addNavigationNode:TokenTypeUP];
}
}

--(NSInteger) getNodeIndex:(ANTLRCommonTree *) node
+-(NSInteger) getNodeIndex:(CommonTree *) node
{
if (index == -1) {
[self fillBuffer];
@@ -261,9 +261,9 @@ extern NSInteger debug;
-(void) addNavigationNode:(NSInteger) type
{
id navNode = nil;
-	if (type == ANTLRTokenTypeDOWN) {
+	if (type == TokenTypeDOWN) {
if (self.uniqueNavigationNodes) {
-			navNode = [adaptor createToken:ANTLRTokenTypeDOWN Text:@"DOWN"];
+			navNode = [adaptor createToken:TokenTypeDOWN Text:@"DOWN"];
}
else {
navNode = down;
@@ -272,7 +272,7 @@ extern NSInteger debug;
}
else {
if (self.uniqueNavigationNodes) {
-			navNode = [adaptor createToken:ANTLRTokenTypeUP Text:@"UP"];
+			navNode = [adaptor createToken:TokenTypeUP Text:@"UP"];
}
else {
navNode = up;
@@ -281,7 +281,7 @@ extern NSInteger debug;
[nodes addObject:navNode];
}

--(id) getNode:(NSUInteger) i
+-(id) get:(NSUInteger) i
{
if (index == -1) {
[self fillBuffer];
@@ -322,7 +322,7 @@ extern NSInteger debug;
return [nodes objectAtIndex:(index - k)];
}

-- (ANTLRCommonTree *)getTreeSource
+- (CommonTree *)getTreeSource
{
return root;
}
@@ -332,22 +332,22 @@ extern NSInteger debug;
return [[self getTokenStream] getSourceName];
}

-- (id<ANTLRTokenStream>)getTokenStream
+- (id<TokenStream>)getTokenStream
{
return tokens;
}

-- (void) setTokenStream:(id<ANTLRTokenStream>)newtokens
+- (void) setTokenStream:(id<TokenStream>)newtokens
{
tokens = newtokens;
}

-- (id<ANTLRTreeAdaptor>)getTreeAdaptor
+- (id<TreeAdaptor>)getTreeAdaptor
{
return adaptor;
}

-- (void) setTreeAdaptor:(id<ANTLRTreeAdaptor>)anAdaptor
+- (void) setTreeAdaptor:(id<TreeAdaptor>)anAdaptor
{
adaptor = anAdaptor;
}
@@ -410,7 +410,7 @@ extern NSInteger debug;
-(void) push:(NSInteger) i
{
if (calls == nil) {
-		calls = [ANTLRIntArray newArrayWithLen:INITIAL_CALL_STACK_SIZE];
+		calls = [IntArray newArrayWithLen:INITIAL_CALL_STACK_SIZE];
}
[calls push:index];
[self seek:i];
@@ -448,12 +448,12 @@ extern NSInteger debug;
-(NSEnumerator *) objectEnumerator
{
if (e == nil) {
-		e = [[ANTLRStreamEnumerator alloc] initWithNodes:nodes andEOF:eof];
+		e = [[StreamEnumerator alloc] initWithNodes:nodes andEOF:eof];
}
return e;
}

--(void) replaceChildren:(ANTLRCommonTree *) parent From:(NSInteger)startIdx To:(NSInteger)stopIdx With:(ANTLRCommonTree *)aTree
+-(void) replaceChildren:(CommonTree *) parent From:(NSInteger)startIdx To:(NSInteger)stopIdx With:(CommonTree *)aTree
{
if (parent != nil) {
[adaptor replaceChildren:parent From:startIdx To:stopIdx With:aTree];
@@ -468,7 +468,7 @@ extern NSInteger debug;
}
NSMutableString *buf = [NSMutableString stringWithCapacity:10];
for (NSUInteger i= 0; i < [nodes count]; i++) {
-		ANTLRCommonTree * aTree = (ANTLRCommonTree *)[self getNode:i];
+		CommonTree * aTree = (CommonTree *)[self get:i];
[buf appendFormat:@" %d", [adaptor getType:aTree]];
}
return buf;
@@ -481,7 +481,7 @@ extern NSInteger debug;
}
NSMutableString *buf = [NSMutableString stringWithCapacity:10];
for (NSUInteger i = aStart; i < [nodes count] && i <= aStop; i++) {
-		ANTLRCommonTree * t = (ANTLRCommonTree *)[self getNode:i];
+		CommonTree * t = (CommonTree *)[self get:i];
[buf appendFormat:@" %d", [adaptor getType:t]];
}
return buf;
@@ -501,16 +501,16 @@ extern NSInteger debug;
NSInteger beginTokenIndex = [adaptor getTokenStartIndex:aStart];
NSInteger endTokenIndex = [adaptor getTokenStopIndex:aStop];

-		if ([adaptor getType:aStop] == ANTLRTokenTypeUP) {
+		if ([adaptor getType:aStop] == TokenTypeUP) {
endTokenIndex = [adaptor getTokenStopIndex:aStart];
}
-		else if ([adaptor getType:aStop] == ANTLRTokenTypeEOF) {
+		else if ([adaptor getType:aStop] == TokenTypeEOF) {
endTokenIndex = [self count] - 2; //don't use EOF
}
[tokens toStringFromStart:beginTokenIndex ToEnd:endTokenIndex];
}
// walk nodes looking for aStart
-	ANTLRCommonTree * aTree = nil;
+	CommonTree * aTree = nil;
NSUInteger i = 0;
for (; i < [nodes count]; i++) {
aTree = [nodes objectAtIndex:i];
diff --git a/runtime/ObjC/Framework/CharStream.h b/runtime/ObjC/Framework/CharStream.h
index f7be94b..7463160 100644
--- a/runtime/ObjC/Framework/CharStream.h
+++ b/runtime/ObjC/Framework/CharStream.h
@@ -24,13 +24,17 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRIntStream.h"
+#import "IntStream.h"

-#define	ANTLRCharStreamEOF -1
+#define	CharStreamEOF -1


-@protocol ANTLRCharStream < ANTLRIntStream >
+@protocol CharStream < IntStream >

+/** For infinite streams, you don't need this; primarily I'm providing
+ *  a useful interface for action code.  Just make sure actions don't
+ *  use this on streams that don't support it.
+ */
- (NSString *) substringWithRange:(NSRange) theRange;

/** Get the ith character of lookahead.  This is the same usually as
@@ -41,9 +45,14 @@
- (NSInteger)LT:(NSInteger) i;

// ANTLR tracks the line information automatically
-
+- (NSInteger)getLine;
// Because this stream can rewind, we need to be able to reset the line
+- (void)setLine:(NSInteger)aLine;
+
+- (void)setCharPositionInLine:(NSInteger)pos;
+

// The index of the character relative to the beginning of the line 0..n-1
+- (NSInteger)getCharPositionInLine;

@end
diff --git a/runtime/ObjC/Framework/CharStreamState.h b/runtime/ObjC/Framework/CharStreamState.h
index 0cf872f..4ca4896 100644
--- a/runtime/ObjC/Framework/CharStreamState.h
+++ b/runtime/ObjC/Framework/CharStreamState.h
@@ -1,5 +1,5 @@
//
-//  ANTLRCharStreamState.h
+//  CharStreamState.h
//  ANTLR
//
// [The "BSD licence"]
@@ -31,7 +31,7 @@
#import <Cocoa/Cocoa.h>


-@interface ANTLRCharStreamState : NSObject
+@interface CharStreamState : NSObject
{
NSInteger index;
NSUInteger line;
@@ -42,7 +42,7 @@ NSUInteger charPositionInLine;
@property (assign) NSUInteger line;
@property (assign) NSUInteger charPositionInLine;

-+ newANTLRCharStreamState;
++ newCharStreamState;

- (id) init;

diff --git a/runtime/ObjC/Framework/CharStreamState.m b/runtime/ObjC/Framework/CharStreamState.m
index b2a7e3a..0776f32 100755
--- a/runtime/ObjC/Framework/CharStreamState.m
+++ b/runtime/ObjC/Framework/CharStreamState.m
@@ -25,18 +25,18 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


-#import "ANTLRCharStreamState.h"
+#import "CharStreamState.h"


-@implementation ANTLRCharStreamState
+@implementation CharStreamState

@synthesize index;
@synthesize line;
@synthesize charPositionInLine;

-+ newANTLRCharStreamState
++ newCharStreamState
{
-    return [[ANTLRCharStreamState alloc] init];
+    return [[CharStreamState alloc] init];
}

- (id) init
diff --git a/runtime/ObjC/Framework/CommonErrorNode.h b/runtime/ObjC/Framework/CommonErrorNode.h
index d01af00..d7045ab 100644
--- a/runtime/ObjC/Framework/CommonErrorNode.h
+++ b/runtime/ObjC/Framework/CommonErrorNode.h
@@ -1,5 +1,5 @@
//
-//  ANTLRCommonErrorNode.h
+//  CommonErrorNode.h
//  ANTLR
//
// [The "BSD licence"]
@@ -29,29 +29,29 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRCommonTree.h"
-#import "ANTLRTokenStream.h"
-//#import "ANTLRIntStream.h"
-//#import "ANTLRToken.h"
-#import "ANTLRUnWantedTokenException.h"
+#import "CommonTree.h"
+#import "TokenStream.h"
+//#import "IntStream.h"
+//#import "Token.h"
+#import "UnWantedTokenException.h"

-@interface ANTLRCommonErrorNode : ANTLRCommonTree
+@interface CommonErrorNode : CommonTree
{
-id<ANTLRIntStream> input;
-id<ANTLRToken> startToken;
-id<ANTLRToken> stopToken;
-ANTLRRecognitionException *trappedException;
+id<IntStream> input;
+id<Token> startToken;
+id<Token> stopToken;
+RecognitionException *trappedException;
}

-+ (id) newANTLRCommonErrorNode:(id<ANTLRTokenStream>)anInput
-                  From:(id<ANTLRToken>)startToken
-                    To:(id<ANTLRToken>)stopToken
-                     Exception:(ANTLRRecognitionException *) e;
++ (id) newCommonErrorNode:(id<TokenStream>)anInput
+                  From:(id<Token>)startToken
+                    To:(id<Token>)stopToken
+                     Exception:(RecognitionException *) e;

-- (id) initWithInput:(id<ANTLRTokenStream>)anInput
-                From:(id<ANTLRToken>)startToken
-                  To:(id<ANTLRToken>)stopToken
-           Exception:(ANTLRRecognitionException *) e;
+- (id) initWithInput:(id<TokenStream>)anInput
+                From:(id<Token>)startToken
+                  To:(id<Token>)stopToken
+           Exception:(RecognitionException *) e;

- (void)dealloc;
- (BOOL) isNil;
@@ -60,8 +60,8 @@ ANTLRRecognitionException *trappedException;
- (NSString *)text;
- (NSString *)toString;

-@property (retain) id<ANTLRIntStream> input;
-@property (retain) id<ANTLRToken> startToken;
-@property (retain) id<ANTLRToken> stopToken;
-@property (retain) ANTLRRecognitionException *trappedException;
+@property (retain) id<IntStream> input;
+@property (retain) id<Token> startToken;
+@property (retain) id<Token> stopToken;
+@property (retain) RecognitionException *trappedException;
@end
diff --git a/runtime/ObjC/Framework/CommonErrorNode.m b/runtime/ObjC/Framework/CommonErrorNode.m
index 17fec33..7979a9e 100644
--- a/runtime/ObjC/Framework/CommonErrorNode.m
+++ b/runtime/ObjC/Framework/CommonErrorNode.m
@@ -1,5 +1,5 @@
//
-//  ANTLRCommonErrorNode.m
+//  CommonErrorNode.m
//  ANTLR
//
// [The "BSD licence"]
@@ -28,20 +28,20 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRCommonErrorNode.h"
-#import "ANTLRMissingTokenException.h"
-#import "ANTLRNoViableAltException.h"
-#import "ANTLRTreeNodeStream.h"
-#import "ANTLRUnwantedTokenException.h"
+#import "CommonErrorNode.h"
+#import "MissingTokenException.h"
+#import "NoViableAltException.h"
+#import "TreeNodeStream.h"
+#import "UnwantedTokenException.h"

-@implementation ANTLRCommonErrorNode
+@implementation CommonErrorNode

-+ (id) newANTLRCommonErrorNode:(id<ANTLRTokenStream>)anInput
-                          From:(id<ANTLRToken>)aStartToken
-                            To:(id<ANTLRToken>)aStopToken
-                     Exception:(ANTLRRecognitionException *) e
++ (id) newCommonErrorNode:(id<TokenStream>)anInput
+                          From:(id<Token>)aStartToken
+                            To:(id<Token>)aStopToken
+                     Exception:(RecognitionException *) e
{
-    return [[ANTLRCommonErrorNode alloc] initWithInput:anInput From:aStartToken To:aStopToken Exception:e];
+    return [[CommonErrorNode alloc] initWithInput:anInput From:aStartToken To:aStopToken Exception:e];
}

- (id) init
@@ -52,17 +52,17 @@
return self;
}

-- (id) initWithInput:(id<ANTLRTokenStream>)anInput
-                From:(id<ANTLRToken>)aStartToken
-                  To:(id<ANTLRToken>)aStopToken
-           Exception:(ANTLRRecognitionException *) e
+- (id) initWithInput:(id<TokenStream>)anInput
+                From:(id<Token>)aStartToken
+                  To:(id<Token>)aStopToken
+           Exception:(RecognitionException *) e
{
self = [super init];
if ( self != nil ) {
//System.out.println("aStartToken: "+aStartToken+", aStopToken: "+aStopToken);
if ( aStopToken == nil ||
([aStopToken getTokenIndex] < [aStartToken getTokenIndex] &&
-             aStopToken.type != ANTLRTokenTypeEOF) )
+             aStopToken.type != TokenTypeEOF) )
{
// sometimes resync does not consume a token (when LT(1) is
// in follow set.  So, aStopToken will be 1 to left to aStartToken. adjust.
@@ -85,7 +85,7 @@
- (void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRCommonErrorNode" );
+    NSLog( @"called dealloc in CommonErrorNode" );
#endif
if ( input ) [input release];
if ( startToken ) [startToken release];
@@ -101,22 +101,22 @@

- (NSInteger)type
{
-    return ANTLRTokenTypeInvalid;
+    return TokenTypeInvalid;
}

- (NSString *)text
{
NSString *badText = nil;
if ( [startToken isKindOfClass:[self class]] ) {
-        int i = [(id<ANTLRToken>)startToken getTokenIndex];
-        int j = [(id<ANTLRToken>)stopToken getTokenIndex];
-        if ( stopToken.type == ANTLRTokenTypeEOF ) {
-            j = [(id<ANTLRTokenStream>)input size];
+        int i = [(id<Token>)startToken getTokenIndex];
+        int j = [(id<Token>)stopToken getTokenIndex];
+        if ( stopToken.type == TokenTypeEOF ) {
+            j = [(id<TokenStream>)input size];
}
-        badText = [(id<ANTLRTokenStream>)input toStringFromStart:i ToEnd:j];
+        badText = [(id<TokenStream>)input toStringFromStart:i ToEnd:j];
}
else if ( [startToken isKindOfClass:[self class]] ) {
-        badText = [(id<ANTLRTreeNodeStream>)input toStringFromNode:startToken ToNode:stopToken];
+        badText = [(id<TreeNodeStream>)input toStringFromNode:startToken ToNode:stopToken];
}
else {
// people should subclass if they alter the tree type so this
@@ -129,22 +129,22 @@
- (NSString *)toString
{
NSString *aString;
-    if ( [trappedException isKindOfClass:[ANTLRMissingTokenException class]] ) {
+    if ( [trappedException isKindOfClass:[MissingTokenException class]] ) {
aString = [NSString stringWithFormat:@"<missing type: %@ >",
-        [(ANTLRMissingTokenException *)trappedException getMissingType]];
+        [(MissingTokenException *)trappedException getMissingType]];
return aString;
}
-    else if ( [trappedException isKindOfClass:[ANTLRUnwantedTokenException class]] ) {
+    else if ( [trappedException isKindOfClass:[UnwantedTokenException class]] ) {
aString = [NSString stringWithFormat:@"<extraneous: %@, resync=%@>",
[trappedException getUnexpectedToken],
[self text]];
return aString;
}
-    else if ( [trappedException isKindOfClass:[ANTLRMismatchedTokenException class]] ) {
+    else if ( [trappedException isKindOfClass:[MismatchedTokenException class]] ) {
aString = [NSString stringWithFormat:@"<mismatched token: %@, resync=%@>", trappedException.token, [self text]];
return aString;
}
-    else if ( [trappedException isKindOfClass:[ANTLRNoViableAltException class]] ) {
+    else if ( [trappedException isKindOfClass:[NoViableAltException class]] ) {
aString = [NSString stringWithFormat:@"<unexpected:  %@, resync=%@>", trappedException.token, [self text]];
return aString;
}
diff --git a/runtime/ObjC/Framework/CommonToken.h b/runtime/ObjC/Framework/CommonToken.h
index 948e129..187763e 100644
--- a/runtime/ObjC/Framework/CommonToken.h
+++ b/runtime/ObjC/Framework/CommonToken.h
@@ -26,10 +26,10 @@


#import <Cocoa/Cocoa.h>
-#import "ANTLRToken.h"
-#import "ANTLRCharStream.h"
+#import "Token.h"
+#import "CharStream.h"

-@interface ANTLRCommonToken : NSObject < ANTLRToken > {
+@interface CommonToken : NSObject < Token > {
__strong NSString *text;
NSInteger type;
// information about the Token's position in the input stream
@@ -44,37 +44,37 @@
NSInteger startIndex;
NSInteger stopIndex;
// the actual input stream this token was found in
-	__strong id<ANTLRCharStream> input;
+	__strong id<CharStream> input;
}

+ (void) initialize;
+ (NSInteger) DEFAULT_CHANNEL;
-+ (id<ANTLRToken>)INVALID_TOKEN;
++ (id<Token>)INVALID_TOKEN;
+ (NSInteger) INVALID_TOKEN_TYPE;
-+ (id<ANTLRToken>) newToken;
-+ (id<ANTLRToken>) newToken:(id<ANTLRCharStream>)anInput
++ (id<Token>) newToken;
++ (id<Token>) newToken:(id<CharStream>)anInput
Type:(NSInteger)aTType
Channel:(NSInteger)aChannel
Start:(NSInteger)aStart
Stop:(NSInteger)aStop;
-+ (id<ANTLRToken>) newToken:(ANTLRTokenType)aType;
-+ (id<ANTLRToken>) newToken:(NSInteger)tokenType Text:(NSString *)tokenText;
-+ (id<ANTLRToken>) newTokenWithToken:(ANTLRCommonToken *)fromToken;
-+ (id<ANTLRToken>) eofToken;
-+ (id<ANTLRToken>) skipToken;
-+ (id<ANTLRToken>) invalidToken;
-+ (ANTLRTokenChannel) defaultChannel;
++ (id<Token>) newToken:(TokenType)aType;
++ (id<Token>) newToken:(NSInteger)tokenType Text:(NSString *)tokenText;
++ (id<Token>) newTokenWithToken:(CommonToken *)fromToken;
++ (id<Token>) eofToken;
++ (id<Token>) skipToken;
++ (id<Token>) invalidToken;
++ (TokenChannel) defaultChannel;

// designated initializer. This is used as the default way to initialize a Token in the generated code.
- (id) init;
-- (id) initWithInput:(id<ANTLRCharStream>)anInput
+- (id) initWithInput:(id<CharStream>)anInput
Type:(NSInteger)aTType
Channel:(NSInteger)aChannel
Start:(NSInteger)theStart
Stop:(NSInteger)theStop;
-- (id) initWithToken:(id<ANTLRToken>)aToken;
-- (id) initWithType:(ANTLRTokenType)aType;
-- (id) initWithType:(ANTLRTokenType)aTType Text:(NSString *)tokenText;
+- (id) initWithToken:(id<Token>)aToken;
+- (id) initWithType:(TokenType)aType;
+- (id) initWithType:(TokenType)aTType Text:(NSString *)tokenText;

//----------------------------------------------------------
//  text
@@ -97,8 +97,8 @@
//----------------------------------------------------------
//  input
//----------------------------------------------------------
-- (id<ANTLRCharStream>)input;
-- (void) setInput:(id<ANTLRCharStream>)anInput;
+- (id<CharStream>)input;
+- (void) setInput:(id<CharStream>)anInput;

- (NSInteger)getStart;
- (void) setStart: (NSInteger)aStart;
@@ -124,6 +124,6 @@
@property (assign) NSInteger index;
@property (assign, getter=getStart, setter=setStart:) NSInteger startIndex;
@property (assign, getter=getStop, setter=setStop:) NSInteger stopIndex;
-@property (retain) id<ANTLRCharStream> input;
+@property (retain) id<CharStream> input;

@end
diff --git a/runtime/ObjC/Framework/CommonToken.m b/runtime/ObjC/Framework/CommonToken.m
index ee0e018..5df9474 100644
--- a/runtime/ObjC/Framework/CommonToken.m
+++ b/runtime/ObjC/Framework/CommonToken.m
@@ -25,16 +25,16 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


-#import "ANTLRCommonToken.h"
+#import "CommonToken.h"

-static ANTLRCommonToken *SKIP_TOKEN;
-static ANTLRCommonToken *EOF_TOKEN;
-static ANTLRCommonToken *INVALID_TOKEN;
+static CommonToken *SKIP_TOKEN;
+static CommonToken *EOF_TOKEN;
+static CommonToken *INVALID_TOKEN;

-@implementation ANTLRCommonToken
+@implementation CommonToken

-    static NSInteger DEFAULT_CHANNEL = ANTLRTokenChannelDefault;
-    static NSInteger INVALID_TOKEN_TYPE = ANTLRTokenTypeInvalid;
+    static NSInteger DEFAULT_CHANNEL = TokenChannelDefault;
+    static NSInteger INVALID_TOKEN_TYPE = TokenTypeInvalid;


@synthesize text;
@@ -49,15 +49,15 @@ static ANTLRCommonToken *INVALID_TOKEN;

+ (void) initialize
{
-    EOF_TOKEN = [ANTLRCommonToken newToken:ANTLRTokenTypeEOF Text:@"EOF"];
-    SKIP_TOKEN = [ANTLRCommonToken newToken:ANTLRTokenTypeInvalid Text:@"Skip"];
-    INVALID_TOKEN = [ANTLRCommonToken newToken:ANTLRTokenTypeInvalid Text:@"Invalid"];
+    EOF_TOKEN = [CommonToken newToken:TokenTypeEOF Text:@"EOF"];
+    SKIP_TOKEN = [CommonToken newToken:TokenTypeInvalid Text:@"Skip"];
+    INVALID_TOKEN = [CommonToken newToken:TokenTypeInvalid Text:@"Invalid"];
[EOF_TOKEN retain];
[SKIP_TOKEN retain];
[INVALID_TOKEN retain];
}

-+ (ANTLRCommonToken *)INVALID_TOKEN
++ (CommonToken *)INVALID_TOKEN
{
return INVALID_TOKEN;
}
@@ -72,70 +72,70 @@ static ANTLRCommonToken *INVALID_TOKEN;
return INVALID_TOKEN_TYPE;
}

-+ (ANTLRCommonToken *) newToken
++ (CommonToken *) newToken
{
-    return [[ANTLRCommonToken alloc] init];
+    return [[CommonToken alloc] init];
}

-+ (ANTLRCommonToken *) newToken:(id<ANTLRCharStream>)anInput Type:(NSInteger)aTType Channel:(NSInteger)aChannel Start:(NSInteger)aStart Stop:(NSInteger)aStop
++ (CommonToken *) newToken:(id<CharStream>)anInput Type:(NSInteger)aTType Channel:(NSInteger)aChannel Start:(NSInteger)aStart Stop:(NSInteger)aStop
{
-    return [[ANTLRCommonToken alloc] initWithInput:(id<ANTLRCharStream>)anInput Type:(NSInteger)aTType Channel:(NSInteger)aChannel Start:(NSInteger)aStart Stop:(NSInteger)aStop];
+    return [[CommonToken alloc] initWithInput:(id<CharStream>)anInput Type:(NSInteger)aTType Channel:(NSInteger)aChannel Start:(NSInteger)aStart Stop:(NSInteger)aStop];
}

-+ (ANTLRCommonToken *) newToken:(ANTLRTokenType)tokenType
++ (CommonToken *) newToken:(TokenType)tokenType
{
-    return( [[ANTLRCommonToken alloc] initWithType:tokenType] );
+    return( [[CommonToken alloc] initWithType:tokenType] );
}

-+ (ANTLRCommonToken *) newToken:(NSInteger)tokenType Text:(NSString *)tokenText
++ (CommonToken *) newToken:(NSInteger)tokenType Text:(NSString *)tokenText
{
-    return( [[ANTLRCommonToken alloc] initWithType:tokenType Text:tokenText] );
+    return( [[CommonToken alloc] initWithType:tokenType Text:tokenText] );
}

-+ (ANTLRCommonToken *) newTokenWithToken:(ANTLRCommonToken *)fromToken
++ (CommonToken *) newTokenWithToken:(CommonToken *)fromToken
{
-    return( [[ANTLRCommonToken alloc] initWithToken:fromToken] );
+    return( [[CommonToken alloc] initWithToken:fromToken] );
}

// return the singleton EOF Token
-+ (id<ANTLRToken>) eofToken
++ (id<Token>) eofToken
{
if (EOF_TOKEN == nil) {
-        EOF_TOKEN = [[ANTLRCommonToken newToken:ANTLRTokenTypeEOF Text:@"EOF"] retain];
+        EOF_TOKEN = [[CommonToken newToken:TokenTypeEOF Text:@"EOF"] retain];
}
return EOF_TOKEN;
}

// return the singleton skip Token
-+ (id<ANTLRToken>) skipToken
++ (id<Token>) skipToken
{
if (SKIP_TOKEN == nil) {
-        SKIP_TOKEN = [[ANTLRCommonToken newToken:ANTLRTokenTypeInvalid Text:@"Skip"] retain];
+        SKIP_TOKEN = [[CommonToken newToken:TokenTypeInvalid Text:@"Skip"] retain];
}
return SKIP_TOKEN;
}

// return the singleton skip Token
-+ (id<ANTLRToken>) invalidToken
++ (id<Token>) invalidToken
{
if (INVALID_TOKEN == nil) {
-        INVALID_TOKEN = [[ANTLRCommonToken newToken:ANTLRTokenTypeInvalid Text:@"Invalid"] retain];
+        INVALID_TOKEN = [[CommonToken newToken:TokenTypeInvalid Text:@"Invalid"] retain];
}
return SKIP_TOKEN;
}

// the default channel for this class of Tokens
-+ (ANTLRTokenChannel) defaultChannel
++ (TokenChannel) defaultChannel
{
-    return ANTLRTokenChannelDefault;
+    return TokenChannelDefault;
}

- (id) init
{
if ((self = [super init]) != nil) {
input = nil;
-        type = ANTLRTokenTypeInvalid;
-        channel = ANTLRTokenChannelDefault;
+        type = TokenTypeInvalid;
+        channel = TokenChannelDefault;
startIndex = 0;
stopIndex = 0;
}
@@ -143,7 +143,7 @@ static ANTLRCommonToken *INVALID_TOKEN;
}

// designated initializer
-- (id) initWithInput:(id<ANTLRCharStream>)anInput
+- (id) initWithInput:(id<CharStream>)anInput
Type:(NSInteger)aTType
Channel:(NSInteger)aChannel
Start:(NSInteger)aStart
@@ -156,7 +156,7 @@ static ANTLRCommonToken *INVALID_TOKEN;
channel = aChannel;
startIndex = aStart;
stopIndex = aStop;
-        if (type == ANTLRTokenTypeEOF)
+        if (type == TokenTypeEOF)
text = @"EOF";
else
text = [input substringWithRange:NSMakeRange(startIndex, (stopIndex-startIndex)+1)];
@@ -165,7 +165,7 @@ static ANTLRCommonToken *INVALID_TOKEN;
return self;
}

-- (id) initWithToken:(ANTLRCommonToken *)oldToken
+- (id) initWithToken:(CommonToken *)oldToken
{
if ((self = [super init]) != nil) {
text = [NSString stringWithString:oldToken.text];
@@ -177,7 +177,7 @@ static ANTLRCommonToken *INVALID_TOKEN;
channel = oldToken.channel;
input = oldToken.input;
if ( input ) [input retain];
-        if ( [oldToken isKindOfClass:[ANTLRCommonToken class]] ) {
+        if ( [oldToken isKindOfClass:[CommonToken class]] ) {
startIndex = oldToken.startIndex;
stopIndex = oldToken.stopIndex;
}
@@ -185,7 +185,7 @@ static ANTLRCommonToken *INVALID_TOKEN;
return self;
}

-- (id) initWithType:(ANTLRTokenType)aTType
+- (id) initWithType:(TokenType)aTType
{
if ((self = [super init]) != nil) {
self.type = aTType;
@@ -193,7 +193,7 @@ static ANTLRCommonToken *INVALID_TOKEN;
return self;
}

-- (id) initWithType:(ANTLRTokenType)aTType Text:(NSString *)tokenText
+- (id) initWithType:(TokenType)aTType Text:(NSString *)tokenText
{
if ((self = [super init]) != nil) {
self.type = aTType;
@@ -206,7 +206,7 @@ static ANTLRCommonToken *INVALID_TOKEN;
- (void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRCommonToken" );
+    NSLog( @"called dealloc in CommonToken" );
#endif
if ( input ) [input release];
if ( text ) [text release];
@@ -217,7 +217,7 @@ static ANTLRCommonToken *INVALID_TOKEN;
// the input stream is *not* copied!
- (id) copyWithZone:(NSZone *)theZone
{
-    ANTLRCommonToken *copy = [[[self class] allocWithZone:theZone] init];
+    CommonToken *copy = [[[self class] allocWithZone:theZone] init];

if (text)
copy.text = [text copyWithZone:nil];
@@ -313,12 +313,12 @@ static ANTLRCommonToken *INVALID_TOKEN;
//----------------------------------------------------------
//  input
//----------------------------------------------------------
-- (id<ANTLRCharStream>) input
+- (id<CharStream>) input
{
return input;
}

-- (void) setInput: (id<ANTLRCharStream>) anInput
+- (void) setInput: (id<CharStream>) anInput
{
if (input != anInput) {
if ( input ) [input release];
diff --git a/runtime/ObjC/Framework/CommonTokenStream.h b/runtime/ObjC/Framework/CommonTokenStream.h
index c26130e..e5de349 100644
--- a/runtime/ObjC/Framework/CommonTokenStream.h
+++ b/runtime/ObjC/Framework/CommonTokenStream.h
@@ -25,15 +25,15 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRTokenStream.h"
-#import "ANTLRToken.h"
-#import "ANTLRCommonToken.h"
-#import "ANTLRTokenSource.h"
+#import "TokenStream.h"
+#import "Token.h"
+#import "CommonToken.h"
+#import "TokenSource.h"
#import "ANTLRBitSet.h"
-#import "ANTLRBufferedTokenStream.h"
+#import "BufferedTokenStream.h"
#import "AMutableDictionary.h"

-@interface ANTLRCommonTokenStream : ANTLRBufferedTokenStream < ANTLRTokenStream >
+@interface CommonTokenStream : BufferedTokenStream < TokenStream >
{
__strong AMutableDictionary *channelOverride;
NSUInteger channel;
@@ -42,18 +42,18 @@
@property (retain, getter=getChannelOverride,setter=setChannelOverride:) AMutableDictionary *channelOverride;
@property (assign, getter=channel,setter=setChannel:) NSUInteger channel;

-+ (ANTLRCommonTokenStream *)newANTLRCommonTokenStream;
-+ (ANTLRCommonTokenStream *)newANTLRCommonTokenStreamWithTokenSource:(id<ANTLRTokenSource>)theTokenSource;
-+ (ANTLRCommonTokenStream *)newANTLRCommonTokenStreamWithTokenSource:(id<ANTLRTokenSource>)theTokenSource
++ (CommonTokenStream *)newCommonTokenStream;
++ (CommonTokenStream *)newCommonTokenStreamWithTokenSource:(id<TokenSource>)theTokenSource;
++ (CommonTokenStream *)newCommonTokenStreamWithTokenSource:(id<TokenSource>)theTokenSource
Channel:(NSUInteger)aChannel;

- (id) init;
-- (id) initWithTokenSource:(id<ANTLRTokenSource>)theTokenSource;
-- (id) initWithTokenSource:(id<ANTLRTokenSource>)theTokenSource Channel:(NSUInteger)aChannel;
+- (id) initWithTokenSource:(id<TokenSource>)theTokenSource;
+- (id) initWithTokenSource:(id<TokenSource>)theTokenSource Channel:(NSUInteger)aChannel;

- (void) consume;
-- (id<ANTLRToken>) LB:(NSInteger)k;
-- (id<ANTLRToken>) LT:(NSInteger)k;
+- (id<Token>) LB:(NSInteger)k;
+- (id<Token>) LT:(NSInteger)k;

- (NSInteger) skipOffChannelTokens:(NSInteger) i;
- (NSInteger) skipOffChannelTokensReverse:(NSInteger) i;
@@ -62,8 +62,8 @@

- (NSInteger) getNumberOfOnChannelTokens;

-// - (id<ANTLRTokenSource>) getTokenSource;
-- (void) setTokenSource: (id<ANTLRTokenSource>) aTokenSource;
+// - (id<TokenSource>) getTokenSource;
+- (void) setTokenSource: (id<TokenSource>) aTokenSource;

- (NSUInteger)channel;
- (void)setChannel:(NSUInteger)aChannel;
@@ -79,7 +79,7 @@
- (NSArray *) tokensInRange:(NSRange)aRange withTypes:(NSArray *)tokenTypes;
- (NSArray *) tokensInRange:(NSRange)aRange withType:(NSInteger)tokenType;

-- (id<ANTLRToken>) getToken:(NSInteger)i;
+- (id<Token>) getToken:(NSInteger)i;

- (NSInteger) size;
- (void) rewind;
@@ -88,7 +88,7 @@

- (NSString *) toString;
- (NSString *) toStringFromStart:(NSInteger)startIndex ToEnd:(NSInteger)stopIndex;
-- (NSString *) toStringFromToken:(id<ANTLRToken>)startToken ToToken:(id<ANTLRToken>)stopToken;
+- (NSString *) toStringFromToken:(id<Token>)startToken ToToken:(id<Token>)stopToken;

#endif

diff --git a/runtime/ObjC/Framework/CommonTokenStream.m b/runtime/ObjC/Framework/CommonTokenStream.m
index 9ebc325..b14133b 100644
--- a/runtime/ObjC/Framework/CommonTokenStream.m
+++ b/runtime/ObjC/Framework/CommonTokenStream.m
@@ -24,51 +24,51 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRToken.h"
-#import "ANTLRCommonTokenStream.h"
+#import "Token.h"
+#import "CommonTokenStream.h"


-@implementation ANTLRCommonTokenStream
+@implementation CommonTokenStream

@synthesize channelOverride;
@synthesize channel;

#pragma mark Initialization

-+ (ANTLRCommonTokenStream *)newANTLRCommonTokenStream
++ (CommonTokenStream *)newCommonTokenStream
{
-    return [[ANTLRCommonTokenStream alloc] init];
+    return [[CommonTokenStream alloc] init];
}

-+ (ANTLRCommonTokenStream *)newANTLRCommonTokenStreamWithTokenSource:(id<ANTLRTokenSource>)theTokenSource
++ (CommonTokenStream *)newCommonTokenStreamWithTokenSource:(id<TokenSource>)theTokenSource
{
-    return [[ANTLRCommonTokenStream alloc] initWithTokenSource:(id<ANTLRTokenSource>)theTokenSource];
+    return [[CommonTokenStream alloc] initWithTokenSource:(id<TokenSource>)theTokenSource];
}

-+ (ANTLRCommonTokenStream *)newANTLRCommonTokenStreamWithTokenSource:(id<ANTLRTokenSource>)theTokenSource Channel:(NSUInteger)aChannel
++ (CommonTokenStream *)newCommonTokenStreamWithTokenSource:(id<TokenSource>)theTokenSource Channel:(NSUInteger)aChannel
{
-    return [[ANTLRCommonTokenStream alloc] initWithTokenSource:(id<ANTLRTokenSource>)theTokenSource Channel:aChannel];
+    return [[CommonTokenStream alloc] initWithTokenSource:(id<TokenSource>)theTokenSource Channel:aChannel];
}

- (id) init
{
if ((self = [super init]) != nil) {
channelOverride = [[AMutableDictionary dictionaryWithCapacity:100] retain];
-		channel = ANTLRTokenChannelDefault;
+		channel = TokenChannelDefault;
}
return self;
}

-- (id) initWithTokenSource:(id<ANTLRTokenSource>)theTokenSource
+- (id) initWithTokenSource:(id<TokenSource>)theTokenSource
{
if ((self = [super initWithTokenSource:theTokenSource]) != nil) {
channelOverride = [[AMutableDictionary dictionaryWithCapacity:100] retain];
-		channel = ANTLRTokenChannelDefault;
+		channel = TokenChannelDefault;
}
return self;
}

-- (id) initWithTokenSource:(id<ANTLRTokenSource>)theTokenSource Channel:(NSUInteger)aChannel
+- (id) initWithTokenSource:(id<TokenSource>)theTokenSource Channel:(NSUInteger)aChannel
{
if ((self = [super initWithTokenSource:theTokenSource]) != nil) {
channelOverride = [[AMutableDictionary dictionaryWithCapacity:100] retain];
@@ -80,7 +80,7 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRCommonTokenStream" );
+    NSLog( @"called dealloc in CommonTokenStream" );
#endif
if ( channelOverride ) [channelOverride release];
if ( tokens ) [tokens release];
@@ -94,7 +94,7 @@
if (index == -1) [self setup];
index++;
[self sync:index];
-    while ( ((ANTLRCommonToken *)[tokens objectAtIndex:index]).channel != channel ) {
+    while ( ((CommonToken *)[tokens objectAtIndex:index]).channel != channel ) {
index++;
[self sync:index];
}
@@ -102,7 +102,7 @@

#pragma mark Lookahead

-- (id<ANTLRToken>) LB:(NSInteger)k
+- (id<Token>) LB:(NSInteger)k
{
if ( k == 0 || (index-k) < 0 ) {
return nil;
@@ -120,7 +120,7 @@
return [tokens objectAtIndex:i];
}

-- (id<ANTLRToken>) LT:(NSInteger)k
+- (id<Token>) LT:(NSInteger)k
{
if ( index == -1 ) [self setup];
if ( k == 0 ) return nil;
@@ -132,7 +132,7 @@
n++;
}
//	if ( i >= (NSInteger)[tokens count] ) {
-//		return [ANTLRCommonToken eofToken];
+//		return [CommonToken eofToken];
//	}
if ( i > range ) range = i;
return [tokens objectAtIndex:i];
@@ -143,7 +143,7 @@
- (NSInteger) skipOffChannelTokens:(NSInteger) idx
{
[self sync:idx];
-	while ( ((ANTLRCommonToken *)[tokens objectAtIndex:idx]).channel != channel ) {
+	while ( ((CommonToken *)[tokens objectAtIndex:idx]).channel != channel ) {
idx++;
[self sync:idx];
}
@@ -152,7 +152,7 @@

- (NSInteger) skipOffChannelTokensReverse:(NSInteger) i
{
-	while ( i >= 0 && ((ANTLRCommonToken *)[tokens objectAtIndex:i]).channel != channel ) {
+	while ( i >= 0 && ((CommonToken *)[tokens objectAtIndex:i]).channel != channel ) {
i--;
}
return i;
@@ -163,7 +163,7 @@
index = 0;
[self sync:0];
int i = 0;
-    while ( ((ANTLRCommonToken *)[tokens objectAtIndex:i]).channel != channel ) {
+    while ( ((CommonToken *)[tokens objectAtIndex:i]).channel != channel ) {
i++;
[self sync:i];
}
@@ -176,28 +176,28 @@
NSInteger n = 0;
[self fill];
for( int i = 0; i < [tokens count]; i++ ) {
-        ANTLRCommonToken *t = [tokens objectAtIndex:i];
+        CommonToken *t = [tokens objectAtIndex:i];
if ( t.channel == channel )
n++;
-        if ( t.type == ANTLRTokenTypeEOF )
+        if ( t.type == TokenTypeEOF )
break;
}
return n;
}

/** Reset this token stream by setting its token source. */
-- (void) setTokenSource:(id<ANTLRTokenSource>)aTokenSource
+- (void) setTokenSource:(id<TokenSource>)aTokenSource
{
[super setTokenSource:aTokenSource];
-    channel = ANTLRTokenChannelDefault;
+    channel = TokenChannelDefault;
}

- (id) copyWithZone:(NSZone *)aZone
{
-    ANTLRCommonTokenStream *copy;
+    CommonTokenStream *copy;

//    copy = [[[self class] allocWithZone:aZone] init];
-    copy = [super copyWithZone:aZone]; // allocation occurs in ANTLRBaseTree
+    copy = [super copyWithZone:aZone]; // allocation occurs in BaseTree
if ( self.channelOverride )
copy.channelOverride = [channelOverride copyWithZone:aZone];
copy.channel = channel;
@@ -234,7 +234,7 @@

#pragma mark Accessors

-- (id<ANTLRTokenSource>) getTokenSource
+- (id<TokenSource>) getTokenSource
{
return tokenSource;
}
@@ -252,7 +252,7 @@
AMutableArray *filteredTokens = [AMutableArray arrayWithCapacity:100];
unsigned int i=0;
for (i = startIndex; i<=stopIndex; i++) {
-		id<ANTLRToken> token = [tokens objectAtIndex:i];
+		id<Token> token = [tokens objectAtIndex:i];
if (aBitSet == nil || [aBitSet member:token.type]) {
[filteredTokens addObject:token];
}
@@ -282,7 +282,7 @@
return returnTokens;
}

-- (id<ANTLRToken>) getToken:(NSInteger)i
+- (id<Token>) getToken:(NSInteger)i
{
return [tokens objectAtIndex:i];
}
@@ -319,7 +319,7 @@
- (NSString *) toStringFromStart:(NSInteger)startIdx ToEnd:(NSInteger) stopIdx
{
NSMutableString *stringBuffer;
-    id<ANTLRToken> t;
+    id<Token> t;

if ( startIdx < 0 || stopIdx < 0 ) {
return nil;
@@ -332,13 +332,13 @@
}
stringBuffer = [NSMutableString stringWithCapacity:30];
for (int i = startIdx; i <= stopIdx; i++) {
-        t = (id<ANTLRToken>)[tokens objectAtIndex:i];
+        t = (id<Token>)[tokens objectAtIndex:i];
[stringBuffer appendString:[t text]];
}
return stringBuffer;
}

-- (NSString *) toStringFromToken:(id<ANTLRToken>)startToken ToToken:(id<ANTLRToken>)stopToken
+- (NSString *) toStringFromToken:(id<Token>)startToken ToToken:(id<Token>)stopToken
{
if (startToken && stopToken) {
int startIdx = [startToken getTokenIndex];
diff --git a/runtime/ObjC/Framework/CommonTree.h b/runtime/ObjC/Framework/CommonTree.h
index 2becb76..56cf98e 100644
--- a/runtime/ObjC/Framework/CommonTree.h
+++ b/runtime/ObjC/Framework/CommonTree.h
@@ -25,45 +25,45 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRCommonToken.h"
-#import "ANTLRBaseTree.h"
+#import "CommonToken.h"
+#import "BaseTree.h"

-@interface ANTLRCommonTree : ANTLRBaseTree <ANTLRTree> {
-	__strong ANTLRCommonToken *token;
+@interface CommonTree : BaseTree <Tree> {
+	__strong CommonToken *token;
NSInteger startIndex;
NSInteger stopIndex;
-    __strong ANTLRCommonTree *parent;
+    __strong CommonTree *parent;
NSInteger childIndex;
}

-+ (ANTLRCommonTree *) invalidNode;
-+ (ANTLRCommonTree *) newTree;
-+ (ANTLRCommonTree *) newTreeWithTree:(ANTLRCommonTree *)aTree;
-+ (ANTLRCommonTree *) newTreeWithToken:(ANTLRCommonToken *)aToken;
-+ (ANTLRCommonTree *) newTreeWithTokenType:(NSInteger)tokenType;
-+ (ANTLRCommonTree *) newTreeWithTokenType:(NSInteger)aTType Text:(NSString *)theText;
++ (CommonTree *) invalidNode;
++ (CommonTree *) newTree;
++ (CommonTree *) newTreeWithTree:(CommonTree *)aTree;
++ (CommonTree *) newTreeWithToken:(CommonToken *)aToken;
++ (CommonTree *) newTreeWithTokenType:(NSInteger)tokenType;
++ (CommonTree *) newTreeWithTokenType:(NSInteger)aTType Text:(NSString *)theText;

- (id) init;
-- (id) initWithTreeNode:(ANTLRCommonTree *)aNode;
-- (id) initWithToken:(ANTLRCommonToken *)aToken;
+- (id) initWithTreeNode:(CommonTree *)aNode;
+- (id) initWithToken:(CommonToken *)aToken;
- (id) initWithTokenType:(NSInteger)aTokenType;
- (id) initWithTokenType:(NSInteger)aTokenType Text:(NSString *)theText;

-- (id<ANTLRBaseTree>) copyWithZone:(NSZone *)aZone;
+- (id<BaseTree>) copyWithZone:(NSZone *)aZone;

- (BOOL) isNil;

-- (ANTLRCommonToken *) getToken;
-- (void) setToken:(ANTLRCommonToken *)aToken;
-- (ANTLRCommonToken *) dupNode;
+- (CommonToken *) getToken;
+- (void) setToken:(CommonToken *)aToken;
+- (CommonToken *) dupNode;
- (NSInteger)type;
- (NSString *)text;
- (NSUInteger)line;
- (void) setLine:(NSUInteger)aLine;
- (NSUInteger)charPositionInLine;
- (void) setCharPositionInLine:(NSUInteger)pos;
-- (ANTLRCommonTree *) getParent;
-- (void) setParent:(ANTLRCommonTree *) t;
+- (CommonTree *) getParent;
+- (void) setParent:(CommonTree *) t;

#ifdef DONTUSENOMO
- (NSString *) treeDescription;
@@ -76,17 +76,17 @@
- (void) setTokenStopIndex: (NSInteger) aStopIndex;

/*
- @property (retain, getter=getANTLRCommonToken, setter=setANTLRCommonToken:) ANTLRCommonToken *token;
+ @property (retain, getter=getCommonToken, setter=setCommonToken:) CommonToken *token;
@property (assign, getter=getTokenStartIndex, setter=setTokenStartIndex:) NSInteger startIndex;
@property (assign, getter=getTokenStopIndex, setter=setTokenStopIndex:) NSInteger stopIndex;
- @property (retain, getter=getParent, setter=setParent:) id<ANTLRBaseTree> parentparent;
+ @property (retain, getter=getParent, setter=setParent:) id<BaseTree> parentparent;
@property (assign, getter=getChildIndex, setter=setChildIndex:) NSInteger childIndex;
*/

-@property (retain) ANTLRCommonToken *token;
+@property (retain) CommonToken *token;
@property (assign) NSInteger startIndex;
@property (assign) NSInteger stopIndex;
-@property (retain) ANTLRCommonTree *parent;
+@property (retain) CommonTree *parent;
@property (assign) NSInteger childIndex;

@end
diff --git a/runtime/ObjC/Framework/CommonTree.m b/runtime/ObjC/Framework/CommonTree.m
index 68c1fc1..1824c60 100644
--- a/runtime/ObjC/Framework/CommonTree.m
+++ b/runtime/ObjC/Framework/CommonTree.m
@@ -24,50 +24,50 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRCommonTree.h"
+#import "CommonTree.h"


-@implementation ANTLRCommonTree
+@implementation CommonTree

-+ (ANTLRCommonTree *)INVALID_NODE
++ (CommonTree *)INVALID_NODE
{
-	return [[ANTLRCommonTree alloc] initWithToken:[ANTLRCommonToken invalidToken]];
+	return [[CommonTree alloc] initWithToken:[CommonToken invalidToken]];
}

-+ (ANTLRCommonTree *)invalidNode
++ (CommonTree *)invalidNode
{
-    // Had to cast to ANTLRCommonTree * here, because GCC is dumb.
-	return [[ANTLRCommonTree alloc] initWithToken:ANTLRCommonToken.INVALID_TOKEN];
+    // Had to cast to CommonTree * here, because GCC is dumb.
+	return [[CommonTree alloc] initWithToken:CommonToken.INVALID_TOKEN];
}

-+ (ANTLRCommonTree *)newTree
++ (CommonTree *)newTree
{
-    return [[ANTLRCommonTree alloc] init];
+    return [[CommonTree alloc] init];
}

-+ (ANTLRCommonTree *)newTreeWithTree:(ANTLRCommonTree *)aTree
++ (CommonTree *)newTreeWithTree:(CommonTree *)aTree
{
-    return [[ANTLRCommonTree alloc] initWithTreeNode:aTree];
+    return [[CommonTree alloc] initWithTreeNode:aTree];
}

-+ (ANTLRCommonTree *)newTreeWithToken:(id<ANTLRToken>)aToken
++ (CommonTree *)newTreeWithToken:(id<Token>)aToken
{
-	return [[ANTLRCommonTree alloc] initWithToken:aToken];
+	return [[CommonTree alloc] initWithToken:aToken];
}

-+ (ANTLRCommonTree *)newTreeWithTokenType:(NSInteger)aTType
++ (CommonTree *)newTreeWithTokenType:(NSInteger)aTType
{
-	return [[ANTLRCommonTree alloc] initWithTokenType:(NSInteger)aTType];
+	return [[CommonTree alloc] initWithTokenType:(NSInteger)aTType];
}

-+ (ANTLRCommonTree *)newTreeWithTokenType:(NSInteger)aTType Text:(NSString *)theText
++ (CommonTree *)newTreeWithTokenType:(NSInteger)aTType Text:(NSString *)theText
{
-	return [[ANTLRCommonTree alloc] initWithTokenType:(NSInteger)aTType Text:theText];
+	return [[CommonTree alloc] initWithTokenType:(NSInteger)aTType Text:theText];
}

- (id)init
{
-	self = (ANTLRCommonTree *)[super init];
+	self = (CommonTree *)[super init];
if ( self != nil ) {
token = nil;
startIndex = -1;
@@ -75,12 +75,12 @@
parent = nil;
childIndex = -1;
}
-	return (ANTLRCommonTree *)self;
+	return (CommonTree *)self;
}

-- (id)initWithTreeNode:(ANTLRCommonTree *)aNode
+- (id)initWithTreeNode:(CommonTree *)aNode
{
-	self = (ANTLRCommonTree *)[super init];
+	self = (CommonTree *)[super init];
if ( self != nil ) {
token = aNode.token;
if ( token ) [token retain];
@@ -92,9 +92,9 @@
return self;
}

-- (id)initWithToken:(id<ANTLRToken>)aToken
+- (id)initWithToken:(id<Token>)aToken
{
-	self = (ANTLRCommonTree *)[super init];
+	self = (CommonTree *)[super init];
if ( self != nil ) {
token = aToken;
if ( token ) [token retain];
@@ -108,9 +108,9 @@

- (id)initWithTokenType:(NSInteger)aTokenType
{
-	self = (ANTLRCommonTree *)[super init];
+	self = (CommonTree *)[super init];
if ( self != nil ) {
-		token = [[ANTLRCommonToken newToken:aTokenType] retain];
+		token = [[CommonToken newToken:aTokenType] retain];
//		startIndex = token.startIndex;
startIndex = -1;
//		stopIndex = token.stopIndex;
@@ -123,9 +123,9 @@

- (id) initWithTokenType:(NSInteger)aTokenType Text:(NSString *)theText
{
-	self = (ANTLRCommonTree *)[super init];
+	self = (CommonTree *)[super init];
if ( self != nil ) {
-		token = [[ANTLRCommonToken newToken:aTokenType Text:theText] retain];
+		token = [[CommonToken newToken:aTokenType Text:theText] retain];
//		startIndex = token.startIndex;
startIndex = -1;
//		stopIndex = token.stopIndex;
@@ -151,15 +151,15 @@

- (id) copyWithZone:(NSZone *)aZone
{
-    ANTLRCommonTree *copy;
+    CommonTree *copy;

//    copy = [[[self class] allocWithZone:aZone] init];
-    copy = [super copyWithZone:aZone]; // allocation occurs in ANTLRBaseTree
+    copy = [super copyWithZone:aZone]; // allocation occurs in BaseTree
if ( self.token )
copy.token = [self.token copyWithZone:aZone];
copy.startIndex = startIndex;
copy.stopIndex = stopIndex;
-    copy.parent = (ANTLRCommonTree *)[self.parent copyWithZone:aZone];
+    copy.parent = (CommonTree *)[self.parent copyWithZone:aZone];
copy.childIndex = childIndex;
return copy;
}
@@ -169,12 +169,12 @@
return token == nil;
}

-- (ANTLRCommonToken *) getToken
+- (CommonToken *) getToken
{
return token;
}

-- (void) setToken:(ANTLRCommonToken *) aToken
+- (void) setToken:(CommonToken *) aToken
{
if ( token != aToken ) {
if ( token ) [token release];
@@ -183,16 +183,16 @@
}
}

-- (ANTLRCommonTree *) dupNode
+- (CommonTree *) dupNode
{
-    return [ANTLRCommonTree newTreeWithTree:self ];
+    return [CommonTree newTreeWithTree:self ];
}

- (NSInteger)type
{
if (token)
return token.type;
-	return ANTLRTokenTypeInvalid;
+	return TokenTypeInvalid;
}

- (NSString *)text
@@ -290,8 +290,8 @@
if ( startIndex >= 0 && stopIndex >= 0 )
return; // already set
if ( [children count] > 0 ) {
-        ANTLRCommonTree *firstChild = (ANTLRCommonTree *)[children objectAtIndex:0];
-        ANTLRCommonTree *lastChild = (ANTLRCommonTree *)[children objectAtIndex:[children count]-1];
+        CommonTree *firstChild = (CommonTree *)[children objectAtIndex:0];
+        CommonTree *lastChild = (CommonTree *)[children objectAtIndex:[children count]-1];
startIndex = [firstChild getTokenStartIndex];
stopIndex = [lastChild getTokenStopIndex];
}
@@ -302,12 +302,12 @@
return childIndex;
}

-- (ANTLRCommonTree *) getParent
+- (CommonTree *) getParent
{
return parent;
}

-- (void) setParent:(ANTLRCommonTree *) t
+- (void) setParent:(CommonTree *) t
{
parent = t;
}
@@ -327,7 +327,7 @@
if ( [self isNil] ) {
return @"nil";
}
-    if ( [self type] == ANTLRTokenTypeInvalid ) {
+    if ( [self type] == TokenTypeInvalid ) {
return @"<errornode>";
}
if ( token==nil ) {
diff --git a/runtime/ObjC/Framework/CommonTreeAdaptor.h b/runtime/ObjC/Framework/CommonTreeAdaptor.h
index e79f0ab..e5d7cb8 100644
--- a/runtime/ObjC/Framework/CommonTreeAdaptor.h
+++ b/runtime/ObjC/Framework/CommonTreeAdaptor.h
@@ -26,40 +26,40 @@


#import <Cocoa/Cocoa.h>
-#import "ANTLRTree.h"
-#import "ANTLRCommonToken.h"
-#import "ANTLRCommonTree.h"
-#import "ANTLRBaseTreeAdaptor.h"
+#import "Tree.h"
+#import "CommonToken.h"
+#import "CommonTree.h"
+#import "BaseTreeAdaptor.h"

-@interface ANTLRCommonTreeAdaptor : ANTLRBaseTreeAdaptor {
+@interface CommonTreeAdaptor : BaseTreeAdaptor {
}

-+ (ANTLRCommonTree *) newEmptyTree;
-+ (ANTLRCommonTreeAdaptor *)newTreeAdaptor;
++ (CommonTree *) newEmptyTree;
++ (CommonTreeAdaptor *)newTreeAdaptor;
- (id) init;
-- (ANTLRCommonTree *)dupNode:(ANTLRCommonTree *)t;
+- (CommonTree *)dupNode:(CommonTree *)t;

-- (ANTLRCommonTree *) create:(id<ANTLRToken>) payload;
-//- (ANTLRCommonTree *) createTree:(NSInteger)tokenType fromToken:(ANTLRCommonToken *)aToken;
-//- (ANTLRCommonTree *) createTree:(NSInteger)tokenType fromToken:(ANTLRCommonToken *)aToken Text:(NSString *)text;
-- (id<ANTLRToken>)createToken:(NSInteger)tokenType Text:(NSString *)text;
-- (id<ANTLRToken>)createToken:(id<ANTLRToken>)fromToken;
-- (void) setTokenBoundaries:(ANTLRCommonTree *)t From:(id<ANTLRToken>)startToken To:(id<ANTLRToken>)stopToken;
-- (NSInteger)getTokenStartIndex:(ANTLRCommonTree *)t;
-- (NSInteger)getTokenStopIndex:(ANTLRCommonTree *)t;
-- (NSString *)getText:(ANTLRCommonTree *)t;
-- (void)setText:(ANTLRCommonTree *)t Text:(NSString *)text;
-- (NSInteger)getType:(ANTLRCommonTree *)t;
-- (void) setType:(ANTLRCommonTree *)t Type:(NSInteger)tokenType;
-- (id<ANTLRToken>)getToken:(ANTLRCommonTree *)t;
-- (ANTLRCommonTree *)getChild:(ANTLRCommonTree *)t At:(NSInteger)i;
-- (void) setChild:(ANTLRCommonTree *)t At:(NSInteger)i Child:(ANTLRCommonTree *)child;
-- (NSInteger)getChildCount:(ANTLRCommonTree *)t;
-- (ANTLRCommonTree *)getParent:(ANTLRCommonTree *)t;
-- (void)setParent:(ANTLRCommonTree *)t With:(ANTLRCommonTree *)parent;
-- (NSInteger)getChildIndex:(ANTLRCommonTree *)t;
-- (void)setChildIndex:(ANTLRCommonTree *)t With:(NSInteger)index;
-- (void)replaceChildren:(ANTLRCommonTree *)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(ANTLRCommonTree *)t;
+- (CommonTree *) create:(id<Token>) payload;
+//- (CommonTree *) createTree:(NSInteger)tokenType fromToken:(CommonToken *)aToken;
+//- (CommonTree *) createTree:(NSInteger)tokenType fromToken:(CommonToken *)aToken Text:(NSString *)text;
+- (id<Token>)createToken:(NSInteger)tokenType Text:(NSString *)text;
+- (id<Token>)createToken:(id<Token>)fromToken;
+- (void) setTokenBoundaries:(CommonTree *)t From:(id<Token>)startToken To:(id<Token>)stopToken;
+- (NSInteger)getTokenStartIndex:(CommonTree *)t;
+- (NSInteger)getTokenStopIndex:(CommonTree *)t;
+- (NSString *)getText:(CommonTree *)t;
+- (void)setText:(CommonTree *)t Text:(NSString *)text;
+- (NSInteger)getType:(CommonTree *)t;
+- (void) setType:(CommonTree *)t Type:(NSInteger)tokenType;
+- (id<Token>)getToken:(CommonTree *)t;
+- (CommonTree *)getChild:(CommonTree *)t At:(NSInteger)i;
+- (void) setChild:(CommonTree *)t At:(NSInteger)i Child:(CommonTree *)child;
+- (NSInteger)getChildCount:(CommonTree *)t;
+- (CommonTree *)getParent:(CommonTree *)t;
+- (void)setParent:(CommonTree *)t With:(CommonTree *)parent;
+- (NSInteger)getChildIndex:(CommonTree *)t;
+- (void)setChildIndex:(CommonTree *)t With:(NSInteger)index;
+- (void)replaceChildren:(CommonTree *)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(CommonTree *)t;
- (id)copyWithZone:(NSZone *)zone;

@end
diff --git a/runtime/ObjC/Framework/CommonTreeAdaptor.m b/runtime/ObjC/Framework/CommonTreeAdaptor.m
index 7609698..b88dbb0 100644
--- a/runtime/ObjC/Framework/CommonTreeAdaptor.m
+++ b/runtime/ObjC/Framework/CommonTreeAdaptor.m
@@ -24,18 +24,18 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRCommonTreeAdaptor.h"
+#import "CommonTreeAdaptor.h"

-@implementation ANTLRCommonTreeAdaptor
+@implementation CommonTreeAdaptor

-+ (ANTLRCommonTree *) newEmptyTree;
++ (CommonTree *) newEmptyTree;
{
-    return [ANTLRCommonTree newTree];
+    return [CommonTree newTree];
}

-+ (ANTLRCommonTreeAdaptor *)newTreeAdaptor
++ (CommonTreeAdaptor *)newTreeAdaptor
{
-    return[[ANTLRCommonTreeAdaptor alloc] init];
+    return[[CommonTreeAdaptor alloc] init];
}

- (id) init
@@ -52,11 +52,11 @@
*  I could use reflection to prevent having to override this
*  but reflection is slow.
*/
-- (id) dupNode:(id<ANTLRBaseTree>)t
+- (id) dupNode:(id<BaseTree>)t
{
if ( t==nil )
return nil;
-    return [ANTLRCommonTree newTree:t];
+    return [CommonTree newTree:t];
}

/** Tell me how to create a token for use with imaginary token nodes.
@@ -73,9 +73,9 @@
*  If you care what the token payload objects' type is, you should
*  override this method and any other createToken variant.
*/
-- (ANTLRCommonTree *) create:(ANTLRCommonToken *)aToken
+- (CommonTree *) create:(CommonToken *)aToken
{
-    return [ANTLRCommonTree newTreeWithToken:aToken];
+    return [CommonTree newTreeWithToken:aToken];
}

/** Tell me how to create a token for use with imaginary token nodes.
@@ -86,20 +86,20 @@
*  If you care what the token payload objects' type is, you should
*  override this method and any other createToken variant.
*/
-- (ANTLRCommonTree *)createTree:(NSInteger)tokenType Text:(NSString *)text
+- (CommonTree *)createTree:(NSInteger)tokenType Text:(NSString *)text
{
-    return [ANTLRCommonTree newTreeWithTokenType:tokenType Text:text];
+    return [CommonTree newTreeWithTokenType:tokenType Text:text];
}

-- (id<ANTLRToken>)createToken:(NSInteger)tokenType Text:(NSString *)text
+- (id<Token>)createToken:(NSInteger)tokenType Text:(NSString *)text
{
-    id<ANTLRToken> fromToken = [ANTLRCommonToken newToken:tokenType Text:text];
+    id<Token> fromToken = [CommonToken newToken:tokenType Text:text];
return fromToken;
}

-- (id<ANTLRToken>)createToken:(id<ANTLRToken>)fromToken
+- (id<Token>)createToken:(id<Token>)fromToken
{
-    return [ANTLRCommonToken newTokenWithToken:(ANTLRCommonToken *)fromToken];
+    return [CommonToken newTokenWithToken:(CommonToken *)fromToken];
}

/** Track start/stop token for subtree root created for a rule.
@@ -107,7 +107,7 @@
*  seems like this will yield start=i and stop=i-1 in a nil node.
*  Might be useful info so I'll not force to be i..i.
*/
-- (void) setTokenBoundaries:(id<ANTLRBaseTree>)aTree From:(id<ANTLRToken>)startToken To:(id<ANTLRToken>)stopToken
+- (void) setTokenBoundaries:(id<BaseTree>)aTree From:(id<Token>)startToken To:(id<Token>)stopToken
{
if ( aTree == nil )
return;
@@ -117,118 +117,118 @@
startTokIdx = [startToken getTokenIndex];
if ( stopToken != nil )
stopTokIdx = [stopToken getTokenIndex];
-    [(id<ANTLRBaseTree>)aTree setTokenStartIndex:startTokIdx];
-    [(id<ANTLRBaseTree>)aTree setTokenStopIndex:stopTokIdx];
+    [(id<BaseTree>)aTree setTokenStartIndex:startTokIdx];
+    [(id<BaseTree>)aTree setTokenStopIndex:stopTokIdx];
}

-- (NSInteger)getTokenStartIndex:(id<ANTLRBaseTree>) t
+- (NSInteger)getTokenStartIndex:(id<BaseTree>) t
{
if ( t == nil )
return -1;
-    return [(id<ANTLRBaseTree>)t getTokenStartIndex];
+    return [(id<BaseTree>)t getTokenStartIndex];
}

-- (NSInteger)getTokenStopIndex:(id<ANTLRBaseTree>) t
+- (NSInteger)getTokenStopIndex:(id<BaseTree>) t
{
if ( t == nil )
return -1;
-    return [(id<ANTLRBaseTree>)t getTokenStopIndex];
+    return [(id<BaseTree>)t getTokenStopIndex];
}

-- (NSString *)getText:(ANTLRCommonTree *)t
+- (NSString *)getText:(CommonTree *)t
{
if ( t == nil )
return nil;
return t.token.text;
}

-- (void)setText:(id<ANTLRBaseTree>)t Text:(NSString *)text
+- (void)setText:(id<BaseTree>)t Text:(NSString *)text
{
if ( t == nil )
return;
}

-- (NSInteger)getType:(ANTLRCommonTree *)t
+- (NSInteger)getType:(CommonTree *)t
{
if ( t==nil )
-        return ANTLRTokenTypeInvalid;
+        return TokenTypeInvalid;
return t.token.type;
}

-- (void) setType:(id<ANTLRBaseTree>)t Type:(NSInteger)tokenType
+- (void) setType:(id<BaseTree>)t Type:(NSInteger)tokenType
{
if ( t==nil )
return;
}

/** What is the Token associated with this node?  If
- *  you are not using ANTLRCommonTree, then you must
+ *  you are not using CommonTree, then you must
*  override this in your own adaptor.
*/
-- (id<ANTLRToken>) getToken:(ANTLRCommonTree *) t
+- (id<Token>) getToken:(CommonTree *) t
{
-    if ( [t isKindOfClass:[ANTLRCommonTree class]] ) {
+    if ( [t isKindOfClass:[CommonTree class]] ) {
return t.token;
}
return nil; // no idea what to do
}

-- (id<ANTLRBaseTree>) getChild:(id<ANTLRBaseTree>)t At:(NSInteger)i
+- (id<BaseTree>) getChild:(id<BaseTree>)t At:(NSInteger)i
{
if ( t == nil )
return nil;
-    return [(id<ANTLRBaseTree>)t getChild:i];
+    return [(id<BaseTree>)t getChild:i];
}

-- (void) setChild:(id<ANTLRBaseTree>)t At:(NSInteger)i Child:(id<ANTLRBaseTree>)child
+- (void) setChild:(id<BaseTree>)t At:(NSInteger)i Child:(id<BaseTree>)child
{
if ( t == nil )
return;
-    [(id<ANTLRBaseTree>)t setChild:i With:child];
+    [(id<BaseTree>)t setChild:i With:child];
}

-- (id) deleteChild:(id<ANTLRBaseTree>)t Index:(NSInteger)anIndex
+- (id) deleteChild:(id<BaseTree>)t Index:(NSInteger)anIndex
{
return [t deleteChild:anIndex];
}

-- (NSInteger) getChildCount:(id<ANTLRBaseTree>) t
+- (NSInteger) getChildCount:(id<BaseTree>) t
{
if ( t == nil )
return 0;
-    return [(id<ANTLRBaseTree>) t getChildCount];
+    return [(id<BaseTree>) t getChildCount];
}

-- (id<ANTLRBaseTree>) getParent:(id<ANTLRBaseTree>) t
+- (id<BaseTree>) getParent:(id<BaseTree>) t
{
if ( t == nil )
return nil;
-    return (id<ANTLRBaseTree>)[t getParent];
+    return (id<BaseTree>)[t getParent];
}

-- (void) setParent:(id<ANTLRBaseTree>)t With:(id<ANTLRBaseTree>) parent
+- (void) setParent:(id<BaseTree>)t With:(id<BaseTree>) parent
{
if ( t != nil )
-        [(id<ANTLRBaseTree>) t setParent:(id<ANTLRBaseTree>)parent];
+        [(id<BaseTree>) t setParent:(id<BaseTree>)parent];
}

-- (NSInteger) getChildIndex:(id<ANTLRBaseTree>) t
+- (NSInteger) getChildIndex:(id<BaseTree>) t
{
if ( t == nil )
return 0;
-    return [(id<ANTLRBaseTree>) t getChildIndex];
+    return [(id<BaseTree>) t getChildIndex];
}

-- (void) setChildIndex:(id<ANTLRBaseTree>)t With:(NSInteger)anIndex
+- (void) setChildIndex:(id<BaseTree>)t With:(NSInteger)anIndex
{
if ( t!=nil )
-        [(id<ANTLRBaseTree>)t setChildIndex:anIndex];
+        [(id<BaseTree>)t setChildIndex:anIndex];
}

-- (void) replaceChildren:(id<ANTLRBaseTree>)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id<ANTLRBaseTree>)t
+- (void) replaceChildren:(id<BaseTree>)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id<BaseTree>)t
{
if ( parent != nil ) {
-        [(id<ANTLRBaseTree>)parent replaceChildrenFrom:startChildIndex To:stopChildIndex With:t];
+        [(id<BaseTree>)parent replaceChildrenFrom:startChildIndex To:stopChildIndex With:t];
}
}

diff --git a/runtime/ObjC/Framework/CommonTreeNodeStream.h b/runtime/ObjC/Framework/CommonTreeNodeStream.h
index 52efc0f..7dc5fef 100644
--- a/runtime/ObjC/Framework/CommonTreeNodeStream.h
+++ b/runtime/ObjC/Framework/CommonTreeNodeStream.h
@@ -25,14 +25,14 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRCommonTree.h"
-#import "ANTLRCommonTreeNodeStream.h"
-#import "ANTLRLookaheadStream.h"
-#import "ANTLRTreeNodeStream.h"
-#import "ANTLRTreeIterator.h"
-#import "ANTLRIntArray.h"
+#import "CommonTree.h"
+#import "CommonTreeNodeStream.h"
+#import "LookaheadStream.h"
+#import "TreeNodeStream.h"
+#import "TreeIterator.h"
+#import "IntArray.h"

-@interface ANTLRCommonTreeNodeStream : ANTLRLookaheadStream <ANTLRTreeNodeStream> {
+@interface CommonTreeNodeStream : LookaheadStream <TreeNodeStream> {
#define DEFAULT_INITIAL_BUFFER_SIZE 100
#define INITIAL_CALL_STACK_SIZE 10

@@ -40,16 +40,16 @@
__strong id root;

/** If this tree (root) was created from a token stream, track it. */
-__strong id <ANTLRTokenStream> tokens;
+__strong id <TokenStream> tokens;

/** What tree adaptor was used to build these trees */
-__strong ANTLRCommonTreeAdaptor *adaptor;
+__strong CommonTreeAdaptor *adaptor;

/** The tree iterator we using */
-__strong ANTLRTreeIterator *it;
+__strong TreeIterator *it;

/** Stack of indexes used for push/pop calls */
-__strong ANTLRIntArray *calls;
+__strong IntArray *calls;

/** Tree (nil A B C) trees like flat A B C streams */
BOOL hasNilRoot;
@@ -57,17 +57,17 @@ BOOL hasNilRoot;
/** Tracks tree depth.  Level=0 means we're at root node level. */
NSInteger level;
}
-@property (retain, getter=getRoot, setter=setRoot:) ANTLRCommonTree *root;
-@property (retain, getter=getTokens,setter=setTokens:) id<ANTLRTokenStream> tokens;
-@property (retain, getter=getTreeAdaptor, setter=setTreeAdaptor:) ANTLRCommonTreeAdaptor *adaptor;
+@property (retain, getter=getRoot, setter=setRoot:) CommonTree *root;
+@property (retain, getter=getTokens,setter=setTokens:) id<TokenStream> tokens;
+@property (retain, getter=getTreeAdaptor, setter=setTreeAdaptor:) CommonTreeAdaptor *adaptor;
@property (assign, getter=getLevel, setter=setLevel:) NSInteger level;

-+ (ANTLRCommonTreeNodeStream *) newANTLRCommonTreeNodeStream:(ANTLRCommonTree *)theTree;
-+ (ANTLRCommonTreeNodeStream *) newANTLRCommonTreeNodeStream:(id<ANTLRTreeAdaptor>)anAdaptor Tree:(ANTLRCommonTree *)theTree;
++ (CommonTreeNodeStream *) newCommonTreeNodeStream:(CommonTree *)theTree;
++ (CommonTreeNodeStream *) newCommonTreeNodeStream:(id<TreeAdaptor>)anAdaptor Tree:(CommonTree *)theTree;

-- (id) initWithTree:(ANTLRCommonTree *)theTree;
+- (id) initWithTree:(CommonTree *)theTree;

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)adaptor Tree:(ANTLRCommonTree *)theTree;
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)adaptor Tree:(CommonTree *)theTree;

- (void) reset;

@@ -76,28 +76,26 @@ NSInteger level;
*/
- (id) nextElement;

-- (BOOL) isEOF:(id<ANTLRBaseTree>) obj;
+- (BOOL) isEOF:(id<BaseTree>) obj;
- (void) setUniqueNavigationNodes:(BOOL) uniqueNavigationNodes;

- (id) getTreeSource;

- (NSString *) getSourceName;

-- (id<ANTLRTokenStream>) getTokenStream;
+- (id<TokenStream>) getTokenStream;

-- (void) setTokenStream:(id<ANTLRTokenStream>) tokens;
+- (void) setTokenStream:(id<TokenStream>) tokens;

-- (ANTLRCommonTreeAdaptor *) getTreeAdaptor;
+- (CommonTreeAdaptor *) getTreeAdaptor;

-- (void) setTreeAdaptor:(ANTLRCommonTreeAdaptor *) adaptor;
+- (void) setTreeAdaptor:(CommonTreeAdaptor *) adaptor;

- (NSInteger) LA:(NSInteger) i;

/** Make stream jump to a new location, saving old location.
*  Switch back with pop().
*/
-- (ANTLRCommonTree *)getNode:(NSInteger) i;
-
- (void) push:(NSInteger) index;

/** Seek back to previous index saved during last push() call.
@@ -109,12 +107,12 @@ NSInteger level;

- (void) replaceChildren:(id)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id) t;

-- (NSString *) toStringFromNode:(id<ANTLRBaseTree>)startNode ToNode:(id<ANTLRBaseTree>)stopNode;
+- (NSString *) toStringFromNode:(id<BaseTree>)startNode ToNode:(id<BaseTree>)stopNode;

/** For debugging; destructive: moves tree iterator to end. */
- (NSString *) toTokenTypeString;

-@property (retain) ANTLRTreeIterator *it;
-@property (retain) ANTLRIntArray *calls;
+@property (retain) TreeIterator *it;
+@property (retain) IntArray *calls;
@property BOOL hasNilRoot;
@end
diff --git a/runtime/ObjC/Framework/CommonTreeNodeStream.m b/runtime/ObjC/Framework/CommonTreeNodeStream.m
index 23eddee..b195f5d 100644
--- a/runtime/ObjC/Framework/CommonTreeNodeStream.m
+++ b/runtime/ObjC/Framework/CommonTreeNodeStream.m
@@ -24,42 +24,42 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRCommonTreeNodeStream.h"
-#import "ANTLRTokenStream.h"
-#import "ANTLRIntStream.h"
-#import "ANTLRCharStream.h"
+#import "CommonTreeNodeStream.h"
+#import "TokenStream.h"
+#import "IntStream.h"
+#import "CharStream.h"
#import "AMutableArray.h"
-#import "ANTLRCommonTreeAdaptor.h"
+#import "CommonTreeAdaptor.h"

#ifndef DEBUG_DEALLOC
#define DEBUG_DEALLOC
#endif

-@implementation ANTLRCommonTreeNodeStream
+@implementation CommonTreeNodeStream

@synthesize root;
@synthesize tokens;
@synthesize adaptor;
@synthesize level;

-+ (ANTLRCommonTreeNodeStream *) newANTLRCommonTreeNodeStream:(ANTLRCommonTree *)theTree
++ (CommonTreeNodeStream *) newCommonTreeNodeStream:(CommonTree *)theTree
{
-    return [[ANTLRCommonTreeNodeStream alloc] initWithTree:theTree];
+    return [[CommonTreeNodeStream alloc] initWithTree:theTree];
}

-+ (ANTLRCommonTreeNodeStream *) newANTLRCommonTreeNodeStream:(id<ANTLRTreeAdaptor>)anAdaptor Tree:(ANTLRCommonTree *)theTree
++ (CommonTreeNodeStream *) newCommonTreeNodeStream:(id<TreeAdaptor>)anAdaptor Tree:(CommonTree *)theTree
{
-    return [[ANTLRCommonTreeNodeStream alloc] initWithTreeAdaptor:anAdaptor Tree:theTree];
+    return [[CommonTreeNodeStream alloc] initWithTreeAdaptor:anAdaptor Tree:theTree];
}

-- (id) initWithTree:(ANTLRCommonTree *)theTree
+- (id) initWithTree:(CommonTree *)theTree
{
if ((self = [super init]) != nil ) {
-        adaptor = [[ANTLRCommonTreeAdaptor newTreeAdaptor] retain];
+        adaptor = [[CommonTreeAdaptor newTreeAdaptor] retain];
root = [theTree retain];
-        navigationNodeEOF = [[adaptor createTree:ANTLRTokenTypeEOF Text:@"EOF"] retain]; // set EOF
-        it = [[ANTLRTreeIterator newANTRLTreeIteratorWithAdaptor:adaptor andTree:root] retain];
-        calls = [[ANTLRIntArray newArrayWithLen:INITIAL_CALL_STACK_SIZE] retain];
+        navigationNodeEOF = [[adaptor createTree:TokenTypeEOF Text:@"EOF"] retain]; // set EOF
+        it = [[TreeIterator newANTRLTreeIteratorWithAdaptor:adaptor andTree:root] retain];
+        calls = [[IntArray newArrayWithLen:INITIAL_CALL_STACK_SIZE] retain];
/** Tree (nil A B C) trees like flat A B C streams */
hasNilRoot = NO;
level = 0;
@@ -67,15 +67,15 @@
return self;
}

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)anAdaptor Tree:(ANTLRCommonTree *)theTree
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)anAdaptor Tree:(CommonTree *)theTree
{
if ((self = [super init]) != nil ) {
adaptor = [anAdaptor retain];
root = [theTree retain];
-        navigationNodeEOF = [[adaptor createTree:ANTLRTokenTypeEOF Text:@"EOF"] retain]; // set EOF
+        navigationNodeEOF = [[adaptor createTree:TokenTypeEOF Text:@"EOF"] retain]; // set EOF
//    it = [root objectEnumerator];
-        it = [[ANTLRTreeIterator newANTRLTreeIteratorWithAdaptor:adaptor andTree:root] retain];
-        calls = [[ANTLRIntArray newArrayWithLen:INITIAL_CALL_STACK_SIZE] retain];
+        it = [[TreeIterator newANTRLTreeIteratorWithAdaptor:adaptor andTree:root] retain];
+        calls = [[IntArray newArrayWithLen:INITIAL_CALL_STACK_SIZE] retain];
/** Tree (nil A B C) trees like flat A B C streams */
hasNilRoot = NO;
level = 0;
@@ -87,7 +87,7 @@
- (void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRCommonTreeNodeStream" );
+    NSLog( @"called dealloc in CommonTreeNodeStream" );
#endif
if ( root ) [root release];
if ( tokens ) [tokens release];
@@ -129,9 +129,9 @@
return t;
}

-- (BOOL) isEOF:(id<ANTLRBaseTree>) aTree
+- (BOOL) isEOF:(id<BaseTree>) aTree
{
-    return [adaptor getType:(ANTLRCommonTree *)aTree] == ANTLRTokenTypeEOF;
+    return [adaptor getType:(CommonTree *)aTree] == TokenTypeEOF;
}

- (void) setUniqueNavigationNodes:(BOOL) uniqueNavigationNodes
@@ -148,12 +148,12 @@
return [[self getTokenStream] getSourceName];
}

-- (id<ANTLRTokenStream>) getTokenStream
+- (id<TokenStream>) getTokenStream
{
return tokens;
}

-- (void) setTokenStream:(id<ANTLRTokenStream>)theTokens
+- (void) setTokenStream:(id<TokenStream>)theTokens
{
if ( tokens != theTokens ) {
if ( tokens ) [tokens release];
@@ -162,12 +162,12 @@
tokens = theTokens;
}

-- (ANTLRCommonTreeAdaptor *) getTreeAdaptor
+- (CommonTreeAdaptor *) getTreeAdaptor
{
return adaptor;
}

-- (void) setTreeAdaptor:(ANTLRCommonTreeAdaptor *) anAdaptor
+- (void) setTreeAdaptor:(CommonTreeAdaptor *) anAdaptor
{
if ( adaptor != anAdaptor ) {
if ( adaptor ) [adaptor release];
@@ -176,9 +176,9 @@
adaptor = anAdaptor;
}

-- (ANTLRCommonTree *)getNode:(NSInteger) i
+- (CommonTree *)getNode:(NSInteger) i
{
-    @throw [ANTLRRuntimeException newException:@"Absolute node indexes are meaningless in an unbuffered stream"];
+    @throw [RuntimeException newException:@"Absolute node indexes are meaningless in an unbuffered stream"];
return nil;
}

@@ -193,7 +193,7 @@
- (void) push:(NSInteger) anIndex
{
if ( calls == nil ) {
-        calls = [[ANTLRIntArray newArrayWithLen:INITIAL_CALL_STACK_SIZE] retain];
+        calls = [[IntArray newArrayWithLen:INITIAL_CALL_STACK_SIZE] retain];
}
[calls push:p]; // save current anIndex
[self seek:anIndex];
@@ -218,7 +218,7 @@
}
}

-- (NSString *) toStringFromNode:(id<ANTLRBaseTree>)startNode ToNode:(id<ANTLRBaseTree>)stopNode
+- (NSString *) toStringFromNode:(id<BaseTree>)startNode ToNode:(id<BaseTree>)stopNode
{
// we'll have to walk from start to stop in tree; we're not keeping
// a complete node stream buffer
@@ -232,7 +232,7 @@
NSMutableString *buf = [NSMutableString stringWithCapacity:5];
id obj = [self LT:1];
NSInteger type = [adaptor getType:obj];
-    while ( type != ANTLRTokenTypeEOF ) {
+    while ( type != TokenTypeEOF ) {
[buf appendString:@" "];
[buf appendString:[NSString stringWithFormat:@"%d", type]];
[self consume];
diff --git a/runtime/ObjC/Framework/DFA.h b/runtime/ObjC/Framework/DFA.h
index 9adedb1..8f55ef7 100644
--- a/runtime/ObjC/Framework/DFA.h
+++ b/runtime/ObjC/Framework/DFA.h
@@ -25,11 +25,11 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRBaseRecognizer.h"
-#import "ANTLRCharStream.h"
-#import "ANTLRNoViableAltException.h"
+#import "BaseRecognizer.h"
+#import "CharStream.h"
+#import "NoViableAltException.h"

-@interface ANTLRDFA : NSObject {
+@interface DFA : NSObject {
// the tables are set by subclasses to their own static versions.
const int *eot;
const int *eof;
@@ -39,22 +39,22 @@
const int *special;
const int **transition;

-	__strong ANTLRBaseRecognizer *recognizer;
+	__strong BaseRecognizer *recognizer;
NSInteger decisionNumber;
NSInteger len;
}

- (id) initWithRecognizer:(id) theRecognizer;
// simulate the DFA using the static tables and predict an alternative
-- (NSInteger) predict:(id<ANTLRCharStream>)anInput;
-- (void) noViableAlt:(NSInteger)state Stream:(id<ANTLRIntStream>)anInput;
+- (NSInteger) predict:(id<CharStream>)anInput;
+- (void) noViableAlt:(NSInteger)state Stream:(id<IntStream>)anInput;

-- (NSInteger) specialStateTransition:(NSInteger)state Stream:(id<ANTLRIntStream>)anInput;
+- (NSInteger) specialStateTransition:(NSInteger)state Stream:(id<IntStream>)anInput;
// - (NSInteger) specialStateTransition:(NSInteger) state;
//- (unichar) specialTransition:(unichar) state symbol:(NSInteger) symbol;

// hook for debugger support
-- (void) error:(ANTLRNoViableAltException *)nvae;
+- (void) error:(NoViableAltException *)nvae;

- (NSString *) description;
- (BOOL) evaluateSyntacticPredicate:(SEL)synpredFragment;
@@ -64,8 +64,8 @@
- (NSInteger)getDecision;
- (void)setDecision:(NSInteger)aDecison;

-- (ANTLRBaseRecognizer *)getRecognizer;
-- (void)setRecognizer:(ANTLRBaseRecognizer *)aRecognizer;
+- (BaseRecognizer *)getRecognizer;
+- (void)setRecognizer:(BaseRecognizer *)aRecognizer;
- (NSInteger)length;

@property const int *eot;
@@ -76,7 +76,7 @@
@property const int *special;
@property const int **transition;

-@property (retain, getter=getRecognizer,setter=setRecognizer:) ANTLRBaseRecognizer *recognizer;
+@property (retain, getter=getRecognizer,setter=setRecognizer:) BaseRecognizer *recognizer;
@property (assign, getter=getDecision,setter=setDecision:) NSInteger decisionNumber;
@property (assign, getter=getLen,setter=setLen:) NSInteger len;
@end
diff --git a/runtime/ObjC/Framework/DFA.m b/runtime/ObjC/Framework/DFA.m
index b42daf5..5b5ae47 100644
--- a/runtime/ObjC/Framework/DFA.m
+++ b/runtime/ObjC/Framework/DFA.m
@@ -24,18 +24,18 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRDFA.h"
-#import <ANTLRToken.h>
-#import <ANTLRNoViableAltException.h>
+#import "DFA.h"
+#import <Token.h>
+#import <NoViableAltException.h>

NSInteger debug = 0;

-@implementation ANTLRDFA
+@implementation DFA
@synthesize recognizer;
@synthesize decisionNumber;
@synthesize len;

-- (id) initWithRecognizer:(ANTLRBaseRecognizer *) theRecognizer
+- (id) initWithRecognizer:(BaseRecognizer *) theRecognizer
{
if ((self = [super init]) != nil) {
recognizer = theRecognizer;
@@ -47,7 +47,7 @@ NSInteger debug = 0;

// using the tables ANTLR generates for the DFA based prediction this method simulates the DFA
// and returns the prediction of the alternative to be used.
-- (NSInteger) predict:(id<ANTLRIntStream>)input
+- (NSInteger) predict:(id<IntStream>)input
{
if ( debug > 2 ) {
NSLog(@"Enter DFA.predict for decision %d", decisionNumber);
@@ -115,7 +115,7 @@ NSInteger debug = 0;
[input consume];
continue;
}
-			if ( c == ANTLRTokenTypeEOF && eof[s] >= 0) {  // we are at EOF and may even accept the input.
+			if ( c == TokenTypeEOF && eof[s] >= 0) {  // we are at EOF and may even accept the input.
if ( debug > 2 ) NSLog(@"accept via EOF; predict %d from %d", accept[eof[s]], eof[s]);
return accept[eof[s]];
}
@@ -140,24 +140,24 @@ NSInteger debug = 0;
return 0; // silence warning
}

-- (void) noViableAlt:(NSInteger)state Stream:(id<ANTLRIntStream>)anInput
+- (void) noViableAlt:(NSInteger)state Stream:(id<IntStream>)anInput
{
if ([recognizer.state isBacktracking]) {
[recognizer.state setFailed:YES];
return;
}
-	ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:decisionNumber state:state stream:anInput];
+	NoViableAltException *nvae = [NoViableAltException newException:decisionNumber state:state stream:anInput];
[self error:nvae];
@throw nvae;
}

-- (NSInteger) specialStateTransition:(NSInteger)state Stream:(id<ANTLRIntStream>)anInput
+- (NSInteger) specialStateTransition:(NSInteger)state Stream:(id<IntStream>)anInput
{
-    @throw [ANTLRNoViableAltException newException:-1 state:state stream:anInput];
+    @throw [NoViableAltException newException:-1 state:state stream:anInput];
return -1;
}

-- (void) error:(ANTLRNoViableAltException *)nvae
+- (void) error:(NoViableAltException *)nvae
{
// empty, hook for debugger support
}
@@ -233,12 +233,12 @@ NSInteger debug = 0;
decisionNumber = aDecison;
}

-- (ANTLRBaseRecognizer *)getRecognizer
+- (BaseRecognizer *)getRecognizer
{
return recognizer;
}

-- (void)setRecognizer:(ANTLRBaseRecognizer *)aRecognizer
+- (void)setRecognizer:(BaseRecognizer *)aRecognizer
{
if ( recognizer != aRecognizer ) {
if ( recognizer ) [recognizer release];
diff --git a/runtime/ObjC/Framework/Debug.h b/runtime/ObjC/Framework/Debug.h
index 87383c9..9b3ccda 100644
--- a/runtime/ObjC/Framework/Debug.h
+++ b/runtime/ObjC/Framework/Debug.h
@@ -24,10 +24,10 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRDebugEventListener.h"
-#import "ANTLRDebugEventProxy.h"
-#import "ANTLRDebugParser.h"
-#import "ANTLRDebugTokenStream.h"
-#import "ANTLRDebugTreeParser.h"
-#import "ANTLRDebugTreeNodeStream.h"
-#import "ANTLRDebugTreeAdaptor.h"
+#import "DebugEventListener.h"
+#import "DebugEventSocketProxy.h"
+#import "DebugParser.h"
+#import "DebugTokenStream.h"
+#import "DebugTreeParser.h"
+#import "DebugTreeNodeStream.h"
+#import "DebugTreeAdaptor.h"
diff --git a/runtime/ObjC/Framework/DebugEventListener.h b/runtime/ObjC/Framework/DebugEventListener.h
index c2bee6c..6756b6a 100644
--- a/runtime/ObjC/Framework/DebugEventListener.h
+++ b/runtime/ObjC/Framework/DebugEventListener.h
@@ -25,12 +25,12 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRToken.h"
-#import "ANTLRRecognitionException.h"
+#import "Token.h"
+#import "RecognitionException.h"

-@protocol ANTLRDebugEventListener
+@protocol DebugEventListener

-#define ANTLRDebugProtocolVersion 1
+#define DebugProtocolVersion 1

/** The parser has just entered a rule.  No decision has been made about
*  which alt is predicted.  This is fired AFTER init actions have been
@@ -68,13 +68,13 @@
/** An input token was consumed; matched by any kind of element.
*  Trigger after the token was matched by things like match(), matchAny().
*/
-- (void) consumeToken:(id<ANTLRToken>)t;
+- (void) consumeToken:(id<Token>)t;

/** An off-channel input token was consumed.
*  Trigger after the token was matched by things like match(), matchAny().
*  (unless of course the hidden token is first stuff in the input stream).
*/
-- (void) consumeHiddenToken:(id<ANTLRToken>)t;
+- (void) consumeHiddenToken:(id<Token>)t;

/** Somebody (anybody) looked ahead.  Note that this actually gets
*  triggered by both LA and LT calls.  The debugger will want to know
@@ -83,7 +83,7 @@
*  ahead into a file it doesn't have so LT events must pass the token
*  even if the info is redundant.
*/
-- (void) LT:(NSInteger)i foundToken:(id<ANTLRToken>)t;
+- (void) LT:(NSInteger)i foundToken:(id<Token>)t;

/** The parser is going to look arbitrarily ahead; mark this location,
*  the token stream's marker is sent in case you need it.
@@ -175,7 +175,7 @@
*		exitRule b
*		terminate
*/
-- (void) recognitionException:(ANTLRRecognitionException *)e;
+- (void) recognitionException:(RecognitionException *)e;

/** Indicates the recognizer is about to consume tokens to resynchronize
*  the parser.  Any consume events from here until the recovered event
diff --git a/runtime/ObjC/Framework/DebugEventSocketProxy.h b/runtime/ObjC/Framework/DebugEventSocketProxy.h
index af8cd33..31a0bae 100644
--- a/runtime/ObjC/Framework/DebugEventSocketProxy.h
+++ b/runtime/ObjC/Framework/DebugEventSocketProxy.h
@@ -25,8 +25,8 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRParser.h"
-#import "ANTLRDebugEventListener.h"
+#import "Parser.h"
+#import "DebugEventListener.h"
#import <sys/socket.h>
#import <netinet/in.h>
#import <netinet/tcp.h>
@@ -35,7 +35,7 @@
// default port for ANTLRWorks
#define DEFAULT_DEBUGGER_PORT 49001

-@interface ANTLRDebugEventProxy : NSObject <ANTLRDebugEventListener> {
+@interface DebugEventSocketProxy : NSObject <DebugEventListener> {
int serverSocket;

struct sockaddr debugger_sockaddr;
@@ -78,16 +78,16 @@
- (void) exitSubRule:(NSInteger)decisionNumber;
- (void) enterDecision:(NSInteger)decisionNumber;
- (void) exitDecision:(NSInteger)decisionNumber;
-- (void) consumeToken:(id<ANTLRToken>)t;
-- (void) consumeHiddenToken:(id<ANTLRToken>)t;
-- (void) LT:(NSInteger)i foundToken:(id<ANTLRToken>)t;
+- (void) consumeToken:(id<Token>)t;
+- (void) consumeHiddenToken:(id<Token>)t;
+- (void) LT:(NSInteger)i foundToken:(id<Token>)t;
- (void) mark:(NSInteger)marker;
- (void) rewind:(NSInteger)marker;
- (void) rewind;
- (void) beginBacktrack:(NSInteger)level;
- (void) endBacktrack:(NSInteger)level wasSuccessful:(BOOL)successful;
- (void) locationLine:(NSInteger)line column:(NSInteger)pos;
-- (void) recognitionException:(ANTLRRecognitionException *)e;
+- (void) recognitionException:(RecognitionException *)e;
- (void) beginResync;
- (void) endResync;
- (void) semanticPredicate:(NSString *)predicate matched:(BOOL)result;
diff --git a/runtime/ObjC/Framework/DebugEventSocketProxy.m b/runtime/ObjC/Framework/DebugEventSocketProxy.m
index f68059a..4155da2 100644
--- a/runtime/ObjC/Framework/DebugEventSocketProxy.m
+++ b/runtime/ObjC/Framework/DebugEventSocketProxy.m
@@ -24,14 +24,14 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRDebugEventProxy.h"
-#import "ANTLRToken+DebuggerSupport.h"
+#import "DebugEventSocketProxy.h"
+#import "Token+DebuggerSupport.h"
#include <string.h>

static NSData *newlineData = nil;
static unsigned lengthOfUTF8Ack = 0;

-@implementation ANTLRDebugEventProxy
+@implementation DebugEventSocketProxy

+ (void) initialize
{
@@ -66,6 +66,59 @@ static unsigned lengthOfUTF8Ack = 0;
[super dealloc];
}

+/* Java stuff
+public void handshake() throws IOException {
+    if ( serverSocket==nil ) {
+        serverSocket = new ServerSocket(port);
+        socket = serverSocket.accept();
+        socket.setTcpNoDelay(true);
+        OutputStream os = socket.getOutputStream();
+        OutputStreamWriter osw = new OutputStreamWriter(os, "UTF8");
+        out = new PrintWriter(new BufferedWriter(osw));
+        InputStream is = socket.getInputStream();
+        InputStreamReader isr = new InputStreamReader(is, "UTF8");
+        in = new BufferedReader(isr);
+        out.println("ANTLR "+ DebugEventListener.PROTOCOL_VERSION);
+        out.println("grammar \""+ grammarFileName);
+        out.flush();
+        ack();
+    }
+}
+
+- (void) commence
+{
+    // don't bother sending event; listener will trigger upon connection
+}
+
+- (void) terminate
+{
+    [self transmit:@"terminate";
+    [out close];
+    try {
+        [socket close];
+    }
+    catch (IOException *ioe) {
+        ioe.printStackTrace(System.err);
+    }
+}
+
+- (void) ack
+{
+    try {
+        in.readLine();
+    }
+    catch (IOException ioe) {
+        ioe.printStackTrace(System.err);
+    }
+}
+
+protected void transmit(String event) {
+    out.println(event);
+    out.flush();
+    ack();
+}
+*/
+
- (void) waitForDebuggerConnection
{
if (serverSocket == -1) {
@@ -91,7 +144,7 @@ static unsigned lengthOfUTF8Ack = 0;
NSAssert1( debuggerSocket != -1, @"accept(2) failed. %s", strerror(errno));

debuggerFH = [[NSFileHandle alloc] initWithFileDescriptor:debuggerSocket];
-		[self sendToDebugger:[NSString stringWithFormat:@"ANTLR %d", ANTLRDebugProtocolVersion] waitForResponse:NO];
+		[self sendToDebugger:[NSString stringWithFormat:@"ANTLR %d", DebugProtocolVersion] waitForResponse:NO];
[self sendToDebugger:[NSString stringWithFormat:@"grammar \"%@", [self grammarName]] waitForResponse:NO];
}
}
@@ -102,7 +155,7 @@ static unsigned lengthOfUTF8Ack = 0;
@try {
NSData *newLine = [debuggerFH readDataOfLength:lengthOfUTF8Ack];
response = [[NSString alloc] initWithData:newLine encoding:NSUTF8StringEncoding];
-		if (![response isEqualToString:@"ack\n"]) @throw [NSException exceptionWithName:@"ANTLRDebugEventProxy" reason:@"illegal response from debugger" userInfo:nil];
+		if (![response isEqualToString:@"ack\n"]) @throw [NSException exceptionWithName:@"DebugEventSocketProxy" reason:@"illegal response from debugger" userInfo:nil];
}
@catch (NSException *e) {
NSLog(@"socket died or debugger misbehaved: %@ read <%@>", e, response);
@@ -222,17 +275,17 @@ static unsigned lengthOfUTF8Ack = 0;
[self sendToDebugger:[NSString stringWithFormat:@"exitDecision %d", decisionNumber]];
}

-- (void) consumeToken:(id<ANTLRToken>)t
+- (void) consumeToken:(id<Token>)t
{
[self sendToDebugger:[NSString stringWithFormat:@"consumeToken %@", [self escapeNewlines:[t description]]]];
}

-- (void) consumeHiddenToken:(id<ANTLRToken>)t
+- (void) consumeHiddenToken:(id<Token>)t
{
[self sendToDebugger:[NSString stringWithFormat:@"consumeHiddenToken %@", [self escapeNewlines:[t description]]]];
}

-- (void) LT:(NSInteger)i foundToken:(id<ANTLRToken>)t
+- (void) LT:(NSInteger)i foundToken:(id<Token>)t
{
[self sendToDebugger:[NSString stringWithFormat:@"LT %d %@", i, [self escapeNewlines:[t description]]]];
}
@@ -266,7 +319,7 @@ static unsigned lengthOfUTF8Ack = 0;
[self sendToDebugger:[NSString stringWithFormat:@"location %d %d", line, pos]];
}

-- (void) recognitionException:(ANTLRRecognitionException *)e
+- (void) recognitionException:(RecognitionException *)e
{
#warning TODO: recognition exceptions
// these must use the names of the corresponding Java exception classes, because ANTLRWorks recreates the exception
diff --git a/runtime/ObjC/Framework/DebugParser.h b/runtime/ObjC/Framework/DebugParser.h
index ed403ef..0c86795 100644
--- a/runtime/ObjC/Framework/DebugParser.h
+++ b/runtime/ObjC/Framework/DebugParser.h
@@ -25,33 +25,33 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRParser.h"
-#import "ANTLRDebugEventProxy.h"
-#import "ANTLRDebugTokenStream.h"
+#import "Parser.h"
+#import "DebugEventSocketProxy.h"
+#import "DebugTokenStream.h"

-@interface ANTLRDebugParser : ANTLRParser {
-	id<ANTLRDebugEventListener> debugListener;
+@interface DebugParser : Parser {
+	id<DebugEventListener> debugListener;
}

-+ (id) newDebugParser:(id<ANTLRTokenStream>)theStream
-        debugListener:(id<ANTLRDebugEventListener>)debugListener;
++ (id) newDebugParser:(id<TokenStream>)theStream
+        debugListener:(id<DebugEventListener>)debugListener;

-+ (id) newDebugParser:(id<ANTLRTokenStream>)theStream
-                state:(ANTLRRecognizerSharedState *)state;
++ (id) newDebugParser:(id<TokenStream>)theStream
+                state:(RecognizerSharedState *)state;

-+ (id) newDebugParser:(id<ANTLRTokenStream>)theStream
-        debugListener:(id<ANTLRDebugEventListener>)debugListener
-                state:(ANTLRRecognizerSharedState *)state;
++ (id) newDebugParser:(id<TokenStream>)theStream
+        debugListener:(id<DebugEventListener>)debugListener
+                state:(RecognizerSharedState *)state;

-- (id) initWithTokenStream:(id<ANTLRTokenStream>)theStream;
-- (id) initWithTokenStream:(id<ANTLRTokenStream>)theStream
+- (id) initWithTokenStream:(id<TokenStream>)theStream;
+- (id) initWithTokenStream:(id<TokenStream>)theStream
debuggerPort:(NSInteger)portNumber;
// designated initializer
-- (id) initWithTokenStream:(id<ANTLRTokenStream>)theStream
-			 debugListener:(id<ANTLRDebugEventListener>)theDebugListener
+- (id) initWithTokenStream:(id<TokenStream>)theStream
+			 debugListener:(id<DebugEventListener>)theDebugListener
debuggerPort:(NSInteger)portNumber;

-- (id<ANTLRDebugEventListener>) debugListener;
-- (void) setDebugListener: (id<ANTLRDebugEventListener>) aDebugListener;
+- (id<DebugEventListener>) debugListener;
+- (void) setDebugListener: (id<DebugEventListener>) aDebugListener;

@end
diff --git a/runtime/ObjC/Framework/DebugParser.m b/runtime/ObjC/Framework/DebugParser.m
index f86a8ba..d67e895 100644
--- a/runtime/ObjC/Framework/DebugParser.m
+++ b/runtime/ObjC/Framework/DebugParser.m
@@ -24,36 +24,36 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRDebugParser.h"
+#import "DebugParser.h"


-@implementation ANTLRDebugParser
+@implementation DebugParser

-- (id) initWithTokenStream:(id<ANTLRTokenStream>)theStream
+- (id) initWithTokenStream:(id<TokenStream>)theStream
{
return [self initWithTokenStream:theStream debugListener:nil debuggerPort:-1];
}

-- (id) initWithTokenStream:(id<ANTLRTokenStream>)theStream
+- (id) initWithTokenStream:(id<TokenStream>)theStream
debuggerPort:(NSInteger)portNumber
{
return [self initWithTokenStream:theStream debugListener:nil debuggerPort:portNumber];
}

-- (id) initWithTokenStream:(id<ANTLRTokenStream>)theStream
-			 debugListener:(id<ANTLRDebugEventListener>)theDebugListener
+- (id) initWithTokenStream:(id<TokenStream>)theStream
+			 debugListener:(id<DebugEventListener>)theDebugListener
debuggerPort:(NSInteger)portNumber
{
-	id<ANTLRDebugEventListener,NSObject> debugger = nil;
-	id<ANTLRTokenStream> tokenStream = nil;
+	id<DebugEventListener,NSObject> debugger = nil;
+	id<TokenStream> tokenStream = nil;
if (theDebugListener) {
-		debugger = [(id<ANTLRDebugEventListener,NSObject>)theDebugListener retain];
+		debugger = [(id<DebugEventListener,NSObject>)theDebugListener retain];
debugger = theDebugListener;
} else {
-		debugger = [[ANTLRDebugEventProxy alloc] initWithGrammarName:[self grammarFileName] debuggerPort:portNumber];
+		debugger = [[DebugEventSocketProxy alloc] initWithGrammarName:[self grammarFileName] debuggerPort:portNumber];
}
-	if (theStream && ![theStream isKindOfClass:[ANTLRDebugTokenStream class]]) {
-		tokenStream = [[ANTLRDebugTokenStream alloc] initWithTokenStream:theStream debugListener:debugger];
+	if (theStream && ![theStream isKindOfClass:[DebugTokenStream class]]) {
+		tokenStream = [[DebugTokenStream alloc] initWithTokenStream:theStream debugListener:debugger];
} else {
tokenStream = [theStream retain];
tokenStream = theStream;
@@ -74,16 +74,16 @@
[super dealloc];
}

-- (id<ANTLRDebugEventListener>) debugListener
+- (id<DebugEventListener>) debugListener
{
return debugListener;
}

-- (void) setDebugListener: (id<ANTLRDebugEventListener>) aDebugListener
+- (void) setDebugListener: (id<DebugEventListener>) aDebugListener
{
if (debugListener != aDebugListener) {
-        [(id<ANTLRDebugEventListener,NSObject>)aDebugListener retain];
-        [(id<ANTLRDebugEventListener,NSObject>)debugListener release];
+        [(id<DebugEventListener,NSObject>)aDebugListener retain];
+        [(id<DebugEventListener,NSObject>)debugListener release];
debugListener = aDebugListener;
}
}
diff --git a/runtime/ObjC/Framework/DebugTokenStream.h b/runtime/ObjC/Framework/DebugTokenStream.h
index 9f6c438..0daa09a 100644
--- a/runtime/ObjC/Framework/DebugTokenStream.h
+++ b/runtime/ObjC/Framework/DebugTokenStream.h
@@ -25,38 +25,38 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRParser.h"
-#import "ANTLRTokenStream.h"
-#import "ANTLRTokenSource.h"
-#import "ANTLRDebugTokenStream.h"
-#import "ANTLRDebugEventListener.h"
+#import "Parser.h"
+#import "TokenStream.h"
+#import "TokenSource.h"
+#import "DebugTokenStream.h"
+#import "DebugEventListener.h"

-@interface ANTLRDebugTokenStream : NSObject <ANTLRTokenStream>
+@interface DebugTokenStream : NSObject <TokenStream>
{
-	id<ANTLRDebugEventListener> debugListener;
-	id<ANTLRTokenStream> input;
+	id<DebugEventListener> debugListener;
+	id<TokenStream> input;
BOOL initialStreamState;
NSInteger lastMarker;
}

-- (id) initWithTokenStream:(id<ANTLRTokenStream>)theStream debugListener:(id<ANTLRDebugEventListener>)debugger;
+- (id) initWithTokenStream:(id<TokenStream>)theStream debugListener:(id<DebugEventListener>)debugger;

-- (id<ANTLRDebugEventListener>) debugListener;
-- (void) setDebugListener: (id<ANTLRDebugEventListener>) aDebugListener;
+- (id<DebugEventListener>) debugListener;
+- (void) setDebugListener: (id<DebugEventListener>) aDebugListener;

-- (id<ANTLRTokenStream>) input;
-- (void) setInput:(id<ANTLRTokenStream>)aTokenStream;
+- (id<TokenStream>) input;
+- (void) setInput:(id<TokenStream>)aTokenStream;

- (void) consume;
-- (id<ANTLRToken>) getToken:(NSInteger)index;
+- (id<Token>) getToken:(NSInteger)index;
- (NSInteger) getIndex;
- (void) release:(NSInteger)marker;
- (void) seek:(NSInteger)index;
- (NSInteger) size;
-- (id<ANTLRTokenSource>) getTokenSource;
+- (id<TokenSource>) getTokenSource;
- (NSString *) getSourceName;
- (NSString *) toString;
- (NSString *) toStringFromStart:(NSInteger)aStart ToEnd:(NSInteger)aStop;
-- (NSString *) toStringFromToken:(id<ANTLRToken>)startToken ToToken:(id<ANTLRToken>)stopToken;
+- (NSString *) toStringFromToken:(CommonToken *)startToken ToToken:(CommonToken *)stopToken;

@end
diff --git a/runtime/ObjC/Framework/DebugTokenStream.m b/runtime/ObjC/Framework/DebugTokenStream.m
index 8a294c9..27790a1 100644
--- a/runtime/ObjC/Framework/DebugTokenStream.m
+++ b/runtime/ObjC/Framework/DebugTokenStream.m
@@ -24,13 +24,13 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRDebugTokenStream.h"
+#import "DebugTokenStream.h"


-@implementation ANTLRDebugTokenStream
+@implementation DebugTokenStream


-- (id) initWithTokenStream:(id<ANTLRTokenStream>)theStream debugListener:(id<ANTLRDebugEventListener>)debugger
+- (id) initWithTokenStream:(id<TokenStream>)theStream debugListener:(id<DebugEventListener>)debugger
{
self = [super init];
if (self) {
@@ -50,26 +50,26 @@
}


-- (id<ANTLRDebugEventListener>) debugListener
+- (id<DebugEventListener>) debugListener
{
return debugListener;
}

-- (void) setDebugListener: (id<ANTLRDebugEventListener>) aDebugListener
+- (void) setDebugListener: (id<DebugEventListener>) aDebugListener
{
if (debugListener != aDebugListener) {
-        [(id<ANTLRDebugEventListener,NSObject>)aDebugListener retain];
-        [(id<ANTLRDebugEventListener,NSObject>)debugListener release];
+        [(id<DebugEventListener,NSObject>)aDebugListener retain];
+        [(id<DebugEventListener,NSObject>)debugListener release];
debugListener = aDebugListener;
}
}

-- (id<ANTLRTokenStream>) input
+- (id<TokenStream>) input
{
return input;
}

-- (void) setInput: (id<ANTLRTokenStream>) aTokenStream
+- (void) setInput: (id<TokenStream>) aTokenStream
{
if (input != aTokenStream) {
if ( input ) [input release];
@@ -101,7 +101,7 @@
if ( initialStreamState )
[self consumeInitialHiddenTokens];
int a = input.index;
-	id<ANTLRToken> token = [input LT:1];
+	id<Token> token = [input LT:1];
[input consume];
int b = input.index;
[debugListener consumeToken:token];
@@ -129,7 +129,7 @@
[input rewind:marker];
}

-- (id<ANTLRToken>) LT:(NSInteger)k
+- (id<Token>) LT:(NSInteger)k
{
if ( initialStreamState )
[self consumeInitialHiddenTokens];
@@ -145,7 +145,7 @@
return [input LA:k];
}

-- (id<ANTLRToken>) getToken:(NSInteger)i
+- (id<Token>) getToken:(NSInteger)i
{
return [input getToken:i];
}
@@ -171,7 +171,7 @@
return [input size];
}

-- (id<ANTLRTokenSource>) getTokenSource
+- (id<TokenSource>) getTokenSource
{
return [input getTokenSource];
}
@@ -196,9 +196,9 @@
return [input toStringFromStart:startIndex ToEnd:stopIndex];
}

-- (NSString *) toStringFromToken:(id<ANTLRToken>)startToken ToToken:(id<ANTLRToken>)stopToken
+- (NSString *) toStringFromToken:(CommonToken *)startToken ToToken:(CommonToken *)stopToken
{
-    return [input toStringFromStart:[startToken getStart] ToEnd:[stopToken getStopToken]];
+    return [input toStringFromStart:startToken.startIndex ToEnd:stopToken.stopIndex];
}

@end
diff --git a/runtime/ObjC/Framework/DebugTreeAdaptor.h b/runtime/ObjC/Framework/DebugTreeAdaptor.h
index f8dd07e..5aede04 100644
--- a/runtime/ObjC/Framework/DebugTreeAdaptor.h
+++ b/runtime/ObjC/Framework/DebugTreeAdaptor.h
@@ -25,21 +25,21 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRParser.h"
-#import "ANTLRCommonTreeAdaptor.h"
-#import "ANTLRDebugEventListener.h"
+#import "Parser.h"
+#import "CommonTreeAdaptor.h"
+#import "DebugEventListener.h"

-@interface ANTLRDebugTreeAdaptor : ANTLRBaseTreeAdaptor {
-	id<ANTLRDebugEventListener> debugListener;
-	ANTLRCommonTreeAdaptor *treeAdaptor;
+@interface DebugTreeAdaptor : BaseTreeAdaptor {
+	id<DebugEventListener> debugListener;
+	CommonTreeAdaptor *treeAdaptor;
}

-- (id) initWithTreeAdaptor:(ANTLRCommonTreeAdaptor *)aTreeAdaptor debugListener:(id<ANTLRDebugEventListener>)aDebugListener;
+- (id) initWithTreeAdaptor:(CommonTreeAdaptor *)aTreeAdaptor debugListener:(id<DebugEventListener>)aDebugListener;

-- (id<ANTLRDebugEventListener>)debugListener;
-- (void) setDebugListener:(id<ANTLRDebugEventListener>)aDebugListener;
+- (id<DebugEventListener>)debugListener;
+- (void) setDebugListener:(id<DebugEventListener>)aDebugListener;

-- (ANTLRCommonTreeAdaptor *) getTreeAdaptor;
-- (void) setTreeAdaptor:(ANTLRCommonTreeAdaptor *)aTreeAdaptor;
+- (CommonTreeAdaptor *) getTreeAdaptor;
+- (void) setTreeAdaptor:(CommonTreeAdaptor *)aTreeAdaptor;

@end
diff --git a/runtime/ObjC/Framework/DebugTreeAdaptor.m b/runtime/ObjC/Framework/DebugTreeAdaptor.m
index 01c4c6e..5ca8df1 100644
--- a/runtime/ObjC/Framework/DebugTreeAdaptor.m
+++ b/runtime/ObjC/Framework/DebugTreeAdaptor.m
@@ -24,13 +24,13 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRDebugTreeAdaptor.h"
+#import "DebugTreeAdaptor.h"


-@implementation ANTLRDebugTreeAdaptor
+@implementation DebugTreeAdaptor


-- (id) initWithTreeAdaptor:(ANTLRCommonTreeAdaptor *)aTreeAdaptor debugListener:(id<ANTLRDebugEventListener>)aDebugListener
+- (id) initWithTreeAdaptor:(CommonTreeAdaptor *)aTreeAdaptor debugListener:(id<DebugEventListener>)aDebugListener
{
self = [super init];
if (self) {
@@ -47,26 +47,26 @@
[super dealloc];
}

-- (id<ANTLRDebugEventListener>) debugListener
+- (id<DebugEventListener>) debugListener
{
return debugListener;
}

-- (void) setDebugListener: (id<ANTLRDebugEventListener>) aDebugListener
+- (void) setDebugListener: (id<DebugEventListener>) aDebugListener
{
if (debugListener != aDebugListener) {
-        [(id<ANTLRTreeAdaptor,NSObject>)aDebugListener retain];
-        [(id<ANTLRTreeAdaptor,NSObject>)debugListener release];
+        [(id<TreeAdaptor,NSObject>)aDebugListener retain];
+        [(id<TreeAdaptor,NSObject>)debugListener release];
debugListener = aDebugListener;
}
}

-- (ANTLRCommonTreeAdaptor *) getTreeAdaptor
+- (CommonTreeAdaptor *) getTreeAdaptor
{
return treeAdaptor;
}

-- (void) setTreeAdaptor: (ANTLRCommonTreeAdaptor *) aTreeAdaptor
+- (void) setTreeAdaptor: (CommonTreeAdaptor *) aTreeAdaptor
{
if (treeAdaptor != aTreeAdaptor) {
[aTreeAdaptor retain];
@@ -89,92 +89,92 @@

#pragma mark Construction

-- (id<ANTLRBaseTree>) newANTLRTreeWithToken:(id<ANTLRToken>) payload
+- (id<BaseTree>) newTreeWithToken:(id<Token>) payload
{
-	id<ANTLRBaseTree> newTree = [ANTLRCommonTree newTreeWithToken:payload];
+	id<BaseTree> newTree = [CommonTree newTreeWithToken:payload];
[debugListener createNode:[treeAdaptor uniqueIdForTree:newTree] fromTokenAtIndex:[payload getTokenIndex]];
return newTree;
}

-- (id<ANTLRBaseTree>) emptyTree
+- (id<BaseTree>) emptyTree
{
-	id<ANTLRBaseTree> newTree = [treeAdaptor newEmptyTree];
+	id<BaseTree> newTree = [treeAdaptor newEmptyTree];
[debugListener createNilNode:[treeAdaptor uniqueIdForTree:newTree]];
return newTree;
}

/*	We don't have debug events for those:
- - (id) copyNode:(id<ANTLRBaseTree>)aNode
+ - (id) copyNode:(id<BaseTree>)aNode
{
}
-- (id) copyTree:(id<ANTLRBaseTree>)aTree
+- (id) copyTree:(id<BaseTree>)aTree
{
}
*/

-- (void) addChild:(id<ANTLRBaseTree>)child toTree:(id<ANTLRBaseTree>)aTree
+- (void) addChild:(id<BaseTree>)child toTree:(id<BaseTree>)aTree
{
[treeAdaptor addChild:child toTree:aTree];
[debugListener addChild:[treeAdaptor uniqueIdForTree:child] toTree:[self uniqueIdForTree:aTree]];
}

-- (id<ANTLRBaseTree>) becomeRoot:(id<ANTLRBaseTree>)newRoot old:(id<ANTLRBaseTree>)oldRoot
+- (id<BaseTree>) becomeRoot:(id<BaseTree>)newRoot old:(id<BaseTree>)oldRoot
{
-	id<ANTLRBaseTree> newTree = [treeAdaptor becomeRoot:newRoot old:oldRoot];
+	id<BaseTree> newTree = [treeAdaptor becomeRoot:newRoot old:oldRoot];
[debugListener becomeRoot:[treeAdaptor uniqueIdForTree:newTree] old:[self uniqueIdForTree:oldRoot]];
return newTree;
}

/* handle by forwardInvocation:
-- (NSUInteger) uniqueIdForTree:(id<ANTLRBaseTree>)aNode
+- (NSUInteger) uniqueIdForTree:(id<BaseTree>)aNode
{
}
*/

#pragma mark Rewrite Rules

- - (void) addTokenAsChild:(id<ANTLRToken>)child toTree:(id<ANTLRBaseTree>)aTree
+ - (void) addTokenAsChild:(id<Token>)child toTree:(id<BaseTree>)aTree
{
-	id<ANTLRBaseTree> newChild = [self newANTLRTreeWithToken:child];
+	id<BaseTree> newChild = [self newTreeWithToken:child];
[self addChild:newChild toTree:aTree];
}

-- (id<ANTLRBaseTree>) makeToken:(id<ANTLRToken>)newRoot parentOf:(id<ANTLRBaseTree>)oldRoot
+- (id<BaseTree>) makeToken:(id<Token>)newRoot parentOf:(id<BaseTree>)oldRoot
{
-	id<ANTLRBaseTree> newNode = [self newANTLRTreeWithToken:newRoot];
+	id<BaseTree> newNode = [self newTreeWithToken:newRoot];
return [self becomeRoot:newNode old:oldRoot];
}

-- (id<ANTLRBaseTree>) newANTLRTreeWithTokenType:(NSInteger)tokenType
+- (id<BaseTree>) newTreeWithTokenType:(NSInteger)tokenType
{
-	id<ANTLRBaseTree> newTree = [treeAdaptor newANTLRTreeWithTokenType:tokenType];
+	id<BaseTree> newTree = [treeAdaptor newTreeWithTokenType:tokenType];
[debugListener createNode:[treeAdaptor uniqueIdForTree:newTree] text:nil type:tokenType];
return newTree;
}

-- (id<ANTLRBaseTree>) newANTLRTreeWithTokenType:(NSInteger)tokenType text:(NSString *)tokenText
+- (id<BaseTree>) newTreeWithTokenType:(NSInteger)tokenType text:(NSString *)tokenText
{
-	id<ANTLRBaseTree> newTree = [treeAdaptor newANTLRTreeWithTokenType:tokenType text:tokenText];
+	id<BaseTree> newTree = [treeAdaptor newTreeWithTokenType:tokenType text:tokenText];
[debugListener createNode:[treeAdaptor uniqueIdForTree:newTree] text:tokenText type:tokenType];
return newTree;
}
-- (id<ANTLRBaseTree>) newANTLRTreeWithToken:(id<ANTLRToken>)fromToken tokenType:(NSInteger)tokenType
+- (id<BaseTree>) newTreeWithToken:(id<Token>)fromToken tokenType:(NSInteger)tokenType
{
-	id<ANTLRBaseTree> newTree = [treeAdaptor newANTLRTreeWithToken:fromToken tokenType:tokenType];
+	id<BaseTree> newTree = [treeAdaptor newTreeWithToken:fromToken tokenType:tokenType];
[debugListener createNode:[treeAdaptor uniqueIdForTree:newTree] text:fromToken.text type:tokenType];
return newTree;
}

-- (id<ANTLRBaseTree>) newANTLRTreeWithToken:(id<ANTLRToken>)fromToken tokenType:(NSInteger)tokenType text:(NSString *)tokenText
+- (id<BaseTree>) newTreeWithToken:(id<Token>)fromToken tokenType:(NSInteger)tokenType text:(NSString *)tokenText
{
-	id<ANTLRBaseTree> newTree = [treeAdaptor newANTLRTreeWithToken:fromToken tokenType:tokenType text:tokenText];
+	id<BaseTree> newTree = [treeAdaptor newTreeWithToken:fromToken tokenType:tokenType text:tokenText];
[debugListener createNode:[treeAdaptor uniqueIdForTree:newTree] text:tokenText type:tokenType];
return newTree;
}

-- (id<ANTLRBaseTree>) newANTLRTreeWithToken:(id<ANTLRToken>)fromToken text:(NSString *)tokenText
+- (id<BaseTree>) newTreeWithToken:(id<Token>)fromToken text:(NSString *)tokenText
{
-	id<ANTLRBaseTree> newTree = [treeAdaptor newANTLRTreeWithToken:fromToken text:tokenText];
+	id<BaseTree> newTree = [treeAdaptor newTreeWithToken:fromToken text:tokenText];
[debugListener createNode:[treeAdaptor uniqueIdForTree:newTree] text:tokenText type:fromToken.type];
return newTree;
}
@@ -182,7 +182,7 @@
#pragma mark Content

/* handled by forwardInvocation:
-- (NSInteger) tokenTypeForNode:(id<ANTLRBaseTree>)aNode
+- (NSInteger) tokenTypeForNode:(id<BaseTree>)aNode
{
}

@@ -190,15 +190,15 @@
{
}

-- (NSString *) textForNode:(id<ANTLRBaseTree>)aNode
+- (NSString *) textForNode:(id<BaseTree>)aNode
{
}

-- (void) setText:(NSString *)tokenText forNode:(id<ANTLRBaseTree>)aNode
+- (void) setText:(NSString *)tokenText forNode:(id<BaseTree>)aNode
{
}
*/
-- (void) setBoundariesForTree:(id<ANTLRBaseTree>)aTree fromToken:(id<ANTLRToken>)startToken toToken:(id<ANTLRToken>)stopToken
+- (void) setBoundariesForTree:(id<BaseTree>)aTree fromToken:(id<Token>)startToken toToken:(id<Token>)stopToken
{
[treeAdaptor setBoundariesForTree:aTree fromToken:startToken toToken:stopToken];
if (aTree && startToken && stopToken) {
@@ -206,22 +206,22 @@
}
}
/* handled by forwardInvocation:
-- (NSInteger) tokenStartIndexForTree:(id<ANTLRBaseTree>)aTree
+- (NSInteger) tokenStartIndexForTree:(id<BaseTree>)aTree
{
}

-- (NSInteger) tokenStopIndexForTree:(id<ANTLRBaseTree>)aTree
+- (NSInteger) tokenStopIndexForTree:(id<BaseTree>)aTree
{
}
*/

#pragma mark Navigation / Tree Parsing
/* handled by forwardInvocation:
-- (id<ANTLRBaseTree>) childForNode:(id<ANTLRBaseTree>) aNode atIndex:(NSInteger) i
+- (id<BaseTree>) childForNode:(id<BaseTree>) aNode atIndex:(NSInteger) i
{
}

-- (NSInteger) childCountForTree:(id<ANTLRBaseTree>) aTree
+- (NSInteger) childCountForTree:(id<BaseTree>) aTree
{
}
*/
diff --git a/runtime/ObjC/Framework/DebugTreeNodeStream.h b/runtime/ObjC/Framework/DebugTreeNodeStream.h
index 733f6fd..14e2f6b 100644
--- a/runtime/ObjC/Framework/DebugTreeNodeStream.h
+++ b/runtime/ObjC/Framework/DebugTreeNodeStream.h
@@ -25,35 +25,35 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRDebugEventListener.h"
-#import "ANTLRTreeAdaptor.h"
-#import "ANTLRTreeNodeStream.h"
+#import "DebugEventListener.h"
+#import "TreeAdaptor.h"
+#import "TreeNodeStream.h"

-@interface ANTLRDebugTreeNodeStream : NSObject <ANTLRTreeNodeStream> {
-	id<ANTLRDebugEventListener> debugListener;
-	id<ANTLRTreeAdaptor> treeAdaptor;
-	id<ANTLRTreeNodeStream> input;
+@interface DebugTreeNodeStream : NSObject <TreeNodeStream> {
+	id<DebugEventListener> debugListener;
+	id<TreeAdaptor> treeAdaptor;
+	id<TreeNodeStream> input;
BOOL initialStreamState;
}

-- (id) initWithTreeNodeStream:(id<ANTLRTreeNodeStream>)theStream debugListener:(id<ANTLRDebugEventListener>)debugger;
+- (id) initWithTreeNodeStream:(id<TreeNodeStream>)theStream debugListener:(id<DebugEventListener>)debugger;

-- (id<ANTLRDebugEventListener>) debugListener;
-- (void) setDebugListener: (id<ANTLRDebugEventListener>) aDebugListener;
+- (id<DebugEventListener>) debugListener;
+- (void) setDebugListener: (id<DebugEventListener>) aDebugListener;

-- (id<ANTLRTreeNodeStream>) input;
-- (void) setInput: (id<ANTLRTreeNodeStream>) aTreeNodeStream;
+- (id<TreeNodeStream>) input;
+- (void) setInput: (id<TreeNodeStream>) aTreeNodeStream;

-- (id<ANTLRTreeAdaptor>) getTreeAdaptor;
-- (void) setTreeAdaptor: (id<ANTLRTreeAdaptor>) aTreeAdaptor;
+- (id<TreeAdaptor>) getTreeAdaptor;
+- (void) setTreeAdaptor: (id<TreeAdaptor>) aTreeAdaptor;

-#pragma mark ANTLRTreeNodeStream conformance
+#pragma mark TreeNodeStream conformance

- (id) LT:(NSInteger)k;
-- (id<ANTLRTreeAdaptor>) getTreeAdaptor;
+- (id<TreeAdaptor>) getTreeAdaptor;
- (void) setUniqueNavigationNodes:(BOOL)flag;

-#pragma mark ANTLRIntStream conformance
+#pragma mark IntStream conformance
- (void) consume;
- (NSInteger) LA:(NSUInteger) i;
- (NSUInteger) mark;
diff --git a/runtime/ObjC/Framework/DebugTreeNodeStream.m b/runtime/ObjC/Framework/DebugTreeNodeStream.m
index 37f55de..c923f45 100644
--- a/runtime/ObjC/Framework/DebugTreeNodeStream.m
+++ b/runtime/ObjC/Framework/DebugTreeNodeStream.m
@@ -24,12 +24,12 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRDebugTreeNodeStream.h"
+#import "DebugTreeNodeStream.h"


-@implementation ANTLRDebugTreeNodeStream
+@implementation DebugTreeNodeStream

-- (id) initWithTreeNodeStream:(id<ANTLRTreeNodeStream>)theStream debugListener:(id<ANTLRDebugEventListener>)debugger
+- (id) initWithTreeNodeStream:(id<TreeNodeStream>)theStream debugListener:(id<DebugEventListener>)debugger
{
self = [super init];
if (self) {
@@ -48,52 +48,52 @@
[super dealloc];
}

-- (id<ANTLRDebugEventListener>) debugListener
+- (id<DebugEventListener>) debugListener
{
return debugListener;
}

-- (void) setDebugListener: (id<ANTLRDebugEventListener>) aDebugListener
+- (void) setDebugListener: (id<DebugEventListener>) aDebugListener
{
if (debugListener != aDebugListener) {
-        [(id<ANTLRDebugEventListener,NSObject>)aDebugListener retain];
-        [(id<ANTLRDebugEventListener,NSObject>)debugListener release];
+        [(id<DebugEventListener,NSObject>)aDebugListener retain];
+        [(id<DebugEventListener,NSObject>)debugListener release];
debugListener = aDebugListener;
}
}


-- (id<ANTLRTreeAdaptor>) getTreeAdaptor
+- (id<TreeAdaptor>) getTreeAdaptor
{
return treeAdaptor;
}

-- (void) setTreeAdaptor: (id<ANTLRTreeAdaptor>) aTreeAdaptor
+- (void) setTreeAdaptor: (id<TreeAdaptor>) aTreeAdaptor
{
if (treeAdaptor != aTreeAdaptor) {
-        [(id<ANTLRTreeAdaptor,NSObject>)aTreeAdaptor retain];
-        [(id<ANTLRTreeAdaptor,NSObject>)treeAdaptor release];
+        [(id<TreeAdaptor,NSObject>)aTreeAdaptor retain];
+        [(id<TreeAdaptor,NSObject>)treeAdaptor release];
treeAdaptor = aTreeAdaptor;
}
}


-- (id<ANTLRTreeNodeStream>) input
+- (id<TreeNodeStream>) input
{
return input;
}

-- (void) setInput:(id<ANTLRTreeNodeStream>) aTreeNodeStream
+- (void) setInput:(id<TreeNodeStream>) aTreeNodeStream
{
if (input != aTreeNodeStream) {
[input release];
-        [(id<ANTLRTreeNodeStream,NSObject>)aTreeNodeStream retain];
+        [(id<TreeNodeStream,NSObject>)aTreeNodeStream retain];
}
input = aTreeNodeStream;
}


-#pragma mark ANTLRTreeNodeStream conformance
+#pragma mark TreeNodeStream conformance

- (id) LT:(NSInteger)k
{
@@ -110,7 +110,7 @@
[input setUniqueNavigationNodes:flag];
}

-#pragma mark ANTLRIntStream conformance
+#pragma mark IntStream conformance
- (void) consume
{
id node = [input LT:1];
@@ -123,7 +123,7 @@

- (NSInteger) LA:(NSUInteger) i
{
-	id<ANTLRBaseTree> node = [self LT:1];
+	id<BaseTree> node = [self LT:1];
return node.type;
}

@@ -169,7 +169,7 @@

- (NSString *) toStringFromToken:(id)startNode ToToken:(id)stopNode
{
-    return [input toStringFromToken:(id<ANTLRToken>)startNode ToToken:(id<ANTLRToken>)stopNode];
+    return [input toStringFromToken:(id<Token>)startNode ToToken:(id<Token>)stopNode];
}

@end
diff --git a/runtime/ObjC/Framework/DebugTreeParser.h b/runtime/ObjC/Framework/DebugTreeParser.h
index 171c1e7..9e81b65 100644
--- a/runtime/ObjC/Framework/DebugTreeParser.h
+++ b/runtime/ObjC/Framework/DebugTreeParser.h
@@ -25,28 +25,28 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRTreeParser.h"
-#import "ANTLRDebugEventProxy.h"
-#import "ANTLRDebugTreeNodeStream.h"
+#import "TreeParser.h"
+#import "DebugEventSocketProxy.h"
+#import "DebugTreeNodeStream.h"

-@interface ANTLRDebugTreeParser : ANTLRTreeParser {
-	id<ANTLRDebugEventListener> debugListener;
+@interface DebugTreeParser : TreeParser {
+	id<DebugEventListener> debugListener;
}

-- (id) initWithTreeNodeStream:(id<ANTLRTreeNodeStream>)theStream;
-- (id) initWithTreeNodeStream:(id<ANTLRTreeNodeStream>)theStream
+- (id) initWithTreeNodeStream:(id<TreeNodeStream>)theStream;
+- (id) initWithTreeNodeStream:(id<TreeNodeStream>)theStream
debuggerPort:(NSInteger)portNumber;
// designated initializer
-- (id) initWithTreeNodeStream:(id<ANTLRTreeNodeStream>)theStream
-				debugListener:(id<ANTLRDebugEventListener>)theDebugListener
+- (id) initWithTreeNodeStream:(id<TreeNodeStream>)theStream
+				debugListener:(id<DebugEventListener>)theDebugListener
debuggerPort:(NSInteger)portNumber;

-- (id<ANTLRDebugEventListener>) debugListener;
-- (void) setDebugListener: (id<ANTLRDebugEventListener>) aDebugListener;
+- (id<DebugEventListener>) debugListener;
+- (void) setDebugListener: (id<DebugEventListener>) aDebugListener;

-- (void) recoverFromMismatchedToken:(id<ANTLRIntStream>)inputStream
+- (void) recoverFromMismatchedToken:(id<IntStream>)inputStream
exception:(NSException *)e
-						  tokenType:(ANTLRTokenType)ttype
+						  tokenType:(TokenType)ttype
follow:(ANTLRBitSet *)follow;

@end
diff --git a/runtime/ObjC/Framework/DebugTreeParser.m b/runtime/ObjC/Framework/DebugTreeParser.m
index 5692993..70b8ac1 100644
--- a/runtime/ObjC/Framework/DebugTreeParser.m
+++ b/runtime/ObjC/Framework/DebugTreeParser.m
@@ -24,35 +24,35 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRDebugTreeParser.h"
+#import "DebugTreeParser.h"


-@implementation ANTLRDebugTreeParser
+@implementation DebugTreeParser

-- (id) initWithTreeNodeStream:(id<ANTLRTreeNodeStream>)theStream
+- (id) initWithTreeNodeStream:(id<TreeNodeStream>)theStream
{
return [self initWithTreeNodeStream:theStream debugListener:nil debuggerPort:-1];
}

-- (id) initWithTreeNodeStream:(id<ANTLRTreeNodeStream>)theStream
+- (id) initWithTreeNodeStream:(id<TreeNodeStream>)theStream
debuggerPort:(NSInteger)portNumber
{
return [self initWithTreeNodeStream:theStream debugListener:nil debuggerPort:portNumber];
}

-- (id) initWithTreeNodeStream:(id<ANTLRTreeNodeStream>)theStream
-				debugListener:(id<ANTLRDebugEventListener>)theDebugListener
+- (id) initWithTreeNodeStream:(id<TreeNodeStream>)theStream
+				debugListener:(id<DebugEventListener>)theDebugListener
debuggerPort:(NSInteger)portNumber
{
-	id<ANTLRDebugEventListener,NSObject> debugger = nil;
-	id<ANTLRTreeNodeStream> treeNodeStream = nil;
+	id<DebugEventListener,NSObject> debugger = nil;
+	id<TreeNodeStream> treeNodeStream = nil;
if (theDebugListener) {
-		debugger = (id<ANTLRDebugEventListener>)theDebugListener;
+		debugger = (id<DebugEventListener>)theDebugListener;
} else {
-		debugger = [[ANTLRDebugEventProxy alloc] initWithGrammarName:[self grammarFileName] debuggerPort:portNumber];
+		debugger = [[DebugEventSocketProxy alloc] initWithGrammarName:[self grammarFileName] debuggerPort:portNumber];
}
-	if (theStream && ![theStream isKindOfClass:[ANTLRDebugTreeNodeStream class]]) {
-		treeNodeStream = [[ANTLRDebugTreeNodeStream alloc] initWithTreeNodeStream:theStream debugListener:debugger];
+	if (theStream && ![theStream isKindOfClass:[DebugTreeNodeStream class]]) {
+		treeNodeStream = [[DebugTreeNodeStream alloc] initWithTreeNodeStream:theStream debugListener:debugger];
} else {
treeNodeStream = theStream;
}
@@ -72,16 +72,16 @@
[super dealloc];
}

-- (id<ANTLRDebugEventListener>) debugListener
+- (id<DebugEventListener>) debugListener
{
return debugListener;
}

-- (void) setDebugListener: (id<ANTLRDebugEventListener>) aDebugListener
+- (void) setDebugListener: (id<DebugEventListener>) aDebugListener
{
if (debugListener != aDebugListener) {
-        [(id<ANTLRDebugEventListener,NSObject>)aDebugListener retain];
-        [(id<ANTLRDebugEventListener,NSObject>)debugListener release];
+        [(id<DebugEventListener,NSObject>)aDebugListener retain];
+        [(id<DebugEventListener,NSObject>)debugListener release];
debugListener = aDebugListener;
}
}
@@ -108,16 +108,16 @@
[debugListener endBacktrack:level wasSuccessful:successful];
}

-- (void) recoverFromMismatchedToken:(id<ANTLRIntStream>)inputStream
+- (void) recoverFromMismatchedToken:(id<IntStream>)inputStream
exception:(NSException *)e
-						  tokenType:(ANTLRTokenType)ttype
+						  tokenType:(TokenType)ttype
follow:(ANTLRBitSet *)follow
{
#warning TODO: recoverFromMismatchedToken in debugger
[self recoverFromMismatchedToken:inputStream exception:e follow:follow];
}

-- (void) recoverFromMismatchedSet:(id<ANTLRIntStream>)inputStream
+- (void) recoverFromMismatchedSet:(id<IntStream>)inputStream
exception:(NSException *)e
follow:(ANTLRBitSet *)follow
{
diff --git a/runtime/ObjC/Framework/DoubleKeyMap.h b/runtime/ObjC/Framework/DoubleKeyMap.h
index 7885879..bbaa351 100644
--- a/runtime/ObjC/Framework/DoubleKeyMap.h
+++ b/runtime/ObjC/Framework/DoubleKeyMap.h
@@ -1,7 +1,7 @@

#import "AMutableArray.h"
#import "AMutableDictionary.h"
-#import "ANTLRLinkBase.h"
+#import "LinkBase.h"
/**
* Sometimes we need to map a key to a value but key is two pieces of data.
* This nested hash table saves creating a single key each time we access
@@ -10,7 +10,7 @@

@class AMutableArray;

-@interface ANTLRDoubleKeyMap : ANTLRLinkBase {
+@interface DoubleKeyMap : LinkBase {
AMutableDictionary *data;
}

diff --git a/runtime/ObjC/Framework/DoubleKeyMap.m b/runtime/ObjC/Framework/DoubleKeyMap.m
index 3642ef0..5d01f6f 100644
--- a/runtime/ObjC/Framework/DoubleKeyMap.m
+++ b/runtime/ObjC/Framework/DoubleKeyMap.m
@@ -1,6 +1,6 @@
-#import "ANTLRDoubleKeyMap.h"
+#import "DoubleKeyMap.h"

-@implementation ANTLRDoubleKeyMap
+@implementation DoubleKeyMap

- (id) init
{
@@ -74,7 +74,7 @@

- (AMutableArray *) values
{
-//    ANTLRHashMap *s = [[ANTLRHashMap newANTLRHashMapWithLen:30];
+//    HashMap *s = [[HashMap newHashMapWithLen:30];
AMutableArray *s = [AMutableArray arrayWithCapacity:30];

for (AMutableDictionary *k2 in [data allValues]) {
@@ -91,7 +91,7 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRCommonToken" );
+    NSLog( @"called dealloc in CommonToken" );
#endif
[data release];
[super dealloc];
diff --git a/runtime/ObjC/Framework/EarlyExitException.h b/runtime/ObjC/Framework/EarlyExitException.h
index 07e840d..ae0a812 100644
--- a/runtime/ObjC/Framework/EarlyExitException.h
+++ b/runtime/ObjC/Framework/EarlyExitException.h
@@ -25,14 +25,14 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRRecognitionException.h"
+#import "RecognitionException.h"

-@interface ANTLREarlyExitException : ANTLRRecognitionException {
+@interface EarlyExitException : RecognitionException {
int decisionNumber;
}

-+ (ANTLREarlyExitException *) newException:(id<ANTLRIntStream>)anInputStream decisionNumber:(NSInteger)aDecisionNumber;
-- (id) initWithStream:(id<ANTLRIntStream>)anInputStream decisionNumber:(NSInteger) aDecisionNumber;
++ (EarlyExitException *) newException:(id<IntStream>)anInputStream decisionNumber:(NSInteger)aDecisionNumber;
+- (id) initWithStream:(id<IntStream>)anInputStream decisionNumber:(NSInteger) aDecisionNumber;

@property int decisionNumber;
@end
diff --git a/runtime/ObjC/Framework/EarlyExitException.m b/runtime/ObjC/Framework/EarlyExitException.m
index 81ffb26..bf6fc1b 100644
--- a/runtime/ObjC/Framework/EarlyExitException.m
+++ b/runtime/ObjC/Framework/EarlyExitException.m
@@ -24,17 +24,17 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLREarlyExitException.h"
+#import "EarlyExitException.h"


-@implementation ANTLREarlyExitException
+@implementation EarlyExitException

-+ (ANTLREarlyExitException *) newException:(id<ANTLRIntStream>) anInputStream decisionNumber:(NSInteger) aDecisionNumber
++ (EarlyExitException *) newException:(id<IntStream>) anInputStream decisionNumber:(NSInteger) aDecisionNumber
{
return [[self alloc] initWithStream:anInputStream decisionNumber:aDecisionNumber];
}

-- (id) initWithStream:(id<ANTLRIntStream>)anInputStream decisionNumber:(NSInteger) aDecisionNumber
+- (id) initWithStream:(id<IntStream>)anInputStream decisionNumber:(NSInteger) aDecisionNumber
{
if ((self = [super initWithStream:anInputStream]) != nil) {
decisionNumber = aDecisionNumber;
diff --git a/runtime/ObjC/Framework/FailedPredicateException.h b/runtime/ObjC/Framework/FailedPredicateException.h
index afbb653..a988fb0 100644
--- a/runtime/ObjC/Framework/FailedPredicateException.h
+++ b/runtime/ObjC/Framework/FailedPredicateException.h
@@ -25,10 +25,10 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRRecognitionException.h"
+#import "RecognitionException.h"


-@interface ANTLRFailedPredicateException : ANTLRRecognitionException
+@interface FailedPredicateException : RecognitionException
{
NSString *predicate;
NSString *ruleName;
@@ -37,8 +37,8 @@
@property (retain) NSString *predicate;
@property (retain) NSString *ruleName;

-+ (ANTLRFailedPredicateException *) newException:(NSString *)theRuleName predicate:(NSString *)thePredicate stream:(id<ANTLRIntStream>)theStream;
-- (ANTLRFailedPredicateException *) initWithRuleName:(NSString *)theRuleName predicate:(NSString *)thePredicate stream:(id<ANTLRIntStream>)theStream;
++ (FailedPredicateException *) newException:(NSString *)theRuleName predicate:(NSString *)thePredicate stream:(id<IntStream>)theStream;
+- (FailedPredicateException *) initWithRuleName:(NSString *)theRuleName predicate:(NSString *)thePredicate stream:(id<IntStream>)theStream;

#ifdef DONTUSEYET
- (NSString *) getPredicate;
diff --git a/runtime/ObjC/Framework/FailedPredicateException.m b/runtime/ObjC/Framework/FailedPredicateException.m
index caf7716..02f9f42 100644
--- a/runtime/ObjC/Framework/FailedPredicateException.m
+++ b/runtime/ObjC/Framework/FailedPredicateException.m
@@ -24,20 +24,20 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRFailedPredicateException.h"
+#import "FailedPredicateException.h"


-@implementation ANTLRFailedPredicateException
+@implementation FailedPredicateException

@synthesize predicate;
@synthesize ruleName;

-+ (ANTLRFailedPredicateException *) newException:(NSString *)theRuleName predicate:(NSString *)thePredicate stream:(id<ANTLRIntStream>)theStream
++ (FailedPredicateException *) newException:(NSString *)theRuleName predicate:(NSString *)thePredicate stream:(id<IntStream>)theStream
{
-	return [[ANTLRFailedPredicateException alloc] initWithRuleName:theRuleName predicate:thePredicate stream:theStream];
+	return [[FailedPredicateException alloc] initWithRuleName:theRuleName predicate:thePredicate stream:theStream];
}

-- (ANTLRFailedPredicateException *) initWithRuleName:(NSString *)theRuleName predicate:(NSString *)thePredicate stream:(id<ANTLRIntStream>)theStream
+- (FailedPredicateException *) initWithRuleName:(NSString *)theRuleName predicate:(NSString *)thePredicate stream:(id<IntStream>)theStream
{
if ((self = [super initWithStream:theStream])) {
[self setPredicate:thePredicate];
@@ -49,7 +49,7 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRFailedPredicateException" );
+    NSLog( @"called dealloc in FailedPredicateException" );
#endif
[self setPredicate:nil];
[self setRuleName:nil];
diff --git a/runtime/ObjC/Framework/FastQueue.h b/runtime/ObjC/Framework/FastQueue.h
index f5ba582..b5132de 100644
--- a/runtime/ObjC/Framework/FastQueue.h
+++ b/runtime/ObjC/Framework/FastQueue.h
@@ -1,5 +1,5 @@
//
-//  ANTLRFastQueue.h
+//  FastQueue.h
//  ANTLR
//
//  Created by Ian Michell on 26/04/2010.
@@ -32,7 +32,7 @@
#import <Cocoa/Cocoa.h>
#import "AMutableArray.h"

-@interface ANTLRFastQueue : NSObject <NSCopying>
+@interface FastQueue : NSObject <NSCopying>
{
__strong AMutableArray *data;
NSUInteger p;
@@ -43,7 +43,7 @@
@property (assign) NSUInteger p;
@property (assign) NSUInteger range;

-+ (id) newANTLRFastQueue;
++ (id) newFastQueue;

- (id) init;

@@ -56,7 +56,7 @@
- (NSUInteger) size;
- (NSUInteger) range;
- (id) head;
-- (id) objectAtIndex:(NSUInteger) i;
+- (id) objectAtIndex:(NSInteger) i;
- (void) clear;
- (NSString *) toString;
- (NSString *) description;
diff --git a/runtime/ObjC/Framework/FastQueue.m b/runtime/ObjC/Framework/FastQueue.m
index 6944b6d..c4c3dd7 100644
--- a/runtime/ObjC/Framework/FastQueue.m
+++ b/runtime/ObjC/Framework/FastQueue.m
@@ -1,5 +1,5 @@
//
-//  ANTLRFastQueue.m
+//  FastQueue.m
//  ANTLR
//
//  Created by Ian Michell on 26/04/2010.
@@ -29,20 +29,20 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRFastQueue.h"
+#import "FastQueue.h"
#import "ANTLRError.h"
-#import "ANTLRRuntimeException.h"
+#import "RuntimeException.h"

-@implementation ANTLRFastQueue
+@implementation FastQueue

//@synthesize pool;
@synthesize data;
@synthesize p;
@synthesize range;

-+ (id) newANTLRFastQueue
++ (id) newFastQueue
{
-    return [[ANTLRFastQueue alloc] init];
+    return [[FastQueue alloc] init];
}

- (id) init
@@ -59,7 +59,7 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRFastQueue" );
+    NSLog( @"called dealloc in FastQueue" );
#endif
if ( data ) [data release];
[super dealloc];
@@ -67,7 +67,7 @@

- (id) copyWithZone:(NSZone *)aZone
{
-    ANTLRFastQueue *copy;
+    FastQueue *copy;

copy = [[[self class] allocWithZone:aZone] init];
copy.data = [data copyWithZone:nil];
@@ -126,16 +126,16 @@
return [self objectAtIndex:0];
}

-- (id) objectAtIndex:(NSUInteger) i
+- (id) objectAtIndex:(NSInteger) i
{
-    NSUInteger absIndex;
+    NSInteger absIndex;

absIndex = p + i;
if ( absIndex >= [data count] ) {
-		@throw [ANTLRNoSuchElementException newException:[NSString stringWithFormat:@"queue index %d > last index %d", absIndex, [data count]-1]];
+		@throw [NoSuchElementException newException:[NSString stringWithFormat:@"queue index %d > last index %d", absIndex, [data count]-1]];
}
if ( absIndex < 0 ) {
-	    @throw [ANTLRNoSuchElementException newException:[NSString stringWithFormat:@"queue index %d < 0", absIndex]];
+	    @throw [NoSuchElementException newException:[NSString stringWithFormat:@"queue index %d < 0", absIndex]];
}
if ( absIndex > range ) range = absIndex;
return [data objectAtIndex:absIndex];
diff --git a/runtime/ObjC/Framework/HashMap.h b/runtime/ObjC/Framework/HashMap.h
index 113cb65..e3ef981 100644
--- a/runtime/ObjC/Framework/HashMap.h
+++ b/runtime/ObjC/Framework/HashMap.h
@@ -1,5 +1,5 @@
//
-//  ANTLRHashMap.h
+//  HashMap.h
//  ANTLR
//
// Copyright (c) 2010 Alan Condit
@@ -28,15 +28,15 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRLinkBase.h"
-#import "ANTLRMapElement.h"
+#import "LinkBase.h"
+#import "MapElement.h"

#define GLOBAL_SCOPE       0
#define LOCAL_SCOPE        1
#define HASHSIZE         101
#define HBUFSIZE      0x2000

-@interface ANTLRHashMap : ANTLRLinkBase {
+@interface HashMap : LinkBase {
//    TStringPool *fPool;
NSInteger Scope;
NSInteger LastHash;
@@ -44,18 +44,18 @@
NSUInteger count;
NSUInteger ptr;
__strong NSMutableData *buffer;
-    __strong ANTLRMapElement **ptrBuffer;
+    __strong MapElement **ptrBuffer;
NSInteger mode;
}

// Contruction/Destruction
-+ (id)newANTLRHashMap;
-+ (id)newANTLRHashMapWithLen:(NSInteger)aBuffSize;
++ (id)newHashMap;
++ (id)newHashMapWithLen:(NSInteger)aBuffSize;
- (id)init;
- (id)initWithLen:(NSInteger)aBuffSize;
- (void)dealloc;
-- (ANTLRHashMap *)PushScope:( ANTLRHashMap **)map;
-- (ANTLRHashMap *)PopScope:( ANTLRHashMap **)map;
+- (HashMap *)PushScope:( HashMap **)map;
+- (HashMap *)PopScope:( HashMap **)map;

- (NSInteger)count;
- (NSInteger)size;
@@ -64,25 +64,25 @@
/*    form hash value for string s */
- (NSInteger)hash:(NSString *)s;
/*   look for s in ptrBuffer  */
-- (ANTLRHashMap *)findscope:(int)level;
+- (HashMap *)findscope:(int)level;
/*   look for s in ptrBuffer  */
- (id)lookup:(NSString *)s Scope:(int)scope;
/*   look for s in ptrBuffer  */
-- (id)install:(ANTLRMapElement *)sym Scope:(int)scope;
+- (id)install:(MapElement *)sym Scope:(int)scope;
/*   look for s in ptrBuffer  */
-- (void)deleteANTLRHashMap:(ANTLRMapElement *)np;
+- (void)deleteHashMap:(MapElement *)np;
- (int)RemoveSym:(NSString *)s;
-- (void)delete_chain:(ANTLRMapElement *)np;
+- (void)delete_chain:(MapElement *)np;
#ifdef DONTUSEYET
- (int)bld_symtab:(KW_TABLE *)toknams;
#endif
-- (ANTLRMapElement **)getptrBuffer;
-- (ANTLRMapElement *)getptrBufferEntry:(int)idx;
-- (void)setptrBuffer:(ANTLRMapElement *)np Index:(int)idx;
+- (MapElement **)getptrBuffer;
+- (MapElement *)getptrBufferEntry:(int)idx;
+- (void)setptrBuffer:(MapElement *)np Index:(int)idx;
- (NSInteger)getScope;
- (void)setScope:(NSInteger)i;
-- (ANTLRMapElement *)getTType:(NSString *)name;
-- (ANTLRMapElement *)getNameInList:(NSInteger)ttype;
+- (MapElement *)getTType:(NSString *)name;
+- (MapElement *)getNameInList:(NSInteger)ttype;
- (void)putNode:(NSString *)name TokenType:(NSInteger)ttype;
- (NSInteger)getMode;
- (void)setMode:(NSInteger)aMode;
@@ -90,12 +90,12 @@
- (id) objectAtIndex:(NSInteger)idx;
- (void) setObject:(id)aRule atIndex:(NSInteger)idx;
- (void)addObject:(id)anObject;
-- (ANTLRMapElement *) getName:(NSString *)aName;
+- (MapElement *) getName:(NSString *)aName;
- (void) putName:(NSString *)name Node:(id)aNode;

- (NSEnumerator *)objectEnumerator;
- (BOOL) hasNext;
-- (ANTLRMapElement *)nextObject;
+- (MapElement *)nextObject;

//@property (copy) TStringPool *fPool;
@property (getter=getScope, setter=setScope:) NSInteger Scope;
@@ -106,5 +106,5 @@
@property (getter=getCount, setter=setCount:) NSUInteger count;
@property (assign) NSUInteger ptr;
@property (retain, getter=getBuffer, setter=setBuffer:) NSMutableData *buffer;
-@property (assign, getter=getPtrBuffer, setter=setPtrBuffer:) ANTLRMapElement **ptrBuffer;
+@property (assign, getter=getPtrBuffer, setter=setPtrBuffer:) MapElement **ptrBuffer;
@end
diff --git a/runtime/ObjC/Framework/HashMap.m b/runtime/ObjC/Framework/HashMap.m
index ab025a9..db178f1 100644
--- a/runtime/ObjC/Framework/HashMap.m
+++ b/runtime/ObjC/Framework/HashMap.m
@@ -1,5 +1,5 @@
//
-//  ANTLRHashMap.m
+//  HashMap.m
//  ANTLR
//
// Copyright (c) 2010 Alan Condit
@@ -30,26 +30,26 @@
#define SUCCESS (0)
#define FAILURE (-1)

-#import "ANTLRHashMap.h"
+#import "HashMap.h"

static NSInteger itIndex;

/*
- * Start of ANTLRHashMap
+ * Start of HashMap
*/
-@implementation ANTLRHashMap
+@implementation HashMap

@synthesize Scope;
@synthesize LastHash;

-+(id)newANTLRHashMap
++(id)newHashMap
{
-    return [[ANTLRHashMap alloc] init];
+    return [[HashMap alloc] init];
}

-+(id)newANTLRHashMapWithLen:(NSInteger)aBuffSize
++(id)newHashMapWithLen:(NSInteger)aBuffSize
{
-    return [[ANTLRHashMap alloc] initWithLen:aBuffSize];
+    return [[HashMap alloc] initWithLen:aBuffSize];
}

-(id)init
@@ -62,11 +62,11 @@ static NSInteger itIndex;
ptr = 0;
BuffSize = HASHSIZE;
buffer = [[NSMutableData dataWithLength:(NSUInteger)BuffSize * sizeof(id)] retain];
-        ptrBuffer = (ANTLRMapElement **) [buffer mutableBytes];
+        ptrBuffer = (MapElement **) [buffer mutableBytes];
if ( fNext != nil ) {
-            Scope = ((ANTLRHashMap *)fNext)->Scope+1;
+            Scope = ((HashMap *)fNext)->Scope+1;
for( idx = 0; idx < BuffSize; idx++ ) {
-                ptrBuffer[idx] = ((ANTLRHashMap *)fNext)->ptrBuffer[idx];
+                ptrBuffer[idx] = ((HashMap *)fNext)->ptrBuffer[idx];
}
}
mode = 0;
@@ -84,11 +84,11 @@ static NSInteger itIndex;
Scope = 0;
ptr = 0;
buffer = [[NSMutableData dataWithLength:(NSUInteger)BuffSize * sizeof(id)] retain];
-        ptrBuffer = (ANTLRMapElement **) [buffer mutableBytes];
+        ptrBuffer = (MapElement **) [buffer mutableBytes];
if ( fNext != nil ) {
-            Scope = ((ANTLRHashMap *)fNext)->Scope+1;
+            Scope = ((HashMap *)fNext)->Scope+1;
for( idx = 0; idx < BuffSize; idx++ ) {
-                ptrBuffer[idx] = ((ANTLRHashMap *)fNext)->ptrBuffer[idx];
+                ptrBuffer[idx] = ((HashMap *)fNext)->ptrBuffer[idx];
}
}
mode = 0;
@@ -99,18 +99,18 @@ static NSInteger itIndex;
-(void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRHashMap" );
+    NSLog( @"called dealloc in HashMap" );
#endif
-    ANTLRMapElement *tmp, *rtmp;
+    MapElement *tmp, *rtmp;
NSInteger idx;

if ( self.fNext != nil ) {
for( idx = 0; idx < BuffSize; idx++ ) {
tmp = ptrBuffer[idx];
-            while ( tmp && tmp != [((ANTLRHashMap *)fNext) getptrBufferEntry:idx] ) {
+            while ( tmp && tmp != [((HashMap *)fNext) getptrBufferEntry:idx] ) {
rtmp = tmp;
// tmp = [tmp getfNext];
-                tmp = (ANTLRMapElement *)tmp.fNext;
+                tmp = (MapElement *)tmp.fNext;
[rtmp release];
}
}
@@ -144,15 +144,15 @@ static NSInteger itIndex;
}


--(void)deleteANTLRHashMap:(ANTLRMapElement *)np
+-(void)deleteHashMap:(MapElement *)np
{
-    ANTLRMapElement *tmp, *rtmp;
+    MapElement *tmp, *rtmp;
NSInteger idx;

if ( self.fNext != nil ) {
for( idx = 0; idx < BuffSize; idx++ ) {
tmp = ptrBuffer[idx];
-            while ( tmp && tmp != (ANTLRLinkBase *)[((ANTLRHashMap *)fNext) getptrBufferEntry:idx] ) {
+            while ( tmp && tmp != (LinkBase *)[((HashMap *)fNext) getptrBufferEntry:idx] ) {
rtmp = tmp;
tmp = [tmp getfNext];
[rtmp release];
@@ -161,17 +161,17 @@ static NSInteger itIndex;
}
}

--(ANTLRHashMap *)PushScope:(ANTLRHashMap **)map
+-(HashMap *)PushScope:(HashMap **)map
{
NSInteger idx;
-    ANTLRHashMap *htmp;
+    HashMap *htmp;

-    htmp = [ANTLRHashMap newANTLRHashMap];
+    htmp = [HashMap newHashMap];
if ( *map != nil ) {
-        ((ANTLRHashMap *)htmp)->fNext = *map;
-        [htmp setScope:[((ANTLRHashMap *)htmp->fNext) getScope]+1];
+        ((HashMap *)htmp)->fNext = *map;
+        [htmp setScope:[((HashMap *)htmp->fNext) getScope]+1];
for( idx = 0; idx < BuffSize; idx++ ) {
-            htmp->ptrBuffer[idx] = ((ANTLRHashMap *)htmp->fNext)->ptrBuffer[idx];
+            htmp->ptrBuffer[idx] = ((HashMap *)htmp->fNext)->ptrBuffer[idx];
}
}
//    gScopeLevel++;
@@ -179,15 +179,15 @@ static NSInteger itIndex;
return( htmp );
}

--(ANTLRHashMap *)PopScope:(ANTLRHashMap **)map
+-(HashMap *)PopScope:(HashMap **)map
{
NSInteger idx;
-    ANTLRMapElement *tmp;
-    ANTLRHashMap *htmp;
+    MapElement *tmp;
+    HashMap *htmp;

htmp = *map;
if ( (*map)->fNext != nil ) {
-        *map = (ANTLRHashMap *)htmp->fNext;
+        *map = (HashMap *)htmp->fNext;
for( idx = 0; idx < BuffSize; idx++ ) {
if ( htmp->ptrBuffer[idx] == nil ||
htmp->ptrBuffer[idx] == (*map)->ptrBuffer[idx] ) {
@@ -201,7 +201,7 @@ static NSInteger itIndex;
htmp->ptrBuffer[idx] = [tmp getfNext];
[tmp release];
}
-        *map = (ANTLRHashMap *)htmp->fNext;
+        *map = (HashMap *)htmp->fNext;
//        gScopeLevel--;
}
return( htmp );
@@ -210,7 +210,7 @@ static NSInteger itIndex;
#ifdef USERDOC
/*
*  HASH        hash entry to get index to table
- *  NSInteger hash( ANTLRHashMap *self, char *s );
+ *  NSInteger hash( HashMap *self, char *s );
*
*     Inputs:  char *s             string to find
*
@@ -234,22 +234,22 @@ static NSInteger itIndex;
#ifdef USERDOC
/*
*  FINDSCOPE  search hashed list for entry
- *  ANTLRHashMap *findscope( ANTLRHashMap *self, NSInteger scope );
+ *  HashMap *findscope( HashMap *self, NSInteger scope );
*
*     Inputs:  NSInteger       scope -- scope level to find
*
- *     Returns: ANTLRHashMap   pointer to ptrBuffer of proper scope level
+ *     Returns: HashMap   pointer to ptrBuffer of proper scope level
*
*  Last Revision 9/03/90
*/
#endif
--(ANTLRHashMap *)findscope:(NSInteger)scope
+-(HashMap *)findscope:(NSInteger)scope
{
if ( self->Scope == scope ) {
return( self );
}
else if ( fNext ) {
-        return( [((ANTLRHashMap *)fNext) findscope:scope] );
+        return( [((HashMap *)fNext) findscope:scope] );
}
return( nil );              /*   not found      */
}
@@ -257,18 +257,18 @@ static NSInteger itIndex;
#ifdef USERDOC
/*
*  LOOKUP  search hashed list for entry
- *  ANTLRMapElement *lookup( ANTLRHashMap *self, char *s, NSInteger scope );
+ *  MapElement *lookup( HashMap *self, char *s, NSInteger scope );
*
*     Inputs:  char     *s          string to find
*
- *     Returns: ANTLRMapElement  *           pointer to entry
+ *     Returns: MapElement  *           pointer to entry
*
*  Last Revision 9/03/90
*/
#endif
-(id)lookup:(NSString *)s Scope:(NSInteger)scope
{
-    ANTLRMapElement *np;
+    MapElement *np;

for( np = self->ptrBuffer[[self hash:s]]; np != nil; np = [np getfNext] ) {
if ( [s isEqualToString:[np getName]] ) {
@@ -281,9 +281,9 @@ static NSInteger itIndex;
#ifdef USERDOC
/*
*  INSTALL search hashed list for entry
- *  NSInteger install( ANTLRHashMap *self, ANTLRMapElement *sym, NSInteger scope );
+ *  NSInteger install( HashMap *self, MapElement *sym, NSInteger scope );
*
- *     Inputs:  ANTLRMapElement    *sym   -- symbol ptr to install
+ *     Inputs:  MapElement    *sym   -- symbol ptr to install
*              NSInteger         scope -- level to find
*
*     Returns: Boolean     TRUE   if installed
@@ -292,9 +292,9 @@ static NSInteger itIndex;
*  Last Revision 9/03/90
*/
#endif
--(ANTLRMapElement *)install:(ANTLRMapElement *)sym Scope:(NSInteger)scope
+-(MapElement *)install:(MapElement *)sym Scope:(NSInteger)scope
{
-    ANTLRMapElement *np;
+    MapElement *np;

np = [self lookup:[sym getName] Scope:scope ];
if ( np == nil ) {
@@ -309,7 +309,7 @@ static NSInteger itIndex;
#ifdef USERDOC
/*
*  RemoveSym  search hashed list for entry
- *  NSInteger RemoveSym( ANTLRHashMap *self, char *s );
+ *  NSInteger RemoveSym( HashMap *self, char *s );
*
*     Inputs:  char     *s          string to find
*
@@ -320,7 +320,7 @@ static NSInteger itIndex;
#endif
-(NSInteger)RemoveSym:(NSString *)s
{
-    ANTLRMapElement *np, *tmp;
+    MapElement *np, *tmp;
NSInteger idx;

idx = [self hash:s];
@@ -335,7 +335,7 @@ static NSInteger itIndex;
return( FAILURE );                    /*   not found      */
}

--(void)delete_chain:(ANTLRMapElement *)np
+-(void)delete_chain:(MapElement *)np
{
if ( [np getfNext] != nil )
[self delete_chain:[np getfNext]];
@@ -346,11 +346,11 @@ static NSInteger itIndex;
-(NSInteger)bld_symtab:(KW_TABLE *)toknams
{
NSInteger i;
-    ANTLRMapElement *np;
+    MapElement *np;

for( i = 0; *(toknams[i].name) != '\0'; i++ ) {
// install symbol in ptrBuffer
-        np = [ANTLRMapElement newANTLRMapElement:[NSString stringWithFormat:@"%s", toknams[i].name]];
+        np = [MapElement newMapElement:[NSString stringWithFormat:@"%s", toknams[i].name]];
//        np->fType = toknams[i].toknum;
[self install:np Scope:0];
}
@@ -358,17 +358,17 @@ static NSInteger itIndex;
}
#endif

--(ANTLRMapElement *)getptrBufferEntry:(NSInteger)idx
+-(MapElement *)getptrBufferEntry:(NSInteger)idx
{
return( ptrBuffer[idx] );
}

--(ANTLRMapElement **)getptrBuffer
+-(MapElement **)getptrBuffer
{
return( ptrBuffer );
}

--(void)setptrBuffer:(ANTLRMapElement *)np Index:(NSInteger)idx
+-(void)setptrBuffer:(MapElement *)np Index:(NSInteger)idx
{
if ( idx < BuffSize ) {
[np retain];
@@ -386,7 +386,7 @@ static NSInteger itIndex;
Scope = i;
}

-- (ANTLRMapElement *)getTType:(NSString *)name
+- (MapElement *)getTType:(NSString *)name
{
return [self lookup:name Scope:0];
}
@@ -394,9 +394,9 @@ static NSInteger itIndex;
/*
* works only for maplist indexed not by name but by TokenNumber
*/
-- (ANTLRMapElement *)getNameInList:(NSInteger)ttype
+- (MapElement *)getNameInList:(NSInteger)ttype
{
-    ANTLRMapElement *np;
+    MapElement *np;
NSInteger aTType;

aTType = ttype % BuffSize;
@@ -408,17 +408,17 @@ static NSInteger itIndex;
return( nil );              /*   not found      */
}

-- (ANTLRLinkBase *)getName:(NSString *)name
+- (LinkBase *)getName:(NSString *)name
{
return [self lookup:name Scope:0]; /*  nil if not found      */
}

- (void)putNode:(NSString *)name TokenType:(NSInteger)ttype
{
-    ANTLRMapElement *np;
+    MapElement *np;

// install symbol in ptrBuffer
-    np = [ANTLRMapElement newANTLRMapElementWithName:[NSString stringWithString:name] Type:ttype];
+    np = [MapElement newMapElementWithName:[NSString stringWithString:name] Type:ttype];
//        np->fType = toknams[i].toknum;
[self install:np Scope:0];
}
@@ -482,11 +482,11 @@ static NSInteger itIndex;

- (void)putName:(NSString *)name Node:(id)aNode
{
-    ANTLRMapElement *np;
+    MapElement *np;

np = [self lookup:name Scope:0 ];
if ( np == nil ) {
-        np = [ANTLRMapElement newANTLRMapElementWithName:name Node:aNode];
+        np = [MapElement newMapElementWithName:name Node:aNode];
if ( ptrBuffer[LastHash] )
[ptrBuffer[LastHash] release];
[np retain];
@@ -513,7 +513,7 @@ static NSInteger itIndex;
return NO;
}

-- (ANTLRMapElement *)nextObject
+- (MapElement *)nextObject
{
if (self && itIndex < BuffSize-1) {
return ptrBuffer[itIndex];
diff --git a/runtime/ObjC/Framework/HashRule.h b/runtime/ObjC/Framework/HashRule.h
index 75ef581..de45f65 100644
--- a/runtime/ObjC/Framework/HashRule.h
+++ b/runtime/ObjC/Framework/HashRule.h
@@ -1,5 +1,5 @@
//
-//  ANTLRHashRule.h
+//  HashRule.h
//  ANTLR
//
// Copyright (c) 2010 Alan Condit
@@ -28,23 +28,23 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRRuleMemo.h"
-#import "ANTLRPtrBuffer.h"
+#import "RuleMemo.h"
+#import "PtrBuffer.h"

#define GLOBAL_SCOPE       0
#define LOCAL_SCOPE        1
#define HASHSIZE         101
#define HBUFSIZE      0x2000

-@interface ANTLRHashRule : ANTLRPtrBuffer {
+@interface HashRule : PtrBuffer {
//    TStringPool *fPool;
NSInteger LastHash;
NSInteger mode;
}

// Contruction/Destruction
-+ (id)newANTLRHashRule;
-+ (id)newANTLRHashRuleWithLen:(NSInteger)aBuffSize;
++ (id)newHashRule;
++ (id)newHashRuleWithLen:(NSInteger)aBuffSize;
- (id)init;
- (id)initWithLen:(NSInteger)aBuffSize;
- (void)dealloc;
@@ -54,16 +54,16 @@
- (NSInteger)size;

// Instance Methods
-- (void)deleteANTLRHashRule:(ANTLRRuleMemo *)np;
-- (void)delete_chain:(ANTLRRuleMemo *)np;
-- (ANTLRRuleMemo **)getPtrBuffer;
-- (void)setPtrBuffer:(ANTLRRuleMemo **)np;
+- (void)deleteHashRule:(RuleMemo *)np;
+- (void)delete_chain:(RuleMemo *)np;
+- (RuleMemo **)getPtrBuffer;
+- (void)setPtrBuffer:(RuleMemo **)np;
- (NSNumber *)getRuleMemoStopIndex:(NSInteger)aStartIndex;
- (void)putRuleMemoAtStartIndex:(NSInteger)aStartIndex StopIndex:(NSInteger)aStopIndex;
- (NSInteger)getMode;
- (void)setMode:(NSInteger)aMode;
-- (void) insertObject:(ANTLRRuleMemo *)aRule atIndex:(NSInteger)Index;
-- (ANTLRRuleMemo *) objectAtIndex:(NSInteger)Index;
+- (void) insertObject:(RuleMemo *)aRule atIndex:(NSInteger)Index;
+- (RuleMemo *) objectAtIndex:(NSInteger)Index;

@property (getter=getLastHash, setter=setLastHash:) NSInteger LastHash;
@property (getter=getMode,setter=setMode:) NSInteger mode;
diff --git a/runtime/ObjC/Framework/HashRule.m b/runtime/ObjC/Framework/HashRule.m
index 3bca78f..ee75168 100644
--- a/runtime/ObjC/Framework/HashRule.m
+++ b/runtime/ObjC/Framework/HashRule.m
@@ -1,5 +1,5 @@
//
-//  ANTLRHashRule.m
+//  HashRule.m
//  ANTLR
//
// Copyright (c) 2010 Alan Condit
@@ -31,23 +31,23 @@
#define FAILURE (-1)
#define ANTLR_MEMO_RULE_UNKNOWN -1

-#import "ANTLRHashRule.h"
+#import "HashRule.h"

/*
- * Start of ANTLRHashRule
+ * Start of HashRule
*/
-@implementation ANTLRHashRule
+@implementation HashRule

@synthesize LastHash;

-+(id)newANTLRHashRule
++(id)newHashRule
{
-    return [[ANTLRHashRule alloc] init];
+    return [[HashRule alloc] init];
}

-+(id)newANTLRHashRuleWithLen:(NSInteger)aBuffSize
++(id)newHashRuleWithLen:(NSInteger)aBuffSize
{
-    return [[ANTLRHashRule alloc] initWithLen:aBuffSize];
+    return [[HashRule alloc] initWithLen:aBuffSize];
}

-(id)init
@@ -70,9 +70,9 @@
-(void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRHashRule" );
+    NSLog( @"called dealloc in HashRule" );
#endif
-    ANTLRRuleMemo *tmp, *rtmp;
+    RuleMemo *tmp, *rtmp;
int Index;

if ( self.fNext != nil ) {
@@ -80,8 +80,8 @@
tmp = ptrBuffer[Index];
while ( tmp && tmp != ptrBuffer[Index] ) {
rtmp = tmp;
-                if ([tmp isKindOfClass:[ANTLRLinkBase class]])
-                    tmp = (ANTLRRuleMemo *)tmp.fNext;
+                if ([tmp isKindOfClass:[LinkBase class]])
+                    tmp = (RuleMemo *)tmp.fNext;
else
tmp = nil;
[rtmp dealloc];
@@ -121,9 +121,9 @@
}


--(void)deleteANTLRHashRule:(ANTLRRuleMemo *)np
+-(void)deleteHashRule:(RuleMemo *)np
{
-    ANTLRRuleMemo *tmp, *rtmp;
+    RuleMemo *tmp, *rtmp;
int Index;

if ( self.fNext != nil ) {
@@ -131,8 +131,8 @@
tmp = ptrBuffer[Index];
while ( tmp && tmp != ptrBuffer[Index ] ) {
rtmp = tmp;
-                if ([tmp isKindOfClass:[ANTLRLinkBase class]])
-                    tmp = (ANTLRRuleMemo *)tmp.fNext;
+                if ([tmp isKindOfClass:[LinkBase class]])
+                    tmp = (RuleMemo *)tmp.fNext;
else
tmp = nil;
[rtmp release];
@@ -141,26 +141,26 @@
}
}

--(void)delete_chain:(ANTLRRuleMemo *)np
+-(void)delete_chain:(RuleMemo *)np
{
if ( np.fNext != nil )
[self delete_chain:np.fNext];
[np dealloc];
}

--(ANTLRRuleMemo **)getPtrBuffer
+-(RuleMemo **)getPtrBuffer
{
return( ptrBuffer );
}

--(void)setPtrBuffer:(ANTLRRuleMemo **)np
+-(void)setPtrBuffer:(RuleMemo **)np
{
ptrBuffer = np;
}

- (NSNumber *)getRuleMemoStopIndex:(NSInteger)aStartIndex
{
-    ANTLRRuleMemo *aRule;
+    RuleMemo *aRule;
NSNumber *stopIndex;
NSInteger anIndex;

@@ -172,7 +172,7 @@
return stopIndex;
}

-- (void)putRuleMemo:(ANTLRRuleMemo *)aRule AtStartIndex:(NSInteger)aStartIndex
+- (void)putRuleMemo:(RuleMemo *)aRule AtStartIndex:(NSInteger)aStartIndex
{
NSInteger anIndex;

@@ -194,14 +194,14 @@

- (void)putRuleMemoAtStartIndex:(NSInteger)aStartIndex StopIndex:(NSInteger)aStopIndex
{
-    ANTLRRuleMemo *aRule, *newRule;
+    RuleMemo *aRule, *newRule;
NSInteger anIndex;
NSInteger aMatchIndex;

anIndex = (aStartIndex >= BuffSize) ? aStartIndex % BuffSize : aStartIndex;
aRule = ptrBuffer[anIndex];
if ( aRule == nil ) {
-        aRule = [ANTLRRuleMemo newANTLRRuleMemoWithStartIndex:[NSNumber numberWithInteger:aStartIndex]
+        aRule = [RuleMemo newRuleMemoWithStartIndex:[NSNumber numberWithInteger:aStartIndex]
StopIndex:[NSNumber numberWithInteger:aStopIndex]];
[aRule retain];
ptrBuffer[anIndex] = aRule;
@@ -217,9 +217,9 @@
return;
}
while (aRule.fNext != nil) {
-            aMatchIndex = [((ANTLRRuleMemo *)aRule.fNext).startIndex integerValue];
+            aMatchIndex = [((RuleMemo *)aRule.fNext).startIndex integerValue];
if ( aStartIndex > aMatchIndex ) {
-                newRule = [ANTLRRuleMemo newANTLRRuleMemoWithStartIndex:[NSNumber numberWithInteger:aStartIndex]
+                newRule = [RuleMemo newRuleMemoWithStartIndex:[NSNumber numberWithInteger:aStartIndex]
StopIndex:[NSNumber numberWithInteger:aStopIndex]];
[newRule retain];
newRule.fNext = aRule.fNext;
@@ -255,7 +255,7 @@
mode = aMode;
}

-- (void) insertObject:(ANTLRRuleMemo *)aRule atIndex:(NSInteger)anIndex
+- (void) insertObject:(RuleMemo *)aRule atIndex:(NSInteger)anIndex
{
NSInteger Index;

@@ -267,7 +267,7 @@
ptrBuffer[Index] = aRule;
}

-- (ANTLRRuleMemo *)objectAtIndex:(NSInteger)anIndex
+- (RuleMemo *)objectAtIndex:(NSInteger)anIndex
{
NSInteger anIdx;

diff --git a/runtime/ObjC/Framework/IntArray.h b/runtime/ObjC/Framework/IntArray.h
index 9182377..21461ea 100644
--- a/runtime/ObjC/Framework/IntArray.h
+++ b/runtime/ObjC/Framework/IntArray.h
@@ -1,5 +1,5 @@
//
-//  ANTLRIntArray.h
+//  IntArray.h
//  ANTLR
//
// Copyright (c) 2010 Ian Michell 2010 Alan Condit
@@ -31,7 +31,7 @@

#define ANTLR_INT_ARRAY_INITIAL_SIZE 10

-@interface ANTLRIntArray : NSObject
+@interface IntArray : NSObject
{
NSUInteger BuffSize;
NSUInteger count;
@@ -41,8 +41,8 @@
BOOL SPARSE;
}

-+ (ANTLRIntArray *)newArray;
-+ (ANTLRIntArray *)newArrayWithLen:(NSUInteger)aLen;
++ (IntArray *)newArray;
++ (IntArray *)newArrayWithLen:(NSUInteger)aLen;

- (id) init;
- (id) initWithLen:(NSUInteger)aLen;
diff --git a/runtime/ObjC/Framework/IntArray.m b/runtime/ObjC/Framework/IntArray.m
index f715372..e971b91 100644
--- a/runtime/ObjC/Framework/IntArray.m
+++ b/runtime/ObjC/Framework/IntArray.m
@@ -1,5 +1,5 @@
//
-//  ANTLRIntArray.m
+//  IntArray.m
//  ANTLR
//
//  Created by Ian Michell on 27/04/2010.
@@ -28,10 +28,10 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRIntArray.h"
-#import "ANTLRRuntimeException.h"
+#import "IntArray.h"
+#import "RuntimeException.h"

-@implementation ANTLRIntArray
+@implementation IntArray

@synthesize BuffSize;
@synthesize count;
@@ -40,14 +40,14 @@
@synthesize intBuffer;
@synthesize SPARSE;

-+ (ANTLRIntArray *)newArray
++ (IntArray *)newArray
{
-    return [[ANTLRIntArray alloc] init];
+    return [[IntArray alloc] init];
}

-+ (ANTLRIntArray *)newArrayWithLen:(NSUInteger)aLen
++ (IntArray *)newArrayWithLen:(NSUInteger)aLen
{
-    return [[ANTLRIntArray alloc] initWithLen:aLen];
+    return [[IntArray alloc] initWithLen:aLen];
}

- (id)init
@@ -81,7 +81,7 @@
- (void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRIntArray" );
+    NSLog( @"called dealloc in IntArray" );
#endif
if ( buffer ) [buffer release];
[super dealloc];
@@ -89,7 +89,7 @@

- (id)copyWithZone:(NSZone *)aZone
{
-    ANTLRIntArray *copy;
+    IntArray *copy;

copy = [[[self class] alloc] initWithLen:BuffSize];
copy.idx = self.idx;
diff --git a/runtime/ObjC/Framework/IntStream.h b/runtime/ObjC/Framework/IntStream.h
index e37f907..08444a7 100644
--- a/runtime/ObjC/Framework/IntStream.h
+++ b/runtime/ObjC/Framework/IntStream.h
@@ -28,11 +28,11 @@
#define DEBUG_DEALLOC
#endif

-@protocol ANTLRIntStream < NSObject, NSCopying >
+@protocol IntStream < NSObject, NSCopying >

- (void) consume;

-// Get unichar at current input pointer + i ahead where i=1 is next character as int for including ANTLRCharStreamEOF (-1) in the data range
+// Get unichar at current input pointer + i ahead where i=1 is next character as int for including CharStreamEOF (-1) in the data range
- (NSInteger) LA:(NSInteger) i;

// Tell the stream to start buffering if it hasn't already.  Return
@@ -48,10 +48,6 @@

- (NSInteger) index;

-- (NSUInteger) line;
-
-- (NSUInteger) charPositionInLine;
-
// Reset the stream so that next call to index would return marker.
// The marker will usually be -index but it doesn't have to be.  It's
// just a marker to indicate what state the stream was in.  This is
diff --git a/runtime/ObjC/Framework/Lexer.h b/runtime/ObjC/Framework/Lexer.h
index cd985cc..d4f4241 100644
--- a/runtime/ObjC/Framework/Lexer.h
+++ b/runtime/ObjC/Framework/Lexer.h
@@ -26,45 +26,45 @@


#import <Cocoa/Cocoa.h>
-#import "ANTLRTokenSource.h"
-#import "ANTLRBaseRecognizer.h"
-#import "ANTLRRecognizerSharedState.h"
-#import "ANTLRCharStream.h"
-#import "ANTLRToken.h"
-#import "ANTLRCommonToken.h"
-#import "ANTLRRecognitionException.h"
-#import "ANTLRMismatchedTokenException.h"
-#import "ANTLRMismatchedRangeException.h"
+#import "TokenSource.h"
+#import "BaseRecognizer.h"
+#import "RecognizerSharedState.h"
+#import "CharStream.h"
+#import "Token.h"
+#import "CommonToken.h"
+#import "RecognitionException.h"
+#import "MismatchedTokenException.h"
+#import "MismatchedRangeException.h"

-@interface ANTLRLexer : ANTLRBaseRecognizer <ANTLRTokenSource> {
-	id<ANTLRCharStream> input;      ///< The character stream we pull tokens out of.
+@interface Lexer : BaseRecognizer <TokenSource> {
+	id<CharStream> input;      ///< The character stream we pull tokens out of.
NSUInteger ruleNestingLevel;
}

-@property (retain, getter=input, setter=setInput:) id<ANTLRCharStream> input;
+@property (retain, getter=input, setter=setInput:) id<CharStream> input;
@property (getter=getRuleNestingLevel, setter=setRuleNestingLevel:) NSUInteger ruleNestingLevel;

#pragma mark Initializer
-- (id) initWithCharStream:(id<ANTLRCharStream>) anInput;
-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput State:(ANTLRRecognizerSharedState *)state;
+- (id) initWithCharStream:(id<CharStream>) anInput;
+- (id) initWithCharStream:(id<CharStream>)anInput State:(RecognizerSharedState *)state;

- (id) copyWithZone:(NSZone *)zone;

- (void) reset;

-// - (ANTLRRecognizerSharedState *) state;
+// - (RecognizerSharedState *) state;

#pragma mark Tokens
-- (id<ANTLRToken>)getToken;
-- (void) setToken: (id<ANTLRToken>) aToken;
-- (id<ANTLRToken>) nextToken;
+- (id<Token>)getToken;
+- (void) setToken: (id<Token>) aToken;
+- (id<Token>) nextToken;
- (void) mTokens;		// abstract, defined in generated sources
- (void) skip;
-- (id<ANTLRCharStream>) input;
-- (void) setInput:(id<ANTLRCharStream>)aCharStream;
+- (id<CharStream>) input;
+- (void) setInput:(id<CharStream>)aCharStream;

- (void) emit;
-- (void) emit:(id<ANTLRToken>)aToken;
+- (void) emit:(id<Token>)aToken;

#pragma mark Matching
- (void) matchString:(NSString *)aString;
@@ -80,10 +80,10 @@
- (void) setText:(NSString *) theText;

// error handling
-- (void) reportError:(ANTLRRecognitionException *)e;
-- (NSString *)getErrorMessage:(ANTLRRecognitionException *)e TokenNames:(AMutableArray *)tokenNames;
+- (void) reportError:(RecognitionException *)e;
+- (NSString *)getErrorMessage:(RecognitionException *)e TokenNames:(AMutableArray *)tokenNames;
- (NSString *)getCharErrorDisplay:(NSInteger)c;
-- (void) recover:(ANTLRRecognitionException *)e;
+- (void) recover:(RecognitionException *)e;
- (void)traceIn:(NSString *)ruleName Index:(NSInteger)ruleIndex;
- (void)traceOut:(NSString *)ruleName Index:(NSInteger)ruleIndex;

diff --git a/runtime/ObjC/Framework/Lexer.m b/runtime/ObjC/Framework/Lexer.m
index de1a0a3..2ae9bd2 100644
--- a/runtime/ObjC/Framework/Lexer.m
+++ b/runtime/ObjC/Framework/Lexer.m
@@ -25,33 +25,33 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <ANTLR/antlr.h>
-#import "ANTLRLexer.h"
+#import "Lexer.h"

-@implementation ANTLRLexer
+@implementation Lexer

@synthesize input;
@synthesize ruleNestingLevel;
#pragma mark Initializer

-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
+- (id) initWithCharStream:(id<CharStream>)anInput
{
-	self = [super initWithState:[[ANTLRRecognizerSharedState alloc] init]];
+	self = [super initWithState:[[RecognizerSharedState alloc] init]];
if ( self != nil ) {
input = [anInput retain];
if (state.token != nil)
-            [((ANTLRCommonToken *)state.token) setInput:anInput];
+            [((CommonToken *)state.token) setInput:anInput];
ruleNestingLevel = 0;
}
return self;
}

-- (id) initWithCharStream:(id<ANTLRCharStream>)anInput State:(ANTLRRecognizerSharedState *)aState
+- (id) initWithCharStream:(id<CharStream>)anInput State:(RecognizerSharedState *)aState
{
self = [super initWithState:aState];
if ( self != nil ) {
input = [anInput retain];
if (state.token != nil)
-            [((ANTLRCommonToken *)state.token) setInput:anInput];
+            [((CommonToken *)state.token) setInput:anInput];
ruleNestingLevel = 0;
}
return self;
@@ -65,7 +65,7 @@

- (id) copyWithZone:(NSZone *)aZone
{
-    ANTLRLexer *copy;
+    Lexer *copy;

copy = [[[self class] allocWithZone:aZone] init];
//    copy = [super copyWithZone:aZone]; // allocation occurs here
@@ -86,8 +86,8 @@
return; // no shared state work to do
}
state.token = nil;
-    state.type = ANTLRCommonToken.INVALID_TOKEN_TYPE;
-    state.channel = ANTLRCommonToken.DEFAULT_CHANNEL;
+    state.type = CommonToken.INVALID_TOKEN_TYPE;
+    state.channel = CommonToken.DEFAULT_CHANNEL;
state.tokenStartCharIndex = -1;
state.tokenStartCharPositionInLine = -1;
state.tokenStartLine = -1;
@@ -97,12 +97,12 @@
// token stuff
#pragma mark Tokens

-- (id<ANTLRToken>)getToken
+- (id<Token>)getToken
{
return [state getToken];
}

-- (void) setToken: (id<ANTLRToken>) aToken
+- (void) setToken: (id<Token>) aToken
{
if (state.token != aToken) {
[aToken retain];
@@ -112,25 +112,25 @@


// this method may be overridden in the generated lexer if we generate a filtering lexer.
-- (id<ANTLRToken>) nextToken
+- (id<Token>) nextToken
{
while (YES) {
[self setToken:nil];
-        state.channel = ANTLRCommonToken.DEFAULT_CHANNEL;
+        state.channel = CommonToken.DEFAULT_CHANNEL;
state.tokenStartCharIndex = input.index;
-        state.tokenStartCharPositionInLine = input.charPositionInLine;
-        state.tokenStartLine = input.line;
+        state.tokenStartCharPositionInLine = input.getCharPositionInLine;
+        state.tokenStartLine = input.getLine;
state.text = nil;

// [self setText:[self text]];
-		if ([input LA:1] == ANTLRCharStreamEOF) {
-            ANTLRCommonToken *eof = [ANTLRCommonToken newToken:input
-                                                          Type:ANTLRTokenTypeEOF
-                                                       Channel:ANTLRCommonToken.DEFAULT_CHANNEL
+		if ([input LA:1] == CharStreamEOF) {
+            CommonToken *eof = [CommonToken newToken:input
+                                                          Type:TokenTypeEOF
+                                                       Channel:CommonToken.DEFAULT_CHANNEL
Start:input.index
Stop:input.index];
-            [eof setLine:input.line];
-            [eof setCharPositionInLine:input.charPositionInLine];
+            [eof setLine:input.getLine];
+            [eof setCharPositionInLine:input.getCharPositionInLine];
return eof;
}
@try {
@@ -139,16 +139,16 @@
// [[self class] instancesRespondToSelector:aMethod];
if ( state.token == nil)
[self emit];
-            else if ( state.token == [ANTLRCommonToken skipToken] ) {
+            else if ( state.token == [CommonToken skipToken] ) {
continue;
}
return state.token;
}
-		@catch (ANTLRNoViableAltException *nva) {
+		@catch (NoViableAltException *nva) {
[self reportError:nva];
[self recover:nva];
}
-		@catch (ANTLRRecognitionException *e) {
+		@catch (RecognitionException *e) {
[self reportError:e];
}
}
@@ -161,15 +161,15 @@

- (void) skip
{
-    state.token = [ANTLRCommonToken skipToken];
+    state.token = [CommonToken skipToken];
}

-- (id<ANTLRCharStream>) input
+- (id<CharStream>) input
{
return input;
}

-- (void) setInput:(id<ANTLRCharStream>) anInput
+- (void) setInput:(id<CharStream>) anInput
{
if ( anInput != input ) {
if ( input ) [input release];
@@ -185,7 +185,7 @@
*  nextToken (to push tokens into a list and pull from that list rather
*  than a single variable as this implementation does).
*/
-- (void) emit:(id<ANTLRToken>)aToken
+- (void) emit:(id<Token>)aToken
{
state.token = aToken;
}
@@ -201,7 +201,7 @@
*/
- (void) emit
{
-	id<ANTLRToken> aToken = [ANTLRCommonToken newToken:input
+	id<Token> aToken = [CommonToken newToken:input
Type:state.type
Channel:state.channel
Start:state.tokenStartCharIndex
@@ -228,7 +228,7 @@
state.failed = YES;
return;
}
-			ANTLRMismatchedTokenException *mte = [ANTLRMismatchedTokenException newExceptionChar:[aString characterAtIndex:i] Stream:input];
+			MismatchedTokenException *mte = [MismatchedTokenException newExceptionChar:[aString characterAtIndex:i] Stream:input];
mte.c = c;
[self recover:mte];
@throw mte;
@@ -255,7 +255,7 @@
state.failed = YES;
return;
}
-		ANTLRMismatchedTokenException  *mte = [ANTLRMismatchedTokenException newExceptionChar:aChar Stream:input];
+		MismatchedTokenException  *mte = [MismatchedTokenException newExceptionChar:aChar Stream:input];
mte.c = charLA;
[self recover:mte];
@throw mte;
@@ -272,7 +272,7 @@
state.failed = YES;
return;
}
-		ANTLRMismatchedRangeException  *mre = [ANTLRMismatchedRangeException
+		MismatchedRangeException  *mre = [MismatchedRangeException
newException:NSMakeRange((NSUInteger)fromChar,(NSUInteger)toChar)
stream:input];
mre.c = charLA;
@@ -288,12 +288,12 @@

- (NSUInteger) line
{
-	return input.line;
+	return input.getLine;
}

- (NSUInteger) charPositionInLine
{
-	return input.charPositionInLine;
+	return input.getCharPositionInLine;
}

- (NSInteger) index
@@ -315,7 +315,7 @@
}

// error handling
-- (void) reportError:(ANTLRRecognitionException *)e
+- (void) reportError:(RecognitionException *)e
{
/** TODO: not thought about recovery in lexer yet.
*
@@ -331,43 +331,43 @@
[self displayRecognitionError:[self getTokenNames] Exception:e];
}

-- (NSString *)getErrorMessage:(ANTLRRecognitionException *)e TokenNames:(AMutableArray *)tokenNames
+- (NSString *)getErrorMessage:(RecognitionException *)e TokenNames:(AMutableArray *)tokenNames
{
-/*    NSString *msg = [NSString stringWithFormat:@"Gotta fix getErrorMessage in ANTLRLexer.m--%@\n",
+/*    NSString *msg = [NSString stringWithFormat:@"Gotta fix getErrorMessage in Lexer.m--%@\n",
e.name];
*/
NSString *msg = nil;
-    if ( [e isKindOfClass:[ANTLRMismatchedTokenException class]] ) {
-        ANTLRMismatchedTokenException *mte = (ANTLRMismatchedTokenException *)e;
+    if ( [e isKindOfClass:[MismatchedTokenException class]] ) {
+        MismatchedTokenException *mte = (MismatchedTokenException *)e;
msg = [NSString stringWithFormat:@"mismatched character \"%@\" expecting \"%@\"",
[self getCharErrorDisplay:mte.c], [self getCharErrorDisplay:mte.expecting]];
}
-    else if ( [e isKindOfClass:[ANTLRNoViableAltException class]] ) {
-        ANTLRNoViableAltException *nvae = (ANTLRNoViableAltException *)e;
+    else if ( [e isKindOfClass:[NoViableAltException class]] ) {
+        NoViableAltException *nvae = (NoViableAltException *)e;
// for development, can add "decision=<<"+nvae.grammarDecisionDescription+">>"
// and "(decision="+nvae.decisionNumber+") and
// "state "+nvae.stateNumber
msg = [NSString stringWithFormat:@"no viable alternative at character \"%@\"",
[self getCharErrorDisplay:(nvae.c)]];
}
-    else if ( [e isKindOfClass:[ANTLREarlyExitException class]] ) {
-        ANTLREarlyExitException *eee = (ANTLREarlyExitException *)e;
+    else if ( [e isKindOfClass:[EarlyExitException class]] ) {
+        EarlyExitException *eee = (EarlyExitException *)e;
// for development, can add "(decision="+eee.decisionNumber+")"
msg = [NSString stringWithFormat:@"required (...)+ loop did not match anything at character \"%@\"",
[self getCharErrorDisplay:(eee.c)]];
}
-    else if ( [e isKindOfClass:[ANTLRMismatchedNotSetException class]] ) {
-        ANTLRMismatchedNotSetException *mse = (ANTLRMismatchedNotSetException *)e;
+    else if ( [e isKindOfClass:[MismatchedNotSetException class]] ) {
+        MismatchedNotSetException *mse = (MismatchedNotSetException *)e;
msg = [NSString stringWithFormat:@"mismatched character \"%@\"  expecting set \"%@\"",
[self getCharErrorDisplay:(mse.c)], mse.expecting];
}
-    else if ( [e isKindOfClass:[ANTLRMismatchedSetException class]] ) {
-        ANTLRMismatchedSetException *mse = (ANTLRMismatchedSetException *)e;
+    else if ( [e isKindOfClass:[MismatchedSetException class]] ) {
+        MismatchedSetException *mse = (MismatchedSetException *)e;
msg = [NSString stringWithFormat:@"mismatched character \"%@\" expecting set \"%@\"",
[self getCharErrorDisplay:(mse.c)], mse.expecting];
}
-    else if ( [e isKindOfClass:[ANTLRMismatchedRangeException class]] ) {
-        ANTLRMismatchedRangeException *mre = (ANTLRMismatchedRangeException *)e;
+    else if ( [e isKindOfClass:[MismatchedRangeException class]] ) {
+        MismatchedRangeException *mre = (MismatchedRangeException *)e;
msg = [NSString stringWithFormat:@"mismatched character \"%@\" \"%@..%@\"",
[self getCharErrorDisplay:(mre.c)], [self getCharErrorDisplay:(mre.range.location)],
[self getCharErrorDisplay:(mre.range.location+mre.range.length-1)]];
@@ -382,7 +382,7 @@
{
NSString *s;
switch ( c ) {
-        case ANTLRTokenTypeEOF :
+        case TokenTypeEOF :
s = @"<EOF>";
break;
case '\n' :
@@ -406,7 +406,7 @@
*  it all works out.  You can instead use the rule invocation stack
*  to do sophisticated error recovery if you are in a fragment rule.
*/
-- (void)recover:(ANTLRRecognitionException *)re
+- (void)recover:(RecognitionException *)re
{
//System.out.println("consuming char "+(char)input.LA(1)+" during recovery");
//re.printStackTrace();
@@ -415,13 +415,13 @@

- (void)traceIn:(NSString *)ruleName Index:(NSInteger)ruleIndex
{
-    NSString *inputSymbol = [NSString stringWithFormat:@"%c line=%d:%d\n", [input LT:1], input.line, input.charPositionInLine];
+    NSString *inputSymbol = [NSString stringWithFormat:@"%c line=%d:%d\n", [input LT:1], input.getLine, input.getCharPositionInLine];
[super traceIn:ruleName Index:ruleIndex Object:inputSymbol];
}

- (void)traceOut:(NSString *)ruleName Index:(NSInteger)ruleIndex
{
-    NSString *inputSymbol = [NSString stringWithFormat:@"%c line=%d:%d\n", [input LT:1], input.line, input.charPositionInLine];
+    NSString *inputSymbol = [NSString stringWithFormat:@"%c line=%d:%d\n", [input LT:1], input.getLine, input.getCharPositionInLine];
[super traceOut:ruleName Index:ruleIndex Object:inputSymbol];
}

diff --git a/runtime/ObjC/Framework/LexerRuleReturnScope.h b/runtime/ObjC/Framework/LexerRuleReturnScope.h
index 27b8abc..e5dda07 100644
--- a/runtime/ObjC/Framework/LexerRuleReturnScope.h
+++ b/runtime/ObjC/Framework/LexerRuleReturnScope.h
@@ -26,7 +26,7 @@

#import <Cocoa/Cocoa.h>

-@interface ANTLRLexerRuleReturnScope : NSObject {
+@interface LexerRuleReturnScope : NSObject {
NSInteger start;
NSInteger stopToken;
}
diff --git a/runtime/ObjC/Framework/LexerRuleReturnScope.m b/runtime/ObjC/Framework/LexerRuleReturnScope.m
index ac69380..9bb4226 100644
--- a/runtime/ObjC/Framework/LexerRuleReturnScope.m
+++ b/runtime/ObjC/Framework/LexerRuleReturnScope.m
@@ -24,10 +24,10 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRLexerRuleReturnScope.h"
+#import "LexerRuleReturnScope.h"


-@implementation ANTLRLexerRuleReturnScope
+@implementation LexerRuleReturnScope

@synthesize start;

diff --git a/runtime/ObjC/Framework/LexerState.h b/runtime/ObjC/Framework/LexerState.h
index 7132a48..b6a6057 100644
--- a/runtime/ObjC/Framework/LexerState.h
+++ b/runtime/ObjC/Framework/LexerState.h
@@ -25,16 +25,16 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRToken.h"
-#import "ANTLRRecognizerSharedState.h"
+#import "Token.h"
+#import "RecognizerSharedState.h"

-@interface ANTLRLexerState : ANTLRRecognizerSharedState {
+@interface LexerState : RecognizerSharedState {
}

- (void) reset;

-- (id<ANTLRToken>) getToken;
-- (void) setToken:(id<ANTLRToken>) theToken;
+- (id<Token>) getToken;
+- (void) setToken:(id<Token>) theToken;

- (NSUInteger) getTokenType;
- (void) setTokenType:(unsigned int) theTokenType;
diff --git a/runtime/ObjC/Framework/LexerState.m b/runtime/ObjC/Framework/LexerState.m
index 88284b7..84ac36f 100644
--- a/runtime/ObjC/Framework/LexerState.m
+++ b/runtime/ObjC/Framework/LexerState.m
@@ -24,10 +24,10 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRLexerState.h"
+#import "LexerState.h"


-@implementation ANTLRLexerState
+@implementation LexerState

- (id) init
{
@@ -52,19 +52,19 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRLexerState" );
+    NSLog( @"called dealloc in LexerState" );
#endif
[self setText:nil];
[self setToken:nil];
[super dealloc];
}

-- (id<ANTLRToken>) getToken
+- (id<Token>) getToken
{
return token;
}

-- (void) setToken:(id<ANTLRToken>) theToken
+- (void) setToken:(id<Token>) theToken
{
if (theToken != token) {
if ( token ) [token release];
diff --git a/runtime/ObjC/Framework/LinkBase.h b/runtime/ObjC/Framework/LinkBase.h
index f4c337e..e25fcc1 100644
--- a/runtime/ObjC/Framework/LinkBase.h
+++ b/runtime/ObjC/Framework/LinkBase.h
@@ -1,5 +1,5 @@
//
-//  ANTLRLinkBase.h
+//  LinkBase.h
//  ANTLR
//
//  Created by Alan Condit on 6/14/10.
@@ -35,46 +35,46 @@
#define DEBUG_DEALLOC
#endif

-@protocol ANTLRLinkList <NSObject>
+@protocol LinkList <NSObject>

-+ (id<ANTLRLinkList>)newANTLRLinkBase;
-+ (id<ANTLRLinkList>)newANTLRLinkBase:(id<ANTLRLinkList>)np Prev:(id<ANTLRLinkList>)pp;
++ (id<LinkList>)newLinkBase;
++ (id<LinkList>)newLinkBase:(id<LinkList>)np Prev:(id<LinkList>)pp;

- (void) dealloc;

-- (id<ANTLRLinkList>) append:(id<ANTLRLinkList>)node;
-- (id<ANTLRLinkList>) insert:(id<ANTLRLinkList>)node;
+- (id<LinkList>) append:(id<LinkList>)node;
+- (id<LinkList>) insert:(id<LinkList>)node;

-- (id<ANTLRLinkList>) getfNext;
-- (void) setFNext:(id<ANTLRLinkList>)np;
-- (id<ANTLRLinkList>)getfPrev;
-- (void) setFPrev:(id<ANTLRLinkList>)pp;
+- (id<LinkList>) getfNext;
+- (void) setFNext:(id<LinkList>)np;
+- (id<LinkList>)getfPrev;
+- (void) setFPrev:(id<LinkList>)pp;

-@property (retain) id<ANTLRLinkList> fPrev;
-@property (retain) id<ANTLRLinkList> fNext;
+@property (retain) id<LinkList> fPrev;
+@property (retain) id<LinkList> fNext;
@end

-@interface ANTLRLinkBase : NSObject <ANTLRLinkList> {
-	id<ANTLRLinkList> fPrev;
-	id<ANTLRLinkList> fNext;
+@interface LinkBase : NSObject <LinkList> {
+	id<LinkList> fPrev;
+	id<LinkList> fNext;
}

-@property (retain) id<ANTLRLinkList> fPrev;
-@property (retain) id<ANTLRLinkList> fNext;
+@property (retain) id<LinkList> fPrev;
+@property (retain) id<LinkList> fNext;

-+ (id<ANTLRLinkList>)newANTLRLinkBase;
-+ (id<ANTLRLinkList>)newANTLRLinkBase:(id<ANTLRLinkList>)np Prev:(id<ANTLRLinkList>)pp;
-- (id<ANTLRLinkList>)init;
-- (id<ANTLRLinkList>)initWithPtr:(id)np Prev:(id)pp;
++ (id<LinkList>)newLinkBase;
++ (id<LinkList>)newLinkBase:(id<LinkList>)np Prev:(id<LinkList>)pp;
+- (id<LinkList>)init;
+- (id<LinkList>)initWithPtr:(id)np Prev:(id)pp;
- (void)dealloc;

- (id) copyWithZone:(NSZone *)aZone;

-- (id<ANTLRLinkList>)append:(id<ANTLRLinkList>)node;
-- (id<ANTLRLinkList>)insert:(id<ANTLRLinkList>)node;
+- (id<LinkList>)append:(id<LinkList>)node;
+- (id<LinkList>)insert:(id<LinkList>)node;

-- (id<ANTLRLinkList>)getfNext;
-- (void)setfNext:(id<ANTLRLinkList>) np;
-- (id<ANTLRLinkList>)getfPrev;
-- (void)setfPrev:(id<ANTLRLinkList>) pp;
+- (id<LinkList>)getfNext;
+- (void)setfNext:(id<LinkList>) np;
+- (id<LinkList>)getfPrev;
+- (void)setfPrev:(id<LinkList>) pp;
@end
diff --git a/runtime/ObjC/Framework/LinkBase.m b/runtime/ObjC/Framework/LinkBase.m
index d352993..59b2099 100644
--- a/runtime/ObjC/Framework/LinkBase.m
+++ b/runtime/ObjC/Framework/LinkBase.m
@@ -1,5 +1,5 @@
//
-//  ANTLRLinkBase.m
+//  LinkBase.m
//  ANTLR
//
//  Created by Alan Condit on 6/14/10.
@@ -29,24 +29,24 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRLinkBase.h"
+#import "LinkBase.h"

-@implementation ANTLRLinkBase
+@implementation LinkBase

@synthesize fPrev;
@synthesize fNext;

-+(id<ANTLRLinkList>)newANTLRLinkBase
++(id<LinkList>)newLinkBase
{
-	return [[ANTLRLinkBase alloc] init];
+	return [[LinkBase alloc] init];
}

-+(id<ANTLRLinkList>)newANTLRLinkBase:(id<ANTLRLinkList>)np Prev:(id<ANTLRLinkList>)pp
++(id<LinkList>)newLinkBase:(id<LinkList>)np Prev:(id<LinkList>)pp
{
-	return [[ANTLRLinkBase alloc] initWithPtr:np Prev:pp];
+	return [[LinkBase alloc] initWithPtr:np Prev:pp];
}

--(id<ANTLRLinkList>)init
+-(id<LinkList>)init
{
if ((self = [super init]) != nil) {
fNext = nil;
@@ -55,7 +55,7 @@
return(self);
}

--(id<ANTLRLinkList>)initWithPtr:(id<ANTLRLinkList>)np Prev:(id<ANTLRLinkList>)pp
+-(id<LinkList>)initWithPtr:(id<LinkList>)np Prev:(id<LinkList>)pp
{
if ((self = [super init]) != nil) {
fNext = np;
@@ -67,7 +67,7 @@
-(void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRLinkBase" );
+    NSLog( @"called dealloc in LinkBase" );
#endif
if (fNext) [fNext dealloc];
if (fPrev) [fPrev dealloc];
@@ -76,7 +76,7 @@

- (id) copyWithZone:(NSZone *)aZone
{
-    ANTLRLinkBase *copy;
+    LinkBase *copy;

copy = [[self class] allocWithZone:aZone];
copy.fPrev = fPrev;
@@ -84,17 +84,17 @@
return( copy );
}

--(id<ANTLRLinkList>)append:(id<ANTLRLinkList>)node
+-(id<LinkList>)append:(id<LinkList>)node
{
-	node.fPrev = (id<ANTLRLinkList>)self;
-	node.fNext = (id<ANTLRLinkList>)self.fNext;
+	node.fPrev = (id<LinkList>)self;
+	node.fNext = (id<LinkList>)self.fNext;
if (node.fNext != nil)
node.fNext.fPrev = node;
self.fNext = node;
return( node );
}

--(id<ANTLRLinkList>)insert:(id<ANTLRLinkList>)node
+-(id<LinkList>)insert:(id<LinkList>)node
{
node.fNext = self;
node.fPrev = self.fPrev;
@@ -104,22 +104,22 @@
return( node );
}

--(id<ANTLRLinkList>)getfNext
+-(id<LinkList>)getfNext
{
return(fNext);
}

--(void)setfNext:(id<ANTLRLinkList>)np
+-(void)setfNext:(id<LinkList>)np
{
fNext = np;
}

--(id<ANTLRLinkList>)getfPrev
+-(id<LinkList>)getfPrev
{
return(fPrev);
}

--(void)setfPrev:(id<ANTLRLinkList>)pp
+-(void)setfPrev:(id<LinkList>)pp
{
fPrev = pp;
}
diff --git a/runtime/ObjC/Framework/LookaheadStream.h b/runtime/ObjC/Framework/LookaheadStream.h
index 3ec121e..6c5e3cc 100644
--- a/runtime/ObjC/Framework/LookaheadStream.h
+++ b/runtime/ObjC/Framework/LookaheadStream.h
@@ -1,5 +1,5 @@
//
-//  ANTLRLookaheadStream.h
+//  LookaheadStream.h
//  ANTLR
//
//  Created by Ian Michell on 26/04/2010.
@@ -30,11 +30,11 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRFastQueue.h"
+#import "FastQueue.h"

#define UNITIALIZED_EOF_ELEMENT_INDEX NSIntegerMax

-@interface ANTLRLookaheadStream : ANTLRFastQueue
+@interface LookaheadStream : FastQueue
{
NSInteger index;
NSInteger eofElementIndex;
diff --git a/runtime/ObjC/Framework/LookaheadStream.m b/runtime/ObjC/Framework/LookaheadStream.m
index 57e489e..a0f6314 100644
--- a/runtime/ObjC/Framework/LookaheadStream.m
+++ b/runtime/ObjC/Framework/LookaheadStream.m
@@ -1,5 +1,5 @@
//
-//  ANTLRLookaheadStream.m
+//  LookaheadStream.m
//  ANTLR
//
//  Created by Ian Michell on 26/04/2010.
@@ -29,13 +29,13 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRLookaheadStream.h"
+#import "LookaheadStream.h"
#import "ANTLRError.h"
-#import "ANTLRRecognitionException.h"
-#import "ANTLRCommonToken.h"
-#import "ANTLRRuntimeException.h"
+#import "RecognitionException.h"
+#import "CommonToken.h"
+#import "RuntimeException.h"

-@implementation ANTLRLookaheadStream
+@implementation LookaheadStream

@synthesize eof;
@synthesize index;
@@ -48,7 +48,7 @@
{
self = [super init];
if ( self != nil ) {
-        eof = [[ANTLRCommonToken eofToken] retain];
+        eof = [[CommonToken eofToken] retain];
eofElementIndex = UNITIALIZED_EOF_ELEMENT_INDEX;
markDepth = 0;
index = 0;
@@ -125,7 +125,7 @@

-(NSUInteger) count
{
-	@throw [NSException exceptionWithName:@"ANTLRUnsupportedOperationException" reason:@"Streams have no defined size" userInfo:nil];
+	@throw [NSException exceptionWithName:@"UnsupportedOperationException" reason:@"Streams have no defined size" userInfo:nil];
}

-(id) LT:(NSInteger) k
@@ -148,7 +148,7 @@
if (k == 1) {
return prevElement;
}
-	@throw [ANTLRNoSuchElementException newException:@"can't look backwards more than one token in this stream"];
+	@throw [NoSuchElementException newException:@"can't look backwards more than one token in this stream"];
}

-(id) getCurrentSymbol
diff --git a/runtime/ObjC/Framework/Map.h b/runtime/ObjC/Framework/Map.h
index 80ad486..1a482ea 100644
--- a/runtime/ObjC/Framework/Map.h
+++ b/runtime/ObjC/Framework/Map.h
@@ -1,5 +1,5 @@
//
-//  ANTLRMap.h
+//  Map.h
//  ANTLR
//
//  Created by Alan Condit on 6/9/10.
@@ -30,26 +30,26 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRPtrBuffer.h"
-#import "ANTLRMapElement.h"
+#import "PtrBuffer.h"
+#import "MapElement.h"

//#define GLOBAL_SCOPE      0
//#define LOCAL_SCOPE       1
#define HASHSIZE            101
#define HBUFSIZE            0x2000

-@interface ANTLRMap : ANTLRPtrBuffer {
-	//ANTLRMap *fNext; // found in superclass
+@interface Map : PtrBuffer {
+	//Map *fNext; // found in superclass
// TStringPool *fPool;
NSInteger lastHash;
}

-//@property (copy) ANTLRMap *fNext;
+//@property (copy) Map *fNext;
@property (getter=getLastHash, setter=setLastHash:) NSInteger lastHash;

// Contruction/Destruction
-+ (id)newANTLRMap;
-+ (id)newANTLRMapWithLen:(NSInteger)aHashSize;
++ (id)newMap;
++ (id)newMapWithLen:(NSInteger)aHashSize;

- (id)init;
- (id)initWithLen:(NSInteger)cnt;
@@ -65,16 +65,16 @@
/*   look for s in ptrBuffer  */
-(id)lookup:(NSString *)s;
/* look for s in ptrBuffer  */
--(id)install:(ANTLRMapElement *)sym;
+-(id)install:(MapElement *)sym;
/*
* delete entry from list
*/
-- (void)deleteANTLRMap:(ANTLRMapElement *)np;
+- (void)deleteMap:(MapElement *)np;
- (NSInteger)RemoveSym:(NSString *)s;
-- (void)delete_chain:(ANTLRMapElement *)np;
-- (ANTLRMapElement *)getTType:(NSString *)name;
-- (ANTLRMapElement *)getName:(NSInteger)ttype;
-- (NSInteger)getNode:(ANTLRMapElement *)aNode;
+- (void)delete_chain:(MapElement *)np;
+- (MapElement *)getTType:(NSString *)name;
+- (MapElement *)getName:(NSInteger)ttype;
+- (NSInteger)getNode:(MapElement *)aNode;
- (void)putNode:(NSInteger)aTType Node:(id)aNode;
- (void)putName:(NSString *)name TType:(NSInteger)ttype;
- (void)putName:(NSString *)name Node:(id)aNode;
diff --git a/runtime/ObjC/Framework/Map.m b/runtime/ObjC/Framework/Map.m
index 6bfb088..9105e82 100644
--- a/runtime/ObjC/Framework/Map.m
+++ b/runtime/ObjC/Framework/Map.m
@@ -1,5 +1,5 @@
//
-//  ANTLRMap.m
+//  Map.m
//  ANTLR
//
//  Created by Alan Condit on 6/9/10.
@@ -32,24 +32,24 @@
#define SUCCESS (0)
#define FAILURE (-1)

-#import "ANTLRMap.h"
-#import "ANTLRBaseTree.h"
+#import "Map.h"
+#import "BaseTree.h"

/*
- * Start of ANTLRMap
+ * Start of Map
*/
-@implementation ANTLRMap
+@implementation Map

@synthesize lastHash;

-+(id)newANTLRMap
++(id)newMap
{
-    return [[ANTLRMap alloc] init];
+    return [[Map alloc] init];
}

-+(id)newANTLRMapWithLen:(NSInteger)aBuffSize
++(id)newMapWithLen:(NSInteger)aBuffSize
{
-    return [[ANTLRMap alloc] initWithLen:aBuffSize];
+    return [[Map alloc] initWithLen:aBuffSize];
}

-(id)init
@@ -77,9 +77,9 @@
-(void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRMMap" );
+    NSLog( @"called dealloc in MMap" );
#endif
-    ANTLRMapElement *tmp, *rtmp;
+    MapElement *tmp, *rtmp;
NSInteger idx;

if ( self.fNext != nil ) {
@@ -87,7 +87,7 @@
tmp = ptrBuffer[idx];
while ( tmp ) {
rtmp = tmp;
-                tmp = (ANTLRMapElement *)tmp.fNext;
+                tmp = (MapElement *)tmp.fNext;
[rtmp release];
}
}
@@ -95,9 +95,9 @@
[super dealloc];
}

--(void)deleteANTLRMap:(ANTLRMapElement *)np
+-(void)deleteMap:(MapElement *)np
{
-    ANTLRMapElement *tmp, *rtmp;
+    MapElement *tmp, *rtmp;
NSInteger idx;

if ( self.fNext != nil ) {
@@ -114,7 +114,7 @@

- (void)clear
{
-    ANTLRMapElement *tmp, *rtmp;
+    MapElement *tmp, *rtmp;
NSInteger idx;

for( idx = 0; idx < BuffSize; idx++ ) {
@@ -147,7 +147,7 @@

- (NSInteger)size
{
-    ANTLRMapElement *anElement;
+    MapElement *anElement;
NSInteger aSize = 0;

for (int i = 0; i < BuffSize; i++) {
@@ -161,7 +161,7 @@
#ifdef USERDOC
/*
*  HASH        hash entry to get index to table
- *  NSInteger hash( ANTLRMap *self, char *s );
+ *  NSInteger hash( Map *self, char *s );
*
*     Inputs:  NSString *s         string to find
*
@@ -185,18 +185,18 @@
#ifdef USERDOC
/*
*  LOOKUP  search hashed list for entry
- *  ANTLRMapElement *lookup:(NSString *)s;
+ *  MapElement *lookup:(NSString *)s;
*
*     Inputs:  NSString  *s       string to find
*
- *     Returns: ANTLRMapElement  *        pointer to entry
+ *     Returns: MapElement  *        pointer to entry
*
*  Last Revision 9/03/90
*/
#endif
-(id)lookup:(NSString *)s
{
-    ANTLRMapElement *np;
+    MapElement *np;

for( np = self->ptrBuffer[[self hash:s]]; np != nil; np = [np getfNext] ) {
if ( [s isEqualToString:[np getName]] ) {
@@ -209,9 +209,9 @@
#ifdef USERDOC
/*
*  INSTALL search hashed list for entry
- *  NSInteger install( ANTLRMap *self, ANTLRMapElement *sym );
+ *  NSInteger install( Map *self, MapElement *sym );
*
- *     Inputs:  ANTLRMapElement    *sym   -- symbol ptr to install
+ *     Inputs:  MapElement    *sym   -- symbol ptr to install
*              NSInteger         scope -- level to find
*
*     Returns: Boolean     TRUE   if installed
@@ -220,9 +220,9 @@
*  Last Revision 9/03/90
*/
#endif
--(ANTLRMapElement *)install:(ANTLRMapElement *)sym
+-(MapElement *)install:(MapElement *)sym
{
-    ANTLRMapElement *np;
+    MapElement *np;

np = [self lookup:[sym getName]];
if ( np == nil ) {
@@ -237,7 +237,7 @@
#ifdef USERDOC
/*
*  RemoveSym  search hashed list for entry
- *  NSInteger RemoveSym( ANTLRMap *self, char *s );
+ *  NSInteger RemoveSym( Map *self, char *s );
*
*     Inputs:  char     *s          string to find
*
@@ -248,7 +248,7 @@
#endif
-(NSInteger)RemoveSym:(NSString *)s
{
-    ANTLRMapElement *np, *tmp;
+    MapElement *np, *tmp;
NSInteger idx;

idx = [self hash:s];
@@ -263,7 +263,7 @@
return( FAILURE );                    /*   not found      */
}

--(void)delete_chain:(ANTLRMapElement *)np
+-(void)delete_chain:(MapElement *)np
{
if ( [np getfNext] != nil )
[self delete_chain:[np getfNext]];
@@ -274,11 +274,11 @@
-(NSInteger)bld_symtab:(KW_TABLE *)toknams
{
NSInteger i;
-    ANTLRMapElement *np;
+    MapElement *np;

for( i = 0; *(toknams[i].name) != '\0'; i++ ) {
// install symbol in ptrBuffer
-        np = [ANTLRMapElement newANTLRMapElement:[NSString stringWithFormat:@"%s", toknams[i].name]];
+        np = [MapElement newMapElement:[NSString stringWithFormat:@"%s", toknams[i].name]];
//        np->fType = toknams[i].toknum;
[self install:np Scope:0];
}
@@ -289,9 +289,9 @@
/*
* works only for maplist indexed not by name but by TokenNumber
*/
-- (ANTLRMapElement *)getName:(NSInteger)ttype
+- (MapElement *)getName:(NSInteger)ttype
{
-    ANTLRMapElement *np;
+    MapElement *np;
NSInteger aTType;

aTType = ttype % HASHSIZE;
@@ -303,18 +303,18 @@
return( nil );              /*   not found      */
}

-- (NSInteger)getNode:(id<ANTLRBaseTree>)aNode
+- (NSInteger)getNode:(id<BaseTree>)aNode
{
-    ANTLRMapElement *np;
+    MapElement *np;
NSInteger idx;

-    idx = [(id<ANTLRBaseTree>)aNode type];
+    idx = [(id<BaseTree>)aNode type];
idx %= HASHSIZE;
np = ptrBuffer[idx];
return( [(NSNumber *)np.node integerValue] );
}

-- (ANTLRMapElement *)getTType:(NSString *)name
+- (MapElement *)getTType:(NSString *)name
{
return [self lookup:name];
}
@@ -322,20 +322,20 @@
// create node and install node in ptrBuffer
- (void)putName:(NSString *)name TType:(NSInteger)ttype
{
-    ANTLRMapElement *np;
+    MapElement *np;

-    np = [ANTLRMapElement newANTLRMapElementWithName:[NSString stringWithString:name] Type:ttype];
+    np = [MapElement newMapElementWithName:[NSString stringWithString:name] Type:ttype];
[self install:np];
}

// create node and install node in ptrBuffer
- (void)putName:(NSString *)name Node:(id)aNode
{
-    ANTLRMapElement *np, *np1;
+    MapElement *np, *np1;
NSInteger idx;

idx = [self hash:name];
-    np1 = [ANTLRMapElement newANTLRMapElementWithName:[NSString stringWithString:name] Type:idx];
+    np1 = [MapElement newMapElementWithName:[NSString stringWithString:name] Type:idx];
np = [self lookup:name];
if ( np == nil ) {
[np1 setFNext:self->ptrBuffer[ self->lastHash ]];
@@ -351,11 +351,11 @@
// create node and install node in ptrBuffer
- (void)putNode:(NSInteger)aTType Node:(id)aNode
{
-    ANTLRMapElement *np;
+    MapElement *np;
NSInteger ttype;

ttype = aTType % HASHSIZE;
-    np = [ANTLRMapElement newANTLRMapElementWithNode:ttype Node:(id)aNode];
+    np = [MapElement newMapElementWithNode:ttype Node:(id)aNode];
ptrBuffer[ttype] = np;
}

diff --git a/runtime/ObjC/Framework/MapElement.h b/runtime/ObjC/Framework/MapElement.h
index e20d01c..09b7ada 100644
--- a/runtime/ObjC/Framework/MapElement.h
+++ b/runtime/ObjC/Framework/MapElement.h
@@ -1,5 +1,5 @@
//
-//  ANTLRMapElement.h
+//  MapElement.h
//  ANTLR
//
//  Created by Alan Condit on 6/8/10.
@@ -30,20 +30,20 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRBaseMapElement.h"
+#import "BaseMapElement.h"

-@interface ANTLRMapElement : ANTLRBaseMapElement {
+@interface MapElement : BaseMapElement {
NSString *name;
id        node;
}
@property (retain, getter=getName, setter=setName:) NSString *name;
@property (retain, getter=getNode, setter=setNode:) id node;

-+ (id) newANTLRMapElement;
-+ (id) newANTLRMapElementWithName:(NSString *)aName Type:(NSInteger)aTType;
-+ (id) newANTLRMapElementWithNode:(NSInteger)aTType Node:(id)aNode;
-+ (id) newANTLRMapElementWithName:(NSString *)aName Node:(id)aNode;
-+ (id) newANTLRMapElementWithObj1:(id)anObj1 Obj2:(id)anObj2;
++ (id) newMapElement;
++ (id) newMapElementWithName:(NSString *)aName Type:(NSInteger)aTType;
++ (id) newMapElementWithNode:(NSInteger)aTType Node:(id)aNode;
++ (id) newMapElementWithName:(NSString *)aName Node:(id)aNode;
++ (id) newMapElementWithObj1:(id)anObj1 Obj2:(id)anObj2;
- (id) init;
- (id) initWithName:(NSString *)aName Type:(NSInteger)aTType;
- (id) initWithNode:(NSInteger)aTType Node:(id)aNode;
diff --git a/runtime/ObjC/Framework/MapElement.m b/runtime/ObjC/Framework/MapElement.m
index bce1c9f..38392a4 100644
--- a/runtime/ObjC/Framework/MapElement.m
+++ b/runtime/ObjC/Framework/MapElement.m
@@ -1,5 +1,5 @@
//
-//  ANTLRMapElement.m
+//  MapElement.m
//  ANTLR
//
//  Created by Alan Condit on 6/8/10.
@@ -30,37 +30,37 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRMapElement.h"
+#import "MapElement.h"


-@implementation ANTLRMapElement
+@implementation MapElement

@synthesize name;
@synthesize node;

-+ (id) newANTLRMapElement
++ (id) newMapElement
{
-    return [[ANTLRMapElement alloc] init];
+    return [[MapElement alloc] init];
}

-+ (id) newANTLRMapElementWithName:(NSString *)aName Type:(NSInteger)aTType
++ (id) newMapElementWithName:(NSString *)aName Type:(NSInteger)aTType
{
-    return [[ANTLRMapElement alloc] initWithName:aName Type:aTType];
+    return [[MapElement alloc] initWithName:aName Type:aTType];
}

-+ (id) newANTLRMapElementWithNode:(NSInteger)aTType Node:(id)aNode
++ (id) newMapElementWithNode:(NSInteger)aTType Node:(id)aNode
{
-    return [[ANTLRMapElement alloc] initWithNode:aTType Node:aNode];
+    return [[MapElement alloc] initWithNode:aTType Node:aNode];
}

-+ (id) newANTLRMapElementWithName:(NSString *)aName Node:(id)aNode
++ (id) newMapElementWithName:(NSString *)aName Node:(id)aNode
{
-    return [[ANTLRMapElement alloc] initWithName:aName Node:aNode];
+    return [[MapElement alloc] initWithName:aName Node:aNode];
}

-+ (id) newANTLRMapElementWithObj1:(id)anObj1 Obj2:(id)anObj2
++ (id) newMapElementWithObj1:(id)anObj1 Obj2:(id)anObj2
{
-    return [[ANTLRMapElement alloc] initWithObj1:anObj1 Obj2:anObj2];
+    return [[MapElement alloc] initWithObj1:anObj1 Obj2:anObj2];
}

- (id) init
@@ -117,7 +117,7 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRMapElement" );
+    NSLog( @"called dealloc in MapElement" );
#endif
if ( name ) [name release];
if ( node ) [node release];
@@ -126,7 +126,7 @@

- (id) copyWithZone:(NSZone *)aZone
{
-    ANTLRMapElement *copy;
+    MapElement *copy;

copy = [super copyWithZone:aZone];
if (name) copy.name = name;
@@ -180,27 +180,27 @@

- (void)putNode:(id)aNode
{
-    index = ((ANTLRMapElement *)aNode).index;
-    if (((ANTLRMapElement *)aNode).name) {
-        name = [((ANTLRMapElement *)aNode).name retain];
+    index = ((MapElement *)aNode).index;
+    if (((MapElement *)aNode).name) {
+        name = [((MapElement *)aNode).name retain];
node = nil;
}
-    if (((ANTLRMapElement *)aNode).node) {
+    if (((MapElement *)aNode).node) {
name = nil;
-        node = [((ANTLRMapElement *)aNode).node retain];
+        node = [((MapElement *)aNode).node retain];
}
}

- (void)putNode:(id)aNode With:(NSInteger)uniqueID
{
-    index = ((ANTLRMapElement *)aNode).index;
-    if (((ANTLRMapElement *)aNode).name) {
-        name = [((ANTLRMapElement *)aNode).name retain];
+    index = ((MapElement *)aNode).index;
+    if (((MapElement *)aNode).name) {
+        name = [((MapElement *)aNode).name retain];
node = nil;
}
-    if (((ANTLRMapElement *)aNode).node) {
+    if (((MapElement *)aNode).node) {
name = nil;
-        node = [((ANTLRMapElement *)aNode).node retain];
+        node = [((MapElement *)aNode).node retain];
}
}

diff --git a/runtime/ObjC/Framework/MismatchedNotSetException.h b/runtime/ObjC/Framework/MismatchedNotSetException.h
index 95d191d..95ce6ef 100644
--- a/runtime/ObjC/Framework/MismatchedNotSetException.h
+++ b/runtime/ObjC/Framework/MismatchedNotSetException.h
@@ -1,5 +1,5 @@
//
-//  ANTLRMismatchedNotSetException.h
+//  MismatchedNotSetException.h
//  ANTLR
//
//  Created by Alan Condit on 6/13/10.
@@ -30,21 +30,21 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRRecognitionException.h"
+#import "RecognitionException.h"
#import "ANTLRBitSet.h"

-@interface ANTLRMismatchedNotSetException : ANTLRRecognitionException
+@interface MismatchedNotSetException : RecognitionException
{
NSString *expecting;
}
@property (retain, getter=getExpecting, setter=setExpecting:) NSString *expecting;

-- (ANTLRMismatchedNotSetException *)newException;
-- (ANTLRMismatchedNotSetException *)newException:(id<ANTLRIntStream>)anInput
+- (MismatchedNotSetException *)newException;
+- (MismatchedNotSetException *)newException:(id<IntStream>)anInput
Follow:(NSString *)expecting;

- (id) init;
-- (id) initWithStream:(id<ANTLRIntStream>)anInput Follow:(NSString *)expecting;
+- (id) initWithStream:(id<IntStream>)anInput Follow:(NSString *)expecting;

- (NSString *)toString;

diff --git a/runtime/ObjC/Framework/MismatchedNotSetException.m b/runtime/ObjC/Framework/MismatchedNotSetException.m
index e43e1b1..069c0f6 100644
--- a/runtime/ObjC/Framework/MismatchedNotSetException.m
+++ b/runtime/ObjC/Framework/MismatchedNotSetException.m
@@ -1,5 +1,5 @@
//
-//  ANTLRMismatchedNotSetException.m
+//  MismatchedNotSetException.m
//  ANTLR
//
//  Created by Alan Condit on 6/13/10.
@@ -29,21 +29,21 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRMismatchedNotSetException.h"
+#import "MismatchedNotSetException.h"

-@implementation ANTLRMismatchedNotSetException
+@implementation MismatchedNotSetException

@synthesize expecting;

-- (ANTLRMismatchedNotSetException *)newException
+- (MismatchedNotSetException *)newException
{
-    return [[ANTLRMismatchedNotSetException alloc] init];
+    return [[MismatchedNotSetException alloc] init];
}

-- (ANTLRMismatchedNotSetException *)newException:(id<ANTLRIntStream>)anInput
+- (MismatchedNotSetException *)newException:(id<IntStream>)anInput
Follow:(NSString *)expected
{
-    return [[ANTLRMismatchedNotSetException alloc] initWithStream:anInput Follow:(NSString *)expected];
+    return [[MismatchedNotSetException alloc] initWithStream:anInput Follow:(NSString *)expected];
}

- (id) init
@@ -53,7 +53,7 @@
return(self);
}

-- (id) initWithStream:(id<ANTLRIntStream>)anInput Follow:(NSString *)expected
+- (id) initWithStream:(id<IntStream>)anInput Follow:(NSString *)expected
{
if ((self = [super initWithStream:anInput]) != nil ) {
expecting = expected;
diff --git a/runtime/ObjC/Framework/MismatchedRangeException.h b/runtime/ObjC/Framework/MismatchedRangeException.h
index 678af61..16d64cf 100644
--- a/runtime/ObjC/Framework/MismatchedRangeException.h
+++ b/runtime/ObjC/Framework/MismatchedRangeException.h
@@ -25,18 +25,18 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRRecognitionException.h"
+#import "RecognitionException.h"

-@protocol ANTLRIntStream;
+@protocol IntStream;


-@interface ANTLRMismatchedRangeException : ANTLRRecognitionException {
+@interface MismatchedRangeException : RecognitionException {
NSRange range;
}

@property (assign) NSRange range;

-+ (id) newException:(NSRange) aRange stream:(id<ANTLRIntStream>) theInput;
-- (id) initWithRange:(NSRange) aRange stream:(id<ANTLRIntStream>) theInput;
++ (id) newException:(NSRange) aRange stream:(id<IntStream>) theInput;
+- (id) initWithRange:(NSRange) aRange stream:(id<IntStream>) theInput;

@end
diff --git a/runtime/ObjC/Framework/MismatchedRangeException.m b/runtime/ObjC/Framework/MismatchedRangeException.m
index 0647254..2fbad2b 100644
--- a/runtime/ObjC/Framework/MismatchedRangeException.m
+++ b/runtime/ObjC/Framework/MismatchedRangeException.m
@@ -25,19 +25,19 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


-#import "ANTLRMismatchedRangeException.h"
+#import "MismatchedRangeException.h"


-@implementation ANTLRMismatchedRangeException
+@implementation MismatchedRangeException

@synthesize range;

-+ (id) newException:(NSRange) aRange stream:(id<ANTLRIntStream>) theInput
++ (id) newException:(NSRange) aRange stream:(id<IntStream>) theInput
{
-	return [[ANTLRMismatchedRangeException alloc] initWithRange:aRange stream:theInput];
+	return [[MismatchedRangeException alloc] initWithRange:aRange stream:theInput];
}

-- (id) initWithRange:(NSRange) aRange stream:(id<ANTLRIntStream>) theInput
+- (id) initWithRange:(NSRange) aRange stream:(id<IntStream>) theInput
{
if ((self = [super initWithStream:theInput]) != nil) {
range = aRange;
diff --git a/runtime/ObjC/Framework/MismatchedSetException.h b/runtime/ObjC/Framework/MismatchedSetException.h
index 0610973..a45f676 100644
--- a/runtime/ObjC/Framework/MismatchedSetException.h
+++ b/runtime/ObjC/Framework/MismatchedSetException.h
@@ -26,16 +26,16 @@


#import <Cocoa/Cocoa.h>
-#import "ANTLRRecognitionException.h"
+#import "RecognitionException.h"

-@interface ANTLRMismatchedSetException : ANTLRRecognitionException {
+@interface MismatchedSetException : RecognitionException {
NSString *expecting;
}

@property (retain, getter=getExpecting, setter=setExpecting:) NSString *expecting;

-+ (id) newException:(NSString *) theExpectedSet stream:(id<ANTLRIntStream>) theStream;
-- (id) initWithSet:(NSString *) theExpectedSet stream:(id<ANTLRIntStream>) theStream;
++ (id) newException:(NSString *) theExpectedSet stream:(id<IntStream>) theStream;
+- (id) initWithSet:(NSString *) theExpectedSet stream:(id<IntStream>) theStream;

- (NSString *) getExpecting;
- (void) setExpecting: (NSString *) anExpectedSet;
diff --git a/runtime/ObjC/Framework/MismatchedSetException.m b/runtime/ObjC/Framework/MismatchedSetException.m
index b5248d2..243aaaa 100644
--- a/runtime/ObjC/Framework/MismatchedSetException.m
+++ b/runtime/ObjC/Framework/MismatchedSetException.m
@@ -24,19 +24,19 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRMismatchedSetException.h"
+#import "MismatchedSetException.h"


-@implementation ANTLRMismatchedSetException
+@implementation MismatchedSetException

@synthesize expecting;

-+ (id) newException:(NSString *) theExpectedSet stream:(id<ANTLRIntStream>) theStream
++ (id) newException:(NSString *) theExpectedSet stream:(id<IntStream>) theStream
{
-	return [[ANTLRMismatchedSetException alloc] initWithSet:theExpectedSet stream:theStream];
+	return [[MismatchedSetException alloc] initWithSet:theExpectedSet stream:theStream];
}

-- (id) initWithSet:(NSString *) theExpectedSet stream:(id<ANTLRIntStream>) theStream
+- (id) initWithSet:(NSString *) theExpectedSet stream:(id<IntStream>) theStream
{
if ((self = [super initWithStream:theStream]) != nil) {
[self setExpecting:theExpectedSet];
diff --git a/runtime/ObjC/Framework/MismatchedTokenException.h b/runtime/ObjC/Framework/MismatchedTokenException.h
index 8e28dcc..104b575 100644
--- a/runtime/ObjC/Framework/MismatchedTokenException.h
+++ b/runtime/ObjC/Framework/MismatchedTokenException.h
@@ -26,12 +26,12 @@


#import <Cocoa/Cocoa.h>
-#import "ANTLRRecognitionException.h"
+#import "RecognitionException.h"
#import "ANTLRBitSet.h"

-@protocol ANTLRIntStream;
+@protocol IntStream;

-@interface ANTLRMismatchedTokenException : ANTLRRecognitionException {
+@interface MismatchedTokenException : RecognitionException {
NSInteger expecting;
unichar expectingChar;
BOOL isTokenType;
@@ -41,18 +41,18 @@
@property (assign, getter=getExpectingChar, setter=setExpectingChar:) unichar expectingChar;
@property (assign, getter=getIsTokenType, setter=setIsTokenType:) BOOL isTokenType;

-+ (id) newException:(NSInteger)expectedTokenType Stream:(id<ANTLRIntStream>)anInput;
++ (id) newException:(NSInteger)expectedTokenType Stream:(id<IntStream>)anInput;
+ (id) newExceptionMissing:(NSInteger)expectedTokenType
-                                        Stream:(id<ANTLRIntStream>)anInput
-                                         Token:(id<ANTLRToken>)inserted;
-+ (id) newExceptionChar:(unichar)expectedCharacter Stream:(id<ANTLRIntStream>)anInput;
-+ (id) newExceptionStream:(id<ANTLRIntStream>)anInput
+                                        Stream:(id<IntStream>)anInput
+                                         Token:(id<Token>)inserted;
++ (id) newExceptionChar:(unichar)expectedCharacter Stream:(id<IntStream>)anInput;
++ (id) newExceptionStream:(id<IntStream>)anInput
Exception:(NSException *)e
Follow:(ANTLRBitSet *)follow;
-- (id) initWithTokenType:(NSInteger)expectedTokenType Stream:(id<ANTLRIntStream>)anInput;
+- (id) initWithTokenType:(NSInteger)expectedTokenType Stream:(id<IntStream>)anInput;
-(id) initWithTokenType:(NSInteger)expectedTokenType
-                 Stream:(id<ANTLRIntStream>)anInput
-                  Token:(id<ANTLRToken>)inserted;
-- (id) initWithCharacter:(unichar)expectedCharacter Stream:(id<ANTLRIntStream>)anInput;
+                 Stream:(id<IntStream>)anInput
+                  Token:(id<Token>)inserted;
+- (id) initWithCharacter:(unichar)expectedCharacter Stream:(id<IntStream>)anInput;

@end
diff --git a/runtime/ObjC/Framework/MismatchedTokenException.m b/runtime/ObjC/Framework/MismatchedTokenException.m
index a8807fa..0d96ae5 100644
--- a/runtime/ObjC/Framework/MismatchedTokenException.m
+++ b/runtime/ObjC/Framework/MismatchedTokenException.m
@@ -24,39 +24,39 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRMismatchedTokenException.h"
+#import "MismatchedTokenException.h"


-@implementation ANTLRMismatchedTokenException
+@implementation MismatchedTokenException

@synthesize expecting;
@synthesize expectingChar;
@synthesize isTokenType;


-+ (id) newException:(NSInteger)expectedTokenType Stream:(id<ANTLRIntStream>)anInput
++ (id) newException:(NSInteger)expectedTokenType Stream:(id<IntStream>)anInput
{
-	return [[ANTLRMismatchedTokenException alloc] initWithTokenType:expectedTokenType Stream:anInput];
+	return [[MismatchedTokenException alloc] initWithTokenType:expectedTokenType Stream:anInput];
}

+ (id) newExceptionMissing:(NSInteger)expectedTokenType
-                                        Stream:(id<ANTLRIntStream>)anInput
-                                         Token:(id<ANTLRToken>)inserted
+                                        Stream:(id<IntStream>)anInput
+                                         Token:(id<Token>)inserted
{
-	return [[ANTLRMismatchedTokenException alloc] initWithTokenType:expectedTokenType Stream:anInput Token:inserted];
+	return [[MismatchedTokenException alloc] initWithTokenType:expectedTokenType Stream:anInput Token:inserted];
}

-+ (id) newExceptionChar:(unichar) expectedCharacter Stream:(id<ANTLRIntStream>)anInput
++ (id) newExceptionChar:(unichar) expectedCharacter Stream:(id<IntStream>)anInput
{
-	return [[ANTLRMismatchedTokenException alloc] initWithCharacter:expectedCharacter Stream:anInput];
+	return [[MismatchedTokenException alloc] initWithCharacter:expectedCharacter Stream:anInput];
}

-+ (id) newExceptionStream:(id<ANTLRIntStream>)anInput Exception:(NSException *)e Follow:(ANTLRBitSet *) follow
++ (id) newExceptionStream:(id<IntStream>)anInput Exception:(NSException *)e Follow:(ANTLRBitSet *) follow
{
-	return [[ANTLRMismatchedTokenException alloc] initWithStream:anInput];
+	return [[MismatchedTokenException alloc] initWithStream:anInput];
}

--(id) initWithTokenType:(NSInteger)expectedTokenType Stream:(id<ANTLRIntStream>)anInput
+-(id) initWithTokenType:(NSInteger)expectedTokenType Stream:(id<IntStream>)anInput
{
if ((self = [super initWithStream:anInput]) != nil) {
expecting = expectedTokenType;
@@ -66,8 +66,8 @@
}

-(id) initWithTokenType:(NSInteger)expectedTokenType
-                 Stream:(id<ANTLRIntStream>)anInput
-                  Token:(id<ANTLRToken>)inserted
+                 Stream:(id<IntStream>)anInput
+                  Token:(id<Token>)inserted
{
if ((self = [super initWithStream:anInput]) != nil) {
expecting = expectedTokenType;
@@ -76,7 +76,7 @@
return self;
}

-- (id) initWithCharacter:(unichar) expectedCharacter Stream:(id<ANTLRIntStream>)anInput
+- (id) initWithCharacter:(unichar) expectedCharacter Stream:(id<IntStream>)anInput
{
if ((self = [super initWithStream:anInput]) != nil) {
expectingChar = expectedCharacter;
diff --git a/runtime/ObjC/Framework/MismatchedTreeNodeException.h b/runtime/ObjC/Framework/MismatchedTreeNodeException.h
index 3528cba..8fa5b25 100644
--- a/runtime/ObjC/Framework/MismatchedTreeNodeException.h
+++ b/runtime/ObjC/Framework/MismatchedTreeNodeException.h
@@ -25,18 +25,18 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRRecognitionException.h"
+#import "RecognitionException.h"

-@protocol ANTLRIntStream;
+@protocol IntStream;

-@interface ANTLRMismatchedTreeNodeException : ANTLRRecognitionException {
+@interface MismatchedTreeNodeException : RecognitionException {
NSInteger expecting;
}

@property (getter=getExpecting, setter=setExpecting:) NSInteger expecting;

-+ (id) newException:(NSInteger)expectedTokenType Stream:(id<ANTLRIntStream>)anInput;
-- (id) initWithTokenType:(NSInteger) expectedTokenType Stream:(id<ANTLRIntStream>)anInput;
++ (id) newException:(NSInteger)expectedTokenType Stream:(id<IntStream>)anInput;
+- (id) initWithTokenType:(NSInteger) expectedTokenType Stream:(id<IntStream>)anInput;


@end
diff --git a/runtime/ObjC/Framework/MismatchedTreeNodeException.m b/runtime/ObjC/Framework/MismatchedTreeNodeException.m
index 60d5184..55addc3 100644
--- a/runtime/ObjC/Framework/MismatchedTreeNodeException.m
+++ b/runtime/ObjC/Framework/MismatchedTreeNodeException.m
@@ -24,19 +24,19 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRMismatchedTreeNodeException.h"
+#import "MismatchedTreeNodeException.h"


-@implementation ANTLRMismatchedTreeNodeException
+@implementation MismatchedTreeNodeException

@synthesize expecting;

-+ (id) newException:(NSInteger)expectedTokenType Stream:(id<ANTLRIntStream>)anInput
++ (id) newException:(NSInteger)expectedTokenType Stream:(id<IntStream>)anInput
{
-	return [[ANTLRMismatchedTreeNodeException alloc] initWithTokenType:expectedTokenType Stream:anInput];
+	return [[MismatchedTreeNodeException alloc] initWithTokenType:expectedTokenType Stream:anInput];
}

--(id) initWithTokenType:(NSInteger)expectedTokenType Stream:(id<ANTLRIntStream>)anInput
+-(id) initWithTokenType:(NSInteger)expectedTokenType Stream:(id<IntStream>)anInput
{
if ((self = [super initWithStream:anInput]) != nil) {
expecting = expectedTokenType;
diff --git a/runtime/ObjC/Framework/MissingTokenException.h b/runtime/ObjC/Framework/MissingTokenException.h
index 1ae8103..19b6914 100644
--- a/runtime/ObjC/Framework/MissingTokenException.h
+++ b/runtime/ObjC/Framework/MissingTokenException.h
@@ -1,5 +1,5 @@
//
-//  ANTLRMissingTokenException.h
+//  MissingTokenException.h
//  ANTLR
//
//  Created by Alan Condit on 6/8/10.
@@ -30,23 +30,23 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRMismatchedTokenException.h"
-#import "ANTLRToken.h"
+#import "MismatchedTokenException.h"
+#import "Token.h"

-@interface ANTLRMissingTokenException : ANTLRMismatchedTokenException {
-    id<ANTLRToken> inserted;
+@interface MissingTokenException : MismatchedTokenException {
+    id<Token> inserted;
}
/** Used for remote debugger deserialization */
+ (id) newException;
+ (id) newException:(NSInteger)expected
-             Stream:(id<ANTLRIntStream>)anInput
-               With:(id<ANTLRToken>)insertedToken;
+             Stream:(id<IntStream>)anInput
+               With:(id<Token>)insertedToken;
- (id) init;
-- (id) init:(NSInteger)expected Stream:(id<ANTLRIntStream>)anInput With:(id<ANTLRToken>)insertedToken;
+- (id) init:(NSInteger)expected Stream:(id<IntStream>)anInput With:(id<Token>)insertedToken;

- (NSInteger) getMissingType;

- (NSString *)toString;

-@property (retain) id<ANTLRToken> inserted;
+@property (retain) id<Token> inserted;
@end
diff --git a/runtime/ObjC/Framework/MissingTokenException.m b/runtime/ObjC/Framework/MissingTokenException.m
index 35bd130..d2a7878 100644
--- a/runtime/ObjC/Framework/MissingTokenException.m
+++ b/runtime/ObjC/Framework/MissingTokenException.m
@@ -1,5 +1,5 @@
//
-//  ANTLRMissingTokenException.m
+//  MissingTokenException.m
//  ANTLR
//
//  Created by Alan Condit on 6/8/10.
@@ -29,21 +29,21 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRMissingTokenException.h"
+#import "MissingTokenException.h"


-@implementation ANTLRMissingTokenException
+@implementation MissingTokenException
/** Used for remote debugger deserialization */
+ (id) newException
{
-    return [[ANTLRMissingTokenException alloc] init];
+    return [[MissingTokenException alloc] init];
}

+ (id) newException:(NSInteger)expected
-             Stream:(id<ANTLRIntStream>)anInput
-               With:(id<ANTLRToken>)insertedToken
+             Stream:(id<IntStream>)anInput
+               With:(id<Token>)insertedToken
{
-    return [[ANTLRMissingTokenException alloc] init:expected Stream:anInput With:insertedToken];
+    return [[MissingTokenException alloc] init:expected Stream:anInput With:insertedToken];
}

- (id) init
@@ -53,7 +53,7 @@
return self;
}

-- (id) init:(NSInteger)expected Stream:(id<ANTLRIntStream>)anInput With:(id<ANTLRToken>)insertedToken
+- (id) init:(NSInteger)expected Stream:(id<IntStream>)anInput With:(id<Token>)insertedToken
{
if ((self = [super initWithStream:anInput]) != nil) {
expecting = expected;
diff --git a/runtime/ObjC/Framework/NoViableAltException.h b/runtime/ObjC/Framework/NoViableAltException.h
index 9b2e521..2b6a037 100644
--- a/runtime/ObjC/Framework/NoViableAltException.h
+++ b/runtime/ObjC/Framework/NoViableAltException.h
@@ -25,16 +25,16 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRRecognitionException.h"
-#import "ANTLRIntStream.h"
+#import "RecognitionException.h"
+#import "IntStream.h"

-@interface ANTLRNoViableAltException : ANTLRRecognitionException {
+@interface NoViableAltException : RecognitionException {
int decisionNumber;
int stateNumber;
}

-+ (ANTLRNoViableAltException *) newException:(NSInteger)theDecisionNumber state:(NSInteger)theStateNumber stream:(id<ANTLRIntStream>)theStream;
-- (ANTLRNoViableAltException *) initWithDecision:(NSInteger)theDecisionNumber state:(NSInteger)theStateNumber stream:(id<ANTLRIntStream>)theStream;
++ (NoViableAltException *) newException:(NSInteger)theDecisionNumber state:(NSInteger)theStateNumber stream:(id<IntStream>)theStream;
+- (NoViableAltException *) initWithDecision:(NSInteger)theDecisionNumber state:(NSInteger)theStateNumber stream:(id<IntStream>)theStream;

- (void)setDecisionNumber:(NSInteger)decisionNumber;
- (void)setStateNumber:(NSInteger)stateNumber;
diff --git a/runtime/ObjC/Framework/NoViableAltException.m b/runtime/ObjC/Framework/NoViableAltException.m
index e519581..5f64b0b 100644
--- a/runtime/ObjC/Framework/NoViableAltException.m
+++ b/runtime/ObjC/Framework/NoViableAltException.m
@@ -25,19 +25,19 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


-#import "ANTLRNoViableAltException.h"
+#import "NoViableAltException.h"


-@implementation ANTLRNoViableAltException
+@implementation NoViableAltException


-+ (ANTLRNoViableAltException *) newException:(NSInteger)theDecisionNumber state:(NSInteger)theStateNumber stream:(id<ANTLRIntStream>)theStream
++ (NoViableAltException *) newException:(NSInteger)theDecisionNumber state:(NSInteger)theStateNumber stream:(id<IntStream>)theStream
{
return [[self alloc] initWithDecision:theDecisionNumber state:theStateNumber stream:theStream];
}


-- (ANTLRNoViableAltException *) initWithDecision:(NSInteger)theDecisionNumber state:(NSInteger)theStateNumber stream:(id<ANTLRIntStream>)theStream
+- (NoViableAltException *) initWithDecision:(NSInteger)theDecisionNumber state:(NSInteger)theStateNumber stream:(id<IntStream>)theStream
{
if ((self = [super initWithStream:theStream]) != nil) {
decisionNumber = theDecisionNumber;
diff --git a/runtime/ObjC/Framework/NodeMapElement.h b/runtime/ObjC/Framework/NodeMapElement.h
index 3bbf7b7..c7f5450 100644
--- a/runtime/ObjC/Framework/NodeMapElement.h
+++ b/runtime/ObjC/Framework/NodeMapElement.h
@@ -1,5 +1,5 @@
//
-//  ANTLRRuleMapElement.h
+//  RuleMapElement.h
//  ANTLR
//
//  Created by Alan Condit on 6/16/10.
@@ -30,26 +30,26 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRBaseMapElement.h"
-#import "ANTLRBaseTree.h"
+#import "BaseMapElement.h"
+#import "BaseTree.h"

-@interface ANTLRNodeMapElement : ANTLRBaseMapElement {
-    id<ANTLRBaseTree> node;
+@interface NodeMapElement : BaseMapElement {
+    id<BaseTree> node;
}

-@property (retain, getter=getNode, setter=setNode:) id<ANTLRBaseTree> node;
+@property (retain, getter=getNode, setter=setNode:) id<BaseTree> node;

+ (void)initialize;

-+ (id) newANTLRNodeMapElement;
-+ (id) newANTLRNodeMapElementWithIndex:(id)anIndex Node:(id<ANTLRBaseTree>)aNode;
++ (id) newNodeMapElement;
++ (id) newNodeMapElementWithIndex:(id)anIndex Node:(id<BaseTree>)aNode;
- (id) init;
- (id) initWithAnIndex:(id)anIndex Node:(id)aNode;

- (id) copyWithZone:(NSZone *)aZone;

-- (id<ANTLRBaseTree>)getNode;
-- (void)setNode:(id<ANTLRBaseTree>)aNode;
+- (id<BaseTree>)getNode;
+- (void)setNode:(id<BaseTree>)aNode;

- (NSInteger)size;

diff --git a/runtime/ObjC/Framework/NodeMapElement.m b/runtime/ObjC/Framework/NodeMapElement.m
index 06f35cc..64c9fc0 100644
--- a/runtime/ObjC/Framework/NodeMapElement.m
+++ b/runtime/ObjC/Framework/NodeMapElement.m
@@ -1,5 +1,5 @@
//
-//  ANTLRNodeMapElement.m
+//  NodeMapElement.m
//  ANTLR
//
//  Created by Alan Condit on 6/16/10.
@@ -29,11 +29,11 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRNodeMapElement.h"
+#import "NodeMapElement.h"

static NSInteger _aUniqueID;

-@implementation ANTLRNodeMapElement
+@implementation NodeMapElement

@synthesize node;

@@ -42,14 +42,14 @@ static NSInteger _aUniqueID;
_aUniqueID = 0;
}

-+ (ANTLRNodeMapElement *)newANTLRNodeMapElement
++ (NodeMapElement *)newNodeMapElement
{
-    return [[ANTLRNodeMapElement alloc] init];
+    return [[NodeMapElement alloc] init];
}

-+ (ANTLRNodeMapElement *)newANTLRNodeMapElementWithIndex:(id)anIndex Node:(id<ANTLRBaseTree>)aNode
++ (NodeMapElement *)newNodeMapElementWithIndex:(id)anIndex Node:(id<BaseTree>)aNode
{
-    return [[ANTLRNodeMapElement alloc] initWithAnIndex:anIndex Node:aNode];
+    return [[NodeMapElement alloc] initWithAnIndex:anIndex Node:aNode];
}

- (id) init
@@ -76,19 +76,19 @@ static NSInteger _aUniqueID;

- (id) copyWithZone:(NSZone *)aZone
{
-    ANTLRNodeMapElement *copy;
+    NodeMapElement *copy;

copy = [super copyWithZone:aZone];
copy.node = node;
return( copy );
}

-- (id<ANTLRBaseTree>)getNode
+- (id<BaseTree>)getNode
{
return node;
}

-- (void)setNode:(id<ANTLRBaseTree>)aNode
+- (void)setNode:(id<BaseTree>)aNode
{
if ( aNode != node ) {
if ( node ) [node release];
diff --git a/runtime/ObjC/Framework/ParseTree.h b/runtime/ObjC/Framework/ParseTree.h
index 5331005..e963d22 100644
--- a/runtime/ObjC/Framework/ParseTree.h
+++ b/runtime/ObjC/Framework/ParseTree.h
@@ -1,5 +1,5 @@
//
-//  ANTLRParseTree.h
+//  ParseTree.h
//  ANTLR
//
//  Created by Alan Condit on 7/12/10.
@@ -30,12 +30,12 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRBaseTree.h"
-#import "ANTLRCommonToken.h"
+#import "BaseTree.h"
+#import "CommonToken.h"
#import "AMutableArray.h"

-@interface ANTLRParseTree : ANTLRBaseTree <ANTLRBaseTree> {
-	__strong id<ANTLRToken> payload;
+@interface ParseTree : BaseTree <BaseTree> {
+	__strong id<Token> payload;
__strong AMutableArray *hiddenTokens;
}
/** A record of the rules used to match a token sequence.  The tokens
@@ -43,10 +43,10 @@
*  This really adds no functionality, it is just an alias for CommonTree
*  that is more meaningful (specific) and holds a String to display for a node.
*/
-+ (id<ANTLRBaseTree>)newANTLRParseTree:(id<ANTLRToken>)label;
-- (id)initWithLabel:(id<ANTLRToken>)label;
++ (id<BaseTree>)newParseTree:(id<Token>)label;
+- (id)initWithLabel:(id<Token>)label;

-- (id<ANTLRBaseTree>)dupNode;
+- (id<BaseTree>)dupNode;
- (NSInteger)type;
- (NSString *)text;
- (NSInteger)getTokenStartIndex;
@@ -59,6 +59,6 @@
- (NSString *)toInputString;
- (void)_toStringLeaves:(NSMutableString *)buf;

-@property (retain) id<ANTLRToken> payload;
+@property (retain) id<Token> payload;
@property (retain) AMutableArray *hiddenTokens;
@end
diff --git a/runtime/ObjC/Framework/ParseTree.m b/runtime/ObjC/Framework/ParseTree.m
index 8339640..1ea71a1 100644
--- a/runtime/ObjC/Framework/ParseTree.m
+++ b/runtime/ObjC/Framework/ParseTree.m
@@ -1,5 +1,5 @@
//
-//  ANTLRParseTree.m
+//  ParseTree.m
//  ANTLR
//
//  Created by Alan Condit on 7/12/10.
@@ -29,20 +29,20 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRParseTree.h"
+#import "ParseTree.h"

/** A record of the rules used to match a token sequence.  The tokens
*  end up as the leaves of this tree and rule nodes are the interior nodes.
*  This really adds no functionality, it is just an alias for CommonTree
*  that is more meaningful (specific) and holds a String to display for a node.
*/
-@implementation ANTLRParseTree
-+ (ANTLRParseTree *)newANTLRParseTree:(id<ANTLRToken>)label
+@implementation ParseTree
++ (ParseTree *)newParseTree:(id<Token>)label
{
-    return [[ANTLRParseTree alloc] initWithLabel:label];
+    return [[ParseTree alloc] initWithLabel:label];
}

-- (id)initWithLabel:(id<ANTLRToken>)label
+- (id)initWithLabel:(id<Token>)label
{
self = [super init];
if ( self != nil) {
@@ -51,7 +51,7 @@
return self;
}

-- (id<ANTLRBaseTree>)dupNode
+- (id<BaseTree>)dupNode
{
return nil;
}
@@ -86,9 +86,9 @@

- (NSString *)description
{
-    if ( [payload isKindOfClass:[ANTLRCommonToken class]] ) {
-        id<ANTLRToken> t = (id<ANTLRToken>)payload;
-        if ( t.type == ANTLRTokenTypeEOF ) {
+    if ( [payload isKindOfClass:[CommonToken class]] ) {
+        id<Token> t = (id<Token>)payload;
+        if ( t.type == TokenTypeEOF ) {
return @"<EOF>";
}
return [t text];
@@ -109,7 +109,7 @@
NSMutableString *buf = [NSMutableString stringWithCapacity:25];
if ( hiddenTokens!=nil ) {
for (NSUInteger i = 0; i < [hiddenTokens count]; i++) {
-            id<ANTLRToken>  hidden = (id<ANTLRToken> ) [hiddenTokens objectAtIndex:i];
+            id<Token>  hidden = (id<Token> ) [hiddenTokens objectAtIndex:i];
[buf appendString:[hidden text]];
}
}
@@ -131,12 +131,12 @@

- (void)_toStringLeaves:(NSMutableString *)buf
{
-    if ( [payload isKindOfClass:[ANTLRCommonToken class]] ) { // leaf node token?
+    if ( [payload isKindOfClass:[CommonToken class]] ) { // leaf node token?
[buf appendString:[self toStringWithHiddenTokens]];
return;
}
for (int i = 0; children!=nil && i < [children count]; i++) {
-        ANTLRParseTree *t = (ANTLRParseTree *) [children objectAtIndex:i];
+        ParseTree *t = (ParseTree *) [children objectAtIndex:i];
[t _toStringLeaves:buf];
}
}
diff --git a/runtime/ObjC/Framework/Parser.h b/runtime/ObjC/Framework/Parser.h
index 067b313..e8c3f16 100644
--- a/runtime/ObjC/Framework/Parser.h
+++ b/runtime/ObjC/Framework/Parser.h
@@ -26,31 +26,31 @@


#import <Cocoa/Cocoa.h>
-#import "ANTLRBaseRecognizer.h"
-#import "ANTLRCommonToken.h"
-#import "ANTLRTokenStream.h"
+#import "BaseRecognizer.h"
+#import "CommonToken.h"
+#import "TokenStream.h"

-@interface ANTLRParser : ANTLRBaseRecognizer {
-	id<ANTLRTokenStream> input;
+@interface Parser : BaseRecognizer {
+	id<TokenStream> input;
}
-+ (ANTLRParser *)newANTLRParser:(id<ANTLRTokenStream>)anInput;
-+ (ANTLRParser *)newANTLRParser:(id<ANTLRTokenStream>)anInput State:(ANTLRRecognizerSharedState *)aState;
++ (Parser *)newParser:(id<TokenStream>)anInput;
++ (Parser *)newParser:(id<TokenStream>)anInput State:(RecognizerSharedState *)aState;

-- (id) initWithTokenStream:(id<ANTLRTokenStream>)theStream;
-- (id) initWithTokenStream:(id<ANTLRTokenStream>)theStream State:(ANTLRRecognizerSharedState *)aState;
+- (id) initWithTokenStream:(id<TokenStream>)theStream;
+- (id) initWithTokenStream:(id<TokenStream>)theStream State:(RecognizerSharedState *)aState;

-- (id<ANTLRTokenStream>) input;
-- (void) setInput: (id<ANTLRTokenStream>) anInput;
+- (id<TokenStream>) input;
+- (void) setInput: (id<TokenStream>) anInput;

- (void) reset;

-- (id) getCurrentInputSymbol:(id<ANTLRTokenStream>)anInput;
-- (ANTLRCommonToken *)getMissingSymbol:(id<ANTLRTokenStream>)input
-                             Exception:(ANTLRRecognitionException *)e
+- (id) getCurrentInputSymbol:(id<TokenStream>)anInput;
+- (CommonToken *)getMissingSymbol:(id<TokenStream>)input
+                             Exception:(RecognitionException *)e
TType:(NSInteger)expectedTokenType
BitSet:(ANTLRBitSet *)follow;
-- (void) setTokenStream:(id<ANTLRTokenStream>)anInput;
-- (id<ANTLRTokenStream>)getTokenStream;
+- (void) setTokenStream:(id<TokenStream>)anInput;
+- (id<TokenStream>)getTokenStream;
- (NSString *)getSourceName;

- (void) traceIn:(NSString *)ruleName Index:(int)ruleIndex;
diff --git a/runtime/ObjC/Framework/Parser.m b/runtime/ObjC/Framework/Parser.m
index df559b2..abfe964 100644
--- a/runtime/ObjC/Framework/Parser.m
+++ b/runtime/ObjC/Framework/Parser.m
@@ -24,22 +24,22 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRParser.h"
+#import "Parser.h"


-@implementation ANTLRParser
+@implementation Parser

-+ (ANTLRParser *)newANTLRParser:(id<ANTLRTokenStream>)anInput
++ (Parser *)newParser:(id<TokenStream>)anInput
{
-    return [[ANTLRParser alloc] initWithTokenStream:anInput];
+    return [[Parser alloc] initWithTokenStream:anInput];
}

-+ (ANTLRParser *)newANTLRParser:(id<ANTLRTokenStream>)anInput State:(ANTLRRecognizerSharedState *)aState
++ (Parser *)newParser:(id<TokenStream>)anInput State:(RecognizerSharedState *)aState
{
-    return [[ANTLRParser alloc] initWithTokenStream:anInput State:aState];
+    return [[Parser alloc] initWithTokenStream:anInput State:aState];
}

-- (id) initWithTokenStream:(id<ANTLRTokenStream>)theStream
+- (id) initWithTokenStream:(id<TokenStream>)theStream
{
if ((self = [super init]) != nil) {
input = theStream;
@@ -47,7 +47,7 @@
return self;
}

-- (id) initWithTokenStream:(id<ANTLRTokenStream>)theStream State:(ANTLRRecognizerSharedState *)aState
+- (id) initWithTokenStream:(id<TokenStream>)theStream State:(RecognizerSharedState *)aState
{
if ((self = [super initWithState:aState]) != nil) {
input = theStream;
@@ -66,7 +66,7 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRParser" );
+    NSLog( @"called dealloc in Parser" );
#endif
[self setInput:nil];
[super dealloc];
@@ -75,12 +75,12 @@
//----------------------------------------------------------
//  input
//----------------------------------------------------------
-- (id<ANTLRTokenStream>) input
+- (id<TokenStream>) input
{
return input;
}

-- (void) setInput: (id<ANTLRTokenStream>) anInput
+- (void) setInput: (id<TokenStream>) anInput
{
if (input != anInput) {
if ( input ) [input release];
@@ -89,42 +89,42 @@
input = anInput;
}

-- (id) getCurrentInputSymbol:(id<ANTLRTokenStream>)anInput
+- (id) getCurrentInputSymbol:(id<TokenStream>)anInput
{
state.token = [input LT:1];
return state.token;
}

-- (ANTLRCommonToken *)getMissingSymbol:(id<ANTLRTokenStream>)anInput
-                             Exception:(ANTLRRecognitionException *)e
+- (CommonToken *)getMissingSymbol:(id<TokenStream>)anInput
+                             Exception:(RecognitionException *)e
TType:(NSInteger)expectedTokenType
BitSet:(ANTLRBitSet *)follow
{
NSString *tokenText = nil;
-    if ( expectedTokenType == ANTLRTokenTypeEOF )
+    if ( expectedTokenType == TokenTypeEOF )
tokenText = @"<missing EOF>";
else
-        tokenText = [NSString stringWithFormat:@"<missing %@>\n",[[ANTLRBaseRecognizer getTokenNames] objectAtIndex:expectedTokenType]];
-    ANTLRCommonToken *t = [[ANTLRCommonToken newToken:expectedTokenType Text:tokenText] retain];
-    ANTLRCommonToken *current = [anInput LT:1];
-    if ( current.type == ANTLRTokenTypeEOF ) {
+        tokenText = [NSString stringWithFormat:@"<missing %@>\n",[[BaseRecognizer getTokenNames] objectAtIndex:expectedTokenType]];
+    CommonToken *t = [[CommonToken newToken:expectedTokenType Text:tokenText] retain];
+    CommonToken *current = [anInput LT:1];
+    if ( current.type == TokenTypeEOF ) {
current = [anInput LT:-1];
}
t.line = current.line;
t.charPositionInLine = current.charPositionInLine;
-    t.channel = ANTLRTokenChannelDefault;
+    t.channel = TokenChannelDefault;
return t;
}

/** Set the token stream and reset the parser */
-- (void) setTokenStream:(id<ANTLRTokenStream>)anInput
+- (void) setTokenStream:(id<TokenStream>)anInput
{
input = nil;
[self reset];
input = anInput;
}

-- (id<ANTLRTokenStream>)getTokenStream
+- (id<TokenStream>)getTokenStream
{
return input;
}
diff --git a/runtime/ObjC/Framework/ParserRuleReturnScope.h b/runtime/ObjC/Framework/ParserRuleReturnScope.h
index d788c21..60d7dab 100644
--- a/runtime/ObjC/Framework/ParserRuleReturnScope.h
+++ b/runtime/ObjC/Framework/ParserRuleReturnScope.h
@@ -25,21 +25,21 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRToken.h"
-#import "ANTLRRuleReturnScope.h"
+#import "Token.h"
+#import "RuleReturnScope.h"

-@interface ANTLRParserRuleReturnScope : ANTLRRuleReturnScope {
-	id<ANTLRToken> start;
-	id<ANTLRToken> stopToken;
+@interface ParserRuleReturnScope : RuleReturnScope {
+	id<Token> start;
+	id<Token> stopToken;
}
-@property (retain, getter=getStart, setter=setStart:) id<ANTLRToken> start;
-@property (retain, getter=getStop, setter=setStop:)   id<ANTLRToken> stopToken;
+@property (retain, getter=getStart, setter=setStart:) id<Token> start;
+@property (retain, getter=getStop, setter=setStop:)   id<Token> stopToken;

-- (id<ANTLRToken>) getStart;
-- (void) setStart: (id<ANTLRToken>) aStart;
+- (id<Token>) getStart;
+- (void) setStart: (id<Token>) aStart;

-- (id<ANTLRToken>) getStop;
-- (void) setStop: (id<ANTLRToken>) aStop;
+- (id<Token>) getStop;
+- (void) setStop: (id<Token>) aStop;

- (id) copyWithZone:(NSZone *)theZone;

diff --git a/runtime/ObjC/Framework/ParserRuleReturnScope.m b/runtime/ObjC/Framework/ParserRuleReturnScope.m
index 2bc2392..de71a81 100644
--- a/runtime/ObjC/Framework/ParserRuleReturnScope.m
+++ b/runtime/ObjC/Framework/ParserRuleReturnScope.m
@@ -24,10 +24,10 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRParserRuleReturnScope.h"
+#import "ParserRuleReturnScope.h"


-@implementation ANTLRParserRuleReturnScope
+@implementation ParserRuleReturnScope

@synthesize start;
@synthesize stopToken;
@@ -39,12 +39,12 @@
[super dealloc];
}

-- (id<ANTLRToken>) getStart
+- (id<Token>) getStart
{
return start;
}

-- (void) setStart: (id<ANTLRToken>) aStart
+- (void) setStart: (id<Token>) aStart
{
if (start != aStart) {
[aStart retain];
@@ -53,12 +53,12 @@
}
}

-- (id<ANTLRToken>) getStop
+- (id<Token>) getStop
{
return stopToken;
}

-- (void) setStop: (id<ANTLRToken>) aStop
+- (void) setStop: (id<Token>) aStop
{
if (stopToken != aStop) {
[aStop retain];
@@ -71,7 +71,7 @@
// the input stream is *not* copied!
- (id) copyWithZone:(NSZone *)theZone
{
-    ANTLRParserRuleReturnScope *copy = [super copyWithZone:theZone];
+    ParserRuleReturnScope *copy = [super copyWithZone:theZone];
copy.start = start;
copy.stopToken = stopToken;
return copy;
diff --git a/runtime/ObjC/Framework/PtrBuffer.h b/runtime/ObjC/Framework/PtrBuffer.h
index baf929b..9e5d741 100644
--- a/runtime/ObjC/Framework/PtrBuffer.h
+++ b/runtime/ObjC/Framework/PtrBuffer.h
@@ -1,5 +1,5 @@
//
-//  ANTLRPtrBuffer.h
+//  PtrBuffer.h
//  ANTLR
//
//  Created by Alan Condit on 6/9/10.
@@ -30,13 +30,13 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRLinkBase.h"
+#import "LinkBase.h"

//#define GLOBAL_SCOPE       0
//#define LOCAL_SCOPE        1
#define BUFFSIZE         101

-@interface ANTLRPtrBuffer : ANTLRLinkBase {
+@interface PtrBuffer : LinkBase {
NSUInteger BuffSize;
NSUInteger count;
NSUInteger ptr;
@@ -51,8 +51,8 @@
@property (assign, getter=getPtrBuffer, setter=setPtrBuffer:) id *ptrBuffer;

// Contruction/Destruction
-+(ANTLRPtrBuffer *)newANTLRPtrBuffer;
-+(ANTLRPtrBuffer *)newANTLRPtrBufferWithLen:(NSInteger)cnt;
++(PtrBuffer *)newPtrBuffer;
++(PtrBuffer *)newPtrBufferWithLen:(NSInteger)cnt;
-(id)init;
-(id)initWithLen:(NSUInteger)cnt;
-(void)dealloc;
@@ -80,7 +80,7 @@
- (id) peek;

- (void) addObject:(id) v;
-- (void) addObjectsFromArray:(ANTLRPtrBuffer *)anArray;
+- (void) addObjectsFromArray:(PtrBuffer *)anArray;
- (void) insertObject:(id)aRule atIndex:(NSUInteger)idx;
- (id)   objectAtIndex:(NSUInteger)idx;
- (void) removeAllObjects;
diff --git a/runtime/ObjC/Framework/PtrBuffer.m b/runtime/ObjC/Framework/PtrBuffer.m
index 392a7b7..c1fc4cb 100644
--- a/runtime/ObjC/Framework/PtrBuffer.m
+++ b/runtime/ObjC/Framework/PtrBuffer.m
@@ -1,5 +1,5 @@
//
-//  ANTLRPtrBuffer.m
+//  PtrBuffer.m
//  ANTLR
//
//  Created by Alan Condit on 6/9/10.
@@ -32,13 +32,13 @@
#define SUCCESS (0)
#define FAILURE (-1)

-#import "ANTLRPtrBuffer.h"
-#import "ANTLRTree.h"
+#import "PtrBuffer.h"
+#import "Tree.h"

/*
- * Start of ANTLRPtrBuffer
+ * Start of PtrBuffer
*/
-@implementation ANTLRPtrBuffer
+@implementation PtrBuffer

@synthesize BuffSize;
@synthesize buffer;
@@ -46,14 +46,14 @@
@synthesize count;
@synthesize ptr;

-+(ANTLRPtrBuffer *)newANTLRPtrBuffer
++(PtrBuffer *)newPtrBuffer
{
-    return [[ANTLRPtrBuffer alloc] init];
+    return [[PtrBuffer alloc] init];
}

-+(ANTLRPtrBuffer *)newANTLRPtrBufferWithLen:(NSInteger)cnt
++(PtrBuffer *)newPtrBufferWithLen:(NSInteger)cnt
{
-    return [[ANTLRPtrBuffer alloc] initWithLen:cnt];
+    return [[PtrBuffer alloc] initWithLen:cnt];
}

-(id)init
@@ -95,9 +95,9 @@
-(void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRPtrBuffer" );
+    NSLog( @"called dealloc in PtrBuffer" );
#endif
-    ANTLRLinkBase *tmp, *rtmp;
+    LinkBase *tmp, *rtmp;
NSInteger idx;

if ( self.fNext != nil ) {
@@ -105,7 +105,7 @@
tmp = ptrBuffer[idx];
while ( tmp ) {
rtmp = tmp;
-                if ([tmp isKindOfClass:[ANTLRLinkBase class]])
+                if ([tmp isKindOfClass:[LinkBase class]])
tmp = (id)tmp.fNext;
else
tmp = nil;
@@ -119,7 +119,7 @@

- (id) copyWithZone:(NSZone *)aZone
{
-    ANTLRPtrBuffer *copy;
+    PtrBuffer *copy;

copy = [[[self class] allocWithZone:aZone] init];
if ( buffer )
@@ -131,14 +131,14 @@

- (void)clear
{
-    ANTLRLinkBase *tmp, *rtmp;
+    LinkBase *tmp, *rtmp;
NSInteger idx;

for( idx = 0; idx < BuffSize; idx++ ) {
tmp = ptrBuffer[idx];
while ( tmp ) {
rtmp = tmp;
-            if ([tmp isKindOfClass:[ANTLRLinkBase class]])
+            if ([tmp isKindOfClass:[LinkBase class]])
tmp = (id)tmp.fNext;
else
tmp = nil;
@@ -280,7 +280,7 @@
return nil;
}

-- (void)addObjectsFromArray:(ANTLRPtrBuffer *)anArray
+- (void)addObjectsFromArray:(PtrBuffer *)anArray
{
NSInteger cnt, i;
cnt = [anArray count];
diff --git a/runtime/ObjC/Framework/PtrStack.h b/runtime/ObjC/Framework/PtrStack.h
index 7aa65a9..dfcb4fc 100644
--- a/runtime/ObjC/Framework/PtrStack.h
+++ b/runtime/ObjC/Framework/PtrStack.h
@@ -1,5 +1,5 @@
//
-//  ANTLRPtrStack.h
+//  PtrStack.h
//  ANTLR
//
//  Created by Alan Condit on 6/9/10.
@@ -7,25 +7,25 @@
//ptrBuffer

#import <Cocoa/Cocoa.h>
-#import "ANTLRBaseStack.h"
-#import "ANTLRRuleMemo.h"
+#import "BaseStack.h"
+#import "RuleMemo.h"

//#define GLOBAL_SCOPE       0
//#define LOCAL_SCOPE        1
#define HASHSIZE         101
#define HBUFSIZE      0x2000

-@interface ANTLRPtrStack : ANTLRBaseStack {
-	//ANTLRPtrStack *fNext;
+@interface PtrStack : BaseStack {
+	//PtrStack *fNext;
// TStringPool *fPool;
}

-//@property (copy) ANTLRPtrStack *fNext;
+//@property (copy) PtrStack *fNext;
//@property (copy) TStringPool *fPool;

// Contruction/Destruction
-+ (ANTLRPtrStack *)newANTLRPtrStack;
-+ (ANTLRPtrStack *)newANTLRPtrStack:(NSInteger)cnt;
++ (PtrStack *)newPtrStack;
++ (PtrStack *)newPtrStack:(NSInteger)cnt;
- (id)init;
- (id)initWithLen:(NSInteger)aLen;
- (void)dealloc;
diff --git a/runtime/ObjC/Framework/PtrStack.m b/runtime/ObjC/Framework/PtrStack.m
index 5b180f2..260e5c6 100644
--- a/runtime/ObjC/Framework/PtrStack.m
+++ b/runtime/ObjC/Framework/PtrStack.m
@@ -1,5 +1,5 @@
//
-//  ANTLRPtrStack.m
+//  PtrStack.m
//  ANTLR
//
//  Created by Alan Condit on 6/9/10.
@@ -8,22 +8,22 @@
#define SUCCESS (0)
#define FAILURE (-1)

-#import "ANTLRPtrStack.h"
-#import "ANTLRTree.h"
+#import "PtrStack.h"
+#import "Tree.h"

/*
- * Start of ANTLRPtrStack
+ * Start of PtrStack
*/
-@implementation ANTLRPtrStack
+@implementation PtrStack

-+(ANTLRPtrStack *)newANTLRPtrStack
++(PtrStack *)newPtrStack
{
-    return [[ANTLRPtrStack alloc] init];
+    return [[PtrStack alloc] init];
}

-+(ANTLRPtrStack *)newANTLRPtrStack:(NSInteger)cnt
++(PtrStack *)newPtrStack:(NSInteger)cnt
{
-    return [[ANTLRPtrStack alloc] initWithLen:cnt];
+    return [[PtrStack alloc] initWithLen:cnt];
}

-(id)init
@@ -45,14 +45,14 @@
-(void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRPtrStack" );
+    NSLog( @"called dealloc in PtrStack" );
#endif
[super dealloc];
}

--(void)deleteANTLRPtrStack:(ANTLRPtrStack *)np
+-(void)deletePtrStack:(PtrStack *)np
{
-    ANTLRLinkBase *tmp, *rtmp;
+    LinkBase *tmp, *rtmp;
NSInteger idx;

if ( self.fNext != nil ) {
@@ -71,7 +71,7 @@
#ifdef USERDOC
/*
*  HASH        hash entry to get index to table
- *  NSInteger hash( ANTLRPtrStack *self, char *s );
+ *  NSInteger hash( PtrStack *self, char *s );
*
*     Inputs:  NSString *s         string to find
*
@@ -99,14 +99,14 @@
*
*     Inputs:  NSString  *s       string to find
*
- *     Returns: ANTLRRuleMemo  *        pointer to entry
+ *     Returns: RuleMemo  *        pointer to entry
*
*  Last Revision 9/03/90
*/
#endif
-(id)lookup:(NSString *)s
{
-    ANTLRLinkBase *np;
+    LinkBase *np;

for( np = ptrBuffer[[self hash:s]]; np != nil; np = [np getfNext] ) {
if ( [s isEqualToString:[np getName]] ) {
@@ -119,9 +119,9 @@
#ifdef USERDOC
/*
*  INSTALL search hashed list for entry
- *  NSInteger install( ANTLRPtrStack *self, id sym );
+ *  NSInteger install( PtrStack *self, id sym );
*
- *     Inputs:  ANTLRRuleMemo    *sym   -- symbol ptr to install
+ *     Inputs:  RuleMemo    *sym   -- symbol ptr to install
*              NSInteger         scope -- level to find
*
*     Returns: Boolean     TRUE   if installed
@@ -132,7 +132,7 @@
#endif
-(id)install:(id)sym
{
-    ANTLRLinkBase *np;
+    LinkBase *np;

np = [self lookup:[sym getName]];
if ( np == nil ) {
diff --git a/runtime/ObjC/Framework/RecognitionException.h b/runtime/ObjC/Framework/RecognitionException.h
index 9bd799d..4929cc9 100644
--- a/runtime/ObjC/Framework/RecognitionException.h
+++ b/runtime/ObjC/Framework/RecognitionException.h
@@ -26,47 +26,47 @@


#import <Cocoa/Cocoa.h>
-#import "ANTLRRuntimeException.h"
-#import "ANTLRToken.h"
-#import "ANTLRIntStream.h"
-#import "ANTLRBaseTree.h"
+#import "RuntimeException.h"
+#import "Token.h"
+#import "IntStream.h"
+#import "BaseTree.h"

-@interface ANTLRRecognitionException : ANTLRRuntimeException {
-	id<ANTLRIntStream> input;
+@interface RecognitionException : RuntimeException {
+	id<IntStream> input;
NSInteger index;
-	id<ANTLRToken> token;
-	id<ANTLRBaseTree> node;
+	id<Token> token;
+	id<BaseTree> node;
unichar c;
NSUInteger line;
NSUInteger charPositionInLine;
}

-@property (retain, getter=getStream, setter=setStream:) id<ANTLRIntStream> input;
+@property (retain, getter=getStream, setter=setStream:) id<IntStream> input;
@property (assign) NSInteger index;
-@property (retain, getter=getToken, setter=setToken:) id<ANTLRToken>token;
-@property (retain, getter=getNode, setter=setNode:) id<ANTLRBaseTree>node;
+@property (retain, getter=getToken, setter=setToken:) id<Token>token;
+@property (retain, getter=getNode, setter=setNode:) id<BaseTree>node;
@property (assign) unichar c;
@property (assign) NSUInteger line;
@property (assign) NSUInteger charPositionInLine;

+ (id) newException;
-+ (id) newException:(id<ANTLRIntStream>) anInputStream;
++ (id) newException:(id<IntStream>) anInputStream;
- (id) init;
-- (id) initWithStream:(id<ANTLRIntStream>)anInputStream;
-- (id) initWithStream:(id<ANTLRIntStream>)anInputStream reason:(NSString *)aReason;
+- (id) initWithStream:(id<IntStream>)anInputStream;
+- (id) initWithStream:(id<IntStream>)anInputStream reason:(NSString *)aReason;
- (id) initWithName:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;

- (NSInteger) unexpectedType;
-- (id<ANTLRToken>)getUnexpectedToken;
+- (id<Token>)getUnexpectedToken;

-- (id<ANTLRIntStream>) getStream;
-- (void) setStream: (id<ANTLRIntStream>) aStream;
+- (id<IntStream>) getStream;
+- (void) setStream: (id<IntStream>) aStream;

-- (id<ANTLRToken>) getToken;
-- (void) setToken: (id<ANTLRToken>) aToken;
+- (id<Token>) getToken;
+- (void) setToken: (id<Token>) aToken;

-- (id<ANTLRBaseTree>) getNode;
-- (void) setNode: (id<ANTLRBaseTree>) aNode;
+- (id<BaseTree>) getNode;
+- (void) setNode: (id<BaseTree>) aNode;

- (NSString *)getMessage;

diff --git a/runtime/ObjC/Framework/RecognitionException.m b/runtime/ObjC/Framework/RecognitionException.m
index 0d0e11f..b7b0711 100644
--- a/runtime/ObjC/Framework/RecognitionException.m
+++ b/runtime/ObjC/Framework/RecognitionException.m
@@ -24,11 +24,11 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRRecognitionException.h"
-#import "ANTLRTokenStream.h"
-#import "ANTLRTreeNodeStream.h"
+#import "RecognitionException.h"
+#import "TokenStream.h"
+#import "TreeNodeStream.h"

-@implementation ANTLRRecognitionException
+@implementation RecognitionException

@synthesize input;
@synthesize token;
@@ -38,17 +38,17 @@

+ (id) newException
{
-	return [[ANTLRRecognitionException alloc] init];
+	return [[RecognitionException alloc] init];
}

-+ (id) newException:(id<ANTLRIntStream>) anInputStream
++ (id) newException:(id<IntStream>) anInputStream
{
-	return [[ANTLRRecognitionException alloc] initWithStream:anInputStream];
+	return [[RecognitionException alloc] initWithStream:anInputStream];
}

-+ (id) newException:(id<ANTLRIntStream>) anInputStream reason:(NSString *)aReason
++ (id) newException:(id<IntStream>) anInputStream reason:(NSString *)aReason
{
-	return [[ANTLRRecognitionException alloc] initWithStream:anInputStream reason:aReason];
+	return [[RecognitionException alloc] initWithStream:anInputStream reason:aReason];
}

- (id) init
@@ -59,7 +59,7 @@
return self;
}

-- (id) initWithStream:(id<ANTLRIntStream>)anInputStream reason:(NSString *)aReason
+- (id) initWithStream:(id<IntStream>)anInputStream reason:(NSString *)aReason
{
self = [super initWithName:NSStringFromClass([self class]) reason:aReason userInfo:nil];
if ( self != nil ) {
@@ -67,16 +67,16 @@
index = input.index;

Class inputClass = [input class];
-		if ([inputClass conformsToProtocol:@protocol(ANTLRTokenStream)]) {
-			[self setToken:[(id<ANTLRTokenStream>)input LT:1]];
+		if ([inputClass conformsToProtocol:@protocol(TokenStream)]) {
+			[self setToken:[(id<TokenStream>)input LT:1]];
line = token.line;
charPositionInLine = token.charPositionInLine;
-		} else if ([inputClass conformsToProtocol:@protocol(ANTLRCharStream)]) {
+		} else if ([inputClass conformsToProtocol:@protocol(CharStream)]) {
c = (unichar)[input LA:1];
-			line = ((id<ANTLRCharStream>)input).line;
-			charPositionInLine = ((id<ANTLRCharStream>)input).charPositionInLine;
-		} else if ([inputClass conformsToProtocol:@protocol(ANTLRTreeNodeStream)]) {
-			[self setNode:[(id<ANTLRTreeNodeStream>)input LT:1]];
+			line = ((id<CharStream>)input).getLine;
+			charPositionInLine = ((id<CharStream>)input).getCharPositionInLine;
+		} else if ([inputClass conformsToProtocol:@protocol(TreeNodeStream)]) {
+			[self setNode:[(id<TreeNodeStream>)input LT:1]];
line = [node line];
charPositionInLine = [node charPositionInLine];
} else {
@@ -86,7 +86,7 @@
return self;
}

-- (id) initWithStream:(id<ANTLRIntStream>)anInputStream
+- (id) initWithStream:(id<IntStream>)anInputStream
{
self = [super initWithName:NSStringFromClass([self class]) reason:@"Runtime Exception" userInfo:nil];
if ( self != nil ) {
@@ -105,7 +105,7 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRRecognitionException" );
+    NSLog( @"called dealloc in RecognitionException" );
#endif
if ( input ) [input release];
if ( token ) [token release];
@@ -124,7 +124,7 @@
}
}

-- (id<ANTLRToken>)getUnexpectedToken
+- (id<Token>)getUnexpectedToken
{
return token;
}
@@ -147,12 +147,12 @@
//----------------------------------------------------------
//  input
//----------------------------------------------------------
-- (id<ANTLRIntStream>) getStream
+- (id<IntStream>) getStream
{
return input;
}

-- (void) setStream: (id<ANTLRIntStream>) aStream
+- (void) setStream: (id<IntStream>) aStream
{
if ( input != aStream ) {
if ( input ) [input release];
@@ -164,12 +164,12 @@
//----------------------------------------------------------
//  token
//----------------------------------------------------------
-- (id<ANTLRToken>) getToken
+- (id<Token>) getToken
{
return token;
}

-- (void) setToken: (id<ANTLRToken>) aToken
+- (void) setToken: (id<Token>) aToken
{
if (token != aToken) {
if ( token ) [token release];
@@ -181,12 +181,12 @@
//----------------------------------------------------------
//  node
//----------------------------------------------------------
-- (id<ANTLRBaseTree>) getNode
+- (id<BaseTree>) getNode
{
return node;
}

-- (void) setNode: (id<ANTLRBaseTree>) aNode
+- (void) setNode: (id<BaseTree>) aNode
{
if (node != aNode) {
if ( node ) [node release];
@@ -197,7 +197,7 @@

- (NSString *)getMessage
{
-    return @"Fix getMessage in ANTLRRecognitionException";
+    return @"Fix getMessage in RecognitionException";
}

- (NSUInteger)charPositionInLine
diff --git a/runtime/ObjC/Framework/RecognizerSharedState.h b/runtime/ObjC/Framework/RecognizerSharedState.h
index 0878dba..354af13 100755
--- a/runtime/ObjC/Framework/RecognizerSharedState.h
+++ b/runtime/ObjC/Framework/RecognizerSharedState.h
@@ -25,12 +25,12 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRToken.h"
+#import "Token.h"
#import "ANTLRBitSet.h"
-#import "ANTLRRuleStack.h"
+#import "RuleStack.h"
#import "AMutableArray.h"

-@interface ANTLRRecognizerSharedState : NSObject {
+@interface RecognizerSharedState : NSObject {
__strong AMutableArray *following;  // a stack of FOLLOW bitsets used for context sensitive prediction and recovery
NSInteger _fsp;                     // Follow stack pointer
BOOL errorRecovery;                 // are we recovering?
@@ -38,9 +38,9 @@
BOOL failed;                        // indicate that some match failed
NSInteger syntaxErrors;
NSInteger backtracking;             // the level of backtracking
-	__strong ANTLRRuleStack *ruleMemo;	// store previous results of matching rules so we don't have to do it again. Hook in incremental stuff here, too.
+	__strong RuleStack *ruleMemo;	// store previous results of matching rules so we don't have to do it again. Hook in incremental stuff here, too.

-	__strong id<ANTLRToken> token;
+	__strong id<Token> token;
NSInteger  tokenStartCharIndex;
NSUInteger tokenStartLine;
NSUInteger tokenStartCharPositionInLine;
@@ -56,8 +56,8 @@
@property (assign, getter=getFailed, setter=setFailed:) BOOL failed;
@property (assign) NSInteger syntaxErrors;
@property (assign, getter=getBacktracking, setter=setBacktracking:) NSInteger backtracking;
-@property (retain, getter=getRuleMemo, setter=setRuleMemo:) ANTLRRuleStack *ruleMemo;
-@property (copy, getter=getToken, setter=setToken:) id<ANTLRToken> token;
+@property (retain, getter=getRuleMemo, setter=setRuleMemo:) RuleStack *ruleMemo;
+@property (copy, getter=getToken, setter=setToken:) id<Token> token;
@property (getter=type,setter=setType:) NSUInteger type;
@property (getter=channel,setter=setChannel:) NSUInteger channel;
@property (getter=getTokenStartLine,setter=setTokenStartLine:) NSUInteger tokenStartLine;
@@ -65,16 +65,16 @@
@property (getter=getTokenStartCharIndex,setter=setTokenStartCharIndex:) NSInteger tokenStartCharIndex;
@property (retain, getter=text, setter=setText:) NSString *text;

-+ (ANTLRRecognizerSharedState *) newANTLRRecognizerSharedState;
-+ (ANTLRRecognizerSharedState *) newANTLRRecognizerSharedStateWithRuleLen:(NSInteger)aLen;
-+ (ANTLRRecognizerSharedState *) newANTLRRecognizerSharedState:(ANTLRRecognizerSharedState *)aState;
++ (RecognizerSharedState *) newRecognizerSharedState;
++ (RecognizerSharedState *) newRecognizerSharedStateWithRuleLen:(NSInteger)aLen;
++ (RecognizerSharedState *) newRecognizerSharedState:(RecognizerSharedState *)aState;

- (id) init;
- (id) initWithRuleLen:(NSInteger)aLen;
-- (id) initWithState:(ANTLRRecognizerSharedState *)state;
+- (id) initWithState:(RecognizerSharedState *)state;

-- (id<ANTLRToken>) getToken;
-- (void) setToken:(id<ANTLRToken>) theToken;
+- (id<Token>) getToken;
+- (void) setToken:(id<Token>) theToken;

- (NSUInteger)type;
- (void) setType:(NSUInteger) theTokenType;
@@ -97,8 +97,8 @@

- (AMutableArray *) getFollowing;
- (void)setFollowing:(AMutableArray *)aFollow;
-- (ANTLRRuleStack *) getRuleMemo;
-- (void)setRuleMemo:(ANTLRRuleStack *)aRuleMemo;
+- (RuleStack *) getRuleMemo;
+- (void)setRuleMemo:(RuleStack *)aRuleMemo;
- (BOOL) isErrorRecovery;
- (void) setIsErrorRecovery: (BOOL) flag;

diff --git a/runtime/ObjC/Framework/RecognizerSharedState.m b/runtime/ObjC/Framework/RecognizerSharedState.m
index 79dda2d..f964668 100755
--- a/runtime/ObjC/Framework/RecognizerSharedState.m
+++ b/runtime/ObjC/Framework/RecognizerSharedState.m
@@ -24,13 +24,13 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRRecognizerSharedState.h"
-#import "ANTLRCharStream.h"
-#import "ANTLRCommonToken.h"
-#import "ANTLRMismatchedTokenException.h"
-#import "ANTLRMismatchedRangeException.h"
+#import "RecognizerSharedState.h"
+#import "CharStream.h"
+#import "CommonToken.h"
+#import "MismatchedTokenException.h"
+#import "MismatchedRangeException.h"

-@implementation ANTLRRecognizerSharedState
+@implementation RecognizerSharedState

@synthesize following;
@synthesize _fsp;
@@ -48,24 +48,24 @@
@synthesize tokenStartCharIndex;
@synthesize text;

-+ (ANTLRRecognizerSharedState *) newANTLRRecognizerSharedState
++ (RecognizerSharedState *) newRecognizerSharedState
{
-    return [[[ANTLRRecognizerSharedState alloc] init] retain];
+    return [[[RecognizerSharedState alloc] init] retain];
}

-+ (ANTLRRecognizerSharedState *) newANTLRRecognizerSharedStateWithRuleLen:(NSInteger)aLen
++ (RecognizerSharedState *) newRecognizerSharedStateWithRuleLen:(NSInteger)aLen
{
-    return [[[ANTLRRecognizerSharedState alloc] initWithRuleLen:aLen] retain];
+    return [[[RecognizerSharedState alloc] initWithRuleLen:aLen] retain];
}

-+ (ANTLRRecognizerSharedState *) newANTLRRecognizerSharedState:(ANTLRRecognizerSharedState *)aState
++ (RecognizerSharedState *) newRecognizerSharedState:(RecognizerSharedState *)aState
{
-    return [[[ANTLRRecognizerSharedState alloc] initWithState:aState] retain];
+    return [[[RecognizerSharedState alloc] initWithState:aState] retain];
}

- (id) init
{
-    ANTLRHashRule *aHashRule;
+    HashRule *aHashRule;
if ((self = [super init]) != nil ) {
following = [[AMutableArray arrayWithCapacity:10] retain];
_fsp = -1;
@@ -77,9 +77,9 @@
tokenStartCharIndex = -1;
tokenStartLine = 0;
int cnt = 200;
-		ruleMemo = [[ANTLRRuleStack newANTLRRuleStack:cnt] retain];
+		ruleMemo = [[RuleStack newRuleStack:cnt] retain];
for (int i = 0; i < cnt; i++ ) {
-            aHashRule = [[ANTLRHashRule newANTLRHashRuleWithLen:17] retain];
+            aHashRule = [[HashRule newHashRuleWithLen:17] retain];
[ruleMemo addObject:aHashRule];
}
#ifdef DONTUSEYET
@@ -96,7 +96,7 @@

- (id) initWithRuleLen:(NSInteger)aLen
{
-    ANTLRHashRule *aHashRule;
+    HashRule *aHashRule;
if ((self = [super init]) != nil ) {
following = [[AMutableArray arrayWithCapacity:10] retain];
_fsp = -1;
@@ -107,9 +107,9 @@
backtracking = 0;			// the level of backtracking
tokenStartCharIndex = -1;
tokenStartLine = 0;
-		ruleMemo = [[ANTLRRuleStack newANTLRRuleStack:aLen] retain];
+		ruleMemo = [[RuleStack newRuleStack:aLen] retain];
for (int i = 0; i < aLen; i++ ) {
-            aHashRule = [[ANTLRHashRule newANTLRHashRuleWithLen:17] retain];
+            aHashRule = [[HashRule newHashRuleWithLen:17] retain];
[ruleMemo addObject:aHashRule];
}
#ifdef DONTUSEYET
@@ -124,9 +124,9 @@
return self;
}

-- (id) initWithState:(ANTLRRecognizerSharedState *)aState
+- (id) initWithState:(RecognizerSharedState *)aState
{
-    ANTLRHashRule *aHashRule;
+    HashRule *aHashRule;
if ( [following count] < [aState.following count] ) {
//        following = new BitSet[state.following.size];
}
@@ -139,9 +139,9 @@
backtracking = aState.backtracking;
if ( aState.ruleMemo == nil ) {
int cnt = 200;
-        ruleMemo = [[ANTLRRuleStack newANTLRRuleStack:cnt] retain];
+        ruleMemo = [[RuleStack newRuleStack:cnt] retain];
for (int i = 0; i < cnt; i++ ) {
-            aHashRule = [[ANTLRHashRule newANTLRHashRuleWithLen:17] retain];
+            aHashRule = [[HashRule newHashRuleWithLen:17] retain];
[ruleMemo addObject:aHashRule];
}
}
@@ -150,7 +150,7 @@
if ( [ruleMemo count] == 0 ) {
int cnt = [ruleMemo length];
for (int i = 0; i < cnt; i++ ) {
-                [ruleMemo addObject:[[ANTLRHashRule newANTLRHashRuleWithLen:17] retain]];
+                [ruleMemo addObject:[[HashRule newHashRuleWithLen:17] retain]];
}
}
else {
@@ -170,7 +170,7 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRRecognizerSharedState" );
+    NSLog( @"called dealloc in RecognizerSharedState" );
#endif
if ( token ) [token release];
if ( following ) [following release];
@@ -181,12 +181,12 @@
// token stuff
#pragma mark Tokens

-- (id<ANTLRToken>)getToken
+- (id<Token>)getToken
{
return token;
}

-- (void) setToken: (id<ANTLRToken>) aToken
+- (void) setToken: (id<Token>) aToken
{
if (token != aToken) {
[aToken retain];
@@ -236,7 +236,7 @@
}

// error handling
-- (void) reportError:(ANTLRRecognitionException *)e
+- (void) reportError:(RecognitionException *)e
{
NSLog(@"%@", e.name);
}
@@ -255,12 +255,12 @@
following = aFollow;
}

-- (ANTLRRuleStack *) getRuleMemo
+- (RuleStack *) getRuleMemo
{
return ruleMemo;
}

-- (void)setRuleMemo:(ANTLRRuleStack *)aRuleMemo
+- (void)setRuleMemo:(RuleStack *)aRuleMemo
{
if ( ruleMemo != aRuleMemo ) {
if ( ruleMemo ) [ruleMemo release];
diff --git a/runtime/ObjC/Framework/RewriteRuleElementStream.h b/runtime/ObjC/Framework/RewriteRuleElementStream.h
index 46e0190..68d7b53 100644
--- a/runtime/ObjC/Framework/RewriteRuleElementStream.h
+++ b/runtime/ObjC/Framework/RewriteRuleElementStream.h
@@ -25,10 +25,10 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRTreeAdaptor.h"
+#import "TreeAdaptor.h"

// TODO: this should be separated into stream and enumerator classes
-@interface ANTLRRewriteRuleElementStream : NSObject {
+@interface RewriteRuleElementStream : NSObject {
NSInteger cursor;
BOOL dirty;        ///< indicates whether the stream should return copies of its elements, set to true after a call to -reset
BOOL isSingleElement;
@@ -36,7 +36,7 @@
__strong AMutableArray *elements;

__strong NSString *elementDescription;
-    __strong id<ANTLRTreeAdaptor> treeAdaptor;
+    __strong id<TreeAdaptor> treeAdaptor;
}

@property (assign) NSInteger cursor;
@@ -45,32 +45,32 @@
@property (assign) id singleElement;
@property (assign) AMutableArray *elements;
@property (assign) NSString *elementDescription;
-@property (retain) id<ANTLRTreeAdaptor> treeAdaptor;
+@property (retain) id<TreeAdaptor> treeAdaptor;

-+ (ANTLRRewriteRuleElementStream*) newANTLRRewriteRuleElementStream:(id<ANTLRTreeAdaptor>)aTreeAdaptor
++ (RewriteRuleElementStream*) newRewriteRuleElementStream:(id<TreeAdaptor>)aTreeAdaptor
description:(NSString *)anElementDescription;
-+ (ANTLRRewriteRuleElementStream*) newANTLRRewriteRuleElementStream:(id<ANTLRTreeAdaptor>)aTreeAdaptor
++ (RewriteRuleElementStream*) newRewriteRuleElementStream:(id<TreeAdaptor>)aTreeAdaptor
description:(NSString *)anElementDescription
element:(id)anElement;
-+ (ANTLRRewriteRuleElementStream*) newANTLRRewriteRuleElementStream:(id<ANTLRTreeAdaptor>)aTreeAdaptor
++ (RewriteRuleElementStream*) newRewriteRuleElementStream:(id<TreeAdaptor>)aTreeAdaptor
description:(NSString *)anElementDescription
elements:(NSArray *)theElements;

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription;
-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription element:(id)anElement;
-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements;
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription;
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription element:(id)anElement;
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements;

- (void)reset;

-- (id<ANTLRTreeAdaptor>) getTreeAdaptor;
-- (void) setTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor;
+- (id<TreeAdaptor>) getTreeAdaptor;
+- (void) setTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor;

- (void) addElement:(id)anElement;
- (NSInteger) size;

- (BOOL) hasNext;
-- (id<ANTLRBaseTree>) nextTree;
-- (id<ANTLRBaseTree>) _next;       // internal: TODO: redesign if necessary. maybe delegate
+- (id<BaseTree>) nextTree;
+- (id<BaseTree>) _next;       // internal: TODO: redesign if necessary. maybe delegate

- (id) copyElement:(id)element;
- (id) toTree:(id)element;
diff --git a/runtime/ObjC/Framework/RewriteRuleElementStream.m b/runtime/ObjC/Framework/RewriteRuleElementStream.m
index 138163c..66a4004 100644
--- a/runtime/ObjC/Framework/RewriteRuleElementStream.m
+++ b/runtime/ObjC/Framework/RewriteRuleElementStream.m
@@ -24,9 +24,9 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRRewriteRuleElementStream.h"
+#import "RewriteRuleElementStream.h"

-@implementation ANTLRRewriteRuleElementStream
+@implementation RewriteRuleElementStream

@synthesize cursor;
@synthesize dirty;
@@ -36,32 +36,32 @@
@synthesize elementDescription;
@synthesize treeAdaptor;

-+ (ANTLRRewriteRuleElementStream *) newANTLRRewriteRuleElementStream:(id<ANTLRTreeAdaptor>)aTreeAdaptor
++ (RewriteRuleElementStream *) newRewriteRuleElementStream:(id<TreeAdaptor>)aTreeAdaptor
description:(NSString *)anElementDescription
{
-    return [[ANTLRRewriteRuleElementStream alloc] initWithTreeAdaptor:aTreeAdaptor
+    return [[RewriteRuleElementStream alloc] initWithTreeAdaptor:aTreeAdaptor
description:anElementDescription];
}

-+ (ANTLRRewriteRuleElementStream *) newANTLRRewriteRuleElementStream:(id<ANTLRTreeAdaptor>)aTreeAdaptor
++ (RewriteRuleElementStream *) newRewriteRuleElementStream:(id<TreeAdaptor>)aTreeAdaptor
description:(NSString *)anElementDescription
element:(id)anElement
{
-    return [[ANTLRRewriteRuleElementStream alloc] initWithTreeAdaptor:aTreeAdaptor
+    return [[RewriteRuleElementStream alloc] initWithTreeAdaptor:aTreeAdaptor
description:anElementDescription
element:anElement];
}

-+ (ANTLRRewriteRuleElementStream *) newANTLRRewriteRuleElementStream:(id<ANTLRTreeAdaptor>)aTreeAdaptor
++ (RewriteRuleElementStream *) newRewriteRuleElementStream:(id<TreeAdaptor>)aTreeAdaptor
description:(NSString *)anElementDescription
elements:(NSArray *)theElements;
{
-    return [[ANTLRRewriteRuleElementStream alloc] initWithTreeAdaptor:aTreeAdaptor
+    return [[RewriteRuleElementStream alloc] initWithTreeAdaptor:aTreeAdaptor
description:anElementDescription
elements:theElements];
}

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription
{
if ((self = [super init]) != nil) {
cursor = 0;
@@ -76,7 +76,7 @@
return self;
}

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription element:(id)anElement
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription element:(id)anElement
{
if ((self = [super init]) != nil) {
cursor = 0;
@@ -92,7 +92,7 @@
return self;
}

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements
{
self = [super init];
if (self) {
@@ -111,7 +111,7 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRRewriteRuleElementStream" );
+    NSLog( @"called dealloc in RewriteRuleElementStream" );
#endif
if ( singleElement && isSingleElement ) [singleElement release];
else if ( elements && !isSingleElement ) [elements release];
@@ -126,12 +126,12 @@
dirty = YES;
}

-- (id<ANTLRTreeAdaptor>) getTreeAdaptor
+- (id<TreeAdaptor>) getTreeAdaptor
{
return treeAdaptor;
}

-- (void) setTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor
+- (void) setTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor
{
if (treeAdaptor != aTreeAdaptor) {
if ( treeAdaptor ) [treeAdaptor release];
@@ -180,7 +180,7 @@
[elements addObject:anElement];
}

-- (id<ANTLRBaseTree>) nextTree
+- (id<BaseTree>) nextTree
{
NSInteger n = [self size];
if ( dirty && (cursor >= 0 && n == 1)) {
@@ -236,7 +236,7 @@
return nil;
}

-- (id<ANTLRBaseTree>) toTree:(id)element
+- (id<BaseTree>) toTree:(id)element
{
return element;
}
diff --git a/runtime/ObjC/Framework/RewriteRuleNodeStream.h b/runtime/ObjC/Framework/RewriteRuleNodeStream.h
index 2789e45..a3395f5 100755
--- a/runtime/ObjC/Framework/RewriteRuleNodeStream.h
+++ b/runtime/ObjC/Framework/RewriteRuleNodeStream.h
@@ -25,22 +25,22 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRRewriteRuleElementStream.h"
+#import "RewriteRuleElementStream.h"

-@interface ANTLRRewriteRuleNodeStream : ANTLRRewriteRuleElementStream {
+@interface RewriteRuleNodeStream : RewriteRuleElementStream {

}

-+ (ANTLRRewriteRuleNodeStream *) newANTLRRewriteRuleNodeStream:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription;
-+ (ANTLRRewriteRuleNodeStream *) newANTLRRewriteRuleNodeStream:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription element:(id)anElement;
-+ (ANTLRRewriteRuleNodeStream *) newANTLRRewriteRuleNode:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements;
++ (RewriteRuleNodeStream *) newRewriteRuleNodeStream:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription;
++ (RewriteRuleNodeStream *) newRewriteRuleNodeStream:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription element:(id)anElement;
++ (RewriteRuleNodeStream *) newRewriteRuleNode:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements;

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription;
-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription element:(id)anElement;
-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements;
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription;
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription element:(id)anElement;
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements;

- (id) nextNode;
-- (id) toTree:(id<ANTLRBaseTree>)element;
+- (id) toTree:(id<BaseTree>)element;
- (id) dup:(id)element;

@end
diff --git a/runtime/ObjC/Framework/RewriteRuleNodeStream.m b/runtime/ObjC/Framework/RewriteRuleNodeStream.m
index 8dfedd7..9db28ee 100755
--- a/runtime/ObjC/Framework/RewriteRuleNodeStream.m
+++ b/runtime/ObjC/Framework/RewriteRuleNodeStream.m
@@ -1,32 +1,32 @@
//
-//  ANTLRRewriteRuleNodeStream.m
+//  RewriteRuleNodeStream.m
//  ANTLR
//
//  Created by Kay Röpke on 7/16/07.
//  Copyright 2007 classDump. All rights reserved.
//

-#import "ANTLRRewriteRuleNodeStream.h"
-#import "ANTLRRuntimeException.h"
+#import "RewriteRuleNodeStream.h"
+#import "RuntimeException.h"

-@implementation ANTLRRewriteRuleNodeStream
+@implementation RewriteRuleNodeStream

-+ (ANTLRRewriteRuleNodeStream*) newANTLRRewriteRuleNodeStream:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription;
++ (RewriteRuleNodeStream*) newRewriteRuleNodeStream:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription;
{
-    return [[ANTLRRewriteRuleNodeStream alloc] initWithTreeAdaptor:aTreeAdaptor description:anElementDescription];
+    return [[RewriteRuleNodeStream alloc] initWithTreeAdaptor:aTreeAdaptor description:anElementDescription];
}

-+ (ANTLRRewriteRuleNodeStream*) newANTLRRewriteRuleNodeStream:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription element:(id)anElement;
++ (RewriteRuleNodeStream*) newRewriteRuleNodeStream:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription element:(id)anElement;
{
-    return [[ANTLRRewriteRuleNodeStream alloc] initWithTreeAdaptor:aTreeAdaptor description:anElementDescription element:anElement];
+    return [[RewriteRuleNodeStream alloc] initWithTreeAdaptor:aTreeAdaptor description:anElementDescription element:anElement];
}

-+ (ANTLRRewriteRuleNodeStream*) newANTLRRewriteRuleNode:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements;
++ (RewriteRuleNodeStream*) newRewriteRuleNode:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements;
{
-    return [[ANTLRRewriteRuleNodeStream alloc] initWithTreeAdaptor:aTreeAdaptor description:anElementDescription elements:theElements];
+    return [[RewriteRuleNodeStream alloc] initWithTreeAdaptor:aTreeAdaptor description:anElementDescription elements:theElements];
}

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription
{
if ((self = [super initWithTreeAdaptor:aTreeAdaptor description:anElementDescription]) != nil) {
dirty = NO;
@@ -35,7 +35,7 @@
return self;
}

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription element:(id)anElement
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription element:(id)anElement
{
if ((self = [super initWithTreeAdaptor:aTreeAdaptor description:anElementDescription element:anElement]) != nil) {
dirty = NO;
@@ -43,7 +43,7 @@
return self;
}

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements
{
if ((self = [super init]) != nil) {
dirty = NO;
@@ -60,7 +60,7 @@
return [self _next];
}

-- (id<ANTLRBaseTree>) toTree:(id<ANTLRBaseTree>)element
+- (id<BaseTree>) toTree:(id<BaseTree>)element
{
return [treeAdaptor dupNode:element];
}
@@ -68,7 +68,7 @@
- (id) dup:(id)element
{
return [treeAdaptor dupTree:element];
-    @throw [ANTLRRuntimeException newException:@"ANTLRUnsupportedOperationException" reason:@"dup can't be called for a node stream."];
+    @throw [RuntimeException newException:@"UnsupportedOperationException" reason:@"dup can't be called for a node stream."];
}

@end
diff --git a/runtime/ObjC/Framework/RewriteRuleSubtreeStream.h b/runtime/ObjC/Framework/RewriteRuleSubtreeStream.h
index 1d18b24..cd18396 100644
--- a/runtime/ObjC/Framework/RewriteRuleSubtreeStream.h
+++ b/runtime/ObjC/Framework/RewriteRuleSubtreeStream.h
@@ -25,24 +25,24 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRRewriteRuleElementStream.h"
+#import "RewriteRuleElementStream.h"

-@interface ANTLRRewriteRuleSubtreeStream : ANTLRRewriteRuleElementStream {
+@interface RewriteRuleSubtreeStream : RewriteRuleElementStream {

}

-+ (ANTLRRewriteRuleSubtreeStream *) newANTLRRewriteRuleSubtreeStream:(id<ANTLRTreeAdaptor>)aTreeAdaptor
++ (RewriteRuleSubtreeStream *) newRewriteRuleSubtreeStream:(id<TreeAdaptor>)aTreeAdaptor
description:(NSString *)anElementDescription;
-+ (ANTLRRewriteRuleSubtreeStream *) newANTLRRewriteRuleSubtreeStream:(id<ANTLRTreeAdaptor>)aTreeAdaptor
++ (RewriteRuleSubtreeStream *) newRewriteRuleSubtreeStream:(id<TreeAdaptor>)aTreeAdaptor
description:(NSString *)anElementDescription
element:(id)anElement;
-+ (ANTLRRewriteRuleSubtreeStream *) newANTLRRewriteRuleSubtreeStream:(id<ANTLRTreeAdaptor>)aTreeAdaptor
++ (RewriteRuleSubtreeStream *) newRewriteRuleSubtreeStream:(id<TreeAdaptor>)aTreeAdaptor
description:(NSString *)anElementDescription
elements:(NSArray *)theElements;

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription;
-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription element:(id)anElement;
-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements;
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription;
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription element:(id)anElement;
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements;

- (id) nextNode;
- (id) dup:(id)element;
diff --git a/runtime/ObjC/Framework/RewriteRuleSubtreeStream.m b/runtime/ObjC/Framework/RewriteRuleSubtreeStream.m
index 48910bd..6100b91 100644
--- a/runtime/ObjC/Framework/RewriteRuleSubtreeStream.m
+++ b/runtime/ObjC/Framework/RewriteRuleSubtreeStream.m
@@ -1,5 +1,5 @@
//
-//  ANTLRRewriteRuleSubtreeStream.m
+//  RewriteRuleSubtreeStream.m
//  ANTLR
//
//  Created by Kay Röpke on 7/16/07.
@@ -29,37 +29,37 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRRewriteRuleSubtreeStream.h"
+#import "RewriteRuleSubtreeStream.h"


-@implementation ANTLRRewriteRuleSubtreeStream
+@implementation RewriteRuleSubtreeStream

-+ (ANTLRRewriteRuleSubtreeStream*) newANTLRRewriteRuleSubtreeStream:(id<ANTLRTreeAdaptor>)aTreeAdaptor
++ (RewriteRuleSubtreeStream*) newRewriteRuleSubtreeStream:(id<TreeAdaptor>)aTreeAdaptor
description:(NSString *)anElementDescription;
{
-    return [[ANTLRRewriteRuleSubtreeStream alloc] initWithTreeAdaptor:aTreeAdaptor
+    return [[RewriteRuleSubtreeStream alloc] initWithTreeAdaptor:aTreeAdaptor
description:anElementDescription];
}

-+ (ANTLRRewriteRuleSubtreeStream*) newANTLRRewriteRuleSubtreeStream:(id<ANTLRTreeAdaptor>)aTreeAdaptor
++ (RewriteRuleSubtreeStream*) newRewriteRuleSubtreeStream:(id<TreeAdaptor>)aTreeAdaptor
description:(NSString *)anElementDescription
element:(id)anElement;
{
-    return [[ANTLRRewriteRuleSubtreeStream alloc] initWithTreeAdaptor:aTreeAdaptor
+    return [[RewriteRuleSubtreeStream alloc] initWithTreeAdaptor:aTreeAdaptor
description:anElementDescription
element:anElement];
}

-+ (ANTLRRewriteRuleSubtreeStream*) newANTLRRewriteRuleSubtreeStream:(id<ANTLRTreeAdaptor>)aTreeAdaptor
++ (RewriteRuleSubtreeStream*) newRewriteRuleSubtreeStream:(id<TreeAdaptor>)aTreeAdaptor
description:(NSString *)anElementDescription
elements:(NSArray *)theElements;
{
-    return [[ANTLRRewriteRuleSubtreeStream alloc] initWithTreeAdaptor:aTreeAdaptor
+    return [[RewriteRuleSubtreeStream alloc] initWithTreeAdaptor:aTreeAdaptor
description:anElementDescription
elements:theElements];
}

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription
{
if ((self = [super initWithTreeAdaptor:aTreeAdaptor description:anElementDescription]) != nil) {
dirty = NO;
@@ -68,7 +68,7 @@
return self;
}

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription element:(id)anElement
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription element:(id)anElement
{
if ((self = [super initWithTreeAdaptor:aTreeAdaptor description:anElementDescription element:anElement]) != nil) {
dirty = NO;
@@ -76,7 +76,7 @@
return self;
}

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)aTreeAdaptor description:(NSString *)anElementDescription elements:(NSArray *)theElements
{
if ((self = [super initWithTreeAdaptor:aTreeAdaptor description:anElementDescription elements:theElements]) != nil) {
dirty = NO;
diff --git a/runtime/ObjC/Framework/RewriteRuleTokenStream.h b/runtime/ObjC/Framework/RewriteRuleTokenStream.h
index 620a0bd..e47d666 100644
--- a/runtime/ObjC/Framework/RewriteRuleTokenStream.h
+++ b/runtime/ObjC/Framework/RewriteRuleTokenStream.h
@@ -25,31 +25,31 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRRewriteRuleElementStream.h"
+#import "RewriteRuleElementStream.h"


-@interface ANTLRRewriteRuleTokenStream : ANTLRRewriteRuleElementStream {
+@interface RewriteRuleTokenStream : RewriteRuleElementStream {

}

-+ (id) newANTLRRewriteRuleTokenStream:(id<ANTLRTreeAdaptor>)anAdaptor
++ (id) newRewriteRuleTokenStream:(id<TreeAdaptor>)anAdaptor
description:(NSString *)elementDescription;
/** Create a stream with one element */
-+ (id) newANTLRRewriteRuleTokenStream:(id<ANTLRTreeAdaptor>)adaptor
++ (id) newRewriteRuleTokenStream:(id<TreeAdaptor>)adaptor
description:(NSString *)elementDescription
element:(id) oneElement;
/** Create a stream, but feed off an existing list */
-+ (id) newANTLRRewriteRuleTokenStream:(id<ANTLRTreeAdaptor>)adaptor
++ (id) newRewriteRuleTokenStream:(id<TreeAdaptor>)adaptor
description:(NSString *)elementDescription
elements:(AMutableArray *)elements;

- (id) init;
-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)anAdaptor
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)anAdaptor
description:(NSString *)aDescription;
-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)anAdaptor
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)anAdaptor
description:(NSString *)aDescription
element:(id)element;
-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)anAdaptor
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)anAdaptor
description:(NSString *)aDescription
elements:(AMutableArray *)elements;

@@ -61,6 +61,6 @@
/** Don't convert to a tree unless they explicitly call nextTree.
*  This way we can do hetero tree nodes in rewrite.
*/
-- (id<ANTLRBaseTree>) toTree:(id<ANTLRToken>)element;
+- (id<BaseTree>) toTree:(id<Token>)element;

@end
diff --git a/runtime/ObjC/Framework/RewriteRuleTokenStream.m b/runtime/ObjC/Framework/RewriteRuleTokenStream.m
index 5aea3f8..137b457 100644
--- a/runtime/ObjC/Framework/RewriteRuleTokenStream.m
+++ b/runtime/ObjC/Framework/RewriteRuleTokenStream.m
@@ -1,5 +1,5 @@
//
-//  ANTLRRewriteRuleTokenStream.m
+//  RewriteRuleTokenStream.m
//  ANTLR
//
//  Created by Kay Röpke on 7/16/07.
@@ -29,36 +29,36 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRRewriteRuleTokenStream.h"
-#import "ANTLRRuntimeException.h"
-#import "ANTLRHashMap.h"
-#import "ANTLRMapElement.h"
+#import "RewriteRuleTokenStream.h"
+#import "RuntimeException.h"
+#import "HashMap.h"
+#import "MapElement.h"

-@implementation ANTLRRewriteRuleTokenStream
+@implementation RewriteRuleTokenStream

-+ (id) newANTLRRewriteRuleTokenStream:(id<ANTLRTreeAdaptor>)anAdaptor
++ (id) newRewriteRuleTokenStream:(id<TreeAdaptor>)anAdaptor
description:(NSString *)elementDescription
{
-    return [[ANTLRRewriteRuleTokenStream alloc] initWithTreeAdaptor:anAdaptor
+    return [[RewriteRuleTokenStream alloc] initWithTreeAdaptor:anAdaptor
description:elementDescription];
}

/** Create a stream with one element */
-+ (id) newANTLRRewriteRuleTokenStream:(id<ANTLRTreeAdaptor>)adaptor
++ (id) newRewriteRuleTokenStream:(id<TreeAdaptor>)adaptor
description:(NSString *)elementDescription
element:(id) oneElement
{
-    return [[ANTLRRewriteRuleTokenStream alloc] initWithTreeAdaptor:adaptor
+    return [[RewriteRuleTokenStream alloc] initWithTreeAdaptor:adaptor
description:elementDescription
element:oneElement];
}

/** Create a stream, but feed off an existing list */
-+ (id) newANTLRRewriteRuleTokenStream:(id<ANTLRTreeAdaptor>)adaptor
++ (id) newRewriteRuleTokenStream:(id<TreeAdaptor>)adaptor
description:(NSString *)elementDescription
elements:(AMutableArray *)elements
{
-    return [[ANTLRRewriteRuleTokenStream alloc] initWithTreeAdaptor:adaptor
+    return [[RewriteRuleTokenStream alloc] initWithTreeAdaptor:adaptor
description:elementDescription
elements:elements];
}
@@ -70,7 +70,7 @@
return self;
}

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)anAdaptor
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)anAdaptor
description:(NSString *)aDescription
{
if ((self = [super initWithTreeAdaptor:anAdaptor
@@ -79,7 +79,7 @@
return self;
}

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)anAdaptor
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)anAdaptor
description:(NSString *)aDescription
element:(id)anElement
{
@@ -90,7 +90,7 @@
return self;
}

-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)anAdaptor
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>)anAdaptor
description:(NSString *)aDescription
elements:(AMutableArray *)elementList
{
@@ -101,9 +101,9 @@
return self;
}

-- (id<ANTLRBaseTree>) nextNode
+- (id<BaseTree>) nextNode
{
-    id<ANTLRToken> t = [self _next];
+    id<Token> t = (id<Token>)[self _next];
return [treeAdaptor create:t];
}

@@ -115,14 +115,14 @@
/** Don't convert to a tree unless they explicitly call nextTree.
*  This way we can do hetero tree nodes in rewrite.
*/
-- (id<ANTLRBaseTree>) toTree:(id<ANTLRToken>)element
+- (id<BaseTree>) toTree:(id<Token>)element
{
-    return element;
+    return (id<BaseTree>)element;
}

- (id) copyElement:(id)element
{
-    @throw [ANTLRRuntimeException newException:@"copy can't be called for a token stream."];
+    @throw [RuntimeException newException:@"copy can't be called for a token stream."];
}

@end
diff --git a/runtime/ObjC/Framework/RuleMapElement.h b/runtime/ObjC/Framework/RuleMapElement.h
index e040b18..dfd752d 100644
--- a/runtime/ObjC/Framework/RuleMapElement.h
+++ b/runtime/ObjC/Framework/RuleMapElement.h
@@ -1,5 +1,5 @@
//
-//  ANTLRRuleMapElement.h
+//  RuleMapElement.h
//  ANTLR
//
//  Created by Alan Condit on 6/16/10.
@@ -30,17 +30,17 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRBaseMapElement.h"
+#import "BaseMapElement.h"

-@interface ANTLRRuleMapElement : ANTLRBaseMapElement {
+@interface RuleMapElement : BaseMapElement {
NSNumber *ruleNum;
}

@property (retain, getter=getRuleNum, setter=setRuleNum:) NSNumber *ruleNum;

-+ (ANTLRRuleMapElement *) newANTLRRuleMapElement;
-+ (ANTLRRuleMapElement *) newANTLRRuleMapElementWithIndex:(NSNumber *)anIdx;
-+ (ANTLRRuleMapElement *) newANTLRRuleMapElementWithIndex:(NSNumber *)anIdx RuleNum:(NSNumber *)aRuleNum;
++ (RuleMapElement *) newRuleMapElement;
++ (RuleMapElement *) newRuleMapElementWithIndex:(NSNumber *)anIdx;
++ (RuleMapElement *) newRuleMapElementWithIndex:(NSNumber *)anIdx RuleNum:(NSNumber *)aRuleNum;
- (id) init;
- (id) initWithAnIndex:(NSNumber *)anIdx;
- (id) initWithAnIndex:(NSNumber *)anIdx RuleNum:(NSNumber *)aRuleNum;
diff --git a/runtime/ObjC/Framework/RuleMapElement.m b/runtime/ObjC/Framework/RuleMapElement.m
index 0e8c463..5cc5e32 100644
--- a/runtime/ObjC/Framework/RuleMapElement.m
+++ b/runtime/ObjC/Framework/RuleMapElement.m
@@ -1,5 +1,5 @@
//
-//  ANTLRRuleMapElement.m
+//  RuleMapElement.m
//  ANTLR
//
//  Created by Alan Condit on 6/16/10.
@@ -29,26 +29,26 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRRuleMapElement.h"
+#import "RuleMapElement.h"


-@implementation ANTLRRuleMapElement
+@implementation RuleMapElement

@synthesize ruleNum;

-+ (ANTLRRuleMapElement *)newANTLRRuleMapElement
++ (RuleMapElement *)newRuleMapElement
{
-    return [[ANTLRRuleMapElement alloc] init];
+    return [[RuleMapElement alloc] init];
}

-+ (ANTLRRuleMapElement *)newANTLRRuleMapElementWithIndex:(NSNumber *)aNumber
++ (RuleMapElement *)newRuleMapElementWithIndex:(NSNumber *)aNumber
{
-    return [[ANTLRRuleMapElement alloc] initWithAnIndex:(NSNumber *)aNumber];
+    return [[RuleMapElement alloc] initWithAnIndex:(NSNumber *)aNumber];
}

-+ (ANTLRRuleMapElement *)newANTLRRuleMapElementWithIndex:(NSNumber *)aNumber RuleNum:(NSNumber *)aRuleNum
++ (RuleMapElement *)newRuleMapElementWithIndex:(NSNumber *)aNumber RuleNum:(NSNumber *)aRuleNum
{
-    return [[ANTLRRuleMapElement alloc] initWithAnIndex:aNumber RuleNum:aRuleNum];
+    return [[RuleMapElement alloc] initWithAnIndex:aNumber RuleNum:aRuleNum];
}

- (id) init
@@ -79,7 +79,7 @@

- (id) copyWithZone:(NSZone *)aZone
{
-    ANTLRRuleMapElement *copy;
+    RuleMapElement *copy;

copy = [super copyWithZone:aZone];
copy.ruleNum = ruleNum;
diff --git a/runtime/ObjC/Framework/RuleMemo.h b/runtime/ObjC/Framework/RuleMemo.h
index ed95af6..306a66f 100644
--- a/runtime/ObjC/Framework/RuleMemo.h
+++ b/runtime/ObjC/Framework/RuleMemo.h
@@ -1,5 +1,5 @@
//
-//  ANTLRRuleMemo.h
+//  RuleMemo.h
//  ANTLR
//
//  Created by Alan Condit on 6/16/10.
@@ -30,9 +30,9 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRLinkBase.h"
+#import "LinkBase.h"

-@interface ANTLRRuleMemo : ANTLRLinkBase {
+@interface RuleMemo : LinkBase {
NSNumber *startIndex;
NSNumber *stopIndex;
}
@@ -40,8 +40,8 @@
@property (retain, getter=getStartIndex, setter=setStartIndex:) NSNumber *startIndex;
@property (retain, getter=getStopIndex, setter=setStopIndex:) NSNumber *stopIndex;

-+ (ANTLRRuleMemo *)newANTLRRuleMemo;
-+ (ANTLRRuleMemo *)newANTLRRuleMemoWithStartIndex:(NSNumber *)aStartIndex StopIndex:(NSNumber *)aStopIndex;
++ (RuleMemo *)newRuleMemo;
++ (RuleMemo *)newRuleMemoWithStartIndex:(NSNumber *)aStartIndex StopIndex:(NSNumber *)aStopIndex;

- (id) init;
- (id) initWithStartIndex:(NSNumber *)aStartIndex StopIndex:(NSNumber *)aStopIndex;
@@ -49,7 +49,7 @@
- (NSInteger)count;
- (NSInteger)size;

-- (ANTLRRuleMemo *)getRuleWithStartIndex:(NSInteger)aStartIndex;
+- (RuleMemo *)getRuleWithStartIndex:(NSInteger)aStartIndex;
- (NSNumber *)getStartIndex:(NSInteger)aStartIndex;
- (NSNumber *)getStopIndex:(NSInteger)aStartIndex;
- (NSNumber *)getStartIndex;
diff --git a/runtime/ObjC/Framework/RuleMemo.m b/runtime/ObjC/Framework/RuleMemo.m
index 836d355..fcec5b3 100644
--- a/runtime/ObjC/Framework/RuleMemo.m
+++ b/runtime/ObjC/Framework/RuleMemo.m
@@ -1,5 +1,5 @@
//
-//  ANTLRRuleMemo.m
+//  RuleMemo.m
//  ANTLR
//
//  Created by Alan Condit on 6/16/10.
@@ -29,22 +29,22 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRRuleMemo.h"
+#import "RuleMemo.h"


-@implementation ANTLRRuleMemo
+@implementation RuleMemo

@synthesize startIndex;
@synthesize stopIndex;

-+ (ANTLRRuleMemo *)newANTLRRuleMemo
++ (RuleMemo *)newRuleMemo
{
-    return [[ANTLRRuleMemo alloc] init];
+    return [[RuleMemo alloc] init];
}

-+ (ANTLRRuleMemo *)newANTLRRuleMemoWithStartIndex:(NSNumber *)anIndex StopIndex:(NSNumber *)aStopIndex
++ (RuleMemo *)newRuleMemoWithStartIndex:(NSNumber *)anIndex StopIndex:(NSNumber *)aStopIndex
{
-    return [[ANTLRRuleMemo alloc] initWithStartIndex:anIndex StopIndex:aStopIndex];
+    return [[RuleMemo alloc] initWithStartIndex:anIndex StopIndex:aStopIndex];
}

- (id) init
@@ -69,7 +69,7 @@

- (id) copyWithZone:(NSZone *)aZone
{
-    ANTLRRuleMemo *copy;
+    RuleMemo *copy;

copy = [super copyWithZone:aZone];
copy.startIndex = startIndex;
@@ -91,9 +91,9 @@
return (2 * sizeof(id));
}

-- (ANTLRRuleMemo *)getRuleWithStartIndex:(NSInteger)aStartIndex
+- (RuleMemo *)getRuleWithStartIndex:(NSInteger)aStartIndex
{
-    ANTLRRuleMemo *aMatchMemo = self;
+    RuleMemo *aMatchMemo = self;
do {
if (aStartIndex == [aMatchMemo.startIndex integerValue] ) {
return aMatchMemo;
@@ -105,7 +105,7 @@

- (NSNumber *)getStartIndex:(NSInteger)aStartIndex
{
-    ANTLRRuleMemo *aMatchMemo = self;
+    RuleMemo *aMatchMemo = self;
do {
if (aStartIndex == [aMatchMemo.startIndex integerValue] ) {
return aMatchMemo.stopIndex;
@@ -117,7 +117,7 @@

- (NSNumber *)getStopIndex:(NSInteger)aStartIndex
{
-    ANTLRRuleMemo *aMatchMemo = self;
+    RuleMemo *aMatchMemo = self;
do {
if (aStartIndex == [aMatchMemo.startIndex integerValue] ) {
return aMatchMemo.stopIndex;
diff --git a/runtime/ObjC/Framework/RuleReturnScope.h b/runtime/ObjC/Framework/RuleReturnScope.h
index b9313ed..47fcd19 100644
--- a/runtime/ObjC/Framework/RuleReturnScope.h
+++ b/runtime/ObjC/Framework/RuleReturnScope.h
@@ -1,5 +1,5 @@
//
-//  ANTLRRuleReturnScope.h
+//  RuleReturnScope.h
//  ANTLR
//
//  Created by Alan Condit on 6/17/10.
@@ -30,17 +30,17 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRToken.h"
+#import "Token.h"

-@interface ANTLRRuleReturnScope : NSObject <NSCopying> {
+@interface RuleReturnScope : NSObject <NSCopying> {

}

/** Return the start token or tree */
-- (id<ANTLRToken>) getStart;
+- (id<Token>) getStart;

/** Return the stop token or tree */
-- (id<ANTLRToken>) getStop;
+- (id<Token>) getStop;

/** Has a value potentially if output=AST; */
- (id) getTree;
diff --git a/runtime/ObjC/Framework/RuleReturnScope.m b/runtime/ObjC/Framework/RuleReturnScope.m
index 70878a3..1271bc1 100644
--- a/runtime/ObjC/Framework/RuleReturnScope.m
+++ b/runtime/ObjC/Framework/RuleReturnScope.m
@@ -1,5 +1,5 @@
//
-//  ANTLRRuleReturnScope.m
+//  RuleReturnScope.m
//  ANTLR
//
//  Created by Alan Condit on 6/17/10.
@@ -29,10 +29,10 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRRuleReturnScope.h"
+#import "RuleReturnScope.h"


-@implementation ANTLRRuleReturnScope
+@implementation RuleReturnScope

/** Return the start token or tree */
- (id) getStart
@@ -64,7 +64,7 @@
// the input stream is *not* copied!
- (id) copyWithZone:(NSZone *)theZone
{
-    ANTLRRuleReturnScope *copy = [[[self class] allocWithZone:theZone] init];
+    RuleReturnScope *copy = [[[self class] allocWithZone:theZone] init];
return copy;
}

diff --git a/runtime/ObjC/Framework/RuleStack.h b/runtime/ObjC/Framework/RuleStack.h
index 12d450b..423d5cf 100644
--- a/runtime/ObjC/Framework/RuleStack.h
+++ b/runtime/ObjC/Framework/RuleStack.h
@@ -1,5 +1,5 @@
//
-//  ANTLRRuleStack.h
+//  RuleStack.h
//  ANTLR
//
//  Created by Alan Condit on 6/9/10.
@@ -30,20 +30,20 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRBaseStack.h"
-#import "ANTLRHashRule.h"
+#import "BaseStack.h"
+#import "HashRule.h"

//#define GLOBAL_SCOPE       0
//#define LOCAL_SCOPE        1
#define HASHSIZE         101
#define HBUFSIZE      0x2000

-@interface ANTLRRuleStack : ANTLRBaseStack {
+@interface RuleStack : BaseStack {
}

// Contruction/Destruction
-+(ANTLRRuleStack *)newANTLRRuleStack;
-+(ANTLRRuleStack *)newANTLRRuleStack:(NSInteger)cnt;
++(RuleStack *)newRuleStack;
++(RuleStack *)newRuleStack:(NSInteger)cnt;
-(id)init;
-(id)initWithLen:(NSInteger)cnt;
-(void)dealloc;
@@ -55,9 +55,9 @@
- (NSInteger)count;
- (NSInteger)size;

-- (ANTLRHashRule *) pop;
+- (HashRule *) pop;

-- (void) insertObject:(ANTLRHashRule *)aHashRule atIndex:(NSInteger)idx;
-- (ANTLRHashRule *)objectAtIndex:(NSInteger)idx;
+- (void) insertObject:(HashRule *)aHashRule atIndex:(NSInteger)idx;
+- (HashRule *)objectAtIndex:(NSInteger)idx;
- (void)putHashRuleAtRuleIndex:(NSInteger)aRuleIndex StartIndex:(NSInteger)aStartIndex StopIndex:(NSInteger)aStopIndex;
@end
diff --git a/runtime/ObjC/Framework/RuleStack.m b/runtime/ObjC/Framework/RuleStack.m
index 39e93b2..5f21f3b 100644
--- a/runtime/ObjC/Framework/RuleStack.m
+++ b/runtime/ObjC/Framework/RuleStack.m
@@ -1,5 +1,5 @@
//
-//  ANTLRRuleStack.m
+//  RuleStack.m
//  ANTLR
//
//  Created by Alan Condit on 6/9/10.
@@ -34,22 +34,22 @@

extern NSInteger debug;

-#import "ANTLRRuleStack.h"
-#import "ANTLRTree.h"
+#import "RuleStack.h"
+#import "Tree.h"

/*
- * Start of ANTLRRuleStack
+ * Start of RuleStack
*/
-@implementation ANTLRRuleStack
+@implementation RuleStack

-+ (ANTLRRuleStack *)newANTLRRuleStack
++ (RuleStack *)newRuleStack
{
-    return [[ANTLRRuleStack alloc] init];
+    return [[RuleStack alloc] init];
}

-+ (ANTLRRuleStack *)newANTLRRuleStack:(NSInteger)cnt
++ (RuleStack *)newRuleStack:(NSInteger)cnt
{
-    return [[ANTLRRuleStack alloc] initWithLen:cnt];
+    return [[RuleStack alloc] initWithLen:cnt];
}

- (id)init
@@ -69,7 +69,7 @@ extern NSInteger debug;
- (void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRRuleStack" );
+    NSLog( @"called dealloc in RuleStack" );
#endif
[super dealloc];
}
@@ -81,7 +81,7 @@ extern NSInteger debug;

- (NSInteger)count
{
-    ANTLRRuleMemo *anElement;
+    RuleMemo *anElement;
NSInteger aCnt = 0;
for( int i = 0; i < BuffSize; i++ ) {
if ((anElement = ptrBuffer[i]) != nil)
@@ -92,7 +92,7 @@ extern NSInteger debug;

- (NSInteger)size
{
-    ANTLRRuleMemo *anElement;
+    RuleMemo *anElement;
NSInteger aSize = 0;
for( int i = 0; i < BuffSize; i++ ) {
if ((anElement = ptrBuffer[i]) != nil) {
@@ -102,15 +102,15 @@ extern NSInteger debug;
return aSize;
}

-- (ANTLRHashRule *)pop
+- (HashRule *)pop
{
-    return (ANTLRHashRule *)[super pop];
+    return (HashRule *)[super pop];
}

-- (void) insertObject:(ANTLRHashRule *)aRule atIndex:(NSInteger)idx
+- (void) insertObject:(HashRule *)aRule atIndex:(NSInteger)idx
{
if ( idx >= BuffSize ) {
-        if ( debug > 2 ) NSLog( @"In ANTLRRuleStack attempting to insert aRule at Index %d, but Buffer is only %d long\n", idx, BuffSize );
+        if ( debug > 2 ) NSLog( @"In RuleStack attempting to insert aRule at Index %d, but Buffer is only %d long\n", idx, BuffSize );
[self ensureCapacity:idx];
}
if ( aRule != ptrBuffer[idx] ) {
@@ -120,7 +120,7 @@ extern NSInteger debug;
ptrBuffer[idx] = aRule;
}

-- (ANTLRHashRule *)objectAtIndex:(NSInteger)idx
+- (HashRule *)objectAtIndex:(NSInteger)idx
{
if (idx < BuffSize) {
return ptrBuffer[idx];
@@ -130,19 +130,19 @@ extern NSInteger debug;

- (void)putHashRuleAtRuleIndex:(NSInteger)aRuleIndex StartIndex:(NSInteger)aStartIndex StopIndex:(NSInteger)aStopIndex
{
-    ANTLRHashRule *aHashRule;
-    ANTLRRuleMemo *aRuleMemo;
+    HashRule *aHashRule;
+    RuleMemo *aRuleMemo;

if (aRuleIndex >= BuffSize) {
if ( debug) NSLog( @"putHashRuleAtRuleIndex attempting to insert aRule at Index %d, but Buffer is only %d long\n", aRuleIndex, BuffSize );
[self ensureCapacity:aRuleIndex];
}
if ((aHashRule = ptrBuffer[aRuleIndex]) == nil) {
-        aHashRule = [[ANTLRHashRule newANTLRHashRuleWithLen:17] retain];
+        aHashRule = [[HashRule newHashRuleWithLen:17] retain];
ptrBuffer[aRuleIndex] = aHashRule;
}
if (( aRuleMemo = [aHashRule objectAtIndex:aStartIndex] ) == nil ) {
-        aRuleMemo = [[ANTLRRuleMemo newANTLRRuleMemo] retain];
+        aRuleMemo = [[RuleMemo newRuleMemo] retain];
[aHashRule insertObject:aRuleMemo atIndex:aStartIndex];
}
[aRuleMemo setStartIndex:[NSNumber numberWithInteger:aStartIndex]];
diff --git a/runtime/ObjC/Framework/RuntimeException.h b/runtime/ObjC/Framework/RuntimeException.h
index 47834d2..63ff141 100644
--- a/runtime/ObjC/Framework/RuntimeException.h
+++ b/runtime/ObjC/Framework/RuntimeException.h
@@ -1,5 +1,5 @@
//
-//  ANTLRRuntimeException.h
+//  RuntimeException.h
//  ANTLR
//
//  Created by Alan Condit on 6/5/10.
@@ -31,15 +31,15 @@

#import <Cocoa/Cocoa.h>

-@interface ANTLRRuntimeException : NSException {
+@interface RuntimeException : NSException {
}

-+ (ANTLRRuntimeException *) newException;
-+ (ANTLRRuntimeException *) newException:(NSString *)aReason;
-+ (ANTLRRuntimeException *) newException:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;
++ (RuntimeException *) newException;
++ (RuntimeException *) newException:(NSString *)aReason;
++ (RuntimeException *) newException:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;

-+ (ANTLRRuntimeException *) newException:(NSString *)aName reason:(NSString *)aReason;
-+ (ANTLRRuntimeException *) newException:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;
++ (RuntimeException *) newException:(NSString *)aName reason:(NSString *)aReason;
++ (RuntimeException *) newException:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;

- (id) init;
- (id) init:(NSString *)aReason;
@@ -52,7 +52,7 @@

@end

-@interface ANTLRIllegalArgumentException : ANTLRRuntimeException {
+@interface ANTLRIllegalArgumentException : RuntimeException {
}

+ (id) newException;
@@ -65,7 +65,7 @@

@end

-@interface ANTLRIllegalStateException : ANTLRRuntimeException {
+@interface ANTLRIllegalStateException : RuntimeException {
}

+ (id) newException;
@@ -78,7 +78,7 @@

@end

-@interface ANTLRNoSuchElementException : ANTLRRuntimeException {
+@interface NoSuchElementException : RuntimeException {
}

+ (id) newException;
@@ -91,7 +91,7 @@

@end

-@interface ANTLRRewriteEarlyExitException : ANTLRRuntimeException {
+@interface RewriteEarlyExitException : RuntimeException {
}

+ (id) newException;
@@ -99,7 +99,7 @@

@end

-@interface ANTLRUnsupportedOperationException : ANTLRRuntimeException {
+@interface UnsupportedOperationException : RuntimeException {
}

+ (id) newException:(NSString *)aReason;
diff --git a/runtime/ObjC/Framework/RuntimeException.m b/runtime/ObjC/Framework/RuntimeException.m
index 827fc43..8e525c2 100644
--- a/runtime/ObjC/Framework/RuntimeException.m
+++ b/runtime/ObjC/Framework/RuntimeException.m
@@ -1,5 +1,5 @@
//
-//  ANTLRRuntimeException.m
+//  RuntimeException.m
//  ANTLR
//
//  Created by Alan Condit on 6/5/10.
@@ -29,52 +29,52 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRRuntimeException.h"
+#import "RuntimeException.h"


-@implementation ANTLRRuntimeException
+@implementation RuntimeException

+ (id) newException
{
-    return [[ANTLRRuntimeException alloc] init];
+    return [[RuntimeException alloc] init];
}

+ (id) newException:(NSString *)aReason
{
-    return [[ANTLRRuntimeException alloc] init:aReason];
+    return [[RuntimeException alloc] init:aReason];
}

+ (id) newException:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
{
-    return [[ANTLRRuntimeException alloc] init:aReason userInfo:aUserInfo];
+    return [[RuntimeException alloc] init:aReason userInfo:aUserInfo];
}

+ (id) newException:(NSString *)aName reason:(NSString *)aReason;
{
-    return [[ANTLRRuntimeException alloc] initWithName:aName reason:aReason];
+    return [[RuntimeException alloc] initWithName:aName reason:aReason];
}

+ (id) newException:(NSString *)aName reason:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo;
{
-    return [[ANTLRRuntimeException alloc] initWithName:aName reason:aReason userInfo:aUserInfo];
+    return [[RuntimeException alloc] initWithName:aName reason:aReason userInfo:aUserInfo];
}


- (id) init
{
-    self = [super initWithName:@"ANTLRRuntimeException" reason:@"UnknownException" userInfo:nil];
+    self = [super initWithName:@"RuntimeException" reason:@"UnknownException" userInfo:nil];
return(self);
}

- (id) init:(NSString *)aReason
{
-    self = [super initWithName:(NSString *)@"ANTLRRuntimeException" reason:(NSString *)aReason userInfo:(NSDictionary *)nil];
+    self = [super initWithName:(NSString *)@"RuntimeException" reason:(NSString *)aReason userInfo:(NSDictionary *)nil];
return(self);
}

- (id) init:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
{
-    self = [super initWithName:@"ANTLRRuntimeException" reason:aReason userInfo:aUserInfo];
+    self = [super initWithName:@"RuntimeException" reason:aReason userInfo:aUserInfo];
return(self);
}

@@ -187,38 +187,38 @@

@end

-@implementation ANTLRNoSuchElementException
+@implementation NoSuchElementException

+ (id) newException
{
-    return [[ANTLRNoSuchElementException alloc] init];
+    return [[NoSuchElementException alloc] init];
}

+ (id) newException:(NSString *)aReason
{
-    return [[ANTLRNoSuchElementException alloc] init:aReason];
+    return [[NoSuchElementException alloc] init:aReason];
}

+ (id) newException:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
{
-    return [[ANTLRNoSuchElementException alloc] init:aReason userInfo:(NSDictionary *)aUserInfo];
+    return [[NoSuchElementException alloc] init:aReason userInfo:(NSDictionary *)aUserInfo];
}

- (id) init
{
-    self = [super initWithName:@"ANTLRNoSuchElementException" reason:@"UnknownException" userInfo:nil];
+    self = [super initWithName:@"NoSuchElementException" reason:@"UnknownException" userInfo:nil];
return(self);
}

- (id) init:(NSString *)aReason
{
-    self = [super initWithName:@"ANTLRNoSuchElementException" reason:(NSString *)aReason userInfo:(NSDictionary *)nil];
+    self = [super initWithName:@"NoSuchElementException" reason:(NSString *)aReason userInfo:(NSDictionary *)nil];
return(self);
}

- (id) init:(NSString *)aReason userInfo:(NSDictionary *)aUserInfo
{
-    self = [super initWithName:@"ANTLRNoSuchElementException" reason:aReason userInfo:aUserInfo];
+    self = [super initWithName:@"NoSuchElementException" reason:aReason userInfo:aUserInfo];
return(self);
}

@@ -230,7 +230,7 @@

@end

-@implementation ANTLRRewriteEarlyExitException
+@implementation RewriteEarlyExitException

+ (id) newException
{
@@ -256,11 +256,11 @@

@end

-@implementation ANTLRUnsupportedOperationException
+@implementation UnsupportedOperationException

+ (id) newException:(NSString *)aReason
{
-    return [[ANTLRRuntimeException alloc] initWithName:@"Unsupported Operation Exception" reason:aReason userInfo:nil];
+    return [[RuntimeException alloc] initWithName:@"Unsupported Operation Exception" reason:aReason userInfo:nil];
}

- (id) initWithName:(NSString *)aName reason:(NSString *)aReason
diff --git a/runtime/ObjC/Framework/StreamEnumerator.h b/runtime/ObjC/Framework/StreamEnumerator.h
index 9e102f2..feb7d7c 100644
--- a/runtime/ObjC/Framework/StreamEnumerator.h
+++ b/runtime/ObjC/Framework/StreamEnumerator.h
@@ -1,5 +1,5 @@
//
-//  ANTLRStreamEnumertor.h
+//  StreamEnumertor.h
//  ANTLR
//
//  Created by Ian Michell on 29/04/2010.
@@ -32,7 +32,7 @@
#import <Cocoa/Cocoa.h>
#import "AMutableArray.h"

-@interface ANTLRStreamEnumerator : NSEnumerator
+@interface StreamEnumerator : NSEnumerator
{
NSInteger i;
id eof;
diff --git a/runtime/ObjC/Framework/StreamEnumerator.m b/runtime/ObjC/Framework/StreamEnumerator.m
index 103646e..eac54b5 100644
--- a/runtime/ObjC/Framework/StreamEnumerator.m
+++ b/runtime/ObjC/Framework/StreamEnumerator.m
@@ -1,5 +1,5 @@
//
-//  ANTLRStreamEnumertor.m
+//  StreamEnumertor.m
//  ANTLR
//
//  Created by Ian Michell on 29/04/2010.
@@ -29,10 +29,10 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRStreamEnumerator.h"
+#import "StreamEnumerator.h"


-@implementation ANTLRStreamEnumerator
+@implementation StreamEnumerator

-(id) init
{
diff --git a/runtime/ObjC/Framework/SymbolStack.h b/runtime/ObjC/Framework/SymbolStack.h
index 169df9f..df8e0a1 100644
--- a/runtime/ObjC/Framework/SymbolStack.h
+++ b/runtime/ObjC/Framework/SymbolStack.h
@@ -1,5 +1,5 @@
//
-//  ANTLRSymbolStack.h
+//  SymbolStack.h
//  ANTLR
//
//  Created by Alan Condit on 6/9/10.
@@ -30,31 +30,31 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRBaseStack.h"
-// #import "ANTLRSymbolScope.h"
+#import "BaseStack.h"
+// #import "SymbolScope.h"

//#define GLOBAL_SCOPE       0
//#define LOCAL_SCOPE        1
#define HASHSIZE         101
#define HBUFSIZE      0x2000

-@interface ANTLRSymbolsScope : NSObject
+@interface SymbolsScope : NSObject
{

}

-+ (ANTLRSymbolsScope *)newANTLRSymbolsScope;
++ (SymbolsScope *)newSymbolsScope;

- (id)init;
@end


-@interface ANTLRSymbolStack : ANTLRBaseStack {
+@interface SymbolStack : BaseStack {
}

// Contruction/Destruction
-+(ANTLRSymbolStack *)newANTLRSymbolStack;
-+(ANTLRSymbolStack *)newANTLRSymbolStackWithLen:(NSInteger)cnt;
++(SymbolStack *)newSymbolStack;
++(SymbolStack *)newSymbolStackWithLen:(NSInteger)cnt;
-(id)init;
-(id)initWithLen:(NSInteger)cnt;
-(void)dealloc;
@@ -63,13 +63,13 @@
- (id) copyWithZone:(NSZone *)aZone;
/* clear -- reinitialize the maplist array */

--(ANTLRSymbolsScope *)getHashMapEntry:(NSInteger)idx;
+-(SymbolsScope *)getHashMapEntry:(NSInteger)idx;

--(ANTLRSymbolsScope **)getHashMap;
+-(SymbolsScope **)getHashMap;

--(ANTLRSymbolsScope *) pop;
+-(SymbolsScope *) pop;

-- (void) insertObject:(ANTLRSymbolsScope *)aScope atIndex:(NSInteger)idx;
-- (ANTLRSymbolsScope *)objectAtIndex:(NSInteger)idx;
+- (void) insertObject:(SymbolsScope *)aScope atIndex:(NSInteger)idx;
+- (SymbolsScope *)objectAtIndex:(NSInteger)idx;

@end
diff --git a/runtime/ObjC/Framework/SymbolStack.m b/runtime/ObjC/Framework/SymbolStack.m
index 3c43ebb..f1a7f6e 100644
--- a/runtime/ObjC/Framework/SymbolStack.m
+++ b/runtime/ObjC/Framework/SymbolStack.m
@@ -1,5 +1,5 @@
//
-//  ANTLRSymbolStack.m
+//  SymbolStack.m
//  ANTLR
//
//  Created by Alan Condit on 6/9/10.
@@ -32,15 +32,15 @@
#define SUCCESS (0)
#define FAILURE (-1)

-#import "ANTLRSymbolStack.h"
-#import "ANTLRTree.h"
+#import "SymbolStack.h"
+#import "Tree.h"


-@implementation ANTLRSymbolsScope
+@implementation SymbolsScope

-+ (ANTLRSymbolsScope *)newANTLRSymbolsScope
++ (SymbolsScope *)newSymbolsScope
{
-    return( [[ANTLRSymbolsScope alloc] init] );
+    return( [[SymbolsScope alloc] init] );
}

- (id)init
@@ -53,18 +53,18 @@
@end

/*
- * Start of ANTLRSymbolStack
+ * Start of SymbolStack
*/
-@implementation ANTLRSymbolStack
+@implementation SymbolStack

-+(ANTLRSymbolStack *)newANTLRSymbolStack
++(SymbolStack *)newSymbolStack
{
-    return [[ANTLRSymbolStack alloc] initWithLen:30];
+    return [[SymbolStack alloc] initWithLen:30];
}

-+(ANTLRSymbolStack *)newANTLRSymbolStackWithLen:(NSInteger)cnt
++(SymbolStack *)newSymbolStackWithLen:(NSInteger)cnt
{
-    return [[ANTLRSymbolStack alloc] initWithLen:cnt];
+    return [[SymbolStack alloc] initWithLen:cnt];
}

-(id)init
@@ -84,7 +84,7 @@
-(void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRSymbolStack" );
+    NSLog( @"called dealloc in SymbolStack" );
#endif
[super dealloc];
}
@@ -94,22 +94,22 @@
return [super copyWithZone:aZone];
}

--(ANTLRSymbolsScope *)getHashMapEntry:(NSInteger)idx
+-(SymbolsScope *)getHashMapEntry:(NSInteger)idx
{
-	return( (ANTLRSymbolsScope *)[super objectAtIndex:idx] );
+	return( (SymbolsScope *)[super objectAtIndex:idx] );
}

--(ANTLRSymbolsScope **)getHashMap
+-(SymbolsScope **)getHashMap
{
-	return( (ANTLRSymbolsScope **)ptrBuffer );
+	return( (SymbolsScope **)ptrBuffer );
}

--(ANTLRSymbolsScope *) pop
+-(SymbolsScope *) pop
{
-    return (ANTLRSymbolsScope *)[super pop];
+    return (SymbolsScope *)[super pop];
}

-- (void) insertObject:(ANTLRSymbolsScope *)aRule atIndex:(NSInteger)idx
+- (void) insertObject:(SymbolsScope *)aRule atIndex:(NSInteger)idx
{
if ( aRule != ptrBuffer[idx] ) {
if ( ptrBuffer[idx] ) [ptrBuffer[idx] release];
@@ -118,9 +118,9 @@
ptrBuffer[idx] = aRule;
}

-- (ANTLRSymbolsScope *)objectAtIndex:(NSInteger)idx
+- (SymbolsScope *)objectAtIndex:(NSInteger)idx
{
-    return (ANTLRSymbolsScope *)[super objectAtIndex:idx];
+    return (SymbolsScope *)[super objectAtIndex:idx];
}

@end
diff --git a/runtime/ObjC/Framework/Token+DebuggerSupport.h b/runtime/ObjC/Framework/Token+DebuggerSupport.h
index 659e763..93d6299 100644
--- a/runtime/ObjC/Framework/Token+DebuggerSupport.h
+++ b/runtime/ObjC/Framework/Token+DebuggerSupport.h
@@ -1,5 +1,5 @@
//
-//  ANTLRToken+DebuggerSupport.h
+//  Token+DebuggerSupport.h
//  ANTLR
//
//  Created by Kay Röpke on 03.12.2006.
@@ -31,10 +31,10 @@
//

#import <Cocoa/Cocoa.h>
-#import "ANTLRToken.h"
-#import "ANTLRCommonToken.h"
+#import "Token.h"
+#import "CommonToken.h"

-@interface ANTLRCommonToken(DebuggerSupport)
+@interface CommonToken(DebuggerSupport)

- (NSString *)debuggerDescription;

diff --git a/runtime/ObjC/Framework/Token+DebuggerSupport.m b/runtime/ObjC/Framework/Token+DebuggerSupport.m
index 114b236..8178fb8 100644
--- a/runtime/ObjC/Framework/Token+DebuggerSupport.m
+++ b/runtime/ObjC/Framework/Token+DebuggerSupport.m
@@ -1,5 +1,5 @@
//
-//  ANTLRToken+DebuggerSupport.m
+//  Token+DebuggerSupport.m
//  ANTLR
//
//  Created by Kay Röpke on 03.12.2006.
@@ -29,10 +29,10 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRToken+DebuggerSupport.h"
+#import "Token+DebuggerSupport.h"


-@implementation ANTLRCommonToken(DebuggerSupport)
+@implementation CommonToken(DebuggerSupport)

- (NSString *)debuggerDescription
{
diff --git a/runtime/ObjC/Framework/Token.h b/runtime/ObjC/Framework/Token.h
index 04724bd..f5562e6 100644
--- a/runtime/ObjC/Framework/Token.h
+++ b/runtime/ObjC/Framework/Token.h
@@ -32,22 +32,22 @@
#endif

typedef enum {
-    ANTLRTokenTypeEOF = -1,
-    ANTLRTokenTypeInvalid,
-    ANTLRTokenTypeEOR,
-    ANTLRTokenTypeDOWN,
-    ANTLRTokenTypeUP,
-    ANTLRTokenTypeMIN
-} ANTLRTokenType;
+    TokenTypeEOF = -1,
+    TokenTypeInvalid,
+    TokenTypeEOR,
+    TokenTypeDOWN,
+    TokenTypeUP,
+    TokenTypeMIN
+} TokenType;

typedef enum {
-    ANTLRTokenChannelDefault = 0,
-    ANTLRTokenChannelHidden = 99
-} ANTLRTokenChannel;
+    TokenChannelDefault = 0,
+    TokenChannelHidden = 99
+} TokenChannel;

#define HIDDEN 99

-@protocol ANTLRToken < NSObject, NSCopying >
+@protocol Token < NSObject, NSCopying >

@property (retain, getter = text, setter = setText:) NSString *text;
@property (assign) NSInteger type;
@@ -55,9 +55,9 @@ typedef enum {
@property (assign) NSUInteger charPositionInLine;

// The singleton eofToken instance.
-+ (id<ANTLRToken>) eofToken;
++ (id<Token>) eofToken;
// The default channel for this class of Tokens
-+ (ANTLRTokenChannel) defaultChannel;
++ (TokenChannel) defaultChannel;

// provide hooks to explicitely set the text as opposed to use the indices into the CharStream
- (NSString *) text;
diff --git a/runtime/ObjC/Framework/TokenRewriteStream.h b/runtime/ObjC/Framework/TokenRewriteStream.h
index 7b97168..a6ccc34 100644
--- a/runtime/ObjC/Framework/TokenRewriteStream.h
+++ b/runtime/ObjC/Framework/TokenRewriteStream.h
@@ -1,5 +1,5 @@
//
-//  ANTLRTokenRewriteStream.h
+//  TokenRewriteStream.h
//  ANTLR
//
//  Created by Alan Condit on 6/19/10.
@@ -30,15 +30,15 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRCommonTokenStream.h"
-#import "ANTLRLinkBase.h"
-#import "ANTLRHashMap.h"
-#import "ANTLRMapElement.h"
-#import "ANTLRTokenSource.h"
+#import "CommonTokenStream.h"
+#import "LinkBase.h"
+#import "HashMap.h"
+#import "MapElement.h"
+#import "TokenSource.h"

// Define the rewrite operation hierarchy

-@interface ANTLRRewriteOperation : ANTLRCommonTokenStream
+@interface RewriteOperation : CommonTokenStream
{
/** What rwIndex into rewrites List are we? */
NSInteger instructionIndex;
@@ -51,7 +51,7 @@ NSString *text;
@property (assign) NSInteger rwIndex;
@property (retain, getter=text, setter=setText:) NSString *text;

-+ (ANTLRRewriteOperation *) newANTLRRewriteOperation:(NSInteger)anIndex Text:(NSString *)text;
++ (RewriteOperation *) newRewriteOperation:(NSInteger)anIndex Text:(NSString *)text;

- (id) initWithIndex:(NSInteger)anIndex Text:(NSString *)theText;

@@ -64,7 +64,7 @@ NSString *text;
- (NSInteger) indexOf:(char)aChar inString:(NSString *)aString;
@end

-@interface ANTLRInsertBeforeOp : ANTLRRewriteOperation {
+@interface ANTLRInsertBeforeOp : RewriteOperation {
}

+ (ANTLRInsertBeforeOp *) newANTLRInsertBeforeOp:(NSInteger)anIndex Text:(NSString *)theText;
@@ -75,7 +75,7 @@ NSString *text;
/** I'm going to try replacing range from x..y with (y-x)+1 ReplaceOp
*  instructions.
*/
-@interface ANTLRReplaceOp : ANTLRRewriteOperation {
+@interface ANTLRReplaceOp : RewriteOperation {
NSInteger lastIndex;
}

@@ -100,69 +100,69 @@ NSString *text;
@end


-@interface ANTLRTokenRewriteStream : ANTLRCommonTokenStream {
+@interface TokenRewriteStream : CommonTokenStream {
/** You may have multiple, named streams of rewrite operations.
*  I'm calling these things "programs."
*  Maps String (name) -> rewrite (List)
*/
-ANTLRHashMap *programs;
+HashMap *programs;

/** Map String (program name) -> Integer rwIndex */
-ANTLRHashMap *lastRewriteTokenIndexes;
+HashMap *lastRewriteTokenIndexes;
}

-@property (retain, getter=getPrograms, setter=setPrograms:) ANTLRHashMap *programs;
-@property (retain, getter=getLastRewriteTokenIndexes, setter=setLastRewriteTokenIndexes:) ANTLRHashMap *lastRewriteTokenIndexes;
+@property (retain, getter=getPrograms, setter=setPrograms:) HashMap *programs;
+@property (retain, getter=getLastRewriteTokenIndexes, setter=setLastRewriteTokenIndexes:) HashMap *lastRewriteTokenIndexes;

-+ (ANTLRTokenRewriteStream *)newANTLRTokenRewriteStream;
-+ (ANTLRTokenRewriteStream *)newANTLRTokenRewriteStream:(id<ANTLRTokenSource>) aTokenSource;
-+ (ANTLRTokenRewriteStream *)newANTLRTokenRewriteStream:(id<ANTLRTokenSource>) aTokenSource Channel:(NSInteger)aChannel;
++ (TokenRewriteStream *)newTokenRewriteStream;
++ (TokenRewriteStream *)newTokenRewriteStream:(id<TokenSource>) aTokenSource;
++ (TokenRewriteStream *)newTokenRewriteStream:(id<TokenSource>) aTokenSource Channel:(NSInteger)aChannel;

- (id) init;
-- (id)initWithTokenSource:(id<ANTLRTokenSource>)aTokenSource;
-- (id)initWithTokenSource:(id<ANTLRTokenSource>)aTokenSource Channel:(NSInteger)aChannel;
+- (id)initWithTokenSource:(id<TokenSource>)aTokenSource;
+- (id)initWithTokenSource:(id<TokenSource>)aTokenSource Channel:(NSInteger)aChannel;

-- (ANTLRHashMap *)getPrograms;
-- (void)setPrograms:(ANTLRHashMap *)aProgList;
+- (HashMap *)getPrograms;
+- (void)setPrograms:(HashMap *)aProgList;

- (void) rollback:(NSInteger)instructionIndex;
- (void) rollback:(NSString *)programName Index:(NSInteger)anInstructionIndex;
- (void) deleteProgram;
- (void) deleteProgram:(NSString *)programName;
-- (void) insertAfterToken:(id<ANTLRToken>)t Text:(NSString *)theText;
+- (void) insertAfterToken:(id<Token>)t Text:(NSString *)theText;
- (void) insertAfterIndex:(NSInteger)anIndex Text:(NSString *)theText;
- (void) insertAfterProgNam:(NSString *)programName Index:(NSInteger)anIndex Text:(NSString *)theText;


-- (void) insertBeforeToken:(id<ANTLRToken>)t Text:(NSString *)theText;
+- (void) insertBeforeToken:(id<Token>)t Text:(NSString *)theText;
- (void) insertBeforeIndex:(NSInteger)anIndex Text:(NSString *)theText;
- (void) insertBeforeProgName:(NSString *)programName Index:(NSInteger)anIndex Text:(NSString *)theText;
- (void) replaceFromIndex:(NSInteger)anIndex Text:(NSString *)theText;
- (void) replaceFromIndex:(NSInteger)from ToIndex:(NSInteger)to Text:(NSString *)theText;
-- (void) replaceFromToken:(id<ANTLRToken>)indexT Text:(NSString *)theText;
-- (void) replaceFromToken:(id<ANTLRToken>)from ToToken:(id<ANTLRToken>)to Text:(NSString *)theText;
-- (void) replaceProgNam:(NSString *)programName Token:(id<ANTLRToken>)from Token:(id<ANTLRToken>)to Text:(NSString *)theText;
+- (void) replaceFromToken:(id<Token>)indexT Text:(NSString *)theText;
+- (void) replaceFromToken:(id<Token>)from ToToken:(id<Token>)to Text:(NSString *)theText;
+- (void) replaceProgNam:(NSString *)programName Token:(id<Token>)from Token:(id<Token>)to Text:(NSString *)theText;
- (void) replaceProgNam:(NSString *)programName FromIndex:(NSInteger)from ToIndex:(NSInteger)to Text:(NSString *)theText;
- (void) delete:(NSInteger)anIndex;
- (void) delete:(NSInteger)from ToIndex:(NSInteger)to;
-- (void) deleteToken:(id<ANTLRToken>)indexT;
-- (void) deleteFromToken:(id<ANTLRToken>)from ToToken:(id<ANTLRToken>)to;
-- (void) delete:(NSString *)programName FromToken:(id<ANTLRToken>)from ToToken:(id<ANTLRToken>)to;
+- (void) deleteToken:(id<Token>)indexT;
+- (void) deleteFromToken:(id<Token>)from ToToken:(id<Token>)to;
+- (void) delete:(NSString *)programName FromToken:(id<Token>)from ToToken:(id<Token>)to;
- (void) delete:(NSString *)programName FromIndex:(NSInteger)from ToIndex:(NSInteger)to;
- (NSInteger)getLastRewriteTokenIndex;
- (NSInteger)getLastRewriteTokenIndex:(NSString *)programName;
- (void)setLastRewriteTokenIndex:(NSString *)programName Index:(NSInteger)anInt;
-- (ANTLRHashMap *) getProgram:(NSString *)name;
-- (ANTLRHashMap *) initializeProgram:(NSString *)name;
+- (HashMap *) getProgram:(NSString *)name;
+- (HashMap *) initializeProgram:(NSString *)name;
- (NSString *)toOriginalString;
- (NSString *)toOriginalString:(NSInteger)start End:(NSInteger)end;
- (NSString *)toString;
- (NSString *)toString:(NSString *)programName;
- (NSString *)toStringFromStart:(NSInteger)start ToEnd:(NSInteger)end;
- (NSString *)toString:(NSString *)programName FromStart:(NSInteger)start ToEnd:(NSInteger)end;
-- (ANTLRHashMap *)reduceToSingleOperationPerIndex:(ANTLRHashMap *)rewrites;
-- (ANTLRHashMap *)getKindOfOps:(ANTLRHashMap *)rewrites KindOfClass:(Class)kind;
-- (ANTLRHashMap *)getKindOfOps:(ANTLRHashMap *)rewrites KindOfClass:(Class)kind Index:(NSInteger)before;
+- (HashMap *)reduceToSingleOperationPerIndex:(HashMap *)rewrites;
+- (HashMap *)getKindOfOps:(HashMap *)rewrites KindOfClass:(Class)kind;
+- (HashMap *)getKindOfOps:(HashMap *)rewrites KindOfClass:(Class)kind Index:(NSInteger)before;
- (NSString *)catOpText:(id)a PrevText:(id)b;
- (NSMutableString *)toDebugString;
- (NSMutableString *)toDebugStringFromStart:(NSInteger)start ToEnd:(NSInteger)end;
diff --git a/runtime/ObjC/Framework/TokenRewriteStream.m b/runtime/ObjC/Framework/TokenRewriteStream.m
index e94f885..0a16a78 100644
--- a/runtime/ObjC/Framework/TokenRewriteStream.m
+++ b/runtime/ObjC/Framework/TokenRewriteStream.m
@@ -1,5 +1,5 @@
//
-//  ANTLRTokenRewriteStream.m
+//  TokenRewriteStream.m
//  ANTLR
//
//  Created by Alan Condit on 6/19/10.
@@ -29,8 +29,8 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRTokenRewriteStream.h"
-#import "ANTLRRuntimeException.h"
+#import "TokenRewriteStream.h"
+#import "RuntimeException.h"

static NSString *DEFAULT_PROGRAM_NAME = @"default";
static NSInteger PROGRAM_INIT_SIZE = 100;
@@ -40,15 +40,15 @@ extern NSInteger debug;

// Define the rewrite operation hierarchy

-@implementation ANTLRRewriteOperation
+@implementation RewriteOperation

@synthesize instructionIndex;
@synthesize rwIndex;
@synthesize text;

-+ (ANTLRRewriteOperation *) newANTLRRewriteOperation:(NSInteger)anIndex Text:(NSString *)theText
++ (RewriteOperation *) newRewriteOperation:(NSInteger)anIndex Text:(NSString *)theText
{
-    return [[ANTLRRewriteOperation alloc] initWithIndex:anIndex Text:theText];
+    return [[RewriteOperation alloc] initWithIndex:anIndex Text:theText];
}

- (id) initWithIndex:(NSInteger)anIndex Text:(NSString *)theText
@@ -111,7 +111,7 @@ extern NSInteger debug;
- (NSInteger) execute:(NSMutableString *)buf
{
[buf appendString:text];
-    if ( ((ANTLRCommonToken *)[tokens objectAtIndex:rwIndex]).type != ANTLRTokenTypeEOF ) {
+    if ( ((CommonToken *)[tokens objectAtIndex:rwIndex]).type != TokenTypeEOF ) {
[buf appendString:[[tokens objectAtIndex:rwIndex] text]];
}
return rwIndex+1;
@@ -179,65 +179,65 @@ extern NSInteger debug;
@end


-@implementation ANTLRTokenRewriteStream
+@implementation TokenRewriteStream

@synthesize programs;
@synthesize lastRewriteTokenIndexes;

-+ (ANTLRTokenRewriteStream *)newANTLRTokenRewriteStream
++ (TokenRewriteStream *)newTokenRewriteStream
{
-    return [[ANTLRTokenRewriteStream alloc] init];
+    return [[TokenRewriteStream alloc] init];
}

-+ (ANTLRTokenRewriteStream *)newANTLRTokenRewriteStream:(id<ANTLRTokenSource>) aTokenSource
++ (TokenRewriteStream *)newTokenRewriteStream:(id<TokenSource>) aTokenSource
{
-    return [[ANTLRTokenRewriteStream alloc] initWithTokenSource:aTokenSource];
+    return [[TokenRewriteStream alloc] initWithTokenSource:aTokenSource];
}

-+ (ANTLRTokenRewriteStream *)newANTLRTokenRewriteStream:(id<ANTLRTokenSource>) aTokenSource Channel:(NSInteger)aChannel
++ (TokenRewriteStream *)newTokenRewriteStream:(id<TokenSource>) aTokenSource Channel:(NSInteger)aChannel
{
-    return [[ANTLRTokenRewriteStream alloc] initWithTokenSource:aTokenSource Channel:aChannel];
+    return [[TokenRewriteStream alloc] initWithTokenSource:aTokenSource Channel:aChannel];
}

- (id) init
{
if ((self = [super init]) != nil) {
-        programs = [ANTLRHashMap newANTLRHashMap];
-        [programs addObject:[ANTLRMapElement newANTLRMapElementWithName:DEFAULT_PROGRAM_NAME Node:[ANTLRHashMap newANTLRHashMapWithLen:PROGRAM_INIT_SIZE]]];
-        lastRewriteTokenIndexes = [ANTLRHashMap newANTLRHashMap];
+        programs = [HashMap newHashMap];
+        [programs addObject:[MapElement newMapElementWithName:DEFAULT_PROGRAM_NAME Node:[HashMap newHashMapWithLen:PROGRAM_INIT_SIZE]]];
+        lastRewriteTokenIndexes = [HashMap newHashMap];
}
return self;
}

-- (id)initWithTokenSource:(id<ANTLRTokenSource>)aTokenSource
+- (id)initWithTokenSource:(id<TokenSource>)aTokenSource
{
if ((self = [super init]) != nil) {
-        programs = [ANTLRHashMap newANTLRHashMap];
-        [programs addObject:[ANTLRMapElement newANTLRMapElementWithName:DEFAULT_PROGRAM_NAME Node:[ANTLRHashMap newANTLRHashMapWithLen:PROGRAM_INIT_SIZE]]];
-        lastRewriteTokenIndexes = [ANTLRHashMap newANTLRHashMap];
+        programs = [HashMap newHashMap];
+        [programs addObject:[MapElement newMapElementWithName:DEFAULT_PROGRAM_NAME Node:[HashMap newHashMapWithLen:PROGRAM_INIT_SIZE]]];
+        lastRewriteTokenIndexes = [HashMap newHashMap];
tokenSource = aTokenSource;
}
return self;
}

-- (id)initWithTokenSource:(id<ANTLRTokenSource>)aTokenSource Channel:(NSInteger)aChannel
+- (id)initWithTokenSource:(id<TokenSource>)aTokenSource Channel:(NSInteger)aChannel
{
if ((self = [super init]) != nil) {
-        programs = [ANTLRHashMap newANTLRHashMap];
-        [programs addObject:[ANTLRMapElement newANTLRMapElementWithName:DEFAULT_PROGRAM_NAME Node:[ANTLRHashMap newANTLRHashMapWithLen:PROGRAM_INIT_SIZE]]];
-        lastRewriteTokenIndexes = [ANTLRHashMap newANTLRHashMap];
+        programs = [HashMap newHashMap];
+        [programs addObject:[MapElement newMapElementWithName:DEFAULT_PROGRAM_NAME Node:[HashMap newHashMapWithLen:PROGRAM_INIT_SIZE]]];
+        lastRewriteTokenIndexes = [HashMap newHashMap];
tokenSource = aTokenSource;
channel = aChannel;
}
return self;
}

-- (ANTLRHashMap *)getPrograms
+- (HashMap *)getPrograms
{
return programs;
}

-- (void)setPrograms:(ANTLRHashMap *)aProgList
+- (void)setPrograms:(HashMap *)aProgList
{
programs = aProgList;
}
@@ -254,7 +254,7 @@ extern NSInteger debug;
- (void) rollback:(NSString *)programName Index:(NSInteger)anInstructionIndex
{
id object;
-    ANTLRHashMap *is;
+    HashMap *is;

//    AMutableArray *is = [programs get(programName)];
is = [self getPrograms];
@@ -276,7 +276,7 @@ extern NSInteger debug;
[self rollback:programName Index:MIN_TOKEN_INDEX];
}

-- (void) insertAfterToken:(id<ANTLRToken>)t Text:(NSString *)theText
+- (void) insertAfterToken:(id<Token>)t Text:(NSString *)theText
{
[self insertAfterProgNam:DEFAULT_PROGRAM_NAME Index:[t getTokenIndex] Text:theText];
}
@@ -301,7 +301,7 @@ extern NSInteger debug;



-- (void) insertBeforeToken:(id<ANTLRToken>)t Text:(NSString *)theText
+- (void) insertBeforeToken:(id<Token>)t Text:(NSString *)theText
{
[self insertBeforeProgName:DEFAULT_PROGRAM_NAME Index:[t getTokenIndex] Text:theText];
}
@@ -314,8 +314,8 @@ extern NSInteger debug;
- (void) insertBeforeProgName:(NSString *)programName Index:(NSInteger)rwIndex Text:(NSString *)theText
{
//addToSortedRewriteList(programName, new ANTLRInsertBeforeOp(rwIndex,text));
-    ANTLRRewriteOperation *op = [ANTLRInsertBeforeOp newANTLRInsertBeforeOp:rwIndex Text:theText];
-    ANTLRHashMap *rewrites = [self getProgram:programName];
+    RewriteOperation *op = [ANTLRInsertBeforeOp newANTLRInsertBeforeOp:rwIndex Text:theText];
+    HashMap *rewrites = [self getProgram:programName];
op.instructionIndex = [rewrites count];
[rewrites addObject:op];
}
@@ -330,17 +330,17 @@ extern NSInteger debug;
[self replaceProgNam:DEFAULT_PROGRAM_NAME FromIndex:from ToIndex:to Text:theText];
}

-- (void) replaceFromToken:(id<ANTLRToken>)anIndexT Text:(NSString *)theText
+- (void) replaceFromToken:(id<Token>)anIndexT Text:(NSString *)theText
{
[self replaceProgNam:DEFAULT_PROGRAM_NAME FromIndex:[anIndexT getTokenIndex] ToIndex:[anIndexT getTokenIndex] Text:theText];
}

-- (void) replaceFromToken:(id<ANTLRToken>)from ToToken:(id<ANTLRToken>)to Text:(NSString *)theText
+- (void) replaceFromToken:(id<Token>)from ToToken:(id<Token>)to Text:(NSString *)theText
{
[self replaceProgNam:DEFAULT_PROGRAM_NAME FromIndex:[from getTokenIndex] ToIndex:[to getTokenIndex] Text:theText];
}

-- (void) replaceProgNam:(NSString *)programName Token:(id<ANTLRToken>)from Token:(id<ANTLRToken>)to Text:(NSString *)theText
+- (void) replaceProgNam:(NSString *)programName Token:(id<Token>)from Token:(id<Token>)to Text:(NSString *)theText
{
[self replaceProgNam:programName FromIndex:[from getTokenIndex] ToIndex:[to getTokenIndex] Text:theText];
}
@@ -350,8 +350,8 @@ extern NSInteger debug;
if ( from > to || from < 0 || to < 0 || to >= [tokens count] ) {
@throw [ANTLRIllegalArgumentException newException:[NSString stringWithFormat:@"replace: range invalid: %d..%d size=%d\n", from, to, [tokens count]]];
}
-    ANTLRRewriteOperation *op = [ANTLRReplaceOp newANTLRReplaceOp:from ToIndex:to Text:theText];
-    ANTLRHashMap *rewrites = (ANTLRHashMap *)[lastRewriteTokenIndexes getName:programName];
+    RewriteOperation *op = [ANTLRReplaceOp newANTLRReplaceOp:from ToIndex:to Text:theText];
+    HashMap *rewrites = (HashMap *)[lastRewriteTokenIndexes getName:programName];
op.instructionIndex = [rewrites count];
[rewrites addObject:op];
}
@@ -366,17 +366,17 @@ extern NSInteger debug;
[self delete:DEFAULT_PROGRAM_NAME FromIndex:from ToIndex:to];
}

-- (void) deleteToken:(id<ANTLRToken>)anIndexT
+- (void) deleteToken:(id<Token>)anIndexT
{
[self delete:DEFAULT_PROGRAM_NAME FromIndex:[anIndexT getTokenIndex] ToIndex:[anIndexT getTokenIndex]];
}

-- (void) deleteFromToken:(id<ANTLRToken>)from ToToken:(id<ANTLRToken>)to
+- (void) deleteFromToken:(id<Token>)from ToToken:(id<Token>)to
{
[self delete:DEFAULT_PROGRAM_NAME FromIndex:[from getTokenIndex] ToIndex:[to getTokenIndex]];
}

-- (void) delete:(NSString *)programName FromToken:(id<ANTLRToken>)from ToToken:(id<ANTLRToken>)to
+- (void) delete:(NSString *)programName FromToken:(id<Token>)from ToToken:(id<Token>)to
{
[self replaceProgNam:programName FromIndex:[from getTokenIndex] ToIndex:[to getTokenIndex] Text:nil];
}
@@ -395,7 +395,7 @@ extern NSInteger debug;
{
#pragma warning fix this to look up the hashed name
NSInteger anInt = -1;
-    ANTLRMapElement *node = [lastRewriteTokenIndexes lookup:programName Scope:0];
+    MapElement *node = [lastRewriteTokenIndexes lookup:programName Scope:0];
if ( node != nil ) {
anInt = [lastRewriteTokenIndexes hash:programName];
}
@@ -407,18 +407,18 @@ extern NSInteger debug;
[lastRewriteTokenIndexes insertObject:programName atIndex:anInt];
}

--(ANTLRHashMap *) getProgram:(NSString *)name
+-(HashMap *) getProgram:(NSString *)name
{
-   ANTLRHashMap *is = (ANTLRHashMap *)[programs getName:name];
+   HashMap *is = (HashMap *)[programs getName:name];
if ( is == nil ) {
is = [self initializeProgram:name];
}
return is;
}

--(ANTLRHashMap *) initializeProgram:(NSString *)name
+-(HashMap *) initializeProgram:(NSString *)name
{
-    ANTLRHashMap *is = [ANTLRHashMap newANTLRHashMapWithLen:PROGRAM_INIT_SIZE];
+    HashMap *is = [HashMap newHashMapWithLen:PROGRAM_INIT_SIZE];
[is putName:name Node:nil];
return is;
}
@@ -433,7 +433,7 @@ extern NSInteger debug;
{
NSMutableString *buf = [NSMutableString stringWithCapacity:100];
for (int i = start; i >= MIN_TOKEN_INDEX && i <= end && i< [tokens count]; i++) {
-        if ( [[lastRewriteTokenIndexes objectAtIndex:i] type] != ANTLRTokenTypeEOF )
+        if ( [[lastRewriteTokenIndexes objectAtIndex:i] type] != TokenTypeEOF )
[buf appendString:[[tokens objectAtIndex:i] text]];
}
return [NSString stringWithString:buf];
@@ -458,7 +458,7 @@ extern NSInteger debug;

- (NSString *)toString:(NSString *)programName FromStart:(NSInteger)start ToEnd:(NSInteger)end
{
-    ANTLRHashMap *rewrites = (ANTLRHashMap *)[programs getName:programName];
+    HashMap *rewrites = (HashMap *)[programs getName:programName];

// ensure start/end are in range
if ( end > [tokens count]-1 ) end = [tokens count]-1;
@@ -471,17 +471,17 @@ extern NSInteger debug;
NSMutableString *buf = [NSMutableString stringWithCapacity:100];

// First, optimize instruction stream
-    ANTLRHashMap *indexToOp = [self reduceToSingleOperationPerIndex:rewrites];
+    HashMap *indexToOp = [self reduceToSingleOperationPerIndex:rewrites];

// Walk buffer, executing instructions and emitting tokens
int i = start;
while ( i <= end && i < [tokens count] ) {
-        ANTLRRewriteOperation *op = (ANTLRRewriteOperation *)[indexToOp objectAtIndex:i];
+        RewriteOperation *op = (RewriteOperation *)[indexToOp objectAtIndex:i];
[indexToOp setObject:nil atIndex:i]; // remove so any left have rwIndex size-1
-        id<ANTLRToken>t = (id<ANTLRToken>) [tokens objectAtIndex:i];
+        id<Token>t = (id<Token>) [tokens objectAtIndex:i];
if ( op == nil ) {
// no operation at that rwIndex, just dump token
-            if ( t.type != ANTLRTokenTypeEOF )
+            if ( t.type != TokenTypeEOF )
[buf appendString:t.text];
i++; // move to next token
}
@@ -499,7 +499,7 @@ extern NSInteger debug;
// should be included (they will be inserts).
int i2 = 0;
while ( i2 < [indexToOp count] - 1 ) {
-            ANTLRRewriteOperation *op = [indexToOp objectAtIndex:i2];
+            RewriteOperation *op = [indexToOp objectAtIndex:i2];
if ( op.rwIndex >= [tokens count]-1 ) {
[buf appendString:op.text];
}
@@ -553,13 +553,13 @@ extern NSInteger debug;
*
*  Return a map from token rwIndex to operation.
*/
-- (ANTLRHashMap *)reduceToSingleOperationPerIndex:(ANTLRHashMap *)rewrites
+- (HashMap *)reduceToSingleOperationPerIndex:(HashMap *)rewrites
{
//System.out.println("rewrites="+rewrites);
if (debug > 1) NSLog(@"rewrites=%@\n", [rewrites getName:DEFAULT_PROGRAM_NAME]);
// WALK REPLACES
for (int i = 0; i < [rewrites count]; i++) {
-        ANTLRRewriteOperation *op = (ANTLRRewriteOperation *)[rewrites objectAtIndex:i];
+        RewriteOperation *op = (RewriteOperation *)[rewrites objectAtIndex:i];
if ( op==nil )
continue;
if ( !([[op class] isKindOfClass:[ANTLRReplaceOp class]]) )
@@ -567,7 +567,7 @@ extern NSInteger debug;
ANTLRReplaceOp *rop = (ANTLRReplaceOp *)[rewrites objectAtIndex:i];
// Wipe prior inserts within range
//List inserts = getKindOfOps(rewrites, ANTLRInsertBeforeOp.class, i);
-        ANTLRHashMap *inserts = [self getKindOfOps:rewrites KindOfClass:[ANTLRInsertBeforeOp class] Index:i];
+        HashMap *inserts = [self getKindOfOps:rewrites KindOfClass:[ANTLRInsertBeforeOp class] Index:i];
for (int j = 0; j < [inserts size]; j++) {
ANTLRInsertBeforeOp *iop = (ANTLRInsertBeforeOp *)[inserts objectAtIndex:j];
if ( iop.rwIndex >= rop.rwIndex && iop.rwIndex <= rop.lastIndex ) {
@@ -576,7 +576,7 @@ extern NSInteger debug;
}
}
// Drop any prior replaces contained within
-        ANTLRHashMap *prevReplaces = [self getKindOfOps:rewrites KindOfClass:[ANTLRReplaceOp class] Index:i];
+        HashMap *prevReplaces = [self getKindOfOps:rewrites KindOfClass:[ANTLRReplaceOp class] Index:i];
for (int j = 0; j < [prevReplaces count]; j++) {
ANTLRReplaceOp *prevRop = (ANTLRReplaceOp *) [prevReplaces objectAtIndex:j];
if ( prevRop.rwIndex>=rop.rwIndex && prevRop.lastIndex <= rop.lastIndex ) {
@@ -596,14 +596,14 @@ extern NSInteger debug;

// WALK INSERTS
for (int i = 0; i < [rewrites count]; i++) {
-        ANTLRRewriteOperation *op = (ANTLRRewriteOperation *)[rewrites objectAtIndex:i];
+        RewriteOperation *op = (RewriteOperation *)[rewrites objectAtIndex:i];
if ( op == nil )
continue;
if ( !([[op class] isKindOfClass:[ANTLRInsertBeforeOp class]]) )
continue;
ANTLRInsertBeforeOp *iop = (ANTLRInsertBeforeOp *)[rewrites objectAtIndex:i];
// combine current insert with prior if any at same rwIndex
-        ANTLRHashMap *prevInserts = (ANTLRHashMap *)[self getKindOfOps:rewrites KindOfClass:[ANTLRInsertBeforeOp class] Index:i];
+        HashMap *prevInserts = (HashMap *)[self getKindOfOps:rewrites KindOfClass:[ANTLRInsertBeforeOp class] Index:i];
for (int j = 0; j < [prevInserts count]; j++) {
ANTLRInsertBeforeOp *prevIop = (ANTLRInsertBeforeOp *) [prevInserts objectAtIndex:j];
if ( prevIop.rwIndex == iop.rwIndex ) { // combine objects
@@ -615,7 +615,7 @@ extern NSInteger debug;
}
}
// look for replaces where iop.rwIndex is in range; error
-        ANTLRHashMap *prevReplaces = (ANTLRHashMap *)[self getKindOfOps:rewrites KindOfClass:[ANTLRReplaceOp class] Index:i];
+        HashMap *prevReplaces = (HashMap *)[self getKindOfOps:rewrites KindOfClass:[ANTLRReplaceOp class] Index:i];
for (int j = 0; j < [prevReplaces count]; j++) {
ANTLRReplaceOp *rop = (ANTLRReplaceOp *) [prevReplaces objectAtIndex:j];
if ( iop.rwIndex == rop.rwIndex ) {
@@ -629,13 +629,13 @@ extern NSInteger debug;
}
}
// System.out.println("rewrites after="+rewrites);
-    ANTLRHashMap *m = [ANTLRHashMap newANTLRHashMapWithLen:15];
+    HashMap *m = [HashMap newHashMapWithLen:15];
for (int i = 0; i < [rewrites count]; i++) {
-        ANTLRRewriteOperation *op = (ANTLRRewriteOperation *)[rewrites objectAtIndex:i];
+        RewriteOperation *op = (RewriteOperation *)[rewrites objectAtIndex:i];
if ( op == nil )
continue; // ignore deleted ops
if ( [m objectAtIndex:op.rwIndex] != nil ) {
-            @throw [ANTLRRuntimeException newException:@"should only be one op per rwIndex\n"];
+            @throw [RuntimeException newException:@"should only be one op per rwIndex\n"];
}
//[m put(new Integer(op.rwIndex), op);
[m setObject:op atIndex:op.rwIndex];
@@ -656,17 +656,17 @@ extern NSInteger debug;
return [NSString stringWithFormat:@"%@%@",x, y];
}

-- (ANTLRHashMap *)getKindOfOps:(ANTLRHashMap *)rewrites KindOfClass:(Class)kind
+- (HashMap *)getKindOfOps:(HashMap *)rewrites KindOfClass:(Class)kind
{
return [self getKindOfOps:rewrites KindOfClass:kind Index:[rewrites count]];
}

/** Get all operations before an rwIndex of a particular kind */
-- (ANTLRHashMap *)getKindOfOps:(ANTLRHashMap *)rewrites KindOfClass:(Class)kind Index:(NSInteger)before
+- (HashMap *)getKindOfOps:(HashMap *)rewrites KindOfClass:(Class)kind Index:(NSInteger)before
{
-    ANTLRHashMap *ops = [ANTLRHashMap newANTLRHashMapWithLen:15];
+    HashMap *ops = [HashMap newHashMapWithLen:15];
for (int i = 0; i < before && i < [rewrites count]; i++) {
-        ANTLRRewriteOperation *op = (ANTLRRewriteOperation *)[rewrites objectAtIndex:i];
+        RewriteOperation *op = (RewriteOperation *)[rewrites objectAtIndex:i];
if ( op == nil )
continue; // ignore deleted
if ( [op isKindOfClass:(Class)kind] )
diff --git a/runtime/ObjC/Framework/TokenSource.h b/runtime/ObjC/Framework/TokenSource.h
index ca1fa2b..ff46d4c 100644
--- a/runtime/ObjC/Framework/TokenSource.h
+++ b/runtime/ObjC/Framework/TokenSource.h
@@ -25,14 +25,14 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


-#import "ANTLRToken.h"
+#import "Token.h"

// Anything that responds to -nextToken can be treated as a lexer.
// For instance this can be a flex lexer or a handwritten one or even
// a proxy for a remotely running token source (database, lexer, whatever).
-@protocol ANTLRTokenSource <NSObject, NSCopying>
+@protocol TokenSource <NSObject, NSCopying>

-- (id<ANTLRToken>) nextToken;
+- (id<Token>) nextToken;
- (NSString *)getSourceName;

@end
diff --git a/runtime/ObjC/Framework/TokenStream.h b/runtime/ObjC/Framework/TokenStream.h
index c104578..a8c9cf1 100644
--- a/runtime/ObjC/Framework/TokenStream.h
+++ b/runtime/ObjC/Framework/TokenStream.h
@@ -25,10 +25,10 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


-#import "ANTLRIntStream.h"
-#import "ANTLRToken.h"
+#import "IntStream.h"
+#import "Token.h"

-@protocol ANTLRTokenStream < ANTLRIntStream >
+@protocol TokenStream < IntStream >

// Get Token at current input pointer + i ahead where i=1 is next Token.
// i<0 indicates tokens in the past.  So -1 is previous token and -2 is
@@ -36,9 +36,9 @@
// Return null for LT:0 and any index that results in an absolute address
// that is negative.

-- (id<ANTLRToken>) LT:(NSInteger) i;
+- (id<Token>) LT:(NSInteger) i;

-- (id<ANTLRToken>) getToken:(NSUInteger) i;
+- (id<Token>) getToken:(NSUInteger) i;

- (id) getTokenSource;

@@ -56,7 +56,7 @@
*  to the other toString(int,int).  This is also parallel with
*  the TreeNodeStream.toString(Object,Object).
*/
-- (NSString *) toStringFromToken:(id<ANTLRToken>)startToken ToToken:(id<ANTLRToken>)stopToken;
+- (NSString *) toStringFromToken:(id<Token>)startToken ToToken:(id<Token>)stopToken;


@end
diff --git a/runtime/ObjC/Framework/Tree.h b/runtime/ObjC/Framework/Tree.h
index 32f603a..c398b22 100644
--- a/runtime/ObjC/Framework/Tree.h
+++ b/runtime/ObjC/Framework/Tree.h
@@ -30,24 +30,24 @@

#import "AMutableArray.h"

-@protocol ANTLRTree < NSObject, NSCopying >
+@protocol Tree < NSObject, NSCopying >

-//+ (id<ANTLRTree>) invalidNode;
+//+ (id<Tree>) invalidNode;

-- (id<ANTLRTree>) getChild:(NSUInteger)index;
+- (id<Tree>) getChild:(NSUInteger)index;
- (NSUInteger) getChildCount;

// Tree tracks parent and child index now > 3.0

-- (id<ANTLRTree>)getParent;
+- (id<Tree>)getParent;

-- (void) setParent:(id<ANTLRTree>)t;
+- (void) setParent:(id<Tree>)t;

/** Is there is a node above with token type ttype? */
- (BOOL) hasAncestor:(NSInteger)ttype;

/** Walk upwards and get first ancestor with this token type. */
-- (id<ANTLRTree>) getAncestor:(NSInteger) ttype;
+- (id<Tree>) getAncestor:(NSInteger) ttype;

/** Return a list of all ancestors of this node.  The first node of
*  list is the root and the last is the parent of this node.
@@ -65,10 +65,10 @@
/** Add t as a child to this node.  If t is null, do nothing.  If t
*  is nil, add all children of t to this' children.
*/
-- (void) addChild:(id<ANTLRTree>) t;
+- (void) addChild:(id<Tree>) t;

/** Set ith child (0..n-1) to t; t must be non-null and non-nil node */
-- (void) setChild:(NSInteger)i With:(id<ANTLRTree>) t;
+- (void) setChild:(NSInteger)i With:(id<Tree>) t;

- (id) deleteChild:(NSInteger) i;

@@ -104,7 +104,7 @@
- (NSInteger) getTokenStopIndex;
- (void) setTokenStopIndex:(NSInteger) index;

-- (id<ANTLRTree>) dupNode;
+- (id<Tree>) dupNode;

- (NSString *) toString;

diff --git a/runtime/ObjC/Framework/TreeAdaptor.h b/runtime/ObjC/Framework/TreeAdaptor.h
index e0d94e0..4920e3a 100644
--- a/runtime/ObjC/Framework/TreeAdaptor.h
+++ b/runtime/ObjC/Framework/TreeAdaptor.h
@@ -24,17 +24,17 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRToken.h"
-#import "ANTLRBaseTree.h"
-#import "ANTLRTokenStream.h"
+#import "Token.h"
+#import "BaseTree.h"
+#import "TokenStream.h"

#pragma warning tree/node diction is broken.

-@protocol ANTLRTreeAdaptor <NSObject, NSCopying>
+@protocol TreeAdaptor <NSObject, NSCopying>

#pragma mark Construction

-#pragma mark ANTLRTreeAdaptor implementation
+#pragma mark TreeAdaptor implementation
- (id)dupNode:(id)aNode;	// copies just the node
- (id)dupTree:(id)aTree;	// copies the entire subtree, recursively

@@ -58,9 +58,9 @@
*  Tree parsing should happen only when parsing and tree construction
*  succeed.
*/
-- (id) errorNode:(id<ANTLRTokenStream>)anInput
-            From:(id<ANTLRToken>)aStartToken
-              To:(id<ANTLRToken>)aStopToken
+- (id) errorNode:(id<TokenStream>)anInput
+            From:(id<Token>)aStartToken
+              To:(id<Token>)aStopToken
Exception:(NSException *) e;

/** Is tree considered a nil node used to make lists of child nodes? */
@@ -103,9 +103,9 @@

- (NSUInteger) getUniqueID:(id)aNode;

-- (id) create:(id<ANTLRToken>)payload;
-- (id) createTree:(NSInteger)tokenType FromToken:(id<ANTLRToken>)fromToken;
-- (id) createTree:(NSInteger)tokenType FromToken:(id<ANTLRToken>)fromToken Text:(NSString *)text;
+- (id) create:(id<Token>)payload;
+- (id) createTree:(NSInteger)tokenType FromToken:(id<Token>)fromToken;
+- (id) createTree:(NSInteger)tokenType FromToken:(id<Token>)fromToken Text:(NSString *)text;
- (id) createTree:(NSInteger)tokenType Text:(NSString *)text;

#pragma mark Content
@@ -119,9 +119,9 @@
- (NSString *) getText:(id)aNode;
- (void) setText:(id)aNode Text:(NSString *)tokenText;

-//- (id<ANTLRToken>) getToken:(id)t;
+//- (id<Token>) getToken:(id)t;

-- (void) setTokenBoundaries:(id)aTree From:(id<ANTLRToken>)startToken To:(id<ANTLRToken>)stopToken;
+- (void) setTokenBoundaries:(id)aTree From:(id<Token>)startToken To:(id<Token>)stopToken;
- (NSInteger) getTokenStartIndex:(id)aTree;
- (NSInteger) getTokenStopIndex:(id)aTree;

diff --git a/runtime/ObjC/Framework/TreeException.h b/runtime/ObjC/Framework/TreeException.h
index 28330af..dd58aff 100644
--- a/runtime/ObjC/Framework/TreeException.h
+++ b/runtime/ObjC/Framework/TreeException.h
@@ -25,18 +25,18 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRTree.h"
-#import "ANTLRRecognitionException.h"
+#import "Tree.h"
+#import "RecognitionException.h"

-@interface ANTLRTreeException : ANTLRRecognitionException {
-	id<ANTLRBaseTree> oldRoot;
-	id<ANTLRBaseTree> newRoot;
+@interface TreeException : RecognitionException {
+	id<BaseTree> oldRoot;
+	id<BaseTree> newRoot;
}

-+ (id) newException:(id<ANTLRBaseTree>)theOldRoot newRoot:(id<ANTLRBaseTree>)theNewRoot stream:(id<ANTLRIntStream>)aStream;
-- (id) initWithOldRoot:(id<ANTLRBaseTree>)theOldRoot newRoot:(id<ANTLRBaseTree>)theNewRoot stream:(id<ANTLRIntStream>)aStream;
++ (id) newException:(id<BaseTree>)theOldRoot newRoot:(id<BaseTree>)theNewRoot stream:(id<IntStream>)aStream;
+- (id) initWithOldRoot:(id<BaseTree>)theOldRoot newRoot:(id<BaseTree>)theNewRoot stream:(id<IntStream>)aStream;

-- (void) setOldRoot:(id<ANTLRBaseTree>)aTree;
-- (void) setNewRoot:(id<ANTLRBaseTree>)aTree;
+- (void) setOldRoot:(id<BaseTree>)aTree;
+- (void) setNewRoot:(id<BaseTree>)aTree;

@end
diff --git a/runtime/ObjC/Framework/TreeException.m b/runtime/ObjC/Framework/TreeException.m
index b61d29c..3188f85 100644
--- a/runtime/ObjC/Framework/TreeException.m
+++ b/runtime/ObjC/Framework/TreeException.m
@@ -1,5 +1,5 @@
//
-//  ANTLRTreeException.m
+//  TreeException.m
//  ANTLR
//
//  Created by Kay Röpke on 24.10.2006.
@@ -30,17 +30,17 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


-#import "ANTLRTreeException.h"
+#import "TreeException.h"


-@implementation ANTLRTreeException
+@implementation TreeException

-+ (id) newException:(id<ANTLRBaseTree>)theOldRoot newRoot:(id<ANTLRBaseTree>)theNewRoot stream:(id<ANTLRIntStream>)aStream;
++ (id) newException:(id<BaseTree>)theOldRoot newRoot:(id<BaseTree>)theNewRoot stream:(id<IntStream>)aStream;
{
-	return [[ANTLRTreeException alloc] initWithOldRoot:theOldRoot newRoot:theNewRoot stream:aStream];
+	return [[TreeException alloc] initWithOldRoot:theOldRoot newRoot:theNewRoot stream:aStream];
}

-- (id) initWithOldRoot:(id<ANTLRBaseTree>)theOldRoot newRoot:(id<ANTLRBaseTree>)theNewRoot stream:(id<ANTLRIntStream>)aStream;
+- (id) initWithOldRoot:(id<BaseTree>)theOldRoot newRoot:(id<BaseTree>)theNewRoot stream:(id<IntStream>)aStream;
{
if ((self = [super initWithStream:aStream reason:@"The new root has more than one child. Cannot make it the root node."]) != nil ) {
[self setOldRoot:theOldRoot];
@@ -52,14 +52,14 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRTreeException" );
+    NSLog( @"called dealloc in TreeException" );
#endif
[self setOldRoot:nil];
[self setNewRoot:nil];
[super dealloc];
}

-- (void) setNewRoot:(id<ANTLRBaseTree>)aTree
+- (void) setNewRoot:(id<BaseTree>)aTree
{
if (newRoot != aTree) {
[aTree retain];
@@ -68,7 +68,7 @@
}
}

-- (void) setOldRoot:(id<ANTLRBaseTree>)aTree
+- (void) setOldRoot:(id<BaseTree>)aTree
{
if (oldRoot != aTree) {
[aTree retain];
diff --git a/runtime/ObjC/Framework/TreeIterator.h b/runtime/ObjC/Framework/TreeIterator.h
index b5cf8c3..982e4b6 100644
--- a/runtime/ObjC/Framework/TreeIterator.h
+++ b/runtime/ObjC/Framework/TreeIterator.h
@@ -1,5 +1,5 @@
//
-//  ANTLRTreeIterator.h
+//  TreeIterator.h
//  ANTLR
//
//  Created by Ian Michell on 26/04/2010.
@@ -30,39 +30,39 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRCommonTreeAdaptor.h"
-#import "ANTLRFastQueue.h"
-#import "ANTLRTreeAdaptor.h"
-#import "ANTLRTree.h"
+#import "CommonTreeAdaptor.h"
+#import "FastQueue.h"
+#import "TreeAdaptor.h"
+#import "Tree.h"

-@interface ANTLRTreeIterator : NSObject
+@interface TreeIterator : NSObject
{
BOOL firstTime;
-	__strong id<ANTLRTreeAdaptor> adaptor;
-	__strong id<ANTLRBaseTree> root;
-	__strong id<ANTLRBaseTree> tree;
+	__strong id<TreeAdaptor> adaptor;
+	__strong id<BaseTree> root;
+	__strong id<BaseTree> tree;

-	__strong ANTLRFastQueue *nodes;
-	__strong id<ANTLRBaseTree> up;
-	__strong id<ANTLRBaseTree> down;
-	__strong id<ANTLRBaseTree> eof;
+	__strong FastQueue *nodes;
+	__strong id<BaseTree> up;
+	__strong id<BaseTree> down;
+	__strong id<BaseTree> eof;
}

@property BOOL firstTime;
-@property(retain) id<ANTLRTreeAdaptor> adaptor;
-@property(retain) id<ANTLRBaseTree> root;
-@property(retain) id<ANTLRBaseTree> tree;
-@property(retain) ANTLRFastQueue *nodes;
-@property(retain, readwrite) id<ANTLRBaseTree> up;
-@property(retain, readwrite) id<ANTLRBaseTree> down;
-@property(retain, readwrite) id<ANTLRBaseTree> eof;
+@property(retain) id<TreeAdaptor> adaptor;
+@property(retain) id<BaseTree> root;
+@property(retain) id<BaseTree> tree;
+@property(retain) FastQueue *nodes;
+@property(retain, readwrite) id<BaseTree> up;
+@property(retain, readwrite) id<BaseTree> down;
+@property(retain, readwrite) id<BaseTree> eof;

+ newANTRLTreeIterator;
-+ (ANTLRTreeIterator *) newANTRLTreeIteratorWithAdaptor:(ANTLRCommonTreeAdaptor *)adaptor
-                                                andTree:(id<ANTLRBaseTree>)tree;
++ (TreeIterator *) newANTRLTreeIteratorWithAdaptor:(CommonTreeAdaptor *)adaptor
+                                                andTree:(id<BaseTree>)tree;
- (id) init;
-- (id) initWithTree:(id<ANTLRBaseTree>) t;
-- (id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>) a andTree:(id<ANTLRBaseTree>) t;
+- (id) initWithTree:(id<BaseTree>) t;
+- (id) initWithTreeAdaptor:(id<TreeAdaptor>) a andTree:(id<BaseTree>) t;

- (void) reset;
- (BOOL) hasNext;
diff --git a/runtime/ObjC/Framework/TreeIterator.m b/runtime/ObjC/Framework/TreeIterator.m
index b760f88..a79f97f 100644
--- a/runtime/ObjC/Framework/TreeIterator.m
+++ b/runtime/ObjC/Framework/TreeIterator.m
@@ -1,5 +1,5 @@
//
-//  ANTLRTreeIterator.m
+//  TreeIterator.m
//  ANTLR
//
//  Created by Ian Michell on 26/04/2010.
@@ -29,20 +29,20 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


-#import "ANTLRTreeIterator.h"
-#import "ANTLRCommonTreeAdaptor.h"
+#import "TreeIterator.h"
+#import "CommonTreeAdaptor.h"

-@implementation ANTLRTreeIterator
+@implementation TreeIterator

-+ (ANTLRTreeIterator *) newANTRLTreeIterator
++ (TreeIterator *) newANTRLTreeIterator
{
-    return [[ANTLRTreeIterator alloc] init];
+    return [[TreeIterator alloc] init];
}

-+ (ANTLRTreeIterator *) newANTRLTreeIteratorWithAdaptor:(ANTLRCommonTreeAdaptor *)adaptor
-                                                andTree:(id<ANTLRBaseTree>)tree
++ (TreeIterator *) newANTRLTreeIteratorWithAdaptor:(CommonTreeAdaptor *)adaptor
+                                                andTree:(id<BaseTree>)tree
{
-    return [[ANTLRTreeIterator alloc] initWithTreeAdaptor:adaptor andTree:tree];
+    return [[TreeIterator alloc] initWithTreeAdaptor:adaptor andTree:tree];
}

- (id) init
@@ -50,33 +50,33 @@
self = [super init];
if ( self != nil ) {
firstTime = YES;
-        nodes = [[ANTLRFastQueue newANTLRFastQueue] retain];
-        down = [[adaptor createTree:ANTLRTokenTypeDOWN Text:@"DOWN"] retain];
-        up = [[adaptor createTree:ANTLRTokenTypeUP Text:@"UP"] retain];
-        eof = [[adaptor createTree:ANTLRTokenTypeEOF Text:@"EOF"] retain];
+        nodes = [[FastQueue newFastQueue] retain];
+        down = [[adaptor createTree:TokenTypeDOWN Text:@"DOWN"] retain];
+        up = [[adaptor createTree:TokenTypeUP Text:@"UP"] retain];
+        eof = [[adaptor createTree:TokenTypeEOF Text:@"EOF"] retain];
tree = eof;
root = eof;
}
return self;
}

--(id) initWithTree:(id<ANTLRBaseTree>) t
+-(id) initWithTree:(id<BaseTree>) t
{
self = [super init];
if ( self != nil ) {
firstTime = YES;
-        adaptor = [[ANTLRCommonTreeAdaptor newTreeAdaptor] retain];
+        adaptor = [[CommonTreeAdaptor newTreeAdaptor] retain];
tree = [t retain];
root = t;
-        nodes = [[ANTLRFastQueue newANTLRFastQueue] retain];
-        down = [[adaptor createTree:ANTLRTokenTypeDOWN Text:@"DOWN"] retain];
-        up = [[adaptor createTree:ANTLRTokenTypeUP Text:@"UP"] retain];
-        eof = [[adaptor createTree:ANTLRTokenTypeEOF Text:@"EOF"] retain];
+        nodes = [[FastQueue newFastQueue] retain];
+        down = [[adaptor createTree:TokenTypeDOWN Text:@"DOWN"] retain];
+        up = [[adaptor createTree:TokenTypeUP Text:@"UP"] retain];
+        eof = [[adaptor createTree:TokenTypeEOF Text:@"EOF"] retain];
}
return self;
}

--(id) initWithTreeAdaptor:(id<ANTLRTreeAdaptor>)a andTree:(id<ANTLRBaseTree>)t
+-(id) initWithTreeAdaptor:(id<TreeAdaptor>)a andTree:(id<BaseTree>)t
{
self = [super init];
if ( self != nil ) {
@@ -84,10 +84,10 @@
adaptor = [a retain];
tree = [t retain];
root = t;
-        nodes = [[ANTLRFastQueue newANTLRFastQueue] retain];
-        down = [[adaptor createTree:ANTLRTokenTypeDOWN Text:@"DOWN"] retain];
-        up = [[adaptor createTree:ANTLRTokenTypeUP Text:@"UP"] retain];
-        eof = [[adaptor createTree:ANTLRTokenTypeEOF Text:@"EOF"] retain];
+        nodes = [[FastQueue newFastQueue] retain];
+        down = [[adaptor createTree:TokenTypeDOWN Text:@"DOWN"] retain];
+        up = [[adaptor createTree:TokenTypeUP Text:@"UP"] retain];
+        eof = [[adaptor createTree:TokenTypeEOF Text:@"EOF"] retain];
}
return self;
}
@@ -95,7 +95,7 @@
- (void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRTreeIterator" );
+    NSLog( @"called dealloc in TreeIterator" );
#endif
if ( adaptor ) [adaptor release];
if ( nodes ) [nodes release];
@@ -156,7 +156,7 @@
return self.down;
}
// if no children, look for next sibling of ancestor
-    id<ANTLRBaseTree> parent = [adaptor getParent:tree];
+    id<BaseTree> parent = [adaptor getParent:tree];
while (parent != nil && ([adaptor getChildIndex:tree] + 1) >= [adaptor getChildCount:parent]) {
[nodes addObject:up];
tree = parent;
@@ -186,7 +186,7 @@

- (void)remove
{
-    @throw [ANTLRRuntimeException newException:@"ANTLRUnsupportedOperationException"];
+    @throw [RuntimeException newException:@"UnsupportedOperationException"];
}

@synthesize firstTime;
diff --git a/runtime/ObjC/Framework/TreeNodeStream.h b/runtime/ObjC/Framework/TreeNodeStream.h
index 8d10aaa..d16527d 100644
--- a/runtime/ObjC/Framework/TreeNodeStream.h
+++ b/runtime/ObjC/Framework/TreeNodeStream.h
@@ -26,26 +26,77 @@


#import <Cocoa/Cocoa.h>
-#import "ANTLRIntStream.h"
-#import "ANTLRCharStream.h"
-#import "ANTLRTokenStream.h"
-#import "ANTLRCommonTree.h"
-#import "ANTLRCommonTreeAdaptor.h"
+#import "IntStream.h"
+#import "CharStream.h"
+#import "TokenStream.h"
+#import "CommonTree.h"
+#import "CommonTreeAdaptor.h"

-@protocol ANTLRTreeNodeStream < ANTLRIntStream >
+@protocol TreeNodeStream < IntStream >

-- (id) initWithTree:(ANTLRCommonTree *)theTree;
+- (id) initWithTree:(CommonTree *)theTree;

-- (id) getTree:(NSInteger) idx;
+/** Get a tree node at an absolute index i; 0..n-1.
+ *  If you don't want to buffer up nodes, then this method makes no
+ *  sense for you.
+ */
+- (id) get:(NSInteger) idx;
+/** Get tree node at current input pointer + i ahead where i=1 is next node.
+ *  i<0 indicates nodes in the past.  So LT(-1) is previous node, but
+ *  implementations are not required to provide results for k < -1.
+ *  LT(0) is undefined.  For i>=n, return null.
+ *  Return null for LT(0) and any index that results in an absolute address
+ *  that is negative.
+ *
+ *  This is analogus to the LT() method of the TokenStream, but this
+ *  returns a tree node instead of a token.  Makes code gen identical
+ *  for both parser and tree grammars. :)
+ */
- (id) LT:(NSInteger)k;
+/** Where is this stream pulling nodes from?  This is not the name, but
+ *  the object that provides node objects.
+ */
- (id) getTreeSource;
-- (id<ANTLRTokenStream>) getTokenStream;
-- (id<ANTLRTreeAdaptor>) getTreeAdaptor;
+/** If the tree associated with this stream was created from a TokenStream,
+ *  you can specify it here.  Used to do rule $text attribute in tree
+ *  parser.  Optional unless you use tree parser rule text attribute
+ *  or output=template and rewrite=true options.
+ */
+- (id<TokenStream>) getTokenStream;
+/** What adaptor can tell me how to interpret/navigate nodes and
+ *  trees.  E.g., get text of a node.
+ */
+- (id<TreeAdaptor>) getTreeAdaptor;
+/** As we flatten the tree, we use UP, DOWN nodes to represent
+ *  the tree structure.  When debugging we need unique nodes
+ *  so we have to instantiate new ones.  When doing normal tree
+ *  parsing, it's slow and a waste of memory to create unique
+ *  navigation nodes.  Default should be false;
+ */
- (void) setUniqueNavigationNodes:(BOOL)flag;
+/** Reset the tree node stream in such a way that it acts like
+ *  a freshly constructed stream.
+ */
- (void) reset;

+/** Return the text of all nodes from start to stop, inclusive.
+ *  If the stream does not buffer all the nodes then it can still
+ *  walk recursively from start until stop.  You can always return
+ *  null or "" too, but users should not access $ruleLabel.text in
+ *  an action of course in that case.
+ */
- (NSString *) toStringFromNode:(id)startNode ToNode:(id)stopNode;

+/** Replace from start to stop child index of parent with t, which might
+ *  be a list.  Number of children may be different
+ *  after this call.  The stream is notified because it is walking the
+ *  tree and might need to know you are monkeying with the underlying
+ *  tree.  Also, it might be able to modify the node stream to avoid
+ *  restreaming for future phases.
+ *
+ *  If parent is null, don't do anything; must be at root of overall tree.
+ *  Can't replace whatever points to the parent externally.  Do nothing.
+ */
- (void) replaceChildren:(id)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id) t;


diff --git a/runtime/ObjC/Framework/TreeParser.h b/runtime/ObjC/Framework/TreeParser.h
index 9d2d5c6..91cdb97 100644
--- a/runtime/ObjC/Framework/TreeParser.h
+++ b/runtime/ObjC/Framework/TreeParser.h
@@ -25,37 +25,37 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRBaseRecognizer.h"
-#import "ANTLRTreeNodeStream.h"
-#import "ANTLRCommonTreeAdaptor.h"
-#import "ANTLRMismatchedTreeNodeException.h"
+#import "BaseRecognizer.h"
+#import "TreeNodeStream.h"
+#import "CommonTreeAdaptor.h"
+#import "MismatchedTreeNodeException.h"

-@interface ANTLRTreeParser : ANTLRBaseRecognizer {
-	id<ANTLRTreeNodeStream> input;
+@interface TreeParser : BaseRecognizer {
+	id<TreeNodeStream> input;
}

-@property (retain, getter=input, setter=setInput:) id<ANTLRTreeNodeStream> input;
+@property (retain, getter=input, setter=setInput:) id<TreeNodeStream> input;

-+ (id) newANTLRTreeParser:(id<ANTLRTreeNodeStream>)anInput;
-+ (id) newANTLRTreeParser:(id<ANTLRTreeNodeStream>)anInput State:(ANTLRRecognizerSharedState *)state;
++ (id) newTreeParser:(id<TreeNodeStream>)anInput;
++ (id) newTreeParser:(id<TreeNodeStream>)anInput State:(RecognizerSharedState *)state;

-- (id) initWithStream:(id<ANTLRTreeNodeStream>)theInput;
-- (id) initWithStream:(id<ANTLRTreeNodeStream>)theInput
-                State:(ANTLRRecognizerSharedState *)state;
+- (id) initWithStream:(id<TreeNodeStream>)theInput;
+- (id) initWithStream:(id<TreeNodeStream>)theInput
+                State:(RecognizerSharedState *)state;


-- (id<ANTLRTreeNodeStream>)input;
-- (void) setInput:(id<ANTLRTreeNodeStream>)anInput;
+- (id<TreeNodeStream>)input;
+- (void) setInput:(id<TreeNodeStream>)anInput;

-- (void) setTreeNodeStream:(id<ANTLRTreeNodeStream>) anInput;
-- (id<ANTLRTreeNodeStream>) getTreeNodeStream;
+- (void) setTreeNodeStream:(id<TreeNodeStream>) anInput;
+- (id<TreeNodeStream>) getTreeNodeStream;

- (NSString *)getSourceName;

-- (id) getCurrentInputSymbol:(id<ANTLRIntStream>) anInput;
+- (id) getCurrentInputSymbol:(id<IntStream>) anInput;

-- (id) getMissingSymbol:(id<ANTLRIntStream>)input
-              Exception:(ANTLRRecognitionException *) e
+- (id) getMissingSymbol:(id<IntStream>)input
+              Exception:(RecognitionException *) e
ExpectedToken:(NSInteger) expectedTokenType
BitSet:(ANTLRBitSet *)follow;

@@ -63,13 +63,13 @@
*  entire tree if node has children.  If children, scan until
*  corresponding UP node.
*/
-- (void) matchAny:(id<ANTLRIntStream>)ignore;
+- (void) matchAny:(id<IntStream>)ignore;

/** We have DOWN/UP nodes in the stream that have no line info; override.
*  plus we want to alter the exception type.  Don't try to recover
*  from tree parser errors inline...
*/
-- (id) recoverFromMismatchedToken:(id<ANTLRIntStream>)anInput
+- (id) recoverFromMismatchedToken:(id<IntStream>)anInput
Type:(NSInteger)ttype
Follow:(ANTLRBitSet *)follow;

@@ -77,9 +77,9 @@
*  always intended for the programmer because the parser built
*  the input tree not the user.
*/
-- (NSString *)getErrorHeader:(ANTLRRecognitionException *)e;
+- (NSString *)getErrorHeader:(RecognitionException *)e;

-- (NSString *)getErrorMessage:(ANTLRRecognitionException *)e TokenNames:(AMutableArray *) tokenNames;
+- (NSString *)getErrorMessage:(RecognitionException *)e TokenNames:(AMutableArray *) tokenNames;

- (void) traceIn:(NSString *)ruleName Index:(NSInteger)ruleIndex;
- (void) traceOut:(NSString *)ruleName Index:(NSInteger)ruleIndex;
diff --git a/runtime/ObjC/Framework/TreeParser.m b/runtime/ObjC/Framework/TreeParser.m
index 599ec7c..99abffb 100644
--- a/runtime/ObjC/Framework/TreeParser.m
+++ b/runtime/ObjC/Framework/TreeParser.m
@@ -24,23 +24,23 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRTreeParser.h"
+#import "TreeParser.h"

-@implementation ANTLRTreeParser
+@implementation TreeParser

@synthesize input;

-+ (id) newANTLRTreeParser:(id<ANTLRTreeNodeStream>)anInput
++ (id) newTreeParser:(id<TreeNodeStream>)anInput
{
-    return [[ANTLRTreeParser alloc] initWithStream:anInput];
+    return [[TreeParser alloc] initWithStream:anInput];
}

-+ (id) newANTLRTreeParser:(id<ANTLRTreeNodeStream>)anInput State:(ANTLRRecognizerSharedState *)theState
++ (id) newTreeParser:(id<TreeNodeStream>)anInput State:(RecognizerSharedState *)theState
{
-    return [[ANTLRTreeParser alloc] initWithStream:anInput State:theState];
+    return [[TreeParser alloc] initWithStream:anInput State:theState];
}

-- (id) initWithStream:(id<ANTLRTreeNodeStream>)theInput
+- (id) initWithStream:(id<TreeNodeStream>)theInput
{
if ((self = [super init]) != nil) {
[self setInput:theInput];
@@ -48,7 +48,7 @@
return self;
}

-- (id) initWithStream:(id<ANTLRTreeNodeStream>)theInput State:(ANTLRRecognizerSharedState *)theState
+- (id) initWithStream:(id<TreeNodeStream>)theInput State:(RecognizerSharedState *)theState
{
if ((self = [super init]) != nil) {
[self setInput:theInput];
@@ -60,7 +60,7 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRTreeParser" );
+    NSLog( @"called dealloc in TreeParser" );
#endif
if ( input ) [input release];
[super dealloc];
@@ -74,19 +74,19 @@
}
}

-- (void) mismatch:(id<ANTLRIntStream>)aStream tokenType:(ANTLRTokenType)aTType follow:(ANTLRBitSet *)aBitset
+- (void) mismatch:(id<IntStream>)aStream tokenType:(TokenType)aTType follow:(ANTLRBitSet *)aBitset
{
-	ANTLRMismatchedTreeNodeException *mte = [ANTLRMismatchedTreeNodeException newException:aTType Stream:aStream];
-    [mte setNode:[((id<ANTLRTreeNodeStream>)aStream) LT:1]];
+	MismatchedTreeNodeException *mte = [MismatchedTreeNodeException newException:aTType Stream:aStream];
+    [mte setNode:[((id<TreeNodeStream>)aStream) LT:1]];
[self recoverFromMismatchedToken:aStream Type:aTType Follow:aBitset];
}

-- (void) setTreeNodeStream:(id<ANTLRTreeNodeStream>) anInput
+- (void) setTreeNodeStream:(id<TreeNodeStream>) anInput
{
input = anInput;
}

-- (id<ANTLRTreeNodeStream>) getTreeNodeStream
+- (id<TreeNodeStream>) getTreeNodeStream
{
return input;
}
@@ -96,47 +96,47 @@
return [input getSourceName];
}

-- (id) getCurrentInputSymbol:(id<ANTLRIntStream>) anInput
+- (id) getCurrentInputSymbol:(id<IntStream>) anInput
{
-    return [(id<ANTLRTreeNodeStream>)anInput LT:1];
+    return [(id<TreeNodeStream>)anInput LT:1];
}

-- (id) getMissingSymbol:(id<ANTLRIntStream>)anInput
-              Exception:(ANTLRRecognitionException *)e
+- (id) getMissingSymbol:(id<IntStream>)anInput
+              Exception:(RecognitionException *)e
ExpectedToken:(NSInteger)expectedTokenType
BitSet:(ANTLRBitSet *)follow
{
NSString *tokenText =[NSString stringWithFormat:@"<missing %@ %d>", [self getTokenNames], expectedTokenType];
-    //id<ANTLRTreeAdaptor> anAdaptor = (id<ANTLRTreeAdaptor>)[((id<ANTLRTreeNodeStream>)e.input) getTreeAdaptor];
+    //id<TreeAdaptor> anAdaptor = (id<TreeAdaptor>)[((id<TreeNodeStream>)e.input) getTreeAdaptor];
//return [anAdaptor createToken:expectedTokenType Text:tokenText];
-    return [ANTLRCommonToken newToken:expectedTokenType Text:tokenText];
+    return [CommonToken newToken:expectedTokenType Text:tokenText];
}

/** Match '.' in tree parser has special meaning.  Skip node or
*  entire tree if node has children.  If children, scan until
*  corresponding UP node.
*/
-- (void) matchAny:(id<ANTLRIntStream>)ignore
+- (void) matchAny:(id<IntStream>)ignore
{ // ignore stream, copy of input
state.errorRecovery = NO;
state.failed = NO;
id look = [input LT:1];
-    if ( [((ANTLRCommonTreeAdaptor *)[input getTreeAdaptor]) getChildCount:look] == 0) {
+    if ( [((CommonTreeAdaptor *)[input getTreeAdaptor]) getChildCount:look] == 0) {
[input consume]; // not subtree, consume 1 node and return
return;
}
// current node is a subtree, skip to corresponding UP.
// must count nesting level to get right UP
int level=0;
-    int tokenType = [((id<ANTLRTreeAdaptor>)[input getTreeAdaptor]) getType:look];
-    while ( tokenType != ANTLRTokenTypeEOF && !( tokenType == ANTLRTokenTypeUP && level == 0) ) {
+    int tokenType = [((id<TreeAdaptor>)[input getTreeAdaptor]) getType:look];
+    while ( tokenType != TokenTypeEOF && !( tokenType == TokenTypeUP && level == 0) ) {
[input consume];
look = [input LT:1];
-        tokenType = [((id<ANTLRTreeAdaptor>)[input getTreeAdaptor]) getType:look];
-        if ( tokenType == ANTLRTokenTypeDOWN ) {
+        tokenType = [((id<TreeAdaptor>)[input getTreeAdaptor]) getType:look];
+        if ( tokenType == TokenTypeDOWN ) {
level++;
}
-        else if ( tokenType == ANTLRTokenTypeUP ) {
+        else if ( tokenType == TokenTypeUP ) {
level--;
}
}
@@ -147,16 +147,16 @@
*  plus we want to alter the exception type.  Don't try to recover
*  from tree parser errors inline...
*/
-- (id) recoverFromMismatchedToken:(id<ANTLRIntStream>)anInput Type:(NSInteger)ttype Follow:(ANTLRBitSet *)follow
+- (id) recoverFromMismatchedToken:(id<IntStream>)anInput Type:(NSInteger)ttype Follow:(ANTLRBitSet *)follow
{
-    @throw [ANTLRMismatchedTreeNodeException newException:ttype Stream:anInput];
+    @throw [MismatchedTreeNodeException newException:ttype Stream:anInput];
}

/** Prefix error message with the grammar name because message is
*  always intended for the programmer because the parser built
*  the input tree not the user.
*/
-- (NSString *)getErrorHeader:(ANTLRRecognitionException *)e
+- (NSString *)getErrorHeader:(RecognitionException *)e
{
return [NSString stringWithFormat:@"%@: node after line %@:%@",
[self getGrammarFileName], e.line, e.charPositionInLine];
@@ -165,13 +165,13 @@
/** Tree parsers parse nodes they usually have a token object as
*  payload. Set the exception token and do the default behavior.
*/
-- (NSString *)getErrorMessage:(ANTLRRecognitionException *)e  TokenNames:(AMutableArray *) theTokNams
+- (NSString *)getErrorMessage:(RecognitionException *)e  TokenNames:(AMutableArray *) theTokNams
{
-    if ( [self isKindOfClass:[ANTLRTreeParser class]] ) {
-        ANTLRCommonTreeAdaptor *adaptor = (ANTLRCommonTreeAdaptor *)[((id<ANTLRTreeNodeStream>)e.input) getTreeAdaptor];
-        e.token = [adaptor getToken:((id<ANTLRBaseTree>)e.node)];
+    if ( [self isKindOfClass:[TreeParser class]] ) {
+        CommonTreeAdaptor *adaptor = (CommonTreeAdaptor *)[((id<TreeNodeStream>)e.input) getTreeAdaptor];
+        e.token = [adaptor getToken:((id<BaseTree>)e.node)];
if ( e.token == nil ) { // could be an UP/DOWN node
-            e.token = [ANTLRCommonToken newToken:[adaptor getType:e.node]
+            e.token = [CommonToken newToken:[adaptor getType:e.node]
Text:[adaptor getText:e.node]];
}
}
diff --git a/runtime/ObjC/Framework/TreePatternLexer.h b/runtime/ObjC/Framework/TreePatternLexer.h
index 430bc83..e8d477d 100644
--- a/runtime/ObjC/Framework/TreePatternLexer.h
+++ b/runtime/ObjC/Framework/TreePatternLexer.h
@@ -1,5 +1,5 @@
//
-//  ANTLRTreePatternLexer.h
+//  TreePatternLexer.h
//  ANTLR
//
//  Created by Alan Condit on 6/18/10.
@@ -32,19 +32,19 @@
#import <Cocoa/Cocoa.h>

typedef enum {
-	ANTLRLexerTokenTypeEOF = -1,
-	ANTLRLexerTokenTypeInvalid,
-	ANTLRLexerTokenTypeBEGIN,
-	ANTLRLexerTokenTypeEND,
-	ANTLRLexerTokenTypeID,
-	ANTLRLexerTokenTypeARG,
-	ANTLRLexerTokenTypePERCENT,
-	ANTLRLexerTokenTypeCOLON,
-	ANTLRLexerTokenTypeDOT,
-} ANTLRLexerTokenType;
+	LexerTokenTypeEOF = -1,
+	LexerTokenTypeInvalid,
+	LexerTokenTypeBEGIN,
+	LexerTokenTypeEND,
+	LexerTokenTypeID,
+	LexerTokenTypeARG,
+	LexerTokenTypePERCENT,
+	LexerTokenTypeCOLON,
+	LexerTokenTypeDOT,
+} LexerTokenType;


-@interface ANTLRTreePatternLexer : NSObject {
+@interface TreePatternLexer : NSObject {

/** The tree pattern to lex like "(A B C)" */
NSString *pattern;
@@ -74,7 +74,7 @@ BOOL error;
@property (assign) char *data;
@property (assign) BOOL error;

-+ (ANTLRTreePatternLexer *)newANTLRTreePatternLexer:(NSString *)aPattern;
++ (TreePatternLexer *)newTreePatternLexer:(NSString *)aPattern;
- (id) init;
- (id) initWithPattern:(NSString *)aPattern;

diff --git a/runtime/ObjC/Framework/TreePatternLexer.m b/runtime/ObjC/Framework/TreePatternLexer.m
index cdf969f..2eafae3 100644
--- a/runtime/ObjC/Framework/TreePatternLexer.m
+++ b/runtime/ObjC/Framework/TreePatternLexer.m
@@ -1,5 +1,5 @@
//
-//  ANTLRTreePatternLexer.m
+//  TreePatternLexer.m
//  ANTLR
//
//  Created by Alan Condit on 6/18/10.
@@ -29,9 +29,9 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRTreePatternLexer.h"
+#import "TreePatternLexer.h"

-@implementation ANTLRTreePatternLexer
+@implementation TreePatternLexer

@synthesize pattern;
@synthesize p;
@@ -41,9 +41,9 @@
@synthesize data;
@synthesize error;

-+ (ANTLRTreePatternLexer *)newANTLRTreePatternLexer:(NSString *)aPattern
++ (TreePatternLexer *)newTreePatternLexer:(NSString *)aPattern
{
-    return [[ANTLRTreePatternLexer alloc] initWithPattern:aPattern];
+    return [[TreePatternLexer alloc] initWithPattern:aPattern];
}

- (id) init
@@ -80,7 +80,7 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRTreePatternLexer" );
+    NSLog( @"called dealloc in TreePatternLexer" );
#endif
if ( pattern ) [pattern release];
if ( sval ) [sval release];
@@ -90,7 +90,7 @@
- (NSInteger) nextToken
{
n = 0; // reset, but reuse buffer
-    while ( c != ANTLRLexerTokenTypeEOF ) {
+    while ( c != LexerTokenTypeEOF ) {
if ( c==' ' || c=='\n' || c=='\r' || c=='\t' ) {
[self consume];
continue;
@@ -104,27 +104,27 @@
data[n++] = (char)c;
[self consume];
}
-            return ANTLRLexerTokenTypeID;
+            return LexerTokenTypeID;
}
if ( c == '(' ) {
[self consume];
-            return ANTLRLexerTokenTypeBEGIN;
+            return LexerTokenTypeBEGIN;
}
if ( c==')' ) {
[self consume];
-            return ANTLRLexerTokenTypeEND;
+            return LexerTokenTypeEND;
}
if ( c=='%' ) {
[self consume];
-            return ANTLRLexerTokenTypePERCENT;
+            return LexerTokenTypePERCENT;
}
if ( c==':' ) {
[self consume];
-            return ANTLRLexerTokenTypeCOLON;
+            return LexerTokenTypeCOLON;
}
if ( c=='.' ) {
[self consume];
-            return ANTLRLexerTokenTypeDOT;
+            return LexerTokenTypeDOT;
}
if ( c=='[' ) { // grab [x] as a string, returning x
[self consume];
@@ -142,20 +142,20 @@
[self consume];
}
[self consume];
-            return ANTLRLexerTokenTypeARG;
+            return LexerTokenTypeARG;
}
[self consume];
error = true;
-        return ANTLRLexerTokenTypeEOF;
+        return LexerTokenTypeEOF;
}
-    return ANTLRLexerTokenTypeEOF;
+    return LexerTokenTypeEOF;
}

- (void) consume
{
p++;
if ( p >= n ) {
-        c = ANTLRLexerTokenTypeEOF;
+        c = LexerTokenTypeEOF;
}
else {
c = [pattern characterAtIndex:p];
diff --git a/runtime/ObjC/Framework/TreePatternParser.h b/runtime/ObjC/Framework/TreePatternParser.h
index 2051b5e..d8377c6 100644
--- a/runtime/ObjC/Framework/TreePatternParser.h
+++ b/runtime/ObjC/Framework/TreePatternParser.h
@@ -1,5 +1,5 @@
//
-//  ANTLRTreePatternParser.h
+//  TreePatternParser.h
//  ANTLR
//
//  Created by Alan Condit on 6/18/10.
@@ -30,34 +30,34 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRTreePatternLexer.h"
-#import "ANTLRTreeWizard.h"
-#import "ANTLRTreeAdaptor.h"
+#import "TreePatternLexer.h"
+#import "TreeWizard.h"
+#import "TreeAdaptor.h"

-@interface ANTLRTreePatternParser : NSObject {
+@interface TreePatternParser : NSObject {

-ANTLRTreePatternLexer *tokenizer;
+TreePatternLexer *tokenizer;
NSInteger ttype;
-ANTLRTreeWizard *wizard;
-id<ANTLRTreeAdaptor> adaptor;
+TreeWizard *wizard;
+id<TreeAdaptor> adaptor;

}

-+ (ANTLRTreePatternParser *)newANTLRTreePatternParser:(ANTLRTreePatternLexer *)aTokenizer
-                                               Wizard:(ANTLRTreeWizard *)aWizard
-                                              Adaptor:(id<ANTLRTreeAdaptor>)anAdaptor;
++ (TreePatternParser *)newTreePatternParser:(TreePatternLexer *)aTokenizer
+                                               Wizard:(TreeWizard *)aWizard
+                                              Adaptor:(id<TreeAdaptor>)anAdaptor;
- (id) init;
-- (id) initWithTokenizer:(ANTLRTreePatternLexer *)tokenizer
-                  Wizard:(ANTLRTreeWizard *)aWizard
-                 Adaptor:(id<ANTLRTreeAdaptor>)anAdaptor;
+- (id) initWithTokenizer:(TreePatternLexer *)tokenizer
+                  Wizard:(TreeWizard *)aWizard
+                 Adaptor:(id<TreeAdaptor>)anAdaptor;

- (void) dealloc;
-- (id<ANTLRBaseTree>) pattern;
-- (id<ANTLRBaseTree>) parseTree;
-- (id<ANTLRBaseTree>) parseNode;
+- (id<BaseTree>) pattern;
+- (id<BaseTree>) parseTree;
+- (id<BaseTree>) parseNode;

-@property (retain) ANTLRTreePatternLexer *tokenizer;
+@property (retain) TreePatternLexer *tokenizer;
@property NSInteger ttype;
-@property (retain) ANTLRTreeWizard *wizard;
-@property (retain) id<ANTLRTreeAdaptor> adaptor;
+@property (retain) TreeWizard *wizard;
+@property (retain) id<TreeAdaptor> adaptor;
@end
diff --git a/runtime/ObjC/Framework/TreePatternParser.m b/runtime/ObjC/Framework/TreePatternParser.m
index c95d995..2afbd5f 100644
--- a/runtime/ObjC/Framework/TreePatternParser.m
+++ b/runtime/ObjC/Framework/TreePatternParser.m
@@ -1,5 +1,5 @@
//
-//  ANTLRTreePatternParser.m
+//  TreePatternParser.m
//  ANTLR
//
//  Created by Alan Condit on 6/18/10.
@@ -29,16 +29,16 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRTreePatternParser.h"
-#import "ANTLRTreePatternLexer.h"
+#import "TreePatternParser.h"
+#import "TreePatternLexer.h"

-@implementation ANTLRTreePatternParser
+@implementation TreePatternParser

-+ (ANTLRTreePatternParser *)newANTLRTreePatternParser:(ANTLRTreePatternLexer *)aTokenizer
-                                               Wizard:(ANTLRTreeWizard *)aWizard
-                                              Adaptor:(id<ANTLRTreeAdaptor>)anAdaptor
++ (TreePatternParser *)newTreePatternParser:(TreePatternLexer *)aTokenizer
+                                               Wizard:(TreeWizard *)aWizard
+                                              Adaptor:(id<TreeAdaptor>)anAdaptor
{
-    return [[ANTLRTreePatternParser alloc] initWithTokenizer:aTokenizer Wizard:aWizard Adaptor:anAdaptor];
+    return [[TreePatternParser alloc] initWithTokenizer:aTokenizer Wizard:aWizard Adaptor:anAdaptor];
}

- (id) init
@@ -52,9 +52,9 @@
return self;
}

-- (id) initWithTokenizer:(ANTLRTreePatternLexer *)aTokenizer
-                  Wizard:(ANTLRTreeWizard *)aWizard
-                 Adaptor:(id<ANTLRTreeAdaptor>)anAdaptor
+- (id) initWithTokenizer:(TreePatternLexer *)aTokenizer
+                  Wizard:(TreeWizard *)aWizard
+                 Adaptor:(id<TreeAdaptor>)anAdaptor
{
if ((self = [super init]) != nil) {
adaptor = anAdaptor;
@@ -71,7 +71,7 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRTreePatternParser" );
+    NSLog( @"called dealloc in TreePatternParser" );
#endif
if ( adaptor ) [adaptor release];
if ( tokenizer ) [tokenizer release];
@@ -79,14 +79,14 @@
[super dealloc];
}

-- (id<ANTLRBaseTree>)pattern
+- (id<BaseTree>)pattern
{
-    if ( ttype==ANTLRLexerTokenTypeBEGIN ) {
+    if ( ttype==LexerTokenTypeBEGIN ) {
return [self parseTree];
}
-    else if ( ttype==ANTLRLexerTokenTypeID ) {
-        id<ANTLRBaseTree> node = [self parseNode];
-        if ( ttype==ANTLRLexerTokenTypeEOF ) {
+    else if ( ttype==LexerTokenTypeID ) {
+        id<BaseTree> node = [self parseNode];
+        if ( ttype==LexerTokenTypeEOF ) {
return node;
}
return nil; // extra junk on end
@@ -94,62 +94,62 @@
return nil;
}

-- (id<ANTLRBaseTree>) parseTree
+- (id<BaseTree>) parseTree
{
-    if ( ttype != ANTLRLexerTokenTypeBEGIN ) {
-        @throw [ANTLRRuntimeException newException:@"no BEGIN"];
+    if ( ttype != LexerTokenTypeBEGIN ) {
+        @throw [RuntimeException newException:@"no BEGIN"];
}
ttype = [tokenizer nextToken];
-    id<ANTLRBaseTree> root = [self parseNode];
+    id<BaseTree> root = [self parseNode];
if ( root==nil ) {
return nil;
}
-    while ( ttype==ANTLRLexerTokenTypeBEGIN  ||
-           ttype==ANTLRLexerTokenTypeID      ||
-           ttype==ANTLRLexerTokenTypePERCENT ||
-           ttype==ANTLRLexerTokenTypeDOT )
+    while ( ttype==LexerTokenTypeBEGIN  ||
+           ttype==LexerTokenTypeID      ||
+           ttype==LexerTokenTypePERCENT ||
+           ttype==LexerTokenTypeDOT )
{
-        if ( ttype==ANTLRLexerTokenTypeBEGIN ) {
-            id<ANTLRBaseTree> subtree = [self parseTree];
+        if ( ttype==LexerTokenTypeBEGIN ) {
+            id<BaseTree> subtree = [self parseTree];
[adaptor addChild:subtree toTree:root];
}
else {
-            id<ANTLRBaseTree> child = [self parseNode];
+            id<BaseTree> child = [self parseNode];
if ( child == nil ) {
return nil;
}
[adaptor addChild:child toTree:root];
}
}
-    if ( ttype != ANTLRLexerTokenTypeEND ) {
-        @throw [ANTLRRuntimeException newException:@"no END"];
+    if ( ttype != LexerTokenTypeEND ) {
+        @throw [RuntimeException newException:@"no END"];
}
ttype = [tokenizer nextToken];
return root;
}

-- (id<ANTLRBaseTree>) parseNode
+- (id<BaseTree>) parseNode
{
// "%label:" prefix
NSString *label = nil;
-    ANTLRTreePattern *node;
-    if ( ttype == ANTLRLexerTokenTypePERCENT ) {
+    TreePattern *node;
+    if ( ttype == LexerTokenTypePERCENT ) {
ttype = [tokenizer nextToken];
-        if ( ttype != ANTLRLexerTokenTypeID ) {
+        if ( ttype != LexerTokenTypeID ) {
return nil;
}
label = [tokenizer toString];
ttype = [tokenizer nextToken];
-        if ( ttype != ANTLRLexerTokenTypeCOLON ) {
+        if ( ttype != LexerTokenTypeCOLON ) {
return nil;
}
ttype = [tokenizer nextToken]; // move to ID following colon
}

// Wildcard?
-    if ( ttype == ANTLRLexerTokenTypeDOT ) {
+    if ( ttype == LexerTokenTypeDOT ) {
ttype = [tokenizer nextToken];
-        id<ANTLRToken> wildcardPayload = [ANTLRCommonToken newToken:0 Text:@"."];
+        id<Token> wildcardPayload = [CommonToken newToken:0 Text:@"."];
node = [ANTLRWildcardTreePattern newANTLRWildcardTreePattern:wildcardPayload];
if ( label != nil ) {
node.label = label;
@@ -158,7 +158,7 @@
}

// "ID" or "ID[arg]"
-    if ( ttype != ANTLRLexerTokenTypeID ) {
+    if ( ttype != LexerTokenTypeID ) {
return nil;
}
NSString *tokenName = [tokenizer toString];
@@ -169,7 +169,7 @@
NSString *text = tokenName;
// check for arg
NSString *arg = nil;
-    if ( ttype == ANTLRLexerTokenTypeARG ) {
+    if ( ttype == LexerTokenTypeARG ) {
arg = [tokenizer toString];
text = arg;
ttype = [tokenizer nextToken];
@@ -177,15 +177,15 @@

// create node
int treeNodeType = [wizard getTokenType:tokenName];
-    if ( treeNodeType==ANTLRTokenTypeInvalid ) {
+    if ( treeNodeType==TokenTypeInvalid ) {
return nil;
}
node = [adaptor createTree:treeNodeType Text:text];
-    if ( label!=nil && [node class] == [ANTLRTreePattern class] ) {
-        ((ANTLRTreePattern *)node).label = label;
+    if ( label!=nil && [node class] == [TreePattern class] ) {
+        ((TreePattern *)node).label = label;
}
-    if ( arg!=nil && [node class] == [ANTLRTreePattern class] ) {
-        ((ANTLRTreePattern *)node).hasTextArg = YES;
+    if ( arg!=nil && [node class] == [TreePattern class] ) {
+        ((TreePattern *)node).hasTextArg = YES;
}
return node;
}
diff --git a/runtime/ObjC/Framework/TreeRewriter.h b/runtime/ObjC/Framework/TreeRewriter.h
index 5ab5700..24e1063 100644
--- a/runtime/ObjC/Framework/TreeRewriter.h
+++ b/runtime/ObjC/Framework/TreeRewriter.h
@@ -1,5 +1,5 @@
//
-//  ANTLRTreeRewriter.h
+//  TreeRewriter.h
//  ANTLR
//
//  Created by Alan Condit on 6/17/10.
@@ -30,7 +30,7 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRTreeParser.h"
+#import "TreeParser.h"

@interface ANTLRfptr : NSObject {
id  actor;
@@ -46,33 +46,33 @@
@property SEL ruleSEL;
@end

-@interface ANTLRTreeRewriter : ANTLRTreeParser {
+@interface TreeRewriter : TreeParser {
BOOL showTransformations;
-    id<ANTLRTokenStream> originalTokenStream;
-    id<ANTLRTreeAdaptor> originalAdaptor;
+    id<TokenStream> originalTokenStream;
+    id<TreeAdaptor> originalAdaptor;
ANTLRfptr *rule;
ANTLRfptr *topdown_fptr;
ANTLRfptr *bottomup_ftpr;
}

-+ (ANTLRTreeRewriter *) newANTLRTreeRewriter:(id<ANTLRTreeNodeStream>)anInput;
-+ (ANTLRTreeRewriter *) newANTLRTreeRewriter:(id<ANTLRTreeNodeStream>)anInput State:(ANTLRRecognizerSharedState *)aState;
-- (id)initWithStream:(id<ANTLRTreeNodeStream>)anInput;
-- (id)initWithStream:(id<ANTLRTreeNodeStream>)anInput State:(ANTLRRecognizerSharedState *)aState;
-- (id) applyOnce:(ANTLRCommonTree *)t Rule:(ANTLRfptr *)whichRule;
-- (id) applyRepeatedly:(ANTLRCommonTree *)t Rule:(ANTLRfptr *)whichRule;
-- (id) downup:(ANTLRCommonTree *)t;
-- (id) pre:(ANTLRCommonTree *)t;
-- (id) post:(ANTLRCommonTree *)t;
-- (id) downup:(ANTLRCommonTree *)t XForm:(BOOL)aShowTransformations;
-- (void)reportTransformation:(ANTLRCommonTree *)oldTree Tree:(ANTLRCommonTree *)newTree;
++ (TreeRewriter *) newTreeRewriter:(id<TreeNodeStream>)anInput;
++ (TreeRewriter *) newTreeRewriter:(id<TreeNodeStream>)anInput State:(RecognizerSharedState *)aState;
+- (id)initWithStream:(id<TreeNodeStream>)anInput;
+- (id)initWithStream:(id<TreeNodeStream>)anInput State:(RecognizerSharedState *)aState;
+- (id) applyOnce:(CommonTree *)t Rule:(ANTLRfptr *)whichRule;
+- (id) applyRepeatedly:(CommonTree *)t Rule:(ANTLRfptr *)whichRule;
+- (id) downup:(CommonTree *)t;
+- (id) pre:(CommonTree *)t;
+- (id) post:(CommonTree *)t;
+- (id) downup:(CommonTree *)t XForm:(BOOL)aShowTransformations;
+- (void)reportTransformation:(CommonTree *)oldTree Tree:(CommonTree *)newTree;
- (id) topdown_fptr;
- (id) bottomup_ftpr;
- (id) topdown;
- (id) bottomup;

@property BOOL showTransformations;
-@property (retain) id<ANTLRTokenStream> originalTokenStream;
-@property (retain) id<ANTLRTreeAdaptor> originalAdaptor;
+@property (retain) id<TokenStream> originalTokenStream;
+@property (retain) id<TreeAdaptor> originalAdaptor;
@property (retain) ANTLRfptr *rule;
@end
diff --git a/runtime/ObjC/Framework/TreeRewriter.m b/runtime/ObjC/Framework/TreeRewriter.m
index 8495436..c5ea12f 100644
--- a/runtime/ObjC/Framework/TreeRewriter.m
+++ b/runtime/ObjC/Framework/TreeRewriter.m
@@ -1,5 +1,5 @@
//
-//  ANTLRTreeRewriter.m
+//  TreeRewriter.m
//  ANTLR
//
//  Created by Alan Condit on 6/17/10.
@@ -29,11 +29,11 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRTreeRewriter.h"
-#import "ANTLRCommonTreeNodeStream.h"
-#import "ANTLRTreeRuleReturnScope.h"
-#import "ANTLRCommonTreeAdaptor.h"
-#import "ANTLRTreeVisitor.h"
+#import "TreeRewriter.h"
+#import "CommonTreeNodeStream.h"
+#import "TreeRuleReturnScope.h"
+#import "CommonTreeAdaptor.h"
+#import "TreeVisitor.h"

@implementation ANTLRfptr

@@ -56,7 +56,7 @@
if ( [actor respondsToSelector:ruleSEL] )
return [actor performSelector:ruleSEL];
else
-        @throw [ANTLRRuntimeException newException:@"Unknown Rewrite exception"];
+        @throw [RuntimeException newException:@"Unknown Rewrite exception"];
return nil;
}

@@ -64,25 +64,25 @@
@synthesize ruleSEL;
@end

-@implementation ANTLRTreeRewriter
+@implementation TreeRewriter

-+ (ANTLRTreeRewriter *) newANTLRTreeRewriter:(id<ANTLRTreeNodeStream>)anInput
++ (TreeRewriter *) newTreeRewriter:(id<TreeNodeStream>)anInput
{
-    return [[ANTLRTreeRewriter alloc] initWithStream:anInput State:[ANTLRRecognizerSharedState newANTLRRecognizerSharedState]];
+    return [[TreeRewriter alloc] initWithStream:anInput State:[RecognizerSharedState newRecognizerSharedState]];
}

-+ (ANTLRTreeRewriter *) newANTLRTreeRewriter:(id<ANTLRTreeNodeStream>)anInput State:(ANTLRRecognizerSharedState *)aState
++ (TreeRewriter *) newTreeRewriter:(id<TreeNodeStream>)anInput State:(RecognizerSharedState *)aState
{
-    return [[ANTLRTreeRewriter alloc] initWithStream:anInput State:aState];
+    return [[TreeRewriter alloc] initWithStream:anInput State:aState];
}

-- (id)initWithStream:(id<ANTLRTreeNodeStream>)anInput
+- (id)initWithStream:(id<TreeNodeStream>)anInput
{
SEL aRuleSel;

if ((self = [super initWithStream:anInput]) != nil) {
showTransformations = NO;
-        state = [[ANTLRRecognizerSharedState newANTLRRecognizerSharedState] retain];
+        state = [[RecognizerSharedState newRecognizerSharedState] retain];
originalAdaptor = [input getTreeAdaptor];
if ( originalAdaptor ) [originalAdaptor retain];
originalTokenStream = [input getTokenStream];
@@ -95,7 +95,7 @@
return self;
}

-- (id)initWithStream:(id<ANTLRTreeNodeStream>)anInput State:(ANTLRRecognizerSharedState *)aState
+- (id)initWithStream:(id<TreeNodeStream>)anInput State:(RecognizerSharedState *)aState
{
SEL aRuleSel;

@@ -118,7 +118,7 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRTreeRewriter" );
+    NSLog( @"called dealloc in TreeRewriter" );
#endif
if ( state ) [state release];
if ( originalAdaptor ) [originalAdaptor release];
@@ -126,16 +126,16 @@
[super dealloc];
}

-- (id) applyOnce:(ANTLRCommonTree *)t Rule:(ANTLRfptr *)whichRule
+- (id) applyOnce:(CommonTree *)t Rule:(ANTLRfptr *)whichRule
{
if ( t == nil ) return nil;
@try {
// share TreeParser object but not parsing-related state
-        state = [ANTLRRecognizerSharedState newANTLRRecognizerSharedState];
-        input = [ANTLRCommonTreeNodeStream newANTLRCommonTreeNodeStream:(ANTLRCommonTreeAdaptor *)originalAdaptor Tree:t];
-        [(ANTLRCommonTreeNodeStream *)input setTokenStream:originalTokenStream];
+        state = [RecognizerSharedState newRecognizerSharedState];
+        input = [CommonTreeNodeStream newCommonTreeNodeStream:(CommonTreeAdaptor *)originalAdaptor Tree:t];
+        [(CommonTreeNodeStream *)input setTokenStream:originalTokenStream];
[self setBacktrackingLevel:1];
-        ANTLRTreeRuleReturnScope *r = [(ANTLRfptr *)whichRule rule];
+        TreeRuleReturnScope *r = [(ANTLRfptr *)whichRule rule];
[self setBacktrackingLevel:0];
if ( [self getFailed] )
return t;
@@ -148,34 +148,34 @@
else
return t;
}
-    @catch (ANTLRRecognitionException *e) {
+    @catch (RecognitionException *e) {
return t;
}
return t;
}

-- (id) applyRepeatedly:(ANTLRCommonTree *)t Rule:(ANTLRfptr *)whichRule
+- (id) applyRepeatedly:(CommonTree *)t Rule:(ANTLRfptr *)whichRule
{
BOOL treeChanged = true;
while ( treeChanged ) {
-        ANTLRTreeRewriter *u = [self applyOnce:t Rule:whichRule];
+        TreeRewriter *u = [self applyOnce:t Rule:whichRule];
treeChanged = !(t == u);
t = u;
}
return t;
}

-- (id) downup:(ANTLRCommonTree *)t
+- (id) downup:(CommonTree *)t
{
return [self downup:t XForm:NO];
}

-- (id) pre:(ANTLRCommonTree *)t
+- (id) pre:(CommonTree *)t
{
return [self applyOnce:t Rule:topdown_fptr];
}

-- (id)post:(ANTLRCommonTree *)t
+- (id)post:(CommonTree *)t
{
return [self applyRepeatedly:t Rule:bottomup_ftpr];
}
@@ -193,11 +193,11 @@ public Object downup(Object t, boolean showTransformations) {
}
#endif

-- (id) downup:(ANTLRCommonTree *)t XForm:(BOOL)aShowTransformations
+- (id) downup:(CommonTree *)t XForm:(BOOL)aShowTransformations
{
showTransformations = aShowTransformations;
-    ANTLRTreeVisitor *v = [ANTLRTreeVisitor newANTLRTreeVisitor:[[originalAdaptor class] newTreeAdaptor]];
-    ANTLRTreeVisitorAction *actions = [ANTLRTreeVisitorAction newANTLRTreeVisitorAction];
+    TreeVisitor *v = [TreeVisitor newTreeVisitor:[[originalAdaptor class] newTreeAdaptor]];
+    TreeVisitorAction *actions = [TreeVisitorAction newTreeVisitorAction];
{
//public Object pre(Object t)  { return applyOnce(t, topdown_fptr); }
[self pre:t];
@@ -211,7 +211,7 @@ public Object downup(Object t, boolean showTransformations) {
/** Override this if you need transformation tracing to go somewhere
*  other than stdout or if you're not using Tree-derived trees.
*/
-- (void)reportTransformation:(ANTLRCommonTree *)oldTree Tree:(ANTLRCommonTree *)newTree
+- (void)reportTransformation:(CommonTree *)oldTree Tree:(CommonTree *)newTree
{
//System.out.println(((Tree)oldTree).toStringTree()+" -> "+ ((Tree)newTree).toStringTree());
}
@@ -232,14 +232,14 @@ public Object downup(Object t, boolean showTransformations) {
- (id) topdown
// @throws RecognitionException
{
-    @throw [ANTLRRecognitionException newException:@"TopDown exception"];
+    @throw [RecognitionException newException:@"TopDown exception"];
return nil;
}

- (id) bottomup
//@throws RecognitionException
{
-    @throw [ANTLRRecognitionException newException:@"BottomUp exception"];
+    @throw [RecognitionException newException:@"BottomUp exception"];
return nil;
}

diff --git a/runtime/ObjC/Framework/TreeRuleReturnScope.h b/runtime/ObjC/Framework/TreeRuleReturnScope.h
index 9937052..ab7ae60 100644
--- a/runtime/ObjC/Framework/TreeRuleReturnScope.h
+++ b/runtime/ObjC/Framework/TreeRuleReturnScope.h
@@ -1,5 +1,5 @@
//
-//  ANTLRTreeRuleReturnScope.h
+//  TreeRuleReturnScope.h
//  ANTLR
//
//  Created by Alan Condit on 6/17/10.
@@ -30,22 +30,22 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRRuleReturnScope.h"
-#import "ANTLRCommonTree.h"
+#import "RuleReturnScope.h"
+#import "CommonTree.h"

-@interface ANTLRTreeRuleReturnScope : ANTLRRuleReturnScope {
-    ANTLRCommonTree *start;
+@interface TreeRuleReturnScope : RuleReturnScope {
+    CommonTree *start;
}

-@property (retain, getter=getStart, setter=setStart:) ANTLRCommonTree *start;
+@property (retain, getter=getStart, setter=setStart:) CommonTree *start;

/** First node or root node of tree matched for this rule. */

+ (id) newReturnScope;
- (id) init;
- (void) dealloc;
-- (ANTLRCommonTree *)getStart;
-- (void)setStart:(ANTLRCommonTree *)aStart;
+- (CommonTree *)getStart;
+- (void)setStart:(CommonTree *)aStart;

- (id) copyWithZone:(NSZone *)theZone;

diff --git a/runtime/ObjC/Framework/TreeRuleReturnScope.m b/runtime/ObjC/Framework/TreeRuleReturnScope.m
index 0043314..8539d81 100644
--- a/runtime/ObjC/Framework/TreeRuleReturnScope.m
+++ b/runtime/ObjC/Framework/TreeRuleReturnScope.m
@@ -1,5 +1,5 @@
//
-//  ANTLRTreeRuleReturnScope.m
+//  TreeRuleReturnScope.m
//  ANTLR
//
//  Created by Alan Condit on 6/17/10.
@@ -29,15 +29,15 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRTreeRuleReturnScope.h"
+#import "TreeRuleReturnScope.h"


-@implementation ANTLRTreeRuleReturnScope
+@implementation TreeRuleReturnScope
@synthesize start;

+ (id) newReturnScope
{
-    return [[ANTLRTreeRuleReturnScope alloc] init];
+    return [[TreeRuleReturnScope alloc] init];
}

- (id) init
@@ -49,18 +49,18 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRTreeRuleReturnScope" );
+    NSLog( @"called dealloc in TreeRuleReturnScope" );
#endif
if ( start ) [start release];
[super dealloc];
}

-- (ANTLRCommonTree *)getStart
+- (CommonTree *)getStart
{
return start;
}

-- (void)setStart:(ANTLRCommonTree *)aStart
+- (void)setStart:(CommonTree *)aStart
{
if ( start != aStart ) {
if ( start ) [start release];
@@ -73,7 +73,7 @@
// the input stream is *not* copied!
- (id) copyWithZone:(NSZone *)theZone
{
-    ANTLRTreeRuleReturnScope *copy = [super copyWithZone:theZone];
+    TreeRuleReturnScope *copy = [super copyWithZone:theZone];
copy.start = start;
return copy;
}
diff --git a/runtime/ObjC/Framework/TreeVisitor.h b/runtime/ObjC/Framework/TreeVisitor.h
index e8af0d0..e52f65a 100644
--- a/runtime/ObjC/Framework/TreeVisitor.h
+++ b/runtime/ObjC/Framework/TreeVisitor.h
@@ -1,5 +1,5 @@
//
-//  ANTLRTreeVisitor.h
+//  TreeVisitor.h
//  ANTLR
//
//  Created by Alan Condit on 6/18/10.
@@ -30,18 +30,18 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRTreeAdaptor.h"
-#import "ANTLRTreeVisitorAction.h"
+#import "TreeAdaptor.h"
+#import "TreeVisitorAction.h"

-@interface ANTLRTreeVisitor : NSObject {
-   id<ANTLRTreeAdaptor> adaptor;
+@interface TreeVisitor : NSObject {
+   id<TreeAdaptor> adaptor;
}
-+ (ANTLRTreeVisitor *)newANTLRTreeVisitor:(id<ANTLRTreeAdaptor>) anAdaptor;
-+ (ANTLRTreeVisitor *)newANTLRTreeVisitor;
++ (TreeVisitor *)newTreeVisitor:(id<TreeAdaptor>) anAdaptor;
++ (TreeVisitor *)newTreeVisitor;
- (id)init;
-- (id)initWithAdaptor:(id<ANTLRTreeAdaptor>)anAdaptor;
+- (id)initWithAdaptor:(id<TreeAdaptor>)anAdaptor;
- (void) dealloc;
-- (ANTLRTreeVisitor *)visit:(id<ANTLRBaseTree>)t Action:(ANTLRTreeVisitorAction *)action;
+- (TreeVisitor *)visit:(id<BaseTree>)t Action:(TreeVisitorAction *)action;

-@property (retain) id<ANTLRTreeAdaptor> adaptor;
+@property (retain) id<TreeAdaptor> adaptor;
@end
diff --git a/runtime/ObjC/Framework/TreeVisitor.m b/runtime/ObjC/Framework/TreeVisitor.m
index f500d6d..b08bcd7 100644
--- a/runtime/ObjC/Framework/TreeVisitor.m
+++ b/runtime/ObjC/Framework/TreeVisitor.m
@@ -1,5 +1,5 @@
//
-//  ANTLRTreeVisitor.m
+//  TreeVisitor.m
//  ANTLR
//
//  Created by Alan Condit on 6/18/10.
@@ -29,31 +29,31 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRTreeVisitor.h"
-#import "ANTLRCommonTreeAdaptor.h"
+#import "TreeVisitor.h"
+#import "CommonTreeAdaptor.h"

-@implementation ANTLRTreeVisitor
+@implementation TreeVisitor

-+ (ANTLRTreeVisitor *)newANTLRTreeVisitor:(id<ANTLRTreeAdaptor>)anAdaptor
++ (TreeVisitor *)newTreeVisitor:(id<TreeAdaptor>)anAdaptor
{
-    return [[ANTLRTreeVisitor alloc] initWithAdaptor:anAdaptor];
+    return [[TreeVisitor alloc] initWithAdaptor:anAdaptor];
}

-+ (ANTLRTreeVisitor *)newANTLRTreeVisitor
++ (TreeVisitor *)newTreeVisitor
{
-    return [[ANTLRTreeVisitor alloc] init];
+    return [[TreeVisitor alloc] init];
}


- (id)init
{
if ((self = [super init]) != nil) {
-        adaptor = [[ANTLRCommonTreeAdaptor newTreeAdaptor] retain];
+        adaptor = [[CommonTreeAdaptor newTreeAdaptor] retain];
}
return self;
}

-- (id)initWithAdaptor:(id<ANTLRTreeAdaptor>)anAdaptor
+- (id)initWithAdaptor:(id<TreeAdaptor>)anAdaptor
{
if ((self = [super init]) != nil) {
adaptor = [anAdaptor retain];
@@ -64,7 +64,7 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRTreeVisitor" );
+    NSLog( @"called dealloc in TreeVisitor" );
#endif
if ( adaptor ) [adaptor release];
[super dealloc];
@@ -80,22 +80,22 @@
*
*  Return result of applying post action to this node.
*/
-- (ANTLRTreeVisitor *)visit:(ANTLRCommonTree *)t Action:(ANTLRTreeVisitorAction *)action
+- (TreeVisitor *)visit:(CommonTree *)t Action:(TreeVisitorAction *)action
{
// System.out.println("visit "+((Tree)t).toStringTree());
BOOL isNil = [adaptor isNil:t];
if ( action != nil && !isNil ) {
-        t = [action pre:(ANTLRTreeVisitorAction *)t]; // if rewritten, walk children of new t
+        t = [action pre:(TreeVisitorAction *)t]; // if rewritten, walk children of new t
}
for (int i=0; i < [adaptor getChildCount:t]; i++) {
-        ANTLRCommonTree *child = [adaptor getChild:t At:i];
-        ANTLRCommonTree *visitResult = [self visit:child Action:action];
-        ANTLRCommonTree *childAfterVisit = [adaptor getChild:t At:i];
+        CommonTree *child = [adaptor getChild:t At:i];
+        CommonTree *visitResult = [self visit:child Action:action];
+        CommonTree *childAfterVisit = [adaptor getChild:t At:i];
if ( visitResult !=  childAfterVisit ) { // result & child differ?
[adaptor setChild:t At:i Child:visitResult];
}
}
-    if ( action != nil && !isNil ) t = [action post:(ANTLRTreeVisitorAction *)t];
+    if ( action != nil && !isNil ) t = [action post:(TreeVisitorAction *)t];
return t;
}

diff --git a/runtime/ObjC/Framework/TreeVisitorAction.h b/runtime/ObjC/Framework/TreeVisitorAction.h
index c9c0856..e9df870 100644
--- a/runtime/ObjC/Framework/TreeVisitorAction.h
+++ b/runtime/ObjC/Framework/TreeVisitorAction.h
@@ -1,5 +1,5 @@
//
-//  ANTLRTreeVisitorAction.h
+//  TreeVisitorAction.h
//  ANTLR
//
//  Created by Alan Condit on 6/18/10.
@@ -32,12 +32,12 @@
#import <Cocoa/Cocoa.h>


-@interface ANTLRTreeVisitorAction : NSObject
+@interface TreeVisitorAction : NSObject
{

}

-+ (ANTLRTreeVisitorAction *)newANTLRTreeVisitorAction;
++ (TreeVisitorAction *)newTreeVisitorAction;
- (id) init;

/** Execute an action before visiting children of t.  Return t or
@@ -45,12 +45,12 @@
*  with the return value.  Children of returned value will be
*  visited if using TreeVisitor.visit().
*/
-- (ANTLRTreeVisitorAction *)pre:(ANTLRTreeVisitorAction *) t;
+- (TreeVisitorAction *)pre:(TreeVisitorAction *) t;

/** Execute an action after visiting children of t.  Return t or
*  a rewritten t.  It is up to the visitor to decide what to do
*  with the return value.
*/
-- (ANTLRTreeVisitorAction *)post:(ANTLRTreeVisitorAction *) t;
+- (TreeVisitorAction *)post:(TreeVisitorAction *) t;

@end
diff --git a/runtime/ObjC/Framework/TreeVisitorAction.m b/runtime/ObjC/Framework/TreeVisitorAction.m
index 09a5920..34cae97 100644
--- a/runtime/ObjC/Framework/TreeVisitorAction.m
+++ b/runtime/ObjC/Framework/TreeVisitorAction.m
@@ -1,5 +1,5 @@
//
-//  ANTLRTreeVisitorAction.m
+//  TreeVisitorAction.m
//  ANTLR
//
//  Created by Alan Condit on 6/18/10.
@@ -29,14 +29,14 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRTreeVisitorAction.h"
+#import "TreeVisitorAction.h"


-@implementation ANTLRTreeVisitorAction
+@implementation TreeVisitorAction

-+ (ANTLRTreeVisitorAction *)newANTLRTreeVisitorAction
++ (TreeVisitorAction *)newTreeVisitorAction
{
-    return [[ANTLRTreeVisitorAction alloc] init];
+    return [[TreeVisitorAction alloc] init];
}

- (id) init
@@ -51,7 +51,7 @@
*  with the return value.  Children of returned value will be
*  visited if using TreeVisitor.visit().
*/
-- (ANTLRTreeVisitorAction *)pre:(ANTLRTreeVisitorAction *) t
+- (TreeVisitorAction *)pre:(TreeVisitorAction *) t
{
return nil;
}
@@ -60,7 +60,7 @@
*  a rewritten t.  It is up to the visitor to decide what to do
*  with the return value.
*/
-- (ANTLRTreeVisitorAction *)post:(ANTLRTreeVisitorAction *) t
+- (TreeVisitorAction *)post:(TreeVisitorAction *) t
{
return nil;
}
diff --git a/runtime/ObjC/Framework/TreeWizard.h b/runtime/ObjC/Framework/TreeWizard.h
index 7a57c1e..7fa5792 100644
--- a/runtime/ObjC/Framework/TreeWizard.h
+++ b/runtime/ObjC/Framework/TreeWizard.h
@@ -1,5 +1,5 @@
//
-//  ANTLRTreeWizard.h
+//  TreeWizard.h
//  ANTLR
//
//  Created by Alan Condit on 6/18/10.
@@ -30,17 +30,17 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRCommonTreeAdaptor.h"
-#import "ANTLRCommonTree.h"
-#import "ANTLRMapElement.h"
-#import "ANTLRMap.h"
+#import "CommonTreeAdaptor.h"
+#import "CommonTree.h"
+#import "MapElement.h"
+#import "Map.h"
#import "AMutableArray.h"

@class ANTLRVisitor;

@protocol ANTLRContextVisitor <NSObject>
// TODO: should this be called visit or something else?
-- (void) visit:(ANTLRCommonTree *)t Parent:(ANTLRCommonTree *)parent ChildIndex:(NSInteger)childIndex Map:(ANTLRMap *)labels;
+- (void) visit:(CommonTree *)t Parent:(CommonTree *)parent ChildIndex:(NSInteger)childIndex Map:(Map *)labels;

@end

@@ -53,8 +53,8 @@
+ (ANTLRVisitor *)newANTLRVisitor:(NSInteger)anAction Actor:(id)anActor Object:(id)anObject1 Object:(id)anObject2;
- (id) initWithAction:(NSInteger)anAction Actor:(id)anActor Object:(id)anObject1 Object:(id)anObject2;

-- (void) visit:(ANTLRCommonTree *)t;
-- (void) visit:(ANTLRCommonTree *)t Parent:(ANTLRCommonTree *)parent ChildIndex:(NSInteger)childIndex Map:(ANTLRMap *)labels;
+- (void) visit:(CommonTree *)t;
+- (void) visit:(CommonTree *)t Parent:(CommonTree *)parent ChildIndex:(NSInteger)childIndex Map:(Map *)labels;

@property NSInteger action;
@property (retain) id actor;
@@ -65,72 +65,72 @@
/** When using %label:TOKENNAME in a tree for parse(), we must
*  track the label.
*/
-@interface ANTLRTreePattern : ANTLRCommonTree {
+@interface TreePattern : CommonTree {
NSString *label;
BOOL      hasTextArg;
}
@property (retain, getter=getLabel, setter=setLabel:) NSString *label;
@property (assign, getter=getHasTextArg, setter=setHasTextArg:) BOOL hasTextArg;

-+ (ANTLRCommonTree *)newANTLRTreePattern:(id<ANTLRToken>)payload;
++ (CommonTree *)newTreePattern:(id<Token>)payload;

-- (id) initWithToken:(id<ANTLRToken>)payload;
+- (id) initWithToken:(id<Token>)payload;
- (NSString *)toString;
@end

-@interface ANTLRWildcardTreePattern : ANTLRTreePattern {
+@interface ANTLRWildcardTreePattern : TreePattern {
}

-+ (ANTLRWildcardTreePattern *)newANTLRWildcardTreePattern:(id<ANTLRToken>)payload;
-- (id) initWithToken:(id<ANTLRToken>)payload;
++ (ANTLRWildcardTreePattern *)newANTLRWildcardTreePattern:(id<Token>)payload;
+- (id) initWithToken:(id<Token>)payload;
@end

/** This adaptor creates TreePattern objects for use during scan() */
-@interface ANTLRTreePatternTreeAdaptor : ANTLRCommonTreeAdaptor {
+@interface TreePatternTreeAdaptor : CommonTreeAdaptor {
}
-+ (ANTLRTreePatternTreeAdaptor *)newTreeAdaptor;
++ (TreePatternTreeAdaptor *)newTreeAdaptor;
- (id) init;
-- (ANTLRCommonTree *)createTreePattern:(id<ANTLRToken>)payload;
+- (CommonTree *)createTreePattern:(id<Token>)payload;

@end

-@interface ANTLRTreeWizard : NSObject {
-	id<ANTLRTreeAdaptor> adaptor;
-	ANTLRMap *tokenNameToTypeMap;
+@interface TreeWizard : NSObject {
+	id<TreeAdaptor> adaptor;
+	Map *tokenNameToTypeMap;
}
-+ (ANTLRTreeWizard *) newANTLRTreeWizard:(id<ANTLRTreeAdaptor>)anAdaptor;
-+ (ANTLRTreeWizard *)newANTLRTreeWizard:(id<ANTLRTreeAdaptor>)adaptor Map:(ANTLRMap *)aTokenNameToTypeMap;
-+ (ANTLRTreeWizard *)newANTLRTreeWizard:(id<ANTLRTreeAdaptor>)adaptor TokenNames:(NSArray *)theTokNams;
-+ (ANTLRTreeWizard *)newANTLRTreeWizardWithTokenNames:(NSArray *)theTokNams;
++ (TreeWizard *) newTreeWizard:(id<TreeAdaptor>)anAdaptor;
++ (TreeWizard *)newTreeWizard:(id<TreeAdaptor>)adaptor Map:(Map *)aTokenNameToTypeMap;
++ (TreeWizard *)newTreeWizard:(id<TreeAdaptor>)adaptor TokenNames:(NSArray *)theTokNams;
++ (TreeWizard *)newTreeWizardWithTokenNames:(NSArray *)theTokNams;
- (id) init;
-- (id) initWithAdaptor:(id<ANTLRTreeAdaptor>)adaptor;
-- (id) initWithAdaptor:(id<ANTLRTreeAdaptor>)adaptor Map:(ANTLRMap *)tokenNameToTypeMap;
+- (id) initWithAdaptor:(id<TreeAdaptor>)adaptor;
+- (id) initWithAdaptor:(id<TreeAdaptor>)adaptor Map:(Map *)tokenNameToTypeMap;
- (id) initWithTokenNames:(NSArray *)theTokNams;
-- (id) initWithTokenNames:(id<ANTLRTreeAdaptor>)anAdaptor TokenNames:(NSArray *)theTokNams;
+- (id) initWithTokenNames:(id<TreeAdaptor>)anAdaptor TokenNames:(NSArray *)theTokNams;
- (void) dealloc;
-- (ANTLRMap *)computeTokenTypes:(NSArray *)theTokNams;
+- (Map *)computeTokenTypes:(NSArray *)theTokNams;
- (NSInteger)getTokenType:(NSString *)tokenName;
-- (ANTLRMap *)index:(ANTLRCommonTree *)t;
-- (void) _index:(ANTLRCommonTree *)t Map:(ANTLRMap *)m;
-- (AMutableArray *)find:(ANTLRCommonTree *) t Pattern:(NSString *)pattern;
-- (ANTLRTreeWizard *)findFirst:(ANTLRCommonTree *) t Type:(NSInteger)ttype;
-- (ANTLRTreeWizard *)findFirst:(ANTLRCommonTree *) t Pattern:(NSString *)pattern;
-- (void) visit:(ANTLRCommonTree *)t Type:(NSInteger)ttype Visitor:(ANTLRVisitor *)visitor;
-- (void) _visit:(ANTLRCommonTree *)t
-         Parent:(ANTLRCommonTree *)parent
+- (Map *)index:(CommonTree *)t;
+- (void) _index:(CommonTree *)t Map:(Map *)m;
+- (AMutableArray *)find:(CommonTree *) t Pattern:(NSString *)pattern;
+- (TreeWizard *)findFirst:(CommonTree *) t Type:(NSInteger)ttype;
+- (TreeWizard *)findFirst:(CommonTree *) t Pattern:(NSString *)pattern;
+- (void) visit:(CommonTree *)t Type:(NSInteger)ttype Visitor:(ANTLRVisitor *)visitor;
+- (void) _visit:(CommonTree *)t
+         Parent:(CommonTree *)parent
ChildIndex:(NSInteger)childIndex
Type:(NSInteger)ttype
Visitor:(ANTLRVisitor *)visitor;
-- (void)visit:(ANTLRCommonTree *)t Pattern:(NSString *)pattern Visitor:(ANTLRVisitor *)visitor;
-- (BOOL)parse:(ANTLRCommonTree *)t Pattern:(NSString *)pattern Map:(ANTLRMap *)labels;
-- (BOOL) parse:(ANTLRCommonTree *) t Pattern:(NSString *)pattern;
-- (BOOL) _parse:(ANTLRCommonTree *)t1 Pattern:(ANTLRCommonTree *)tpattern Map:(ANTLRMap *)labels;
-- (ANTLRCommonTree *) createTree:(NSString *)pattern;
-- (BOOL)equals:(id)t1 O2:(id)t2 Adaptor:(id<ANTLRTreeAdaptor>)anAdaptor;
+- (void)visit:(CommonTree *)t Pattern:(NSString *)pattern Visitor:(ANTLRVisitor *)visitor;
+- (BOOL)parse:(CommonTree *)t Pattern:(NSString *)pattern Map:(Map *)labels;
+- (BOOL) parse:(CommonTree *) t Pattern:(NSString *)pattern;
+- (BOOL) _parse:(CommonTree *)t1 Pattern:(CommonTree *)tpattern Map:(Map *)labels;
+- (CommonTree *) createTree:(NSString *)pattern;
+- (BOOL)equals:(id)t1 O2:(id)t2 Adaptor:(id<TreeAdaptor>)anAdaptor;
- (BOOL)equals:(id)t1 O2:(id)t2;
-- (BOOL) _equals:(id)t1 O2:(id)t2 Adaptor:(id<ANTLRTreeAdaptor>)anAdaptor;
+- (BOOL) _equals:(id)t1 O2:(id)t2 Adaptor:(id<TreeAdaptor>)anAdaptor;

-@property (retain) id<ANTLRTreeAdaptor> adaptor;
-@property (retain) ANTLRMap *tokenNameToTypeMap;
+@property (retain) id<TreeAdaptor> adaptor;
+@property (retain) Map *tokenNameToTypeMap;
@end

diff --git a/runtime/ObjC/Framework/TreeWizard.m b/runtime/ObjC/Framework/TreeWizard.m
index 78131a8..e796e5c 100644
--- a/runtime/ObjC/Framework/TreeWizard.m
+++ b/runtime/ObjC/Framework/TreeWizard.m
@@ -1,5 +1,5 @@
//
-//  ANTLRTreeWizard.m
+//  TreeWizard.m
//  ANTLR
//
//  Created by Alan Condit on 6/18/10.
@@ -29,10 +29,10 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRTreeWizard.h"
-#import "ANTLRTreePatternLexer.h"
-#import "ANTLRTreePatternParser.h"
-#import "ANTLRIntArray.h"
+#import "TreeWizard.h"
+#import "TreePatternLexer.h"
+#import "TreePatternParser.h"
+#import "IntArray.h"

@implementation ANTLRVisitor

@@ -66,17 +66,17 @@
[super dealloc];
}

-- (void) visit:(ANTLRCommonTree *)t Parent:(ANTLRCommonTree *)parent ChildIndex:(NSInteger)childIndex Map:(ANTLRMap *)labels
+- (void) visit:(CommonTree *)t Parent:(CommonTree *)parent ChildIndex:(NSInteger)childIndex Map:(Map *)labels
{
switch (action) {
case 0:
-            [(ANTLRMap *)object2 /* labels */ clear];
-            if ( [(ANTLRTreeWizard *)actor _parse:t Pattern:object1/* tpattern */ Map:object2 /* labels */] ) {
+            [(Map *)object2 /* labels */ clear];
+            if ( [(TreeWizard *)actor _parse:t Pattern:object1/* tpattern */ Map:object2 /* labels */] ) {
[self visit:t Parent:parent ChildIndex:childIndex Map:object2 /* labels */];
}
break;
case 1:
-            if ( [(ANTLRTreeWizard *)actor _parse:t Pattern:object1/* tpattern */ Map:nil] ) {
+            if ( [(TreeWizard *)actor _parse:t Pattern:object1/* tpattern */ Map:nil] ) {
[(AMutableArray *)object2/* subtrees */ addObject:t];
}
break;
@@ -85,7 +85,7 @@
return;
}

-- (void) visit:(ANTLRCommonTree *)t
+- (void) visit:(CommonTree *)t
{
[object1 addObject:t];
return;
@@ -100,28 +100,28 @@
/** When using %label:TOKENNAME in a tree for parse(), we must
*  track the label.
*/
-@implementation ANTLRTreePattern
+@implementation TreePattern

@synthesize label;
@synthesize hasTextArg;

-+ (ANTLRCommonTree *)newANTLRTreePattern:(id<ANTLRToken>)payload
++ (CommonTree *)newTreePattern:(id<Token>)payload
{
-    return (ANTLRCommonTree *)[[ANTLRTreePattern alloc] initWithToken:payload];
+    return (CommonTree *)[[TreePattern alloc] initWithToken:payload];
}

-- (id) initWithToken:(id<ANTLRToken>)payload
+- (id) initWithToken:(id<Token>)payload
{
self = [super initWithToken:payload];
if ( self != nil ) {
}
-    return (ANTLRCommonTree *)self;
+    return (CommonTree *)self;
}

- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRTreePattern" );
+    NSLog( @"called dealloc in TreePattern" );
#endif
if ( label ) [label release];
[super dealloc];
@@ -141,12 +141,12 @@

@implementation ANTLRWildcardTreePattern

-+ (ANTLRWildcardTreePattern *)newANTLRWildcardTreePattern:(id<ANTLRToken>)payload
++ (ANTLRWildcardTreePattern *)newANTLRWildcardTreePattern:(id<Token>)payload
{
-    return(ANTLRWildcardTreePattern *)[[ANTLRWildcardTreePattern alloc] initWithToken:(id<ANTLRToken>)payload];
+    return(ANTLRWildcardTreePattern *)[[ANTLRWildcardTreePattern alloc] initWithToken:(id<Token>)payload];
}

-- (id) initWithToken:(id<ANTLRToken>)payload
+- (id) initWithToken:(id<Token>)payload
{
self = [super initWithToken:payload];
if ( self != nil ) {
@@ -157,11 +157,11 @@
@end

/** This adaptor creates TreePattern objects for use during scan() */
-@implementation ANTLRTreePatternTreeAdaptor
+@implementation TreePatternTreeAdaptor

-+ (ANTLRTreePatternTreeAdaptor *)newTreeAdaptor
++ (TreePatternTreeAdaptor *)newTreeAdaptor
{
-    return [[ANTLRTreePatternTreeAdaptor alloc] init];
+    return [[TreePatternTreeAdaptor alloc] init];
}

- (id) init
@@ -172,14 +172,14 @@
return self;
}

-- (ANTLRCommonTree *)createTreePattern:(id<ANTLRToken>)payload
+- (CommonTree *)createTreePattern:(id<Token>)payload
{
-    return (ANTLRCommonTree *)[super create:payload];
+    return (CommonTree *)[super create:payload];
}

@end

-@implementation ANTLRTreeWizard
+@implementation TreeWizard

// TODO: build indexes for the wizard

@@ -202,24 +202,24 @@
protected Set tokenTypesToReverseIndex = nil;
*/

-+ (ANTLRTreeWizard *) newANTLRTreeWizard:(id<ANTLRTreeAdaptor>)anAdaptor
++ (TreeWizard *) newTreeWizard:(id<TreeAdaptor>)anAdaptor
{
-    return [[ANTLRTreeWizard alloc] initWithAdaptor:anAdaptor];
+    return [[TreeWizard alloc] initWithAdaptor:anAdaptor];
}

-+ (ANTLRTreeWizard *)newANTLRTreeWizard:(id<ANTLRTreeAdaptor>)anAdaptor Map:(ANTLRMap *)aTokenNameToTypeMap
++ (TreeWizard *)newTreeWizard:(id<TreeAdaptor>)anAdaptor Map:(Map *)aTokenNameToTypeMap
{
-    return [[ANTLRTreeWizard alloc] initWithAdaptor:anAdaptor Map:aTokenNameToTypeMap];
+    return [[TreeWizard alloc] initWithAdaptor:anAdaptor Map:aTokenNameToTypeMap];
}

-+ (ANTLRTreeWizard *)newANTLRTreeWizard:(id<ANTLRTreeAdaptor>)anAdaptor TokenNames:(NSArray *)theTokNams
++ (TreeWizard *)newTreeWizard:(id<TreeAdaptor>)anAdaptor TokenNames:(NSArray *)theTokNams
{
-    return [[ANTLRTreeWizard alloc] initWithTokenNames:anAdaptor TokenNames:theTokNams];
+    return [[TreeWizard alloc] initWithTokenNames:anAdaptor TokenNames:theTokNams];
}

-+ (ANTLRTreeWizard *)newANTLRTreeWizardWithTokenNames:(NSArray *)theTokNams
++ (TreeWizard *)newTreeWizardWithTokenNames:(NSArray *)theTokNams
{
-    return [[ANTLRTreeWizard alloc] initWithTokenNames:theTokNams];
+    return [[TreeWizard alloc] initWithTokenNames:theTokNams];
}

- (id) init
@@ -229,7 +229,7 @@
return self;
}

-- (id) initWithAdaptor:(id<ANTLRTreeAdaptor>)anAdaptor
+- (id) initWithAdaptor:(id<TreeAdaptor>)anAdaptor
{
if ((self = [super init]) != nil) {
adaptor = anAdaptor;
@@ -238,7 +238,7 @@
return self;
}

-- (id) initWithAdaptor:(id<ANTLRTreeAdaptor>)anAdaptor Map:(ANTLRMap *)aTokenNameToTypeMap
+- (id) initWithAdaptor:(id<TreeAdaptor>)anAdaptor Map:(Map *)aTokenNameToTypeMap
{
if ((self = [super init]) != nil) {
adaptor = anAdaptor;
@@ -259,7 +259,7 @@
return self;
}

-- (id) initWithTokenNames:(id<ANTLRTreeAdaptor>)anAdaptor TokenNames:(NSArray *)theTokNams
+- (id) initWithTokenNames:(id<TreeAdaptor>)anAdaptor TokenNames:(NSArray *)theTokNams
{
if ((self = [super init]) != nil) {
adaptor = anAdaptor;
@@ -273,7 +273,7 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRTreePatternTreeAdaptor" );
+    NSLog( @"called dealloc in TreePatternTreeAdaptor" );
#endif
if ( adaptor ) [adaptor release];
if ( tokenNameToTypeMap ) [tokenNameToTypeMap release];
@@ -283,13 +283,13 @@
/** Compute a Map<String, Integer> that is an inverted index of
*  tokenNames (which maps int token types to names).
*/
-- (ANTLRMap *)computeTokenTypes:(NSArray *)theTokNams
+- (Map *)computeTokenTypes:(NSArray *)theTokNams
{
-    ANTLRMap *m = [ANTLRMap newANTLRMap];
+    Map *m = [Map newMap];
if ( theTokNams == nil ) {
return m;
}
-    for (int ttype = ANTLRTokenTypeMIN; ttype < [theTokNams count]; ttype++) {
+    for (int ttype = TokenTypeMIN; ttype < [theTokNams count]; ttype++) {
NSString *name = (NSString *) [theTokNams objectAtIndex:ttype];
[m putName:name TType:ttype];
}
@@ -300,13 +300,13 @@
- (NSInteger)getTokenType:(NSString *)tokenName
{
if ( tokenNameToTypeMap == nil ) {
-        return ANTLRTokenTypeInvalid;
+        return TokenTypeInvalid;
}
NSInteger aTType = (NSInteger)[tokenNameToTypeMap getTType:tokenName];
if ( aTType != -1 ) {
return aTType;
}
-    return ANTLRTokenTypeInvalid;
+    return TokenTypeInvalid;
}

/** Walk the entire tree and make a node name to nodes mapping.
@@ -316,36 +316,36 @@
*
*  TODO: save this index so that find and visit are faster
*/
-- (ANTLRMap *)index:(ANTLRCommonTree *)t
+- (Map *)index:(CommonTree *)t
{
-    ANTLRMap *m = [ANTLRMap newANTLRMap];
+    Map *m = [Map newMap];
[self _index:t Map:m];
return m;
}

/** Do the work for index */
-- (void) _index:(ANTLRCommonTree *)t Map:(ANTLRMap *)m
+- (void) _index:(CommonTree *)t Map:(Map *)m
{
if ( t==nil ) {
return;
}
-#pragma warning Fix _index use of ANTLRMap.
+#pragma warning Fix _index use of Map.
NSInteger ttype = [adaptor getType:t];
-    ANTLRMap *elements = (ANTLRMap *)[m getName:ttype];
+    Map *elements = (Map *)[m getName:ttype];
if ( elements == nil ) {
-        elements = [ANTLRMap newANTLRMapWithLen:100];
+        elements = [Map newMapWithLen:100];
[m putNode:ttype Node:elements];
}
[elements addObject:t];
int n = [adaptor getChildCount:t];
for (int i=0; i<n; i++) {
-        ANTLRCommonTree * child = [adaptor getChild:t At:i];
+        CommonTree * child = [adaptor getChild:t At:i];
[self _index:child Map:m];
}
}

/** Return a List of tree nodes with token type ttype */
-- (AMutableArray *)find:(ANTLRCommonTree *)t Type:(NSInteger)ttype
+- (AMutableArray *)find:(CommonTree *)t Type:(NSInteger)ttype
{
#ifdef DONTUSENOMO
final List nodes = new ArrayList();
@@ -362,15 +362,15 @@
}

/** Return a List of subtrees matching pattern. */
-- (AMutableArray *)find:(ANTLRCommonTree *)t Pattern:(NSString *)pattern
+- (AMutableArray *)find:(CommonTree *)t Pattern:(NSString *)pattern
{
AMutableArray *subtrees = [AMutableArray arrayWithCapacity:100];
// Create a TreePattern from the pattern
-    ANTLRTreePatternLexer *tokenizer = [ANTLRTreePatternLexer newANTLRTreePatternLexer:pattern];
-    ANTLRTreePatternParser *parser = [ANTLRTreePatternParser newANTLRTreePatternParser:tokenizer
+    TreePatternLexer *tokenizer = [TreePatternLexer newTreePatternLexer:pattern];
+    TreePatternParser *parser = [TreePatternParser newTreePatternParser:tokenizer
Wizard:self
-                                                                                    Adaptor:[ANTLRTreePatternTreeAdaptor newTreeAdaptor]];
-    ANTLRCommonTree *tpattern = (ANTLRCommonTree *)[parser pattern];
+                                                                                    Adaptor:[TreePatternTreeAdaptor newTreeAdaptor]];
+    CommonTree *tpattern = (CommonTree *)[parser pattern];
// don't allow invalid patterns
if ( tpattern == nil ||
[tpattern isNil] ||
@@ -393,12 +393,12 @@
return subtrees;
}

-- (ANTLRTreeWizard *)findFirst:(ANTLRCommonTree *) t Type:(NSInteger)ttype
+- (TreeWizard *)findFirst:(CommonTree *) t Type:(NSInteger)ttype
{
return nil;
}

-- (ANTLRTreeWizard *)findFirst:(ANTLRCommonTree *) t Pattern:(NSString *)pattern
+- (TreeWizard *)findFirst:(CommonTree *) t Pattern:(NSString *)pattern
{
return nil;
}
@@ -408,14 +408,14 @@
*  of the visitor action method is never set (it's nil) since using
*  a token type rather than a pattern doesn't let us set a label.
*/
-- (void) visit:(ANTLRCommonTree *)t Type:(NSInteger)ttype Visitor:(ANTLRVisitor *)visitor
+- (void) visit:(CommonTree *)t Type:(NSInteger)ttype Visitor:(ANTLRVisitor *)visitor
{
[self _visit:t Parent:nil ChildIndex:0 Type:ttype Visitor:visitor];
}

/** Do the recursive work for visit */
-- (void) _visit:(ANTLRCommonTree *)t
-         Parent:(ANTLRCommonTree *)parent
+- (void) _visit:(CommonTree *)t
+         Parent:(CommonTree *)parent
ChildIndex:(NSInteger)childIndex
Type:(NSInteger)ttype
Visitor:(ANTLRVisitor *)visitor
@@ -428,7 +428,7 @@
}
int n = [adaptor getChildCount:t];
for (int i=0; i<n; i++) {
-        ANTLRCommonTree * child = [adaptor getChild:t At:i];
+        CommonTree * child = [adaptor getChild:t At:i];
[self _visit:child Parent:t ChildIndex:i Type:ttype Visitor:visitor];
}
}
@@ -438,13 +438,13 @@
*  with visit(t, ttype, visitor) so nil-rooted patterns are not allowed.
*  Patterns with wildcard roots are also not allowed.
*/
-- (void)visit:(ANTLRCommonTree *)t Pattern:(NSString *)pattern Visitor:(ANTLRVisitor *)visitor
+- (void)visit:(CommonTree *)t Pattern:(NSString *)pattern Visitor:(ANTLRVisitor *)visitor
{
// Create a TreePattern from the pattern
-    ANTLRTreePatternLexer *tokenizer = [ANTLRTreePatternLexer newANTLRTreePatternLexer:pattern];
-    ANTLRTreePatternParser *parser =
-    [ANTLRTreePatternParser newANTLRTreePatternParser:tokenizer Wizard:self Adaptor:[ANTLRTreePatternTreeAdaptor newTreeAdaptor]];
-    ANTLRCommonTree *tpattern = [parser pattern];
+    TreePatternLexer *tokenizer = [TreePatternLexer newTreePatternLexer:pattern];
+    TreePatternParser *parser =
+    [TreePatternParser newTreePatternParser:tokenizer Wizard:self Adaptor:[TreePatternTreeAdaptor newTreeAdaptor]];
+    CommonTree *tpattern = [parser pattern];
// don't allow invalid patterns
if ( tpattern == nil ||
[tpattern isNil] ||
@@ -452,7 +452,7 @@
{
return;
}
-    ANTLRMapElement *labels = [ANTLRMap newANTLRMap]; // reused for each _parse
+    MapElement *labels = [Map newMap]; // reused for each _parse
int rootTokenType = [tpattern type];
#pragma warning This is another one of those screwy nested constructs that I have to figure out
#ifdef DONTUSENOMO
@@ -481,7 +481,7 @@
*
*  TODO: what's a better way to indicate bad pattern? Exceptions are a hassle
*/
-- (BOOL)parse:(ANTLRCommonTree *)t Pattern:(NSString *)pattern Map:(ANTLRMap *)labels
+- (BOOL)parse:(CommonTree *)t Pattern:(NSString *)pattern Map:(Map *)labels
{
#ifdef DONTUSENOMO
TreePatternLexer tokenizer = new TreePatternLexer(pattern);
@@ -495,11 +495,11 @@
boolean matched = _parse(t, tpattern, labels);
return matched;
#endif
-    ANTLRTreePatternLexer *tokenizer = [ANTLRTreePatternLexer newANTLRTreePatternLexer:pattern];
-    ANTLRTreePatternParser *parser = [ANTLRTreePatternParser newANTLRTreePatternParser:tokenizer
+    TreePatternLexer *tokenizer = [TreePatternLexer newTreePatternLexer:pattern];
+    TreePatternParser *parser = [TreePatternParser newTreePatternParser:tokenizer
Wizard:self
-                                                                               Adaptor:[ANTLRTreePatternTreeAdaptor newTreeAdaptor]];
-    ANTLRCommonTree *tpattern = [parser pattern];
+                                                                               Adaptor:[TreePatternTreeAdaptor newTreeAdaptor]];
+    CommonTree *tpattern = [parser pattern];
/*
System.out.println("t="+((Tree)t).toStringTree());
System.out.println("scant="+tpattern.toStringTree());
@@ -509,7 +509,7 @@
return [self _parse:t Pattern:tpattern Map:labels];
}

-- (BOOL) parse:(ANTLRCommonTree *)t Pattern:(NSString *)pattern
+- (BOOL) parse:(CommonTree *)t Pattern:(NSString *)pattern
{
return [self parse:t Pattern:pattern Map:nil];
}
@@ -519,15 +519,15 @@
*  text arguments on nodes.  Fill labels map with pointers to nodes
*  in tree matched against nodes in pattern with labels.
*/
-- (BOOL) _parse:(ANTLRCommonTree *)t1 Pattern:(ANTLRCommonTree *)aTPattern Map:(ANTLRMap *)labels
+- (BOOL) _parse:(CommonTree *)t1 Pattern:(CommonTree *)aTPattern Map:(Map *)labels
{
-    ANTLRTreePattern *tpattern;
+    TreePattern *tpattern;
// make sure both are non-nil
if ( t1 == nil || aTPattern == nil ) {
return NO;
}
if ( [aTPattern isKindOfClass:[ANTLRWildcardTreePattern class]] ) {
-        tpattern = (ANTLRTreePattern *)aTPattern;
+        tpattern = (TreePattern *)aTPattern;
}
// check roots (wildcard matches anything)
if ( [tpattern class] != [ANTLRWildcardTreePattern class] ) {
@@ -549,8 +549,8 @@
return NO;
}
for (int i=0; i<n1; i++) {
-        ANTLRCommonTree * child1 = [adaptor getChild:t1 At:i];
-        ANTLRCommonTree *child2 = (ANTLRCommonTree *)[tpattern getChild:i];
+        CommonTree * child1 = [adaptor getChild:t1 At:i];
+        CommonTree *child2 = (CommonTree *)[tpattern getChild:i];
if ( ![self _parse:child1 Pattern:child2 Map:labels] ) {
return NO;
}
@@ -571,11 +571,11 @@
*  nil is a special name meaning "give me a nil node".  Useful for
*  making lists: (nil A B C) is a list of A B C.
*/
-- (ANTLRCommonTree *) createTree:(NSString *)pattern
+- (CommonTree *) createTree:(NSString *)pattern
{
-    ANTLRTreePatternLexer *tokenizer = [ANTLRTreePatternLexer newANTLRTreePatternLexer:pattern];
-    ANTLRTreePatternParser *parser = [ANTLRTreePatternParser newANTLRTreePatternParser:tokenizer Wizard:self Adaptor:adaptor];
-    ANTLRCommonTree * t = [parser pattern];
+    TreePatternLexer *tokenizer = [TreePatternLexer newTreePatternLexer:pattern];
+    TreePatternParser *parser = [TreePatternParser newTreePatternParser:tokenizer Wizard:self Adaptor:adaptor];
+    CommonTree * t = [parser pattern];
return t;
}

@@ -588,7 +588,7 @@
*  I cannot rely on the tree node's equals() implementation as I make
*  no constraints at all on the node types nor interface etc...
*/
-- (BOOL)equals:(id)t1 O2:(id)t2 Adaptor:(id<ANTLRTreeAdaptor>)anAdaptor
+- (BOOL)equals:(id)t1 O2:(id)t2 Adaptor:(id<TreeAdaptor>)anAdaptor
{
return [self _equals:t1 O2:t2 Adaptor:anAdaptor];
}
@@ -601,7 +601,7 @@
return [self _equals:t1 O2:t2 Adaptor:adaptor];
}

-- (BOOL) _equals:(id)t1 O2:(id)t2 Adaptor:(id<ANTLRTreeAdaptor>)anAdaptor
+- (BOOL) _equals:(id)t1 O2:(id)t2 Adaptor:(id<TreeAdaptor>)anAdaptor
{
// make sure both are non-nil
if ( t1==nil || t2==nil ) {
@@ -621,8 +621,8 @@
return NO;
}
for (int i=0; i<n1; i++) {
-        ANTLRCommonTree * child1 = [anAdaptor getChild:t1 At:i];
-        ANTLRCommonTree * child2 = [anAdaptor getChild:t2 At:i];
+        CommonTree * child1 = [anAdaptor getChild:t1 At:i];
+        CommonTree * child2 = [anAdaptor getChild:t2 At:i];
if ( ![self _equals:child1 O2:child2 Adaptor:anAdaptor] ) {
return NO;
}
@@ -649,14 +649,14 @@
*
*  If you change this method, you will likely need to change
*  getNodeIndex(), which extracts information.
-- (void)fillReverseIndex:(ANTLRCommonTree *)node Index:(NSInteger)streamIndex
+- (void)fillReverseIndex:(CommonTree *)node Index:(NSInteger)streamIndex
{
//System.out.println("revIndex "+node+"@"+streamIndex);
if ( tokenTypesToReverseIndex == nil ) {
return; // no indexing if this is empty (nothing of interest)
}
if ( tokenTypeToStreamIndexesMap == nil ) {
-        tokenTypeToStreamIndexesMap = [ANTLRMap newANTLRMap]; // first indexing op
+        tokenTypeToStreamIndexesMap = [Map newMap]; // first indexing op
}
int tokenType = [adaptor getType:node];
Integer tokenTypeI = new Integer(tokenType);
@@ -685,7 +685,7 @@
public void reverseIndex:(NSInteger)tokenType
{
if ( tokenTypesToReverseIndex == nil ) {
-        tokenTypesToReverseIndex = [ANTLRMap newANTLRMap];
+        tokenTypesToReverseIndex = [Map newMap];
}
else if ( tokenTypesToReverseIndex == INDEX_ALL ) {
return;
diff --git a/runtime/ObjC/Framework/UnbufferedTokenStream.h b/runtime/ObjC/Framework/UnbufferedTokenStream.h
index 84d8f43..e9b462e 100644
--- a/runtime/ObjC/Framework/UnbufferedTokenStream.h
+++ b/runtime/ObjC/Framework/UnbufferedTokenStream.h
@@ -1,5 +1,5 @@
//
-//  ANTLRUnbufferedTokenStream.h
+//  UnbufferedTokenStream.h
//  ANTLR
//
//  Created by Alan Condit on 7/12/10.
@@ -30,32 +30,32 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRRuntimeException.h"
-#import "ANTLRTokenSource.h"
-#import "ANTLRLookaheadStream.h"
-#import "ANTLRToken.h"
+#import "RuntimeException.h"
+#import "TokenSource.h"
+#import "LookaheadStream.h"
+#import "Token.h"

-@interface ANTLRUnbufferedTokenStream : ANTLRLookaheadStream {
-	id<ANTLRTokenSource> tokenSource;
+@interface UnbufferedTokenStream : LookaheadStream {
+	id<TokenSource> tokenSource;
NSInteger tokenIndex; // simple counter to set token index in tokens
NSInteger channel;
}

-@property (retain, getter=getTokenSource, setter=setTokenSource:) id<ANTLRTokenSource> tokenSource;
+@property (retain, getter=getTokenSource, setter=setTokenSource:) id<TokenSource> tokenSource;
@property (getter=getTokenIndex, setter=setTokenIndex:) NSInteger tokenIndex;
@property (getter=channel, setter=setChannel:) NSInteger channel;

-+ (ANTLRUnbufferedTokenStream *)newANTLRUnbufferedTokenStream:(id<ANTLRTokenSource>)aTokenSource;
++ (UnbufferedTokenStream *)newUnbufferedTokenStream:(id<TokenSource>)aTokenSource;
- (id) init;
-- (id) initWithTokenSource:(id<ANTLRTokenSource>)aTokenSource;
+- (id) initWithTokenSource:(id<TokenSource>)aTokenSource;

-- (id<ANTLRToken>)nextElement;
-- (BOOL)isEOF:(id<ANTLRToken>) aToken;
-- (id<ANTLRTokenSource>)getTokenSource;
+- (id<Token>)nextElement;
+- (BOOL)isEOF:(id<Token>) aToken;
+- (id<TokenSource>)getTokenSource;
- (NSString *)toStringFromStart:(NSInteger)aStart ToEnd:(NSInteger)aStop;
-- (NSString *)toStringFromToken:(id<ANTLRToken>)aStart ToEnd:(id<ANTLRToken>)aStop;
+- (NSString *)toStringFromToken:(id<Token>)aStart ToEnd:(id<Token>)aStop;
- (NSInteger)LA:(NSInteger)anIdx;
-- (id<ANTLRToken>)objectAtIndex:(NSInteger)anIdx;
+- (id<Token>)objectAtIndex:(NSInteger)anIdx;
- (NSString *)getSourceName;


diff --git a/runtime/ObjC/Framework/UnbufferedTokenStream.m b/runtime/ObjC/Framework/UnbufferedTokenStream.m
index 3b74e92..8f755d4 100644
--- a/runtime/ObjC/Framework/UnbufferedTokenStream.m
+++ b/runtime/ObjC/Framework/UnbufferedTokenStream.m
@@ -1,5 +1,5 @@
//
-//  ANTLRUnbufferedTokenStream.m
+//  UnbufferedTokenStream.m
//  ANTLR
//
//  Created by Alan Condit on 7/12/10.
@@ -29,17 +29,17 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRUnbufferedTokenStream.h"
+#import "UnbufferedTokenStream.h"

-@implementation ANTLRUnbufferedTokenStream
+@implementation UnbufferedTokenStream

@synthesize tokenSource;
@synthesize tokenIndex;
@synthesize channel;

-+ (ANTLRUnbufferedTokenStream *)newANTLRUnbufferedTokenStream:(id<ANTLRTokenSource>)aTokenSource
++ (UnbufferedTokenStream *)newUnbufferedTokenStream:(id<TokenSource>)aTokenSource
{
-    return [[ANTLRUnbufferedTokenStream alloc] initWithTokenSource:aTokenSource];
+    return [[UnbufferedTokenStream alloc] initWithTokenSource:aTokenSource];
}

- (id) init
@@ -47,18 +47,18 @@
if ((self = [super init]) != nil) {
tokenSource = nil;
tokenIndex = 0;
-        channel = ANTLRTokenChannelDefault;
+        channel = TokenChannelDefault;
}
return self;
}

-- (id) initWithTokenSource:(id<ANTLRTokenSource>)aTokenSource
+- (id) initWithTokenSource:(id<TokenSource>)aTokenSource
{
if ((self = [super init]) != nil) {
tokenSource = aTokenSource;
if ( tokenSource ) [tokenSource retain];
tokenIndex = 0;
-        channel = ANTLRTokenChannelDefault;
+        channel = TokenChannelDefault;
}
return self;
}
@@ -66,25 +66,25 @@
- (void) dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRUnbufferedTokenStream" );
+    NSLog( @"called dealloc in UnbufferedTokenStream" );
#endif
if ( tokenSource ) [tokenSource release];
[super dealloc];
}

-- (id<ANTLRToken>)nextElement
+- (id<Token>)nextElement
{
-    id<ANTLRToken> t = [tokenSource nextToken];
+    id<Token> t = [tokenSource nextToken];
[t setTokenIndex:tokenIndex++];
return t;
}

-- (BOOL)isEOF:(id<ANTLRToken>)aToken
+- (BOOL)isEOF:(id<Token>)aToken
{
-    return (aToken.type == ANTLRTokenTypeEOF);
+    return (aToken.type == TokenTypeEOF);
}

-- (id<ANTLRTokenSource>)getTokenSource
+- (id<TokenSource>)getTokenSource
{
return tokenSource;
}
@@ -94,7 +94,7 @@
return @"n/a";
}

-- (NSString *)toStringFromToken:(id<ANTLRToken>)aStart ToEnd:(id<ANTLRToken>)aStop
+- (NSString *)toStringFromToken:(id<Token>)aStart ToEnd:(id<Token>)aStop
{
return @"n/a";
}
@@ -104,9 +104,9 @@
return [[self LT:anIdx] type];
}

-- (id<ANTLRToken>)objectAtIndex:(NSInteger)anIdx
+- (id<Token>)objectAtIndex:(NSInteger)anIdx
{
-    @throw [ANTLRRuntimeException newException:@"Absolute token indexes are meaningless in an unbuffered stream"];
+    @throw [RuntimeException newException:@"Absolute token indexes are meaningless in an unbuffered stream"];
}

- (NSString *)getSourceName
diff --git a/runtime/ObjC/Framework/UniqueIDMap.h b/runtime/ObjC/Framework/UniqueIDMap.h
index 55c92d1..bfa851d 100644
--- a/runtime/ObjC/Framework/UniqueIDMap.h
+++ b/runtime/ObjC/Framework/UniqueIDMap.h
@@ -1,5 +1,5 @@
//
-//  ANTLRUniqueIDMap.h
+//  UniqueIDMap.h
//  ANTLR
//
//  Created by Alan Condit on 7/7/10.
@@ -30,22 +30,22 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRPtrBuffer.h"
-#import "ANTLRNodeMapElement.h"
+#import "PtrBuffer.h"
+#import "NodeMapElement.h"

#define SUCCESS             0
#define FAILURE             -1
#define HASHSIZE            101
#define HBUFSIZE            0x2000

-@interface ANTLRUniqueIDMap : ANTLRPtrBuffer {
+@interface UniqueIDMap : PtrBuffer {
NSInteger lastHash;
}

@property (getter=getLastHash, setter=setLastHash:) NSInteger lastHash;

-+ (id)newANTLRUniqueIDMap;
-+ (id)newANTLRUniqueIDMapWithLen:(NSInteger)aHashSize;
++ (id)newUniqueIDMap;
++ (id)newUniqueIDMapWithLen:(NSInteger)aHashSize;

- (id)init;
- (id)initWithLen:(NSInteger)cnt;
@@ -56,9 +56,9 @@
/* clear -- reinitialize the maplist array */
- (void) clear;

-- (void)deleteANTLRUniqueIDMap:(ANTLRNodeMapElement *)np;
-- (void)delete_chain:(ANTLRNodeMapElement *)np;
-- (id)getNode:(id<ANTLRBaseTree>)aNode;
-- (void)putID:(id)anID Node:(id<ANTLRBaseTree>)aNode;
+- (void)deleteUniqueIDMap:(NodeMapElement *)np;
+- (void)delete_chain:(NodeMapElement *)np;
+- (id)getNode:(id<BaseTree>)aNode;
+- (void)putID:(id)anID Node:(id<BaseTree>)aNode;

@end
diff --git a/runtime/ObjC/Framework/UniqueIDMap.m b/runtime/ObjC/Framework/UniqueIDMap.m
index 0d52092..daafbd0 100644
--- a/runtime/ObjC/Framework/UniqueIDMap.m
+++ b/runtime/ObjC/Framework/UniqueIDMap.m
@@ -1,5 +1,5 @@
//
-//  ANTLRUniqueIDMap.m
+//  UniqueIDMap.m
//  ANTLR
//
//  Created by Alan Condit on 7/7/10.
@@ -29,26 +29,26 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRUniqueIDMap.h"
-#import "ANTLRTree.h"
+#import "UniqueIDMap.h"
+#import "Tree.h"

-@implementation ANTLRUniqueIDMap
+@implementation UniqueIDMap
@synthesize lastHash;

-+(id)newANTLRUniqueIDMap
++(id)newUniqueIDMap
{
-    ANTLRUniqueIDMap *aNewANTLRUniqueIDMap;
+    UniqueIDMap *aNewUniqueIDMap;

-    aNewANTLRUniqueIDMap = [[ANTLRUniqueIDMap alloc] init];
-	return( aNewANTLRUniqueIDMap );
+    aNewUniqueIDMap = [[UniqueIDMap alloc] init];
+	return( aNewUniqueIDMap );
}

-+(id)newANTLRUniqueIDMapWithLen:(NSInteger)aBuffSize
++(id)newUniqueIDMapWithLen:(NSInteger)aBuffSize
{
-    ANTLRUniqueIDMap *aNewANTLRUniqueIDMap;
+    UniqueIDMap *aNewUniqueIDMap;

-    aNewANTLRUniqueIDMap = [[ANTLRUniqueIDMap alloc] initWithLen:aBuffSize];
-	return( aNewANTLRUniqueIDMap );
+    aNewUniqueIDMap = [[UniqueIDMap alloc] initWithLen:aBuffSize];
+	return( aNewUniqueIDMap );
}

-(id)init
@@ -74,9 +74,9 @@
-(void)dealloc
{
#ifdef DEBUG_DEALLOC
-    NSLog( @"called dealloc in ANTLRUniqueIDMap" );
+    NSLog( @"called dealloc in UniqueIDMap" );
#endif
-    ANTLRNodeMapElement *tmp, *rtmp;
+    NodeMapElement *tmp, *rtmp;
NSInteger idx;

if ( self.fNext != nil ) {
@@ -84,7 +84,7 @@
tmp = ptrBuffer[idx];
while ( tmp ) {
rtmp = tmp;
-                tmp = (ANTLRNodeMapElement *)tmp.fNext;
+                tmp = (NodeMapElement *)tmp.fNext;
[rtmp release];
}
}
@@ -92,9 +92,9 @@
[super dealloc];
}

--(void)deleteANTLRUniqueIDMap:(ANTLRNodeMapElement *)np
+-(void)deleteUniqueIDMap:(NodeMapElement *)np
{
-    ANTLRNodeMapElement *tmp, *rtmp;
+    NodeMapElement *tmp, *rtmp;
NSInteger idx;

if ( self.fNext != nil ) {
@@ -111,7 +111,7 @@

- (void)clear
{
-    ANTLRNodeMapElement *tmp, *rtmp;
+    NodeMapElement *tmp, *rtmp;
NSInteger idx;

for( idx = 0; idx < HASHSIZE; idx++ ) {
@@ -143,19 +143,19 @@
return BuffSize;
}

--(void)delete_chain:(ANTLRNodeMapElement *)np
+-(void)delete_chain:(NodeMapElement *)np
{
if ( np.fNext != nil )
[self delete_chain:np.fNext];
[np release];
}

-- (id)getNode:(id<ANTLRBaseTree>)aNode
+- (id)getNode:(id<BaseTree>)aNode
{
-    ANTLRNodeMapElement *np;
+    NodeMapElement *np;
NSInteger idx;

-    idx = [(id<ANTLRBaseTree>)aNode type];
+    idx = [(id<BaseTree>)aNode type];
np = ptrBuffer[idx];
while ( np != nil ) {
if (np.node == aNode) {
@@ -166,14 +166,14 @@
return( nil );
}

-- (void)putID:(id)anID Node:(id<ANTLRBaseTree>)aNode
+- (void)putID:(id)anID Node:(id<BaseTree>)aNode
{
-    ANTLRNodeMapElement *np, *np1;
+    NodeMapElement *np, *np1;
NSInteger idx;

-    idx = [(id<ANTLRBaseTree>)aNode type];
+    idx = [(id<BaseTree>)aNode type];
idx %= HASHSIZE;
-    np = [[ANTLRNodeMapElement newANTLRNodeMapElementWithIndex:anID Node:aNode] retain];
+    np = [[NodeMapElement newNodeMapElementWithIndex:anID Node:aNode] retain];
np1 = ptrBuffer[idx];
np.fNext = np1;
ptrBuffer[idx] = np;
diff --git a/runtime/ObjC/Framework/UnwantedTokenException.h b/runtime/ObjC/Framework/UnwantedTokenException.h
index fbb60e3..009f5ed 100644
--- a/runtime/ObjC/Framework/UnwantedTokenException.h
+++ b/runtime/ObjC/Framework/UnwantedTokenException.h
@@ -1,5 +1,5 @@
//
-//  ANTLRUnwantedTokenException.h
+//  UnwantedTokenException.h
//  ANTLR
//
//  Created by Alan Condit on 6/8/10.
@@ -30,17 +30,17 @@
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#import <Cocoa/Cocoa.h>
-#import "ANTLRMismatchedTokenException.h"
+#import "MismatchedTokenException.h"

-@interface ANTLRUnwantedTokenException : ANTLRMismatchedTokenException {
+@interface UnwantedTokenException : MismatchedTokenException {

}
-+ (ANTLRUnwantedTokenException *)newException;
-+ (ANTLRUnwantedTokenException *)newException:(NSInteger)expected Stream:(id<ANTLRIntStream>)anInput;
++ (UnwantedTokenException *)newException;
++ (UnwantedTokenException *)newException:(NSInteger)expected Stream:(id<IntStream>)anInput;

- (id) init;
-- (id) initWithStream:(id<ANTLRIntStream>)anInput And:(NSInteger)expected;
-- (id<ANTLRToken>)getUnexpectedToken;
+- (id) initWithStream:(id<IntStream>)anInput And:(NSInteger)expected;
+- (id<Token>)getUnexpectedToken;
- (NSString *)toString;


diff --git a/runtime/ObjC/Framework/UnwantedTokenException.m b/runtime/ObjC/Framework/UnwantedTokenException.m
index b8b24f3..8a9f50d 100644
--- a/runtime/ObjC/Framework/UnwantedTokenException.m
+++ b/runtime/ObjC/Framework/UnwantedTokenException.m
@@ -1,5 +1,5 @@
//
-//  ANTLRUnwantedTokenException.m
+//  UnwantedTokenException.m
//  ANTLR
//
//  Created by Alan Condit on 6/8/10.
@@ -29,18 +29,18 @@
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-#import "ANTLRUnwantedTokenException.h"
+#import "UnwantedTokenException.h"

-@implementation ANTLRUnwantedTokenException : ANTLRMismatchedTokenException
+@implementation UnwantedTokenException : MismatchedTokenException
/** Used for remote debugger deserialization */
-+ (ANTLRUnwantedTokenException *)newException
++ (UnwantedTokenException *)newException
{
-    return [[ANTLRUnwantedTokenException alloc] init];
+    return [[UnwantedTokenException alloc] init];
}

-+ (ANTLRUnwantedTokenException *)newException:(NSInteger)expected Stream:(id<ANTLRIntStream>)anInput
++ (UnwantedTokenException *)newException:(NSInteger)expected Stream:(id<IntStream>)anInput
{
-    return [[ANTLRUnwantedTokenException alloc] initWithStream:anInput And:expected];
+    return [[UnwantedTokenException alloc] initWithStream:anInput And:expected];
}

- (id) init
@@ -51,7 +51,7 @@
return self;
}

-- (id) initWithStream:(id<ANTLRIntStream>)anInput And:(NSInteger)expected
+- (id) initWithStream:(id<IntStream>)anInput And:(NSInteger)expected
{
self = [super initWithStream:anInput];
if (self) {
@@ -60,7 +60,7 @@
return self;
}

-- (id<ANTLRToken>)getUnexpectedToken
+- (id<Token>)getUnexpectedToken
{
return token;
}
@@ -68,7 +68,7 @@
- (NSString *)toString
{
NSString *exp1 = [NSString stringWithFormat:@", expected %d", expecting];
-    if ( expecting == ANTLRTokenTypeInvalid ) {
+    if ( expecting == TokenTypeInvalid ) {
exp1 = @"";
}
if ( token==nil ) {
diff --git a/runtime/ObjC/Framework/antlr3.h b/runtime/ObjC/Framework/antlr3.h
index 9c941dc..7063bdc 100644
--- a/runtime/ObjC/Framework/antlr3.h
+++ b/runtime/ObjC/Framework/antlr3.h
@@ -27,88 +27,88 @@
#import <ANTLR/ACBTree.h>
#import <ANTLR/AMutableArray.h>
#import <ANTLR/AMutableDictionary.h>
-#import <ANTLR/ANTLRBaseMapElement.h>
-#import <ANTLR/ANTLRBaseRecognizer.h>
-#import <ANTLR/ANTLRBaseStack.h>
-#import <ANTLR/ANTLRBaseTree.h>
-#import <ANTLR/ANTLRBaseTreeAdaptor.h>
+#import <ANTLR/BaseMapElement.h>
+#import <ANTLR/BaseRecognizer.h>
+#import <ANTLR/BaseStack.h>
+#import <ANTLR/BaseTree.h>
+#import <ANTLR/BaseTreeAdaptor.h>
#import <ANTLR/ANTLRBitSet.h>
-#import <ANTLR/ANTLRBufferedTokenStream.h>
-#import <ANTLR/ANTLRBufferedTreeNodeStream.h>
-#import <ANTLR/ANTLRCharStream.h>
-#import <ANTLR/ANTLRCharStreamState.h>
-#import <ANTLR/ANTLRCommonErrorNode.h>
-#import <ANTLR/ANTLRCommonToken.h>
-#import <ANTLR/ANTLRCommonTokenStream.h>
-#import <ANTLR/ANTLRCommonTree.h>
-#import <ANTLR/ANTLRCommonTreeAdaptor.h>
-#import <ANTLR/ANTLRCommonTreeNodeStream.h>
-#import <ANTLR/ANTLRDFA.h>
-#import <ANTLR/ANTLRDebug.h>
-#import <ANTLR/ANTLRDebugEventProxy.h>
-#import <ANTLR/ANTLRDebugEventListener.h>
-#import <ANTLR/ANTLRDebugParser.h>
-#import <ANTLR/ANTLRDebugTokenStream.h>
-#import <ANTLR/ANTLRDebugTreeAdaptor.h>
-#import <ANTLR/ANTLRDebugTreeNodeStream.h>
-#import <ANTLR/ANTLRDebugTreeParser.h>
-#import <ANTLR/ANTLRDoubleKeyMap.h>
-#import <ANTLR/ANTLREarlyExitException.h>
+#import <ANTLR/BufferedTokenStream.h>
+#import <ANTLR/BufferedTreeNodeStream.h>
+#import <ANTLR/CharStream.h>
+#import <ANTLR/CharStreamState.h>
+#import <ANTLR/CommonErrorNode.h>
+#import <ANTLR/CommonToken.h>
+#import <ANTLR/CommonTokenStream.h>
+#import <ANTLR/CommonTree.h>
+#import <ANTLR/CommonTreeAdaptor.h>
+#import <ANTLR/CommonTreeNodeStream.h>
+#import <ANTLR/DFA.h>
+#import <ANTLR/Debug.h>
+#import <ANTLR/DebugEventSocketProxy.h>
+#import <ANTLR/DebugEventListener.h>
+#import <ANTLR/DebugParser.h>
+#import <ANTLR/DebugTokenStream.h>
+#import <ANTLR/DebugTreeAdaptor.h>
+#import <ANTLR/DebugTreeNodeStream.h>
+#import <ANTLR/DebugTreeParser.h>
+#import <ANTLR/DoubleKeyMap.h>
+#import <ANTLR/EarlyExitException.h>
#import <ANTLR/ANTLRError.h>
-#import <ANTLR/ANTLRFailedPredicateException.h>
-#import <ANTLR/ANTLRFastQueue.h>
+#import <ANTLR/FailedPredicateException.h>
+#import <ANTLR/FastQueue.h>
#import <ANTLR/ANTLRFileStream.h>
-#import <ANTLR/ANTLRHashMap.h>
-#import <ANTLR/ANTLRHashRule.h>
+#import <ANTLR/HashMap.h>
+#import <ANTLR/HashRule.h>
#import <ANTLR/ANTLRInputStream.h>
-#import <ANTLR/ANTLRIntArray.h>
-#import <ANTLR/ANTLRIntStream.h>
-#import <ANTLR/ANTLRLexer.h>
-#import <ANTLR/ANTLRLexerRuleReturnScope.h>
-#import <ANTLR/ANTLRLinkBase.h>
-#import <ANTLR/ANTLRLookaheadStream.h>
-#import <ANTLR/ANTLRMapElement.h>
-#import <ANTLR/ANTLRMap.h>
-#import <ANTLR/ANTLRMismatchedNotSetException.h>
-#import <ANTLR/ANTLRMismatchedRangeException.h>
-#import <ANTLR/ANTLRMismatchedSetException.h>
-#import <ANTLR/ANTLRMismatchedTokenException.h>
-#import <ANTLR/ANTLRMismatchedTreeNodeException.h>
-#import <ANTLR/ANTLRMissingTokenException.h>
-#import <ANTLR/ANTLRNodeMapElement.h>
-#import <ANTLR/ANTLRNoViableAltException.h>
-#import <ANTLR/ANTLRParser.h>
-#import <ANTLR/ANTLRParserRuleReturnScope.h>
-#import <ANTLR/ANTLRPtrBuffer.h>
+#import <ANTLR/IntArray.h>
+#import <ANTLR/IntStream.h>
+#import <ANTLR/Lexer.h>
+#import <ANTLR/LexerRuleReturnScope.h>
+#import <ANTLR/LinkBase.h>
+#import <ANTLR/LookaheadStream.h>
+#import <ANTLR/MapElement.h>
+#import <ANTLR/Map.h>
+#import <ANTLR/MismatchedNotSetException.h>
+#import <ANTLR/MismatchedRangeException.h>
+#import <ANTLR/MismatchedSetException.h>
+#import <ANTLR/MismatchedTokenException.h>
+#import <ANTLR/MismatchedTreeNodeException.h>
+#import <ANTLR/MissingTokenException.h>
+#import <ANTLR/NodeMapElement.h>
+#import <ANTLR/NoViableAltException.h>
+#import <ANTLR/Parser.h>
+#import <ANTLR/ParserRuleReturnScope.h>
+#import <ANTLR/PtrBuffer.h>
#import <ANTLR/ANTLRReaderStream.h>
-#import <ANTLR/ANTLRRecognitionException.h>
-#import <ANTLR/ANTLRRecognizerSharedState.h>
-#import <ANTLR/ANTLRRewriteRuleElementStream.h>
-#import <ANTLR/ANTLRRewriteRuleNodeStream.h>
-#import <ANTLR/ANTLRRewriteRuleSubtreeStream.h>
-#import <ANTLR/ANTLRRewriteRuleTokenStream.h>
-#import <ANTLR/ANTLRRuleMemo.h>
-#import <ANTLR/ANTLRRuleStack.h>
-#import <ANTLR/ANTLRRuleReturnScope.h>
-#import <ANTLR/ANTLRRuntimeException.h>
-#import <ANTLR/ANTLRStreamEnumerator.h>
+#import <ANTLR/RecognitionException.h>
+#import <ANTLR/RecognizerSharedState.h>
+#import <ANTLR/RewriteRuleElementStream.h>
+#import <ANTLR/RewriteRuleNodeStream.h>
+#import <ANTLR/RewriteRuleSubtreeStream.h>
+#import <ANTLR/RewriteRuleTokenStream.h>
+#import <ANTLR/RuleMemo.h>
+#import <ANTLR/RuleStack.h>
+#import <ANTLR/RuleReturnScope.h>
+#import <ANTLR/RuntimeException.h>
+#import <ANTLR/StreamEnumerator.h>
#import <ANTLR/ANTLRStringStream.h>
-#import <ANTLR/ANTLRSymbolStack.h>
-#import <ANTLR/ANTLRToken+DebuggerSupport.h>
-#import <ANTLR/ANTLRToken.h>
-#import <ANTLR/ANTLRTokenRewriteStream.h>
-#import <ANTLR/ANTLRTokenSource.h>
-#import <ANTLR/ANTLRTokenStream.h>
-#import <ANTLR/ANTLRTree.h>
-#import <ANTLR/ANTLRTreeAdaptor.h>
-#import <ANTLR/ANTLRTreeException.h>
-#import <ANTLR/ANTLRTreeIterator.h>
-#import <ANTLR/ANTLRTreeNodeStream.h>
-#import <ANTLR/ANTLRTreeParser.h>
-#import <ANTLR/ANTLRTreeRuleReturnScope.h>
-#import <ANTLR/ANTLRUnbufferedTokenStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStream.h>
-//#import <ANTLR/ANTLRUnbufferedCommonTreeNodeStreamState.h>
-#import <ANTLR/ANTLRUniqueIDMap.h>
-#import <ANTLR/ANTLRUnwantedTokenException.h>
+#import <ANTLR/SymbolStack.h>
+#import <ANTLR/Token+DebuggerSupport.h>
+#import <ANTLR/Token.h>
+#import <ANTLR/TokenRewriteStream.h>
+#import <ANTLR/TokenSource.h>
+#import <ANTLR/TokenStream.h>
+#import <ANTLR/Tree.h>
+#import <ANTLR/TreeAdaptor.h>
+#import <ANTLR/TreeException.h>
+#import <ANTLR/TreeIterator.h>
+#import <ANTLR/TreeNodeStream.h>
+#import <ANTLR/TreeParser.h>
+#import <ANTLR/TreeRuleReturnScope.h>
+#import <ANTLR/UnbufferedTokenStream.h>
+//#import <ANTLR/UnbufferedCommonTreeNodeStream.h>
+//#import <ANTLR/UnbufferedCommonTreeNodeStreamState.h>
+#import <ANTLR/UniqueIDMap.h>
+#import <ANTLR/UnwantedTokenException.h>
#import <ANTLR/ArrayIterator.h>

