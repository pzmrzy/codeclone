commit 71dc1d9b5d22a65a04a83047b5be12b6788f912b
Author:     Sam Harwell <sam@tunnelvisionlabs.com>
AuthorDate: Thu Jan 3 20:12:53 2013 -0600
Commit:     Sam Harwell <sam@tunnelvisionlabs.com>
CommitDate: Thu Jan 3 20:13:09 2013 -0600

Do not render templates to disk if errors occurred, fixes antlr/antlr3#61

diff --git a/tool/src/main/java/org/antlr/codegen/CodeGenerator.java b/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
index 7105f36..57495b2 100644
--- a/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
+++ b/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
@@ -444,6 +444,11 @@ public class CodeGenerator {
// all recognizers can see Grammar object
recognizerST.add("grammar", grammar);

+		// do not render templates to disk if errors occurred
+		if ( ErrorManager.getErrorState().errors > 0 ) {
+			return null;
+		}
+
if (LAUNCH_ST_INSPECTOR) {
outputFileST.inspect();
if ( templates.isDefined("headerFile") ) headerFileST.inspect();
diff --git a/tool/src/test/java/org/antlr/test/TestSyntacticPredicateEvaluation.java b/tool/src/test/java/org/antlr/test/TestSyntacticPredicateEvaluation.java
index 029d5be..894ffa3 100644
--- a/tool/src/test/java/org/antlr/test/TestSyntacticPredicateEvaluation.java
+++ b/tool/src/test/java/org/antlr/test/TestSyntacticPredicateEvaluation.java
@@ -419,22 +419,4 @@ public class TestSyntacticPredicateEvaluation extends BaseTest {
assertEquals("alt1\n", found);
}

-	@Test public void testSynPredWithSemPredReferencingLabeledRule() throws Exception {
-		String grammar =
-			"grammar T;\n" +
-			"options {\n" +
-			"    backtrack = true; \n" +
-			"}\n" +
-			"// if b is rule ref, gens bad void x=null code\n" +
-			"a : x=b {Object o = $x; System.out.println(\"alt1\");}\n" +
-			"  | y=b\n" +
-			"  ;\n" +
-			"\n" +
-			"b : 'a' ;\n" ;
-		String found = execParser("T.g", grammar, "TParser", "TLexer",
-				    "a", "a", false);
-
-		assertEquals("alt1\n", found);
-	}
-
}
diff --git a/tool/src/test/java/org/antlr/test/TestSyntaxErrors.java b/tool/src/test/java/org/antlr/test/TestSyntaxErrors.java
index 58861da..9e391e5 100644
--- a/tool/src/test/java/org/antlr/test/TestSyntaxErrors.java
+++ b/tool/src/test/java/org/antlr/test/TestSyntaxErrors.java
@@ -28,14 +28,13 @@

package org.antlr.test;

-import org.antlr.tool.ANTLRErrorListener;
import org.antlr.tool.ErrorManager;
-import org.antlr.tool.Message;
-import org.antlr.tool.ToolMessage;
import org.junit.Test;

import static org.junit.Assert.*;

+import java.io.File;
+
/** test runtime parse errors */
public class TestSyntaxErrors extends BaseTest {
@Test public void testLL2() throws Exception {
@@ -137,4 +136,30 @@ public class TestSyntaxErrors extends BaseTest {
"[error(100): :4:27: syntax error: antlr: dangling ']'? make sure to escape with \\]]",
errorQueue.errors.toString());
}
+
+	/**
+	 * This is a regression test for antlr/antlr3#61.
+	 * https://github.com/antlr/antlr3/issues/61
+	 */
+	@Test public void testMissingAttributeAccessPreventsCodeGeneration() throws Exception {
+		String grammar =
+			"grammar T;\n" +
+			"options {\n" +
+			"    backtrack = true; \n" +
+			"}\n" +
+			"// if b is rule ref, gens bad void x=null code\n" +
+			"a : x=b {Object o = $x; System.out.println(\"alt1\");}\n" +
+			"  | y=b\n" +
+			"  ;\n" +
+			"\n" +
+			"b : 'a' ;\n" ;
+
+		ErrorQueue errorQueue = new ErrorQueue();
+		ErrorManager.setErrorListener(errorQueue);
+		boolean success = rawGenerateAndBuildRecognizer("T.g", grammar, "TParser", "TLexer", false);
+		assertFalse(success);
+		assertEquals(
+			"[error(117): "+tmpdir.toString()+File.separatorChar+"T.g:6:9: missing attribute access on rule scope: x]",
+			errorQueue.errors.toString());
+	}
}

