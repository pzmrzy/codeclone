commit dbbbc93ff43296321aac0c7ed953904b2f085840
Author:     Ivan Brezina <ibre5041@ibrezina.net>
AuthorDate: Thu Jun 20 13:56:09 2013 +0200
Commit:     Ivan Brezina <ibre5041@ibrezina.net>
CommitDate: Mon Sep 9 11:09:07 2013 +0200

Do not call memset multiple times - minor speedup improvement

diff --git a/runtime/Cpp/include/antlr3bitset.inl b/runtime/Cpp/include/antlr3bitset.inl
index 4ba469e..ad2f620 100755
--- a/runtime/Cpp/include/antlr3bitset.inl
+++ b/runtime/Cpp/include/antlr3bitset.inl
@@ -105,9 +105,8 @@ Bitset<ImplTraits>::Bitset( ANTLR_UINT32 numBits )
//
ANTLR_UINT32 numelements	= ((numBits -1) >> ANTLR_BITSET_LOG_BITS) + 1;

-	m_blist.set_bits( (ANTLR_BITWORD*) AllocPolicyType::alloc(numelements * sizeof(ANTLR_BITWORD)));
+	m_blist.set_bits( (ANTLR_BITWORD*) AllocPolicyType::alloc0(numelements * sizeof(ANTLR_BITWORD)));

-	memset( m_blist.get_bits(), 0, (numelements * sizeof(ANTLR_BITWORD)));
m_blist.set_length( numelements );
}

diff --git a/runtime/Cpp/include/antlr3memory.hpp b/runtime/Cpp/include/antlr3memory.hpp
index 2aa320c..7713613 100755
--- a/runtime/Cpp/include/antlr3memory.hpp
+++ b/runtime/Cpp/include/antlr3memory.hpp
@@ -110,29 +110,29 @@ public:
{
};

-	static void* operator new (std::size_t bytes)
+	ANTLR_INLINE static void* operator new (std::size_t bytes)
{
void* p = alloc(bytes);
return p;
}
-	static void* operator new (std::size_t , void* p) { return p; }
-	static void* operator new[]( std::size_t bytes)
+	ANTLR_INLINE static void* operator new (std::size_t , void* p) { return p; }
+	ANTLR_INLINE static void* operator new[]( std::size_t bytes)
{
void* p = alloc(bytes);
return p;
}
-	static void operator delete(void* p)
+	ANTLR_INLINE static void operator delete(void* p)
{
DefaultAllocPolicy::free(p);
}
-	static void operator delete(void* , void* ) {} //placement delete
+	ANTLR_INLINE static void operator delete(void* , void* ) {} //placement delete

-	static void operator delete[](void* p)
+	ANTLR_INLINE static void operator delete[](void* p)
{
DefaultAllocPolicy::free(p);
}

-	static void* alloc( std::size_t bytes )
+	ANTLR_INLINE static void* alloc( std::size_t bytes )
{
void* p = malloc(bytes);
if( p== NULL )
@@ -140,19 +140,20 @@ public:
return p;
}

-	static void* alloc0( std::size_t bytes )
+	ANTLR_INLINE static void* alloc0( std::size_t bytes )
{
-		void* p = DefaultAllocPolicy::alloc(bytes);
-		memset(p, 0, bytes );
+		void* p = calloc(1, bytes);
+		if( p== NULL )
+			throw std::bad_alloc();
return p;
}

-	static void  free( void* p )
+	ANTLR_INLINE static void  free( void* p )
{
return ::free(p);
}

-	static void* realloc(void *ptr, size_t size)
+	ANTLR_INLINE static void* realloc(void *ptr, size_t size)
{
return ::realloc( ptr, size );
}

