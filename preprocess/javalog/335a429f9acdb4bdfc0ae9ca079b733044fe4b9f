commit 335a429f9acdb4bdfc0ae9ca079b733044fe4b9f
Author:     Alan Condit <acondit@ipns.com>
AuthorDate: Fri Apr 20 21:50:37 2012 -0700
Commit:     Alan Condit <acondit@ipns.com>
CommitDate: Fri Apr 20 21:50:37 2012 -0700

Fixed bug that caused Followsets to be constructed incorrectly.

diff --git a/runtime/ObjC/Framework/ANTLRBitSet.h b/runtime/ObjC/Framework/ANTLRBitSet.h
index 12aa00f..155022d 100644
--- a/runtime/ObjC/Framework/ANTLRBitSet.h
+++ b/runtime/ObjC/Framework/ANTLRBitSet.h
@@ -81,8 +81,8 @@
- (unsigned long long) bitMask:(NSUInteger) bitNumber;
- (BOOL) member:(NSUInteger)bitNumber;
- (BOOL) isNil;
-- (NSString *) toString;
- (NSString *) description;
+- (NSString *) toString;

#pragma mark NSCopying support

diff --git a/runtime/ObjC/Framework/ANTLRBitSet.m b/runtime/ObjC/Framework/ANTLRBitSet.m
index 170584b..46c02c6 100644
--- a/runtime/ObjC/Framework/ANTLRBitSet.m
+++ b/runtime/ObjC/Framework/ANTLRBitSet.m
@@ -143,14 +143,16 @@
{
if ((self = [super init]) != nil) {
unsigned int longNo;
+//        unsigned long long swappedBits = 0LL;
CFIndex bitIdx;
bitVector = CFBitVectorCreateMutable ( kCFAllocatorDefault, 0 );
CFBitVectorSetCount( bitVector, sizeof(unsigned long long)*8*longCount );

for (longNo = 0; longNo < longCount; longNo++) {
for (bitIdx = 0; bitIdx < (CFIndex)sizeof(unsigned long long)*8; bitIdx++) {
-				unsigned long long swappedBits = CFSwapInt64HostToBig(theBits[longNo]);
-				if (swappedBits & (1LL << bitIdx)) {
+//				swappedBits = CFSwapInt64HostToBig(theBits[longNo]);
+//				if (swappedBits & (1LL << bitIdx)) {
+				if (theBits[longNo] & (1LL << bitIdx)) {
CFBitVectorSetBitAtIndex(bitVector, bitIdx+(longNo*(sizeof(unsigned long long)*8)), 1);
}
}
@@ -272,8 +274,9 @@
return ((CFBitVectorGetCountOfBit(bitVector, CFRangeMake(0,CFBitVectorGetCount(bitVector)), 1) == 0) ? YES : NO);
}

+// debugging aid. GDB invokes this automagically
// return a string representation of the bit vector, indicating by their bitnumber which bits are set
-- (NSString *) toString
+- (NSString *) description
{
CFIndex length = CFBitVectorGetCount(bitVector);
CFIndex currBit;
@@ -292,10 +295,11 @@
return descString;
}

-// debugging aid. GDB invokes this automagically
-- (NSString *) description
+// return a string representation of the bit vector, indicating by their bitnumber which bits are set
+- (NSString *) toString
{
-	return [self toString];
+
+	return [self description];
}

// NSCopying
diff --git a/runtime/ObjC/Framework/test/runtime/sets/ANTLRBitSetTest.h b/runtime/ObjC/Framework/test/runtime/sets/ANTLRBitSetTest.h
index debf650..c77a210 100644
--- a/runtime/ObjC/Framework/test/runtime/sets/ANTLRBitSetTest.h
+++ b/runtime/ObjC/Framework/test/runtime/sets/ANTLRBitSetTest.h
@@ -19,6 +19,7 @@
-(void) testRemove;
-(void) testCopyBitSet;
-(void) testOr;
+-(void) testOrInPlace;
-(void) testDescription;

@end
diff --git a/runtime/ObjC/Framework/test/runtime/sets/ANTLRBitSetTest.m b/runtime/ObjC/Framework/test/runtime/sets/ANTLRBitSetTest.m
index de3555a..feec9e9 100644
--- a/runtime/ObjC/Framework/test/runtime/sets/ANTLRBitSetTest.m
+++ b/runtime/ObjC/Framework/test/runtime/sets/ANTLRBitSetTest.m
@@ -97,6 +97,26 @@
STAssertTrue([c size] == [otherBitSet size], @"c should be the same as otherBitSet");
}

+-(void) testOrInPlace
+{
+
+	ANTLRBitSet *bitSet = [ANTLRBitSet newBitSet];
+	[bitSet add:1];
+	[bitSet add:2];
+	[bitSet add:16];
+	CFIndex actual = (CFIndex)[bitSet numBits];
+	CFIndex expected = 3;
+	STAssertEquals(actual, expected, @"There should be three bits set in bitvector. But I have %d", actual);
+	ANTLRBitSet *followSet = [ANTLRBitSet newBitSet];
+    [followSet orInPlace:bitSet];
+	actual = (CFIndex)[followSet numBits];
+	expected = 3;
+    NSLog( @"%@\n", [followSet description] );
+	STAssertEquals(actual, expected, @"There should be three bits set in bitvector. But I have %d", actual);
+	[bitSet release];
+	[followSet release];
+}
+
-(void) testDescription
{
ANTLRBitSet *bitSet = [ANTLRBitSet newBitSet];

