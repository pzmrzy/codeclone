commit efeb9f63a09ff590189f071eda6da920fe1e3a73
Author:     Sanne Grinovero <sanne@hibernate.org>
AuthorDate: Sun Feb 19 13:44:33 2012 +0000
Commit:     Sanne Grinovero <sanne@hibernate.org>
CommitDate: Wed Jul 11 16:13:20 2012 +0100

Show the input as part of the description of failing tests

diff --git a/gunit/src/main/java/org/antlr/gunit/AbstractTest.java b/gunit/src/main/java/org/antlr/gunit/AbstractTest.java
index 158bf04..9d2c8ec 100644
--- a/gunit/src/main/java/org/antlr/gunit/AbstractTest.java
+++ b/gunit/src/main/java/org/antlr/gunit/AbstractTest.java
@@ -63,7 +63,7 @@ public abstract class AbstractTest implements ITestCase {
public String getTestedRuleName() { return this.testedRuleName; }
public int getTestCaseIndex() { return this.testCaseIndex; }

-	public void setHeader(String rule, String lexicalRule, String treeRule, int numOfTest, int line) {
+	public void setHeader(String rule, String lexicalRule, String treeRule, int numOfTest, int line, String input) {
StringBuffer buf = new StringBuffer();
buf.append("test" + numOfTest + " (");
if ( treeRule!=null ) {
@@ -73,6 +73,9 @@ public abstract class AbstractTest implements ITestCase {
buf.append(lexicalRule + ", line"+line+")" + " - ");
}
else buf.append(rule + ", line"+line+")" + " - ");
+		buf.append( "\"" );
+		buf.append( input );
+		buf.append( "\"" );
this.header = buf.toString();
}
public void setActual(String actual) { this.actual = actual; }
diff --git a/gunit/src/main/java/org/antlr/gunit/gUnitExecutor.java b/gunit/src/main/java/org/antlr/gunit/gUnitExecutor.java
index a69f731..72d8ea4 100644
--- a/gunit/src/main/java/org/antlr/gunit/gUnitExecutor.java
+++ b/gunit/src/main/java/org/antlr/gunit/gUnitExecutor.java
@@ -188,7 +188,7 @@ public class gUnitExecutor implements ITestSuite {
//System.out.println("; Expecting " + test.getExpected() + "; Success?: " + test.getExpected().equals(test.getResult(result)));
} catch ( InvalidInputException e) {
numOfInvalidInput++;
-                    test.setHeader(rule, lexicalRule, treeRule, numOfTest, input.line);
+					test.setHeader(rule, lexicalRule, treeRule, numOfTest, input.line, input.input);
test.setActual(input.input);
invalids.add(test);
continue;
@@ -200,7 +200,7 @@ public class gUnitExecutor implements ITestSuite {

if (actual == null) {
numOfFailure++;
-                    test.setHeader(rule, lexicalRule, treeRule, numOfTest, input.line);
+					test.setHeader(rule, lexicalRule, treeRule, numOfTest, input.line, input.input);
test.setActual("null");
failures.add(test);
onFail(test);
@@ -213,14 +213,14 @@ public class gUnitExecutor implements ITestSuite {
// TODO: something with ACTIONS - at least create action test type and throw exception.
else if ( ts.testSuites.get(input).getType()==gUnitParser.ACTION ) {	// expected Token: ACTION
numOfFailure++;
-                    test.setHeader(rule, lexicalRule, treeRule, numOfTest, input.line);
+					test.setHeader(rule, lexicalRule, treeRule, numOfTest, input.line, input.input);
test.setActual("\t"+"{ACTION} is not supported in the grammarInfo yet...");
failures.add(test);
onFail(test);
}
else {
numOfFailure++;
-                    test.setHeader(rule, lexicalRule, treeRule, numOfTest, input.line);
+					test.setHeader(rule, lexicalRule, treeRule, numOfTest, input.line, input.input);
failures.add(test);
onFail(test);
}

