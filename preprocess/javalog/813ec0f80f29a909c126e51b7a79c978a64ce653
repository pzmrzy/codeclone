commit 813ec0f80f29a909c126e51b7a79c978a64ce653
Author:     Sam Harwell <sam@tunnelvisionlabs.com>
AuthorDate: Wed Dec 12 01:25:53 2012 -0600
Commit:     Sam Harwell <sam@tunnelvisionlabs.com>
CommitDate: Wed Dec 12 01:41:01 2012 -0600

Fix escape sequence in templates, update unit tests to match results from generic Stack instances

diff --git a/tool/src/main/resources/org/antlr/codegen/templates/Java/Java.stg b/tool/src/main/resources/org/antlr/codegen/templates/Java/Java.stg
index 854571d..e75ed81 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/Java/Java.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/Java/Java.stg
@@ -1195,7 +1195,7 @@ globalAttributeScope(scope) ::= <<
protected static class <scope.name>_scope {
<scope.attributes:{it |<it.decl>;}; separator="\n">
}
-protected Stack\<<scope.name>_scope\> <scope.name>_stack = new Stack\<<scope.name>_scope\>();
+protected Stack\<<scope.name>_scope> <scope.name>_stack = new Stack\<<scope.name>_scope>();
<endif>
>>

@@ -1204,7 +1204,7 @@ ruleAttributeScope(scope) ::= <<
protected static class <scope.name>_scope {
<scope.attributes:{it |<it.decl>;}; separator="\n">
}
-protected Stack\<<scope.name>_scope\> <scope.name>_stack = new Stack\<<scope.name>_scope\>();
+protected Stack\<<scope.name>_scope> <scope.name>_stack = new Stack\<<scope.name>_scope>();
<endif>
>>

diff --git a/tool/src/test/java/org/antlr/test/TestAttributes.java b/tool/src/test/java/org/antlr/test/TestAttributes.java
index eccb5e6..00eb996 100644
--- a/tool/src/test/java/org/antlr/test/TestAttributes.java
+++ b/tool/src/test/java/org/antlr/test/TestAttributes.java
@@ -921,7 +921,7 @@ public class TestAttributes extends BaseTest {

@Test public void testBasicGlobalScope() throws Exception {
String action = "$Symbols::names.add($id.text);";
-		String expecting = "((Symbols_scope)Symbols_stack.peek()).names.add((id!=null?id.getText():null));";
+		String expecting = "Symbols_stack.peek().names.add((id!=null?id.getText():null));";

ErrorQueue equeue = new ErrorQueue();
ErrorManager.setErrorListener(equeue);
@@ -975,7 +975,7 @@ public class TestAttributes extends BaseTest {
@Test public void testIndexedGlobalScope() throws Exception {
String action = "$Symbols[-1]::names.add($id.text);";
String expecting =
-			"((Symbols_scope)Symbols_stack.elementAt(Symbols_stack.size()-1-1)).names.add((id!=null?id.getText():null));";
+			"Symbols_stack.elementAt(Symbols_stack.size()-1-1).names.add((id!=null?id.getText():null));";

ErrorQueue equeue = new ErrorQueue();
ErrorManager.setErrorListener(equeue);
@@ -1003,7 +1003,7 @@ public class TestAttributes extends BaseTest {
@Test public void test0IndexedGlobalScope() throws Exception {
String action = "$Symbols[0]::names.add($id.text);";
String expecting =
-			"((Symbols_scope)Symbols_stack.elementAt(0)).names.add((id!=null?id.getText():null));";
+			"Symbols_stack.elementAt(0).names.add((id!=null?id.getText():null));";

ErrorQueue equeue = new ErrorQueue();
ErrorManager.setErrorListener(equeue);
@@ -1031,7 +1031,7 @@ public class TestAttributes extends BaseTest {
@Test public void testAbsoluteIndexedGlobalScope() throws Exception {
String action = "$Symbols[3]::names.add($id.text);";
String expecting =
-			"((Symbols_scope)Symbols_stack.elementAt(3)).names.add((id!=null?id.getText():null));";
+			"Symbols_stack.elementAt(3).names.add((id!=null?id.getText():null));";

ErrorQueue equeue = new ErrorQueue();
ErrorManager.setErrorListener(equeue);
@@ -1058,7 +1058,7 @@ public class TestAttributes extends BaseTest {

@Test public void testScopeAndAttributeWithUnderscore() throws Exception {
String action = "$foo_bar::a_b;";
-		String expecting = "((foo_bar_scope)foo_bar_stack.peek()).a_b;";
+		String expecting = "foo_bar_stack.peek().a_b;";

ErrorQueue equeue = new ErrorQueue();
ErrorManager.setErrorListener(equeue);
@@ -1084,7 +1084,7 @@ public class TestAttributes extends BaseTest {

@Test public void testSharedGlobalScope() throws Exception {
String action = "$Symbols::x;";
-		String expecting = "((Symbols_scope)Symbols_stack.peek()).x;";
+		String expecting = "Symbols_stack.peek().x;";

ErrorQueue equeue = new ErrorQueue();
ErrorManager.setErrorListener(equeue);
@@ -1114,7 +1114,7 @@ public class TestAttributes extends BaseTest {

@Test public void testGlobalScopeOutsideRule() throws Exception {
String action = "public void foo() {$Symbols::names.add('foo');}";
-		String expecting = "public void foo() {((Symbols_scope)Symbols_stack.peek()).names.add('foo');}";
+		String expecting = "public void foo() {Symbols_stack.peek().names.add('foo');}";

ErrorQueue equeue = new ErrorQueue();
ErrorManager.setErrorListener(equeue);
@@ -1141,7 +1141,7 @@ public class TestAttributes extends BaseTest {

@Test public void testRuleScopeOutsideRule() throws Exception {
String action = "public void foo() {$a::name;}";
-		String expecting = "public void foo() {((a_scope)a_stack.peek()).name;}";
+		String expecting = "public void foo() {a_stack.peek().name;}";

ErrorQueue equeue = new ErrorQueue();
ErrorManager.setErrorListener(equeue);
@@ -1166,7 +1166,7 @@ public class TestAttributes extends BaseTest {

@Test public void testBasicRuleScope() throws Exception {
String action = "$a::n;";
-		String expecting = "((a_scope)a_stack.peek()).n;";
+		String expecting = "a_stack.peek().n;";

ErrorQueue equeue = new ErrorQueue();
ErrorManager.setErrorListener(equeue);
@@ -1244,7 +1244,7 @@ public class TestAttributes extends BaseTest {

@Test public void testDynamicRuleScopeRefInSubrule() throws Exception {
String action = "$a::n;";
-		String expecting = "((a_scope)a_stack.peek()).n;";
+		String expecting = "a_stack.peek().n;";

ErrorQueue equeue = new ErrorQueue();
ErrorManager.setErrorListener(equeue);
@@ -1300,7 +1300,7 @@ public class TestAttributes extends BaseTest {

@Test public void testRuleScopeFromAnotherRule() throws Exception {
String action = "$a::n;"; // must be qualified
-		String expecting = "((a_scope)a_stack.peek()).n;";
+		String expecting = "a_stack.peek().n;";

ErrorQueue equeue = new ErrorQueue();
ErrorManager.setErrorListener(equeue);
@@ -1537,7 +1537,7 @@ public class TestAttributes extends BaseTest {

@Test public void testDynamicScopeRefOkEvenThoughRuleRefExists() throws Exception {
String action = "$b::n;";
-		String expecting = "((b_scope)b_stack.peek()).n;";
+		String expecting = "b_stack.peek().n;";

ErrorQueue equeue = new ErrorQueue();
ErrorManager.setErrorListener(equeue);
@@ -2684,7 +2684,7 @@ public class TestAttributes extends BaseTest {

@Test public void testRuleRefWithDynamicScope() throws Exception {
String action = "$field::x = $field.st;";
-		String expecting = "((field_scope)field_stack.peek()).x = retval.st;";
+		String expecting = "field_stack.peek().x = retval.st;";

ErrorQueue equeue = new ErrorQueue();
ErrorManager.setErrorListener(equeue);
@@ -2934,7 +2934,7 @@ public class TestAttributes extends BaseTest {

@Test public void testDoNotTranslateScopeAttributeCompare() throws Exception {
String action = "if ($rule::foo == \"foo\" || 1) { System.out.println(\"ouch\"); }";
-		String expecting = "if (((rule_scope)rule_stack.peek()).foo == \"foo\" || 1) { System.out.println(\"ouch\"); }";
+		String expecting = "if (rule_stack.peek().foo == \"foo\" || 1) { System.out.println(\"ouch\"); }";
ErrorQueue equeue = new ErrorQueue();
ErrorManager.setErrorListener(equeue);
Grammar g = new Grammar(
@@ -3041,7 +3041,7 @@ public class TestAttributes extends BaseTest {

@Test public void testTypeOfGuardedAttributeRefIsCorrect() throws Exception {
String action = "int x = $b::n;";
-		String expecting = "int x = ((b_scope)b_stack.peek()).n;";
+		String expecting = "int x = b_stack.peek().n;";

ErrorQueue equeue = new ErrorQueue();
ErrorManager.setErrorListener(equeue);

