commit 293aa161049245e2311e04c081900314df94ef4a
Author:     parrt <parrt@antlr.org>
AuthorDate: Wed Jun 8 15:31:36 2011 -0800
Commit:     parrt <parrt@antlr.org>
CommitDate: Wed Jun 8 15:31:36 2011 -0800

added inContext back in

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8607]

diff --git a/runtime/Java/src/main/java/org/antlr/runtime/tree/TreeParser.java b/runtime/Java/src/main/java/org/antlr/runtime/tree/TreeParser.java
index e568bc9..c40f81f 100644
--- a/runtime/Java/src/main/java/org/antlr/runtime/tree/TreeParser.java
+++ b/runtime/Java/src/main/java/org/antlr/runtime/tree/TreeParser.java
@@ -29,8 +29,8 @@ package org.antlr.runtime.tree;

import org.antlr.runtime.*;

-import java.util.regex.Pattern;
import java.util.regex.Matcher;
+import java.util.regex.Pattern;

/** A parser for a stream of tree nodes.  "tree grammars" result in a subclass
*  of this.  All the error reporting and recovery is shared with Parser via
@@ -159,6 +159,75 @@ public class TreeParser extends BaseRecognizer {
return super.getErrorMessage(e, tokenNames);
}

+	/** Check if current node in input has a context.  Context means sequence
+	 *  of nodes towards root of tree.  For example, you might say context
+	 *  is "MULT" which means my parent must be MULT.  "CLASS VARDEF" says
+	 *  current node must be child of a VARDEF and whose parent is a CLASS node.
+	 *  You can use "..." to mean zero-or-more nodes.  "METHOD ... VARDEF"
+	 *  means my parent is VARDEF and somewhere above that is a METHOD node.
+	 *  The first node in the context is not necessarily the root.  The context
+	 *  matcher stops matching and returns true when it runs out of context.
+	 *  There is no way to force the first node to be the root.
+	 */
+	public boolean inContext(String context) {
+		return inContext(input.getTreeAdaptor(), getTokenNames(), input.LT(1), context);
+	}
+
+	/** The worker for inContext.  It's static and full of parameters for
+	 *  testing purposes.
+	 */
+	public static boolean inContext(TreeAdaptor adaptor,
+									String[] tokenNames,
+									Object t,
+									String context)
+	{
+		Matcher dotdotMatcher = dotdotPattern.matcher(context);
+		Matcher doubleEtcMatcher = doubleEtcPattern.matcher(context);
+		if ( dotdotMatcher.find() ) { // don't allow "..", must be "..."
+			throw new IllegalArgumentException("invalid syntax: ..");
+		}
+		if ( doubleEtcMatcher.find() ) { // don't allow double "..."
+			throw new IllegalArgumentException("invalid syntax: ... ...");
+		}
+		context = context.replaceAll("\\.\\.\\.", " ... "); // ensure spaces around ...
+		context = context.trim();
+		String[] nodes = context.split("\\s+");
+		int ni = nodes.length-1;
+		t = adaptor.getParent(t);
+		while ( ni>=0 && t!=null ) {
+			if ( nodes[ni].equals("...") ) {
+				// walk upwards until we see nodes[ni-1] then continue walking
+				if ( ni==0 ) return true; // ... at start is no-op
+				String goal = nodes[ni-1];
+				Object ancestor = getAncestor(adaptor, tokenNames, t, goal);
+				if ( ancestor==null ) return false;
+				t = ancestor;
+				ni--;
+			}
+			String name = tokenNames[adaptor.getType(t)];
+			if ( !name.equals(nodes[ni]) ) {
+				//System.err.println("not matched: "+nodes[ni]+" at "+t);
+				return false;
+			}
+			// advance to parent and to previous element in context node list
+			ni--;
+			t = adaptor.getParent(t);
+		}
+
+		if ( t==null && ni>=0 ) return false; // at root but more nodes to match
+		return true;
+	}
+
+	/** Helper for static inContext */
+	protected static Object getAncestor(TreeAdaptor adaptor, String[] tokenNames, Object t, String goal) {
+		while ( t!=null ) {
+			String name = tokenNames[adaptor.getType(t)];
+			if ( name.equals(goal) ) return t;
+			t = adaptor.getParent(t);
+		}
+		return null;
+	}
+
public void traceIn(String ruleName, int ruleIndex)  {
super.traceIn(ruleName, ruleIndex, input.LT(1));
}
diff --git a/tool/CHANGES.txt b/tool/CHANGES.txt
index 27cb1b0..ad81900 100644
--- a/tool/CHANGES.txt
+++ b/tool/CHANGES.txt
@@ -7,6 +7,10 @@ University of San Francisco

CHANGES

+June 8, 2011
+
+* Added inContext(String context) back into TreeParser.
+
April 21, 2011

* Updated for ST v4.0.2 (setting iterateAcrossValues = true as instance var)

