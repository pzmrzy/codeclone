commit 3fccca155e29b6003403efc5a2ff0602edc8a360
Author:     acondit <acondit@parrt.spork>
AuthorDate: Wed Apr 13 19:58:04 2011 -0800
Commit:     acondit <acondit@parrt.spork>
CommitDate: Wed Apr 13 19:58:04 2011 -0800

More clean up code for LLVM2.0 compiler.

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8214]

diff --git a/runtime/ObjC/Framework/ANTLRBaseTree.h b/runtime/ObjC/Framework/ANTLRBaseTree.h
index 1cee234..3514bbe 100755
--- a/runtime/ObjC/Framework/ANTLRBaseTree.h
+++ b/runtime/ObjC/Framework/ANTLRBaseTree.h
@@ -185,7 +185,7 @@
@property (retain) id<ANTLRBaseTree> parent;
@property (assign) NSInteger childIndex;

-@property (retain, getter=getChildren, setter=setChildren:) NSMutableArray *children;
+@property (retain) NSMutableArray *children;
@property (retain) NSException *anException;

@end
diff --git a/runtime/ObjC/Framework/ANTLRCommonTree.h b/runtime/ObjC/Framework/ANTLRCommonTree.h
index 356da1d..3598714 100644
--- a/runtime/ObjC/Framework/ANTLRCommonTree.h
+++ b/runtime/ObjC/Framework/ANTLRCommonTree.h
@@ -31,13 +31,6 @@
@interface ANTLRCommonTree : ANTLRBaseTree <ANTLRTree> {
}

-/*
-@property (retain, getter=getANTLRCommonToken, setter=setANTLRCommonToken:) ANTLRCommonToken *token;
-@property (assign, getter=getTokenStartIndex, setter=setTokenStartIndex:) NSInteger startIndex;
-@property (assign, getter=getTokenStopIndex, setter=setTokenStopIndex:) NSInteger stopIndex;
-@property (retain, getter=getParent, setter=setParent:) id<ANTLRBaseTree> parentparent;
-@property (assign, getter=getChildIndex, setter=setChildIndex:) NSInteger childIndex;
-*/
+ (ANTLRCommonTree *) invalidNode;
+ (ANTLRCommonTree *) newTree;
+ (ANTLRCommonTree *) newTreeWithTree:(ANTLRCommonTree *)aTree;
@@ -81,4 +74,12 @@
- (NSInteger) getTokenStopIndex;
- (void) setTokenStopIndex: (NSInteger) aStopIndex;

+/*
+ @property (retain, getter=getANTLRCommonToken, setter=setANTLRCommonToken:) ANTLRCommonToken *token;
+ @property (assign, getter=getTokenStartIndex, setter=setTokenStartIndex:) NSInteger startIndex;
+ @property (assign, getter=getTokenStopIndex, setter=setTokenStopIndex:) NSInteger stopIndex;
+ @property (retain, getter=getParent, setter=setParent:) id<ANTLRBaseTree> parentparent;
+ @property (assign, getter=getChildIndex, setter=setChildIndex:) NSInteger childIndex;
+ */
+
@end
diff --git a/runtime/ObjC/Framework/ANTLRLexerRuleReturnScope.m b/runtime/ObjC/Framework/ANTLRLexerRuleReturnScope.m
index cd87166..298dde7 100644
--- a/runtime/ObjC/Framework/ANTLRLexerRuleReturnScope.m
+++ b/runtime/ObjC/Framework/ANTLRLexerRuleReturnScope.m
@@ -29,6 +29,8 @@

@implementation ANTLRLexerRuleReturnScope

+@synthesize startToken;
+
//----------------------------------------------------------
//  start
//----------------------------------------------------------
diff --git a/runtime/ObjC/Framework/ANTLRRewriteRuleTokenStream.m b/runtime/ObjC/Framework/ANTLRRewriteRuleTokenStream.m
index 20dfdbc..f31f961 100644
--- a/runtime/ObjC/Framework/ANTLRRewriteRuleTokenStream.m
+++ b/runtime/ObjC/Framework/ANTLRRewriteRuleTokenStream.m
@@ -104,7 +104,7 @@
- (id<ANTLRBaseTree>) nextNode
{
id<ANTLRToken> t = [self _next];
-    return [treeAdaptor createTree:t];
+    return [treeAdaptor create:t];
}

- (id) nextToken
diff --git a/runtime/ObjC/Framework/ANTLRTreeAdaptor.h b/runtime/ObjC/Framework/ANTLRTreeAdaptor.h
index 41af6da..a2bab1f 100644
--- a/runtime/ObjC/Framework/ANTLRTreeAdaptor.h
+++ b/runtime/ObjC/Framework/ANTLRTreeAdaptor.h
@@ -103,7 +103,7 @@

- (NSUInteger) getUniqueID:(id<ANTLRBaseTree>)aNode;

-- (id<ANTLRBaseTree>) createTreeFromToken:(id<ANTLRToken>)payload;
+- (id<ANTLRBaseTree>) create:(id<ANTLRToken>)payload;
- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType FromToken:(id<ANTLRToken>)fromToken;
- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType FromToken:(id<ANTLRToken>)fromToken Text:(NSString *)text;
- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType Text:(NSString *)text;
@@ -155,6 +155,7 @@

@end

+#ifdef DONTUSENOMO
@interface ANTLRTreeAdaptor : NSObject {

}
@@ -288,3 +289,4 @@
- (void) replaceChildren:(id<ANTLRBaseTree>)parent From:(NSInteger)startChildIndex To:(NSInteger)stopChildIndex With:(id<ANTLRBaseTree>)t;

@end
+#endif
diff --git a/runtime/ObjC/Framework/ANTLRTreeAdaptor.m b/runtime/ObjC/Framework/ANTLRTreeAdaptor.m
index d409f25..ce64b13 100644
--- a/runtime/ObjC/Framework/ANTLRTreeAdaptor.m
+++ b/runtime/ObjC/Framework/ANTLRTreeAdaptor.m
@@ -66,15 +66,6 @@
return nil;
}

-- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType
-{
-	id<ANTLRToken> newToken = [self createToken:tokenType text:nil];
-
-	id<ANTLRBaseTree> newTree = [self create:newToken];
-	[newToken release];
-	return newTree;
-}
-
/** Create a new node derived from a token, with a new token type.
*  This is invoked from an imaginary node ref on right side of a
*  rewrite rule as IMAG[$tokenLabel].
@@ -107,23 +98,6 @@
return newTree;
}

-/** Same as create(tokenType,fromToken) except set the text too.
- *  This is invoked from an imaginary node ref on right side of a
- *  rewrite rule as IMAG[$tokenLabel, "IMAG"].
- *
- *  This should invoke createToken(Token).
- */
-- (id<ANTLRBaseTree>) createTree:(NSInteger)tokenType text:(NSString *)tokenText
-{
-	id<ANTLRToken> newToken = [self createToken:tokenType text:tokenText];
-	[newToken setType:tokenType];
-	[newToken setText:tokenText];
-
-	id<ANTLRBaseTree> newTree = [self create:newToken];
-	[newToken release];
-	return newTree;
-}
-
/** Create a new node derived from a token, with a new token type.
*  This is invoked from an imaginary node ref on right side of a
*  rewrite rule as IMAG["IMAG"].
diff --git a/runtime/ObjC/Framework/ANTLRTreeRuleReturnScope.m b/runtime/ObjC/Framework/ANTLRTreeRuleReturnScope.m
index 5e07314..9d90ef7 100644
--- a/runtime/ObjC/Framework/ANTLRTreeRuleReturnScope.m
+++ b/runtime/ObjC/Framework/ANTLRTreeRuleReturnScope.m
@@ -40,9 +40,9 @@
return startNode;
}

-- (void)setStart:(ANTLRCommonTree *)aStartNode
+- (void)setStart:(ANTLRCommonTree *)aStart
{
-    startNode = aStartNode;
+    startNode = aStart;
}

// create a copy, including the text if available

