commit 7c6d0f96328541a7eca4ab81a04ba6281db61c1b
Author:     sharwell <sharwell@pixelminegames.com>
AuthorDate: Thu Aug 4 07:50:17 2011 -0800
Commit:     sharwell <sharwell@pixelminegames.com>
CommitDate: Thu Aug 4 07:50:17 2011 -0800

(C# 3) Add the @namespace{...} specifier to several test grammars

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8980]

diff --git a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/DebugGrammar.g3 b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/DebugGrammar.g3
index 36b1884..6edb6d3 100644
--- a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/DebugGrammar.g3
+++ b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/DebugGrammar.g3
@@ -1,10 +1,10 @@
/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -46,6 +46,9 @@ tokens
CALL;
}

+@lexer::namespace{Antlr3.Runtime.Test.BuildOptions}
+@parser::namespace{Antlr3.Runtime.Test.BuildOptions}
+
// START:stat
prog: ( stat )*
;
diff --git a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/DebugGrammarParserHelper.cs b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/DebugGrammarParserHelper.cs
index 95beb20..638100e 100644
--- a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/DebugGrammarParserHelper.cs
+++ b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/DebugGrammarParserHelper.cs
@@ -1,10 +1,10 @@
/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -30,11 +30,14 @@
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

-using System.Collections.Generic;
-using Antlr.Runtime.Tree;
-
-partial class DebugGrammarParser
+namespace Antlr3.Runtime.Test.BuildOptions
{
-    /** List of function definitions. Must point at the FUNC nodes. */
-    List<CommonTree> functionDefinitions = new List<CommonTree>();
+    using System.Collections.Generic;
+    using Antlr.Runtime.Tree;
+
+    partial class DebugGrammarParser
+    {
+        /** List of function definitions. Must point at the FUNC nodes. */
+        List<CommonTree> functionDefinitions = new List<CommonTree>();
+    }
}
diff --git a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/DebugTreeGrammar.g3 b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/DebugTreeGrammar.g3
index b16a73e..c9bbdf4 100644
--- a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/DebugTreeGrammar.g3
+++ b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/DebugTreeGrammar.g3
@@ -1,10 +1,10 @@
/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -49,6 +49,8 @@ using Console = System.Console;
}
// END:members

+@namespace{Antlr3.Runtime.Test.BuildOptions}
+
// START:rules
prog:   stat*
;
diff --git a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/DebugTreeGrammarHelper.cs b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/DebugTreeGrammarHelper.cs
index af83214..51c95fe 100644
--- a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/DebugTreeGrammarHelper.cs
+++ b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/DebugTreeGrammarHelper.cs
@@ -1,10 +1,10 @@
/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -30,87 +30,90 @@
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

-using System.Collections.Generic;
-using Antlr.Runtime.Tree;
+namespace Antlr3.Runtime.Test.BuildOptions
+{
+    using System.Collections.Generic;
+    using Antlr.Runtime.Tree;

-using BigInteger = java.math.BigInteger;
-using Console = System.Console;
+    using BigInteger = java.math.BigInteger;
+    using Console = System.Console;

-partial class DebugTreeGrammar
-{
-    /** Points to functions tracked by tree builder. */
-    private List<CommonTree> functionDefinitions;
+    partial class DebugTreeGrammar
+    {
+        /** Points to functions tracked by tree builder. */
+        private List<CommonTree> functionDefinitions;

-    /** Remember local variables. Currently, this is only the function parameter.
-     */
-    private readonly IDictionary<string, BigInteger> localMemory = new Dictionary<string, BigInteger>();
+        /** Remember local variables. Currently, this is only the function parameter.
+         */
+        private readonly IDictionary<string, BigInteger> localMemory = new Dictionary<string, BigInteger>();

-    /** Remember global variables set by =. */
-    private IDictionary<string, BigInteger> globalMemory = new Dictionary<string, BigInteger>();
+        /** Remember global variables set by =. */
+        private IDictionary<string, BigInteger> globalMemory = new Dictionary<string, BigInteger>();

-    /** Set up an evaluator with a node stream; and a set of function definition ASTs. */
-    public DebugTreeGrammar( CommonTreeNodeStream nodes, List<CommonTree> functionDefinitions )
-        : this( nodes )
-    {
-        this.functionDefinitions = functionDefinitions;
-    }
+        /** Set up an evaluator with a node stream; and a set of function definition ASTs. */
+        public DebugTreeGrammar(CommonTreeNodeStream nodes, List<CommonTree> functionDefinitions)
+            : this(nodes)
+        {
+            this.functionDefinitions = functionDefinitions;
+        }

-    /** Set up a local evaluator for a nested function call. The evaluator gets the definition
-     *  tree of the function; the set of all defined functions (to find locally called ones); a
-     *  pointer to the global variable memory; and the value of the function parameter to be
-     *  added to the local memory.
-     */
-    private DebugTreeGrammar( CommonTree function,
-                 List<CommonTree> functionDefinitions,
-                 IDictionary<string, BigInteger> globalMemory,
-                 BigInteger paramValue )
-        // Expected tree for function: ^(FUNC ID ( INT | ID ) expr)
-        : this( new CommonTreeNodeStream( function.GetChild( 2 ) ), functionDefinitions )
-    {
-        this.globalMemory = globalMemory;
-        localMemory[function.GetChild( 1 ).Text] = paramValue;
-    }
+        /** Set up a local evaluator for a nested function call. The evaluator gets the definition
+         *  tree of the function; the set of all defined functions (to find locally called ones); a
+         *  pointer to the global variable memory; and the value of the function parameter to be
+         *  added to the local memory.
+         */
+        private DebugTreeGrammar(CommonTree function,
+                     List<CommonTree> functionDefinitions,
+                     IDictionary<string, BigInteger> globalMemory,
+                     BigInteger paramValue)
+            // Expected tree for function: ^(FUNC ID ( INT | ID ) expr)
+            : this(new CommonTreeNodeStream(function.GetChild(2)), functionDefinitions)
+        {
+            this.globalMemory = globalMemory;
+            localMemory[function.GetChild(1).Text] = paramValue;
+        }

-    /** Find matching function definition for a function name and parameter
-     *  value. The first definition is returned where (a) the name matches
-     *  and (b) the formal parameter agrees if it is defined as constant.
-     */
-    private CommonTree findFunction( string name, BigInteger paramValue )
-    {
-        foreach ( CommonTree f in functionDefinitions )
+        /** Find matching function definition for a function name and parameter
+         *  value. The first definition is returned where (a) the name matches
+         *  and (b) the formal parameter agrees if it is defined as constant.
+         */
+        private CommonTree findFunction(string name, BigInteger paramValue)
{
-            // Expected tree for f: ^(FUNC ID (ID | INT) expr)
-            if ( f.GetChild( 0 ).Text.Equals( name ) )
+            foreach (CommonTree f in functionDefinitions)
{
-                // Check whether parameter matches
-                CommonTree formalPar = (CommonTree)f.GetChild( 1 );
-                if ( formalPar.Token.Type == INT
-                    && !new BigInteger( formalPar.Token.Text ).Equals( paramValue ) )
+                // Expected tree for f: ^(FUNC ID (ID | INT) expr)
+                if (f.GetChild(0).Text.Equals(name))
{
-                    // Constant in formalPar list does not match actual value -> no match.
-                    continue;
+                    // Check whether parameter matches
+                    CommonTree formalPar = (CommonTree)f.GetChild(1);
+                    if (formalPar.Token.Type == INT
+                        && !new BigInteger(formalPar.Token.Text).Equals(paramValue))
+                    {
+                        // Constant in formalPar list does not match actual value -> no match.
+                        continue;
+                    }
+                    // Parameter (value for INT formal arg) as well as fct name agrees!
+                    return f;
}
-                // Parameter (value for INT formal arg) as well as fct name agrees!
-                return f;
}
+            return null;
}
-        return null;
-    }

-    /** Get value of name up call stack. */
-    internal BigInteger getValue( string name )
-    {
-        BigInteger value;
-        if ( localMemory.TryGetValue( name, out value ) && value != null )
-        {
-            return value;
-        }
-        if ( globalMemory.TryGetValue( name, out value ) && value != null )
+        /** Get value of name up call stack. */
+        internal BigInteger getValue(string name)
{
-            return value;
+            BigInteger value;
+            if (localMemory.TryGetValue(name, out value) && value != null)
+            {
+                return value;
+            }
+            if (globalMemory.TryGetValue(name, out value) && value != null)
+            {
+                return value;
+            }
+            // not found in local memory or global memory
+            Console.Error.WriteLine("undefined variable " + name);
+            return new BigInteger("0");
}
-        // not found in local memory or global memory
-        Console.Error.WriteLine( "undefined variable " + name );
-        return new BigInteger( "0" );
}
}
diff --git a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/ProfileGrammar.g3 b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/ProfileGrammar.g3
index 5f8de16..9230134 100644
--- a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/ProfileGrammar.g3
+++ b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/ProfileGrammar.g3
@@ -1,10 +1,10 @@
/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -46,6 +46,9 @@ tokens
CALL;
}

+@lexer::namespace{Antlr3.Runtime.Test.BuildOptions}
+@parser::namespace{Antlr3.Runtime.Test.BuildOptions}
+
// START:stat
prog: ( stat )*
;
diff --git a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/ProfileGrammarParserHelper.cs b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/ProfileGrammarParserHelper.cs
index ddd7533..205a088 100644
--- a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/ProfileGrammarParserHelper.cs
+++ b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/ProfileGrammarParserHelper.cs
@@ -1,10 +1,10 @@
/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -30,11 +30,14 @@
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

-using System.Collections.Generic;
-using Antlr.Runtime.Tree;
-
-partial class ProfileGrammarParser
+namespace Antlr3.Runtime.Test.BuildOptions
{
-    /** List of function definitions. Must point at the FUNC nodes. */
-    List<CommonTree> functionDefinitions = new List<CommonTree>();
+    using System.Collections.Generic;
+    using Antlr.Runtime.Tree;
+
+    partial class ProfileGrammarParser
+    {
+        /** List of function definitions. Must point at the FUNC nodes. */
+        List<CommonTree> functionDefinitions = new List<CommonTree>();
+    }
}
diff --git a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/ProfileTreeGrammar.g3 b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/ProfileTreeGrammar.g3
index f6786db..5bf107b 100644
--- a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/ProfileTreeGrammar.g3
+++ b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/ProfileTreeGrammar.g3
@@ -1,10 +1,10 @@
/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -49,6 +49,8 @@ using Console = System.Console;
}
// END:members

+@namespace{Antlr3.Runtime.Test.BuildOptions}
+
// START:rules
prog:   stat*
;
diff --git a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/ProfileTreeGrammarHelper.cs b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/ProfileTreeGrammarHelper.cs
index 47cc8a8..06d678a 100644
--- a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/ProfileTreeGrammarHelper.cs
+++ b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/BuildOptions/ProfileTreeGrammarHelper.cs
@@ -1,10 +1,10 @@
/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -30,87 +30,90 @@
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

-using System.Collections.Generic;
-using Antlr.Runtime.Tree;
+namespace Antlr3.Runtime.Test.BuildOptions
+{
+    using System.Collections.Generic;
+    using Antlr.Runtime.Tree;

-using BigInteger = java.math.BigInteger;
-using Console = System.Console;
+    using BigInteger = java.math.BigInteger;
+    using Console = System.Console;

-partial class ProfileTreeGrammar
-{
-    /** Points to functions tracked by tree builder. */
-    private List<CommonTree> functionDefinitions;
+    partial class ProfileTreeGrammar
+    {
+        /** Points to functions tracked by tree builder. */
+        private List<CommonTree> functionDefinitions;

-    /** Remember local variables. Currently, this is only the function parameter.
-     */
-    private readonly IDictionary<string, BigInteger> localMemory = new Dictionary<string, BigInteger>();
+        /** Remember local variables. Currently, this is only the function parameter.
+         */
+        private readonly IDictionary<string, BigInteger> localMemory = new Dictionary<string, BigInteger>();

-    /** Remember global variables set by =. */
-    private IDictionary<string, BigInteger> globalMemory = new Dictionary<string, BigInteger>();
+        /** Remember global variables set by =. */
+        private IDictionary<string, BigInteger> globalMemory = new Dictionary<string, BigInteger>();

-    /** Set up an evaluator with a node stream; and a set of function definition ASTs. */
-    public ProfileTreeGrammar( CommonTreeNodeStream nodes, List<CommonTree> functionDefinitions )
-        : this( nodes )
-    {
-        this.functionDefinitions = functionDefinitions;
-    }
+        /** Set up an evaluator with a node stream; and a set of function definition ASTs. */
+        public ProfileTreeGrammar(CommonTreeNodeStream nodes, List<CommonTree> functionDefinitions)
+            : this(nodes)
+        {
+            this.functionDefinitions = functionDefinitions;
+        }

-    /** Set up a local evaluator for a nested function call. The evaluator gets the definition
-     *  tree of the function; the set of all defined functions (to find locally called ones); a
-     *  pointer to the global variable memory; and the value of the function parameter to be
-     *  added to the local memory.
-     */
-    private ProfileTreeGrammar( CommonTree function,
-                 List<CommonTree> functionDefinitions,
-                 IDictionary<string, BigInteger> globalMemory,
-                 BigInteger paramValue )
-        // Expected tree for function: ^(FUNC ID ( INT | ID ) expr)
-        : this( new CommonTreeNodeStream( function.GetChild( 2 ) ), functionDefinitions )
-    {
-        this.globalMemory = globalMemory;
-        localMemory[function.GetChild( 1 ).Text] = paramValue;
-    }
+        /** Set up a local evaluator for a nested function call. The evaluator gets the definition
+         *  tree of the function; the set of all defined functions (to find locally called ones); a
+         *  pointer to the global variable memory; and the value of the function parameter to be
+         *  added to the local memory.
+         */
+        private ProfileTreeGrammar(CommonTree function,
+                     List<CommonTree> functionDefinitions,
+                     IDictionary<string, BigInteger> globalMemory,
+                     BigInteger paramValue)
+            // Expected tree for function: ^(FUNC ID ( INT | ID ) expr)
+            : this(new CommonTreeNodeStream(function.GetChild(2)), functionDefinitions)
+        {
+            this.globalMemory = globalMemory;
+            localMemory[function.GetChild(1).Text] = paramValue;
+        }

-    /** Find matching function definition for a function name and parameter
-     *  value. The first definition is returned where (a) the name matches
-     *  and (b) the formal parameter agrees if it is defined as constant.
-     */
-    private CommonTree findFunction( string name, BigInteger paramValue )
-    {
-        foreach ( CommonTree f in functionDefinitions )
+        /** Find matching function definition for a function name and parameter
+         *  value. The first definition is returned where (a) the name matches
+         *  and (b) the formal parameter agrees if it is defined as constant.
+         */
+        private CommonTree findFunction(string name, BigInteger paramValue)
{
-            // Expected tree for f: ^(FUNC ID (ID | INT) expr)
-            if ( f.GetChild( 0 ).Text.Equals( name ) )
+            foreach (CommonTree f in functionDefinitions)
{
-                // Check whether parameter matches
-                CommonTree formalPar = (CommonTree)f.GetChild( 1 );
-                if ( formalPar.Token.Type == INT
-                    && !new BigInteger( formalPar.Token.Text ).Equals( paramValue ) )
+                // Expected tree for f: ^(FUNC ID (ID | INT) expr)
+                if (f.GetChild(0).Text.Equals(name))
{
-                    // Constant in formalPar list does not match actual value -> no match.
-                    continue;
+                    // Check whether parameter matches
+                    CommonTree formalPar = (CommonTree)f.GetChild(1);
+                    if (formalPar.Token.Type == INT
+                        && !new BigInteger(formalPar.Token.Text).Equals(paramValue))
+                    {
+                        // Constant in formalPar list does not match actual value -> no match.
+                        continue;
+                    }
+                    // Parameter (value for INT formal arg) as well as fct name agrees!
+                    return f;
}
-                // Parameter (value for INT formal arg) as well as fct name agrees!
-                return f;
}
+            return null;
}
-        return null;
-    }

-    /** Get value of name up call stack. */
-    public BigInteger getValue( string name )
-    {
-        BigInteger value;
-        if ( localMemory.TryGetValue( name, out value ) && value != null )
-        {
-            return value;
-        }
-        if ( globalMemory.TryGetValue( name, out value ) && value != null )
+        /** Get value of name up call stack. */
+        public BigInteger getValue(string name)
{
-            return value;
+            BigInteger value;
+            if (localMemory.TryGetValue(name, out value) && value != null)
+            {
+                return value;
+            }
+            if (globalMemory.TryGetValue(name, out value) && value != null)
+            {
+                return value;
+            }
+            // not found in local memory or global memory
+            Console.Error.WriteLine("undefined variable " + name);
+            return new BigInteger("0");
}
-        // not found in local memory or global memory
-        Console.Error.WriteLine( "undefined variable " + name );
-        return new BigInteger( "0" );
}
}
diff --git a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/FastSimpleExpression.g3 b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/FastSimpleExpression.g3
index 1c51490..b0d5dfd 100644
--- a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/FastSimpleExpression.g3
+++ b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/FastSimpleExpression.g3
@@ -41,6 +41,8 @@ options
}

@lexer::superClass{Antlr.Runtime.SlimLexer}
+@lexer::namespace{Antlr3.Runtime.Test}
+@parser::namespace{Antlr3.Runtime.Test}

public
expression
diff --git a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/JavaCompat/Expr.g3 b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/JavaCompat/Expr.g3
index 65e7c5d..78c79cc 100644
--- a/runtime/CSharp3/Sources/Antlr3.Runtime.Test/JavaCompat/Expr.g3
+++ b/runtime/CSharp3/Sources/Antlr3.Runtime.Test/JavaCompat/Expr.g3
@@ -1,10 +1,10 @@
/*
- * [The "BSD licence"]
- * Copyright (c) 2005-2008 Terence Parr
+ * [The "BSD license"]
+ * Copyright (c) 2011 Terence Parr
* All rights reserved.
*
* Conversion to C#:
- * Copyright (c) 2008-2009 Sam Harwell, Pixel Mine, Inc.
+ * Copyright (c) 2011 Sam Harwell, Pixel Mine, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
@@ -74,6 +74,9 @@ using Integer = java.lang.Integer;
HashMap memory = new HashMap();
}

+@lexer::namespace{Antlr3.Runtime.Test.JavaCompat}
+@parser::namespace{Antlr3.Runtime.Test.JavaCompat}
+
prog:   stat+ ;

stat:   expr NEWLINE {JSystem.@out.println($expr.value);}

