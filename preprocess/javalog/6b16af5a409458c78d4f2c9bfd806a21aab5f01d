commit 6b16af5a409458c78d4f2c9bfd806a21aab5f01d
Author:     Sam Harwell <sam@tunnelvisionlabs.com>
AuthorDate: Thu Dec 13 17:25:21 2012 -0600
Commit:     Sam Harwell <sam@tunnelvisionlabs.com>
CommitDate: Thu Dec 13 18:00:41 2012 -0600

Fix indentation of parser members

diff --git a/tool/src/main/resources/org/antlr/codegen/templates/Java/AST.stg b/tool/src/main/resources/org/antlr/codegen/templates/Java/AST.stg
index 78f918b..b77f3f1 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/Java/AST.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/Java/AST.stg
@@ -35,7 +35,7 @@ import org.antlr.runtime.tree.*;<\n>

@genericParser.members() ::= <<
<@super.members()>
-<parserMembers()>
+	<parserMembers()>
>>

/** Add an adaptor property that knows how to build trees */
diff --git a/tool/src/main/resources/org/antlr/codegen/templates/Java/ASTDbg.stg b/tool/src/main/resources/org/antlr/codegen/templates/Java/ASTDbg.stg
index 2763b47..6ff493c 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/Java/ASTDbg.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/Java/ASTDbg.stg
@@ -31,18 +31,18 @@
*/

parserMembers() ::= <<
-protected DebugTreeAdaptor adaptor;
-public void setTreeAdaptor(TreeAdaptor adaptor) {
+	protected DebugTreeAdaptor adaptor;
+	public void setTreeAdaptor(TreeAdaptor adaptor) {
<if(grammar.grammarIsRoot)>
-	this.adaptor = new DebugTreeAdaptor(dbg,adaptor);
+		this.adaptor = new DebugTreeAdaptor(dbg,adaptor);
<else>
-	this.adaptor = (DebugTreeAdaptor)adaptor; // delegator sends dbg adaptor
+		this.adaptor = (DebugTreeAdaptor)adaptor; // delegator sends dbg adaptor
<endif>
-	<grammar.directDelegates:{g|<g:delegateName()>.setTreeAdaptor(this.adaptor);}>
-}
-public TreeAdaptor getTreeAdaptor() {
-	return adaptor;
-}
+		<grammar.directDelegates:{g|<g:delegateName()>.setTreeAdaptor(this.adaptor);}>
+	}
+	public TreeAdaptor getTreeAdaptor() {
+		return adaptor;
+	}
>>

parserCtorBody() ::= <<
diff --git a/tool/src/main/resources/org/antlr/codegen/templates/Java/Dbg.stg b/tool/src/main/resources/org/antlr/codegen/templates/Java/Dbg.stg
index 7bffc8d..9e4575e 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/Java/Dbg.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/Java/Dbg.stg
@@ -36,14 +36,14 @@ import java.io.IOException;

@genericParser.members() ::= <<
<if(grammar.grammarIsRoot)>
-public static final String[] ruleNames = new String[] {
-	"invalidRule", <grammar.allImportedRules:{rST | "<rST.name>"}; wrap="\n    ", separator=", ">
-};<\n>
+	public static final String[] ruleNames = new String[] {
+		"invalidRule", <grammar.allImportedRules:{rST | "<rST.name>"}; wrap="\n    ", separator=", ">
+	};<\n>
<endif>
-public static final boolean[] decisionCanBacktrack = new boolean[] {
-	false, // invalid decision
-	<grammar.decisions:{d | <d.dfa.hasSynPred; null="false">}; wrap="\n    ", separator=", ">
-};<\n>
+	public static final boolean[] decisionCanBacktrack = new boolean[] {
+		false, // invalid decision
+		<grammar.decisions:{d | <d.dfa.hasSynPred; null="false">}; wrap="\n    ", separator=", ">
+	};<\n>
<if(grammar.grammarIsRoot)> <! grammar imports other grammar(s) !>
public int ruleLevel = 0;
public int getRuleLevel() { return ruleLevel; }
@@ -54,7 +54,7 @@ public static final boolean[] decisionCanBacktrack = new boolean[] {
<else>
<ctorForRootGrammar()>
<endif>
-<ctorForPredefinedListener()>
+	<ctorForPredefinedListener()>
<else> <! imported grammar !>
public int getRuleLevel() { return <grammar.delegators:{g| <g:delegateName()>}>.getRuleLevel(); }
public void incRuleLevel() { <grammar.delegators:{g| <g:delegateName()>}>.incRuleLevel(); }
@@ -62,23 +62,23 @@ public static final boolean[] decisionCanBacktrack = new boolean[] {
<ctorForDelegateGrammar()>
<endif>
<if(profile)>
-public boolean alreadyParsedRule(IntStream input, int ruleIndex) {
-	int stopIndex = getRuleMemoization(ruleIndex, input.index());
-	((Profiler)dbg).examineRuleMemoization(input, ruleIndex, stopIndex, <grammar.composite.rootGrammar.recognizerName>.ruleNames[ruleIndex]);
-	return super.alreadyParsedRule(input, ruleIndex);
-}<\n>
-public void memoize(IntStream input,
-					int ruleIndex,
-					int ruleStartIndex)
-{
-	((Profiler)dbg).memoize(input, ruleIndex, ruleStartIndex, <grammar.composite.rootGrammar.recognizerName>.ruleNames[ruleIndex]);
-	super.memoize(input, ruleIndex, ruleStartIndex);
-}<\n>
+	public boolean alreadyParsedRule(IntStream input, int ruleIndex) {
+		int stopIndex = getRuleMemoization(ruleIndex, input.index());
+		((Profiler)dbg).examineRuleMemoization(input, ruleIndex, stopIndex, <grammar.composite.rootGrammar.recognizerName>.ruleNames[ruleIndex]);
+		return super.alreadyParsedRule(input, ruleIndex);
+	}<\n>
+	public void memoize(IntStream input,
+						int ruleIndex,
+						int ruleStartIndex)
+	{
+		((Profiler)dbg).memoize(input, ruleIndex, ruleStartIndex, <grammar.composite.rootGrammar.recognizerName>.ruleNames[ruleIndex]);
+		super.memoize(input, ruleIndex, ruleStartIndex);
+	}<\n>
<endif>
-protected boolean evalPredicate(boolean result, String predicate) {
-	dbg.semanticPredicate(result, predicate);
-	return result;
-}<\n>
+	protected boolean evalPredicate(boolean result, String predicate) {
+		dbg.semanticPredicate(result, predicate);
+		return result;
+	}<\n>
>>

ctorForRootGrammar() ::= <<
diff --git a/tool/src/main/resources/org/antlr/codegen/templates/Java/Java.stg b/tool/src/main/resources/org/antlr/codegen/templates/Java/Java.stg
index d85d402..8146760 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/Java/Java.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/Java/Java.stg
@@ -223,7 +223,7 @@ public class <grammar.recognizerName> extends <@superClassName><superClass><@end

<scopes:{it |<if(it.isDynamicGlobalScope)><globalAttributeScope(it)><endif>}>

-	<@members>
+<@members>
<! WARNING. bug in ST: this is cut-n-paste into Dbg.stg !>
public <grammar.recognizerName>(<inputStreamType> input<grammar.delegators:{g|, <g.recognizerName> <g:delegateName()>}>) {
this(input, new RecognizerSharedState()<grammar.delegators:{g|, <g:delegateName()>}>);
@@ -236,7 +236,7 @@ public class <grammar.recognizerName> extends <@superClassName><superClass><@end
<grammar.indirectDelegates:{g | <g:delegateName()> = <g.delegator:delegateName()>.<g:delegateName()>;}; separator="\n">
<last(grammar.delegators):{g|gParent = <g:delegateName()>;}>
}
-	<@end>
+<@end>

@Override public String[] getTokenNames() { return <grammar.composite.rootGrammar.recognizerName>.tokenNames; }
@Override public String getGrammarFileName() { return "<fileName>"; }
diff --git a/tool/src/main/resources/org/antlr/codegen/templates/Java/ST.stg b/tool/src/main/resources/org/antlr/codegen/templates/Java/ST.stg
index bfc3b2d..3b5323b 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/Java/ST.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/Java/ST.stg
@@ -45,25 +45,25 @@ public String toString() { return st==null?null:st.toString(); }

@genericParser.members() ::= <<
<@super.members()>
-protected StringTemplateGroup templateLib =
-  new StringTemplateGroup("<name>Templates", AngleBracketTemplateLexer.class);
+	protected StringTemplateGroup templateLib =
+	  new StringTemplateGroup("<name>Templates", AngleBracketTemplateLexer.class);

-public void setTemplateLib(StringTemplateGroup templateLib) {
-  this.templateLib = templateLib;
-}
-public StringTemplateGroup getTemplateLib() {
-  return templateLib;
-}
-/** allows convenient multi-value initialization:
- *  "new STAttrMap().put(...).put(...)"
- */
-@SuppressWarnings("serial")
-public static class STAttrMap extends HashMap\<String, Object> {
-	public STAttrMap put(String attrName, Object value) {
-		super.put(attrName, value);
-		return this;
+	public void setTemplateLib(StringTemplateGroup templateLib) {
+	  this.templateLib = templateLib;
+	}
+	public StringTemplateGroup getTemplateLib() {
+	  return templateLib;
+	}
+	/** allows convenient multi-value initialization:
+	 *  "new STAttrMap().put(...).put(...)"
+	 */
+	@SuppressWarnings("serial")
+	public static class STAttrMap extends HashMap\<String, Object> {
+		public STAttrMap put(String attrName, Object value) {
+			super.put(attrName, value);
+			return this;
+		}
}
-}
>>

/** x+=rule when output=template */

