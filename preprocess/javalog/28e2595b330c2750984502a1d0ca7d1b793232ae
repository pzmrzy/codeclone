commit 28e2595b330c2750984502a1d0ca7d1b793232ae
Author:     Sam Harwell <sam@tunnelvisionlabs.com>
AuthorDate: Wed Feb 22 08:33:27 2012 -0600
Commit:     Sam Harwell <sam@tunnelvisionlabs.com>
CommitDate: Wed Feb 22 12:25:51 2012 -0600

Tweak whitespace

diff --git a/runtime/Java/src/main/java/org/antlr/runtime/RecognizerSharedState.java b/runtime/Java/src/main/java/org/antlr/runtime/RecognizerSharedState.java
index 04b1123..cd15c3c 100644
--- a/runtime/Java/src/main/java/org/antlr/runtime/RecognizerSharedState.java
+++ b/runtime/Java/src/main/java/org/antlr/runtime/RecognizerSharedState.java
@@ -24,7 +24,8 @@
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */package org.antlr.runtime;
+ */
+package org.antlr.runtime;

import java.util.Map;

diff --git a/runtime/Java/src/main/java/org/antlr/runtime/tree/BufferedTreeNodeStream.java b/runtime/Java/src/main/java/org/antlr/runtime/tree/BufferedTreeNodeStream.java
index c04544d..879f2fe 100644
--- a/runtime/Java/src/main/java/org/antlr/runtime/tree/BufferedTreeNodeStream.java
+++ b/runtime/Java/src/main/java/org/antlr/runtime/tree/BufferedTreeNodeStream.java
@@ -478,7 +478,7 @@ public class BufferedTreeNodeStream implements TreeNodeStream {
}
}
// now walk until we see stop, filling string buffer with text
-		 StringBuilder buf = new StringBuilder();
+		StringBuilder buf = new StringBuilder();
t = nodes.get(i);
while ( t!=stop ) {
String text = adaptor.getText(t);
diff --git a/tool/src/main/java/org/antlr/misc/OrderedHashSet.java b/tool/src/main/java/org/antlr/misc/OrderedHashSet.java
index 7679c22..1dbe93f 100644
--- a/tool/src/main/java/org/antlr/misc/OrderedHashSet.java
+++ b/tool/src/main/java/org/antlr/misc/OrderedHashSet.java
@@ -100,7 +100,7 @@ public class OrderedHashSet<T> extends LinkedHashSet<T> {
public Object[] toArray() {
return elements.toArray();
}
-
+
@Override
public int size() {
/*
diff --git a/tool/src/main/java/org/antlr/tool/ErrorManager.java b/tool/src/main/java/org/antlr/tool/ErrorManager.java
index 078db64..b18f26d 100644
--- a/tool/src/main/java/org/antlr/tool/ErrorManager.java
+++ b/tool/src/main/java/org/antlr/tool/ErrorManager.java
@@ -334,22 +334,22 @@ public class ErrorManager {
*/
static STErrorListener initSTListener =
new STErrorListener() {
-		@Override
+			@Override
public void compileTimeError(STMessage msg) {
System.err.println("ErrorManager init error: "+msg);
}

-		@Override
+			@Override
public void runTimeError(STMessage msg) {
System.err.println("ErrorManager init error: "+msg);
}

-		@Override
+			@Override
public void IOError(STMessage msg) {
System.err.println("ErrorManager init error: "+msg);
}

-		@Override
+			@Override
public void internalError(STMessage msg) {
System.err.println("ErrorManager init error: "+msg);
}
diff --git a/tool/src/test/java/org/antlr/test/TestTreeWizard.java b/tool/src/test/java/org/antlr/test/TestTreeWizard.java
index 2e390be..ebfd182 100644
--- a/tool/src/test/java/org/antlr/test/TestTreeWizard.java
+++ b/tool/src/test/java/org/antlr/test/TestTreeWizard.java
@@ -146,7 +146,7 @@ public class TestTreeWizard extends BaseTest {
final List<Object> elements = new ArrayList<Object>();
wiz.visit(t, wiz.getTokenType("C"),
new TreeWizard.Visitor() {
-			@Override
+							@Override
public void visit(Object t) {
elements.add(t);
}
@@ -162,7 +162,7 @@ public class TestTreeWizard extends BaseTest {
final List<Object> elements = new ArrayList<Object>();
wiz.visit(t, wiz.getTokenType("B"),
new TreeWizard.Visitor() {
-			@Override
+							@Override
public void visit(Object t) {
elements.add(t);
}
@@ -178,7 +178,7 @@ public class TestTreeWizard extends BaseTest {
final List<Object> elements = new ArrayList<Object>();
wiz.visit(t, wiz.getTokenType("A"),
new TreeWizard.Visitor() {
-			@Override
+							@Override
public void visit(Object t) {
elements.add(t);
}
@@ -194,7 +194,7 @@ public class TestTreeWizard extends BaseTest {
final List<String> elements = new ArrayList<String>();
wiz.visit(t, wiz.getTokenType("B"),
new TreeWizard.ContextVisitor() {
-			@Override
+			   @Override
public void visit(Object t, Object parent, int childIndex, Map<String, Object> labels) {
elements.add(adaptor.getText(t)+"@"+
(parent!=null?adaptor.getText(parent):"nil")+
@@ -212,7 +212,7 @@ public class TestTreeWizard extends BaseTest {
final List<String> elements = new ArrayList<String>();
wiz.visit(t, wiz.getTokenType("A"),
new TreeWizard.ContextVisitor() {
-			@Override
+			   @Override
public void visit(Object t, Object parent, int childIndex, Map<String, Object> labels) {
elements.add(adaptor.getText(t)+"@"+
(parent!=null?adaptor.getText(parent):"nil")+
@@ -230,7 +230,7 @@ public class TestTreeWizard extends BaseTest {
final List<Object> elements = new ArrayList<Object>();
wiz.visit(t, "(A B)",
new TreeWizard.Visitor() {
-			@Override
+							@Override
public void visit(Object t) {
elements.add(t);
}
@@ -246,7 +246,7 @@ public class TestTreeWizard extends BaseTest {
final List<String> elements = new ArrayList<String>();
wiz.visit(t, "(A B)",
new TreeWizard.ContextVisitor() {
-			@Override
+						   @Override
public void visit(Object t, Object parent, int childIndex, Map<String, Object> labels) {
elements.add(adaptor.getText(t)+"@"+
(parent!=null?adaptor.getText(parent):"nil")+
@@ -264,7 +264,7 @@ public class TestTreeWizard extends BaseTest {
final List<String> elements = new ArrayList<String>();
wiz.visit(t, "(%a:A %b:B)",
new TreeWizard.ContextVisitor() {
-			@Override
+						   @Override
public void visit(Object t, Object parent, int childIndex, Map<String, Object> labels) {
elements.add(adaptor.getText(t)+"@"+
(parent!=null?adaptor.getText(parent):"nil")+

