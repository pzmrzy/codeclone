commit 84864a10196f0907de75280ef2bcc1317abf3d4d
Author:     Ivan Brezina <ibrezina@ibrezina.net>
AuthorDate: Tue Oct 1 23:58:01 2013 +0200
Commit:     Ivan Brezina <ibrezina@ibrezina.net>
CommitDate: Tue Oct 1 23:58:01 2013 +0200

Lexer grammar using synpreds

diff --git a/runtime/Cpp/tests/Makefile b/runtime/Cpp/tests/Makefile
index 0c3b35d..5a7f1ac 100644
--- a/runtime/Cpp/tests/Makefile
+++ b/runtime/Cpp/tests/Makefile
@@ -64,6 +64,8 @@ t011:	t011.cpp t011lexer.tokens UserTestTraits.hpp Makefile $(ANTLR) $(RUNTIME_H
t012:	t012.cpp t012lexerXMLLexer.tokens UserTestTraits.hpp Makefile $(ANTLR) $(RUNTIME_HEADERS)
g++ $(CFLAGS) -DUSESTL $(INCLUDES) $< $@?*.cpp -o $@

+t051:	t051.cpp t051lexer.tokens UserTestTraits.hpp Makefile $(ANTLR) $(RUNTIME_HEADERS)
+	g++ $(CFLAGS) -DUSESTL $(INCLUDES) $< $@?*.cpp -o $@

# AST commented out
# t039:	t039.cpp t039labels.tokens UserTestTraits.hpp Makefile $(ANTLR) $(RUNTIME_HEADERS)
diff --git a/runtime/Cpp/tests/UserTestTraits.hpp b/runtime/Cpp/tests/UserTestTraits.hpp
index f73faa2..85a496c 100644
--- a/runtime/Cpp/tests/UserTestTraits.hpp
+++ b/runtime/Cpp/tests/UserTestTraits.hpp
@@ -24,6 +24,7 @@ namespace Antlr3Test {
class t010lexer;
class t011lexer;
class t012lexerXMLLexer;
+	class t051lexer;

class t039labelsLexer;
class t039labelsParser;
@@ -58,6 +59,7 @@ namespace Antlr3Test {
typedef antlr3::Traits<t010lexer, NoParser, UserTraits> t010lexerTraits;
typedef antlr3::Traits<t011lexer, NoParser, UserTraits> t011lexerTraits;
typedef antlr3::Traits<t012lexerXMLLexer, NoParser, UserTraits> t012lexerXMLLexerTraits;
+	typedef antlr3::Traits<t051lexer, NoParser, UserTraits> t051lexerTraits;

typedef antlr3::Traits<t039labelsLexer, t039labelsParser, UserTraits> t039labelsLexerTraits;
typedef t039labelsLexerTraits t039labelsParserTraits;
diff --git a/runtime/Cpp/tests/t051.cpp b/runtime/Cpp/tests/t051.cpp
new file mode 100644
index 0000000..c89e3a5
--- /dev/null
+++ b/runtime/Cpp/tests/t051.cpp
@@ -0,0 +1,98 @@
+#include "UserTestTraits.hpp"
+#include "t051lexer.hpp"
+
+#include <sys/types.h>
+
+#include <iostream>
+#include <sstream>
+#include <fstream>
+
+using namespace Antlr3Test;
+using namespace std;
+
+static t051lexer* lxr;
+
+static string slurp(string const& fileName);
+static void parseFile(const char* fName);
+
+int main (int argc, char *argv[])
+{
+	if (argc < 2 || argv[1] == NULL)
+	{
+		parseFile("./t051.input"); // Note in VS2005 debug, working directory must be configured
+	}
+	else
+	{
+		for (int i = 1; i < argc; i++)
+		{
+			parseFile(argv[i]);
+		}
+	}
+
+	printf("finished parsing OK\n");	// Finnish parking is pretty good - I think it is all the snow
+
+	return 0;
+}
+
+void parseFile(const char* fName)
+{
+	t051lexerTraits::InputStreamType* input;
+	t051lexerTraits::TokenStreamType* tstream;
+
+	string data = slurp(fName);
+
+	input	= new t051lexerTraits::InputStreamType((const ANTLR_UINT8 *)data.c_str(),
+						       ANTLR_ENC_8BIT,
+						       data.length(), //strlen(data.c_str()),
+						       (ANTLR_UINT8*)fName);
+
+	input->setUcaseLA(true);
+
+	// Our input stream is now open and all set to go, so we can create a new instance of our
+	// lexer and set the lexer input to our input stream:
+	//  (file | memory | ?) --> inputstream -> lexer --> tokenstream --> parser ( --> treeparser )?
+	//
+	if (lxr == NULL)
+	{
+		lxr = new t051lexer(input);	    // javaLexerNew is generated by ANTLR
+	}
+	else
+	{
+		lxr->setCharStream(input);
+	}
+
+	tstream = new t051lexerTraits::TokenStreamType(ANTLR_SIZE_HINT, lxr->get_tokSource());
+
+	putc('L', stdout); fflush(stdout);
+	{
+		ANTLR_INT32 T = 0;
+		while	(T != t051lexer::EOF_TOKEN)
+		{
+			T = tstream->_LA(1);
+			t051lexerTraits::CommonTokenType const* token = tstream->_LT(1);
+
+			printf("%d\t\"%s\"\n",
+			       T,
+			       tstream->_LT(1)->getText().c_str()
+				);
+			tstream->consume();
+		}
+	}
+
+	tstream->_LT(1);	// Don't do this mormally, just causes lexer to run for timings here
+
+	delete tstream;
+	delete lxr; lxr = NULL;
+	delete input;
+}
+
+string slurp(string const& fileName)
+{
+	ifstream ifs(fileName.c_str(), ios::in | ios::binary | ios::ate);
+	ifstream::pos_type fileSize = ifs.tellg();
+	ifs.seekg(0, ios::beg);
+
+	stringstream sstr;
+	sstr << ifs.rdbuf();
+	return sstr.str();
+}
diff --git a/runtime/Cpp/tests/t051.input b/runtime/Cpp/tests/t051.input
new file mode 100644
index 0000000..7f1dfb7
--- /dev/null
+++ b/runtime/Cpp/tests/t051.input
@@ -0,0 +1 @@
+9.99
diff --git a/runtime/Cpp/tests/t051lexer.g b/runtime/Cpp/tests/t051lexer.g
new file mode 100644
index 0000000..f5790b7
--- /dev/null
+++ b/runtime/Cpp/tests/t051lexer.g
@@ -0,0 +1,28 @@
+// Lexer grammar using synpreds
+lexer grammar t051lexer;
+
+options {
+	language=Cpp;
+}
+
+@lexer::includes
+{
+#include "UserTestTraits.hpp"
+}
+@lexer::namespace
+{ Antlr3Test }
+
+fragment
+POINT
+	:	'.'
+	;
+NUMBER
+	: (	( NUM POINT NUM ) => NUM POINT NUM
+		|	POINT NUM
+		|	NUM
+		)
+    ;
+fragment
+NUM
+	: '0' .. '9' ( '0' .. '9' )*
+	;

