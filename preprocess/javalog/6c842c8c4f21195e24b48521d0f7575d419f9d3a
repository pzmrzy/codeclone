commit 6c842c8c4f21195e24b48521d0f7575d419f9d3a
Author:     acondit <acondit@parrt.spork>
AuthorDate: Mon Jan 30 08:52:09 2012 -0800
Commit:     acondit <acondit@parrt.spork>
CommitDate: Mon Jan 30 08:52:09 2012 -0800

More work on fixing ObjC problems related to Java use of nested classes.

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 9931]

diff --git a/runtime/ObjC/Framework/TreeFilter.h b/runtime/ObjC/Framework/TreeFilter.h
index 0032cd9..950e573 100644
--- a/runtime/ObjC/Framework/TreeFilter.h
+++ b/runtime/ObjC/Framework/TreeFilter.h
@@ -146,6 +146,7 @@ public class TreeFilter extends TreeParser {
#import "TreeNodeStream.h"
#import "TreeParser.h"
#import "TreeVisitor.h"
+#import "TreeVisitorAction.h"

@class TreeFilter;

diff --git a/runtime/ObjC/Framework/TreeFilter.m b/runtime/ObjC/Framework/TreeFilter.m
index ce245d8..9730ad0 100644
--- a/runtime/ObjC/Framework/TreeFilter.m
+++ b/runtime/ObjC/Framework/TreeFilter.m
@@ -207,9 +207,9 @@ public class TreeFilter extends TreeParser {
state = [RecognizerSharedState newRecognizerSharedState];
input = [CommonTreeNodeStream newCommonTreeNodeStream:originalAdaptor Tree:(CommonTree *)t];
[(CommonTreeNodeStream *)input setTokenStream:originalTokenStream];
-            [state setBacktrackingLevel:1];
+            [self setBacktrackingLevel:1];
[whichRule rule];
-            [state setBacktrackingLevel:0];
+            [self setBacktrackingLevel:0];
}
@catch (RecognitionException *e) { ; }
}
@@ -217,14 +217,10 @@ public class TreeFilter extends TreeParser {
- (void) downup:(id<BaseTree>) t
{
TreeVisitor *v = [TreeVisitor newTreeVisitor:[CommonTreeAdaptor newTreeAdaptor]];
-    TreeVisitorAction *actions = [TreeVisitorAction newTreeVisitorAction];
-    {
-        /* java stuff
-        - ((id<BaseTree>)) pre:(id<BaseTree>) t { [self applyOnce:t rule:(fptr *)topdown_fptr]; return t; }
-        - ((id<BaseTree>)) post:(id<BaseTree>) t { [self applyOnce:t rule:(fptr *)bottomup_fptr]; return t; }
-         */
-    }
-    [v visit:t actions:actions];
+    TreeVisitorAction *actions = [TreeVisitorActionFiltered newTreeVisitorActionFiltered:self
+                                                                                   RuleD:topdown_fptr
+                                                                                   RuleU:bottomup_fptr];
+    [v visit:t Action:actions];
}

- (void) settopdown_fptr
diff --git a/runtime/ObjC/Framework/TreeVisitorAction.h b/runtime/ObjC/Framework/TreeVisitorAction.h
index 443443e..71f5cc6 100644
--- a/runtime/ObjC/Framework/TreeVisitorAction.h
+++ b/runtime/ObjC/Framework/TreeVisitorAction.h
@@ -62,3 +62,33 @@
- (id<BaseTree>)post:(id<BaseTree>) t;

@end
+
+@class TreeFilter;
+@class fptr;
+
+@interface TreeVisitorActionFiltered : TreeVisitorAction
+{
+    TreeFilter *aTFilter;
+    fptr *TDRule;
+    fptr *BURule;
+}
+
+@property (assign, setter=setATFilter:) TreeFilter *aTFilter;
+
++ (TreeVisitorAction *)newTreeVisitorActionFiltered:(TreeFilter *)aFilter RuleD:(fptr *)aTDRule RuleU:(fptr *)aBURule;
+- (id) initWithFilter:(TreeFilter *)aFilter RuleD:(fptr *)aTDRule RuleU:(fptr *)aBURule;
+
+/** Execute an action before visiting children of t.  Return t or
+ *  a rewritten t.  It is up to the visitor to decide what to do
+ *  with the return value.  Children of returned value will be
+ *  visited if using TreeVisitor.visit().
+ */
+- (id<BaseTree>)pre:(id<BaseTree>) t;
+
+/** Execute an action after visiting children of t.  Return t or
+ *  a rewritten t.  It is up to the visitor to decide what to do
+ *  with the return value.
+ */
+- (id<BaseTree>)post:(id<BaseTree>) t;
+
+@end
diff --git a/runtime/ObjC/Framework/TreeVisitorAction.m b/runtime/ObjC/Framework/TreeVisitorAction.m
index 133dd2f..d9d06f2 100644
--- a/runtime/ObjC/Framework/TreeVisitorAction.m
+++ b/runtime/ObjC/Framework/TreeVisitorAction.m
@@ -67,8 +67,9 @@
{
if ( (preAction != nil ) && ( [self respondsToSelector:preAction] )) {
[self performSelector:preAction];
+        return t;
}
-    return t;
+    return nil;
}

/** Execute an action after visiting children of t.  Return t or
@@ -79,11 +80,61 @@
{
if ( (postAction != nil ) && ( [self respondsToSelector:postAction] )) {
[self performSelector:postAction];
+        return t;
}
-    return t;
+    return nil;
}

@synthesize preAction;
@synthesize postAction;

@end
+
+@implementation TreeVisitorActionFiltered
+
++ (TreeVisitorAction *)newTreeVisitorActionFiltered:(TreeFilter *)aFilter
+                                              RuleD:(fptr *)aTDRule
+                                              RuleU:(fptr *)aBURule
+{
+    return [TreeVisitorActionFiltered newTreeVisitorActionFiltered:aFilter];
+}
+
+- (id) initWithFilter:(TreeFilter *)aFilter
+                RuleD:(fptr *)aTDRule
+                RuleU:(fptr *)aBURule
+{
+    if (( self = [super init] ) != nil ) {
+        aTFilter = aFilter;
+        TDRule = aTDRule;
+        BURule = aBURule;
+    }
+    return self;
+}
+
+/** Execute an action before visiting children of t.  Return t or
+ *  a rewritten t.  It is up to the visitor to decide what to do
+ *  with the return value.  Children of returned value will be
+ *  visited if using TreeVisitor.visit().
+ */
+- (id<BaseTree>)pre:(id<BaseTree>) t
+{
+    [aTFilter applyOnce:t rule:(fptr *)TDRule];
+    return t;
+}
+
+/** Execute an action after visiting children of t.  Return t or
+ *  a rewritten t.  It is up to the visitor to decide what to do
+ *  with the return value.
+ */
+- (id<BaseTree>)post:(id<BaseTree>) t
+{
+    [aTFilter applyOnce:t rule:(fptr *)BURule];
+    return t;
+}
+
+
+
+@synthesize aTFilter;
+
+@end
+

