commit 0b301a517413678723f4d3f95784dbdb38da934c
Author:     acondit <acondit@parrt.spork>
AuthorDate: Sat May 7 08:11:03 2011 -0800
Commit:     acondit <acondit@parrt.spork>
CommitDate: Sat May 7 08:11:03 2011 -0800

Changes to match ANTLR3.4 revision.

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8417]

diff --git a/runtime/ObjC/Framework/examples/LL-star/SimpleCLexer.h b/runtime/ObjC/Framework/examples/LL-star/SimpleCLexer.h
index 37ef5fb..b640542 100644
--- a/runtime/ObjC/Framework/examples/LL-star/SimpleCLexer.h
+++ b/runtime/ObjC/Framework/examples/LL-star/SimpleCLexer.h
@@ -1,69 +1,67 @@
-// $ANTLR 3.2 Aug 24, 2010 10:45:57 SimpleC.g 2010-08-24 13:53:43
+// $ANTLR ${project.version} ${buildNumber} SimpleC.g 2011-05-06 13:53:12

/* =============================================================================
* Standard antlr3 OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
+#import <ANTLR/ANTLR.h>
/* End of standard antlr3 runtime definitions
* =============================================================================
*/

/* Start cyclicDFAInterface */
-#pragma mark Cyclic DFA interface start DFA4
-@interface DFA4 : ANTLRDFA {
-}
-+ newDFA4WithRecognizer:(ANTLRBaseRecognizer *)theRecognizer;
-- initWithRecognizer:(ANTLRBaseRecognizer *)recognizer;
-@end /* end of DFA4 interface  */
-
-#pragma mark Cyclic DFA interface end DFA4

#pragma mark Rule return scopes start
#pragma mark Rule return scopes end
#pragma mark Tokens
-#define T__20 20
-#define INT 5
-#define ID 4
+#ifdef EOF
+#undef EOF
+#endif
#define EOF -1
-#define T__9 9
-#define T__8 8
#define T__7 7
-#define T__19 19
-#define WS 6
-#define T__16 16
-#define T__15 15
-#define T__18 18
-#define T__17 17
-#define T__12 12
+#define T__8 8
+#define T__9 9
+#define T__10 10
#define T__11 11
-#define T__14 14
+#define T__12 12
#define T__13 13
-#define T__10 10
+#define T__14 14
+#define T__15 15
+#define T__16 16
+#define T__17 17
+#define T__18 18
+#define T__19 19
+#define T__20 20
+#define ID 4
+#define INT 5
+#define WS 6
+/* interface lexer class */
@interface SimpleCLexer : ANTLRLexer { // line 283
-DFA4 *dfa4;
-// start of actions.lexer.memVars
-// start of action-actionScope-memVars
+/* ObjC start of actions.lexer.memVars */
+/* ObjC end of actions.lexer.memVars */
}
++ (void) initialize;
+ (SimpleCLexer *)newSimpleCLexerWithCharStream:(id<ANTLRCharStream>)anInput;
-
-- (void)mT__7;
-- (void)mT__8;
-- (void)mT__9;
-- (void)mT__10;
-- (void)mT__11;
-- (void)mT__12;
-- (void)mT__13;
-- (void)mT__14;
-- (void)mT__15;
-- (void)mT__16;
-- (void)mT__17;
-- (void)mT__18;
-- (void)mT__19;
-- (void)mT__20;
-- (void)mID;
-- (void)mINT;
-- (void)mWS;
-- (void)mTokens;
+/* ObjC start actions.lexer.methodsDecl */
+/* ObjC end actions.lexer.methodsDecl */
+- (void) mT__7 ;
+- (void) mT__8 ;
+- (void) mT__9 ;
+- (void) mT__10 ;
+- (void) mT__11 ;
+- (void) mT__12 ;
+- (void) mT__13 ;
+- (void) mT__14 ;
+- (void) mT__15 ;
+- (void) mT__16 ;
+- (void) mT__17 ;
+- (void) mT__18 ;
+- (void) mT__19 ;
+- (void) mT__20 ;
+- (void) mID ;
+- (void) mINT ;
+- (void) mWS ;
+- (void) mTokens ;

@end /* end of SimpleCLexer interface */
+
diff --git a/runtime/ObjC/Framework/examples/LL-star/SimpleCLexer.m b/runtime/ObjC/Framework/examples/LL-star/SimpleCLexer.m
index a328a52..b4e53ae 100644
--- a/runtime/ObjC/Framework/examples/LL-star/SimpleCLexer.m
+++ b/runtime/ObjC/Framework/examples/LL-star/SimpleCLexer.m
@@ -1,43 +1,18 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version 3.2 Aug 24, 2010 10:45:57
+ *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
*
*     -  From the grammar source file : SimpleC.g
- *     -                            On : 2010-08-24 13:53:43
- *     -                 for the lexer : SimpleCLexerLexer *
- * Editing it, at least manually, is not wise.
+ *     -                            On : 2011-05-06 13:53:12
+ *     -                 for the lexer : SimpleCLexerLexer
+ *
+ * Editing it, at least manually, is not wise.
*
* ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
*
*
*/
-// [The "BSD licence"]
-// Copyright (c) 2010 Alan Condit
-//
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. The name of the author may not be used to endorse or promote products
-//    derived from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// $ANTLR 3.2 Aug 24, 2010 10:45:57 SimpleC.g 2010-08-24 13:53:43
+// $ANTLR ${project.version} ${buildNumber} SimpleC.g 2011-05-06 13:53:12
+

/* -----------------------------------------
* Include the ANTLR3 generated header file.
@@ -47,132 +22,10 @@


/* ============================================================================= */
-
/* =============================================================================
* Start of recognizer
*/

-#pragma mark Cyclic DFA implementation start DFA4
-@implementation DFA4
-const static NSInteger dfa4_eot[33] =
-    {-1,-1,-1,-1,-1,14,14,14,-1,-1,14,22,-1,-1,-1,-1,-1,14,14,14,14,-1,-1,
-     27,14,14,30,-1,31,32,-1,-1,-1};
-const static NSInteger dfa4_eof[33] =
-    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static unichar dfa4_min[33] =
-    {9,0,0,0,0,110,104,111,0,0,111,61,0,0,0,0,0,116,97,105,114,0,0,48,114,
-     100,48,0,48,48,0,0,0};
-const static unichar dfa4_max[33] =
-    {125,0,0,0,0,110,104,111,0,0,111,61,0,0,0,0,0,116,97,105,114,0,0,122,
-     114,100,122,0,122,122,0,0,0};
-const static NSInteger dfa4_accept[33] =
-    {-1,1,2,3,4,-1,-1,-1,8,9,-1,-1,13,14,15,16,17,-1,-1,-1,-1,12,11,-1,-1,
-     -1,-1,5,-1,-1,10,6,7};
-const static NSInteger dfa4_special[33] =
-    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static NSInteger dfa4_transition[] = {};
-const static NSInteger dfa4_transition0[] = {14, 14, 14, 14, 14, 14, 14,
- 14, 14, 14, -1, -1, -1, -1, -1, -1, -1, 14, 14, 14, 14, 14, 14, 14, 14,
- 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
- -1, -1, -1, -1, 14, -1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
- 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14};
-const static NSInteger dfa4_transition1[] = {21};
-const static NSInteger dfa4_transition2[] = {17};
-const static NSInteger dfa4_transition3[] = {26};
-const static NSInteger dfa4_transition4[] = {19};
-const static NSInteger dfa4_transition5[] = {29};
-const static NSInteger dfa4_transition6[] = {18};
-const static NSInteger dfa4_transition7[] = {25};
-const static NSInteger dfa4_transition8[] = {28};
-const static NSInteger dfa4_transition9[] = {24};
-const static NSInteger dfa4_transition10[] = {20};
-const static NSInteger dfa4_transition11[] = {16, 16, -1, -1, 16, -1, -1,
- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1,
- -1, -1, -1, -1, -1, -1, 2, 4, -1, 13, 3, -1, -1, -1, 15, 15, 15, 15, 15,
- 15, 15, 15, 15, 15, -1, 1, 12, 11, -1, -1, -1, 14, 14, 14, 14, 14, 14,
- 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
- 14, 14, -1, -1, -1, -1, 14, -1, 14, 14, 6, 14, 14, 10, 14, 14, 5, 14, 14,
- 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 7, 14, 14, 14, 14, 8, -1, 9};
-const static NSInteger dfa4_transition12[] = {23};
-
-
-+ () newDFA4WithRecognizer:(ANTLRBaseRecognizer *)aRecognizer
-{
-    return [[[DFA4 alloc] initWithRecognizer:aRecognizer] retain];
-}
-
-- (id) initWithRecognizer:(ANTLRBaseRecognizer *) theRecognizer
-{
-    if ((self = [super initWithRecognizer:theRecognizer]) != nil) {
-        decisionNumber = 4;
-        eot = dfa4_eot;
-        eof = dfa4_eof;
-        min = dfa4_min;
-        max = dfa4_max;
-        accept = dfa4_accept;
-        special = dfa4_special;
-        if (!(transition = calloc(33, sizeof(void*)))) {
-            [self release];
-            return nil;
-        }
-        len = 33;
-        transition[0] = dfa4_transition11;
-        transition[1] = dfa4_transition;
-        transition[2] = dfa4_transition;
-        transition[3] = dfa4_transition;
-        transition[4] = dfa4_transition;
-        transition[5] = dfa4_transition2;
-        transition[6] = dfa4_transition6;
-        transition[7] = dfa4_transition4;
-        transition[8] = dfa4_transition;
-        transition[9] = dfa4_transition;
-        transition[10] = dfa4_transition10;
-        transition[11] = dfa4_transition1;
-        transition[12] = dfa4_transition;
-        transition[13] = dfa4_transition;
-        transition[14] = dfa4_transition;
-        transition[15] = dfa4_transition;
-        transition[16] = dfa4_transition;
-        transition[17] = dfa4_transition12;
-        transition[18] = dfa4_transition9;
-        transition[19] = dfa4_transition7;
-        transition[20] = dfa4_transition3;
-        transition[21] = dfa4_transition;
-        transition[22] = dfa4_transition;
-        transition[23] = dfa4_transition0;
-        transition[24] = dfa4_transition8;
-        transition[25] = dfa4_transition5;
-        transition[26] = dfa4_transition0;
-        transition[27] = dfa4_transition;
-        transition[28] = dfa4_transition0;
-        transition[29] = dfa4_transition0;
-        transition[30] = dfa4_transition;
-        transition[31] = dfa4_transition;
-        transition[32] = dfa4_transition;
-    }
-    return self;
-}
-
-- (void) dealloc
-{
-    free(transition);
-    [super dealloc];
-}
-
-- (NSString *) description
-{
-    return @"1:1: Tokens : ( T__7 | T__8 | T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | ID | INT | WS );";
-}
-
-
-@end /* end DFA4 implementation */
-
-#pragma mark Cyclic DFA implementation end DFA4
-
-
-
/** As per Terence: No returns for lexer rules! */
@implementation SimpleCLexer // line 330

@@ -193,298 +46,328 @@ const static NSInteger dfa4_transition12[] = {23};

- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
{
-    if ((self = [super initWithCharStream:anInput State:[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:18+1]]) != nil) {
-
-        dfa4 = [DFA4 newDFA4WithRecognizer:self];
+    self = [super initWithCharStream:anInput State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:18+1] retain]];
+    if ( self != nil ) {
}
return self;
}

- (void) dealloc
{
-    [dfa4 release];
[super dealloc];
}

-/* Start of actions.lexer.methods */
-/* start methods() */
+/* ObjC Start of actions.lexer.methods */
+/* ObjC end of actions.lexer.methods */
+/* ObjC start methods() */
+/* ObjC end methods() */

/* Start of Rules */
// $ANTLR start "T__7"
- (void) mT__7
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__7;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:7:6: ( ';' ) // ruleBlockSingleAlt
-        // SimpleC.g:7:8: ';' // alt
+        // SimpleC.g:7:6: ( '(' ) // ruleBlockSingleAlt
+        // SimpleC.g:7:8: '(' // alt
{
-        [self matchChar:';'];
-          /* element() */
-         /* elements */
+        [self matchChar:'('];
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__7"
+/* $ANTLR end "T__7" */

// $ANTLR start "T__8"
- (void) mT__8
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__8;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:8:6: ( '(' ) // ruleBlockSingleAlt
-        // SimpleC.g:8:8: '(' // alt
+        // SimpleC.g:8:6: ( ')' ) // ruleBlockSingleAlt
+        // SimpleC.g:8:8: ')' // alt
{
-        [self matchChar:'('];
-          /* element() */
-         /* elements */
+        [self matchChar:')'];
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__8"
+/* $ANTLR end "T__8" */

// $ANTLR start "T__9"
- (void) mT__9
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__9;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:9:6: ( ',' ) // ruleBlockSingleAlt
-        // SimpleC.g:9:8: ',' // alt
+        // SimpleC.g:9:6: ( '+' ) // ruleBlockSingleAlt
+        // SimpleC.g:9:8: '+' // alt
{
-        [self matchChar:','];
-          /* element() */
-         /* elements */
+        [self matchChar:'+'];
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__9"
+/* $ANTLR end "T__9" */

// $ANTLR start "T__10"
- (void) mT__10
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__10;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:10:7: ( ')' ) // ruleBlockSingleAlt
-        // SimpleC.g:10:9: ')' // alt
+        // SimpleC.g:10:7: ( ',' ) // ruleBlockSingleAlt
+        // SimpleC.g:10:9: ',' // alt
{
-        [self matchChar:')'];
-          /* element() */
-         /* elements */
+        [self matchChar:','];
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__10"
+/* $ANTLR end "T__10" */

// $ANTLR start "T__11"
- (void) mT__11
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__11;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:11:7: ( 'int' ) // ruleBlockSingleAlt
-        // SimpleC.g:11:9: 'int' // alt
+        // SimpleC.g:11:7: ( ';' ) // ruleBlockSingleAlt
+        // SimpleC.g:11:9: ';' // alt
{
-        [self matchString:@"int"];
-          /* element() */
-         /* elements */
+        [self matchChar:';'];
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__11"
+/* $ANTLR end "T__11" */

// $ANTLR start "T__12"
- (void) mT__12
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__12;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:12:7: ( 'char' ) // ruleBlockSingleAlt
-        // SimpleC.g:12:9: 'char' // alt
+        // SimpleC.g:12:7: ( '<' ) // ruleBlockSingleAlt
+        // SimpleC.g:12:9: '<' // alt
{
-        [self matchString:@"char"];
-          /* element() */
-         /* elements */
+        [self matchChar:'<'];
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__12"
+/* $ANTLR end "T__12" */

// $ANTLR start "T__13"
- (void) mT__13
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__13;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:13:7: ( 'void' ) // ruleBlockSingleAlt
-        // SimpleC.g:13:9: 'void' // alt
+        // SimpleC.g:13:7: ( '=' ) // ruleBlockSingleAlt
+        // SimpleC.g:13:9: '=' // alt
{
-        [self matchString:@"void"];
-          /* element() */
-         /* elements */
+        [self matchChar:'='];
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__13"
+/* $ANTLR end "T__13" */

// $ANTLR start "T__14"
- (void) mT__14
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__14;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:14:7: ( '{' ) // ruleBlockSingleAlt
-        // SimpleC.g:14:9: '{' // alt
+        // SimpleC.g:14:7: ( '==' ) // ruleBlockSingleAlt
+        // SimpleC.g:14:9: '==' // alt
{
-        [self matchChar:'{'];
-          /* element() */
-         /* elements */
+        [self matchString:@"=="];
+
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__14"
+/* $ANTLR end "T__14" */

// $ANTLR start "T__15"
- (void) mT__15
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__15;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:15:7: ( '}' ) // ruleBlockSingleAlt
-        // SimpleC.g:15:9: '}' // alt
+        // SimpleC.g:15:7: ( 'char' ) // ruleBlockSingleAlt
+        // SimpleC.g:15:9: 'char' // alt
{
-        [self matchChar:'}'];
-          /* element() */
-         /* elements */
+        [self matchString:@"char"];
+
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__15"
+/* $ANTLR end "T__15" */

// $ANTLR start "T__16"
- (void) mT__16
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__16;
@@ -493,148 +376,166 @@ const static NSInteger dfa4_transition12[] = {23};
// SimpleC.g:16:9: 'for' // alt
{
[self matchString:@"for"];
-          /* element() */
-         /* elements */
+
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__16"
+/* $ANTLR end "T__16" */

// $ANTLR start "T__17"
- (void) mT__17
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__17;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:17:7: ( '=' ) // ruleBlockSingleAlt
-        // SimpleC.g:17:9: '=' // alt
+        // SimpleC.g:17:7: ( 'int' ) // ruleBlockSingleAlt
+        // SimpleC.g:17:9: 'int' // alt
{
-        [self matchChar:'='];
-          /* element() */
-         /* elements */
+        [self matchString:@"int"];
+
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__17"
+/* $ANTLR end "T__17" */

// $ANTLR start "T__18"
- (void) mT__18
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__18;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:18:7: ( '==' ) // ruleBlockSingleAlt
-        // SimpleC.g:18:9: '==' // alt
+        // SimpleC.g:18:7: ( 'void' ) // ruleBlockSingleAlt
+        // SimpleC.g:18:9: 'void' // alt
{
-        [self matchString:@"=="];
-          /* element() */
-         /* elements */
+        [self matchString:@"void"];
+
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__18"
+/* $ANTLR end "T__18" */

// $ANTLR start "T__19"
- (void) mT__19
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__19;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:19:7: ( '<' ) // ruleBlockSingleAlt
-        // SimpleC.g:19:9: '<' // alt
+        // SimpleC.g:19:7: ( '{' ) // ruleBlockSingleAlt
+        // SimpleC.g:19:9: '{' // alt
{
-        [self matchChar:'<'];
-          /* element() */
-         /* elements */
+        [self matchChar:'{'];
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__19"
+/* $ANTLR end "T__19" */

// $ANTLR start "T__20"
- (void) mT__20
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__20;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SimpleC.g:20:7: ( '+' ) // ruleBlockSingleAlt
-        // SimpleC.g:20:9: '+' // alt
+        // SimpleC.g:20:7: ( '}' ) // ruleBlockSingleAlt
+        // SimpleC.g:20:9: '}' // alt
{
-        [self matchChar:'+'];
-          /* element() */
-         /* elements */
+        [self matchChar:'}'];
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__20"
+/* $ANTLR end "T__20" */

// $ANTLR start "ID"
- (void) mID
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = ID;
@@ -644,16 +545,17 @@ const static NSInteger dfa4_transition12[] = {23};
{
if ((([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
-
} else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
+            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
[self recover:mse];
-            @throw mse;}
-          /* element() */
+            @throw mse;
+        }
+
+
do {
NSInteger alt1=2;
NSInteger LA1_0 = [input LA:1];
-            if ( ((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')) ) {
+            if ( ((LA1_0 >= '0' && LA1_0 <= '9')||(LA1_0 >= 'A' && LA1_0 <= 'Z')||LA1_0=='_'||(LA1_0 >= 'a' && LA1_0 <= 'z')) ) {
alt1=1;
}

@@ -664,13 +566,13 @@ const static NSInteger dfa4_transition12[] = {23};
{
if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))||(([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
-
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
+                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
[self recover:mse];
-                        @throw mse;}
-                      /* element() */
-                     /* elements */
+                        @throw mse;
+                    }
+
+
}
break;

@@ -679,28 +581,31 @@ const static NSInteger dfa4_transition12[] = {23};
}
} while (YES);
loop1: ;
-          /* element() */
-         /* elements */
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "ID"
+/* $ANTLR end "ID" */

// $ANTLR start "INT"
- (void) mINT
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = INT;
@@ -709,55 +614,66 @@ const static NSInteger dfa4_transition12[] = {23};
// SimpleC.g:97:7: ( '0' .. '9' )+ // alt
{
// SimpleC.g:97:7: ( '0' .. '9' )+ // positiveClosureBlock
-        NSInteger cnt2=0;
+        NSInteger cnt2 = 0;
do {
-            NSInteger alt2=2;
+            NSInteger alt2 = 2;
NSInteger LA2_0 = [input LA:1];
-            if ( ((LA2_0>='0' && LA2_0<='9')) ) {
+            if ( ((LA2_0 >= '0' && LA2_0 <= '9')) ) {
alt2=1;
}


switch (alt2) {
case 1 : ;
-                    // SimpleC.g:97:8: '0' .. '9' // alt
+                    // SimpleC.g: // alt
{
-                    [self matchRangeFromChar:'0' to:'9'];   /* element() */
-                     /* elements */
+                    if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))) {
+                        [input consume];
+                    } else {
+                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        [self recover:mse];
+                        @throw mse;
+                    }
+
+
}
break;

default :
if ( cnt2 >= 1 )
goto loop2;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:2];
+                    ANTLREarlyExitException *eee =
+                        [ANTLREarlyExitException newException:input decisionNumber:2];
@throw eee;
}
cnt2++;
} while (YES);
loop2: ;
-          /* element() */
-         /* elements */
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "INT"
+/* $ANTLR end "INT" */

// $ANTLR start "WS"
- (void) mWS
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = WS;
@@ -766,11 +682,11 @@ const static NSInteger dfa4_transition12[] = {23};
// SimpleC.g:100:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // alt
{
// SimpleC.g:100:9: ( ' ' | '\\t' | '\\r' | '\\n' )+ // positiveClosureBlock
-        NSInteger cnt3=0;
+        NSInteger cnt3 = 0;
do {
-            NSInteger alt3=2;
+            NSInteger alt3 = 2;
NSInteger LA3_0 = [input LA:1];
-            if ( ((LA3_0>='\t' && LA3_0<='\n')||LA3_0=='\r'||LA3_0==' ') ) {
+            if ( ((LA3_0 >= '\t' && LA3_0 <= '\n')||LA3_0=='\r'||LA3_0==' ') ) {
alt3=1;
}

@@ -781,183 +697,459 @@ const static NSInteger dfa4_transition12[] = {23};
{
if ((([input LA:1] >= '\t') && ([input LA:1] <= '\n'))||[input LA:1] == '\r'||[input LA:1] == ' ') {
[input consume];
-
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
+                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
[self recover:mse];
-                        @throw mse;}
-                      /* element() */
-                     /* elements */
+                        @throw mse;
+                    }
+
+
}
break;

default :
if ( cnt3 >= 1 )
goto loop3;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:3];
+                    ANTLREarlyExitException *eee =
+                        [ANTLREarlyExitException newException:input decisionNumber:3];
@throw eee;
}
cnt3++;
} while (YES);
loop3: ;
-          /* element() */
-         _channel=99;   /* element() */
-         /* elements */
+
+
+         _channel=HIDDEN;
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "WS"
+/* $ANTLR end "WS" */

- (void) mTokens
{
// SimpleC.g:1:8: ( T__7 | T__8 | T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | ID | INT | WS ) //ruleblock
NSInteger alt4=17;
-    alt4 = [dfa4 predict:input];
+    unichar charLA4 = [input LA:1];
+    switch (charLA4) {
+        case '(': ;
+            {
+            alt4=1;
+            }
+            break;
+        case ')': ;
+            {
+            alt4=2;
+            }
+            break;
+        case '+': ;
+            {
+            alt4=3;
+            }
+            break;
+        case ',': ;
+            {
+            alt4=4;
+            }
+            break;
+        case ';': ;
+            {
+            alt4=5;
+            }
+            break;
+        case '<': ;
+            {
+            alt4=6;
+            }
+            break;
+        case '=': ;
+            {
+            NSInteger LA4_7 = [input LA:2];
+
+            if ( (LA4_7=='=') ) {
+                alt4=8;
+            }
+            else {
+                alt4 = 7;
+            }
+            }
+            break;
+        case 'c': ;
+            {
+            NSInteger LA4_8 = [input LA:2];
+
+            if ( (LA4_8=='h') ) {
+                NSInteger LA4_19 = [input LA:3];
+
+                if ( (LA4_19=='a') ) {
+                    NSInteger LA4_23 = [input LA:4];
+
+                    if ( (LA4_23=='r') ) {
+                        NSInteger LA4_27 = [input LA:5];
+
+                        if ( ((LA4_27 >= '0' && LA4_27 <= '9')||(LA4_27 >= 'A' && LA4_27 <= 'Z')||LA4_27=='_'||(LA4_27 >= 'a' && LA4_27 <= 'z')) ) {
+                            alt4=15;
+                        }
+                        else {
+                            alt4 = 9;
+                        }
+                    }
+                    else {
+                        alt4 = 15;
+                    }
+                }
+                else {
+                    alt4 = 15;
+                }
+            }
+            else {
+                alt4 = 15;
+            }
+            }
+            break;
+        case 'f': ;
+            {
+            NSInteger LA4_9 = [input LA:2];
+
+            if ( (LA4_9=='o') ) {
+                NSInteger LA4_20 = [input LA:3];
+
+                if ( (LA4_20=='r') ) {
+                    NSInteger LA4_24 = [input LA:4];
+
+                    if ( ((LA4_24 >= '0' && LA4_24 <= '9')||(LA4_24 >= 'A' && LA4_24 <= 'Z')||LA4_24=='_'||(LA4_24 >= 'a' && LA4_24 <= 'z')) ) {
+                        alt4=15;
+                    }
+                    else {
+                        alt4 = 10;
+                    }
+                }
+                else {
+                    alt4 = 15;
+                }
+            }
+            else {
+                alt4 = 15;
+            }
+            }
+            break;
+        case 'i': ;
+            {
+            NSInteger LA4_10 = [input LA:2];
+
+            if ( (LA4_10=='n') ) {
+                NSInteger LA4_21 = [input LA:3];
+
+                if ( (LA4_21=='t') ) {
+                    NSInteger LA4_25 = [input LA:4];
+
+                    if ( ((LA4_25 >= '0' && LA4_25 <= '9')||(LA4_25 >= 'A' && LA4_25 <= 'Z')||LA4_25=='_'||(LA4_25 >= 'a' && LA4_25 <= 'z')) ) {
+                        alt4=15;
+                    }
+                    else {
+                        alt4 = 11;
+                    }
+                }
+                else {
+                    alt4 = 15;
+                }
+            }
+            else {
+                alt4 = 15;
+            }
+            }
+            break;
+        case 'v': ;
+            {
+            NSInteger LA4_11 = [input LA:2];
+
+            if ( (LA4_11=='o') ) {
+                NSInteger LA4_22 = [input LA:3];
+
+                if ( (LA4_22=='i') ) {
+                    NSInteger LA4_26 = [input LA:4];
+
+                    if ( (LA4_26=='d') ) {
+                        NSInteger LA4_30 = [input LA:5];
+
+                        if ( ((LA4_30 >= '0' && LA4_30 <= '9')||(LA4_30 >= 'A' && LA4_30 <= 'Z')||LA4_30=='_'||(LA4_30 >= 'a' && LA4_30 <= 'z')) ) {
+                            alt4=15;
+                        }
+                        else {
+                            alt4 = 12;
+                        }
+                    }
+                    else {
+                        alt4 = 15;
+                    }
+                }
+                else {
+                    alt4 = 15;
+                }
+            }
+            else {
+                alt4 = 15;
+            }
+            }
+            break;
+        case '{': ;
+            {
+            alt4=13;
+            }
+            break;
+        case '}': ;
+            {
+            alt4=14;
+            }
+            break;
+        case 'A': ;
+        case 'B': ;
+        case 'C': ;
+        case 'D': ;
+        case 'E': ;
+        case 'F': ;
+        case 'G': ;
+        case 'H': ;
+        case 'I': ;
+        case 'J': ;
+        case 'K': ;
+        case 'L': ;
+        case 'M': ;
+        case 'N': ;
+        case 'O': ;
+        case 'P': ;
+        case 'Q': ;
+        case 'R': ;
+        case 'S': ;
+        case 'T': ;
+        case 'U': ;
+        case 'V': ;
+        case 'W': ;
+        case 'X': ;
+        case 'Y': ;
+        case 'Z': ;
+        case '_': ;
+        case 'a': ;
+        case 'b': ;
+        case 'd': ;
+        case 'e': ;
+        case 'g': ;
+        case 'h': ;
+        case 'j': ;
+        case 'k': ;
+        case 'l': ;
+        case 'm': ;
+        case 'n': ;
+        case 'o': ;
+        case 'p': ;
+        case 'q': ;
+        case 'r': ;
+        case 's': ;
+        case 't': ;
+        case 'u': ;
+        case 'w': ;
+        case 'x': ;
+        case 'y': ;
+        case 'z': ;
+            {
+            alt4=15;
+            }
+            break;
+        case '0': ;
+        case '1': ;
+        case '2': ;
+        case '3': ;
+        case '4': ;
+        case '5': ;
+        case '6': ;
+        case '7': ;
+        case '8': ;
+        case '9': ;
+            {
+            alt4=16;
+            }
+            break;
+        case '\t': ;
+        case '\n': ;
+        case '\r': ;
+        case ' ': ;
+            {
+            alt4=17;
+            }
+            break;
+
+    default: ;
+        ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:4 state:0 stream:input];
+        nvae.c = charLA4;
+        @throw nvae;
+
+    }
+
switch (alt4) {
case 1 : ;
// SimpleC.g:1:10: T__7 // alt
{
-                [self mT__7];
-              /* element() */
-             /* elements */
+            [self mT__7];
+
+
+
}
break;
case 2 : ;
// SimpleC.g:1:15: T__8 // alt
{
-                [self mT__8];
-              /* element() */
-             /* elements */
+            [self mT__8];
+
+
+
}
break;
case 3 : ;
// SimpleC.g:1:20: T__9 // alt
{
-                [self mT__9];
-              /* element() */
-             /* elements */
+            [self mT__9];
+
+
+
}
break;
case 4 : ;
// SimpleC.g:1:25: T__10 // alt
{
-                [self mT__10];
-              /* element() */
-             /* elements */
+            [self mT__10];
+
+
+
}
break;
case 5 : ;
// SimpleC.g:1:31: T__11 // alt
{
-                [self mT__11];
-              /* element() */
-             /* elements */
+            [self mT__11];
+
+
+
}
break;
case 6 : ;
// SimpleC.g:1:37: T__12 // alt
{
-                [self mT__12];
-              /* element() */
-             /* elements */
+            [self mT__12];
+
+
+
}
break;
case 7 : ;
// SimpleC.g:1:43: T__13 // alt
{
-                [self mT__13];
-              /* element() */
-             /* elements */
+            [self mT__13];
+
+
+
}
break;
case 8 : ;
// SimpleC.g:1:49: T__14 // alt
{
-                [self mT__14];
-              /* element() */
-             /* elements */
+            [self mT__14];
+
+
+
}
break;
case 9 : ;
// SimpleC.g:1:55: T__15 // alt
{
-                [self mT__15];
-              /* element() */
-             /* elements */
+            [self mT__15];
+
+
+
}
break;
case 10 : ;
// SimpleC.g:1:61: T__16 // alt
{
-                [self mT__16];
-              /* element() */
-             /* elements */
+            [self mT__16];
+
+
+
}
break;
case 11 : ;
// SimpleC.g:1:67: T__17 // alt
{
-                [self mT__17];
-              /* element() */
-             /* elements */
+            [self mT__17];
+
+
+
}
break;
case 12 : ;
// SimpleC.g:1:73: T__18 // alt
{
-                [self mT__18];
-              /* element() */
-             /* elements */
+            [self mT__18];
+
+
+
}
break;
case 13 : ;
// SimpleC.g:1:79: T__19 // alt
{
-                [self mT__19];
-              /* element() */
-             /* elements */
+            [self mT__19];
+
+
+
}
break;
case 14 : ;
// SimpleC.g:1:85: T__20 // alt
{
-                [self mT__20];
-              /* element() */
-             /* elements */
+            [self mT__20];
+
+
+
}
break;
case 15 : ;
// SimpleC.g:1:91: ID // alt
{
-                [self mID];
-              /* element() */
-             /* elements */
+            [self mID];
+
+
+
}
break;
case 16 : ;
// SimpleC.g:1:94: INT // alt
{
-                [self mINT];
-              /* element() */
-             /* elements */
+            [self mINT];
+
+
+
}
break;
case 17 : ;
// SimpleC.g:1:98: WS // alt
{
-                [self mWS];
-              /* element() */
-             /* elements */
+            [self mWS];
+
+
+
}
break;

@@ -965,8 +1157,4 @@ const static NSInteger dfa4_transition12[] = {23};

}

-@end /* end of SimpleCLexer implementation line 397 */
-
-/* End of code
- * =============================================================================
- */
+@end /* end of SimpleCLexer implementation line 397 */
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/examples/LL-star/SimpleCParser.h b/runtime/ObjC/Framework/examples/LL-star/SimpleCParser.h
index 239c0c5..6e3b2af 100644
--- a/runtime/ObjC/Framework/examples/LL-star/SimpleCParser.h
+++ b/runtime/ObjC/Framework/examples/LL-star/SimpleCParser.h
@@ -1,15 +1,27 @@
-// $ANTLR 3.2 Aug 24, 2010 10:45:57 SimpleC.g 2010-08-24 13:53:43
+// $ANTLR ${project.version} ${buildNumber} SimpleC.g 2011-05-06 13:53:12

/* =============================================================================
* Standard antlr3 OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
+#import <ANTLR/ANTLR.h>
/* End of standard antlr3 runtime definitions
* =============================================================================
*/

/* parserHeaderFile */
+#ifndef ANTLR3TokenTypeAlreadyDefined
+#define ANTLR3TokenTypeAlreadyDefined
+typedef enum {
+    ANTLR_EOF = -1,
+    INVALID,
+    EOR,
+    DOWN,
+    UP,
+    MIN
+} ANTLR3TokenType;
+#endif
+
#pragma mark Cyclic DFA interface start DFA2
@interface DFA2 : ANTLRDFA {
}
@@ -18,50 +30,69 @@
@end /* end of DFA2 interface  */

#pragma mark Cyclic DFA interface end DFA2
+
#pragma mark Tokens
-#define T__20 20
-#define INT 5
-#define ID 4
+#ifdef EOF
+#undef EOF
+#endif
#define EOF -1
-#define T__9 9
-#define T__8 8
#define T__7 7
-#define T__19 19
-#define WS 6
-#define T__16 16
-#define T__15 15
-#define T__18 18
-#define T__17 17
-#define T__12 12
+#define T__8 8
+#define T__9 9
+#define T__10 10
#define T__11 11
-#define T__14 14
+#define T__12 12
#define T__13 13
-#define T__10 10
+#define T__14 14
+#define T__15 15
+#define T__16 16
+#define T__17 17
+#define T__18 18
+#define T__19 19
+#define T__20 20
+#define ID 4
+#define INT 5
+#define WS 6
#pragma mark Dynamic Global Scopes
#pragma mark Dynamic Rule Scopes
#pragma mark Rule Return Scopes start
-#pragma mark Rule return scopes end
+
+/* Interface grammar class */
@interface SimpleCParser : ANTLRParser { /* line 572 */
-// start of globalAttributeScopeMemVar
+/* ObjC start of ruleAttributeScopeMemVar */


-// start of action-actionScope-memVars
-// start of ruleAttributeScopeMemVar
+/* ObjC end of ruleAttributeScopeMemVar */
+/* ObjC start of globalAttributeScopeMemVar */


-// Start of memVars
+/* ObjC end of globalAttributeScopeMemVar */
+/* ObjC start of actions.(actionScope).memVars */
+/* ObjC end of actions.(actionScope).memVars */
+/* ObjC start of memVars */
+/* ObjC end of memVars */

DFA2 *dfa2;
}

-// start of action-actionScope-methodsDecl
+/* ObjC start of actions.(actionScope).properties */
+/* ObjC end of actions.(actionScope).properties */
+/* ObjC start of properties */
+/* ObjC end of properties */

++ (void) initialize;
++ (id) newSimpleCParser:(id<ANTLRTokenStream>)aStream;
+/* ObjC start of actions.(actionScope).methodsDecl */
+/* ObjC end of actions.(actionScope).methodsDecl */
+
+/* ObjC start of methodsDecl */
+/* ObjC end of methodsDecl */

- (void)program;
- (void)declaration;
- (void)variable;
- (void)declarator;
-- (NSString*)functionHeader;
+- (NSString *)functionHeader;
- (void)formalParameter;
- (void)type;
- (void)block;
@@ -75,3 +106,4 @@ DFA2 *dfa2;


@end /* end of SimpleCParser interface */
+
diff --git a/runtime/ObjC/Framework/examples/LL-star/SimpleCParser.m b/runtime/ObjC/Framework/examples/LL-star/SimpleCParser.m
index e8f6855..e65a149 100644
--- a/runtime/ObjC/Framework/examples/LL-star/SimpleCParser.m
+++ b/runtime/ObjC/Framework/examples/LL-star/SimpleCParser.m
@@ -1,43 +1,18 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version 3.2 Aug 24, 2010 10:45:57
+ *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
*
*     -  From the grammar source file : SimpleC.g
- *     -                            On : 2010-08-24 13:53:43
- *     -                for the parser : SimpleCParserParser *
- * Editing it, at least manually, is not wise.
+ *     -                            On : 2011-05-06 13:53:12
+ *     -                for the parser : SimpleCParserParser
+ *
+ * Editing it, at least manually, is not wise.
*
* ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
*
*
*/
-// [The "BSD licence"]
-// Copyright (c) 2010 Alan Condit
-//
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. The name of the author may not be used to endorse or promote products
-//    derived from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// $ANTLR 3.2 Aug 24, 2010 10:45:57 SimpleC.g 2010-08-24 13:53:43
+// $ANTLR ${project.version} ${buildNumber} SimpleC.g 2011-05-06 13:53:12
+

/* -----------------------------------------
* Include the ANTLR3 generated header file.
@@ -47,12 +22,9 @@


/* ============================================================================= */
-
/* =============================================================================
* Start of recognizer
*/
-
-
#pragma mark Cyclic DFA implementation start DFA2
@implementation DFA2
const static NSInteger dfa2_eot[13] =
@@ -60,37 +32,38 @@ const static NSInteger dfa2_eot[13] =
const static NSInteger dfa2_eof[13] =
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const static unichar dfa2_min[13] =
-    {4,4,7,4,0,4,7,9,0,0,4,4,9};
+    {4,4,7,4,0,4,11,8,0,0,4,4,8};
const static unichar dfa2_max[13] =
-    {13,4,8,13,0,4,14,10,0,0,13,4,10};
+    {18,4,11,18,0,4,19,10,0,0,18,4,10};
const static NSInteger dfa2_accept[13] =
{-1,-1,-1,-1,1,-1,-1,-1,2,3,-1,-1,-1};
const static NSInteger dfa2_special[13] =
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const static NSInteger dfa2_transition[] = {};
-const static NSInteger dfa2_transition0[] = {4, 3};
-const static NSInteger dfa2_transition1[] = {10, 6};
+const static NSInteger dfa2_transition0[] = {3, -1, -1, -1, 4};
+const static NSInteger dfa2_transition1[] = {6, -1, 10};
const static NSInteger dfa2_transition2[] = {8, -1, -1, -1, -1, -1, -1,
- 9};
+ -1, 9};
const static NSInteger dfa2_transition3[] = {2};
const static NSInteger dfa2_transition4[] = {1, -1, -1, -1, -1, -1, -1,
- 1, 1, 1};
+ -1, -1, -1, -1, 1, -1, 1, 1};
const static NSInteger dfa2_transition5[] = {7};
const static NSInteger dfa2_transition6[] = {11, -1, -1, -1, -1, -1, -1,
- 11, 11, 11};
+ -1, -1, -1, -1, 11, -1, 11, 11};
const static NSInteger dfa2_transition7[] = {12};
-const static NSInteger dfa2_transition8[] = {5, -1, -1, -1, -1, -1, 6, 5,
- 5, 5};
+const static NSInteger dfa2_transition8[] = {5, -1, -1, -1, 6, -1, -1, -1,
+ -1, -1, -1, 5, -1, 5, 5};


-+ () newDFA2WithRecognizer:(ANTLRBaseRecognizer *)aRecognizer
++ (id) newDFA2WithRecognizer:(ANTLRBaseRecognizer *)aRecognizer
{
return [[[DFA2 alloc] initWithRecognizer:aRecognizer] retain];
}

- (id) initWithRecognizer:(ANTLRBaseRecognizer *) theRecognizer
{
-    if ((self = [super initWithRecognizer:theRecognizer]) != nil) {
+    self = [super initWithRecognizer:theRecognizer];
+    if ( self != nil ) {
decisionNumber = 2;
eot = dfa2_eot;
eof = dfa2_eof;
@@ -107,15 +80,15 @@ const static NSInteger dfa2_transition8[] = {5, -1, -1, -1, -1, -1, 6, 5,
transition[1] = dfa2_transition3;
transition[2] = dfa2_transition0;
transition[3] = dfa2_transition8;
-        transition[4] = dfa2_transition;
-        transition[5] = dfa2_transition5;
-        transition[6] = dfa2_transition2;
-        transition[7] = dfa2_transition1;
-        transition[8] = dfa2_transition;
-        transition[9] = dfa2_transition;
-        transition[10] = dfa2_transition6;
-        transition[11] = dfa2_transition7;
-        transition[12] = dfa2_transition1;
+
+        transition[4] = dfa2_transition5;
+        transition[5] = dfa2_transition2;
+        transition[6] = dfa2_transition1;
+
+
+        transition[7] = dfa2_transition6;
+        transition[8] = dfa2_transition7;
+        transition[9] = dfa2_transition1;
}
return self;
}
@@ -128,7 +101,7 @@ const static NSInteger dfa2_transition8[] = {5, -1, -1, -1, -1, -1, 6, 5,

- (NSString *) description
{
-    return @"11:1: declaration : ( variable | functionHeader ';' | functionHeader block );";
+    return @"20:1: declaration : ( variable | functionHeader ';' | functionHeader block );";
}


@@ -139,234 +112,217 @@ const static NSInteger dfa2_transition8[] = {5, -1, -1, -1, -1, -1, 6, 5,


#pragma mark Bitsets
-static ANTLRBitSet *FOLLOW_declaration_in_program27;
-static const unsigned long long FOLLOW_declaration_in_program27_data[] = { 0x0000000000003812LL};
-static ANTLRBitSet *FOLLOW_variable_in_declaration49;
-static const unsigned long long FOLLOW_variable_in_declaration49_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_functionHeader_in_declaration59;
-static const unsigned long long FOLLOW_functionHeader_in_declaration59_data[] = { 0x0000000000000080LL};
-static ANTLRBitSet *FOLLOW_7_in_declaration61;
-static const unsigned long long FOLLOW_7_in_declaration61_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_functionHeader_in_declaration74;
-static const unsigned long long FOLLOW_functionHeader_in_declaration74_data[] = { 0x0000000000004000LL};
-static ANTLRBitSet *FOLLOW_block_in_declaration76;
-static const unsigned long long FOLLOW_block_in_declaration76_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_type_in_variable98;
-static const unsigned long long FOLLOW_type_in_variable98_data[] = { 0x0000000000000010LL};
-static ANTLRBitSet *FOLLOW_declarator_in_variable100;
-static const unsigned long long FOLLOW_declarator_in_variable100_data[] = { 0x0000000000000080LL};
-static ANTLRBitSet *FOLLOW_7_in_variable102;
-static const unsigned long long FOLLOW_7_in_variable102_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_ID_in_declarator121;
-static const unsigned long long FOLLOW_ID_in_declarator121_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_type_in_functionHeader150;
-static const unsigned long long FOLLOW_type_in_functionHeader150_data[] = { 0x0000000000000010LL};
-static ANTLRBitSet *FOLLOW_ID_in_functionHeader152;
-static const unsigned long long FOLLOW_ID_in_functionHeader152_data[] = { 0x0000000000000100LL};
-static ANTLRBitSet *FOLLOW_8_in_functionHeader154;
-static const unsigned long long FOLLOW_8_in_functionHeader154_data[] = { 0x0000000000003C10LL};
-static ANTLRBitSet *FOLLOW_formalParameter_in_functionHeader158;
-static const unsigned long long FOLLOW_formalParameter_in_functionHeader158_data[] = { 0x0000000000000600LL};
-static ANTLRBitSet *FOLLOW_9_in_functionHeader162;
-static const unsigned long long FOLLOW_9_in_functionHeader162_data[] = { 0x0000000000003810LL};
-static ANTLRBitSet *FOLLOW_formalParameter_in_functionHeader164;
-static const unsigned long long FOLLOW_formalParameter_in_functionHeader164_data[] = { 0x0000000000000600LL};
-static ANTLRBitSet *FOLLOW_10_in_functionHeader172;
-static const unsigned long long FOLLOW_10_in_functionHeader172_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_type_in_formalParameter194;
-static const unsigned long long FOLLOW_type_in_formalParameter194_data[] = { 0x0000000000000010LL};
-static ANTLRBitSet *FOLLOW_declarator_in_formalParameter196;
-static const unsigned long long FOLLOW_declarator_in_formalParameter196_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_set_in_type0;
-static const unsigned long long FOLLOW_set_in_type0_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_14_in_block285;
-static const unsigned long long FOLLOW_14_in_block285_data[] = { 0x000000000001F9B0LL};
-static ANTLRBitSet *FOLLOW_variable_in_block299;
-static const unsigned long long FOLLOW_variable_in_block299_data[] = { 0x000000000001F9B0LL};
-static ANTLRBitSet *FOLLOW_stat_in_block314;
-static const unsigned long long FOLLOW_stat_in_block314_data[] = { 0x000000000001C1B0LL};
-static ANTLRBitSet *FOLLOW_15_in_block325;
-static const unsigned long long FOLLOW_15_in_block325_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_forStat_in_stat337;
-static const unsigned long long FOLLOW_forStat_in_stat337_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_expr_in_stat345;
-static const unsigned long long FOLLOW_expr_in_stat345_data[] = { 0x0000000000000080LL};
-static ANTLRBitSet *FOLLOW_7_in_stat347;
-static const unsigned long long FOLLOW_7_in_stat347_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_block_in_stat361;
-static const unsigned long long FOLLOW_block_in_stat361_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_assignStat_in_stat369;
-static const unsigned long long FOLLOW_assignStat_in_stat369_data[] = { 0x0000000000000080LL};
-static ANTLRBitSet *FOLLOW_7_in_stat371;
-static const unsigned long long FOLLOW_7_in_stat371_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_7_in_stat379;
-static const unsigned long long FOLLOW_7_in_stat379_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_16_in_forStat398;
-static const unsigned long long FOLLOW_16_in_forStat398_data[] = { 0x0000000000000100LL};
-static ANTLRBitSet *FOLLOW_8_in_forStat400;
-static const unsigned long long FOLLOW_8_in_forStat400_data[] = { 0x0000000000000010LL};
-static ANTLRBitSet *FOLLOW_assignStat_in_forStat402;
-static const unsigned long long FOLLOW_assignStat_in_forStat402_data[] = { 0x0000000000000080LL};
-static ANTLRBitSet *FOLLOW_7_in_forStat404;
-static const unsigned long long FOLLOW_7_in_forStat404_data[] = { 0x0000000000000130LL};
-static ANTLRBitSet *FOLLOW_expr_in_forStat406;
-static const unsigned long long FOLLOW_expr_in_forStat406_data[] = { 0x0000000000000080LL};
-static ANTLRBitSet *FOLLOW_7_in_forStat408;
-static const unsigned long long FOLLOW_7_in_forStat408_data[] = { 0x0000000000000010LL};
-static ANTLRBitSet *FOLLOW_assignStat_in_forStat410;
-static const unsigned long long FOLLOW_assignStat_in_forStat410_data[] = { 0x0000000000000400LL};
-static ANTLRBitSet *FOLLOW_10_in_forStat412;
-static const unsigned long long FOLLOW_10_in_forStat412_data[] = { 0x0000000000004000LL};
-static ANTLRBitSet *FOLLOW_block_in_forStat414;
-static const unsigned long long FOLLOW_block_in_forStat414_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_ID_in_assignStat441;
-static const unsigned long long FOLLOW_ID_in_assignStat441_data[] = { 0x0000000000020000LL};
-static ANTLRBitSet *FOLLOW_17_in_assignStat443;
-static const unsigned long long FOLLOW_17_in_assignStat443_data[] = { 0x0000000000000130LL};
-static ANTLRBitSet *FOLLOW_expr_in_assignStat445;
-static const unsigned long long FOLLOW_expr_in_assignStat445_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_condExpr_in_expr467;
-static const unsigned long long FOLLOW_condExpr_in_expr467_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_aexpr_in_condExpr486;
-static const unsigned long long FOLLOW_aexpr_in_condExpr486_data[] = { 0x00000000000C0002LL};
-static ANTLRBitSet *FOLLOW_set_in_condExpr490;
-static const unsigned long long FOLLOW_set_in_condExpr490_data[] = { 0x0000000000000130LL};
-static ANTLRBitSet *FOLLOW_aexpr_in_condExpr498;
-static const unsigned long long FOLLOW_aexpr_in_condExpr498_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_atom_in_aexpr520;
-static const unsigned long long FOLLOW_atom_in_aexpr520_data[] = { 0x0000000000100002LL};
-static ANTLRBitSet *FOLLOW_20_in_aexpr524;
-static const unsigned long long FOLLOW_20_in_aexpr524_data[] = { 0x0000000000000130LL};
-static ANTLRBitSet *FOLLOW_atom_in_aexpr526;
-static const unsigned long long FOLLOW_atom_in_aexpr526_data[] = { 0x0000000000100002LL};
-static ANTLRBitSet *FOLLOW_ID_in_atom546;
-static const unsigned long long FOLLOW_ID_in_atom546_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_INT_in_atom560;
-static const unsigned long long FOLLOW_INT_in_atom560_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_8_in_atom574;
-static const unsigned long long FOLLOW_8_in_atom574_data[] = { 0x0000000000000130LL};
-static ANTLRBitSet *FOLLOW_expr_in_atom576;
-static const unsigned long long FOLLOW_expr_in_atom576_data[] = { 0x0000000000000400LL};
-static ANTLRBitSet *FOLLOW_10_in_atom578;
-static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_declaration_in_program28;
+static const unsigned long long FOLLOW_declaration_in_program28_data[] = { 0x0000000000068012LL};
+static ANTLRBitSet *FOLLOW_variable_in_declaration50;
+static const unsigned long long FOLLOW_variable_in_declaration50_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_functionHeader_in_declaration60;
+static const unsigned long long FOLLOW_functionHeader_in_declaration60_data[] = { 0x0000000000000800LL};
+static ANTLRBitSet *FOLLOW_11_in_declaration62;
+static const unsigned long long FOLLOW_11_in_declaration62_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_functionHeader_in_declaration75;
+static const unsigned long long FOLLOW_functionHeader_in_declaration75_data[] = { 0x0000000000080000LL};
+static ANTLRBitSet *FOLLOW_block_in_declaration77;
+static const unsigned long long FOLLOW_block_in_declaration77_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_type_in_variable99;
+static const unsigned long long FOLLOW_type_in_variable99_data[] = { 0x0000000000000010LL};
+static ANTLRBitSet *FOLLOW_declarator_in_variable101;
+static const unsigned long long FOLLOW_declarator_in_variable101_data[] = { 0x0000000000000800LL};
+static ANTLRBitSet *FOLLOW_11_in_variable103;
+static const unsigned long long FOLLOW_11_in_variable103_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_ID_in_declarator122;
+static const unsigned long long FOLLOW_ID_in_declarator122_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_type_in_functionHeader151;
+static const unsigned long long FOLLOW_type_in_functionHeader151_data[] = { 0x0000000000000010LL};
+static ANTLRBitSet *FOLLOW_ID_in_functionHeader153;
+static const unsigned long long FOLLOW_ID_in_functionHeader153_data[] = { 0x0000000000000080LL};
+static ANTLRBitSet *FOLLOW_7_in_functionHeader155;
+static const unsigned long long FOLLOW_7_in_functionHeader155_data[] = { 0x0000000000068110LL};
+static ANTLRBitSet *FOLLOW_formalParameter_in_functionHeader159;
+static const unsigned long long FOLLOW_formalParameter_in_functionHeader159_data[] = { 0x0000000000000500LL};
+static ANTLRBitSet *FOLLOW_10_in_functionHeader163;
+static const unsigned long long FOLLOW_10_in_functionHeader163_data[] = { 0x0000000000068010LL};
+static ANTLRBitSet *FOLLOW_formalParameter_in_functionHeader165;
+static const unsigned long long FOLLOW_formalParameter_in_functionHeader165_data[] = { 0x0000000000000500LL};
+static ANTLRBitSet *FOLLOW_8_in_functionHeader173;
+static const unsigned long long FOLLOW_8_in_functionHeader173_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_type_in_formalParameter195;
+static const unsigned long long FOLLOW_type_in_formalParameter195_data[] = { 0x0000000000000010LL};
+static ANTLRBitSet *FOLLOW_declarator_in_formalParameter197;
+static const unsigned long long FOLLOW_declarator_in_formalParameter197_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_19_in_block286;
+static const unsigned long long FOLLOW_19_in_block286_data[] = { 0x00000000001F88B0LL};
+static ANTLRBitSet *FOLLOW_variable_in_block300;
+static const unsigned long long FOLLOW_variable_in_block300_data[] = { 0x00000000001F88B0LL};
+static ANTLRBitSet *FOLLOW_stat_in_block315;
+static const unsigned long long FOLLOW_stat_in_block315_data[] = { 0x00000000001908B0LL};
+static ANTLRBitSet *FOLLOW_20_in_block326;
+static const unsigned long long FOLLOW_20_in_block326_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_forStat_in_stat338;
+static const unsigned long long FOLLOW_forStat_in_stat338_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_expr_in_stat346;
+static const unsigned long long FOLLOW_expr_in_stat346_data[] = { 0x0000000000000800LL};
+static ANTLRBitSet *FOLLOW_11_in_stat348;
+static const unsigned long long FOLLOW_11_in_stat348_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_block_in_stat362;
+static const unsigned long long FOLLOW_block_in_stat362_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_assignStat_in_stat370;
+static const unsigned long long FOLLOW_assignStat_in_stat370_data[] = { 0x0000000000000800LL};
+static ANTLRBitSet *FOLLOW_11_in_stat372;
+static const unsigned long long FOLLOW_11_in_stat372_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_11_in_stat380;
+static const unsigned long long FOLLOW_11_in_stat380_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_16_in_forStat399;
+static const unsigned long long FOLLOW_16_in_forStat399_data[] = { 0x0000000000000080LL};
+static ANTLRBitSet *FOLLOW_7_in_forStat401;
+static const unsigned long long FOLLOW_7_in_forStat401_data[] = { 0x0000000000000010LL};
+static ANTLRBitSet *FOLLOW_assignStat_in_forStat403;
+static const unsigned long long FOLLOW_assignStat_in_forStat403_data[] = { 0x0000000000000800LL};
+static ANTLRBitSet *FOLLOW_11_in_forStat405;
+static const unsigned long long FOLLOW_11_in_forStat405_data[] = { 0x00000000000000B0LL};
+static ANTLRBitSet *FOLLOW_expr_in_forStat407;
+static const unsigned long long FOLLOW_expr_in_forStat407_data[] = { 0x0000000000000800LL};
+static ANTLRBitSet *FOLLOW_11_in_forStat409;
+static const unsigned long long FOLLOW_11_in_forStat409_data[] = { 0x0000000000000010LL};
+static ANTLRBitSet *FOLLOW_assignStat_in_forStat411;
+static const unsigned long long FOLLOW_assignStat_in_forStat411_data[] = { 0x0000000000000100LL};
+static ANTLRBitSet *FOLLOW_8_in_forStat413;
+static const unsigned long long FOLLOW_8_in_forStat413_data[] = { 0x0000000000080000LL};
+static ANTLRBitSet *FOLLOW_block_in_forStat415;
+static const unsigned long long FOLLOW_block_in_forStat415_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_ID_in_assignStat442;
+static const unsigned long long FOLLOW_ID_in_assignStat442_data[] = { 0x0000000000002000LL};
+static ANTLRBitSet *FOLLOW_13_in_assignStat444;
+static const unsigned long long FOLLOW_13_in_assignStat444_data[] = { 0x00000000000000B0LL};
+static ANTLRBitSet *FOLLOW_expr_in_assignStat446;
+static const unsigned long long FOLLOW_expr_in_assignStat446_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_condExpr_in_expr468;
+static const unsigned long long FOLLOW_condExpr_in_expr468_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_aexpr_in_condExpr487;
+static const unsigned long long FOLLOW_aexpr_in_condExpr487_data[] = { 0x0000000000005002LL};
+static ANTLRBitSet *FOLLOW_set_in_condExpr491;
+static const unsigned long long FOLLOW_set_in_condExpr491_data[] = { 0x00000000000000B0LL};
+static ANTLRBitSet *FOLLOW_aexpr_in_condExpr499;
+static const unsigned long long FOLLOW_aexpr_in_condExpr499_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_atom_in_aexpr521;
+static const unsigned long long FOLLOW_atom_in_aexpr521_data[] = { 0x0000000000000202LL};
+static ANTLRBitSet *FOLLOW_9_in_aexpr525;
+static const unsigned long long FOLLOW_9_in_aexpr525_data[] = { 0x00000000000000B0LL};
+static ANTLRBitSet *FOLLOW_atom_in_aexpr527;
+static const unsigned long long FOLLOW_atom_in_aexpr527_data[] = { 0x0000000000000202LL};
+static ANTLRBitSet *FOLLOW_ID_in_atom547;
+static const unsigned long long FOLLOW_ID_in_atom547_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_INT_in_atom561;
+static const unsigned long long FOLLOW_INT_in_atom561_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_7_in_atom575;
+static const unsigned long long FOLLOW_7_in_atom575_data[] = { 0x00000000000000B0LL};
+static ANTLRBitSet *FOLLOW_expr_in_atom577;
+static const unsigned long long FOLLOW_expr_in_atom577_data[] = { 0x0000000000000100LL};
+static ANTLRBitSet *FOLLOW_8_in_atom579;
+static const unsigned long long FOLLOW_8_in_atom579_data[] = { 0x0000000000000002LL};


#pragma mark Dynamic Global Scopes

#pragma mark Dynamic Rule Scopes

-#pragma mark Rule return scopes start
-/* returnScope */
-
-/* returnScope */
-
-/* returnScope */
-
-/* returnScope */
-
-/* returnScope */
-
-/* returnScope */
-
-/* returnScope */
-
-/* returnScope */
-
-/* returnScope */
-
-/* returnScope */
-
-/* returnScope */
-
-/* returnScope */
-
-/* returnScope */
-
-/* returnScope */
-
-/* returnScope */
-
+#pragma mark Rule Return Scopes start
+//#pragma mark Rule return scopes start
+//

+#pragma mark Rule return scopes start

@implementation SimpleCParser  // line 637

+/* ObjC start of ruleAttributeScope */
+#pragma mark Dynamic Rule Scopes
+/* ObjC end of ruleAttributeScope */
+#pragma mark global Attribute Scopes
+/* ObjC start globalAttributeScope */
+/* ObjC end globalAttributeScope */
+/* ObjC start actions.(actionScope).synthesize */
+/* ObjC end actions.(actionScope).synthesize */
+/* ObjC start synthesize() */
+/* ObjC end synthesize() */
+
+ (void) initialize
{
#pragma mark Bitsets
-    FOLLOW_declaration_in_program27 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declaration_in_program27_data Count:(NSUInteger)1] retain];
-    FOLLOW_variable_in_declaration49 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_declaration49_data Count:(NSUInteger)1] retain];
-    FOLLOW_functionHeader_in_declaration59 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration59_data Count:(NSUInteger)1] retain];
-    FOLLOW_7_in_declaration61 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_declaration61_data Count:(NSUInteger)1] retain];
-    FOLLOW_functionHeader_in_declaration74 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration74_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_declaration76 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_declaration76_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_variable98 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_variable98_data Count:(NSUInteger)1] retain];
-    FOLLOW_declarator_in_variable100 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_variable100_data Count:(NSUInteger)1] retain];
-    FOLLOW_7_in_variable102 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_variable102_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_declarator121 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_declarator121_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_functionHeader150 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_functionHeader150_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_functionHeader152 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_functionHeader152_data Count:(NSUInteger)1] retain];
-    FOLLOW_8_in_functionHeader154 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_functionHeader154_data Count:(NSUInteger)1] retain];
-    FOLLOW_formalParameter_in_functionHeader158 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader158_data Count:(NSUInteger)1] retain];
-    FOLLOW_9_in_functionHeader162 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_functionHeader162_data Count:(NSUInteger)1] retain];
-    FOLLOW_formalParameter_in_functionHeader164 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader164_data Count:(NSUInteger)1] retain];
-    FOLLOW_10_in_functionHeader172 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_10_in_functionHeader172_data Count:(NSUInteger)1] retain];
-    FOLLOW_type_in_formalParameter194 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_formalParameter194_data Count:(NSUInteger)1] retain];
-    FOLLOW_declarator_in_formalParameter196 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_formalParameter196_data Count:(NSUInteger)1] retain];
-    FOLLOW_set_in_type0 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_type0_data Count:(NSUInteger)1] retain];
-    FOLLOW_14_in_block285 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_14_in_block285_data Count:(NSUInteger)1] retain];
-    FOLLOW_variable_in_block299 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_block299_data Count:(NSUInteger)1] retain];
-    FOLLOW_stat_in_block314 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_stat_in_block314_data Count:(NSUInteger)1] retain];
-    FOLLOW_15_in_block325 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_15_in_block325_data Count:(NSUInteger)1] retain];
-    FOLLOW_forStat_in_stat337 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_forStat_in_stat337_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_stat345 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_stat345_data Count:(NSUInteger)1] retain];
-    FOLLOW_7_in_stat347 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_stat347_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_stat361 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_stat361_data Count:(NSUInteger)1] retain];
-    FOLLOW_assignStat_in_stat369 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_stat369_data Count:(NSUInteger)1] retain];
-    FOLLOW_7_in_stat371 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_stat371_data Count:(NSUInteger)1] retain];
-    FOLLOW_7_in_stat379 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_stat379_data Count:(NSUInteger)1] retain];
-    FOLLOW_16_in_forStat398 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_16_in_forStat398_data Count:(NSUInteger)1] retain];
-    FOLLOW_8_in_forStat400 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_forStat400_data Count:(NSUInteger)1] retain];
-    FOLLOW_assignStat_in_forStat402 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_forStat402_data Count:(NSUInteger)1] retain];
-    FOLLOW_7_in_forStat404 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_forStat404_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_forStat406 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat406_data Count:(NSUInteger)1] retain];
-    FOLLOW_7_in_forStat408 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_forStat408_data Count:(NSUInteger)1] retain];
-    FOLLOW_assignStat_in_forStat410 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_forStat410_data Count:(NSUInteger)1] retain];
-    FOLLOW_10_in_forStat412 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_10_in_forStat412_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_forStat414 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_forStat414_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_assignStat441 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_assignStat441_data Count:(NSUInteger)1] retain];
-    FOLLOW_17_in_assignStat443 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_17_in_assignStat443_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_assignStat445 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_assignStat445_data Count:(NSUInteger)1] retain];
-    FOLLOW_condExpr_in_expr467 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_condExpr_in_expr467_data Count:(NSUInteger)1] retain];
-    FOLLOW_aexpr_in_condExpr486 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_aexpr_in_condExpr486_data Count:(NSUInteger)1] retain];
-    FOLLOW_set_in_condExpr490 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_condExpr490_data Count:(NSUInteger)1] retain];
-    FOLLOW_aexpr_in_condExpr498 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_aexpr_in_condExpr498_data Count:(NSUInteger)1] retain];
-    FOLLOW_atom_in_aexpr520 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_aexpr520_data Count:(NSUInteger)1] retain];
-    FOLLOW_20_in_aexpr524 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_20_in_aexpr524_data Count:(NSUInteger)1] retain];
-    FOLLOW_atom_in_aexpr526 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_aexpr526_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_atom546 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_atom546_data Count:(NSUInteger)1] retain];
-    FOLLOW_INT_in_atom560 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_atom560_data Count:(NSUInteger)1] retain];
-    FOLLOW_8_in_atom574 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_atom574_data Count:(NSUInteger)1] retain];
-    FOLLOW_expr_in_atom576 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_atom576_data Count:(NSUInteger)1] retain];
-    FOLLOW_10_in_atom578 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_10_in_atom578_data Count:(NSUInteger)1] retain];
-
-    [ANTLRBaseRecognizer setTokenNames:[[[NSArray alloc] initWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
- @"ID", @"INT", @"WS", @"';'", @"'('", @"','", @"')'", @"'int'", @"'char'",
- @"'void'", @"'{'", @"'}'", @"'for'", @"'='", @"'=='", @"'<'", @"'+'", nil] retain]];
+    FOLLOW_declaration_in_program28 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declaration_in_program28_data Count:(NSUInteger)1] retain];
+    FOLLOW_variable_in_declaration50 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_declaration50_data Count:(NSUInteger)1] retain];
+    FOLLOW_functionHeader_in_declaration60 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration60_data Count:(NSUInteger)1] retain];
+    FOLLOW_11_in_declaration62 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_declaration62_data Count:(NSUInteger)1] retain];
+    FOLLOW_functionHeader_in_declaration75 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_functionHeader_in_declaration75_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_declaration77 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_declaration77_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_variable99 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_variable99_data Count:(NSUInteger)1] retain];
+    FOLLOW_declarator_in_variable101 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_variable101_data Count:(NSUInteger)1] retain];
+    FOLLOW_11_in_variable103 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_variable103_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_declarator122 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_declarator122_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_functionHeader151 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_functionHeader151_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_functionHeader153 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_functionHeader153_data Count:(NSUInteger)1] retain];
+    FOLLOW_7_in_functionHeader155 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_functionHeader155_data Count:(NSUInteger)1] retain];
+    FOLLOW_formalParameter_in_functionHeader159 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader159_data Count:(NSUInteger)1] retain];
+    FOLLOW_10_in_functionHeader163 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_10_in_functionHeader163_data Count:(NSUInteger)1] retain];
+    FOLLOW_formalParameter_in_functionHeader165 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_formalParameter_in_functionHeader165_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_functionHeader173 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_functionHeader173_data Count:(NSUInteger)1] retain];
+    FOLLOW_type_in_formalParameter195 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_type_in_formalParameter195_data Count:(NSUInteger)1] retain];
+    FOLLOW_declarator_in_formalParameter197 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_declarator_in_formalParameter197_data Count:(NSUInteger)1] retain];
+    FOLLOW_19_in_block286 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_block286_data Count:(NSUInteger)1] retain];
+    FOLLOW_variable_in_block300 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_variable_in_block300_data Count:(NSUInteger)1] retain];
+    FOLLOW_stat_in_block315 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_stat_in_block315_data Count:(NSUInteger)1] retain];
+    FOLLOW_20_in_block326 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_20_in_block326_data Count:(NSUInteger)1] retain];
+    FOLLOW_forStat_in_stat338 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_forStat_in_stat338_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_stat346 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_stat346_data Count:(NSUInteger)1] retain];
+    FOLLOW_11_in_stat348 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_stat348_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_stat362 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_stat362_data Count:(NSUInteger)1] retain];
+    FOLLOW_assignStat_in_stat370 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_stat370_data Count:(NSUInteger)1] retain];
+    FOLLOW_11_in_stat372 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_stat372_data Count:(NSUInteger)1] retain];
+    FOLLOW_11_in_stat380 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_stat380_data Count:(NSUInteger)1] retain];
+    FOLLOW_16_in_forStat399 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_16_in_forStat399_data Count:(NSUInteger)1] retain];
+    FOLLOW_7_in_forStat401 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_forStat401_data Count:(NSUInteger)1] retain];
+    FOLLOW_assignStat_in_forStat403 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_forStat403_data Count:(NSUInteger)1] retain];
+    FOLLOW_11_in_forStat405 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_forStat405_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_forStat407 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_forStat407_data Count:(NSUInteger)1] retain];
+    FOLLOW_11_in_forStat409 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_forStat409_data Count:(NSUInteger)1] retain];
+    FOLLOW_assignStat_in_forStat411 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_assignStat_in_forStat411_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_forStat413 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_forStat413_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_forStat415 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_forStat415_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_assignStat442 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_assignStat442_data Count:(NSUInteger)1] retain];
+    FOLLOW_13_in_assignStat444 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_13_in_assignStat444_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_assignStat446 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_assignStat446_data Count:(NSUInteger)1] retain];
+    FOLLOW_condExpr_in_expr468 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_condExpr_in_expr468_data Count:(NSUInteger)1] retain];
+    FOLLOW_aexpr_in_condExpr487 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_aexpr_in_condExpr487_data Count:(NSUInteger)1] retain];
+    FOLLOW_set_in_condExpr491 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_condExpr491_data Count:(NSUInteger)1] retain];
+    FOLLOW_aexpr_in_condExpr499 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_aexpr_in_condExpr499_data Count:(NSUInteger)1] retain];
+    FOLLOW_atom_in_aexpr521 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_aexpr521_data Count:(NSUInteger)1] retain];
+    FOLLOW_9_in_aexpr525 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_aexpr525_data Count:(NSUInteger)1] retain];
+    FOLLOW_atom_in_aexpr527 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_atom_in_aexpr527_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_atom547 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_atom547_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_atom561 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_atom561_data Count:(NSUInteger)1] retain];
+    FOLLOW_7_in_atom575 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_atom575_data Count:(NSUInteger)1] retain];
+    FOLLOW_expr_in_atom577 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_atom577_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_atom579 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_atom579_data Count:(NSUInteger)1] retain];
+
+    [ANTLRBaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
+ @"ID", @"INT", @"WS", @"'('", @"')'", @"'+'", @"','", @"';'", @"'<'", @"'='",
+ @"'=='", @"'char'", @"'for'", @"'int'", @"'void'", @"'{'", @"'}'", nil] retain]];
+    [ANTLRBaseRecognizer setGrammarFileName:@"SimpleC.g"];
}

+ (SimpleCParser *)newSimpleCParser:(id<ANTLRTokenStream>)aStream
{
return [[SimpleCParser alloc] initWithTokenStream:aStream];

+
}

- (id) initWithTokenStream:(id<ANTLRTokenStream>)aStream
{
-    if ((self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:15+1] retain]]) != nil) {
+    self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:15+1] retain]];
+    if ( self != nil ) {


dfa2 = [DFA2 newDFA2WithRecognizer:self];
-
/* start of actions-actionScope-init */
/* start of init */
}
@@ -378,27 +334,33 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
[dfa2 release];
[super dealloc];
}
-// start actions.actionScope.methods
-// start methods()
-// start rules
+
+/* ObjC start members */
+/* ObjC end members */
+/* ObjC start actions.(actionScope).methods */
+/* ObjC end actions.(actionScope).methods */
+/* ObjC start methods() */
+/* ObjC end methods() */
+/* ObjC start rules */
/*
* $ANTLR start program
* SimpleC.g:7:1: program : ( declaration )+ ;
*/
- (void) program
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// SimpleC.g:8:5: ( ( declaration )+ ) // ruleBlockSingleAlt
// SimpleC.g:8:9: ( declaration )+ // alt
{
// SimpleC.g:8:9: ( declaration )+ // positiveClosureBlock
-        NSInteger cnt1=0;
+        NSInteger cnt1 = 0;
do {
-            NSInteger alt1=2;
+            NSInteger alt1 = 2;
NSInteger LA1_0 = [input LA:1];
-            if ( (LA1_0==ID||(LA1_0>=11 && LA1_0<=13)) ) {
+            if ( (LA1_0==ID||LA1_0==15||(LA1_0 >= 17 && LA1_0 <= 18)) ) {
alt1=1;
}

@@ -407,26 +369,29 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
case 1 : ;
// SimpleC.g:8:9: declaration // alt
{
-                    [self pushFollow:FOLLOW_declaration_in_program27];
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_declaration_in_program28];
[self declaration];
+
[self popFollow];

-                      /* element() */
-                     /* elements */
+
+
}
break;

default :
if ( cnt1 >= 1 )
goto loop1;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:1];
+                    ANTLREarlyExitException *eee =
+                        [ANTLREarlyExitException newException:input decisionNumber:1];
@throw eee;
}
cnt1++;
} while (YES);
loop1: ;
-          /* element() */
-         /* elements */
+
+
}

// token+rule list labels
@@ -435,24 +400,31 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* my stuff */
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end program */
+
/*
* $ANTLR start declaration
- * SimpleC.g:11:1: declaration : ( variable | functionHeader ';' | functionHeader block );
+ * SimpleC.g:20:1: declaration : ( variable | functionHeader ';' | functionHeader block );
*/
- (void) declaration
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
-        NSString* functionHeader1 = nil;
-
-        NSString* functionHeader2 = nil;
-
+         NSString * functionHeader1 = nil ;
+
+         NSString * functionHeader2 = nil ;
+

// SimpleC.g:21:5: ( variable | functionHeader ';' | functionHeader block ) //ruleblock
NSInteger alt2=3;
@@ -461,42 +433,58 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
case 1 : ;
// SimpleC.g:21:9: variable // alt
{
-                [self pushFollow:FOLLOW_variable_in_declaration49];
+                /* ruleRef */
+                [self pushFollow:FOLLOW_variable_in_declaration50];
[self variable];
+
[self popFollow];

-                  /* element() */
-                 /* elements */
+
+
}
break;
case 2 : ;
// SimpleC.g:22:9: functionHeader ';' // alt
{
-                [self pushFollow:FOLLOW_functionHeader_in_declaration59];
+                /* ruleRef */
+                [self pushFollow:FOLLOW_functionHeader_in_declaration60];
functionHeader1 = [self functionHeader];
+
[self popFollow];

-                  /* element() */
-                [self match:input TokenType:7 Follow:FOLLOW_7_in_declaration61];   /* element() */
-                NSLog(@"%@ is a declaration", functionHeader1);  /* element() */
-                 /* elements */
+
+
+                [self match:input TokenType:11 Follow:FOLLOW_11_in_declaration62];
+
+                 NSLog(@"%@ is a declaration\n", functionHeader1
+                );
+
+
}
break;
case 3 : ;
// SimpleC.g:24:9: functionHeader block // alt
{
-                [self pushFollow:FOLLOW_functionHeader_in_declaration74];
+                /* ruleRef */
+                [self pushFollow:FOLLOW_functionHeader_in_declaration75];
functionHeader2 = [self functionHeader];
+
[self popFollow];

-                  /* element() */
-                [self pushFollow:FOLLOW_block_in_declaration76];
+
+
+                /* ruleRef */
+                [self pushFollow:FOLLOW_block_in_declaration77];
[self block];
+
[self popFollow];

-                  /* element() */
-                NSLog(@"%@ is a definition", functionHeader2);  /* element() */
-                 /* elements */
+
+
+                 NSLog(@"%@ is a definition\n", functionHeader2
+                );
+
+
}
break;

@@ -507,35 +495,48 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* my stuff */
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end declaration */
+
/*
* $ANTLR start variable
* SimpleC.g:28:1: variable : type declarator ';' ;
*/
- (void) variable
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// SimpleC.g:29:5: ( type declarator ';' ) // ruleBlockSingleAlt
// SimpleC.g:29:9: type declarator ';' // alt
{
-        [self pushFollow:FOLLOW_type_in_variable98];
+        /* ruleRef */
+        [self pushFollow:FOLLOW_type_in_variable99];
[self type];
+
[self popFollow];

-          /* element() */
-        [self pushFollow:FOLLOW_declarator_in_variable100];
+
+
+        /* ruleRef */
+        [self pushFollow:FOLLOW_declarator_in_variable101];
[self declarator];
+
[self popFollow];

-          /* element() */
-        [self match:input TokenType:7 Follow:FOLLOW_7_in_variable102];   /* element() */
-         /* elements */
+
+
+        [self match:input TokenType:11 Follow:FOLLOW_11_in_variable103];
+
}

// token+rule list labels
@@ -544,25 +545,32 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* my stuff */
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end variable */
+
/*
* $ANTLR start declarator
* SimpleC.g:32:1: declarator : ID ;
*/
- (void) declarator
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// SimpleC.g:33:5: ( ID ) // ruleBlockSingleAlt
// SimpleC.g:33:9: ID // alt
{
-        [self match:input TokenType:ID Follow:FOLLOW_ID_in_declarator121];   /* element() */
-         /* elements */
+        [self match:input TokenType:ID Follow:FOLLOW_ID_in_declarator122];
+
}

// token+rule list labels
@@ -571,23 +579,31 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* my stuff */
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end declarator */
+
/*
* $ANTLR start functionHeader
- * SimpleC.g:36:1: functionHeader returns [NSString* name] : type ID '(' ( formalParameter ( ',' formalParameter )* )? ')' ;
+ * SimpleC.g:36:1: functionHeader returns [NSString *name] : type ID '(' ( formalParameter ( ',' formalParameter )* )? ')' ;
*/
-- (NSString*) functionHeader
+- (NSString *) functionHeader
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

-    NSString* name = nil;
+    NSString * name = nil ;


-        name = nil; // for now you must init here rather than in 'returns'
+
+        name=nil; // for now you must init here rather than in 'returns'

@try {
ANTLRCommonToken *ID3 = nil;
@@ -595,33 +611,41 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
// SimpleC.g:40:5: ( type ID '(' ( formalParameter ( ',' formalParameter )* )? ')' ) // ruleBlockSingleAlt
// SimpleC.g:40:9: type ID '(' ( formalParameter ( ',' formalParameter )* )? ')' // alt
{
-        [self pushFollow:FOLLOW_type_in_functionHeader150];
+        /* ruleRef */
+        [self pushFollow:FOLLOW_type_in_functionHeader151];
[self type];
+
[self popFollow];

-          /* element() */
-        ID3=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_functionHeader152];   /* element() */
-        [self match:input TokenType:8 Follow:FOLLOW_8_in_functionHeader154];   /* element() */
+
+
+        ID3=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_functionHeader153];
+
+        [self match:input TokenType:7 Follow:FOLLOW_7_in_functionHeader155];
+
// SimpleC.g:40:21: ( formalParameter ( ',' formalParameter )* )? // block
NSInteger alt4=2;
NSInteger LA4_0 = [input LA:1];

-        if ( (LA4_0==ID||(LA4_0>=11 && LA4_0<=13)) ) {
+        if ( (LA4_0==ID||LA4_0==15||(LA4_0 >= 17 && LA4_0 <= 18)) ) {
alt4=1;
}
switch (alt4) {
case 1 : ;
// SimpleC.g:40:23: formalParameter ( ',' formalParameter )* // alt
{
-                [self pushFollow:FOLLOW_formalParameter_in_functionHeader158];
+                /* ruleRef */
+                [self pushFollow:FOLLOW_formalParameter_in_functionHeader159];
[self formalParameter];
+
[self popFollow];

-                  /* element() */
+
+
do {
NSInteger alt3=2;
NSInteger LA3_0 = [input LA:1];
-                    if ( (LA3_0==9) ) {
+                    if ( (LA3_0==10) ) {
alt3=1;
}

@@ -630,13 +654,16 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
case 1 : ;
// SimpleC.g:40:41: ',' formalParameter // alt
{
-                            [self match:input TokenType:9 Follow:FOLLOW_9_in_functionHeader162];   /* element() */
-                            [self pushFollow:FOLLOW_formalParameter_in_functionHeader164];
+                            [self match:input TokenType:10 Follow:FOLLOW_10_in_functionHeader163];
+
+                            /* ruleRef */
+                            [self pushFollow:FOLLOW_formalParameter_in_functionHeader165];
[self formalParameter];
+
[self popFollow];

-                              /* element() */
-                             /* elements */
+
+
}
break;

@@ -645,16 +672,20 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
}
} while (YES);
loop3: ;
-                  /* element() */
-                 /* elements */
+
+
}
break;

}
-          /* element() */
-        [self match:input TokenType:10 Follow:FOLLOW_10_in_functionHeader172];   /* element() */
-        name =  (ID3!=nil?[ID3 getText]:0);   /* element() */
-         /* elements */
+
+
+        [self match:input TokenType:8 Follow:FOLLOW_8_in_functionHeader173];
+
+        name =  (ID3!=nil?ID3.text:nil);
+
+
+
}

// token+rule list labels
@@ -663,34 +694,46 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* my stuff */
+        /* Terence's stuff */
+
}
return name;
}
/* $ANTLR end functionHeader */
+
/*
* $ANTLR start formalParameter
* SimpleC.g:44:1: formalParameter : type declarator ;
*/
- (void) formalParameter
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// SimpleC.g:45:5: ( type declarator ) // ruleBlockSingleAlt
// SimpleC.g:45:9: type declarator // alt
{
-        [self pushFollow:FOLLOW_type_in_formalParameter194];
+        /* ruleRef */
+        [self pushFollow:FOLLOW_type_in_formalParameter195];
[self type];
+
[self popFollow];

-          /* element() */
-        [self pushFollow:FOLLOW_declarator_in_formalParameter196];
+
+
+        /* ruleRef */
+        [self pushFollow:FOLLOW_declarator_in_formalParameter197];
[self declarator];
+
[self popFollow];

-          /* element() */
-         /* elements */
+
+
}

// token+rule list labels
@@ -699,32 +742,39 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* my stuff */
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end formalParameter */
+
/*
* $ANTLR start type
* SimpleC.g:48:1: type : ( 'int' | 'char' | 'void' | ID );
*/
- (void) type
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// SimpleC.g:49:5: ( 'int' | 'char' | 'void' | ID ) // ruleBlockSingleAlt
// SimpleC.g: // alt
{
-        if ([input LA:1] == ID||(([input LA:1] >= 11) && ([input LA:1] <= 13))) {
+        if ([input LA:1] == ID||[input LA:1] == 15||(([input LA:1] >= 17) && ([input LA:1] <= 18))) {
[input consume];
[state setIsErrorRecovery:NO];
} else {
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
+            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
@throw mse;
}
-          /* element() */
-         /* elements */
+
+
}

// token+rule list labels
@@ -733,24 +783,32 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* my stuff */
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end type */
+
/*
* $ANTLR start block
* SimpleC.g:55:1: block : '{' ( variable )* ( stat )* '}' ;
*/
- (void) block
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// SimpleC.g:56:5: ( '{' ( variable )* ( stat )* '}' ) // ruleBlockSingleAlt
// SimpleC.g:56:9: '{' ( variable )* ( stat )* '}' // alt
{
-        [self match:input TokenType:14 Follow:FOLLOW_14_in_block285];   /* element() */
+        [self match:input TokenType:19 Follow:FOLLOW_19_in_block286];
+
do {
NSInteger alt5=2;
NSInteger LA5_0 = [input LA:1];
@@ -762,7 +820,7 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000


}
-            else if ( ((LA5_0>=11 && LA5_0<=13)) ) {
+            else if ( (LA5_0==15||(LA5_0 >= 17 && LA5_0 <= 18)) ) {
alt5=1;
}

@@ -771,12 +829,14 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
case 1 : ;
// SimpleC.g:57:13: variable // alt
{
-                    [self pushFollow:FOLLOW_variable_in_block299];
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_variable_in_block300];
[self variable];
+
[self popFollow];

-                      /* element() */
-                     /* elements */
+
+
}
break;

@@ -785,11 +845,12 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
}
} while (YES);
loop5: ;
-          /* element() */
+
+
do {
NSInteger alt6=2;
NSInteger LA6_0 = [input LA:1];
-            if ( ((LA6_0>=ID && LA6_0<=INT)||(LA6_0>=7 && LA6_0<=8)||LA6_0==14||LA6_0==16) ) {
+            if ( ((LA6_0 >= ID && LA6_0 <= INT)||LA6_0==7||LA6_0==11||LA6_0==16||LA6_0==19) ) {
alt6=1;
}

@@ -798,12 +859,14 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
case 1 : ;
// SimpleC.g:58:13: stat // alt
{
-                    [self pushFollow:FOLLOW_stat_in_block314];
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_stat_in_block315];
[self stat];
+
[self popFollow];

-                      /* element() */
-                     /* elements */
+
+
}
break;

@@ -812,9 +875,10 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
}
} while (YES);
loop6: ;
-          /* element() */
-        [self match:input TokenType:15 Follow:FOLLOW_15_in_block325];   /* element() */
-         /* elements */
+
+
+        [self match:input TokenType:20 Follow:FOLLOW_20_in_block326];
+
}

// token+rule list labels
@@ -823,23 +887,31 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* my stuff */
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end block */
+
/*
* $ANTLR start stat
* SimpleC.g:62:1: stat : ( forStat | expr ';' | block | assignStat ';' | ';' );
*/
- (void) stat
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// SimpleC.g:62:5: ( forStat | expr ';' | block | assignStat ';' | ';' ) //ruleblock
NSInteger alt7=5;
-        switch ([input LA:1]) {
+        unichar charLA7 = [input LA:1];
+        switch (charLA7) {
case 16: ;
{
alt7=1;
@@ -849,92 +921,106 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
{
NSInteger LA7_2 = [input LA:2];

-                if ( (LA7_2==17) ) {
+                if ( (LA7_2==13) ) {
alt7=4;
}
-                else if ( (LA7_2==7||(LA7_2>=18 && LA7_2<=20)) ) {
+                else if ( (LA7_2==9||(LA7_2 >= 11 && LA7_2 <= 12)||LA7_2==14) ) {
alt7=2;
}
else {
-                    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:7 state:2 stream:input];
+                    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:7 state:2 stream:input];
+                    nvae.c = LA7_2;
@throw nvae;
+
}
}
break;
case INT: ;
-            case 8: ;
+            case 7: ;
{
alt7=2;
}
break;
-            case 14: ;
+            case 19: ;
{
alt7=3;
}
break;
-            case 7: ;
+            case 11: ;
{
alt7=5;
}
break;

default: ;
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:7 state:0 stream:input];
+            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:7 state:0 stream:input];
+            nvae.c = charLA7;
@throw nvae;
+
}

switch (alt7) {
case 1 : ;
// SimpleC.g:62:7: forStat // alt
{
-                [self pushFollow:FOLLOW_forStat_in_stat337];
+                /* ruleRef */
+                [self pushFollow:FOLLOW_forStat_in_stat338];
[self forStat];
+
[self popFollow];

-                  /* element() */
-                 /* elements */
+
+
}
break;
case 2 : ;
// SimpleC.g:63:7: expr ';' // alt
{
-                [self pushFollow:FOLLOW_expr_in_stat345];
+                /* ruleRef */
+                [self pushFollow:FOLLOW_expr_in_stat346];
[self expr];
+
[self popFollow];

-                  /* element() */
-                [self match:input TokenType:7 Follow:FOLLOW_7_in_stat347];   /* element() */
-                 /* elements */
+
+
+                [self match:input TokenType:11 Follow:FOLLOW_11_in_stat348];
+
}
break;
case 3 : ;
// SimpleC.g:64:7: block // alt
{
-                [self pushFollow:FOLLOW_block_in_stat361];
+                /* ruleRef */
+                [self pushFollow:FOLLOW_block_in_stat362];
[self block];
+
[self popFollow];

-                  /* element() */
-                 /* elements */
+
+
}
break;
case 4 : ;
// SimpleC.g:65:7: assignStat ';' // alt
{
-                [self pushFollow:FOLLOW_assignStat_in_stat369];
+                /* ruleRef */
+                [self pushFollow:FOLLOW_assignStat_in_stat370];
[self assignStat];
+
[self popFollow];

-                  /* element() */
-                [self match:input TokenType:7 Follow:FOLLOW_7_in_stat371];   /* element() */
-                 /* elements */
+
+
+                [self match:input TokenType:11 Follow:FOLLOW_11_in_stat372];
+
}
break;
case 5 : ;
// SimpleC.g:66:7: ';' // alt
{
-                [self match:input TokenType:7 Follow:FOLLOW_7_in_stat379];   /* element() */
-                 /* elements */
+                [self match:input TokenType:11 Follow:FOLLOW_11_in_stat380];
+
}
break;

@@ -945,49 +1031,72 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* my stuff */
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end stat */
+
/*
* $ANTLR start forStat
* SimpleC.g:69:1: forStat : 'for' '(' assignStat ';' expr ';' assignStat ')' block ;
*/
- (void) forStat
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// SimpleC.g:70:5: ( 'for' '(' assignStat ';' expr ';' assignStat ')' block ) // ruleBlockSingleAlt
// SimpleC.g:70:9: 'for' '(' assignStat ';' expr ';' assignStat ')' block // alt
{
-        [self match:input TokenType:16 Follow:FOLLOW_16_in_forStat398];   /* element() */
-        [self match:input TokenType:8 Follow:FOLLOW_8_in_forStat400];   /* element() */
-        [self pushFollow:FOLLOW_assignStat_in_forStat402];
+        [self match:input TokenType:16 Follow:FOLLOW_16_in_forStat399];
+
+        [self match:input TokenType:7 Follow:FOLLOW_7_in_forStat401];
+
+        /* ruleRef */
+        [self pushFollow:FOLLOW_assignStat_in_forStat403];
[self assignStat];
+
[self popFollow];

-          /* element() */
-        [self match:input TokenType:7 Follow:FOLLOW_7_in_forStat404];   /* element() */
-        [self pushFollow:FOLLOW_expr_in_forStat406];
+
+
+        [self match:input TokenType:11 Follow:FOLLOW_11_in_forStat405];
+
+        /* ruleRef */
+        [self pushFollow:FOLLOW_expr_in_forStat407];
[self expr];
+
[self popFollow];

-          /* element() */
-        [self match:input TokenType:7 Follow:FOLLOW_7_in_forStat408];   /* element() */
-        [self pushFollow:FOLLOW_assignStat_in_forStat410];
+
+
+        [self match:input TokenType:11 Follow:FOLLOW_11_in_forStat409];
+
+        /* ruleRef */
+        [self pushFollow:FOLLOW_assignStat_in_forStat411];
[self assignStat];
+
[self popFollow];

-          /* element() */
-        [self match:input TokenType:10 Follow:FOLLOW_10_in_forStat412];   /* element() */
-        [self pushFollow:FOLLOW_block_in_forStat414];
+
+
+        [self match:input TokenType:8 Follow:FOLLOW_8_in_forStat413];
+
+        /* ruleRef */
+        [self pushFollow:FOLLOW_block_in_forStat415];
[self block];
+
[self popFollow];

-          /* element() */
-         /* elements */
+
+
}

// token+rule list labels
@@ -996,31 +1105,42 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* my stuff */
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end forStat */
+
/*
* $ANTLR start assignStat
* SimpleC.g:73:1: assignStat : ID '=' expr ;
*/
- (void) assignStat
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// SimpleC.g:74:5: ( ID '=' expr ) // ruleBlockSingleAlt
// SimpleC.g:74:9: ID '=' expr // alt
{
-        [self match:input TokenType:ID Follow:FOLLOW_ID_in_assignStat441];   /* element() */
-        [self match:input TokenType:17 Follow:FOLLOW_17_in_assignStat443];   /* element() */
-        [self pushFollow:FOLLOW_expr_in_assignStat445];
+        [self match:input TokenType:ID Follow:FOLLOW_ID_in_assignStat442];
+
+        [self match:input TokenType:13 Follow:FOLLOW_13_in_assignStat444];
+
+        /* ruleRef */
+        [self pushFollow:FOLLOW_expr_in_assignStat446];
[self expr];
+
[self popFollow];

-          /* element() */
-         /* elements */
+
+
}

// token+rule list labels
@@ -1029,29 +1149,38 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* my stuff */
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end assignStat */
+
/*
* $ANTLR start expr
* SimpleC.g:77:1: expr : condExpr ;
*/
- (void) expr
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// SimpleC.g:77:5: ( condExpr ) // ruleBlockSingleAlt
// SimpleC.g:77:9: condExpr // alt
{
-        [self pushFollow:FOLLOW_condExpr_in_expr467];
+        /* ruleRef */
+        [self pushFollow:FOLLOW_condExpr_in_expr468];
[self condExpr];
+
[self popFollow];

-          /* element() */
-         /* elements */
+
+
}

// token+rule list labels
@@ -1060,59 +1189,72 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* my stuff */
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end expr */
+
/*
* $ANTLR start condExpr
* SimpleC.g:80:1: condExpr : aexpr ( ( '==' | '<' ) aexpr )? ;
*/
- (void) condExpr
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// SimpleC.g:81:5: ( aexpr ( ( '==' | '<' ) aexpr )? ) // ruleBlockSingleAlt
// SimpleC.g:81:9: aexpr ( ( '==' | '<' ) aexpr )? // alt
{
-        [self pushFollow:FOLLOW_aexpr_in_condExpr486];
+        /* ruleRef */
+        [self pushFollow:FOLLOW_aexpr_in_condExpr487];
[self aexpr];
+
[self popFollow];

-          /* element() */
+
+
// SimpleC.g:81:15: ( ( '==' | '<' ) aexpr )? // block
NSInteger alt8=2;
NSInteger LA8_0 = [input LA:1];

-        if ( ((LA8_0>=18 && LA8_0<=19)) ) {
+        if ( (LA8_0==12||LA8_0==14) ) {
alt8=1;
}
switch (alt8) {
case 1 : ;
// SimpleC.g:81:17: ( '==' | '<' ) aexpr // alt
{
-                if ((([input LA:1] >= 18) && ([input LA:1] <= 19))) {
+                if ([input LA:1] == 12||[input LA:1] == 14) {
[input consume];
[state setIsErrorRecovery:NO];
} else {
-                    ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
+                    ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
@throw mse;
}
-                  /* element() */
-                [self pushFollow:FOLLOW_aexpr_in_condExpr498];
+
+
+                /* ruleRef */
+                [self pushFollow:FOLLOW_aexpr_in_condExpr499];
[self aexpr];
+
[self popFollow];

-                  /* element() */
-                 /* elements */
+
+
}
break;

}
-          /* element() */
-         /* elements */
+
+
}

// token+rule list labels
@@ -1121,32 +1263,42 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* my stuff */
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end condExpr */
+
/*
* $ANTLR start aexpr
* SimpleC.g:84:1: aexpr : atom ( '+' atom )* ;
*/
- (void) aexpr
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// SimpleC.g:85:5: ( atom ( '+' atom )* ) // ruleBlockSingleAlt
// SimpleC.g:85:9: atom ( '+' atom )* // alt
{
-        [self pushFollow:FOLLOW_atom_in_aexpr520];
+        /* ruleRef */
+        [self pushFollow:FOLLOW_atom_in_aexpr521];
[self atom];
+
[self popFollow];

-          /* element() */
+
+
do {
NSInteger alt9=2;
NSInteger LA9_0 = [input LA:1];
-            if ( (LA9_0==20) ) {
+            if ( (LA9_0==9) ) {
alt9=1;
}

@@ -1155,13 +1307,16 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
case 1 : ;
// SimpleC.g:85:16: '+' atom // alt
{
-                    [self match:input TokenType:20 Follow:FOLLOW_20_in_aexpr524];   /* element() */
-                    [self pushFollow:FOLLOW_atom_in_aexpr526];
+                    [self match:input TokenType:9 Follow:FOLLOW_9_in_aexpr525];
+
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_atom_in_aexpr527];
[self atom];
+
[self popFollow];

-                      /* element() */
-                     /* elements */
+
+
}
break;

@@ -1170,8 +1325,8 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
}
} while (YES);
loop9: ;
-          /* element() */
-         /* elements */
+
+
}

// token+rule list labels
@@ -1180,23 +1335,31 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* my stuff */
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end aexpr */
+
/*
* $ANTLR start atom
* SimpleC.g:88:1: atom : ( ID | INT | '(' expr ')' );
*/
- (void) atom
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// SimpleC.g:89:5: ( ID | INT | '(' expr ')' ) //ruleblock
NSInteger alt10=3;
-        switch ([input LA:1]) {
+        unichar charLA10 = [input LA:1];
+        switch (charLA10) {
case ID: ;
{
alt10=1;
@@ -1207,43 +1370,49 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
alt10=2;
}
break;
-            case 8: ;
+            case 7: ;
{
alt10=3;
}
break;

default: ;
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:10 state:0 stream:input];
+            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:10 state:0 stream:input];
+            nvae.c = charLA10;
@throw nvae;
+
}

switch (alt10) {
case 1 : ;
// SimpleC.g:89:7: ID // alt
{
-                [self match:input TokenType:ID Follow:FOLLOW_ID_in_atom546];   /* element() */
-                 /* elements */
+                [self match:input TokenType:ID Follow:FOLLOW_ID_in_atom547];
+
}
break;
case 2 : ;
// SimpleC.g:90:7: INT // alt
{
-                [self match:input TokenType:INT Follow:FOLLOW_INT_in_atom560];   /* element() */
-                 /* elements */
+                [self match:input TokenType:INT Follow:FOLLOW_INT_in_atom561];
+
}
break;
case 3 : ;
// SimpleC.g:91:7: '(' expr ')' // alt
{
-                [self match:input TokenType:8 Follow:FOLLOW_8_in_atom574];   /* element() */
-                [self pushFollow:FOLLOW_expr_in_atom576];
+                [self match:input TokenType:7 Follow:FOLLOW_7_in_atom575];
+
+                /* ruleRef */
+                [self pushFollow:FOLLOW_expr_in_atom577];
[self expr];
+
[self popFollow];

-                  /* element() */
-                [self match:input TokenType:10 Follow:FOLLOW_10_in_atom578];   /* element() */
-                 /* elements */
+
+
+                [self match:input TokenType:8 Follow:FOLLOW_8_in_atom579];
+
}
break;

@@ -1254,15 +1423,16 @@ static const unsigned long long FOLLOW_10_in_atom578_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* my stuff */
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end atom */
+/* ObjC end rules */

@end /* end of SimpleCParser implementation line 692 */
-
-
-/* End of code
- * =============================================================================
- */
diff --git a/runtime/ObjC/Framework/examples/LL-star/main.m b/runtime/ObjC/Framework/examples/LL-star/main.m
index ee28d11..0a645be 100644
--- a/runtime/ObjC/Framework/examples/LL-star/main.m
+++ b/runtime/ObjC/Framework/examples/LL-star/main.m
@@ -6,7 +6,7 @@
int main() {
NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

-	NSString *string = [NSString stringWithContentsOfFile:@"../../examples/LL-star/input"];
+	NSString *string = [NSString stringWithContentsOfFile:@"/Users/acondit/source/antlr3/acondit_localhost/code/antlr/antlr3-main/runtime/ObjC/Framework/examples/LL-star/input"];
NSLog(@"input is: %@", string);
ANTLRStringStream *stream = [[ANTLRStringStream alloc] initWithStringNoCopy:string];
SimpleCLexer *lexer = [[SimpleCLexer alloc] initWithCharStream:stream];

