commit 3a3caab9c1605952347e8c593850225a05b040c7
Author:     Zannick <jokeserver@gmail.com>
AuthorDate: Thu Sep 13 22:33:38 2012 -0700
Commit:     Zannick <jokeserver@gmail.com>
CommitDate: Thu Sep 13 22:33:38 2012 -0700

Fix setTest making extraordinarily large ranges.

This changes how a language tests for set inclusion.
Instead of changing the input parameters to the setTest template,
define templates lookaheadSetTest and isolatedLookaheadSetTest.
These will be like their counterparts for atom and range, but will
have a list of values to use.

The generated code from this SetTest will be treated as a range--i.e.
it will be joined in setTest with the other ranges, where, in Python3
for example, it will be one of the conditions 'or'ed together.

This commit specifies that that set will consist of all the values in
the provided IntervalSet that appeared in an Interval no larger than 4.
Thus, this accomplishes a strict improvement over most normal cases,
without blowing up for cases where the IntervalSet contains all of
Unicode save for a few characters.

diff --git a/tool/src/main/java/org/antlr/codegen/CodeGenerator.java b/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
index 7728509..f783bae 100644
--- a/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
+++ b/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
@@ -763,36 +763,51 @@ public class CodeGenerator {
}
String testSTName = "lookaheadTest";
String testRangeSTName = "lookaheadRangeTest";
+		String testSetSTName = "lookaheadSetTest";
String varSTName = "lookaheadVarName";
if ( !partOfDFA ) {
testSTName = "isolatedLookaheadTest";
testRangeSTName = "isolatedLookaheadRangeTest";
+			testSetSTName = "isolatedLookaheadSetTest";
varSTName = "isolatedLookaheadVarName";
}
ST setST = templates.getInstanceOf("setTest");
-		// If setTest asks for varName (e.g. so it can test via set inclusion),
-		// give it the var name.
-		if ( setST.impl.formalArguments.get("varName")!=null ) {
-			ST varST = templates.getInstanceOf(varSTName);
-			varST.add("k", Utils.integer(k));
-			setST.add("varName", varST);
-			// If setTest asks for all the values in one list,
-			// skip the ordinary ranges variable.
-			if ( setST.impl.formalArguments.get("allValues")!=null ) {
-				// Flatten the IntervalSet into a list of integers.
-				Iterator<Interval> iter = iset.getIntervals().iterator();
-				while (iter.hasNext()) {
-					Interval I = iter.next();
-					int a = I.a;
-					int b = I.b;
+		// If the SetTest template exists, separate the ranges:
+		// flatten the small ones into one list and make that a range,
+		// and leave the others as they are.
+		if ( templates.isDefined(testSetSTName) ) {
+			// Flatten the IntervalSet into a list of integers.
+			ST sST = templates.getInstanceOf(testSetSTName);
+			Iterator<Interval> iter = iset.getIntervals().iterator();
+			int rangeNumber = 1;
+			while (iter.hasNext()) {
+				Interval I = iter.next();
+				int a = I.a;
+				int b = I.b;
+				// Not flattening the large ranges helps us avoid making a
+				// set that contains 90% of Unicode when we could just use
+				// a simple range like (LA(1)>=123 && LA(1)<=65535).
+				// This flattens all ranges of length 4 or less.
+				if (b - a < 4) {
for (int i = a; i <= b; i++) {
-						setST.add("allValues", getTokenTypeAsTargetLabel(i));
-						setST.add("allValuesAsInt", Utils.integer(i));
+						sST.add("values", getTokenTypeAsTargetLabel(i));
+						sST.add("valuesAsInt", Utils.integer(i));
}
+				} else {
+					ST eST = templates.getInstanceOf(testRangeSTName);
+					eST.add("lower", getTokenTypeAsTargetLabel(a));
+					eST.add("lowerAsInt", Utils.integer(a));
+					eST.add("upper", getTokenTypeAsTargetLabel(b));
+					eST.add("upperAsInt", Utils.integer(b));
+					eST.add("rangeNumber", Utils.integer(rangeNumber));
+					eST.add("k", Utils.integer(k));
+					setST.add("ranges", eST);
+					rangeNumber++;
}
-				// Skip doing anything with ranges.
-				return setST;
}
+			sST.add("k", Utils.integer(k));
+			setST.add("ranges", sST);
+			return setST;
}
Iterator<Interval> iter = iset.getIntervals().iterator();
int rangeNumber = 1;
diff --git a/tool/src/main/resources/org/antlr/codegen/templates/Python3/Python3.stg b/tool/src/main/resources/org/antlr/codegen/templates/Python3/Python3.stg
index 01ffedd..dfe194e 100644
--- a/tool/src/main/resources/org/antlr/codegen/templates/Python3/Python3.stg
+++ b/tool/src/main/resources/org/antlr/codegen/templates/Python3/Python3.stg
@@ -1238,12 +1238,18 @@ lookaheadRangeTest(lower,upper,k,rangeNumber,lowerAsInt,upperAsInt) ::= <%

isolatedLookaheadRangeTest(lower,upper,k,rangeNumber,lowerAsInt,upperAsInt) ::= "(<lower> \<= self.input.LA(<k>) \<= <upper>)"

+lookaheadSetTest(values,k,valuesAsInt) ::= <%
+LA<decisionNumber>_<stateNumber> in {<values; separator=", ">}
+%>
+
+isolatedLookaheadSetTest(values,k,valuesAsInt) ::= <%
+self.input.LA(<k>) in {<values; separator=", ">}
+%>
+
lookaheadVarName(k) ::= "LA<decisionNumber>_<stateNumber>"
isolatedLookaheadVarName(k) ::= "self.input.LA(<k>)"

-setTest(varName,allValues,allValuesAsInt) ::= <%
-<varName> in {<allValues; separator=", ">}
-%>
+setTest(ranges) ::= "<ranges; separator=\" or \">"

// A T T R I B U T E S


