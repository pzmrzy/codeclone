commit bd240983a2e5d33ca6e2a32ef3b516c9aa7f7782
Author:     acondit <acondit@parrt.spork>
AuthorDate: Sat May 7 08:13:34 2011 -0800
Commit:     acondit <acondit@parrt.spork>
CommitDate: Sat May 7 08:13:34 2011 -0800

Changes to match ANTLR3.4 revision.

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8418]

diff --git a/runtime/ObjC/Framework/examples/scopes/SymbolTable.tokens b/runtime/ObjC/Framework/examples/scopes/SymbolTable.tokens
index 6740901..75e43e3 100644
--- a/runtime/ObjC/Framework/examples/scopes/SymbolTable.tokens
+++ b/runtime/ObjC/Framework/examples/scopes/SymbolTable.tokens
@@ -1,19 +1,19 @@
-WS=6
-T__12=12
+T__7=7
+T__8=8
+T__9=9
+T__10=10
T__11=11
-T__14=14
+T__12=12
T__13=13
-T__10=10
-INT=5
+T__14=14
ID=4
-T__9=9
-T__8=8
-T__7=7
-';'=13
-'}'=11
-'='=12
-'int'=14
-'('=8
-'method'=7
-')'=9
-'{'=10
+INT=5
+WS=6
+'('=7
+')'=8
+';'=9
+'='=10
+'int'=11
+'method'=12
+'{'=13
+'}'=14
diff --git a/runtime/ObjC/Framework/examples/scopes/SymbolTableLexer.h b/runtime/ObjC/Framework/examples/scopes/SymbolTableLexer.h
index f1460f3..2689521 100644
--- a/runtime/ObjC/Framework/examples/scopes/SymbolTableLexer.h
+++ b/runtime/ObjC/Framework/examples/scopes/SymbolTableLexer.h
@@ -1,57 +1,55 @@
-// $ANTLR 3.2 Aug 24, 2010 10:45:57 SymbolTable.g 2010-08-24 13:53:46
+// $ANTLR ${project.version} ${buildNumber} SymbolTable.g 2011-05-06 15:04:43

/* =============================================================================
* Standard antlr3 OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
+#import <ANTLR/ANTLR.h>
/* End of standard antlr3 runtime definitions
* =============================================================================
*/

/* Start cyclicDFAInterface */
-#pragma mark Cyclic DFA interface start DFA4
-@interface DFA4 : ANTLRDFA {
-}
-+ newDFA4WithRecognizer:(ANTLRBaseRecognizer *)theRecognizer;
-- initWithRecognizer:(ANTLRBaseRecognizer *)recognizer;
-@end /* end of DFA4 interface  */
-
-#pragma mark Cyclic DFA interface end DFA4

#pragma mark Rule return scopes start
#pragma mark Rule return scopes end
#pragma mark Tokens
-#define WS 6
-#define T__12 12
+#ifdef EOF
+#undef EOF
+#endif
+#define EOF -1
+#define T__7 7
+#define T__8 8
+#define T__9 9
+#define T__10 10
#define T__11 11
-#define T__14 14
+#define T__12 12
#define T__13 13
-#define T__10 10
-#define INT 5
+#define T__14 14
#define ID 4
-#define EOF -1
-#define T__9 9
-#define T__8 8
-#define T__7 7
+#define INT 5
+#define WS 6
+/* interface lexer class */
@interface SymbolTableLexer : ANTLRLexer { // line 283
-DFA4 *dfa4;
-// start of actions.lexer.memVars
-// start of action-actionScope-memVars
+/* ObjC start of actions.lexer.memVars */
+/* ObjC end of actions.lexer.memVars */
}
++ (void) initialize;
+ (SymbolTableLexer *)newSymbolTableLexerWithCharStream:(id<ANTLRCharStream>)anInput;
-
-- (void)mT__7;
-- (void)mT__8;
-- (void)mT__9;
-- (void)mT__10;
-- (void)mT__11;
-- (void)mT__12;
-- (void)mT__13;
-- (void)mT__14;
-- (void)mID;
-- (void)mINT;
-- (void)mWS;
-- (void)mTokens;
+/* ObjC start actions.lexer.methodsDecl */
+/* ObjC end actions.lexer.methodsDecl */
+- (void) mT__7 ;
+- (void) mT__8 ;
+- (void) mT__9 ;
+- (void) mT__10 ;
+- (void) mT__11 ;
+- (void) mT__12 ;
+- (void) mT__13 ;
+- (void) mT__14 ;
+- (void) mID ;
+- (void) mINT ;
+- (void) mWS ;
+- (void) mTokens ;

@end /* end of SymbolTableLexer interface */
+
diff --git a/runtime/ObjC/Framework/examples/scopes/SymbolTableLexer.m b/runtime/ObjC/Framework/examples/scopes/SymbolTableLexer.m
index 0d36201..9daf547 100644
--- a/runtime/ObjC/Framework/examples/scopes/SymbolTableLexer.m
+++ b/runtime/ObjC/Framework/examples/scopes/SymbolTableLexer.m
@@ -1,43 +1,18 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version 3.2 Aug 24, 2010 10:45:57
+ *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
*
*     -  From the grammar source file : SymbolTable.g
- *     -                            On : 2010-08-24 13:53:46
- *     -                 for the lexer : SymbolTableLexerLexer *
- * Editing it, at least manually, is not wise.
+ *     -                            On : 2011-05-06 15:04:43
+ *     -                 for the lexer : SymbolTableLexerLexer
+ *
+ * Editing it, at least manually, is not wise.
*
* ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
*
*
*/
-// [The "BSD licence"]
-// Copyright (c) 2010 Alan Condit
-//
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. The name of the author may not be used to endorse or promote products
-//    derived from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// $ANTLR 3.2 Aug 24, 2010 10:45:57 SymbolTable.g 2010-08-24 13:53:46
+// $ANTLR ${project.version} ${buildNumber} SymbolTable.g 2011-05-06 15:04:43
+

/* -----------------------------------------
* Include the ANTLR3 generated header file.
@@ -47,107 +22,10 @@


/* ============================================================================= */
-
/* =============================================================================
* Start of recognizer
*/

-#pragma mark Cyclic DFA implementation start DFA4
-@implementation DFA4
-const static NSInteger dfa4_eot[21] =
-    {-1,9,-1,-1,-1,-1,-1,-1,9,-1,-1,-1,9,9,9,17,9,-1,9,20,-1};
-const static NSInteger dfa4_eof[21] =
-    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static unichar dfa4_min[21] =
-    {10,101,0,0,0,0,0,0,110,0,0,0,116,116,104,97,111,0,100,97,0};
-const static unichar dfa4_max[21] =
-    {125,101,0,0,0,0,0,0,110,0,0,0,116,116,104,122,111,0,100,122,0};
-const static NSInteger dfa4_accept[21] =
-    {-1,-1,2,3,4,5,6,7,-1,9,10,11,-1,-1,-1,-1,-1,8,-1,-1,1};
-const static NSInteger dfa4_special[21] =
-    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static NSInteger dfa4_transition[] = {};
-const static NSInteger dfa4_transition0[] = {11, -1, -1, 11, -1, -1, -1,
- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1,
- -1, -1, -1, -1, -1, 2, 3, -1, -1, -1, -1, -1, -1, 10, 10, 10, 10, 10, 10,
- 10, 10, 10, 10, -1, 7, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
- -1, -1, -1, -1, -1, -1, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 1, 9, 9, 9,
- 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, -1, 5};
-const static NSInteger dfa4_transition1[] = {19};
-const static NSInteger dfa4_transition2[] = {16};
-const static NSInteger dfa4_transition3[] = {18};
-const static NSInteger dfa4_transition4[] = {13};
-const static NSInteger dfa4_transition5[] = {15};
-const static NSInteger dfa4_transition6[] = {12};
-const static NSInteger dfa4_transition7[] = {14};
-const static NSInteger dfa4_transition8[] = {9, 9, 9, 9, 9, 9, 9, 9, 9,
- 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
-
-
-+ () newDFA4WithRecognizer:(ANTLRBaseRecognizer *)aRecognizer
-{
-    return [[[DFA4 alloc] initWithRecognizer:aRecognizer] retain];
-}
-
-- (id) initWithRecognizer:(ANTLRBaseRecognizer *) theRecognizer
-{
-    if ((self = [super initWithRecognizer:theRecognizer]) != nil) {
-        decisionNumber = 4;
-        eot = dfa4_eot;
-        eof = dfa4_eof;
-        min = dfa4_min;
-        max = dfa4_max;
-        accept = dfa4_accept;
-        special = dfa4_special;
-        if (!(transition = calloc(21, sizeof(void*)))) {
-            [self release];
-            return nil;
-        }
-        len = 21;
-        transition[0] = dfa4_transition0;
-        transition[1] = dfa4_transition6;
-        transition[2] = dfa4_transition;
-        transition[3] = dfa4_transition;
-        transition[4] = dfa4_transition;
-        transition[5] = dfa4_transition;
-        transition[6] = dfa4_transition;
-        transition[7] = dfa4_transition;
-        transition[8] = dfa4_transition4;
-        transition[9] = dfa4_transition;
-        transition[10] = dfa4_transition;
-        transition[11] = dfa4_transition;
-        transition[12] = dfa4_transition7;
-        transition[13] = dfa4_transition5;
-        transition[14] = dfa4_transition2;
-        transition[15] = dfa4_transition8;
-        transition[16] = dfa4_transition3;
-        transition[17] = dfa4_transition;
-        transition[18] = dfa4_transition1;
-        transition[19] = dfa4_transition8;
-        transition[20] = dfa4_transition;
-    }
-    return self;
-}
-
-- (void) dealloc
-{
-    free(transition);
-    [super dealloc];
-}
-
-- (NSString *) description
-{
-    return @"1:1: Tokens : ( T__7 | T__8 | T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | ID | INT | WS );";
-}
-
-
-@end /* end DFA4 implementation */
-
-#pragma mark Cyclic DFA implementation end DFA4
-
-
-
/** As per Terence: No returns for lexer rules! */
@implementation SymbolTableLexer // line 330

@@ -168,393 +46,432 @@ const static NSInteger dfa4_transition8[] = {9, 9, 9, 9, 9, 9, 9, 9, 9,

- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
{
-    if ((self = [super initWithCharStream:anInput State:[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:12+1]]) != nil) {
-
-        dfa4 = [DFA4 newDFA4WithRecognizer:self];
+    self = [super initWithCharStream:anInput State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:12+1] retain]];
+    if ( self != nil ) {
}
return self;
}

- (void) dealloc
{
-    [dfa4 release];
[super dealloc];
}

-/* Start of actions.lexer.methods */
-/* start methods() */
+/* ObjC Start of actions.lexer.methods */
+/* ObjC end of actions.lexer.methods */
+/* ObjC start methods() */
+/* ObjC end methods() */

/* Start of Rules */
// $ANTLR start "T__7"
- (void) mT__7
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__7;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:7:6: ( 'method' ) // ruleBlockSingleAlt
-        // SymbolTable.g:7:8: 'method' // alt
+        // SymbolTable.g:7:6: ( '(' ) // ruleBlockSingleAlt
+        // SymbolTable.g:7:8: '(' // alt
{
-        [self matchString:@"method"];
-          /* element() */
-         /* elements */
+        [self matchChar:'('];
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__7"
+/* $ANTLR end "T__7" */

// $ANTLR start "T__8"
- (void) mT__8
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__8;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:8:6: ( '(' ) // ruleBlockSingleAlt
-        // SymbolTable.g:8:8: '(' // alt
+        // SymbolTable.g:8:6: ( ')' ) // ruleBlockSingleAlt
+        // SymbolTable.g:8:8: ')' // alt
{
-        [self matchChar:'('];
-          /* element() */
-         /* elements */
+        [self matchChar:')'];
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__8"
+/* $ANTLR end "T__8" */

// $ANTLR start "T__9"
- (void) mT__9
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__9;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:9:6: ( ')' ) // ruleBlockSingleAlt
-        // SymbolTable.g:9:8: ')' // alt
+        // SymbolTable.g:9:6: ( ';' ) // ruleBlockSingleAlt
+        // SymbolTable.g:9:8: ';' // alt
{
-        [self matchChar:')'];
-          /* element() */
-         /* elements */
+        [self matchChar:';'];
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__9"
+/* $ANTLR end "T__9" */

// $ANTLR start "T__10"
- (void) mT__10
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__10;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:10:7: ( '{' ) // ruleBlockSingleAlt
-        // SymbolTable.g:10:9: '{' // alt
+        // SymbolTable.g:10:7: ( '=' ) // ruleBlockSingleAlt
+        // SymbolTable.g:10:9: '=' // alt
{
-        [self matchChar:'{'];
-          /* element() */
-         /* elements */
+        [self matchChar:'='];
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__10"
+/* $ANTLR end "T__10" */

// $ANTLR start "T__11"
- (void) mT__11
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__11;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:11:7: ( '}' ) // ruleBlockSingleAlt
-        // SymbolTable.g:11:9: '}' // alt
+        // SymbolTable.g:11:7: ( 'int' ) // ruleBlockSingleAlt
+        // SymbolTable.g:11:9: 'int' // alt
{
-        [self matchChar:'}'];
-          /* element() */
-         /* elements */
+        [self matchString:@"int"];
+
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__11"
+/* $ANTLR end "T__11" */

// $ANTLR start "T__12"
- (void) mT__12
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__12;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:12:7: ( '=' ) // ruleBlockSingleAlt
-        // SymbolTable.g:12:9: '=' // alt
+        // SymbolTable.g:12:7: ( 'method' ) // ruleBlockSingleAlt
+        // SymbolTable.g:12:9: 'method' // alt
{
-        [self matchChar:'='];
-          /* element() */
-         /* elements */
+        [self matchString:@"method"];
+
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__12"
+/* $ANTLR end "T__12" */

// $ANTLR start "T__13"
- (void) mT__13
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__13;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:13:7: ( ';' ) // ruleBlockSingleAlt
-        // SymbolTable.g:13:9: ';' // alt
+        // SymbolTable.g:13:7: ( '{' ) // ruleBlockSingleAlt
+        // SymbolTable.g:13:9: '{' // alt
{
-        [self matchChar:';'];
-          /* element() */
-         /* elements */
+        [self matchChar:'{'];
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__13"
+/* $ANTLR end "T__13" */

// $ANTLR start "T__14"
- (void) mT__14
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = T__14;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:14:7: ( 'int' ) // ruleBlockSingleAlt
-        // SymbolTable.g:14:9: 'int' // alt
+        // SymbolTable.g:14:7: ( '}' ) // ruleBlockSingleAlt
+        // SymbolTable.g:14:9: '}' // alt
{
-        [self matchString:@"int"];
-          /* element() */
-         /* elements */
+        [self matchChar:'}'];
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "T__14"
+/* $ANTLR end "T__14" */

// $ANTLR start "ID"
- (void) mID
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = ID;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:66:5: ( ( 'a' .. 'z' )+ ) // ruleBlockSingleAlt
-        // SymbolTable.g:66:9: ( 'a' .. 'z' )+ // alt
+        // SymbolTable.g:68:5: ( ( 'a' .. 'z' )+ ) // ruleBlockSingleAlt
+        // SymbolTable.g:68:9: ( 'a' .. 'z' )+ // alt
{
-        // SymbolTable.g:66:9: ( 'a' .. 'z' )+ // positiveClosureBlock
-        NSInteger cnt1=0;
+        // SymbolTable.g:68:9: ( 'a' .. 'z' )+ // positiveClosureBlock
+        NSInteger cnt1 = 0;
do {
-            NSInteger alt1=2;
+            NSInteger alt1 = 2;
NSInteger LA1_0 = [input LA:1];
-            if ( ((LA1_0>='a' && LA1_0<='z')) ) {
+            if ( ((LA1_0 >= 'a' && LA1_0 <= 'z')) ) {
alt1=1;
}


switch (alt1) {
case 1 : ;
-                    // SymbolTable.g:66:10: 'a' .. 'z' // alt
+                    // SymbolTable.g: // alt
{
-                    [self matchRangeFromChar:'a' to:'z'];   /* element() */
-                     /* elements */
+                    if ((([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
+                        [input consume];
+                    } else {
+                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        [self recover:mse];
+                        @throw mse;
+                    }
+
+
}
break;

default :
if ( cnt1 >= 1 )
goto loop1;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:1];
+                    ANTLREarlyExitException *eee =
+                        [ANTLREarlyExitException newException:input decisionNumber:1];
@throw eee;
}
cnt1++;
} while (YES);
loop1: ;
-          /* element() */
-         /* elements */
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "ID"
+/* $ANTLR end "ID" */

// $ANTLR start "INT"
- (void) mINT
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = INT;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:69:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
-        // SymbolTable.g:69:9: ( '0' .. '9' )+ // alt
+        // SymbolTable.g:71:5: ( ( '0' .. '9' )+ ) // ruleBlockSingleAlt
+        // SymbolTable.g:71:9: ( '0' .. '9' )+ // alt
{
-        // SymbolTable.g:69:9: ( '0' .. '9' )+ // positiveClosureBlock
-        NSInteger cnt2=0;
+        // SymbolTable.g:71:9: ( '0' .. '9' )+ // positiveClosureBlock
+        NSInteger cnt2 = 0;
do {
-            NSInteger alt2=2;
+            NSInteger alt2 = 2;
NSInteger LA2_0 = [input LA:1];
-            if ( ((LA2_0>='0' && LA2_0<='9')) ) {
+            if ( ((LA2_0 >= '0' && LA2_0 <= '9')) ) {
alt2=1;
}


switch (alt2) {
case 1 : ;
-                    // SymbolTable.g:69:10: '0' .. '9' // alt
+                    // SymbolTable.g: // alt
{
-                    [self matchRangeFromChar:'0' to:'9'];   /* element() */
-                     /* elements */
+                    if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))) {
+                        [input consume];
+                    } else {
+                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
+                        [self recover:mse];
+                        @throw mse;
+                    }
+
+
}
break;

default :
if ( cnt2 >= 1 )
goto loop2;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:2];
+                    ANTLREarlyExitException *eee =
+                        [ANTLREarlyExitException newException:input decisionNumber:2];
@throw eee;
}
cnt2++;
} while (YES);
loop2: ;
-          /* element() */
-         /* elements */
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "INT"
+/* $ANTLR end "INT" */

// $ANTLR start "WS"
- (void) mWS
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = WS;
NSInteger _channel = ANTLRTokenChannelDefault;
-        // SymbolTable.g:72:5: ( ( ' ' | '\\n' | '\\r' )+ ) // ruleBlockSingleAlt
-        // SymbolTable.g:72:9: ( ' ' | '\\n' | '\\r' )+ // alt
+        // SymbolTable.g:74:5: ( ( ' ' | '\\n' | '\\r' )+ ) // ruleBlockSingleAlt
+        // SymbolTable.g:74:9: ( ' ' | '\\n' | '\\r' )+ // alt
{
-        // SymbolTable.g:72:9: ( ' ' | '\\n' | '\\r' )+ // positiveClosureBlock
-        NSInteger cnt3=0;
+        // SymbolTable.g:74:9: ( ' ' | '\\n' | '\\r' )+ // positiveClosureBlock
+        NSInteger cnt3 = 0;
do {
-            NSInteger alt3=2;
+            NSInteger alt3 = 2;
NSInteger LA3_0 = [input LA:1];
if ( (LA3_0=='\n'||LA3_0=='\r'||LA3_0==' ') ) {
alt3=1;
@@ -567,135 +484,311 @@ const static NSInteger dfa4_transition8[] = {9, 9, 9, 9, 9, 9, 9, 9, 9,
{
if ([input LA:1] == '\n'||[input LA:1] == '\r'||[input LA:1] == ' ') {
[input consume];
-
} else {
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
+                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
[self recover:mse];
-                        @throw mse;}
-                      /* element() */
-                     /* elements */
+                        @throw mse;
+                    }
+
+
}
break;

default :
if ( cnt3 >= 1 )
goto loop3;
-                    ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:3];
+                    ANTLREarlyExitException *eee =
+                        [ANTLREarlyExitException newException:input decisionNumber:3];
@throw eee;
}
cnt3++;
} while (YES);
loop3: ;
-          /* element() */
-        _channel=99;  /* element() */
-         /* elements */
+
+
+        _channel=HIDDEN;
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "WS"
+/* $ANTLR end "WS" */

- (void) mTokens
{
// SymbolTable.g:1:8: ( T__7 | T__8 | T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | ID | INT | WS ) //ruleblock
NSInteger alt4=11;
-    alt4 = [dfa4 predict:input];
+    unichar charLA4 = [input LA:1];
+    switch (charLA4) {
+        case '(': ;
+            {
+            alt4=1;
+            }
+            break;
+        case ')': ;
+            {
+            alt4=2;
+            }
+            break;
+        case ';': ;
+            {
+            alt4=3;
+            }
+            break;
+        case '=': ;
+            {
+            alt4=4;
+            }
+            break;
+        case 'i': ;
+            {
+            NSInteger LA4_5 = [input LA:2];
+
+            if ( (LA4_5=='n') ) {
+                NSInteger LA4_12 = [input LA:3];
+
+                if ( (LA4_12=='t') ) {
+                    NSInteger LA4_14 = [input LA:4];
+
+                    if ( ((LA4_14 >= 'a' && LA4_14 <= 'z')) ) {
+                        alt4=9;
+                    }
+                    else {
+                        alt4 = 5;
+                    }
+                }
+                else {
+                    alt4 = 9;
+                }
+            }
+            else {
+                alt4 = 9;
+            }
+            }
+            break;
+        case 'm': ;
+            {
+            NSInteger LA4_6 = [input LA:2];
+
+            if ( (LA4_6=='e') ) {
+                NSInteger LA4_13 = [input LA:3];
+
+                if ( (LA4_13=='t') ) {
+                    NSInteger LA4_15 = [input LA:4];
+
+                    if ( (LA4_15=='h') ) {
+                        NSInteger LA4_17 = [input LA:5];
+
+                        if ( (LA4_17=='o') ) {
+                            NSInteger LA4_18 = [input LA:6];
+
+                            if ( (LA4_18=='d') ) {
+                                NSInteger LA4_19 = [input LA:7];
+
+                                if ( ((LA4_19 >= 'a' && LA4_19 <= 'z')) ) {
+                                    alt4=9;
+                                }
+                                else {
+                                    alt4 = 6;
+                                }
+                            }
+                            else {
+                                alt4 = 9;
+                            }
+                        }
+                        else {
+                            alt4 = 9;
+                        }
+                    }
+                    else {
+                        alt4 = 9;
+                    }
+                }
+                else {
+                    alt4 = 9;
+                }
+            }
+            else {
+                alt4 = 9;
+            }
+            }
+            break;
+        case '{': ;
+            {
+            alt4=7;
+            }
+            break;
+        case '}': ;
+            {
+            alt4=8;
+            }
+            break;
+        case 'a': ;
+        case 'b': ;
+        case 'c': ;
+        case 'd': ;
+        case 'e': ;
+        case 'f': ;
+        case 'g': ;
+        case 'h': ;
+        case 'j': ;
+        case 'k': ;
+        case 'l': ;
+        case 'n': ;
+        case 'o': ;
+        case 'p': ;
+        case 'q': ;
+        case 'r': ;
+        case 's': ;
+        case 't': ;
+        case 'u': ;
+        case 'v': ;
+        case 'w': ;
+        case 'x': ;
+        case 'y': ;
+        case 'z': ;
+            {
+            alt4=9;
+            }
+            break;
+        case '0': ;
+        case '1': ;
+        case '2': ;
+        case '3': ;
+        case '4': ;
+        case '5': ;
+        case '6': ;
+        case '7': ;
+        case '8': ;
+        case '9': ;
+            {
+            alt4=10;
+            }
+            break;
+        case '\n': ;
+        case '\r': ;
+        case ' ': ;
+            {
+            alt4=11;
+            }
+            break;
+
+    default: ;
+        ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:4 state:0 stream:input];
+        nvae.c = charLA4;
+        @throw nvae;
+
+    }
+
switch (alt4) {
case 1 : ;
// SymbolTable.g:1:10: T__7 // alt
{
-                [self mT__7];
-              /* element() */
-             /* elements */
+            [self mT__7];
+
+
+
}
break;
case 2 : ;
// SymbolTable.g:1:15: T__8 // alt
{
-                [self mT__8];
-              /* element() */
-             /* elements */
+            [self mT__8];
+
+
+
}
break;
case 3 : ;
// SymbolTable.g:1:20: T__9 // alt
{
-                [self mT__9];
-              /* element() */
-             /* elements */
+            [self mT__9];
+
+
+
}
break;
case 4 : ;
// SymbolTable.g:1:25: T__10 // alt
{
-                [self mT__10];
-              /* element() */
-             /* elements */
+            [self mT__10];
+
+
+
}
break;
case 5 : ;
// SymbolTable.g:1:31: T__11 // alt
{
-                [self mT__11];
-              /* element() */
-             /* elements */
+            [self mT__11];
+
+
+
}
break;
case 6 : ;
// SymbolTable.g:1:37: T__12 // alt
{
-                [self mT__12];
-              /* element() */
-             /* elements */
+            [self mT__12];
+
+
+
}
break;
case 7 : ;
// SymbolTable.g:1:43: T__13 // alt
{
-                [self mT__13];
-              /* element() */
-             /* elements */
+            [self mT__13];
+
+
+
}
break;
case 8 : ;
// SymbolTable.g:1:49: T__14 // alt
{
-                [self mT__14];
-              /* element() */
-             /* elements */
+            [self mT__14];
+
+
+
}
break;
case 9 : ;
// SymbolTable.g:1:55: ID // alt
{
-                [self mID];
-              /* element() */
-             /* elements */
+            [self mID];
+
+
+
}
break;
case 10 : ;
// SymbolTable.g:1:58: INT // alt
{
-                [self mINT];
-              /* element() */
-             /* elements */
+            [self mINT];
+
+
+
}
break;
case 11 : ;
// SymbolTable.g:1:62: WS // alt
{
-                [self mWS];
-              /* element() */
-             /* elements */
+            [self mWS];
+
+
+
}
break;

@@ -703,8 +796,4 @@ const static NSInteger dfa4_transition8[] = {9, 9, 9, 9, 9, 9, 9, 9, 9,

}

-@end /* end of SymbolTableLexer implementation line 397 */
-
-/* End of code
- * =============================================================================
- */
+@end /* end of SymbolTableLexer implementation line 397 */
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/examples/scopes/SymbolTableParser.h b/runtime/ObjC/Framework/examples/scopes/SymbolTableParser.h
index 7513900..e67094b 100644
--- a/runtime/ObjC/Framework/examples/scopes/SymbolTableParser.h
+++ b/runtime/ObjC/Framework/examples/scopes/SymbolTableParser.h
@@ -1,70 +1,105 @@
-// $ANTLR 3.2 Aug 24, 2010 10:45:57 SymbolTable.g 2010-08-24 13:53:46
+// $ANTLR ${project.version} ${buildNumber} SymbolTable.g 2011-05-06 15:04:42

/* =============================================================================
* Standard antlr3 OBJC runtime definitions
*/
#import <Cocoa/Cocoa.h>
-#import "antlr3.h"
+#import <ANTLR/ANTLR.h>
/* End of standard antlr3 runtime definitions
* =============================================================================
*/

/* parserHeaderFile */
+#ifndef ANTLR3TokenTypeAlreadyDefined
+#define ANTLR3TokenTypeAlreadyDefined
+typedef enum {
+    ANTLR_EOF = -1,
+    INVALID,
+    EOR,
+    DOWN,
+    UP,
+    MIN
+} ANTLR3TokenType;
+#endif
+
#pragma mark Tokens
-#define WS 6
-#define T__12 12
+#ifdef EOF
+#undef EOF
+#endif
+#define EOF -1
+#define T__7 7
+#define T__8 8
+#define T__9 9
+#define T__10 10
#define T__11 11
-#define T__14 14
+#define T__12 12
#define T__13 13
-#define T__10 10
-#define INT 5
+#define T__14 14
#define ID 4
-#define EOF -1
-#define T__9 9
-#define T__8 8
-#define T__7 7
+#define INT 5
+#define WS 6
#pragma mark Dynamic Global Scopes
-@interface Symbols_Scope : ANTLRSymbolsScope {  /* globalAttributeScopeDecl */
-ANTLRHashMap * names;
+/* globalAttributeScopeInterface */
+@interface Symbols_Scope : ANTLRSymbolsScope {
+ANTLRPtrBuffer * names;
+
}
-/* start of properties */
+/* start of globalAttributeScopeInterface properties */
+
+@property (assign, getter=getnames, setter=setnames:) ANTLRPtrBuffer * names;

-@property (retain, getter=getnames, setter=setnames:) ANTLRHashMap * names;
+/* end globalAttributeScopeInterface properties */

-/* end properties */

+ (Symbols_Scope *)newSymbols_Scope;
-/* start of iterated get and set functions */
+- (id) init;
+/* start of globalAttributeScopeInterface methodsDecl */

-- (ANTLRHashMap *)getnames;
-- (void)setnames:(ANTLRHashMap *)aVal;
+- (ANTLRPtrBuffer *)getnames;
+- (void)setnames:(ANTLRPtrBuffer *)aVal;

-/* End of iterated get and set functions */
+/* End of globalAttributeScopeInterface methodsDecl */

@end /* end of Symbols_Scope interface */

#pragma mark Dynamic Rule Scopes
#pragma mark Rule Return Scopes start
-#pragma mark Rule return scopes end
+
+/* Interface grammar class */
@interface SymbolTableParser : ANTLRParser { /* line 572 */
-// start of globalAttributeScopeMemVar
+/* ObjC start of ruleAttributeScopeMemVar */
+
+
+/* ObjC end of ruleAttributeScopeMemVar */
+/* ObjC start of globalAttributeScopeMemVar */
/* globalAttributeScopeMemVar */
-ANTLRSymbolStack *gStack;
+//ANTLRSymbolStack *gStack;
+ANTLRSymbolStack *Symbols_stack;
Symbols_Scope *Symbols_scope;

-// start of action-actionScope-memVars
+/* ObjC end of globalAttributeScopeMemVar */
+/* ObjC start of actions.(actionScope).memVars */

int level;

-// start of ruleAttributeScopeMemVar
-
-
-// Start of memVars
+/* ObjC end of actions.(actionScope).memVars */
+/* ObjC start of memVars */
+/* ObjC end of memVars */

}

-// start of action-actionScope-methodsDecl
+/* ObjC start of actions.(actionScope).properties */
+/* ObjC end of actions.(actionScope).properties */
+/* ObjC start of properties */
+/* ObjC end of properties */
+
++ (void) initialize;
++ (id) newSymbolTableParser:(id<ANTLRTokenStream>)aStream;
+/* ObjC start of actions.(actionScope).methodsDecl */
+/* ObjC end of actions.(actionScope).methodsDecl */

+/* ObjC start of methodsDecl */
+/* ObjC end of methodsDecl */

- (void)prog;
- (void)globals;
@@ -75,3 +110,4 @@ int level;


@end /* end of SymbolTableParser interface */
+
diff --git a/runtime/ObjC/Framework/examples/scopes/SymbolTableParser.m b/runtime/ObjC/Framework/examples/scopes/SymbolTableParser.m
index 41af005..cc2b37e 100644
--- a/runtime/ObjC/Framework/examples/scopes/SymbolTableParser.m
+++ b/runtime/ObjC/Framework/examples/scopes/SymbolTableParser.m
@@ -1,43 +1,18 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version 3.2 Aug 24, 2010 10:45:57
+ *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
*
*     -  From the grammar source file : SymbolTable.g
- *     -                            On : 2010-08-24 13:53:46
- *     -                for the parser : SymbolTableParserParser *
- * Editing it, at least manually, is not wise.
+ *     -                            On : 2011-05-06 15:04:42
+ *     -                for the parser : SymbolTableParserParser
+ *
+ * Editing it, at least manually, is not wise.
*
* ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
*
*
*/
-// [The "BSD licence"]
-// Copyright (c) 2010 Alan Condit
-//
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. The name of the author may not be used to endorse or promote products
-//    derived from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// $ANTLR 3.2 Aug 24, 2010 10:45:57 SymbolTable.g 2010-08-24 13:53:46
+// $ANTLR ${project.version} ${buildNumber} SymbolTable.g 2011-05-06 15:04:42
+

/* -----------------------------------------
* Include the ANTLR3 generated header file.
@@ -47,72 +22,75 @@


/* ============================================================================= */
-
/* =============================================================================
* Start of recognizer
*/

-
-
#pragma mark Bitsets
-static ANTLRBitSet *FOLLOW_globals_in_prog44;
-static const unsigned long long FOLLOW_globals_in_prog44_data[] = { 0x0000000000000082LL};
-static ANTLRBitSet *FOLLOW_method_in_prog47;
-static const unsigned long long FOLLOW_method_in_prog47_data[] = { 0x0000000000000082LL};
-static ANTLRBitSet *FOLLOW_decl_in_globals79;
-static const unsigned long long FOLLOW_decl_in_globals79_data[] = { 0x0000000000004002LL};
-static ANTLRBitSet *FOLLOW_7_in_method110;
-static const unsigned long long FOLLOW_7_in_method110_data[] = { 0x0000000000000010LL};
-static ANTLRBitSet *FOLLOW_ID_in_method112;
-static const unsigned long long FOLLOW_ID_in_method112_data[] = { 0x0000000000000100LL};
-static ANTLRBitSet *FOLLOW_8_in_method114;
-static const unsigned long long FOLLOW_8_in_method114_data[] = { 0x0000000000000200LL};
-static ANTLRBitSet *FOLLOW_9_in_method116;
-static const unsigned long long FOLLOW_9_in_method116_data[] = { 0x0000000000000400LL};
-static ANTLRBitSet *FOLLOW_block_in_method118;
-static const unsigned long long FOLLOW_block_in_method118_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_10_in_block147;
-static const unsigned long long FOLLOW_10_in_block147_data[] = { 0x0000000000004C10LL};
-static ANTLRBitSet *FOLLOW_decl_in_block150;
-static const unsigned long long FOLLOW_decl_in_block150_data[] = { 0x0000000000004C10LL};
-static ANTLRBitSet *FOLLOW_stat_in_block155;
-static const unsigned long long FOLLOW_stat_in_block155_data[] = { 0x0000000000000C10LL};
-static ANTLRBitSet *FOLLOW_11_in_block159;
-static const unsigned long long FOLLOW_11_in_block159_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_ID_in_stat183;
-static const unsigned long long FOLLOW_ID_in_stat183_data[] = { 0x0000000000001000LL};
-static ANTLRBitSet *FOLLOW_12_in_stat185;
-static const unsigned long long FOLLOW_12_in_stat185_data[] = { 0x0000000000000020LL};
-static ANTLRBitSet *FOLLOW_INT_in_stat187;
-static const unsigned long long FOLLOW_INT_in_stat187_data[] = { 0x0000000000002000LL};
-static ANTLRBitSet *FOLLOW_13_in_stat189;
-static const unsigned long long FOLLOW_13_in_stat189_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_block_in_stat199;
-static const unsigned long long FOLLOW_block_in_stat199_data[] = { 0x0000000000000002LL};
-static ANTLRBitSet *FOLLOW_14_in_decl213;
-static const unsigned long long FOLLOW_14_in_decl213_data[] = { 0x0000000000000010LL};
-static ANTLRBitSet *FOLLOW_ID_in_decl215;
-static const unsigned long long FOLLOW_ID_in_decl215_data[] = { 0x0000000000002000LL};
-static ANTLRBitSet *FOLLOW_13_in_decl217;
-static const unsigned long long FOLLOW_13_in_decl217_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_globals_in_prog50;
+static const unsigned long long FOLLOW_globals_in_prog50_data[] = { 0x0000000000001002LL};
+static ANTLRBitSet *FOLLOW_method_in_prog53;
+static const unsigned long long FOLLOW_method_in_prog53_data[] = { 0x0000000000001002LL};
+static ANTLRBitSet *FOLLOW_decl_in_globals85;
+static const unsigned long long FOLLOW_decl_in_globals85_data[] = { 0x0000000000000802LL};
+static ANTLRBitSet *FOLLOW_12_in_method116;
+static const unsigned long long FOLLOW_12_in_method116_data[] = { 0x0000000000000010LL};
+static ANTLRBitSet *FOLLOW_ID_in_method118;
+static const unsigned long long FOLLOW_ID_in_method118_data[] = { 0x0000000000000080LL};
+static ANTLRBitSet *FOLLOW_7_in_method120;
+static const unsigned long long FOLLOW_7_in_method120_data[] = { 0x0000000000000100LL};
+static ANTLRBitSet *FOLLOW_8_in_method122;
+static const unsigned long long FOLLOW_8_in_method122_data[] = { 0x0000000000002000LL};
+static ANTLRBitSet *FOLLOW_block_in_method124;
+static const unsigned long long FOLLOW_block_in_method124_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_13_in_block153;
+static const unsigned long long FOLLOW_13_in_block153_data[] = { 0x0000000000006810LL};
+static ANTLRBitSet *FOLLOW_decl_in_block156;
+static const unsigned long long FOLLOW_decl_in_block156_data[] = { 0x0000000000006810LL};
+static ANTLRBitSet *FOLLOW_stat_in_block161;
+static const unsigned long long FOLLOW_stat_in_block161_data[] = { 0x0000000000006010LL};
+static ANTLRBitSet *FOLLOW_14_in_block165;
+static const unsigned long long FOLLOW_14_in_block165_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_ID_in_stat189;
+static const unsigned long long FOLLOW_ID_in_stat189_data[] = { 0x0000000000000400LL};
+static ANTLRBitSet *FOLLOW_10_in_stat191;
+static const unsigned long long FOLLOW_10_in_stat191_data[] = { 0x0000000000000020LL};
+static ANTLRBitSet *FOLLOW_INT_in_stat193;
+static const unsigned long long FOLLOW_INT_in_stat193_data[] = { 0x0000000000000200LL};
+static ANTLRBitSet *FOLLOW_9_in_stat195;
+static const unsigned long long FOLLOW_9_in_stat195_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_block_in_stat205;
+static const unsigned long long FOLLOW_block_in_stat205_data[] = { 0x0000000000000002LL};
+static ANTLRBitSet *FOLLOW_11_in_decl219;
+static const unsigned long long FOLLOW_11_in_decl219_data[] = { 0x0000000000000010LL};
+static ANTLRBitSet *FOLLOW_ID_in_decl221;
+static const unsigned long long FOLLOW_ID_in_decl221_data[] = { 0x0000000000000200LL};
+static ANTLRBitSet *FOLLOW_9_in_decl223;
+static const unsigned long long FOLLOW_9_in_decl223_data[] = { 0x0000000000000002LL};


#pragma mark Dynamic Global Scopes
-@implementation Symbols_Scope  /* globalAttributeScopeImpl */
+@implementation Symbols_Scope  /* globalAttributeScopeImplementation */
/* start of synthesize -- OBJC-Line 1750 */

@synthesize names;
+
+ (Symbols_Scope *)newSymbols_Scope
{
return [[[Symbols_Scope alloc] init] retain];
}
-/* start of iterate get and set functions */

-- (ANTLRHashMap *)getnames { return( names ); }
+- (id) init
+{
+    self = [super init];
+    return self;
+}

-- (void)setnames:(ANTLRHashMap *)aVal { names = aVal; }
+/* start of iterate get and set functions */

+- (ANTLRPtrBuffer *)getnames { return( names ); }

+- (void)setnames:(ANTLRPtrBuffer *)aVal { names = aVal; }

/* End of iterate get and set functions */

@@ -121,64 +99,73 @@ static const unsigned long long FOLLOW_13_in_decl217_data[] = { 0x00000000000000

#pragma mark Dynamic Rule Scopes

-#pragma mark Rule return scopes start
-/* returnScope */
-
-/* returnScope */
-
-/* returnScope */
-
-/* returnScope */
-
-/* returnScope */
+#pragma mark Rule Return Scopes start
+//#pragma mark Rule return scopes start
+//

-/* returnScope */
+#pragma mark Rule return scopes start

+@implementation SymbolTableParser  // line 637

+/* ObjC start of ruleAttributeScope */
+#pragma mark Dynamic Rule Scopes
+/* ObjC end of ruleAttributeScope */
+#pragma mark global Attribute Scopes
+/* ObjC start globalAttributeScope */
+static _stack;

-@implementation SymbolTableParser  // line 637
+/* ObjC end globalAttributeScope */
+/* ObjC start actions.(actionScope).synthesize */
+/* ObjC end actions.(actionScope).synthesize */
+/* ObjC start synthesize() */
+/* ObjC end synthesize() */

+ (void) initialize
{
#pragma mark Bitsets
-    FOLLOW_globals_in_prog44 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_globals_in_prog44_data Count:(NSUInteger)1] retain];
-    FOLLOW_method_in_prog47 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_method_in_prog47_data Count:(NSUInteger)1] retain];
-    FOLLOW_decl_in_globals79 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_decl_in_globals79_data Count:(NSUInteger)1] retain];
-    FOLLOW_7_in_method110 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_method110_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_method112 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_method112_data Count:(NSUInteger)1] retain];
-    FOLLOW_8_in_method114 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_method114_data Count:(NSUInteger)1] retain];
-    FOLLOW_9_in_method116 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_method116_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_method118 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_method118_data Count:(NSUInteger)1] retain];
-    FOLLOW_10_in_block147 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_10_in_block147_data Count:(NSUInteger)1] retain];
-    FOLLOW_decl_in_block150 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_decl_in_block150_data Count:(NSUInteger)1] retain];
-    FOLLOW_stat_in_block155 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_stat_in_block155_data Count:(NSUInteger)1] retain];
-    FOLLOW_11_in_block159 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_block159_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_stat183 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_stat183_data Count:(NSUInteger)1] retain];
-    FOLLOW_12_in_stat185 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_12_in_stat185_data Count:(NSUInteger)1] retain];
-    FOLLOW_INT_in_stat187 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_stat187_data Count:(NSUInteger)1] retain];
-    FOLLOW_13_in_stat189 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_13_in_stat189_data Count:(NSUInteger)1] retain];
-    FOLLOW_block_in_stat199 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_stat199_data Count:(NSUInteger)1] retain];
-    FOLLOW_14_in_decl213 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_14_in_decl213_data Count:(NSUInteger)1] retain];
-    FOLLOW_ID_in_decl215 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_decl215_data Count:(NSUInteger)1] retain];
-    FOLLOW_13_in_decl217 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_13_in_decl217_data Count:(NSUInteger)1] retain];
-
-    [ANTLRBaseRecognizer setTokenNames:[[[NSArray alloc] initWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
- @"ID", @"INT", @"WS", @"'method'", @"'('", @"')'", @"'{'", @"'}'", @"'='",
- @"';'", @"'int'", nil] retain]];
+    FOLLOW_globals_in_prog50 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_globals_in_prog50_data Count:(NSUInteger)1] retain];
+    FOLLOW_method_in_prog53 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_method_in_prog53_data Count:(NSUInteger)1] retain];
+    FOLLOW_decl_in_globals85 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_decl_in_globals85_data Count:(NSUInteger)1] retain];
+    FOLLOW_12_in_method116 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_12_in_method116_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_method118 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_method118_data Count:(NSUInteger)1] retain];
+    FOLLOW_7_in_method120 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_7_in_method120_data Count:(NSUInteger)1] retain];
+    FOLLOW_8_in_method122 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_8_in_method122_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_method124 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_method124_data Count:(NSUInteger)1] retain];
+    FOLLOW_13_in_block153 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_13_in_block153_data Count:(NSUInteger)1] retain];
+    FOLLOW_decl_in_block156 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_decl_in_block156_data Count:(NSUInteger)1] retain];
+    FOLLOW_stat_in_block161 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_stat_in_block161_data Count:(NSUInteger)1] retain];
+    FOLLOW_14_in_block165 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_14_in_block165_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_stat189 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_stat189_data Count:(NSUInteger)1] retain];
+    FOLLOW_10_in_stat191 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_10_in_stat191_data Count:(NSUInteger)1] retain];
+    FOLLOW_INT_in_stat193 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_INT_in_stat193_data Count:(NSUInteger)1] retain];
+    FOLLOW_9_in_stat195 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_stat195_data Count:(NSUInteger)1] retain];
+    FOLLOW_block_in_stat205 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_block_in_stat205_data Count:(NSUInteger)1] retain];
+    FOLLOW_11_in_decl219 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_11_in_decl219_data Count:(NSUInteger)1] retain];
+    FOLLOW_ID_in_decl221 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_decl221_data Count:(NSUInteger)1] retain];
+    FOLLOW_9_in_decl223 = [[ANTLRBitSet newANTLRBitSetWithBits:(const unsigned long long *)FOLLOW_9_in_decl223_data Count:(NSUInteger)1] retain];
+
+    [ANTLRBaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>",
+ @"ID", @"INT", @"WS", @"'('", @"')'", @"';'", @"'='", @"'int'", @"'method'",
+ @"'{'", @"'}'", nil] retain]];
+    [ANTLRBaseRecognizer setGrammarFileName:@"SymbolTable.g"];
}

+ (SymbolTableParser *)newSymbolTableParser:(id<ANTLRTokenStream>)aStream
{
return [[SymbolTableParser alloc] initWithTokenStream:aStream];

+
}

- (id) initWithTokenStream:(id<ANTLRTokenStream>)aStream
{
-    if ((self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:6+1] retain]]) != nil) {
-
+    self = [super initWithTokenStream:aStream State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:6+1] retain]];
+    if ( self != nil ) {


+        /* globalAttributeScopeInit */
+        Symbols_scope = [Symbols_Scope newSymbols_Scope];
+        Symbols_stack = [ANTLRSymbolStack newANTLRSymbolStackWithLen:30];
/* start of actions-actionScope-init */

level = 0;
@@ -190,47 +177,58 @@ static const unsigned long long FOLLOW_13_in_decl217_data[] = { 0x00000000000000

- (void) dealloc
{
-    [Symbols_scope release];
+    [Symbols_stack release];
[super dealloc];
}
-// start actions.actionScope.methods
-// start methods()
-// start rules
+
+/* ObjC start members */
+/* ObjC end members */
+/* ObjC start actions.(actionScope).methods */
+/* ObjC end actions.(actionScope).methods */
+/* ObjC start methods() */
+/* ObjC end methods() */
+/* ObjC start rules */
/*
* $ANTLR start prog
* SymbolTable.g:25:1: prog : globals ( method )* ;
*/
- (void) prog
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
-        // SymbolTable.g:25:5: ( globals ( method )* ) // ruleBlockSingleAlt
-        // SymbolTable.g:25:9: globals ( method )* // alt
+        // SymbolTable.g:27:5: ( globals ( method )* ) // ruleBlockSingleAlt
+        // SymbolTable.g:27:9: globals ( method )* // alt
{
-        [self pushFollow:FOLLOW_globals_in_prog44];
+        /* ruleRef */
+        [self pushFollow:FOLLOW_globals_in_prog50];
[self globals];
+
[self popFollow];

-          /* element() */
+
+
do {
NSInteger alt1=2;
NSInteger LA1_0 = [input LA:1];
-            if ( (LA1_0==7) ) {
+            if ( (LA1_0==12) ) {
alt1=1;
}


switch (alt1) {
case 1 : ;
-                    // SymbolTable.g:25:18: method // alt
+                    // SymbolTable.g:27:18: method // alt
{
-                    [self pushFollow:FOLLOW_method_in_prog47];
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_method_in_prog53];
[self method];
+
[self popFollow];

-                      /* element() */
-                     /* elements */
+
+
}
break;

@@ -239,8 +237,8 @@ static const unsigned long long FOLLOW_13_in_decl217_data[] = { 0x00000000000000
}
} while (YES);
loop1: ;
-          /* element() */
-         /* elements */
+
+
}

// token+rule list labels
@@ -249,49 +247,54 @@ static const unsigned long long FOLLOW_13_in_decl217_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end prog */
+
/*
* $ANTLR start globals
- * SymbolTable.g:28:1: globals : ( decl )* ;
+ * SymbolTable.g:30:1: globals : ( decl )* ;
*/
- (void) globals
{
-    /* ruleScopeSetUp */
-    gStack = [ANTLRSymbolStack newANTLRSymbolStackWithLen:30];
-    Symbols_scope = [[Symbols_Scope newSymbols_Scope] retain];
-    [gStack push:Symbols_scope];
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */
+    [Symbols_stack push:[[Symbols_Scope newSymbols_Scope] retain]];


level++;
-        /* scopeSetAttributeRef */
-    ((Symbols_Scope *)[gStack peek]).names =  [ANTLRHashMap newANTLRHashMapWithLen:101];
+        /* scopeSetAttributeRef */((Symbols_Scope *)[Symbols_stack peek]).names =  [ANTLRPtrBuffer newANTLRPtrBufferWithLen:10];

@try {
-        // SymbolTable.g:34:5: ( ( decl )* ) // ruleBlockSingleAlt
-        // SymbolTable.g:34:9: ( decl )* // alt
+        // SymbolTable.g:36:5: ( ( decl )* ) // ruleBlockSingleAlt
+        // SymbolTable.g:36:9: ( decl )* // alt
{
do {
NSInteger alt2=2;
NSInteger LA2_0 = [input LA:1];
-            if ( (LA2_0==14) ) {
+            if ( (LA2_0==11) ) {
alt2=1;
}


switch (alt2) {
case 1 : ;
-                    // SymbolTable.g:34:10: decl // alt
+                    // SymbolTable.g:36:10: decl // alt
{
-                    [self pushFollow:FOLLOW_decl_in_globals79];
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_decl_in_globals85];
[self decl];
+
[self popFollow];

-                      /* element() */
-                     /* elements */
+
+
}
break;

@@ -300,13 +303,14 @@ static const unsigned long long FOLLOW_13_in_decl217_data[] = { 0x00000000000000
}
} while (YES);
loop2: ;
-          /* element() */

-                NSLog(@"globals: %@", /* scopeAttributeRef */
-        ((Symbols_Scope *)[gStack peek]).names);
-                level--;
-                  /* element() */
-         /* elements */
+
+
+                    NSLog( @"globals: %@", [((Symbols_Scope *)[Symbols_stack peek]).names toString] );
+                    level--;
+
+
+
}

// token+rule list labels
@@ -315,35 +319,46 @@ static const unsigned long long FOLLOW_13_in_decl217_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
-        [gStack pop];
+    }
+
+    @finally {
+        /* Terence's stuff */
+        [Symbols_stack pop];

}
return ;
}
/* $ANTLR end globals */
+
/*
* $ANTLR start method
- * SymbolTable.g:41:1: method : 'method' ID '(' ')' block ;
+ * SymbolTable.g:43:1: method : 'method' ID '(' ')' block ;
*/
- (void) method
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
-        // SymbolTable.g:42:5: ( 'method' ID '(' ')' block ) // ruleBlockSingleAlt
-        // SymbolTable.g:42:9: 'method' ID '(' ')' block // alt
+        // SymbolTable.g:44:5: ( 'method' ID '(' ')' block ) // ruleBlockSingleAlt
+        // SymbolTable.g:44:9: 'method' ID '(' ')' block // alt
{
-        [self match:input TokenType:7 Follow:FOLLOW_7_in_method110];   /* element() */
-        [self match:input TokenType:ID Follow:FOLLOW_ID_in_method112];   /* element() */
-        [self match:input TokenType:8 Follow:FOLLOW_8_in_method114];   /* element() */
-        [self match:input TokenType:9 Follow:FOLLOW_9_in_method116];   /* element() */
-        [self pushFollow:FOLLOW_block_in_method118];
+        [self match:input TokenType:12 Follow:FOLLOW_12_in_method116];
+
+        [self match:input TokenType:ID Follow:FOLLOW_ID_in_method118];
+
+        [self match:input TokenType:7 Follow:FOLLOW_7_in_method120];
+
+        [self match:input TokenType:8 Follow:FOLLOW_8_in_method122];
+
+        /* ruleRef */
+        [self pushFollow:FOLLOW_block_in_method124];
[self block];
+
[self popFollow];

-          /* element() */
-         /* elements */
+
+
}

// token+rule list labels
@@ -352,50 +367,56 @@ static const unsigned long long FOLLOW_13_in_decl217_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end method */
+
/*
* $ANTLR start block
- * SymbolTable.g:45:1: block : '{' ( decl )* ( stat )* '}' ;
+ * SymbolTable.g:47:1: block : '{' ( decl )* ( stat )* '}' ;
*/
- (void) block
{
-    /* ruleScopeSetUp */
-    gStack = [ANTLRSymbolStack newANTLRSymbolStackWithLen:30];
-    Symbols_scope = [[Symbols_Scope newSymbols_Scope] retain];
-    [gStack push:Symbols_scope];
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */
+    [Symbols_stack push:[[Symbols_Scope newSymbols_Scope] retain]];


level++;
-        /* scopeSetAttributeRef */
-    ((Symbols_Scope *)[gStack peek]).names =  [ANTLRHashMap newANTLRHashMapWithLen:101];
+        /* scopeSetAttributeRef */((Symbols_Scope *)[Symbols_stack peek]).names =  [ANTLRPtrBuffer newANTLRPtrBufferWithLen:10];

@try {
-        // SymbolTable.g:51:5: ( '{' ( decl )* ( stat )* '}' ) // ruleBlockSingleAlt
-        // SymbolTable.g:51:9: '{' ( decl )* ( stat )* '}' // alt
+        // SymbolTable.g:53:5: ( '{' ( decl )* ( stat )* '}' ) // ruleBlockSingleAlt
+        // SymbolTable.g:53:9: '{' ( decl )* ( stat )* '}' // alt
{
-        [self match:input TokenType:10 Follow:FOLLOW_10_in_block147];   /* element() */
+        [self match:input TokenType:13 Follow:FOLLOW_13_in_block153];
+
do {
NSInteger alt3=2;
NSInteger LA3_0 = [input LA:1];
-            if ( (LA3_0==14) ) {
+            if ( (LA3_0==11) ) {
alt3=1;
}


switch (alt3) {
case 1 : ;
-                    // SymbolTable.g:51:14: decl // alt
+                    // SymbolTable.g:53:14: decl // alt
{
-                    [self pushFollow:FOLLOW_decl_in_block150];
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_decl_in_block156];
[self decl];
+
[self popFollow];

-                      /* element() */
-                     /* elements */
+
+
}
break;

@@ -404,25 +425,28 @@ static const unsigned long long FOLLOW_13_in_decl217_data[] = { 0x00000000000000
}
} while (YES);
loop3: ;
-          /* element() */
+
+
do {
NSInteger alt4=2;
NSInteger LA4_0 = [input LA:1];
-            if ( (LA4_0==ID||LA4_0==10) ) {
+            if ( (LA4_0==ID||LA4_0==13) ) {
alt4=1;
}


switch (alt4) {
case 1 : ;
-                    // SymbolTable.g:51:22: stat // alt
+                    // SymbolTable.g:53:22: stat // alt
{
-                    [self pushFollow:FOLLOW_stat_in_block155];
+                    /* ruleRef */
+                    [self pushFollow:FOLLOW_stat_in_block161];
[self stat];
+
[self popFollow];

-                      /* element() */
-                     /* elements */
+
+
}
break;

@@ -431,14 +455,16 @@ static const unsigned long long FOLLOW_13_in_decl217_data[] = { 0x00000000000000
}
} while (YES);
loop4: ;
-          /* element() */
-        [self match:input TokenType:11 Follow:FOLLOW_11_in_block159];   /* element() */
-
-                NSLog(@"level %d symbols: %@", level, /* scopeAttributeRef */
-        ((Symbols_Scope *)[gStack peek]).names);
-                level--;
-                  /* element() */
-         /* elements */
+
+
+        [self match:input TokenType:14 Follow:FOLLOW_14_in_block165];
+
+
+                    NSLog( @"level %d symbols: %@", level, [((Symbols_Scope *)[Symbols_stack peek]).names toString] );
+                    level--;
+
+
+
}

// token+rule list labels
@@ -447,56 +473,68 @@ static const unsigned long long FOLLOW_13_in_decl217_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
-        [gStack pop];
+    }
+
+    @finally {
+        /* Terence's stuff */
+        [Symbols_stack pop];

}
return ;
}
/* $ANTLR end block */
+
/*
* $ANTLR start stat
- * SymbolTable.g:58:1: stat : ( ID '=' INT ';' | block );
+ * SymbolTable.g:60:1: stat : ( ID '=' INT ';' | block );
*/
- (void) stat
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
-        // SymbolTable.g:58:5: ( ID '=' INT ';' | block ) //ruleblock
+        // SymbolTable.g:60:5: ( ID '=' INT ';' | block ) //ruleblock
NSInteger alt5=2;
NSInteger LA5_0 = [input LA:1];

if ( (LA5_0==ID) ) {
alt5=1;
}
-        else if ( (LA5_0==10) ) {
+        else if ( (LA5_0==13) ) {
alt5=2;
}
else {
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:5 state:0 stream:input];
+            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:5 state:0 stream:input];
+            nvae.c = LA5_0;
@throw nvae;
+
}
switch (alt5) {
case 1 : ;
-                // SymbolTable.g:58:9: ID '=' INT ';' // alt
+                // SymbolTable.g:60:9: ID '=' INT ';' // alt
{
-                [self match:input TokenType:ID Follow:FOLLOW_ID_in_stat183];   /* element() */
-                [self match:input TokenType:12 Follow:FOLLOW_12_in_stat185];   /* element() */
-                [self match:input TokenType:INT Follow:FOLLOW_INT_in_stat187];   /* element() */
-                [self match:input TokenType:13 Follow:FOLLOW_13_in_stat189];   /* element() */
-                 /* elements */
+                [self match:input TokenType:ID Follow:FOLLOW_ID_in_stat189];
+
+                [self match:input TokenType:10 Follow:FOLLOW_10_in_stat191];
+
+                [self match:input TokenType:INT Follow:FOLLOW_INT_in_stat193];
+
+                [self match:input TokenType:9 Follow:FOLLOW_9_in_stat195];
+
}
break;
case 2 : ;
-                // SymbolTable.g:59:9: block // alt
+                // SymbolTable.g:61:9: block // alt
{
-                [self pushFollow:FOLLOW_block_in_stat199];
+                /* ruleRef */
+                [self pushFollow:FOLLOW_block_in_stat205];
[self block];
+
[self popFollow];

-                  /* element() */
-                 /* elements */
+
+
}
break;

@@ -507,31 +545,40 @@ static const unsigned long long FOLLOW_13_in_decl217_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end stat */
+
/*
* $ANTLR start decl
- * SymbolTable.g:62:1: decl : 'int' ID ';' ;
+ * SymbolTable.g:64:1: decl : 'int' ID ';' ;
*/
- (void) decl
{
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
ANTLRCommonToken *ID1 = nil;

-        // SymbolTable.g:62:5: ( 'int' ID ';' ) // ruleBlockSingleAlt
-        // SymbolTable.g:62:9: 'int' ID ';' // alt
+        // SymbolTable.g:64:5: ( 'int' ID ';' ) // ruleBlockSingleAlt
+        // SymbolTable.g:64:9: 'int' ID ';' // alt
{
-        [self match:input TokenType:14 Follow:FOLLOW_14_in_decl213];   /* element() */
-        ID1=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_decl215];   /* element() */
-        [self match:input TokenType:13 Follow:FOLLOW_13_in_decl217];   /* element() */
-        [/* scopeAttributeRef */
-        ((Symbols_Scope *)[gStack peek]).names addObject:ID1];  /* element() */
-         /* elements */
+        [self match:input TokenType:11 Follow:FOLLOW_11_in_decl219];
+
+        ID1=(ANTLRCommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_decl221];
+
+        [self match:input TokenType:9 Follow:FOLLOW_9_in_decl223];
+
+        [((Symbols_Scope *)[Symbols_stack peek]).names addObject:ID1];
+
+
}

// token+rule list labels
@@ -540,15 +587,15 @@ static const unsigned long long FOLLOW_13_in_decl217_data[] = { 0x00000000000000
@catch (ANTLRRecognitionException *re) {
[self reportError:re];
[self recover:input Exception:re];
-    }    @finally {
+    }
+
+    @finally {
+        /* Terence's stuff */
+
}
return ;
}
/* $ANTLR end decl */
+/* ObjC end rules */

@end /* end of SymbolTableParser implementation line 692 */
-
-
-/* End of code
- * =============================================================================
- */
diff --git a/runtime/ObjC/Framework/examples/scopes/main.m b/runtime/ObjC/Framework/examples/scopes/main.m
index d4fc632..edd9a23 100644
--- a/runtime/ObjC/Framework/examples/scopes/main.m
+++ b/runtime/ObjC/Framework/examples/scopes/main.m
@@ -6,7 +6,7 @@
int main() {
NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

-	NSString *string = [NSString stringWithContentsOfFile:@"../../examples/scopes/input"];
+	NSString *string = [NSString stringWithContentsOfFile:@"/Users/acondit/source/antlr3/acondit_localhost/code/antlr/antlr3-main/runtime/ObjC/Framework/examples/scopes/input"];
NSLog(@"input is : %@", string);
ANTLRStringStream *stream = [[ANTLRStringStream alloc] initWithStringNoCopy:string];
SymbolTableLexer *lexer = [[SymbolTableLexer alloc] initWithCharStream:stream];

