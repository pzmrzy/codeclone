commit 9b7a26342d720e404b11928031b37daa28912458
Author:     acondit <acondit@parrt.spork>
AuthorDate: Wed Apr 13 20:00:32 2011 -0800
Commit:     acondit <acondit@parrt.spork>
CommitDate: Wed Apr 13 20:00:32 2011 -0800

Used in ST4 implemetation.

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8215]

diff --git a/runtime/ObjC/Framework/ANTLRFileStream.h b/runtime/ObjC/Framework/ANTLRFileStream.h
new file mode 100644
index 0000000..329665a
--- /dev/null
+++ b/runtime/ObjC/Framework/ANTLRFileStream.h
@@ -0,0 +1,50 @@
+/*
+ [The "BSD license"]
+ Copyright (c) 2005-2009 Terence Parr
+ All rights reserved.
+
+ Redistribution and use in source and binary forms, with or without
+ modification, are permitted provided that the following conditions
+ are met:
+ 1. Redistributions of source code must retain the above copyright
+     notice, this list of conditions and the following disclaimer.
+ 2. Redistributions in binary form must reproduce the above copyright
+     notice, this list of conditions and the following disclaimer in the
+     documentation and/or other materials provided with the distribution.
+ 3. The name of the author may not be used to endorse or promote products
+     derived from this software without specific prior written permission.
+
+ THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#import "ANTLRStringStream.h"
+
+/** This is a char buffer stream that is loaded from a file
+ *  all at once when you construct the object.  This looks very
+ *  much like an ANTLReader or ANTLRInputStream, but it's a special case
+ *  since we know the exact size of the object to load.  We can avoid lots
+ *  of data copying.
+ */
+@interface ANTLRFileStream : ANTLRStringStream {
+	NSString *fileName;
+}
+
+
++ (id) newANTLRFileStream:(NSString*) fileName;
++ (id) newANTLRFileStream:(NSString *)aFileName encoding:(NSStringEncoding)encoding;
+- (id) init:(NSString *) aFileName;
+- (id) init:(NSString *) aFileName encoding:(NSStringEncoding)encoding;
+- (void) load:(NSString *)fileName encoding:(NSStringEncoding)encoding;
+- (NSString *) getSourceName;
+
+@property (retain) NSString *fileName;
+
+@end
diff --git a/runtime/ObjC/Framework/ANTLRFileStream.m b/runtime/ObjC/Framework/ANTLRFileStream.m
new file mode 100644
index 0000000..f0e5417
--- /dev/null
+++ b/runtime/ObjC/Framework/ANTLRFileStream.m
@@ -0,0 +1,109 @@
+/*
+ [The "BSD license"]
+ Copyright (c) 2005-2009 Terence Parr
+ All rights reserved.
+
+ Redistribution and use in source and binary forms, with or without
+ modification, are permitted provided that the following conditions
+ are met:
+ 1. Redistributions of source code must retain the above copyright
+ notice, this list of conditions and the following disclaimer.
+ 2. Redistributions in binary form must reproduce the above copyright
+ notice, this list of conditions and the following disclaimer in the
+ documentation and/or other materials provided with the distribution.
+ 3. The name of the author may not be used to endorse or promote products
+ derived from this software without specific prior written permission.
+
+ THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/** This is a char buffer stream that is loaded from a file
+ *  all at once when you construct the object.  This looks very
+ *  much like an ANTLReader or ANTLRInputStream, but it's a special case
+ *  since we know the exact size of the object to load.  We can avoid lots
+ *  of data copying.
+ */
+
+#import "ANTLRFileStream.h"
+
+@implementation ANTLRFileStream
+
+@synthesize fileName;
+
++ (id) newANTLRFileStream:(NSString*)fileName
+{
+    return [[ANTLRFileStream alloc] init:fileName];
+}
+
++ (id) newANTLRFileStream:(NSString *)aFileName encoding:(NSStringEncoding)encoding
+{
+    return [[ANTLRFileStream alloc] init:aFileName encoding:encoding];
+}
+
+- (id) init:(NSString *)aFileName
+{
+    self = [super init];
+    if ( self != nil ) {
+        fileName = aFileName;
+        [self load:aFileName encoding:NSUTF8StringEncoding];
+    }
+    return self;
+}
+
+- (id) init:(NSString *) aFileName encoding:(NSStringEncoding)encoding
+{
+    self = [super init];
+    if ( self != nil ) {
+        fileName = aFileName;
+        [self load:aFileName encoding:encoding];
+    }
+    return self;
+}
+
+- (NSString *) getSourceName
+{
+    return fileName;
+}
+
+- (void) load:(NSString *)aFileName encoding:(NSStringEncoding)encoding
+{
+    if ( aFileName==nil ) {
+        return;
+    }
+    NSError *error;
+    NSData *retData = nil;
+    NSFileHandle *fh;
+    @try {
+        NSString *fn = [aFileName stringByStandardizingPath];
+        NSURL *f = [NSURL fileURLWithPath:fn];
+        fh = [NSFileHandle fileHandleForReadingFromURL:f error:&error];
+        if ( fh==nil ) {
+            return;
+        }
+        int numRead=0;
+        int p1 = 0;
+        retData = [fh readDataToEndOfFile];
+        numRead = [retData length];
+#pragma mark fix these NSLog calls
+        NSLog( @"read %d chars; p was %d is now %d", n, p1, (p1+numRead) );
+        p1 += numRead;
+        n = p1;
+        data = [[NSString alloc] initWithData:retData encoding:NSASCIIStringEncoding];
+#pragma mark fix these NSLog calls
+        NSLog( @"n=%d", n );
+    }
+    @finally {
+        [fh closeFile];
+    }
+}
+
+@end

