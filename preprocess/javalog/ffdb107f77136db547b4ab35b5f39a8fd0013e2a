commit ffdb107f77136db547b4ab35b5f39a8fd0013e2a
Author:     acondit <acondit@parrt.spork>
AuthorDate: Sat May 7 07:58:23 2011 -0800
Commit:     acondit <acondit@parrt.spork>
CommitDate: Sat May 7 07:58:23 2011 -0800

Changes to match ANTLR3.4 revision

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8408]

diff --git a/runtime/ObjC/Framework/test/runtime/stream/ANTLRStringStreamTest.m b/runtime/ObjC/Framework/test/runtime/stream/ANTLRStringStreamTest.m
index 1da98a6..7b6b66e 100644
--- a/runtime/ObjC/Framework/test/runtime/stream/ANTLRStringStreamTest.m
+++ b/runtime/ObjC/Framework/test/runtime/stream/ANTLRStringStreamTest.m
@@ -27,16 +27,16 @@
{
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"This is a string used for input"];
[stream consume];
-	STAssertTrue([stream getIndex] > 0, @"Index should be greater than 0 after consume");
+	STAssertTrue(stream.index > 0, @"Index should be greater than 0 after consume");
[stream reset];
-	STAssertTrue([stream getIndex] == 0, @"Index should be 0 after reset");
+	STAssertTrue(stream.index == 0, @"Index should be 0 after reset");
[stream release];
}

-(void) testConsumeWithNewLine
{
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:@"This is a string\nused for input"];
-	while ([stream getIndex] < [stream size] && stream.line == 1)
+	while (stream.index < [stream size] && stream.line == 1)
{
[stream consume];
}
@@ -57,7 +57,7 @@
break;
}
}
-	STAssertTrue(eofFound, @"EOF Was not found in stream, Length =%d, index = %d, i = %d", [stream size], [stream getIndex], i);
+	STAssertTrue(eofFound, @"EOF Was not found in stream, Length =%d, index = %d, i = %d", [stream size], stream.index, i);
[stream release];
}

@@ -73,7 +73,7 @@
break;
}
}
-	STAssertTrue(eofFound, @"EOF Was not found in stream, Length =%d, index = %d, i = %d", [stream size], [stream getIndex], i);
+	STAssertTrue(eofFound, @"EOF Was not found in stream, Length =%d, index = %d, i = %d", [stream size], stream.index, i);
[stream release];
}

@@ -81,7 +81,7 @@
{
ANTLRStringStream *stream =[ANTLRStringStream newANTLRStringStream:@"This is a string used for input"];
[stream seek:10];
-	STAssertTrue([stream getIndex] == 10, @"Index should be 10");
+	STAssertTrue(stream.index == 10, @"Index should be 10");
// Get char 10 which is s (with 0 being T)
STAssertTrue([stream LA:1] > -1 && (char)[stream LA:1] == 's', @"Char returned should be s");
[stream release];
@@ -92,16 +92,16 @@
ANTLRStringStream *stream =[ANTLRStringStream newANTLRStringStream:@"This is a string used for input"];
[stream mark];
[stream seek:10];
-	STAssertTrue([stream getIndex] == 10, @"Index should be 10");
+	STAssertTrue(stream.index == 10, @"Index should be 10");
[stream rewind];
-	STAssertTrue([stream getIndex] == 0, @"Index should be 0");
+	STAssertTrue(stream.index == 0, @"Index should be 0");
[stream seek:5];
-	STAssertTrue([stream getIndex] == 5, @"Index should be 5");
+	STAssertTrue(stream.index == 5, @"Index should be 5");
[stream mark]; // make a new marker to test a branch.
[stream seek:10];
-	STAssertTrue([stream getIndex] == 10, @"Index should be 10");
+	STAssertTrue(stream.index == 10, @"Index should be 10");
[stream rewind]; // should be marked to 5.
-	STAssertTrue([stream getIndex] == 5, @"Index should be 5");
+	STAssertTrue(stream.index == 5, @"Index should be 5");
[stream release];
}


