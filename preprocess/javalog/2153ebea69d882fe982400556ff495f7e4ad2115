commit 2153ebea69d882fe982400556ff495f7e4ad2115
Author:     acondit <acondit@parrt.spork>
AuthorDate: Sat May 7 08:06:56 2011 -0800
Commit:     acondit <acondit@parrt.spork>
CommitDate: Sat May 7 08:06:56 2011 -0800

Changes to match ANTLR3.4 revision.

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 8412]

diff --git a/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g b/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g
index e13b50f..742f983 100644
--- a/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g
+++ b/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g
@@ -36,12 +36,12 @@ CALL

COMMENT
:   '/*' (options {greedy=false;} : . )* '*/'
-        {NSLog(@"found comment \%@", [self getText]);}
+        {NSLog(@"found comment \%@", [self text]);}
;

SL_COMMENT
:   '//' (options {greedy=false;} : . )* '\n'
-        {NSLog(@"found // comment \%@", [self getText]);}
+        {NSLog(@"found // comment \%@", [self text]);}
;

STRING
diff --git a/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.h b/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.h
new file mode 100644
index 0000000..2b255a6
--- /dev/null
+++ b/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.h
@@ -0,0 +1,87 @@
+// $ANTLR ${project.version} ${buildNumber} /Users/acondit/source/antlr3/acondit_localhost/code/antlr/antlr3-main/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.g 2011-05-05 22:05:01
+
+/* =============================================================================
+ * Standard antlr3 OBJC runtime definitions
+ */
+#import <Cocoa/Cocoa.h>
+#import <ANTLR/ANTLR.h>
+/* End of standard antlr3 runtime definitions
+ * =============================================================================
+ */
+
+/* Start cyclicDFAInterface */
+
+#pragma mark Rule return scopes start
+#pragma mark Rule return scopes end
+#pragma mark Tokens
+#ifdef EOF
+#undef EOF
+#endif
+#define EOF -1
+#define ARG 4
+#define CALL 5
+#define CHAR 6
+#define CLASS 7
+#define COMMENT 8
+#define ESC 9
+#define FIELD 10
+#define ID 11
+#define IMPORT 12
+#define METHOD 13
+#define QID 14
+#define QIDStar 15
+#define RETURN 16
+#define SL_COMMENT 17
+#define STAT 18
+#define STRING 19
+#define TYPE 20
+#define WS 21
+/* interface lexer class */
+@interface Fuzzy : ANTLRLexer { // line 283
+SEL synpred9_FuzzySelector;
+SEL synpred2_FuzzySelector;
+SEL synpred7_FuzzySelector;
+SEL synpred4_FuzzySelector;
+SEL synpred8_FuzzySelector;
+SEL synpred6_FuzzySelector;
+SEL synpred5_FuzzySelector;
+SEL synpred3_FuzzySelector;
+SEL synpred1_FuzzySelector;
+/* ObjC start of actions.lexer.memVars */
+/* ObjC end of actions.lexer.memVars */
+}
++ (void) initialize;
++ (Fuzzy *)newFuzzyWithCharStream:(id<ANTLRCharStream>)anInput;
+/* ObjC start actions.lexer.methodsDecl */
+/* ObjC end actions.lexer.methodsDecl */
+- (void) mIMPORT ;
+- (void) mRETURN ;
+- (void) mCLASS ;
+- (void) mMETHOD ;
+- (void) mFIELD ;
+- (void) mSTAT ;
+- (void) mCALL ;
+- (void) mCOMMENT ;
+- (void) mSL_COMMENT ;
+- (void) mSTRING ;
+- (void) mCHAR ;
+- (void) mWS ;
+- (void) mQID ;
+- (void) mQIDStar ;
+- (void) mTYPE ;
+- (void) mARG ;
+- (void) mID ;
+- (void) mESC ;
+- (void) mTokens ;
+- (void) synpred1_Fuzzy_fragment ;
+- (void) synpred2_Fuzzy_fragment ;
+- (void) synpred3_Fuzzy_fragment ;
+- (void) synpred4_Fuzzy_fragment ;
+- (void) synpred5_Fuzzy_fragment ;
+- (void) synpred6_Fuzzy_fragment ;
+- (void) synpred7_Fuzzy_fragment ;
+- (void) synpred8_Fuzzy_fragment ;
+- (void) synpred9_Fuzzy_fragment ;
+
+@end /* end of Fuzzy interface */
+
diff --git a/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.m b/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.m
index bc173bf..665f412 100644
--- a/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.m
+++ b/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.m
@@ -1,300 +1,31 @@
/** \file
- *  This OBJC source file was generated by $ANTLR version 3.2 Aug 24, 2010 10:45:57
+ *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
*
*     -  From the grammar source file : Fuzzy.g
- *     -                            On : 2010-08-24 13:53:40
- *     -                 for the lexer : FuzzyLexer *
- * Editing it, at least manually, is not wise.
+ *     -                            On : 2011-05-06 11:47:46
+ *     -                 for the lexer : FuzzyLexer
+ *
+ * Editing it, at least manually, is not wise.
*
* ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
*
*
*/
-// [The "BSD licence"]
-// Copyright (c) 2010 Alan Condit
-//
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. The name of the author may not be used to endorse or promote products
-//    derived from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-// $ANTLR 3.2 Aug 24, 2010 10:45:57 Fuzzy.g 2010-08-24 13:53:40
+// $ANTLR ${project.version} ${buildNumber} Fuzzy.g 2011-05-06 11:47:46
+

/* -----------------------------------------
* Include the ANTLR3 generated header file.
*/
-#import "FuzzyLexer.h"
+#import "Fuzzy.h"
/* ----------------------------------------- */


/* ============================================================================= */
-
/* =============================================================================
* Start of recognizer
*/

-#pragma mark Cyclic DFA implementation start DFA38
-@implementation DFA38
-const static NSInteger dfa38_eot[19] =
-    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static NSInteger dfa38_eof[19] =
-    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
-const static unichar dfa38_min[19] =
-    {9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
-const static unichar dfa38_max[19] =
-    {122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
-const static NSInteger dfa38_accept[19] =
-    {-1,10,-1,2,4,5,7,-1,8,9,-1,6,-1,-1,1,12,11,-1,3};
-const static NSInteger dfa38_special[19] =
-    {-1,-1,0,-1,-1,-1,-1,1,-1,-1,2,-1,3,4,-1,-1,-1,5,-1};
-const static NSInteger dfa38_transition[] = {};
-const static NSInteger dfa38_transition0[] = {15, 15, -1, -1, -1, -1, -1,
- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1,
- 1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1,
- -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 12, 12, 12, 12, 12,
- 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
- 12, 12, -1, -1, -1, -1, 12, -1, 12, 12, 17, 12, 12, 10, 12, 12, 13, 12,
- 12, 12, 12, 12, 12, 12, 12, 2, 10, 12, 12, 12, 10, 12, 12, 12};
-const static NSInteger dfa38_transition1[] = {-1};
-
-
-+ () newDFA38WithRecognizer:(ANTLRBaseRecognizer *)aRecognizer
-{
-    return [[[DFA38 alloc] initWithRecognizer:aRecognizer] retain];
-}
-
-- (id) initWithRecognizer:(ANTLRBaseRecognizer *) theRecognizer
-{
-    if ((self = [super initWithRecognizer:theRecognizer]) != nil) {
-        decisionNumber = 38;
-        eot = dfa38_eot;
-        eof = dfa38_eof;
-        min = dfa38_min;
-        max = dfa38_max;
-        accept = dfa38_accept;
-        special = dfa38_special;
-        if (!(transition = calloc(19, sizeof(void*)))) {
-            [self release];
-            return nil;
-        }
-        len = 19;
-        transition[0] = dfa38_transition0;
-        transition[1] = dfa38_transition;
-        transition[2] = dfa38_transition1;
-        transition[3] = dfa38_transition;
-        transition[4] = dfa38_transition;
-        transition[5] = dfa38_transition;
-        transition[6] = dfa38_transition;
-        transition[7] = dfa38_transition1;
-        transition[8] = dfa38_transition;
-        transition[9] = dfa38_transition;
-        transition[10] = dfa38_transition1;
-        transition[11] = dfa38_transition;
-        transition[12] = dfa38_transition1;
-        transition[13] = dfa38_transition1;
-        transition[14] = dfa38_transition;
-        transition[15] = dfa38_transition;
-        transition[16] = dfa38_transition;
-        transition[17] = dfa38_transition1;
-        transition[18] = dfa38_transition;
-    }
-    return self;
-}
-
-/* start dfa.specialStateSTs */
-- (NSInteger) specialStateTransition:(NSInteger)s Stream:(id<ANTLRIntStream>)anInput
-{
-    id<ANTLRIntStream> input = anInput;
-    switch (s) {
-                case 0 : ;
-                    /* cyclicDFAState */
-                    NSInteger LA38_2 = [input LA:1];
-
-
-                    NSInteger index38_2 = [input getIndex];
-                    [input rewind];
-                    s = -1;
-                    /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred2_Fuzzy_fragment)]) { s = 3;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred4_Fuzzy_fragment)]) { s = 4;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred5_Fuzzy_fragment)]) { s = 5;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred7_Fuzzy_fragment)]) { s = 6;}
-
-
-                    [input seek:index38_2];
-                    if ( s >= 0 )
-                        return s;
-                     break;
-                case 1 : ;
-                    /* cyclicDFAState */
-                    NSInteger LA38_7 = [input LA:1];
-
-
-                    NSInteger index38_7 = [input getIndex];
-                    [input rewind];
-                    s = -1;
-                    /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred8_Fuzzy_fragment)]) { s = 8;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred9_Fuzzy_fragment)]) { s = 9;}
-
-
-                    [input seek:index38_7];
-                    if ( s >= 0 )
-                        return s;
-                     break;
-                case 2 : ;
-                    /* cyclicDFAState */
-                    NSInteger LA38_10 = [input LA:1];
-
-
-                    NSInteger index38_10 = [input getIndex];
-                    [input rewind];
-                    s = -1;
-                    /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred4_Fuzzy_fragment)]) { s = 4;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred5_Fuzzy_fragment)]) { s = 5;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred6_Fuzzy_fragment)]) { s = 11;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred7_Fuzzy_fragment)]) { s = 6;}
-
-
-                    [input seek:index38_10];
-                    if ( s >= 0 )
-                        return s;
-                     break;
-                case 3 : ;
-                    /* cyclicDFAState */
-                    NSInteger LA38_12 = [input LA:1];
-
-
-                    NSInteger index38_12 = [input getIndex];
-                    [input rewind];
-                    s = -1;
-                    /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred4_Fuzzy_fragment)]) { s = 4;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred5_Fuzzy_fragment)]) { s = 5;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred7_Fuzzy_fragment)]) { s = 6;}
-
-
-                    [input seek:index38_12];
-                    if ( s >= 0 )
-                        return s;
-                     break;
-                case 4 : ;
-                    /* cyclicDFAState */
-                    NSInteger LA38_13 = [input LA:1];
-
-
-                    NSInteger index38_13 = [input getIndex];
-                    [input rewind];
-                    s = -1;
-                    /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred1_Fuzzy_fragment)]) { s = 14;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred4_Fuzzy_fragment)]) { s = 4;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred5_Fuzzy_fragment)]) { s = 5;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred6_Fuzzy_fragment)]) { s = 11;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred7_Fuzzy_fragment)]) { s = 6;}
-
-
-                    [input seek:index38_13];
-                    if ( s >= 0 )
-                        return s;
-                     break;
-                case 5 : ;
-                    /* cyclicDFAState */
-                    NSInteger LA38_17 = [input LA:1];
-
-
-                    NSInteger index38_17 = [input getIndex];
-                    [input rewind];
-                    s = -1;
-                    /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred3_Fuzzy_fragment)]) { s = 18;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred4_Fuzzy_fragment)]) { s = 4;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred5_Fuzzy_fragment)]) { s = 5;}
-
-                    else /* cyclicDFAEdge */
-                    if ([self evaluateSyntacticPredicate:@selector(synpred7_Fuzzy_fragment)]) { s = 6;}
-
-
-                    [input seek:index38_17];
-                    if ( s >= 0 )
-                        return s;
-                     break;
-    }
-    if ( [recognizer getBacktrackingLevel] > 0 ) { [recognizer setFailed:YES]; return -1; }
-    ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:38 state:s stream:[recognizer getInput]];
-    /* [self error:nvae]; */
-    @throw nvae;
-}
-
-/* end dfa.specialStateSTs */
-- (void) dealloc
-{
-    free(transition);
-    [super dealloc];
-}
-
-- (NSString *) description
-{
-    return @"1:1: Tokens options {k=1; backtrack=true; } : ( IMPORT | RETURN | CLASS | METHOD | FIELD | STAT | CALL | COMMENT | SL_COMMENT | STRING | CHAR | WS );";
-}
-
-
-@end /* end DFA38 implementation */
-
-#pragma mark Cyclic DFA implementation end DFA38
-
-
-
/** As per Terence: No returns for lexer rules! */
@implementation Fuzzy // line 330

@@ -315,13 +46,14 @@ const static NSInteger dfa38_transition1[] = {-1};

- (id) initWithCharStream:(id<ANTLRCharStream>)anInput
{
-    if ((self = [super initWithCharStream:anInput State:[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:30+1]]) != nil) {
+    self = [super initWithCharStream:anInput State:[[ANTLRRecognizerSharedState newANTLRRecognizerSharedStateWithRuleLen:30+1] retain]];
+    if ( self != nil ) {
SEL synpred9_FuzzySelector = @selector(synpred9_Fuzzy_fragment);

-        SEL synpred7_FuzzySelector = @selector(synpred7_Fuzzy_fragment);
-
SEL synpred2_FuzzySelector = @selector(synpred2_Fuzzy_fragment);

+        SEL synpred7_FuzzySelector = @selector(synpred7_Fuzzy_fragment);
+
SEL synpred4_FuzzySelector = @selector(synpred4_Fuzzy_fragment);

SEL synpred8_FuzzySelector = @selector(synpred8_Fuzzy_fragment);
@@ -334,19 +66,19 @@ const static NSInteger dfa38_transition1[] = {-1};

SEL synpred1_FuzzySelector = @selector(synpred1_Fuzzy_fragment);

-        dfa38 = [DFA38 newDFA38WithRecognizer:self];
}
return self;
}

- (void) dealloc
{
-    [dfa38 release];
[super dealloc];
}

-/* Start of actions.lexer.methods */
-/* start methods() */
+/* ObjC Start of actions.lexer.methods */
+/* ObjC end of actions.lexer.methods */
+/* ObjC start methods() */
+/* ObjC end methods() */

- (id<ANTLRToken>) nextToken
{
@@ -356,9 +88,9 @@ const static NSInteger dfa38_transition1[] = {-1};
}
state.token = nil;
state.channel = ANTLRTokenChannelDefault;
-        state.tokenStartCharIndex = [input getIndex];
-        state.tokenStartCharPositionInLine = [input getCharPositionInLine];
-        state.tokenStartLine = [input getLine];
+        state.tokenStartCharIndex = input.index;
+        state.tokenStartCharPositionInLine = input.charPositionInLine;
+        state.tokenStartLine = input.line;
state.text = nil;
@try {
NSInteger m = [input mark];
@@ -368,7 +100,7 @@ const static NSInteger dfa38_transition1[] = {-1};
state.backtracking = 0;
/* mTokens backtracks with synpred at backtracking==2
and we set the synpredgate to allow actions at level 1. */
-            if ( state.failed == YES ) {
+            if ( state.failed ) {
[input rewind:m];
[input consume]; /* advance one char and try again */
} else {
@@ -395,72 +127,85 @@ const static NSInteger dfa38_transition1[] = {-1};
{
if ( state.backtracking > 1 ) return [super alreadyParsedRule:anInput RuleIndex:ruleIndex];
return NO;
-}/* Start of Rules */
+}
+/* Start of Rules */
// $ANTLR start "IMPORT"
- (void) mIMPORT
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = IMPORT;
NSInteger _channel = ANTLRTokenChannelDefault;
-        id<ANTLRToken> *name=nil;
+        ANTLRCommonToken *name=nil;

// Fuzzy.g:5:2: ( 'import' WS name= QIDStar ( WS )? ';' ) // ruleBlockSingleAlt
// Fuzzy.g:5:4: 'import' WS name= QIDStar ( WS )? ';' // alt
{
-        [self matchString:@"import"]; if ( state.failed == YES ) return ;
-          /* element() */
-            [self mWS]; if ( state.failed == YES ) return ;
-          /* element() */
-        NSInteger nameStart31 = [self getIndex];
-        [self mQIDStar]; if ( state.failed == YES ) return ;
-
-        name = [[ANTLRCommonToken newANTLRCommonToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart31 Stop:[self getIndex]-1] retain];
-        [name setLine:[self getLine]];  /* element() */
+        [self matchString:@"import"]; if ( state.failed ) return ;
+
+
+
+        [self mWS]; if ( state.failed ) return ;
+
+
+
+        NSInteger nameStart31 = input.index;
+        [self mQIDStar]; if ( state.failed ) return ;
+
+        name = [[ANTLRCommonToken newToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart31 Stop:input.index-1] retain];
+        name.line = self.line;
+
+
// Fuzzy.g:5:29: ( WS )? // block
NSInteger alt1=2;
NSInteger LA1_0 = [input LA:1];

-        if ( ((LA1_0>='\t' && LA1_0<='\n')||LA1_0==' ') ) {
+        if ( ((LA1_0 >= '\t' && LA1_0 <= '\n')||LA1_0==' ') ) {
alt1=1;
}
switch (alt1) {
case 1 : ;
// Fuzzy.g:5:29: WS // alt
{
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
+                [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-          /* element() */
-        [self matchChar:';']; if ( state.failed == YES ) return ;
-          /* element() */
-         /* elements */
+
+
+        [self matchChar:';']; if ( state.failed ) return ;
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "IMPORT"
+/* $ANTLR end "IMPORT" */

// $ANTLR start "RETURN"
- (void) mRETURN
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = RETURN;
@@ -468,15 +213,17 @@ const static NSInteger dfa38_transition1[] = {-1};
// Fuzzy.g:10:2: ( 'return' ( options {greedy=false; } : . )* ';' ) // ruleBlockSingleAlt
// Fuzzy.g:10:4: 'return' ( options {greedy=false; } : . )* ';' // alt
{
-        [self matchString:@"return"]; if ( state.failed == YES ) return ;
-          /* element() */
+        [self matchString:@"return"]; if ( state.failed ) return ;
+
+
+
do {
NSInteger alt2=2;
NSInteger LA2_0 = [input LA:1];
if ( (LA2_0==';') ) {
alt2=2;
}
-            else if ( ((LA2_0>=0x0000 && LA2_0<=':')||(LA2_0>='<' && LA2_0<=0xFFFF)) ) {
+            else if ( ((LA2_0 >= 0x0000 && LA2_0 <= ':')||(LA2_0 >= '<' && LA2_0 <= 0xFFFF)) ) {
alt2=1;
}

@@ -485,9 +232,9 @@ const static NSInteger dfa38_transition1[] = {-1};
case 1 : ;
// Fuzzy.g:10:38: . // alt
{
-                    [self matchAny]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
+                    [self matchAny]; if ( state.failed ) return ;
+
+
}
break;

@@ -496,67 +243,79 @@ const static NSInteger dfa38_transition1[] = {-1};
}
} while (YES);
loop2: ;
-          /* element() */
-        [self matchChar:';']; if ( state.failed == YES ) return ;
-          /* element() */
-         /* elements */
+
+
+        [self matchChar:';']; if ( state.failed ) return ;
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "RETURN"
+/* $ANTLR end "RETURN" */

// $ANTLR start "CLASS"
- (void) mCLASS
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = CLASS;
NSInteger _channel = ANTLRTokenChannelDefault;
-        id<ANTLRToken> *name=nil;
+        ANTLRCommonToken *name=nil;

// Fuzzy.g:14:2: ( 'class' WS name= ID ( WS )? ( 'extends' WS QID ( WS )? )? ( 'implements' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? '{' ) // ruleBlockSingleAlt
// Fuzzy.g:14:4: 'class' WS name= ID ( WS )? ( 'extends' WS QID ( WS )? )? ( 'implements' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? '{' // alt
{
-        [self matchString:@"class"]; if ( state.failed == YES ) return ;
-          /* element() */
-            [self mWS]; if ( state.failed == YES ) return ;
-          /* element() */
-        NSInteger nameStart81 = [self getIndex];
-        [self mID]; if ( state.failed == YES ) return ;
-
-        name = [[ANTLRCommonToken newANTLRCommonToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart81 Stop:[self getIndex]-1] retain];
-        [name setLine:[self getLine]];  /* element() */
+        [self matchString:@"class"]; if ( state.failed ) return ;
+
+
+
+        [self mWS]; if ( state.failed ) return ;
+
+
+
+        NSInteger nameStart81 = input.index;
+        [self mID]; if ( state.failed ) return ;
+
+        name = [[ANTLRCommonToken newToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart81 Stop:input.index-1] retain];
+        name.line = self.line;
+
+
// Fuzzy.g:14:23: ( WS )? // block
NSInteger alt3=2;
NSInteger LA3_0 = [input LA:1];

-        if ( ((LA3_0>='\t' && LA3_0<='\n')||LA3_0==' ') ) {
+        if ( ((LA3_0 >= '\t' && LA3_0 <= '\n')||LA3_0==' ') ) {
alt3=1;
}
switch (alt3) {
case 1 : ;
// Fuzzy.g:14:23: WS // alt
{
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
+                [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-          /* element() */
+
+
// Fuzzy.g:14:27: ( 'extends' WS QID ( WS )? )? // block
NSInteger alt5=2;
NSInteger LA5_0 = [input LA:1];
@@ -568,37 +327,45 @@ const static NSInteger dfa38_transition1[] = {-1};
case 1 : ;
// Fuzzy.g:14:28: 'extends' WS QID ( WS )? // alt
{
-                [self matchString:@"extends"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                    [self mQID]; if ( state.failed == YES ) return ;
-                  /* element() */
+                [self matchString:@"extends"]; if ( state.failed ) return ;
+
+
+
+                [self mWS]; if ( state.failed ) return ;
+
+
+
+                [self mQID]; if ( state.failed ) return ;
+
+
+
// Fuzzy.g:14:45: ( WS )? // block
NSInteger alt4=2;
NSInteger LA4_0 = [input LA:1];

-                if ( ((LA4_0>='\t' && LA4_0<='\n')||LA4_0==' ') ) {
+                if ( ((LA4_0 >= '\t' && LA4_0 <= '\n')||LA4_0==' ') ) {
alt4=1;
}
switch (alt4) {
case 1 : ;
// Fuzzy.g:14:45: WS // alt
{
-                            [self mWS]; if ( state.failed == YES ) return ;
-                          /* element() */
-                         /* elements */
+                        [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-                  /* element() */
-                 /* elements */
+
+
}
break;

}
-          /* element() */
+
+
// Fuzzy.g:15:3: ( 'implements' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? // block
NSInteger alt10=2;
NSInteger LA10_0 = [input LA:1];
@@ -610,31 +377,39 @@ const static NSInteger dfa38_transition1[] = {-1};
case 1 : ;
// Fuzzy.g:15:4: 'implements' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* // alt
{
-                [self matchString:@"implements"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                    [self mQID]; if ( state.failed == YES ) return ;
-                  /* element() */
+                [self matchString:@"implements"]; if ( state.failed ) return ;
+
+
+
+                [self mWS]; if ( state.failed ) return ;
+
+
+
+                [self mQID]; if ( state.failed ) return ;
+
+
+
// Fuzzy.g:15:24: ( WS )? // block
NSInteger alt6=2;
NSInteger LA6_0 = [input LA:1];

-                if ( ((LA6_0>='\t' && LA6_0<='\n')||LA6_0==' ') ) {
+                if ( ((LA6_0 >= '\t' && LA6_0 <= '\n')||LA6_0==' ') ) {
alt6=1;
}
switch (alt6) {
case 1 : ;
// Fuzzy.g:15:24: WS // alt
{
-                            [self mWS]; if ( state.failed == YES ) return ;
-                          /* element() */
-                         /* elements */
+                        [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-                  /* element() */
+
+
do {
NSInteger alt9=2;
NSInteger LA9_0 = [input LA:1];
@@ -647,49 +422,55 @@ const static NSInteger dfa38_transition1[] = {-1};
case 1 : ;
// Fuzzy.g:15:29: ',' ( WS )? QID ( WS )? // alt
{
-                            [self matchChar:',']; if ( state.failed == YES ) return ;
-                              /* element() */
+                            [self matchChar:',']; if ( state.failed ) return ;
+
+
// Fuzzy.g:15:33: ( WS )? // block
NSInteger alt7=2;
NSInteger LA7_0 = [input LA:1];

-                            if ( ((LA7_0>='\t' && LA7_0<='\n')||LA7_0==' ') ) {
+                            if ( ((LA7_0 >= '\t' && LA7_0 <= '\n')||LA7_0==' ') ) {
alt7=1;
}
switch (alt7) {
case 1 : ;
// Fuzzy.g:15:33: WS // alt
{
-                                        [self mWS]; if ( state.failed == YES ) return ;
-                                      /* element() */
-                                     /* elements */
+                                    [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-                              /* element() */
-                                [self mQID]; if ( state.failed == YES ) return ;
-                              /* element() */
+
+
+                            [self mQID]; if ( state.failed ) return ;
+
+
+
// Fuzzy.g:15:41: ( WS )? // block
NSInteger alt8=2;
NSInteger LA8_0 = [input LA:1];

-                            if ( ((LA8_0>='\t' && LA8_0<='\n')||LA8_0==' ') ) {
+                            if ( ((LA8_0 >= '\t' && LA8_0 <= '\n')||LA8_0==' ') ) {
alt8=1;
}
switch (alt8) {
case 1 : ;
// Fuzzy.g:15:41: WS // alt
{
-                                        [self mWS]; if ( state.failed == YES ) return ;
-                                      /* element() */
-                                     /* elements */
+                                    [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-                              /* element() */
-                             /* elements */
+
+
}
break;

@@ -698,110 +479,129 @@ const static NSInteger dfa38_transition1[] = {-1};
}
} while (YES);
loop9: ;
-                  /* element() */
-                 /* elements */
+
+
}
break;

}
-          /* element() */
-        [self matchChar:'{']; if ( state.failed == YES ) return ;
-          /* element() */
+
+
+        [self matchChar:'{']; if ( state.failed ) return ;
+
+
if ( state.backtracking == 1 ) {
-            NSLog(@"found class %@", (name!=nil?[name getText]:0));
-        }  /* element() */
-         /* elements */
+            NSLog(@"found class %@", (name!=nil?name.text:nil));
}

-        // token+rule list labels

-        [state setType:_type];
+        }
+
+        // token+rule list labels

+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "CLASS"
+/* $ANTLR end "CLASS" */

// $ANTLR start "METHOD"
- (void) mMETHOD
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = METHOD;
NSInteger _channel = ANTLRTokenChannelDefault;
-        id<ANTLRToken> *name=nil;
+        ANTLRCommonToken *name=nil;

// Fuzzy.g:20:5: ( TYPE WS name= ID ( WS )? '(' ( ARG ( WS )? ( ',' ( WS )? ARG ( WS )? )* )? ')' ( WS )? ( 'throws' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? '{' ) // ruleBlockSingleAlt
// Fuzzy.g:20:9: TYPE WS name= ID ( WS )? '(' ( ARG ( WS )? ( ',' ( WS )? ARG ( WS )? )* )? ')' ( WS )? ( 'throws' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? '{' // alt
{
-            [self mTYPE]; if ( state.failed == YES ) return ;
-          /* element() */
-            [self mWS]; if ( state.failed == YES ) return ;
-          /* element() */
-        NSInteger nameStart158 = [self getIndex];
-        [self mID]; if ( state.failed == YES ) return ;
-
-        name = [[ANTLRCommonToken newANTLRCommonToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart158 Stop:[self getIndex]-1] retain];
-        [name setLine:[self getLine]];  /* element() */
+        [self mTYPE]; if ( state.failed ) return ;
+
+
+
+        [self mWS]; if ( state.failed ) return ;
+
+
+
+        NSInteger nameStart158 = input.index;
+        [self mID]; if ( state.failed ) return ;
+
+        name = [[ANTLRCommonToken newToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart158 Stop:input.index-1] retain];
+        name.line = self.line;
+
+
// Fuzzy.g:20:25: ( WS )? // block
NSInteger alt11=2;
NSInteger LA11_0 = [input LA:1];

-        if ( ((LA11_0>='\t' && LA11_0<='\n')||LA11_0==' ') ) {
+        if ( ((LA11_0 >= '\t' && LA11_0 <= '\n')||LA11_0==' ') ) {
alt11=1;
}
switch (alt11) {
case 1 : ;
// Fuzzy.g:20:25: WS // alt
{
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
+                [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-          /* element() */
-        [self matchChar:'(']; if ( state.failed == YES ) return ;
-          /* element() */
+
+
+        [self matchChar:'(']; if ( state.failed ) return ;
+
+
// Fuzzy.g:20:33: ( ARG ( WS )? ( ',' ( WS )? ARG ( WS )? )* )? // block
NSInteger alt16=2;
NSInteger LA16_0 = [input LA:1];

-        if ( ((LA16_0>='A' && LA16_0<='Z')||LA16_0=='_'||(LA16_0>='a' && LA16_0<='z')) ) {
+        if ( ((LA16_0 >= 'A' && LA16_0 <= 'Z')||LA16_0=='_'||(LA16_0 >= 'a' && LA16_0 <= 'z')) ) {
alt16=1;
}
switch (alt16) {
case 1 : ;
// Fuzzy.g:20:35: ARG ( WS )? ( ',' ( WS )? ARG ( WS )? )* // alt
{
-                    [self mARG]; if ( state.failed == YES ) return ;
-                  /* element() */
+                [self mARG]; if ( state.failed ) return ;
+
+
+
// Fuzzy.g:20:39: ( WS )? // block
NSInteger alt12=2;
NSInteger LA12_0 = [input LA:1];

-                if ( ((LA12_0>='\t' && LA12_0<='\n')||LA12_0==' ') ) {
+                if ( ((LA12_0 >= '\t' && LA12_0 <= '\n')||LA12_0==' ') ) {
alt12=1;
}
switch (alt12) {
case 1 : ;
// Fuzzy.g:20:39: WS // alt
{
-                            [self mWS]; if ( state.failed == YES ) return ;
-                          /* element() */
-                         /* elements */
+                        [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-                  /* element() */
+
+
do {
NSInteger alt15=2;
NSInteger LA15_0 = [input LA:1];
@@ -814,49 +614,55 @@ const static NSInteger dfa38_transition1[] = {-1};
case 1 : ;
// Fuzzy.g:20:44: ',' ( WS )? ARG ( WS )? // alt
{
-                            [self matchChar:',']; if ( state.failed == YES ) return ;
-                              /* element() */
+                            [self matchChar:',']; if ( state.failed ) return ;
+
+
// Fuzzy.g:20:48: ( WS )? // block
NSInteger alt13=2;
NSInteger LA13_0 = [input LA:1];

-                            if ( ((LA13_0>='\t' && LA13_0<='\n')||LA13_0==' ') ) {
+                            if ( ((LA13_0 >= '\t' && LA13_0 <= '\n')||LA13_0==' ') ) {
alt13=1;
}
switch (alt13) {
case 1 : ;
// Fuzzy.g:20:48: WS // alt
{
-                                        [self mWS]; if ( state.failed == YES ) return ;
-                                      /* element() */
-                                     /* elements */
+                                    [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-                              /* element() */
-                                [self mARG]; if ( state.failed == YES ) return ;
-                              /* element() */
+
+
+                            [self mARG]; if ( state.failed ) return ;
+
+
+
// Fuzzy.g:20:56: ( WS )? // block
NSInteger alt14=2;
NSInteger LA14_0 = [input LA:1];

-                            if ( ((LA14_0>='\t' && LA14_0<='\n')||LA14_0==' ') ) {
+                            if ( ((LA14_0 >= '\t' && LA14_0 <= '\n')||LA14_0==' ') ) {
alt14=1;
}
switch (alt14) {
case 1 : ;
// Fuzzy.g:20:56: WS // alt
{
-                                        [self mWS]; if ( state.failed == YES ) return ;
-                                      /* element() */
-                                     /* elements */
+                                    [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-                              /* element() */
-                             /* elements */
+
+
}
break;

@@ -865,34 +671,38 @@ const static NSInteger dfa38_transition1[] = {-1};
}
} while (YES);
loop15: ;
-                  /* element() */
-                 /* elements */
+
+
}
break;

}
-          /* element() */
-        [self matchChar:')']; if ( state.failed == YES ) return ;
-          /* element() */
+
+
+        [self matchChar:')']; if ( state.failed ) return ;
+
+
// Fuzzy.g:20:69: ( WS )? // block
NSInteger alt17=2;
NSInteger LA17_0 = [input LA:1];

-        if ( ((LA17_0>='\t' && LA17_0<='\n')||LA17_0==' ') ) {
+        if ( ((LA17_0 >= '\t' && LA17_0 <= '\n')||LA17_0==' ') ) {
alt17=1;
}
switch (alt17) {
case 1 : ;
// Fuzzy.g:20:69: WS // alt
{
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
+                [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-          /* element() */
+
+
// Fuzzy.g:21:8: ( 'throws' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* )? // block
NSInteger alt22=2;
NSInteger LA22_0 = [input LA:1];
@@ -904,31 +714,39 @@ const static NSInteger dfa38_transition1[] = {-1};
case 1 : ;
// Fuzzy.g:21:9: 'throws' WS QID ( WS )? ( ',' ( WS )? QID ( WS )? )* // alt
{
-                [self matchString:@"throws"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                    [self mQID]; if ( state.failed == YES ) return ;
-                  /* element() */
+                [self matchString:@"throws"]; if ( state.failed ) return ;
+
+
+
+                [self mWS]; if ( state.failed ) return ;
+
+
+
+                [self mQID]; if ( state.failed ) return ;
+
+
+
// Fuzzy.g:21:25: ( WS )? // block
NSInteger alt18=2;
NSInteger LA18_0 = [input LA:1];

-                if ( ((LA18_0>='\t' && LA18_0<='\n')||LA18_0==' ') ) {
+                if ( ((LA18_0 >= '\t' && LA18_0 <= '\n')||LA18_0==' ') ) {
alt18=1;
}
switch (alt18) {
case 1 : ;
// Fuzzy.g:21:25: WS // alt
{
-                            [self mWS]; if ( state.failed == YES ) return ;
-                          /* element() */
-                         /* elements */
+                        [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-                  /* element() */
+
+
do {
NSInteger alt21=2;
NSInteger LA21_0 = [input LA:1];
@@ -941,49 +759,55 @@ const static NSInteger dfa38_transition1[] = {-1};
case 1 : ;
// Fuzzy.g:21:30: ',' ( WS )? QID ( WS )? // alt
{
-                            [self matchChar:',']; if ( state.failed == YES ) return ;
-                              /* element() */
+                            [self matchChar:',']; if ( state.failed ) return ;
+
+
// Fuzzy.g:21:34: ( WS )? // block
NSInteger alt19=2;
NSInteger LA19_0 = [input LA:1];

-                            if ( ((LA19_0>='\t' && LA19_0<='\n')||LA19_0==' ') ) {
+                            if ( ((LA19_0 >= '\t' && LA19_0 <= '\n')||LA19_0==' ') ) {
alt19=1;
}
switch (alt19) {
case 1 : ;
// Fuzzy.g:21:34: WS // alt
{
-                                        [self mWS]; if ( state.failed == YES ) return ;
-                                      /* element() */
-                                     /* elements */
+                                    [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-                              /* element() */
-                                [self mQID]; if ( state.failed == YES ) return ;
-                              /* element() */
+
+
+                            [self mQID]; if ( state.failed ) return ;
+
+
+
// Fuzzy.g:21:42: ( WS )? // block
NSInteger alt20=2;
NSInteger LA20_0 = [input LA:1];

-                            if ( ((LA20_0>='\t' && LA20_0<='\n')||LA20_0==' ') ) {
+                            if ( ((LA20_0 >= '\t' && LA20_0 <= '\n')||LA20_0==' ') ) {
alt20=1;
}
switch (alt20) {
case 1 : ;
// Fuzzy.g:21:42: WS // alt
{
-                                        [self mWS]; if ( state.failed == YES ) return ;
-                                      /* element() */
-                                     /* elements */
+                                    [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-                              /* element() */
-                             /* elements */
+
+
}
break;

@@ -992,57 +816,69 @@ const static NSInteger dfa38_transition1[] = {-1};
}
} while (YES);
loop21: ;
-                  /* element() */
-                 /* elements */
+
+
}
break;

}
-          /* element() */
-        [self matchChar:'{']; if ( state.failed == YES ) return ;
-          /* element() */
+
+
+        [self matchChar:'{']; if ( state.failed ) return ;
+
+
if ( state.backtracking == 1 ) {
-            NSLog(@"found method %@", (name!=nil?[name getText]:0));
-        }  /* element() */
-         /* elements */
+            NSLog(@"found method %@", (name!=nil?name.text:nil));
}

-        // token+rule list labels

-        [state setType:_type];
+        }
+
+        // token+rule list labels

+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "METHOD"
+/* $ANTLR end "METHOD" */

// $ANTLR start "FIELD"
- (void) mFIELD
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = FIELD;
NSInteger _channel = ANTLRTokenChannelDefault;
-        id<ANTLRToken> *name=nil;
+        ANTLRCommonToken *name=nil;

// Fuzzy.g:26:5: ( TYPE WS name= ID ( '[]' )? ( WS )? ( ';' | '=' ) ) // ruleBlockSingleAlt
// Fuzzy.g:26:9: TYPE WS name= ID ( '[]' )? ( WS )? ( ';' | '=' ) // alt
{
-            [self mTYPE]; if ( state.failed == YES ) return ;
-          /* element() */
-            [self mWS]; if ( state.failed == YES ) return ;
-          /* element() */
-        NSInteger nameStart261 = [self getIndex];
-        [self mID]; if ( state.failed == YES ) return ;
-
-        name = [[ANTLRCommonToken newANTLRCommonToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart261 Stop:[self getIndex]-1] retain];
-        [name setLine:[self getLine]];  /* element() */
+        [self mTYPE]; if ( state.failed ) return ;
+
+
+
+        [self mWS]; if ( state.failed ) return ;
+
+
+
+        NSInteger nameStart261 = input.index;
+        [self mID]; if ( state.failed ) return ;
+
+        name = [[ANTLRCommonToken newToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart261 Stop:input.index-1] retain];
+        name.line = self.line;
+
+
// Fuzzy.g:26:25: ( '[]' )? // block
NSInteger alt23=2;
NSInteger LA23_0 = [input LA:1];
@@ -1054,67 +890,78 @@ const static NSInteger dfa38_transition1[] = {-1};
case 1 : ;
// Fuzzy.g:26:25: '[]' // alt
{
-                [self matchString:@"[]"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
+                [self matchString:@"[]"]; if ( state.failed ) return ;
+
+
+
}
break;

}
-          /* element() */
+
+
// Fuzzy.g:26:31: ( WS )? // block
NSInteger alt24=2;
NSInteger LA24_0 = [input LA:1];

-        if ( ((LA24_0>='\t' && LA24_0<='\n')||LA24_0==' ') ) {
+        if ( ((LA24_0 >= '\t' && LA24_0 <= '\n')||LA24_0==' ') ) {
alt24=1;
}
switch (alt24) {
case 1 : ;
// Fuzzy.g:26:31: WS // alt
{
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
+                [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-          /* element() */
+
+
if ([input LA:1] == ';'||[input LA:1] == '=') {
[input consume];
-        state.failed = NO;
+            state.failed = NO;

} else {
if ( state.backtracking > 0 ) { state.failed = YES; return ; }
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
+
+            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
[self recover:mse];
-            @throw mse;}
-          /* element() */
+            @throw mse;
+        }
+
+
if ( state.backtracking == 1 ) {
-            NSLog(@"found var %@", (name!=nil?[name getText]:0));
-        }  /* element() */
-         /* elements */
+            NSLog(@"found var %@", (name!=nil?name.text:nil));
}

-        // token+rule list labels

-        [state setType:_type];
+        }
+
+        // token+rule list labels

+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "FIELD"
+/* $ANTLR end "FIELD" */

// $ANTLR start "STAT"
- (void) mSTAT
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = STAT;
@@ -1124,7 +971,8 @@ const static NSInteger dfa38_transition1[] = {-1};
{
// Fuzzy.g:30:7: ( 'if' | 'while' | 'switch' | 'for' ) // block
NSInteger alt25=4;
-        switch ([input LA:1]) {
+        unichar charLA25 = [input LA:1];
+        switch (charLA25) {
case 'i': ;
{
alt25=1;
@@ -1148,147 +996,169 @@ const static NSInteger dfa38_transition1[] = {-1};

default: ;
if ( state.backtracking > 0 ) { state.failed = YES; return ; }
-            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newANTLRNoViableAltException:25 state:0 stream:input];
+
+            ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:25 state:0 stream:input];
+            nvae.c = charLA25;
@throw nvae;
+
}

switch (alt25) {
case 1 : ;
// Fuzzy.g:30:8: 'if' // alt
{
-                [self matchString:@"if"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
+                [self matchString:@"if"]; if ( state.failed ) return ;
+
+
+
}
break;
case 2 : ;
// Fuzzy.g:30:13: 'while' // alt
{
-                [self matchString:@"while"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
+                [self matchString:@"while"]; if ( state.failed ) return ;
+
+
+
}
break;
case 3 : ;
// Fuzzy.g:30:21: 'switch' // alt
{
-                [self matchString:@"switch"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
+                [self matchString:@"switch"]; if ( state.failed ) return ;
+
+
+
}
break;
case 4 : ;
// Fuzzy.g:30:30: 'for' // alt
{
-                [self matchString:@"for"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
+                [self matchString:@"for"]; if ( state.failed ) return ;
+
+
+
}
break;

}
-          /* element() */
+
+
// Fuzzy.g:30:37: ( WS )? // block
NSInteger alt26=2;
NSInteger LA26_0 = [input LA:1];

-        if ( ((LA26_0>='\t' && LA26_0<='\n')||LA26_0==' ') ) {
+        if ( ((LA26_0 >= '\t' && LA26_0 <= '\n')||LA26_0==' ') ) {
alt26=1;
}
switch (alt26) {
case 1 : ;
// Fuzzy.g:30:37: WS // alt
{
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
+                [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-          /* element() */
-        [self matchChar:'(']; if ( state.failed == YES ) return ;
-          /* element() */
-         /* elements */
+
+
+        [self matchChar:'(']; if ( state.failed ) return ;
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "STAT"
+/* $ANTLR end "STAT" */

// $ANTLR start "CALL"
- (void) mCALL
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = CALL;
NSInteger _channel = ANTLRTokenChannelDefault;
-        id<ANTLRToken> *name=nil;
+        ANTLRCommonToken *name=nil;

// Fuzzy.g:33:5: (name= QID ( WS )? '(' ) // ruleBlockSingleAlt
// Fuzzy.g:33:9: name= QID ( WS )? '(' // alt
{
-        NSInteger nameStart326 = [self getIndex];
-        [self mQID]; if ( state.failed == YES ) return ;
+        NSInteger nameStart326 = input.index;
+        [self mQID]; if ( state.failed ) return ;
+
+        name = [[ANTLRCommonToken newToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart326 Stop:input.index-1] retain];
+        name.line = self.line;
+

-        name = [[ANTLRCommonToken newANTLRCommonToken:input Type:ANTLRTokenTypeInvalid Channel:ANTLRTokenChannelDefault Start:nameStart326 Stop:[self getIndex]-1] retain];
-        [name setLine:[self getLine]];  /* element() */
// Fuzzy.g:33:18: ( WS )? // block
NSInteger alt27=2;
NSInteger LA27_0 = [input LA:1];

-        if ( ((LA27_0>='\t' && LA27_0<='\n')||LA27_0==' ') ) {
+        if ( ((LA27_0 >= '\t' && LA27_0 <= '\n')||LA27_0==' ') ) {
alt27=1;
}
switch (alt27) {
case 1 : ;
// Fuzzy.g:33:18: WS // alt
{
-                    [self mWS]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
+                [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

}
-          /* element() */
-        [self matchChar:'(']; if ( state.failed == YES ) return ;
-          /* element() */
+
+
+        [self matchChar:'(']; if ( state.failed ) return ;
+
+
if ( state.backtracking == 1 ) {
-            /*ignore if this/super */ NSLog(@"found call %@",(name!=nil?[name getText]:0));
-        }  /* element() */
-         /* elements */
+            /*ignore if this/super */ NSLog(@"found call %@",(name!=nil?name.text:nil));
}

-        // token+rule list labels

-        [state setType:_type];
+        }
+
+        // token+rule list labels

+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "CALL"
+/* $ANTLR end "CALL" */

// $ANTLR start "COMMENT"
- (void) mCOMMENT
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = COMMENT;
@@ -1296,8 +1166,10 @@ const static NSInteger dfa38_transition1[] = {-1};
// Fuzzy.g:38:5: ( '/*' ( options {greedy=false; } : . )* '*/' ) // ruleBlockSingleAlt
// Fuzzy.g:38:9: '/*' ( options {greedy=false; } : . )* '*/' // alt
{
-        [self matchString:@"/*"]; if ( state.failed == YES ) return ;
-          /* element() */
+        [self matchString:@"/*"]; if ( state.failed ) return ;
+
+
+
do {
NSInteger alt28=2;
NSInteger LA28_0 = [input LA:1];
@@ -1306,13 +1178,13 @@ const static NSInteger dfa38_transition1[] = {-1};
if ( (LA28_1=='/') ) {
alt28=2;
}
-                else if ( ((LA28_1>=0x0000 && LA28_1<='.')||(LA28_1>='0' && LA28_1<=0xFFFF)) ) {
+                else if ( ((LA28_1 >= 0x0000 && LA28_1 <= '.')||(LA28_1 >= '0' && LA28_1 <= 0xFFFF)) ) {
alt28=1;
}


}
-            else if ( ((LA28_0>=0x0000 && LA28_0<=')')||(LA28_0>='+' && LA28_0<=0xFFFF)) ) {
+            else if ( ((LA28_0 >= 0x0000 && LA28_0 <= ')')||(LA28_0 >= '+' && LA28_0 <= 0xFFFF)) ) {
alt28=1;
}

@@ -1321,9 +1193,9 @@ const static NSInteger dfa38_transition1[] = {-1};
case 1 : ;
// Fuzzy.g:38:41: . // alt
{
-                    [self matchAny]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
+                    [self matchAny]; if ( state.failed ) return ;
+
+
}
break;

@@ -1332,33 +1204,40 @@ const static NSInteger dfa38_transition1[] = {-1};
}
} while (YES);
loop28: ;
-          /* element() */
-        [self matchString:@"*/"]; if ( state.failed == YES ) return ;
-          /* element() */
+
+
+        [self matchString:@"*/"]; if ( state.failed ) return ;
+
+
+
if ( state.backtracking == 1 ) {
-            NSLog(@"found comment %@", [self getText]);
-        }  /* element() */
-         /* elements */
+            NSLog(@"found comment %@", [self text]);
}

-        // token+rule list labels

-        [state setType:_type];
+        }

+        // token+rule list labels
+
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "COMMENT"
+/* $ANTLR end "COMMENT" */

// $ANTLR start "SL_COMMENT"
- (void) mSL_COMMENT
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = SL_COMMENT;
@@ -1366,15 +1245,17 @@ const static NSInteger dfa38_transition1[] = {-1};
// Fuzzy.g:43:5: ( '//' ( options {greedy=false; } : . )* '\\n' ) // ruleBlockSingleAlt
// Fuzzy.g:43:9: '//' ( options {greedy=false; } : . )* '\\n' // alt
{
-        [self matchString:@"//"]; if ( state.failed == YES ) return ;
-          /* element() */
+        [self matchString:@"//"]; if ( state.failed ) return ;
+
+
+
do {
NSInteger alt29=2;
NSInteger LA29_0 = [input LA:1];
if ( (LA29_0=='\n') ) {
alt29=2;
}
-            else if ( ((LA29_0>=0x0000 && LA29_0<='\t')||(LA29_0>=0x000B && LA29_0<=0xFFFF)) ) {
+            else if ( ((LA29_0 >= 0x0000 && LA29_0 <= '\t')||(LA29_0 >= 0x000B && LA29_0 <= 0xFFFF)) ) {
alt29=1;
}

@@ -1383,9 +1264,9 @@ const static NSInteger dfa38_transition1[] = {-1};
case 1 : ;
// Fuzzy.g:43:41: . // alt
{
-                    [self matchAny]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
+                    [self matchAny]; if ( state.failed ) return ;
+
+
}
break;

@@ -1394,33 +1275,39 @@ const static NSInteger dfa38_transition1[] = {-1};
}
} while (YES);
loop29: ;
-          /* element() */
-        [self matchChar:'\n']; if ( state.failed == YES ) return ;
-          /* element() */
+
+
+        [self matchChar:'\n']; if ( state.failed ) return ;
+
+
if ( state.backtracking == 1 ) {
-            NSLog(@"found // comment %@", [self getText]);
-        }  /* element() */
-         /* elements */
+            NSLog(@"found // comment %@", [self text]);
}

-        // token+rule list labels

-        [state setType:_type];
+        }
+
+        // token+rule list labels

+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "SL_COMMENT"
+/* $ANTLR end "SL_COMMENT" */

// $ANTLR start "STRING"
- (void) mSTRING
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = STRING;
@@ -1428,8 +1315,9 @@ const static NSInteger dfa38_transition1[] = {-1};
// Fuzzy.g:48:2: ( '\"' ( options {greedy=false; } : ESC | . )* '\"' ) // ruleBlockSingleAlt
// Fuzzy.g:48:4: '\"' ( options {greedy=false; } : ESC | . )* '\"' // alt
{
-        [self matchChar:'"']; if ( state.failed == YES ) return ;
-          /* element() */
+        [self matchChar:'"']; if ( state.failed ) return ;
+
+
do {
NSInteger alt30=3;
NSInteger LA30_0 = [input LA:1];
@@ -1447,13 +1335,13 @@ const static NSInteger dfa38_transition1[] = {-1};
else if ( (LA30_2=='\'') ) {
alt30=1;
}
-                else if ( ((LA30_2>=0x0000 && LA30_2<='!')||(LA30_2>='#' && LA30_2<='&')||(LA30_2>='(' && LA30_2<='[')||(LA30_2>=']' && LA30_2<=0xFFFF)) ) {
+                else if ( ((LA30_2 >= 0x0000 && LA30_2 <= '!')||(LA30_2 >= '#' && LA30_2 <= '&')||(LA30_2 >= '(' && LA30_2 <= '[')||(LA30_2 >= ']' && LA30_2 <= 0xFFFF)) ) {
alt30=2;
}


}
-            else if ( ((LA30_0>=0x0000 && LA30_0<='!')||(LA30_0>='#' && LA30_0<='[')||(LA30_0>=']' && LA30_0<=0xFFFF)) ) {
+            else if ( ((LA30_0 >= 0x0000 && LA30_0 <= '!')||(LA30_0 >= '#' && LA30_0 <= '[')||(LA30_0 >= ']' && LA30_0 <= 0xFFFF)) ) {
alt30=2;
}

@@ -1462,17 +1350,18 @@ const static NSInteger dfa38_transition1[] = {-1};
case 1 : ;
// Fuzzy.g:48:34: ESC // alt
{
-                        [self mESC]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
+                    [self mESC]; if ( state.failed ) return ;
+
+
+
}
break;
case 2 : ;
// Fuzzy.g:48:40: . // alt
{
-                    [self matchAny]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
+                    [self matchAny]; if ( state.failed ) return ;
+
+
}
break;

@@ -1481,30 +1370,34 @@ const static NSInteger dfa38_transition1[] = {-1};
}
} while (YES);
loop30: ;
-          /* element() */
-        [self matchChar:'"']; if ( state.failed == YES ) return ;
-          /* element() */
-         /* elements */
+
+
+        [self matchChar:'"']; if ( state.failed ) return ;
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "STRING"
+/* $ANTLR end "STRING" */

// $ANTLR start "CHAR"
- (void) mCHAR
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = CHAR;
@@ -1512,8 +1405,9 @@ const static NSInteger dfa38_transition1[] = {-1};
// Fuzzy.g:52:2: ( '\\'' ( options {greedy=false; } : ESC | . )* '\\'' ) // ruleBlockSingleAlt
// Fuzzy.g:52:4: '\\'' ( options {greedy=false; } : ESC | . )* '\\'' // alt
{
-        [self matchChar:'\'']; if ( state.failed == YES ) return ;
-          /* element() */
+        [self matchChar:'\'']; if ( state.failed ) return ;
+
+
do {
NSInteger alt31=3;
NSInteger LA31_0 = [input LA:1];
@@ -1531,13 +1425,13 @@ const static NSInteger dfa38_transition1[] = {-1};
else if ( (LA31_2=='"') ) {
alt31=1;
}
-                else if ( ((LA31_2>=0x0000 && LA31_2<='!')||(LA31_2>='#' && LA31_2<='&')||(LA31_2>='(' && LA31_2<='[')||(LA31_2>=']' && LA31_2<=0xFFFF)) ) {
+                else if ( ((LA31_2 >= 0x0000 && LA31_2 <= '!')||(LA31_2 >= '#' && LA31_2 <= '&')||(LA31_2 >= '(' && LA31_2 <= '[')||(LA31_2 >= ']' && LA31_2 <= 0xFFFF)) ) {
alt31=2;
}


}
-            else if ( ((LA31_0>=0x0000 && LA31_0<='&')||(LA31_0>='(' && LA31_0<='[')||(LA31_0>=']' && LA31_0<=0xFFFF)) ) {
+            else if ( ((LA31_0 >= 0x0000 && LA31_0 <= '&')||(LA31_0 >= '(' && LA31_0 <= '[')||(LA31_0 >= ']' && LA31_0 <= 0xFFFF)) ) {
alt31=2;
}

@@ -1546,17 +1440,18 @@ const static NSInteger dfa38_transition1[] = {-1};
case 1 : ;
// Fuzzy.g:52:35: ESC // alt
{
-                        [self mESC]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
+                    [self mESC]; if ( state.failed ) return ;
+
+
+
}
break;
case 2 : ;
// Fuzzy.g:52:41: . // alt
{
-                    [self matchAny]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
+                    [self matchAny]; if ( state.failed ) return ;
+
+
}
break;

@@ -1565,30 +1460,34 @@ const static NSInteger dfa38_transition1[] = {-1};
}
} while (YES);
loop31: ;
-          /* element() */
-        [self matchChar:'\'']; if ( state.failed == YES ) return ;
-          /* element() */
-         /* elements */
+
+
+        [self matchChar:'\'']; if ( state.failed ) return ;
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "CHAR"
+/* $ANTLR end "CHAR" */

// $ANTLR start "WS"
- (void) mWS
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
NSInteger _type = WS;
@@ -1597,11 +1496,11 @@ const static NSInteger dfa38_transition1[] = {-1};
// Fuzzy.g:55:9: ( ' ' | '\\t' | '\\n' )+ // alt
{
// Fuzzy.g:55:9: ( ' ' | '\\t' | '\\n' )+ // positiveClosureBlock
-        NSInteger cnt32=0;
+        NSInteger cnt32 = 0;
do {
-            NSInteger alt32=2;
+            NSInteger alt32 = 2;
NSInteger LA32_0 = [input LA:1];
-            if ( ((LA32_0>='\t' && LA32_0<='\n')||LA32_0==' ') ) {
+            if ( ((LA32_0 >= '\t' && LA32_0 <= '\n')||LA32_0==' ') ) {
alt32=1;
}

@@ -1612,56 +1511,66 @@ const static NSInteger dfa38_transition1[] = {-1};
{
if ((([input LA:1] >= '\t') && ([input LA:1] <= '\n'))||[input LA:1] == ' ') {
[input consume];
-                    state.failed = NO;
+                        state.failed = NO;

} else {
if ( state.backtracking > 0 ) { state.failed = YES; return ; }
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
+
+                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
[self recover:mse];
-                        @throw mse;}
-                      /* element() */
-                     /* elements */
+                        @throw mse;
+                    }
+
+
}
break;

default :
if ( cnt32 >= 1 )
goto loop32;
-                    if ( state.backtracking > 0 ) { state.failed = YES; return ; }            ANTLREarlyExitException *eee = [ANTLREarlyExitException exceptionWithStream:input decisionNumber:32];
+                    if ( state.backtracking > 0 ) { state.failed = YES; return ; }
+
+                    ANTLREarlyExitException *eee =
+                        [ANTLREarlyExitException newException:input decisionNumber:32];
@throw eee;
}
cnt32++;
} while (YES);
loop32: ;
-          /* element() */
-         /* elements */
+
+
}

// token+rule list labels

-        [state setType:_type];
-
+        state.type = _type;
state.channel = _channel;
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "WS"
+/* $ANTLR end "WS" */

// $ANTLR start "QID"
- (void) mQID
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// Fuzzy.g:59:5: ( ID ( '.' ID )* ) // ruleBlockSingleAlt
// Fuzzy.g:59:7: ID ( '.' ID )* // alt
{
-            [self mID]; if ( state.failed == YES ) return ;
-          /* element() */
+        [self mID]; if ( state.failed ) return ;
+
+
+
do {
NSInteger alt33=2;
NSInteger LA33_0 = [input LA:1];
@@ -1674,11 +1583,13 @@ const static NSInteger dfa38_transition1[] = {-1};
case 1 : ;
// Fuzzy.g:59:11: '.' ID // alt
{
-                    [self matchChar:'.']; if ( state.failed == YES ) return ;
-                      /* element() */
-                        [self mID]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
+                    [self matchChar:'.']; if ( state.failed ) return ;
+
+
+                    [self mID]; if ( state.failed ) return ;
+
+
+
}
break;

@@ -1687,36 +1598,43 @@ const static NSInteger dfa38_transition1[] = {-1};
}
} while (YES);
loop33: ;
-          /* element() */
-         /* elements */
+
+
}

+
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "QID"
+/* $ANTLR end "QID" */

// $ANTLR start "QIDStar"
- (void) mQIDStar
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// Fuzzy.g:68:2: ( ID ( '.' ID )* ( '.*' )? ) // ruleBlockSingleAlt
// Fuzzy.g:68:4: ID ( '.' ID )* ( '.*' )? // alt
{
-            [self mID]; if ( state.failed == YES ) return ;
-          /* element() */
+        [self mID]; if ( state.failed ) return ;
+
+
+
do {
NSInteger alt34=2;
NSInteger LA34_0 = [input LA:1];
if ( (LA34_0=='.') ) {
NSInteger LA34_1 = [input LA:2];
-                if ( ((LA34_1>='A' && LA34_1<='Z')||LA34_1=='_'||(LA34_1>='a' && LA34_1<='z')) ) {
+                if ( ((LA34_1 >= 'A' && LA34_1 <= 'Z')||LA34_1=='_'||(LA34_1 >= 'a' && LA34_1 <= 'z')) ) {
alt34=1;
}

@@ -1728,11 +1646,13 @@ const static NSInteger dfa38_transition1[] = {-1};
case 1 : ;
// Fuzzy.g:68:8: '.' ID // alt
{
-                    [self matchChar:'.']; if ( state.failed == YES ) return ;
-                      /* element() */
-                        [self mID]; if ( state.failed == YES ) return ;
-                      /* element() */
-                     /* elements */
+                    [self matchChar:'.']; if ( state.failed ) return ;
+
+
+                    [self mID]; if ( state.failed ) return ;
+
+
+
}
break;

@@ -1741,7 +1661,8 @@ const static NSInteger dfa38_transition1[] = {-1};
}
} while (YES);
loop34: ;
-          /* element() */
+
+
// Fuzzy.g:68:17: ( '.*' )? // block
NSInteger alt35=2;
NSInteger LA35_0 = [input LA:1];
@@ -1753,37 +1674,45 @@ const static NSInteger dfa38_transition1[] = {-1};
case 1 : ;
// Fuzzy.g:68:17: '.*' // alt
{
-                [self matchString:@".*"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
+                [self matchString:@".*"]; if ( state.failed ) return ;
+
+
+
}
break;

}
-          /* element() */
-         /* elements */
+
+
}

+
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "QIDStar"
+/* $ANTLR end "QIDStar" */

// $ANTLR start "TYPE"
- (void) mTYPE
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// Fuzzy.g:72:5: ( QID ( '[]' )? ) // ruleBlockSingleAlt
// Fuzzy.g:72:9: QID ( '[]' )? // alt
{
-            [self mQID]; if ( state.failed == YES ) return ;
-          /* element() */
+        [self mQID]; if ( state.failed ) return ;
+
+
+
// Fuzzy.g:72:13: ( '[]' )? // block
NSInteger alt36=2;
NSInteger LA36_0 = [input LA:1];
@@ -1795,57 +1724,73 @@ const static NSInteger dfa38_transition1[] = {-1};
case 1 : ;
// Fuzzy.g:72:13: '[]' // alt
{
-                [self matchString:@"[]"]; if ( state.failed == YES ) return ;
-                  /* element() */
-                 /* elements */
+                [self matchString:@"[]"]; if ( state.failed ) return ;
+
+
+
}
break;

}
-          /* element() */
-         /* elements */
+
+
}

+
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "TYPE"
+/* $ANTLR end "TYPE" */

// $ANTLR start "ARG"
- (void) mARG
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// Fuzzy.g:76:5: ( TYPE WS ID ) // ruleBlockSingleAlt
// Fuzzy.g:76:9: TYPE WS ID // alt
{
-            [self mTYPE]; if ( state.failed == YES ) return ;
-          /* element() */
-            [self mWS]; if ( state.failed == YES ) return ;
-          /* element() */
-            [self mID]; if ( state.failed == YES ) return ;
-          /* element() */
-         /* elements */
+        [self mTYPE]; if ( state.failed ) return ;
+
+
+
+        [self mWS]; if ( state.failed ) return ;
+
+
+
+        [self mID]; if ( state.failed ) return ;
+
+
+
}

+
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "ARG"
+/* $ANTLR end "ARG" */

// $ANTLR start "ID"
- (void) mID
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// Fuzzy.g:80:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* ) // ruleBlockSingleAlt
@@ -1853,18 +1798,21 @@ const static NSInteger dfa38_transition1[] = {-1};
{
if ((([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
-        state.failed = NO;
+            state.failed = NO;

} else {
if ( state.backtracking > 0 ) { state.failed = YES; return ; }
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
+
+            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
[self recover:mse];
-            @throw mse;}
-          /* element() */
+            @throw mse;
+        }
+
+
do {
NSInteger alt37=2;
NSInteger LA37_0 = [input LA:1];
-            if ( ((LA37_0>='0' && LA37_0<='9')||(LA37_0>='A' && LA37_0<='Z')||LA37_0=='_'||(LA37_0>='a' && LA37_0<='z')) ) {
+            if ( ((LA37_0 >= '0' && LA37_0 <= '9')||(LA37_0 >= 'A' && LA37_0 <= 'Z')||LA37_0=='_'||(LA37_0 >= 'a' && LA37_0 <= 'z')) ) {
alt37=1;
}

@@ -1875,15 +1823,17 @@ const static NSInteger dfa38_transition1[] = {-1};
{
if ((([input LA:1] >= '0') && ([input LA:1] <= '9'))||(([input LA:1] >= 'A') && ([input LA:1] <= 'Z'))||[input LA:1] == '_'||(([input LA:1] >= 'a') && ([input LA:1] <= 'z'))) {
[input consume];
-                    state.failed = NO;
+                        state.failed = NO;

} else {
if ( state.backtracking > 0 ) { state.failed = YES; return ; }
-                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
+
+                        ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
[self recover:mse];
-                        @throw mse;}
-                      /* element() */
-                     /* elements */
+                        @throw mse;
+                    }
+
+
}
break;

@@ -1892,151 +1842,401 @@ const static NSInteger dfa38_transition1[] = {-1};
}
} while (YES);
loop37: ;
-          /* element() */
-         /* elements */
+
+
}

+
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "ID"
+/* $ANTLR end "ID" */

// $ANTLR start "ESC"
- (void) mESC
{
//
-    /* ruleScopeSetUp */
+    /* my ruleScopeSetUp */
+    /* Terence's stuff */

@try {
// Fuzzy.g:84:5: ( '\\\\' ( '\"' | '\\'' | '\\\\' ) ) // ruleBlockSingleAlt
// Fuzzy.g:84:7: '\\\\' ( '\"' | '\\'' | '\\\\' ) // alt
{
-        [self matchChar:'\\']; if ( state.failed == YES ) return ;
-          /* element() */
+        [self matchChar:'\\']; if ( state.failed ) return ;
+
+
if ([input LA:1] == '"'||[input LA:1] == '\''||[input LA:1] == '\\') {
[input consume];
-        state.failed = NO;
+            state.failed = NO;

} else {
if ( state.backtracking > 0 ) { state.failed = YES; return ; }
-            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException exceptionWithSet:nil stream:input];
+
+            ANTLRMismatchedSetException *mse = [ANTLRMismatchedSetException newException:nil stream:input];
[self recover:mse];
-            @throw mse;}
-          /* element() */
-         /* elements */
+            @throw mse;
}

+
+        }
+
+
}
@finally {
//
+        /* my stuff */
+        /* Terence's stuff */
+
}
return;
}
-// $ANTLR end "ESC"
+/* $ANTLR end "ESC" */

- (void) mTokens
{
// Fuzzy.g:1:39: ( IMPORT | RETURN | CLASS | METHOD | FIELD | STAT | CALL | COMMENT | SL_COMMENT | STRING | CHAR | WS ) //ruleblock
NSInteger alt38=12;
-    alt38 = [dfa38 predict:input];
+    unichar charLA38 = [input LA:1];
+    switch (charLA38) {
+        case 'i': ;
+            {
+            NSInteger LA38_1 = [input LA:2];
+
+            if ( ([self evaluateSyntacticPredicate:@selector(synpred1_Fuzzy_fragment)]) ) {
+                alt38=1;
+            }
+            else if ( ([self evaluateSyntacticPredicate:@selector(synpred4_Fuzzy_fragment)]) ) {
+                alt38=4;
+            }
+            else if ( ([self evaluateSyntacticPredicate:@selector(synpred5_Fuzzy_fragment)]) ) {
+                alt38=5;
+            }
+            else if ( ([self evaluateSyntacticPredicate:@selector(synpred6_Fuzzy_fragment)]) ) {
+                alt38=6;
+            }
+            else if ( ([self evaluateSyntacticPredicate:@selector(synpred7_Fuzzy_fragment)]) ) {
+                alt38=7;
+            }
+            else {
+                if ( state.backtracking > 0 ) { state.failed = YES; return ; }
+
+                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:38 state:1 stream:input];
+                nvae.c = LA38_1;
+                @throw nvae;
+
+            }
+            }
+            break;
+        case 'r': ;
+            {
+            NSInteger LA38_7 = [input LA:2];
+
+            if ( ([self evaluateSyntacticPredicate:@selector(synpred2_Fuzzy_fragment)]) ) {
+                alt38=2;
+            }
+            else if ( ([self evaluateSyntacticPredicate:@selector(synpred4_Fuzzy_fragment)]) ) {
+                alt38=4;
+            }
+            else if ( ([self evaluateSyntacticPredicate:@selector(synpred5_Fuzzy_fragment)]) ) {
+                alt38=5;
+            }
+            else if ( ([self evaluateSyntacticPredicate:@selector(synpred7_Fuzzy_fragment)]) ) {
+                alt38=7;
+            }
+            else {
+                if ( state.backtracking > 0 ) { state.failed = YES; return ; }
+
+                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:38 state:7 stream:input];
+                nvae.c = LA38_7;
+                @throw nvae;
+
+            }
+            }
+            break;
+        case 'c': ;
+            {
+            NSInteger LA38_9 = [input LA:2];
+
+            if ( ([self evaluateSyntacticPredicate:@selector(synpred3_Fuzzy_fragment)]) ) {
+                alt38=3;
+            }
+            else if ( ([self evaluateSyntacticPredicate:@selector(synpred4_Fuzzy_fragment)]) ) {
+                alt38=4;
+            }
+            else if ( ([self evaluateSyntacticPredicate:@selector(synpred5_Fuzzy_fragment)]) ) {
+                alt38=5;
+            }
+            else if ( ([self evaluateSyntacticPredicate:@selector(synpred7_Fuzzy_fragment)]) ) {
+                alt38=7;
+            }
+            else {
+                if ( state.backtracking > 0 ) { state.failed = YES; return ; }
+
+                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:38 state:9 stream:input];
+                nvae.c = LA38_9;
+                @throw nvae;
+
+            }
+            }
+            break;
+        case 'f': ;
+        case 's': ;
+        case 'w': ;
+            {
+            NSInteger LA38_11 = [input LA:2];
+
+            if ( ([self evaluateSyntacticPredicate:@selector(synpred4_Fuzzy_fragment)]) ) {
+                alt38=4;
+            }
+            else if ( ([self evaluateSyntacticPredicate:@selector(synpred5_Fuzzy_fragment)]) ) {
+                alt38=5;
+            }
+            else if ( ([self evaluateSyntacticPredicate:@selector(synpred6_Fuzzy_fragment)]) ) {
+                alt38=6;
+            }
+            else if ( ([self evaluateSyntacticPredicate:@selector(synpred7_Fuzzy_fragment)]) ) {
+                alt38=7;
+            }
+            else {
+                if ( state.backtracking > 0 ) { state.failed = YES; return ; }
+
+                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:38 state:11 stream:input];
+                nvae.c = LA38_11;
+                @throw nvae;
+
+            }
+            }
+            break;
+        case 'A': ;
+        case 'B': ;
+        case 'C': ;
+        case 'D': ;
+        case 'E': ;
+        case 'F': ;
+        case 'G': ;
+        case 'H': ;
+        case 'I': ;
+        case 'J': ;
+        case 'K': ;
+        case 'L': ;
+        case 'M': ;
+        case 'N': ;
+        case 'O': ;
+        case 'P': ;
+        case 'Q': ;
+        case 'R': ;
+        case 'S': ;
+        case 'T': ;
+        case 'U': ;
+        case 'V': ;
+        case 'W': ;
+        case 'X': ;
+        case 'Y': ;
+        case 'Z': ;
+        case '_': ;
+        case 'a': ;
+        case 'b': ;
+        case 'd': ;
+        case 'e': ;
+        case 'g': ;
+        case 'h': ;
+        case 'j': ;
+        case 'k': ;
+        case 'l': ;
+        case 'm': ;
+        case 'n': ;
+        case 'o': ;
+        case 'p': ;
+        case 'q': ;
+        case 't': ;
+        case 'u': ;
+        case 'v': ;
+        case 'x': ;
+        case 'y': ;
+        case 'z': ;
+            {
+            NSInteger LA38_12 = [input LA:2];
+
+            if ( ([self evaluateSyntacticPredicate:@selector(synpred4_Fuzzy_fragment)]) ) {
+                alt38=4;
+            }
+            else if ( ([self evaluateSyntacticPredicate:@selector(synpred5_Fuzzy_fragment)]) ) {
+                alt38=5;
+            }
+            else if ( ([self evaluateSyntacticPredicate:@selector(synpred7_Fuzzy_fragment)]) ) {
+                alt38=7;
+            }
+            else {
+                if ( state.backtracking > 0 ) { state.failed = YES; return ; }
+
+                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:38 state:12 stream:input];
+                nvae.c = LA38_12;
+                @throw nvae;
+
+            }
+            }
+            break;
+        case '/': ;
+            {
+            NSInteger LA38_13 = [input LA:2];
+
+            if ( ([self evaluateSyntacticPredicate:@selector(synpred8_Fuzzy_fragment)]) ) {
+                alt38=8;
+            }
+            else if ( ([self evaluateSyntacticPredicate:@selector(synpred9_Fuzzy_fragment)]) ) {
+                alt38=9;
+            }
+            else {
+                if ( state.backtracking > 0 ) { state.failed = YES; return ; }
+
+                ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:38 state:13 stream:input];
+                nvae.c = LA38_13;
+                @throw nvae;
+
+            }
+            }
+            break;
+        case '"': ;
+            {
+            alt38=10;
+            }
+            break;
+        case '\'': ;
+            {
+            alt38=11;
+            }
+            break;
+        case '\t': ;
+        case '\n': ;
+        case ' ': ;
+            {
+            alt38=12;
+            }
+            break;
+
+    default: ;
+        if ( state.backtracking > 0 ) { state.failed = YES; return ; }
+
+        ANTLRNoViableAltException *nvae = [ANTLRNoViableAltException newException:38 state:0 stream:input];
+        nvae.c = charLA38;
+        @throw nvae;
+
+    }
+
switch (alt38) {
case 1 : ;
// Fuzzy.g:1:41: IMPORT // alt
{
-                [self mIMPORT]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
+            [self mIMPORT]; if ( state.failed ) return ;
+
+
+
}
break;
case 2 : ;
// Fuzzy.g:1:48: RETURN // alt
{
-                [self mRETURN]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
+            [self mRETURN]; if ( state.failed ) return ;
+
+
+
}
break;
case 3 : ;
// Fuzzy.g:1:55: CLASS // alt
{
-                [self mCLASS]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
+            [self mCLASS]; if ( state.failed ) return ;
+
+
+
}
break;
case 4 : ;
// Fuzzy.g:1:61: METHOD // alt
{
-                [self mMETHOD]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
+            [self mMETHOD]; if ( state.failed ) return ;
+
+
+
}
break;
case 5 : ;
// Fuzzy.g:1:68: FIELD // alt
{
-                [self mFIELD]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
+            [self mFIELD]; if ( state.failed ) return ;
+
+
+
}
break;
case 6 : ;
// Fuzzy.g:1:74: STAT // alt
{
-                [self mSTAT]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
+            [self mSTAT]; if ( state.failed ) return ;
+
+
+
}
break;
case 7 : ;
// Fuzzy.g:1:79: CALL // alt
{
-                [self mCALL]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
+            [self mCALL]; if ( state.failed ) return ;
+
+
+
}
break;
case 8 : ;
// Fuzzy.g:1:84: COMMENT // alt
{
-                [self mCOMMENT]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
+            [self mCOMMENT]; if ( state.failed ) return ;
+
+
+
}
break;
case 9 : ;
// Fuzzy.g:1:92: SL_COMMENT // alt
{
-                [self mSL_COMMENT]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
+            [self mSL_COMMENT]; if ( state.failed ) return ;
+
+
+
}
break;
case 10 : ;
// Fuzzy.g:1:103: STRING // alt
{
-                [self mSTRING]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
+            [self mSTRING]; if ( state.failed ) return ;
+
+
+
}
break;
case 11 : ;
// Fuzzy.g:1:110: CHAR // alt
{
-                [self mCHAR]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
+            [self mCHAR]; if ( state.failed ) return ;
+
+
+
}
break;
case 12 : ;
// Fuzzy.g:1:115: WS // alt
{
-                [self mWS]; if ( state.failed == YES ) return ;
-              /* element() */
-             /* elements */
+            [self mWS]; if ( state.failed ) return ;
+
+
+
}
break;

@@ -2050,10 +2250,12 @@ const static NSInteger dfa38_transition1[] = {-1};
// Fuzzy.g:1:41: ( IMPORT ) // ruleBlockSingleAlt
// Fuzzy.g:1:41: IMPORT // alt
{
-        [self mIMPORT]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
+    [self mIMPORT]; if ( state.failed ) return ;
+
+
+
}
+
} // $ANTLR end synpred1_Fuzzy_fragment

// $ANTLR start synpred2_Fuzzy_fragment
@@ -2062,10 +2264,12 @@ const static NSInteger dfa38_transition1[] = {-1};
// Fuzzy.g:1:48: ( RETURN ) // ruleBlockSingleAlt
// Fuzzy.g:1:48: RETURN // alt
{
-        [self mRETURN]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
+    [self mRETURN]; if ( state.failed ) return ;
+
+
+
}
+
} // $ANTLR end synpred2_Fuzzy_fragment

// $ANTLR start synpred3_Fuzzy_fragment
@@ -2074,10 +2278,12 @@ const static NSInteger dfa38_transition1[] = {-1};
// Fuzzy.g:1:55: ( CLASS ) // ruleBlockSingleAlt
// Fuzzy.g:1:55: CLASS // alt
{
-        [self mCLASS]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
+    [self mCLASS]; if ( state.failed ) return ;
+
+
+
}
+
} // $ANTLR end synpred3_Fuzzy_fragment

// $ANTLR start synpred4_Fuzzy_fragment
@@ -2086,10 +2292,12 @@ const static NSInteger dfa38_transition1[] = {-1};
// Fuzzy.g:1:61: ( METHOD ) // ruleBlockSingleAlt
// Fuzzy.g:1:61: METHOD // alt
{
-        [self mMETHOD]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
+    [self mMETHOD]; if ( state.failed ) return ;
+
+
+
}
+
} // $ANTLR end synpred4_Fuzzy_fragment

// $ANTLR start synpred5_Fuzzy_fragment
@@ -2098,10 +2306,12 @@ const static NSInteger dfa38_transition1[] = {-1};
// Fuzzy.g:1:68: ( FIELD ) // ruleBlockSingleAlt
// Fuzzy.g:1:68: FIELD // alt
{
-        [self mFIELD]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
+    [self mFIELD]; if ( state.failed ) return ;
+
+
+
}
+
} // $ANTLR end synpred5_Fuzzy_fragment

// $ANTLR start synpred6_Fuzzy_fragment
@@ -2110,10 +2320,12 @@ const static NSInteger dfa38_transition1[] = {-1};
// Fuzzy.g:1:74: ( STAT ) // ruleBlockSingleAlt
// Fuzzy.g:1:74: STAT // alt
{
-        [self mSTAT]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
+    [self mSTAT]; if ( state.failed ) return ;
+
+
+
}
+
} // $ANTLR end synpred6_Fuzzy_fragment

// $ANTLR start synpred7_Fuzzy_fragment
@@ -2122,10 +2334,12 @@ const static NSInteger dfa38_transition1[] = {-1};
// Fuzzy.g:1:79: ( CALL ) // ruleBlockSingleAlt
// Fuzzy.g:1:79: CALL // alt
{
-        [self mCALL]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
+    [self mCALL]; if ( state.failed ) return ;
+
+
+
}
+
} // $ANTLR end synpred7_Fuzzy_fragment

// $ANTLR start synpred8_Fuzzy_fragment
@@ -2134,10 +2348,12 @@ const static NSInteger dfa38_transition1[] = {-1};
// Fuzzy.g:1:84: ( COMMENT ) // ruleBlockSingleAlt
// Fuzzy.g:1:84: COMMENT // alt
{
-        [self mCOMMENT]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
+    [self mCOMMENT]; if ( state.failed ) return ;
+
+
+
}
+
} // $ANTLR end synpred8_Fuzzy_fragment

// $ANTLR start synpred9_Fuzzy_fragment
@@ -2146,14 +2362,12 @@ const static NSInteger dfa38_transition1[] = {-1};
// Fuzzy.g:1:92: ( SL_COMMENT ) // ruleBlockSingleAlt
// Fuzzy.g:1:92: SL_COMMENT // alt
{
-        [self mSL_COMMENT]; if ( state.failed == YES ) return ;
-      /* element() */
-     /* elements */
+    [self mSL_COMMENT]; if ( state.failed ) return ;
+
+
+
}
-} // $ANTLR end synpred9_Fuzzy_fragment

-@end /* end of Fuzzy implementation line 397 */
+} // $ANTLR end synpred9_Fuzzy_fragment

-/* End of code
- * =============================================================================
- */
+@end /* end of Fuzzy implementation line 397 */
\ No newline at end of file
diff --git a/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.tokens b/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.tokens
index 3a7034c..7f37cc5 100644
--- a/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.tokens
+++ b/runtime/ObjC/Framework/examples/fuzzy/Fuzzy.tokens
@@ -1,18 +1,18 @@
-STAT=15
-CLASS=10
-ESC=19
-CHAR=21
-ID=8
-QID=9
-TYPE=11
-IMPORT=6
-WS=4
-ARG=12
-QIDStar=5
-SL_COMMENT=18
-RETURN=7
-FIELD=14
-CALL=16
-COMMENT=17
+ARG=4
+CALL=5
+CHAR=6
+CLASS=7
+COMMENT=8
+ESC=9
+FIELD=10
+ID=11
+IMPORT=12
METHOD=13
-STRING=20
+QID=14
+QIDStar=15
+RETURN=16
+SL_COMMENT=17
+STAT=18
+STRING=19
+TYPE=20
+WS=21
diff --git a/runtime/ObjC/Framework/examples/fuzzy/main.m b/runtime/ObjC/Framework/examples/fuzzy/main.m
index a6b4e2f..379a519 100644
--- a/runtime/ObjC/Framework/examples/fuzzy/main.m
+++ b/runtime/ObjC/Framework/examples/fuzzy/main.m
@@ -1,21 +1,21 @@
#import <Cocoa/Cocoa.h>
-#import "FuzzyLexer.h"
+#import "Fuzzy.h"
#import "antlr3.h"

int main(int argc, const char * argv[])
{
NSError *error;
NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
-	NSString *input = [NSString stringWithContentsOfFile:@"../../examples/fuzzy/input"  encoding:NSASCIIStringEncoding error:&error];
+	NSString *input = [NSString stringWithContentsOfFile:@"/Users/acondit/source/antlr3/acondit_localhost/code/antlr/antlr3-main/runtime/ObjC/Framework/examples/fuzzy/input"  encoding:NSASCIIStringEncoding error:&error];
NSLog(@"%@", input);
ANTLRStringStream *stream = [ANTLRStringStream newANTLRStringStream:input];
Fuzzy *lex = [Fuzzy newFuzzyWithCharStream:stream];
ANTLRCommonTokenStream *tokens = [ANTLRCommonTokenStream newANTLRCommonTokenStreamWithTokenSource:lex];
-//	NSLog( [tokens toString] );
+	NSLog( [tokens toString] );

id<ANTLRToken> currentToken;
while ((currentToken = [lex nextToken]) && [currentToken getType] != ANTLRTokenTypeEOF) {
-//		NSLog(@"### %@", [currentToken toString]);
+		NSLog(@"### %@", [currentToken toString]);
}

[lex release];

