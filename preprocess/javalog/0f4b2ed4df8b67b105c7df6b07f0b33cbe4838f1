commit 0f4b2ed4df8b67b105c7df6b07f0b33cbe4838f1
Author:     parrt <parrt@antlr.org>
AuthorDate: Tue Mar 29 09:58:51 2011 -0800
Commit:     parrt <parrt@antlr.org>
CommitDate: Tue Mar 29 09:58:51 2011 -0800

TJP follow up to Sam's conversion from v2 to v3 grammars. removed a few imports etc...

[git-p4: depot-paths = "//depot/code/antlr/antlr3-main/": change = 7953]

diff --git a/tool/src/main/java/org/antlr/Tool.java b/tool/src/main/java/org/antlr/Tool.java
index f3fa2db..8f3b9d6 100644
--- a/tool/src/main/java/org/antlr/Tool.java
+++ b/tool/src/main/java/org/antlr/Tool.java
@@ -27,7 +27,6 @@
*/
package org.antlr;

-import antlr.ANTLRException;
import org.antlr.analysis.*;
import org.antlr.codegen.CodeGenerator;
import org.antlr.misc.Graph;
@@ -366,7 +365,7 @@ public class Tool {
* @param grammarFileName The grammar file we are checking
*/
public boolean buildRequired(String grammarFileName)
-        throws IOException, ANTLRException
+        throws IOException
{
BuildDependencyGenerator bd =
new BuildDependencyGenerator(this, grammarFileName);
diff --git a/tool/src/main/java/org/antlr/codegen/CodeGenerator.java b/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
index 085ee5d..31946ed 100644
--- a/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
+++ b/tool/src/main/java/org/antlr/codegen/CodeGenerator.java
@@ -28,7 +28,6 @@
package org.antlr.codegen;


-import antlr.TokenStreamRewriteEngine;
import org.antlr.Tool;
import org.antlr.analysis.*;
import org.antlr.analysis.DFA;
diff --git a/tool/src/main/java/org/antlr/codegen/PythonTarget.java b/tool/src/main/java/org/antlr/codegen/PythonTarget.java
index 1fb6bec..d087f4c 100644
--- a/tool/src/main/java/org/antlr/codegen/PythonTarget.java
+++ b/tool/src/main/java/org/antlr/codegen/PythonTarget.java
@@ -35,6 +35,7 @@ full of WTFs - though IMHO Java is the Real WTF(TM) here...

package org.antlr.codegen;

+import org.antlr.runtime.Token;
import org.antlr.tool.Grammar;

import java.util.ArrayList;
@@ -86,7 +87,7 @@ public class PythonTarget extends Target {
return l;
}

-    public List postProcessAction(List chunks, antlr.Token actionToken) {
+    public List postProcessAction(List chunks, Token actionToken) {
/* TODO
- check for and report TAB usage
*/
@@ -107,12 +108,12 @@ public class PythonTarget extends Target {

if ( chunk instanceof String ) {
String text = (String)chunks.get(i);
-				if ( nChunks.size() == 0 && actionToken.getColumn() > 0 ) {
+				if ( nChunks.size() == 0 && actionToken.getCharPositionInLine() >= 0 ) {
// first chunk and some 'virtual' WS at beginning
// prepend to this chunk

String ws = "";
-					for ( int j = 0 ; j < actionToken.getColumn() ; j++ ) {
+					for ( int j = 0 ; j < actionToken.getCharPositionInLine() ; j++ ) {
ws += " ";
}
text = ws + text;
@@ -125,12 +126,12 @@ public class PythonTarget extends Target {
}
}
else {
-				if ( nChunks.size() == 0 && actionToken.getColumn() > 0 ) {
+				if ( nChunks.size() == 0 && actionToken.getCharPositionInLine() >= 0 ) {
// first chunk and some 'virtual' WS at beginning
// add as a chunk of its own

String ws = "";
-					for ( int j = 0 ; j < actionToken.getColumn() ; j++ ) {
+					for ( int j = 0 ; j <= actionToken.getCharPositionInLine() ; j++ ) {
ws += " ";
}
nChunks.add(ws);
diff --git a/tool/src/main/java/org/antlr/tool/BuildDependencyGenerator.java b/tool/src/main/java/org/antlr/tool/BuildDependencyGenerator.java
index f45492f..f88a053 100644
--- a/tool/src/main/java/org/antlr/tool/BuildDependencyGenerator.java
+++ b/tool/src/main/java/org/antlr/tool/BuildDependencyGenerator.java
@@ -83,7 +83,7 @@ public class BuildDependencyGenerator {
protected StringTemplateGroup templates;

public BuildDependencyGenerator(Tool tool, String grammarFileName)
-            throws IOException, antlr.TokenStreamException, antlr.RecognitionException {
+            throws IOException {
this.tool = tool;
this.grammarFileName = grammarFileName;
grammar = tool.getRootGrammar(grammarFileName);

