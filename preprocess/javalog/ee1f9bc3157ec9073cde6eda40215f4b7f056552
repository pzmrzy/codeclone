commit ee1f9bc3157ec9073cde6eda40215f4b7f056552
Author:     Sam Harwell <sam@tunnelvisionlabs.com>
AuthorDate: Tue Dec 4 16:01:46 2012 -0600
Commit:     Sam Harwell <sam@tunnelvisionlabs.com>
CommitDate: Tue Dec 4 16:01:46 2012 -0600

Fix uses of generics, remove unnecessary cast

diff --git a/tool/src/main/java/org/antlr/codegen/CppTarget.java b/tool/src/main/java/org/antlr/codegen/CppTarget.java
index 3d96bc7..b43f655 100755
--- a/tool/src/main/java/org/antlr/codegen/CppTarget.java
+++ b/tool/src/main/java/org/antlr/codegen/CppTarget.java
@@ -39,7 +39,7 @@ import java.util.Map;

public class CppTarget extends Target {

-    ArrayList strings = new ArrayList();
+    ArrayList<String> strings = new ArrayList<String>();

@Override
protected void genRecognizerFile(Tool tool,
@@ -66,7 +66,7 @@ public class CppTarget extends Target {

//Its better we remove the EOF Token, as it would have been defined everywhere in C.
//we define it later as "EOF_TOKEN" instead of "EOF"
-        ST.AttributeList tokens = (ST.AttributeList) headerFileST.getAttribute("tokens");
+        ST.AttributeList<?> tokens = (ST.AttributeList<?>) headerFileST.getAttribute("tokens");
for( int i = 0; i < tokens.size(); ++i )
{
boolean can_break = false;
@@ -74,16 +74,14 @@ public class CppTarget extends Target {
if( tok instanceof Aggregate )
{
Aggregate atok = (Aggregate) tok;
-				Iterator it = atok.properties.entrySet().iterator();
-				while (it.hasNext()) {
-					Map.Entry pairs = (Map.Entry)it.next();
+				for (Map.Entry<String, Object> pairs : atok.properties.entrySet()) {
if( pairs.getValue().equals("EOF") )
{
tokens.remove(i);
can_break = true;
break;
}
-    			}
+				}
}

if( can_break )
diff --git a/tool/src/main/java/org/antlr/tool/GrammarAST.java b/tool/src/main/java/org/antlr/tool/GrammarAST.java
index d683d7e..03da98c 100644
--- a/tool/src/main/java/org/antlr/tool/GrammarAST.java
+++ b/tool/src/main/java/org/antlr/tool/GrammarAST.java
@@ -343,7 +343,7 @@ public class GrammarAST extends CommonTree {


public GrammarAST[] getChildrenAsArray() {
-        return (GrammarAST[])(getChildren().toArray(new GrammarAST[getChildCount()]));
+        return getChildren().toArray(new GrammarAST[getChildCount()]);
}

private static final GrammarAST DescendantDownNode = new GrammarAST(Token.DOWN, "DOWN");

